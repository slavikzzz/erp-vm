////////////////////////////////////////////////////////////////////////////////
// Подсистема "Займы сотрудникам".
// Процедуры и функции, предназначенные для обслуживания выданных сотрудникам займов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Метод регистрирует во взаиморасчетах выдачу займа (или очередного транша) сотруднику.
// Может быть использован кассовыми документами 
// для регистрации операции по займам сотрудникам.
//
// Параметры:
//	- Движения - коллекция движений документа.
//	- Договор - ссылка на договор займа (документ).
//	- Сумма - выданная сумма
//	- ДатаПредоставления - дата операции.
//	- Организация
//	- ФизическоеЛицо
//	- Отказ.
//
Процедура ЗарегистрироватьПредоставлениеЗайма(Движения, Договор, Сумма, ДатаПредоставления, Организация, ФизическоеЛицо, Отказ) Экспорт
	
	Движения.ВзаиморасчетыПоЗаймамСотрудникам.Записывать = Истина;
	
	НоваяЗапись = Движения.ВзаиморасчетыПоЗаймамСотрудникам.ДобавитьПриход();
	НоваяЗапись.Период = ДатаПредоставления;
	НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.ДоговорЗайма = Договор;
	НоваяЗапись.СуммаЗайма = Сумма;
	
КонецПроцедуры

// Метод регистрирует во взаиморасчетах частичное погашение займа сотрудником.
//
// Параметры:
//	- Движения - коллекция движений документа.
//	- Договор - ссылка на договор займа (документ).
//	- СуммаЗайма - погашенная сумма.
//  - Проценты - сумма погашенных процентов.
//	- ДатаРегистрации - дата операции.
//	- Организация
//	- ФизическоеЛицо
//	- Отказ.
//
Процедура ЗарегистрироватьЧастичноПогашенныйЗаем(Движения, Договор, СуммаЗайма, Проценты, ДатаРегистрации, Организация, ФизическоеЛицо, Отказ) Экспорт 
	
	Движения.ВзаиморасчетыПоЗаймамСотрудникам.Записывать = Истина;
	
	Если Проценты > 0 Тогда 
		НоваяЗапись = Движения.ВзаиморасчетыПоЗаймамСотрудникам.ДобавитьПриход();
		НоваяЗапись.Период = КонецДня(ДатаРегистрации);
		НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
		НоваяЗапись.Организация = Организация;
		НоваяЗапись.ДоговорЗайма = Договор;
		НоваяЗапись.Проценты = Проценты;
	КонецЕсли;	
	
	НоваяЗапись = Движения.ВзаиморасчетыПоЗаймамСотрудникам.ДобавитьРасход();
	НоваяЗапись.Период = КонецДня(ДатаРегистрации);
	НоваяЗапись.ФизическоеЛицо = ФизическоеЛицо;
	НоваяЗапись.Организация = Организация;
	НоваяЗапись.ДоговорЗайма = Договор;
	НоваяЗапись.СуммаЗайма = СуммаЗайма;
	НоваяЗапись.Проценты = Проценты;
	
КонецПроцедуры	

// Метод регистрирует внеочередное погашение займа сотруднику.
// Внеочередные погашения отличаются от погашения из зарплаты тем, 
// что они не уменьшают сумму ежемесячного платежа.
//
// Может быть использован кассовыми документами 
// для регистрации операции по займам сотрудникам.
//
// Параметры:
//	- Движения - коллекция движений документа.
//	- Договор - ссылка на договор займа (документ).
//	- Сумма - внесенная сумма
//	- ДатаПогашения - дата операции.
//	- Организация
//	- ФизическоеЛицо
//	- Регистратор - ссылка на документ-владелец движений.
//	- Отказ.
//
Процедура ЗарегистрироватьПогашениеЗайма(Движения, Договор, Сумма, ДатаПогашения, Организация, ФизическоеЛицо, Регистратор, Отказ) Экспорт
	
	// Нужно посчитать остаток процентов на дату погашения,
	// в первую очередь сумма погашения пойдет на погашение займа, 
	// остаток - на погашение процентов.
	// Кроме того, нужно начислить материальную выгоду.
	
	// Выполняем расчет займов, главным образом нужно начисление процентов.
	РасчетЗаймов = РасчетЗаймовСотрудникам(
						Организация, 
						КонецДня(ДатаПогашения) - 1, 
						Регистратор,
						Ложь,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Договор));
						
	Если РасчетЗаймов.Количество() = 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Невозможно зарегистрировать погашение займа на дату %1. 
							   |Существуют более поздние операции по договору займа или заем полностью погашен.';
							   |en = 'Cannot register the loan repayment on date %1.
							   |Transactions processed after the date specified were found, or the loan is fully repaid.'"),
							Формат(ДатаПогашения, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполняем погашение процентов и займа.
	ВсегоНачисленоПроцентов	= РасчетЗаймов.Итог("НачисленоПроцентов");
	ОстатокЗайма = РасчетЗаймов[0].ОстатокЗаймаНаДатуОперации;
	ВсегоПогашеноЗайма		= Мин(ОстатокЗайма, Сумма);
	ВсегоПогашеноПроцентов	= Сумма - ВсегоПогашеноЗайма;
	
	// Распределяем полученные значения по таблице расчета пропорционально дням.
	МассивДней				= ОбщегоНазначения.ВыгрузитьКолонку(РасчетЗаймов, "Дней");
	МассивПогашеноЗайма		= ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВсегоПогашеноЗайма, МассивДней);
	Если ВсегоНачисленоПроцентов > 0 Тогда
		МассивНачисленоПроцентов = ОбщегоНазначения.ВыгрузитьКолонку(РасчетЗаймов, "НачисленоПроцентов");
		МассивПогашеноПроцентов	 = ЗарплатаКадрыКлиентСервер.РаспределитьПропорциональноКоэффициентам(ВсегоПогашеноПроцентов, МассивНачисленоПроцентов);
	КонецЕсли;
	
	Для Индекс = 0 По МассивДней.ВГраница() Цикл
		РасчетЗаймов[Индекс].ПогашениеЗайма = 0;
		РасчетЗаймов[Индекс].ПогашениеПроцентов = 0;
		Если ВсегоПогашеноЗайма > 0 Тогда
			РасчетЗаймов[Индекс].ПогашениеЗайма = МассивПогашеноЗайма[Индекс];
		КонецЕсли;
		Если ВсегоНачисленоПроцентов > 0 И МассивПогашеноПроцентов <> Неопределено Тогда
			РасчетЗаймов[Индекс].ПогашениеПроцентов = МассивПогашеноПроцентов[Индекс];
		КонецЕсли;
	КонецЦикла;
	
	// Выполняем расчет материальной выгоды, которую также надо зарегистрировать при погашении процентов.
	УчетНДФЛРасширенный.РасчетМатериальнойВыгодыПоЗаймамСотрудников(Организация, ДатаПогашения, РасчетЗаймов, Регистратор);
	
	// Регистрируем операцию в учете.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Регистратор КАК ДокументСсылка,
	|	0 КАК ИдентификаторСтроки,
	|	&Организация КАК Организация,
	|	&ДатаОперации КАК ДатаОперации,
	|	НАЧАЛОПЕРИОДА(&ДатаОперации, МЕСЯЦ) КАК Месяц,
	|	РасчетЗаймов.ДатаОкончания КАК ДатаПолученияДохода,
	|	РасчетЗаймов.ФизическоеЛицо,
	|	РасчетЗаймов.Подразделение,
	|	РасчетЗаймов.ДоговорЗайма,
	|	РасчетЗаймов.НачисленоПроцентов,
	|	РасчетЗаймов.ПогашениеПроцентов,
	|	РасчетЗаймов.ПогашениеЗайма,
	|	РасчетЗаймов.МатериальнаяВыгода,
	|	РасчетЗаймов.НалогНаМатериальнуюВыгоду
	|ПОМЕСТИТЬ ВТПогашениеЗаймов
	|ИЗ
	|	&РасчетЗаймов КАК РасчетЗаймов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПогашениеЗаймов.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТПогашениеЗаймов КАК ПогашениеЗаймов";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РасчетЗаймов", РасчетЗаймов);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаПогашения);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	ДанныеДляПроведения = Новый Структура;
	ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения);
	
	// Получаем данные для проведения:
	// - взаиморасчеты по займам и материальная выгода.
	ДополнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, МенеджерВременныхТаблиц);
	
	// - Учет начисленной зарплаты и НДФЛ.
	
	// Удержания
	ВидыУдержаний = Новый Массив;
	ВидыУдержаний.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам);
	ВидыУдержаний.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму);
	
	// Получаем только данные "Справочно" для отображения в расчетных отчетах.
	СоздатьВТПогашениеЗаймовПоВидамУдержаний(МенеджерВременныхТаблиц, ВидыУдержаний);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// 1. Распределяем суммы по рабочим местам.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПогашениеЗаймов.ВидУдержания КАК НачислениеУдержание,
		|	ПогашениеЗаймов.*
		|ИЗ
		|	ВТПогашениеЗаймовПоВидамУдержаний КАК ПогашениеЗаймов";
		УдержанияЗаймов = Запрос.Выполнить().Выгрузить();
		УдержанияКРаспределению = КоллекцияРаспределяемыхУдержаний();
		Для Каждого Строка Из УдержанияЗаймов Цикл
			ЗаполнитьЗначенияСвойств(УдержанияКРаспределению.Добавить(), Строка);
		КонецЦикла;
		ЗаймыПоРабочимМестам = УчетНачисленнойЗарплатыРасширенный.РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределению, НачалоМесяца(ДатаПогашения), Организация);
		
		// Получаем для сотрудников сведения о бухучете по умолчанию.
		// Сначала помещаем распределение по рабочим местам во временную таблицу...
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаймыПоРабочимМестам.Сотрудник,
		|	ЗаймыПоРабочимМестам.Организация,
		|	ЗаймыПоРабочимМестам.Подразделение,
		|	&ДатаОперации КАК Период,
		|	ЗаймыПоРабочимМестам.НачислениеУдержание КАК ВидУдержания,
		|	ЗаймыПоРабочимМестам.НачислениеУдержание КАК Удержание,
		|	ЗаймыПоРабочимМестам.*
		|ПОМЕСТИТЬ ВТЗаймыПоРабочимМестам
		|ИЗ
		|	&ЗаймыПоРабочимМестам КАК ЗаймыПоРабочимМестам";
		Запрос.УстановитьПараметр("ЗаймыПоРабочимМестам", ЗаймыПоРабочимМестам);
		Запрос.Выполнить();
		
		// .. Затем получаем сведения о бухучете.
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВременныхТаблиц, "ВТЗаймыПоРабочимМестам");
		
		РаботаВХозрасчетнойОрганизации = ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации");
		СтатьяПрочиеРасчетыСПерсоналом = ОтражениеЗарплатыВБухучетеРасширенный.СтатьяПрочиеРасчетыСПерсоналом();
		
		// .. И присоединяем их к данным погашения и налога на материальную выгоду.
		Запрос.УстановитьПараметр("СтатьяПрочиеРасчетыСПерсоналом", СтатьяПрочиеРасчетыСПерсоналом);
		Запрос.УстановитьПараметр("РаботаВХозрасчетнойОрганизации", РаботаВХозрасчетнойОрганизации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник,
		|	РаспределениеУдержаний.Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования,
		|	ВЫБОР
		|		КОГДА &РаботаВХозрасчетнойОрганизации
		|			И ЗаймыПоРабочимМестам.Удержание = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
		|			ТОГДА &СтатьяПрочиеРасчетыСПерсоналом
		|		ИНАЧЕ РаспределениеУдержаний.СтатьяРасходов
		|	КОНЕЦ КАК СтатьяРасходов,
		|	ЗаймыПоРабочимМестам.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	ЗаймыПоРабочимМестам.*
		|ИЗ
		|	ВТСведенияОБухучетеЗарплатыСотрудников КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаймыПоРабочимМестам КАК ЗаймыПоРабочимМестам
		|		ПО (ЗаймыПоРабочимМестам.Сотрудник = РаспределениеУдержаний.Сотрудник)
		|			И (ЗаймыПоРабочимМестам.Подразделение = РаспределениеУдержаний.Подразделение)
		|			И (ЗаймыПоРабочимМестам.Период = РаспределениеУдержаний.Период)";
		ДанныеДляПроведения.УдержанияЗаймов = Запрос.Выполнить().Выгрузить();
		
		Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТСведенияОБухучетеЗарплатыСотрудников";
		Запрос.Выполнить();
		
	Иначе
		// Удержания для учета начисленной зарплаты.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ПогашениеЗаймов.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	ПогашениеЗаймов.Сумма КАК Сумма,
		|	ПогашениеЗаймов.*
		|ИЗ
		|	ВТПогашениеЗаймовПоВидамУдержаний КАК ПогашениеЗаймов";
		ДанныеДляПроведения.УдержанияЗаймов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// НДФЛ с материальной выгоды
	СоздатьВТНалогНаМатериальнуюВыгоду(МенеджерВременныхТаблиц);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Распределяем НДФЛ по рабочим местам.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалогНаМатериальнуюВыгоду.*
		|ИЗ
		|	ВТНалогНаМатериальнуюВыгоду КАК НалогНаМатериальнуюВыгоду";
		НДФЛ = Запрос.Выполнить().Выгрузить();

		УдержанияКРаспределению = КоллекцияРаспределяемыхУдержаний();
		Для Каждого Строка Из НДФЛ Цикл
			НоваяСтрока = УдержанияКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ДатаПолученияДохода = Строка.МесяцНалоговогоПериода;
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		КонецЦикла;
		НДФЛПоРабочимМестам = УчетНачисленнойЗарплатыРасширенный.РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределению, НачалоМесяца(ДатаПогашения), Организация, , , Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
		
		// Получаем для сотрудников сведения о бухучете по умолчанию.
		// Сначала помещаем распределение по рабочим местам во временную таблицу...
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДФЛПоРабочимМестам.Сотрудник,
		|	НДФЛПоРабочимМестам.Организация,
		|	НДФЛПоРабочимМестам.Подразделение,
		|	НДФЛПоРабочимМестам.НачислениеУдержание КАК ВидУдержания,
		|	НДФЛПоРабочимМестам.НачислениеУдержание КАК Удержание,
		|	&ДатаОперации КАК Период,
		|	НДФЛПоРабочимМестам.*
		|ПОМЕСТИТЬ ВТНДФЛПоРабочимМестам
		|ИЗ
		|	&НДФЛПоРабочимМестам КАК НДФЛПоРабочимМестам";
		Запрос.УстановитьПараметр("НДФЛПоРабочимМестам", НДФЛПоРабочимМестам);
		Запрос.Выполнить();
		
		// .. Затем получаем сведения о бухучете.
		ОтражениеЗарплатыВБухучетеРасширенный.СоздатьВТСведенияОБухучетеЗарплатыСотрудников(МенеджерВременныхТаблиц, "ВТНДФЛПоРабочимМестам");
		
		// .. И присоединяем их к данным погашения и налога на материальную выгоду.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
		|	РаспределениеУдержаний.Подразделение КАК Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
		|	РаспределениеУдержаний.СтатьяРасходов КАК СтатьяРасходов,
		|	НДФЛПоРабочимМестам.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	НДФЛПоРабочимМестам.Сумма КАК Сумма,
		|	НДФЛПоРабочимМестам.Сумма КАК НалогПоСтавке35,
		|	НДФЛПоРабочимМестам.*,
		|	КОНЕЦПЕРИОДА(НДФЛПоРабочимМестам.ДатаПолученияДохода, МЕСЯЦ) КАК МесяцНалоговогоПериода
		|ИЗ
		|	ВТНДФЛПоРабочимМестам КАК НДФЛПоРабочимМестам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОБухучетеЗарплатыСотрудников КАК РаспределениеУдержаний
		|		ПО НДФЛПоРабочимМестам.Сотрудник = РаспределениеУдержаний.Сотрудник
		|			И НДФЛПоРабочимМестам.Подразделение = РаспределениеУдержаний.Подразделение
		|			И НДФЛПоРабочимМестам.Период = РаспределениеУдержаний.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	МесяцНалоговогоПериода";
		ДанныеДляПроведения.НалогНаМатериальнуюВыгоду = Запрос.Выполнить().Выгрузить();
		
	Иначе
		// Налог с материальной выгоды для регистрации НДФЛ в учете начисленной зарплаты.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	НалогНаМатериальнуюВыгоду.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	НалогНаМатериальнуюВыгоду.Сумма КАК Сумма,
		|	КОНЕЦПЕРИОДА(НалогНаМатериальнуюВыгоду.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	НалогНаМатериальнуюВыгоду.*
		|ИЗ
		|	ВТНалогНаМатериальнуюВыгоду КАК НалогНаМатериальнуюВыгоду
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	МесяцНалоговогоПериода";
		ДанныеДляПроведения.НалогНаМатериальнуюВыгоду = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// - взаиморасчеты по займам
	ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеДляПроведения.ВзаиморасчетыПоЗаймам, Отказ, Истина);
	
	// - Регистрация материальной выгоды в учете НДФЛ.
	УчетНДФЛ.СформироватьДоходыНДФЛПоКодамДоходовИзТаблицыЗначений(Движения, Отказ, Организация, ДатаПогашения, ДанныеДляПроведения.МатериальнаяВыгода, Истина);
	УчетНДФЛ.СформироватьНалогиВычеты(Движения, Отказ, Организация, ДатаПогашения, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
	
	УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ДанныеДляПроведения.НалогНаМатериальнуюВыгоду, Организация, ДатаПогашения);
	
	// Заполним описание данных для проведения в учете начисленной зарплаты.
	ДанныеДляПроведенияУчетЗарплаты = ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения();
	ДанныеДляПроведенияУчетЗарплаты.Движения 				= Движения;
	ДанныеДляПроведенияУчетЗарплаты.Организация 			= Организация;
	ДанныеДляПроведенияУчетЗарплаты.ПериодРегистрации 		= НачалоМесяца(ДатаПогашения);
	ДанныеДляПроведенияУчетЗарплаты.ПорядокВыплаты 			= Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
	ДанныеДляПроведенияУчетЗарплаты.ОкончательныйРасчет		= Истина;
	ДанныеДляПроведенияУчетЗарплаты.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьЗаймы(ДанныеДляПроведенияУчетЗарплаты, Отказ,
			ДанныеДляПроведения.УдержанияЗаймов, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
			
	// - Регистрация бухучета займов.
	ОтражениеЗарплатыВБухучетеРасширенный.ЗарегистрироватьНачисленияУдержания(ДанныеДляПроведенияУчетЗарплаты, Отказ,
			Неопределено, ДанныеДляПроведения.УдержанияЗаймов, ДанныеДляПроведения.НалогНаМатериальнуюВыгоду);
	
КонецПроцедуры

// Определяет полный остаток задолженности по договору займа.
//
// Параметры:
//	- Договор - договор займа (ссылка на документ).
//	- ДатаАктуальности - дата, на которую определяется задолженность.
//	- Регистратор - необязательный, позволяет исключить движения отдельного регистратора.
//
//	Возвращаемое значение - структура с полями ОбщаяСумма, СуммаЗайма, Проценты, Валюта.
//
Функция ОстатокЗадолженности(Договор, ДатаАктуальности, Регистратор = Неопределено) Экспорт
	
	ОстатокЗадолженности = Новый Структура;
	ОстатокЗадолженности.Вставить("ОбщаяСумма", 0);
	ОстатокЗадолженности.Вставить("СуммаЗайма", 0);
	ОстатокЗадолженности.Вставить("Проценты", 0);
	ОстатокЗадолженности.Вставить("Валюта", "руб");
	
	РасчетЗаймов = РасчетЗаймовСотрудникам(
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация"), 
						ДатаАктуальности, 
						Регистратор,
						Ложь,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Договор));
						
	Если РасчетЗаймов.Количество() = 0 Тогда
		// Задолженность отсутствует
		Возврат ОстатокЗадолженности;
	КонецЕсли;
	
	ПоследнийМесяц = РасчетЗаймов[РасчетЗаймов.Количество() - 1];
	СуммаЗайма = Окр(ПоследнийМесяц.ОстатокЗаймаНаДатуОперации, 2);
	Проценты = Окр(ПоследнийМесяц.ОстатокПроцентовНаДатуОперации + РасчетЗаймов.Итог("НачисленоПроцентов"), 2);
	
	ОстатокЗадолженности.Вставить("СуммаЗайма", СуммаЗайма);
	ОстатокЗадолженности.Вставить("Проценты", Проценты);
	ОстатокЗадолженности.Вставить("ОбщаяСумма", СуммаЗайма + Проценты);
	
	Возврат ОстатокЗадолженности;
	
КонецФункции

// Формирует информационный текст, содержащий сведения о состоянии задолженности.
//
// Параметры:
//	- Договор - договор займа (ссылка на документ).
//	- ДатаДокумента - дата, на которую определяется задолженность.
//	- ДокументСсылка - необязательный, позволяет исключить движения отдельного регистратора.
//
//	Возвращаемое значение - строка.
//
Функция ИнформацияОЗадолженности(Договор, ДатаДокумента, ДокументСсылка) Экспорт
	
	ДатаЗадолженности = ДатаДокумента;
	Если Не ЗначениеЗаполнено(ДатаЗадолженности) Тогда
		ДатаЗадолженности = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СтруктураЗадолженности = ОстатокЗадолженности(Договор, КонецДня(ДатаЗадолженности) + 1, ДокументСсылка);
	
	ЗадолженностьПоПроцентам = ОстатокЗадолженности(Договор, НачалоДня(ДатаЗадолженности), ДокументСсылка);
	СтруктураЗадолженности.Проценты = ЗадолженностьПоПроцентам.Проценты;
	СтруктураЗадолженности.ОбщаяСумма = СтруктураЗадолженности.СуммаЗайма + ЗадолженностьПоПроцентам.Проценты;
	
	Если СтруктураЗадолженности.ОбщаяСумма = 0 Тогда
		ДокументыПогашений = ДокументыБудущихПогашений(Договор, КонецДня(ДатаЗадолженности), ДокументСсылка);
		Если ДокументыПогашений.Количество() = 0 Тогда
			ИнфоТекст = НСтр("ru = 'Задолженность на %1 отсутствует.';
							|en = 'No debt as of %1.'");
		Иначе
			ЧастиСтроки = Новый Массив;
			ЧастиСтроки.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задолженность на %1 отсутствует, т.к. существуют документы погашения будущих периодов:';
					|en = 'There is no debt for %1 as there are deferred period repayment documents:'"),
				Формат(ДатаЗадолженности, "ДЛФ=D")));
				
			Для Каждого ДокументПогашения Из ДокументыПогашений Цикл
				ЧастиСтроки.Добавить(Символы.ПС);
				ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(
					Строка(ДокументПогашения),
					,
					,
					,
					ПолучитьНавигационнуюСсылку(ДокументПогашения)));
			КонецЦикла;
			Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
		КонецЕсли;
	Иначе
		Если СтруктураЗадолженности.ОбщаяСумма < 0 Тогда
			ИнфоТекст = НСтр("ru = 'На %1 обнаружена переплата в размере %3 %2.';
							|en = 'Overpayment in the amount of %3 %2 is found on %1.'");
		Иначе
			Если СтруктураЗадолженности.Проценты = 0 Тогда
				ИнфоТекст = НСтр("ru = 'На %1 сумма задолженности составляет %3 %2. Задолженность по процентам отсутствует.';
								|en = 'On %1 debt amount is %3 %2. No interest debt.'");
			Иначе
				ИнфоТекст = НСтр("ru = 'На %1 сумма задолженности составляет %3 %2. В том числе: основной долг %4 %2, проценты %5 %2.';
								|en = 'On %1 debt amount is %3 %2. Including: principal debt %4 %2, interest %5 %2.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИнфоТекст, 
				Формат(ДатаЗадолженности, "ДЛФ=D"),
				СтруктураЗадолженности.Валюта,
				СтруктураЗадолженности.ОбщаяСумма,
				СтруктураЗадолженности.СуммаЗайма,
				СтруктураЗадолженности.Проценты);
	
КонецФункции

// Получает действующие договоры займа по физическому лица на указанную дату.
//
// Параметры:
//	- Организация
//	- ФизическоеЛицо
//	- ДатаАктуальности - необязательный, дата, на которую требуется получить действующие договоры.
//  - ВключатьНевыданныеДоговоры - необязательный, указывает на необходимость включить в выборку договора, по которым
//                                 не выдано ни одного транша.
//
Функция ДействующиеДоговорыЗаймаПоФизическомуЛицу(Организация, ФизическоеЛицо, ДатаАктуальности = Неопределено, ВключатьНевыданныеДоговоры = Ложь) Экспорт
	
	ДатаВыборки = ДатаАктуальности;
	Если Не ЗначениеЗаполнено(ДатаАктуальности) Тогда
		ДатаВыборки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыПоЗаймамСотрудникамОстатки.ДоговорЗайма КАК ДоговорЗайма,
		|	ВзаиморасчетыПоЗаймамСотрудникамОстатки.СуммаЗаймаОстаток + ВзаиморасчетыПоЗаймамСотрудникамОстатки.ПроцентыОстаток КАК Остаток
		|ПОМЕСТИТЬ ВТДоговорыСОстатком
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Остатки(
		|			&ДатаОкончания,
		|			Организация = &Организация
		|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ВзаиморасчетыПоЗаймамСотрудникамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыПоЗаймамОбороты.ДоговорЗайма,
		|	СУММА(ВзаиморасчетыПоЗаймамОбороты.СуммаЗаймаПриход + ВзаиморасчетыПоЗаймамОбороты.ПроцентыПриход) КАК ОборотПриход
		|ПОМЕСТИТЬ ВТВзаиморасчетыПоЗаймамОбороты
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Обороты(
		|			,
		|			&ДатаОкончания,
		|			Период,
		|			Организация = &Организация
		|				И ФизическоеЛицо = &ФизическоеЛицо) КАК ВзаиморасчетыПоЗаймамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыПоЗаймамОбороты.ДоговорЗайма
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорЗаймаСотруднику.Ссылка КАК ДоговорЗайма,
		|	ВзаиморасчетыПоЗаймамСотрудникамОбороты.ОборотПриход КАК ОборотПриход,
		|	&ВключатьНевыданныеДоговоры
		|ПОМЕСТИТЬ ВТДоговорыБезДвижений
		|ИЗ
		|	Документ.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзаиморасчетыПоЗаймамОбороты КАК ВзаиморасчетыПоЗаймамСотрудникамОбороты
		|		ПО ДоговорЗаймаСотруднику.Ссылка = ВзаиморасчетыПоЗаймамСотрудникамОбороты.ДоговорЗайма
		|ГДЕ
		|	ДоговорЗаймаСотруднику.Организация = &Организация
		|	И ДоговорЗаймаСотруднику.ФизическоеЛицо = &ФизическоеЛицо
		|	И ДоговорЗаймаСотруднику.ПометкаУдаления = ЛОЖЬ
		|	И ДоговорЗаймаСотруднику.Дата <= &ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДоговорыСОстатком.ДоговорЗайма
		|ИЗ
		|	ВТДоговорыСОстатком КАК ВТДоговорыСОстатком
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДоговорыБезДвижений.ДоговорЗайма
		|ИЗ
		|	ВТДоговорыБезДвижений КАК ВТДоговорыБезДвижений
		|ГДЕ
		|	ВТДоговорыБезДвижений.ОборотПриход ЕСТЬ NULL 
		|	И ВТДоговорыБезДвижений.ВключатьНевыданныеДоговоры = ИСТИНА";

	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаВыборки));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ВключатьНевыданныеДоговоры", ВключатьНевыданныеДоговоры);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат РезультатЗапроса.ВыгрузитьКолонку("ДоговорЗайма");
	КонецЕсли;	

КонецФункции

// Определяет изменения условий договора займа за месяц
//
// Параметры:
//	- Договор			- договор займа (ссылка на документ).
//	- Регистратор		- изменение договора займа (ссылка на документ), убирает движения регистратора.
//	- ДатаАктуальности	- необязательный, дата до которой определяются изменения условий за месяц.
//
//	Возвращаемое значение - массив соответствий с полями ДатаИзменений, ПроцентнаяСтавка,
//							РазмерПлатежа, РазмерПогашения, КоличествоДней.
//
Функция ИзмененияУсловийЗаймаЗаМесяц(Договор, Регистратор, ДатаАктуальности = Неопределено) Экспорт
	
	ИзмененияУсловий = Новый Массив;
	
	// При незаданной дате актуальности отсутствуют изменения условий
	Если ДатаАктуальности = Неопределено Или День(ДатаАктуальности) = 1 Тогда
		Возврат ИзмененияУсловий;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияДоговораЗаймаСотруднику.Период КАК ДатаИзменений,
	|	УсловияДоговораЗаймаСотруднику.Организация КАК Организация,
	|	УсловияДоговораЗаймаСотруднику.ДоговорЗайма КАК ДоговорЗайма,
	|	УсловияДоговораЗаймаСотруднику.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	УсловияДоговораЗаймаСотруднику.РазмерПлатежа КАК РазмерПлатежа,
	|	УсловияДоговораЗаймаСотруднику.РазмерПогашения КАК РазмерПогашения
	|ИЗ
	|	РегистрСведений.УсловияДоговораЗаймаСотруднику КАК УсловияДоговораЗаймаСотруднику
	|ГДЕ
	|	УсловияДоговораЗаймаСотруднику.ДоговорЗайма = &ДоговорЗайма
	|	И УсловияДоговораЗаймаСотруднику.Регистратор <> &Регистратор
	|	И УсловияДоговораЗаймаСотруднику.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаНачала,
	|	УсловияДоговораЗаймаСотрудникуСрезПоследних.Организация,
	|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ДоговорЗайма,
	|	УсловияДоговораЗаймаСотрудникуСрезПоследних.ПроцентнаяСтавка,
	|	УсловияДоговораЗаймаСотрудникуСрезПоследних.РазмерПлатежа,
	|	УсловияДоговораЗаймаСотрудникуСрезПоследних.РазмерПогашения
	|ИЗ
	|	РегистрСведений.УсловияДоговораЗаймаСотруднику.СрезПоследних(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -1), МЕСЯЦ), ДоговорЗайма = &ДоговорЗайма) КАК УсловияДоговораЗаймаСотрудникуСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	УсловияДоговораЗаймаСотруднику.Период";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДоговорЗайма",		Договор);
	Запрос.УстановитьПараметр("ДатаНачала",			НачалоМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("ДатаОкончания",		КонецМесяца(ДатаАктуальности));
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ИзмененияУсловий;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеСтроки = ЗаймыСотрудникамКлиентСервер.ОписаниеСтрокиМассиваИзмененияУсловий();
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, Выборка);
		ИзмененияУсловий.Добавить(ОписаниеСтроки);
	КонецЦикла;
	
	// Добавляем пустую строку для заполнения данными текущего документа
	ОписаниеСтроки = ЗаймыСотрудникамКлиентСервер.ОписаниеСтрокиМассиваИзмененияУсловий();
	ИзмененияУсловий.Добавить(ОписаниеСтроки);
	
	// Если не было выдачи займа в документе "Договор займа сотруднику", то запись в РС "Условия договора займа сотруднику"
	// необходима только для печати графика и в расчётах не участвует.
	ДатаВыдачиЗайма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ДатаВыдачи");
	Если ДатаВыдачиЗайма = '00010101' Тогда
		ИзмененияУсловий.Удалить(0);
	КонецЕсли;
	
	Возврат ИзмененияУсловий;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ДоговорЗаймаСотруднику);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf04-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеУсловийДоговораЗаймаСотруднику);
	
КонецПроцедуры

#КонецОбласти

// Конструктор таблицы погашения займов.
//
Функция ТаблицаПогашениеЗаймов() Экспорт
	
	РасчетЗаймов = Новый ТаблицаЗначений;
	РасчетЗаймов.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РасчетЗаймов.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	РасчетЗаймов.Колонки.Добавить("ДоговорЗайма", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	РасчетЗаймов.Колонки.Добавить("ПроцентнаяСтавка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 2)));
	РасчетЗаймов.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	РасчетЗаймов.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	РасчетЗаймов.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0)));
	РасчетЗаймов.Колонки.Добавить("ОстатокЗайма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РасчетЗаймов.Колонки.Добавить("ОстатокЗаймаНаДатуОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РасчетЗаймов.Колонки.Добавить("ОстатокПроцентовНаДатуОперации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РасчетЗаймов.Колонки.Добавить("НачисленоПроцентов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	РасчетЗаймов.Колонки.Добавить("РазмерПлатежа", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	РасчетЗаймов.Колонки.Добавить("ПогашениеПроцентов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	РасчетЗаймов.Колонки.Добавить("ПогашениеЗайма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 5)));
	РасчетЗаймов.Колонки.Добавить("МатериальнаяВыгодаОблагаетсяНДФЛ", Новый ОписаниеТипов("Булево"));
	РасчетЗаймов.Колонки.Добавить("РаспределениеПоСтатьям", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	РасчетЗаймов.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	РасчетЗаймов.Колонки.Добавить("РассчитыватьМатериальнуюВыгоду", Новый ОписаниеТипов("Булево"));
	
	РасчетЗаймов.Колонки.Добавить("МатериальнаяВыгода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РасчетЗаймов.Колонки.Добавить("НалогНаМатериальнуюВыгоду", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	
	РасчетЗаймов.Колонки.Добавить("ФиксСтрока", Новый ОписаниеТипов("Булево"));
	РасчетЗаймов.Колонки.Добавить("ФиксРасчет", Новый ОписаниеТипов("Булево"));
	
	Возврат РасчетЗаймов;
	
КонецФункции

// Метод выполняет начисление процентов и расчет суммы займов к погашению.
//
// Параметры:
//	- Организация - организация, по данным которой производятся расчеты.
//	- ДатаОперации - дата, на которую выполняются расчеты, конец периода, если за период.
//	- Регистратор - документ, которым выполняются расчеты.
//	- РасчетУвольнения - булево, если расчет выполняется по документу увольнения и следует расчитать остаток займа
//                       и проценты на дату увольнения.
//	- ДоговорыЗайма - массив договоров займа, если расчет нужно выполнить по определенным договорам, а не по всем
//	                  действующим.
//	- Сотрудники - массив сотрудников, если расчет выполняется по определенным сотрудникам.
//	- Подразделение - подразделение, если расчет выполняется по определенному подразделению.
//
// Возвращаемое значение - таблица значений с колонками:
//	- ФизическоеЛицо
//	- Подразделение
//	- ДоговорЗайма
//	- ПроцентнаяСтавка
//	- ДатаНачала
//	- ДатаОкончания
//	- Дней
//	- ОстатокЗайма
//	- НачисленоПроцентов
//	- РазмерПлатежа
//	- ПогашениеПроцентов
//	- ПогашениеЗайма
//	- МатериальнаяВыгодаОблагаетсяНДФЛ.
//
Функция РасчетЗаймовСотрудникам(Организация, ДатаОперации, Регистратор, РасчетУвольнения, ДоговорыЗайма = Неопределено, Сотрудники = Неопределено, Подразделение = Неопределено, ИсключатьУволенныхСотрудников = Ложь, ИсключаемыеРегистраторы = Неопределено) Экспорт
	
	// Таблица результатов расчета займов.
	РасчетЗаймов = ТаблицаПогашениеЗаймов();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Выбрать займы, по которым на дату операции положительный остаток основного долга.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Сотрудники <> Неопределено И Сотрудники.Количество() > 1 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)";
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		УстановитьПривилегированныйРежим(Истина);
		Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДоговорыЗаймаПредварительно.ДоговорЗайма КАК ДоговорЗайма,
	|	ВТДоговорыЗаймаПредварительно.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВТДоговорыЗаймаПредварительно.СуммаЗайма) КАК СуммаЗайма
	|ПОМЕСТИТЬ ВТДоговорыЗайма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыПоЗаймамСотрудникамОстатки.ДоговорЗайма КАК ДоговорЗайма,
	|		ВзаиморасчетыПоЗаймамСотрудникамОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВзаиморасчетыПоЗаймамСотрудникамОстатки.СуммаЗаймаОстаток КАК СуммаЗайма,
	|		ВзаиморасчетыПоЗаймамСотрудникамОстатки.ПроцентыОстаток КАК СуммаПроцентов
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Остатки(
	|				КОНЕЦПЕРИОДА(&ДатаОперации, ДЕНЬ),
	|				Организация = &Организация
	|					И &ФильтрПоСотрудникам
	|					И &ФильтрПоДоговорамЗайма) КАК ВзаиморасчетыПоЗаймамСотрудникамОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыПоЗаймам.ДоговорЗайма,
	|		ВзаиморасчетыПоЗаймам.ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВзаиморасчетыПоЗаймам.СуммаЗайма
	|			ИНАЧЕ -ВзаиморасчетыПоЗаймам.СуммаЗайма
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВзаиморасчетыПоЗаймам.Проценты
	|			ИНАЧЕ -ВзаиморасчетыПоЗаймам.Проценты
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|	ГДЕ
	|		ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, ДЕНЬ)
	|		И ВзаиморасчетыПоЗаймам.Организация = &Организация
	|		И &РегистраторФильтрПоСотрудникам
	|		И &РегистраторФильтрПоДоговорамЗайма
	|		И ВзаиморасчетыПоЗаймам.Регистратор = &Регистратор) КАК ВТДоговорыЗаймаПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДоговорыЗаймаПредварительно.ДоговорЗайма,
	|	ВТДоговорыЗаймаПредварительно.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВТДоговорыЗаймаПредварительно.СуммаЗайма) > 0
	|		ИЛИ СУММА(ВТДоговорыЗаймаПредварительно.СуммаПроцентов) > 0)";
	
	Если ДоговорыЗайма = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоДоговорамЗайма", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистраторФильтрПоДоговорамЗайма", "ИСТИНА");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоДоговорамЗайма", "ДоговорЗайма В (&ДоговорыЗайма)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистраторФильтрПоДоговорамЗайма", "ВзаиморасчетыПоЗаймам.ДоговорЗайма В (&ДоговорыЗайма)");
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоСотрудникам", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистраторФильтрПоСотрудникам", "ИСТИНА");
	ИначеЕсли Сотрудники.Количество() = 1 Тогда
		Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудники[0], "ФизическоеЛицо"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоСотрудникам", "ФизическоеЛицо = &ФизическоеЛицо");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистраторФильтрПоСотрудникам", "ВзаиморасчетыПоЗаймам.ФизическоеЛицо = &ФизическоеЛицо");
	ИначеЕсли Сотрудники.Количество() < 1 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
			|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма КАК ДоговорЗайма,
			|	ВзаиморасчетыПоЗаймамСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВзаиморасчетыПоЗаймамСотрудникам.СуммаЗайма КАК СуммаЗайма
			|ПОМЕСТИТЬ ВТДоговорыЗайма
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам";
	Иначе 
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрПоСотрудникам", 
			"ФизическоеЛицо В
			|	(ВЫБРАТЬ
			|		ВТФизическиеЛица.ФизическоеЛицо
			|	ИЗ
			|		ВТФизическиеЛица)");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РегистраторФильтрПоСотрудникам", 
			"ВзаиморасчетыПоЗаймам.ФизическоеЛицо В
			|			(ВЫБРАТЬ
			|				ВТФизическиеЛица.ФизическоеЛицо
			|			ИЗ
			|				ВТФизическиеЛица)");
		
	КонецЕсли;

	ВсеИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор);
	Если ИсключаемыеРегистраторы <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеИсключаемыеРегистраторы, ИсключаемыеРегистраторы);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ВсеИсключаемыеРегистраторы);
	Запрос.УстановитьПараметр("ДоговорыЗайма", ДоговорыЗайма);
	Запрос.УстановитьПараметр("ИсключатьУволенныхСотрудников", ИсключатьУволенныхСотрудников);
	Запрос.Выполнить();
	
	// Запросить по договорам займа даты последних операций: начисления процентов и основного долга.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДатыОперацийПоЗаймам.ДоговорЗайма,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыОперацийПоЗаймам.ДатаНачисленияПроцентов, ДЕНЬ)) КАК Период
	|ПОМЕСТИТЬ ВТДатыНачисленияПроцентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыЗайма.ДоговорЗайма КАК ДоговорЗайма,
	|		МАКСИМУМ(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймам.Период, ДЕНЬ, 1)) КАК ДатаНачисленияПроцентов
	|	ИЗ
	|		ВТДоговорыЗайма КАК ДоговорыЗайма
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|			ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
	|				И (ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|				И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|				И (ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, МЕСЯЦ))
	|				И (ВзаиморасчетыПоЗаймам.Проценты > 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоговорыЗайма.ДоговорЗайма
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыЗайма.ДоговорЗайма,
	|		МИНИМУМ(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймам.Период, ДЕНЬ, 1))
	|	ИЗ
	|		ВТДоговорыЗайма КАК ДоговорыЗайма
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|			ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
	|				И (ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|				И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|				И (ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, МЕСЯЦ))
	|				И (ВзаиморасчетыПоЗаймам.СуммаЗайма > 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоговорыЗайма.ДоговорЗайма
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыЗайма.ДоговорЗайма,
	|		МАКСИМУМ(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймам.Период, ДЕНЬ, 1))
	|	ИЗ
	|		ВТДоговорыЗайма КАК ДоговорыЗайма
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|			ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
	|				И (ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|				И (ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, МЕСЯЦ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоговорыЗайма.ДоговорЗайма) КАК ДатыОперацийПоЗаймам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОперацийПоЗаймам.ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыОперацийПоЗаймам.ДоговорЗайма,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыОперацийПоЗаймам.ДатаНачисленияОсновногоДолга, ДЕНЬ)) КАК Период
	|ПОМЕСТИТЬ ВТДатыНачисленияОсновногоДолга
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДоговорыЗайма.ДоговорЗайма КАК ДоговорЗайма,
	|		МАКСИМУМ(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймам.Период, СЕКУНДА, 1)) КАК ДатаНачисленияОсновногоДолга
	|	ИЗ
	|		ВТДоговорыЗайма КАК ДоговорыЗайма
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|			ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
	|				И (ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|				И (ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, МЕСЯЦ))
	|				И (НЕ ВзаиморасчетыПоЗаймам.ВнеочередноеПогашение)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоговорыЗайма.ДоговорЗайма
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоговорыЗайма.ДоговорЗайма,
	|		МИНИМУМ(ВзаиморасчетыПоЗаймам.Период)
	|	ИЗ
	|		ВТДоговорыЗайма КАК ДоговорыЗайма
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|			ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
	|				И (ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|				И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|				И (ВзаиморасчетыПоЗаймам.Период <= КОНЕЦПЕРИОДА(&ДатаОперации, МЕСЯЦ))
	|				И (ВзаиморасчетыПоЗаймам.СуммаЗайма > 0)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДоговорыЗайма.ДоговорЗайма) КАК ДатыОперацийПоЗаймам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыОперацийПоЗаймам.ДоговорЗайма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(МинимальнаяДата.Период) КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТДатыНачисленияОсновногоДолга.Период КАК Период
	|	ИЗ
	|		ВТДатыНачисленияОсновногоДолга КАК ВТДатыНачисленияОсновногоДолга
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТДатыНачисленияПроцентов.Период
	|	ИЗ
	|		ВТДатыНачисленияПроцентов КАК ВТДатыНачисленияПроцентов) КАК МинимальнаяДата";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		// Нет ни одного займа, которые нужно было бы рассчитать.
		Возврат РасчетЗаймов;
	КонецЕсли;
	
	МинимальнаяДата = Выборка.Период;
	
	Если Не ЗначениеЗаполнено(МинимальнаяДата) 
		Или МинимальнаяДата > ДатаОперации Тогда
		// Все займы рассчитаны
		Возврат РасчетЗаймов;
	КонецЕсли;
	
	// Получаем временную таблицу дат начала месяца, чтобы "распиливать" интервалы по месяцам, 
	// т.к. размер платежа номинирован за месяц.
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, МинимальнаяДата, ДатаОперации);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДоговорыПериоды.ДоговорЗайма,
		|	ДоговорыПериоды.ФизическоеЛицо,
		|	МИНИМУМ(ДоговорыПериоды.Период) КАК Период,
		|	МИНИМУМ(ДоговорыПериоды.ДатаНачала) КАК ДатаНачала,
		|	ДоговорыПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТДоговорыПериоды
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДоговорыЗайма.ДоговорЗайма КАК ДоговорЗайма,
		|		ДоговорыЗайма.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ДатыНачисленияОсновногоДолга.Период КАК Период,
		|		ДатыНачисленияОсновногоДолга.Период КАК ДатаНачала,
		|		&ДатаОперации КАК ДатаОкончания
		|	ИЗ
		|		ВТДоговорыЗайма КАК ДоговорыЗайма
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНачисленияОсновногоДолга КАК ДатыНачисленияОсновногоДолга
		|			ПО (ДатыНачисленияОсновногоДолга.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
		|				И (ДатыНачисленияОсновногоДолга.Период <= &ДатаОперации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДоговорыЗайма.ДоговорЗайма,
		|		ДоговорыЗайма.ФизическоеЛицо,
		|		ДатыНачисленияПроцентов.Период,
		|		ДатыНачисленияПроцентов.Период,
		|		&ДатаОперации
		|	ИЗ
		|		ВТДоговорыЗайма КАК ДоговорыЗайма
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНачисленияПроцентов КАК ДатыНачисленияПроцентов
		|			ПО (ДатыНачисленияПроцентов.ДоговорЗайма = ДоговорыЗайма.ДоговорЗайма)
		|				И (ДатыНачисленияПроцентов.Период < &ДатаОперации)) КАК ДоговорыПериоды
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыПериоды.ДоговорЗайма,
		|	ДоговорыПериоды.ФизическоеЛицо,
		|	ДоговорыПериоды.ДатаОкончания
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ДоговорыПериоды.Период) ЕСТЬ НЕ NULL  И
		|	МИНИМУМ(ДоговорыПериоды.ДатаНачала) ЕСТЬ НЕ NULL ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Начисление процентов
	// проценты начисляются ежедневно за указанный на положительный остаток основного долга на начало дня
	// с учетом действующей на начало же дня годовой процентной ставки приведенной к количеству дней в году.
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"УсловияДоговораЗаймаСотруднику",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДоговорыПериоды",
			"ДоговорЗайма"),
		ПараметрыПостроения,
		"ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ТраншиЗаймаСотруднику",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТДоговорыПериоды",
			"ДоговорЗайма"),
		ПараметрыПостроения,
		"ВТТраншиЗаймаСотрудникуСрезИДвижения");
		
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорыПериоды.Период КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	ВТДоговорыПериоды КАК ДоговорыПериоды";
	
	Запрос.Выполнить();
	
	КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛицВПериодах(
		МенеджерВременныхТаблиц, Истина, Организация, "ВТФизическиеЛицаПериоды", "ВТРабочиеМестаСотрудников");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочиеМестаСотрудников.Период,
	|	ДоговорыПериоды.ДоговорЗайма КАК ДоговорЗайма
	|ПОМЕСТИТЬ ВТПериодыВзаиморасчетовПоЗаймам
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоговорыПериоды КАК ДоговорыПериоды
	|		ПО (ДоговорыПериоды.ДоговорЗайма.ФизическоеЛицо = РабочиеМестаСотрудников.Сотрудник.ФизическоеЛицо)
	|			И (РабочиеМестаСотрудников.Период МЕЖДУ ДоговорыПериоды.ДатаНачала И ДоговорыПериоды.ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения.Период,
	|	ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения.ДоговорЗайма
	|ИЗ
	|	ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения КАК ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТТраншиЗаймаСотрудникуСрезИДвижения.Период,
	|	ВТТраншиЗаймаСотрудникуСрезИДвижения.ДоговорЗайма
	|ИЗ
	|	ВТТраншиЗаймаСотрудникуСрезИДвижения КАК ВТТраншиЗаймаСотрудникуСрезИДвижения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НачалоМесяцев.Период,
	|	ДоговорыПериоды.ДоговорЗайма
	|ИЗ
	|	ВТПериоды КАК НачалоМесяцев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДоговорыПериоды КАК ДоговорыПериоды
	|		ПО (НачалоМесяцев.Период МЕЖДУ ДоговорыПериоды.Период И ДоговорыПериоды.ДатаОкончания)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймамСотрудникам.Период = КОНЕЦПЕРИОДА(ВзаиморасчетыПоЗаймамСотрудникам.Период, ДЕНЬ)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймамСотрудникам.Период, СЕКУНДА, 1)
	|			ИНАЧЕ ВзаиморасчетыПоЗаймамСотрудникам.Период
	|		КОНЕЦ, ДЕНЬ),
	|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма
	|ИЗ
	|	ВТДоговорыПериоды КАК ДоговорыПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам
	|		ПО (ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма = ДоговорыПериоды.ДоговорЗайма)
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.Период МЕЖДУ ДоговорыПериоды.Период И ДоговорыПериоды.ДатаОкончания)
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.СуммаЗайма <> 0)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВзаиморасчетыПоЗаймамСотрудникам.Период, ДЕНЬ, 1), ДЕНЬ),
	|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма
	|ИЗ
	|	ВТДоговорыПериоды КАК ДоговорыПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам
	|		ПО (ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма = ДоговорыПериоды.ДоговорЗайма)
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.Период МЕЖДУ ДоговорыПериоды.Период И ДоговорыПериоды.ДатаОкончания)
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|			И (ВзаиморасчетыПоЗаймамСотрудникам.СуммаЗайма <> 0)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДатыНачисленияПроцентов.Период,
	|	ДатыНачисленияПроцентов.ДоговорЗайма
	|ИЗ
	|	ВТДатыНачисленияПроцентов КАК ДатыНачисленияПроцентов
	|ГДЕ
	|	ДатыНачисленияПроцентов.Период < &ДатаОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ДоговорЗайма КАК ДоговорЗайма,
	|		Периоды.Период КАК ДатаНачала,
	|		ВЫБОР
	|			КОГДА МИНИМУМ(ПериодыСлед.Период) ЕСТЬ NULL 
	|				ТОГДА &ДатаОперации
	|			ИНАЧЕ МИНИМУМ(ДОБАВИТЬКДАТЕ(ПериодыСлед.Период, СЕКУНДА, -1))
	|		КОНЕЦ КАК ДатаОкончания
	|	ИЗ
	|		ВТПериодыВзаиморасчетовПоЗаймам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыВзаиморасчетовПоЗаймам КАК ПериодыСлед
	|			ПО Периоды.Период < ПериодыСлед.Период
	|				И Периоды.ДоговорЗайма = ПериодыСлед.ДоговорЗайма
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ДоговорЗайма,
	|		Периоды.Период) КАК Интервалы
	|ГДЕ
	|	Интервалы.ДатаНачала <= Интервалы.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	МАКСИМУМ(КадроваяИстория.Период) КАК КадроваяИсторияПериод,
	|	МАКСИМУМ(УсловияДоговора.Период) КАК УсловияДоговораПериод,
	|	МАКСИМУМ(ТраншиЗайма.Период) КАК ТраншиЗаймаПериод
	|ПОМЕСТИТЬ ВТИнтервалыИДатыСрезов
	|ИЗ
	|	ВТИнтервалы КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИстория
	|		ПО (КадроваяИстория.ФизическоеЛицо = Интервалы.ДоговорЗайма.ФизическоеЛицо)
	|			И (КадроваяИстория.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения КАК УсловияДоговора
	|		ПО (УсловияДоговора.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (УсловияДоговора.Период <= Интервалы.ДатаНачала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТраншиЗаймаСотрудникуСрезИДвижения КАК ТраншиЗайма
	|		ПО (ТраншиЗайма.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (ТраншиЗайма.Период <= Интервалы.ДатаНачала)
	|ГДЕ
	|	(КадроваяИстория.Сотрудник ЕСТЬ НЕ NULL 
	|			ИЛИ &ИсключатьУволенныхСотрудников = ЛОЖЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	СУММА(ТраншиЗайма.РазмерПогашения) КАК РазмерПогашения
	|ПОМЕСТИТЬ ВТРазмерыПогашенияТраншами
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТраншиЗаймаСотрудникуСрезИДвижения КАК ТраншиЗайма
	|		ПО (ТраншиЗайма.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (ТраншиЗайма.Период = Интервалы.УсловияДоговораПериод)
	|			И (ТраншиЗайма.ДатаПредоставления < Интервалы.ДатаОкончания)
	|			И (ТраншиЗайма.ДатаПогашения > Интервалы.ДатаНачала)
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.Период <= Интервалы.ДатаНачала
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВзаиморасчетыПоЗаймам.СуммаЗайма
	|						ИНАЧЕ -ВзаиморасчетыПоЗаймам.СуммаЗайма
	|					КОНЕЦ
	|		КОНЕЦ) КАК СуммаЗаймаНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.Период <= Интервалы.ДатаНачала
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|							ТОГДА ВзаиморасчетыПоЗаймам.Проценты
	|						ИНАЧЕ -ВзаиморасчетыПоЗаймам.Проценты
	|					КОНЕЦ
	|		КОНЕЦ) КАК ПроцентыНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВзаиморасчетыПоЗаймам.СуммаЗайма
	|			ИНАЧЕ -ВзаиморасчетыПоЗаймам.СуммаЗайма
	|		КОНЕЦ) КАК СуммаЗаймаНаДатуОперации,
	|	СУММА(ВЫБОР
	|			КОГДА ВзаиморасчетыПоЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВзаиморасчетыПоЗаймам.Проценты
	|			ИНАЧЕ -ВзаиморасчетыПоЗаймам.Проценты
	|		КОНЕЦ) КАК ПроцентыНаДатуОперации
	|ПОМЕСТИТЬ ВТОстаткиПоИнтервалам
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймам
	|		ПО (ВзаиморасчетыПоЗаймам.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (ВзаиморасчетыПоЗаймам.Период <= &ДатаОперации)
	|			И (ВзаиморасчетыПоЗаймам.Регистратор НЕ В(&ИсключаемыеРегистраторы))
	|
	|СГРУППИРОВАТЬ ПО
	|	Интервалы.ДоговорЗайма,
	|	Интервалы.ДатаНачала,
	|	Интервалы.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Интервалы.ДоговорЗайма.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Интервалы.ДоговорЗайма КАК ДоговорЗайма,
	|	Интервалы.ДатаНачала КАК ДатаНачала,
	|	Интервалы.ДатаОкончания,
	|	РАЗНОСТЬДАТ(Интервалы.ДатаНачала, Интервалы.ДатаОкончания, ДЕНЬ) + 1 КАК Дней,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), КОНЕЦПЕРИОДА(Интервалы.ДатаНачала, МЕСЯЦ), ДЕНЬ) + 1 КАК ДнейВМесяце,
	|	КадроваяИстория.Подразделение,
	|	РАЗНОСТЬДАТ(Интервалы.ДоговорЗайма.ДатаПредоставления, УсловияДоговора.ДатаОкончания, МЕСЯЦ) + 1 КАК Срок,
	|	Интервалы.ДоговорЗайма.ВидПлатежей КАК ВидПлатежей,
	|	Интервалы.ДоговорЗайма.СпособПогашения КАК СпособПогашения,
	|	УсловияДоговора.ДатаОкончания КАК ДатаОкончанияЗайма,
	|	ВЫБОР
	|		КОГДА ДатыНачисленияПроцентов.Период ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачислятьПроценты,
	|	УсловияДоговора.ПроцентнаяСтавка,
	|	УсловияДоговора.РазмерПлатежа,
	|	ЕСТЬNULL(РазмерыПогашенияТраншами.РазмерПогашения, УсловияДоговора.РазмерПогашения) КАК РазмерПогашения,
	|	УсловияДоговора.Сумма КАК СуммаЗайма,
	|	УсловияДоговора.ДатаНачалаПогашения,
	|	УсловияДоговора.ОграничениеПлатежа,
	|	ВЫБОР
	|		КОГДА ДатыНачисленияПроцентов.Период ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ УсловияДоговора.МатериальнаяВыгодаОблагаетсяНДФЛ
	|	КОНЕЦ КАК МатериальнаяВыгодаОблагаетсяНДФЛ,
	|	ЕСТЬNULL(ОстаткиПоИнтервалам.СуммаЗаймаНаНачало, 0) КАК ОстатокЗаймаНаНачало,
	|	ЕСТЬNULL(ОстаткиПоИнтервалам.ПроцентыНаНачало, 0) КАК ОстатокПроцентовНаНачало,
	|	ЕСТЬNULL(ОстаткиПоИнтервалам.СуммаЗаймаНаДатуОперации, 0) КАК ОстатокЗаймаНаДатуОперации,
	|	ЕСТЬNULL(ОстаткиПоИнтервалам.ПроцентыНаДатуОперации, 0) КАК ОстатокПроцентовНаДатуОперации
	|ИЗ
	|	ВТИнтервалыИДатыСрезов КАК Интервалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияДоговораЗаймаСотрудникуСрезИДвижения КАК УсловияДоговора
	|		ПО (УсловияДоговора.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (УсловияДоговора.Период = Интервалы.УсловияДоговораПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК КадроваяИстория
	|		ПО (КадроваяИстория.ФизическоеЛицо = Интервалы.ДоговорЗайма.ФизическоеЛицо)
	|			И (КадроваяИстория.Период = Интервалы.КадроваяИсторияПериод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПогашенияТраншами КАК РазмерыПогашенияТраншами
	|		ПО (РазмерыПогашенияТраншами.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (РазмерыПогашенияТраншами.ДатаНачала = Интервалы.ДатаНачала)
	|			И (РазмерыПогашенияТраншами.ДатаОкончания = Интервалы.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстаткиПоИнтервалам КАК ОстаткиПоИнтервалам
	|		ПО (ОстаткиПоИнтервалам.ДоговорЗайма = Интервалы.ДоговорЗайма)
	|			И (ОстаткиПоИнтервалам.ДатаНачала = Интервалы.ДатаНачала)
	|			И (ОстаткиПоИнтервалам.ДатаОкончания = Интервалы.ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыНачисленияПроцентов КАК ДатыНачисленияПроцентов
	|		ПО Интервалы.ДатаНачала >= ДатыНачисленияПроцентов.Период
	|			И Интервалы.ДоговорЗайма = ДатыНачисленияПроцентов.ДоговорЗайма
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ДоговорЗайма,
	|	ДатаНачала";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Добавим упорядочивание согласно дополнительным настройкам.
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "КадроваяИстория", Ложь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Накапливаем суммы погашения по интервалам, 
	// для того, чтобы иметь сведения по фактическому остатку на конец интервала и не взыскать больше.
	СуммыПогашения = Новый Соответствие;
	ПроцентыПогашения = Новый Соответствие;
	
	// Накапливаем суммы начисленных процентов,
	// для того, чтобы при отсрочке платежа, при аннутитных платежах, в первую очередь погашать проценты.
	НакопленияПроцентов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = РасчетЗаймов.Добавить();
		НоваяСтрока.ФизическоеЛицо = Выборка.ФизическоеЛицо;
		НоваяСтрока.Подразделение = Выборка.Подразделение;
		НоваяСтрока.ДоговорЗайма = Выборка.ДоговорЗайма;
		НоваяСтрока.ДатаНачала = Выборка.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
		НоваяСтрока.МатериальнаяВыгодаОблагаетсяНДФЛ = Выборка.МатериальнаяВыгодаОблагаетсяНДФЛ;
		НоваяСтрока.ПроцентнаяСтавка = Выборка.ПроцентнаяСтавка;
		НоваяСтрока.Дней = Выборка.Дней;
		НоваяСтрока.ОстатокЗайма = Выборка.ОстатокЗаймаНаНачало;
		НоваяСтрока.ОстатокЗаймаНаДатуОперации = Выборка.ОстатокЗаймаНаДатуОперации;
		НоваяСтрока.ОстатокПроцентовНаДатуОперации = Выборка.ОстатокПроцентовНаДатуОперации;
		
		СуммаПогашения = СуммыПогашения[Выборка.ДоговорЗайма];
		Если СуммаПогашения = Неопределено Тогда
			СуммаПогашения = Выборка.ОстатокЗаймаНаДатуОперации;
		КонецЕсли;
		ПроцентПогашения = ПроцентыПогашения[Выборка.ДоговорЗайма];
		Если ПроцентПогашения = Неопределено Тогда
			ПроцентПогашения = Выборка.ОстатокПроцентовНаДатуОперации;
		КонецЕсли;
		НакоплениеПроцентов = НакопленияПроцентов[Выборка.ДоговорЗайма];
		Если НакоплениеПроцентов = Неопределено Тогда
			НакоплениеПроцентов = 0;
		КонецЕсли;
		
		ДнейВГоду = ЗаймыСотрудникамКлиентСервер.КоличествоДнейВГоду(Год(Выборка.ДатаНачала));
		
		// Начисление процентов
		Если Выборка.НачислятьПроценты Тогда
			// Проценты начисляются только за периоды с момента последнего погашения.
			НоваяСтрока.НачисленоПроцентов = Выборка.ОстатокЗаймаНаНачало * (Выборка.ПроцентнаяСтавка * 0.01 / ДнейВГоду) * Выборка.Дней;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДатаНачалаПогашения) 
			И Выборка.ДатаНачалаПогашения > Выборка.ДатаНачала Тогда
			НакопленияПроцентов.Вставить(Выборка.ДоговорЗайма, НакоплениеПроцентов + НоваяСтрока.НачисленоПроцентов);
			Продолжить;
		КонецЕсли;

		// Если погашение в конце срока - не погашаем.
		Если Выборка.СпособПогашения = Перечисления.СпособыПогашенияЗаймаСотруднику.ПоОкончанииСрока Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоПогашениеЗаймаЗаПоследнийМесяц = Выборка.ДатаОкончания = КонецДня(Выборка.ДатаОкончанияЗайма);
		
		Если Выборка.ВидПлатежей = Перечисления.ВидыПлатежейПогашенияЗаймаСотруднику.АннуитетныеПлатежи Тогда	
			// Аннуитетные платежи - рассчитываем сумму погашения основного долга от размера платежа.
			НоваяСтрока.ПогашениеПроцентов = НоваяСтрока.НачисленоПроцентов + ПроцентПогашения;
			Если ЭтоПогашениеЗаймаЗаПоследнийМесяц Тогда
				НоваяСтрока.РазмерПлатежа = СуммаПогашения + НоваяСтрока.ПогашениеПроцентов;
			Иначе
				НоваяСтрока.РазмерПлатежа = Мин(Выборка.РазмерПлатежа / Выборка.ДнейВМесяце * Выборка.Дней, СуммаПогашения + НоваяСтрока.ПогашениеПроцентов);
				Если НакоплениеПроцентов > 0 Тогда
					ОграничениеПогашенияПроцентов	= Мин(НоваяСтрока.РазмерПлатежа,НоваяСтрока.ПогашениеПроцентов + НакоплениеПроцентов);
					ПогашениеНакопленныхПроцентов	= Макс(ОграничениеПогашенияПроцентов,НоваяСтрока.ПогашениеПроцентов) - НоваяСтрока.ПогашениеПроцентов;
					НоваяСтрока.ПогашениеПроцентов	= НоваяСтрока.ПогашениеПроцентов + ПогашениеНакопленныхПроцентов;
					НакопленияПроцентов.Вставить(Выборка.ДоговорЗайма, НакоплениеПроцентов - ПогашениеНакопленныхПроцентов);
				ИначеЕсли Выборка.ОграничениеПлатежа > 0
					И НоваяСтрока.ПогашениеПроцентов > Выборка.ОграничениеПлатежа Тогда
					НоваяСтрока.ПогашениеПроцентов = Выборка.ОграничениеПлатежа;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока.ПогашениеЗайма = Макс(НоваяСтрока.РазмерПлатежа - НоваяСтрока.ПогашениеПроцентов, 0);
		ИначеЕсли Выборка.ВидПлатежей = Перечисления.ВидыПлатежейПогашенияЗаймаСотруднику.ДифференцированныеПлатежи Тогда
			// Дифференцированные платежи - погашение основного долга и начисленные проценты.
			Если ЭтоПогашениеЗаймаЗаПоследнийМесяц Тогда
				НоваяСтрока.ПогашениеЗайма = СуммаПогашения;
			Иначе
				НоваяСтрока.ПогашениеЗайма = Мин(Выборка.РазмерПогашения / Выборка.ДнейВМесяце * Выборка.Дней, СуммаПогашения);
			КонецЕсли;
			НоваяСтрока.ПогашениеПроцентов = НоваяСтрока.НачисленоПроцентов + ПроцентПогашения;
			НоваяСтрока.РазмерПлатежа = НоваяСтрока.ПогашениеЗайма + НоваяСтрока.ПогашениеПроцентов;
			Если Выборка.ОграничениеПлатежа > 0 
				И НоваяСтрока.РазмерПлатежа > Выборка.ОграничениеПлатежа
				И Не ЭтоПогашениеЗаймаЗаПоследнийМесяц Тогда
				// Если установлено ограничение платежа (из-за отсрочки), пересчитаем погашение.
				НоваяСтрока.РазмерПлатежа = Выборка.ОграничениеПлатежа;
				НоваяСтрока.ПогашениеПроцентов = Мин(НоваяСтрока.ПогашениеПроцентов, Выборка.ОграничениеПлатежа);
				НоваяСтрока.ПогашениеЗайма = Макс(НоваяСтрока.РазмерПлатежа - НоваяСтрока.ПогашениеПроцентов, 0);
			КонецЕсли;
		ИначеЕсли Выборка.ВидПлатежей = Перечисления.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем Тогда
			Если ЭтоПогашениеЗаймаЗаПоследнийМесяц Тогда
				НоваяСтрока.ПогашениеЗайма = СуммаПогашения;
			Иначе
				НоваяСтрока.ПогашениеЗайма = Мин(Выборка.РазмерПогашения / Выборка.ДнейВМесяце * Выборка.Дней, СуммаПогашения);
			КонецЕсли;
			НоваяСтрока.РазмерПлатежа = НоваяСтрока.ПогашениеЗайма;
		ИначеЕсли Выборка.ВидПлатежей = Перечисления.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоПроценты Тогда
			НоваяСтрока.ПогашениеПроцентов = НоваяСтрока.НачисленоПроцентов + ПроцентПогашения;
			НоваяСтрока.РазмерПлатежа = НоваяСтрока.ПогашениеПроцентов;
			Если Выборка.ОграничениеПлатежа > 0 
				И НоваяСтрока.РазмерПлатежа > Выборка.ОграничениеПлатежа Тогда
				// Если установлено ограничение платежа (из-за отсрочки), пересчитаем погашение.
				НоваяСтрока.РазмерПлатежа = Выборка.ОграничениеПлатежа;
				НоваяСтрока.ПогашениеПроцентов = Мин(НоваяСтрока.ПогашениеПроцентов, Выборка.ОграничениеПлатежа);
			КонецЕсли;
		КонецЕсли;
		СуммаПогашения = СуммаПогашения - НоваяСтрока.ПогашениеЗайма;
		СуммыПогашения.Вставить(Выборка.ДоговорЗайма, СуммаПогашения);
		ПроцентПогашения = ПроцентПогашения - (НоваяСтрока.ПогашениеПроцентов - НоваяСтрока.НачисленоПроцентов);
		ПроцентыПогашения.Вставить(Выборка.ДоговорЗайма, ПроцентПогашения);
		Если Выборка.ВидПлатежей = Перечисления.ВидыПлатежейПогашенияЗаймаСотруднику.ТолькоЗаем И СуммаПогашения = 0 Тогда
			НоваяСтрока.ПогашениеПроцентов = ПроцентПогашения;
			ПроцентыПогашения.Вставить(Выборка.ДоговорЗайма, 0);
		КонецЕсли;
	КонецЦикла;

	// Для увольнения добавляем погашение всей суммы займа и процентов в разрезе договоров займа
	Если РасчетУвольнения Тогда
		КолонкиГруппировок	= "ДоговорЗайма, ОстатокЗаймаНаДатуОперации, ОстатокПроцентовНаДатуОперации";
		КолонкиСуммирования	= "НачисленоПроцентов, ПогашениеПроцентов, ПогашениеЗайма";
		ТаблицаИтогов = РасчетЗаймов.Скопировать( ,КолонкиГруппировок + "," + КолонкиСуммирования);
		ТаблицаИтогов.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		
		ПараметрыОтбора = Новый Структура("ДоговорЗайма,ДатаОкончания");
		Для Каждого СтрокаИтогов Из ТаблицаИтогов Цикл
			ПогаситьПроцентов	= СтрокаИтогов.ОстатокПроцентовНаДатуОперации + СтрокаИтогов.НачисленоПроцентов - СтрокаИтогов.ПогашениеПроцентов;
			ПогаситьЗайма		= СтрокаИтогов.ОстатокЗаймаНаДатуОперации - СтрокаИтогов.ПогашениеЗайма;
			
			ПараметрыОтбора.ДоговорЗайма	= СтрокаИтогов.ДоговорЗайма;
			ПараметрыОтбора.ДатаОкончания	= ДатаОперации; 
			НайденныйЗайм					= РасчетЗаймов.НайтиСтроки(ПараметрыОтбора);
			Если НайденныйЗайм.Количество() > 0 Тогда
				НайденныйЗайм[0].ПогашениеПроцентов	= НайденныйЗайм[0].ПогашениеПроцентов + ПогаситьПроцентов;
				НайденныйЗайм[0].ПогашениеЗайма		= НайденныйЗайм[0].ПогашениеЗайма + ПогаситьЗайма;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат РасчетЗаймов;
	
КонецФункции

// Выполняет регистрацию взаиморасчетов по займам сотрудников:
// - начисление процентов
// - погашение начисленных процентов и займа.
//
// Параметры:
//	Движения
//	ДанныеВзаиморасчетов - таблица значений с колонками.
//		
//	Отказ
//
Процедура ЗарегистрироватьВзаиморасчетыПоЗаймам(Движения, ДанныеВзаиморасчетов, Отказ, ВнеочередноеПогашение = Ложь) Экспорт
	
	Для Каждого СтрокаВзаиморасчетов Из ДанныеВзаиморасчетов Цикл
		
		// Начисление процентов
		Если СтрокаВзаиморасчетов.НачисленоПроцентов > 0 Тогда
			НоваяЗапись = Движения.ВзаиморасчетыПоЗаймамСотрудникам.ДобавитьПриход();
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Период = СтрокаВзаиморасчетов.ДатаНачисленияПроцентов;
			НоваяЗапись.ФизическоеЛицо = СтрокаВзаиморасчетов.ФизическоеЛицо;
			НоваяЗапись.Организация = СтрокаВзаиморасчетов.Организация;
			НоваяЗапись.ДоговорЗайма = СтрокаВзаиморасчетов.ДоговорЗайма;
			НоваяЗапись.Проценты = СтрокаВзаиморасчетов.НачисленоПроцентов;
			Движения.ВзаиморасчетыПоЗаймамСотрудникам.Записывать = Истина;
		КонецЕсли;
		
		// Погашение
		Если СтрокаВзаиморасчетов.ПогашениеЗайма > 0 Или СтрокаВзаиморасчетов.ПогашениеПроцентов > 0 Тогда
			НоваяЗапись = Движения.ВзаиморасчетыПоЗаймамСотрудникам.ДобавитьРасход();
			НоваяЗапись.Период = СтрокаВзаиморасчетов.ДатаПогашения;
			НоваяЗапись.ФизическоеЛицо = СтрокаВзаиморасчетов.ФизическоеЛицо;
			НоваяЗапись.Организация = СтрокаВзаиморасчетов.Организация;
			НоваяЗапись.ДоговорЗайма = СтрокаВзаиморасчетов.ДоговорЗайма;
			НоваяЗапись.СуммаЗайма = СтрокаВзаиморасчетов.ПогашениеЗайма;
			НоваяЗапись.Проценты = СтрокаВзаиморасчетов.ПогашениеПроцентов;
			НоваяЗапись.ВнеочередноеПогашение = ВнеочередноеПогашение;
			Движения.ВзаиморасчетыПоЗаймамСотрудникам.Записывать = Истина;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Добавляет в структуру данных для проведения поля, необходимые для заполнения результатов расчета займов.
//
// Параметры:
//	ДанныеДляПроведения - см. РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты.
//
Процедура ДополнитьОписаниеДанныхДляПроведения(ДанныеДляПроведения) Экспорт
	
	ДанныеДляПроведения.Вставить("ВзаиморасчетыПоЗаймам");
	ДанныеДляПроведения.Вставить("УдержанияЗаймов");
	ДанныеДляПроведения.Вставить("МатериальнаяВыгода");
	ДанныеДляПроведения.Вставить("НалогНаМатериальнуюВыгоду");
	
КонецПроцедуры

// Заполняет данные проведения данными регистрации результатов расчета займов.
//
// Параметры:
//	ДанныеДляПроведения - см. РасчетЗарплатыРасширенный.СоздатьДанныеДляПроведенияНачисленияЗарплаты
//	ДокументСсылка.
//
Процедура ЗаполнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, ДокументСсылка, ДатаОперации, ИмяПоляМесяц = "Ссылка.МесяцНачисления", СписокФизическихЛиц = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Содержимое табличной части с дополнениями помещаем во временную таблицу.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.Ссылка КАК ДокументСсылка,
	|	ПогашениеЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПогашениеЗаймов.НомерСтроки КАК НомерСтроки,
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.Ссылка.Организация КАК Организация,
	|	ПогашениеЗаймов.Подразделение,
	|	ПогашениеЗаймов.Ссылка.МесяцНачисления КАК Месяц,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	ПогашениеЗаймов.НачисленоПроцентов КАК НачисленоПроцентов,
	|	ПогашениеЗаймов.ПогашениеПроцентов КАК ПогашениеПроцентов,
	|	ПогашениеЗаймов.ПогашениеЗайма КАК ПогашениеЗайма,
	|	ПогашениеЗаймов.МатериальнаяВыгода КАК МатериальнаяВыгода,
	|	ПогашениеЗаймов.НалогНаМатериальнуюВыгоду КАК НалогНаМатериальнуюВыгоду,
	|	КОНЕЦПЕРИОДА(&ДатаОперации, ДЕНЬ) КАК ДатаПолученияДохода,
	|	КОНЕЦПЕРИОДА(&ДатаОперации, ДЕНЬ) КАК ДатаОперации
	|ПОМЕСТИТЬ ВТПогашениеЗаймов
	|ИЗ
	|	#ПогашениеЗаймов КАК ПогашениеЗаймов
	|ГДЕ
	|	ПогашениеЗаймов.Ссылка = &Ссылка";
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ПогашениеЗаймов.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Ссылка.МесяцНачисления КАК Месяц", ИмяПоляМесяц + " КАК Месяц");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПогашениеЗаймов", ДокументСсылка.Метаданные().ПолноеИмя() + ".ПогашениеЗаймов");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаОперации", ДатаОперации);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Если СписокФизическихЛиц <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	ЗаполнитьДанныеДляПроведенияПоЗаймамПоВременнойТаблице(ДанныеДляПроведения, МенеджерВременныхТаблиц, ДокументСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПроведенияПоЗаймамПоВременнойТаблице(ДанныеДляПроведения, МенеджерВременныхТаблиц, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Займы в учете начисленной зарплаты.
	СоздатьВТПогашениеЗаймовПоВидамУдержаний(МенеджерВременныхТаблиц);
	
	ОписаниеПоляСтатьяРасходов = "РаспределениеУдержаний.СтатьяРасходов";
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		Запрос.УстановитьПараметр("РасчетыПоОплатеТруда", РасчетыПоОплатеТруда);
		ОписаниеПоляСтатьяРасходов = "
		|ВЫБОР
		|		КОГДА РаспределениеУдержаний.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|		КОГДА РаспределениеУдержаний.СтатьяРасходов = ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
		|			ТОГДА &РасчетыПоОплатеТруда
		|		ИНАЧЕ РаспределениеУдержаний.СтатьяРасходов
		|	КОНЕЦ";
	КонецЕсли;
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		
		// Дополнить данными о распределении удержаний по источникам финансирования.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
		|	РаспределениеУдержаний.Подразделение КАК Подразделение,
		|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
		|	&ОписаниеПоляСтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.Результат КАК Сумма,
		|	ПогашениеЗаймов.*
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПогашениеЗаймовПоВидамУдержаний КАК ПогашениеЗаймов
		|		ПО (ПогашениеЗаймов.ДокументСсылка = РаспределениеУдержаний.Ссылка)
		|			И (ПогашениеЗаймов.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
		|			И (ПогашениеЗаймов.ВидУдержания = РаспределениеУдержаний.ВидУдержания)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПоляСтатьяРасходов", ОписаниеПоляСтатьяРасходов);
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ПогашениеЗаймов.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	ПогашениеЗаймов.Сумма КАК Сумма,
		|	ПогашениеЗаймов.*
		|ИЗ
		|	ВТПогашениеЗаймовПоВидамУдержаний КАК ПогашениеЗаймов";
	КонецЕсли;
	
	ДанныеДляПроведения.УдержанияЗаймов = Запрос.Выполнить().Выгрузить();
	
	// НДФЛ с материальной выгоды
	СоздатьВТНалогНаМатериальнуюВыгоду(МенеджерВременныхТаблиц);	
	
	// Если используются источники финансирования дополняем результатом распределения.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		// Дополнить данными о распределении удержаний по источникам финансирования.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаспределениеУдержаний.Сотрудник КАК Сотрудник,
		|	РаспределениеУдержаний.Подразделение КАК ПодразделениеСотрудника,
		|	РаспределениеУдержаний.СтатьяФинансирования КАК СтатьяФинансирования,
		|	&ОписаниеПоляСтатьяРасходов КАК СтатьяРасходов,
		|	РаспределениеУдержаний.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
		|	РаспределениеУдержаний.Результат КАК Сумма,
		|	РаспределениеУдержаний.Результат КАК НалогПоСтавке35,
		|	НДФЛМатериальнаяВыгода.Подразделение КАК Подразделение,
		|	НДФЛМатериальнаяВыгода.*
		|ИЗ
		|	#РаспределениеРезультатовУдержаний КАК РаспределениеУдержаний
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНалогНаМатериальнуюВыгоду КАК НДФЛМатериальнаяВыгода
		|		ПО (НДФЛМатериальнаяВыгода.ДокументСсылка = РаспределениеУдержаний.Ссылка)
		|			И (НДФЛМатериальнаяВыгода.ИдентификаторСтроки = РаспределениеУдержаний.ИдентификаторСтроки)
		|			И (РаспределениеУдержаний.ВидУдержания = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ))";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РаспределениеРезультатовУдержаний", ДокументСсылка.Метаданные().ПолноеИмя() + ".РаспределениеРезультатовУдержаний");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПоляСтатьяРасходов", ОписаниеПоляСтатьяРасходов);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеСотрудника,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИсполнительногоПроизводства.ПустаяСсылка) КАК ВидДоходаИсполнительногоПроизводства,
		|	НДФЛМатериальнаяВыгода.Сумма КАК Сумма,
		|	НДФЛМатериальнаяВыгода.НалогПоСтавке35,
		|	НДФЛМатериальнаяВыгода.Подразделение,
		|	НДФЛМатериальнаяВыгода.*
		|ИЗ
		|	ВТНалогНаМатериальнуюВыгоду КАК НДФЛМатериальнаяВыгода";
	КонецЕсли;
	
	ДанныеДляПроведения.НалогНаМатериальнуюВыгоду = Запрос.Выполнить().Выгрузить();
	
	// Подготовка данных для проведения (взаиморасчеты и материальная выгода) производится отдельным методом.
	ДополнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, МенеджерВременныхТаблиц);
	
КонецПроцедуры

// Функция определяет наличие операций по взаиморасчетам по договору займа с сотрудником.
//
Функция ЕстьОперацииПоДоговоруЗайма(ДоговорЗайма, Регистратор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам
	|ГДЕ
	|	ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма = &ДоговорЗайма
	|	И ВзаиморасчетыПоЗаймамСотрудникам.Регистратор <> &Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДоговорЗайма", ДоговорЗайма);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Погашает настройку использования займов если расчет зарплаты не используется.
//
// Параметры:
//	- ИспользоватьРасчетЗарплаты - булево, признак использования расчета зарплаты.
//
Процедура ЗаполнитьНастройкиЗаймовСотрудникам(ИспользоватьРасчетЗарплаты) Экспорт
	
	// Если расчет зарплаты не используется, нужно «погасить» использование займов.
	Если ИспользоватьРасчетЗарплаты Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
	Настройка.ИспользоватьЗаймыСотрудникам = Ложь;
	Настройка.Записать();
	
КонецПроцедуры

Функция ДокументыВыдачиЗайма(ДоговорЗайма) Экспорт 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗаймыСотрудникамВХО");
		Возврат Модуль.ДокументыВыдачиЗайма(ДоговорЗайма);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет в том числе в зависимости от функциональности конфигурации-потребителя,
// доступна ли регистрация взаиморасчетов при оформлении договора займа 
// без оформления отдельного документа.
//
// Параметры:
//	Организация
//
// Возвращаемое значение - булево.
//
Функция ДоступнаРегистрацияВыдачиЗаймаДокументомДоговорЗайма(Организация) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		// Нет подсистемы выдачи/погашения займов, регистрация только денежными документами,
		// соответственно операция договором займа запрещена.
		Возврат Ложь;
	КонецЕсли;
	
	ДоступнаРегистрация = Истина;
	
	// ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиЗарплата3Бухгалтерия3");
		ДоступнаРегистрация = Не Модуль.ОбменИспользуется(Организация);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3
	
	// ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиУниверсальныйФормат");
		ДоступнаРегистрация = ДоступнаРегистрация И Не Модуль.ИспользуетсяОбменБП3(Организация);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбменДаннымиУниверсальныйФормат
	
	Возврат ДоступнаРегистрация;
	
КонецФункции

Функция ДокументыБудущихПогашений(ДоговорЗайма, ДатаАктуальности, Регистратор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзаиморасчетыПоЗаймамСотрудникам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам КАК ВзаиморасчетыПоЗаймамСотрудникам
		|ГДЕ
		|	ВзаиморасчетыПоЗаймамСотрудникам.Регистратор <> &Регистратор
		|	И ВзаиморасчетыПоЗаймамСотрудникам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И ВзаиморасчетыПоЗаймамСотрудникам.Период >= &ДатаАктуальности
		|	И ВзаиморасчетыПоЗаймамСотрудникам.ДоговорЗайма = &ДоговорЗайма";
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ДоговорЗайма", ДоговорЗайма);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
КонецФункции

Процедура СоздатьВТВыданныеЗаймы(МенеджерВременныхТаблиц, ДатаВыдачи, Организации) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Период", НачалоМесяца(ДатаВыдачи));
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаВыдачи) + 1);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаВыдачи));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Период КАК Период,
		|	&ДатаНачала КАК ДатаНачала,
		|	&ДатаОкончания КАК ДатаОкончания,
		|	ВзаиморасчетыПоЗаймамСотрудникамОбороты.ФизическоеЛицо,
		|	СУММА(ВзаиморасчетыПоЗаймамСотрудникамОбороты.СуммаЗаймаПриход) КАК ВыданнаяСумма
		|ПОМЕСТИТЬ ВТВыданныеЗаймы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Обороты(&Период, &ДатаОкончания, Регистратор, Организация В
		|		(&Организации)) КАК ВзаиморасчетыПоЗаймамСотрудникамОбороты
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыПоЗаймамСотрудникамОбороты.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ДоговорЗаймаСотруднику.Макеты.ПФ_MXL_ГрафикПогашенияЗайма,
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ДоговорЗаймаСотруднику.Макеты.ПФ_MXL_ДоговорЗайма,
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
	// Печатает макет ПФ_MXL_ГрафикПогашенияЗайма из документа ИзменениеУсловийДоговораЗаймаСотруднику
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормы(
		ОписанияНастроек,
		"ПФ_MXL_ДополнительноеСоглашениеКДоговоруЗайма",
		НСтр("ru = 'Дополнительное соглашение к договору займа';
			|en = 'Supplement agreement to loan agreement'"),
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоллекцияРаспределяемыхУдержаний()
	
	Удержания = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
	
	Число15Точность2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	Число5Точность5 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 5));
	Удержания.Колонки.Добавить("КоэффициентУдержания", Число5Точность5);
	Удержания.Колонки.Добавить("ВычетПрименяемыйПриУдержании", Число15Точность2);
	
	Возврат Удержания;
КонецФункции

Функция ДанныеЗаполненияДокументаПоСотруднику(СотрудникСсылка) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
							Истина, 
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникСсылка), 
							"Организация", '00010101');
	Если ДанныеСотрудников.Количество() > 0 Тогда						
		ДанныеЗаполнения.Вставить("Организация", ДанныеСотрудников[0].Организация);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ФизическоеЛицо", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникСсылка, "ФизическоеЛицо"));
		
	Возврат ДанныеЗаполнения;	
	
КонецФункции

Функция ДанныеЗаполненияДокументаПоДоговоруЗайма(ДоговорЗаймаСсылка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорЗаймаСотруднику.Ссылка КАК ДоговорЗайма,
	|	ДоговорЗаймаСотруднику.Организация,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо
	|ИЗ
	|	Документ.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику
	|ГДЕ
	|	ДоговорЗаймаСотруднику.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДоговорЗаймаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗаполнения = Новый Структура("Организация, ФизическоеЛицо, ДоговорЗайма");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;	
	
КонецФункции

Процедура ЗаписатьУсловияДоговораЗайма(Движения, ДоговорЗайма, ДатаУсловий, Регистратор) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументУсловияДоговора.Организация,
	|	ДокументУсловияДоговора.ФизическоеЛицо,
	|	ДокументУсловияДоговора.Сумма,
	|	ДокументУсловияДоговора.ДатаОкончания,
	|	ДокументУсловияДоговора.ПроцентнаяСтавка,
	|	ДокументУсловияДоговора.РазмерПлатежа,
	|	ДокументУсловияДоговора.РазмерПогашения,
	|	ДокументУсловияДоговора.ДатаНачалаПогашения,
	|	ДокументУсловияДоговора.ОграничениеПлатежа,
	|	ДокументУсловияДоговора.МатериальнаяВыгодаОблагаетсяНДФЛ
	|ИЗ
	|	#ДокументУсловияДоговора КАК ДокументУсловияДоговора
	|ГДЕ
	|	ДокументУсловияДоговора.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТраншиЗайма.Ссылка.Организация КАК Организация,
	|	ТраншиЗайма.ДатаПредоставления,
	|	ТраншиЗайма.Сумма,
	|	ТраншиЗайма.РазмерПогашения,
	|	ТраншиЗайма.ДатаПогашения
	|ИЗ
	|	#ДокументУсловияДоговора.ТраншиЗайма КАК ТраншиЗайма
	|ГДЕ
	|	ТраншиЗайма.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТраншиЗайма.ДатаПредоставления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ДокументУсловияДоговора", Регистратор.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаУсловияЗайма = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выбрать();
	
	НаборДвижений = Движения.УсловияДоговораЗаймаСотруднику;
	Если ВыборкаУсловияЗайма.Следующий() Тогда
		СтрокаНабора = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаУсловияЗайма);
		СтрокаНабора.ДоговорЗайма = ДоговорЗайма;
		СтрокаНабора.Период = ДатаУсловий;
		НаборДвижений.Записывать = Истина;
	КонецЕсли;
	
	ВыборкаТраншиЗайма = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	
	НаборДвижений = Движения.ТраншиЗаймаСотруднику;
	Пока ВыборкаТраншиЗайма.Следующий() Цикл
		СтрокаНабора = НаборДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаТраншиЗайма);
		СтрокаНабора.ДоговорЗайма = ДоговорЗайма;
		СтрокаНабора.Период = ДатаУсловий;
		НаборДвижений.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДатуВыдачиЗайма(ДатаВыдачи, ДатаПредоставления, Поле, Отказ) Экспорт 

	Если ДатаВыдачи < ДатаПредоставления Тогда 
		
		ШаблонСообщения = НСтр("ru = 'Месяц предоставления займа - %1. Дата выдачи не может быть меньше даты предоставления.';
								|en = 'Loan provision month - %1. Issuance date cannot be less than provision date.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(ДатаПредоставления, "ДФ=""ММММ гггг"""));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , Поле, , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатыДоговораПриВводеНачальныхОстатков(Организация, ДатаПогашения, ДатаВыдачи, ДатаПредоставления, Отказ) Экспорт 
	
	Если ДоступнаРегистрацияВыдачиЗаймаДокументомДоговорЗайма(Организация) Тогда 
		ПроверитьДатуВыдачиЗайма(ДатаВыдачи, ДатаПредоставления, "Объект.ДатаВыдачи", Отказ);
	КонецЕсли;
	
	Если ДатаПогашения < ДатаПредоставления Тогда 
		ШаблонСообщения = НСтр("ru = 'Месяц предоставления займа - %1. Дата ввода остатков не может быть меньше даты предоставления.';
								|en = 'Loan provision month - %1. Date of entering balance cannot be less than provision date.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Формат(ДатаПредоставления, "ДФ=""ММММ гггг"""));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаПогашения", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТПогашениеЗаймовПоВидамУдержаний(МенеджерВременныхТаблиц, ВидыУдержаний = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.ДокументСсылка,
	|	ПогашениеЗаймов.ДоговорЗайма КАК ДокументОснование,
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.Подразделение,
	|	ПогашениеЗаймов.ВидУдержания,
	|	ПогашениеЗаймов.Удержание,
	|	ПогашениеЗаймов.ИдентификаторСтроки,
	|	ПогашениеЗаймов.ДатаОперации КАК ДатаОкончания,
	|	ПогашениеЗаймов.Сумма
	|ПОМЕСТИТЬ ВТПогашениеЗаймовПоВидамУдержаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПогашениеЗаймов.ДокументСсылка КАК ДокументСсылка,
	|		ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|		ПогашениеЗаймов.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ПогашениеЗаймов.Подразделение КАК Подразделение,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты) КАК ВидУдержания,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты) КАК Удержание,
	|		ПогашениеЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|		ПогашениеЗаймов.ДатаОперации КАК ДатаОперации,
	|		ПогашениеЗаймов.ПогашениеЗайма КАК Сумма
	|	ИЗ
	|		ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|	ГДЕ
	|		ПогашениеЗаймов.ПогашениеЗайма <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.ДокументСсылка,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ФизическоеЛицо,
	|		ПогашениеЗаймов.Подразделение,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму),
	|		ПогашениеЗаймов.ИдентификаторСтроки,
	|		ПогашениеЗаймов.ДатаОперации,
	|		ПогашениеЗаймов.ПогашениеПроцентов
	|	ИЗ
	|		ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|	ГДЕ
	|		ПогашениеЗаймов.ПогашениеПроцентов <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.ДокументСсылка,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ФизическоеЛицо,
	|		ПогашениеЗаймов.Подразделение,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму),
	|		ПогашениеЗаймов.ИдентификаторСтроки,
	|		ПогашениеЗаймов.ДатаОперации,
	|		ПогашениеЗаймов.НачисленоПроцентов
	|	ИЗ
	|		ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|	ГДЕ
	|		ПогашениеЗаймов.НачисленоПроцентов <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПогашениеЗаймов.ДокументСсылка,
	|		ПогашениеЗаймов.ДоговорЗайма,
	|		ПогашениеЗаймов.ФизическоеЛицо,
	|		ПогашениеЗаймов.Подразделение,
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам),
	|		ПогашениеЗаймов.ИдентификаторСтроки,
	|		ПогашениеЗаймов.ДатаОперации,
	|		ПогашениеЗаймов.МатериальнаяВыгода
	|	ИЗ
	|		ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|	ГДЕ
	|		ПогашениеЗаймов.МатериальнаяВыгода <> 0) КАК ПогашениеЗаймов
	|ГДЕ
	|	(ПогашениеЗаймов.ВидУдержания В (&ВидыУдержаний)
	|			ИЛИ &ПоВсемВидамУдержаний)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВидыУдержаний", ВидыУдержаний);
	Запрос.УстановитьПараметр("ПоВсемВидамУдержаний", ВидыУдержаний = Неопределено);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТНалогНаМатериальнуюВыгоду(МенеджерВременныхТаблиц)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.ДокументСсылка КАК ДокументСсылка,
	|	ПогашениеЗаймов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПогашениеЗаймов.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ПогашениеЗаймов.Месяц < &ДатаУточненияУчета
	|			ТОГДА ПогашениеЗаймов.Месяц
	|		ИНАЧЕ ПогашениеЗаймов.ДатаПолученияДохода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы) КАК КатегорияДохода,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ) КАК ВидУдержания,
	|	ПогашениеЗаймов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СУММА(ПогашениеЗаймов.НалогНаМатериальнуюВыгоду) КАК НалогПоСтавке35,
	|	СУММА(ПогашениеЗаймов.НалогНаМатериальнуюВыгоду) КАК Сумма,
	|	0 КАК СуммаКорректировкиВыплаты
	|ПОМЕСТИТЬ ВТНалогНаМатериальнуюВыгоду
	|ИЗ
	|	ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеЗаймов.ДокументСсылка,
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.Подразделение,
	|	ПогашениеЗаймов.ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА ПогашениеЗаймов.Месяц < &ДатаУточненияУчета
	|			ТОГДА ПогашениеЗаймов.Месяц
	|		ИНАЧЕ ПогашениеЗаймов.ДатаПолученияДохода
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПогашениеЗаймов.НалогНаМатериальнуюВыгоду) <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаУточненияУчета", УчетНДФЛ.ДатаИзмененияПорядкаИсчисленияНалогаДляИностранцев());
	Запрос.Выполнить();
	
КонецПроцедуры

// Подготавливает по таблице ВТПогашениеЗаймов данные для регистрации: взаиморасчетов по займам и сумм материальной
// выгоды.
//
Процедура ДополнитьДанныеДляПроведенияПоЗаймам(ДанныеДляПроведения, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Готовим таблицу для взаиморасчетов.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.Организация КАК Организация,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	КОНЕЦПЕРИОДА(ПогашениеЗаймов.ДатаОперации, ДЕНЬ) КАК ДатаНачисленияПроцентов,
	|	КОНЕЦПЕРИОДА(ПогашениеЗаймов.ДатаОперации, ДЕНЬ) КАК ДатаПогашения,
	|	СУММА(ПогашениеЗаймов.НачисленоПроцентов) КАК НачисленоПроцентов,
	|	СУММА(ПогашениеЗаймов.ПогашениеПроцентов) КАК ПогашениеПроцентов,
	|	СУММА(ПогашениеЗаймов.ПогашениеЗайма) КАК ПогашениеЗайма
	|ИЗ
	|	ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеЗаймов.Организация,
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	ПогашениеЗаймов.ДатаОперации,
	|	ПогашениеЗаймов.ДатаОперации
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ПогашениеЗаймов.НачисленоПроцентов) <> 0
	|		ИЛИ СУММА(ПогашениеЗаймов.ПогашениеПроцентов) <> 0
	|		ИЛИ СУММА(ПогашениеЗаймов.ПогашениеЗайма) <> 0)";
	
	ДанныеДляПроведения.ВзаиморасчетыПоЗаймам = Запрос.Выполнить().Выгрузить();
	
	// Материальная выгода как доход НДФЛ.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПогашениеЗаймов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПогашениеЗаймов.Подразделение КАК Подразделение,
	|	ПогашениеЗаймов.Подразделение КАК ПодразделениеСотрудника,
	|	ПогашениеЗаймов.ДоговорЗайма КАК ДоговорЗайма,
	|	КОНЕЦПЕРИОДА(ПогашениеЗаймов.ДатаПолученияДохода, МЕСЯЦ) КАК ДатаПолученияДохода,
	|	ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код2610) КАК КодДохода,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам) КАК Начисление,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПрочиеНатуральныеДоходы) КАК КатегорияДохода,
	|	СУММА(ПогашениеЗаймов.МатериальнаяВыгода) КАК СуммаДохода
	|ИЗ
	|	ВТПогашениеЗаймов КАК ПогашениеЗаймов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПогашениеЗаймов.ФизическоеЛицо,
	|	ПогашениеЗаймов.ДоговорЗайма,
	|	ПогашениеЗаймов.Подразделение,
	|	КОНЕЦПЕРИОДА(ПогашениеЗаймов.ДатаПолученияДохода, МЕСЯЦ),
	|	ПогашениеЗаймов.Подразделение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПогашениеЗаймов.МатериальнаяВыгода) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ДатаПолученияДохода";
	
	ДанныеДляПроведения.МатериальнаяВыгода = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Функция ОстатокНевыданныхСумм(Договор, ДатаАктуальности, Регистратор = Неопределено) Экспорт 
	
	Остаток = 0;			   
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Период", ДатаАктуальности);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СУММА(ВзаиморасчетыПоЗаймамСотрудникамОбороты.СуммаЗаймаПриход) КАК ВыданнаяСумма,
	               |	ВзаиморасчетыПоЗаймамСотрудникамОбороты.ДоговорЗайма
	               |ПОМЕСТИТЬ ВТВзаиморасчетыПоЗаймам
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Обороты(, &Период, Регистратор, ДоговорЗайма = &Договор) КАК ВзаиморасчетыПоЗаймамСотрудникамОбороты
	               |ГДЕ
	               |	ВзаиморасчетыПоЗаймамСотрудникамОбороты.Регистратор <> &Регистратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыПоЗаймамСотрудникамОбороты.ДоговорЗайма
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УсловияДоговораЗаймаСотруднику.ДоговорЗайма,
	               |	УсловияДоговораЗаймаСотруднику.Сумма
	               |ПОМЕСТИТЬ ВТУсловияДоговораЗаймаСотруднику
	               |ИЗ
	               |	РегистрСведений.УсловияДоговораЗаймаСотруднику.СрезПоследних(&Период, ДоговорЗайма = &Договор) КАК УсловияДоговораЗаймаСотруднику
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	УсловияДоговораЗайма.Сумма - ЕСТЬNULL(ВзаиморасчетыПоЗаймам.ВыданнаяСумма, 0) КАК Остаток
	               |ИЗ
	               |	ВТУсловияДоговораЗаймаСотруднику КАК УсловияДоговораЗайма
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзаиморасчетыПоЗаймам КАК ВзаиморасчетыПоЗаймам
	               |		ПО УсловияДоговораЗайма.ДоговорЗайма = ВзаиморасчетыПоЗаймам.ДоговорЗайма";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Остаток = Выборка.Остаток;
	КонецЕсли;
	
	Возврат Остаток;
	
КонецФункции

#КонецОбласти
