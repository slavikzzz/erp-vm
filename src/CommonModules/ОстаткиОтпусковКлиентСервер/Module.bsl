////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМА ОСТАТКИ ОТПУСКОВ
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьКомментарииДействийСЕжегоднымОтпуском(СтрокаЕжегодногоОтпуска) Экспорт
	
	Если СтрокаЕжегодногоОтпуска.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить") Тогда
		СтрокаЕжегодногоОтпуска.Комментарий = НСтр("ru = 'Ежегодный отпуск не предоставляется';
													|en = 'Annual leave is not provided '");
	ИначеЕсли СтрокаЕжегодногоОтпуска.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Утвердить") Тогда
		СтрокаЕжегодногоОтпуска.Комментарий = НСтр("ru = 'Новый ежегодный отпуск';
													|en = 'New annual leave'");
	Иначе
		СтрокаЕжегодногоОтпуска.Комментарий = "";
		ЕстьИнформацияОПредыдущихОтпусках = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЕжегодногоОтпуска, "ТекущееКоличествоДнейВГод");
		Если ЕстьИнформацияОПредыдущихОтпусках Тогда
			Если СтрокаЕжегодногоОтпуска.КоличествоДнейВГод > СтрокаЕжегодногоОтпуска.ТекущееКоличествоДнейВГод Тогда
				СтрокаЕжегодногоОтпуска.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Увеличен на +%1';
																													|en = 'Increased by +%1'"), 
				СтрокаЕжегодногоОтпуска.КоличествоДнейВГод - СтрокаЕжегодногоОтпуска.ТекущееКоличествоДнейВГод);
			ИначеЕсли СтрокаЕжегодногоОтпуска.КоличествоДнейВГод < СтрокаЕжегодногоОтпуска.ТекущееКоличествоДнейВГод Тогда
				СтрокаЕжегодногоОтпуска.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уменьшен на %1';
																													|en = 'Reduced by %1'"), 
				СтрокаЕжегодногоОтпуска.КоличествоДнейВГод - СтрокаЕжегодногоОтпуска.ТекущееКоличествоДнейВГод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаОкончанияОтпуска(Знач Сотрудник, Знач ДатаНачала, Знач КоличествоДней, Знач ОписаниеОтпуска = Неопределено) Экспорт
	
	Если ОписаниеОтпуска = Неопределено Тогда
		ЕжегодныйОтпуск = Истина;
		ПоКалендарнымДням = Истина;
	Иначе
		ЕжегодныйОтпуск = ОписаниеОтпуска.ЕжегодныйОтпуск;
		ПоКалендарнымДням = ОписаниеОтпуска.СпособРасчетаПоКалендарнымДням;
	КонецЕсли;
	
	Если ЕжегодныйОтпуск Тогда
		ДатаОкончания = ОстаткиОтпусковВызовСервера.ДатаОкончанияЕжегодногоОтпуска(Сотрудник, ДатаНачала, КоличествоДней, ПоКалендарнымДням);
	Иначе
		ДатаОкончания = НачалоДня(ДатаНачала) + (КоличествоДней - 1) * 86400;
	КонецЕсли; 
	
	Возврат ДатаОкончания;
	
КонецФункции

Процедура ВнестиСводныйОстатокВТаблицуПрав(Форма, ИмяРеквизитаОстатков = "КоличествоДней", ИмяРеквизитаНаличияОстатков = "") Экспорт
	
	УстанавливатьНаличиеОстатков = ЗначениеЗаполнено(ИмяРеквизитаНаличияОстатков);
	
	УдалитьПустыеСтрокиИзТаблицы(Форма.ОстаткиОтпусковПоРабочимГодам);
	СводныеОстаткиОтпусков = СводныеОстаткиВидовОтпусков(Форма.ОстаткиОтпусковПоРабочимГодам);
	
	// Обнуляем вторичные данные остатков
	Для каждого СтрокаОтпуска Из Форма.ЕжегодныеОтпуска Цикл
		СтрокаОтпуска[ИмяРеквизитаОстатков] = 0;
		Если УстанавливатьНаличиеОстатков Тогда
			СтрокаОтпуска[ИмяРеквизитаНаличияОстатков] = Ложь;
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого ОстатокОтпуска Из СводныеОстаткиОтпусков Цикл
		НайденныеСтроки = Форма.ЕжегодныеОтпуска.НайтиСтроки(Новый Структура("ВидЕжегодногоОтпуска", ОстатокОтпуска.Ключ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		Иначе	
			НайденнаяСтрока = Форма.ЕжегодныеОтпуска.Добавить();
			НайденнаяСтрока.ВидЕжегодногоОтпуска = ОстатокОтпуска.Ключ;
			НайденнаяСтрока.Действие = ПредопределенноеЗначение("Перечисление.ДействияСЕжегоднымиОтпусками.Отменить");
		КонецЕсли;
		
		НайденнаяСтрока[ИмяРеквизитаОстатков] = ОстатокОтпуска.Значение;
		Если УстанавливатьНаличиеОстатков Тогда
			НайденнаяСтрока[ИмяРеквизитаНаличияОстатков] = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура УдалитьПустыеСтрокиИзТаблицы(ТабличнаяЧасть)

	МассивУдаляемыхСтрок = Новый Массив;
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидЕжегодногоОтпуска) Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла; 
	
	Для каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
		ТабличнаяЧасть.Удалить(УдаляемаяСтрока);
	КонецЦикла;

КонецПроцедуры

Функция СводныеОстаткиВидовОтпусков(ТабличнаяЧасть)

	СводныеОстаткиОтпусков = Новый Соответствие;
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		КоличествоОстаткаОтпуска = СводныеОстаткиОтпусков.Получить(СтрокаТаблицы.ВидЕжегодногоОтпуска);
		Если КоличествоОстаткаОтпуска = Неопределено Тогда
			СводныеОстаткиОтпусков.Вставить(СтрокаТаблицы.ВидЕжегодногоОтпуска, СтрокаТаблицы.Остаток);
		Иначе
			СводныеОстаткиОтпусков[СтрокаТаблицы.ВидЕжегодногоОтпуска] = КоличествоОстаткаОтпуска + СтрокаТаблицы.Остаток;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СводныеОстаткиОтпусков;

КонецФункции

Процедура ЗаполнитьДатуОкончанияРабочегоГодаВСтроке(ТекущиеДанные, СведенияОбОтсутствиях, ДатаОстатков) Экспорт 
	
	Если ТекущиеДанные.РабочийГодНачало > ДатаОстатков Тогда 
		Возврат;
	КонецЕсли;
	
	Если СведенияОбОтсутствиях.Количество() > 0 Тогда 
		ДатаОкончанияРабочегоГода = ПродленнаяДатаОкончанияРабочегоГода(СведенияОбОтсутствиях, ТекущиеДанные.РабочийГодНачало);
		Если ДатаОкончанияРабочегоГода >= ДатаОстатков Тогда 
			ТекущиеДанные.РабочийГодОкончание = ДатаОкончанияРабочегоГода; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РабочийГодНачало) И Не ЗначениеЗаполнено(ТекущиеДанные.РабочийГодОкончание) Тогда
		ТекущиеДанные.РабочийГодОкончание = ДобавитьМесяц(ТекущиеДанные.РабочийГодНачало, 12) - 1;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПродленнаяДатаОкончанияРабочегоГода(СведенияОбОтсутствиях, ДатаНачалаРабочегоГода) 
	
	ДатаОкончанияРабочегоГода = ДобавитьМесяц(ДатаНачалаРабочегоГода, 12) - 1;
	ОтпускаБезСохраненияОплаты = ОтпускаБезСохраненияОплаты();
	
	Если ДатаОкончанияРабочегоГода < Дата(2006, 10, 6) Тогда
		КоличествоДнейВключаемых = 7;
	Иначе
		КоличествоДнейВключаемых = 14;
	КонецЕсли;
	
	Для Каждого СтрокаОтсутствия Из СведенияОбОтсутствиях Цикл 
		КоличествоДнейПродления = СтрокаОтсутствия.КоличествоДней;
		// Отпуска без сохранения первые 7/14 дней в рабочем году не увеличивают рабочий год.
		Если ОтпускаБезСохраненияОплаты.Найти(СтрокаОтсутствия.Состояние) <> Неопределено Тогда
			КоличествоДнейПродления = Макс(СтрокаОтсутствия.КоличествоДней - КоличествоДнейВключаемых, 0);
			КоличествоДнейВключаемых = Макс(КоличествоДнейВключаемых - СтрокаОтсутствия.КоличествоДней, 0);
		КонецЕсли;
		// Сдвигаем дату года и месяцы.
		Если КоличествоДнейПродления > 0 Тогда
			ДатаОкончанияРабочегоГода = ДатаОкончанияРабочегоГода + КоличествоДнейПродления * 86400;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатаОкончанияРабочегоГода; 
			
КонецФункции

Функция ОтпускаБезСохраненияОплаты() Экспорт 
	
	ОтпускаБезСохраненияОплаты = Новый Массив;
	ОтпускаБезСохраненияОплаты.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя"));
	ОтпускаБезСохраненияОплаты.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству"));
	ОтпускаБезСохраненияОплаты.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый"));
	ОтпускаБезСохраненияОплаты.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый"));
	
	Возврат ОтпускаБезСохраненияОплаты;
	
КонецФункции

#КонецОбласти
