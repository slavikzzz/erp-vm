
#Область ПрограммныйИнтерфейс

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Команда - КомандаФормы - команда, которая была вызвана.
//   Результат - Булево - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;

	Если ПолноеИмяОтчета = "Отчет.ИспользованиеСчетовИСубконтоМеждународныйУчет" Тогда
		Если Команда.Имя = ИмяЭлемента(ЭтаФорма.НастройкиОтчета.ДопПараметры.ПланСчетов) Тогда
			УстановитьТипЗависимыхРеквизитов(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	МеждународныйУчетПоДаннымРеглУчетаКлиент.ОбработчикКоманды(ЭтаФорма, Команда, Результат);
	МеждународныйУчетПоДаннымФинансовыхРегистровКлиент.ОбработчикКоманды(ЭтаФорма, Команда, Результат);

КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//  Элемент     - ПолеФормы        - табличный документ.
//  Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//  СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ИмяОтчета = СтрЗаменить(ЭтаФорма.НастройкиОтчета.ПолноеИмя, "Отчет.", "");
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
 
	Если ЭтоСтандартныйОтчет(ИмяОтчета) Тогда
		
		СтандартнаяОбработка = РасшифровкаСтандартногоОтчета(ЭтаФорма, Элемент, Расшифровка, ИмяОтчета, КлючТекущегоВарианта);
		
	ИначеЕсли ИмяОтчета = "ИспользованиеСчетовИСубконтоМеждународныйУчет" Тогда
		
		ПараметрыРасшифровки = МеждународныйУчетВызовСервера.ПараметрыРасшифровкиНастроек(
		Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		Если ПараметрыРасшифровки.ЭтоПроизводный Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыРасшифровки.ЭлементОтчета);
			
			ПараметрыФормы.Вставить("АдресЭлементаВХранилище", "");
			ПараметрыФормы.Вставить("ИдентификаторГлавногоХранилища", ЭтаФорма.УникальныйИдентификатор);
			ПараметрыФормы.Вставить("ДополнительныйРежимФормы", ПредопределенноеЗначение("Перечисление.ДополнительныеРежимыЭлементовОтчетов.ВидОтчета"));
			ПараметрыФормы.Вставить("ПоказатьКодСтрокиПримечание", Истина);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
			
			ОткрытьФорму("Справочник.ЭлементыФинансовыхОтчетов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
			
		ИначеЕсли ЗначениеЗаполнено(ПараметрыРасшифровки.ВидОтчета) И ЗначениеЗаполнено(ПараметрыРасшифровки.ЭлементОтчета) Тогда
			
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", ПараметрыРасшифровки.ВидОтчета);
			ПараметрыФормы.Вставить("ТекущийЭлементОтчета", ПараметрыРасшифровки.ЭлементОтчета);
			ОткрытьФорму("Справочник.ВидыФинансовыхОтчетов.ФормаОбъекта",ПараметрыФормы);
			
		КонецЕсли;
	КонецЕсли;
	
	МеждународныйУчетПоДаннымРеглУчетаКлиент.ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	МеждународныйУчетПоДаннымФинансовыхРегистровКлиент.ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	
КонецПроцедуры

// Возвращает общие параметры открытия форм настройки проводок
//
// Возвращаемое значение:
// 	Структура - общие параметры открытия:
// 		* Организация - СправочникСсылка.Организации, Неопределено -
// 		* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета, Неопределено -
// 		* НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета, Неопределено - 
Функция ПараметрыОткрытияФормНастройкиПроводок() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация");
	ПараметрыОткрытия.Вставить("ПланСчетов");
	ПараметрыОткрытия.Вставить("НастройкаФормированияПроводок");
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывается для отчета "ИспользованиеСчетовИСубконтоМеждународныйУчет"
//
Процедура УстановитьТипЗависимыхРеквизитов(ЭтаФорма)
	
	ДопПараметры = ЭтаФорма.НастройкиОтчета.ДопПараметры;
	
	ПользовательскиеНастройки = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ДопСвойства = ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Очистить();
	
	ДопСвойства.Вставить("ЭтоМеждународный", ЭтаФорма[ИмяЭлемента(ДопПараметры.ПланСчетов)]);
	ПланСчетов = ПользовательскиеНастройки.Найти(ДопПараметры.ПланСчетов);
	ПланСчетов.Значение = ДопСвойства.ЭтоМеждународный;
	
	Элементы = ЭтаФорма.Элементы;
	ЭлементСчет = Элементы[ИмяЭлемента(ДопПараметры.Счет)];
	ЭлементВидСубконто = Элементы[ИмяЭлемента(ДопПараметры.ВидСубконто)];
	
	Счет = ПользовательскиеНастройки.Найти(ДопПараметры.Счет);
	ВидСубконто = ПользовательскиеНастройки.Найти(ДопПараметры.ВидСубконто);
	СубконтоМежд = ПользовательскиеНастройки.Найти(ДопПараметры.СубконтоМежд);
	СубконтоРегл = ПользовательскиеНастройки.Найти(ДопПараметры.СубконтоРегл);
	Если НЕ ДопСвойства.ЭтоМеждународный Тогда
		
		ТипПланСчетовРеглУчета = РеглУчетКлиентСервер.ТипПланСчетов();
		ТипВидыСубконтоРеглУчета = РеглУчетКлиентСервер.ТипВидСубконто();
		
		Счет.Значение = Новый(ТипПланСчетовРеглУчета);
		ВидСубконто.Значение = Новый(ТипВидыСубконтоРеглУчета);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипПланСчетовРеглУчета);
		ЭлементСчет.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипВидыСубконтоРеглУчета);
		ЭлементВидСубконто.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		
		Элементы.ГруппаЗначенийСубконто.ТекущаяСтраница = Элементы.СубконтоХозрасчетное;
	Иначе
		Счет.Значение = ПредопределенноеЗначение("ПланСчетов.Международный.ПустаяСсылка");
		ВидСубконто.Значение = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка");
		
		ЭлементСчет.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Международный");
		ЭлементВидСубконто.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные");
		Элементы.ГруппаЗначенийСубконто.ТекущаяСтраница = Элементы.СубконтоМеждународное;
	КонецЕсли;
	СубконтоМежд.Значение = Неопределено;
	СубконтоРегл.Значение = Неопределено;
	
КонецПроцедуры

Функция ИмяЭлемента(Идентификатор)
	
	Возврат "ЗначениеПараметраНастроек_Значение_" + СтрЗаменить(Идентификатор,"-","");
	
КонецФункции

Функция РасшифровкаСтандартногоОтчета(ФормаОтчета, Элемент, ИдентификаторРасшифровки, ИмяОтчета, КлючТекущегоВарианта)
	
	ПараметрыРасшифровки = МеждународныйУчетВызовСервера.ПараметрыРасшифровкиСтандартногоОтчета(
							ФормаОтчета.ОтчетДанныеРасшифровки, 
							ИдентификаторРасшифровки,
							ИмяОтчета, 
							КлючТекущегоВарианта);
							
	Если ПараметрыРасшифровки.ВозможныеРасшифровки.Количество() = 0 Тогда
		Возврат Истина; // СтандартнаяОбработка
	КонецЕсли;
	
	КомпоновщикНастроек = ФормаОтчета.Отчет.КомпоновщикНастроек;
	
	Если ПараметрыРасшифровки.ВозможныеРасшифровки.Количество() = 1 Тогда
		ПодготовитьРасшифровку(
			ПараметрыРасшифровки.ВозможныеРасшифровки[0].Значение,
			ПараметрыРасшифровки.ПараметрыФормыРасшифровки, 
			КомпоновщикНастроек);
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыФормыРасшифровки", ПараметрыРасшифровки.ПараметрыФормыРасшифровки);
		ДополнительныеПараметры.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
		
		Оповещение = Новый ОписаниеОповещения("РасшифровкаСтандартногоОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаОтчета.ПоказатьВыборИзМеню(Оповещение, ПараметрыРасшифровки.ВозможныеРасшифровки, Элемент);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывается выбор пункта действий расшифровки.
//
// Параметры:
//  ВыбранныйЭлемент - ЭлементСпискаЗначений - Выбранный пункт из списка действий расшифровки.
//  ДополнительныеПараметры - Структура - Дополнительные параметры содержат:
//		* ПараметрыФормыРасшифровки - Структура - Настройки расшифровки.
//  	* КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек расшифровываемого отчета.
//
Процедура РасшифровкаСтандартногоОтчетаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ПодготовитьРасшифровку(ВыбранныйЭлемент.Значение,
			ДополнительныеПараметры.ПараметрыФормыРасшифровки,
			ДополнительныеПараметры.КомпоновщикНастроек);
		
	КонецЕсли;
	
КонецПроцедуры 

// Формирует данные для открытия формы расшифровки.
//
// Параметры:
//  ЗначениеРасшифровки - Структура - Содержит имя, вариант отчета и дополнительные параметры:
//   * ДополнительныеПараметры - Структура - перечислены виды элементов:
//     ** Ключ - Строка - 
//     ** Значение - Произвольный - 
//  ПараметрыФормыРасшифровки - Структура - Содержит поля и отборы расшифровки.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек расшифровываемого отчета.
//
Процедура ПодготовитьРасшифровку(ЗначениеРасшифровки, ПараметрыФормыРасшифровки, Знач КомпоновщикНастроек) Экспорт
	
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("Строка") Тогда
		Если ПараметрыФормыРасшифровки.Поля.Свойство(ЗначениеРасшифровки) Тогда
			ПоказатьЗначение(, ПараметрыФормыРасшифровки.Поля[ЗначениеРасшифровки]);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыСчетов = Новый Массив;
	
	Если ЗначениеЗаполнено(ЗначениеРасшифровки.ДополнительныеПараметры) Тогда
		Если ЗначениеРасшифровки.ДополнительныеПараметры.Свойство("ДтКт") Тогда
			
			СторонаСчета = ЗначениеРасшифровки.ДополнительныеПараметры.ДтКт;
			СторонаКорСчета = СтрЗаменить("ДтКт", СторонаСчета, "");
			
			Если ПараметрыФормыРасшифровки.Поля.Свойство("Счет" + СторонаСчета) Тогда
				ПараметрыФормыРасшифровки.Поля.Вставить("Счет", ПараметрыФормыРасшифровки.Поля["Счет" + СторонаСчета]);
				ПараметрыФормыРасшифровки.Поля.Удалить("Счет" + СторонаСчета);
			КонецЕсли;
			Если ПараметрыФормыРасшифровки.Поля.Свойство("Счет" + СторонаКорСчета) Тогда
				ПараметрыФормыРасшифровки.Поля.Вставить("КорСчет", ПараметрыФормыРасшифровки.Поля["Счет" + СторонаКорСчета]);
				ПараметрыФормыРасшифровки.Поля.Удалить("Счет" + СторонаКорСчета);
			КонецЕсли;
			
			Если ПараметрыФормыРасшифровки.Отборы.Свойство("Счет" + СторонаСчета) Тогда
				ПараметрыФормыРасшифровки.Отборы.Вставить("Счет", ПараметрыФормыРасшифровки.Отборы["Счет" + СторонаСчета]);
				ПараметрыФормыРасшифровки.Отборы.Счет.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Счет");
				ПараметрыФормыРасшифровки.Отборы.Удалить("Счет" + СторонаСчета);
			КонецЕсли;
			Если ПараметрыФормыРасшифровки.Отборы.Свойство("Счет" + СторонаКорСчета) Тогда
				ПараметрыФормыРасшифровки.Отборы.Вставить("КорСчет", ПараметрыФормыРасшифровки.Отборы["Счет" + СторонаКорСчета]);
				ПараметрыФормыРасшифровки.Отборы.КорСчет.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСчет");
				ПараметрыФормыРасшифровки.Отборы.Удалить("Счет" + СторонаКорСчета);
			КонецЕсли;
			
			ПолеСчета 			= Новый ПолеКомпоновкиДанных("Счет" + СторонаСчета);
			ПолеКорСчета 	= Новый ПолеКомпоновкиДанных("Счет" + СторонаКорСчета);
			Для каждого ЭлементПользовательскихНастроек из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
				Если ТипЗнч(ЭлементПользовательскихНастроек) = Тип("ЭлементОтбораКомпоновкиДанных")
						И ЭлементПользовательскихНастроек.Использование
						И (ЭлементПользовательскихНастроек.ЛевоеЗначение = ПолеСчета 
							ИЛИ ЭлементПользовательскихНастроек.ЛевоеЗначение = ПолеКорСчета) Тогда
					ЭлементПользовательскихНастроек.Использование = Ложь;
					ПараметрыСчетов.Добавить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеРасшифровки.ДополнительныеПараметры.Свойство("ГруппировкаПоПериоду") Тогда
			ПараметрыФормыРасшифровки.Вставить("Группировки", Новый Структура(ЗначениеРасшифровки.ДополнительныеПараметры.ГруппировкаПоПериоду));
		КонецЕсли; 
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяОтчета",							ЗначениеРасшифровки.ИмяОтчета);
	Параметры.Вставить("КлючВарианта", 					ЗначениеРасшифровки.ИмяВарианта);
	Параметры.Вставить("КомпоновщикНастроек", 	КомпоновщикНастроек);
	Параметры.Вставить("Отбор", 										ПараметрыФормыРасшифровки.Отборы);
	Если ПараметрыФормыРасшифровки.Свойство("Поля") Тогда
		Параметры.Вставить("ПоляРасшифровки",			ПараметрыФормыРасшифровки.Поля);
	КонецЕсли;
		
	НастройкаОтчета = МеждународныйУчетВызовСервера.НастроитьОтчетРасшифровки(Параметры);
	
	ФиксированныеНастройки = НастройкаОтчета.ФиксированныеНастройки;
	ФиксированныеНастройки.ДополнительныеСвойства.Вставить("ВариантНаименование", ЗначениеРасшифровки.ИмяВарианта);
	
	КлючНастроек = "РасшифровкаСтандартногоОтчета"; 
	ОткрытьРасшифровку(ЗначениеРасшифровки, НастройкаОтчета, КлючНастроек, КлючНастроек);
	
	Для каждого ПараметрСчета Из ПараметрыСчетов Цикл
		ПараметрСчета.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ОткрытьРасшифровку(ЗначениеРасшифровки, НастройкиОтчета, КлючНазначенияИспользования = Неопределено, КлючПользовательскихНастроек = Неопределено) Экспорт
	
	ПрименяемыеНастройки = Новый Структура("ПрименяемыеНастройки",НастройкиОтчета.ФиксированныеНастройки);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", 									ЗначениеРасшифровки.ИмяВарианта);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", 	НастройкиОтчета.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", 			НастройкиОтчета.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", 		Истина);
	
	Если КлючНазначенияИспользования <> Неопределено Тогда
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", 	КлючНазначенияИспользования);
	КонецЕсли;
	Если КлючПользовательскихНастроек <> Неопределено Тогда
		ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючПользовательскихНастроек);
	КонецЕсли;
	Если ЗначениеРасшифровки.Свойство("ДополнительныеПараметры") Тогда
		ПараметрыФормы.Вставить("ДополнительныеПараметры", ЗначениеРасшифровки.ДополнительныеПараметры);
	КонецЕсли;
		
	ОткрытьФорму("Отчет." + ЗначениеРасшифровки.ИмяОтчета + ".Форма", ПараметрыФормы,, Истина);
			
КонецФункции

Функция ЭтоСтандартныйОтчет(ИмяОтчета) Экспорт
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("БухгалтерскийОтчетМеждународныйБезКорреспонденции");
	СписокОтчетов.Добавить("БухгалтерскийОтчетМеждународныйСКорреспонденцией");
	СписокОтчетов.Добавить("КарточкаСчетаМеждународный");
	СписокОтчетов.Добавить("ШахматнаяВедомостьМеждународный");
		
	Возврат СписокОтчетов.Найти(ИмяОтчета) <> Неопределено;
	
КонецФункции

#КонецОбласти
