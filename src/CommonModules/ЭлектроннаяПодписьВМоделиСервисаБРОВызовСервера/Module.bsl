////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронная подпись в модели сервиса".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция РеквизитыУчетнойЗаписи(Знач Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура(
		"УчетнаяЗаписьОблачнойПодписи, ЭлектроннаяПодписьВМоделиСервиса, ТелефонМобильныйДляАвторизации, ИдентификаторДокументооборота, Ссылка, МодельХраненияЗакрытогоКлюча",
		Неопределено, Ложь, "", "", Неопределено, Неопределено);
		
	УчетнаяЗапись = УчетнаяЗапись(Объект);
	УчетнаяЗаписьОблачнойПодписи = Неопределено;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		
		Сертификат = Мультирежим.СертификатПользователя(УчетнаяЗапись);
		Если НЕ Сертификат.Найден Тогда
			Возврат Результат;
		КонецЕсли;
		
		Реквизиты = "ИдентификаторДокументооборота, Ссылка";
		РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, Реквизиты);
		
		Если ИспользоватьСервисОблачнойПодписи() И Сертификат.МодельХраненияЗакрытогоКлюча = Перечисления.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись Тогда
			УчетнаяЗаписьОблачнойПодписи = ДокументооборотСКОПовтИсп.УчетнаяЗаписьОблачнойПодписьПоОтпечатку(Сертификат.Отпечаток);
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыУчетнойЗаписи);
		ЗаполнитьЗначенияСвойств(Результат, Сертификат);
		
	КонецЕсли;
	
	Результат.Вставить("УчетнаяЗаписьОблачнойПодписи", УчетнаяЗаписьОблачнойПодписи);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЭлектроннаяПодписьВМоделиСервиса(Знач Объект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектЗначение = Объект;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		
		МодульЭлектроннаяПодписьВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервиса");
		
		Если МодульЭлектроннаяПодписьВМоделиСервиса.ИспользованиеВозможно() Тогда
			
			УчетнаяЗапись = УчетнаяЗапись(ОбъектЗначение);
			Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
				Возврат РеквизитыУчетнойЗаписи(УчетнаяЗапись).ЭлектроннаяПодписьВМоделиСервиса;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМестоХраненияКлюча(Знач Объект = Неопределено) Экспорт
	
	Результат = Неопределено;
	ОбъектЗначение = Объект;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИспользоватьСервисОблачнойПодписи() Тогда
		Если Объект = Неопределено Тогда
			МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Организации.УчетнаяЗаписьОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|	И НЕ Организации.УчетнаяЗаписьОбмена.ПометкаУдаления
			|	И Организации.УчетнаяЗаписьОбмена.МодельХраненияЗакрытогоКлюча = Значение(Перечисление.МодельХраненияЗакрытогоКлюча.ОблачнаяПодпись)";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			ВсеОрганизации = Запрос.Выполнить().Выгрузить();
			ВсеУчетыеЗаписи = МодульСервисКриптографииDSS.ПолучитьВсеУчетныеЗаписи();
			ВсеСертификаты = МодульСервисКриптографииDSS.ПолучитьВсеСертификатыСервиса(Ложь);
			
			Если ВсеУчетыеЗаписи.Количество() > 0 
				И ВсеСертификаты.Количество() > 0 
				И ВсеОрганизации.Количество() > 0 Тогда
				Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ВсеОрганизации[0].Ссылка);
			КонецЕсли;	
		Иначе
			Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ОбъектЗначение);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Результат = Неопределено Тогда
		Результат = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ЭтоЭлектроннаяПодписьВМоделиСервиса(ОбъектЗначение));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСертификатПоОрганизации(Организация, Знач Пользователь = Неопределено) Экспорт
	
	Сертификат = Неопределено;
	УчетнаяЗапись = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УчетнаяЗаписьОрганизации(Организация);
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Отпечаток = Мультирежим.ОтпечатокСертификатаПользователя(УчетнаяЗапись, Пользователь);
		Сертификат = НайтиСертификатВХранилищеПоОтпечатку(Отпечаток);
		Если ИспользоватьСервисОблачнойПодписи() И Сертификат.Количество() <= 2 Тогда
			СертификатОблака = НайтиСертификатОблачнойПодписиПоОрганизации(Организация);
			Если СертификатОблака <> Неопределено Тогда
				Сертификат = СертификатОблака;
			КонецЕсли;
		КонецЕсли;	
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись, Сертификат);
	КонецЕсли;
	
	Возврат Сертификат;
	
КонецФункции

Функция НайтиСертификатОблачнойПодписиПоОрганизации(Организация, Знач Пользователь = Неопределено) Экспорт
	
	Сертификат = Неопределено;
	УчетнаяЗапись = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УчетнаяЗаписьОрганизации(Организация);
	Если ЗначениеЗаполнено(УчетнаяЗапись) И ИспользоватьСервисОблачнойПодписи() Тогда
		
		Отпечаток = Мультирежим.ОтпечатокСертификатаПользователя(УчетнаяЗапись, Пользователь);
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		СертификатОблака = МодульСервисКриптографииDSS.НайтиСертификат(Новый Структура("Отпечаток", Отпечаток));
		
		Если СертификатОблака <> Неопределено И СертификатОблака.Выполнено Тогда
			Сертификат = ПодготовитьСертификатОблачнойПодписи(СертификатОблака.ДанныеСертификата);
			КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(УчетнаяЗапись, Сертификат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сертификат;
	
КонецФункции

Функция ПодготовитьСертификатОблачнойПодписи(ОблачныйСертификат, РазделСубъекта = "Субъект", РазделИздатель = "Издатель") Экспорт
	
	Результат = ОблачныйСертификат;
	
	ПоляСоответствие = Новый Соответствие;
	ПоляСоответствие.Вставить("OID1_2_643_100_1", "OGRN");
	ПоляСоответствие.Вставить("OID1_2_643_100_3", "SNILS");
	ПоляСоответствие.Вставить("OID1_2_643_100_4", "INNLE");
	ПоляСоответствие.Вставить("OID1_2_643_100_5", "OGRNIP");
	ПоляСоответствие.Вставить("OID1_2_643_3_131_1_1", "INN");
	ПоляСоответствие.Вставить("OID1_2_840_113549_1_9_1", "E");
	ПоляСоответствие.Вставить("OID2_5_4_3", "CN");
	ПоляСоответствие.Вставить("OID2_5_4_4", "SN");
	ПоляСоответствие.Вставить("OID2_5_4_6", "C");
	ПоляСоответствие.Вставить("OID2_5_4_7", "L");
	ПоляСоответствие.Вставить("OID2_5_4_8", "S");
	ПоляСоответствие.Вставить("OID2_5_4_9", "Street");
	ПоляСоответствие.Вставить("OID2_5_4_10", "O");
	ПоляСоответствие.Вставить("OID2_5_4_11", "OU");
	ПоляСоответствие.Вставить("OID2_5_4_12", "T");
	ПоляСоответствие.Вставить("OID2_5_4_42", "G");
	
	Если ТипЗнч(Результат) = Тип("ФиксированнаяСтруктура") Тогда
		Результат = Новый Структура(Результат);
	КонецЕсли;
	
	Если ТипЗнч(Результат[РазделИздатель]) = Тип("ФиксированнаяСтруктура") Тогда
		Результат[РазделИздатель] = Новый Структура(Результат[РазделИздатель])
	КонецЕсли;
	
	Если ТипЗнч(Результат[РазделСубъекта]) = Тип("ФиксированнаяСтруктура") Тогда
		Результат[РазделСубъекта] = Новый Структура(Результат[РазделСубъекта])
	КонецЕсли;
	
	Для каждого СтрокаКлюча Из ПоляСоответствие Цикл
		ТекущееЗначение = "";
		Если Результат[РазделИздатель].Свойство(СтрокаКлюча.Ключ, ТекущееЗначение) Тогда
			Результат[РазделИздатель].Вставить(СтрокаКлюча.Значение, ТекущееЗначение);
		КонецЕсли;
		ТекущееЗначение = "";
		Если Результат[РазделСубъекта].Свойство(СтрокаКлюча.Ключ, ТекущееЗначение) Тогда
			Результат[РазделСубъекта].Вставить(СтрокаКлюча.Значение, ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваРасшифрованияПодписанияСертификата(Сертификат) Экспорт
	
	Результат = ЭлектроннаяПодписьВМоделиСервиса.СвойстваРасшифрованияПодписанияСертификата(Сертификат);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УчетнаяЗапись(Знач Объект)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		Результат = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "УчетнаяЗаписьОбмена");
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "УчетнаяЗапись");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "УчетнаяЗапись");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		Если Объект.Свойство("УчетнаяЗапись") Тогда
			Результат = Объект.УчетнаяЗапись;
		ИначеЕсли Объект.Свойство("УчетнаяЗаписьОбмена") Тогда
			Результат = Объект.УчетнаяЗаписьОбмена;
		ИначеЕсли Объект.Свойство("Ссылка") И ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
			Результат = Объект.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиСертификатВХранилищеПоОтпечатку(Отпечаток) Экспорт
	
	Сертификат = Неопределено;
	Сертификат = ХранилищеСертификатов.НайтиСертификат(Новый Структура("Отпечаток", Отпечаток));
	Если Сертификат <> Неопределено Тогда
		Сертификат = Новый Структура(Сертификат);
		Сертификат.Вставить("ЭлектроннаяПодписьВМоделиСервиса", Истина);
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Истина, Сертификат);
	Иначе
		Сертификат = Новый Структура("Отпечаток", Отпечаток);
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь, Сертификат);
	КонецЕсли;
	
	Возврат Сертификат;
	
КонецФункции

Функция ИспользоватьСервисОблачнойПодписи()
	
	ПредыдущееИмя = "СтандартныеПодсистемы.ЭлектроннаяОблачнаяПодпись";
	Результат = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует(ПредыдущееИмя)
		ИЛИ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSS = ОбщегоНазначения.ОбщийМодуль("СервисКриптографииDSS");
		Результат = МодульСервисКриптографииDSS.ИспользоватьСервисОблачнойПодписи();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

#КонецОбласти