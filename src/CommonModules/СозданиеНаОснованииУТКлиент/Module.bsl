
#Область ПрограммныйИнтерфейс

#Область ЗаказыНаПередачуВПроизводство

//++ НЕ УТ

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказыНаПередачуВПроизводство(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура();
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрыФормы.Вставить("Заказ", МассивСсылок);
	Иначе
		ПараметрыФормы.Вставить("Заказ", МассивСсылок[0]);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.Форма",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	
КонецПроцедуры
//-- НЕ УТ

#КонецОбласти

#Область ЗаказыПоставщикам

// Обработчик подключенной команды.
//
// Параметры:
//   ДокументОснование - ДокументОбъект. - Документ, для которого выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СозданиеЗаказовПоставщикамНаОсновании(ДокументОснование, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	СозданиеНаОснованииУТВызовСервера.ПроверитьВозможностьВводаНаОсновании(ДокументОснование);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	ОткрытьФорму(
		"Документ.ЗаказПоставщику.Форма.СозданиеЗаказовПоставщикамНаОсновании", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплату(МассивСсылок, ПараметрыВыполнения) Экспорт
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(ПараметрКоманды);
	ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуРеализацияАкт(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;

	ПараметрыОткрытияФормы = СозданиеНаОснованииУТВызовСервера.СчетНаОплатуРеализацияАктПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = '%Документ% оформлена по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.';
							|en = '%Документ% is created by several orders. Enter the commercial invoice according to the orders.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если НЕ СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.';
				|en = 'It is not required to enter a commercial invoice based on document %1. Settlements are made based on orders / invoices.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуПредоплатаПоДоговору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если Не СозданиеНаОснованииУТВызовСервера.СчетНаОплатуПоДоговоруПроверитьВозможностьСозданияСчетовНаОплату(ПараметрКоманды) Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить счет на оплату на основании договора %1. Расчеты ведутся по заказам / накладным.';
				|en = 'It is not required to enter a commercial invoice based on document %1. Settlements are made based on orders / invoices.'"),
			ПараметрКоманды);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаДокумента",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуОтчетДавальцу(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыОткрытияФормы = СозданиеНаОснованииУТВызовСервера.СчетНаОплатуОтчетДавальцуПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = '%Документ% оформлен по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.';
							|en = '%Документ% is created by several orders. Enter the commercial invoice according to the orders.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры
//-- Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСчетНаОплатуЗаказДавальца(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник");
	ПараметрыВыполненияКоманды.Вставить("Уникальность");
	ПараметрыВыполненияКоманды.Вставить("Окно");
	ПараметрыВыполненияКоманды.Вставить("НавигационнаяСсылка");
	
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
		ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	Иначе
		ПараметрКоманды = МассивСсылок[0];
		ДокументОснование = ПродажиВызовСервера.ПолучитьОснованиеДляСчетаНаОплату(МассивСсылок[0]);
		ПараметрыФормы = Новый Структура("ДокументОснование", ДокументОснование);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ДокументОснование", ПараметрКоманды);
	
	ОткрытьФорму(
		"Документ.СчетНаОплатуКлиенту.Форма.ФормаСозданияСчетовНаОплату",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

// Обработчик подключенной команды.
// 
// Параметры:
//  МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
Процедура СоздатьСчетНаОплатуОтчетДавальцу2_5(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыОткрытияФормы =
		СозданиеНаОснованииУТВызовСервера.СчетНаОплатуОтчетДавальцу2_5ПолучитьПараметрыОткрытияФормы(ПараметрКоманды);
	
	Если ПараметрыОткрытияФормы = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = '%1 оформлен по нескольким заказам. Необходимо ввести счет на оплату на основании заказов.';
				|en = '%1 is registered under several orders. Enter the commercial invoice based on the orders.'"),
			ПараметрКоманды);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытияФормы.ИмяФормы,
		ПараметрыОткрытияФормы.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

#Область ДокументыНаОснованииЗаказа

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура АктВыполненныхРаботСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктВыполненныхРаботПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия <> Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	КонецЕсли;

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ВнутреннееПотреблениеСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ВнутреннееПотреблениеСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия =
		СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(
			МассивСсылок,
			"ВнутреннееПотребление");
	Если ПараметрыОткрытия.ПараметрыФормы.Свойство("Основание") Тогда
		ПараметрыОткрытия.ПараметрыФормы.Основание.Вставить("ОтборПоСкладу", Ложь);
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
																											"ПоступлениеТоваровОтХранителя");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеТоваровОтКомиссионераСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеТоваровОтХранителяСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
						"ПоступлениеТоваровОтХранителя",ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера"));
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПриобретениеТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПриобретениеТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СборкаТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.СборкаТоваровСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"СборкаТоваров");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура РеализацияТоваровУслугСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.РеализацияТоваровУслугСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.РеализацияТоваровУслугПараметрыОткрытияФормы(МассивСсылок);
	
	Если НЕ ПараметрыОткрытия = Неопределено Тогда
	
		ОткрытьФорму(
			"Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПеремещениеТоваровСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПеремещениеТоваровСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПеремещениеТоваров");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

//++ НЕ УТ

//++ Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаСырьяПереработчикуСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПередачаСырьяПереработчикуСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПередачаСырьяПереработчику");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеОтПереработчикаСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеОтПереработчикаСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПоступлениеОтПереработчика");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры
//-- Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ДвижениеПродукцииИМатериаловСоздатьПередачуВКладовуюНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ДвижениеПродукцииИМатериаловСоздатьПередачуВКладовуюНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ДвижениеПродукцииИМатериалов", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВКладовую"));
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ДвижениеПродукцииИМатериаловСоздатьПередачуИзПроизводстваНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ДвижениеПродукцииИМатериаловСоздатьПередачуИзПроизводстваНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ДвижениеПродукцииИМатериалов", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства"));
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ДвижениеПродукцииИМатериаловСоздатьПередачуВПроизводствоНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ДвижениеПродукцииИМатериаловСоздатьПередачуВПроизводствоНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ДвижениеПродукцииИМатериалов", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаМатериаловВПроизводство"));
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ДвижениеПродукцииИМатериаловСоздатьВозвратИзПроизводстваНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ДвижениеПродукцииИМатериаловСоздатьВозвратИзПроизводстваНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ДвижениеПродукцииИМатериалов", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства"));
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

//-- НЕ УТ

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаТоваровХранителюСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПередачаТоваровХранителюСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПередачаТоваровХранителюПараметрыОткрытияФормы(МассивСсылок);
	
	Если Не ПараметрыОткрытия = Неопределено Тогда
		
		ОткрытьФорму("Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента",
					ПараметрыОткрытия,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно,
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаДавальцуСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПередачаДавальцуСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПередачаДавальцу");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеСырьяОтДавальцаСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ПоступлениеСырьяОтДавальцаСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПараметрыОткрытияФормыНакладнойНаОснованииЗаказа(МассивСсылок,
		"ПоступлениеСырьяОтДавальца");
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка,,
		ПараметрыОткрытия.РежимОткрытияОкнаФормы);
	
КонецПроцедуры
//-- Устарело_Переработка24

// Обработчик подключенной команды.
//
// Параметры:
//  МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОтгрузкаТоваровСХраненияПередачаДавальцуСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ОтгрузкаТоваровСХраненияПередачаДавальцуСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия =
		СозданиеНаОснованииУТВызовСервера.ОтгрузкаТоваровСХраненияПередачаДавальцуПараметрыОткрытияФормы(МассивСсылок);
	
	Если Не ПараметрыОткрытия = Неопределено Тогда
		
		ОткрытьФорму(
			"Документ.ОтгрузкаТоваровСХранения.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//  МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОтгрузкаТоваровСХраненияВозвратДавальцуСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ОбщийМодуль.СозданиеНаОснованииУТКлиент.ОтгрузкаТоваровСХраненияВозвратДавальцуСоздатьНаОснованииЗаказа");
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОткрытия =
		СозданиеНаОснованииУТВызовСервера.ОтгрузкаТоваровСХраненияВозвратДавальцуПараметрыОткрытияФормы(МассивСсылок);
	
	Если Не ПараметрыОткрытия = Неопределено Тогда
		
		ОткрытьФорму(
			"Документ.ОтгрузкаТоваровСХранения.Форма.ФормаДокумента",
			ПараметрыОткрытия,
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТКА

// Обработчик подключения для команды создания на основании документа ОперацияПоПлатежной карте для хозяйственной операции
// по возврату оплаты.
//
// Параметры:
//	МассивСсылок - Массив - массив ссылок объектов, для которых выполняется обработчик.
//	ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды.
//
Процедура ОперацияПоПлатежнойКарте_Возврат(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник, Уникальность, Окно, НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыФормы = СозданиеНаОснованииУТВызовСервера.ОперацияПоПлатежнойКарте_ВозвратПараметрыЗаполнения(МассивСсылок);
	
	ОткрытьФорму("Документ.ОперацияПоПлатежнойКарте.Форма.ФормаДокумента",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно,
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);	
	
КонецПроцедуры

#КонецОбласти

#Область СогласованиеПродажи

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНовоеСогласованиеЗаказаКлиента(МассивСсылок, ПараметрыВыполнения) Экспорт

	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание = МассивСсылок;
	Иначе
		Основание = МассивСсылок[0];
	КонецЕсли;
	
	ОткрытьФорму("БизнесПроцесс.СогласованиеПродажи.ФормаОбъекта",
	Новый Структура("Основание", Основание),
	,
	,);

КонецПроцедуры 

#КонецОбласти 

#Область СогласованиеЗакупки

Процедура СоздатьНовоеСогласованиеЗаказаПоставщику(МассивСсылок, ПараметрыВыполнения) Экспорт

	ОткрытьФорму("БизнесПроцесс.СогласованиеЗакупки.ФормаОбъекта",
	Новый Структура("Основание",МассивСсылок),
	,
	,);

КонецПроцедуры 

#КонецОбласти 


// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СозданиеСвязанныхОбъектов(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	ПараметрыВыполненияКоманды.Источник = ПараметрыВыполнения.Форма;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьФормуКомандДополнительныхОтчетовИОбработок(
		МассивСсылок,
		ПараметрыВыполненияКоманды,
		ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов());

КонецПроцедуры 

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОпределитьСправочноеРазмещениеПоЯчейкам(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДокументПриемки",ПараметрКоманды);
	ОткрытьФорму("Обработка.СправочноеРазмещениеНоменклатуры.Форма.Форма",Параметры,ПараметрыВыполненияКоманды.Источник,ПараметрКоманды);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПередачаВЭксплуатациюНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаВЭксплуатацию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотребление.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СписаниеНаРасходыАктивыНаОсновании(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Основание = Новый Структура;
	Основание.Вставить("ДокументОснование", ПараметрКоманды);
	Основание.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ПараметрыФормы = Новый Структура("Основание", Основание);
	
	ОткрытьФорму(
		"Документ.ВнутреннееПотребление.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Производство21

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНаОснованииМаршрутныхЛистов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = Новый Массив();
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды.Добавить(МассивСсылок);
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ТекстПредупреждения = Неопределено;
	ПараметрыОформления = СозданиеНаОснованииУТВызовСервера.ВыпускПродукцииПараметрыОформленияВыпуска(ПараметрКоманды, ТекстПредупреждения);
	Если ПараметрыОформления = Неопределено Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДанныеРаспоряжений = Новый Массив;
	Для каждого Ссылка Из ПараметрКоманды Цикл
		СтруктураРаспоряжения = Новый Структура("Распоряжение", Ссылка);
		ДанныеРаспоряжений.Добавить(СтруктураРаспоряжения);
	КонецЦикла;
	
	// Откроем форму
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("РеквизитыШапки",     ПараметрыОформления);
	ПараметрыОснования.Вставить("ДанныеРаспоряжений", ДанныеРаспоряжений);
	
	ОткрытьФорму("Документ.ВыпускПродукции.ФормаОбъекта", Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры
//-- Устарело_Производство21

//-- НЕ УТКА

//++ НЕ УТКА

//++ Устарело_Производство21

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНаОснованииСпецификации(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;
	
	ЗначенияЗаполнения = Новый Структура("МассивОбъектов, ТипОснования", ПараметрКоманды, Тип("СправочникСсылка.РесурсныеСпецификации"));
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.ПлановаяКалькуляция.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры
//-- Устарело_Производство21
	
//-- НЕ УТКА

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьНаОснованииРасходныйОрдерНаТовары(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОчиститьСообщения();
	
	МассивРаспоряжений = Новый Массив;
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		МассивРаспоряжений.Добавить(МассивСсылок);
	Иначе
		МассивРаспоряжений = МассивСсылок;
	КонецЕсли;
		
	ОткрытьФорму("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроекСозданияОрдеров",Новый Структура("МассивРаспоряжений",МассивРаспоряжений),,,,,);	
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура АктНаПередачуПрав(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента";
	
	ПараметрыОснования = Новый Структура;
	
	ПараметрыОснования.Вставить("ДокументОснование",   ПараметрКоманды);
	ПараметрыОснования.Вставить("ЗаполнятьПоОстаткам", Истина);
	ПараметрыОснования.Вставить("ВариантОформленияПродажи",
	ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав"));
	
	ОткрытьФорму(ИмяФормы, Новый Структура("Основание", ПараметрыОснования));

КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаВнутреннееПотребление(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаВнутреннееПотребление");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);

КонецПроцедуры 

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидСоздаваемыхДокументов", "ЗаказНаПеремещение");
	ПараметрыФормы.Вставить("ДокументОснование", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникФормированияСкладскихДокументовПоВыводуИзАссортимента.Форма.Форма",
					ПараметрыФормы,
					ПараметрыВыполненияКоманды.Источник,
					ПараметрыВыполненияКоманды.Уникальность,
					ПараметрыВыполненияКоманды.Окно);
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьОбеспечивающийЗаказ(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрКоманды = ?(ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор, МассивСсылок[0], МассивСсылок);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"СоздатьОбеспечивающийЗаказПослеУточненияТоваров",
		СозданиеНаОснованииУТКлиент,
		ПараметрыВыполнения);
		
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ссылка", ПараметрКоманды);
	ПараметрыОткрытия.Вставить("ИмяМенеджераДокумента",
		ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры.ИмяМенеджераДокумента);
	ПараметрыОткрытия.Вставить("ПараметрыОписаныВОбщемМодуле",
		ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры.ПараметрыОписаныВОбщемМодуле);
	
	ОткрытьФорму(
		"ОбщаяФорма.СозданиеНаОснованииУточнениеЗаказываемогоКоличества",
		ПараметрыОткрытия,
		ПараметрыВыполнения.Форма,
		Новый УникальныйИдентификатор(),
		,
		,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СоздатьОбеспечивающийЗаказПослеУточненияТоваров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("АдресТовары", Результат.АдресТовары);
	Основание.Вставить("Основание", Результат.Основание);
	Основание.Вставить("Склад", Результат.Склад);
	
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ДопПараметры = ДополнительныеПараметры.ОписаниеКоманды; // - Структура
	ОткрытьФорму(ДопПараметры.ДополнительныеПараметры.ИмяФормы,
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПриобретенияТоваровУслугПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПеремещениеНаОснованииПриемкиТоваровНаХранениеПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	ПараметрыСоздания = СозданиеНаОснованииУТВызовСервера.СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПараметрыСоздания(ПараметрКоманды);
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада",СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада';
													|en = 'Select warehouse'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура УстановитьПоддержаниеЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если Не СозданиеНаОснованииУТВызовСервера.УстановитьПоддержаниеЗапасов(ПараметрКоманды) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Поддержание запаса не установлено, так как нет ни одного склада указанного формата';
										|en = 'Stock maintaining is not set, since there is no warehouse of the specified format'"));
		Возврат;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура НастройкаПоддержанияЗапасов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ПараметрКоманды);
	ПараметрыФормы = Новый Структура("Отбор, Источник", СтруктураОтбора, "ИзменениеАссортимента");
	ОткрытьФорму("Обработка.НастройкаПоддержанияЗапасов.Форма", ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПомощникОформленияСкладскихАктов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если НЕ ПараметрыВыполнения.ОписаниеКоманды.МножественныйВыбор Тогда
		ПараметрКоманды = МассивСсылок;
	Иначе
		ПараметрКоманды = МассивСсылок[0];
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		РезультатПроверки = СозданиеНаОснованииУТВызовСервера.ПроверитьСтатусПересчетаНаСервере(ПараметрКоманды);
		Если Не РезультатПроверки.МожноОткрытьПомощник Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.СообщениеПользователю);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ПараметрКоманды);
	ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", 
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
		
КонецПроцедуры

//++ НЕ УТКА

//++ Устарело_Производство21

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ОтгрузкаПоМаршрутнымЛистам(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;
	
	ПараметрыФормы = Новый Структура("СписокМаршрутныхЛистов", ПараметрКоманды);
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуМаршрутныхЛистов", Истина);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма.КорректировкаЗаказаМатериалов", 
					ПараметрыФормы, 
					ПараметрыВыполненияКоманды.Источник, 
					ПараметрыВыполненияКоманды.Уникальность, 
					ПараметрыВыполненияКоманды.Окно, 
					ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры
//-- Устарело_Производство21

//-- НЕ УТКА

//++ НЕ УТКА

//++ Устарело_Производство21

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура КорректировкаЗаказаМатериалов(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Перем ТекстПредупреждения;
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;

	Если НЕ СозданиеНаОснованииУТВызовСервера.ВводКорректировкиДоступен(ПараметрКоманды, ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("СписокЗаказов", ПараметрКоманды);
	ПараметрыФормы.Вставить("ЗаполнятьПоСпискуЗаказов", Истина);
	ОткрытьФорму("Обработка.ВводКорректировкиЗаказаМатериалов.Форма", 
			ПараметрыФормы, 
			ПараметрыВыполненияКоманды.Источник, 
			ПараметрыВыполненияКоманды.Уникальность, 
			ПараметрыВыполненияКоманды.Окно, 
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры
//-- Устарело_Производство21

//-- НЕ УТКА

//++ НЕ УТ

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СозданиеВыработкиСотрудников(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОчиститьСообщения();
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	Если ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
		
		Массив = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(МассивСсылок, "Проведен, Ссылка");
		
		Для Каждого Строка Из Массив Цикл
			
			Реквизиты = Строка.Значение;
			Если Не Реквизиты.Проведен Тогда
				ТекстОшибкиПроведен = НСтр("ru = 'Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.';
											|en = 'Document %Документ% is not posted. Generation from unposted documents is not allowed.'");
				ТекстОшибкиПроведен = СтрЗаменить(ТекстОшибкиПроведен, "%Документ%", Реквизиты.Ссылка);
				ВызватьИсключение ТекстОшибкиПроведен;
			КонецЕсли;
		КонецЦикла;
		
	//++ НЕ УТКА
	ИначеЕсли ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		Массив = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(МассивСсылок, "Статус, Проведен, Ссылка");
		
		Для Каждого Строка Из Массив Цикл
			
			Реквизиты = Строка.Значение;
			
			ЕстьОшибкиСтатус =  Не (
			Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат")
			Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен")
			);
			
			Если ЕстьОшибкиСтатус Тогда
				ТекстОшибкиСтатус = НСтр("ru = 'Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""Начат"", и ""Завершен"".';
										|en = 'Document %Документ% is in the ""%Статус%"" status. Generation is only allowed from base documents in ""Started"" or ""Completed"" statuses.'");
				
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", Реквизиты.Ссылка);
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
				ВызватьИсключение ТекстОшибкиСтатус;
				
			КонецЕсли;
			
			Если Не Реквизиты.Проведен Тогда
				ТекстОшибкиПроведен = НСтр("ru = 'Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.';
											|en = 'Document %Документ% is not posted. Generation from unposted documents is not allowed.'");
				ТекстОшибкиПроведен = СтрЗаменить(ТекстОшибкиПроведен, "%Документ%", Реквизиты.Ссылка);
				ВызватьИсключение ТекстОшибкиПроведен;
			КонецЕсли;
			
		КонецЦикла;

	//++ Устарело_Производство21	
	ИначеЕсли ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		
		Массив = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(МассивСсылок, "Статус, УправлениеМаршрутнымиЛистами, Проведен, Ссылка");
		
		Для Каждого Строка Из Массив Цикл
			
			Реквизиты = Строка.Значение;
			
			ЕстьОшибкиСтатус =  Не (
				Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполняется")
				Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен")
				Или (
				(Реквизиты.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование")
				ИЛИ Реквизиты.УправлениеМаршрутнымиЛистами = ПредопределенноеЗначение("Перечисление.УправлениеМаршрутнымиЛистами.РегистрацияОпераций"))
				И Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхЛистовПроизводства.КВыполнению")
				)
			);
			
			Если ЕстьОшибкиСтатус Тогда
				
				ТекстОшибкиСтатус = НСтр("ru = 'Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""К выполнению"", ""Выполняется"" и ""Выполнен"".';
										|en = 'The %Документ% document is in the ""%Статус%"" status. Input on the basis is allowed only in the ""In progress"" or ""Completed"" statuses.'");
				
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", Реквизиты.Ссылка);
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
				
				ВызватьИсключение ТекстОшибкиСтатус;
				
			КонецЕсли;
			
			Если Не Реквизиты.Проведен Тогда
				ТекстОшибкиПроведен = НСтр("ru = 'Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.';
											|en = 'Document %Документ% is not posted. Generation from unposted documents is not allowed.'");
				ТекстОшибкиПроведен = СтрЗаменить(ТекстОшибкиПроведен, "%Документ%", Реквизиты.Ссылка);
				ВызватьИсключение ТекстОшибкиПроведен;
			КонецЕсли;
		
		КонецЦикла;
	//-- Устарело_Производство21
		
	ИначеЕсли ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		
		Массив = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(МассивСсылок, "Статус, Проведен, Ссылка");
		
		Для Каждого Строка Из Массив Цикл
			
			Реквизиты = Строка.Значение;
			
			ЕстьОшибкиСтатус =  Не (Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Выполняется")
			Или Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Закрыт"));
			
			Если ЕстьОшибкиСтатус Тогда
				
				ТекстОшибкиСтатус = НСтр("ru = 'Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусах ""Выполняется"" и ""Закрыт"".';
										|en = 'Document %Документ% is in the ""%Статус%"" status. Generation is only allowed from base documents in ""In progress"" or ""Closed"" statuses.'");
				
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", Реквизиты.Ссылка);
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
				
				ВызватьИсключение ТекстОшибкиСтатус;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.СменноеЗадание") Тогда
		Массив = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъектов(МассивСсылок, "Статус, Проведен, Ссылка");
		
		Для Каждого Строка Из Массив Цикл
			
			Реквизиты = Строка.Значение;
			
			ЕстьОшибкиСтатус = Не Реквизиты.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСменныхЗаданий.Закрыто");
			
			Если ЕстьОшибкиСтатус Тогда
				
				ТекстОшибкиСтатус = НСтр("ru = 'Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в статусе ""Закрыто"".';
										|en = '%Документ% document is in the ""%Статус%"" status. Input on basis is allowed in ""Closed"" status.'");
				
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Документ%", Реквизиты.Ссылка);
				ТекстОшибкиСтатус = СтрЗаменить(ТекстОшибкиСтатус, "%Статус%",   Реквизиты.Статус);
				
				ВызватьИсключение ТекстОшибкиСтатус;
			
			КонецЕсли;
			
		КонецЦикла;
		
		ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоСменномуЗаданию(МассивСсылок);
		
		Возврат;
		
	//-- НЕ УТКА
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Операция недоступна для выбранного объекта.';
								|en = 'Operation is not available for the selected object.'");
		
	КонецЕсли;
	
	ОперативныйУчетПроизводстваКлиент.ОформитьВыработкуСотрудниковПоРаспоряжениям(МассивСсылок);
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ

//++ Устарело_Производство21

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СписанияЗатратНаВыпускНаОснованииВыпусковПродукции(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;
	
	ТекстОшибки = СозданиеНаОснованииУТВызовСервера.СписаниеЗатратНаВыпускПроверитьОбъектыОснований(ПараметрКоманды);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФормаНового = ПолучитьФорму("Документ.СписаниеЗатратНаВыпуск.ФормаОбъекта",
		,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	ОбъектФормы = ФормаНового.Объект;
	Результат = СозданиеНаОснованииУТВызовСервера.СписаниеЗатратНаВыпускПараметрыВводаНаОсновании(ПараметрКоманды, ОбъектФормы);
	
	Если Результат.Свойство("ОткрытьФормуНового") Тогда
		
		КопироватьДанныеФормы(ОбъектФормы, ФормаНового.Объект);
		ФормаНового.ОбновитьПриОткрытии = Истина;
		ФормаНового.Открыть();
	
	ИначеЕсли Результат.СписокДокументов.Количество() = 0 Тогда
		
		ОткрытьФорму("Документ.СписаниеЗатратНаВыпуск.ФормаОбъекта",
			Новый Структура("Основание", Результат),
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
		
	ИначеЕсли Результат.СписокДокументов.Количество() > 0 Тогда
		
		ОткрытьФорму("Документ.СписаниеЗатратНаВыпуск.Форма.ПодтверждениеНовыхДокументов",
			Новый Структура("СписокДокументов", Результат.СписокДокументов),
			ПараметрыВыполненияКоманды.Источник,
			ПараметрыВыполненияКоманды.Уникальность,
			ПараметрыВыполненияКоманды.Окно,
			ПараметрыВыполненияКоманды.НавигационнаяСсылка);
			
	Иначе
		
		ПоказатьПредупреждение(,НСтр("ru = 'Команда не может быть выполнена для указанного объекта.';
									|en = 'Cannot execute the command for the object.'"));
		
	КонецЕсли;
	
КонецПроцедуры
//-- Устарело_Производство21

//-- НЕ УТ

#Область КорректировкаНазначения

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для снятия резервов.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерСнятияРезерва(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезерв");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для снятия резервов с нескольких назначений.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерМассовогоСнятияРезерва(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.СнятьРезервПоМногимНазначениям");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	ПараметрыФормы.НесколькоНазначений = Истина;
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для резервирования товаров.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерРезервирования(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	
	ПараметрыФормы.Мастер = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для резервирования товаров под несколько назначений.
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
Процедура ОткрытьМастерМассовогоРезервирования(ПараметрыВыполнения) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.Резервировать");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	ПараметрыФормы.НесколькоНазначений = Истина;
	
	ОткрытьФорму("Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы, ПараметрыВыполнения.Форма);
	
КонецПроцедуры

//++ НЕ УТКА

//
// Открывает форму обработки заполнения документа "Корректировка назначения товаров" для встречной корректировки назначений товаров
//  Параметры:
//   ПараметрыВыполнения - см. ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, которое нужно выполнить после закрытия формы мастера встречной корректировки
Процедура ОткрытьМастерВстречнойКорректировкиНазначения(ПараметрыВыполнения, ОписаниеОповещения = Неопределено) Экспорт
	
	ПараметрыФормы = ОбеспечениеКлиент.ПараметрыФормыЗаполненияКорректировкиНазначенияТоваров();
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыВыполнения);
	ПараметрыФормы.Мастер = Истина;
	ПараметрыФормы.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийКорректировкиНазначения.ВстречнаяКорректировка");
	ПараметрыФормы.Заказ = ПараметрыВыполнения.ОбъектыОснований[0];
	ПараметрыФормы.КоличествоПередатьПодНазначение = ПараметрыВыполнения.КоличествоПередатьПодНазначение;

	ОткрытьФорму(
		"Обработка.ЗаполнениеКорректировкиНазначения.Форма.ФормаОбъекта",
		ПараметрыФормы,
		ПараметрыВыполнения.Форма,,,,
		ОписаниеОповещения);
	
КонецПроцедуры
//-- НЕ УТКА

#КонецОбласти

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьРасходныйКассовыйОрдер(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"РасходныйКассовыйОрдер");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьСписаниеБезналичныхДС(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		МассивСсылок,
		"СписаниеБезналичныхДенежныхСредств");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   ДокументСсылка - ЛюбаяСсылка - ссылка на документ, для которого выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьОперациюПоПлатежнойКарте(ДокументСсылка, ПараметрыВыполнения) Экспорт
	
	ДенежныеСредстваКлиент.СоздатьДокументОплатыНаОснованииЗаявокНаРасходДС(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументСсылка),
		"ОперацияПоПлатежнойКарте");
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоручениеЭкспедитору(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ОткрытьФорму("Документ.ПоручениеЭкспедитору.Форма.ФормаДокумента", Новый Структура("Основание", МассивСсылок));
	
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СписаниеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПоступлениеБезналичныхДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.ПоступлениеБезналичныхДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрыОснования = Новый Структура;	
	ПараметрыОснования.Вставить("ОтчетПоКомиссииМеждуОрганизациями",  МассивСсылок);
	
	ОткрытьФорму(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаДокумента",
		Новый Структура("Основание", ПараметрыОснования),
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
			
КонецПроцедуры

// Обработчик подключенной команды.
//
// Параметры:
//   МассивСсылок - Массив Из ЛюбаяСсылка - ссылки выбранных объектов, для которых выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура ПриемкаТоваровНаХранениеСоздатьНаОснованииЗаказа(МассивСсылок, ПараметрыВыполнения) Экспорт

	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ПараметрыВыполнения.ОписаниеКоманды.ДополнительныеПараметры);
	
	ПараметрКоманды = МассивСсылок;
	
	ОчиститьСообщения();
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.ПриемкаТоваровНаХранениеПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ПриемкаТоваровНаХранение.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);

КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеПолученияСпискаСкладов(ПараметрыСоздания, ПараметрыВыполнения)
	
	Если ПараметрыСоздания.НесколькоСкладов Тогда
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
			"СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада",
			СозданиеНаОснованииУТКлиент, ПараметрыВыполнения);
			
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ПараметрыСоздания.СписокСкладов);
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор склада';
													|en = 'Select warehouse'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборЗначенияИзСписка",
			ПараметрыОткрытия,
			ПараметрыВыполнения.Форма,
			Новый УникальныйИдентификатор(),
			,
			,
			ОписаниеОповещенияОЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(ПараметрыСоздания.СписокСкладов[0], ПараметрыВыполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказНаПеремещениеНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ЗаказНаПеремещение.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

Процедура СоздатьПеремещениеТоваровНаОснованииПоГруппеСкладовПослеВыбораСклада(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		 Или ТипЗнч(ДополнительныеПараметры.МассивСсылок) = Тип("Массив")
			 И ДополнительныеПараметры.МассивСсылок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Основание = Новый Структура();
	Основание.Вставить("Склад", Результат);
	Основание.Вставить("Основание");
	Если ДополнительныеПараметры.ОписаниеКоманды.МножественныйВыбор Тогда
		Основание.Основание = ДополнительныеПараметры.МассивСсылок;
	Иначе
		Основание.Основание = ДополнительныеПараметры.МассивСсылок[0];
	КонецЕсли; 
	ПараметрыОткрытия = Новый Структура("Основание", Основание);
	
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта",
		ПараметрыОткрытия,
		ДополнительныеПараметры.Форма,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

// Обработчик подключенной команды.
//
// Параметры:
//   ДокументОснование - ДокументСсылка.ЗаявкаНаКомандировку - ссылка выбранного объекта, для которого выполняется команда.
//   ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьКомандировку(ДокументОснование, ПараметрыВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		ЗначенияЗаполнения = Неопределено;
		
		Если ДенежныеСредстваВызовСервераЛокализация.СформироватьДанныеЗаполненияКомандировки(ДокументОснование, ЗначенияЗаполнения) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
			ОткрытьФорму("Документ.Командировка.ФормаОбъекта", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

//-- Локализация

//++ НЕ УТКА

//++ Устарело_Переработка24
//++ Устарело_Производство21

Процедура СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальца(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СсылкаНаДокумент);
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры
//-- Устарело_Производство21

Процедура СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
	
	ОбъектыОснований = Новый Массив;
	ОбъектыОснований.Добавить(СсылкаНаДокумент);
	
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры
//-- Устарело_Переработка24

// Создать заказ на производство22 на основании заказа давальца2 5.
// 
// Параметры:
//  СсылкаНаДокумент - ДокументСсылка.ЗаказДавальца2_5
//  ПараметрыВыполнения - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
Процедура СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца2_5(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
	
	ОбъектыОснований = Новый Массив;
	ОбъектыОснований.Добавить(СсылкаНаДокумент);
	
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца2_5ПроверкаОснований(ОбъектыОснований);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказНаПроизводство2_2.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры

Процедура СоздатьПроизводственнуюОперациюНаОсновании(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
	
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьПроизводственнуюОперациюНаОснованииПроверкаОснования(СсылкаНаДокумент);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
	Иначе
		ОткрытьФорму("Документ.ПроизводственнаяОперация2_2.ФормаОбъекта", 
			Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьНачальныеОстаткиНЗППоПартиямПроизводства(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
	
	ДлительнаяОперация =
		СозданиеНаОснованииУТВызовСервера.СоздатьНачальныеОстаткиНЗППоПартиямПроизводства(
			СсылкаНаДокумент,
			ПараметрыВыполнения.Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ПараметрыВыполнения.Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("РаспределитьОстаткиНЗПЗавершение", ПараметрыВыполнения.Форма);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры
//-- НЕ УТКА


// Обработчик подключенной команды.
//
// Параметры:
//   Обработчик - ДокументСсылка.ПриобретениеТоваровУслуг - ссылка на документ, для которого выполняется команда.
//   ОписаниеКоманды - см. ПодключаемыеКомандыКлиент.ПараметрыВыполненияКоманды
//
Процедура СоздатьАктОРасхожденияхПослеПриемкиНаОснованииПриобретенияТоваровУслуг(Обработчик, ОписаниеКоманды) Экспорт
	
	ОчиститьСообщения();
	ПараметрыВыполненияКоманды = Новый Структура("Источник,Уникальность,Окно,НавигационнаяСсылка");
	ЗаполнитьЗначенияСвойств(ПараметрыВыполненияКоманды, ОписаниеКоманды.ОписаниеКоманды.ДополнительныеПараметры);
	ОчиститьСообщения();
	ПараметрКоманды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Обработчик);
	
	ПараметрыОткрытия = СозданиеНаОснованииУТВызовСервера.АктОРасхожденияхПослеПриемкиПараметрыОткрытияФормы(ПараметрКоманды);
	Если ПараметрыОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента",
		ПараметрыОткрытия,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно,
		ПараметрыВыполненияКоманды.НавигационнаяСсылка);
	
КонецПроцедуры

Процедура СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиента(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
		
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьКорректировкуНазначенияТоваровНаОснованииЗаказаКлиентаПроверкаТипаНазначения(СсылкаНаДокумент);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.КорректировкаНазначенияТоваров.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры

Процедура СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиента(СсылкаНаДокумент, ПараметрыВыполнения) Экспорт
		
	РезультатПроверки = СозданиеНаОснованииУТВызовСервера.СоздатьОтгрузкуТоваровСХраненияНаОснованииЗаказаКлиентаПроверкаТипаНазначения(СсылкаНаДокумент);
	Если РезультатПроверки.ТекстОшибки <> Неопределено Тогда
		ПоказатьПредупреждение(, РезультатПроверки.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.ФормаОбъекта", Новый Структура("Основание", СсылкаНаДокумент), ПараметрыВыполнения.Форма);
	
КонецПроцедуры

#КонецОбласти
