#Область ПрограммныйИнтерфейс

// Процедура устанавливает в проводке суммы НУ,ПР,ВР в зависимости от признака ведения налогового учета на счете.
//
// Параметры:
//		СуммаНУДт - Число - Дебетовая сумма налогового учета
//		СуммаНУКт - Число - Кредитовая сумма налогового учета
//		СуммаПРДт - Число - Дебетовая сумма постоянной разницы
//		СуммаПРКт - Число - Кредитовая сумма постоянной разницы
//		СуммаВРДт - Число - Дебетовая сумма временной разницы
//		СуммаВРКт - Число - Кредитовая сумма временной разницы
//		Проводка - Запись регистра бухгалтерии
//		ЕстьРазницы - Булево
//
Процедура ЗаполнитьНалоговыеСуммыПроводки(СуммаНУДт = 0, СуммаНУКт = 0,
			СуммаПРДт = 0, СуммаПРКт = 0, СуммаВРДт = 0, СуммаВРКт = 0, Проводка, ЕстьРазницы = Истина) Экспорт
	
	Если Проводка.СчетДт.НалоговыйУчет Тогда
		Проводка.СуммаНУДт = СуммаНУДт;
		
		Если ЕстьРазницы Тогда
			Проводка.СуммаПРДт = СуммаПРДт;
			Проводка.СуммаВРДт = СуммаВРДт;
		КонецЕсли;
		
	Иначе
		Проводка.СуммаНУДт = 0;	
		Проводка.СуммаПРДт = 0;
		Проводка.СуммаВРДт = 0;	
	КонецЕсли;
	
	Если Проводка.СчетКт.НалоговыйУчет Тогда
		Проводка.СуммаНУКт = СуммаНУКт;
		
		Если ЕстьРазницы Тогда
			Проводка.СуммаПРКт = СуммаПРКт;
			Проводка.СуммаВРКт = СуммаВРКт;
		КонецЕсли;
		
	Иначе
		Проводка.СуммаНУКт = 0;	
		Проводка.СуммаПРКт = 0;
		Проводка.СуммаВРКт = 0;	
	КонецЕсли;
	
КонецПроцедуры

// Определяет периодичность, с которой должна отчитываться организация в данном налоговом периоде.
//
// Параметры:
//  Период		- Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - налогоплательщик.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.Периодичность - периодичность (продолжительность первого отчетного периода).
//
Функция ПериодичностьОтчетногоПериода(Период, Организация) Экспорт
	
	ПараметрыПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНалогаНаПрибыль", Организация, Период);
	
	Если Не ПараметрыПолитики = Неопределено 
		И ПараметрыПолитики.ПорядокУплатыАвансовПоНалогуНаПрибыль = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли Тогда
			Возврат Перечисления.Периодичность.Месяц;
	КонецЕсли;
	
	Возврат Перечисления.Периодичность.Квартал;
	
КонецФункции

// Возвращает показатель определения доли прибыли по ст. 288 НК РФ: расходы на оплату труда или среднесписочноую численность.
//
// Параметры:
//  Период		- Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - налогоплательщик.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПоказателиДляОпределенияДолиПрибыли - показатель.
//
Функция ПоказательОпределенияДолиПрибыли(Период, Организация) Экспорт
	
	ПараметрыПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНалогаНаПрибыль", Организация, Период);
	
	Если Не ПараметрыПолитики = Неопределено И Не ПараметрыПолитики.ПоказательОпределенияДолиПрибыли.Пустая() Тогда
		Возврат ПараметрыПолитики.ПоказательОпределенияДолиПрибыли;
	Иначе
		Возврат Перечисления.ПоказателиДляОпределенияДолиПрибыли.РасходыНаОплатуТруда;
	КонецЕсли;

КонецФункции

// Определяет границы налогового периода, к которому относится переданная дата.
//  Возвращает данные первого налогового периода организации, если переданная дата относится к периоду до ее создания.
//
// Параметры:
//  ПроверяемыйПериод	 - Дата - дата в периоде, границы которого определяются
//  Организация			 - СправочникСсылка.Организации - налогоплательщик.
// 
// Возвращаемое значение:
//  Структура - границы периода
//    * Период - Дата - стандартное начало налогового периода (например, 01 июля для третьего квартала);
//    * Начало - Дата - фактическое начало налогового периода (может совпадать со стандартным началом или
//               датой регистрации организации;
//    * Конец  - Дата - дата с указанием времени.
// 
Функция БлижайшийНалоговыйПериод(ПроверяемыйПериод, Организация) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		ПроверяемыйПериод,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Перечисления.Периодичность.Год);
		
КонецФункции

// Готовит тексты информации для пользователя об особенностях первого налогового периода по налогу на прибыль
// организации, зарегистрированной в декабре.
//
// Параметры:
//  Период		- Дата - конец отчетного периода, к которому относится информация
//  Организация	- СправочникСсылка.Организации - налогоплательщик
//  ОписаниеНалоговогоПериода 
//              - Структура - результат функции ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод.
//                Может быть передан для оптимизации производительности, если уже рассчитан в вызывающем коде.
// 
// Возвращаемое значение:
//  Структура - ИнформированиеНалоговыйПериодКлиентСервер.НовыйИнформация.
//
Функция ИнформацияНалоговыйПериод(Период, Организация, ОписаниеНалоговогоПериода = Неопределено) Экспорт

	Возврат ИнформированиеНалоговыйПериод.ИнформацияНалоговыйПериод(
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВДекабре,
		Период,
		Организация,
		НСтр("ru = 'декларацию по налогу на прибыль';
			|en = 'profit tax declaration'"),
		Перечисления.Периодичность.Год,
		ПериодичностьОтчетногоПериода(Период, Организация),
		ОписаниеНалоговогоПериода);

КонецФункции

// Определяет, требуется ли в информационной базе вести налоговый учет по налогу на прибыль организаций.
// 
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяНалоговыйУчет() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
		|ГДЕ
		|	НастройкиСистемыНалогообложения.ПлательщикНалогаНаПрибыль";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
		
КонецФункции

// Определяет дату начала налогового периода по налогу на прибыль.
//
// Параметры:
//  Период	    - Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - организация, дату регистрации которой следует учесть при получении периода.
// 
// Возвращаемое значение:
//  Дата         - дата начала налогового периода по налогу на прибыль
//  Неопределено - в запрошенный период организация не существовала.
//
Функция НачалоНалоговогоПериода(Период, Организация) Экспорт
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	ОписаниеПериода = БлижайшийНалоговыйПериод(Период, ГоловнаяОрганизация);
	Если ОписаниеПериода.Начало > Период Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПериода.Начало;
	
КонецФункции

// Определяет дату окончания предыдущего отчетного периода по налогу на прибыль в рамках налогового периода.
//
// Параметры:
//  Период	    - Дата - дата, характеризующая налоговый период
//  Организация	- СправочникСсылка.Организации - организация, сведения о которой следует учесть при получении периода
//  Кеш         - Соответствие - можно передать, если для одной и той же организации следует определить множество
//                отчетных периодов. Для вызовов с разными организациями следует передавать разный Кеш.
// 
// Возвращаемое значение:
//  Дата         - дата окончания предыдущего отчетного периода по налогу на прибыль.
//  Неопределено - это первый отчетный период в течение налогового - предыдущего нет.
//
Функция КонецПредыдущегоОтчетногоПериода(Период, Организация, Кеш = Неопределено) Экспорт
	
	Если Кеш = Неопределено Тогда
		ПериодичностьОтчетногоПериода = ПериодичностьОтчетногоПериода(Период, Организация);
	Иначе
		НалоговыйПериод = НачалоГода(Период);
		ПериодичностьОтчетногоПериода = Кеш[НалоговыйПериод];
		Если ПериодичностьОтчетногоПериода = Неопределено Тогда
			ПериодичностьОтчетногоПериода = ПериодичностьОтчетногоПериода(Период, Организация);
			Кеш.Вставить(НалоговыйПериод, ПериодичностьОтчетногоПериода);
		КонецЕсли;
	КонецЕсли;
	
	НачалоОчередногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьОтчетногоПериода, Период);
	
	Если НачалоОчередногоПериода = НачалоГода(Период) Тогда
		// Это первый отчетный период.
		// Здесь сравнение именно с формальным идентификатором отчетного периода (началом календарного года),
		// а не налогового периода.
		Возврат Неопределено;
	КонецЕсли;
	
	КонецПредыдущегоОтчетногоПериода = НачалоОчередногоПериода - 1;
	
	НачалоНалоговогоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоНалоговогоПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КонецПредыдущегоОтчетногоПериода < НачалоНалоговогоПериода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонецПредыдущегоОтчетногоПериода;
	
КонецФункции

Функция ВыручкаОтРеализации(Период, Организация) Экспорт
	
	НачалоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоПериода = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	// Включаем в выручку часть расходов на счете 91
	ВидыПрочихДоходов = Новый Массив;
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ВидыПрочихДоходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ВидыПрочихДоходов", ВидыПрочихДоходов);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиПрочихДоходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиПрочихДоходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиПрочихДоходов
	|ГДЕ
	|	СтатьиПрочихДоходов.ВидПрочихДоходовИРасходов В(&ВидыПрочихДоходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикиУчетаПоПартнерам.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КлючиАналитикиУчетаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|ГДЕ
	|	КлючиАналитикиУчетаПоПартнерам.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Ссылка
	|			ИЗ
	|				Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ КорректировкиИВозвратыРеализацийПрошлогоПериода
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеРеализаций
	|		ПО КорректировкаРеализации.ДокументОснование = ДанныеРеализаций.Документ
	|			И КорректировкаРеализации.Организация = ДанныеРеализаций.Организация
	|ГДЕ
	|	КорректировкаРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КорректировкаРеализации.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Ссылка
	|			ИЗ
	|				Организации)
	|	И ГОД(КорректировкаРеализации.Дата) > ГОД(ЕСТЬNULL(ДанныеРеализаций.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеРеализаций
	|		ПО ВозвратТоваровОтКлиентаТовары.ДокументРеализации = ДанныеРеализаций.Документ
	|			И ВозвратТоваровОтКлиентаТовары.Ссылка.Организация = ДанныеРеализаций.Организация
	|ГДЕ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВозвратТоваровОтКлиентаТовары.Ссылка.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Ссылка
	|			ИЗ
	|				Организации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтКлиентаТовары.Ссылка
	|
	|ИМЕЮЩИЕ
	|	ГОД(ВозвратТоваровОтКлиентаТовары.Ссылка.Дата) > МАКСИМУМ(ГОД(ЕСТЬNULL(ДанныеРеализаций.ДатаРегистратора, ВозвратТоваровОтКлиентаТовары.Ссылка.Дата)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|ВЫБРАТЬ
	|	Выручка.СуммаВыручкиРеглОборот КАК Сумма,
	|	Выручка.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	Выручка.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА Выручка.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ИЛИ НЕ &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|		ИНАЧЕ Выручка.ВидЗапасов.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГруппаФинансовогоУчета
	|ПОМЕСТИТЬ ВыручкаИСебестоимостьПродаж
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				АналитикаУчетаПоПартнерам В
	|						(ВЫБРАТЬ
	|							КлючиАналитикиУчетаПоПартнерам.Ссылка
	|						ИЗ
	|							КлючиАналитикиУчетаПоПартнерам)
	|					И НЕ ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|					И НЕ ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)) КАК Выручка
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	-Выручка.СуммаВыручкиРегл,
	|	Выручка.АналитикаУчетаПоПартнерам.Организация,
	|	Выручка.Склад,
	|	ВЫБОР
	|		КОГДА Выручка.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|				ИЛИ НЕ &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|		ИНАЧЕ Выручка.ВидЗапасов.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГруппаФинансовогоУчета
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КорректировкиИВозвратыРеализацийПрошлогоПериода КАК Корректировки
	|			ПО Выручка.Регистратор = Корректировки.Регистратор
	|	ГДЕ
	|		Выручка.АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					КлючиАналитикиУчетаПоПартнерам.Ссылка
	|				ИЗ
	|					КлючиАналитикиУчетаПоПартнерам)
	|		И НЕ Выручка.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|		И НЕ Выручка.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.АгентскаяУслуга)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад,
	|	ГруппаФинансовогоУчета
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Выручка.Сумма), 0) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		Выручка.Сумма КАК Сумма
	|	ИЗ
	|		ВыручкаИСебестоимостьПродаж КАК Выручка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчетаПереопределяемый КАК ПорядокОтраженияНаСчетахУчетаПереопределяемый
	|		ПО ПорядокОтраженияНаСчетахУчетаПереопределяемый.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж)
	|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.Организация = Выручка.Организация
	|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.АналитикаУчета = Выручка.ГруппаФинансовогоУчета
	|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.МестоУчета = Выручка.Склад
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА ПорядокОтраженияНаСчетахУчетаПереопределяемый.СчетУчета В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы))
	|				ТОГДА ПорядокОтраженияНаСчетахУчетаПереопределяемый.Субконто
	|					В
	|						(ВЫБРАТЬ
	|							СтатьиПрочихДоходов.Ссылка
	|						ИЗ
	|							СтатьиПрочихДоходов)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеДоходы.СуммаРеглБезНДСОборот
	|	ИЗ
	|		РегистрНакопления.ДвиженияКонтрагентДоходыРасходы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Ссылка
	|						ИЗ
	|							Организации)
	|					И СтатьяДоходовРасходов В
	|						(ВЫБРАТЬ
	|							СтатьиПрочихДоходов.Ссылка
	|						ИЗ
	|							СтатьиПрочихДоходов)) КАК ПрочиеДоходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрочиеДоходы.СуммаРеглОборот
	|	ИЗ
	|		РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Ссылка
	|						ИЗ
	|							Организации)
	|					И Статья В
	|						(ВЫБРАТЬ
	|							СтатьиПрочихДоходов.Ссылка
	|						ИЗ
	|							СтатьиПрочихДоходов)) КАК ПрочиеДоходы) КАК Выручка";
	
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ПереопределитьВТекстеЗапросаПорядокОтраженияСчетаУчета(Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать(); // В выборке всегда 1 запись
	Выборка.Следующий();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Выборка.Сумма;
	
КонецФункции

// Возвращает признак применения разных ставок по налогу на прибыль
// 
// Возвращаемое значение:
// 	Булево -
Функция ПрименяютсяРазныеСтавкиНалогаНаПрибыль() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ПрименяютсяРазныеСтавкиНалогаНаПрибыль");
	
КонецФункции

// Определяет ставку налога на прибыль, подлежащего уплате в федеральный бюджет
//
// Параметры:
//  Период	              - Дата - характеризует налоговый период
//  Организация	          - СправочникСсылка.Организации - налогоплательщик
//  ФормаПредставленияРезультата - Строка - форма, в которой функция вернет значение
//                          * "Доля"                              - как доля от налоговой базы (например, 0,2).
//                          * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%).
//  ВариантНалогообложенияПрибыли - Неопределено, СправочникСсылка.ВариантыНалогообложенияПрибыли -
// 
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата).
//
Функция НалоговаяСтавкаФедеральныйБюджет(Период, Организация, ФормаПредставленияРезультата = "Доля", Знач ВариантНалогообложенияПрибыли = Неопределено) Экспорт
	
	Запрос       = Новый Запрос;
	Запрос.Текст = ТекстЗапроса_НалоговаяСтавкаДляВсехОрганизаций();
	УстановитьПараметрыЗапроса_НалоговыеСтавки(Запрос, Организация, Период, ВариантНалогообложенияПрибыли);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВПроцентах = Выборка.СтавкаФБ;
	Иначе
		ЗначениеВПроцентах = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ЗначениеПоУмолчаниюФедеральныйБюджет(Период);
	КонецЕсли;
	
	Если ФормаПредставленияРезультата = "Доля" Тогда
		Возврат ЗначениеВПроцентах / 100;
	Иначе
		Возврат ЗначениеВПроцентах;
	КонецЕсли;
	
КонецФункции

// Определяет ставку налога на прибыль, подлежащего уплате в региональный бюджет (бюджет субъекта Российской Федерации).
//
// Параметры:
//  Период	              - Дата - характеризует налоговый период
//  Организация           - СправочникСсылка.Организации	- налогоплательщик
//  ФормаПредставленияРезультата - Строка - форма, в которой функция вернет значение
//                          * "Доля"                              - как доля от налоговой базы (например, 0,2).
//                          * "Процент", "%" и любые другие слова - как процент, где база принята за 100% (например, 20%).
//  ВариантНалогообложенияПрибыли - Неопределено, СправочникСсылка.ВариантыНалогообложенияПрибыли - Уточнение по варианту н/о
//  РегистрацияВНалоговомОргане   - Неопределено, СправочникСсылка.РегистрацииВНалоговомОргане - Уточнение по ФНС
// 
// Возвращаемое значение:
//  Число - значение ставки налога (в долях от единицы или в процентах - см. ФормаПредставленияРезультата).
//
Функция НалоговаяСтавкаРегиональныйБюджет(Период,
										Организация,
										ФормаПредставленияРезультата = "Доля",
										Знач ВариантНалогообложенияПрибыли = Неопределено,
										Знач РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	УстановитьПараметрыЗапроса_НалоговыеСтавки(Запрос,
												Организация,
												Период,
												ВариантНалогообложенияПрибыли,
												РегистрацияВНалоговомОргане);
	
	ТекстЗапроса_ПоВсемОрганизациям = ТекстЗапроса_НалоговаяСтавкаДляВсехОрганизаций();
	
	Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль() Тогда
		
		ТекстЗапроса_ПоСубъектамРФ =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫБОР
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ВариантНалогообложенияПрибыли
		|				И СтавкиНалога.ВариантНалогообложенияПрибыли <> &ПустаяСсылкаВариантНалогообложенияПрибыли
		|				И СтавкиНалога.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА 1
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ВариантНалогообложенияПрибыли
		|				И СтавкиНалога.ВариантНалогообложенияПрибыли <> &ПустаяСсылкаВариантНалогообложенияПрибыли
		|				И СтавкиНалога.РегистрацияВНалоговомОргане В (&РегистрацииВНалоговомОрганеПоУмолчанию)
		|			ТОГДА 2
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ОсновнойВариантНалогообложенияПрибыли
		|				И СтавкиНалога.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА 3
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли В (&ВариантыНалогообложенияПрибылиПоУмолчанию)
		|				И СтавкиНалога.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА 4
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ОсновнойВариантНалогообложенияПрибыли
		|				И СтавкиНалога.РегистрацияВНалоговомОргане В (&РегистрацииВНалоговомОрганеПоУмолчанию)
		|			ТОГДА 5
		|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли В (&ВариантыНалогообложенияПрибылиПоУмолчанию)
		|				И СтавкиНалога.РегистрацияВНалоговомОргане В (&РегистрацииВНалоговомОрганеПоУмолчанию)
		|			ТОГДА 6
		|		ИНАЧЕ
		|			// не удалось найти ставку
		|			7
		|	КОНЕЦ                                                             КАК Приоритет,
		|	СтавкиНалога.СтавкаСубъектРФ                                      КАК СтавкаРБ
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(
		|		&Период,
		|		Организация = &Организация
		|		И ВариантНалогообложенияПрибыли В (&ОтборВариантовНалогообложения)
		|		И РегистрацияВНалоговомОргане В (&ОтборРегистрацийВНалоговомОргане)
		|	) КАК СтавкиНалога
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет ВОЗР,
		|	СтавкаРБ УБЫВ
		|";
		
		Запрос.Текст = ТекстЗапроса_ПоСубъектамРФ;
		Результат    = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			// Если данные по субъекту РФ отсутствуют, смотрим установленные ставки для всех организаций
			Запрос.Текст = ТекстЗапроса_ПоВсемОрганизациям;
			Результат    = Запрос.Выполнить();
		КонецЕсли;
		
	Иначе
		
		Запрос.Текст = ТекстЗапроса_ПоВсемОрганизациям;
		Результат = Запрос.Выполнить();
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВПроцентах = Выборка.СтавкаРБ;
	Иначе
		ЗначениеВПроцентах = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ЗначениеПоУмолчаниюРегиональныйБюджет(Период);
	КонецЕсли;
	
	Если ФормаПредставленияРезультата = "Доля" Тогда
		Возврат ЗначениеВПроцентах / 100;
	Иначе
		Возврат ЗначениеВПроцентах;
	КонецЕсли;
	
КонецФункции

// Устарела.
// Следует использовать
// - НалоговаяСтавкаФедеральныйБюджет()
// - НалоговаяСтавкаРегиональныйБюджет()
// - НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет().
Функция ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, ИФНС = Неопределено, СтавкаФБ = 0, СтавкаРФ = 0, СтавкаМестный = 0) Экспорт   
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСтавкуНалогаНаПрибыль(СтруктураШапкиДокумента, ИФНС, СтавкаФБ, СтавкаРФ, СтавкаМестный);
	
КонецФункции // ПолучитьСтавкуНалогаНаПрибыль()


// Формируется таблица строк в которой задано соответствие видов активов
// (обязательства) и счетов налогового учета, на которых отражаются разницы
// по этим видам активов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуВидовАктивовИОбязательств() Экспорт
	
	Если  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 1 Тогда
		ЕстьСкладскойУчет = Ложь;
	ИначеЕсли  ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто.Количество() = 2 Тогда
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	Иначе
		ЕстьСкладскойУчет = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах.ВидыСубконто[2].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	КонецЕсли;
	
	ТаблицаВидовАктивовИОбязательств = Новый ТаблицаЗначений;
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств, Строка"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Счета",      Новый ОписаниеТипов("Массив"));
	ТаблицаВидовАктивовИОбязательств.Колонки.Добавить("Субконто",   Новый ОписаниеТипов("Массив"));
	
	// Основные средства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01_ЦФ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// ДоходныеВложенияВ_МЦ
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Нематериальные активы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Оборудование 
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Доп расходы по оборудованию
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДопОборудованиеКУстановке);
	
	// Внеоборотные активы   08.01
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеЗемельныхУчастков);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.02
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовПриродопользования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы   08.03
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	// Внеоборотные активы 08.04.1
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.КомпонентыОсновныхСредств);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Внеоборотные активы 08.04.2
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПодготовкаКВводуВЭксплуатацию);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Внеоборотные активы 08.05
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	// Внеоборотные активы 08.08
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыНаНИОКР);
	
	// Внеоборотные активы 08.11 и 08.12
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеПоисковыеАктивы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеПоисковыеАктивы);
	
	// Материалы
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	СчетаУчетаМатериалов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.Материалы);
	Пока СчетаУчетаМатериалов.Следующий() Цикл
		СчетУчетаМатериалов = СчетаУчетаМатериалов.Ссылка;
		КодСчета = СчетУчетаМатериалов.Код;
		Если Лев(КодСчета, 5) = "10.МЦ"
			Или Лев(КодСчета, 5) = "10.11" 
			Или Лев(КодСчета, 5) = "10.ДР" 
			Или Лев(КодСчета, 5) = "10.07" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.Счета.Добавить(СчетУчетаМатериалов);
	КонецЦикла;
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Доп расходы по материалам
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыМатериалы);
	
	// Материалы  в переработке
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Материалы  в эксплуатации
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецодеждаВЭксплуатации);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьВЭксплуатации);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	
	// Незавершенное производство
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ГруппыПродукции);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	// Готовая продукция
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Полуфабрикаты
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Расходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеРасходыПоКурсовымРазницам);
	
	// Товары
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	СчетаУчетаТоваров = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.Товары);
	Пока СчетаУчетаТоваров.Следующий() Цикл
		Если Лев(СчетаУчетаТоваров.Код, 5) = "41.ДР" Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока.Счета.Добавить(СчетаУчетаТоваров.Ссылка);
	КонецЦикла;
	Если ЕстьСкладскойУчет Тогда
		НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Доп расходы по товарам
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДопРасходыТовары);
	
	// Товары отгруженные
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	// Издержки обращения
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	// Финансовые вложения (счета 58.01.1)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Паи);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	// Финансовые вложения (счета 58.01.2 и Н58.02)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.Акции);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДолговыеЦенныеБумаги);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	
	// Финансовые вложения (счета 58.03, 58.04, 58.05)
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПредоставленныеЗаймы);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВкладыПоДоговоруПростогоТоварищества);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПриобретенныеПрава);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Доходы будущих периодов
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоходыБудущихПериодов);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеДоходыПоКурсовымРазницам);
	
	// Дебиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Кредиторская задолженность
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);
    НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в рублях
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Курсовые разницы при оплате в валюте
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал);
	
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Убытки текущего периода
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода;
	
	// Недостачи и потери от порчи ценностей
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей);
	
	// Оценочные обязательства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	
	// Резервы по сомнительным долгам
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	// Разворачиваем счета верхнего уровня до субсчетов
	Для каждого НоваяСтрока Из ТаблицаВидовАктивовИОбязательств Цикл
		
		Если НоваяСтрока.Счета.Количество() > 0 Тогда
			НоваяСтрока.Счета = БухгалтерскийУчет.СформироватьМассивСубсчетов(НоваяСтрока.Счета);
		КонецЕсли;
		
		// дополнительная обработка счетов по виду активов и обязательств
		Если НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НоваяСтрока.Счета,
				ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
			
		ИначеЕсли НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов Тогда
				
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(НоваяСтрока.Счета,
				ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет);
				
		КонецЕсли;
	
	КонецЦикла; 
	
	// Убыток прошлых лет
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.УбыткиПрошлыхЛет;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.УбыткиПрошлыхЛет);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
	
	// Переданные объекты недвижимости
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Арендные обязательства
	НоваяСтрока = ТаблицаВидовАктивовИОбязательств.Добавить();
	НоваяСтрока.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.АрендныеОбязательства;
	НоваяСтрока.Счета.Добавить(ПланыСчетов.Хозрасчетный.БалансировкаВРПоДоговорамАренды);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	НоваяСтрока.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Возврат ТаблицаВидовАктивовИОбязательств;
	
КонецФункции // ПолучитьТаблицуВидовАктивовИОбязательств()

// Функция добавляет в текст запроса временную таблицу, содержащую счета ЕНВД.
//
//	Параметры:
//		Запрос - запрос, в который необходимо добавить временную таблицу со счетами.
//
//	Возвращаемое значение:
//		ТекстЗапроса - Строка неограниченной длины - первоначальный текст запроса, перед которым добавлено получение временной таблицы со счетами ЕНВД.
//
Функция ДобавитьТекстЗапросаСчетаЕНВД(Запрос) Экспорт
	
	Запрос.УстановитьПараметр("СчетаЕН", ПолучитьМассивСчетовЕНВД());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаЕН
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаЕН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет"
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
	+ Запрос.Текст;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ДобавитьТекстЗапросаСчетаЕНВД()

// Отложенные налоговые активы и отложенные налоговые обязательства.
// Определяются суммы временных разницы, которые отражены на плане счетов
// по конкретному виду ОНА (ОНО) и распределяются на вычитаемые и налогооблагаемые разницы,
// числящиеся на остатках текущего периода.
//
// Параметры:
//		СтрокаВидАктиваОбязательства - строка таблицы в которой задано соответствие
//			вида актива (обязательства) и счетов налогового учета, на которых
//			отражаются разницы по этому виду активов.
//
Функция ОстаткиВременныхРазницПоВидуАктивовОбязательств(СтрокаВидАктиваОбязательства,
														Организация, НачалоГода, КонецГода) Экспорт
	
	КоличествоОбъектовАналитики = СтрокаВидАктиваОбязательства.Субконто.Количество();
	
	Если Не КоличествоОбъектовАналитики = 0 Тогда
		МассивСубконто = СтрокаВидАктиваОбязательства.Субконто;
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства, 1, 0);
		ФлагОС_НМА = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы, 1, ФлагОС_НМА);
		ФлагОбъектовСтроительства = ?(МассивСубконто[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 1, 0);
		ФлагНЗП    = ?(СтрокаВидАктиваОбязательства.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство, 1, 0);
	Иначе
		ФлагОС_НМА = Ложь;
		ФлагОбъектовСтроительства = Ложь;
		ФлагНЗП = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("НачалоГода",             НачалоГода);
	Запрос.УстановитьПараметр("КонецГода",              КонецГода);
	Запрос.УстановитьПараметр("Организации",            Организация);
	Запрос.УстановитьПараметр("МассивСчетов",           СтрокаВидАктиваОбязательства.Счета);
	Запрос.УстановитьПараметр("ВидСубконто",            МассивСубконто);
	Запрос.УстановитьПараметр("Счет09",                 ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	Запрос.УстановитьПараметр("Счет77",                 ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	Запрос.УстановитьПараметр("ВидАктивовОбязательств", СтрокаВидАктиваОбязательства.ВидАктивовОбязательств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В (&МассивСчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_Счета84
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НераспределеннаяПрибыль), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВР.Счет КАК Счет,
	|	ОстаткиВР.Субконто1 КАК Субконто1,
	|	ОстаткиВР.Субконто2 КАК Субконто2,
	|	ОстаткиВР.Субконто3 КАК Субконто3,
	|	ОстаткиВР.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	ОстаткиВР.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	|	ОстаткиВР.СуммаВРОстаток КАК СуммаВРОстаток
	|ПОМЕСТИТЬ ВТ_ОстаткиВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета.Счет
	|				ИЗ
	|					ВТ_Счета),
	|			&ВидСубконто,
	|			Организация В (&Организации)) КАК ОстаткиВР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстатки09
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет = &Счет09,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстатки77
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецГода,
	|			Счет = &Счет77,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = &ВидАктивовОбязательств) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты77
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецГода,
	|			Период,
	|			Счет = &Счет77,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = &ВидАктивовОбязательств,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета84.Счет
	|				ИЗ
	|					ВТ_Счета84),
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОбороты09
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоГода,
	|			&КонецГода,
	|			Период,
	|			Счет = &Счет09,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = &ВидАктивовОбязательств,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_Счета84.Счет
	|				ИЗ
	|					ВТ_Счета84),
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВР.Счет КАК Счет,
	|	ОстаткиВР.Субконто1 КАК Субконто1,
	|	ОстаткиВР.Субконто2 КАК Субконто2,
	|	ОстаткиВР.Субконто3 КАК Субконто3,
	|	&Счет09 КАК СчетОНАОНО,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот КАК СтараяСумма,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиВР.СуммаВРОстатокДт < 0
	|					ИЛИ ОстаткиВР.СуммаВРОстатокКт > 0
	|				ТОГДА -ОстаткиВР.СуммаВРОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	ВТ_ОстаткиВР КАК ОстаткиВР,
	|	ВТ_ХозрасчетныйОстатки09 КАК ХозрасчетныйОстатки,
	|	ВТ_ХозрасчетныйОбороты09 КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВР.Счет,
	|	ОстаткиВР.Субконто1,
	|	ОстаткиВР.Субконто2,
	|	ОстаткиВР.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - ХозрасчетныйОбороты.СуммаОборот
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиВР.Счет,
	|	ОстаткиВР.Субконто1,
	|	ОстаткиВР.Субконто2,
	|	ОстаткиВР.Субконто3,
	|	&Счет77,
	|	ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ОстаткиВР.СуммаВРОстатокДт > 0
	|					ИЛИ ОстаткиВР.СуммаВРОстатокКт < 0
	|				ТОГДА ОстаткиВР.СуммаВРОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ)
	|ИЗ
	|	ВТ_ОстаткиВР КАК ОстаткиВР,
	|	ВТ_ХозрасчетныйОстатки77 КАК ХозрасчетныйОстатки,
	|	ВТ_ХозрасчетныйОбороты77 КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВР.Счет,
	|	ОстаткиВР.Субконто1,
	|	ОстаткиВР.Субконто2,
	|	ОстаткиВР.Субконто3,
	|	ХозрасчетныйОстатки.СуммаОстатокКт + ХозрасчетныйОбороты.СуммаОборот";
	
	Если ФлагОС_НМА = 1 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет КАК Счет,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОстаткиВР.Счет,", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 3 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто3 КАК Субконто3", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто3", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики < 2 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто2 КАК Субконто2", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто2", "");
	КонецЕсли;
	
	Если КоличествоОбъектовАналитики = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто1 КАК Субконто1", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",
			|	ОстаткиВР.Субконто1", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультатов = Результат.Выгрузить();
	ТаблицаРезультатов.Свернуть("СчетОНАОНО, СтараяСумма,"
		+ ?(ФлагОС_НМА = 1, "", "Счет,")
		+ ?(КоличествоОбъектовАналитики = 0, "", "Субконто1")
		+ ?(ФлагОбъектовСтроительства = 1, "", ?(КоличествоОбъектовАналитики = 2, ", Субконто2", ""))
		+ ?(ФлагНЗП = 1, "", ?(КоличествоОбъектовАналитики = 3, ", Субконто3", "")), "Сумма");
	
	Возврат  ТаблицаРезультатов;
	
КонецФункции // ОстаткиВременныхРазницПоВидуАктивовОбязательств()

// Определяет коэффициент распределения расходов по видам деятельности с разным порядком налогообложения.
//
// Параметры
//  Организации - СправочникСсылка.Организации или массив со значениями этого типа
//  НачалоПериода, 
//  КонецПериода - Дата - характеризует период, за который рассчитывается коэффициент. Период всегда кратен месяцу.
//                        Предполагается, что период лежит в пределах налогового периода,
//                        параметры учетной политики в течение которого неизменны.
//
// Возвращаемое значение:
//   Число - коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияРасходовПоВидамДеятельности(Организации, Знач НачалоПериода, Знач КонецПериода = Неопределено) Экспорт
	
	// Период
	Если КонецПериода = Неопределено Тогда
		КонецПериода = НачалоПериода;
	КонецЕсли;
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода  = КонецМесяца(КонецПериода);
	
	// База распределения
	ВключатьПрочиеДоходы = Ложь;
	
	Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
		Организация = Организации;
	Иначе
		Если Организации.Количество() > 0 Тогда
			Организация = Организации[0];
		Иначе
			// Неверные параметры
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если УчетнаяПолитика.Существует(Организация, НачалоПериода, Истина) Тогда
		
		ВключатьПрочиеДоходы = 
			УчетнаяПолитика.БазаРаспределенияКосвенныхРасходовПоВидамДеятельности(Организация, НачалоПериода) = 
				Перечисления.БазыРаспределенияКосвенныхРасходовПоВидамДеятельности.ДоходыОтРеализацииИВнереализационные;
				
	Иначе
		
		// Определить нельзя
		Возврат 0;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ КлючиАналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация В(&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам.КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.Всего), 0) КАК Всего,
	|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ЕНВД), 0)  КАК ЕНВД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл КАК Всего,
	|		ВЫБОР
	|			КОГДА ВыручкаИСебестоимостьПродаж.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|				ТОГДА ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЕНВД
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиАналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|			ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|	ГДЕ
	|		ВыручкаИСебестоимостьПродаж.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ВыручкаИСебестоимостьПродаж.ТипЗапасов В(&ТипыЗапасовСобственные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДенежныеСредстваДоходыРасходы.СуммаРегл,
	|		ВЫБОР
	|			КОГДА СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ДвиженияДенежныеСредстваДоходыРасходы.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияДенежныеСредстваДоходыРасходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|			ПО ДвиженияДенежныеСредстваДоходыРасходы.СтатьяДоходовРасходов = СтатьиДоходов.Ссылка
	|	ГДЕ
	|		&ВключатьПрочиеДоходы
	|		И ДвиженияДенежныеСредстваДоходыРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДвиженияДенежныеСредстваДоходыРасходы.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияКонтрагентДоходыРасходы.СуммаРеглБезНДС,
	|		ВЫБОР
	|			КОГДА СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ДвиженияКонтрагентДоходыРасходы.СуммаРеглБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ДвиженияКонтрагентДоходыРасходы КАК ДвиженияКонтрагентДоходыРасходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|			ПО ДвиженияКонтрагентДоходыРасходы.СтатьяДоходовРасходов = СтатьиДоходов.Ссылка
	|	ГДЕ
	|		&ВключатьПрочиеДоходы
	|		И ДвиженияКонтрагентДоходыРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДвиженияКонтрагентДоходыРасходы.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		(ДвиженияНоменклатураДоходыРасходы.СтоимостьРегл
	|			+ ДвиженияНоменклатураДоходыРасходы.ДопРасходыРегл
	|			+ ДвиженияНоменклатураДоходыРасходы.ТрудозатратыРегл
	|			+ ДвиженияНоменклатураДоходыРасходы.ПостатейныеПостоянныеРегл
	|			+ ДвиженияНоменклатураДоходыРасходы.ПостатейныеПеременныеРегл) КАК Всего,
	|		ВЫБОР
	|			КОГДА СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ДвиженияНоменклатураДоходыРасходы.СтоимостьРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ДвиженияНоменклатураДоходыРасходы КАК ДвиженияНоменклатураДоходыРасходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|			ПО ДвиженияНоменклатураДоходыРасходы.СтатьяДоходовРасходов = СтатьиДоходов.Ссылка
	|	ГДЕ
	|		&ВключатьПрочиеДоходы
	|		И ДвиженияНоменклатураДоходыРасходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДвиженияНоменклатураДоходыРасходы.Организация В(&Организации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДоходыРасходыПрочиеАктивыПассивы.СуммаРегл,
	|		ВЫБОР
	|			КОГДА СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|				ТОГДА ДвиженияДоходыРасходыПрочиеАктивыПассивы.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы КАК ДвиженияДоходыРасходыПрочиеАктивыПассивы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|			ПО ДвиженияДоходыРасходыПрочиеАктивыПассивы.Статья = СтатьиДоходов.Ссылка
	|	ГДЕ
	|		&ВключатьПрочиеДоходы
	|		И ДвиженияДоходыРасходыПрочиеАктивыПассивы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДвиженияДоходыРасходыПрочиеАктивыПассивы.Организация В(&Организации)) КАК ВложенныйЗапрос
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода",          НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонецПериода);
	Запрос.УстановитьПараметр("Организации",            Организации);
	Запрос.УстановитьПараметр("ВключатьПрочиеДоходы",   ВключатьПрочиеДоходы);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", Перечисления.ТипыЗапасов.ТипыЗапасовСобственные());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); // В выборке всегда ровно один элемент
	
	Если Выборка.Всего = 0 ИЛИ Выборка.ЕНВД = 0 Тогда
		// Если нет определенности, то считаем, что все расходы относятся к деятельности на основной системе обложения.
		Возврат 0;
	Иначе
		Возврат Выборка.ЕНВД / Выборка.Всего;
	КонецЕсли;
	
КонецФункции // КоэффициентРаспределенияРасходовПоВидамДеятельности()

// Регламентная операция "Расчет долей".
// Определяет на основании базы данных доли списания расходов, см. процедуру Документы.РегламентнаяОперация.МодульОбъекта.РасчетДолейСписанияКосвенныхРасходов.
//
//	Параметры:
//		Период - Дата - на основании даты определяется анализируемый период (берется начало и конец месяца от даты)
//		Организация - СправочникСсылка.Организации
//		ПротоколНормируемыеРасходы - Таблица значений - пустая, содержит колонки регистра сведений "РасчетНормированияРасходов".
//		ТранспортныеРасходы - Булево - учитывать или нет транспортные расходы при определении долей.
//
//	Возвращаемое значение:
//		Структура - инициализируется в начале функции.
//
Функция ДолиСписанияРасходов(Период, Организация, ПротоколНормируемыеРасходы, ТранспортныеРасходы) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Период",                                                   Период);
	Результат.Вставить("ДоляЕНВД",                                                 0);
	Результат.Вставить("ДоляТранспортныхРасходов",                                 0);
	Результат.Вставить("ДоляРасходовНаРекламу",                                    0);
	Результат.Вставить("ДоляРасходовНаДобровольноеМедицинскоеСтрахование",         0);
	Результат.Вставить("ДоляРасходовНаДобровольноеСтрахованиеЖизни",               0);
	Результат.Вставить("ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев", 0);
	Результат.Вставить("ДоляПредставительскихРасходов",                            0);
	Результат.Вставить("ДоляРасходовНаВозмещениеПроцентовРаботникам",              0);
	Результат.Вставить("ДоляРезервовПоСомнительнымДолгамНУ",                       0);
	
	// Распределение расходов по видам деятельности
	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	ДоляСпециальныхРежимов = КоэффициентРаспределенияРасходовПоВидамДеятельности(Организации, Период); // За месяц
	Результат.ДоляЕНВД     = ДоляСпециальныхРежимов;
	
	Если ТранспортныеРасходы Тогда
		
		// Транспортные расходы могут быть отнесены к остаткам нереализованных товаров - ст. 320 НК РФ.
		Результат.ДоляТранспортныхРасходов = ДоляТранспортныхРасходовТекущегоМесяца(Период, Организация);
		
	Иначе
		
		// РАСХОДЫ, ПО КОТОРЫМ ЕСТЬ ОГРАНИЧЕНИЯ
		Ограничения = ДолиСписанияНормируемыхРасходов(Период, Организация, ДоляСпециальныхРежимов, ПротоколНормируемыеРасходы);
		Для Каждого ОписаниеПоля Из РегистрыСведений.ДолиСписанияКосвенныхРасходов.ИменаВидовНормируемыхРасходов() Цикл
			Результат[ОписаниеПоля.Ключ] = Ограничения[Перечисления.ВидыРасходовНУ[ОписаниеПоля.Значение]];
		КонецЦикла;
		
		Результат.ДоляРезервовПоСомнительнымДолгамНУ =
			НачислениеСписаниеРезервовПоСомнительнымДолгамЛокализация.ПолучитьДолюРезервовПоСомнительнымДолгамНУ(Период, Организация);
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
// Параметры:
//  Организация - организация, которая явялется головной для остальных.
//
// Возвращаемое значение:
//  Массив - организация, которая является головной для остальных
//           и все структурно подчиненные ей организации.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

// Функция рассчитывает прибыли убытки по указанном виду доходов и расходов
//
// Параметры:
//   Счет учета доходов   91.01
//   Счет учета расхоов   91.02
//   Вид доходов и расходов из перечисления ВидыПрочихДоходовИРасходов
//   Флаг выдаваемого результата. "Убыток" - выдать сумму убытка, иначе - выдать сумму прибыли.
//
//
Функция ПрибылиИУбытки(Запрос, Счет911, Счет912, ВидДоходовРасходов, Флаг) Экспорт
	 
	Запрос.УстановитьПараметр("Счет911", 			Счет911);
	Запрос.УстановитьПараметр("Счет912", 			Счет912);
	Запрос.УстановитьПараметр("КорСчет", 			ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидДоходовРасходов", ВидДоходовРасходов);
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто", Массив);
	 
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборот) КАК Результат,
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет911, &ВидыСубконто, Организация В (&СписокОрганизаций), КорСчет <> &КорСчет, ) КАК ХозрасчетныйОбороты
	|
	|//УсловиеНаВидДоходовРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборот),
	|	ХозрасчетныйОбороты.Субконто2 КАК Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, &ВидыСубконто, Организация В (&СписокОрганизаций), КорСчет <> &КорСчет, ) КАК ХозрасчетныйОбороты
	|
	|//УсловиеНаВидДоходовРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2";
	
	Если ЗначениеЗаполнено(ВидДоходовРасходов) Тогда
		
		ТекстУсловия = "
		|ГДЕ
		|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидДоходовРасходов
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УсловиеНаВидДоходовРасходов", ТекстУсловия);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	БухИтогиРезультат = Запрос.Выполнить().Выгрузить();
	БухИтогиРезультат.Свернуть("Субконто2", "Результат");
	
	Результат = 0;
	
	Для Каждого Строка Из БухИтогиРезультат Цикл
		
		Если Флаг = "Убыток" Тогда
			РезультатТек = ?(Строка.Результат > 0, Строка.Результат, 0);
		Иначе
			РезультатТек = ?(Строка.Результат < 0, - Строка.Результат, 0);
		КонецЕсли;
		
		Результат = Результат + РезультатТек;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаСоздатьВременнуюТаблицуДолиСпециальныеРежимы() Экспорт
	
	Возврат
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДолиСписанияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ) КАК Месяц,
	|	МИНИМУМ(ДолиСписанияКосвенныхРасходов.ДоляЕНВД) КАК Доля
	|ПОМЕСТИТЬ ДолиСпециальныеРежимы
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
	|ГДЕ
	|	ДолиСписанияКосвенныхРасходов.Организация В(&Организации)
	|	И ДолиСписанияКосвенныхРасходов.Активность
	|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДолиСписанияКосвенныхРасходов.ПериодРасчета, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц";
	
КонецФункции

Функция УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(НалоговыйПериод) Экспорт
	
	// Закон №81-ФЗ от 20 апреля 2014 года внес изменения в п. 2 ст. 279 НК РФ - отменил двухэтапный порядок 
	// включения в расходы убытка от реализации права требования.
	// Это изменение действует с 2015 года. 
	// До этой даты двухэтапный порядок применялся для реализации прав требования после наступления срока платежа.
	// Поэтому в декларации требовалось заполнять детальные сведения о таких убытках.
	ДатаНачалаЕдиновременногоВключенияУбыткаОтРеализацииПраваТребования = '2015-01-01';
	
	Возврат НалоговыйПериод >= ДатаНачалаЕдиновременногоВключенияУбыткаОтРеализацииПраваТребования;
	
КонецФункции

Функция НоваяТаблицаНачисленияНалога() Экспорт

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("СчетДт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("СчетКт",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("ПрибылиИУбытки",         Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	Результат.Колонки.Добавить("ВидыПлатежейВГосБюджет", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	Результат.Колонки.Добавить("Сумма",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("Содержание",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат Результат;

КонецФункции

// Устанавливает значения субконто для проводки по начислению налога
//
// Параметры:
//   ТекущаяПроводка - Структура, СтрокаТаблицыЗначений - данные проводки по начислению налога
//   Счет            - ПланСчетовСсылка.Хозрасчетный - счет, для которого требуется установить субконто
//   СубконтоСчета   - РегистрБухгалтерииСубконто.Хозрасчетный - субконто, для которого требуется установить значения
//
Процедура УстановитьСубконтоСчетаПоНачислениюНалога(ТекущаяПроводка, Счет, СубконтоСчета) Экспорт
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	ВидСубконтоПрибытиИУбытки = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки;
	ВидСубконтоПлатежиВБюджет = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	
	Для Индекс = 1 По 3 Цикл
		
		Если СвойстваСчета[СтрШаблон("ВидСубконто%1", Индекс)] = ВидСубконтоПрибытиИУбытки Тогда
			БухгалтерскийУчет.УстановитьСубконто(Счет,
				СубконтоСчета,
				"ПрибылиИУбытки",
				ТекущаяПроводка.ПрибылиИУбытки);
		КонецЕсли;
		
		Если СвойстваСчета[СтрШаблон("ВидСубконто%1", Индекс)] = ВидСубконтоПлатежиВБюджет Тогда
			БухгалтерскийУчет.УстановитьСубконто(Счет,
				СубконтоСчета,
				"ВидыПлатежейВГосБюджет",
				ТекущаяПроводка.ВидыПлатежейВГосБюджет);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает необходимость вывода уведомления об изменении ставки налога на прибыль.
// 
// Параметры:
// 	Период - Дата - Дата проверки
//
// Возвращаемое значение:
//  Булево
Функция ВыводитьУведомлениеОбИзмененииСтавкиНалогаНаПрибыль(Знач Период) Экспорт
	
	ВыводитьУведомление = Ложь;
	
	ДатаНачалаДействия176ФЗ = ДатаНачалаДействия176ФЗ();
		
	Если КонецМесяца(Период) = (ДатаНачалаДействия176ФЗ - 1)
		ИЛИ КонецМесяца(Период) = КонецМесяца(ДатаНачалаДействия176ФЗ) Тогда
		
		ВыводитьУведомление = Истина;
		
	КонецЕсли;
	
	Возврат ВыводитьУведомление;
	
КонецФункции

// Возвращает дату начала действия редакции 1 ст. 284 НК РФ в ред. Федерального закона от 12.07.2024 N 176-ФЗ
//
// Возвращаемое значение:
// 	Булево - Дата начала действия редакции.
//
Функция ДатаНачалаДействия176ФЗ() Экспорт
	
	Возврат РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.ДатаНачалаДействия176ФЗ();
	
КонецФункции

// Возвращает наличие регламентных операций по расчету налога на прибыль после изменения ставки.
// 
// Параметры:
// 	Период - Дата - Период изменения ставки
//
// Возвращаемое значение:
// 	Булево - Выполнен расчет налога после изменения ставки
//
Функция ВыполненРасчетНалогаПослеИзмененияСтавки(Знач Период, Знач Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса_ПроверитьРасчетНалогаПослеИзмененияСтавки();
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоОрганизации", НЕ ЗначениеЗаполнено(Организация));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область Антикризис_ЗакрытиеМесяца

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - ТаблицаЗначений - см. Обработка.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОсвобождениеОтУплатыНалоговВСвязиСКоронавирусом(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОсвобождениеОтУплатыНалоговВСвязиСКоронавирусом,
		Ложь, Истина, Ложь);
		
	НоваяСтрока.ОтображатьВыполненныеУспешно = Истина;
	НоваяСтрока.ВыполняетсяВручную 			 = Истина;
	НоваяСтрока.ТекстВыполнить               = НСтр("ru = 'Настроить';
													|en = 'Customize'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"НалоговыйУчет.Использование_ОсвобождениеОтУплатыНалоговВСвязиСКоронавирусом");
	НоваяСтрока.ДействиеВыполнить     = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.Формы.ОсвобождениеОтНалоговВСвязиСКоронавирусом_ФормаНастройки.ПолноеИмя());
	
КонецПроцедуры

// Обработчики этапа.
Процедура Использование_ОсвобождениеОтУплатыНалоговВСвязиСКоронавирусом(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ДатаВходитВПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса(ПараметрыРасчета.ПериодРегистрации) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(ПараметрыОбработчика);
		Возврат;
	КонецЕсли;
	
	ОрганизацииКОбработке = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыРасчета.МассивОрганизаций);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ОрганизацииКОбработке,
		Справочники.Организации.УправленческаяОрганизация);
	
	Если ОрганизацииКОбработке.Количество() = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Для управленческой организации настройка не производится.';
				|en = 'No settings are required for management company.'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
	ЗначенияНастроек = ЗначенияНастроекПоАнтикризиснымМерамПоКоронавирусу(ОрганизацииКОбработке);
	
	ПроверкаПройденаУспешно = Истина;
	
	Для каждого Организация Из ОрганизацииКОбработке Цикл
		
		НастройкаПоОрганизации = ЗначенияНастроек.Получить(Организация);
		
		Если НЕ (НастройкаПоОрганизации <> Неопределено И НастройкаПоОрганизации.НастройкаСуществует) Тогда
			
			ПроверкаПройденаУспешно = Ложь;
			
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для организации ""%1"" не указан порядок применения освобождения.';
						|en = 'Exemption procedure is not specified for company ""%1"".'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					Организация));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверкаПройденаУспешно Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КурсовыеРазницыНУ_ЗакрытиеМесяца

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - ТаблицаЗначений - см. Обработка.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ПереходНаУчетКурсовыхРазницНУПо67ФЗ(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетКурсовыхРазницНУПо67ФЗ, Ложь, Истина, Ложь);
		
	НоваяСтрока.ВыполняетсяВручную = Истина;
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"НалоговыйУчет.Использование_ПереходНаУчетКурсовыхРазницНУПо67ФЗ");
	
КонецПроцедуры

// Обработчики этапа.
Процедура Использование_ПереходНаУчетКурсовыхРазницНУПо67ФЗ(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ РеглУчетКлиентСервер.ДатаВходитВПериодУчетаКурсовыхРазницНУПо67ФЗ(ПараметрыРасчета.ПериодРегистрации)
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов")
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(ПараметрыОбработчика);
		Возврат;
	КонецЕсли;
	
	ОрганизацииКОбработке = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыРасчета.МассивОрганизаций);
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОрганизацииКОбработке,
		Справочники.Организации.УправленческаяОрганизация);
	
	Если ОрганизацииКОбработке.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Для управленческой организации настройка не производится.';
								|en = 'No settings are required for a management company.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(ПараметрыОбработчика, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(МенеджерВременныхТаблиц, 
		ОрганизацииКОбработке);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.ПериодРегистрации);
	Запрос.УстановитьПараметр("Организации", ОрганизацииКОбработке);
	
	МассивТекстовЗапроса = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГоловныеОрганизации.Организация КАК Организация,
	|	НастройкиНалога.ДатаНезависимогоПризнанияДоходовРасходов = ДАТАВРЕМЯ(1,1,1) КАК НеУказанаДата
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период) КАК НастройкиНалога
	|	ПО НастройкиНалога.Организация = ГоловныеОрганизации.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период) КАК НастройкиСистемыНалогообложения  
	|	ПО ГоловныеОрганизации.Организация = НастройкиСистемыНалогообложения.Организация
	|ГДЕ
	|	НастройкиНалога.ДатаНезависимогоПризнанияДоходовРасходов = ДАТАВРЕМЯ(1,1,1)
	|	И НЕ ЕСТЬNULL(НастройкиСистемыНалогообложения.ПрименяетсяУСН, ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Дата = ПараметрыРасчета.ПериодРегистрации;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеУказанаДата Тогда
			ТекстПояснения = СтрШаблон(НСтр("ru = 'Для организации ""%1"" не указана дата начала ведения учета с независимым признанием доходов и расходов.';
											|en = 'For %1 company, the start date of accounting with independent income and expense recognition is not specified.'",
				ОбщегоНазначения.КодОсновногоЯзыка()), Выборка.Организация);
		КонецЕсли;
		
		ТекстПодробнее = НСтр("ru = 'Указать';
								|en = 'Specify'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		КлючЗаписи = НастройкиНалоговУчетныхПолитик.КлючЗаписиДействующейУчетнойПолитики("НастройкиУчетаНалогаНаПрибыль",
			Выборка.Организация, Дата);
		
		ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.Формы.ФормаЗаписи.ПолноеИмя());
		ДействиеПодробнее.ПараметрыФормы.Вставить("Ключ", КлючЗаписи);
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(ПараметрыОбработчика, ТекстПояснения,
			ТекстПодробнее, ДействиеПодробнее);
					
	КонецЦикла;
	
	Если Не Выборка.Количество() Тогда
		ПараметрыОбработчика.ДанныеЭтапа.Состояние = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции
// Определяет относится ли статья доходов/расходов к не облагаемой дейтельности по налоговому учету.
//
Функция ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ(СтатьяДоходовРасходов) Экспорт
	
	НеПринимаемаяСтатья = Ложь;
	
	Если Не СтатьяДоходовРасходов.Пустая() Тогда
		
		РеквизитыСтатьи     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяДоходовРасходов, "ЭтоГруппа, ПринятиеКналоговомуУчету");
		НеПринимаемаяСтатья = Не РеквизитыСтатьи.ЭтоГруппа И Не РеквизитыСтатьи.ПринятиеКналоговомуУчету;
		
	КонецЕсли;
	
	Возврат НеПринимаемаяСтатья;
	
КонецФункции

// Определяет доли списания нормируемых расходов, 
// транспортных расходов, расходов, распределяемых по видам деятельности.
Функция ПолучитьДолюКосвенногоРасхода(ТаблицаДолейКосвенныхРасходов, ВидРасхода) Экспорт
		
	Если ТаблицаДолейКосвенныхРасходов = Неопределено Или ТаблицаДолейКосвенныхРасходов.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Строка = ТаблицаДолейКосвенныхРасходов[0];
	Если ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеЖизни;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеМедицинскоеСтрахование;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов Тогда
		Возврат Строка.ДоляРасходовНаВозмещениеПроцентовРаботникам;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
		Возврат Строка.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы Тогда
		Возврат Строка.ДоляПредставительскихРасходов;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые Тогда
		Возврат Строка.ДоляРасходовНаРекламу;
		
	ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовНУ.ТранспортныеРасходы Тогда
		Возврат Строка.ДоляТранспортныхРасходов;
		
	ИначеЕсли ВидРасхода = Неопределено Тогда
		
		Возврат Строка.ДоляЕНВД;
	Иначе	
		
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет(Реквизиты,
								ТаблицаРезультатов, ТаблицаРаспределяемыхРасходов, КоличествоОбъектовАналитики) Экспорт
	
	Если ТаблицаРезультатов.Количество() > 0 Тогда
		
		ТаблицаРезультатов.Колонки.Добавить("СуммаДт09");
		ТаблицаРезультатов.Колонки.Добавить("СуммаКт09");
		ТаблицаРезультатов.Колонки.Добавить("СуммаДт77");
		ТаблицаРезультатов.Колонки.Добавить("СуммаКт77");
		ТаблицаРезультатов.Колонки.Добавить("СуммаЕНВД");
		
		Для Каждого Строка Из ТаблицаРезультатов Цикл
			СводноеСальдоКон = ?(Строка.КонОстатокДт = NULL, 0, Строка.КонОстатокДт) - ?(Строка.КонОстатокКт = NULL, 0, Строка.КонОстатокКт);
			СводноеСальдоНач = ?(Строка.НачОстатокДт = NULL, 0, Строка.НачОстатокДт) - ?(Строка.НачОстатокКт = NULL, 0, Строка.НачОстатокКт);
			Разница          = ?(Строка.ОборотДт = NULL, 0, Строка.ОборотДт) - ?(Строка.ОборотКт = NULL, 0, Строка.ОборотКт);
			
			// Определим сумму временных разниц, приходящуюся на деятельность, облагаемую ЕНВД,
			// для распределяемых затрат, связанных с амортизацией и списанием РБП.
			СуммаРаспределяемогоРасхода  = 0;
			СуммаЕНВДРасхода             = 0;
			СтрокаРаспределяемогоРасхода = ?(КоличествоОбъектовАналитики = 0, Неопределено, ТаблицаРаспределяемыхРасходов.Найти(Строка.Субконто1, "КорСубконто1"));
			
			Если СтрокаРаспределяемогоРасхода = Неопределено Тогда
				Строка.СуммаЕНВД = Строка.ОборотЕН;
			Иначе
				СуммаРаспределяемогоРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатрат;
				СуммаЕНВДРасхода = СтрокаРаспределяемогоРасхода.СуммаЗатратЕНВД;
				Строка.СуммаЕНВД = СуммаРаспределяемогоРасхода * Реквизиты.КоэффициентЕНВД + СуммаЕНВДРасхода;
			КонецЕсли;
			
			Если СводноеСальдоНач > 0 Тогда
				Если  СводноеСальдоКон - СводноеСальдоНач > 0 Тогда
					Строка.СуммаКт77 = Разница;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
					Иначе  Если (СводноеСальдоКон < 0) И (СводноеСальдоНач >= 0) Тогда
						Строка.СуммаДт09 = - СводноеСальдоКон;
						Строка.СуммаДт77 = СводноеСальдоНач;
						Строка.СуммаКт09 = 0;
						Строка.СуммаКт77 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = -Разница;
						Строка.СуммаКт09 = 0;
						Строка.СуммаДт09 = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если  СводноеСальдоКон - СводноеСальдоНач < 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = - СводноеСальдоКон + СводноеСальдоНач;
				ИначеЕсли  СводноеСальдоКон - СводноеСальдоНач = 0 Тогда
					Строка.СуммаКт77 = 0;
					Строка.СуммаДт77 = 0;
					Строка.СуммаКт09 = 0;
					Строка.СуммаДт09 = 0;
					Иначе  Если (СводноеСальдоКон > 0) И (СводноеСальдоНач <= 0) Тогда
						Строка.СуммаКт77 = СводноеСальдоКон;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = -СводноеСальдоНач;
						Строка.СуммаДт09 = 0;
					Иначе
						Строка.СуммаКт77 = 0;
						Строка.СуммаДт77 = 0;
						Строка.СуммаКт09 = Разница;
						Строка.СуммаДт09 = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат  ТаблицаРезультатов;
	
КонецФункции // ОборотыВременныхРазницПоВидуАктивовОбязательствРасчет()

Функция ПолучитьМассивСчетовУчетаРасходов() Экспорт
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	
	Возврат СчетаЗатрат;
	
КонецФункции // ПолучитьМассивСчетовУчетаРасходов()

Функция ПолучитьМассивСчетовЕНВД() Экспорт
	
	СчетаЗатрат = Новый Массив;
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	
	Возврат СчетаЗатрат;
	
КонецФункции // ПолучитьМассивСчетовЕНВД()

Функция ПолучитьЗаписьСтавокНалогаНаПрибыль()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ЗаписьСтавкиНалогаНаПрибыль = Новый ТаблицаЗначений;
	ЗаписьСтавкиНалогаНаПрибыль.Колонки.Добавить("Ставка",      ОбщегоНазначения.ОписаниеТипаЧисло(8, 6));
	ЗаписьСтавкиНалогаНаПрибыль.Колонки.Добавить("СуммаНалога", ОписаниеТипаЧисла15_2);
	ЗаписьСтавкиНалогаНаПрибыль.Колонки.Добавить("СуммаБазы",   ОписаниеТипаЧисла15_2);
	
	Возврат ЗаписьСтавкиНалогаНаПрибыль;
	
КонецФункции

// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЭтоНепринимаемыйРасходНУ(СубконтоНУ1, СубконтоНУ2, СубконтоНУ3) Экспорт
	
	НеПринимаемыйРасход = Ложь;
	ТипДоходыРасходы    = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиДоходов");
	
	Если Не СубконтоНУ1 = Неопределено И ТипДоходыРасходы.СодержитТип(ТипЗнч(СубконтоНУ1)) Тогда
		НеПринимаемыйРасход = ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ(СубконтоНУ1);
		
	ИначеЕсли Не СубконтоНУ2 = Неопределено И ТипДоходыРасходы.СодержитТип(ТипЗнч(СубконтоНУ2)) Тогда
		НеПринимаемыйРасход = ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ(СубконтоНУ2);
		
	ИначеЕсли Не СубконтоНУ3 = Неопределено И ТипДоходыРасходы.СодержитТип(ТипЗнч(СубконтоНУ3)) Тогда
		НеПринимаемыйРасход = ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ(СубконтоНУ3);
		
	КонецЕсли;
	
	Возврат НеПринимаемыйРасход;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

// Функция анализирует аналитику затрат по дебету проводки.
// Если статья затрат не принимаемая к НУ, то возвращаемое значение "истина".
//
Функция ОпределитьНеПринимаемыеРасходы(Проводка) Экспорт
	
	// Расходы на строительство объектов основных средств, не относятся к расходам по производству и реализации
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Проводка.СчетДт, ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Субконто1 = Неопределено;
	Субконто2 = Неопределено;
	Субконто3 = Неопределено;
	
	Для каждого Субконто Из Проводка.СубконтоДт Цикл
		
		Если Субконто1 = Неопределено Тогда
			Субконто1 = Субконто.Значение;
		ИначеЕсли Субконто2 = Неопределено Тогда
			Субконто2 = Субконто.Значение;
		ИначеЕсли Субконто3 = Неопределено Тогда
			Субконто3 = Субконто.Значение;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ЭтоНепринимаемыйРасходНУ(Субконто1, Субконто2, Субконто3);
		
КонецФункции

#КонецОбласти

#Область СписаниеКосвенныхРасходов

// Регламентная операция "Списание нормируемых расходов"
// Возвращает данные информационной базы для формирования движений по регистрам.
// 
// Параметры:
// 	КонтекстРасчета - см. ЗакрытиеМесяца.КонтекстСписаниеКосвенныхРасходов
// 	Отказ - Булево
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * СчетДт - ПланСчетовСсылка.Хозрасчетный -
// * СчетКт - ПланСчетовСсылка.Хозрасчетный -
// * СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов -
// * Организация - СправочникСсылка.Организации -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности -
// * Содержание - Строка -
// * СуммаНУ - Число -
// * СуммаПР - Число -
// * СуммаВР - Число -
Функция ПолучитьРасчетСписанияКосвенныхРасходов(КонтекстРасчета, Отказ) Экспорт
	
	ТипДенежноеПоле = РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("СчетДт",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДанных.Колонки.Добавить("СчетКт",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДанных.Колонки.Добавить("СтатьяРасходов",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	ТаблицаДанных.Колонки.Добавить("ВариантНалогообложенияПрибыли",
		Новый ОписаниеТипов("СправочникСсылка.ВариантыНалогообложенияПрибыли"));
	ТаблицаДанных.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанных.Колонки.Добавить("Подразделение",    Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаДанных.Колонки.Добавить("НаправлениеДеятельности",
		Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ТаблицаДанных.Колонки.Добавить("Содержание",       Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("СуммаНУ",          ТипДенежноеПоле);
	ТаблицаДанных.Колонки.Добавить("СуммаПР",          ТипДенежноеПоле);
	ТаблицаДанных.Колонки.Добавить("СуммаВР",          ТипДенежноеПоле);
	
	ЭтоКонецГода = КонтекстРасчета.КонДата = КонецГода(КонтекстРасчета.КонДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КонецПериодаГраница",     КонтекстРасчета.КонГраница);
	Запрос.УстановитьПараметр("КонецПериода",            КонтекстРасчета.КонДата);
	Запрос.УстановитьПараметр("Организация",             КонтекстРасчета.Организация);
	
	СоздатьВременнуюТаблицуДолиСписанияКосвенныхРасходов(
		КонтекстРасчета.Дата,
		КонтекстРасчета.Организация,
		Запрос.МенеджерВременныхТаблиц);
	
	ТекстыЗапроса = Новый Массив;

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&КонецПериода КАК Период,
		|	ДолиСписания.СтатьяРасходов КАК СтатьяРасходов,
		|	ПорядокОтраженияНаСчетахУчетаПереопределяемый.СчетУчета КАК СчетСписанияОСНО,
		|	Остатки.Счет КАК СчетНормируемыхРасходов,
		|	Остатки.Организация,
		|	Остатки.Подразделение,
		|	Остатки.НаправлениеДеятельности,
		|	ДолиСписания.ДоляСписания,
		|	Остатки.СуммаНУОстаток,
		|	Остатки.СуммаВРОстаток
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериодаГраница,
		|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НормируемыеРасходы),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
		|			Организация = &Организация
		|	) КАК Остатки
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДолиСписанияКосвенныхРасходов КАК ДолиСписания
		|		ПО Остатки.Субконто1 = ДолиСписания.СтатьяРасходов
		|		И Остатки.Организация = ДолиСписания.Организация
		|		И ДолиСписания.Нормируемые
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчетаПереопределяемый КАК ПорядокОтраженияНаСчетахУчетаПереопределяемый
		|		ПО ПорядокОтраженияНаСчетахУчетаПереопределяемый.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СписаниеРасходовОСНО)
		|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.Организация = Остатки.Организация
		|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.АналитикаУчета = ДолиСписания.ГФУ_НУ
		|			И ПорядокОтраженияНаСчетахУчетаПереопределяемый.МестоУчета = Остатки.Подразделение
		|
		|";
	
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ПереопределитьВТекстеЗапросаПорядокОтраженияСчетаУчета(ТекстЗапроса);
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#Область РаздельныйУчет_НастройкиНалогообложенияПрибыли
	ИспользоватьРаздельныйУчетПрибыли = РаздельныйУчетПоНалогуНаПрибыль.ИспользуетсяРаздельныйУчет(
		КонтекстРасчета.Организация, КонтекстРасчета.Дата);
	Если ИспользоватьРаздельныйУчетПрибыли Тогда
		ПараметрыПолученияНалогообложенияПрибыли = РаздельныйУчетПоНалогуНаПрибыль.НовыйПараметрыПолученияТаблицыНастроекНалогообложенияПрибыли();
		ПараметрыПолученияНалогообложенияПрибыли.ИмяТаблицы = "ТаблицаДвижений";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Период = "Период";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Организация = "Организация";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_Подразделение = "Подразделение";
		ПараметрыПолученияНалогообложенияПрибыли.ИмяПоля_НаправлениеДеятельности = "НаправлениеДеятельности";
		ТекстыЗапроса.Добавить(РаздельныйУчетПоНалогуНаПрибыль.ТекстЗапроса_НастройкиНалогообложенияПрибыли(ПараметрыПолученияНалогообложенияПрибыли));
	Иначе
		ТекстыЗапроса.Добавить(РаздельныйУчетПоНалогуНаПрибыль.ПолучитьПустуюТаблицуНастройкиНалогообложенияПрибыли());
	КонецЕсли;
	#КонецОбласти
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаДвижений.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаДвижений.СчетСписанияОСНО КАК СчетСписанияОСНО,
		|	ТаблицаДвижений.СчетНормируемыхРасходов КАК СчетНормируемыхРасходов,
		|	ТаблицаДвижений.Организация КАК Организация,
		|	ТаблицаДвижений.Подразделение КАК Подразделение,
		|	ТаблицаДвижений.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаДвижений.ДоляСписания КАК ДоляСписания,
		|	ТаблицаДвижений.СуммаНУОстаток КАК СуммаНУОстаток,
		|	ТаблицаДвижений.СуммаВРОстаток КАК СуммаВРОстаток,
		|	ЕСТЬNULL(ТаблицаНалогообложенияПрибыли.ВариантНалогообложенияПрибыли, ЗНАЧЕНИЕ(Справочник.ВариантыНалогообложенияПрибыли.ПустаяСсылка)) КАК ВариантНО
		|ИЗ
		|	ТаблицаДвижений КАК ТаблицаДвижений
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ 
		|		РаздельныйУчет_НастройкиНалогообложенияПрибыли КАК ТаблицаНалогообложенияПрибыли
		|	ПО 
		|		ТаблицаНалогообложенияПрибыли.Период = ТаблицаДвижений.Период
		|		И ТаблицаНалогообложенияПрибыли.Организация = ТаблицаДвижений.Организация
		|		И ТаблицаНалогообложенияПрибыли.Подразделение = ТаблицаДвижений.Подразделение
		|		И ТаблицаНалогообложенияПрибыли.НаправлениеДеятельности = ТаблицаДвижений.НаправлениеДеятельности
		|
		|";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаНУОстаток = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписаниеПоНУ = Окр(Выборка.СуммаНУОстаток * Выборка.ДоляСписания, 2);
		
		Если СписаниеПоНУ <> 0 Тогда
			
			ОписаниеРасходов = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеРасходов, Выборка);
			
			ОписаниеРасходов.СчетДт     = Выборка.СчетСписанияОСНО;
			ОписаниеРасходов.СчетКт     = Выборка.СчетНормируемыхРасходов;
			ОписаниеРасходов.Содержание = КонтекстРасчета.Содержание;
			
			ОписаниеРасходов.СуммаНУ = СписаниеПоНУ;
			ОписаниеРасходов.СуммаВР = Выборка.СуммаВРОстаток;
			ОписаниеРасходов.СуммаПР = - СписаниеПоНУ - Выборка.СуммаВРОстаток;
			
			ОписаниеРасходов.ВариантНалогообложенияПрибыли = Выборка.ВариантНО;
			
		КонецЕсли;
		
		ОстатокПоНУНаКонец = Выборка.СуммаНУОстаток - СписаниеПоНУ;
		// При списании НУ полностью списывается ВР
		ОстатокПоВРНаКонец = ?(СписаниеПоНУ <> 0, 0, Выборка.СуммаВРОстаток);
		ОстатокПоПРНаКонец = - ОстатокПоНУНаКонец - ОстатокПоВРНаКонец;
		
		// Если это конец года и еще есть остатки, необходимо их списать на 84 счет
		Если ЭтоКонецГода И (ОстатокПоНУНаКонец > 0) Тогда
			
			ОписаниеРасходов = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеРасходов, Выборка);
			
			ОписаниеРасходов.СчетДт     = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			ОписаниеРасходов.СчетКт     = Выборка.СчетНормируемыхРасходов;
			ОписаниеРасходов.Содержание = КонтекстРасчета.СодержаниеКонецГода;
			
			ОписаниеРасходов.СуммаНУ = ОстатокПоНУНаКонец;
			ОписаниеРасходов.СуммаВР = ОстатокПоВРНаКонец;
			ОписаниеРасходов.СуммаПР = ОстатокПоПРНаКонец;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Создает временную таблицу с долями списания косвенных расходов в разрезе статей расходов
// 
// Параметры:
// 	Период - Дата - месяц, на который требуются данные
// 	Организации - СправочникСсылка.Организации, Массив из СправочникСсылка.Организации -
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
Процедура СоздатьВременнуюТаблицуДолиСписанияКосвенныхРасходов(Период, Организации, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОтсутствуютДолиТранспортныхРасходов = Не РасчетСебестоимостиПрикладныеАлгоритмы.ВременнаяТаблицаСуществует(
			Запрос.МенеджерВременныхТаблиц, "ДолиТранспортныхРасходов");
	
	Если ОтсутствуютДолиТранспортныхРасходов Тогда
		СоздатьПустуюВременнуюТаблицуДолиТранспортныхРасходов(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организации",             Организации);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",      НЕ ЗначениеЗаполнено(Организации));
	Запрос.УстановитьПараметр("НачалоПериода",           НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",            КонецМесяца(Период));
	Запрос.УстановитьПараметр("ВидыРасходовНормируемые", Перечисления.ВидыРасходовНУ.НормируемыеРасходы());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка,
		|	Организации.ГоловнаяОрганизация
		|ПОМЕСТИТЬ втОтборОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&Организации)
		|	И НЕ &ПоВсемОрганизациям
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ГоловнаяОрганизация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	&ПоВсемОрганизациям
		|	И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтатьиРасходов.Ссылка КАК СтатьяРасходов,
		|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ДолиСписания.НовыйАлгоритмСписания, ЛОЖЬ) КАК НовыйАлгоритмСписания,
		|	СтатьиРасходов.ГруппаФинансовогоУчетаРегл КАК ГФУ_БУ,
		|	СтатьиРасходов.ГруппаФинансовогоУчетаНУ КАК ГФУ_НУ,
		|	СтатьиРасходов.ГруппаФинансовогоУчета КАК ГФУ_УУ,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВидРасходов В (&ВидыРасходовНормируемые)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК Нормируемые,
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК Транспортные,
		//	Доля списания транспортных расходов
		|	ВЫБОР
		|		КОГДА СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
		|			ТОГДА ЕСТЬNULL(ДолиТранспортныхРасходов.ДоляТранспортныхРасходов, 0)
		//	Доли списания нормируемых расходов
		|		КОГДА СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.РасходыНаРекламуНормируемые)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляРасходовНаРекламу, 0)
		|		КОГДА СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПредставительскиеРасходы)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляПредставительскихРасходов, 0)
		|		КОГДА СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляРасходовНаДобровольноеМедицинскоеСтрахование, 0)
		|		КОГДА СтатьиРасходов.ВидРасходов
		|			= ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляРасходовНаДобровольноеСтрахованиеЖизни, 0)
		|		КОГДА СтатьиРасходов.ВидРасходов
		|			= ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляРасходовНаДобровольноеСтрахованиеОтНесчастныхСлучаев, 0)
		|		КОГДА СтатьиРасходов.ВидРасходов
		|			= ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов)
		|			ТОГДА ЕСТЬNULL(ДолиСписания.ДоляРасходовНаВозмещениеПроцентовРаботникам, 0)
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ КАК ДоляСписания
		|ПОМЕСТИТЬ ВтДолиСписанияКосвенныхРасходов
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтборОрганизации КАК Организации
		|		ПО ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписания
		|		ПО ДолиСписания.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|			И Организации.ГоловнаяОрганизация = ДолиСписания.Организация
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиТранспортныхРасходов КАК ДолиТранспортныхРасходов
		|		ПО Организации.Ссылка = ДолиТранспортныхРасходов.Организация
		|ГДЕ
		|	(СтатьиРасходов.ВидРасходов В (&ВидыРасходовНормируемые)
		|		ИЛИ СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы))
		|	И СтатьиРасходов.ВариантРаспределенияРасходовНУ =
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяРасходов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втОтборОрганизации
		|;
		|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Параметры применения нового алгоритма списания косвенных расходов
//
// Параметры:
//  Организация - СправочникСсылка.Организации - 
//  Период      - Дата, Неопределено - 
// 
// Возвращаемое значение:
//  Структура - описание:
//  	* ПрименяетсяНовыйАлгоритм - Булево -
//  	* ДатаПрименения - Дата - Дата начала применения нового алгоритма
//
Функция ПараметрыПримененияНовогоАлгоритмаСписанияКосвенныхРасходов(Организация, Знач Период = Неопределено) Экспорт
	
	ПараметрыПрименения = Новый Структура;
	ПараметрыПрименения.Вставить("ПрименяетсяНовыйАлгоритм", Ложь);
	ПараметрыПрименения.Вставить("ДатаПрименения",           Дата(1, 1, 1));
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = Дата(3000, 1, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Т.ПериодРасчета) КАК ДатаПримененияНовогоАлгоритма
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК Т
	|ГДЕ
	|	Т.ПериодРасчета <= &Период
	|	И Т.Организация = &Организация
	|	И Т.НовыйАлгоритмСписания
	|";
	
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПараметрыПрименения.ДатаПрименения           = Выборка.ДатаПримененияНовогоАлгоритма;
		ПараметрыПрименения.ПрименяетсяНовыйАлгоритм = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПрименения;
	
КонецФункции

#КонецОбласти // СписаниеКосвенныхРасходов

#Область РасчетТранспортныхРасходовТекущегоМесяца

//Рассчитывает долю транспортных расходов в соответствии со ст. 320 НК РФ
//
// Параметры
//	Период - Дата - месяц расчета.
//	Организация - СправочникСсылка.Организации, Массив - организация или массив организаций, по которым нужно произвести расчет.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - в него помещается результат расчета, если передан массив организаций
//		ВТ ДолиТранспортныхРасходов с колонками
//			Организация
//			ДоляТранспортныхРасходов.
//
// Возвращаемое значение:
//	Число - доля транспортных расходов для организации (если передан массив, то 0).
//
Функция ДоляТранспортныхРасходовТекущегоМесяца(Период, Организация, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	// Исходные данные для расчета:
	// - СуммаРасходов (транспортных)
	// - РеализацияТоваров
	// - СальдоТоваровКонечное.
	
	// Получим их.
	
	// Для расчета коэффициента используем данные НУ (по налогу на прибыль).
	// Потому, что организация 
	// - должна их использовать для НУ (ст. 320 НК)
	// - может их использовать для БУ.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА
	|		Организации.Ссылка
	|	ИНАЧЕ
	|		Организации.ГоловнаяОрганизация 
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&Организация)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация В (&Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеПолитики.Организация КАК Организация,
	|	УчетныеПолитики.ПлательщикНалогаНаПрибыль КАК ИспользоватьДанныеНалоговогоУчета
	|ПОМЕСТИТЬ ПлательщикиНалогаНаПрибыль
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
	|			&НачалоПериода,
	|			Организация В
	|				(ВЫБРАТЬ
	|					Т.Организация КАК Организация
	|				ИЗ
	|					Организации КАК Т)) КАК УчетныеПолитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УчетныеПолитики.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокОтражения.Организация,
	|	ПорядокОтражения.МестоУчета,
	|	ПорядокОтражения.АналитикаУчета,
	|	ПорядокОтражения.СчетУчета
	|ПОМЕСТИТЬ ПорядокОтраженияНаСчетахУчета
	|ИЗ
	|	РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтражения
	|ГДЕ
	|	ПорядокОтражения.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НаСкладе)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаУчета,
	|	МестоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета
	|ПОМЕСТИТЬ РазделыУчетаТоваров
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссию)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продажи.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	АналитикаНоменклатуры.МестоХранения КАК Склад,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Продажи.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		АналитикаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГруппаФинансовогоУчета,
	|	СУММА(Продажи.СтоимостьРеглОборот
	|		+ Продажи.ДопРасходыРеглОборот
	|		+ Продажи.ПостатейныеПостоянныеРеглОборот
	|		+ Продажи.ТрудозатратыРеглОборот
	|		+ Продажи.ПостатейныеПеременныеРеглОборот) КАК РеализацияТоваров,
	|	СУММА(Продажи.ПостояннаяРазницаОборот 
	|		+ Продажи.ВременнаяРазницаОборот) КАК РеализацияТоваровРазницы
	|ПОМЕСТИТЬ РеализацияТоваров
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|	) КАК Продажи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Продажи.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|ГДЕ
	|	АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)	
	|	И ЕСТЬNULL(Продажи.ВидЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И Продажи.АналитикаУчетаПоПартнерам.Организация В (ВЫБРАТЬ Т.Организация КАК Организация ИЗ Организации КАК Т)
	|	И Продажи.РазделУчета В (ВЫБРАТЬ Т.РазделУчета ИЗ РазделыУчетаТоваров КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Продажи.АналитикаУчетаПоПартнерам.Организация,
	|	АналитикаНоменклатуры.МестоХранения,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Продажи.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		АналитикаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад,
	|	ГруппаФинансовогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	АналитикаНоменклатуры.МестоХранения КАК Склад,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Товары.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		АналитикаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ КАК ГруппаФинансовогоУчета,
	|	СУММА(Товары.СтоимостьРеглОстаток
	|		+ Товары.ДопРасходыРеглОстаток
	|		+ Товары.ПостатейныеПостоянныеРеглОстаток
	|		+ Товары.ТрудозатратыРеглОстаток
	|		+ Товары.ПостатейныеПеременныеРеглОстаток) КАК СальдоТоваровКонечное,
	|	СУММА(Товары.ПостояннаяРазницаОстаток
	|		+ Товары.ВременнаяРазницаОстаток) КАК СальдоТоваровКонечноеРазницы
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|		&ГраницаКонецПериода,
	|		РазделУчета В (ВЫБРАТЬ Т.РазделУчета ИЗ РазделыУчетаТоваров КАК Т)
	|	) КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|		ПО Товары.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|ГДЕ
	|	АналитикаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И ЕСТЬNULL(Товары.ВидЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И Товары.Организация В (ВЫБРАТЬ Т.Организация КАК Организация ИЗ Организации КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Организация,
	|	АналитикаНоменклатуры.МестоХранения,
	|	ВЫБОР КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета ТОГДА
	|		Товары.ВидЗапасов.ГруппаФинансовогоУчета
	|	ИНАЧЕ
	|		АналитикаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад,
	|	ГруппаФинансовогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка
	|ПОМЕСТИТЬ СтатьиТранспортныхРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы)
	|	И НЕ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК Организация,
	|	СУММА(ИсходныеДанные.СуммаРасходов * 100) КАК СуммаРасходов,
	|	СУММА(ИсходныеДанные.РеализацияТоваров * 100) КАК РеализацияТоваров,
	|	СУММА(ИсходныеДанные.СальдоТоваровКонечное * 100) КАК СальдоТоваровКонечное
	|ПОМЕСТИТЬ ДанныеРасчетаДолей
	|ИЗ
	|	(ВЫБРАТЬ
	|		Расходы.Организация КАК Организация,
	|		ВЫБОР КОГДА ДанныеОрганизации.ИспользоватьДанныеНалоговогоУчета ТОГДА
	|			СуммаРеглОстаток - ПостояннаяРазницаОстаток - ВременнаяРазницаОстаток
	|		ИНАЧЕ
	|			СуммаРеглОстаток
	|		КОНЕЦ КАК СуммаРасходов,
	|		0 КАК РеализацияТоваров,
	|		0 КАК СальдоТоваровКонечное
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Остатки(
	|				&НачалоПериода,
	|				Организация В (ВЫБРАТЬ Т.Организация ИЗ Организации КАК Т)
	|				И СтатьяРасходов В (ВЫБРАТЬ Т.Ссылка ИЗ СтатьиТранспортныхРасходов КАК Т)
	|		) КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПлательщикиНалогаНаПрибыль КАК ДанныеОрганизации
	|		ПО
	|			ДанныеОрганизации.Организация = Расходы.Организация 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Расходы.Организация КАК Организация,
	|		ВЫБОР КОГДА ЕСТЬNULL(ДанныеОрганизации.ИспользоватьДанныеНалоговогоУчета,ЛОЖЬ) ТОГДА
	|			СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход
	|		ИНАЧЕ
	|			СуммаРеглПриход
	|		КОНЕЦ КАК СуммаРасходов,
	|		0 КАК РеализацияТоваров,
	|		0 КАК СальдоТоваровКонечное
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Обороты(
	|				&НачалоПериода, &КонецПериода, ,
	|				Организация В (ВЫБРАТЬ Т.Организация ИЗ Организации КАК Т)
	|				И СтатьяРасходов В (ВЫБРАТЬ Т.Ссылка ИЗ СтатьиТранспортныхРасходов КАК Т)
	|		) КАК Расходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПлательщикиНалогаНаПрибыль КАК ДанныеОрганизации
	|		ПО
	|			ДанныеОрганизации.Организация = Расходы.Организация 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Продажи.Организация КАК Организация,
	|		0 КАК СуммаРасходов,
	|		ВЫБОР КОГДА ЕСТЬNULL(ДанныеОрганизации.ИспользоватьДанныеНалоговогоУчета,ЛОЖЬ) ТОГДА
	|			Продажи.РеализацияТоваров - Продажи.РеализацияТоваровРазницы
	|		ИНАЧЕ
	|			Продажи.РеализацияТоваров
	|		КОНЕЦ КАК РеализацияТоваров,
	|		0 КАК СальдоТоваровКонечное
	|	ИЗ
	|		РеализацияТоваров КАК Продажи
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПлательщикиНалогаНаПрибыль КАК ДанныеОрганизации
	|		ПО
	|			ДанныеОрганизации.Организация = Продажи.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоМестуУчета
	|		ПО НастройкиПоМестуУчета.Организация = Продажи.Организация
	|			И НастройкиПоМестуУчета.АналитикаУчета = Продажи.ГруппаФинансовогоУчета
	|			И НастройкиПоМестуУчета.МестоУчета = Продажи.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
	|		ПО НастройкиПоОрганизации.Организация = Продажи.Организация
	|			И НастройкиПоОрганизации.АналитикаУчета = Продажи.ГруппаФинансовогоУчета
	|			И НастройкиПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
	|		ПО НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И НастройкиПоАналитике.АналитикаУчета = Продажи.ГруппаФинансовогоУчета
	|			И НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ГДЕ
	|		ЕСТЬNULL(НастройкиПоМестуУчета.СчетУчета, ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета,
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)))) В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.Организация КАК Организация,
	|		0 КАК СуммаРасходов,
	|		0 КАК РеализацияТоваров,
	|		ВЫБОР КОГДА ЕСТЬNULL(ДанныеОрганизации.ИспользоватьДанныеНалоговогоУчета,ЛОЖЬ) ТОГДА
	|			Товары.СальдоТоваровКонечное - Товары.СальдоТоваровКонечноеРазницы
	|		ИНАЧЕ
	|			Товары.СальдоТоваровКонечное
	|		КОНЕЦ КАК СальдоТоваровКонечное
	|	ИЗ
	|		Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПлательщикиНалогаНаПрибыль КАК ДанныеОрганизации
	|		ПО
	|			ДанныеОрганизации.Организация = Товары.Организация 
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоМестуУчета
	|		ПО НастройкиПоМестуУчета.Организация = Товары.Организация
	|			И НастройкиПоМестуУчета.АналитикаУчета = Товары.ГруппаФинансовогоУчета
	|			И НастройкиПоМестуУчета.МестоУчета = Товары.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоОрганизации
	|		ПО НастройкиПоОрганизации.Организация = Товары.Организация
	|			И НастройкиПоОрганизации.АналитикаУчета = Товары.ГруппаФинансовогоУчета
	|			И НастройкиПоОрганизации.МестоУчета = НЕОПРЕДЕЛЕНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
	|		ПО НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И НастройкиПоАналитике.АналитикаУчета = Товары.ГруппаФинансовогоУчета
	|			И НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО
	|	ГДЕ
	|		ЕСТЬNULL(НастройкиПоМестуУчета.СчетУчета, ЕСТЬNULL(НастройкиПоОрганизации.СчетУчета, ЕСТЬNULL(НастройкиПоАналитике.СчетУчета,
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)))) В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары))
	|	) КАК ИсходныеДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Организации КАК Организации
	|	ПО
	|		ИсходныеДанные.Организация = Организации.Организация
	|	
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|";
	
	Если ТипЗнч(Организация) = Тип("Массив") И МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Организации.Организация КАК Организация,
			|	ВЫБОР
			|		КОГДА ДанныеРасчетаДолей.СуммаРасходов = 0
			|				ИЛИ ДанныеРасчетаДолей.РеализацияТоваров = 0
			|				ИЛИ ДанныеРасчетаДолей.РеализацияТоваров + ДанныеРасчетаДолей.СальдоТоваровКонечное = 0
			|			ТОГДА 0
			|		КОГДА ДанныеРасчетаДолей.СуммаРасходов - 
			|				(ВЫРАЗИТЬ(ДанныеРасчетаДолей.СальдоТоваровКонечное *
			|					(ВЫРАЗИТЬ(ДанныеРасчетаДолей.СуммаРасходов / (ДанныеРасчетаДолей.РеализацияТоваров + ДанныеРасчетаДолей.СальдоТоваровКонечное) КАК ЧИСЛО(21, 8))
			|				) КАК ЧИСЛО(15, 2))) > 0
			|			ТОГДА ВЫРАЗИТЬ(
			|					(ДанныеРасчетаДолей.СуммаРасходов - 
			|						(ВЫРАЗИТЬ(ДанныеРасчетаДолей.СальдоТоваровКонечное *
			|							(ВЫРАЗИТЬ(ДанныеРасчетаДолей.СуммаРасходов / (ДанныеРасчетаДолей.РеализацияТоваров + ДанныеРасчетаДолей.СальдоТоваровКонечное) КАК ЧИСЛО(21, 8))
			|					) КАК ЧИСЛО(21, 8)))) / ДанныеРасчетаДолей.СуммаРасходов
			|				КАК ЧИСЛО(15, 8))
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДоляТранспортныхРасходов
			|ПОМЕСТИТЬ ДолиТранспортныхРасходов
			|ИЗ
			|	ДанныеРасчетаДолей КАК ДанныеРасчетаДолей
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Организации КАК Организации
			|	ПО
			|		ДанныеРасчетаДолей.Организация = Организации.ГоловнаяОрганизация
			|ГДЕ
			|	Организации.Организация В (&Организация)
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Организации
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПлательщикиНалогаНаПрибыль
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ПорядокОтраженияНаСчетахУчета
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ РазделыУчетаТоваров
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ РеализацияТоваров
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Товары
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ СтатьиТранспортныхРасходов
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ДанныеРасчетаДолей
			|";
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		Возврат 0;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ДанныеРасчетаДолей", "");
	КонецЕсли;
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
		
	// Требования статьи 320 следующие:
	// Сумма прямых расходов в части транспортных расходов, 
	// относящаяся к остаткам нереализованных товаров, 
	// определяется по среднему проценту за текущий месяц 
	// с учетом переходящего остатка на начало месяца в следующем порядке:
	// 1) определяется сумма прямых расходов, 
	//    приходящихся на остаток нереализованных товаров на начало месяца и осуществленных в текущем месяце;
	
	СуммаРасходов = Выборка.СуммаРасходов;
	Если СуммаРасходов = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	// 2) определяется стоимость приобретения товаров, реализованных в текущем месяце,
	//    и стоимость приобретения остатка нереализованных товаров на конец месяца;
	
	РеализацияТоваров     = Выборка.РеализацияТоваров;
	СальдоТоваровКонечное = Выборка.СальдоТоваровКонечное;
	СтоимостьТоваров      = РеализацияТоваров + СальдоТоваровКонечное;
	
	Если РеализацияТоваров = 0 Или СтоимостьТоваров = 0 Тогда
		// В текущем месяце транспортные расходы принять нельзя - все расходы приходятся на остаток товаров.
		Возврат 0;
	КонецЕсли;
	
	// 3) рассчитывается средний процент как отношение суммы прямых расходов (пункт 1 настоящей части)
	//    к стоимости товаров (пункт 2 настоящей части);
	
	ПроцентРасходов = Окр(СуммаРасходов / СтоимостьТоваров, 8);
	
	// 4) определяется сумма прямых расходов, относящаяся к остатку нереализованных товаров, 
	//    как произведение среднего процента и стоимости остатка товаров на конец месяца.
	СальдоРасходовКонечное = Окр(ПроцентРасходов * СальдоТоваровКонечное, 2);
	
	// <конец цитаты ст.320>
	// Функция должна вернуть не сальдо расходов, а долю расходов текущего месяца.
	РасходыТекущегоПериода      = СуммаРасходов - СальдоРасходовКонечное;
	Если РасходыТекущегоПериода > 0 Тогда
		Возврат РасходыТекущегоПериода / СуммаРасходов;
	Иначе
		// В текущем месяце транспортные расходы принять нельзя - все расходы приходятся на остаток товаров.
		Возврат 0;
	КонецЕсли;
	
КонецФункции
// Создает пустую временную таблицу ДолиТранспортныхРасходов
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - МВТ исполняемого запроса
Процедура СоздатьПустуюВременнуюТаблицуДолиТранспортныхРасходов(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	0 КАК ДоляТранспортныхРасходов
		|ПОМЕСТИТЬ ДолиТранспортныхРасходов";
		
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РасчетныеСтавкиНалогаНаПрибыль

Функция ПодготовитьТаблицуРасчетСтавокНалогаНаПрибыль(Отказ) Экспорт   
	ЗаписьСтавокНалогаНаПрибыль = ПолучитьЗаписьСтавокНалогаНаПрибыль();
	Возврат  ЗаписьСтавокНалогаНаПрибыль;
	
КонецФункции

#КонецОбласти

#Область НалоговыеСтавки

Функция ТекстЗапроса_НалоговаяСтавкаДляВсехОрганизаций()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ВариантНалогообложенияПрибыли
	|				И СтавкиНалога.ВариантНалогообложенияПрибыли <> &ПустаяСсылкаВариантНалогообложенияПрибыли
	|			ТОГДА 1
	|		КОГДА СтавкиНалога.ВариантНалогообложенияПрибыли = &ОсновнойВариантНалогообложенияПрибыли
	|			ТОГДА 2
	|		ИНАЧЕ
	|			// Варианты н/о по умолчанию
	|			3
	|	КОНЕЦ                        КАК Приоритет,
	|	СтавкиНалога.СтавкаФБ        КАК СтавкаФБ,
	|	СтавкиНалога.СтавкаСубъектРФ КАК СтавкаРБ
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СрезПоследних(
	|		&Период,
	|		ВариантНалогообложенияПрибыли В (&ОтборВариантовНалогообложения)
	|	) КАК СтавкиНалога
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР
	|";
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапроса_НалоговыеСтавки(Запрос,
													Организация,
													Период,
													Знач ВариантНалогообложенияПрибыли,
													Знач РегистрацияВНалоговомОргане = Неопределено)
	
	
	ОтборВариантовНалогообложения = Новый Массив;
	
	ВариантыНалогообложенияПрибылиПоУмолчанию =
		РаздельныйУчетПоНалогуНаПрибыль.ВариантыНалогообложенияПрибылиПоУмолчанию();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборВариантовНалогообложения,
			ВариантыНалогообложенияПрибылиПоУмолчанию);
	
	Запрос.УстановитьПараметр("Организация",                               Организация);
	Запрос.УстановитьПараметр("Период",                                    Период);
	
	Запрос.УстановитьПараметр("ВариантНалогообложенияПрибыли",             ВариантНалогообложенияПрибыли);
	
	ОсновнойВариантНалогообложенияПрибыли =
		РаздельныйУчетПоНалогуНаПрибыль.ОсновнойВариантНалогообложенияПрибыли(
			Организация,
			Период);

	Запрос.УстановитьПараметр("ОсновнойВариантНалогообложенияПрибыли",     ОсновнойВариантНалогообложенияПрибыли);
	Запрос.УстановитьПараметр("ВариантыНалогообложенияПрибылиПоУмолчанию",
			ВариантыНалогообложенияПрибылиПоУмолчанию);   
			
	ОтборВариантовНалогообложения.Добавить(ВариантНалогообложенияПрибыли);
	ОтборВариантовНалогообложения.Добавить(ОсновнойВариантНалогообложенияПрибыли);
	
	Если ПрименяютсяРазныеСтавкиНалогаНаПрибыль() Тогда
	
		ОсновнаяРегистрацияВНалоговомОргане = РегистрацияОрганизацииВНалоговомОргане(Организация, Период);
		
		РегистрацииВНалоговомОрганеПоУмолчанию = Новый Массив();
		РегистрацииВНалоговомОрганеПоУмолчанию.Добавить(ОсновнаяРегистрацияВНалоговомОргане);
		РегистрацииВНалоговомОрганеПоУмолчанию.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане",            РегистрацияВНалоговомОргане);
		Запрос.УстановитьПараметр("РегистрацииВНалоговомОрганеПоУмолчанию", РегистрацииВНалоговомОрганеПоУмолчанию);
		
		ОтборРегистрацийВНалоговомОргане = Новый Массив();
		ОтборРегистрацийВНалоговомОргане.Добавить(РегистрацияВНалоговомОргане);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ОтборРегистрацийВНалоговомОргане,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РегистрацииВНалоговомОрганеПоУмолчанию));
		
		Запрос.УстановитьПараметр("ОтборРегистрацийВНалоговомОргане", ОтборРегистрацийВНалоговомОргане);
	
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("ОтборВариантовНалогообложения", ОтборВариантовНалогообложения);
	
	Запрос.УстановитьПараметр("ПустаяСсылкаВариантНалогообложенияПрибыли",
		Справочники.ВариантыНалогообложенияПрибыли.ПустаяСсылка());
	
КонецПроцедуры

Функция ТекстЗапроса_ПроверитьРасчетНалогаПослеИзмененияСтавки()
	
	Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.Проведен
	|	И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.РасчетНалогаНаПрибыль)
	|	И РегламентнаяОперация.Дата >= НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
	|	И (РегламентнаяОперация.Организация = &Организация
	|	ИЛИ &НеИспользоватьОтборПоОрганизации)";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеРегламентированныхОтчетов

#Область ПолучениеСведенийОПоказателях

#Область ПолучениеСведенийОПоказателяхДекларацииПоПрибыли

Процедура ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2010Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010503", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030019003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040015003", Истина, Истина);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010001403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002010010703", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020004203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020005903", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020013503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020020503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002020030203", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002030019003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П002040015003", Истина, Истина);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2015Кв1(ПоказателиОтчета) Экспорт
	
	// В основном, код этой процедуры скопирован из ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2013Кв4.
	// Такой код отличается номерами ячеек.
	// Кроме того, заполнение отдельных строк выполняется только в налоговых периодах до 2015 года.
	// Остальные изменения следует вносить одновременно в ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2013Кв4() 
	// и ПолучитьСведенияОПоказателяхОтчетаПрибыльФормаОтчета2015Кв1().
	
	// Приложение 1 к Листу 02
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010603", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210010703", Истина, Истина);
	
	// Приложение 2 к Листу 02
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220013103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220013203", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220013303", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220013403", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000220013503", Истина, Истина);
	
	// Приложение 4 к Листу 02
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240004001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240005001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240006001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240007001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240008001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240009001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240010001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240011001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240012001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240013001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000240015003", Истина, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Заполнение

#Область ЗаполнениеДекларацииПоПрибыли

// Заполняет декларацию по налогу на прибыль
//
// Параметры: - (см. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет).
//
Процедура ЗаполнитьОтчетПрибыльФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке. Инициализируется в процедуре добавления записи
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СписокОрганизаций = ВсяОрганизация(ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач",           ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",           ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	// Временная таблица расчета доли ЕНВД:
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ДолиЕНВД.ДоляЕНВД) КАК ДоляЕНВД,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДолиЕНВД.ПериодРасчета, МЕСЯЦ)) КАК МесяцЕНВД
	|ПОМЕСТИТЬ ДолиЕНВД
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ПО ДолиЕНВД.Регистратор = РегламентнаяОперация.Ссылка
	|		И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов)
	|ГДЕ
	|	ДолиЕНВД.Организация В(&СписокОрганизаций)
	|	И ДолиЕНВД.Активность
	|	И ДолиЕНВД.ПериодРасчета МЕЖДУ &ДатаНач И &ДатаКон
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцЕНВД";
	
	Запрос.Выполнить();	
	
	// Таблица итогов по всем счетам без анлитики:
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК КО,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет ИЕРАРХИЯ";	
	
	БухИтоги = Запрос.Выполнить().Выгрузить();
	
	// Таблица итогов по всем счетам косвенных затрат с рабивкой по виду затрат:
	
	Запрос.УстановитьПараметр("Счет", ПолучитьМассивСчетовУчетаРасходов());
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПС.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПС.Продажи_УправленческиеРасходыНеЕНВД);
	
	Запрос.УстановитьПараметр("КорСчет",             КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И (НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = &ТранспортныеРасходы),
	|			КорСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов";
	
	БухИтогиКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	// Прочие доходы и расходы:
	
	МассивНеЕНВД = Новый Массив;
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("МассивНеЕНВД", МассивНеЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС
	|					= ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДебетовыйОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС
	|					= ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КредитовыйОборот
	|ПОМЕСТИТЬ ТаблицаПрочиеДоходыРасходыНеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.ДебетовыйОборот) КАК ДО,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.КредитовыйОборот) КАК КО
	|ИЗ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД КАК ТаблицаПрочиеДоходыРасходыНеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов";
	
	БухИтоги91 = Запрос.Выполнить().Выгрузить();
	
	// Из расходов по реализации амортизируемого имущества вычитаем перенос на расходы убытков от реализации.
	
	РеализацияАмортизируемогоИмущества = Новый Массив;
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	РеализацияАмортизируемогоИмущества.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("РеализацияАмортизируемогоИмущества", РеализацияАмортизируемогоИмущества);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС
	|					= ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС
	|					= ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&РеализацияАмортизируемогоИмущества),
	|			Корсчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов),
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	БухИтогиПереносУбытковПоОСиНМА = Запрос.Выполнить().Выгрузить();
	
	// Внереализационные доходы и расходы
	
	Запрос.УстановитьПараметр("Счет",           ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",    ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|					И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС
	|						= ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	БухИтоги917 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",        ПС.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	МассивЗапасовНУ = Новый Массив;
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
	МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
	МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
	МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.Материалы);
	МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
	МассивЗапасовНУ.Добавить(ПС.Товары);
	МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
	МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",     МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕстьNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),0) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|				КОНЕЦ,
	|			КорСчет В ИЕРАРХИИ (&КорСчет),
	|			) КАК ХозрасчетныйОбороты";
	
	
	БухИтоги911_Излишки = Запрос.Выполнить().Выгрузить().Итог("КО");
	
	// Состав справочников "Статьи затрат", "Прочие доходы и расходы" и "Расходы будущих периодов" по видам затрат для расшифровки.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходов КАК ВидЗатрат
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиЗатрат
	|
	|ГДЕ
	|	НЕ СтатьиЗатрат.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
	СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
	|
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
	СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРБП.Прочие) КАК Вид
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	
	СписокРБП = Новый ТаблицаЗначений;
	СписокРБП.Колонки.Добавить("Счет");
	СписокРБП.Колонки.Добавить("СписокЗатрат");
	
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Вид");
	
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		
		СтрокаСписокРБП = СписокРБП.Добавить();
		СтрокаСписокРБП.Счет = ВыборкаВидовЗатрат.Вид;
		СтрокаСписокРБП.СписокЗатрат = Новый СписокЗначений;
		
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока Выборка.Следующий() Цикл
			СтрокаСписокРБП.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЦикла;	
	
	#Область Лист02_1
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 1
	
	СтраницаЛист02_1 = Контейнер.Лист02_1[0].Данные[0].Значение;
	
	Счет9101 = ПС.ПрочиеДоходы;
	Счет9102 = ПС.ПрочиеРасходы;
	
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	ВидСубконтоСтатьиЗатрат 		= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоРБП 					= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов;
	ПрочиеДоходыИРасходы			= Перечисления.ВидыПрочихДоходовИРасходов;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаУчетаПродукции = Новый Массив;
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); //43
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);    //21
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная); //45.02
	Запрос.УстановитьПараметр("СчетаУчетаПродукции", СчетаУчетаПродукции);
	
	ИспользоватьГруппыФинансовогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	Запрос.УстановитьПараметр("ИспользоватьГруппыФинансовогоУчетаНоменклатуры", ИспользоватьГруппыФинансовогоУчетаНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвиженияССубконто.Регистратор КАК Регистратор,
	|	ДвиженияССубконто.СубконтоКт1 КАК Номенклатура
	|ПОМЕСТИТЬ РеализацияПродукции
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Организация В (&СписокОрганизаций)
	|				И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД))
	|				И СчетКт В (&СчетаУчетаПродукции),
	|			,
	|			) КАК ДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА &ИспользоватьГруппыФинансовогоУчетаНоменклатуры
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры)
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Номенклатура)
	|	КОНЕЦ КАК ЗначениеСубконто
	|ПОМЕСТИТЬ Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Выручка.СуммаДохода, 0)) КАК СуммаДохода,
	|	Выручка.ЗначениеСубконто КАК ЗначениеСубконто,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияПродукции.Номенклатура ЕСТЬ NULL 
	|				ИЛИ Выручка.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобственнаяПродукция
	|ИЗ
	|	Выручка КАК Выручка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеализацияПродукции КАК РеализацияПродукции
	|		ПО Выручка.Регистратор = РеализацияПродукции.Регистратор
	|			И Выручка.Номенклатура = РеализацияПродукции.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Выручка.ЗначениеСубконто,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияПродукции.Номенклатура ЕСТЬ NULL 
	|				ИЛИ Выручка.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ВыборкаДоходПродукция = Запрос.Выполнить().Выбрать();
	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства.
	ЗаголовокРасшифровкиСтроки011 = НСтр("ru = 'Строка 011 ""Выручка от реализации товаров (работ, услуг) собственного производства""';
										|en = 'Line 011 ""Revenue from sales of own-produced goods (works, services)""'");
	П002010001103 = 0;
	// Строка 012 - выручка от реализации покупных товаров
	ЗаголовокРасшифровкиСтроки012 = НСтр("ru = 'Строка 012 - ""Выручка от реализации покупных товаров""';
										|en = 'Line 012 - ""Revenue from sales of purchased goods""'");
	П002010001203 = 0;
	
	ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные;
	ВидСубконтоРасшифровки = ?(ИспользоватьГруппыФинансовогоУчетаНоменклатуры, ВидыСубконто.НоменклатурныеГруппы, ВидыСубконто.Номенклатура);
	
	Пока ВыборкаДоходПродукция.Следующий() Цикл
				
		Если ВыборкаДоходПродукция.СобственнаяПродукция Тогда
			П002010001103 = П002010001103 + ВыборкаДоходПродукция.СуммаДохода;
		Иначе
			П002010001203 = П002010001203 + ВыборкаДоходПродукция.СуммаДохода;			
		КонецЕсли;
			
		// Заполним данные расшифровки:
		ИмяПоказателя = ?(ВыборкаДоходПродукция.СобственнаяПродукция, "П002010001103", "П002010001203");
		ЗаголовокРасшифровки = ?(ВыборкаДоходПродукция.СобственнаяПродукция, ЗаголовокРасшифровкиСтроки011, ЗаголовокРасшифровкиСтроки012);
		ЗначениеСубконто = ?(ЗначениеЗаполнено(ВыборкаДоходПродукция.ЗначениеСубконто), ВыборкаДоходПродукция.ЗначениеСубконто, "< не заполнено >");
		ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРасшифровки, ЗначениеСубконто);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, ЗаголовокРасшифровки, "+",
			"!КО"+ПС.ВыручкаНеЕНВД.Код, ВыборкаДоходПродукция.СуммаДохода, "Лист02_1", ДополнительныеПараметры);
			
	КонецЦикла;
		
	СтраницаЛист02_1.П002010001103 = П002010001103;
	СтраницаЛист02_1.П002010001203 = П002010001203;
	
	Если П002010001103 = 0 Тогда // Данные расшифровки были не заполнены по этому показателю
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010001103", ЗаголовокРасшифровкиСтроки011, "+", "!КО"+ПС.ВыручкаНеЕНВД.Код, 0, "Лист02_1");
	КонецЕсли;
	Если П002010001203 = 0 Тогда // Данные расшифровки были не заполнены по этому показателю
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002010001203", ЗаголовокРасшифровкиСтроки012, "+", "!КО"+ПС.ВыручкаНеЕНВД.Код, 0, "Лист02_1");
	КонецЕсли;
	
	// Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования.
	П002010001303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	П002030007003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_1.П002010001303 = П002010001303 + П002030007003;
	
	Заголовок = НСтр("ru = 'Строка 013 ""Выручка от реализации от реализации имущественных прав""';
					|en = 'Line 013 - ""Revenue from sale of property rights""'");
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияИмущественныхПравКромеПраваТребования", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010001303",
								Заголовок,
								"+",
								"!КО"+ПС.ПрочиеРасходы.Код,
								П002010001303,
								"Лист02_1",
								ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияКакОказанияФинансовыхУслуг", СписокПрочихДоходовИРасходов, Ложь);															
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010001303",
								Заголовок,
								"+",
								"!КО"+ПС.ПрочиеРасходы.Код,
								П002030007003,
								"Лист02_1",
								ДополнительныеПараметры);
	
	// Строка 014 - выручка от реализации прочего имущества
	СтраницаЛист02_1.П002010001403 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка.
	СтраницаЛист02_1.П002010002003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	
	// Строка 100 - Внереализационные доходы всего
	СтраницаЛист02_1.П002010010003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("КО"));
	ВставитьРасшифровкуВнереализационныхДоходовРасходов(ТаблицаРасшифровки, Запрос, "П002010010003", "КО", СписокПрочихДоходовИРасходов);
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде.
	П002010010103 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_1.П002010010103 = П002010010103;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПрибыльУбытокПрошлыхЛет", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010010103",
								НСтр("ru = 'Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""';
									|en = 'Line 101 ""Income as previous years income detected in accounting (fiscal) period""'"),
								"+",
								"!КО"+ПС.ПрочиеДоходы.Код,
								П002010010103,
								"Лист02_1",
								ДополнительныеПараметры);
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_1.П002010010203 = П002010010203;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ЛиквидацияОсновныхСредств", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010010203",
								НСтр("ru = 'Строка 102 ""Доходы от ликвидации основных средств""';
									|en = 'Line 102 ""Income from disposal of fixed assets""'"),
								"+",
								"!КО"+ПС.ПрочиеДоходы.Код,
								П002010010203,
								"Лист02_1",
								ДополнительныеПараметры);
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в
	// статье 251 НК).
	П002010010303 = БухИтогиНайти("КО", ПрочиеДоходыИРасходы.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав, БухИтоги917);
	СтраницаЛист02_1.П002010010303 = П002010010303;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010010303",
								НСтр("ru = 'Строка 103 ""Доходы от безвозмездного получения имущества""';
									|en = 'Line 103 ""Income from gratuitous fixed asset acquisition""'"),
								"+",
								"!КО"+ПС.ПрочиеДоходы.Код,
								П002010010303,
								"Лист02_1",
								ДополнительныеПараметры);
	
	// Строка 104 - в виде излишков
	П002010010403 = БухИтоги911_Излишки;
	СтраницаЛист02_1.П002010010403 = П002010010403;
	
	// Строка 105 - в виде востановления аморт. премии
	П002010010503 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии, БухИтоги917);
	СтраницаЛист02_1.П002010010503 = П002010010503;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ВосстановлениеАмортизационнойПремии", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002010010503",
		НСтр("ru = 'Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""';
			|en = 'Line 103 ""amount of restored expenses on capital investments in accordance with paragraph 4 of clause 9 in article 258 of the TC""'"),
		"+",
		"!КО"+ПС.ПрочиеДоходы.Код,
		П002010010503,
		"Лист02_1",
		ДополнительныеПараметры);
	
	// Строка 107 - в сумм корректировки прибыли до рыночных цен
	П002010010703 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен, БухИтоги917);
	СтраницаЛист02_1.П002010010703 = П002010010703;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("КорректировкаПрибылиДоРыночныхЦен", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002010010703",
								НСтр("ru = 'Строка 107 ""сумма корректировки прибыли до рыночных цен""';
									|en = 'Line 107 ""amount of profit adjustment to market prices""'"),
								"+",
								"!КО"+ПС.ПрочиеДоходы.Код,
								П002010010703,
								"Лист02_1",
								ДополнительныеПараметры);
								
	#КонецОбласти
	
	#Область Лист02_2
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 2
	
	СтраницаЛист02_2 = Контейнер.Лист02_2[0].Данные[0].Значение;
	
	// Строка 010 - Прямые расходы, относящиеся к реализованным товарам,
	//              работам, услугам.
	Запрос.УстановитьПараметр("Счет", ПС.СебестоимостьПродажНеЕНВД);
	Товары = Новый Массив;
	Товары.Добавить(ПС.Товары);
	Товары.Добавить(ПС.ТорговаяНаценка);
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ПокупныеТовары = Новый Массив;
	ПокупныеТовары.Добавить(ПС.Товары);
	ПокупныеТовары.Добавить(ПС.ТорговаяНаценка);
	ПокупныеТовары.Добавить(ПС.ПокупныеТоварыОтгруженные);
	Запрос.УстановитьПараметр("ПокупныеТовары", ПокупныеТовары);
	
	Запрос.УстановитьПараметр("ПокупныеТоварыОтгруженные", ПС.ПокупныеТоварыОтгруженные);
	Массив = Новый Массив;
	Массив.Добавить(ПС.РасчетыСПоставщикамиИПодрядчиками);
	Массив.Добавить(ПС.РасчетыСПокупателямиИЗаказчиками);
	Массив.Добавить(ПС.РасчетыСРазнымиДебиторамиИКредиторами);
	Запрос.УстановитьПараметр("ПоступлениеИВыбытиеИмуществаРаботУслугПрав", Массив);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК СебестоимостьПродаж,
	|	0 КАК Товары,
	|	0 КАК ПокупныеТоварыОтгруженные,
	|	0 КАК ПоступлениеИВыбытиеИмуществаРаботУслугПрав
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0,
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В ИЕРАРХИИ (&Товары),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В ИЕРАРХИИ (&ПокупныеТоварыОтгруженные),
	|			) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги902 = Запрос.Выполнить().Выгрузить();
	
	СебестоимостьПродаж                        = БухИтоги902.Итог("СебестоимостьПродаж");
	Товары                                     = БухИтоги902.Итог("Товары");
	ПокупныеТоварыОтгруженные                  = БухИтоги902.Итог("ПокупныеТоварыОтгруженные");
	ПоступлениеИВыбытиеИмуществаРаботУслугПрав = БухИтоги902.Итог("ПоступлениеИВыбытиеИмуществаРаботУслугПрав");
	ПокупныеТовары                             = Товары + ПокупныеТоварыОтгруженные + ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	П002020001003 = СебестоимостьПродаж - ПокупныеТовары;
	СтраницаЛист02_2.П002020001003 = П002020001003;
	ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат, Ложь);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоСтатьиЗатрат, ЗначениеСубконто);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020001003",
								НСтр("ru = 'Строка 010 ""Прямые расходы, относящиеся к реализованным товарам, работам, услугам""';
									|en = 'Line 010 ""Direct expenses related to sold goods, works, services""'"),
								"+",
								"!ДО"+ПС.СебестоимостьПродаж.Код,
								СебестоимостьПродаж,
								"Лист02_2",
								ДополнительныеПараметры);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020001003", "", "-", "!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.Товары.Код, - Товары, "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020001003",
								"",
								"-",
								"!ОБ"+ПС.СебестоимостьПродаж.Код+" "+ПС.ПокупныеТоварыОтгруженные.Код,
								- ПокупныеТоварыОтгруженные,
								"Лист02_2");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт) КАК Сумма,
	|	ХозрасчетныйОбороты.КорСчет КАК КоррСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код КАК КоррСчетКод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			,
	|			Организация В (&СписокОрганизаций),
	|			КорСчет В ИЕРАРХИИ (&ПоступлениеИВыбытиеИмуществаРаботУслугПрав),
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									"П002020001003",
									"",
									"-",
									"!ОБ"+ПС.СебестоимостьПродаж.Код+" "+Строка.КоррСчетКод,
									- Строка.Сумма,
									"Лист02_2");
	КонецЦикла;
	
	// Строка 020 - Прямые расходы налогоплательщиков, осуществляющих оптовую,
	//              мелкооптовую и розничную  торговлю в текущем  отчетном
	//              (налоговом) периоде.
	Запрос.УстановитьПараметр("Счет44",       ПС.РасходыНаПродажу);
	Запрос.УстановитьПараметр("Счет90",       ПС.Продажи_РасходыНаПродажуНеЕНВД);	
	Запрос.УстановитьПараметр("ВидЗатрат",    Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет44),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов В (&ВидЗатрат),
	|			КорСчет = &Счет90,
	|			) КАК ХозрасчетныйОбороты
	|";
	
	БухИтоги44 = Запрос.Выполнить().Выгрузить();
	П002020002003 = БухИтоги44.Итог("СуммаОборотКт") + ПокупныеТовары;
	СтраницаЛист02_2.П002020002003 = П002020002003;
	
	ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы, СписокСтатейЗатрат, Ложь);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоСтатьиЗатрат, ЗначениеСубконто);
	
	Заголовок = НСтр("ru = 'Строка 020 ""Прямые расходы налогоплательщиков, осуществляющих оптовую, 
	|мелкооптовую и розничную  торговлю в текущем  отчетном (налоговом) периоде""';
	|en = 'Line 020 ""Direct expenses of taxpayers involved in wholesale,
	|small-scale wholesale, and retail sale in the current accounting (fiscal) period""'");
	ОборотСДебетаСчета = "!ОБ"+ПС.СебестоимостьПродаж.Код+" ";
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020002003",
								Заголовок,
								"+",
								"!ОБ"+ПС.РасходыНаПродажу+" "+ПС.РасходыНаПродажу,
								БухИтоги44.Итог("СуммаОборотКт"),
								"Лист02_2",
								ДополнительныеПараметры);
								
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020002003", "", "+", ОборотСДебетаСчета+ПС.Товары.Код, Товары, "Лист02_2");
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020002003",
								"",
								"+",
								ОборотСДебетаСчета+ПС.ПокупныеТоварыОтгруженные,
								ПокупныеТоварыОтгруженные,
								"Лист02_2");
								
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020002003",
								"",
								"+",
								ОборотСДебетаСчета+ПС.РасчетыСПокупателямиИЗаказчиками.Код,
								ПоступлениеИВыбытиеИмуществаРаботУслугПрав,
								"Лист02_2");
	
	// Строка 030 - Стоимость реализованных покупных товаров
	П002020003003 = ПокупныеТовары;
	СтраницаЛист02_2.П002020003003 = П002020003003;
	Заголовок = НСтр("ru = 'Строка 030 ""Стоимость реализованных покупных товаров""';
					|en = 'Line 030 ""Cost of sold purchased goods""'");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020003003", Заголовок, "+", ОборотСДебетаСчета+ПС.Товары.Код, Товары, "Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020003003",
								"",
								"+",
								ОборотСДебетаСчета+ПС.ПокупныеТоварыОтгруженные.Код,
								ПокупныеТоварыОтгруженные,
								"Лист02_2");
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020003003",
								"",
								"+",
								ОборотСДебетаСчета+ПС.РасчетыСПокупателямиИЗаказчиками.Код,
								ПоступлениеИВыбытиеИмуществаРаботУслугПрав,
								"Лист02_2");
	
	// Строка 040 - Косвенные расходы
	КосвенныеРасходы = БухИтогиКосвЗатрат.Итог("КО");
	НалогиИСборыПрочие =  БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы, БухИтоги91);
	ПрочиеКосвенныеРасходы = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы, БухИтоги91);
	ПрочиеОперационныеДоходыРасходы = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы, БухИтоги91);
	П002020004003 = КосвенныеРасходы + ПрочиеКосвенныеРасходы + НалогиИСборыПрочие + ПрочиеОперационныеДоходыРасходы;
	
	СтраницаЛист02_2.П002020004003 = П002020004003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004003", НСтр("ru = 'Строка 040 ""Косвенные расходы""';
																		|en = 'Line 040 ""Indirect expenses""'"), "+", "", 0, "Лист02_2");
	
	ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020004003");
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПрочиеКосвенныеРасходы", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004003", "", "+", "!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
								ПрочиеКосвенныеРасходы, "Лист02_2", ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("НалогиИСборы", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020004003",
								"",
								"+",
								"!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
								НалогиИСборыПрочие,
								"Лист02_2",
								ДополнительныеПараметры);
	
	// Строка 041 - Суммы налогов и сборов, начисленные в порядке, установленном законодательством Российской
	//              Федерации о налогах и сборах, за исключением ЕСН, а также налогов, перечисленных в статье 270 НК.
	
	НалогиИСборы =  БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НалогиИСборы, БухИтогиКосвЗатрат);
	СтраницаЛист02_2.П002020004103 = НалогиИСборы + НалогиИСборыПрочие;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020004103", НСтр("ru = 'Строка 041 ""Суммы налогов и сборов""';
																		|en = 'Line 041 ""Tax and fee amounts""'"), "+", "", 0, "Лист02_2");
	ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, "П002020004103", Перечисления.ВидыРасходовНУ.НалогиИСборы);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("НалогиИСборы", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020004103",
								"",
								"+",
								"!ДО"+ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код,
								НалогиИСборыПрочие,
								"Лист02_2",
								ДополнительныеПараметры);
	
	// Строка 042 - Расходы на капитальные вложения размере не более 10%  
	П002020004203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия, БухИтогиКосвЗатрат);	
	СтраницаЛист02_2.П002020004203 = П002020004203;
	
	// Строка 050 - Стоимость имущественных прав
	ОказаниеФинансовыхУслуг      = БухИтогиНайти("ДО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ПослеНаступленияСрокаПлатежа = БухИтогиНайти("ДО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоНаступленияСрокаПлатежа    = БухИтогиНайти("ДО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтоимостьИмущественныхПравОбслПроизвдств = БухИтогиНайти("ДО", ПрочиеДоходыИРасходы.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств, БухИтоги91);
	СтоимостьВсехИмущественныхПрав = ОказаниеФинансовыхУслуг + ПослеНаступленияСрокаПлатежа + ДоНаступленияСрокаПлатежа + СтоимостьИмущественныхПравОбслПроизвдств;
	
	П002020005003 = СтоимостьВсехИмущественныхПрав - ОказаниеФинансовыхУслуг - ДоНаступленияСрокаПлатежа
				  - ПослеНаступленияСрокаПлатежа - СтоимостьИмущественныхПравОбслПроизвдств;
				  
	СтраницаЛист02_2.П002020005003 = П002020005003;
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020005003",
								НСтр("ru = 'Строка 050 ""Стоимость имущественных прав""';
									|en = 'Line 050 ""Cost of property rights""'"),
								"+",
								"!ДО"+ПС.ПрочиеРасходы.Код,
								СтоимостьВсехИмущественныхПрав,
								"Лист02_2");
								
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияКакОказанияФинансовыхУслуг",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020005003",
								"",
								"-",
								"!ДО"+ПС.ПрочиеРасходы.Код,
								-ОказаниеФинансовыхУслуг,
								"Лист02_2",
								ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияДоНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020005003",
								"",
								"-",
								"!ДО"+ПС.ПрочиеРасходы.Код,
								-ДоНаступленияСрокаПлатежа,
								"Лист02_2",
								ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияПослеНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005003", "", "-", "!ДО"+ПС.ПрочиеРасходы.Код, -ПослеНаступленияСрокаПлатежа, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 054 - Расходы на НИОКР по перечню правительства
	П002020005403 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ, БухИтогиКосвЗатрат);
	СтраницаЛист02_2.П002020005403 = П002020005403;
	
	// Строка 052 - Расходы на НИОКР 
	П002020005203 = БухИтогиНайти("КО", Перечисления.ВидыРасходовНУ.НИОКР, БухИтогиКосвЗатрат) + П002020005403;
	СтраницаЛист02_2.П002020005203 = П002020005203;
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005203", НСтр("ru = 'Строка 052 ""Расходы на НИОКР""';
																		|en = 'Line 052 ""R&D expenses""'"), "+", "", 0, "Лист02_2");
	ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005203", Перечисления.ВидыРасходовНУ.НИОКР);
	ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005203", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005403", НСтр("ru = 'Строка 052 ""Расходы на НИОКР по перечню Правительства РФ""';
																		|en = 'Line 052 ""R&D expenses according to the RF Government list""'"), "+", "", 0, "Лист02_2");
	ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, "П002020005403", Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ);
	
	// Строка 059 - Стоимость имущественных прав
	П002020005903 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	П002030008003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_2.П002020005903 = П002020005903 + П002030008003;
	
	Заголовок = НСтр("ru = 'Строка 059 ""Стоимость имущественных прав""';
					|en = 'Line 059 ""Cost of property rights""'");
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияИмущественныхПравКромеПраваТребования",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005903", Заголовок, "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002020005903, "Лист02_2", ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияКакОказанияФинансовыхУслуг",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020005903", Заголовок, "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002030008003, "Лист02_2", ДополнительныеПараметры);
	
	
	// Строка 060 - Цена приобретения реализованного прочего имущества и расходы,           
	//              связанные с его реализацией.
	ПрочееИмущество = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	ОбъектыСтроит = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, БухИтоги91);
	П002020006003 = ПрочееИмущество + ОбъектыСтроит;
	СтраницаЛист02_2.П002020006003 = П002020006003;
	
	Заголовок = НСтр("ru = 'Строка 060 ""Цена приобретения реализованного прочего имущества""';
					|en = 'Line 060 ""Purchase price for other sold fixed assets""'");
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПрочегоИмущества", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020006003", Заголовок, "+", "!ДО"+ПС.ПрочиеРасходы.Код, ПрочееИмущество, "Лист02_2", ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияОбъектовСтроительства", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020006003", "", "+", "!ДО"+ПС.ПрочиеРасходы.Код, ОбъектыСтроит, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 070 - Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением)
	//              ценных бумаг профессиональными участниками рынка ценных бумаг.
	П002020007003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	СтраницаЛист02_2.П002020007003 = П002020007003;
	
	Заголовок = НСтр("ru = 'Строка 070 ""Расходы, связанные с приобретением и реализацией (выбытием, в т.ч. погашением) 
	|ценных бумаг профессиональными участниками рынка ценных бумаг""';
	|en = 'Line 070 ""Expenses related to purchase and sales (outflow, incl redemption) of securities
	|by professional stock market players""'");
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияЦенныхБумаг", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020007003", Заголовок, "+", "!ДО"+ПС.ПрочиеРасходы.Код, П002020007003, "Лист02_2", ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счет97",       ПС.РасходыБудущихПериодов);
	Запрос.УстановитьПараметр("ВидСубконто",  ВидСубконтоРБП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРБП КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет97),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРБП";
	
	БухИтоги97 = Запрос.Выполнить().Выгрузить();
	БухИтоги97.Свернуть("Счет","КО");	
	
	// Строка 090 - Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств, включая объекты жилищно -
	// коммунальной и социально - культурной сферы, учитываемые в уменьшение прибыли текущего отчетного (налогового)
	// периода, полученной по указанным видам деятельности.
	П002020009003 = БухИтогиНайти("КО", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, БухИтоги97);
	СтраницаЛист02_2.П002020009003 = П002020009003;
	
	Заголовок = НСтр("ru = 'Строка 090 ""Суммы убытков прошлых лет по объектам обслуживающих производств и хозяйств""';
					|en = 'Line 090 ""Loss amounts of service plants and facilities for previous years""'");
	
	ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиПрошлыхЛетОбслуживающихПроизводствИХозяйств, СписокРБП, Ложь);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, ЗначениеСубконто);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020009003", Заголовок, "+", "!КО"+ ПС.РасходыБудущихПериодов.Код, П002020009003, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 100 - часть убытка от реализации амортизируемого имущества,
	//              относящаяся к расходам текущего отчетного (налогового) периода.
	П002020010003 = БухИтогиНайти("КО",Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, БухИтоги97);
	СтраницаЛист02_2.П002020010003 = П002020010003;
	
	Заголовок = НСтр("ru = 'Строка 100 ""часть убытка от реализации амортизируемого имущества, относящаяся к расходам текущего отчетного (налогового) периода""';
					|en = 'Line 100 ""partial loss from depreciable fixed asset sales related to expenses of the current accounting (fiscal) period""'");
	ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", Перечисления.ВидыРБП.УбыткиОтРеализацииАмортизируемогоИмущества, СписокРБП, Ложь);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, ЗначениеСубконто);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020010003", Заголовок, "+", "!КО"+ПС.РасходыБудущихПериодов.Код, П002020010003, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
	Запрос.УстановитьПараметр("Счета02",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияОсновныхСредств));
	Запрос.УстановитьПараметр("Счета05",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияНематериальныхАктивов));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК АмортизацияОсновныхСредств,
	|	0 КАК АмортизацияНематериальныхАктивов,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто
	|ПОМЕСТИТЬ Амортизация
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	0,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета02),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В (&Счета05),
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫРАЗИТЬ(КорСубконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.Амортизация),
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Амортизация.АмортизацияОсновныхСредств) КАК АмортизацияОсновныхСредств,
	|	СУММА(Амортизация.АмортизацияНематериальныхАктивов) КАК АмортизацияНематериальныхАктивов,
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто
	|ИЗ
	|	Амортизация КАК Амортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто";
	
	БухИтогиАмортизация = Запрос.Выполнить().Выгрузить();
	
	АмортизацияОсновныхСредств       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств");
	АмортизацияНематериальныхАктивов = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов");
	
	МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	СпособАмортизации = ?(МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный, "2","1");
	Если СпособАмортизации = "1" Тогда
		
		// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
		СтраницаЛист02_2.П002020013103 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			ДополнительныеПараметры = 
			ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П002020013103",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П002020013103",
										  "",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		
		// Строка 132 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П002020013203 = АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДополнительныеПараметры = 
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										 "П002020013203",
										 "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										 "+",
										 "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										 СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										 "Лист02_2",
										 ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЦикла;
		СтраницаЛист02_2.П002020013303 = 0;
		СтраницаЛист02_2.П002020013403 = 0;
	Иначе
		// Строка 133 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
		СтраницаЛист02_2.П002020013303 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									"П002020013303",
									НСтр("ru = 'Строка 133 ""Сумма начисленной амортизации, за отчетный (налоговый) период""';
										|en = 'Line 133 ""Accrued depreciation amount for accounting (fiscal) period""'"),
									"+",
									"!КО"+ПС.АмортизацияОсновныхСредств.Код,
									АмортизацияОсновныхСредств,
									"Лист02_2");
									
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									"П002020013303",
									"",
									"+",
									"!КО"+ПС.АмортизацияНематериальныхАктивов.Код,
									АмортизацияНематериальныхАктивов,
									"Лист02_2");
									
		// Строка 134 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П002020013403 = АмортизацияНематериальныхАктивов;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									"П002020013403",
									НСтр("ru = 'Строка 134 ""Сумма начисленной амортизации по нематериальным активам""';
										|en = 'Line 134 ""Accrued depreciation amount of intangible assets""'"),
									"+",
									"!КО"+ПС.АмортизацияНематериальныхАктивов.Код,
									АмортизацияНематериальныхАктивов,
									"Лист02_2");
	КонецЕсли;
	
	// Строка 135 - Способ амортизации
	СтраницаЛист02_2.П002020013503 = СпособАмортизации;
	
	// Строка 201 - Расходы ввиде процентов по долговым обязательствам
	П002020020103_1 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате, БухИтоги917);
	П002020020103_2 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269, БухИтоги917);
	СтраницаЛист02_2.П002020020103 = П002020020103_1 + П002020020103_2;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПроцентыКПолучениюУплате", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020020103",
								НСтр("ru = 'Строка 201 ""Расходы ввиде процентов по долговым обязательствам""';
									|en = 'Line 201 ""Expenses as debt obligation interest""'"),
								"+",
								"!КО"+Счет9102.Код,
								П002020020103_1,
								"Лист02_2",
								ДополнительныеПараметры);
								
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПроцентыНачисленныеПоСт269", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020103", "", "+", "!КО"+Счет9102.Код, П002020020103_2, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 301 - Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде.
	П002020030103 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_2.П002020030103 = П002020030103;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПрибыльУбытокПрошлыхЛет", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020030103",
								НСтр("ru = 'Строка 301 ""Убытки прошлых налоговых периодов, выявленные в текущем отчетном (налоговом) периоде""';
									|en = 'Line 301 ""Previous fiscal period losses detected in the current accounting (fiscal) period""'"),
								"+",
								"!ДО"+Счет9102.Код,
								П002020030103,
								"Лист02_2",
								ДополнительныеПараметры);
	
	// Строка 302 - Суммы безнадежных долгов, а в случае, если налогоплательщик
	//              принял решение о создании резерва по сомнительным долгам,
	//              суммы безнадежных долгов, не покрытые за счет средств резерва.
	П002020030203 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности, БухИтоги917);
	СтраницаЛист02_2.П002020030203 = П002020030203;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("СписаниеДебиторскойКредиторскойЗадолженности",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020030203",
								НСтр("ru = 'Строка 302 ""Суммы безнадежных долгов""';
									|en = 'Line 302 ""Amount of doubtful debts""'"),
								"+",
								"!ДО"+Счет9102.Код,
								П002020030203,
								"Лист02_2",
								ДополнительныеПараметры);
	
   // Строка 300 - Убытки, приравненные к внереализационным расходам всего
    ПрочиеУбытки = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам, БухИтоги917); 
	П002020030003 = ПрочиеУбытки + П002020030103 + П002020030203;
	СтраницаЛист02_2.П002020030003 = П002020030003;
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПрибыльУбытокПрошлыхЛет", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020030003",
								НСтр("ru = 'Строка 300 ""Убытки, приравненные к внереализационным расходам - всего""';
									|en = 'Line 300 ""Losses equal to non-operating expenses - total""'"),
								"+",
								"!ДО"+Счет9102.Код,
								П002020030103,
								"Лист02_2",
								ДополнительныеПараметры);
								
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("СписаниеДебиторскойКредиторскойЗадолженности",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "", "+", "!ДО"+Счет9102.Код, П002020030203, "Лист02_2", ДополнительныеПараметры);
	
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ПрочиеУбыткиПриравненныеКВнереализационнымРасходам",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020030003", "", "+", "!ДО"+Счет9102.Код, ПрочиеУбытки, "Лист02_2", ДополнительныеПараметры);
	
	// Строка 200 - Внереализационные расходы
	П002020020003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("ДО")) - П002020030103 - П002020030203 - ПрочиеУбытки;
	СтраницаЛист02_2.П002020020003 = П002020020003;
	ВставитьРасшифровкуВнереализационныхДоходовРасходов(ТаблицаРасшифровки, Запрос, "П002020020003", "ДО", СписокПрочихДоходовИРасходов);
	
	// Строка 204 - Расходы на ликвидацию ОС
	П002020020403 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_2.П002020020403 = П002020020403;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ЛиквидацияОсновныхСредств", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002020020403",
		НСтр("ru = 'Строка 204 ""Расходы на ликвидацию выводимых из эксплуатации основных средств, объектов незавершенного строительства и иного имущества""';
			|en = 'Line 204 ""Expenses for liquidation of decommissioned fixed assets, unfinished construction objects and other property""'"),
		"+",
		"!ДО"+Счет9102.Код,
		П002020020403,
		"Лист02_2",
		ДополнительныеПараметры);
	
	// Строка 205 - штрафы, пени и иные санкции за нарушение договорных или долговых обязательств.
	П002020020503_1 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате, БухИтоги917);
	П002020020503_2 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате, БухИтоги917);
	СтраницаЛист02_2.П002020020503 = П002020020503_1 + П002020020503_2;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ШтрафыПениНеустойкиКПолучениюУплате", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002020020503",
								НСтр("ru = 'Строка 205 ""штрафы, пени и иные санкции за нарушение договорных или долговых обязательств""';
									|en = 'Line 205 ""fines, penalties and other sanctions for violation of contract or debt obligations""'"),
								"+",
								"!ДО"+Счет9102.Код,
								П002020020503_1,
								"Лист02_2",
								ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("ВозмещениеУбытковКПолучениюУплате", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002020020503", "", "+", "!ДО"+Счет9102.Код, П002020020503_2, "Лист02_2", ДополнительныеПараметры);
	
	#КонецОбласти
	
	#Область Лист02_3
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 3
	
	СтраницаЛист02_3 = Контейнер.Лист02_3[0].Данные[0].Значение;
	
	// Строка 030 - выручка от реализации амортизируемого имущества
	ВыручкаОтРеализацииОС  = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);
	ВыручкаОтРеализацииНМА = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	П002030003003 = ВыручкаОтРеализацииОС + ВыручкаОтРеализацииНМА;
	СтраницаЛист02_3.П002030003003 = П002030003003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияОсновныхСредств", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002030003003",
								НСтр("ru = 'Строка 030 ""Выручка от реализации амортизируемого имущества""';
									|en = 'Line 030 ""Revenue from sales of depreciable fixed assets""'"),
								"+",
								"!КО"+Счет9101.Код,
								ВыручкаОтРеализацииОС,
								"Лист02_3",
								ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияНематериальныхАктивов", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030003003", "", "+", "!КО"+Счет9101.Код, ВыручкаОтРеализацииНМА, "Лист02_3", ДополнительныеПараметры);
	
	// Строка 040 - Остаточная стоимость реализованного амортизируемого имущества
	//              и расходы, связанные с его реализацией.
	РасходыПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтоги91);  
	РасходыПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтоги91);
	ПереносУбытковПоОС  = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств, БухИтогиПереносУбытковПоОСиНМА);  
	ПереносУбытковПоНМА = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов, БухИтогиПереносУбытковПоОСиНМА);
	П002030004003 = РасходыПоОС - ПереносУбытковПоОС + РасходыПОНМА - ПереносУбытковПоНМА;
	СтраницаЛист02_3.П002030004003 = П002030004003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияОсновныхСредств", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030004003",
		НСтр("ru = 'Строка 040 ""Остаточная стоимость реализованного амортизируемого имущества и расходы, связанные с его реализацией""';
			|en = 'Line 040 ""Residual value of sold depreciable fixed assets and expenses related to their sales""'"),
		"+",
		"!ДО"+ПС.ПрочиеРасходы.Код,
		РасходыПоОС,
		"Лист02_3",
		ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияОсновныхСредств", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "-", "!КО"+ПС.ПрочиеРасходы.Код, -ПереносУбытковПоОС, "Лист02_3", ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияНематериальныхАктивов", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "+", "!КО"+ПС.ПрочиеРасходы.Код, РасходыПОНМА, "Лист02_3", ДополнительныеПараметры);
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияНематериальныхАктивов", СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П002030004003", "", "-", "!КО"+ПС.ПрочиеРасходы.Код, -ПереносУбытковПоНМА, "Лист02_3", ДополнительныеПараметры);
	
	// Строка 050 - Прибыль от реализации амортизируемого имущества (без учета сделок, по которым получены убытки).
	ПрибыльПоАмортИмуществу = ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, ПрочиеДоходыИРасходы.РеализацияОсновныхСредств, "Прибыль")
					+ ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, ПрочиеДоходыИРасходы.РеализацияНематериальныхАктивов, "Прибыль");
	СтраницаЛист02_3.П002030005003 = ПрибыльПоАмортИмуществу;
	
	// Строка 060 - Убытки от реализации амортизируемого имущества (без учета сделок, по которым получена прибыль).
	УбыткиПоАмортИмуществу = ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, ПрочиеДоходыИРасходы.РеализацияОсновныхСредств, "Убыток")
					+ ПрибылиИУбытки(Запрос, ПС.ПрочиеДоходы, ПС.ПрочиеРасходы, ПрочиеДоходыИРасходы.РеализацияНематериальныхАктивов, "Убыток");
	СтраницаЛист02_3.П002030006003 = УбыткиПоАмортИмуществу;
	
	ДоходыОказаниеФинансовыхУслуг      = БухИтогиНайти("КО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	ДоходыПослеНаступленияСрокаПлатежа = БухИтогиНайти("КО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	ДоходыДоНаступленияСрокаПлатежа    = БухИтогиНайти("КО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	
	// Строка 100 - Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК).
	П002030010003 = ДоходыДоНаступленияСрокаПлатежа;
	СтраницаЛист02_3.П002030010003 = П002030010003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияДоНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030010003",
		НСтр("ru = 'Строка 100 ""Выручка от реализации права требования до наступления срока платежа (п.1 ст. 279 НК)""';
			|en = 'Line 100 ""Revenue from sale of the right of demand before the due day for a payment (cl.1 in art. 279 of the TC)""'"),
		"+",
		"!КО"+ПС.ПрочиеДоходы.Код,
		П002030010003,
		"Лист02_3",
		ДополнительныеПараметры);
	
	// Строка 110 - Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК).
	П002030011003 = ДоходыПослеНаступленияСрокаПлатежа;
	СтраницаЛист02_3.П002030011003 = П002030011003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияПослеНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								"П002030011003",
								НСтр("ru = 'Строка 110 ""Выручка от реализации права требования после наступления срока платежа (п.1 ст. 279 НК)""';
									|en = 'Line 110 ""Revenue from sale of the right of demand after the due day for a payment (cl.1 in art. 279 of the TC)""'"),
								"+",
								"!КО"+ПС.ПрочиеДоходы.Код,
								П002030011003,
								"Лист02_3",
								ДополнительныеПараметры);
	
	// Строка 120 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК).
	П002030012003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_3.П002030012003 = П002030012003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияДоНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030012003",
		НСтр("ru = 'Строка 120 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""';
			|en = 'Line 120 ""Cost of sold right of demand before the due day for a payment (cl.1 in art. 279 of the TC)""'"),
		"+",
		"!ДО"+ПС.ПрочиеРасходы.Код,
		П002030012003,
		"Лист02_3",
		ДополнительныеПараметры);
	
	// Строка 130 - Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК).
	П002030013003 = БухИтогиНайти("ДО", ПрочиеДоходыИРасходы.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа, БухИтоги91);
	СтраницаЛист02_3.П002030013003 = П002030013003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов("РеализацияПраваТребованияПослеНаступленияСрокаПлатежа",
																		 СписокПрочихДоходовИРасходов,
																		 Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030013003",
		НСтр("ru = 'Строка 130 ""Стоимость реализованного права требования  до наступления срока платежа (п.1 ст. 279 НК)""';
			|en = 'Line 130 ""Cost of sold right of demand before the due day for a payment (cl.1 in art. 279 of the TC)""'"),
		"+",
		"!ДО"+ПС.ПрочиеРасходы.Код,
		П002030013003,
		"Лист02_3",
		ДополнительныеПараметры);
	
	Запрос.УстановитьПараметр("Счет",         ПС.ПрочиеРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("КорСчет",      ПС.ПрочиеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК СуммаОборотДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходов)
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходов)
	|					ИНАЧЕ
	|						ЛОЖЬ
	|				КОНЕЦ,
	|			КорСчет = &КорСчет,
	|			) КАК ХозрасчетныйОбороты";
	БухИтоги170 = Запрос.Выполнить().Выгрузить();
	
	// Строка 170 - убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного
	// (налогового) периода (включается в строку 200 Приложения № 2 к Листу 02).
	П002030017003 = БухИтоги170.Итог("СуммаОборотДт");
	СтраницаЛист02_3.П002030017003 = П002030017003; 
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030017003",
		НСтр("ru = 'Строка 170 ""Убыток от реализации права требования, относящийся к внереализационным расходам текущего отчетного (налогового) периода""';
			|en = 'Line 170 ""Loss of sale of the right of demand applicable to non-operating expenses of the current accounting (fiscal) period""'"),
		"+",
		"!ОБ"+ПС.ПрочиеРасходы.Код+" "+ПС.ПрочиеРасходы.Код,
		П002030017003,
		"Лист02_3");
	
	ИмяТекущегоДохода = "РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств";
	// Строка 180 - Выручка от реализации товаров (работ, услуг), имущественных прав по			
	//              объектам обслуживающих производств и хозяйств, включая объекты жилищно-коммунальной и
	//              социально-культурной сферы.
	П002030018003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов[ИмяТекущегоДохода], БухИтоги91); 
	СтраницаЛист02_3.П002030018003 = П002030018003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов(ИмяТекущегоДохода, СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030018003",
		НСтр("ru = 'Строка 180 ""Выручка от реализации товаров (работ, услуг), имущественных прав по объектам обслуживающих производств и хозяйств""';
			|en = 'Line 180 ""Revenue from sale of goods (works, services), property rights to objects of service plants and facilities""'"),
		"+",
		"!КО"+ПС.ПрочиеРасходы.Код,
		П002030018003,
		"Лист02_3",
		ДополнительныеПараметры);
	
	// Строка 190 - Расходы, понесенные обслуживающими производствами и хозяйствами при реализации ими товаров (работ,
	// услуг), имущественных прав в текущем отчетном (налоговом) периоде.
	П002030019003 = БухИтогиНайти("ДО", Перечисления.ВидыПрочихДоходовИРасходов[ИмяТекущегоДохода], БухИтоги91); 
	СтраницаЛист02_3.П002030019003 = П002030019003;
	ДополнительныеПараметры = ДопПараметрыСубконтоПрочихДоходовИРасходов(ИмяТекущегоДохода, СписокПрочихДоходовИРасходов, Ложь);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П002030019003",
		НСтр("ru = 'Строка 190 ""Расходы, понесенные обслуживающими производствами и хозяйствами""';
			|en = 'Line 190 ""Expenses incurred by service plants and facilities""'"),
		"+",
		"!ДО"+ПС.ПрочиеРасходы.Код,
		П002030019003,
		"Лист02_3",
		ДополнительныеПараметры);
		
	#КонецОбласти
	
	#Область Лист02_4
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 4
	
	СтраницаЛист02_4 = Контейнер.Лист02_4[0].Данные[0].Значение;
	
	Если Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 3 Или Месяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета) = 12 Тогда
		Запрос.УстановитьПараметр("Счет",         ПС.РасходыБудущихПериодов);
		Запрос.УстановитьПараметр("КорСчет",      ПС.ПрибылиИУбыткиНеЕНВД);
		Запрос.УстановитьПараметр("ВидРБП",       Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
		Запрос.УстановитьПараметр("ВидСубконто",  ВидСубконтоРБП);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	0 КАК КО,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК Субконто1,
		|	0 КАК СуммаНачальныйОстатокДт,
		|	0 КАК СуммаКонечныйОстатокДт
		|ГДЕ
		|	ЛОЖЬ";
		УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
		
		П1997 = 0;
		П1998 = 0;
		П1999 = 0;
		П2000 = 0;
		П2001 = 0;
		П2002 = 0;
		П2003 = 0;
		П2004 = 0;
		П2005 = 0;
		П2006 = 0;
		П2007 = 0;
		П2008 = 0;
		П2009 = 0;
		П2010 = 0;
		П2011 = 0;
		
		О1997 = 0;
		О1998 = 0;
		О1999 = 0;
		О2000 = 0;
		О2001 = 0;
		О2002 = 0;
		О2003 = 0;
		О2004 = 0;
		О2005 = 0;
		О2006 = 0;
		О2007 = 0;
		О2008 = 0;
		О2009 = 0;
		О2010 = 0;
		О2011 = 0;
		
		Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
			
			ГодУбытка = Год(ПараметрыОтчета.мДатаНачалаПериодаОтчета) - 1;
			СуммаСписанногоУбытка   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
			СуммаНеСписанногоУбытка = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
			Если ГодУбытка = 2002 Тогда
				П2002 = СуммаСписанногоУбытка; РБП2002 = УбытокПрошлыхЛет.Субконто1;
				О2002 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2003 Тогда
				П2003 = СуммаСписанногоУбытка; РБП2003 = УбытокПрошлыхЛет.Субконто1;
				О2003 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2004 Тогда
				П2004 = СуммаСписанногоУбытка; РБП2004 = УбытокПрошлыхЛет.Субконто1;
				О2004 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2005 Тогда
				П2005 = СуммаСписанногоУбытка; РБП2005 = УбытокПрошлыхЛет.Субконто1;
				О2005 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2006 Тогда
				П2006 = СуммаСписанногоУбытка; РБП2006 = УбытокПрошлыхЛет.Субконто1;
				О2006 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2007 Тогда
				П2007 = СуммаСписанногоУбытка; РБП2007 = УбытокПрошлыхЛет.Субконто1;
				О2007 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2008 Тогда
				П2008 = СуммаСписанногоУбытка; РБП2008 = УбытокПрошлыхЛет.Субконто1;
				О2008 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2009 Тогда
				П2009 = СуммаСписанногоУбытка; РБП2009 = УбытокПрошлыхЛет.Субконто1;
				О2009 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2010 Тогда
				П2010 = СуммаСписанногоУбытка; РБП2010 = УбытокПрошлыхЛет.Субконто1;
				О2010 = СуммаНеСписанногоУбытка;
			ИначеЕсли ГодУбытка = 2011 Тогда
				П2011 = СуммаСписанногоУбытка; РБП2011 = УбытокПрошлыхЛет.Субконто1;
				О2011 = СуммаНеСписанногоУбытка;
			КонецЕсли;
		КонецЦикла;
		
		Если П2002 <> 0 Тогда
			СтраницаЛист02_4.П002040004001 = "2002";
			СтраницаЛист02_4.П002040004003 = П2002;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040004003",
				НСтр("ru = 'Сумма убытка, полученного в 2002 году';
					|en = 'Loss amount in 2002'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2002,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2002));
		КонецЕсли;
		
		Если П2003 <> 0 Тогда
			СтраницаЛист02_4.П002040005001 = "2003";
			СтраницаЛист02_4.П002040005003 = П2003;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040005003",
				НСтр("ru = 'Сумма убытка, полученного в 2003 году';
					|en = 'Loss amount in 2003'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2003,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2003));
		КонецЕсли;
		
		Если П2004 <> 0 Тогда
			СтраницаЛист02_4.П002040006001 = "2004";
			СтраницаЛист02_4.П002040006003 = П2004;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040006003",
				НСтр("ru = 'Сумма убытка, полученного в 2004 году';
					|en = 'Loss amount in 2004'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2004,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2004));
		КонецЕсли;
		
		Если П2005 <> 0 Тогда
			СтраницаЛист02_4.П002040007001 = "2005";
			СтраницаЛист02_4.П002040007003 = П2005;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040007003",
				НСтр("ru = 'Сумма убытка, полученного в 2005 году';
					|en = 'Loss amount in 2005'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2005,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2005));
		КонецЕсли;
		
		Если П2006 <> 0 Тогда
			СтраницаЛист02_4.П002040008001 = "2006";
			СтраницаЛист02_4.П002040008003 = П2006;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040008003",
				НСтр("ru = 'Сумма убытка, полученного в 2006 году';
					|en = 'Loss amount in 2006'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2006,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2006));
		КонецЕсли;
		
		Если П2007 <> 0 Тогда
			СтраницаЛист02_4.П002040009001 = "2007";
			СтраницаЛист02_4.П002040009003 = П2007;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040009003",
				НСтр("ru = 'Сумма убытка, полученного в 2007 году';
					|en = 'Loss amount in 2007'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2007,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2007));
		КонецЕсли;
		
		Если П2008 <> 0 Тогда
			СтраницаЛист02_4.П002040010001 = "2008";
			СтраницаЛист02_4.П002040010003 = П2008;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040010003",
				НСтр("ru = 'Сумма убытка, полученного в 2008 году';
					|en = 'Loss amount in 2008'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2008,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2008));
		КонецЕсли;
		
		Если П2009 <> 0 Тогда
			СтраницаЛист02_4.П002040011001 = "2009";
			СтраницаЛист02_4.П002040011003 = П2009;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040011003",
				НСтр("ru = 'Сумма убытка, полученного в 2009 году';
					|en = 'Loss amount in 2009'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2009,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2009));
		КонецЕсли;
		
		Если П2010 <> 0 Тогда
			СтраницаЛист02_4.П002040012001 = "2010";
			СтраницаЛист02_4.П002040012003 = П2010;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040012003",
				НСтр("ru = 'Сумма убытка, полученного в 2010 году';
					|en = 'Loss amount in 2010'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2010,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2010));
		КонецЕсли;
		
		Если П2011 <> 0 Тогда
			СтраницаЛист02_4.П002040013001 = "2011";
			СтраницаЛист02_4.П002040013003 = П2011;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
				"П002040013003",
				НСтр("ru = 'Сумма убытка, полученного в 2011 году';
					|en = 'Loss amount in 2011'"),
				"+",
				"!СНД"+ПС.РасходыБудущихПериодов.Код,
				П2011,
				"Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРБП, РБП2011));
		КонецЕсли;
		
		// Строка 150 - Сумма убытка или части убытка, уменьшающего   
		//              налоговую базу за отчетный  (налоговый)  период.
		СуммаПоСтроке050Листа02 = 0;
		СуммаПоСтроке140Листа02 = 0;
		СуммаПоСтроке120Листа05 = 0;
		СуммаПоСтроке120Листа06 = 0;
		СуммаПоСтроке230Листа07 = 0;
		СуммаПоСтроке110Листа08 = 0;
		СуммаПоСтроке590Листа09 = 0;
		
		П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		СтраницаЛист02_4.П002040015003 = П002040015003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
			"П002040015003",
			НСтр("ru = 'Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период';
				|en = 'Loss amount or loss part reducing the tax base for the accounting (fiscal) period'"),
			"+",
			"!КО"+ПС.РасходыБудущихПериодов.Код,
			П002040015003,
			"Лист02_4");
		
		// Строка 160 -    сумма неперенесенного убытка	
		П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
		СтраницаЛист02_4.П002040016003 = П002040016003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
			"П002040016003",
			НСтр("ru = 'неперенесенного убытка';
				|en = 'not transferred loss'"),
			"+",
			"!СКД"+ПС.РасходыБудущихПериодов.Код,
			П002040016003,
			"Лист02_4");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Лист02_5
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 5
	
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьЛист2Приложение5ДекларацииПоПрибыли(Контейнер, ПараметрыОтчета, СписокОрганизаций, Контейнер.Лист02_5);
	
	#КонецОбласти
	
	// Сохраняем таблицу расшифровок во временном хранилище в привязке к уникальному идентификатору формы.
	ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
	
КонецПроцедуры

// Заполняет декларацию по налогу на прибыль
//
// Параметры: - (см. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет).
//
Процедура ЗаполнитьОтчетПрибыльФормаОтчета2015Кв1(Контейнер, ТаблицаРасшифровки, ИДРедакцииОтчета, КонтекстРасчета) Экспорт
	
	// В основном, код этой процедуры скопирован из ЗаполнитьОтчетПрибыльФормаОтчета2013Кв4.
	// Такой код отличается номерами ячеек.
	// Кроме того, заполнение отдельных строк выполняется только в налоговых периодах до 2015 года.
	// Остальные изменения следует вносить одновременно в ЗаполнитьОтчетПрибыльФормаОтчета2015Кв1() и ЗаполнитьОтчетПрибыльФормаОтчета2013Кв4().
	
	// С декабря 2016 года (ИДРедакцииОтчета = "ФормаОтчета2016Кв4") исключена строка 107 Приложения №1 к листу 02.
	
	// Приложения 2, 3, 5 к Листу 02 заполняются в модуле НалогНаПрибыльДекларация
		
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",           КонтекстРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",           КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", КонтекстРасчета.Организации);
	
	СоздатьДолиЕНВД(
		Запрос.МенеджерВременныхТаблиц, 
		Запрос.Параметры.ДатаНач, 
		Запрос.Параметры.ДатаКон, 
		Запрос.Параметры.СписокОрганизаций);
	
	Запрос.УстановитьПараметр("СчетаПрочиеДоходыИРасходы",         	
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрочиеДоходыИРасходы));
	
	МассивНеЕНВД = Новый Массив;
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	МассивНеЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("МассивНеЕНВД",  МассивНеЕНВД);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат 
	|																		= ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат 
	|																			= ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДебетовыйОборот,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт * ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат 
	|																		= ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|					ИЛИ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат 
	|																			= ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КредитовыйОборот
	|ПОМЕСТИТЬ ТаблицаПрочиеДоходыРасходыНеЕНВД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация В (&СписокОрганизаций)
	|				И (ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)
	|					ИЛИ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивНеЕНВД)),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	Запрос.Выполнить();	
	
	// таблица итогов по всем счетам без анлитики
	Запрос.УстановитьПараметр("Счет41",  ПС.Товары);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ДО,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК КО,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|
	|ИТОГИ
	|	СУММА(ДО),
	|	СУММА(КО)
	|ПО
	|	Счет ИЕРАРХИЯ";	
	
	БухИтоги = Запрос.Выполнить().Выгрузить();
	
	// прочие доходы и расходы
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.ДебетовыйОборот) КАК ДО,
	|	СУММА(ТаблицаПрочиеДоходыРасходыНеЕНВД.КредитовыйОборот) КАК КО
	|ИЗ
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД КАК ТаблицаПрочиеДоходыРасходыНеЕНВД
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПрочиеДоходыРасходыНеЕНВД.ВидПрочихДоходовИРасходов";
	
	БухИтоги91 = Запрос.Выполнить().Выгрузить();
	
	// внереализационные доходы и расходы
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидРасходов",  ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|						И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|					ИЛИ ТИПЗНАЧЕНИЯ(ХозрасчетныйОбороты.Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|						И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = &Распределяемые
	|				ТОГДА 1 - ДолиЕНВД.ДоляЕНВД
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДО,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В (&СчетаПрочиеДоходыИРасходы),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|				КОНЕЦ В (&МассивНеЕНВД)
	|				И Субконто1.ВидПрочихДоходовИРасходов В (&ВидРасходов),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов
	|";
	
	
	БухИтоги917 = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("Счет",  ПС.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	МассивЗапасовНУ = Новый Массив;
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.ОСвОрганизации);
	МассивЗапасовНУ.Добавить(ПС.ДоходныеВложенияВ_МЦ);
	МассивЗапасовНУ.Добавить(ПС.НематериальныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияОсновныхСредств);
	МассивЗапасовНУ.Добавить(ПС.АмортизацияНематериальныхАктивов);
	МассивЗапасовНУ.Добавить(ПС.ОборудованиеКУстановке);
	МассивЗапасовНУ.Добавить(ПС.ВложенияВоВнеоборотныеАктивы);
	МассивЗапасовНУ.Добавить(ПС.Материалы);
	МассивЗапасовНУ.Добавить(ПС.Полуфабрикаты);
	МассивЗапасовНУ.Добавить(ПС.Товары);
	МассивЗапасовНУ.Добавить(ПС.ТоварыОтгруженные);
	МассивЗапасовНУ.Добавить(ПС.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("КорСчет",  МассивЗапасовНУ);
	Запрос.УстановитьПараметр("ВидРасходов", Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаЗапасовНУ
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&КорСчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|ВЫБРАТЬ
	|	ЕстьNULL(СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),0) КАК КО
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет = &Счет,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|					КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидПрочихДоходовИРасходов В (&ВидРасходов)
	|				КОНЕЦ,
	|			КорСчет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаЗапасовНУ.Счет
	|				ИЗ
	|					ВТ_СчетаЗапасовНУ),
	|			) КАК ХозрасчетныйОбороты";
	
	БухИтоги911_Излишки = Запрос.Выполнить().Выгрузить().Итог("КО");
	
	// Состав справочников "Статьи затрат" и "Прочие доходы и расходы" по видам затрат для расшифровки.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Ссылка,
	|	СтатьиЗатрат.ВидРасходов КАК ВидЗатрат
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиЗатрат
	|
	|ГДЕ
	|	НЕ СтатьиЗатрат.ВидРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВидЗатрат,
	|	Ссылка";
	
	Результат = Запрос.Выполнить();
	СписокСтатейЗатрат = Новый ТаблицаЗначений;
	СписокСтатейЗатрат.Колонки.Добавить("Счет");
	СписокСтатейЗатрат.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидЗатрат");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокСтатейЗатрат = СписокСтатейЗатрат.Добавить();
		СтрокаСписокСтатейЗатрат.Счет = ВыборкаВидовЗатрат.ВидЗатрат;
		СтрокаСписокСтатейЗатрат.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокСтатейЗатрат.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка КАК Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК ПрочиеДоходыИРасходы
	|
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочиеДоходыИРасходы.Ссылка,
	|	ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК ПрочиеДоходыИРасходы
	|ГДЕ
	|	НЕ ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыПрочихДоходовИРасходов.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВидПрочихДоходовИРасходов,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокПрочихДоходовИРасходов = Новый ТаблицаЗначений;
	СписокПрочихДоходовИРасходов.Колонки.Добавить("Счет");
	СписокПрочихДоходовИРасходов.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ВидПрочихДоходовИРасходов");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокПрочихДоходовИРасходов = СписокПрочихДоходовИРасходов.Добавить();
		СтрокаСписокПрочихДоходовИРасходов.Счет = ВыборкаВидовЗатрат.ВидПрочихДоходовИРасходов;
		СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокПрочихДоходовИРасходов.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыБудущихПериодов.Ссылка КАК Ссылка,
	|	РасходыБудущихПериодов.ВидРБП КАК Вид
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК РасходыБудущихПериодов
	|ГДЕ
	|	РасходыБудущихПериодов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка";
	Результат = Запрос.Выполнить();
	СписокРБП = Новый ТаблицаЗначений;
	СписокРБП.Колонки.Добавить("Счет");
	СписокРБП.Колонки.Добавить("СписокЗатрат");
	ВыборкаВидовЗатрат = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Вид");
	Пока ВыборкаВидовЗатрат.Следующий() Цикл
		СтрокаСписокРБП = СписокРБП.Добавить();
		СтрокаСписокРБП.Счет = ВыборкаВидовЗатрат.Вид;
		СтрокаСписокРБП.СписокЗатрат = Новый СписокЗначений;
		Выборка = ВыборкаВидовЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		Пока Выборка.Следующий() Цикл
			СтрокаСписокРБП.СписокЗатрат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;	
	
	#Область Лист02_1
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 1
	
	СтраницаЛист02_1 = Контейнер.Лист02_1[0].Данные[0].Значение;
	
	Счет9101 = ПС.ПрочиеДоходы;
	Счет9102 = ПС.ПрочиеРасходы;
	
	ВидСубконтоСтатьиЗатрат = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ВидСубконтоРБП 			= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаВыручкаНеЕНВД", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ВыручкаНеЕНВД));
		
	СчетаУчетаПродукции = Новый Массив;
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); //43
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);    //21
	СчетаУчетаПродукции.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная); //45.02
	Запрос.УстановитьПараметр("СчетаУчетаПродукции", СчетаУчетаПродукции);
	
	ИспользоватьГруппыФинансовогоУчетаНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	Запрос.УстановитьПараметр("ИспользоватьГруппыФинансовогоУчетаНоменклатуры", ИспользоватьГруппыФинансовогоУчетаНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА &ИспользоватьГруппыФинансовогоУчетаНоменклатуры
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ГруппыФинансовогоУчетаНоменклатуры)
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто2 КАК Справочник.Номенклатура)
	|	КОНЕЦ КАК ЗначениеСубконто
	|ПОМЕСТИТЬ Выручка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыручкаНеЕНВД)),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выручка.Регистратор КАК Регистратор,
	|	Выручка.Регистратор КАК ДокументРеализации
	|ПОМЕСТИТЬ ДокументыРеализации
	|ИЗ
	|	Выручка КАК Выручка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выручка.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(Выручка.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК ДокументРеализации
	|ИЗ
	|	Выручка КАК Выручка
	|ГДЕ
	|	Выручка.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыРеализации.Регистратор КАК Регистратор,
	|	ВЫБОР 
	|		КОГДА ДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ДвиженияССубконто.СубконтоКт1
	|		КОГДА ДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Номенклатура
	|			ТОГДА ДвиженияССубконто.СубконтоКт2              
	|		КОГДА ДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Номенклатура 
	|			ТОГДА ДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура
	|ПОМЕСТИТЬ РегистраторыРеализацииПродукции
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Организация В (&СписокОрганизаций)
	|				И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД))
	|				И СчетКт В (&СчетаУчетаПродукции),
	|			,
	|			) КАК ДвиженияССубконто
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыРеализации КАК ДокументыРеализации
	|	ПО
	|		ДвиженияССубконто.Регистратор = ДокументыРеализации.ДокументРеализации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(Выручка.СуммаДохода, 0)) КАК СуммаДохода,
	|	Выручка.ЗначениеСубконто КАК ЗначениеСубконто,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияПродукции.Номенклатура ЕСТЬ NULL 
	|				ИЛИ Выручка.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СобственнаяПродукция
	|ИЗ
	|	Выручка КАК Выручка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистраторыРеализацииПродукции КАК РеализацияПродукции
	|		ПО Выручка.Регистратор = РеализацияПродукции.Регистратор
	|			И Выручка.Номенклатура = РеализацияПродукции.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	Выручка.ЗначениеСубконто,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияПродукции.Номенклатура ЕСТЬ NULL 
	|				ИЛИ Выручка.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	ВыборкаДоходПродукция = Запрос.Выполнить().Выбрать();
	// Строка 011 - выручка от реализации товаров (работ, услуг) собственного производства.
	ЗаголовокРасшифровкиСтроки011 = НСтр("ru = 'Строка 011 ""Выручка от реализации товаров (работ, услуг) собственного производства""';
										|en = 'Line 011 ""Revenue from sales of own-produced goods (works, services)""'");
	П002010001103 = 0;
	// Строка 012 - выручка от реализации покупных товаров
	ЗаголовокРасшифровкиСтроки012 = НСтр("ru = 'Строка 012 - ""Выручка от реализации покупных товаров""';
										|en = 'Line 012 - ""Revenue from sales of purchased goods""'");
	П002010001203 = 0;
	
	ВидыСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные;
	ВидСубконтоРасшифровки = ?(ИспользоватьГруппыФинансовогоУчетаНоменклатуры, ВидыСубконто.НоменклатурныеГруппы, ВидыСубконто.Номенклатура);
	
	Пока ВыборкаДоходПродукция.Следующий() Цикл
				
		Если ВыборкаДоходПродукция.СобственнаяПродукция Тогда
			П002010001103 = П002010001103 + ВыборкаДоходПродукция.СуммаДохода;
		Иначе
			П002010001203 = П002010001203 + ВыборкаДоходПродукция.СуммаДохода;			
		КонецЕсли;
			
		// Заполним данные расшифровки:
		ИмяПоказателя = ?(ВыборкаДоходПродукция.СобственнаяПродукция, "П000210001103", "П000210001203");
		ЗаголовокРасшифровки = ?(ВыборкаДоходПродукция.СобственнаяПродукция, ЗаголовокРасшифровкиСтроки011, ЗаголовокРасшифровкиСтроки012);
		ЗначениеСубконто = ?(ЗначениеЗаполнено(ВыборкаДоходПродукция.ЗначениеСубконто), ВыборкаДоходПродукция.ЗначениеСубконто, "< не заполнено >");
		ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоРасшифровки, ВыборкаДоходПродукция.ЗначениеСубконто);
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, ЗаголовокРасшифровки, "+",
			"!КО"+ПС.ВыручкаНеЕНВД.Код, ВыборкаДоходПродукция.СуммаДохода, "Лист02_1", ДополнительныеПараметры);
			
	КонецЦикла;
		
	СтраницаЛист02_1.П000210001103 = П002010001103;
	СтраницаЛист02_1.П000210001203 = П002010001203;
	
	Если П002010001103 = 0 Тогда // Данные расшифровки были не заполнены по этому показателю
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210001103", ЗаголовокРасшифровкиСтроки011, "+", "!КО"+ПС.ВыручкаНеЕНВД.Код, 0, "Лист02_1");
	КонецЕсли;
	Если П002010001203 = 0 Тогда // Данные расшифровки были не заполнены по этому показателю
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210001203", ЗаголовокРасшифровкиСтроки012, "+", "!КО"+ПС.ВыручкаНеЕНВД.Код, 0, "Лист02_1");
	КонецЕсли;
	
	// Строка 013 - выручка от реализации имущественных прав, за исключением доходов от реализации права требования.
	П002010001303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования, БухИтоги91);
	П002030007003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг, БухИтоги91);
	СтраницаЛист02_1.П000210001303 = П002010001303 + П002030007003;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы, 
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210001303",
							  "Строка 013 ""Выручка от реализации от реализации имущественных прав""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010001303,
							  "Лист02_1",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат", 
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210001303",
							  "Строка 013 ""Выручка от реализации от реализации имущественных прав""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002030007003,
							  "Лист02_1",
							  ДополнительныеПараметры);

	Если УбытокОтРеализацииПраваТребованияВключаетсяЕдиновременно(КонтекстРасчета.КонецПериода) Тогда
		// Письмо ФНС от 25 июня 2015 г. N ГД-4-3/11053@
		// "Начиная с первого отчетного периода 2015 года в налоговой декларации по налогу на прибыль организаций ...
		// выручка от реализации права требования долга после наступления срока платежа
		// отражается по строке 013 Приложения 1 к Листу 02,
		// а стоимость реализованного товара (работ, услуг) - по строке 059 Приложения N 2 к Листу 02 налоговой декларации.
		// Таким образом, доходы и расходы от уступки права требования долга после наступления срока платежа
		// учитываются для целей налогообложения независимо от полученного финансового результата.".
		РеализацияПраваТребованияПослеНаступленияСрокаПлатежа = БухИтогиНайти(
			"КО",
			Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
			БухИтоги91);
			
		СтраницаЛист02_1.П000210001303 = СтраницаЛист02_1.П000210001303 + РеализацияПраваТребованияПослеНаступленияСрокаПлатежа;
		
		ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
			БухИтогиНайти("СписокЗатрат", 
				Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
				СписокПрочихДоходовИРасходов));
				
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П000210001303",
								  "Строка 013 ""Выручка от реализации от реализации имущественных прав""",
								  "+",
								  "!КО"+ПС.ПрочиеДоходы.Код,
								  РеализацияПраваТребованияПослеНаступленияСрокаПлатежа,
								  "Лист02_1",
								  ДополнительныеПараметры);
	КонецЕсли;
							  
	// Строка 014 - выручка от реализации прочего имущества
	Доходы_ПрочееИмущество = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества, БухИтоги91);
	Доходы_ОбъектыСтроит = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства, БухИтоги91);
	СтраницаЛист02_1.П000210001403 = Доходы_ПрочееИмущество + Доходы_ОбъектыСтроит;
	
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
										    БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210001403",
							  "Строка 014 ""Выручка от реализации прочего имущества""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  Доходы_ПрочееИмущество,
							  "Лист02_1",
							  ДополнительныеПараметры);
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210001403",
							  "",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  Доходы_ОбъектыСтроит,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 020 - выручка от реализации ценных бумаг профессиональных участников рынка.
	СтраницаЛист02_1.П000210002003 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг, БухИтоги91);
	
	// Строка 100 - Внереализационные доходы всего
	СтраницаЛист02_1.П000210010003 = ?(БухИтоги917.Количество() = 0, 0, БухИтоги917.Итог("КО"));
	ВставитьРасшифровкуВнереализационныхДоходовРасходов(ТаблицаРасшифровки, Запрос, "П000210010003", "КО", СписокПрочихДоходовИРасходов);
	
	// Строка 101 - В виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде.
	П002010010103 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет, БухИтоги917);
	СтраницаЛист02_1.П000210010103 = П002010010103;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
											Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет,
											СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210010103",
							  "Строка 101 ""Доходы в виде дохода прошлых лет, выявленного в отчетном (налоговом) периоде""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010010103,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 102 - доходы от ликвидации основных средств
	П002010010203 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств, БухИтоги917);
	СтраницаЛист02_1.П000210010203 = П002010010203;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210010203",
							  "Строка 102 ""Доходы от ликвидации основных средств""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код, П002010010203,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 103 - в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав (кроме указанных в
	// статье 251 НК).
	П002010010303 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав, БухИтоги917);
	СтраницаЛист02_1.П000210010303 = П002010010303;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210010303",
							  "Строка 103 ""Доходы от безвозмездного получения имущества""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код, П002010010303,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 104 - в виде излишков
	П002010010403 = БухИтоги911_Излишки;
	СтраницаЛист02_1.П000210010403 = П002010010403;
	
	// Строка 105 - в виде востановления аморт.премии
	П002010010503 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии, БухИтоги917);
	СтраницаЛист02_1.П000210010503 = П002010010503;
	ДополнительныеПараметры = 
	ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
											БухИтогиНайти("СписокЗатрат",
														  Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии,
														  СписокПрочихДоходовИРасходов));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
							  "П000210010503",
							  "Строка 103 ""сумма восстановленных расходов на капитальные вложения в соответствии с абзацем четвертым пункта 9 статьи 258 НК""",
							  "+",
							  "!КО"+ПС.ПрочиеДоходы.Код,
							  П002010010503,
							  "Лист02_1",
							  ДополнительныеПараметры);
	
	// Строка 107 - в виде сумм корректировки прибыли до рыночных цен
	// С декабря 2016 года исключена из формы декларации.
	Если ИДРедакцииОтчета = "ФормаОтчета2015Кв1" Тогда						  
							  
		П002010010703 = БухИтогиНайти("КО", Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен, БухИтоги917);
		СтраницаЛист02_1.П000210010703 = П002010010703;
		ДополнительныеПараметры = 
		ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы,
												БухИтогиНайти("СписокЗатрат",
															  Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен,
															  СписокПрочихДоходовИРасходов));
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П000210010703",
								  "Строка 107 ""сумма корректировки прибыли до рыночных цен""",
								  "+",
								  "!КО"+ПС.ПрочиеДоходы.Код,
								  П002010010703,
								  "Лист02_1",
								  ДополнительныеПараметры);
								  
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Лист02_2
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 2
	
	СтраницаЛист02_2 = Контейнер.Лист02_2[0].Данные[0].Значение;
	
	// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
	
	Запрос.УстановитьПараметр("СчетаОС",  БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияОсновныхСредств));
	Запрос.УстановитьПараметр("СчетаНМА", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.АмортизацияНематериальныхАктивов));
	
	МетодНачисленияАмортизацииНУ = УчетнаяПолитика.МетодНачисленияАмортизацииНУ(
		КонтекстРасчета.Организация,
		КонтекстРасчета.КонецПериода);
	НелинейныйМетод = МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный;
	Запрос.УстановитьПараметр("НелинейныйМетод", НелинейныйМетод);
	СпособАмортизации = ?(НелинейныйМетод, "2", "1");
	
	Группы8_10 = Новый Массив;
	Группы8_10.Добавить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	Группы8_10.Добавить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	Группы8_10.Добавить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	Запрос.УстановитьПараметр("Группы8_10",      Группы8_10);
	Запрос.УстановитьПараметр("ОтдельнаяГруппа", Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	
	ЗданияСооружения = Новый Массив;
	ЗданияСооружения.Добавить(Перечисления.ГруппыОС.Здания);
	ЗданияСооружения.Добавить(Перечисления.ГруппыОС.Сооружения);
	Запрос.УстановитьПараметр("ЗданияСооружения", ЗданияСооружения);
	
	Запрос.УстановитьПараметр("ЗатратыРаспределяемые",  Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
	Запрос.УстановитьПараметр("ЗатратыОсновнаяСистема", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	Запрос.УстановитьПараметр("ВидСубконтоСтатьиЗатрат",         ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ВидСубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяРасходов,
	|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыРаспределяемые КАК Распределяется
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиЗатрат
	|ГДЕ
	|	(СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыОсновнаяСистема
	|			ИЛИ СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыРаспределяемые)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтатьиДоходов.Ссылка,
	|	СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыРаспределяемые
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК СтатьиДоходов
	|ГДЕ
	|	(СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыОсновнаяСистема
	|			ИЛИ СтатьиДоходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЗатратыРаспределяемые)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) КАК НачалоМесяца,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК КорСубконто,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ПорядокУчетаОСБУ.АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК АмортизационнаяГруппа,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации).ГруппаОС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГруппаОС,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК АмортизацияОсновныхСредств,
	|	0 КАК АмортизацияНематериальныхАктивов
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В (&СчетаОС), , Организация В (&СписокОрганизаций), , &ВидСубконтоСтатьиЗатрат) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&ДатаКон, ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПорядокУчетаОСБУ
	|		ПО ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации) = ПорядокУчетаОСБУ.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ПорядокУчетаОСБУ.АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации).ГруппаОС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ПорядокУчетаОСБУ.АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации).ГруппаОС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
	|	0
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В (&СчетаОС), , Организация В (&СписокОрганизаций), , &ВидСубконтоПрочиеДоходыИРасходы) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&ДатаКон, ДатаИсправления = ДАТАВРЕМЯ(1,1,1)) КАК ПорядокУчетаОСБУ
	|		ПО ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации) = ПорядокУчетаОСБУ.ОсновноеСредство
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ПорядокУчетаОСБУ.АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.ОбъектыЭксплуатации).ГруппаОС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В (&СчетаНМА), , Организация В (&СписокОрганизаций), , &ВидСубконтоСтатьиЗатрат) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Месяц, Счет В (&СчетаНМА), , Организация В (&СписокОрганизаций), , &ВидСубконтоПрочиеДоходыИРасходы) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ),
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ВЫБОР
	|		КОГДА &НелинейныйМетод
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК Справочник.НематериальныеАктивы).АмортизационнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КорСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.НачалоМесяца,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто,
	|	ХозрасчетныйОбороты.АмортизационнаяГруппа,
	|	ХозрасчетныйОбороты.ГруппаОС,
	|	СтатьиРасходов.Распределяется,
	|	СУММА(ХозрасчетныйОбороты.АмортизацияОсновныхСредств) КАК АмортизацияОсновныхСредств,
	|	СУММА(ХозрасчетныйОбороты.АмортизацияНематериальныхАктивов) КАК АмортизацияНематериальныхАктивов
	|ПОМЕСТИТЬ СуммыАмортизацииНераспределенные
	|ИЗ
	|	ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРасходов КАК СтатьиРасходов
	|		ПО ХозрасчетныйОбороты.КорСубконто = СтатьиРасходов.СтатьяРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.НачалоМесяца,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто,
	|	ХозрасчетныйОбороты.АмортизационнаяГруппа,
	|	ХозрасчетныйОбороты.ГруппаОС,
	|	СтатьиРасходов.Распределяется
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.НачалоМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыАмортизацииНераспределенные.НачалоМесяца,
	|	СуммыАмортизацииНераспределенные.КорСчет,
	|	СуммыАмортизацииНераспределенные.КорСубконто,
	|	СуммыАмортизацииНераспределенные.АмортизационнаяГруппа,
	|	СуммыАмортизацииНераспределенные.ГруппаОС,
	|	ВЫБОР
	|		КОГДА СуммыАмортизацииНераспределенные.Распределяется
	|			ТОГДА СуммыАмортизацииНераспределенные.АмортизацияОсновныхСредств * (1 - ДолиЕНВД.ДоляЕНВД)
	|		ИНАЧЕ СуммыАмортизацииНераспределенные.АмортизацияОсновныхСредств
	|	КОНЕЦ КАК АмортизацияОсновныхСредств,
	|	ВЫБОР
	|		КОГДА СуммыАмортизацииНераспределенные.Распределяется
	|			ТОГДА СуммыАмортизацииНераспределенные.АмортизацияНематериальныхАктивов * (1 - ДолиЕНВД.ДоляЕНВД)
	|		ИНАЧЕ СуммыАмортизацииНераспределенные.АмортизацияНематериальныхАктивов
	|	КОНЕЦ КАК АмортизацияНематериальныхАктивов
	|ПОМЕСТИТЬ Амортизация
	|ИЗ
	|	СуммыАмортизацииНераспределенные КАК СуммыАмортизацииНераспределенные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО СуммыАмортизацииНераспределенные.НачалоМесяца = ДолиЕНВД.МесяцЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто,
	|	СУММА(Амортизация.АмортизацияОсновныхСредств) КАК АмортизацияОсновныхСредств,
	|	СУММА(Амортизация.АмортизацияНематериальныхАктивов) КАК АмортизацияНематериальныхАктивов,
	|	СУММА(ВЫБОР
	|			КОГДА Амортизация.АмортизационнаяГруппа В (&Группы8_10)
	|						И Амортизация.ГруппаОС В (&ЗданияСооружения)
	|					ИЛИ Амортизация.АмортизационнаяГруппа = &ОтдельнаяГруппа
	|				ТОГДА Амортизация.АмортизацияОсновныхСредств
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияОсновныхСредств8_10,
	|	СУММА(ВЫБОР
	|			КОГДА Амортизация.АмортизационнаяГруппа В (&Группы8_10)
	|					ИЛИ Амортизация.АмортизационнаяГруппа = &ОтдельнаяГруппа
	|				ТОГДА Амортизация.АмортизацияНематериальныхАктивов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АмортизацияНематериальныхАктивов8_10
	|ИЗ
	|	Амортизация КАК Амортизация
	|
	|СГРУППИРОВАТЬ ПО
	|	Амортизация.КорСчет,
	|	Амортизация.КорСубконто";
	
	БухИтогиАмортизация = Запрос.Выполнить().Выгрузить();
	
	АмортизацияОсновныхСредств       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств");
	АмортизацияНематериальныхАктивов = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов");
	АмортизацияОсновныхСредств8_10       = БухИтогиАмортизация.Итог("АмортизацияОсновныхСредств8_10");
	АмортизацияНематериальныхАктивов8_10 = БухИтогиАмортизация.Итог("АмортизацияНематериальныхАктивов8_10");
	
	Если СпособАмортизации = "1" Тогда
		
		// Строка 131 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
		СтраницаЛист02_2.П000220013103 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			ДополнительныеПараметры = 
			ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П000220013103",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П000220013103",
										  "",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		
		// Строка 132 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П000220013203 = АмортизацияНематериальныхАктивов;
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов <> 0 Тогда
				ДополнительныеПараметры = 
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										 "П000220013203",
										 "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										 "+",
										 "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										 СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов,
										 "Лист02_2",
										 ДополнительныеПараметры);
			КонецЕсли;
			
		КонецЦикла;
		СтраницаЛист02_2.П000220013303 = 0;
		СтраницаЛист02_2.П000220013403 = 0;
	Иначе
		СтраницаЛист02_2.П000220013103 = АмортизацияОсновныхСредств8_10 + АмортизацияНематериальныхАктивов8_10;
		СтраницаЛист02_2.П000220013203 = АмортизацияНематериальныхАктивов8_10;
		// Строка 133 - Сумма начисленной амортизации, за отчетный (налоговый) период - всего.
		СтраницаЛист02_2.П000220013303 = АмортизацияОсновныхСредств + АмортизацияНематериальныхАктивов
										-АмортизацияОсновныхСредств8_10 - АмортизацияНематериальныхАктивов8_10;
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			ДополнительныеПараметры = 
			ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств-СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П000220013303",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств-СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П000220013103",
										  "Строка 131 ""Сумма начисленной амортизации, за отчетный (налоговый) период""",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияОсновныхСредств8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П000220013303",
										  "",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов - СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2");
			КонецЕсли;
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
									      "П000220013103",
										  "",
										  "+",
										  "!ДО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
			КонецЕсли;
		КонецЦикла;
		// Строка 134 - Сумма начисленной амортизации по нематериальным активам
		СтраницаЛист02_2.П000220013403 = АмортизацияНематериальныхАктивов - АмортизацияНематериальныхАктивов8_10;
		Для Каждого СтрокаБухИтогиАмортизация Из БухИтогиАмортизация Цикл
			Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда
				ДополнительныеПараметры = 
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат,СтрокаБухИтогиАмортизация.КорСубконто);
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										  "П000220013403",
										  "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										  "+",
										  "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										  СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов- СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										  "Лист02_2",
										  ДополнительныеПараметры);
				Если СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10 <> 0 Тогда						  
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
										 "П000220013203",
										 "Строка 132 ""Сумма начисленной амортизации по нематериальным активам""",
										 "+",
										 "!КО"+СтрокаБухИтогиАмортизация.КорСчет,
										 СтрокаБухИтогиАмортизация.АмортизацияНематериальныхАктивов8_10,
										 "Лист02_2",
										 ДополнительныеПараметры);
				 КонецЕсли;
			 КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Строка 135 - Способ амортизации
	СтраницаЛист02_2.П000220013503 = СпособАмортизации;
	
	#КонецОбласти
	
	#Область Лист02_4
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 4
	
	СтраницаЛист02_4 = Контейнер.Лист02_4[0].Данные[0].Значение;
	
	Если Месяц(КонтекстРасчета.КонецПериода) = 3 Или Месяц(КонтекстРасчета.КонецПериода) = 12 Тогда
		Запрос.УстановитьПараметр("СчетаРасходыБудущихПериодов",         	
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.РасходыБудущихПериодов));
		Запрос.УстановитьПараметр("СчетаПрибылиИУбыткиНеЕНВД",         	
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПС.ПрибылиИУбыткиНеЕНВД));
		Запрос.УстановитьПараметр("ВидРБП",       Перечисления.ВидыРБП.УбыткиПрошлыхЛет);
		Запрос.УстановитьПараметр("ВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.СуммаНУОборотКт,
		|	ХозрасчетныйОбороты.Субконто1
		|ПОМЕСТИТЬ ОборотыКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП,
		|			КорСчет В (&СчетаПрибылиИУбыткиНеЕНВД),
		|			) КАК ХозрасчетныйОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ОборотыКт.СуммаНУОборотКт) КАК КО,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.УбыткиПрошлыхЛет) КАК Субконто1,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			Счет В (&СчетаРасходыБудущихПериодов),
		|			&ВидСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1.ВидРБП = &ВидРБП) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыКт КАК ОборотыКт
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ОборотыКт.Субконто1
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Субконто1";
		УбыткиПрошлыхЛет = Запрос.Выполнить().Выгрузить();
		
		ТаблицаУбытков = Новый ТаблицаЗначений;
		ТаблицаУбытков.Колонки.Добавить("ГодУбыткаПредставление", Новый ОписаниеТипов("Строка"));
		ТаблицаУбытков.Колонки.Добавить("ГодУбытка", Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("Сумма",     Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("Остаток",   Новый ОписаниеТипов("Число"));
		ТаблицаУбытков.Колонки.Добавить("РБП",       Новый ОписаниеТипов("СправочникСсылка.УбыткиПрошлыхЛет"));
		
		ПоследнийГод = Год(КонтекстРасчета.КонецПериода) - 1;
		СчетчикГодов = ПоследнийГод;
		
		Пока СчетчикГодов > ПоследнийГод - 10 Цикл
			СтрокаТаблицаУбытков = ТаблицаУбытков.Добавить();
			СтрокаТаблицаУбытков.ГодУбытка = СчетчикГодов;
			СчетчикГодов = СчетчикГодов - 1;
		КонецЦикла;
		
		Для Каждого УбытокПрошлыхЛет Из УбыткиПрошлыхЛет Цикл
			
			Если ТипЗнч(УбытокПрошлыхЛет.Субконто1) = Тип("СправочникСсылка.УбыткиПрошлыхЛет") Тогда
				ГодУбытка = Год(УбытокПрошлыхЛет.Субконто1.ДатаНачалаСписания) - 1;
			Иначе
				ГодУбытка = Год(КонтекстРасчета.НачалоПериода) - 1;
			КонецЕсли;

			СтрокаТаблицаУбытков = ТаблицаУбытков.Найти(ГодУбытка, "ГодУбытка");
			
			Если СтрокаТаблицаУбытков = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицаУбытков.ГодУбыткаПредставление = СтрЗаменить(Строка(СтрокаТаблицаУбытков.ГодУбытка)," ", "");
			СтрокаТаблицаУбытков.Сумма   = УбытокПрошлыхЛет.СуммаНачальныйОстатокДт;
			СтрокаТаблицаУбытков.Остаток = УбытокПрошлыхЛет.СуммаКонечныйОстатокДт;
			СтрокаТаблицаУбытков.РБП     = УбытокПрошлыхЛет.Субконто1;
		
		КонецЦикла;
		
		ТаблицаУбытков.Сортировать("ГодУбытка Возр");
		НомерПоказателя = 4;
		
		Для Каждого СтрокаТаблицаУбытков Из ТаблицаУбытков Цикл
            ПредставлениеПоказателя = Формат(НомерПоказателя, "ЧЦ=2; ЧВН=");
			СтраницаЛист02_4["П0002400" + ПредставлениеПоказателя + "001"] = СтрокаТаблицаУбытков.ГодУбыткаПредставление;
			СтраницаЛист02_4["П0002400" + ПредставлениеПоказателя + "003"] = СтрокаТаблицаУбытков.Сумма;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П0002400" + ПредставлениеПоказателя + "003", "Сумма убытка, полученного в " + СтрокаТаблицаУбытков.ГодУбыткаПредставление + " году",
				"+", "!СНД"+ПС.УбыткиПрошлыхЛет.Код, СтрокаТаблицаУбытков.Сумма, "Лист02_4",
				ПолучитьДополнительныеПараметрыСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов, СтрокаТаблицаУбытков.РБП));
	        НомерПоказателя = НомерПоказателя + 1;
		КонецЦикла;
		
		// Строка 150 - Сумма убытка или части убытка, уменьшающего   
		//              налоговую базу за отчетный  (налоговый)  период.
		СуммаПоСтроке050Листа02 = 0;
		СуммаПоСтроке140Листа02 = 0;
		СуммаПоСтроке120Листа05 = 0;
		СуммаПоСтроке120Листа06 = 0;
		СуммаПоСтроке230Листа07 = 0;
		СуммаПоСтроке110Листа08 = 0;
		СуммаПоСтроке590Листа09 = 0;
		
		П002040015003 =  УбыткиПрошлыхЛет.Итог("КО");
		СтраницаЛист02_4.П000240015003 = П002040015003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П000240015003",
								  "Сумма убытка или части убытка, уменьшающего налоговую базу за отчетный (налоговый) период",
								  "+",
								  "!КО"+ПС.УбыткиПрошлыхЛет.Код,
								  П002040015003,
								  "Лист02_4");
		
		// Строка 160 -    сумма неперенесенного убытка	
		П002040016003 = УбыткиПрошлыхЛет.Итог("СуммаКонечныйОстатокДт");
		СтраницаЛист02_4.П000240016003 = П002040016003;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
								  "П000240016003",
								  "неперенесенного убытка", "+", "!СКД"+ПС.УбыткиПрошлыхЛет.Код,
								  П002040016003,
								  "Лист02_4");
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры // ЗаполнитьОтчетПрибыльФормаОтчета2015Кв1

#КонецОбласти

Процедура ОтключитьПрименениеРазличныхСтавокПоНалогуНаПрибыльПРОФ() Экспорт
	
	Если НЕ Константы.ИспользоватьНесколькоОрганизаций.Получить() Тогда
		
		Если Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Получить() Тогда
			Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Установить(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Определение ведения учета в разрезе налоговых органов
// 
// Возвращаемое значение:
// 	Булево -
//
Функция УчетВРазрезеНалоговыхОрганов() Экспорт
	
	Возврат НалоговыйУчетОбособленныхПодразделений.УчетВРазрезеНалоговыхОрганов();
	
КонецФункции

// Возвращает ссылку на "Регистрацию в налоговом органе" по состоянию на некоторую ДатаАктуальности
// Параметры:
//	Организация - СправочникСсылка.Организации - организации.
//	Период - Дата - дата, на которую требуется получить сведения.
//
// Возвращаемое значение:
//	СправочникСсылка.РегистрацииВНалоговомОргане - регистрация в налоговом органе.
//
Функция РегистрацияОрганизацииВНалоговомОргане(Организация, Период) Экспорт
	
	РегистрацияВНалоговомОргане = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ОпределитьТекущуюРегистрациюОрганизацииВНалоговомОргане(
		РегистрацияВНалоговомОргане,
		Организация,
		Период);
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		РегистрацияВНалоговомОргане = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Организация,
			"РегистрацияВНалоговомОргане");
	КонецЕсли;
	
	Возврат РегистрацияВНалоговомОргане;
	
КонецФункции

#Область Антикризис

// Возвращает соответствие значений настроек по организациям.
// 
// Параметры:
// 	Организации - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации -
//
// Возвращаемое значение:
// 	Соответствие - содержит:
// 		* Ключ      - СправочникСсылка.Организации -
// 		* Значение  - Структура - содержит:
// 			** НастройкаСуществует - Булево
// 			** ДеятельностьОтнесенаКПострадавшимОтКоронавируса - Булево
// 
Функция ЗначенияНастроекПоАнтикризиснымМерамПоКоронавирусу(Организации) Экспорт
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		мОрганизации = Организации;
	ИначеЕсли ТипЗнч(Организации) = Тип("СписокЗначений") Тогда
		мОрганизации = Организации.ВыгрузитьЗначения();
	Иначе
		мОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
	КонецЕсли;
	
	СоответствияЗначений = Новый Соответствие();
	
	Для каждого Орг Из мОрганизации Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("НастройкаСуществует", Ложь);
		СтруктураДанных.Вставить("ДеятельностьОтнесенаКПострадавшимОтКоронавируса", Ложь);
		
		СоответствияЗначений.Вставить(Орг, СтруктураДанных);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация,
	|	Т.ДеятельностьОтнесенаКПострадавшимОтКоронавируса
	|ИЗ
	|	РегистрСведений.НастройкиПродленияСроковНалоговОтчетов КАК Т
	|ГДЕ
	|	Т.Организация В (&Организации)
	|";
	
	Запрос.УстановитьПараметр("Организации", мОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = СоответствияЗначений.Получить(Выборка.Организация);
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		СтруктураДанных.НастройкаСуществует = Истина;
	КонецЦикла;
	
	Возврат СоответствияЗначений;
	
КонецФункции

// Проверка даты на вхождение в период освобождения от налогов пострадавшим от коронавируса
// 
// Параметры:
// 	Период - Дата - Проверяемая дата
//
// Возвращаемое значение:
// 	Булево - Описание - Истина, если дата входит в период
//
Функция ДатаВходитВПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса(Период) Экспорт
	
	ПериодОсвобождения = ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	ВхождениеВПериод   = Период >= ПериодОсвобождения.Начало И Период <= ПериодОсвобождения.Конец;
	
	Возврат ВхождениеВПериод;
	
КонецФункции

// Определяет, что на организацию распространяется освобождение от налогов,
// установленное статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Булево
//
Функция ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПродленияСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПараметрыПродленияСроков(Организация);
	
	Возврат ПараметрыПродленияСроков.ДеятельностьОтнесенаКПострадавшимОтКоронавируса;
	
КонецФункции

// Определяет период освобождения от налогов, установленный статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
// 
// Возвращаемое значение:
//  Структура - ключи Начало,Конец - даты
//
Функция ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса() Экспорт
	
	ВторойКвартал2020 = '2020-04-01';
	
	Период = Новый Структура;
	Период.Вставить("Начало", ВторойКвартал2020);
	Период.Вставить("Конец",  КонецКвартала(ВторойКвартал2020));
	
	Возврат Период;
	
КонецФункции

// Содержит перечень налогов, по которым предусмотрено освобождение статьей 2 Федерального закона № 172-ФЗ от 08.06.2020
// 
// Возвращаемое значение:
//  Массив из Строка - идентификаторы задач из списка задач бухгалтера
//
Функция НалогиОсвобождениеПострадавшихОтКоронавируса() Экспорт
	
	Налоги = Новый Массив;
	
	Налоги.Добавить("НалогНаПрибыль");       // подп. 1
	Налоги.Добавить("Акцизы");               // подп. 2
	Налоги.Добавить("ВодныйНалог");          // подп. 3
	Налоги.Добавить("НДПИ");                 // подп. 4
	Налоги.Добавить("ЕСХН");                 // подп. 5
	Налоги.Добавить("УСН");                  // подп. 6
	Налоги.Добавить("ЕНВД");                 // подп. 7
	Налоги.Добавить("ТранспортныйНалог");    // подп. 8
	Налоги.Добавить("НалогНаИмущество");     // подп. 9
	Налоги.Добавить("ЗемельныйНалог");       // подп. 10
	// подп. 11 - налог на имущество физических лиц, который не учитывается в программе
	Налоги.Добавить("НДФЛ_Предприниматель"); // подп. 12
	Налоги.Добавить("ТорговыйСбор");         // подп. 13
	
	Возврат Налоги;
	
КонецФункции

// Возвращает текст содержания проводки по освобождению от налога
//
// Параметры:
//  Период - Дата - дата, для которой формируется текст содержания проводки
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(Период) Экспорт
	
	НомерКвартала = Месяц(КонецКвартала(Период)) / 3;
	Год = Год(Период);
	
	Возврат СтрШаблон(НСтр("ru = 'Освобождение от налога за %1 квартал %2 года';
							|en = 'Exemption from tax for %1 quarter of %2'"), НомерКвартала, Формат(Год, "ЧГ=0"));
	
КонецФункции

// Определяет, возможно ли освобождение от конкретного налога в конкретном периоде.
// Для проверки, имеет ли право организация на это освобождение, следует дополнительно применять
// ДеятельностьОтнесенаКПострадавшимОтКоронавируса
//
// Параметры:
//  КодЗадачи   - Строка - код задачи по уплате налога
//  Период      - Дата - период, для которого требуется проверить, возможно ли освобождение от налога
// 
// Возвращаемое значение:
//  Булево
//
Функция ВозможноОсвобождениеОтНалога(КодЗадачи, Период) Экспорт
	
	ПериодОсвобождения = ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	Если Период < ПериодОсвобождения.Начало Или Период > ПериодОсвобождения.Конец Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОсвобожденныеНалоги = НалоговыйУчет.НалогиОсвобождениеПострадавшихОтКоронавируса();
	Возврат (ОсвобожденныеНалоги.Найти(КодЗадачи) <> Неопределено);
	
КонецФункции

// Добавляет данные по освобождению от налога в таблицу проводок
//
// Параметры:
//   ТаблицаПроводок - ТаблицаЗначений - См. НоваяТаблицаНачисленияНалога()
//   Период          - Дата - Дата начисления налога
//   СчетРасчетов    - ПланСчетовСсылка.Хозрасчетный - счет начисления налога
//   Сумма           - Число - Сумма к уплате
//
Процедура ДополнитьПроводкамиПоОсвобождениюОтНалога(ТаблицаПроводок, Период, СчетРасчетов, Сумма) Экспорт
	
	// Если организация попадает под условия освобождения уплаты налога, тогда делаем дополнительную проводку
	
	СтрокаПроводки = ТаблицаПроводок.Добавить();
	Содержание = НалоговыйУчет.ТекстСодержанияПроводкиОсвобождениеПострадавшихОтКоронавируса(Период);
	
	СтрокаПроводки.СчетДт                 = СчетРасчетов;
	СтрокаПроводки.СчетКт                 = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	СтрокаПроводки.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	СтрокаПроводки.Сумма                  = Сумма;
	СтрокаПроводки.Содержание             = Содержание;
	
КонецПроцедуры

// Возвращает сумму налога, которая была освобождена от уплаты в бюджет
//
// Параметры:
//   Организация   - СправочникСсылка.Организации - Организация, для которой необходимо рассчитать сумму
//   НачалоПериода - Дата - начала периода, за который требуется рассчитать сумму освобожденного налога
//   КонецПериода  - Дата - конец периода, за который требуется рассчитать сумму освобожденного налога
//   СчетРасчетов  - ПланСчетовСсылка.Хозрасчетный - счет начисления налога
//
// Возвращаемое значение:
//   Число
//
Функция СуммаОсвобожденияОтНалога(Организация, НачалоПериода, КонецПериода, СчетРасчетов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаОборот), 0) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет = &СчетРасчетов, , Организация = &Организация, КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки), ) КАК ХозрасчетныйОбороты");
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("СчетРасчетов",  СчетРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Сумма;
	
КонецФункции

#КонецОбласти

#Область Проводки

Функция ЭтоПроводкаПоНачислениюНДС(Проводка) Экспорт
	
	// Рассматриваем только проводки вида Дт 91 Кт 68,
	// потому что на счете 90 есть отдельный субсчет, на котором не ведется налоговый учет.
	
	СчетДт = Проводка.СчетДт;
	СчетКт = Проводка.СчетКт;
	
	Если Не БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаНДС(СчетКт) Тогда
		// Это заведомо не начисление НДС
		Возврат Ложь;
	КонецЕсли;
	
	// Выполним проверку "вида платежа" - должно быть именно начисление налога, а не штрафов, пени...
	Для Каждого Субконто Из Проводка.СубконтоКт Цикл
		Если ТипЗнч(Субконто.Значение) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет")
			И Субконто.Значение <> Перечисления.ВидыПлатежейВГосБюджет.Налог
			И Субконто.Значение <> Перечисления.ВидыПлатежейВГосБюджет.НалогСам
			И Субконто.Значение <> Перечисления.ВидыПлатежейВГосБюджет.НалогАкт Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеРасходы(СчетДт) Тогда
		// Рассматриваем только проводки вида Дт 91 Кт 68,
		// потому что на счете 90 есть отдельный субсчет, на котором не ведется налоговый учет.
		Возврат Ложь;
	КонецЕсли;
	
	// Как правило, проводка Дт 91 Кт 68 начисляет НДС,
	// но есть исключения:
	Для Каждого Субконто Из Проводка.СубконтоДт Цикл
		Если ТипЗнч(Субконто.Значение) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")
			И (Субконто.Значение.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ Или
			  Субконто.Значение.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд)Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Это не исключение
	Возврат Истина;
	
КонецФункции

Функция ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль(СчетКт, СубконтоКт) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
	Если НЕ СвойстваСчетаКт.НалоговыйУчет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СубконтоКт.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(СчетКт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Субконто Из СубконтоКт Цикл
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСубконтоПрочиеДоходыИРасходы(Субконто.Ключ)Тогда 

			Если НЕ НалоговыйУчетПовтИсп.ВидДоходовРасходовУчитывается(Субконто.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПроводкаРасходыНеУчитываемыеДляНалогаНаПрибыль(СчетДт, СубконтоДт) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
	Если НЕ СвойстваСчетаДт.НалоговыйУчет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СубконтоДт.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Субконто Из СубконтоДт Цикл
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСубконтоПрочиеДоходыИРасходы(Субконто.Ключ) Тогда 
			
			Если Не НалоговыйУчетПовтИсп.ВидДоходовРасходовУчитывается(Субконто.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСубконтоСтатьиЗатрат(Субконто.Ключ)  Тогда 
			
			Если Не НалоговыйУчетПовтИсп.СтатьяЗатратУчитывается(Субконто.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоРасходНаАмортизацию(СубконтоНУ1, СубконтоНУ2, СубконтоНУ3) Экспорт
	
	РасходНаАмортизацию = Ложь;
	
	Если ТипЗнч(СубконтоНУ1) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		РасходНаАмортизацию = НЕ СубконтоНУ1.ЭтоГруппа
			И СубконтоНУ1.ВидРасходов = Перечисления.ВидыРасходовНУ.Амортизация;
	ИначеЕсли ТипЗнч(СубконтоНУ2) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		РасходНаАмортизацию = НЕ СубконтоНУ2.ЭтоГруппа
			И СубконтоНУ2.ВидРасходов = Перечисления.ВидыРасходовНУ.Амортизация;
	ИначеЕсли ТипЗнч(СубконтоНУ3) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		РасходНаАмортизацию = НЕ СубконтоНУ3.ЭтоГруппа
			И СубконтоНУ3.ВидРасходов = Перечисления.ВидыРасходовНУ.Амортизация;
	КонецЕсли;
		
	Возврат РасходНаАмортизацию;
	
КонецФункции

// Функция анализирует аналитику затрат по кредиту проводки.
// Если статья затрат не принимаемая к НУ, то возвращаемое значение "истина".
//
//	Параметры:
//		Проводка - запись регистра бухгалтерии.
//
//	Возвращаемое значение:
//		Булево - Истина, если одно из субконто по кредиту проводки является статьей затрат не принимаемой к НУ (см. функцию НалоговыйУчет.ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ).
//
Функция ОпределитьНеПринимаемыеДоходы(Проводка) Экспорт
	
	ТипДоходыРасходы = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиДоходов");
	
	Если Не Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка()
		И БухгалтерскийУчетПовтИсп.СчетВИерархии(Проводка.СчетКт, ПланыСчетов.Хозрасчетный.ПрочиеДоходы) Тогда
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если Не Субконто.Значение = Неопределено И ТипДоходыРасходы.СодержитТип(ТипЗнч(Субконто.Значение)) Тогда
				
				Возврат ЭтоНепринимаемаяСтатьяДоходовРасходовПоНУ(Субконто.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьВнереализационныеДоходыРасходы(Проводка) Экспорт
	
	// Проверим Кт счета
	Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(Проводка.СчетКт) Тогда
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			Если ТипЗнч(Субконто.Значение) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
				
				Если НЕ Субконто.Значение.Пустая() Тогда
					
					Возврат НалоговыйУчетПовтИсп.ЭтоСтатьяВнереалиационныхДоходов(Субконто.Значение);
					
				КонецЕсли;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				
				Если НЕ Субконто.Значение.Пустая() Тогда
					
					Возврат НалоговыйУчетПовтИсп.ЭтоСтатьяВнереалиационныхРасходов(Субконто.Значение);
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	
	// Проверим Дт счета
	Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеРасходы(Проводка.СчетДт) Тогда
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			Если ТипЗнч(Субконто.Значение) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
				
				Если НЕ Субконто.Значение.Пустая() Тогда
					
					Возврат НалоговыйУчетПовтИсп.ЭтоСтатьяВнереалиационныхДоходов(Субконто.Значение);
					
				КонецЕсли;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(Субконто.Значение) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
				
				Если НЕ Субконто.Значение.Пустая() Тогда
					
					Возврат НалоговыйУчетПовтИсп.ЭтоСтатьяВнереалиационныхРасходов(Субконто.Значение);
					
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОтносящиесяКОпределениюДолейСписанияРасходов
// В рамках регламентной операции "Расчет долей" - см. функцию ДолиСписанияРасходов

#Область РасходыПоКоторымЕстьОграничения

Функция ДолиСписанияНормируемыхРасходов(Период, Организация, ДоляСпециальныхРежимов, Протокол = Неопределено)
	
	// Речь идет о тех расходах, которые уже отражены на счетах затрат (20, 25, 44 и т.п.).
	
	Результат = Новый Соответствие;
	
	ОграниченияРасходов      = ОграниченияРасходов(Период, Организация, ДоляСпециальныхРежимов);
	ВидыНормируемыхРасходов  = ОграниченияРасходов.ВыгрузитьКолонку("ВидРасходов");
	СуммыНормируемыхРасходов = СуммыНормируемыхРасходов(Период, Организация, ВидыНормируемыхРасходов);
	
	// Применим ограничения к суммам
	Для Каждого ОписаниеРасхода Из СуммыНормируемыхРасходов Цикл
		
		Ограничение = ОграниченияРасходов.Найти(ОписаниеРасхода.ВидРасходов, "ВидРасходов");
		
		Если Ограничение = Неопределено Тогда
			// Это маловероятно, потому что для создания СуммыНормируемыхРасходов используются только те виды расходов,
			// что есть в ОграниченияРасходов.
			Продолжить;
		КонецЕсли;
		
		// Расчет похож на справку-расчет, но иногда задом наперед
		ЗатратыЗаПериод                  = Макс(0, ОписаниеРасхода.ЗаПериод);                        // гр. 2 - за год, с начала года
		Расходы                          = Мин(Ограничение.Лимит, ЗатратыЗаПериод);                  // гр. 4 - уменьшают базу налога
		
		ЗатратыКРаспределению            = ОписаниеРасхода.НаНачалоМесяца + ОписаниеРасхода.ЗаМесяц; // то же, что гр.2 - гр.5
		ВключеноВРасходыНаНачалоМесяца   = ЗатратыЗаПериод - ЗатратыКРаспределению;                  // гр. 5
		РасходыТекущегоМесяца            = Расходы - ВключеноВРасходыНаНачалоМесяца;                 // гр. 6
		Доля                             = ?(ЗатратыКРаспределению = 0, 1, РасходыТекущегоМесяца / ЗатратыКРаспределению); // гр. 7
		Результат.Вставить(Ограничение.ВидРасходов, Доля);
		
		// Заполним протокол (для справки-расчета)
		Если Протокол <> Неопределено Тогда
			
			Запись = Протокол.Добавить();
			Запись.ВидОперации    = Ограничение.ВидРасходов;
			Запись.Организация    = Организация;
			Запись.ПериодРасчета  = Период;
			
			Если ОписаниеРасхода.ВидРасходов = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности Тогда
				Запись.СуммаБазы  = Ограничение.Лимит; // Унаследованная с прошлых версий особенность справки-расчета
			Иначе
				Запись.СуммаБазы  = Ограничение.База;
			КонецЕсли;
			
			Запись.ЗатратыГод     = ЗатратыЗаПериод;       // гр. 2
			Запись.РасходыГод     = Расходы;               // гр. 4
			Запись.РасходыМесяц   = РасходыТекущегоМесяца; // гр. 6
			
			// гр. 8 - затраты сверх лимита
			Запись.РазницыГод     = ЗатратыЗаПериод - Расходы;
			
			// гр. 10 - изменение затрат сверх лимита
			Запись.РазницыМесяц   = Запись.РазницыГод - ОписаниеРасхода.НаНачалоМесяца;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОграниченияРасходов(Период, Организация, ДоляСпециальныхРежимов)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидРасходов",     Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ")); // Для уже учтенных расходов - вид расходов, для не учтенных - вид операции
	Результат.Колонки.Добавить("База",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Колонки.Добавить("Норма",           Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Лимит",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Результат.Индексы.Добавить("ВидРасходов");
	
	// Расходы могут быть ограничены:
	// - расходами на оплату труда
	//  -- либо суммой только оплаты труда
	//  -- либо суммой всех выплат в пользу сотрудников, включая страховки
	// - суммой выручки
	// - количеством застрахованных.
	
	// Большинство ограничений связано с расходами на оплату труда или выручкой от реализации.
	РасходыНаОплатуТруда = РасходыНаОплатуТруда(Период, Организация, ДоляСпециальныхРежимов);
	ВыручкаОтРеализации  = ВыручкаОтРеализации(Период, Организация);
	
	// П. 16, ст. 255 НК РФ 
	// Совокупная сумма взносов работодателей, уплачиваемых ... на накопительную часть трудовой пенсии,
	// по договорам долгосрочного страхования жизни работников, 
	// добровольного пенсионного страхования и (или) негосударственного пенсионного обеспечения работников, 
	// учитывается в целях налогообложения в размере, 
	// не превышающем 12 процентов от суммы расходов на оплату труда.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников;
	Ограничение.База           = РасходыНаОплатуТруда.ОплатаТруда;
	Ограничение.Норма          = 0.12;
	
	// П. 16, ст. 255 НК РФ
	// Добровольное личное страхование
	// Взносы по договорам добровольного личного страхования, предусматривающим оплату страховщиками медицинских расходов 
	// застрахованных работников ... включаются в состав расходов в размере, 
	// не превышающем 6 процентов от суммы расходов на оплату труда.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование;
	Ограничение.База           = РасходыНаОплатуТруда.ОплатаТруда;
	Ограничение.Норма          = 0.06;
	
	// П. 24.1, ст. 255 НК РФ
	// Расходы на возмещение затрат работников по уплате процентов по займам
	// расходы на возмещение затрат работников по уплате процентов по займам (кредитам) 
	// на приобретение и (или) строительство жилого помещения ... признаются в размере, 
	// не превышающем 3 процентов суммы расходов на оплату труда.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.РасходыНаВозмещениеЗатратРаботниковПоУплатеПроцентов;
	Ограничение.База           = РасходыНаОплатуТруда.ОплатаТруда;
	Ограничение.Норма          = 0.03;
	
	// П. 2, ст. 264 НК РФ
	// Представительские расходы ... включаются в состав прочих расходов в размере, 
	// не превышающем 4 процента от расходов налогоплательщика на оплату труда.
	// Есть разъяснение, что в сумму этих расходов входит не только оплата труда, 
	// но и другие вознаграждения сотрудникам (страхование).
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ПредставительскиеРасходы;
	Ограничение.База           = РасходыНаОплатуТруда.Вознаграждение;
	Ограничение.Норма          = 0.04;
	
	// П. 4, ст. 264 НК РФ
	// Расходы на отдельные виды рекламы признаются в размере, не превышающем 1 процента выручки от реализации.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.РасходыНаРекламуНормируемые;
	Ограничение.База           = ВыручкаОтРеализации;
	Ограничение.Норма          = 0.01;
	
	// П. 16, ст. 255 НК РФ
	// Взносы по договорам добровольного личного страхования, 
	// предусматривающим выплаты исключительно в случаях смерти и (или) причинения вреда здоровью застрахованного лица, 
	// включаются в состав расходов в размере, не превышающем 15 000 рублей в год, 
	// рассчитанном как отношение общей суммы взносов, 
	// уплачиваемых по указанным договорам, к количеству застрахованных работников.
	Ограничение = Результат.Добавить();
	Ограничение.ВидРасходов    = Перечисления.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности;
	Ограничение.База           = КоличествоЗастрахованныхОтУтратыРаботоспособности(Период, Организация);
	Ограничение.Норма          = 15000;
	
	// Рассчитаем суммы лимитов
	Для Каждого Ограничение Из Результат Цикл
		Ограничение.Лимит = ЛимитРасходов(Ограничение.База, Ограничение.Норма);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЛимитРасходов(База, Норма)
	
	Возврат Макс(0, Окр(База * Норма, 2, 1));
	
КонецФункции

Функция РасходыНаОплатуТруда(Период, Организация, ДоляСпециальныхРежимов)
	
	Результат = Новый Структура;
	Результат.Вставить("Вознаграждение", 0); // Вся сумма вознаграждений, включая оплату труда и страхование
	Результат.Вставить("ОплатаТруда",    0); // Только оплата труда
	
	НачалоОтчетногоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоОтчетногоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Сумма распределяемых расходов рассчитывается так:
	// 1. За период с начала года до начала текущего месяца уже есть информация о расходах, отнесенных к основной системе налогообложения
	//    (оборот Дт 90.08 Кт 20, 23, 25..., потому что все распределяемые расходы - косвенные).
	// 2. За текущий месяц рассчитываем сумму расходов, учитываемых для исчисления налога на прибыль,
	//    исходя из оборота по Дт 20 и коэффициента распределения.
	// Сумму не распределяемых расходов определяем по оборотам Дт счетов затрат.
	// Во всех случаях исключаем "внутренние" обороты по распределению затрат (Дт счетов затрат Кт счетов затрат).
	
	
	СчетаРезультата = Новый Массив;
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	
	ПлательщикЕНВД = УчетнаяПолитикаПереопределяемый.ПлательщикЕНВДЗаПериод(Организация, НачалоГода(Период), КонецМесяца(Период));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",  НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  НачалоМесяца(Период) - 1);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("СчетаРасходов",           ПолучитьМассивСчетовУчетаРасходов());
	Запрос.УстановитьПараметр("СчетаРезультата",         СчетаРезультата);
	Запрос.УстановитьПараметр("ДоляУчитываемыхРасходов", 1 - ДоляСпециальныхРежимов); // Применяется для распределяемых расходов
	Запрос.УстановитьПараметр("ПлательщикЕНВД",          ПлательщикЕНВД);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ОплатаТруда) КАК ВидРасходов,
	|	ИСТИНА КАК ОплатаТруда
	|ПОМЕСТИТЬ ВидыРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеЛичноеСтрахование),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеЛичноеСтрахованиеНаСлучайСмертиИлиУтратыРаботоспособности),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ДобровольноеСтрахованиеПоДоговорамДолгосрочногоСтрахованияЖизниРаботников),
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРасходов.ОплатаТруда,
	|	СтатьиРасходов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Распределяемая
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыРасходов КАК ВидыРасходов
	|		ПО СтатьиРасходов.ВидРасходов = ВидыРасходов.ВидРасходов
	|
	|ГДЕ
	|	(&ПлательщикЕНВД 
	|			И СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения))
	|		ИЛИ НЕ &ПлательщикЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вознаграждение.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Вознаграждение.СуммаПринимаемые + Вознаграждение.СуммаРаспределяемые * &ДоляУчитываемыхРасходов) КАК Сумма
	|ПОМЕСТИТЬ Вознаграждение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтатьяРасходов КАК СтатьяРасходов,
	|		СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход КАК СуммаПринимаемые,
	|		0 КАК СуммаРаспределяемые
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецОтчетногоПериода,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И СтатьяРасходов В
	|						(ВЫБРАТЬ
	|							СтатьиРасходов.Ссылка
	|						ИЗ
	|							СтатьиРасходов
	|						ГДЕ
	|							НЕ СтатьиРасходов.Распределяемая)) КАК ОблагаетсяНалогомНаПрибыль
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатьяРасходов КАК СтатьяРасходов,
	|		0 КАК СуммаПринимаемые,
	|		СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход КАК СуммаРаспределяемые
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И СтатьяРасходов В
	|						(ВЫБРАТЬ
	|							СтатьиРасходов.Ссылка
	|						ИЗ
	|							СтатьиРасходов
	|						ГДЕ
	|							СтатьиРасходов.Распределяемая)) КАК РаспределяемыеТекущийМесяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|		СтоимостьРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход КАК СуммаПринимаемые,
	|		0 КАК СуммаРаспределяемые
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецОтчетногоПериода,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|				И ВидФондаВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыФондовВзносов.ПустаяСсылка)) КАК ОблагаетсяНалогомНаПрибыль
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Субконто1 КАК СтатьяРасходов,
	|		СуммаНУОборотКт КАК СуммаПринимаемые,
	|		0 КАК СуммаРаспределяемые
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецПредыдущегоМесяца,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						СчетаРасходов.Счет
	|					ИЗ
	|						СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиРасходов.Ссылка
	|						ИЗ
	|							СтатьиРасходов
	|						ГДЕ
	|							СтатьиРасходов.Распределяемая),
	|				КорСчет В (&СчетаРезультата),
	|				) КАК РаспределенныеПредыдущиеМесяцы
	|) КАК Вознаграждение
	|
	|СГРУППИРОВАТЬ ПО
	|	Вознаграждение.СтатьяРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Вознаграждение.Сумма), 0) КАК Вознаграждение,
	|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА ЕСТЬNULL(СтатьиРасходов.ОплатаТруда, ИСТИНА) ТОГДА
	|		Вознаграждение.Сумма
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ), 0) КАК ОплатаТруда
	|ИЗ
	|	Вознаграждение КАК Вознаграждение
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходов КАК СтатьиРасходов
	|		ПО Вознаграждение.СтатьяРасходов = СтатьиРасходов.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(); // В выборке всегда 1 запись
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоЗастрахованныхОтУтратыРаботоспособности(Период, Организация)
	
	Возврат 0;
	
КонецФункции

Функция СуммыНормируемыхРасходов(Период, Организация, ВидыНормируемыхРасходов, ТекущийМесяцПоДаннымОперКонтура = Истина)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидРасходов",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	Результат.Колонки.Добавить("ЗаПериод",       БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("ЗаМесяц",        БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("НаНачалоМесяца", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	НачалоОтчетногоПериода = НачалоНалоговогоПериода(Период, Организация);
	Если НачалоОтчетногоПериода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// По статьям расходов, у которых указаны нормируемые виды расходов, не следует отражать расходы по деятельности,
	// для обложения налогами которой применяются специальные налоговые режимы.
	
	// Формируем запрос по виду затрат
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",  НачалоОтчетногоПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца",  НачалоМесяца(Период) - 1);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",   КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",             Организация);
	Запрос.УстановитьПараметр("ВидыНормируемыхРасходов", ВидыНормируемыхРасходов);
	Запрос.УстановитьПараметр("ТекущийМесяцПоДаннымОперКонтура", ТекущийМесяцПоДаннымОперКонтура);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка,
	|	СтатьиРасходов.ВидРасходов КАК ВидРасходов
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВидРасходов В(&ВидыНормируемыхРасходов)
	|	И НЕ СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Расходы.НаНачалоМесяца) КАК НаНачалоМесяца,
	|	СУММА(Расходы.ЗаПериод) КАК ЗаПериод,
	|	СУММА(Расходы.ЗаМесяц) КАК ЗаМесяц
	|ПОМЕСТИТЬ Расходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		// Для режима совместимости со старой методикой списания
	|		СтатьяРасходов КАК СтатьяРасходов,
	|		СуммаРеглОборот - ПостояннаяРазницаОборот - ВременнаяРазницаОборот КАК НаНачалоМесяца,
	|		СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход ЗаПериод,
	|		0 КАК ЗаМесяц
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецПредыдущегоМесяца,
	|				,
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						СтатьиРасходов.Ссылка
	|					ИЗ
	|						СтатьиРасходов)
	|		) КАК ПредыдущиеМесяцы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		// При переходе на новый режим списания, часть расходов уходит на счет НРМ
	|		// Необходимо учесть обороты за период
	|		ПредыдущиеМесяцы.Субконто1 КАК СтатьяРасходов,
	|		ПредыдущиеМесяцы.СуммаНУОборот КАК НаНачалоМесяца,
	|		0 КАК ЗаПериод,
	|		0 КАК ЗаМесяц
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоОтчетногоПериода,
	|				&КонецПредыдущегоМесяца,
	|				,
	|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НормируемыеРасходы),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|		) КАК ПредыдущиеМесяцы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущийМесяц.СтатьяРасходов,
	|		0,
	|		СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход,
	|		СуммаРеглПриход - ПостояннаяРазницаПриход - ВременнаяРазницаПриход
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Обороты(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				,
	|				&ТекущийМесяцПоДаннымОперКонтура
	|				И Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|				И СтатьяРасходов В
	|					(ВЫБРАТЬ
	|						СтатьиРасходов.Ссылка
	|					ИЗ
	|						СтатьиРасходов)
	|		) КАК ТекущийМесяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		// Опционально можно получить результаты расчетов по хозрасчетному
	|		// Данные за текущий месяц появляются после регламентной операции списания нормируемых расходов
	|		ТекущийМесяц.СубконтоДт1,
	|		0,
	|		ТекущийМесяц.СуммаНУОборотДт,
	|		ТекущийМесяц.СуммаНУОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&НачалоМесяца,
	|				&КонецОтчетногоПериода,
	|				,
	|				СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НормируемыеРасходы),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				,
	|				,
	|				НЕ &ТекущийМесяцПоДаннымОперКонтура
	|				И Организация В
	|						(ВЫБРАТЬ
	|							Организации.Организация
	|						ИЗ
	|							Организации)
	|		) КАК ТекущийМесяц
	|	
	|	) КАК Расходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.СтатьяРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.ВидРасходов КАК ВидРасходов,
	|	СУММА(Расходы.НаНачалоМесяца) КАК НаНачалоМесяца,
	|	СУММА(Расходы.ЗаПериод) КАК ЗаПериод,
	|	СУММА(Расходы.ЗаМесяц) КАК ЗаМесяц
	|ИЗ
	|	Расходы КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатьиРасходов КАК СтатьиРасходов
	|		ПО Расходы.СтатьяРасходов = СтатьиРасходов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатьиРасходов.ВидРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МаксимальнаяДоляУменьшенияПрибылиЗаСчетУбытковПрошлыхЛет(Период, ИгнорироватьОграничениеНаПереносУбытков = Ложь) Экспорт
	
	// Ст. 283 НК РФ в редакции от 31.07.2023 N 389-ФЗ
	// В отчетные (налоговые) периоды с 1 января 2017 года по 31 декабря 2026 года
	// налоговая база по налогу за текущий отчетный (налоговый) период... 
	// не может быть уменьшена на сумму убытков, полученных в предыдущих налоговых периодах,
	// более чем на 50 процентов.
	Если Не ИгнорироватьОграничениеНаПереносУбытков И ПрименяетсяОграничениеНаПереносУбытковПрошлыхЛетПоДолеПрибыли(Период) Тогда
		Возврат 0.5;
	КонецЕсли;	
	
	Возврат 1;
	
КонецФункции

// Определяет, попадает ли указанный период в интервал,
// на который установлено ограничение на перенос убытков прошлых лет в 50% прибыли текущего налогового периода (п. 2.1 ст. 283 НК РФ)
//
// Параметры
//  Период - Дата - период, который проверяется на вхождение в интервал, на который установлено ограничение.
//
// Возвращаемое значение:
//   Булево - Истина - в указанном периоде применяется ограничение на перенос убытков прошлых лет.
//
Функция ПрименяетсяОграничениеНаПереносУбытковПрошлыхЛетПоДолеПрибыли(Период) Экспорт 
	
	Возврат (НачалоГода(Период) >= '2017-01-01' 
		И НачалоГода(Период) <= '2026-01-01');
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыИФункцииОтносящиесяКЗаполнениюРегламентированныхОтчетов

#Область ЗаполнениеДекларацииПоПрибыли

Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого,
										Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
										
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок,
																				ИмяПоказателя,
																				НаименованиеПоказателя,
																				ЗнакОперации,
																				НаименованиеСлагаемого,
																				Сумма,
																				ИмяРаздела,
																				ДополнительныеПараметры);
																				
КонецПроцедуры

Функция ПолучитьМассивВнереализационныхРасходов()
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыПоГосударственнымЦеннымБумагамПоСтавке0);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам);
	Массив.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	
	Возврат Массив;
	
КонецФункции

Функция БухИтогиНайти(ИмяЗначения, КлючСтроки, ТаблицаПоиска, ПолучениеИтогов = Истина)
	
	КлючКолонки = "Счет";
	
	Если ТипЗнч(КлючСтроки) = Тип("Массив") Тогда
		
		// Если в качестве возвращаемого значения необходимы итоги, то возвращаем число, иначе - массив найденных значений.
		НайденноеЗначение = ?(ПолучениеИтогов, 0, Новый Массив);
		
		Если КлючСтроки.Количество() > 0 Тогда
			
			КлючСтрокиДляПоиска = Новый Массив;
			Для Каждого ЗначениеКлюча Из КлючСтроки Цикл
				КлючСтрокиДляПоиска.Добавить(ЗначениеКлюча);
			КонецЦикла;
			
			Для Каждого СтрТЗ Из ТаблицаПоиска Цикл
				
				ИндексКлюча = КлючСтрокиДляПоиска.Найти(СтрТЗ[КлючКолонки]);
				
				Если Не ИндексКлюча = Неопределено Тогда
					
					Если ПолучениеИтогов Тогда
						
						// Суммируем полученное значение в итогах к возврату
						ЗначениеВСтроке = СтрТЗ[ИмяЗначения];
						ЗначениеВСтрокеЯвляетсяЧислом = (ТипЗнч(ЗначениеВСтроке) = Тип("Число"));
						НайденноеЗначение = НайденноеЗначение + ?(Не ЗначениеВСтрокеЯвляетсяЧислом, 0, ЗначениеВСтроке);
						
					Иначе
						
						// Добавляем значение в массив, если оно было найдено
						ЗначениеВСтроке = СтрТЗ[ИмяЗначения];
						Если Не ЗначениеВСтроке = Неопределено И Не ЗначениеВСтроке = NULL Тогда
							НайденноеЗначение.Добавить(ЗначениеВСтроке);
						КонецЕсли;
						
					КонецЕсли;
					
					// Считаем, что ключи строк уникальны в таблице поиска
					КлючСтрокиДляПоиска.Удалить(ИндексКлюча);
					Если КлючСтрокиДляПоиска.Количество() = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Ищем строку по ключу строки и колонки
		НайденнаяСтрока   = ТаблицаПоиска.Найти(КлючСтроки, КлючКолонки);
		НайденноеЗначение = ?(НайденнаяСтрока = Неопределено, Неопределено, НайденнаяСтрока[ИмяЗначения]);
		
	КонецЕсли;
	
	// Возвращаем найденное значение
	Если НайденноеЗначение = Неопределено
		ИЛИ НайденноеЗначение = NULL
		ИЛИ (ТипЗнч(НайденноеЗначение) = Тип("Массив") И НайденноеЗначение.Количество() = 0) Тогда
		Возврат ?(ПолучениеИтогов, 0, ""); // Если значений не найдено, то для итогов возвращаем 0, для остального поиска возвращаем пустую строку
		
	Иначе
		Возврат НайденноеЗначение;
		
	КонецЕсли;
	
КонецФункции

Функция МассивСписковВОбщийСписок(МассивСписков)
	
	ОбщийСписок = Новый СписокЗначений;
	
	Для Каждого ЧастныйСписок Из МассивСписков Цикл
		Для Каждого ЭлементСписка Из ЧастныйСписок Цикл
			ОбщийСписок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление, ЭлементСписка.Пометка, ЭлементСписка.Картинка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбщийСписок;
	
КонецФункции

Функция ПолучитьДополнительныеПараметрыСубконто(ВидСубконто1 = Неопределено, Субконто1 = Неопределено,
												ВидСубконто2 = Неопределено, Субконто2 = Неопределено,
												ВидСубконто3 = Неопределено, Субконто3 = Неопределено)
	
	Если ТипЗнч(Субконто1) = Тип("Массив") Тогда
		Субконто1 = МассивСписковВОбщийСписок(Субконто1);
	КонецЕсли;
	Если ТипЗнч(Субконто2) = Тип("Массив") Тогда
		Субконто2 = МассивСписковВОбщийСписок(Субконто2);
	КонецЕсли;
	Если ТипЗнч(Субконто3) = Тип("Массив") Тогда
		Субконто3 = МассивСписковВОбщийСписок(Субконто3);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ВидСубконто1 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто1", Новый Структура("ВидСубконто, ЗначениеСубконто", ВидСубконто1, Субконто1));
	КонецЕсли;
	
	Если ВидСубконто2 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто2", Новый Структура("ВидСубконто, ЗначениеСубконто", ВидСубконто2, Субконто2));
	КонецЕсли;
	
	Если ВидСубконто3 <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("Субконто3", Новый Структура("ВидСубконто, ЗначениеСубконто", ВидСубконто3, Субконто3));
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ВставитьРасшифровкуКосвенныхРасходов(ТаблицаРасшифровки, Запрос, СписокСтатейЗатрат, ИмяПоказателя, ВидРасходовНУ = Неопределено)
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	СчетаКосвенныхЗатрат = Новый Массив;
	
	СчетаКосвенныхЗатрат.Добавить(ПС.ОсновноеПроизводство);
	СчетаКосвенныхЗатрат.Добавить(ПС.ВспомогательныеПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбщепроизводственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбщехозяйственныеРасходы);
	СчетаКосвенныхЗатрат.Добавить(ПС.ОбслуживающиеПроизводства);
	СчетаКосвенныхЗатрат.Добавить(ПС.БракВПроизводстве);
	СчетаКосвенныхЗатрат.Добавить(ПС.РасходыНаПродажу);
	
	КорСчета = Новый Массив;
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	
	Запрос.УстановитьПараметр("Счет", 				 СчетаКосвенныхЗатрат);
	Запрос.УстановитьПараметр("КорСчет", 			 КорСчета);
	Запрос.УстановитьПараметр("ВидСубконто", 		 ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Запрос.УстановитьПараметр("ТранспортныеРасходы", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК КО,
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Счет.Код КАК СчетКод,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСчет.Код КАК КорСчетКод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет), &ВидСубконто, Организация В (&СписокОрганизаций), КорСчет В ИЕРАРХИИ (&КорСчет), ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов <> &ТранспортныеРасходы
	|	//ОтборПоВидуРасходов И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидРасходов = &ВидРасходовНУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.Счет.Код,
	|	ХозрасчетныйОбороты.КорСчет.Код";
	
	Если Не ВидРасходовНУ = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоВидуРасходов ", "");
		Запрос.УстановитьПараметр("ВидРасходовНУ", ВидРасходовНУ);
		
	КонецЕсли;
	
	ВыборкаКосвЗатрат = Запрос.Выполнить().Выгрузить();
	
	ВидСубконтоПрочиеДоходыРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Для Каждого Выборка Из ВыборкаКосвЗатрат Цикл
		
		Если ВидРасходовНУ = Неопределено Тогда
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "", "+", "!ОБ" + Выборка.СчетКод + " " + Выборка.КорСчетКод,
										Выборка.КО, "Лист02_Прил2");
		Иначе
			ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", ВидРасходовНУ, СписокСтатейЗатрат, Ложь);
			ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоПрочиеДоходыРасходы, ЗначениеСубконто);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяПоказателя, "", "+", "!ОБ" + Выборка.СчетКод + " " + Выборка.КорСчетКод,
										Выборка.КО, "Лист02_Прил2", ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВставитьРасшифровкуВнереализационныхДоходовРасходов(ТаблицаРасшифровки, Запрос, ИмяПоказателя, ВидСуммы, СписокПрочихДоходовИРасходов)
	
	ПС = ПланыСчетов.Хозрасчетный;
	
	Запрос.УстановитьПараметр("Счет",               ПС.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидСубконто",        ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидДоходовРасходов", ПолучитьМассивВнереализационныхРасходов());
	Запрос.УстановитьПараметр("Распределяемые",     Перечисления.ВариантыРаздельногоУчетаНДС.Распределение);
	Запрос.УстановитьПараметр("ЕНВД",               Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотДт * ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(Субконто1) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВариантРаздельногоУчетаНДС = &Распределяемые
	|				ТОГДА 1 - ЕСТЬNULL(ДолиЕНВД.ДоляЕНВД, 0)
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Сумма,
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов КАК ВидДоходаРасхода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Счет В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И ВЫБОР
	|					КОГДА Субконто1 Ссылка ПланВидовХарактеристик.СтатьиРасходов
	|						//ДО И НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходовИсключаемые)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходов)
	|							И НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиРасходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					КОГДА Субконто1 Ссылка ПланВидовХарактеристик.СтатьиДоходов
	|						//ДО И НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходовИсключаемые)
	|						ТОГДА ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидПрочихДоходовИРасходов В (&ВидДоходовРасходов)
	|							И НЕ ВЫРАЗИТЬ(Субконто1 КАК ПланВидовХарактеристик.СтатьиДоходов).ВидДеятельностиДляНалоговогоУчетаЗатрат = &ЕНВД
	|					ИНАЧЕ
	|						ЛОЖЬ
	|				КОНЕЦ
	|			,
	|			) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДолиЕНВД КАК ДолиЕНВД
	|		ПО (НАЧАЛОПЕРИОДА(ХозрасчетныйОбороты.Период, МЕСЯЦ) = ДолиЕНВД.МесяцЕНВД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1.ВидПрочихДоходовИРасходов";
	
	Если ВидСуммы = "КО" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаНУОборотДт", "СуммаНУОборотКт");
		Счет = ПС.ПрочиеДОходы.Код;
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДО ", "");
		МассивКИсключению = Новый Массив;
		МассивКИсключению.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
		МассивКИсключению.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
		МассивКИсключению.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам);
		Запрос.УстановитьПараметр("ВидДоходовРасходовИсключаемые", МассивКИсключению);
		Счет = ПС.ПрочиеРасходы.Код;
	КонецЕсли;
	
	ВидСубконтоПрочиеДоходыРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		
		ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(
			ВидСубконтоПрочиеДоходыРасходы,
			БухИтогиНайти("СписокЗатрат", Выборка.ВидДоходаРасхода, СписокПрочихДоходовИРасходов, Ложь));
		
		Заголовок  = ?(ВидСуммы = "КО",
						НСтр("ru = 'Строка 100 ""Внереализационные доходы - всего""';
							|en = 'Line 100 ""Non-operating income - total""'"),
						НСтр("ru = 'Строка 200 ""Внереализационные расходы - всего""';
							|en = 'Line 200 ""Non-operating expenses - total""'"));
						
		Приложение = ?(ВидСуммы = "КО", "Лист02_Прил1", "Лист02_Прил2");
		
		ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки,
			ИмяПоказателя,
			Заголовок,
			"+",
			"!" + ВидСуммы + Счет,
			Выборка.Сумма,
			Приложение,
			ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДолиЕНВД(МенеджерВременныхТаблиц, НачалоПериода, КонецПериода, Организации) Экспорт
	
	Месяцы = Новый ТаблицаЗначений;
	Месяцы.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	Пока ТекущийМесяц <= КонецПериода Цикл
		Месяцы.Добавить().Месяц = ТекущийМесяц;
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организации",   Организации);
	Запрос.УстановитьПараметр("Месяцы",        Месяцы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Месяцы.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТ_Месяцы
	|ИЗ
	|	&Месяцы КАК Месяцы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДолиЕНВД.ДоляЕНВД) КАК Доля,
	|	НАЧАЛОПЕРИОДА(ДолиЕНВД.ПериодРасчета, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТ_ДолиСписанияКосвенныхРасходов
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|	ПО ДолиЕНВД.Регистратор = РегламентнаяОперация.Ссылка
	|		И РегламентнаяОперация.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыРегламентныхОпераций.СписаниеКосвенныхРасходов)
	|ГДЕ
	|	ДолиЕНВД.Организация В(&Организации)
	|	И ДолиЕНВД.Активность
	|	И ДолиЕНВД.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДолиЕНВД.ПериодРасчета, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолиЕНВД.Доля КАК ДоляЕНВД,
	|	ДолиЕНВД.Месяц КАК МесяцЕНВД
	|ПОМЕСТИТЬ ДолиЕНВД
	|ИЗ
	|	ВТ_ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	Месяцы.Месяц
	|ИЗ
	|	ВТ_Месяцы КАК Месяцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДолиСписанияКосвенныхРасходов КАК ДолиЕНВД
	|		ПО Месяцы.Месяц = ДолиЕНВД.Месяц
	|ГДЕ
	|	ДолиЕНВД.Месяц ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцЕНВД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Месяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДолиСписанияКосвенныхРасходов";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ДопПараметрыСубконтоПрочихДоходовИРасходов(ИмяЗначенияПеречисления, ТаблицаДляПоиска, СИтогами = Истина)
	
	ВидСубконтоПрочиеДоходыИРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	ПараметрПоиска = Перечисления.ВидыПрочихДоходовИРасходов[ИмяЗначенияПеречисления];
	ЗначениеСубконто = БухИтогиНайти("СписокЗатрат", ПараметрПоиска, ТаблицаДляПоиска, СИтогами);
	ДополнительныеПараметры = ПолучитьДополнительныеПараметрыСубконто(ВидСубконтоПрочиеДоходыИРасходы, ЗначениеСубконто);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти
