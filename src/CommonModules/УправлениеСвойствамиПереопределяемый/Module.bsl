///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений:
//     * Имя           - Строка - имя набора свойств. Формируется из полного имени объекта
//          метаданных заменой символа "." на "_".
//          Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - уникальный идентификатор предопределенного набора свойств.
//          Не должен повторяться в других наборах свойств.
//          Формат идентификатора Random UUID (Version 4).
//          Чтобы получить идентификатор, нужно в режиме 1С:Предприятие вычислить значение
//          конструктора платформы "Новый УникальныйИдентификатор" или воспользоваться online-генератором,
//          например, https://www.uuidgenerator.net/version4.
//     * Используется  - Неопределено
//                     - Булево - признак того, что набор свойств используется.
//          Например, можно использовать для скрытия набора по функциональным опциям.
//          Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	//++ НЕ ГОСИС
	УправлениеСвойствамиУТ.ПриПолученииПредопределенныхНаборовСвойств(Наборы);

	//++ Локализация

	//++ НЕ УТ
	ЗарплатаКадры.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	//-- НЕ УТ
	
	
	//-- Локализация

	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Справочник_ОбъектыРасчетов";
	Набор.Идентификатор = Новый УникальныйИдентификатор("ae562360-2ddb-41d4-affa-1d1bcab44b64");
	//-- НЕ ГОСИС

КонецПроцедуры

// Получает наименования наборов свойств второго уровня на разных языках.
//
// Параметры:
//  Наименования - Соответствие из КлючИЗначение - представление набора на переданном языке:
//     * Ключ     - Строка - имя набора свойств. Например, "Справочник_Партнеры_Общие".
//     * Значение - Строка - наименование набора для переданного кода языка.
//  КодЯзыка - Строка - код языка. Например, "en".
//
// Пример:
//  Наименования["Справочник_Партнеры_Общие"] = НСтр("ru='Общие'; en='General';", КодЯзыка);
//
Процедура ПриПолученииНаименованийНаборовСвойств(Наименования, КодЯзыка) Экспорт
	
	//++ НЕ УТКА
	Наименования["Документ_ПроизводственнаяОперация2_2_Общие"]    = НСтр("ru = 'Общие';
																		|en = 'Common'", КодЯзыка);
	Наименования["Справочник_УзлыОбъектовЭксплуатации_Общие"] = НСтр("ru = 'Общие';
																	|en = 'Common'", КодЯзыка);
	//-- НЕ УТКА
	Наименования["Справочник_Номенклатура_Общие"] = НСтр("ru = 'Общие';
														|en = 'Common'", КодЯзыка);
	//++ НЕ УТ
	Наименования["Справочник_ОбъектыЭксплуатации_Общие"] = НСтр("ru = 'Общие';
																|en = 'Common'", КодЯзыка);
	//-- НЕ УТ
	Наименования["Справочник_Партнеры_Клиенты"] = НСтр("ru = 'Клиенты';
														|en = 'Customers'", КодЯзыка);
	Наименования["Справочник_Партнеры_Общие"] = НСтр("ru = 'Общие';
													|en = 'Common'", КодЯзыка);
	Наименования["Справочник_Партнеры_Поставщики"] = НСтр("ru = 'Поставщики';
															|en = 'Vendors'", КодЯзыка);
	Наименования["Справочник_Партнеры_Конкуренты"] = НСтр("ru = 'Конкуренты';
															|en = 'Competitors'", КодЯзыка);
	Наименования["Справочник_Партнеры_Прочие"] = НСтр("ru = 'Прочие';
														|en = 'Other'", КодЯзыка);
	Наименования["Справочник_СерииНоменклатуры_Общие"] = НСтр("ru = 'Общие';
																|en = 'Common'", КодЯзыка);
	Наименования["Справочник_ХарактеристикиНоменклатуры_Общие"] = НСтр("ru = 'Общие';
																		|en = 'Common'", КодЯзыка);
	Наименования["Справочник_Инциденты_Общие"] = НСтр("ru = 'Общие';
														|en = 'Common'", КодЯзыка);
КонецПроцедуры

// Заполняет наборы свойств объекта. Обычно требуется, если наборов более одного.
//
// Параметры:
//  Объект       - ЛюбаяСсылка      - ссылка на объект со свойствами.
//               - ФормаКлиентскогоПриложения - форма объекта, к которому подключены свойства.
//               - ДанныеФормыСтруктура - описание объекта, к которому подключены свойства.
//
//  ТипСсылки    - Тип - тип ссылки владельца свойств.
//
//  НаборыСвойств - ТаблицаЗначений:
//     * Набор - СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
//     * ОбщийНабор - Булево - Истина, если набор свойств содержит свойства,
//                             общие для всех объектов.
//    // Далее свойства элемента формы типа ГруппаФормы вида обычная группа
//    // или страница, которая создается, если наборов больше одного без учета
//    // пустого набора, который описывает свойства группы удаленных реквизитов.
//
//    // Если значение Неопределено, значит, использовать значение по умолчанию.
//
//    // Для любой группы управляемой формы.
//     * Высота                   - Число
//     * Заголовок                - Строка
//     * Подсказка                - Строка
//     * РастягиватьПоВертикали   - Булево
//     * РастягиватьПоГоризонтали - Булево
//     * ТолькоПросмотр           - Булево
//     * ЦветТекстаЗаголовка      - Цвет
//     * Ширина                   - Число
//     * ШрифтЗаголовка           - Шрифт
//                    
//    // Для обычной группы и страницы.
//     * Группировка              - ГруппировкаПодчиненныхЭлементовФормы
//
//    // Для обычной группы.
//     * Отображение              - ОтображениеОбычнойГруппы
//
//    // Для страницы.
//     * Картинка                 - Картинка
//     * ОтображатьЗаголовок      - Булево
//
//  СтандартнаяОбработка - Булево - начальное значение Истина. Указывает, получать ли
//                         основной набор, когда НаборыСвойств.Количество() равно нулю.
//
//  КлючНазначения   - Неопределено - (начальное значение) - указывает вычислить
//                      ключ назначения автоматически и добавить к значениям свойств
//                      формы КлючНазначенияИспользования и КлючСохраненияПоложенияОкна,
//                      чтобы изменения формы (настройки, положение и размер) сохранялись
//                      отдельно для разного состава наборов.
//                      Например, для каждого вида номенклатуры - свой состав наборов.
//
//                   - Строка - (не более 32 символа) - использовать указанный ключ
//                      назначения для добавления к значениям свойств формы.
//                      Пустая строка - не изменять свойства ключей формы, т.к. они
//                      устанавливается в форме и уже учитывают различия состава наборов.
//
//                    Добавка имеет формат "КлючНаборовСвойств<КлючНазначения>",
//                    чтобы <КлючНазначения> можно было обновлять без повторной добавки.
//                    При автоматическом вычислении <КлючНазначения> содержит хеш
//                    идентификаторов ссылок упорядоченных наборов свойств.
//
Процедура ЗаполнитьНаборыСвойствОбъекта(Знач Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	//++ НЕ ГОСИС
	Если ТипСсылки = Тип("СправочникСсылка.Партнеры") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляПартнеров(Объект.Клиент, Объект.Конкурент, Объект.Поставщик, Объект.ПрочиеОтношения);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Номенклатура") И НЕ Объект.ЭтоГруппа Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляНоменклатуры(Объект);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляХарактеристикНоменклатуры(Объект);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляСерииНоменклатуры(Объект);
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.Инциденты") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляИнцидентов(Объект);		
		
	//++ НЕ УТ
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляОбъектаЭксплуатации(Объект);
		
	//-- НЕ УТ

	//++ НЕ УТКА
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.УзлыОбъектовЭксплуатации") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляУзлаОбъектаЭксплуатации(Объект);
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ПроизводственнаяОперация2_2") Тогда
		
		СписокСвойств = ПолучитьНаборыСвойствДляПроизводственнойОперации(Объект);
		
	//-- НЕ УТКА
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокСвойств Цикл
		
		СтрокаНабора = НаборыСвойств.Добавить();
		
		СтрокаНабора.Набор 	   = ЭлементСписка.Значение;
		СтрокаНабора.Заголовок = ЭлементСписка.Представление;
		
	КонецЦикла;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

// см.УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов.
Функция СписокСвойствДляВидаОбъектов(ВидОбъектов, Знач ВидСвойств) Экспорт
	Возврат УправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, ВидСвойств);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ ПАРТНЕРЫ

// Возвращает список значений, состоящий из наборов свойств справочника "Партнеры".
//
// Параметры:
//  Клиент    			- Тип - булево.
//  Конкурент    		- Тип - булево.
//  Поставщик    		- Тип - булево.
//  ПрочиеОтношения    	- Тип - булево.
//
// ВозвращаемоеЗначение:
//  Наборы - СписокЗначений - Элементы справочника "НаборыДополнительныхРеквизитовИСведений".
//
Функция ПолучитьНаборыСвойствДляПартнеров(Клиент, Конкурент, Поставщик, ПрочиеОтношения) Экспорт
	
	Наборы = Новый СписокЗначений;
	//++ НЕ ГОСИС
	Наборы.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Общие"), НСтр("ru = 'Общие для всех партнеров';
																								|en = 'Common for all partners'"));
	
	Если Клиент Тогда
		Наборы.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Клиенты"),    НСтр("ru = 'Для клиентов';
																										|en = 'For customers'"));
	КонецЕсли;
	
	Если Конкурент Тогда
		Наборы.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Конкуренты"), НСтр("ru = 'Для конкурентов';
																										|en = 'For competitors'"));
	КонецЕсли;
	
	Если Поставщик Тогда
		Наборы.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Поставщики"), НСтр("ru = 'Для поставщиков';
																										|en = 'For vendors'"));
	КонецЕсли;
	
	Если ПрочиеОтношения Тогда
		Наборы.Добавить(УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Партнеры_Прочие"),     НСтр("ru = 'Для прочих';
																										|en = 'For other'"));
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат Наборы;
	
КонецФункции // ПолучитьНаборыСвойствДляПартнеров()

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов
// 
// Параметры:
//  Настройки - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов.Настройки
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
//
// Параметры:
//  КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//  Элементы   - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//  ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов
//
// Параметры:
//  Объект                  - СправочникОбъект.РолиИсполнителей - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения объекта.
//  ДополнительныеПараметры - Структура:
//   * ПредопределенныеДанные - ТаблицаЗначений - данные заполненные в процедуре ПриНачальномЗаполненииЭлементов.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = 
		"УправлениеСвойствамиПереопределяемый.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.13.27";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b85bb6dd-08dd-47cc-9012-fa9ba0d0d8cb");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = 
		"УправлениеСвойствамиПереопределяемый.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = 
		"УправлениеСвойствамиПереопределяемый.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = 
		НСтр("ru = 'Изменение идентификатора набора дополнительных свойств к каталогу ""Зачисление ДС на лицевые счета""';
			|en = 'Change the ID of the additional property set for the ""Cash deposit into personal accounts"" directory'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(
		Параметры.Очередь, "Справочник.НаборыДополнительныхРеквизитовИСведений");
	
	Пока Выборка.Следующий() Цикл
		
		Успешно = Истина;
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ОбъектОбработки = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ОбъектОбработки <> Неопределено Тогда
			
				Если Не ОбъектОбработки.ПометкаУдаления Тогда
					
					НовыйИдентификатор = Новый УникальныйИдентификатор("c091b4ce-9802-11e9-80cd-4cedfb43b11a");
					НоваяСсылка = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(НовыйИдентификатор);
					КопияОбъектаЭлемента = НоваяСсылка.ПолучитьОбъект();
					
					Если КопияОбъектаЭлемента = Неопределено Тогда
						
						КопияОбъектаЭлемента = ОбъектОбработки.Скопировать();
						КопияОбъектаЭлемента.УстановитьСсылкуНового(НоваяСсылка);
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КопияОбъектаЭлемента);
						
					КонецЕсли;
					
					ПарыЗамен = Новый Соответствие();
					ПарыЗамен.Вставить(Выборка.Ссылка, КопияОбъектаЭлемента.Ссылка);
					
					ПараметрыЗамены = ОбщегоНазначения.ПараметрыЗаменыСсылок();
					ПараметрыЗамены.СпособУдаления = "";
					ПараметрыЗамены.ВключатьБизнесЛогику = Ложь;
					ПараметрыЗамены.ПривилегированнаяЗапись = Истина;
					
					Результат = ОбщегоНазначения.ЗаменитьСсылки(ПарыЗамен, ПараметрыЗамены);
					
					Для Каждого Ошибка Из Результат Цикл
					
						СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
													УровеньЖурналаРегистрации.Ошибка,
													Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений,
													Ошибка.Ссылка,
													Ошибка.ТекстОшибки);
					
					КонецЦикла;
					
					Если Результат.Количество() <> 0 Тогда
						ОтменитьТранзакцию();
						Успешно = Ложь;
						Продолжить;
					Иначе
						
						Для Каждого СтрокаДопРеквизита Из ОбъектОбработки.ДополнительныеРеквизиты Цикл
							СтрокаДопРеквизита.ПометкаУдаления = Истина;
						КонецЦикла;
						
						Для Каждого СтрокаДопСведения Из ОбъектОбработки.ДополнительныеСведения Цикл
							СтрокаДопСведения.ПометкаУдаления = Истина;
						КонецЦикла;
						
						ОбъектОбработки.ПометкаУдаления = Истина;
						ОбъектОбработки.ИмяПредопределенногоНабора = "";
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОбработки);
						
					КонецЕсли;
					
				Иначе
					
					ОбъектОбработки.ИмяПредопределенногоНабора = "";
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОбработки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Успешно Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		
		Исключение
		
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			Продолжить;
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, "Справочник.НаборыДополнительныхРеквизитовИСведений");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ИскомоеЗначение = Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(
		Новый УникальныйИдентификатор("4173f13b-20dc-441a-bff2-b7d1e9688667"));
	
	СчетаКОбработке = Новый Массив;
	
	Если ИскомоеЗначение.ПолучитьОбъект() <> Неопределено Тогда
		СчетаКОбработке.Добавить(ИскомоеЗначение);
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СчетаКОбработке);

КонецПроцедуры

// См. ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы.
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт

	Возврат ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ НОМЕНКЛАТУРЫ

Функция ПолучитьНаборыСвойствДляНоменклатуры(Объект)
	
	Наборы = Новый СписокЗначений;
	//++ НЕ ГОСИС
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Номенклатура_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства';
										|en = 'Common properties'"));
	
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "НаборСвойств");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства для вида номенклатуры';
										|en = 'Properties for item kind'"));
	//-- НЕ ГОСИС
	Возврат Наборы;
	
КонецФункции

Функция ПолучитьНаборыСвойствДляХарактеристикНоменклатуры(Объект)
	
	Наборы = Новый СписокЗначений;
	
	//++ НЕ ГОСИС
	
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ХарактеристикиНоменклатуры_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства характеристик';
										|en = 'Common variant properties'"));
	
	Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "НаборСвойствХарактеристик");
		Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства характеристик для вида номенклатуры';
											|en = 'Variant properties for item kind'"));
		
	ИначеЕсли ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ВидНоменклатуры, "НаборСвойствХарактеристик");
			Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства характеристик для номенклатуры';
												|en = 'Variant properties for product'"));
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
	Возврат Наборы;
	
КонецФункции // ПолучитьНаборыСвойствДляХарактеристикНоменклатуры()

Функция ПолучитьНаборыСвойствДляСерииНоменклатуры(Объект)
	
	Наборы = Новый СписокЗначений;
	//++ НЕ ГОСИС
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_СерииНоменклатуры_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства';
										|en = 'Common properties'"));
	
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "НаборСвойствСерий");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства для шаблона серий номенклатуры';
										|en = 'Properties for item batch template'"));
	//-- НЕ ГОСИС
	Возврат Наборы;
	
КонецФункции // ПолучитьНаборыСвойствДляНоменклатуры()
//++ НЕ ГОСИС

//++ НЕ УТ
 
////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ ОБЪЕКТЫ ЭКСПЛУАТАЦИИ

Функция ПолучитьНаборыСвойствДляОбъектаЭксплуатации(Объект)
	
	Наборы = Новый СписокЗначений;
	
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_ОбъектыЭксплуатации_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства объектов эксплуатации';
										|en = 'Common asset properties'"));
	//++ НЕ УТКА
	ПолучитьНаборыСвойствКлассаОбъектаЭксплуатации(Объект, Наборы);
	//-- НЕ УТКА
	
	Возврат Наборы;
	
КонецФункции

//++ НЕ УТКА

Функция ПолучитьНаборыСвойствДляУзлаОбъектаЭксплуатации(Объект)
	
	Наборы = Новый СписокЗначений;
	
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_УзлыОбъектовЭксплуатации_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства узлов';
										|en = 'Node common properties'"));
	ПолучитьНаборыСвойствКлассаОбъектаЭксплуатации(Объект, Наборы);
	
	Возврат Наборы;
	
КонецФункции

Процедура ПолучитьНаборыСвойствКлассаОбъектаЭксплуатации(Объект, Наборы)
	
	НаборыСвойств = Справочники.КлассыОбъектовЭксплуатации.ПолучитьНаборыСвойств(Объект.Класс);
	Наборы.Добавить(НаборыСвойств.ПаспортныеХарактеристики, НСтр("ru = 'Свойства по классификации';
																|en = 'Properties by classification'"));
	
КонецПроцедуры

Функция ПолучитьНаборыСвойствДляПроизводственнойОперации(Объект)
	
	Наборы = Новый СписокЗначений;
	
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Документ_ПроизводственнаяОперация2_2_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства';
										|en = 'Common properties'"));
	
	Если НЕ Объект.ВидОперации.Пустая() Тогда
		НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидОперации, "НаборСвойств");
		Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства для вида операции';
											|en = 'Property for operation kind'"));
	КонецЕсли;
	
	Возврат Наборы;
	
КонецФункции
//-- НЕ УТКА

//-- НЕ УТ

//-- НЕ ГОСИС

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ СО СПРАВОЧНИКОМ ИНЦИДЕНТЫ

Функция ПолучитьНаборыСвойствДляИнцидентов(Объект)
	
	Наборы = Новый СписокЗначений;
	//++ НЕ ГОСИС
	НаборСвойств = УправлениеСвойствами.НаборСвойствПоИмени("Справочник_Инциденты_Общие");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Общие свойства';
										|en = 'Common properties'"));
	
	НаборСвойств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидИнцидента, "НаборСвойств");
	Наборы.Добавить(НаборСвойств, НСтр("ru = 'Свойства для вида номенклатуры';
										|en = 'Properties for item kind'"));
	//-- НЕ ГОСИС
	Возврат Наборы;
	
КонецФункции    

#КонецОбласти