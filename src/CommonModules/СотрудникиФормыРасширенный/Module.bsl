////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормыРасширенный: методы, обслуживающие работу формы сотрудника.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийФормыСотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ДобавитьРеквизитыВФормеСотрудника(Форма);
	КонецЕсли;
	
	СотрудникиФормыБазовый.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	// Инициализация формы
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
		
	КонецЕсли;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
			Форма.Сотрудник.ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Параметры.Организация, "ГоловнаяОрганизация");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.ФормаСотрудникаДобавитьЭлементыФормы(Форма);
	КонецЕсли; 
	
	// Полисы ОМС
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПолисыОМС") Тогда
		МодульПолисыОМС = ОбщегоНазначения.ОбщийМодуль("ПолисыОМС");
		МодульПолисыОМС.ФизическиеЛицаПриСозданииНаСервере(Форма, "ГруппаДополнительныеДанные");
	КонецЕсли;
	
	// СОТП.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетОкладовПреподавателей");
		Модуль.СоздатьКомандуСОТПВФорме(Форма, Форма.Элементы.ГруппаДополнительныеДанные2);
	КонецЕсли;
	
	// Заполнение КОРП функциональности
	// Кадровый резерв.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
		МодульФормы.СоздатьКомандуКадровыйРезервВФорме(Форма, Форма.Элементы.ГруппаКадровыйРезерв);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
		МодульРабочиеМестаОхраныТрудаФормы.ФормаСотрудникаДобавитьЭлементыФормы(Форма);
	КонецЕсли;
	
	// Льготы сотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульФормы = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульФормы.СоздатьКомандуИндивидуальныеЛьготыВФормеСотрудника(Форма, Форма.Элементы.ГруппаИндивидуальныеЛьготы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.СпискиСотрудников") Тогда
		МодульСпискиСотрудников = ОбщегоНазначения.ОбщийМодуль("СпискиСотрудников");
		МодульСпискиСотрудников.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Регулярная отправка сотрудников в систему бронирования командировок
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		МодульФормы = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		МодульФормы.СоздатьКомандуSmartwayВФормеСотрудника(Форма, Форма.Элементы.ГруппаSmartway);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРаботаФормы = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРаботаФормы");
		МодульДистанционнаяРаботаФормы.ФормаСотрудникаДобавитьЭлементыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчетФормы = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчетФормы");
		МодульФинансовыйУчетФормы.СоздатьКомандуФинансовыйУчетВФормеСотрудника(Форма);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ПриСозданииНаСервереФормыСотрудника(Форма);
	КонецЕсли;
	
	ОбновитьСостояниеСотрудника(Форма);
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ДобавитьРеквизитыВФормеСотрудника(Форма);
	СотрудникиФормыБазовый.СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыБазовый.СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если Форма.РольСотрудникаПриСоздании = Перечисления.РолиСотрудников.Договорник Тогда
		КадровыйУчетРасширенный.УстановитьРольДоговорникСотруднику(Форма.СотрудникСсылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СотрудникиФормыБазовый.СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
	Если НЕ ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена Организация';
								|en = 'Company is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			"Сотрудник.ГоловнаяОрганизация",
			,
			Отказ);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыФизическогоЛица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ДобавитьРеквизитыВФормеФизическогоЛица(Форма);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если Форма.Параметры.Свойство("РольФизическогоЛица") Тогда
			Форма.РольФизическогоЛицаПриСоздании = Форма.Параметры.РольФизическогоЛица;
		КонецЕсли;
		
		Если Форма.Параметры.Свойство("Организация") Тогда
			Форма.Организация = Форма.Параметры.Организация;
		КонецЕсли;
		
	КонецЕсли; 
	
	СотрудникиФормыБазовый.ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 

	ЗаполнитьФотографию(Форма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужбаФормы = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		МодульГосударственнаяСлужбаФормы.ФизическиеЛицаПриСозданииНаСервере(Форма, "ГруппаДополнительныеДанные");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланированиеФормы = ОбщегоНазначения.ОбщийМодуль("КадровоеПланированиеФормы");
		МодульКадровоеПланированиеФормы.ФизическиеЛицаПриСозданииНаСервере(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезервФормы = ОбщегоНазначения.ОбщийМодуль("КадровыйРезервФормы");
		МодульКадровыйРезервФормы.СоздатьКомандуКадровыйРезервВФорме(Форма, Форма.Элементы.ГруппаКадровыйРезерв);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПолисыОМС") Тогда
		МодульПолисыОМС = ОбщегоНазначения.ОбщийМодуль("ПолисыОМС");
		МодульПолисыОМС.ФизическиеЛицаПриСозданииНаСервере(Форма, "ГруппаДополнительныеДанные");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ФизическиеЛицаФормаЭлементаПриСозданииНаСервере(Форма, Форма.Элементы.ГруппаКомандыИсторииРаботы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.РегулярнаяОтправкаСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		Модуль.ПропускатьПроверкуРегулярнойОтправки(Форма, ТекущийОбъект.ДополнительныеСвойства);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПроверитьИзменениеДокументаУдостоверяющегоЛичность(Форма);
	КонецЕсли;
	
	СотрудникиФормыБазовый.ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если ЗначениеЗаполнено(Форма.РольФизическогоЛицаПриСоздании) 
		И ЗначениеЗаполнено(Форма.Организация) Тогда
		
		РегистрыСведений.РолиФизическихЛиц.УстановитьРольФизическогоЛица(
			ТекущийОбъект.Ссылка, Форма.Организация, Форма.РольФизическогоЛицаПриСоздании);
		
	КонецЕсли;
		
	КадровыйУчетРасширенный.ЗаписатьФотографию(ТекущийОбъект.Ссылка, Форма.АдресФотографии);	
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыБазовый.ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
	Форма.АдресФотографии = КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(Форма.ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСортировкиКоллекцияССотрудниками

Функция НастройкиСортировки() Экспорт 
	НастройкиСортировки = Новый Структура;
	
	ПоляЭлементаСортировки = "Порядок, Использовать";	
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеНомер", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ПодразделениеПриоритет", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьКраткоеНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("ДолжностьПриоритет", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("СотрудникНаименование", НастройкиСортировкиПоПолю);
	
	НастройкиСортировкиПоПолю = Новый Структура(ПоляЭлементаСортировки);
	НастройкиСортировкиПоПолю.Порядок = 0;
	НастройкиСортировкиПоПолю.Использовать = Ложь;
	НастройкиСортировки.Вставить("СотрудникТабельныйНомер", НастройкиСортировкиПоПолю);
	
	Возврат НастройкиСортировки;
	
КонецФункции	

Функция НастройкиСортировкиПоУмолчанию() Экспорт 
	НастройкиСортировки = НастройкиСортировки();	
	
	СтрокаОписанияНастроек = РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.НастройкаУпорядочиванияСпискаСотрудников();
	
	ПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаОписанияНастроек, ",");	
	
	Порядок = 0;
	Для Каждого Поле Из ПоляСортировки Цикл
		Порядок = Порядок + 1;	
		
		Если Поле = "Справочник.ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического" Тогда
			НастройкиСортировки.ПодразделениеПриоритет.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеПриоритет.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.ПодразделенияОрганизаций.Наименование" Тогда
			НастройкиСортировки.ПодразделениеНаименование.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.ПодразделенияОрганизаций.Код" Тогда
			НастройкиСортировки.ПодразделениеНомер.Использовать = Истина;	
			НастройкиСортировки.ПодразделениеНомер.Порядок = Порядок;	
		ИначеЕсли Поле = "Справочник.Должности.РеквизитДопУпорядочивания" Тогда
			НастройкиСортировки.ДолжностьПриоритет.Использовать = Истина;	
			НастройкиСортировки.ДолжностьПриоритет.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Должности.Наименование" Тогда
			НастройкиСортировки.ДолжностьНаименование.Использовать = Истина;	
			НастройкиСортировки.ДолжностьНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Должности.НаименованиеКраткое" Тогда
			НастройкиСортировки.ДолжностьКраткоеНаименование.Использовать = Истина;	
			НастройкиСортировки.ДолжностьКраткоеНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Сотрудники.Наименование" Тогда
			НастройкиСортировки.СотрудникНаименование.Использовать = Истина;	
			НастройкиСортировки.СотрудникНаименование.Порядок = Порядок;
		ИначеЕсли Поле = "Справочник.Сотрудники.Код" Тогда
			НастройкиСортировки.СотрудникТабельныйНомер.Использовать = Истина;	
			НастройкиСортировки.СотрудникТабельныйНомер.Порядок = Порядок;
		КонецЕсли;	
	КонецЦикла;	
		
	Возврат НастройкиСортировки;
КонецФункции

Функция СортируемаяКоллекцияСотрудников(Коллекция) Экспорт
	СортируемаяКоллекция = Новый Структура("Коллекция, ОписаниеКоллекции");	
	СортируемаяКоллекция.ОписаниеКоллекции = ОписаниеСортируемойКоллекцииСотрудников();
	СортируемаяКоллекция.Коллекция = Коллекция;
	
	Возврат СортируемаяКоллекция;
КонецФункции	

Процедура ДобавитьДополнительноеПолеСортировки(Коллекция, Поле, Тип) Экспорт
	Если Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки = Неопределено Тогда
		Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки = Новый Массив;
	КонецЕсли;
	
	ОписаниеПоля = ОписаниеПоляДопУпорядочиванияКоллекцииСотрудников(Поле, Тип);
	Коллекция.ОписаниеКоллекции.ДополнительныеПоляСортировки.Добавить(ОписаниеПоля);	
КонецПроцедуры	

Функция ОписаниеСортируемойКоллекцииСотрудников() Экспорт
	ОписаниеСортируемойКоллекции = Новый Структура;
	ОписаниеСортируемойКоллекции.Вставить("Псевдоним");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляПодразделение");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляДолжность");
	ОписаниеСортируемойКоллекции.Вставить("ЗначениеПоляПериод");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляПериод");	
	ОписаниеСортируемойКоллекции.Вставить("ДополнительныеПоляСортировки");	
	
	Возврат ОписаниеСортируемойКоллекции;
КонецФункции	

Функция ПорядокСтрокКоллекцийСотрудников(СортируемыеКоллекции, НастройкиСортировки = Неопределено) Экспорт
	ОписаниеСортируемыхКоллекция = Новый Массив;
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		ОписаниеСортируемыхКоллекция.Добавить(СортируемыеДанные.ОписаниеКоллекции);	
	КонецЦикла;	
	
	РезультатСортировки = Новый Структура;
	
	Если НастройкиСортировки = Неопределено Тогда
		НастройкиСортировки = НастройкиСортировкиПоУмолчанию();	
	КонецЕсли;	
	
	СортируемаяТаблица = ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекция);
	ТаблицаОтбораКадровыхДанных = ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников();
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		НеобходимоПолучатьКадровыеДанные = НеобходимоПолучатьКадровыеДанныеДляСортировки(СортируемыеДанные.ОписаниеКоллекции, НастройкиСортировки);
		
		ИндексСтроки = 0;
		Для Каждого СтрокаСортируемойТаблицы Из СортируемыеДанные.Коллекция Цикл	
			ДобавитьСтрокуВТаблицуСортировкиСотрудников(СортируемаяТаблица, СтрокаСортируемойТаблицы, ИндексСтроки, СортируемыеДанные.ОписаниеКоллекции);
			
			Если НеобходимоПолучатьКадровыеДанные Тогда	
				ДобавитьСтрокуВТаблицуОтбораКадровыхДанныхДляСортировки(ТаблицаОтбораКадровыхДанных, СтрокаСортируемойТаблицы, СортируемыеДанные.ОписаниеКоллекции);
			КонецЕсли;	
			
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	РезультатЗапросаСортировки = РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекция);
	Выборка = РезультатЗапросаСортировки.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ПсевдонимТаблицы") Цикл		
		РезультатСортировкиКоллекции = РезультатСортировкиКоллекцииСотрудников();
		РезультатСортировки.Вставить(Выборка.ПсевдонимТаблицы, РезультатСортировкиКоллекции);
		
		Порядок = 1;
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = РезультатСортировкиКоллекции.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			СтрокаТаблицы.Порядок = Порядок;
			Порядок = Порядок + 1;
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат РезультатСортировки;
КонецФункции

Функция РезультатСортировкиКоллекцииСотрудников()
	РезультатСортировки = Новый ТаблицаЗначений;
	РезультатСортировки.Колонки.Добавить("ИндексСтрокиИсходнойТаблицы");
	РезультатСортировки.Колонки.Добавить("Порядок");
	
	РезультатСортировки.Колонки.Добавить("ПодразделениеПриоритет");
	РезультатСортировки.Колонки.Добавить("ПодразделениеНаименование");
	РезультатСортировки.Колонки.Добавить("ПодразделениеНомер");
	РезультатСортировки.Колонки.Добавить("ДолжностьПриоритет");
	РезультатСортировки.Колонки.Добавить("ДолжностьНаименование");
	РезультатСортировки.Колонки.Добавить("ДолжностьКраткоеНаименование");
	РезультатСортировки.Колонки.Добавить("СотрудникНаименование");
	РезультатСортировки.Колонки.Добавить("СотрудникТабельныйНомер");;

	Возврат РезультатСортировки;
КонецФункции	

Функция ОписаниеПоляДопУпорядочиванияКоллекцииСотрудников(Поле, Тип) Экспорт 
	Возврат Новый Структура("Поле, Тип", Поле, Тип);	
КонецФункции

Функция РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекций)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТаблицаОтбораКадровыхДанных.Количество() > 0 Тогда
		ТаблицаОтбораКадровыхДанных.Свернуть("Сотрудник, Период");
		
		Запрос.УстановитьПараметр("ТаблицаОтбораКадровыхДанных", ТаблицаОтбораКадровыхДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОтбораКадровыхДанных.Сотрудник,
		|	ТаблицаОтбораКадровыхДанных.Период
		|ПОМЕСТИТЬ ВТТаблицаОтбора
		|ИЗ
		|	&ТаблицаОтбораКадровыхДанных КАК ТаблицаОтбораКадровыхДанных";
		
		Запрос.Выполнить();
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТТаблицаОтбора");
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, "Подразделение, Должность");
	КонецЕсли;	
	
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(Запрос.МенеджерВременныхТаблиц, СортируемаяТаблица, "ВТИсходныеДанные");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.Период,
	|	ИсходныеДанные.ИндексСтрокиИсходнойТаблицы,
	|	ИсходныеДанные.ПсевдонимТаблицы,
	|	&ПоляУпорядочивания
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И ИсходныеДанные.Период = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныеДанные.ПсевдонимТаблицы,
	|	&Порядок";
		
	Если ТаблицаОтбораКадровыхДанных.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ИсходныеДанные.Сотрудник = КадровыеДанныеСотрудников.Сотрудник", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИсходныеДанные.Период = КадровыеДанныеСотрудников.Период", "");
	КонецЕсли;	

	КадровыеДанныеВоВнешнейТаблице = ТаблицаОтбораКадровыхДанных.Количество() > 0;
	ПоляУпорядочивания = ПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(КадровыеДанныеВоВнешнейТаблице, НастройкиСортировки, ОписаниеСортируемыхКоллекций);
	
	ПоляПорядка = Новый Массив;
	БлокУпорядочить = Новый Массив;	
	
	Для Каждого ОписаниеПоля Из ПоляУпорядочивания Цикл
		ПоляПорядка.Добавить(ОписаниеПоля.Текст + " КАК " + ОписаниеПоля.Псевдоним);
		БлокУпорядочить.Добавить(ОписаниеПоля.Псевдоним);
	КонецЦикла;
	
	Если БлокУпорядочить.Количество() > 0 Тогда
		БлокУпорядочить.Добавить("ИсходныеДанные.ИндексСтрокиИсходнойТаблицы");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляУпорядочивания", СтрСоединить(ПоляПорядка,  "," + Символы.ПС));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", СтрСоединить(БлокУпорядочить,  "," + Символы.ПС));
	
	Возврат Запрос.Выполнить();
КонецФункции	

Функция ПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(КадровыеДанныеВоВнешнейТаблице, НастройкиСортировки, ОписаниеСортируемыхКоллекций)
	ПоляУпорядочивания = Новый ТаблицаЗначений;
	ПоляУпорядочивания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПоляУпорядочивания.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ПоляУпорядочивания.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка"));
	
	Если КадровыеДанныеВоВнешнейТаблице Тогда
		ШаблонПоляПодразделение = 
		"ВЫБОР
		|	КОГДА ИсходныеДанные.ЗаданоПолеПодразделение
		|			ИЛИ КадровыеДанныеСотрудников.Подразделение ЕСТЬ NULL 
		|		ТОГДА ИсходныеДанные.ПодразделениеПорядка.РеквизитУпорядочивания
		|	ИНАЧЕ КадровыеДанныеСотрудников.Подразделение.РеквизитУпорядочивания
		|КОНЕЦ";	
		ШаблонПоляДолжность = 
		"ВЫБОР
		|	КОГДА ИсходныеДанные.ЗаданоПолеДолжность
		|			ИЛИ КадровыеДанныеСотрудников.Должность ЕСТЬ NULL 
		|		ТОГДА ИсходныеДанные.ДолжностьПорядка.РеквизитУпорядочивания
		|	ИНАЧЕ КадровыеДанныеСотрудников.Должность.РеквизитУпорядочивания
		|КОНЕЦ";
	Иначе
		ШаблонПоляПодразделение = "ИсходныеДанные.ПодразделениеПорядка";
		ШаблонПоляДолжность = "ИсходныеДанные.ДолжностьПорядка";
	КонецЕсли;
	
	Для Каждого ЭлементСортировки Из НастройкиСортировки Цикл
		Если ЭлементСортировки.Значение.Использовать <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		СтрокаТаблицы.Порядок = ЭлементСортировки.Значение.Порядок;
		СтрокаТаблицы.Псевдоним = ЭлементСортировки.Ключ;
		
		Если ЭлементСортировки.Ключ = "ПодразделениеПриоритет" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "РеквизитДопУпорядочиванияИерархического");	
		ИначеЕсли ЭлементСортировки.Ключ = "ПодразделениеНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "Наименование");
		ИначеЕсли ЭлементСортировки.Ключ = "ПодразделениеНомер" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляПодразделение, "РеквизитУпорядочивания", "Код");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьПриоритет" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "РеквизитДопУпорядочивания");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "Наименование");
		ИначеЕсли ЭлементСортировки.Ключ = "ДолжностьКраткоеНаименование" Тогда	
			СтрокаТаблицы.Текст = СтрЗаменить(ШаблонПоляДолжность, "РеквизитУпорядочивания", "НаименованиеКраткое");	
		ИначеЕсли ЭлементСортировки.Ключ = "СотрудникНаименование" Тогда	
			СтрокаТаблицы.Текст = "ИсходныеДанные.Сотрудник.Наименование";
		ИначеЕсли ЭлементСортировки.Ключ = "СотрудникТабельныйНомер" Тогда	
			СтрокаТаблицы.Текст = "ИсходныеДанные.Сотрудник.Код";	
		КонецЕсли;			
	КонецЦикла;
	
	ПоляУпорядочивания.Сортировать("Порядок");
	Если ПоляУпорядочивания.Количество() > 0 Тогда
		Порядок = ПоляУпорядочивания[ПоляУпорядочивания.Количество() - 1].Порядок;
	Иначе
		Порядок = 0;
	КонецЕсли;	
	
	ДополнительныеПоляУпорядочивания = ДополнительныеПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(ОписаниеСортируемыхКоллекций);
		
	Для Каждого СтрокаТаблицыДопПорядка Из ДополнительныеПоляУпорядочивания Цикл
		Порядок = Порядок + 1;
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТаблицыДопПорядка);
		СтрокаТаблицы.Порядок = Порядок;
	КонецЦикла;	
	
	ПоляУпорядочивания.Сортировать("Порядок");
		
	Возврат ПоляУпорядочивания;
КонецФункции

Функция ДополнительныеПоляУпорядочиванияЗапросаСортировкиКоллекцииСотрудников(ОписаниеСортируемыхКоллекций)
	ПоляУпорядочивания = Новый ТаблицаЗначений;
	ПоляУпорядочивания.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ПоляУпорядочивания.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));
	ПоляУпорядочивания.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка"));
	
	ОписаниеПолейДопУпорядочивания = Новый Массив;
	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если ОписаниеКоллекции.ДополнительныеПоляСортировки <> Неопределено Тогда
			Сч = 1;
			Для Каждого ДополнительноеПоле Из ОписаниеКоллекции.ДополнительныеПоляСортировки Цикл
				Если ОписаниеПолейДопУпорядочивания.Количество() >= Сч Тогда
					ОписаниеПоляСортировки = ОписаниеПолейДопУпорядочивания[Сч - 1];
				Иначе 
					ОписаниеПоляСортировки = Новый Структура;
					ОписаниеПолейДопУпорядочивания.Добавить(ОписаниеПоляСортировки);
				КонецЕсли;	
				
				ОписаниеПоляСортировки.Вставить(ОписаниеКоллекции.Псевдоним, ДополнительноеПоле.Поле);
				
				Сч = Сч + 1;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
	Порядок = 1;	
	Для Каждого Описание Из ОписаниеПолейДопУпорядочивания Цикл	
		ЧастиТелаПоля = Новый Массив;
		ЧастиТелаПоля.Добавить("ВЫБОР");
		Для Каждого КлючЗначение Из Описание Цикл
			ЧастиТелаПоля.Добавить("КОГДА ИсходныеДанные.ПсевдонимТаблицы = """ + КлючЗначение.Ключ + """ ТОГДА " + "ИсходныеДанные." + КлючЗначение.Значение)		
		КонецЦикла;	
		ЧастиТелаПоля.Добавить("ИНАЧЕ 0");
		ЧастиТелаПоля.Добавить("КОНЕЦ");
		
		СтрокаТаблицы = ПоляУпорядочивания.Добавить();
		СтрокаТаблицы.Текст = СтрСоединить(ЧастиТелаПоля, Символы.ПС);
		СтрокаТаблицы.Псевдоним = "ПолеПорядка" + Порядок;
		СтрокаТаблицы.Порядок = Порядок;
		
		Порядок = Порядок + 1;
	КонецЦикла;	
	
	Возврат ПоляУпорядочивания
КонецФункции	

Функция ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекций)
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСортировки.Колонки.Добавить("ПодразделениеПорядка", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСортировки.Колонки.Добавить("ЗаданоПолеПодразделение", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("ДолжностьПорядка", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаСортировки.Колонки.Добавить("ЗаданоПолеДолжность", Новый ОписаниеТипов("Булево"));
	ТаблицаСортировки.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаСортировки.Колонки.Добавить("ИндексСтрокиИсходнойТаблицы", Новый ОписаниеТипов("Число"));
	
	МаксимальнаяДлинаПсевдонима = 0;	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если МаксимальнаяДлинаПсевдонима < СтрДлина(ОписаниеКоллекции.Псевдоним) Тогда 
			МаксимальнаяДлинаПсевдонима = СтрДлина(ОписаниеКоллекции.Псевдоним);
		КонецЕсли;		
	КонецЦикла;	
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(МаксимальнаяДлинаПсевдонима);	
	ТаблицаСортировки.Колонки.Добавить("ПсевдонимТаблицы", Новый ОписаниеТипов("Строка",, КвалификаторСтроки));
	
	ТипыДополнительныхПолей = Новый Соответствие;
	
	Для Каждого ОписаниеКоллекции Из ОписаниеСортируемыхКоллекций Цикл
		Если ОписаниеКоллекции.ДополнительныеПоляСортировки <> Неопределено Тогда
			Для Каждого ОписаниеПоля Из ОписаниеКоллекции.ДополнительныеПоляСортировки Цикл
				ЧастиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеПоля.Поле, ".");
				
				ТипыПоля = ТипыДополнительныхПолей.Получить(ЧастиПути);
				Если ТипыПоля = Неопределено Тогда
					ТипыПоля = Новый Массив;
					ТипыДополнительныхПолей.Вставить(ЧастиПути[0], ТипыПоля);
				КонецЕсли;	
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыПоля, ОписаниеПоля.Тип.Типы());					
			КонецЦикла;			
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ДобавляемоеПоле Из ТипыДополнительныхПолей Цикл
		ТаблицаСортировки.Колонки.Добавить(ДобавляемоеПоле.Ключ, Новый ОписаниеТипов(ДобавляемоеПоле.Значение)); 		
	КонецЦикла;	
			
	Возврат ТаблицаСортировки;
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСортировкиСотрудников(ТаблицаСортировки, СтрокаСортируемойКоллекция, ИндексСтрокиКоллекции, ОписаниеКоллекции)
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСортируемойКоллекция); 
	
	СтрокаТаблицы.Сотрудник = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляСотрудник];
	
	Если ОписаниеКоллекции.ИмяПоляПодразделение <> Неопределено Тогда 
		СтрокаТаблицы.ПодразделениеПорядка = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПодразделение];
		СтрокаТаблицы.ЗаданоПолеПодразделение = Истина;
	КонецЕсли;
	Если ОписаниеКоллекции.ИмяПоляДолжность <> Неопределено Тогда
		СтрокаТаблицы.ДолжностьПорядка = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляДолжность];
		СтрокаТаблицы.ЗаданоПолеДолжность= Истина;
	КонецЕсли;	
	СтрокаТаблицы.ИндексСтрокиИсходнойТаблицы = ИндексСтрокиКоллекции;
	СтрокаТаблицы.ПсевдонимТаблицы = ОписаниеКоллекции.Псевдоним;
		
	Если ОписаниеКоллекции.ИмяПоляПериод <> Неопределено Тогда
		СтрокаТаблицы.Период = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПериод];
	Иначе	
		СтрокаТаблицы.Период = ОписаниеКоллекции.ЗначениеПоляПериод;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников()
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаОтбора.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаОтбора;
КонецФункции

Функция ДобавитьСтрокуВТаблицуОтбораКадровыхДанныхДляСортировки(ТаблицаОтбораКадровыхДанных, СтрокаСортируемойКоллекция, ОписаниеКоллекции)
	СтрокаТаблицыОтбора = ТаблицаОтбораКадровыхДанных.Добавить();
	СтрокаТаблицыОтбора.Сотрудник = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляСотрудник];
	
	Если ОписаниеКоллекции.ИмяПоляПериод <> Неопределено Тогда
		СтрокаТаблицыОтбора.Период = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляПериод];
	Иначе	
		СтрокаТаблицыОтбора.Период	= ОписаниеКоллекции.ЗначениеПоляПериод;
	КонецЕсли;	
	
КонецФункции	

Функция НеобходимоПолучатьКадровыеДанныеДляСортировки(ОписаниеСортируемойКоллекции, НастройкиСортировки)
	Если ОписаниеСортируемойКоллекции.ИмяПоляПодразделение <> Неопределено
		И ОписаниеСортируемойКоллекции.ИмяПоляДолжность <> Неопределено Тогда
		
		Возврат Ложь;
	КонецЕсли;	
						
	Возврат ИспользуютсяКадровыеДанныеВНастройкахСортировки(НастройкиСортировки);	
КонецФункции	

Функция ИспользуютсяКадровыеДанныеВНастройкахСортировки(НастройкиСортировки)
	Для Каждого ЭлементНастройки Из НастройкиСортировки Цикл
		Если (ЭлементНастройки.Ключ = "ПодразделениеПриоритет"
			Или ЭлементНастройки.Ключ = "ПодразделениеНаименование"
			Или ЭлементНастройки.Ключ = "ПодразделениеНомер"
			Или ЭлементНастройки.Ключ = "ДолжностьПриоритет"
			Или ЭлементНастройки.Ключ = "ДолжностьНаименование"
			Или ЭлементНастройки.Ключ = "ДолжностьКраткоеНаименование")
			И ЭлементНастройки.Значение.Использовать Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

#КонецОбласти

#Область МетодыСортировкиКоллекцияСФизическимиЛицами

Функция СортируемаяКоллекцияФизическихЛиц(Коллекция) Экспорт
	СортируемаяКоллекция = Новый Структура("Коллекция, ОписаниеКоллекции");	
	СортируемаяКоллекция.ОписаниеКоллекции = ОписаниеСортируемойКоллекцииФизическихЛиц();
	СортируемаяКоллекция.Коллекция = Коллекция;
	
	Возврат СортируемаяКоллекция;
КонецФункции	

Функция ОписаниеСортируемойКоллекцииФизическихЛиц() Экспорт
	ОписаниеСортируемойКоллекции = Новый Структура;
	ОписаниеСортируемойКоллекции.Вставить("Псевдоним");
	ОписаниеСортируемойКоллекции.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");
	ОписаниеСортируемойКоллекции.Вставить("ДополнительныеПоляСортировки");
	
	Возврат ОписаниеСортируемойКоллекции;
КонецФункции

Функция ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Организация, ПериодПолученияКадровыхДанных, НастройкиСортировки = Неопределено) Экспорт 
	РезультатСортировки = Новый Структура;
	
	ОписаниеСортируемыхКоллекций = Новый Массив;
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл
		ОписаниеСортируемыхКоллекций.Добавить(СортируемыеДанные.ОписаниеКоллекции);	
	КонецЦикла;	
	
	Если НастройкиСортировки = Неопределено Тогда
		НастройкиСортировки = НастройкиСортировкиПоУмолчанию();	
	КонецЕсли;	
	
	СортируемаяТаблица = ТаблицаСортировкиФизическихЛиц(ОписаниеСортируемыхКоллекций);
	
	Для Каждого СортируемыеДанные Из СортируемыеКоллекции Цикл	
		ИндексСтроки = 0;
		Для Каждого СтрокаСортируемойТаблицы Из СортируемыеДанные.Коллекция Цикл	
			ДобавитьСтрокуВТаблицуСортировкиФизическихЛиц(СортируемаяТаблица, СтрокаСортируемойТаблицы, ИндексСтроки, СортируемыеДанные.ОписаниеКоллекции, ПериодПолученияКадровыхДанных);
						
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;		
	КонецЦикла;	
	
	ЗаполнитьСотрудникаВТаблицеСортировкиФизическихЛиц(СортируемаяТаблица, Организация, ПериодПолученияКадровыхДанных);
	
	ТаблицаОтбораКадровыхДанных = ТаблицаОтбораКадровыхДанныхДляСортировкиКоллекцийСотрудников();
	
	Для Каждого СтрокаСортируемойТаблицы Из СортируемаяТаблица Цикл
		СтрокаТаблицыОтбора = ТаблицаОтбораКадровыхДанных.Добавить();
		СтрокаТаблицыОтбора.Сотрудник = СтрокаСортируемойТаблицы.Сотрудник;
		СтрокаТаблицыОтбора.Период = ПериодПолученияКадровыхДанных;
	КонецЦикла;	
		
	РезультатЗапросаСортировки = РезультатЗапросаСортировкиКоллекцииСотрудников(СортируемаяТаблица, НастройкиСортировки, ТаблицаОтбораКадровыхДанных, ОписаниеСортируемыхКоллекций);
	Выборка = РезультатЗапросаСортировки.Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ПсевдонимТаблицы") Цикл		
		РезультатСортировкиКоллекции = РезультатСортировкиКоллекцииСотрудников();
		РезультатСортировки.Вставить(Выборка.ПсевдонимТаблицы, РезультатСортировкиКоллекции);
		
		Порядок = 1;
		Пока Выборка.Следующий() Цикл
			СтрокаТаблицы = РезультатСортировкиКоллекции.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			СтрокаТаблицы.Порядок = Порядок;
			Порядок = Порядок + 1;
		КонецЦикла;			
	КонецЦикла;	
	
	Возврат РезультатСортировки;
	
КонецФункции	

Функция ТаблицаСортировкиФизическихЛиц(ОписаниеСортируемыхКоллекция)
	ТаблицаСортировки = ТаблицаСортировкиСотрудников(ОписаниеСортируемыхКоллекция);
	
	Если ТаблицаСортировки.Колонки.Найти("ФизическоеЛицо") = Неопределено Тогда
		ТаблицаСортировки.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	КонецЕсли;	
	
	Возврат ТаблицаСортировки;
КонецФункции

Процедура ДобавитьСтрокуВТаблицуСортировкиФизическихЛиц(ТаблицаСортировки, СтрокаСортируемойКоллекция, ИндексСтрокиКоллекции, ОписаниеКоллекции, ПериодПолученияКадровыхДанных)
	СтрокаТаблицы = ТаблицаСортировки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСортируемойКоллекция); 	
	СтрокаТаблицы.ФизическоеЛицо = СтрокаСортируемойКоллекция[ОписаниеКоллекции.ИмяПоляФизическоеЛицо];
	СтрокаТаблицы.Период = ПериодПолученияКадровыхДанных;	
	СтрокаТаблицы.ПсевдонимТаблицы = ОписаниеКоллекции.Псевдоним;
	СтрокаТаблицы.ИндексСтрокиИсходнойТаблицы = ИндексСтрокиКоллекции;
КонецПроцедуры	

Процедура ЗаполнитьСотрудникаВТаблицеСортировкиФизическихЛиц(ТаблицаСортировки, Организация, ПериодПолученияКадровыхДанных)
	СписокФизическихЛиц = ТаблицаСортировки.ВыгрузитьКолонку("ФизическоеЛицо");	
	
	ОсновныеСотрудники = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, Истина, Организация, НачалоМесяца(ПериодПолученияКадровыхДанных));
	
	ОсновныеСотрудники.Индексы.Добавить("ФизическоеЛицо");
	
	Для Каждого СтрокаТаблицы Из ТаблицаСортировки Цикл
		НайденныеСтроки = ОсновныеСотрудники.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТаблицы.Сотрудник = НайденныеСтроки[0].Сотрудник; 				
		КонецЕсли;			
	КонецЦикла;		
КонецПроцедуры	

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Процедура ДобавитьРеквизитыВФормеСотрудника(Форма)
	
	// Добавление реквизитов формы
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРаботаФормы = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРаботаФормы");
		МодульДистанционнаяРаботаФормы.ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
		МодульРабочиеМестаОхраныТрудаФормы.ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов, Форма);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, МассивДобавляемыхРеквизитов, МассивИменРеквизитовФормы);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьРеквизитыВФормеФизическогоЛица(Форма)
	
	МассивРеквизитов = Новый Массив;
		
	МассивРеквизитов.Добавить(Новый РеквизитФормы("РольФизическогоЛицаПриСоздании",
		Новый ОписаниеТипов("ПеречислениеСсылка.РолиФизическихЛиц")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("АдресФотографии", Новый ОписаниеТипов("Строка")));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ДобавитьВМассивСоздаваемыеРеквизитыФормыСотрудника(МассивРеквизитов,
			Не Форма.Параметры.Ключ.Пустая());
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
КонецПроцедуры

Функция ПараметрыОтбораПоПериодуПараметровОткрытияФормыСписка(Параметры) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПериодРаботы", Новый СтандартныйПериод);
	ПараметрыОтбора.Вставить("ОтбиратьРаботающихВПериоде", Ложь);
	ПараметрыОтбора.Вставить("ОтборПоПериодуКадровыхДанныхИспользуется", Ложь);
	
	Если (ТипЗнч(Параметры) = Тип("Структура")
			Или ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура"))
		И Параметры.Свойство("Отбор") И Параметры.Отбор <> Неопределено Тогда
		
		Если Параметры.Отбор.Свойство("НачалоПериодаПримененияОтбора") Тогда
			
			ПараметрыОтбора.ОтборПоПериодуКадровыхДанныхИспользуется = Истина;
			Если ЗначениеЗаполнено(Параметры.Отбор.НачалоПериодаПримененияОтбора) Тогда
				
				// Подбор работающих в указанном периоде, если окончание периода не задано,
				// считается, что отбираются работающие в текущем месяце.
				ПараметрыОтбора.ОтбиратьРаботающихВПериоде = Истина;
				
				ПараметрыОтбора.ПериодРаботы.ДатаНачала = Параметры.Отбор.НачалоПериодаПримененияОтбора;
				
				Если Параметры.Отбор.Свойство("ОкончаниеПериодаПримененияОтбора") 
					И ЗначениеЗаполнено(Параметры.Отбор.ОкончаниеПериодаПримененияОтбора) Тогда
					ПараметрыОтбора.ПериодРаботы.ДатаОкончания = Параметры.Отбор.ОкончаниеПериодаПримененияОтбора;
				Иначе
					ПараметрыОтбора.ПериодРаботы.ДатаОкончания = КонецМесяца(ПараметрыОтбора.ПериодРаботы.ДатаНачала);
				КонецЕсли;
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("НачалоПериодаПримененияОтбора");
			Параметры.Отбор.Удалить("ОкончаниеПериодаПримененияОтбора");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("МесяцПримененияОтбора") Тогда
			
			Если Не ПараметрыОтбора.ОтбиратьРаботающихВПериоде Тогда
				
				ПараметрыОтбора.ОтборПоПериодуКадровыхДанныхИспользуется = Истина;
				Если ЗначениеЗаполнено(Параметры.Отбор.МесяцПримененияОтбора) Тогда
					
					// Подбор работавших в указанном месяце.
					ПараметрыОтбора.ОтбиратьРаботающихВПериоде = Истина;
					
					ПараметрыОтбора.ПериодРаботы.ДатаНачала = Параметры.Отбор.МесяцПримененияОтбора;
					ПараметрыОтбора.ПериодРаботы.ДатаОкончания = КонецМесяца(ПараметрыОтбора.ПериодРаботы.ДатаНачала);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Параметры.Отбор.Удалить("МесяцПримененияОтбора");
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ДатаПримененияОтбора") Тогда
			
			Если Не ПараметрыОтбора.ОтбиратьРаботающихВПериоде Тогда
				
				ПараметрыОтбора.ОтборПоПериодуКадровыхДанныхИспользуется = Истина;
				Если ЗначениеЗаполнено(Параметры.Отбор.ДатаПримененияОтбора) Тогда
					
					// Подбор работающих на указанную дату.
					ПараметрыОтбора.ОтбиратьРаботающихВПериоде = Истина;
					
					ПараметрыОтбора.ПериодРаботы.ДатаНачала = Параметры.Отбор.ДатаПримененияОтбора;
					ПараметрыОтбора.ПериодРаботы.ДатаОкончания = Параметры.Отбор.ДатаПримененияОтбора;
					
				КонецЕсли;
				
			КонецЕсли;
		
			Параметры.Отбор.Удалить("ДатаПримененияОтбора");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

Функция ПустаяСтруктураДляПроверкиКонфликтовВидовЗанятостиСотрудников() Экспорт
	
	Возврат Новый Структура("Сотрудник,Должность,ВидЗанятости,ДатаСобытия");
	
КонецФункции

Функция СообщениеОКонфликтахВидовЗанятостиСотрудников(ТаблицаПроверяемыхСотрудников, Организация, ИсключаемыеРегистраторы, ИсключаемыеИзПроверкиСотрудники = Неопределено) Экспорт
	
	СообщенияОКонфликтахВидовЗанятости = Новый Соответствие;
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаСотрудников.Колонки.Добавить("ВидЗанятости", Новый ОписаниеТипов("перечислениеСсылка.ВидыЗанятости"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаПроверяемогоСотрудника Из ТаблицаПроверяемыхСотрудников Цикл
		
		Если ЗначениеЗаполнено(СтрокаПроверяемогоСотрудника.Сотрудник)
			И ЗначениеЗаполнено(СтрокаПроверяемогоСотрудника.ВидЗанятости)
			И ЗначениеЗаполнено(СтрокаПроверяемогоСотрудника.ДатаСобытия) Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудников.Добавить(), СтрокаПроверяемогоСотрудника);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.Должность КАК Должность,
		|	ТаблицаСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	ТаблицаСотрудников.ДатаСобытия КАК ДатаСобытия
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ТаблицаСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПериодыПредварительно
		|ИЗ
		|	ВТТаблицаСотрудников КАК ТаблицаСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (ВЫРАЗИТЬ(ТаблицаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = Сотрудники.ФизическоеЛицо)
		|ГДЕ
		|	Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаСНесколькимиСотрудниками
		|ИЗ
		|	ВТСотрудникиПериодыПредварительно КАК СотрудникиПериоды
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.ФизическоеЛицо
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СотрудникиПериоды.Сотрудник) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиПериодыПредварительно КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСНесколькимиСотрудниками КАК ФизическиеЛицаСНесколькимиСотрудниками
		|		ПО СотрудникиПериоды.ФизическоеЛицо = ФизическиеЛицаСНесколькимиСотрудниками.ФизическоеЛицо
		|ГДЕ
		|	ФизическиеЛицаСНесколькимиСотрудниками.ФизическоеЛицо ЕСТЬ NULL
		|	И СотрудникиПериоды.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
	
	Если ЗначениеЗаполнено(ИсключаемыеИзПроверкиСотрудники) Тогда
		
		Запрос.УстановитьПараметр("ИсключаемыеИзПроверкиСотрудники", ИсключаемыеИзПроверкиСотрудники);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник",
			"Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник
			|	И Сотрудники.Ссылка НЕ В (&ИсключаемыеИзПроверкиСотрудники)");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Попытка принять на работу единственного сотрудника по внутреннему совместительству.
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияОКонфликте = СотрудникиФормы.ТекстСообщенияОКонфликтеВидаЗанятости(
				Перечисления.ВидыЗанятости.ВнутреннееСовместительство, Организация);
			
			СообщенияОКонфликтахВидовЗанятости.Вставить(Выборка.Сотрудник, ТекстСообщенияОКонфликте);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Остальные сотрудники физических лиц
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.Период КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериодыПредварительно КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСНесколькимиСотрудниками КАК ФизическиеЛицаСНесколькимиСотрудниками
		|		ПО СотрудникиПериоды.ФизическоеЛицо = ФизическиеЛицаСНесколькимиСотрудниками.ФизическоеЛицо
		|ГДЕ
		|	НЕ ФизическиеЛицаСНесколькимиСотрудниками.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		КадровыеДанные = "ГоловнаяОрганизация,ТабельныйНомер,ВидЗанятости,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы";
		
		Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		
		Если ИсключаемыеРегистраторы <> Неопределено Тогда
			
			ПоляОтбора = Новый Структура;
			ПоляОтбора.Вставить("КадроваяИсторияСотрудников", Новый Массив);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПоляОтбора.КадроваяИсторияСотрудников, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
			
			ПоляОтбора.Вставить("ВидыЗанятостиСотрудников", Новый Массив);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
				ПоляОтбора.ВидыЗанятостиСотрудников, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
			
		Иначе
			ПоляОтбора = Неопределено;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(Описатель, Ложь, КадровыеДанные, ПоляОтбора);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПроверяемыхСотрудников.Сотрудник КАК ПроверяемыйСотрудник,
			|	ВЫРАЗИТЬ(ТаблицаПроверяемыхСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ПроверяемыйСотрудникГоловнаяОрганизация,
			|	ТаблицаПроверяемыхСотрудников.ДатаСобытия КАК ПроверяемыйСотрудникДатаСобытия,
			|	ТаблицаПроверяемыхСотрудников.ВидЗанятости КАК ПроверяемыйСотрудникВидЗанятости,
			|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	ВЫРАЗИТЬ(ТаблицаСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация
			|		ИНАЧЕ КадровыеДанныеСотрудников.ГоловнаяОрганизация
			|	КОНЕЦ КАК ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА &Организация
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Организация,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ВЫРАЗИТЬ(ТаблицаСотрудников.Сотрудник КАК Справочник.Сотрудники).Код
			|		ИНАЧЕ КадровыеДанныеСотрудников.ТабельныйНомер
			|	КОНЕЦ КАК ТабельныйНомер,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ТаблицаСотрудников.Должность
			|		ИНАЧЕ NULL
			|	КОНЕЦ КАК Должность,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ТаблицаСотрудников.ВидЗанятости
			|		ИНАЧЕ КадровыеДанныеСотрудников.ВидЗанятости
			|	КОНЕЦ КАК ВидЗанятости,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ КадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
			|	КОНЕЦ КАК ОформленПоТрудовомуДоговору,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ТаблицаСотрудников.ДатаСобытия
			|		ИНАЧЕ КадровыеДанныеСотрудников.ДатаПриема
			|	КОНЕЦ КАК ДатаСобытия,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы
			|	КОНЕЦ КАК ДатаЗавершенияРаботы,
			|	ВЫБОР
			|		КОГДА ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоПроверяемыйСотрудник,
			|	КадровыеДанныеПроверяемыхСотрудников.ВидЗанятости КАК ПроверяемыйСотрудникТекущийВидЗанятости
			|ИЗ
			|	ВТТаблицаСотрудников КАК ТаблицаПроверяемыхСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
			|		ПО (ВЫРАЗИТЬ(ТаблицаПроверяемыхСотрудников.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = КадровыеДанныеСотрудников.ФизическоеЛицо)
			|			И ТаблицаПроверяемыхСотрудников.Сотрудник <> КадровыеДанныеСотрудников.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеПроверяемыхСотрудников
			|		ПО ТаблицаПроверяемыхСотрудников.Сотрудник = КадровыеДанныеПроверяемыхСотрудников.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаСотрудников КАК ТаблицаСотрудников
			|		ПО (КадровыеДанныеСотрудников.Сотрудник = ТаблицаСотрудников.Сотрудник)
			|ГДЕ
			|	ЕСТЬNULL(КадровыеДанныеСотрудников.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПроверяемыйСотрудник,
			|	ДатаСобытия,
			|	ДатаЗавершенияРаботы";
		
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			СотрудникиСКонфликтами = Новый Соответствие;
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.СледующийПоЗначениюПоля("ПроверяемыйСотрудник") Цикл
				
				Сотрудник = Выборка.ПроверяемыйСотрудник;
				ГоловнаяОрганизация = Выборка.ПроверяемыйСотрудникГоловнаяОрганизация;
				ВидЗанятости = Выборка.ПроверяемыйСотрудникВидЗанятости;
				ДатаСобытия = Выборка.ПроверяемыйСотрудникДатаСобытия;
				
				ЕстьОсновноеМестоРаботы  = Ложь;
				МассивКонфликтныхРабочихМест = Новый Массив;
				Пока Выборка.Следующий() Цикл
					
					Если НЕ (Выборка.ОформленПоТрудовомуДоговору И Выборка.ДатаСобытия <= ДатаСобытия
						И (Выборка.ДатаЗавершенияРаботы >= ДатаСобытия ИЛИ Выборка.ДатаЗавершенияРаботы = '00010101000000')) Тогда
						Продолжить;
					КонецЕсли;
					
					ОписаниеСотрудника = Новый Структура("Организация,ВидЗанятости,ТабельныйНомер,Должность,ЭтоПроверяемыйСотрудник");
					ЗаполнитьЗначенияСвойств(ОписаниеСотрудника, Выборка);
					
					Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
						
						Если Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
							
							МассивКонфликтныхРабочихМест.Добавить(ОписаниеСотрудника);
							
						ИначеЕсли Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство
							И Выборка.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
							
							МассивКонфликтныхРабочихМест.Добавить(ОписаниеСотрудника);
							
						КонецЕсли;
						
					ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда 
						
						Если (Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
							ИЛИ Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
								И Выборка.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
							
							МассивКонфликтныхРабочихМест.Добавить(ОписаниеСотрудника);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если (Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
						ИЛИ Выборка.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
							И Выборка.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
						
						ЕстьОсновноеМестоРаботы = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ТекстСообщенияОКонфликте = "";
				Если МассивКонфликтныхРабочихМест.Количество() > 0 Тогда
					
					СотрудникиСКонфликтами.Вставить(Выборка.ПроверяемыйСотрудник, МассивКонфликтныхРабочихМест);
					
				ИначеЕсли НЕ ЕстьОсновноеМестоРаботы
					И ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство
					И (Выборка.ПроверяемыйСотрудникТекущийВидЗанятости <> Перечисления.ВидыЗанятости.ВнутреннееСовместительство
						Или (Выборка.ДатаЗавершенияРаботы <= ДатаСобытия)) Тогда
					
					ТекстСообщенияОКонфликте = СотрудникиФормы.ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация, , Выборка.ПроверяемыйСотрудникТекущийВидЗанятости);
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстСообщенияОКонфликте) Тогда
					СообщенияОКонфликтахВидовЗанятости.Вставить(Сотрудник, ТекстСообщенияОКонфликте);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СотрудникиСКонфликтами.Количество() > 0 Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				КадровыеДанныеСотрудниковСКонфликтами = КадровыйУчет.КадровыеДанныеСотрудников(
					Ложь, ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиСКонфликтами, "Ключ"), "Организация,Должность", , ПоляОтбора);
				
				УстановитьПривилегированныйРежим(Ложь);
				
				Для Каждого ОписаниеСотрудникаСКонфликтами Из СотрудникиСКонфликтами Цикл
					
					ТекстСообщенияОКонфликте = "";
					МассивКонфликтныхРабочихМест = ОписаниеСотрудникаСКонфликтами.Значение;
					ДанныеСотрудника = КадровыеДанныеСотрудниковСКонфликтами.Найти(ОписаниеСотрудникаСКонфликтами.Ключ, "Сотрудник");
					
					Для каждого ОписаниеСотрудника Из МассивКонфликтныхРабочихМест Цикл
						
						Если ОписаниеСотрудника.Организация = Null
							Или ОписаниеСотрудника.Должность = Null Тогда
							
							Если ДанныеСотрудника <> Неопределено Тогда
								
								Если ОписаниеСотрудника.Организация = Null Тогда
									ОписаниеСотрудника.Организация = ДанныеСотрудника.Организация;
								КонецЕсли;
								
								Если ОписаниеСотрудника.Должность = Null Тогда
									ОписаниеСотрудника.Должность = ДанныеСотрудника.Должность;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
						ТекстСообщенияОКонфликте = ?(ПустаяСтрока(ТекстСообщенияОКонфликте), "", ТекстСообщенияОКонфликте + Символы.ПС)
							+ СотрудникиФормы.ТекстСообщенияОКонфликтеВидаЗанятости(
								ВидЗанятости,
								Организация,
								ОписаниеСотрудника.Организация,
								ОписаниеСотрудника.ВидЗанятости,
								ОписаниеСотрудника.ТабельныйНомер,
								ОписаниеСотрудника.Должность);
						
						Если ОписаниеСотрудника.ЭтоПроверяемыйСотрудник Тогда
							ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликте + " " + НСтр("ru = 'Сотрудник этого документа.';
																							|en = 'Employee of this document.'");
						КонецЕсли;
						
					КонецЦикла;
					
					СообщенияОКонфликтахВидовЗанятости.Вставить(ОписаниеСотрудникаСКонфликтами.Ключ, ТекстСообщенияОКонфликте);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщенияОКонфликтахВидовЗанятости;
	
КонецФункции

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	СотрудникиФормыБазовый.ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ);
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") Тогда
		
		ЗначениеИзменено = Ложь;
		Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.НастройкиВоинскогоУчета") Тогда
			
			Если Источник.Количество() > 0 Тогда
				
				Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
				Настройки.Прочитать();
				
				ЗначениеИзменено = (Настройки.ИспользоватьВоинскийУчет <> Источник[0].ИспользоватьВоинскийУчет);
			
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.НастройкиРасчетаЗарплаты") Тогда
			
			Если Источник.Количество() > 0 Тогда
				
				Настройки = РегистрыСведений.НастройкиРасчетаЗарплаты.СоздатьМенеджерЗаписи();
				Настройки.Прочитать();
				
				ЗначениеИзменено = (Настройки.ИспользоватьНачисленияПоДоговорам <> Источник[0].ИспользоватьНачисленияПоДоговорам);
			
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ЗначениеИзменено Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено");
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	МассивРежимовРаботы = Новый Массив;
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.ФизическоеЛицо);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоДоговоруГПХ);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговоруИДоговоруГПХ);
	
	РегистрыСведений.СведенияОРежимахРаботыФормыСотрудника.ЗаполнитьНастройкиРежимов(МассивРежимовРаботы);
	РегистрыСведений.СведенияОРежимахРаботыФормыСотрудникаРасширенный.ЗаполнитьНастройкиРежимов(МассивРежимовРаботы);
		
КонецПроцедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение) Экспорт
	
	Если НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеКадровогоСостоянияРасширенная,ЧтениеКадровогоСостоянияРасширенная") Тогда
		
		ТаблицаРаботников = Новый ТаблицаЗначений;
		ТаблицаРаботников.Колонки.Добавить("Организация");
		
		Возврат ТаблицаРаботников;
		
	КонецЕсли; 
	
	ТаблицаРаботников = СотрудникиФормыБазовый.ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение);
	
	ТаблицаРаботников.Колонки.Добавить("Договорник", Новый ОписаниеТипов("Булево"));
	ТаблицаРаботников.Колонки.Добавить("ТипДоговора", Новый ОписаниеТипов("Строка"));
	ТаблицаРаботников.Колонки.Добавить("ДатаДоговора", Новый ОписаниеТипов("Дата"));
		
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПоРабочимМестам.Сотрудник,
			|	ТаблицаПоРабочимМестам.Период,
			|	ТаблицаПоРабочимМестам.ГоловнаяОрганизация
			|ПОМЕСТИТЬ ВТТаблицаПоРабочимМестам
			|ИЗ
			|	&ТаблицаПоРабочимМестам КАК ТаблицаПоРабочимМестам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаПоРабочимМестам.Сотрудник,
			|	ТаблицаПоРабочимМестам.Период,
			|	ТаблицаПоРабочимМестам.ГоловнаяОрганизация
			|ПОМЕСТИТЬ ВТСотрудникиДоговорники
			|ИЗ
			|	ВТТаблицаПоРабочимМестам КАК ТаблицаПоРабочимМестам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
			|		ПО ТаблицаПоРабочимМестам.Сотрудник = РолиСотрудников.Сотрудник
			|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудниковРаботники
			|		ПО ТаблицаПоРабочимМестам.Сотрудник = РолиСотрудниковРаботники.Сотрудник
			|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
			|ГДЕ
			|	РолиСотрудниковРаботники.Сотрудник ЕСТЬ NULL 
			|	И &СотрудникИсключение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
			|	МИНИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала) КАК ДатаНачала
			|ПОМЕСТИТЬ ВТСотрудникиСДатойНачалаДоговора
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДоговорники КАК СотрудникиДоговорники
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиДоговорники.Сотрудник
			|ГДЕ
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ТекущаяДата
			|
			|СГРУППИРОВАТЬ ПО
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СотрудникиСДатойНачалаДоговора.Сотрудник,
			|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.Регистратор) КАК ДоговорГПХ
			|ПОМЕСТИТЬ ВТСотрудникСДоговором
			|ИЗ
			|	ВТСотрудникиСДатойНачалаДоговора КАК СотрудникиСДатойНачалаДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ПО СотрудникиСДатойНачалаДоговора.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
			|			И СотрудникиСДатойНачалаДоговора.ДатаНачала = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|			И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ТекущаяДата)
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиСДатойНачалаДоговора.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТСотрудникСДоговором.Сотрудник,
			|	ИСТИНА КАК СотрудникАктуален,
			|	ИСТИНА КАК Договорник,
			|	ВТСотрудникСДоговором.ДоговорГПХ.Организация КАК Организация,
			|	ВТСотрудникСДоговором.ДоговорГПХ.ДатаНачала КАК ДатаДоговора,
			|	ВТСотрудникСДоговором.ДоговорГПХ.Сумма КАК ТарифОклад,
			|	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(ВТСотрудникСДоговором.ДоговорГПХ)) КАК ТипДоговора
			|ИЗ
			|	ВТСотрудникСДоговором КАК ВТСотрудникСДоговором";
					   
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ТаблицаПоРабочимМестам", ТаблицаРаботников);
		
		Если ЗначениеЗаполнено(СотрудникИсключение) Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, 
				"И &СотрудникИсключение", 
				"И ТаблицаПоРабочимМестам.Сотрудник <> &СотрудникИсключение");
			
			Запрос.УстановитьПараметр("СотрудникИсключение", СотрудникИсключение);
			
		Иначе
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СотрудникИсключение", "");
			
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Истина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтрокаТаблицаРаботников = ТаблицаРаботников.Найти(Выборка.Сотрудник, "Сотрудник");
				Если СтрокаТаблицаРаботников = Неопределено Тогда
					
					СтрокаТаблицаРаботников = ТаблицаРаботников.Добавить();
					
				КонецЕсли;
				
				Если НЕ СтрокаТаблицаРаботников.СотрудникАктуален Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаРаботников, Выборка);
					
				КонецЕсли; 
				
			КонецЦикла;
			
			ТаблицаРаботников.Сортировать("СотрудникАктуален Убыв, ДатаПриема Возр, Организация");
			
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;

	Возврат ТаблицаРаботников;
	
КонецФункции

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений, ВыводитьПодробнуюИнформацию) Экспорт
	
	Если ДанныеСотрудника.Договорник = Истина Тогда
		
		Если ВыводитьПодробнуюИнформацию Тогда
			
			Возврат НСтр("ru = 'Подробнее...';
						|en = 'More...'");
			
		Иначе
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 с %2';
					|en = '%1 from %2'"),
				ДанныеСотрудника.ТипДоговора,
				Формат(ДанныеСотрудника.ДатаДоговора, "ДЛФ=D"));
		
		КонецЕсли;
		
	Иначе
		
		Возврат СотрудникиФормыБазовый.ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений, ВыводитьПодробнуюИнформацию);
		
	КонецЕсли;
	
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений) Экспорт
	
	Если ДанныеСотрудника.Договорник = Ложь Тогда
		
		Возврат СотрудникиФормыБазовый.ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений);
		
	Иначе
		
		СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 с %2';
				|en = '%1 from %2'"),
			ДанныеСотрудника.ТипДоговора,
			Формат(ДанныеСотрудника.ДатаДоговора, "ДЛФ=D"));
		
		Результат = Новый Структура;
		Результат.Вставить("ИнфоНадписьПериодРаботы", СтрокаПериодРаботы);
		Результат.Вставить("ИнфоНадписьОрганизация", ?(ЗначениеЗаполнено(РеквизитыОрганизации.Наименование), РеквизитыОрганизации.Наименование,  НСТР("ru = 'не указана';
																																						|en = 'not specified'")));
		Результат.Вставить("ИнфоНадписьДолжность", "");
		Результат.Вставить("ИнфоНадписьОклад", "");
		Возврат Результат;
		
	КонецЕсли; 
	
КонецФункции

Процедура УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника) Экспорт
	
	ВидимостьЭлементов = (ДанныеСотрудника.Договорник <> Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИнфоНадписьДолжность" + НомерСотрудника,
		"Видимость",
		ВидимостьЭлементов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ИнфоНадписьОклад" + НомерСотрудника,
		"Видимость",
		ВидимостьЭлементов);
		
КонецПроцедуры

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	СотрудникиФормыБазовый.ЗаполнитьПервоначальныеЗначения(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиФормыБазовый.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
		МодульОхранаТрудаФормы.СотрудникиУстановитьПараметрыФормы(Форма);
	КонецЕсли;
	
	СотрудникиФормыБазовый.СотрудникиОбновитьЭлементыФормы(Форма);
	
	// Получим текущий процент северной надбавки.
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ПрименятьСевернуюНадбавку") Тогда
			
			ПрименятьСевернуюНадбавку = ЗарплатаКадрыРасширенный.ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия(
				Форма.ТекущееПодразделение, ОбщегоНазначения.ТекущаяДатаПользователя());
			
			Если ПрименятьСевернуюНадбавку Тогда
				
				Форма.ТекущийПроцентСевернойНадбавки = КадровыйУчетРасширенный.ПроцентСевернойНадбавки(
					Форма.Параметры.Ключ, ОбщегоНазначения.ТекущаяДатаПользователя());
				ВидимотсьПроцента = Истина;
			Иначе
				ВидимотсьПроцента = Ложь;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущийПроцентСевернойНадбавки",
				"Видимость",
				ВидимотсьПроцента);
			
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	СостояниеИРолиСотрудника = СостояниеИРолиСотрудника(Форма.СотрудникСсылка);
	
	ЭтоПодработка = ЗначениеЗаполнено(Форма.Сотрудник.Ссылка) И Форма.Сотрудник.Ссылка <> Форма.Сотрудник.ГоловнойСотрудник;
	
	// Настройка команд панели навигации формы.
	СтруктураПараметровФО = Новый Структура;
	Если НЕ СостояниеИРолиСотрудника.Работник И НЕ СостояниеИРолиСотрудника.Договорник
		ИЛИ ЭтоПодработка Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	ИначеЕсли СостояниеИРолиСотрудника.Работник И НЕ СостояниеИРолиСотрудника.Договорник Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	ИначеЕсли НЕ СостояниеИРолиСотрудника.Работник И СостояниеИРолиСотрудника.Договорник Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоДоговоруГПХ);
	ИначеЕсли СостояниеИРолиСотрудника.Работник И СостояниеИРолиСотрудника.Договорник Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговоруИДоговоруГПХ);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	Если НЕ ЭтоПодработка Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"НазначениеПодработки",
			"Видимость",
			Ложь);
		
	Иначе
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ПлановыйАванс",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ИсторияИзмененийМестаРаботы",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТекущийВидЗанятости",
			"Видимость",
			Ложь);
		
	КонецЕсли;
		
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		РольСотрудникаПриСоздании = Неопределено;
		Форма.Параметры.Свойство("РольСотрудника", РольСотрудникаПриСоздании);
		Если НЕ ЗначениеЗаполнено(РольСотрудникаПриСоздании) 
			И Форма.Параметры.Свойство("ЗначенияЗаполнения") Тогда
			Форма.Параметры.ЗначенияЗаполнения.Свойство("РольСотрудника", РольСотрудникаПриСоздании);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(РольСотрудникаПриСоздании) Тогда
			Форма.РольСотрудникаПриСоздании = РольСотрудникаПриСоздании;
			Если Форма.Параметры.Свойство("ГоловнаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = Форма.Параметры.ГоловнаяОрганизация;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Если только создаем договорника - не показываем закладки специфичные для договорников.
	Если Форма.РольСотрудникаПриСоздании = Перечисления.РолиСотрудников.Договорник Тогда
		СостояниеИРолиСотрудника.Договорник = Ложь;
		СостояниеИРолиСотрудника.РаботникИЛИДоговорник = СостояниеИРолиСотрудника.Работник;
	КонецЕсли; 
	
	Форма.Элементы.ГоловнаяОрганизация.ТолькоПросмотр = СостояниеИРолиСотрудника.Оформлен ИЛИ ЭтоПодработка;
	Если НЕ СостояниеИРолиСотрудника.Работник И НЕ ЭтоПодработка Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТекущаяОрганизация",
			"Видимость",
			Ложь);
			
	КонецЕсли;
	
	// Скроем панель оформления документов, если создаем сотрудника с определенной ролью
	// а так же если сотруднику уже назначена какая либо роль.
	Если ЗначениеЗаполнено(Форма.РольСотрудникаПриСоздании) ИЛИ СостояниеИРолиСотрудника.РаботникИЛИДоговорник Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			Ложь);
		
	КонецЕсли;
		
	// Скроем меню оформления документов, если создаем сотрудника с определенной ролью.
	Если ЗначениеЗаполнено(Форма.РольСотрудникаПриСоздании) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ОформитьДокумент",
			"Видимость",
			Ложь);
	КонецЕсли;
	
	// Установим видимость декораций напоминаний о дне рождения сотрудник
	УстановитьВидимостьДекорацийНапоминанияОДнеРождения(Форма);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		Модуль.СотрудникиОбновитьЭлементыФормы(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРаботаФормы = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРаботаФормы");
		МодульДистанционнаяРаботаФормы.СотрудникиОбновитьЭлементыФормы(Форма);
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ДоступныТолькоДанныеСотрудника") И Форма.Параметры.ДоступныТолькоДанныеСотрудника Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ОбразованиеКвалификация",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"Семья",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ТрудоваяДеятельность",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ВоинскийУчет",
			"Видимость",
			Ложь);
		
		ГруппаДополнительныеДанные2 = Форма.Элементы.Найти("ГруппаДополнительныеДанные2");
		Если ГруппаДополнительныеДанные2 <> Неопределено Тогда
			
			НалогНаДоходы = Форма.Элементы.Найти("НалогНаДоходы");
			Если НалогНаДоходы <> Неопределено Тогда
				Форма.Элементы.Переместить(НалогНаДоходы, ГруппаДополнительныеДанные2, Форма.Элементы.Найти("Отсутствия"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеСпособовРасчетаАванса(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ТекущийСпособРасчетаАванса) Тогда
			
		Если Форма.ТекущийСпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.РасчетомЗаПервуюПоловинуМесяца Тогда
				
			Форма.ПлановыйАванс = НСтр("ru = 'Расчет первой половины месяца';
										|en = 'Calculate the first half of the month'");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Заголовок",
				НСтр("ru = 'Аванс';
					|en = 'Advance'"));
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"ГоризонтальноеПоложение",
				ГоризонтальноеПоложениеЭлемента.Лево);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Ширина",
				21);
							
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Видимость",
				Истина);
				
		Иначе
				
			СотрудникиФормыБазовый.УстановитьОтображениеСпособовРасчетаАванса(Форма);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"ГоризонтальноеПоложение",
				ГоризонтальноеПоложениеЭлемента.Право);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ПлановыйАванс",
				"Ширина",
				14);
			
		КонецЕсли;
			
	КонецЕсли; 
		
КонецПроцедуры

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	СотрудникиФормыБазовый.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ);
	ПроверитьУникальностьФизическогоЛицаВФорме(Форма, Отказ);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация) Экспорт
	
	СотрудникиФормыБазовый.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация);
	
КонецПроцедуры

Функция ТаблицаСовпаденийФизическихЛицПоИННСНИЛСДокументаУдостоверяющегоЛичность(ФизическоеЛицоСсылка, ИНН, СтраховойНомерПФР, ДокументВид, ДокументСерия, ДокументНомер)
	
	ТаблицаСовпадений = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаПроверкиИНН = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСовпадения
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &ФизическоеЛицоСсылка
		|	И ФизическиеЛица.ИНН = &ИНН
		|	И &ИНН <> """"";
	
	ТекстЗапросаПроверкиСНИЛС = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСовпадения
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &ФизическоеЛицоСсылка
		|	И ФизическиеЛица.СтраховойНомерПФР = &СтраховойНомерПФР
		|	И &СтраховойНомерПФР <> """"";
	
	ТекстЗапросаПроверкиДокумента = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыФизическихЛиц.Физлицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСовпадения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|ГДЕ
		|	ДокументыФизическихЛиц.Физлицо ССЫЛКА Справочник.ФизическиеЛица
		|	И ДокументыФизическихЛиц.Физлицо <> &ФизическоеЛицоСсылка
		|	И ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента
		|	И ДокументыФизическихЛиц.Серия = &Серия
		|	И ДокументыФизическихЛиц.Номер = &Номер
		|	И &ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)
		|	И ДокументыФизическихЛиц.Номер <> """"";
	
	ТекстЗапросаВТСовпадения = "";
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
		
		ТекстЗапросаВТСовпадения = ТекстЗапросаПроверкиИНН;
		Запрос.УстановитьПараметр("ИНН", ИНН);
		
	КонецЕсли;
	
	Если КадровыйУчетКлиентСервер.СНИЛСЗаполнен(СтраховойНомерПФР) Тогда
		
		Если ПустаяСтрока(ТекстЗапросаВТСовпадения) Тогда
			ТекстЗапросаВТСовпадения = ТекстЗапросаПроверкиСНИЛС;
		Иначе
			ТекстЗапросаВТСовпадения = ТекстЗапросаВТСовпадения + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|" + СтрЗаменить(ТекстЗапросаПроверкиСНИЛС, "ПОМЕСТИТЬ ВТСовпадения", "");
		КонецЕсли; 
		Запрос.УстановитьПараметр("СтраховойНомерПФР", СтраховойНомерПФР);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументВид) Тогда
		
		Если ПустаяСтрока(ТекстЗапросаВТСовпадения) Тогда
			ТекстЗапросаВТСовпадения = ТекстЗапросаПроверкиДокумента;
		Иначе
			ТекстЗапросаВТСовпадения = ТекстЗапросаВТСовпадения + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|" + СтрЗаменить(ТекстЗапросаПроверкиДокумента, "ПОМЕСТИТЬ ВТСовпадения", "");
		КонецЕсли; 
		
	КонецЕсли; 

	Если НЕ ПустаяСтрока(ТекстЗапросаВТСовпадения) Тогда
		
		Запрос.Текст = ТекстЗапросаВТСовпадения + "
		|;
		|
		|//////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСовпадения.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТСовпадения.ФизическоеЛицо.ИНН КАК ИНН,
		|	ВТСовпадения.ФизическоеЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ВТСовпадения.ФизическоеЛицо.ДатаРождения КАК ДатаРождения,
		|	ВТСовпадения.ФизическоеЛицо.Пол КАК Пол,
		|	ДокументыФизическихЛиц.ВидДокумента КАК ДокументВид,
		|	ДокументыФизическихЛиц.Серия КАК ДокументСерия,
		|	ДокументыФизическихЛиц.Номер КАК ДокументНомер,
		|	ДокументыФизическихЛиц.Представление КАК ДокументПредставление
		|ИЗ
		|	ВТСовпадения КАК ВТСовпадения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО ВТСовпадения.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ВидДокумента = &ВидДокумента)
		|			И (ДокументыФизическихЛиц.Серия = &Серия)
		|			И (ДокументыФизическихЛиц.Номер = &Номер)";
		
		Запрос.УстановитьПараметр("ФизическоеЛицоСсылка", 	ФизическоеЛицоСсылка);
		Запрос.УстановитьПараметр("ВидДокумента", 			ДокументВид);
		Запрос.УстановитьПараметр("Серия", 					ДокументСерия);
		Запрос.УстановитьПараметр("Номер", 					ДокументНомер);
		
		УстановитьПривилегированныйРежим(Истина);
	
		ТаблицаСовпадений = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаСовпадений Из ТаблицаСовпадений Цикл
			СтрокаСовпадений.ДокументСерия = СокрЛП(СтрокаСовпадений.ДокументСерия);
			СтрокаСовпадений.ДокументНомер = СокрЛП(СтрокаСовпадений.ДокументНомер);
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат ТаблицаСовпадений;
	
КонецФункции

Процедура ЗаполнитьДанныеФизическиеЛиц(СтруктураВозврат, МассивФизическихЛиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&МассивФизическихЛиц)";
	
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	
	МассивДоступныхФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	Если МассивДоступныхФизическихЛиц.Количество() = МассивФизическихЛиц.Количество() Тогда
		
		СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Истина);
		
		ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
			Истина, 
			МассивФизическихЛиц, 
			СотрудникиФормы.КадровыеДанныеДляФормыПохожихФизическихЛиц(), 
			ТекущаяДатаСеанса());
		
		СтруктураВозврат.Вставить("ДанныеФизическихЛиц", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеФизическихЛиц));
		
	Иначе
		СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатыПроверкиУникальностиФизическогоЛица(ФизическоеЛицоСсылка, ИНН, СтраховойНомерПФР, ДокументВид = "", ДокументСерия = "", ДокументНомер = "") Экспорт
	
	СтруктураВозврат = Новый Структура("ФизическоеЛицоУникально,СообщенияПроверки", Истина, Новый Массив);
	
	РеквизитыФизическогоЛица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоСсылка, "Фамилия, Имя, Отчество");
	СтруктураВозврат.Вставить("Фамилия", РеквизитыФизическогоЛица.Фамилия);
	СтруктураВозврат.Вставить("Имя", РеквизитыФизическогоЛица.Имя);
	СтруктураВозврат.Вставить("Отчество", РеквизитыФизическогоЛица.Отчество);
	
	ТаблицаСовпадений = ТаблицаСовпаденийФизическихЛицПоИННСНИЛСДокументаУдостоверяющегоЛичность(
							ФизическоеЛицоСсылка,
							ИНН,
							СтраховойНомерПФР,
							ДокументВид,
							ДокументСерия,
							ДокументНомер);
							
	Если ТаблицаСовпадений.Количество() > 0 Тогда
		
		СтруктураВозврат.ФизическоеЛицоУникально = Ложь;
		
		МассивФизическихЛиц = ТаблицаСовпадений.ВыгрузитьКолонку("ФизическоеЛицо");
		
		ЗаполнитьДанныеФизическиеЛиц(СтруктураВозврат, МассивФизическихЛиц);
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			СтрокиСИНН = ТаблицаСовпадений.НайтиСтроки(Новый Структура("ИНН", ИНН));
			Если СтрокиСИНН.Количество() > 0 Тогда
				СтруктураСообщения = Новый Структура("ИмяПоля,ИмяОбъекта,ТекстСообщенияОбОшибке", "ИНН", "ФизическоеЛицо", "");
				СтруктураСообщения.ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Найдена запись о человеке, имеющем такой же ИНН (%1)';
						|en = 'Entry about a person with the same TIN (%1) is found'"),
					ИНН);
				СтруктураВозврат.СообщенияПроверки.Добавить(СтруктураСообщения);
			КонецЕсли;
		КонецЕсли; 
		
		Если КадровыйУчетКлиентСервер.СНИЛСЗаполнен(СтраховойНомерПФР) Тогда
			СтрокиССтраховойНомерПФР = ТаблицаСовпадений.НайтиСтроки(Новый Структура("СтраховойНомерПФР", СтраховойНомерПФР));
			Если СтрокиССтраховойНомерПФР.Количество() > 0 Тогда
				СтруктураСообщения = Новый Структура("ИмяПоля,ИмяОбъекта,ТекстСообщенияОбОшибке", "СтраховойНомерПФР", "ФизическоеЛицо", "");
				СтруктураСообщения.ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Найдена запись о человеке, имеющем такой же СНИЛС (%1)';
						|en = 'Entry about a person with the same SNILS (%1) is found'"),
					СтраховойНомерПФР);
				СтруктураВозврат.СообщенияПроверки.Добавить(СтруктураСообщения);
			КонецЕсли;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ДокументВид) Тогда
			СтрокиСДокументом = ТаблицаСовпадений.НайтиСтроки(Новый Структура("ДокументВид,ДокументСерия,ДокументНомер", 
				ДокументВид,
				СокрЛП(ДокументСерия),
				СокрЛП(ДокументНомер)));
			Если СтрокиСДокументом.Количество() > 0 Тогда
				СтруктураСообщения = Новый Структура("ИмяПоля,ИмяОбъекта,ТекстСообщенияОбОшибке", "Документ", "ДокументыФизическихЛиц", "");
				СтруктураСообщения.ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Найдена запись о человеке, имеющем такой же документ, удостоверяющий личность (%1 №%2 %3)';
						|en = 'Entry about a person with the same identity document (%1 No. %2 %3) is found'"),
					ДокументВид,
					?(ПустаяСтрока(ДокументСерия), "", " " + ДокументСерия),
					ДокументНомер);
				СтруктураВозврат.СообщенияПроверки.Добавить(СтруктураСообщения);
			КонецЕсли;
		КонецЕсли; 
		
		СтруктураВозврат.Вставить("ДоступнаРольСохранениеДанныхЗадвоенныхФизическихЛиц", Пользователи.РолиДоступны("СохранениеДанныхЗадвоенныхФизическихЛиц", , Ложь));
	
	КонецЕсли;
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ПроверитьУникальностьФизическогоЛицаВФорме(Форма, Отказ)
	
	Если Форма.ДокументыФизическихЛиц = Неопределено Тогда
		
	МенеджерЗаписиДокументыФизическихЛиц = СотрудникиФормыБазовый.МенеджерПоследнейЗаписиДокументовФизическихЛиц(Форма.ФизическоеЛицоСсылка);
		
	Форма.ДокументыФизическихЛиц = Новый ФиксированнаяСтруктура(
		ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписиДокументыФизическихЛиц, Метаданные.РегистрыСведений.ДокументыФизическихЛиц));
		
	КонецЕсли;
	
	РезультатПроверки = РезультатыПроверкиУникальностиФизическогоЛица(
							Форма.ФизическоеЛицоСсылка,
							Форма.ФизическоеЛицо.ИНН,
							Форма.ФизическоеЛицо.СтраховойНомерПФР,
							Форма.ДокументыФизическихЛиц.ВидДокумента,
							Форма.ДокументыФизическихЛиц.Серия,
							Форма.ДокументыФизическихЛиц.Номер);
		
	Если НЕ РезультатПроверки.ФизическоеЛицоУникально 
		И (Форма.Параметры.Ключ.Пустая()
			ИЛИ НЕ РезультатПроверки.ДоступнаРольСохранениеДанныхЗадвоенныхФизическихЛиц) Тогда
		
		Для каждого СообщениеПроверки Из РезультатПроверки.СообщенияПроверки Цикл
			ОбщегоНазначения.СообщитьПользователю(СообщениеПроверки.ТекстСообщенияОбОшибке, , СообщениеПроверки.ИмяПоля, СообщениеПроверки.ИмяОбъекта, Отказ);
		КонецЦикла;
		
		Если НЕ РезультатПроверки.ДоступнаРольСохранениеДанныхЗадвоенныхФизическихЛиц Тогда
			ТекстСообщения = НСтр("ru = 'Запись невозможна. Для разрешения конфликтов, обратитесь к администратору информационной системы.';
									|en = 'Cannot save. Contact the information system administrator to resolve the conflict.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		ИначеЕсли Форма.Параметры.Ключ.Пустая() Тогда
			ТекстСообщения = НСтр("ru = 'Запись данных нового человека невозможна.';
									|en = 'Cannot save data for a new person.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
		Возврат;
	КонецЕсли;
	
	СотрудникиФормыБазовый.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	
КонецПроцедуры

Функция СостояниеИРолиСотрудника(СотрудникСсылка)
	
	РолиСотрудника = Новый Структура;
	РолиСотрудника.Вставить("Работник", Ложь);
	РолиСотрудника.Вставить("Договорник", Ложь);
	РолиСотрудника.Вставить("РаботникИЛИДоговорник", Ложь);
	РолиСотрудника.Вставить("Оформлен", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорАвторскогоЗаказа.Сотрудник
	|ПОМЕСТИТЬ ВТЕстьПроведенныеДоговорыГПХ
	|ИЗ
	|	Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
	|ГДЕ
	|	ДоговорАвторскогоЗаказа.Сотрудник = &СотрудникСсылка
	|	И ДоговорАвторскогоЗаказа.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорРаботыУслуги.Сотрудник
	|ИЗ
	|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|ГДЕ
	|	ДоговорРаботыУслуги.Сотрудник = &СотрудникСсылка
	|	И ДоговорРаботыУслуги.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Договорники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Договорник,
	|	ВЫБОР
	|		КОГДА Работники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Работник,
	|	ВЫБОР
	|		КОГДА Работники.Сотрудник ЕСТЬ NULL 
	|				И Договорники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РаботникИЛИДоговорник,
	|	ВЫБОР
	|		КОГДА ЕстьПроведенныеДоговорыГПХ.Сотрудник ЕСТЬ NULL 
	|				И Работники.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Оформлен
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК Договорники
	|		ПО Сотрудники.Ссылка = Договорники.Сотрудник
	|			И (Договорники.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕстьПроведенныеДоговорыГПХ КАК ЕстьПроведенныеДоговорыГПХ
	|		ПО Сотрудники.Ссылка = ЕстьПроведенныеДоговорыГПХ.Сотрудник
	|ГДЕ
	|	Сотрудники.Ссылка = &СотрудникСсылка";
	
	Запрос.УстановитьПараметр("СотрудникСсылка", СотрудникСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(РолиСотрудника, Выборка);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РолиСотрудника;
	
КонецФункции

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = СотрудникиФормыБазовый.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = КлючиСтруктурыТекущихКадровыхДанныхСотрудника + ",ГрафикРаботы";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодработки") Тогда
		КлючиСтруктурыТекущихКадровыхДанныхСотрудника = КлючиСтруктурыТекущихКадровыхДанныхСотрудника + ",НазначениеПодработки";
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		КлючиСтруктурыТекущихКадровыхДанныхСотрудника = КлючиСтруктурыТекущихКадровыхДанныхСотрудника + ",ТекущаяДолжностьПоШтатномуРасписанию";
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужбаФормы = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
		МодульГосударственнаяСлужбаФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(
			КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда 
		МодульДистанционнаяРаботаФормы = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРаботаФормы");
		МодульДистанционнаяРаботаФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(
			КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТрудаФормы = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТрудаФормы");
		МодульРабочиеМестаОхраныТрудаФормы.ДобавитьКлючиСтруктурыТекущихКадровыхДанныхСотрудника(
			КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли;
	
	Возврат КлючиСтруктурыТекущихКадровыхДанныхСотрудника; 
	
КонецФункции

Функция КлючиСтруктурыТекущихТарифныхСтавокСотрудника() Экспорт
	
	КлючиСтруктуры = СотрудникиФормыБазовый.КлючиСтруктурыТекущихТарифныхСтавокСотрудника();
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		КлючиСтруктуры = ?(ПустаяСтрока(КлючиСтруктуры), "", КлючиСтруктуры + ",") + "ТекущийФОТ";
	КонецЕсли;
	
	Возврат КлючиСтруктуры;
	
КонецФункции

Процедура ДополнитьФормуИнформациейОДругихРоляхФизическогоЛица(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	 
	Если Выборка.Следующий() Тогда
		Форма.ОднаОрганизация = Выборка.КоличествоОрганизаций < 2;
	Иначе
		Форма.ОднаОрганизация = Истина;
	КонецЕсли; 
	
	Форма.РолиФизическогоЛица.Загрузить(ТаблицаДругихРолейФизическогоЛица(Форма.ФизическоеЛицоСсылка));
	
	СотрудникиКлиентСерверРасширенный.УстановитьИнформациюОДругихРоляхФизическогоЛица(Форма);
	
КонецПроцедуры

Функция ТаблицаДругихРолейФизическогоЛица(ФизическоеЛицоСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РолиФизическихЛиц.ФизическоеЛицо,
		|	РолиФизическихЛиц.Организация,
		|	РолиФизическихЛиц.Роль
		|ИЗ
		|	РегистрСведений.РолиФизическихЛиц КАК РолиФизическихЛиц
		|ГДЕ
		|	РолиФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо
		|	И РолиФизическихЛиц.Роль <> ЗНАЧЕНИЕ(Перечисление.РолиФизическихЛиц.Сотрудник)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РолиФизическихЛиц.Организация.Наименование,
		|	РолиФизическихЛиц.Роль";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПредставлениеПроцентаСевернойНадбавки(ФизическоеЛицо) Экспорт
	
	ПредставлениеПроцента = НСтр("ru = 'Процент северной надбавки не задан.';
								|en = 'Northern allowance percent is not specified.'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ПроцентСевернойНадбавкиИзменяется КАК ПроцентСевернойНадбавкиИзменяется,
		|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.Период КАК Период,
		|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ПроцентСевернойНадбавки КАК ТекущийПроцентСевернойНадбавки
		|ИЗ
		|	РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц КАК ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних
		|		ПО ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо = ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ПроцентСевернойНадбавкиИзменяется Тогда
			
			Если Выборка.ТекущийПроцентСевернойНадбавки = Null Тогда
				ПредставлениеПроцента = НСтр("ru = 'Процент северной надбавки изменяется автоматически. Текущий процент не задан.';
											|en = 'Northern allowance percent is changed automatically. The current percent is not specified.'");
			Иначе
				
				ПредставлениеПроцента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процент северной надбавки изменяется автоматически. С %1 - %2%.';
						|en = 'Northern allowance percent is changed automatically. From  %1 - %2%.'"),
					Формат(Выборка.Период, "ДЛФ=DD"),
					Выборка.ТекущийПроцентСевернойНадбавки);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.ТекущийПроцентСевернойНадбавки <> Null Тогда
			ПредставлениеПроцента = НСтр("ru = 'Процент северной надбавки';
										|en = 'Northern allowance percent'") + " " + Выборка.ТекущийПроцентСевернойНадбавки + "%";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеПроцента;
	
КонецФункции

// Возвращает ссылку на первый не закрытый  актом договор ГПХ.
//
// Параметры:
//		Сотрудник - СправочникСсылка.Сотрудники
//
// Возвращаемое значение;
//		Неопределено 							- если договор не найден
//		ДокументСсылка.ДоговорАвторскогоЗаказа
//		ДокументСсылка.ДоговорРаботыУслуги.
//
Функция ДоговорГПХНеЗакрытыйАктом(Сотрудник) Экспорт
	
	ДоговорГПХ = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорАвторскогоЗаказа.Ссылка,
		|	ДоговорАвторскогоЗаказа.Сумма,
		|	ДоговорАвторскогоЗаказа.ДатаОкончания
		|ПОМЕСТИТЬ ВТДоговорыПоАктам
		|ИЗ
		|	Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
		|ГДЕ
		|	ДоговорАвторскогоЗаказа.Сотрудник = &Сотрудник
		|	И ДоговорАвторскогоЗаказа.Проведен
		|	И ДоговорАвторскогоЗаказа.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорРаботыУслуги.Ссылка,
		|	ДоговорРаботыУслуги.Сумма,
		|	ДоговорРаботыУслуги.ДатаОкончания
		|ИЗ
		|	Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
		|ГДЕ
		|	ДоговорРаботыУслуги.Сотрудник = &Сотрудник
		|	И ДоговорРаботыУслуги.Проведен
		|	И ДоговорРаботыУслуги.СпособОплаты = ЗНАЧЕНИЕ(Перечисление.СпособыОплатыПоДоговоруГПХ.ПоАктамВыполненныхРабот)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыПоАктам.Ссылка,
		|	ДоговорыПоАктам.Сумма,
		|	ДоговорыПоАктам.ДатаОкончания,
		|	СУММА(ПлановыеНачисленияПоДоговорам.Сумма) КАК СуммаАктов
		|ПОМЕСТИТЬ ВТДоговорыСАктами
		|ИЗ
		|	ВТДоговорыПоАктам КАК ДоговорыПоАктам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияПоДоговорам КАК ПлановыеНачисленияПоДоговорам
		|		ПО ДоговорыПоАктам.Ссылка = ПлановыеНачисленияПоДоговорам.Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыПоАктам.Ссылка,
		|	ДоговорыПоАктам.Сумма,
		|	ДоговорыПоАктам.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыСАктами.Ссылка
		|ИЗ
		|	ВТДоговорыСАктами КАК ДоговорыСАктами
		|ГДЕ
		|	ДоговорыСАктами.Сумма > ДоговорыСАктами.СуммаАктов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыСАктами.ДатаОкончания";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДоговорГПХ = Выборка.Ссылка;
		
	КонецЕсли; 
	
	Возврат ДоговорГПХ;
		
КонецФункции

Процедура ОбновитьСостояниеСотрудника(Форма)
	
	ПараметрыСостояния = СостоянияСотрудников.ПараметрыТекущегоСостоянияСотрудника(Форма.СотрудникСсылка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		Модуль.ОбновитьСостояниеСотрудника(Форма, ПараметрыСостояния);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСостояния.СостояниеСотрудника) И Не ПараметрыСостояния.ЗаменитьЗаголовокНадписи Тогда
		ПараметрыСостояния.ЗаголовокНадписи = СтрШаблон(ПараметрыСостояния.ЗаголовокНадписи,
			ПараметрыСостояния.СостояниеСотрудника,
			?(ЗначениеЗаполнено(ПараметрыСостояния.ДатаОкончанияСостояния), НСтр("ru = 'по';
																				|en = 'to'"), ""),
			?(ЗначениеЗаполнено(ПараметрыСостояния.ДатаОкончанияСостояния), Формат(ПараметрыСостояния.ДатаОкончанияСостояния, "ДЛФ=ДД"), ""));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаСостояниеСотрудника",
		"Видимость",
		ЗначениеЗаполнено(ПараметрыСостояния.СостояниеСотрудника));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"СостоянияСотрудника",
		"Заголовок",
		ПараметрыСостояния.ЗаголовокНадписи);
	
КонецПроцедуры

Процедура ЗаполнитьФотографию(Форма)
	
	Форма.АдресФотографии = КадровыйУчетРасширенный.АдресФотографииФизическогоЛица(Форма.ФизическоеЛицо.Ссылка);
	
	// Добавление элементов формы
	Если Форма.Элементы.Найти("АдресФотографии") <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ГруппаФотография = Элементы.ГруппаФотография;
	
	ПолеФотографияОтступ = Элементы.Добавить("ФотографияОтступ", Тип("ДекорацияФормы"), ГруппаФотография);
	ПолеФотографияОтступ.Вид = ВидДекорацииФормы.Надпись;
	ПолеФотографияОтступ.РастягиватьПоГоризонтали = Истина;
	
	ПолеАдресФотографии = Элементы.Добавить("АдресФотографии", Тип("ПолеФормы"), ГруппаФотография);
	ПолеАдресФотографии.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеАдресФотографии.ПутьКДанным = "АдресФотографии";
	ПолеАдресФотографии.РастягиватьПоВертикали = Ложь;
	ПолеАдресФотографии.РастягиватьПоГоризонтали = Ложь;
	ПолеАдресФотографии.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеАдресФотографии.Гиперссылка = Истина;
	ПолеАдресФотографии.ТекстНевыбраннойКартинки = НСтр("ru = 'Выбрать';
														|en = 'Select'");
	ПолеАдресФотографии.РазмерКартинки = РазмерКартинки.АвтоРазмер;
	ПолеАдресФотографии.ЦветТекста = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
	ПолеАдресФотографии.Высота = 4;
	ПолеАдресФотографии.Ширина = 10;
	ПолеАдресФотографии.УстановитьДействие("Нажатие", "Подключаемый_АдресФотографииНажатие");
	
КонецПроцедуры

Процедура ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоСсылка, ГражданствоПоУмолчанию) Экспорт
	
	СотрудникиФормыБазовый.ЗаписатьЗначенияПоУмолчанию(ФизическоеЛицоСсылка, ГражданствоПоУмолчанию);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц") Тогда
		МодульСводныеДанныеФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("СводныеДанныеФизическихЛиц");
		МодульСводныеДанныеФизическихЛиц.ОбновитьСтроковыеСведенияФизическогоЛица(ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДополнительнымиФормами

Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект) Экспорт
	
	Если ИмяФормы = "Справочник.Сотрудники.Форма.ВыплатаЗарплаты" Тогда
	
		МестоВыплаты = Форма.РеквизитФормыВЗначение("МестаВыплатыЗарплатыСотрудников");
		ВзаиморасчетыССотрудникамиРасширенный.ПроверитьМестоВыплатыЗарплатыСотрудника(МестоВыплаты, Отказ);
		
		МестаВыплатыЗарплатыДетализация = Форма.РеквизитФормыВЗначение("МестаВыплатыЗарплатыДетализация");
		Если ЗначениеЗаполнено(МестоВыплаты.Вид) Тогда
			ВзаиморасчетыССотрудникамиРасширенный.ПроверитьДетализациюМестВыплатыЗарплатыОрганизации(МестаВыплатыЗарплатыДетализация, Отказ);
		КонецЕсли;
		
		РаспределениеМестВыплатЗарплаты = Форма.РеквизитФормыВЗначение("РаспределениеМестВыплатЗарплаты");
		ВзаиморасчетыССотрудникамиРасширенный.ПроверитьРаспределениеМестВыплатыЗарплатыСотрудников(РаспределениеМестВыплатЗарплаты, Отказ);
		
		Если НЕ Отказ Тогда
			
			ВзаиморасчетыССотрудникамиРасширенный.ЗаписатьМестоВыплатыЗарплаты(МестоВыплаты);
			ВзаиморасчетыССотрудникамиРасширенный.ЗаписатьДетализациюМестаВыплатыСотрудника(Форма.СотрудникСсылка, Форма.ФизическоеЛицоСсылка, МестаВыплатыЗарплатыДетализация);
			ВзаиморасчетыССотрудникамиРасширенный.ЗаписатьРаспределениеМестВыплатыСотрудника(Форма.СотрудникСсылка, РаспределениеМестВыплатЗарплаты);
			
			Если Форма.СозданиеНового Тогда
				ДополнительныеСвойства = Новый Структура;
				ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			КонецЕсли;
			
			Если ОбменСБанкамиПоЗарплатнымПроектамФормы.ЗаписьЛицевыеСчетаСотрудниковПоЗарплатнымПроектамИзменена(Форма) Тогда
				ОбменСБанкамиПоЗарплатнымПроектам.СохранитьСведенияОЛицевомСчетеСотрудника(Форма, ДополнительныеСвойства);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяФормы = "Справочник.ФизическиеЛица.Форма.ТрудоваяДеятельность" Тогда
		
		СотрудникиФормы.СохранитьНаборЗаписей(Форма, "СтажиФизическихЛиц", "Лет,Месяцев,ТребуетЗаписи");
		СотрудникиФормы.СохранитьНаборЗаписей(Форма, "НаградыФизическихЛиц");
		СотрудникиФормы.СохранитьНаборЗаписей(Форма, "ТрудоваяДеятельностьФизическихЛиц");
		
		УстановитьПривилегированныйРежим(Истина);
		СотрудникиФормы.СохранитьНаборЗаписей(Форма, "ВидыСтажаТрудовойДеятельностиФизическихЛиц");
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого СтрокаСтажиФизическихЛиц Из Форма["СтажиФизическихЛиц"] Цикл
			СтрокаСтажиФизическихЛиц.ТребуетЗаписи = Ложь;
		КонецЦикла;
		
	ИначеЕсли ИмяФормы = "ОбщаяФорма.РедактированиеСведенийОГосударственномСлужащем" Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужбаФормы");
			Модуль.СохранитьДанныеФормыРедактированиеСведенийОГосударственномСлужащем(Форма);
		КонецЕсли;
	
	Иначе
		
		Если ИмяФормы = "Справочник.ФизическиеЛица.Форма.Страхование" Тогда
			
			Если Форма["СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭСПрочитан"] Тогда
				
				Запись = Форма.РеквизитФормыВЗначение("СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС");
				Если Запись.КоличествоДнейОтпуска = 0 Тогда
					Запись.Удалить();
				Иначе
					Запись.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.РегулярнаяОтправкаСотрудников") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
			Модуль.ПропускатьПроверкуРегулярнойОтправки(Форма, ТекущийОбъект.ДополнительныеСвойства);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
			МодульФинансовыйУчетФормы = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчетФормы");
			МодульФинансовыйУчетФормы.СохранитьДанныеФормыСотрудникиФинансовыйУчет(Форма, ИмяФормы, Отказ);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
			МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
			МодульМедицинскоеСтрахование.ПроверитьИзменениеДокументаУдостоверяющегоЛичность(Форма);
		КонецЕсли;
		
		СотрудникиФормыБазовый.СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ, ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПостроительМеню

Функция ОписаниеМенюВводаНаОсновании(ПараметрыПостроения) Экспорт
	
	ЕстьОстаткиПоДоговорамГПХ = Ложь;
	Если ПараметрыПостроения <> Неопределено Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЕстьОстаткиПоДоговорамГПХ = ЗначениеЗаполнено(ДоговорГПХНеЗакрытыйАктом(ПараметрыПостроения.Сотрудник));
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ПунктыОсновногоМеню = Новый Массив;
	ПунктыОсновногоМеню.Добавить("Документы.ПриемНаРаботу");
	ПунктыОсновногоМеню.Добавить("Документы.Отпуск");
	ПунктыОсновногоМеню.Добавить("Документы.БольничныйЛист");
	ПунктыОсновногоМеню.Добавить("Документы.КадровыйПеревод");
	
	Если ЕстьОстаткиПоДоговорамГПХ Тогда
		ПунктыОсновногоМеню.Добавить("Документы.АктПриемкиВыполненныхРаботОказанныхУслуг");
	КонецЕсли;
	
	ПунктыОсновногоМеню.Добавить("Документы.СправкаНДФЛ");
	ПунктыОсновногоМеню.Добавить("Документы.СведенияОТрудовойДеятельностиРаботникаСТД_Р");
	ПунктыОсновногоМеню.Добавить("");
	
	
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору И ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
		ПунктыОсновногоМеню.Добавить("Документы.ВосстановлениеВДолжности");
		ПунктыОсновногоМеню.Добавить("");
		
	КонецЕсли;
	
	ИсключаемыеПунктыМеню = Новый Массив;
	Если ПараметрыПостроения <> Неопределено Тогда
		
		Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору
			Или ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
			
			ИсключаемыеПунктыМеню.Добавить("Документы.Отпуск");
			ИсключаемыеПунктыМеню.Добавить("Документы.БольничныйЛист");
			ИсключаемыеПунктыМеню.Добавить("Документы.КадровыйПеревод");
			
		Иначе
			ИсключаемыеПунктыМеню.Добавить("Документы.ПриемНаРаботу");
		КонецЕсли;
		
		Если Не ПараметрыПостроения.ОформленПоТрудовомуДоговору
			Или Не ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
			
			ИсключаемыеПунктыМеню.Добавить("Документы.ВосстановлениеВДолжности");
			
		КонецЕсли;
		
	Иначе
		ИсключаемыеПунктыМеню.Добавить("Документы.ПриемНаРаботу");
		ИсключаемыеПунктыМеню.Добавить("Документы.ВосстановлениеВДолжности");
	КонецЕсли;
	
	ОписаниеМеню = СотрудникиФормы.РазделМеню(НСтр("ru = 'Оформить документ';
													|en = 'Create document'"), ПунктыОсновногоМеню, ИсключаемыеПунктыМеню);
	
	// Раздел "Отсутствия"
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
		ПунктыМеню = Новый Массив;
		
		ПунктыМеню.Добавить("Документы.Командировка");
		ПунктыМеню.Добавить("Документы.ПрогулНеявка");
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.ОтпускПоУходуЗаРебенком");
		ПунктыМеню.Добавить("Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
		ПунктыМеню.Добавить("Документы.ВозвратИзОтпускаПоУходуЗаРебенком");
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.ПереносОтпуска");
		ПунктыМеню.Добавить("Документы.ОтпускБезСохраненияОплаты");
		ПунктыМеню.Добавить("Документы.ВводНачальныхОстатковОтпусков");
		
		ОписаниеМеню.Пункты.Добавить(
			СотрудникиФормы.РазделМеню(НСтр("ru = 'Отсутствия';
											|en = 'Absence'"), ПунктыМеню));
		
	КонецЕсли;
	
	// Раздел "Начисления, удержания".
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
		ПунктыМеню = Новый Массив;
		
		ПунктыМеню.Добавить("Документы.ОплатаДнейУходаЗаДетьмиИнвалидами");
		ПунктыМеню.Добавить("Документы.ОплатаПоСреднемуЗаработку");
		ПунктыМеню.Добавить("Документы.ПризПодарок");
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.ИсполнительныйЛист");
		ПунктыМеню.Добавить("Документы.ИзменениеУсловийИсполнительногоЛиста");
		ПунктыМеню.Добавить("Документы.ПостоянноеУдержаниеВПользуТретьихЛиц");
		ПунктыМеню.Добавить("Документы.УдержаниеВСчетРасчетовПоПрочимОперациям");
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.УдержаниеДобровольныхВзносовВНПФ");
		ПунктыМеню.Добавить("Документы.УдержаниеДобровольныхСтраховыхВзносов");
		ПунктыМеню.Добавить("Документы.УдержаниеПрофсоюзныхВзносов");
		
		ОписаниеМеню.Пункты.Добавить(
			СотрудникиФормы.РазделМеню(НСтр("ru = 'Начисления, удержания';
											|en = 'Accruals, deductions'"), ПунктыМеню));
		
	КонецЕсли;
	
	// Подменю "Кадры"
	ПунктыМеню = Новый Массив;
	ПунктыМеню.Добавить("Документы.ПриемНаРаботу");
	ПунктыМеню.Добавить("Документы.ПродлениеКонтрактаДоговора");
	ПунктыМеню.Добавить("Документы.ПриостановлениеТрудовыхДоговоровКонтрактов");
	ПунктыМеню.Добавить("Документы.ВозобновлениеТрудовыхДоговоровКонтрактов");
	ПунктыМеню.Добавить("Документы.Увольнение");
	ПунктыМеню.Добавить("Документы.ВосстановлениеВДолжности");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ИзменениеОплатыТруда");
	ПунктыМеню.Добавить("Документы.ПриказНаДоплатуДоСреднегоЗаработка");
	ПунктыМеню.Добавить("Документы.ОтменаДоплатыДоСреднегоЗаработка");
	ПунктыМеню.Добавить("Документы.ПереводКДругомуРаботодателю");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.Совмещение");
	ПунктыМеню.Добавить("Документы.ОтменаСовмещения");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.НазначениеПодработки");
	ПунктыМеню.Добавить("Документы.ПрекращениеПодработки");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ИзменениеКвалификационногоРазряда");
		
	ИсключаемыеПунктыМеню = Новый Массив;
	Если ПараметрыПостроения <> Неопределено Тогда
	
		ИсключаемыеПунктыМеню.Добавить("Документы.ПриемНаРаботу");
		ИсключаемыеПунктыМеню.Добавить("Документы.ВосстановлениеВДолжности");
		
		Если НЕ ПараметрыПостроения.ОформленПоТрудовомуДоговору
			ИЛИ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
			ИсключаемыеПунктыМеню.Добавить("Документы.ПродлениеКонтрактаДоговора");
			ИсключаемыеПунктыМеню.Добавить("Документы.Увольнение");
			ИсключаемыеПунктыМеню.Добавить("Документы.ИзменениеОплатыТруда");
			ИсключаемыеПунктыМеню.Добавить("Документы.ПриказНаДоплатуДоСреднегоЗаработка");
			ИсключаемыеПунктыМеню.Добавить("Документы.ОтменаДоплатыДоСреднегоЗаработка");
			ИсключаемыеПунктыМеню.Добавить("Документы.ПереводКДругомуРаботодателю");
			ИсключаемыеПунктыМеню.Добавить("Документы.Совмещение");
			ИсключаемыеПунктыМеню.Добавить("Документы.ОтменаСовмещения");
			ИсключаемыеПунктыМеню.Добавить("Документы.НазначениеПодработки");
			ИсключаемыеПунктыМеню.Добавить("Документы.ПрекращениеПодработки");
			ИсключаемыеПунктыМеню.Добавить("Документы.ИзменениеКвалификационногоРазряда");
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеМеню.Пункты.Добавить(
		СотрудникиФормы.РазделМеню(НСтр("ru = 'Кадры';
										|en = 'Human resources'"), ПунктыМеню, ИсключаемыеПунктыМеню));
	
	// Подменю "Договоры ГПХ"
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ДоговорАвторскогоЗаказа");
	ПунктыМеню.Добавить("Документы.ДоговорРаботыУслуги");
	
	Если Не ЕстьОстаткиПоДоговорамГПХ Тогда
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.АктПриемкиВыполненныхРаботОказанныхУслуг");
	КонецЕсли; 
	
	ОписаниеМеню.Пункты.Добавить(
		СотрудникиФормы.РазделМеню(НСтр("ru = 'Договоры (ГПХ)';
										|en = 'Contracts (Civil law)'"), ПунктыМеню));
	
	// Раздел "НДФЛ"
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ");
	ПунктыМеню.Добавить("Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ");
	ПунктыМеню.Добавить("Документы.ПрекращениеСтандартныхВычетовНДФЛ");
	ПунктыМеню.Добавить("Документы.ЕжегодныеСтандартныеВычеты");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ВозвратНДФЛ");
	ПунктыМеню.Добавить("Документы.ОперацияНалоговогоУчетаПоНДФЛ");
	
	ОписаниеМеню.Пункты.Добавить(
		СотрудникиФормы.РазделМеню(НСтр("ru = 'НДФЛ';
										|en = 'PIT'"), ПунктыМеню));
		
	// Раздел "Взносы, пособия"
	ПунктыМеню = Новый Массив;
	
	ПунктыМеню.Добавить("Документы.ОперацияУчетаПоСтраховымВзносам");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.СведенияОЗастрахованномЛицеФСС");
	ПунктыМеню.Добавить("Документы.ЗапросСреднегоЗаработкаСЭДО");
	ПунктыМеню.Добавить("");
	ПунктыМеню.Добавить("Документы.ЗаявлениеСотрудникаНаВыплатуПособия");
	ПунктыМеню.Добавить("Документы.ЕдиновременноеПособиеЗаСчетФСС");
	
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий");
		ПунктыМеню.Добавить("Документы.ВходящаяСправкаОЗаработкеДляРасчетаПособий");
		
	КонецЕсли;
	
	ОписаниеМеню.Пункты.Добавить(
		СотрудникиФормы.РазделМеню(НСтр("ru = 'Взносы, пособия';
										|en = 'Contributions, allowances'"), ПунктыМеню));
		
	// Раздел "Произвольные кадровые приказы"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		МодульПроизвольныеКадровыеПриказы = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		МодульПроизвольныеКадровыеПриказы.ДобавитьПодменюПроизвольныеКадровыеПриказы(ОписаниеМеню);
	КонецЕсли;
	
	// Раздел "Кадровые решения"
	Если ПараметрыПостроения = Неопределено ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда
			МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
			МодульКадровыеРешения.ДобавитьПодменюРешенияПоКадровымИзменениям(ОписаниеМеню);
		КонецЕсли;
	КонецЕсли;
	
	// Раздел "Испытательный срок"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ДобавитьПодменюПоИспытательномуСроку(ОписаниеМеню);
	КонецЕсли;

	// Раздел "Охрана труда"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ДобавитьПодменюПоНазначениюРабочихМестСотрудникам(ОписаниеМеню, ПараметрыПостроения);
	КонецЕсли;

	// Раздел "Подбор персонала"
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаФормы = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаФормы");
		МодульПодборПерсоналаФормы.ДобавитьПодменюПодбораПерсонала(ОписаниеМеню);
	КонецЕсли;

	// Раздел "Прочее"
	Если ПараметрыПостроения = Неопределено
		ИЛИ ПараметрыПостроения.ОформленПоТрудовомуДоговору И НЕ ЗначениеЗаполнено(ПараметрыПостроения.ДатаУвольнения) Тогда
		
		ПунктыМеню = Новый Массив;
		
		ПунктыМеню.Добавить("Документы.ДоговорЗаймаСотруднику");
		ПунктыМеню.Добавить("Документы.ВыдачаЗаймаСотруднику");
		ПунктыМеню.Добавить("Документы.ИзменениеУсловийДоговораЗаймаСотруднику");
		ПунктыМеню.Добавить("Документы.ПогашениеЗаймаСотруднику");
		ПунктыМеню.Добавить("Документы.ВозвратСотрудникомЗадолженности");
		ПунктыМеню.Добавить("");
		ПунктыМеню.Добавить("Документы.ЛистокСообщенияДляВоенкомата");
		
		ОписаниеРаздела = СотрудникиФормы.РазделМеню(НСтр("ru = 'Прочее';
															|en = 'Other'"), ПунктыМеню);
		ОписаниеМеню.Пункты.Добавить(ОписаниеРаздела);
		
		ПунктыМенюНеНастроенныхОбъектов = СотрудникиФормы.ПунктыМенюНеНастроенныхОбъектов(ОписаниеМеню);
		Если ПунктыМенюНеНастроенныхОбъектов.Количество() > 0 Тогда
			
			ПредставленияДоступныхОбъектов = ЗарплатаКадры.ПредставленияДоступныхОбъектовМетаданных(ПунктыМенюНеНастроенныхОбъектов, "Добавление");
			СотрудникиФормы.ДобавитьПунктыВРазделМеню(ОписаниеРаздела, ПунктыМенюНеНастроенныхОбъектов, ПредставленияДоступныхОбъектов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеМеню;
	
КонецФункции

#КонецОбласти

#Область ЗапросыДинамическихСписков

Функция НастройкиСпискаФормы(Форма, ИмяРеквизитаСписок = "Список") Экспорт
	
	НастройкиСписка = Новый Структура;
	
	НастройкиСписка.Вставить("УстановленОтборПоРолиРаботник", Ложь);
	НастройкиСписка.Вставить("УстановленОтборПоРолиДоговорник", Ложь);
	НастройкиСписка.Вставить("УстановленОтборПоПодразделению", Ложь);
	НастройкиСписка.Вставить("УстановленОтборПоОформленПоТрудовомуДоговору", Ложь);
	
	НастройкиСписка.Вставить("ОтборПоОрганизации");
	НастройкиСписка.Вставить("ОтборПоФилиалу");
	НастройкиСписка.Вставить("ОтборПоОформленПоТрудовомуДоговору");
	
	НастройкиСписка.Вставить("ОтборыСписка", Новый Массив);
	
	Список = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаСписок);
	
	КоллекцияОтборов = Новый Массив;
	КоллекцияОтборов.Добавить(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы);
	КоллекцияОтборов.Добавить(Список.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	ПользовательскиеОтборы = СотрудникиКлиентСерверРасширенный.ПользовательскиеОтборы(Список);
	Если ПользовательскиеОтборы <> Неопределено Тогда
		КоллекцияОтборов.Добавить(ПользовательскиеОтборы);
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый Соответствие;
	Для каждого ЭлементыОтбора Из КоллекцияОтборов Цикл
		СобратьСведенияЭлементовОтбора(ЭлементыОтбора, НастройкиСписка, ПользовательскиеНастройки);
	КонецЦикла;
	
	Возврат НастройкиСписка;
	
КонецФункции

Процедура СобратьСведенияЭлементовОтбора(ЭлементыОтбора, НастройкиСписка, ПользовательскиеНастройки, СобиратьИспользованиеОтборов = Истина)
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ЭлементОтбора.Представление = "ОтборПоФилиалуИЛИ"
				Или ЭлементОтбора.Представление = "ОтборПоПодразделениюИЛИ" Тогда
				
				СобратьСведенияЭлементовОтбора(ЭлементОтбора.Элементы, НастройкиСписка, ПользовательскиеНастройки, Ложь);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЭлементОтбора.Использование Тогда
			
			ЛевоеЗначение = ЭлементОтбора.ЛевоеЗначение;
			Если ЛевоеЗначение = Неопределено Тогда
				
				Если Не ПустаяСтрока(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
					
					ЭлементСПользовательскойНастройкой = ПользовательскиеНастройки.Получить(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
					Если ЭлементСПользовательскойНастройкой <> Неопределено Тогда
						ЛевоеЗначение = ЭлементСПользовательскойНастройкой.ЛевоеЗначение;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЛевоеЗначение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Не ПустаяСтрока(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда
					ПользовательскиеНастройки.Вставить(ЭлементОтбора.ИдентификаторПользовательскойНастройки, ЭлементОтбора);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СобиратьИспользованиеОтборов Тогда
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					
					ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
						НастройкиСписка.ОтборыСписка, Строка(ЛевоеЗначение), ВидСравненияЗапроса(ЭлементОтбора.ВидСравнения), ЭлементОтбора.ПравоеЗначение);
					
				КонецЕсли;
				
				Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Работник") Тогда
					НастройкиСписка.УстановленОтборПоРолиРаботник = Истина;
				КонецЕсли;
				
				Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Договорник") Тогда
					НастройкиСписка.УстановленОтборПоРолиДоговорник = Истина;
				КонецЕсли;
				
				Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
					НастройкиСписка.УстановленОтборПоПодразделению = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОформленПоТрудовомуДоговору") Тогда
				НастройкиСписка.УстановленОтборПоОформленПоТрудовомуДоговору = Истина;
				НастройкиСписка.ОтборПоОформленПоТрудовомуДоговору = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				НастройкиСписка.ОтборПоОрганизации = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			Если ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Филиал") Тогда
				НастройкиСписка.ОтборПоФилиалу = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НастройкиСписка.ОтборПоФилиалу) Тогда
		
		Если ТипЗнч(НастройкиСписка.ОтборПоФилиалу) = Тип("СписокЗначений") Тогда
			
			НастройкиСписка.ОтборПоОрганизации = Новый СписокЗначений;
			Для Каждого ЭлементСписка Из НастройкиСписка.ОтборПоФилиалу Цикл
				НастройкиСписка.ОтборПоОрганизации.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(ЭлементСписка.Значение));
			КонецЦикла;
			
		Иначе
			НастройкиСписка.ОтборПоОрганизации = ЗарплатаКадры.ГоловнаяОрганизация(НастройкиСписка.ОтборПоФилиалу);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации) Тогда
		
		Если ТипЗнч(НастройкиСписка.ОтборПоОрганизации) = Тип("СписокЗначений") Тогда
			
			Организация = Новый СписокЗначений;
			Для Каждого ЭлементСписка Из НастройкиСписка.ОтборПоОрганизации Цикл
				Организация.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(ЭлементСписка.Значение));
			КонецЦикла;
			
		Иначе
			
			Организация = ЗарплатаКадры.ГоловнаяОрганизация(НастройкиСписка.ОтборПоОрганизации);
			Если Организация <> НастройкиСписка.ОтборПоОрганизации Тогда
				
				НастройкиСписка.ОтборПоФилиалу = НастройкиСписка.ОтборПоОрганизации;
				НастройкиСписка.ОтборПоОрганизации = Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиСписка.ОтборыСписка.Количество() > 0
		И (ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации)
			Или ЗначениеЗаполнено(НастройкиСписка.ОтборПоФилиалу)) Тогда
		
		Для Каждого ОписаниеОтбора Из НастройкиСписка.ОтборыСписка Цикл
			
			Если ОписаниеОтбора.ЛевоеЗначение = "Организация" Тогда
				ОписаниеОтбора.ПравоеЗначение = НастройкиСписка.ОтборПоОрганизации;
			ИначеЕсли ОписаниеОтбора.ЛевоеЗначение = "Филиал" Тогда
				ОписаниеОтбора.ПравоеЗначение = НастройкиСписка.ОтборПоФилиалу;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьНастройкиСписка(Форма, НастройкиСписка, ИмяРеквизитаСписок = "Список", ИмяРеквизитаПодразделения = "Подразделения", ОтборПоОрганизацииПодразделений = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	Список = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаСписок);
	Подразделения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаПодразделения);
	
	ЭлементВидСпискаГруппа = Элементы.Найти("ВидСпискаГруппа");
	Если ЭлементВидСпискаГруппа = Неопределено Тогда
		ВидимостьВидСпискаГруппа = Истина;
	Иначе
		ВидимостьВидСпискаГруппа = ЭлементВидСпискаГруппа.Видимость;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФормаПоПодразделениям",
		"Видимость",
		Не НастройкиСписка.УстановленОтборПоПодразделению);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПоказыватьСотрудниковПодчиненныхПодразделений",
		"Видимость",
		Не НастройкиСписка.УстановленОтборПоПодразделению И ВидимостьВидСпискаГруппа);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодразделенияСтраница",
		"Видимость",
		Не НастройкиСписка.УстановленОтборПоПодразделению);
	
	ФОИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если Не ФОИспользоватьНесколькоОрганизаций
		И Не ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации) Тогда
		
		СтруктураЗначений = Новый Структура("Организация");
		ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(СтруктураЗначений);
		
		Если ЗначениеЗаполнено(СтруктураЗначений.Организация) Тогда
			
			НастройкиСписка.ОтборПоОрганизации = СтруктураЗначений.Организация;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, "Организация", НастройкиСписка.ОтборПоОрганизации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации) Тогда
		
		Если ТипЗнч(НастройкиСписка.ОтборПоОрганизации) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Подразделения, "ГоловнаяОрганизация", НастройкиСписка.ОтборПоОрганизации, ВидСравненияЭлементаОтбора);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Подразделения, "ГоловнаяОрганизация");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиСписка.ОтборПоФилиалу) И ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации) И ТипЗнч(НастройкиСписка.ОтборПоОрганизации) = Тип("СправочникСсылка.Организации") Тогда
		
		Если Не ФОИспользоватьНесколькоОрганизаций
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСписка.ОтборПоОрганизации, "ЕстьОбособленныеПодразделения") <> Истина
			Или Не ЗарплатаКадрыРасширенный.УОрганизацииЕстьФилиалы(НастройкиСписка.ОтборПоОрганизации) Тогда
			
			НастройкиСписка.ОтборПоФилиалу = НастройкиСписка.ОтборПоОрганизации;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоОрганизацииПодразделений) И ОтборПоОрганизацииПодразделений = НастройкиСписка.ОтборПоОрганизации Тогда
		ОтборПоФилиалуПодразделений = ОтборПоОрганизацииПодразделений;
	Иначе
		ОтборПоФилиалуПодразделений = НастройкиСписка.ОтборПоФилиалу;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоФилиалуПодразделений) Тогда
		
		Если ТипЗнч(ОтборПоФилиалуПодразделений) = Тип("СписокЗначений") Тогда
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Подразделения, "Владелец", ОтборПоФилиалуПодразделений, ВидСравненияЭлементаОтбора);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Подразделения, "Владелец");
		
	КонецЕсли;
	
	Если ФОИспользоватьНесколькоОрганизаций Тогда
		
		ГруппировкаПоГоловнойОрганизации = Неопределено;
		Для каждого ЭлементГруппировки Из Подразделения.Группировка.Элементы Цикл
			
			Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных("Владелец") Тогда
				ГруппировкаПоГоловнойОрганизации = ЭлементГруппировки;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ГруппировкаПоГоловнойОрганизации = Неопределено Тогда
			ГруппировкаПоГоловнойОрганизации = Подразделения.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ГруппировкаПоГоловнойОрганизации.Поле = Новый ПолеКомпоновкиДанных("Владелец");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОтборПоФилиалуПодразделений)
			И ЗначениеЗаполнено(НастройкиСписка.ОтборПоОрганизации)
			И ТипЗнч(НастройкиСписка.ОтборПоОрганизации) = Тип("СправочникСсылка.Организации")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкиСписка.ОтборПоОрганизации, "ЕстьОбособленныеПодразделения") = Истина
			И ЗарплатаКадрыРасширенный.УОрганизацииЕстьФилиалы(НастройкиСписка.ОтборПоОрганизации) Тогда
			
			ГруппировкаПоГоловнойОрганизации.Использование = Истина;
			Элементы.Подразделения.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			
		Иначе
			ГруппировкаПоГоловнойОрганизации.Использование = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ИспользуетсяОтборПоРолиСотрудникаРаботник", НастройкиСписка.УстановленОтборПоРолиРаботник, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ИспользуетсяОтборПоРолиСотрудникаДоговорник", НастройкиСписка.УстановленОтборПоРолиДоговорник, Истина);
	
КонецПроцедуры

Функция ВидСравненияЗапроса(ВидСравненияСКД) Экспорт
	
	Если ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат "=";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат "В";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат "Не В";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ">";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат "<";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат "<=";
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВИерархии
		Или ВидСравненияСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		
		Возврат "В ИЕРАРХИИ";
		
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВИерархии
		Или ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		
		Возврат "НЕ В ИЕРАРХИИ";
		
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.Подобно Тогда
		
		Возврат "ПОДОБНО";
		
	ИначеЕсли ВидСравненияСКД = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		
		Возврат "НЕ ПОДОБНО";
		
	КонецЕсли;
	
	Возврат "=";
	
КонецФункции

Функция УстановитьЗапросДинамическогоСписка(Форма, ОтборыСписка, ДляВыбораСотрудников, ИмяРеквизитаСписок = "Список") Экспорт
	
	Список = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ИмяРеквизитаСписок);
	
	ДополнительныеПараметры = Неопределено;
	Если Не ОтборыУстанавливались(Форма, ОбщегоНазначения.СкопироватьРекурсивно(ОтборыСписка)) Тогда
		
		ЗапросСписка = ЗапросДинамическогоСписка(ОтборыСписка, ДляВыбораСотрудников, Список);
		Если ЗапросСписка.Параметры.Количество() > 0 Тогда
			
			Список.ТекстЗапроса = ЗапросСписка.Текст;
			ДополнительныеПараметры = ЗапросСписка.Параметры;
			Для каждого ПараметрЗапроса Из ДополнительныеПараметры Цикл
				
				ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
					Список, ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.УстановленныеОтборыСписка = Новый ФиксированныйМассив(ОтборыСписка);
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ТекстыЗапросовФормыВыбораСотрудников()
	
	ТекстыЗапросов = Новый Структура("Текст,ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников");
	
	Если ПараметрыСеанса.АльтернативныйПодборСпискаСотрудников Тогда
		
		ТекстыЗапросов.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	0 КАК ИндикаторПроблем,
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.ВерсияДанных КАК ВерсияДанных,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	Сотрудники.Код КАК Код,
			|	Сотрудники.Наименование КАК Наименование,
			|	ДанныеДляПодбора.Наименование КАК НаименованиеСотрудника,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеДляПодбора.Организация КАК Организация,
			|	Сотрудники.ВАрхиве КАК ВАрхиве,
			|	Сотрудники.УточнениеНаименования КАК УточнениеНаименования,
			|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	Сотрудники.Предопределенный КАК Предопределенный,
			|	Сотрудники.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
			|	ВЫБОР
			|		КОГДА Сотрудники.ПометкаУдаления
			|			ТОГДА 4
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Пиктограмма,
			|	ДанныеДляПодбора.Филиал КАК Филиал,
			|	ДанныеДляПодбора.Подразделение КАК Подразделение,
			|	ДанныеДляПодбора.Должность КАК Должность,
			|	ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	ДанныеДляПодбора.КоличествоСтавок КАК КоличествоСтавок,
			|	ДанныеДляПодбора.КоличествоСтавокПредставление КАК КоличествоСтавокПредставление,
			|	ВидыЗанятостиСотрудниковДляПодбора.ВидЗанятости КАК ВидЗанятости,
			|	ЕСТЬNULL(ДанныеДляПодбора.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора,
			|	ДанныеОбОплатеТрудаДляПодбора.ТарифнаяСтавка КАК ТарифнаяСтавка,
			|	ДанныеОбОплатеТрудаДляПодбора.ФОТ КАК ФОТ,
			|	ДанныеОбОплатеТрудаДляПодбора.Надбавка КАК Надбавка,
			|	ДанныеОбАвансеДляПодбора.СпособРасчетаАванса КАК СпособРасчетаАванса,
			|	ДанныеОбАвансеДляПодбора.Аванс КАК Аванс,
			|	ТекущиеКадровыеДанные.ДатаПриема КАК ДатаПриема,
			|	ТекущиеКадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
			|	ТекущиеКадровыеДанные.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору,
			|	ВЫБОР
			|		КОГДА РолиСотрудниковРаботник.Сотрудник ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Работник,
			|	ВЫБОР
			|		КОГДА РолиСотрудниковДоговорник.Сотрудник ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Договорник,
			|	&ПредставлениеСостояния КАК ПредставлениеСостояния,
			|	СостоянияСотрудников.Состояние КАК Состояние,
			|	ВЫБОР
			|		КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(СостоянияСотрудников.ДействуетДо, ДЕНЬ, 1)
			|	КОНЕЦ КАК СостояниеДействуетДо,
			|	ДанныеДляПодбора.ЭтоГоловнойСотрудник КАК ЭтоГоловнойСотрудник,
			|	ДанныеДляПодбора.Начало КАК Начало,
			|	ДанныеДляПодбора.Окончание КАК Окончание,
			|	ВЫБОР
			|		КОГДА ДанныеДляПодбора.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ""99999""
			|		КОГДА ДанныеДляПодбора.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|			ТОГДА ""99998""
			|		ИНАЧЕ ДанныеДляПодбора.Подразделение.РеквизитДопУпорядочиванияИерархического
			|	КОНЕЦ КАК ПорядокПодразделения,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеДляПодбора.Должность, ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Должность) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ДанныеДляПодбора.Должность.РеквизитДопУпорядочивания, ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Должность.РеквизитДопУпорядочивания)
			|	КОНЕЦ КАК ПорядокДолжности,
			|	ВЫБОР
			|		КОГДА ДанныеДляПодбора.Филиал <> Значение(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ДанныеДляПодбора.Филиал
			|		ИНАЧЕ ДанныеДляПодбора.Организация
			|	КОНЕЦ КАК ОрганизацияСотрудника,
			|	ДанныеДляПодбора.РабочееМесто КАК РабочееМесто,
			|	ДанныеДляПодбора.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
			|ИЗ
			|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ДанныеДляПодбора.Сотрудник = Сотрудники.Ссылка
			|			И ДанныеДляПодбора.Наименование = Сотрудники.Наименование
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (&ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников) КАК ДанныеСотрудников
			|		ПО ДанныеДляПодбора.Сотрудник = ДанныеСотрудников.Сотрудник
			|			И ДанныеДляПодбора.Наименование = ДанныеСотрудников.Наименование
			|			И ДанныеДляПодбора.Начало = ДанныеСотрудников.Начало
			|			И ВЫБОР
			|					КОГДА ДанныеДляПодбора.Подразделение = ДанныеСотрудников.Подразделение
			|						ТОГДА ИСТИНА
			|					КОГДА ДанныеДляПодбора.Филиал = ДанныеСотрудников.Филиал
			|						ТОГДА ИСТИНА
			|					ИНАЧЕ ЛОЖЬ
			|				КОНЕЦ
			|			И ДанныеДляПодбора.ПоДоговоруГПХ = ДанныеСотрудников.ПоДоговоруГПХ
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
			|		ПО ДанныеДляПодбора.ФизическоеЛицо = ТекущиеКадровыеДанные.ФизическоеЛицо
			|			И ДанныеДляПодбора.Сотрудник = ТекущиеКадровыеДанные.Сотрудник
			|			И ДанныеДляПодбора.Организация = ТекущиеКадровыеДанные.ГоловнаяОрганизация}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудниковРаботник
			|		ПО ДанныеДляПодбора.Сотрудник = РолиСотрудниковРаботник.Сотрудник
			|			И (&ИспользуетсяОтборПоРолиСотрудникаРаботник = ИСТИНА)
			|			И (РолиСотрудниковРаботник.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудниковДоговорник
			|		ПО ДанныеДляПодбора.Сотрудник = РолиСотрудниковДоговорник.Сотрудник
			|			И (&ИспользуетсяОтборПоРолиСотрудникаДоговорник = ИСТИНА)
			|			И (РолиСотрудниковДоговорник.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
			|		ПО ДанныеДляПодбора.Сотрудник = СостоянияСотрудников.Сотрудник
			|			И (СостоянияСотрудников.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(РегистрСостоянияСотрудников.Период) КАК Период
			|				ИЗ
			|					РегистрСведений.СостоянияСотрудников КАК РегистрСостоянияСотрудников
			|				ГДЕ
			|					ДанныеДляПодбора.Сотрудник = РегистрСостоянияСотрудников.Сотрудник
			|					И РегистрСостоянияСотрудников.Период <= &ДатаОкончания
			|					И (РегистрСостоянияСотрудников.ДействуетДо >= &ДатаНачалаСведений
			|						ИЛИ РегистрСостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
			|					И &ОтборСостоянийСотрудника))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТИтоги КАК ДанныеОбОплатеТрудаДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ДанныеОбОплатеТрудаДляПодбора.Сотрудник
			|			И ДанныеДляПодбора.Организация = ДанныеОбОплатеТрудаДляПодбора.ГоловнаяОрганизация
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ДанныеОбОплатеТрудаДляПодбора.Период И ДанныеОбОплатеТрудаДляПодбора.ДатаОкончания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеАвансыИнтервальный КАК ДанныеОбАвансеДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ДанныеОбАвансеДляПодбора.Сотрудник
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ДанныеОбАвансеДляПодбора.ДатаНачала И ДанныеОбАвансеДляПодбора.ДатаОкончания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ВидыЗанятостиСотрудниковДляПодбора.Сотрудник
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ВидыЗанятостиСотрудниковДляПодбора.ДатаНачала И ВидыЗанятостиСотрудниковДляПодбора.ДатаОкончания)}
			|ГДЕ
			|	ДанныеДляПодбора.Начало <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|	И (ДанныеДляПодбора.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ ДанныеДляПодбора.Окончание >= &ДатаНачала)
			|	И ДанныеДляПодбора.Организация В(&РазрешенныеОрганизации)";
			
		ТекстыЗапросов.ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников =
			"ВЫБРАТЬ
			|	ДанныеДляПодбораОтобранные.Сотрудник КАК Сотрудник,
			|	ДанныеДляПодбораОтобранные.Наименование КАК Наименование,
			|	ДанныеДляПодбораОтобранные.Начало КАК Начало,
			|	МАКСИМУМ(ДанныеДляПодбораОтборФилиалПодразделение.Филиал) КАК Филиал,
			|	МАКСИМУМ(ДанныеДляПодбораОтборФилиалПодразделение.Подразделение) КАК Подразделение,
			|	ДанныеДляПодбораОтобранные.ПоДоговоруГПХ КАК ПоДоговоруГПХ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДанныеДляПодбораОтбор.Сотрудник КАК Сотрудник,
			|		ДанныеДляПодбораОтбор.Наименование КАК Наименование,
			|		ДанныеДляПодбораОтбор.ПоДоговоруГПХ КАК ПоДоговоруГПХ,
			|		МАКСИМУМ(ДанныеДляПодбораОтбор.Начало) КАК Начало
			|	ИЗ
			|		РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораОтбор
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 0
			|				1 КАК Поле1
			|			ГДЕ
			|				1 В (&ПараметрЗапроса01)
			|				И 1 В (&ПараметрЗапроса02)
			|				И 1 В (&ПараметрЗапроса03)
			|				И 1 В (&ПараметрЗапроса04)
			|				И 1 В (&ПараметрЗапроса05)
			|				И 1 В (&ПараметрЗапроса06)
			|				И 1 В (&ПараметрЗапроса07)
			|				И 1 В (&ПараметрЗапроса08)
			|				И 1 В (&ПараметрЗапроса09)
			|				И 1 В (&ПараметрЗапроса10)
			|				И 1 В (&ПараметрЗапроса11)
			|				И 1 В (&ПараметрЗапроса12)
			|				И 1 В (&ПараметрЗапроса13)
			|				И 1 В (&ПараметрЗапроса14)
			|				И 1 В (&ПараметрЗапроса15)
			|				И 1 В (&ПараметрЗапроса16)
			|				И 1 В (&ПараметрЗапроса17)
			|				И 1 В (&ПараметрЗапроса18)
			|				И 1 В (&ПараметрЗапроса19)
			|				И 1 В (&ПараметрЗапроса20)
			|				И 1 В (&СписокРазрешенныхОрганизацийФормировался)) КАК ТаблицаПараметров
			|			ПО (ИСТИНА)
			|	ГДЕ
			|		ДанныеДляПодбораОтбор.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|		И ДанныеДляПодбораОтбор.Начало <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|		И (ДанныеДляПодбораОтбор.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|				ИЛИ ДанныеДляПодбораОтбор.Окончание >= &ДатаНачала)
			|		И ДанныеДляПодбораОтбор.ПоДоговоруГПХ В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(ДанныеДляПодбораОтборДоговорник.ПоДоговоруГПХ) КАК ПоДоговоруГПХ
			|				ИЗ
			|					РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораОтборДоговорник
			|				ГДЕ
			|					ДанныеДляПодбораОтбор.Сотрудник = ДанныеДляПодбораОтборДоговорник.Сотрудник
			|					И ДанныеДляПодбораОтбор.Наименование = ДанныеДляПодбораОтборДоговорник.Наименование
			|					И ДанныеДляПодбораОтборДоговорник.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|					И ДанныеДляПодбораОтборДоговорник.Начало <= КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|					И (ДанныеДляПодбораОтборДоговорник.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|						ИЛИ ДанныеДляПодбораОтборДоговорник.Окончание >= &ДатаНачала)
			|					И &ТекстОтбораДанныеДляПодбораДоговорниковСотрудников
			|				СГРУППИРОВАТЬ ПО
			|					ДанныеДляПодбораОтборДоговорник.Сотрудник,
			|					ДанныеДляПодбораОтборДоговорник.Наименование)
			|		И ДанныеДляПодбораОтбор.Организация В(&РазрешенныеОрганизации)
			|		И &ТекстОтбораДанныеДляПодбораСотрудников
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ДанныеДляПодбораОтбор.Сотрудник,
			|		ДанныеДляПодбораОтбор.Наименование,
			|		ДанныеДляПодбораОтбор.ПоДоговоруГПХ) КАК ДанныеДляПодбораОтобранные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораОтборФилиалПодразделение
			|		ПО ДанныеДляПодбораОтобранные.Сотрудник = ДанныеДляПодбораОтборФилиалПодразделение.Сотрудник
			|			И ДанныеДляПодбораОтобранные.Наименование = ДанныеДляПодбораОтборФилиалПодразделение.Наименование
			|			И ДанныеДляПодбораОтобранные.Начало = ДанныеДляПодбораОтборФилиалПодразделение.Начало
			|			И ДанныеДляПодбораОтобранные.ПоДоговоруГПХ = ДанныеДляПодбораОтборФилиалПодразделение.ПоДоговоруГПХ
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеДляПодбораОтобранные.Сотрудник,
			|	ДанныеДляПодбораОтобранные.Наименование,
			|	ДанныеДляПодбораОтобранные.Начало,
			|	ДанныеДляПодбораОтобранные.ПоДоговоруГПХ";
		
	Иначе
		
		ТекстыЗапросов.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	0 КАК ИндикаторПроблем,
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.ВерсияДанных КАК ВерсияДанных,
			|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления,
			|	Сотрудники.Код КАК Код,
			|	Сотрудники.Наименование КАК Наименование,
			|	ДанныеДляПодбора.Наименование КАК НаименованиеСотрудника,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДанныеДляПодбора.Организация КАК Организация,
			|	Сотрудники.ВАрхиве КАК ВАрхиве,
			|	Сотрудники.УточнениеНаименования КАК УточнениеНаименования,
			|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
			|	Сотрудники.Предопределенный КАК Предопределенный,
			|	Сотрудники.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
			|	ВЫБОР
			|		КОГДА Сотрудники.ПометкаУдаления
			|			ТОГДА 4
			|		ИНАЧЕ 3
			|	КОНЕЦ КАК Пиктограмма,
			|	ДанныеДляПодбора.Филиал КАК Филиал,
			|	ДанныеДляПодбора.Подразделение КАК Подразделение,
			|	ДанныеДляПодбора.Должность КАК Должность,
			|	ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	ДанныеДляПодбора.КоличествоСтавок КАК КоличествоСтавок,
			|	ДанныеДляПодбора.КоличествоСтавокПредставление КАК КоличествоСтавокПредставление,
			|	ВидыЗанятостиСотрудниковДляПодбора.ВидЗанятости КАК ВидЗанятости,
			|	ЕСТЬNULL(ДанныеДляПодбора.ВидДоговора, ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровССотрудниками.ПустаяСсылка)) КАК ВидДоговора,
			|	ДанныеОбОплатеТрудаДляПодбора.ТарифнаяСтавка КАК ТарифнаяСтавка,
			|	ДанныеОбОплатеТрудаДляПодбора.ФОТ КАК ФОТ,
			|	ДанныеОбОплатеТрудаДляПодбора.Надбавка КАК Надбавка,
			|	ДанныеОбАвансеДляПодбора.СпособРасчетаАванса КАК СпособРасчетаАванса,
			|	ДанныеОбАвансеДляПодбора.Аванс КАК Аванс,
			|	ТекущиеКадровыеДанные.ДатаПриема КАК ДатаПриема,
			|	ТекущиеКадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
			|	ТекущиеКадровыеДанные.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору,
			|	ВЫБОР
			|		КОГДА РолиСотрудниковРаботник.Сотрудник ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Работник,
			|	ВЫБОР
			|		КОГДА РолиСотрудниковДоговорник.Сотрудник ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Договорник,
			|	&ПредставлениеСостояния КАК ПредставлениеСостояния,
			|	СостоянияСотрудников.Состояние КАК Состояние,
			|	ВЫБОР
			|		КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(СостоянияСотрудников.ДействуетДо, ДЕНЬ, 1)
			|	КОНЕЦ КАК СостояниеДействуетДо,
			|	ДанныеДляПодбора.ЭтоГоловнойСотрудник КАК ЭтоГоловнойСотрудник,
			|	ДанныеДляПодбора.Начало КАК Начало,
			|	ДанныеДляПодбора.Окончание КАК Окончание,
			|	ВЫБОР
			|		КОГДА ДанныеДляПодбора.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ""99999""
			|		КОГДА ДанныеДляПодбора.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
			|			ТОГДА ""99998""
			|		ИНАЧЕ ДанныеДляПодбора.Подразделение.РеквизитДопУпорядочиванияИерархического
			|	КОНЕЦ КАК ПорядокПодразделения,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ДанныеДляПодбора.Должность, ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Должность) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ ЕСТЬNULL(ДанныеДляПодбора.Должность.РеквизитДопУпорядочивания, ДанныеДляПодбора.ДолжностьПоШтатномуРасписанию.Должность.РеквизитДопУпорядочивания)
			|	КОНЕЦ КАК ПорядокДолжности,
			|	ВЫБОР
			|		КОГДА ДанныеДляПодбора.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА ДанныеДляПодбора.Филиал
			|		ИНАЧЕ ДанныеДляПодбора.Организация
			|	КОНЕЦ КАК ОрганизацияСотрудника,
			|	ДанныеДляПодбора.РабочееМесто КАК РабочееМесто,
			|	ДанныеДляПодбора.МестоВСтруктуреПредприятия КАК МестоВСтруктуреПредприятия
			|ИЗ
			|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ДанныеДляПодбора.Сотрудник = Сотрудники.Ссылка
			|			И ДанныеДляПодбора.Наименование = Сотрудники.Наименование
			|			И (ДанныеДляПодбора.ИдентификаторЗаписи В (&ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников))
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанные
			|		ПО ДанныеДляПодбора.ФизическоеЛицо = ТекущиеКадровыеДанные.ФизическоеЛицо
			|			И ДанныеДляПодбора.Сотрудник = ТекущиеКадровыеДанные.Сотрудник
			|			И ДанныеДляПодбора.Организация = ТекущиеКадровыеДанные.ГоловнаяОрганизация}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудниковРаботник
			|		ПО ДанныеДляПодбора.Сотрудник = РолиСотрудниковРаботник.Сотрудник
			|			И (&ИспользуетсяОтборПоРолиСотрудникаРаботник = ИСТИНА)
			|			И (РолиСотрудниковРаботник.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудниковДоговорник
			|		ПО ДанныеДляПодбора.Сотрудник = РолиСотрудниковДоговорник.Сотрудник
			|			И (&ИспользуетсяОтборПоРолиСотрудникаДоговорник = ИСТИНА)
			|			И (РолиСотрудниковДоговорник.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
			|		ПО ДанныеДляПодбора.Сотрудник = СостоянияСотрудников.Сотрудник
			|			И (СостоянияСотрудников.Период В
			|				(ВЫБРАТЬ
			|					МАКСИМУМ(РегистрСостоянияСотрудников.Период) КАК Период
			|				ИЗ
			|					РегистрСведений.СостоянияСотрудников КАК РегистрСостоянияСотрудников
			|				ГДЕ
			|					ДанныеДляПодбора.Сотрудник = РегистрСостоянияСотрудников.Сотрудник
			|					И РегистрСостоянияСотрудников.Период <= &ДатаОкончания
			|					И (РегистрСостоянияСотрудников.ДействуетДо >= &ДатаНачалаСведений
			|						ИЛИ РегистрСостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1))
			|					И &ОтборСостоянийСотрудника))}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТИтоги КАК ДанныеОбОплатеТрудаДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ДанныеОбОплатеТрудаДляПодбора.Сотрудник
			|			И ДанныеДляПодбора.Организация = ДанныеОбОплатеТрудаДляПодбора.ГоловнаяОрганизация
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ДанныеОбОплатеТрудаДляПодбора.Период И ДанныеОбОплатеТрудаДляПодбора.ДатаОкончания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеАвансыИнтервальный КАК ДанныеОбАвансеДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ДанныеОбАвансеДляПодбора.Сотрудник
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ДанныеОбАвансеДляПодбора.ДатаНачала И ДанныеОбАвансеДляПодбора.ДатаОкончания)}
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудниковИнтервальный КАК ВидыЗанятостиСотрудниковДляПодбора
			|		ПО ДанныеДляПодбора.Сотрудник = ВидыЗанятостиСотрудниковДляПодбора.Сотрудник
			|			И (ВЫБОР
			|				КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
			|			КОНЕЦ МЕЖДУ ВидыЗанятостиСотрудниковДляПодбора.ДатаНачала И ВидыЗанятостиСотрудниковДляПодбора.ДатаОкончания)}
			|ГДЕ
			|	ИСТИНА
			|	И ДанныеДляПодбора.Организация В(&РазрешенныеОрганизации)";
			
		ТекстыЗапросов.ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеДляПодбораОтбор.ИдентификаторЗаписи КАК ИдентификаторЗаписи
			|ИЗ
			|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораОтбор
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 0
			|			1 КАК Поле1
			|		ГДЕ
			|			1 В (&ПараметрЗапроса01)
			|			И 1 В (&ПараметрЗапроса02)
			|			И 1 В (&ПараметрЗапроса03)
			|			И 1 В (&ПараметрЗапроса04)
			|			И 1 В (&ПараметрЗапроса05)
			|			И 1 В (&ПараметрЗапроса06)
			|			И 1 В (&ПараметрЗапроса07)
			|			И 1 В (&ПараметрЗапроса08)
			|			И 1 В (&ПараметрЗапроса09)
			|			И 1 В (&ПараметрЗапроса10)
			|			И 1 В (&ПараметрЗапроса11)
			|			И 1 В (&ПараметрЗапроса12)
			|			И 1 В (&ПараметрЗапроса13)
			|			И 1 В (&ПараметрЗапроса14)
			|			И 1 В (&ПараметрЗапроса15)
			|			И 1 В (&ПараметрЗапроса16)
			|			И 1 В (&ПараметрЗапроса17)
			|			И 1 В (&ПараметрЗапроса18)
			|			И 1 В (&ПараметрЗапроса19)
			|			И 1 В (&ПараметрЗапроса20)
			|			И 1 В (&СписокРазрешенныхОрганизацийФормировался)) КАК ТаблицаПараметров
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ДанныеДляПодбораОтбор.Сотрудник = &ДанныеДляПодбораСотрудник
			|	И ДанныеДляПодбораОтбор.Наименование = &ДанныеДляПодбораНаименование
			|	И ДанныеДляПодбораОтбор.Начало <= &ДатаОкончания
			|	И (ДанныеДляПодбораОтбор.Окончание = ДАТАВРЕМЯ(1, 1, 1)
			|			ИЛИ ДанныеДляПодбораОтбор.Окончание >= &ДатаНачала)
			|	И &ТекстОтбораДанныеДляПодбораСотрудников
			|	И ДанныеДляПодбораОтбор.Организация В(&РазрешенныеОрганизации)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫБОР
			|		КОГДА ДанныеДляПодбораОтбор.Начало = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ДанныеДляПодбораОтбор.ПоДоговоруГПХ
			|	КОНЕЦ,
			|	ДанныеДляПодбораОтбор.Начало УБЫВ,
			|	ДанныеДляПодбораОтбор.Организация,
			|	ДанныеДляПодбораОтбор.Филиал,
			|	ДанныеДляПодбораОтбор.Подразделение";
		
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

Функция ЗапросДинамическогоСписка(ОтборыСписка, ДляВыбораСотрудников, Список)
	
	Запрос = Новый Запрос;
	ТекстОтбораДанныеДляПодбораСотрудников = "";
	
	ТекстыЗапросов = ТекстыЗапросовФормыВыбораСотрудников();
	
	Запрос.Текст = ТекстыЗапросов.Текст;
	ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = ТекстыЗапросов.ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников;
	
	Если ДляВыбораСотрудников Тогда
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников =
			СтрЗаменить(ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "ДанныеДляПодбораОтбор.Сотрудник = &ДанныеДляПодбораСотрудник",
				"ДанныеДляПодбораОтбор.Сотрудник = &ДанныеДляПодбораСотрудник И ДанныеДляПодбораОтбор.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
	КонецЕсли;
	
	ОтборСостоянийУстанавливался = Ложь;
	
	НомерПараметра = 1;
	Для каждого ЭлементОтбора Из ОтборыСписка Цикл
		
		ПозицияТочки = СтрНайти(ЭлементОтбора.ЛевоеЗначение, ".");
		Если ПозицияТочки = 0 Тогда
			ПолеВВерхнемРегистре = ВРег(ЭлементОтбора.ЛевоеЗначение);
		Иначе
			ПолеВВерхнемРегистре = ВРег(Прав(ЭлементОтбора.ЛевоеЗначение, ПозицияТочки - 1));
		КонецЕсли; 
		
		Если ПолеВВерхнемРегистре = ВРег("Организация")
			Или ПолеВВерхнемРегистре = ВРег("Филиал")
			Или ПолеВВерхнемРегистре = ВРег("Подразделение")
			Или ПолеВВерхнемРегистре = ВРег("Должность")
			Или ПолеВВерхнемРегистре = ВРег("ДолжностьПоШтатномуРасписанию")
			Или ПолеВВерхнемРегистре = ВРег("ФизическоеЛицо")
			Или ПолеВВерхнемРегистре = ВРег("ЭтоГоловнойСотрудник") Тогда
			
			Если Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И (ПолеВВерхнемРегистре = ВРег("Филиал")
					Или ПолеВВерхнемРегистре = ВРег("Подразделение")
					Или ПолеВВерхнемРегистре = ВРег("ДолжностьПоШтатномуРасписанию")) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ТекстОтбораДанныеДляПодбораСотрудников) Тогда
				ТекстОтбораДанныеДляПодбораСотрудников = ТекстОтбораДанныеДляПодбораСотрудников + Символы.ПС + "И ";
			КонецЕсли; 
			
			ИмяПараметра = "ПараметрЗапроса" + Формат(НомерПараметра, "ЧЦ=2; ЧВН=");
			
			ТекстОтбораДанныеДляПодбораСотрудников = ТекстОтбораДанныеДляПодбораСотрудников + "ДанныеДляПодбораОтбор." + ЭлементОтбора.ЛевоеЗначение;
			ТекстОтбораДанныеДляПодбораСотрудников = ТекстОтбораДанныеДляПодбораСотрудников + " " + ЭлементОтбора.ВидСравнения + " ";
			ТекстОтбораДанныеДляПодбораСотрудников = ТекстОтбораДанныеДляПодбораСотрудников + "(&" + ИмяПараметра + ")";
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = Новый ФиксированныйМассив(ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения());
			Иначе
				ЗначениеПараметра = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
			
			НомерПараметра = НомерПараметра + 1;
			
		ИначеЕсли ПолеВВерхнемРегистре = ВРег("Состояние") Тогда
			
			ИмяПараметра = "ПараметрЗапроса" + Формат(НомерПараметра, "ЧЦ=2; ЧВН=");
			
			ТекстОтбора = "РегистрСостоянияСотрудников.Состояние " + ЭлементОтбора.ВидСравнения + " (&" + ИмяПараметра + ")";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСостоянийСотрудника", ТекстОтбора);
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ЗначениеПараметра = Новый ФиксированныйМассив(ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения());
			Иначе
				ЗначениеПараметра = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
			ОтборСостоянийУстанавливался = Истина;
			
			НомерПараметра = НомерПараметра + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерНеЗаданногоПараметра = НомерПараметра По 20 Цикл
		ИмяПараметра = "ПараметрЗапроса" + Формат(НомерНеЗаданногоПараметра, "ЧЦ=2; ЧВН=");
		Запрос.УстановитьПараметр(ИмяПараметра, Null);
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокРазрешенныхОрганизацийФормировался", Ложь);
	
	// Текст запроса получения периода для данных сотрудников 
	Если ПустаяСтрока(ТекстОтбораДанныеДляПодбораСотрудников) Тогда
		
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
			ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "И &ТекстОтбораДанныеДляПодбораСотрудников", "");
		
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
			ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "И &ТекстОтбораДанныеДляПодбораДоговорниковСотрудников", "");
		
	Иначе
		
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
			ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "&ТекстОтбораДанныеДляПодбораСотрудников",
			"(" + ТекстОтбораДанныеДляПодбораСотрудников + ")");
		
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
			ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "&ТекстОтбораДанныеДляПодбораДоговорниковСотрудников",
			"(" + СтрЗаменить(ТекстОтбораДанныеДляПодбораСотрудников, "ДанныеДляПодбораОтбор.", "ДанныеДляПодбораОтборДоговорник.") + ")");
		
	КонецЕсли;
	
	ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "&ДанныеДляПодбораСотрудник", "ДанныеДляПодбора.Сотрудник");
	
	ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников = СтрЗаменить(
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников, "&ДанныеДляПодбораНаименование", "ДанныеДляПодбора.Наименование");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников",
		ТекстЗапросаДляПолученияДанныхДляПодбораСотрудников);
	
	Если Не ОтборСостоянийУстанавливался Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСостоянийСотрудника", "(ИСТИНА)")
	КонецЕсли;
	
	УдалитьОтборыРазрешенныхОрганизаций = Истина;
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		СписокРазрешенныхОрганизацийФормировался = Ложь;
		РазрешенныеОрганизации = Неопределено;
		Для Каждого ЭлементПараметраСписка Из Список.Параметры.Элементы Цикл
			
			Если ЭлементПараметраСписка.Использование И ЭлементПараметраСписка.Параметр = Новый ПараметрКомпоновкиДанных("РазрешенныеОрганизации") Тогда
				
				РазрешенныеОрганизации = ЭлементПараметраСписка.Значение;
				Прервать;
				
			ИначеЕсли ЭлементПараметраСписка.Использование И ЭлементПараметраСписка.Параметр = Новый ПараметрКомпоновкиДанных("СписокРазрешенныхОрганизацийФормировался") Тогда
				
				СписокРазрешенныхОрганизацийФормировался = ЭлементПараметраСписка.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не СписокРазрешенныхОрганизацийФормировался Тогда
			
			Если РазрешенныеОрганизации = Неопределено Тогда
				
				ДоступныеОрганизацииИФилиалы = ЗарплатаКадры.ДоступныеОрганизации();
				Если ЗначениеЗаполнено(ДоступныеОрганизацииИФилиалы.Организации) Тогда
					РазрешенныеОрганизации = ДоступныеОрганизацииИФилиалы.Организации;
				КонецЕсли;
				
			КонецЕсли;
			
			Если РазрешенныеОрганизации <> Неопределено Тогда
				УдалитьОтборыРазрешенныхОрганизаций = Ложь;
				Запрос.УстановитьПараметр("РазрешенныеОрганизации", РазрешенныеОрганизации);
			Иначе
				Запрос.УстановитьПараметр("СписокРазрешенныхОрганизацийФормировался", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыПредставленияСостояний(Запрос);
	
	Если УдалитьОтборыРазрешенныхОрганизаций Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДанныеДляПодбора.Организация В(&РазрешенныеОрганизации)", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДанныеДляПодбораОтбор.Организация В(&РазрешенныеОрганизации)", "");
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		Модуль.ДополнитьТекстыЗапросовФормыВыбораСотрудников(Запрос.Текст);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура УстановитьПараметрыПредставленияСостояний(Запрос) Экспорт
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПредставлениеСостояния",
		"	ВЫБОР
		|		КОГДА СостоянияСотрудников.Состояние В (&СостоянияПриостановкиРаботы)
		|			ТОГДА ВЫБОР
		|					КОГДА СостоянияСотрудников.ВидВремени В (&ВидыВремениОтстранение)
		|						ТОГДА &ПредставлениеОтстранен
		|					КОГДА СостоянияСотрудников.ВидВремени В (&ВидыВремениПриостановка)
		|						ТОГДА &ПредставлениеПриостановкаРаботы
		|					ИНАЧЕ &ПредставлениеВПростое
		|				КОНЕЦ
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СостоянияСотрудников.Состояние)
		|	КОНЕЦ");
	
	Префикс = "Перечисление.СостоянияСотрудника.";
	
	СостоянияПриостановкиРаботы = Новый Массив;
	СостоянияПриостановкиРаботы.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ПростойНеЗависящийОтРаботодателяИРаботника"));
	СостоянияПриостановкиРаботы.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ПростойПоВинеРаботника"));
	СостоянияПриостановкиРаботы.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ПростойПоВинеРаботодателя"));
	
	Префикс = "Справочник.ВидыИспользованияРабочегоВремени.";
	
	ВидыВремениОтстранение = Новый Массив;
	ВидыВремениОтстранение.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ОтстранениеОтРаботыБезОплаты"));
	ВидыВремениОтстранение.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ОтстранениеОтРаботыСОплатой"));
	
	ВидыВремениПриостановка = Новый Массив;
	ВидыВремениПриостановка.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент(Префикс + "ЗадержкаВыплатыЗаработнойПлаты"));
	
	Запрос.УстановитьПараметр("СостоянияПриостановкиРаботы", СостоянияПриостановкиРаботы);
	Запрос.УстановитьПараметр("ВидыВремениОтстранение", ВидыВремениОтстранение);
	Запрос.УстановитьПараметр("ВидыВремениПриостановка", ВидыВремениПриостановка);
	
	Запрос.УстановитьПараметр("ПредставлениеОтстранен",
		СостоянияСотрудников.ПредставлениеСостоянияСотрудника(СостоянияПриостановкиРаботы[1], ВидыВремениОтстранение[0]));
		
	Запрос.УстановитьПараметр("ПредставлениеВПростое",
		СостоянияСотрудников.ПредставлениеСостоянияСотрудника(СостоянияПриостановкиРаботы[1]));
		
	Запрос.УстановитьПараметр("ПредставлениеПриостановкаРаботы",
		СостоянияСотрудников.ПредставлениеСостоянияСотрудника(СостоянияПриостановкиРаботы[2], ВидыВремениПриостановка[0]));
		
КонецПроцедуры

Функция ОтборыУстанавливались(Форма, ОтборыСписка) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Если Форма.УстановленныеОтборыСписка <> Неопределено Тогда
		
		Если ОтборыСписка.Количество() = Форма.УстановленныеОтборыСписка.Количество() Тогда
			
			Для каждого УстановленныйОтбор Из Форма.УстановленныеОтборыСписка Цикл
				
				ОтборНайден = Ложь;
				ИндексЭлемента = 0;
				Для каждого ОтборСписка Из ОтборыСписка Цикл
					
					Если ОтборСписка.ЛевоеЗначение = УстановленныйОтбор.ЛевоеЗначение Тогда
						
						Если ОтборСписка.ВидСравнения = УстановленныйОтбор.ВидСравнения Тогда
							
							Если ОтборСписка.ПравоеЗначение = УстановленныйОтбор.ПравоеЗначение Тогда
								
								ОтборНайден = Истина;
								ОтборыСписка.Удалить(ИндексЭлемента);
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИндексЭлемента = ИндексЭлемента + 1;
					
				КонецЦикла;
				
				Если Не ОтборНайден Тогда
					Прервать;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ОтборыСписка.Количество() = 0 Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область НапоминанияСотрудника

Процедура УстановитьВидимостьДекорацийНапоминанияОДнеРождения(Форма) Экспорт

	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГруппаДекорацийНапоминанияОДнеРождения",
		"Видимость",
		ИспользоватьНапоминанияПользователя);
	
	Если НЕ ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	НапоминаниеОДнеРожденияУстановлено = КадровыйУчетРасширенный.НапоминаниеОДнеРожденияУстановлено(Форма.ФизическоеЛицоСсылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДекорацияКолокольчикНеАктивный",
		"Видимость",
		Не НапоминаниеОДнеРожденияУстановлено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДекорацияКолокольчикАктивный",
		"Видимость",
		НапоминаниеОДнеРожденияУстановлено);

КонецПроцедуры

#КонецОбласти

#Область ИсторияВзаимоотношенийСКомпанией

Процедура ЗаполнитьРолиФизическогоЛицаИсторииВзаимоотношений(Роли) Экспорт
	
	СотрудникиФормыБазовый.ЗаполнитьРолиФизическогоЛицаИсторииВзаимоотношений(Роли);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриЗаполненииРолейФизическогоЛица(Роли);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  История - см. СотрудникиФормы.ТаблицаИсторииВзаимоотношений
//  ОбъектыВзаимоотношений - Массив из СправочникСсылка
Процедура ЗаполнитьИсториюВзаимоотношений(История, ОбъектыВзаимоотношений) Экспорт
	
	ДополнитьИсториюВзаимоотношенийСотрудниками(История, ОбъектыВзаимоотношений);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ДополнитьИсториюВзаимоотношенийКандидатамиПоФизическимЛицам(История, ОбъектыВзаимоотношений);
		МодульПодборПерсонала.ДополнитьИсториюВзаимоотношенийКандидатамиПоЛичнымДанным(История, ОбъектыВзаимоотношений);
	КонецЕсли;
	
	История.Сортировать("ДатаАктуальности Убыв");
	
КонецПроцедуры

// См. ЗаполнитьИсториюВзаимоотношений
Процедура ДополнитьИсториюВзаимоотношенийСотрудниками(История, ОбъектыВзаимоотношений)
	
	ФизическиеЛица = ОбщегоНазначения.СкопироватьРекурсивно(ОбъектыВзаимоотношений);
	ОбщегоНазначенияБЗККлиентСервер.УдалитьВсеВхожденияКромеТипаИзМассива(ФизическиеЛица,
		Тип("СправочникСсылка.ФизическиеЛица"));
	
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыСотрудников.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыСотрудников.РаботникиПоТрудовымДоговорам = Истина;
	ПараметрыСотрудников.РаботникиПоДоговорамГПХ = Неопределено;
	ПараметрыСотрудников.ВыбрасыватьИсключениеДоступа = Ложь;
	ПараметрыСотрудников.КадровыеДанные = "Организация, ДатаПриема, ДатаУвольнения,"
		+ ?(ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание"),
			"ДолжностьПоШтатномуРасписанию", "Должность, Подразделение");
	Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыСотрудников);

	СотрудникиФормыБазовый.ДополнитьИсториюВзаимоотношенийФизическихЛицСотрудникамиДГПХ(История, ФизическиеЛица,
		Сотрудники);
	
	ПричиныУвольнения = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		ПричиныУвольнения = МодульАнализТекучестиПерсонала.ПричиныУвольненияСотрудников(
			Сотрудники.ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из Сотрудники Цикл
		НоваяСтрока = История.Добавить();
		НоваяСтрока.Ссылка = СтрокаДанных.Сотрудник;
		НоваяСтрока.ОбъектВзаимоотношений = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.Роль = СотрудникиФормы.РолиФизическогоЛицаИсторииВзаимоотношений().Сотрудник;
		НоваяСтрока.ГруппаРоли = СотрудникиФормы.РолиФизическогоЛицаИсторииВзаимоотношений().Сотрудник;
		НоваяСтрока.ДатаАктуальности = СтрокаДанных.ДатаПриема;
		Если Не ЗначениеЗаполнено(СтрокаДанных.ДатаПриема) Тогда
			НоваяСтрока.ДатаАктуальности = ТекущаяДатаСеанса();
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
			НоваяСтрока.ДатаАктуальности = СтрокаДанных.ДатаУвольнения;
		КонецЕсли;
		НоваяСтрока.Примечание = ПримечаниеСотрудника(СтрокаДанных, ПричиныУвольнения);
	КонецЦикла;

КонецПроцедуры

Функция ПримечаниеСотрудника(СтрокаДанных, ПричиныУвольнения)

	Если Не ЗначениеЗаполнено(СтрокаДанных.ДатаПриема) Тогда
		Возврат НСтр("ru = 'Сотрудник пока еще не оформлен';
					|en = 'The employee is not yet registered'");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
		ПараметрыШаблона = Новый Структура(
			"Организация,
			|ДатаПриема,
			|Должность,
			|Подразделение,
			|ДолжностьПоШтатномуРасписанию");
		ЗаполнитьЗначенияСвойств(ПараметрыШаблона, СтрокаДанных);
		ПараметрыШаблона.ДатаПриема = Формат(ПараметрыШаблона.ДатаПриема, "ДЛФ=D;");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
			Шаблон = НСтр("ru = 'Сотрудник в [Организация] с [ДатаПриема], на позиции «[ДолжностьПоШтатномуРасписанию]»';
							|en = 'Employee in [Организация] since [ДатаПриема], in position «[ДолжностьПоШтатномуРасписанию]» '");
		Иначе
			Шаблон = НСтр("ru = 'Сотрудник в [Организация] с [ДатаПриема], на должности «[Должность]» в «[Подразделение]»';
							|en = 'Employee in [Организация] since  [ДатаПриема], in position «[Должность]» in «[Подразделение]»'");
		КонецЕсли;
		Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);
	КонецЕсли;
	
	ПараметрыШаблона = Новый Структура(
		"Организация,
		|ДатаПриема,
		|ДатаУвольнения,
		|Должность,
		|Подразделение,
		|ДолжностьПоШтатномуРасписанию");
	ЗаполнитьЗначенияСвойств(ПараметрыШаблона, СтрокаДанных);
	ПараметрыШаблона.ДатаПриема = Формат(ПараметрыШаблона.ДатаПриема, "ДЛФ=D;");
	ПараметрыШаблона.ДатаУвольнения = Формат(ПараметрыШаблона.ДатаУвольнения, "ДЛФ=D;");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтатноеРасписание") Тогда
		Шаблон = НСтр("ru = 'Уволен [ДатаУвольнения] из [Организация] с позиции «[ДолжностьПоШтатномуРасписанию]», работал с [ДатаПриема]';
						|en = 'Dismissed [ДатаУвольнения] from [Организация] from position «[ДолжностьПоШтатномуРасписанию]», worked since [ДатаПриема]'");
	Иначе
		Шаблон = НСтр("ru = 'Уволен [ДатаУвольнения] из [Организация] с должности «[Должность]» в «[Подразделение]», работал с [ДатаПриема]';
						|en = 'Dismissed [ДатаУвольнения] from [Организация] from position ""[Должность]"" in ""[Подразделение]"", worked since [ДатаПриема]'");
	КонецЕсли;

	Примечание = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ПараметрыШаблона);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ДополнитьИсториюСотрудникаПричинойУвольнения(Примечание, СтрокаДанных.Сотрудник, ПричиныУвольнения);
	КонецЕсли;

	Возврат Примечание;
		
КонецФункции

#КонецОбласти

#КонецОбласти
