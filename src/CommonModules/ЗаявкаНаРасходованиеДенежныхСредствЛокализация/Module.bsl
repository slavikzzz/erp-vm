
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив из Строка - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Перем Ошибки;
	
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	НепроверяемыеРеквизиты = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, ВсеРеквизиты, РеквизитыОперации);
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		ВсеРеквизиты, РеквизитыОперации, НепроверяемыеРеквизиты);
	
	РасшифровкаБезРазбиения = Ложь;
	Если Объект.ДополнительныеСвойства.Свойство("РасшифровкаБезРазбиения")
		И Объект.ДополнительныеСвойства.РасшифровкаБезРазбиения Тогда
		РасшифровкаБезРазбиения = Истина;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		Или Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена Тогда
		
		//++ НЕ УТ
		НепроверяемыеРеквизиты.Добавить("ТипПлатежаФЗ275");
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.Файл");
		//-- НЕ УТ
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И Не ((Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ ИЛИ Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения) И Объект.НДФЛПоВедомостям) Тогда
		
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Ведомость");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.Подразделение");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "СчетПоГосконтракту") <> Истина Тогда
		НепроверяемыеРеквизиты.Добавить("СтатьяЦелевыхСредств");
		НепроверяемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	КонецЕсли;
	
	Если Не Объект.СписокКонтрагентов Тогда
		
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
		
	Иначе
		
		Если Объект.ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная Тогда
			НепроверяемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		КонецЕсли;
	
	КонецЕсли;
	
	//++ НЕ УТ
	Если Объект.ПлатежиПо275ФЗ Тогда
		
		Если Объект.ДоговорСУчастникомГОЗ И ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ОтдельныйСчетГОЗ");
			Если Не ОтдельныйСчетГОЗ Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Должен быть выбран отдельный банковский счет ГОЗ';
						|en = 'Separate SDO bank account must be selected'"),
					Объект,
					"БанковскийСчетКонтрагента",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
			
			НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.ВидДокумента");
			НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.Файл");
			
		Иначе
			ДенежныеСредстваСерверЛокализация.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(Объект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		КонецЕсли;
		
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(Объект, Отказ);
		
		ПроверитьЗаполнениеДоговоровГОЗ(Объект, Отказ, РасшифровкаБезРазбиения);
		ПроверитьЗаполнениеТипаСуммыКредитаДепозита(Объект, Отказ, РасшифровкаБезРазбиения);
	Иначе
	//-- НЕ УТ
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы");
		НепроверяемыеРеквизиты.Добавить("ДоговорСУчастникомГОЗ");
		НепроверяемыеРеквизиты.Добавить("ТипПлатежаФЗ275");
		НепроверяемыеРеквизиты.Добавить("ПредметОплаты");
		НепроверяемыеРеквизиты.Добавить("ВариантОплаты");
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.ВидДокумента");
		НепроверяемыеРеквизиты.Добавить("ПодтверждающиеДокументы.Файл");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	РеквизитыПлатежаВБюджет = Новый Массив;
	РеквизитыПлатежаВБюджет.Добавить("ВидПеречисленияВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("ПеречислениеВБюджет");
	РеквизитыПлатежаВБюджет.Добавить("КодБК");
	РеквизитыПлатежаВБюджет.Добавить("КодОКАТО");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательДаты");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательНомера");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательОснования");
	РеквизитыПлатежаВБюджет.Добавить("ПоказательПериода");
	РеквизитыПлатежаВБюджет.Добавить("СтатусСоставителя");
	
	РеквизитыДокумента = Объект.Метаданные().Реквизиты;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	Если ДатаНачалаПримененияПриказа126н <> '00010101' И Объект.Дата >= ДатаНачалаПримененияПриказа126н Тогда
		НепроверяемыеРеквизиты.Добавить("ПоказательТипа");
	Иначе
		РеквизитыПлатежаВБюджет.Добавить("ПоказательТипа");
	КонецЕсли;
	
	Для каждого РеквизитПлатежаВБюджет Из РеквизитыПлатежаВБюджет Цикл
		НепроверяемыеРеквизиты.Добавить(РеквизитПлатежаВБюджет);
		Если Объект.ПеречислениеВБюджет Тогда
			Если Не ЗначениеЗаполнено(Объект[РеквизитПлатежаВБюджет]) Тогда
				Реквизит = РеквизитыДокумента.Найти(РеквизитПлатежаВБюджет);
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Поле ""%1"" не заполнено';
											|en = 'Field %1 is required'"), Реквизит.Синоним);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ПеречислениеВБюджет Тогда
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, НепроверяемыеРеквизиты);
		ДенежныеСредстваСерверЛокализация.ПроверитьИННиКППНаСоответствие148н(Объект, Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	ПроверитьВедомостиНаВыплатуЗарплаты(Объект, Отказ);
	//-- НЕ УТ
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеКодаВидаДохода(Объект,
																		Объект.ХозяйственнаяОперацияПоЗарплате,
																		Отказ);
	
	ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеДокументаСФлагомСамозанятого(Объект, Отказ);
	
	ПодарочныеСертификатыСервер.ОбработкаПроверкиЗаполнения(Объект, Отказ);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения);
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
		ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоЯндексКассе") Тогда
		ЗаполнитьПоОперацииПоЯндексКассе(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	
	//++ НЕ УТ
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ДоговорЗаймаСотруднику") Тогда
		ДенежныеСредстваСерверЛокализация.ЗаполнитьПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ДанныеЗаполнения, Объект.РасшифровкаПлатежа, Ложь);
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетОператораСистемыПлатон") Тогда
		ЗаполнитьПоОтчетуОператораСистемыПлатон(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.НачислениеДивидендов") Тогда
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеЗаполнения);
	
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		Документы.ПоступлениеДенежныхДокументов.ЗаполнитьПоОснованию(Объект, ДанныеЗаполнения);
		Объект.ЗаполнитьРеквизитыЗначениямиПоУмолчанию();
		Возврат;
	
	ИначеЕсли ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("МассивВедомостей") Тогда
		ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения);
	//-- НЕ УТ
	
	ИначеЕсли ТипОснования = Тип("Массив") И ДанныеЗаполнения.Количество() > 0 Тогда
		ТипОснования = ТипЗнч(ДанныеЗаполнения[0]);
		Если ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
			ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, ДанныеЗаполнения[0], ДанныеЗаполнения);
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда 
			ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, ДанныеЗаполнения[0], ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.СчетФактураНалоговыйАгент") Тогда 
		ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, ДанныеЗаполнения, ДанныеЗаполнения);
	КонецЕсли;
	
	//++ НЕ УТ
	Если ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("ПлатежиПо275ФЗ") Тогда
		ДоступныеТипыПлатежа275ФЗ = Справочники.ТипыПлатежейФЗ275.ДоступныеТипыПлатежа275ФЗ(ДанныеЗаполнения);
		Если ДоступныеТипыПлатежа275ФЗ.Количество() Тогда
			ДанныеЗаполнения.Вставить("ТипПлатежаФЗ275", ДоступныеТипыПлатежа275ФЗ[0]);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	Если ТипОснования = Тип("Структура")
		И Не ДанныеЗаполнения.Свойство("ОперацияССамозанятым") Тогда
		
		Если ДанныеЗаполнения.Свойство("Договор")
			И ЗначениеЗаполнено(ДанныеЗаполнения.Договор)
			И ТипЗнч(ДанныеЗаполнения.Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			ДанныеЗаполнения.Вставить("ОперацияССамозанятым",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Договор, "ДоговорССамозанятым"));
		ИначеЕсли Не ДанныеЗаполнения.Свойство("ОперацияССамозанятым") Тогда
			
			ДанныеЗаполнения.Вставить("ОперацияССамозанятым", Ложь);
			ОписаниеРеквизитов = Новый Структура;
			ДенежныеСредстваСерверЛокализация.ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов);
			ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Объект, ДанныеЗаполнения, ОписаниеРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(Объект, ДанныеЗаполнения);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация
	НеиспользуемыеРеквизиты = Новый Массив;
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
			И (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ ИЛИ Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения)) Тогда
		НеиспользуемыеРеквизиты.Добавить("НДФЛПоВедомостям");
	КонецЕсли;
	
	//++ НЕ УТ
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "СчетПоГосконтракту") <> Истина Тогда
		НеиспользуемыеРеквизиты.Добавить("СтатьяЦелевыхСредств");
		НеиспользуемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	КонецЕсли;
	//-- НЕ УТ
	
	Если Не Объект.СписокКонтрагентов Тогда
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	Иначе
		Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			НеиспользуемыеРеквизиты.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого НеиспользуемыйРеквизит Из НеиспользуемыеРеквизиты Цикл
		УдаляемыйРеквизит = МассивРеквизитовОперации.Найти(НеиспользуемыйРеквизит);
		Если УдаляемыйРеквизит <> Неопределено Тогда
			МассивРеквизитовОперации.Удалить(УдаляемыйРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	ЭтоФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо;
	
	Если Не (Объект.ФормаОплатыБезналичная
		И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		Или (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю
		И ЭтоФизЛицо)) Тогда
		Объект.КодВидаДохода = "";
	КонецЕсли;
	
	Если Не (Объект.ФормаОплатыБезналичная
		И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		Или Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) Тогда
		Объект.КодВыплат = "";
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ОчиститьНеиспользуемыеРеквизитыОплатыСамозанятым(Объект);
	
	//++ НЕ УТ
	Если Объект.ДоговорСУчастникомГОЗ И Не Объект.ПеречислениеВБюджет И Объект.РасшифровкаПлатежа.Количество() Тогда
		ОбъектРасчетов = Объект.РасшифровкаПлатежа[0].ОбъектРасчетов;
		Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
			Объект.ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектРасчетов, "Договор.ГосударственныйКонтракт.НомерГОЗ");
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Не Объект.ПлатежиПо275ФЗ Тогда
		ДенежныеСредстваСерверЛокализация.ОчиститьНеиспользуемыеРеквизитыОплатыЗаСчетСредствГОЗ(Объект);
	КонецЕсли;
	//-- НЕ УТ
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация
	Если ПроведениеДокументов.СвойстваДокумента(Объект).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	ДенежныеСредстваСерверЛокализация.ПриИзмененииПравилПлатежейВБюджет(Объект, ОбъектКопирования.Дата, ТекущаяДатаСеанса());
	ДенежныеСредстваСерверЛокализация.ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	НоваяКоманда = Документы.ДепонированиеЗарплаты.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
	КонецЕсли;
	//-- НЕ УТ	
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Отчеты.КонтрольПлатежаНаСоответствие275ФЗ.ДобавитьКомандуОтчета(КомандыОтчетов);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		// Платежное поручение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.СписаниеБезналичныхДенежныхСредств";
		КомандаПечати.Идентификатор = "ПлатежноеПоручение";
		КомандаПечати.Представление = НСтр("ru = 'Образец платежного поручения';
											|en = 'Payment order sample'");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	//++ НЕ УТ
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СписокПеречислений") Тогда
		ПервыйДокумент = Истина;
		Для каждого ПлатежныйДокумент Из МассивОбъектов Цикл
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			// Запомним номер строки, с которой начали выводить текущий документ.
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ВедомостиПлатежногоДокумента =
				ОбменСБанкамиПоЗарплатнымПроектам.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент);
			ТабличныйДокументПлатежногоДокумента = ОбменСБанкамиПоЗарплатнымПроектам.ПечатьСпискаПеречисленийПоДокументам(
				ВедомостиПлатежногоДокумента, ОбъектыПечати, ПлатежныйДокумент);
			ТабличныйДокумент.Вывести(ТабличныйДокументПлатежногоДокумента);
			
			// В табличном документе необходимо задать имя области, в которую был 
			// выведен объект. Нужно для возможности печати покомплектно.
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПлатежныйДокумент);
		КонецЦикла;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, "СписокПеречислений", НСтр("ru = 'Список получателей';
																|en = 'Recipient list'"), ТабличныйДокумент);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Прочее
//++ Локализация

// Определяет свойства полей формы в зависимости от данных
// 
// Параметры:
//  Настройки - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
// 
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Операции = Перечисления.ХозяйственныеОперации;
	
	ОтборВыплатаСамозанятому = ДенежныеСредстваСервер.ОтборВыплатаСамозанятому();
	ОтборДопускаетсяБезналичнаяОплата = ДенежныеСредстваСервер.ОтборБезналичнаяОплатаЗаявки();
	
	#Область Шапка
	//
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ОплатаНДСВБюджетПоОтдельнымОперациям", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	//++ НЕ УТ
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	Финансы.НовыйОтбор(Элемент.Условие, "ТипНалога", Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Подобрать счета-фактуры';
												|en = 'Select tax invoices'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе, "ТипНалога", Перечисления.ТипыНалогов.НДС_НалоговыйАгент);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Подобрать заявления о ввозе';
												|en = 'Select import applications'"));
	//-- НЕ УТ
	
	// НадписьРеквизитыПлательщика
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Элемент.Свойства.Вставить("Видимость");
	
	// СПАРКРиски
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаИндексыСПАРКРиски");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	//++ НЕ УТ
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	//-- НЕ УТ
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Получатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Получатель");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область Реквизиты
	// Только просмотр
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("ПлатежиПо275ФЗ");
	Элемент.Поля.Добавить("ПлатежиПо275ФЗВыплатаЗарплаты");
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ТипПлатежаФЗ275");
	Элемент.Поля.Добавить("ПредметОплаты");
	Элемент.Поля.Добавить("ВариантОплаты");
	Элемент.Поля.Добавить("ПунктКонтрактаПредмета");
	Элемент.Поля.Добавить("ПунктКонтрактаОплаты");
	Элемент.Поля.Добавить("ПодтверждающиеДокументы");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Элемент.Поля.Добавить("СтатьяЦелевыхСредств");
	Элемент.Поля.Добавить("СписокКонтрагентовОтключено");
	Элемент.Поля.Добавить("СписокКонтрагентовВключено");
	Элемент.Поля.Добавить("Получатель");
	Элемент.Поля.Добавить("ЛокализацияГруппаОперацияССамозанятым");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ГруппаИли, "Закрыта", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.Модифицированность", Ложь);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьПоПредыдущемуПлатежу");
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Элемент.Поля.Добавить("ЗаполнитьВедомостиПоОстаткам");
	Элемент.Поля.Добавить("ЗаполнитьПодтверждающиеДокументы");
	Элемент.Поля.Добавить("НадписьРеквизитыПлательщика");
	//++ НЕ УТ
	Элемент.Поля.Добавить("ПодобратьСчетаФактуры");
	//-- НЕ УТ
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	// Номер и дата ведомости на выплату зарплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	Элемент.Поля.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьСинхронизациюДанных", Ложь);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// НДФЛПоВедомостям
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НДФЛПоВедомостям");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПеречислениеВБюджет
	ОтборОперацийПеречисленияВБюджет = Новый ОтборКомпоновкиДанных();
	ГруппаИли = Финансы.НовыйОтбор(ОтборОперацийПеречисленияВБюджет,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИлиИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИлиИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИлиИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИлиИ, "ОперацияССамозанятым", Ложь);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	//++ НЕ УТ
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	//-- НЕ УТ
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПеречислениеВБюджет");
	Элемент.Поля.Добавить("Декорация1");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьРеквизитыПлатежаВБюджет");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// УИП
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИП';
												|en = 'UIP'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Финансы.СкопироватьОтбор(ОтборОперацийПеречисленияВБюджет, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеВБюджет", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'УИН';
												|en = 'Payment ID'"));
	
	// Код вида дохода
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВидаДохода");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыБезналичная", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ДействуетУказание2019_5286У", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Код выплат
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыБезналичная", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Элемент.Свойства.Вставить("Видимость");
	
	// Рублевый платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИдентификаторПлатежа");
	Элемент.Поля.Добавить("КодВидаДохода");
	Элемент.Поля.Добавить("КодВыплат");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ГОЗ
	// ТипПлатежаФЗ275
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипПлатежаФЗ275");
	Финансы.НовыйОтбор(Элемент.Условие, "ПлатежиПо275ФЗ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипПлатежаФЗ275");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	
	// ПодтверждающиеДокументы
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодтверждающиеДокументы");
	Финансы.НовыйОтбор(Элемент.Условие, "ПлатежиПо275ФЗ", Истина);
	ГруппаНе1 = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе1, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	ГруппаНе2 = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе2, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация",
			Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств, , ВидСравненияКомпоновкиДанных.НеРавно);
	Элемент.Свойства.Вставить("Видимость");
	
	// 
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПредметОплаты");
	Элемент.Поля.Добавить("ПунктКонтрактаПредмета");
	Элемент.Поля.Добавить("ВариантОплаты");
	Элемент.Поля.Добавить("ПунктКонтрактаОплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "ПлатежиПо275ФЗ", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПлатежиПо275ФЗВыплатаЗарплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПлатежиПо275ФЗВыплатаЗарплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Элемент.Свойства.Вставить("Видимость");
	
	// СтатьяЦелевыхСредств
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтатьяЦелевыхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ3 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ3, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ3, "СписокФизЛиц", Истина);
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.БанковскийСчетПоГосконтракту", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтатьяЦелевыхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// СтатьяЦелевыхСредств
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСтатьяЦелевыхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.БанковскийСчетПоГосконтракту", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	//-- НЕ УТ
	
	#Область РасшифровкаПлатежа
	// Ведомость
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Ведомость");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВедомость");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛ);
	Финансы.НовыйОтбор(ГруппаИли1, "ТипНалога", Перечисления.ТипыНалогов.НДФЛСПревышения);
	
	Финансы.НовыйОтбор(ГруппаИ, "НДФЛПоВедомостям", Истина);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область БанковскиеСчетаКонтрагентов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область Команды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперацияПоЗарплате", Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаВыгрузитьФайлДляОбменаСБанком");
	Финансы.НовыйОтбор(Элемент.Условие, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате, , ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Свойства.Вставить("Доступность");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммСотруднику");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьВедомостиПоОстаткам");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	ДенежныеСредстваСерверЛокализация.ЗаполнитьНастройкиПолейФормы(Настройки);
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	Объект - ДокументОбъект - Объект заявка
//	МассивВсехРеквизитов - Массив из Строка - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив из Строка - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	
	МассивВсехРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ИдентификаторПлатежа");
	МассивВсехРеквизитов.Добавить("ИННПлательщика");
	МассивВсехРеквизитов.Добавить("КПППлательщика");
	МассивВсехРеквизитов.Добавить("РегистрацияВНалоговомОргане");
	МассивВсехРеквизитов.Добавить("НДФЛПоВедомостям");
	МассивВсехРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	МассивВсехРеквизитов.Добавить("ПеречислениеВБюджет");
	МассивВсехРеквизитов.Добавить("ПоказательДаты");
	МассивВсехРеквизитов.Добавить("ПоказательНомера");
	МассивВсехРеквизитов.Добавить("ПоказательОснования");
	МассивВсехРеквизитов.Добавить("ПоказательПериода");
	МассивВсехРеквизитов.Добавить("ПоказательТипа");
	МассивВсехРеквизитов.Добавить("СтатусСоставителя");
	МассивВсехРеквизитов.Добавить("ТекстПлательщика");
	//++ НЕ УТ
	МассивВсехРеквизитов.Добавить("ПлатежиПо275ФЗ");
	МассивВсехРеквизитов.Добавить("СтатьяЦелевыхСредств");
	//-- НЕ УТ
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Ведомость");
	//++ НЕ УТ
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	//-- НЕ УТ
	
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
	МассивВсехРеквизитов.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Контрагент");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("БанковскиеСчетаСпискаКонтрагентов.Сумма");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("ИННПлательщика");
		МассивРеквизитовОперации.Добавить("КПППлательщика");
		МассивРеквизитовОперации.Добавить("ТекстПлательщика");
		
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивРеквизитовОперации.Добавить("НДФЛПоВедомостям");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
		КонецЕсли;
		Если Объект.НДФЛПоВедомостям Тогда
			МассивРеквизитовОперации.Добавить("РегистрацияВНалоговомОргане");
		КонецЕсли;
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	//++ НЕ УТ
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		МассивРеквизитовОперации.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Ведомость");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		Иначе
			МассивРеквизитовОперации.Добавить("СтатьяЦелевыхСредств");
		КонецЕсли;
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("ПлатежиПо275ФЗ");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		//++ НЕ УТ
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
		//-- НЕ УТ
		
	//++ НЕ УТ
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю Тогда
		МассивРеквизитовОперации.Добавить("ИдентификаторПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяЦелевыхСредств");
	//-- НЕ УТ
	
	КонецЕсли;
	
	ДопускаетсяПеречислениеВБюджет =
		(ДенежныеСредстваСерверЛокализация.МассивОперацийПеречисленияВБюджет().Найти(ХозяйственнаяОперация) <> Неопределено);
	
	Если ДопускаетсяПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("ПеречислениеВБюджет");
	КонецЕсли;
	
	Если ДопускаетсяПеречислениеВБюджет И (ПеречислениеВБюджет = Неопределено Или ПеречислениеВБюджет) Тогда
		МассивРеквизитовОперации.Добавить("ВидПеречисленияВБюджет");
		МассивРеквизитовОперации.Добавить("КодБК");
		МассивРеквизитовОперации.Добавить("КодОКАТО");
		МассивРеквизитовОперации.Добавить("ПоказательДаты");
		МассивРеквизитовОперации.Добавить("ПоказательНомера");
		МассивРеквизитовОперации.Добавить("ПоказательОснования");
		МассивРеквизитовОперации.Добавить("ПоказательПериода");
		МассивРеквизитовОперации.Добавить("ПоказательТипа");
		МассивРеквизитовОперации.Добавить("СтатусСоставителя");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуФактуреНалоговогоАгента(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.СуммаНДС КАК СуммаНДС,
	|	ДанныеДокумента.Валюта КАК Валюта,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_НалоговыйАгент) 	КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгента) 	КАК СчетУчета,
	|	ДанныеДокумента.Поставщик 								КАК Субконто1,
	|	ДанныеДокумента.Договор 								КАК Субконто2,
	|	ДанныеДокумента.ДокументОснование 						КАК Субконто3,
	//-- НЕ УТ
	|	&Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)                   КАК ФормаОплатыЗаявки,
	|	ЛОЖЬ                           КАК ФормаОплатыНаличная,
	|	ИСТИНА                         КАК ФормаОплатыБезналичная
	|ИЗ
	|	Документ.СчетФактураНалоговыйАгент КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = Выборка.Валюта;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
		//++ НЕ УТ
		НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, Выборка, "СчетУчета, Субконто1, Субконто2, Субконто3");
		НоваяСтрока.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НоваяНастройка);
		//-- НЕ УТ
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявлениюОВвозеТоваров(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация    КАК Организация,
	|	&ТекущаяДата                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаНДС,
	|	&Ссылка                        КАК ДокументОснование,
	//++ НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДС_ВвозимыеТовары) 		КАК ТипНалога,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСТаможенныйСоюзКУплате) 	КАК СчетУчета,
	|	ДанныеДокумента.Контрагент 									КАК Субконто1,
	|	ДанныеДокумента.Договор 									КАК Субконто2,
	|	ДанныеДокумента.Ссылка 										КАК Субконто3,
	//-- НЕ УТ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)                   КАК ФормаОплатыЗаявки,
	|	ЛОЖЬ                           КАК ФормаОплатыНаличная,
	|	ИСТИНА                         КАК ФормаОплатыБезналичная
	|ИЗ
	|	Документ.ЗаявлениеОВвозеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Ссылки)
	|");
	Запрос.УстановитьПараметр("Ссылки", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		НоваяСтрока.Сумма = Выборка.СуммаНДС;
		НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаНДС;
		//++ НЕ УТ
		НоваяСтрока.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, Выборка, "СчетУчета, Субконто1, Субконто2, Субконто3");
		НоваяСтрока.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НоваяНастройка);
		//-- НЕ УТ
	КонецЦикла;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоОперацииПоЯндексКассе(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ТекущаяДата КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ИдентификаторТранзакции КАК ИдентификаторТранзакции,
	|
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Эквайер КАК Контрагент,
	|
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|
	|	ДанныеДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|
	|ИЗ
	|	Документ.ОперацияПоЯндексКассе КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	Если ДанныеЗаполнения.ДокументОснование = Неопределено Тогда 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить Заявку на расходование денежных средств на основании документа %1, поскольку ввод доступен только на основании операций Поступления оплаты от клиента';
			|en = 'It is not required to enter the Payment request based on the %1 document as it can only be entered based on the Payment receipt from customer operations'"),
		ДокументОснование);
		ВызватьИсключение Текст;
	КонецЕсли;	
	
	ДанныеЗаполнения.Вставить("НазначениеПлатежа",
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		 НСтр("ru = 'Возврат средств по договору %1 по переводу № %2 пользователя № %3, без НДС';
				|en = 'Return under the %1 contract on transfer No. %2 of user No. %3, excluding VAT'"),
		 НСтр("ru = '<номер и дата Договора с Яндексом>';
				|en = '<number and date of Contract with Yandex>'"),
		 Формат(ДанныеЗаполнения.ИдентификаторТранзакции, "ЧГ="),
		 НСтр("ru = '<номер, присвоенный Плательщику Оператором>';
				|en = '<number assigned to the Payer by the Provider>'")));
	
	НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	НоваяСтрока.ВалютаВзаиморасчетов 	= Выборка.ВалютаВзаиморасчетов;
	НоваяСтрока.Сумма 					= Выборка.Сумма;
	НоваяСтрока.СуммаВзаиморасчетов 	= Выборка.Сумма;
	НоваяСтрока.Партнер 				= Выборка.Партнер;
	НоваяСтрока.СтатьяРасходов 			= Выборка.СтатьяРасходов; 
	НоваяСтрока.АналитикаРасходов 		= Выборка.АналитикаРасходов; 
	НоваяСтрока.СтавкаНДС 				= Справочники.СтавкиНДС.БезНДС;
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

//++ НЕ УТ

Процедура ЗаполнитьПоВедомостям(Объект, ДанныеЗаполнения)
	
	ХозяйственнаяОперация = Неопределено;
	ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("МассивВедомостей", ДанныеЗаполнения.МассивВедомостей);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Если ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
		СтруктураПараметров.Вставить("Организация", ДанныеЗаполнения.Организация);
	КонецЕсли;
	
	ИнтеграцияБЗК.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	ДанныеВедомостей = ИнтеграцияБЗК.ДанныеВедомостей(СтруктураПараметров, МенеджерВременныхТаблиц);
	РеквизитыШапки = ДанныеВедомостей.РеквизитыШапки;
	
	Если РеквизитыШапки = Неопределено Тогда
		Текст = НСтр("ru = 'Команда не может быть выполнена для указанного объекта';
					|en = 'Cannot execute the command for the specified object'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперацияПоЗарплате", РеквизитыШапки.ХозяйственнаяОперация);
		Если РеквизитыШапки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
			ДанныеЗаполнения.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
		КонецЕсли;
	КонецЕсли;
	
	Если Не (ДанныеЗаполнения.Свойство("Организация") И ЗначениеЗаполнено(ДанныеЗаполнения.Организация)) Тогда
		ДанныеЗаполнения.Вставить("Организация", РеквизитыШапки.Организация);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Валюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация));
	ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",      РеквизитыШапки.ФормаОплаты);
	ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная", РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная);
	ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",    РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Наличная);
	
	Если ДанныеЗаполнения.ФормаОплатыБезналичная Тогда
		
		Если Не (ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет)) Тогда
			
			БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация, ДанныеЗаполнения.Валюта);
			
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыШапки.ВидДохода) Тогда
			ДанныеЗаполнения.Вставить("КодВидаДохода", ИнтеграцияБЗК.ПолучитьКодВидаДохода(РеквизитыШапки.ВидДохода));
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения.ФормаОплатыНаличная Тогда
		
		Если Не (ДанныеЗаполнения.Свойство("Касса") И ЗначениеЗаполнено(ДанныеЗаполнения.Касса)) Тогда
			
			Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
				ДанныеЗаполнения.Организация, ДанныеЗаполнения.Валюта);
			
			ДанныеЗаполнения.Вставить("Касса", Касса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(
		РеквизитыШапки.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("СтатьяДДС", СтатьяДДС);
	
	Если Не ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма,
		|	МАКСИМУМ(ЕСТЬNULL(Заявки.Ссылка, &Ссылка)) КАК Заявка
		|ИЗ
		|	ВТСостояниеВыплатыПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость";
		
	ИначеЕсли ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане") Тогда
		
		Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	ДанныеВедомостей.ТипНалога КАК ТипНалога,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.СуммаОплаты
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК Сумма,
		|	МАКСИМУМ(ЕСТЬNULL(Заявки.Ссылка, &Ссылка)) КАК Заявка
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = Заявки.РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.ТипНалога = Заявки.ТипНалога
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|ГДЕ
		|	НЕ ДанныеВедомостей.ОшибкаПеречисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость,
		|	ДанныеВедомостей.ТипНалога";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	ДанныеВедомостей.ТипНалога КАК ТипНалога,
		|	&СтатьяДДС КАК СтатьяДвиженияДенежныхСредств,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма,
		|	МАКСИМУМ(ЕСТЬNULL(Заявки.Ссылка, &Ссылка)) КАК Заявка
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|			И ДанныеВедомостей.ТипНалога = Заявки.ТипНалога
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|ГДЕ
		|	НЕ ДанныеВедомостей.ОшибкаПеречисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость,
		|	ДанныеВедомостей.ТипНалога";
		
	КонецЕсли;
	
	ВедомостиДокумента = Новый Соответствие;
	СтруктураПоиска = Новый Структура("Заявка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			ДанныеЗаполнения.Вставить("ТипНалога", Выборка.ТипНалога);
			СтруктураПоиска.Вставить("ТипНалога", Выборка.ТипНалога);
		КонецЕсли;
		
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ВедомостиДокумента.Вставить(Выборка.Ведомость, Истина);
		
	КонецЦикла;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Если ВедомостиДокумента.Получить(Выборка.Ведомость) = Неопределено И Выборка.Заявка <> Объект.Ссылка Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 уже включена в заявку %2 и будет пропущена.';
					|en = '%1 is already included into the request %2 and will be omitted.'"), Выборка.Ведомость, Выборка.Заявка);
			ОбщегоНазначения.СообщитьПользователю(Текст);
		КонецЕсли;
	КонецЦикла;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ДанныеЗаполнения.Вставить("НДФЛПоВедомостям", Истина);
		Если ДанныеЗаполнения.Свойство("ТипНалога") И ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
			ДанныеЗаполнения.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины);
		Иначе
			ДанныеЗаполнения.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.НДФЛ);
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Субконто1", Перечисления.ВидыПлатежейВГосБюджет.Налог);
		Если ДанныеЗаполнения.Свойство("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане) Тогда
			ДанныеЗаполнения.Вставить("Субконто2", ДанныеЗаполнения.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		НоваяНастройка = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, ДанныеЗаполнения);
		Объект.НастройкаСчетовУчета = НастройкаСчетовУчетаСервер.НоваяНастройкаСчетовУчета(НоваяНастройка);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", Объект.РасшифровкаПлатежа.Итог("Сумма"));
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуОператораСистемыПлатон(Объект, Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	&Ссылка КАК Заказ,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетОператораСистемыПлатон КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Объект.ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения);
		
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ

Процедура ПроверитьЗаполнениеДоговоровГОЗ(Объект, Отказ, РасшифровкаБезРазбиения)
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьСоответствиеГосКонтракта = Ложь;
	ГосКонтракт = Неопределено;
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ГосКонтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт");
		ПроверятьСоответствиеГосКонтракта = ЗначениеЗаполнено(ГосКонтракт);
	КонецЕсли;
	
	СписокДоговоров = Новый Массив;
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если РасшифровкаБезРазбиения Тогда
			ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ОбъектРасчетов";
			КлючДанных = Неопределено;
		Иначе
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"РасшифровкаПлатежа", СтрокаРасшифровки.НомерСтроки, "ОбъектРасчетов");
			КлючДанных = Объект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
			
			ПроверяемыйДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРасшифровки.ОбъектРасчетов, "Договор");
			
			СписокДоговоров.Добавить(ПроверяемыйДоговор);
			
			Если Не ЗначениеЗаполнено(ПроверяемыйДоговор) Тогда
				Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан договор с поставщиком / исполнителем.';
							|en = 'When payments are made from SDO funds, a contract with supplier / assignee is to be specified.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, ИмяПоля,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокДоговоров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокДоговоров);
	Если СписокДоговоров.Количество() > 1 Тогда
		Текст = НСтр("ru = 'Не допускается заявка на оплату за счет средств ГОЗ более чем по одному договору с поставщиком / исполнителем.';
					|en = 'You cannot make a payment request out of SDO funds for more than one contract per supplier / contractor.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТипаСуммыКредитаДепозита(Объект, Отказ, РасшифровкаБезРазбиения)
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Возврат;
	КонецЕсли;
	
	СписокТиповСумм = Новый Массив;
	
	Для каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если РасшифровкаБезРазбиения Тогда
			ИмяПоля = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ТипСуммыКредитаДепозита";
			КлючДанных = Неопределено;
		Иначе
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", СтрокаРасшифровки.НомерСтроки, "ТипСуммыКредитаДепозита");
			КлючДанных = Объект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРасшифровки.ТипСуммыКредитаДепозита) Тогда
			СписокТиповСумм.Добавить(СтрокаРасшифровки.ТипСуммыКредитаДепозита);
		Иначе
			Текст = НСтр("ru = 'При осуществлении платежей за счет средств ГОЗ должен быть указан тип суммы.';
						|en = 'When payments are made out of SDO funds, an amount type must be specified.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, ИмяПоля,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	СписокТиповСумм = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокТиповСумм);
	Если СписокТиповСумм.Количество() > 1 Тогда
		Текст = НСтр("ru = 'Не допускается заявка на оплату за счет средств ГОЗ более чем по одному типу суммы.';
					|en = 'You cannot make a payment request out of SDO funds for more than one amount type.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры
//-- НЕ УТ

//++ НЕ УТ

Процедура ПроверитьВедомостиНаВыплатуЗарплаты(Объект, Отказ)
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		И Не (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
				И (Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛ ИЛИ Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения) И Объект.НДФЛПоВедомостям)
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	МассивВедомостей = Новый Массив;
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаРасшифровки.Ведомость) Тогда
			МассивВедомостей.Добавить(СтрокаРасшифровки.Ведомость);
		КонецЕсли;
	КонецЦикла;
	МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
	
	Если НЕ ЗначениеЗаполнено(МассивВедомостей) Тогда
		ТекстОшибки = НСтр("ru = 'Для оформления заявки требуется указать ведомости';
							|en = 'To register the request, specify the paysheets'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "РасшифровкаПлатежа", , Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() <> МассивВедомостей.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Одна и та же ведомость не может быть использована 2 раза';
							|en = 'You cannot use the same paysheet twice'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "РасшифровкаПлатежа", , Отказ);
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("МассивВедомостей", МассивВедомостей);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		СтруктураПараметров.Вставить("ТипНалога", Объект.ТипНалога);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнтеграцияБЗК.ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	ДанныеВедомостей = ИнтеграцияБЗК.ДанныеВедомостей(СтруктураПараметров, МенеджерВременныхТаблиц);
	
	Если ДанныеВедомостей.МассивОшибок.Количество() > 0 Тогда
		Текст = ДанныеВедомостей.МассивОшибок[0].Текст;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, Объект, "РасшифровкаПлатежа", , Отказ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("РасшифровкаПлатежа",
		Объект.РасшифровкаПлатежа.Выгрузить(, "Ведомость, Сумма, НомерСтроки"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Ведомость КАК Ведомость,
	|	Таблица.Сумма КАК СуммаЗаявки
	|ПОМЕСТИТЬ РасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК Таблица";
	
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаПоВедомости,
		|	МАКСИМУМ(Заявки.Ссылка) КАК Заявка
		|ПОМЕСТИТЬ ИтогиВедомостей
		|ИЗ
		|	ВТСостояниеВыплатыПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	РасшифровкаПлатежа.Ведомость КАК Ведомость,
		|	РасшифровкаПлатежа.СуммаЗаявки КАК СуммаЗаявки,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомости, 0) КАК СуммаПоВедомости,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ИтогиВедомостей.Заявка
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиВедомостей КАК ИтогиВедомостей
		|		ПО РасшифровкаПлатежа.Ведомость = ИтогиВедомостей.Ведомость";
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
			Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		Иначе
			Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане",
				ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, Объект.Дата));
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	СУММА(ДанныеВедомостей.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаПоВедомости,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК СуммаПоВедомостиВНО,
		|	СУММА(ВЫБОР
		|		КОГДА ДанныеВедомостей.ОшибкаПеречисления
		|			ТОГДА ДанныеВедомостей.Сумма
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК ОшибкаЗачисления,
		|	МАКСИМУМ(Заявки.Ссылка) КАК Заявка
		|ПОМЕСТИТЬ ИтогиВедомостей
		|ИЗ
		|	ВТСостояниеНалоговПоВедомостям КАК ДанныеВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявкиВедомостей КАК Заявки
		|		ПО Заявки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = Заявки.РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
		|			И ДанныеВедомостей.ТипНалога = Заявки.ТипНалога
		|			И ДанныеВедомостей.Ведомость = Заявки.Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомостей.Ведомость
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	РасшифровкаПлатежа.Ведомость КАК Ведомость,
		|	РасшифровкаПлатежа.СуммаЗаявки КАК СуммаЗаявки,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомости, 0) КАК СуммаПоВедомости,
		|	ЕСТЬNULL(ИтогиВедомостей.СуммаПоВедомостиВНО, 0) КАК СуммаПоВедомостиВНО,
		|	ЕСТЬNULL(ИтогиВедомостей.ОшибкаЗачисления, 0) КАК ОшибкаЗачисления,
		|	ИтогиВедомостей.Заявка
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИтогиВедомостей КАК ИтогиВедомостей
		|		ПО РасшифровкаПлатежа.Ведомость = ИтогиВедомостей.Ведомость";
		
	КонецЕсли;
	
	// Для блокирующих ошибок Пометка = Истина
	СписокОшибок = Новый СписокЗначений;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Выборка.НомерСтроки, "Ведомость");
		
		Если ЗначениеЗаполнено(Выборка.Заявка) И Выборка.Заявка <> Объект.Ссылка Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 уже оформлена %2';
					|en = '%2 is already registered for the document %1'"), Выборка.Ведомость, Выборка.Заявка);
			СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
			Продолжить;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
			
			ЕстьОшибкиЗачисления = Выборка.ОшибкаЗачисления <> 0;
			Если Выборка.СуммаЗаявки = Выборка.СуммаПоВедомостиВНО - Выборка.ОшибкаЗачисления
				Или Выборка.СуммаЗаявки = Выборка.СуммаПоВедомостиВНО Тогда
				
				Если ЕстьОшибкиЗачисления И Выборка.СуммаЗаявки = Выборка.СуммаПоВедомостиВНО Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По ведомости %1 зарегистрированы ошибки при зачислении.
								|Сумма налога может быть уменьшена на сумму не зачисленных доходов: %2';
								|en = 'Errors of assignment are registered for the paysheet %1.
								|The tax amount may be decreased at the amount of non-assigned income:%2'"),
						Выборка.Ведомость, Выборка.ОшибкаЗачисления);
					СписокОшибок.Добавить(ИмяПоля, ТекстСообщения);
				КонецЕсли;
				
			ИначеЕсли Выборка.СуммаЗаявки = Выборка.СуммаПоВедомости - Выборка.ОшибкаЗачисления
					Или Выборка.СуммаЗаявки = Выборка.СуммаПоВедомости Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Регистрация в налоговом органе заявки отличается от данных ведомости %1.';
						|en = 'Registration of the request in the tax authority is different from the paysheet data %1.'"),
					Выборка.Ведомость);
				СписокОшибок.Добавить("", ТекстСообщения);
				
				Если ЕстьОшибкиЗачисления И Выборка.СуммаЗаявки = Выборка.СуммаПоВедомости Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По ведомости %1 зарегистрированы ошибки при зачислении.
								|Сумма налога может быть уменьшена на сумму не зачисленных доходов: %2';
								|en = 'Errors of assignment are registered for the paysheet %1.
								|The tax amount may be decreased at the amount of non-assigned income:%2'"),
						Выборка.Ведомость, Выборка.ОшибкаЗачисления);
					СписокОшибок.Добавить(ИмяПоля, ТекстСообщения);
				КонецЕсли;
				
			Иначе
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сумма заявки не соответствует ведомости %1';
						|en = 'The request amount does not match the paysheet %1'"), Выборка.Ведомость);
				СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
				
			КонецЕсли;
			
		ИначеЕсли Выборка.СуммаЗаявки <> Выборка.СуммаПоВедомости Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сумма заявки не соответствует ведомости %1';
					|en = 'The request amount does not match the paysheet %1'"), Выборка.Ведомость);
			СписокОшибок.Добавить(ИмяПоля, ТекстОшибки, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Ошибка Из СписокОшибок Цикл
		Если Ошибка.Пометка Тогда
			ОбщегоНазначения.СообщитьПользователю(Ошибка.Представление, Объект, Ошибка.Значение,, Отказ);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(Ошибка.Представление, Объект, Ошибка.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//-- НЕ УТ

Процедура ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(Объект)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	
	//++ НЕ УТ
	НастройкиСчетовУчета = Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("НастройкаСчетовУчета");
	Субконто3НастроекСчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НастройкиСчетовУчета, "Субконто3");
	Для каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		СтрокаСчетаФактуры = СчетаФактуры.Добавить();
		СтрокаСчетаФактуры.СчетФактура = Субконто3НастроекСчетов[СтрокаТЧ.НастройкаСчетовУчета];
		СтрокаСчетаФактуры.СуммаОплаты = СтрокаТЧ.Сумма;
	КонецЦикла;
	//-- НЕ УТ
	
	СтрокаСчетаФактуры = СчетаФактуры.Добавить();
	СтрокаСчетаФактуры.СчетФактура = Объект.ДокументОснование;
	СтрокаСчетаФактуры.СуммаОплаты = Объект.СуммаДокумента;
	
	УчетНДСРФ.ЗарегистрироватьПланированиеОплатыНДСПоСчетамФактурам(СчетаФактуры, Объект.ТипНалога, Объект.Ссылка, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(Объект, ДанныеЗаполнения = Неопределено)
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		РеквизитыПлательщика = ДенежныеСредстваСерверЛокализация.РеквизитыПлательщика(Объект);
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ИННПлательщика") Тогда
			Объект.ИННПлательщика = РеквизитыПлательщика.ИННПлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("КПППлательщика") Тогда
			Объект.КПППлательщика = РеквизитыПлательщика.КПППлательщика;
		КонецЕсли;
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ТекстПлательщика") Тогда
			Объект.ТекстПлательщика = РеквизитыПлательщика.ТекстПлательщика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ОперацияССамозанятым")
		И ДанныеЗаполнения.ОперацияССамозанятым Тогда
		
		Объект.ОперацияССамозанятым = ДанныеЗаполнения.ОперацияССамозанятым;
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			Объект.ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Контрагент")
			И Не Объект.СписокКонтрагентов Тогда
			Объект.Контрагент = ДанныеЗаполнения.Контрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ОперацияССамозанятым) Тогда
		
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		Объект.ПеречислениеВБюджет = Ложь;
		Объект.ПлатежиПо275ФЗ = Ложь;
		ДенежныеСредстваСерверЛокализация.УстановитьКодВидаДоходаСамозанятого(Объект);
		
	КонецЕсли;
	
	ДенежныеСредстваСерверЛокализация.ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

// Функция определяет доступную для хозяйственной операции форму оплаты
//
// Параметры:
//    Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция, для которой производится проверка.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ФормыОплаты, Неопределено - Ограничение по форме оплаты, либо Неопределено, если нет ограничений.
//
Функция ОграничениеФормыОплаты(Операция) Экспорт
	
	Ограничения = Новый Соответствие;
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне, Перечисления.ФормыОплаты.Безналичная);
	
	Возврат Ограничения.Получить(Операция);
	
КонецФункции

// Дополняет переданную структуру значениями реквизитов доступных формы оплаты в зависимости от хозяйственной операции.
//
// Параметры:
//    ДанныеЗаполнения - Структура - Структура, содержащая хоз. операцию.
//
Процедура ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		
		ФормаОплаты = ОграничениеФормыОплаты(ДанныеЗаполнения.ХозяйственнаяОперация);
		
		Если ФормаОплаты <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",         (ФормаОплаты = Перечисления.ФормыОплаты.Наличная));
			ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",      (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная));
			ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",   (ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта));
			ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",           ФормаОплаты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#КонецОбласти
