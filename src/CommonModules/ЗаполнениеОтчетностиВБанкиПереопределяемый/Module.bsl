////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТЧЕТНОСТИ ДЛЯ БАНКОВ
// Модуль предназначен для переопределяемых процедур и функций заполнения отчета
// "Бухгалтерская отчетность для предоставления в банк".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьПоказатели2011Кв4(ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	ИмяСекцииПоказателей = ПараметрыОтчета.СтруктураОтчета.Баланс.ИмяСекцииПоказателей;
	
	Если ИмяСекцииПоказателей = "Баланс_2012Кв4_3" Тогда
		ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_Баланс2012Кв4_3(ПоказателиОтчета, ПараметрыОтчета);
	ИначеЕсли ИмяСекцииПоказателей = "БалансНКО_2012Кв4_3" Тогда
		ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_БалансНКО2012Кв4_3(ПоказателиОтчета, ПараметрыОтчета);
	Иначе
		ИмяСобытия = НСтр("ru = 'Заполнение бухгалтерской отчетности';
							|en = 'Fill in accounting reporting'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		СтрокаОшибки = НСтр("ru = 'Неизвестный идентификатор набора автозаполняемых показателей для бухгалтерского баланса';
							|en = 'Unknown ID of auto populated indicator set for balance sheet'");
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СтрокаОшибки + " - """ + ИмяСекцииПоказателей + """");
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
	Если ПараметрыОтчета.СтруктураОтчета.ОПУ.ИмяСекцииПоказателей = "ФормаОтчетаНеЕНВД" Тогда
		ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОФР(ПоказателиОтчета, ПараметрыОтчета);
	ИначеЕсли ПараметрыОтчета.СтруктураОтчета.ОПУ.ИмяСекцииПоказателей = "ФормаОтчетаЕНВД" Тогда
		ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОФРЕНВД(ПоказателиОтчета, ПараметрыОтчета);
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестное имя набора автозаполняемых показателей для отчета о прибылях и убытках';
								|en = 'Unknown name of auto populated indicator set for the profit and loss statement'");
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОИК(ПоказателиОтчета, ПараметрыОтчета);
	ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОДДС(ПоказателиОтчета, ПараметрыОтчета);
	ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ДополнительныеПоказатели(ПоказателиОтчета, ПараметрыОтчета);
	
КонецПроцедуры

Процедура ДобавитьПоказатели2017Кв3(ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_Баланс(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОФР(ПоказателиОтчета, ПараметрыОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОИК(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОДДС(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ДополнительныеПоказатели(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПоказателиОтчета);
	
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ФинансовыеВложенияКраткосрочные(ПоказателиОтчета);
	ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ФинансовыеВложенияДолгосрочные(ПоказателиОтчета);
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаПоВременнымТаблицам(ИсходныйЗапрос) Экспорт
	
	МассивТекстовЗапроса = Новый Массив;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_БанковскиеСчетаПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_БанковскиеСчета());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДокументыПоСчетуПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДокументыПоСчету());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеКонтрагентовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеКонтрагентов());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеДоговоровПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеДоговоров());
		Если НЕ ИсходныйЗапрос.Параметры.Свойство("ВалютаРеглУчета") Тогда
			ИсходныйЗапрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДоговорыКредитовДепозитовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДоговорыКредитовДепозитов());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_РасходыБудущихПериодовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ТекстЗапросаВТ_РасходыБудущихПериодов());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_СрокиОплатыДокументовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_СрокиОплатыДокументов());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеОбеспеченийПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеОбеспечений());
	КонецЕсли;
	
	Если СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеПППереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеПП());
	КонецЕсли;
	
	МассивТекстовЗапроса.Добавить(ИсходныйЗапрос.Текст);
	
	ИсходныйЗапрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Функция ВидыСубконтоКонтрагентов() Экспорт
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ВидыСубконто.Добавить(Тип("СправочникСсылка.Организации"));
	ВидыСубконто.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	Возврат ВидыСубконто;
	
КонецФункции

Функция ВидыСубконтоДоговоров() Экспорт
	
	ВидыСубконто = Новый Массив;
	
	ВидыСубконто.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ВидыСубконто.Добавить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	ВидыСубконто.Добавить(Тип("СправочникСсылка.ДоговорыАренды"));
	ВидыСубконто.Добавить(Тип("СправочникСсылка.ДоговорыМеждуОрганизациями"));
	
	Возврат ВидыСубконто;
	
КонецФункции

Функция СчетРасчетныеСчета() Экспорт
	
	Возврат Счет("51");
	
КонецФункции

Функция СчетВалютныеСчета() Экспорт
	
	Возврат Счет("52");
	
КонецФункции

Функция СчетСпециальныеСчетаВБанках() Экспорт
	
	Возврат Счет("55");
	
КонецФункции

#Область ЗаполнениеФормаОтчета2011Кв4

Процедура Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения) Экспорт
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	Организация = КонтекстВыполнения.Организация;
	НачалоПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.НачалоПериодаОтчета;
	КонецПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.КонецПериодаОтчета;
	
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация",   Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  КонецПериодаОтчета);
	
	НастройкиПолученияБухИтогов = Новый Структура;
	НастройкиПолученияБухИтогов.Вставить("Организация",   Организация);
	НастройкиПолученияБухИтогов.Вставить("НачалоПериода", НачалоПериодаОтчета);
	НастройкиПолученияБухИтогов.Вставить("КонецПериода",  КонецПериодаОтчета);
	
	СальдоИОборотыПоСчетам = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетам(НастройкиПолученияБухИтогов);
	
	СКК_02    = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКК("02", СальдоИОборотыПоСчетам);
	СКД_07    = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("07", СальдоИОборотыПоСчетам);
	СКД_08_01 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.01", СальдоИОборотыПоСчетам);
	СКД_08_02 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.02", СальдоИОборотыПоСчетам);
	СКД_08_03 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.03", СальдоИОборотыПоСчетам);
	СКД_08_04 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.04", СальдоИОборотыПоСчетам);
	СКД_08_06 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.06", СальдоИОборотыПоСчетам);
	СКД_08_07 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.07", СальдоИОборотыПоСчетам);
	СКД_08_12 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("08.12", СальдоИОборотыПоСчетам);
	СКД_75_01 = ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД("75.01", СальдоИОборотыПоСчетам);
	
	Графа = КонтекстВыполнения.КонтекстОтчета.Графа;
	ЗаголовокГрафы = КонтекстВыполнения.КонтекстОтчета.ЗаголовокГрафы;
	
	НомерСтроки = "5010";
	НаименованиеСтроки = "Накопленная амортизация";
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = СКК_02;
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, ЗаголовокРасшифровки,
		"+", "!СКК " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("02")).Код,
		СКК_02, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "02"));
	
	НомерСтроки = "5020";
	НаименованиеСтроки = "Незавершенное строительство и незаконченные операции по приобретению, модернизации и т.п. основных средств";
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = СКД_07 + СКД_08_01 + СКД_08_02 + СКД_08_03 + СКД_08_04 + СКД_08_06 + СКД_08_07 + СКД_08_12;
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, ЗаголовокРасшифровки,
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("07")).Код,
		СКД_07, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "07"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.01")).Код,
		СКД_08_01, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.01"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.02")).Код,
		СКД_08_02, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.02"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.03")).Код,
		СКД_08_03, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.03"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.04")).Код,
		СКД_08_04, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.04"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.06")).Код,
		СКД_08_06, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.06"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.07")).Код,
		СКД_08_07, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.07"));
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, "",
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("08.12")).Код,
		СКД_08_12, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, "08.12"));

	// Строка 5030.
	
	Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе_Строка5030(КонтекстВыполнения);
	
	// Строка 5040.
	
	Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе_Строка5040(КонтекстВыполнения);
	
	НомерСтроки = "5050";
	НаименованиеСтроки = "Просроченная дебиторская задолженность";
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ПросроченнаяЗадолженность = ПросроченнаяЗадолженностьПокупателей(Организация, КонецПериодаОтчета);
	
	ЗначениеПоказателя = ПросроченнаяЗадолженность.Итог("ПросроченнаяЗадолженность");
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, ЗаголовокРасшифровки,
		"+", НаименованиеСтроки,
		ЗначениеПоказателя, ИмяРаздела, НастройкиЗадолженностиПокупателей(ОбщиеПараметрыРасшифровки));
	
	НомерСтроки = "5060";
	НаименованиеСтроки = "Просроченная кредиторская задолженность";
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ПросроченнаяЗадолженность = ПросроченнаяЗадолженностьПоставщикам(Организация, КонецПериодаОтчета);
	
	ЗначениеПоказателя = ПросроченнаяЗадолженность.Итог("ПросроченнаяЗадолженность");
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, ЗаголовокРасшифровки,
		"+", НаименованиеСтроки,
		ЗначениеПоказателя, ИмяРаздела, НастройкиЗадолженностиПоставщикам(ОбщиеПараметрыРасшифровки));
	
	НомерСтроки = "5070";
	НаименованиеСтроки = "Просроченная кредиторская задолженность";
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	ЗаголовокРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
	
	ЗначениеПоказателя = СКД_75_01;
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, ЗаголовокРасшифровки,
		"+", "!СКД " + БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет("75.01")).Код,
		СКД_75_01, ИмяРаздела, НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, Счет("75.01")));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеФормаОтчета2017Кв3

Процедура Заполнить2017Кв3_РасшифровкиОбеспеченийПолученные(ДанныеИПредставление, ПараметрыОтчета) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	КонецПериода = ПараметрыОтчета.КонецПериода;
	
	СчетУчетаОбязательств = Счет("008"); // Обеспечения обязательств и платежей полученные
	
	Обеспечения = ОбеспеченияОбязательств(СчетУчетаОбязательств, "ОбеспечениеПредоставил", Организация, КонецПериода);
	
	ДанныеИПредставление.Данные = Обеспечения;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_РасшифровкиОбеспеченийВыданные(ДанныеИПредставление, ПараметрыОтчета) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	КонецПериода = ПараметрыОтчета.КонецПериода;
	
	СчетУчетаОбязательств = Счет("009"); // Обеспечения обязательств и платежей выданные
	
	Обеспечения = ОбеспеченияОбязательств(СчетУчетаОбязательств, "ОбеспечениеПолучил", Организация, КонецПериода);
	
	ДанныеИПредставление.Данные = Обеспечения;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ЛизингОбязательства(ПараметрыОтчета) Экспорт
	
	ИмяРаздела = "ЛизингОбязательства";
	
	ДеревоДанных = Новый ДеревоЗначений; // Прототип дерева для многострочных частей
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0];
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	ПараметрыЗаполнения.Вставить("КонецПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	ПараметрыЗаполнения.Вставить("ПрефиксМСЧ", "П00006");
	ПараметрыЗаполнения.Вставить("ИмяРаздела", ИмяРаздела);
	ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
	
	#Область Заполнить2017Кв3_ЛизингОбязательства_ЗаПериод
	
	ТаблицаРасшифровки = ЗаполнениеОтчетностиВБанки.НоваяТаблицаРасшифровки();
	
	ПрефиксМСЧ    = ПараметрыЗаполнения.ПрефиксМСЧ;
	
	ПараметрыОСВ = Новый Структура;
	ПараметрыОСВ.Вставить("Организация", ПараметрыЗаполнения.Организация);
	ПараметрыОСВ.Вставить("НачалоПериодаОтчета", ПараметрыЗаполнения.НачалоПериода);
	ПараметрыОСВ.Вставить("КонецПериодаОтчета",  ПараметрыЗаполнения.КонецПериода);
	
	СведенияОСВ = ОСВ_ПоЛизингу(ПараметрыОСВ);
	
	МСЧ1 = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М1"];
	
	МСЧ1.Строки.Очистить();
	
	Если СведенияОСВ.Количество() <> 0 Тогда
		Для Каждого СтрокаОСВ из СведенияОСВ Цикл
			СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
			
			СтрокаМСЧ1.Данные = Новый Структура;
			
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100101", СтрокаОСВ.КонтрагентНаименование);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100102", СтрокаОСВ.КонтрагентИНН);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100103", СтрокаОСВ.КонтрагентКПП);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100104", СтрокаОСВ.ДоговорНомер);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100105", СтрокаОСВ.ДоговорДатаНачала);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100106", СтрокаОСВ.Продукт);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100107", СтрокаОСВ.УчетОбязательства);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100109", СтрокаОСВ.Валюта);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100110", СтрокаОСВ.СуммаПоДоговору);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100111", СтрокаОСВ.ОсталосьОплатить);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100112", СтрокаОСВ.ОплаченоВТеченииГода);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100108", СтрокаОСВ.ПроцентнаяСтавка);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100113", СтрокаОСВ.ДоговорДатаОкончания);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100114", СтрШаблон(НСтр("ru = 'Договор: ""%1""';
																				|en = 'Contract: ""%1""'"), СтрокаОСВ.ДоговорПредставление));
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100115", СтрокаОСВ.СуммаПоДоговоруВал);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100116", СтрокаОСВ.ОсталосьОплатитьВал);
			СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100117", СтрокаОСВ.Просрочено);
			СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура(ПрефиксМСЧ + "М2", ДеревоДанных.Скопировать());
			
			МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М2"];
			МСЧ2.Строки.Очистить();
			
			ГрафикПлатежей = ГрафикПлатежейЛизинга(СтрокаОСВ, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			Для каждого СтрокаИсточник Из ГрафикПлатежей Цикл
				
				СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
				
				СтрокаМСЧ2.Данные = Новый Структура;
				СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200101", СтрокаИсточник.ДатаПлатежа);
				СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200104", СтрокаИсточник.СуммаПлатежа);
				СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200105", СтрокаИсточник.ОсновнойДолг);
				СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200102", СтрокаИсточник.СуммаПлатежаРегл);
				СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200103", СтрокаИсточник.ОсновнойДолгРегл);
				
				СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаполнитьРасшифровку_ЛизингОбязательства(ТаблицаРасшифровки, ПараметрыЗаполнения, СведенияОСВ);
		
	Иначе
		СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
		
		СтрокаМСЧ1.Данные = Новый Структура;
		
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100101", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100102", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100103", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100104", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100105", '0001-01-01');
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100106", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100107", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100109", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100110", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100111", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100112", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100108", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100113", '0001-01-01');
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100114", "");
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100115", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100116", 0);
		СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100117", 0);
		СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура(ПрефиксМСЧ + "М2", ДеревоДанных.Скопировать());
		
		МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М2"];
		МСЧ2.Строки.Очистить();
		
		ГрафикПлатежей = ПустойГрафикПлатежей();
		Для каждого СтрокаИсточник Из ГрафикПлатежей Цикл
			
			СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
			
			СтрокаМСЧ2.Данные = Новый Структура;
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200101", СтрокаИсточник.ДатаПлатежа);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200104", СтрокаИсточник.СуммаПлатежа);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200105", СтрокаИсточник.ОсновнойДолг);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200102", СтрокаИсточник.СуммаПлатежаРегл);
			СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200103", СтрокаИсточник.ОсновнойДолгРегл);
			
			СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаРасшифровки.Количество() Тогда
		ЗаполнениеОтчетностиВБанки.РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	КонецЕсли;
	
	#КонецОбласти
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДоходыРасходы(ПараметрыЗаполнения) Экспорт
	
	Доходы  = ДоходыПоСтатьям_2017Кв3(ПараметрыЗаполнения);
	Расходы = РасходыПоСтатьям_2017Кв3(ПараметрыЗаполнения);
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Доходы", Доходы);
	ДанныеОтчета.Вставить("Расходы", Расходы);
	
	ПараметрыЗаполнения.Вставить("ДанныеОтчета", ДанныеОтчета);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ФинансовыеВложенияКраткосрочные(ПараметрыОтчета, СтраницаРаздела) Экспорт
	
	ПрефиксМСЧ = "П00012";
	
	ИтогоСтоимость = 0;
	ИтогоПросрочено = 0;
	
	МСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М1"];
	МСЧ.Строки.Очистить();
	
	ПараметрыСведений = Новый Структура;
	ПараметрыСведений.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыСведений.Вставить("ДатаСведений", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	СведенияОВложениях = ФинансовыеВложенияКраткосрочные_2017Кв3(ПараметрыСведений);
	
	Если СведенияОВложениях.Количество() = 0 Тогда
		СтрокаМСЧ = Заполнить2017Кв3_ФинансовыеВложения_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ);
		
	Иначе
		Для Каждого СтрокаСведений Из СведенияОВложениях Цикл
			СтрокаМСЧ = Заполнить2017Кв3_ФинансовыеВложения_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ);
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100101"] = СтрокаСведений.Контрагент;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100102"] = СтрокаСведений.ИНН;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100103"] = СтрокаСведений.СчетНаименование;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100106"] = СтрокаСведений.СКД;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100107"] = СтрокаСведений.Валюта;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100108"] = СтрокаСведений.ВалСКД;
			
			Комментарий = "";
			
			Если ЗначениеЗаполнено(СтрокаСведений.БанковскийСчет) Тогда
				Комментарий = "р/с " + СтрокаСведений.БанковскийСчет;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаСведений.ЦеннаяБумага) Тогда
				Комментарий = СокрЛП(СтрокаСведений.ЦеннаяБумага);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаСведений.Договор) Тогда
				Комментарий = "По договору " + СокрЛП(СтрокаСведений.Договор);
				
			Иначе
				Если ЗначениеЗаполнено(СтрокаСведений.ДоговорНомер) Тогда
					Комментарий = "По договору " + СокрЛП(СтрокаСведений.ДоговорНомер);
					
					Если ЗначениеЗаполнено(СтрокаСведений.ДоговорДата) Тогда
						Комментарий = Комментарий + " от " + Формат(СтрокаСведений.ДоговорДата, "ДЛФ=Д");
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100112"] = Комментарий;
			
		КонецЦикла;
		
		ИтогоСтоимость = СведенияОВложениях.Итог("СКД");
		
	КонецЕсли;
	
	СтраницаРаздела.Данные[ПрефиксМСЧ + "0000101"] = ИтогоСтоимость;
	СтраницаРаздела.Данные[ПрефиксМСЧ + "0000102"] = ИтогоПросрочено;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ФинансовыеВложенияДолгосрочные(ПараметрыОтчета, СтраницаРаздела) Экспорт
	
	ПрефиксМСЧ = "П00013";
	
	ИтогоСтоимость = 0;
	ИтогоПросрочено = 0;
	
	МСЧ = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М1"];
	МСЧ.Строки.Очистить();
	
	ПараметрыСведений = Новый Структура;
	ПараметрыСведений.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыСведений.Вставить("ДатаСведений", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	СведенияОВложениях = ФинансовыеВложенияДолгосрочные_2017Кв3(ПараметрыСведений);
	
	Если СведенияОВложениях.Количество() = 0 Тогда
		СтрокаМСЧ = Заполнить2017Кв3_ФинансовыеВложения_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ);
		
	Иначе
		Для Каждого СтрокаСведений Из СведенияОВложениях Цикл
			СтрокаМСЧ = Заполнить2017Кв3_ФинансовыеВложения_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ);
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100101"] = СтрокаСведений.Контрагент;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100102"] = СтрокаСведений.ИНН;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100103"] = СтрокаСведений.СчетНаименование;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100106"] = СтрокаСведений.СКД;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100107"] = СтрокаСведений.Валюта;
			СтрокаМСЧ.Данные[ПрефиксМСЧ + "М100108"] = СтрокаСведений.ВалСКД;
			
		КонецЦикла;
		
		ИтогоСтоимость = СведенияОВложениях.Итог("СКД");
		
	КонецЕсли;
	
	СтраницаРаздела.Данные[ПрефиксМСЧ + "0000101"] = ИтогоСтоимость;
	СтраницаРаздела.Данные[ПрефиксМСЧ + "0000102"] = ИтогоПросрочено;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_СтруктураВыручки(ПараметрыОтчета) Экспорт
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ПрочиеПоказатели(ПараметрыОтчета) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Переопределения получения таблицы графика платежей кредитов и депозитов.
//
//	Параметры:
//		ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - договор кредитов и депозитов, для которого необходимо получить график платежей.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица, содержащая график платежей с колонками:
//			* ДатаПлатежа - Дата - дата платежа по графику;
//			* СуммаПлатежа - Число - сумма платежа по графику.
//
Функция ГрафикПлатежейКредитовДепозитов(ДанныеДоговора, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикОплат.Период КАК ДатаПлатежа,
	|	ГрафикОплат.Сумма + ГрафикОплат.Проценты + ГрафикОплат.Комиссия КАК СуммаПлатежа,
	|	&ОсновнойДолг - (ГрафикОплат.СуммаИтог + ГрафикОплат.ПроцентыИтог + ГрафикОплат.КомиссияИтог) КАК ОсновнойДолг,
	|	ВЫРАЗИТЬ((ГрафикОплат.Сумма + ГрафикОплат.Проценты + ГрафикОплат.Комиссия) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаПлатежаРегл,
	|	ВЫРАЗИТЬ((&ОсновнойДолг - (ГрафикОплат.СуммаИтог + ГрафикОплат.ПроцентыИтог + ГрафикОплат.КомиссияИтог)) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК ОсновнойДолгРегл
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплат
	|ГДЕ
	|	ГрафикОплат.ВариантГрафика.Владелец = &Договор";
	Запрос.УстановитьПараметр("Договор", ДанныеДоговора.Договор);
	КоэффициентПересчетаВВалютуРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		ДанныеДоговора.Валюта, ДанныеДоговора.Валюта, Период, ДанныеДоговора.Организация).КоэффициентПересчетаВВалютуРегл;
	Запрос.УстановитьПараметр("КоэффПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ОсновнойДолг", ДанныеДоговора.Сумма);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустойГрафикПлатежей()
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

// Переопределения получения таблицы графика платежей кредитов и депозитов.
//
//	Параметры:
//		ДоговорКредитаДепозита - СправочникСсылка.ДоговорыКредитовИДепозитов - договор кредитов и депозитов, для которого необходимо получить график платежей.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица, содержащая график платежей с колонками:
//			* ДатаПлатежа - Дата - дата платежа по графику;
//			* СуммаПлатежа - Число - сумма платежа по графику.
//
Функция ГрафикПлатежейЛизинга(ДанныеДоговора, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора КАК АктуальныеУсловияДоговора
	|ПОМЕСТИТЬ втУсловияДоговоровАренды
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(&Период, Договор = &Договор) КАК УсловияДоговоровАренды
	|ИНДЕКСИРОВАТЬ ПО
	|	АктуальныеУсловияДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплат.Дата КАК ДатаПлатежа,
	|	ГрафикОплат.УслугаПоАренде + ГрафикОплат.ОбеспечительныйПлатеж + ГрафикОплат.ВыкупнаяСтоимость КАК СуммаПлатежа,
	|	&ОсновнойДолг - (ГрафикОплат.УслугаПоАренде + ГрафикОплат.ОбеспечительныйПлатеж + ГрафикОплат.ВыкупнаяСтоимость) КАК ОсновнойДолг,
	|	ВЫРАЗИТЬ((ГрафикОплат.УслугаПоАренде + ГрафикОплат.ОбеспечительныйПлатеж + ГрафикОплат.ВыкупнаяСтоимость) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаПлатежаРегл,
	|	ВЫРАЗИТЬ((&ОсновнойДолг - (ГрафикОплат.УслугаПоАренде + ГрафикОплат.ОбеспечительныйПлатеж + ГрафикОплат.ВыкупнаяСтоимость)) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК ОсновнойДолгРегл
	|ИЗ
	|	РегистрСведений.ГрафикОплатУслугПоАренде КАК ГрафикОплат
	|ГДЕ
	|	ГрафикОплат.АктуальныеУсловияДоговора В (ВЫБРАТЬ Т.АктуальныеУсловияДоговора ИЗ втУсловияДоговоровАренды КАК Т)
	|	И ГрафикОплат.Договор = &Договор
	|	И ГрафикОплат.Активность";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Договор", ДанныеДоговора.Договор);
	КоэффициентПересчетаВВалютуРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		ДанныеДоговора.Валюта, ДанныеДоговора.Валюта, Период, ДанныеДоговора.Организация).КоэффициентПересчетаВВалютуРегл;
	Запрос.УстановитьПараметр("КоэффПересчетаВВалютуРегл", КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ОсновнойДолг", ДанныеДоговора.СуммаПоДоговоруВал);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПустойГрафикПлатежей()
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

Функция ПустойГрафикПлатежей()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПлатежа,
	|	0 КАК СуммаПлатежа,
	|	0 КАК ОсновнойДолг,
	|	0 КАК СуммаПлатежаРегл,
	|	0 КАК ОсновнойДолгРегл";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Возвращает таблицу с просроченной задолженностью покупателей
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//   РазрешеноИспользоватьТекущиеИтоги - Булево - Если Истина, то при совпадении даты задолженности с текущим днем, 
//				будут использованы текущие итоги регистра бухгалтерии.
//   РазрешеноИспользоватьТекущиеИтоги - Булево - Если Истина, то при совпадении даты задолженности с текущим днем, 
//				будут использованы текущие итоги регистра бухгалтерии.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность.
//
Функция ПросроченнаяЗадолженностьПокупателей(Организация, ДатаЗадолженности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(Запрос.МенеджерВременныхТаблиц, ДатаЗадолженности);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Расчеты.КОплате) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	ТаблицаОстатковКлиентов КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|ГДЕ
		|	АналитикаУчета.Организация = &Организация
		|	И Расчеты.КОплате > 0";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгРеглОстаток) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&Граница, ДатаПлановогоПогашения < КОНЕЦПЕРИОДА(&ДатаОстатков, ДЕНЬ)) КАК РасчетыСКлиентамиПоСрокамОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|ГДЕ
		|	Аналитика.Организация = &Организация";
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаЗадолженности;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаЗадолженности);
		Запрос.УстановитьПараметр("Граница", Граница);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

// Возвращает таблицу с просроченной задолженностью поставщикам
// Параметры:
//   Организация - СправочникСсылка.Организации - отбор по организации (может быть пустой).
//   ДатаЗадолженности - Дата - на какую дату будет получена задолженность.
//   ВключатьОбособленныеПодразделения - Булево - по-умолчанию Ложь.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. ПросроченнаяЗадолженность.
//
Функция ПросроченнаяЗадолженностьПоставщикам(Организация, ДатаЗадолженности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Если Не ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ВзаиморасчетыСервер.РассчитатьДатыПлатежаПоставщика(Запрос.МенеджерВременныхТаблиц, ДатаЗадолженности);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(Расчеты.КОплате) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	ТаблицаОстатковПоставщиков КАК Расчеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|ГДЕ
		|	АналитикаУчета.Организация = &Организация
		|	И Расчеты.КОплате > 0";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток) КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(&Граница, ДатаПлановогоПогашения < КОНЕЦПЕРИОДА(&ДатаОстатков, ДЕНЬ)) КАК РасчетыСПоставщикамиПоСрокамОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиПоСрокамОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|ГДЕ
		|	Аналитика.Организация = &Организация";
		Параметры = Новый Массив(2);
		Параметры[0] = ДатаЗадолженности;
		Параметры[1] = ВидГраницы.Включая;
		Граница = Новый(Тип("Граница"),Параметры);
		
		Запрос.УстановитьПараметр("ДатаОстатков", ДатаЗадолженности);
		Запрос.УстановитьПараметр("Граница", Граница);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

КонецФункции

Процедура ЗаполнитьРасшифровку_ЛизингОбязательства(ТаблицаРасшифровки, ПараметрыЗаполнения, ДанныеЗаполнения)
	
	Для каждого СтрокаДанных Из ДанныеЗаполнения Цикл
		
		НомерСтроки = ДанныеЗаполнения.Индекс(СтрокаДанных) + 1;
		ЗаголовокРасшифровки = НСтр("ru = 'Расшифровка строки №%1 по договору лизинга ""%2""';
									|en = 'Drill-down of line  %1 in the ""%2"" lease agreement'");
		ЗаголовокРасшифровки = СтрШаблон(ЗаголовокРасшифровки, НомерСтроки, СтрокаДанных.ДоговорПредставление);
		
		НастройкиРасшифровки = Новый Структура;
		НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
		НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ВедомостьРасчетовПоАренде.Форма");
		НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("Отбор", Новый Структура);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Отбор.Вставить("Договор", СтрокаДанных.Договор);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Отбор.Вставить("Валюта", СтрокаДанных.Валюта);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Отбор.Вставить("КонецПериода", ПараметрыЗаполнения.КонецПериода);
		
		НаименованиеСтроки = НСтр("ru = 'Сумма по договору:';
									|en = 'Contract amount:'");
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки,
			ПараметрыЗаполнения.ПрефиксМСЧ + "М_" + НомерСтроки,
			ЗаголовокРасшифровки,
			"+",
			НаименованиеСтроки,
			СтрокаДанных.СуммаПоДоговору,
			ПараметрыЗаполнения.ИмяРаздела,
			НастройкиРасшифровки);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровку_ЗадолженностьПоКредитамЗаймам(ТаблицаРасшифровки, ПараметрыЗаполнения, ДанныеЗаполнения) Экспорт
	
	Если ПараметрыЗаполнения.ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная" Тогда
		СтрокаТипа = НСтр("ru = 'долгосрочных';
							|en = 'long-term '");
	Иначе
		СтрокаТипа = НСтр("ru = 'краткосрочных';
							|en = 'short-term '");
	КонецЕсли;
	
	Для каждого СтрокаДанных Из ДанныеЗаполнения Цикл
		
		НомерСтроки = ДанныеЗаполнения.Индекс(СтрокаДанных) + 1;
		ЗаголовокРасшифровки = НСтр("ru = 'Расшифровка строки №%1 по договору %3 кредитов и займов ""%2""';
									|en = 'Drill-down of line %1 in the ""%2"" credit and loan agreement %3'");
		ЗаголовокРасшифровки = СтрШаблон(ЗаголовокРасшифровки, НомерСтроки, СтрокаДанных.ДоговорПредставление, СтрокаТипа);
		
		НастройкиРасшифровки = Новый Структура;
		НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
		НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ПланФактныйАнализКредитовИДепозитов.Форма");
		НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("Отбор", Новый Структура);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Отбор.Вставить("Договор", СтрокаДанных.Договор);
		НастройкиРасшифровки.Отчет.ПараметрыФормы.Отбор.Вставить("Валюта", СтрокаДанных.Валюта);
		
		НаименованиеСтроки = НСтр("ru = 'Сумма по договору:';
									|en = 'Contract amount:'");
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки,
			ПараметрыЗаполнения.ПрефиксМСЧ + "М_" + НомерСтроки,
			ЗаголовокРасшифровки,
			"+",
			НаименованиеСтроки,
			СтрокаДанных.Сумма,
			ПараметрыЗаполнения.ИмяРаздела,
			НастройкиРасшифровки);
			
	КонецЦикла;
	
КонецПроцедуры

// Переопределения получения данных оборотно-сальдовой ведомости по договорам лизинга.
//
//	Параметры:
//		ПараметрыОСВ - Структура - параметры получения оборотно-сальдовой ведомости, со следующими свойствами:
//			* Организация - СправочникСсылка.Организации - организация по которой получаются данные;
//			* НачалоПериодаОтчета - Дата - дата начала периода, по данным которого получаются данные;
//			* КонецПериодаОтчета - Дата - конец периода, по данным которого получаются данные.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица данных оборотно-сальдовой ведомости со следующими колонками:
//			* Договор - СправочникСсылка.ДоговорыАренды - договор;
//			* ДоговорПредставление - Строка - строковое представление договора лизинга (соответствует реквизиту "Наименование" справочника договоры лизинга);
//			* ДоговорНомер - Строка - номер договора лизинга (соответствует реквизиту "Номер" справочника договоры лизинга);
//			* ДоговорДата - Дата - дата договора лизинга (соответствует реквизиту "Дата" справочника договоры лизинга);
//			* Валюта - СправочникСсылка.Валюты - валюта договора лизинга (соответствует реквизиту "ВалютаВзаиморасчетов" справочника договоры лизинга);
//			* Контрагент - СправочникСсылка.Контрагенты - контрагент договора лизинга (соответствует реквизиту "Контрагент" справочника договоры лизинга);
//			* КонтрагентНаименование - Строка - строковое представление контрагента договора лизинга (соответствует реквизиту "Наименование" справочника Контрагенты);
//			* КонтрагентИНН - Строка - ИНН контрагента договора лизинга (соответствует реквизиту "ИНН" справочника Контрагенты);
//			* КонтрагентКПП - Строка - КПП контрагента договора лизинга (соответствует реквизиту "КПП" справочника Контрагенты);
//			* Продукт - Строка - если в договоре указан выкуп предмета лизинга, принимает значение "Финансовый лизинг", в противном случае "Операционный лизинг";
//			* УчетОбязательства - Строка - если в договоре указан вариант учета имущества за балансом, принимает значение "Забаланс",
//				если указан вариант учета имущества на балансе, принимает значение "Баланс", в противном случае "";
//			* СуммаПоДоговору - Число - сумма кредитовых оборотов по арендным обязательствам договора лизинга;
//			* ОсталосьОплатить - Число - сумма кредитовых оборотов по арендным обязательствам договора лизинга за вычетом: дебетовых оборотов по арендным обязательствам,
//				разницы дебетовых и кредитовых оборотов по обеспечительному платежу, разницы дебетовых и кредитовых оборотов по услугам лизинга и разницы по дебетовым и кредитовым оборотам по выкупу;
//			* ОплаченоВТеченииГода - Число - сумма дебетовых оборотов по выкупу предмета лизинга, дебетовых оборотов по обеспечительному платежу, дебетовых оборотов по арендным обязательствам, за вычетом кредитовых оборотов по обеспечительному платежу и услуг по лизингу;
//			* ПроцентнаяСтавка - Число - процентная ставка по договору лизинга;
//			* ДатаПоследнегоПлатежа - Дата - дата последнего платежа по договору лизинга;
//
Функция ОСВ_ПоЛизингу(ПараметрыОСВ)
	
	Организация         = ПараметрыОСВ.Организация;
	НачалоПериодаОтчета = НачалоМесяца(ПараметрыОСВ.НачалоПериодаОтчета);
	КонецПериодаОтчета  = КонецМесяца(ПараметрыОСВ.КонецПериодаОтчета);
	НачалоОтсчетаГода   = НачалоМесяца(ДобавитьМесяц(ПараметрыОСВ.НачалоПериодаОтчета, -12));
	
	Запрос = Новый Запрос;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Ссылка,
	|	ДоговорыАренды.Наименование КАК ДоговорПредставление,
	|	ДоговорыАренды.Номер КАК ДоговорНомер,
	|	ДоговорыАренды.Дата КАК ДоговорДата,
	|	ДоговорыАренды.ДатаНачалаДействия КАК ДоговорДатаНачала,
	|	ДоговорыАренды.ДатаОкончанияДействия КАК ДоговорДатаОкончания,
	|	ДоговорыАренды.ВалютаВзаиморасчетов КАК Валюта,
	|	ДоговорыАренды.Контрагент КАК Контрагент,
	|	ДоговорыАренды.Балансодержатель КАК Балансодержатель,
	|	ДоговорыАренды.ЕстьОбеспечительныйПлатеж КАК ЕстьОбеспечительныйПлатеж,
	|	ДоговорыАренды.ЕстьВыкупПредметовАренды КАК ЕстьВыкупПредметовАренды,
	|	ДоговорыАренды.ГруппаФинансовогоУчета КАК АналитикаУчета
	|ПОМЕСТИТЬ ДоговорыАренды
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	НЕ ДоговорыАренды.ПометкаУдаления
	|	И ДоговорыАренды.Организация = &Организация
	|	И (ДоговорыАренды.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|			ИЛИ ДоговорыАренды.ДатаОкончанияДействия >= &НачалоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
	|	СУММА(ВЫБОР КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|		И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства) ТОГДА ХозрасчетныйОбороты.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоДоговору,
	|	СУММА(ВЫБОР
	|		КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства)
	|			ИЛИ ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|			ИЛИ ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|			ИЛИ ДоговорыАренды.ЕстьВыкупПредметовАренды
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость)
	|		ТОГДА ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0 КОНЕЦ) КАК ОсталосьОплатить,
	|	СУММА(ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода И (ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства)
	|			ИЛИ ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|			ИЛИ ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|			ИЛИ ДоговорыАренды.ЕстьВыкупПредметовАренды
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость))
	|		ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ 0 КОНЕЦ - ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода И ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|		ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|		ИНАЧЕ 0 КОНЕЦ) КАК ОплаченоВТеченииГода,
	|	СУММА(ВЫБОР КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|		И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства) ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт ИНАЧЕ 0 КОНЕЦ) КАК СуммаПоДоговоруВал,
	|	СУММА(ВЫБОР
	|		КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства)
	|			ИЛИ ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|			ИЛИ ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|			ИЛИ ДоговорыАренды.ЕстьВыкупПредметовАренды
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость)
	|		ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт - ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|		ИНАЧЕ 0 КОНЕЦ) КАК ОсталосьОплатитьВал,
	|	СУММА(ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода И (ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АрендныеОбязательства)
	|			ИЛИ ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.УслугаПоАренде)
	|			ИЛИ ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|			ИЛИ ДоговорыАренды.ЕстьВыкупПредметовАренды
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыкупнаяСтоимость))
	|		ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотДт
	|		ИНАЧЕ 0 КОНЕЦ - ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Период >= &НачалоОтсчетаГода И ДоговорыАренды.ЕстьОбеспечительныйПлатеж
	|			И ПорядокОтраженияНаСчетахУчета.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж)
	|		ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|		ИНАЧЕ 0 КОНЕЦ) КАК ОплаченоВТеченииГодаВал
	|ПОМЕСТИТЬ ОборотыРасчеты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(, &КонецПериода, Месяц,, &Субконто, Организация = &Организация,,) КАК ХозрасчетныйОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДоговорыАренды КАК ДоговорыАренды
	|	ПО
	|		ХозрасчетныйОбороты.Субконто1 = ДоговорыАренды.Контрагент
	|		И ХозрасчетныйОбороты.Субконто2 = ДоговорыАренды.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияНаСчетахУчета
	|	ПО
	|		ДоговорыАренды.АналитикаУчета = ПорядокОтраженияНаСчетахУчета.АналитикаУчета
	|		И ПорядокОтраженияНаСчетахУчета.ВидСчета В (&ВидыСчетовРасчетовСЛизингодателями)
	|		И ХозрасчетныйОбороты.Счет = ПорядокОтраженияНаСчетахУчета.СчетУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.Субконто2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка КАК Договор,
	|	ДоговорыАренды.ДоговорПредставление КАК ДоговорПредставление,
	|	ДоговорыАренды.ДоговорНомер КАК ДоговорНомер,
	|	ДоговорыАренды.ДоговорДата КАК ДоговорДата,
	|	ДоговорыАренды.ДоговорДатаНачала КАК ДоговорДатаНачала,
	|	ДоговорыАренды.ДоговорДатаОкончания КАК ДоговорДатаОкончания,
	|	ДоговорыАренды.Валюта КАК Валюта,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Наименование КАК КонтрагентНаименование,
	|	Контрагенты.ИНН КАК КонтрагентИНН,
	|	Контрагенты.КПП КАК КонтрагентКПП,
	|	ВЫБОР
	|		КОГДА ДоговорыАренды.ЕстьВыкупПредметовАренды
	|			ТОГДА &ТекстФинансовыйЛизинг
	|		ИНАЧЕ &ТекстОперационныйЛизинг
	|	КОНЕЦ КАК Продукт,
	|	ВЫБОР
	|		КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендодатель)
	|			ТОГДА &ТекстЗабаланс
	|		КОГДА ДоговорыАренды.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)
	|			ТОГДА &ТекстБаланс
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УчетОбязательства,
	|	ЕСТЬNULL(ОборотыРасчеты.СуммаПоДоговору, 0) КАК СуммаПоДоговору,
	|	ЕСТЬNULL(ОборотыРасчеты.ОсталосьОплатить, 0) КАК ОсталосьОплатить,
	|	ЕСТЬNULL(ОборотыРасчеты.ОплаченоВТеченииГода, 0) КАК ОплаченоВТеченииГода,
	|	ЕСТЬNULL(ОборотыРасчеты.СуммаПоДоговоруВал, 0) КАК СуммаПоДоговоруВал,
	|	ЕСТЬNULL(ОборотыРасчеты.ОсталосьОплатитьВал, 0) КАК ОсталосьОплатитьВал,
	|	ЕСТЬNULL(ОборотыРасчеты.ОплаченоВТеченииГодаВал, 0) КАК ОплаченоВТеченииГодаВал,
	|	ЕСТЬNULL(Ставки.Процент, 0) КАК ПроцентнаяСтавка,
	|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоследнегоПлатежа,
	|	0 КАК Просрочено,
	|	&Организация КАК Организация
	|ИЗ
	|	ДоговорыАренды КАК ДоговорыАренды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДоговорыАренды.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРасчеты КАК ОборотыРасчеты
	|		ПО ДоговорыАренды.Ссылка = ОборотыРасчеты.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентныеСтавкиФинансовыхИнструментов.СрезПоследних(
	|				&КонецПериода, 
	|				Договор В (
	|					ВЫБРАТЬ
	|						ДоговорыАренды.Ссылка
	|					ИЗ
	|						ДоговорыАренды КАК ДоговорыАренды)) КАК Ставки
	|		ПО ДоговорыАренды.Ссылка = Ставки.Договор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	Запрос.УстановитьПараметр("НачалоОтсчетаГода", НачалоОтсчетаГода);
	Запрос.УстановитьПараметр("ТекстФинансовыйЛизинг", НСтр("ru = 'Финансовый лизинг';
															|en = 'Financial lease'"));
	Запрос.УстановитьПараметр("ТекстОперационныйЛизинг", НСтр("ru = 'Операционный лизинг';
																|en = 'Operating lease'"));
	Запрос.УстановитьПараметр("ТекстЗабаланс", НСтр("ru = 'Забаланс';
													|en = 'Off-balance'"));
	Запрос.УстановитьПараметр("ТекстБаланс", НСтр("ru = 'Баланс';
													|en = 'Balance'"));
	Запрос.УстановитьПараметр("ВидыСчетовРасчетовСЛизингодателями", РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.НастраиваемыеВидыСчетов("РасчетыСАрендодателями"));
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвтозаполняемыеПоказатели

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_Баланс2012Кв4_3(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "04";
	Иначе
		Графы = "04, 05, 06";
	КонецЕсли;
	
	Строки = "1110, 11101, 11102,
	         |1120, 11201, 11202,
	         |1130,
	         |1140,
	         |1150, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509,
	         |1160, 11601, 11602, 11603, 11604,
	         |1170, 11701,
	         |1180,
	         |1190, 11901, 11902, 11903";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1210, 12101, 12102, 12103, 12104, 12105, 12106, 12108, 12109, 12110, 12111, 12112,
	         |1220, 12201, 12202, 12203, 12204, 12205, 12206, 12207,
	         |1230, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312,
	         |1240, 12401, 12402, 12403, 12404, 12405, 12406, 12407,
	         |1250, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512,
	         |1260, 12601, 12602, 12603, 12604, 12606, 12607, 12608, 12609, 12610";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1310,
	         |1320,
	         |1340, 13401, 13402, 13403,
	         |1350,
	         |1360, 13601, 13602,
	         |1370";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1410, 14101, 14102, 14103, 14104,
	         |1420";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1510, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112,
	         |1520, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209,
	         |1530, 15301, 15302, 15303, 15304, 15305,
	         |1540, 15401, 15402,
	         |1550";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_БалансНКО2012Кв4_3(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "04";
	Иначе
		Графы = "04, 05, 06";
	КонецЕсли;
	
	Строки = "1110, 11101, 11102,
	         |1120, 11201, 11202,
	         |1130,
	         |1140,
	         |1150, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509,
	         |1160, 11601, 11602, 11603, 11604,
	         |1170, 11701,
	         |1180,
	         |1190, 11901, 11902, 11903";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1210, 12101, 12102, 12103, 12104, 12105, 12106, 12107, 12108, 12109, 12110, 12111, 12112,
	         |1220, 12201, 12202, 12203, 12204, 12205, 12206, 12207,
	         |1230, 12301, 12302, 12303, 12304, 12305, 12306, 12307, 12308, 12309, 12310, 12311, 12312,
	         |1240, 12401, 12402, 12403, 12404, 12405, 12406, 12407,
	         |1250, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512,
	         |1260, 12601, 12602, 12603, 12604, 12606, 12607, 12608, 12609, 12610";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1310,
	         |1350,
	         |1360,
	         |1370";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1410, 14101, 14102, 14103, 14104,
	         |1420";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1510, 15101, 15102, 15103, 15104, 15105, 15106, 15107, 15108, 15109, 15110, 15111, 15112,
	         |1520, 15201, 15202, 15203, 15204, 15205, 15206, 15207, 15208, 15209,
	         |1530, 15302, 15303, 15304, 15305,
	         |1540, 15401, 15402,
	         |1550";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОФР(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "04";
	Иначе
		Графы = "04, 05";
	КонецЕсли;
	
	Строки = "2110, 2120,
	         |2210, 2220,
	         |2310, 23101, 23102, 23103,
	         |2320, 23201, 23202, 23203,
	         |2330, 23301, 23302";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2340,
	         |23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409, 23410, 23411, 23412, 23413,
	         |23414, 23415, 23416, 23417, 23418, 23419, 23420, 23421, 23422, 23423, 23424, 23425, 23426";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2350,
	         |23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509, 23510, 23511, 23512,
	         |23513, 23514, 23515, 23516, 23517, 23518, 23519, 23520, 23521, 23522, 23523, 23524,
	         |23525, 23526, 23527, 23528, 23529, 23530, 23531, 23532, 23533, 23534";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2410, 2421,
	         |2430, 2450,
	         |2460, 24601, 24602,
	         |2510, 25101, 25102";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОФРЕНВД(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "04";
	Иначе
		Графы = "04, 05";
	КонецЕсли;
	
	Строки = "2110, 21101, 21102,
	         |2120, 21201, 21202,
	         |2210, 22101, 22102,
	         |2220, 22201, 22202,
	         |2310, 23101, 23102, 23103,
	         |2320, 23201, 23202, 23203,
	         |2330, 23301, 23302";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2340,
	         |23401, 23402, 23403, 23404, 23405, 23406, 23407, 23408, 23409, 23410, 23411, 23412, 23413,
	         |23414, 23415, 23416, 23417, 23418, 23419, 23420, 23421, 23422, 23423, 23424, 23425, 23426";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2350,
	         |23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509, 23510, 23511,
	         |23512, 23513, 23514, 23515, 23516, 23517, 23518, 23519, 23520, 23521, 23522,
	         |23523, 23524, 23525, 23526, 23527, 23528, 23529, 23530, 23531, 23532, 23533";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "2410, 2421,
	         |2430, 2450,
	         |2460, 24601, 24602,
	         |2510, 25101, 25102,";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОИК(ПоказателиОтчета, ПараметрыОтчета)
	
	Если НЕ ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310004", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310005", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310006", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310007", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320004", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320005", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320006", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320007", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100321107", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100321205", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322107", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322205", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322707", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100324006", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340004", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340006", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340103", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340104", Истина, Истина);
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340106", Истина, Истина);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330007", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100331107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100331205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332707", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100334006", Истина, Истина);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ОДДС(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "03";
	Иначе
		Графы = "03, 04";
	КонецЕсли;
	
	Строки = "4111, 4112, 4113, 4119, 4121, 4122, 4123, 4124, 4129, 4211, 4212, 4213, 4214, 4219,
	         |4221, 4222, 4223, 4224, 4229, 4311, 4312, 4313, 4314, 4319, 4321, 4322, 4323, 4329, 4450, 4490";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4_ДополнительныеПоказатели(ПоказателиОтчета, ПараметрыОтчета)
	
	Префикс = "П00010";
	Если ЗаполнениеОтчетностиВБанки.РасширенныйПериодОтчета(ПараметрыОтчета.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		Графы = "03";
	Иначе
		Графы = "03, 04, 05";
	КонецЕсли;
	
	Строки = "5010, 5020, 5030, 5040, 5050, 5060, 5070";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_Баланс(ПоказателиОтчета)
	
	Префикс = "П00010";
	Графы = "04, 05, 06";
	
	Строки = "1110,
	         |1120,
	         |1130,
	         |1140,
	         |1150,
	         |1160,
	         |1170,
	         |1180,
	         |1190";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1210,
	         |1220,
	         |1230,
	         |1240,
	         |1250,
	         |1260";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1310,
	         |1320,
	         |1340,
	         |1350,
	         |1360,
	         |1370";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1410,
	         |1420,
	         |1450";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	Строки = "1510,
	         |1520,
	         |1530,
	         |1540,
	         |1550";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОФР(ПоказателиОтчета, ПараметрыОтчета)
	
	ПрименениеУСН0 = Ложь;
	ПрименениеУСН1 = Ложь;
	
	Если ПараметрыОтчета.Свойство("ПрименениеУСН0") Тогда
		ПрименениеУСН0 = ПараметрыОтчета.ПрименениеУСН0;
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ПрименениеУСН1") Тогда
		ПрименениеУСН1 = ПараметрыОтчета.ПрименениеУСН1;
	КонецЕсли;
	
	Префикс = "П00010";
	Графы = "04, 05";
	
	Строки = "2110, 2120,
	         |2210, 2220,
	         |2410, 2460,
	         |2310, 2320, 2330, 2340, 2350,

	         |2510";
	
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
	НомерСтроки = "02421";
	Если НЕ ПрименениеУСН0 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "04", Истина, Истина);
	КонецЕсли;
	Если НЕ ПрименениеУСН1 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "05", Истина, Истина);
	КонецЕсли;
	
	НомерСтроки = "02430";
	Если НЕ ПрименениеУСН0 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "04", Истина, Истина);
	КонецЕсли;
	Если НЕ ПрименениеУСН1 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "05", Истина, Истина);
	КонецЕсли;
	
	НомерСтроки = "02450";
	Если НЕ ПрименениеУСН0 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "04", Истина, Истина);
	КонецЕсли;
	Если НЕ ПрименениеУСН1 Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Префикс + НомерСтроки + "05", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОИК(ПоказателиОтчета)
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100310007", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100320007", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100321107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100321205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100322707", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100324006", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340004", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340104", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100340106", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100330007", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100331107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100331205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332107", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332205", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100332707", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000100334006", Истина, Истина);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ОДДС(ПоказателиОтчета)
	
	Префикс = "П00010";
	Графы = "03, 04";
	
	Строки = "4111, 4112, 4113, 4119, 4121, 4122, 4123, 4124, 4129, 4211, 4212, 4213, 4214, 4219,
	         |4221, 4222, 4223, 4224, 4229, 4311, 4312, 4313, 4314, 4319, 4321, 4322, 4323, 4329, 4450, 4490";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ДополнительныеПоказатели(ПоказателиОтчета)
	
	Префикс = "П00010";
	Графы = "03, 04, 05";
	
	Строки = "5010, 5020, 5030, 5040, 5050, 5060, 5070";
	ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПоказателиОтчета)
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100007", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100008", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100009", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100010", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100011", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100012", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100013", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100017", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100020", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100021", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100022", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100023", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100024", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00007М100025", Истина, Истина);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПоказателиОтчета)
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100007", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100008", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100009", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100010", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100011", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100012", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100013", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100017", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100020", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100021", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100022", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100023", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100024", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00008М100025", Истина, Истина);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ФинансовыеВложенияКраткосрочные(ПоказателиОтчета)
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100102", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100107", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100108", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00012М100112", Истина, Истина);
	
КонецПроцедуры

Процедура ВнестиСведенияОПоказателяхФормаОтчета2017Кв3_ФинансовыеВложенияДолгосрочные(ПоказателиОтчета)
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100102", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100106", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100107", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00013М100108", Истина, Истина);
	
КонецПроцедуры

Процедура ВставитьПоказателиВСтруктуру(ПоказателиОтчета, Префикс, Строки, Графы)
	
	ПереченьСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строки);
	ПереченьГраф  = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Графы);
	
	Для Каждого НомерСтроки Из ПереченьСтрок Цикл
		Строка = СокрЛП(НомерСтроки);
		Строка = Лев("00000", 5 - СтрДлина(Строка)) + Строка;
		Для Каждого Графа Из ПереченьГраф Цикл
			ИмяПоказателя = Префикс + Строка + СокрЛП(Графа);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, ИмяПоказателя, Истина, Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчетности2011Кв4_ДополнительныеПоказатели

Процедура Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе_Строка5030(КонтекстВыполнения)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	НомерСтроки = "5030";
	НаименованиеСтроки = "Долгосрочная дебиторская задолженность";
	
	Организация = КонтекстВыполнения.Организация;
	НачалоПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.НачалоПериодаОтчета;
	КонецПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.КонецПериодаОтчета;
	
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация",   Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  КонецПериодаОтчета);
	
	СчетаРасчетов   = "62.01, 62.21, 62.31, 62.03, 76.06, 76.26, 76.36";
	СчетаАвансов    = "60.02, 60.22, 60.32";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаАвансов, "АвансыВыданные");
	СчетаПрочие     = "76.05, 76.25, 76.35, 76.09, 76.29, 76.39, 76.07.2, 76.07.9";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаПрочие, "Лизинг, НДСПоАренде");
	СчетаНДСАвансов = "76.ВА";
	
	СчетаГрафы12 = СчетаРасчетов + ", " + СчетаАвансов + ", " + СчетаПрочие;
	
	ПолныйСписокСчетов = СчетаРасчетов + ", " + СчетаАвансов + ", " + СчетаНДСАвансов + ", " + СчетаПрочие;
	
	Графа = КонтекстВыполнения.КонтекстОтчета.Графа;
	ЗаголовокГрафы = КонтекстВыполнения.КонтекстОтчета.ЗаголовокГрафы;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("КороткийСрок",  365);
	
	Запрос.УстановитьПараметр("СчетаГрафы04", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы05", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы06", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы08", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы09", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы10", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы12", СчетаДляДанныхЗапроса(СчетаГрафы12));
	Запрос.УстановитьПараметр("СчетаГрафы13", СчетаДляДанныхЗапроса(""));
	
	Запрос.УстановитьПараметр("СчетаГрафы21", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы22", СчетаДляДанныхЗапроса(""));
	
	Запрос.УстановитьПараметр("СчетаНДСАвансов", СчетаДляДанныхЗапроса(СчетаНДСАвансов));
	
	Запрос.УстановитьПараметр("СчетаСписанияНаФинансовыйРезультат", СчетаИзСписка(""));
	
	ОбработкаСчетов = ПорядокОбработкиСчетов(ПолныйСписокСчетов);
	
	Для Каждого СпособОбработки Из ОбработкаСчетов Цикл
		Запрос.УстановитьПараметр(СпособОбработки.Ключ, СпособОбработки.Значение);
	КонецЦикла;
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	
	СубконтоКонтрагентыСФПолученные = Новый Массив;
	СубконтоКонтрагентыСФПолученные.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыСФПолученные.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыСФПолученные", СубконтоКонтрагентыСФПолученные);
	
	СубконтоПрочиеДоходыРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", СубконтоПрочиеДоходыРасходы);
	
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	ВидПДРСписание = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности;
	Запрос.УстановитьПараметр("ВидПДРСписание", ВидПДРСписание);
	
	Запрос.Текст = ЗаполнениеБухгалтерскойОтчетностиПояснения.ТекстЗапросаПояснения51_Долгосрочная();
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.УстановитьПолныйТекстЗапроса(Запрос);

	
	Запрос.Выполнить();
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.Значение
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		СчетСоставляющей = Выборка.Счет;
		ЗначениеСоставляющей = Выборка.Значение;
		
		Если ОбработкаСчетов.АПСчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты более 365 дней";
		ИначеЕсли ОбработкаСчетов.ОсобыеСчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты более 365 дней";
		ИначеЕсли ОбработкаСчетов.СчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты более 365 дней";
		Иначе
			ВызватьИсключение "Не предусмотренный расшифровкой счет " + СчетСоставляющей.Код + " в графе " + Графа + " строки "+ НомерСтроки;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, ИмяРаздела, ОбщиеПараметрыРасшифровки);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12_НДС.Счет,
	               |	ВТ_Графа12_НДС.Значение
	               |ИЗ
	               |	ВТ_Графа12_НДС КАК ВТ_Графа12_НДС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		
		СчетСоставляющей = Выборка.Счет;
		ЗначениеСоставляющей = Выборка.Значение;
		
		НаименованиеСоставляющей = "Сальдо на конец периода по кредиту счета " + СчетСоставляющей.Код + " по контрагентам и счетам-фактурам полученным по договорам со сроком оплаты более 365 дней";
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, ИмяРаздела, ОбщиеПараметрыРасшифровки);
		
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Процедура Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе_Строка5040(КонтекстВыполнения)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	НомерСтроки = "5040";
	НаименованиеСтроки = "Краткосрочная дебиторская задолженность";
	
	Организация = КонтекстВыполнения.Организация;
	НачалоПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.НачалоПериодаОтчета;
	КонецПериодаОтчета = КонтекстВыполнения.КонтекстОтчета.КонецПериодаОтчета;
	
	ТаблицаРасшифровки = КонтекстВыполнения.ТаблицаРасшифровки;
	РассчитанныеПоказатели = КонтекстВыполнения.РассчитанныеПоказатели;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация",   Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  КонецПериодаОтчета);
	
	СчетаРасчетов = "46, 62.01, 62.21, 62.31, 62.03, 76.06, 76.26, 76.36";
	СчетаАвансов  = "60.02, 60.22, 60.32";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаАвансов, "АвансыВыданные");
	СчетаНДСАвансов = "76.ВА";
	СчетаПрочие   = "68.01, 68.02, 68.03, 68.04.1, 68.06, 68.07, 68.08, 68.09, 68.10, 68.11, 68.12, 68.13, 68.15,  68.22, 68.90,
	                |69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.02.5, 69.02.6, 69.02.7, 69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2,
	                |69.06.1, 69.06.2, 69.06.3, 69.06.4, 69.06.5, 69.09, 69.11, 69.12, 69.13.1, 69.13.2, 70, 71.01, 71.21, 73.01, 73.02, 73.03,
	                |75.01, 76.01.1, 76.01.2, 76.01.9, 76.21, 76.02, 76.22, 76.32, 76.03, 76.05, 76.25, 76.35, 76.09, 76.29, 76.39, 76.49,
	                |76.41, 76.НА, 76.ОТ, 76.07.2, 76.07.9";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаПрочие, "Лизинг, НДСПоАренде, РаботникиОрганизаций");
	
	СчетаГрафы12 = СчетаРасчетов + ", " + СчетаАвансов + ", " + СчетаПрочие;
	
	ПолныйСписокСчетов =  СчетаРасчетов + ", " + СчетаАвансов + ", " + СчетаНДСАвансов + ", " + СчетаПрочие;
	
	Графа = КонтекстВыполнения.КонтекстОтчета.Графа;
	ЗаголовокГрафы = КонтекстВыполнения.КонтекстОтчета.ЗаголовокГрафы;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("КороткийСрок",  365);
	
	Запрос.УстановитьПараметр("СчетаГрафы04", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы05", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы06", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы07", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы08", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы09", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы10", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы12", СчетаДляДанныхЗапроса(СчетаГрафы12));
	Запрос.УстановитьПараметр("СчетаГрафы13", СчетаДляДанныхЗапроса(""));
	
	Запрос.УстановитьПараметр("СчетаГрафы21", СчетаДляДанныхЗапроса(""));
	Запрос.УстановитьПараметр("СчетаГрафы22", СчетаДляДанныхЗапроса(""));
	
	Запрос.УстановитьПараметр("СчетаНДСАвансов", СчетаДляДанныхЗапроса(СчетаНДСАвансов));
	
	ОбработкаСчетов = ПорядокОбработкиСчетов(ПолныйСписокСчетов);
	
	Для Каждого СпособОбработки Из ОбработкаСчетов Цикл
		Запрос.УстановитьПараметр(СпособОбработки.Ключ, СпособОбработки.Значение);
	КонецЦикла;
	
	СубконтоВидыПлатежей = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет;
	Запрос.УстановитьПараметр("СубконтоВидыПлатежей", СубконтоВидыПлатежей);
	
	СубконтоВидыПлатежейУровни = Новый Массив;
	СубконтоВидыПлатежейУровни.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	СубконтоВидыПлатежейУровни.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Запрос.УстановитьПараметр("СубконтоВидыПлатежейУровни", СубконтоВидыПлатежейУровни);
	
	СубконтоРаботники = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	Запрос.УстановитьПараметр("СубконтоРаботники", СубконтоРаботники);
	
	СубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	Запрос.УстановитьПараметр("СубконтоКонтрагенты", СубконтоКонтрагенты);
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	
	СубконтоКонтрагентыСФПолученные = Новый Массив;
	СубконтоКонтрагентыСФПолученные.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыСФПолученные.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФПолученные);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыСФПолученные", СубконтоКонтрагентыСФПолученные);
	
	СубконтоПрочиеДоходыРасходы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы;
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыРасходы", СубконтоПрочиеДоходыРасходы);
	
	СубконтоРасходыБудущихПериодов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РасходыБудущихПериодов;
	Запрос.УстановитьПараметр("СубконтоРасходыБудущихПериодов", СубконтоРасходыБудущихПериодов);
	
	Запрос.УстановитьПараметр("Счет_91_01", Счет("91.01"));
	ВидПДРНачисление = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате;
	Запрос.УстановитьПараметр("ВидПДРНачисление", ВидПДРНачисление);
	
	Запрос.УстановитьПараметр("Счет_91_02", Счет("91.02"));
	ВидПДРСписание = Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности;
	Запрос.УстановитьПараметр("ВидПДРСписание", ВидПДРСписание);
	
	Запрос.Текст = ЗаполнениеБухгалтерскойОтчетностиПояснения.ТекстЗапросаПояснения51_Краткосрочная();
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.УстановитьПолныйТекстЗапроса(Запрос);

	
	Запрос.Выполнить();
	
	ИмяОбластиПоказателя = "П000100" + НомерСтроки + Графа;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12.Счет,
	               |	ВТ_Графа12.Значение
	               |ИЗ
	               |	ВТ_Графа12 КАК ВТ_Графа12";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначениеПоказателя = 0;
	ВыведенаПерваяСтрокаРасшифровки = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Не ВыведенаПерваяСтрокаРасшифровки Тогда
			НаименованиеСтрокиРасшифровки = "Строка " + НомерСтроки + " """ + НаименованиеСтроки + """, графа """ + ЗаголовокГрафы + """";
			ВыведенаПерваяСтрокаРасшифровки = Истина;
		Иначе
			НаименованиеСтрокиРасшифровки = "";
		КонецЕсли;
		
		СчетСоставляющей = Выборка.Счет;
		ЗначениеСоставляющей = Выборка.Значение;
		
		Если ОбработкаСчетов.АПСчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты не превышающим 365 дней";
		ИначеЕсли ОбработкаСчетов.ОсобыеСчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты не превышающим 365 дней";
		ИначеЕсли ОбработкаСчетов.СчетаПоСрочности.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам со сроком оплаты не превышающим 365 дней";
		ИначеЕсли ОбработкаСчетов.СчетаБезОбработки.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код;
		ИначеЕсли ОбработкаСчетов.СчетаПоВидамПлатежей.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по видам платежей в бюджет (фонды)";
		ИначеЕсли ОбработкаСчетов.СчетаПоВидамПлатежейУровням.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по видам платежей в бюджет (фонды) и уровням бюджетов";
		ИначеЕсли ОбработкаСчетов.СчетаПоРаботникам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по работникам";
		ИначеЕсли ОбработкаСчетов.СчетаПоКонтрагентам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам";
		ИначеЕсли ОбработкаСчетов.СчетаПоКонтрагентамДоговорам.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Развернутое сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по контрагентам и договорам";
		ИначеЕсли ОбработкаСчетов.АПСчетаБезРазвертки.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код;
		ИначеЕсли ОбработкаСчетов.СчетаВидуАктива.Найти(СчетСоставляющей) <> Неопределено Тогда
			НаименованиеСоставляющей = "Сальдо на конец периода по дебету счета " + СчетСоставляющей.Код + " по статьям субконто """ + СубконтоРасходыБудущихПериодов
			                         + """ с видом актива в балансе """ + Перечисления.ВидыАктивовДляРБП.ДебиторскаяЗадолженность + """";
		Иначе
			ВызватьИсключение "Не предусмотренный расшифровкой счет " + СчетСоставляющей.Код + " в графе " + Графа + " строки "+ НомерСтроки;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "+", НаименованиеСоставляющей, ЗначениеСоставляющей, ИмяРаздела, ОбщиеПараметрыРасшифровки);
		
		ЗначениеПоказателя = ЗначениеПоказателя + ЗначениеСоставляющей;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Графа12_НДС.Счет,
	               |	ВТ_Графа12_НДС.Значение
	               |ИЗ
	               |	ВТ_Графа12_НДС КАК ВТ_Графа12_НДС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтрокиРасшифровки = "";
		
		СчетСоставляющей = Выборка.Счет;
		ЗначениеСоставляющей = Выборка.Значение;
		
		НаименованиеСоставляющей = "Сальдо на конец периода по кредиту счета " + СчетСоставляющей.Код + " по контрагентам и счетам-фактурам полученным по договорам со сроком оплаты не превышающим 365 дней";
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяОбластиПоказателя, НаименованиеСтрокиРасшифровки, "-", НаименованиеСоставляющей, -ЗначениеСоставляющей, ИмяРаздела, ОбщиеПараметрыРасшифровки);
		
		ЗначениеПоказателя = ЗначениеПоказателя - ЗначениеСоставляющей;
	КонецЦикла;
	
	УстановитьЗначениеПоказателя(РассчитанныеПоказатели, ИмяРаздела, ИмяОбластиПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Функция СчетаДляДанныхЗапроса(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено)
	
	Если ТипЗнч(СписокСчетов) = Тип("Структура") Тогда
		ЭлементСтруктуры = Неопределено;
		Если Не СписокСчетов.Свойство(ИмяСпискаСчетов, ЭлементСтруктуры) Тогда
			ЭлементСтруктуры = "";
		КонецЕсли;
		СписокСчетов = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивСчетов = СчетаИзСписка(СписокСчетов);
	
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Для Каждого Счет Из МассивСчетов Цикл
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.Счет = Счет;
	КонецЦикла;
	
	Возврат ТаблицаСчетов;
	
КонецФункции

Функция ПорядокОбработкиСчетов(СписокСчетов)
	
	СпособыОбработки = Новый Структура;
	
	СпособыОбработки.Вставить("СчетаПоСрочности", Новый Массив);
	СпособыОбработки.Вставить("АПСчетаПоСрочности", Новый Массив);
	СпособыОбработки.Вставить("ОсобыеСчетаПоСрочности", Новый Массив);
	
	СпособыОбработки.Вставить("СчетаАвансовПоВидуАктива", Новый Массив);
	СпособыОбработки.Вставить("СчетаНДСАвансовПоВидуАктива", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоНДСАвансов", Новый Массив);
	
	СпособыОбработки.Вставить("СчетаПоКонтрагентам", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоКонтрагентамДоговорам", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоРезервам", Новый Массив);
	СпособыОбработки.Вставить("СчетаВидуАктива", Новый Массив);
	СпособыОбработки.Вставить("СчетаБезОбработки", Новый Массив);
	
	СпособыОбработки.Вставить("СчетаПоРаботникам", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоВидамПлатежей", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоВидамПлатежейУровням", Новый Массив);
	СпособыОбработки.Вставить("АПСчетаБезРазвертки", Новый Массив);
	
	СпособыОбработки.Вставить("СчетаПоКредитамЗаймамБезОбработки", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоКредитамЗаймамПеревод", Новый Массив);
	СпособыОбработки.Вставить("СчетаПоКредитамЗаймамПереводКЦБ", Новый Массив);
	
	ПромежуточныйРезультат = Новый Соответствие;
	
	СпособыОбработкиСчетов = СпособыОбработкиСчетовПояснений5();
	
	Счета = СтрРазделить(СписокСчетов, ",");
	Для Каждого КодСчета Из Счета Цикл
		Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
			Продолжить;
		КонецЕсли;
		
		КодСчета = СокрЛП(КодСчета);
		СпособОбработки = СпособыОбработкиСчетов[КодСчета];
		Если СпособОбработки = Неопределено Тогда
			ВызватьИсключение "Для счета с условным кодом " + КодСчета + " не указан способ развертки";
			Продолжить;
		КонецЕсли;
		
		ПромежуточныйРезультат.Вставить(КодСчета, СпособОбработки);
		
	КонецЦикла;
	
	Для Каждого СпособОбработкиСчета Из ПромежуточныйРезультат Цикл
		КодСчета = СпособОбработкиСчета.Ключ;
		СпособРазвертки = СпособОбработкиСчета.Значение;
		
		СпособыОбработки[СпособРазвертки].Добавить(Счет(КодСчета));
	КонецЦикла;
	
	Возврат СпособыОбработки;
	
КонецФункции

Функция СпособыОбработкиСчетовПояснений5()
	
	СпособыОбработкиСчетовПояснений5 = Новый Соответствие;
	
	СпособыОбработкиСчетовПояснений5.Вставить("46", "СчетаБезОбработки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("60.01", "ОсобыеСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("60.21", "ОсобыеСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("60.31", "ОсобыеСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("60.03", "ОсобыеСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("60.02", "СчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("60.22", "СчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("60.32", "СчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("62.01", "ОсобыеСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("62.21", "ОсобыеСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("62.31", "ОсобыеСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("62.03", "ОсобыеСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("63", "СчетаПоРезервам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("62.02", "СчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("62.22", "СчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("62.32", "СчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("62.ОТ", "СчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("66.01", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.02", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.03", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.04", "СчетаПоКредитамЗаймамБезОбработки");

	СпособыОбработкиСчетовПояснений5.Вставить("66.21", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.22", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.23", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("66.24", "СчетаПоКредитамЗаймамБезОбработки");

	
	СпособыОбработкиСчетовПояснений5.Вставить("67.01", "СчетаПоКредитамЗаймамПеревод");
	СпособыОбработкиСчетовПояснений5.Вставить("67.02", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("67.03", "СчетаПоКредитамЗаймамПеревод");
	СпособыОбработкиСчетовПояснений5.Вставить("67.04", "СчетаПоКредитамЗаймамБезОбработки");

	СпособыОбработкиСчетовПояснений5.Вставить("67.21", "СчетаПоКредитамЗаймамПеревод");
	СпособыОбработкиСчетовПояснений5.Вставить("67.22", "СчетаПоКредитамЗаймамБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("67.23", "СчетаПоКредитамЗаймамПеревод");
	СпособыОбработкиСчетовПояснений5.Вставить("67.24", "СчетаПоКредитамЗаймамБезОбработки");

	
	СпособыОбработкиСчетовПояснений5.Вставить("68.01", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.02", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.03", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.04.1", "СчетаПоВидамПлатежейУровням");
	СпособыОбработкиСчетовПояснений5.Вставить("68.06", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.07", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.08", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.09", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.10", "СчетаПоВидамПлатежейУровням");
	СпособыОбработкиСчетовПояснений5.Вставить("68.11", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.12", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.13", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.15", "СчетаПоВидамПлатежей");

	СпособыОбработкиСчетовПояснений5.Вставить("68.21", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("68.22", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("68.32", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("68.42", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("68.52", "СчетаПоВидамПлатежей");
	
	СпособыОбработкиСчетовПояснений5.Вставить("68.90", "СчетаБезОбработки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("69.01",   "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.1", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.2", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.3", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.4", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.5", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.6", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.02.7", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.03.1", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.03.2", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.04",   "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.05.1", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.05.2", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.06.1", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.06.2", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.06.3", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.06.4", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.06.5", "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.09",   "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.11",   "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.12",   "СчетаПоВидамПлатежей");
	СпособыОбработкиСчетовПояснений5.Вставить("69.13.1", "АПСчетаБезРазвертки");
	СпособыОбработкиСчетовПояснений5.Вставить("69.13.2", "АПСчетаБезРазвертки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("70",
		?(УчетНа70ВедетсяСводно(), "АПСчетаБезРазвертки", "СчетаПоРаботникам"));
	СпособыОбработкиСчетовПояснений5.Вставить("71.01", "СчетаПоРаботникам");
	СпособыОбработкиСчетовПояснений5.Вставить("71.21", "СчетаПоРаботникам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("73.01", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("73.02", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("73.03", "СчетаПоРаботникам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("75.01", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("75.02", "СчетаБезОбработки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.01.1", "СчетаПоКонтрагентамДоговорам");
	СпособыОбработкиСчетовПояснений5.Вставить("76.01.2", "СчетаВидуАктива");
	СпособыОбработкиСчетовПояснений5.Вставить("76.01.9", "СчетаВидуАктива");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.07.1", "СчетаПоСрочности");

	
	СпособыОбработкиСчетовПояснений5.Вставить("76.02", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("76.22", "СчетаБезОбработки");
	СпособыОбработкиСчетовПояснений5.Вставить("76.32", "СчетаБезОбработки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.03", "СчетаПоКонтрагентамДоговорам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.04", "СчетаБезОбработки");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.05", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.25", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.35", "АПСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.06", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.26", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.36", "АПСчетаПоСрочности");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.07.2", "АПСчетаПоСрочности");

	
	СпособыОбработкиСчетовПояснений5.Вставить("76.07.9", "СчетаПоСрочности");

	
	СпособыОбработкиСчетовПояснений5.Вставить("76.09", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.29", "АПСчетаПоСрочности");
	СпособыОбработкиСчетовПояснений5.Вставить("76.39", "АПСчетаПоСрочности");
	

	СпособыОбработкиСчетовПояснений5.Вставить("76.21", "СчетаПоКонтрагентамДоговорам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.41", "СчетаПоКонтрагентам");
	СпособыОбработкиСчетовПояснений5.Вставить("76.49", "СчетаПоКонтрагентам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.НА", "СчетаПоКонтрагентамДоговорам");
	
	СпособыОбработкиСчетовПояснений5.Вставить("76.АВ", "СчетаПоНДСАвансов");
	СпособыОбработкиСчетовПояснений5.Вставить("76.ВА", "СчетаПоНДСАвансов");
	СпособыОбработкиСчетовПояснений5.Вставить("76.ОТ", "СчетаБезОбработки");
	
	СтруктураДополнительныхСписковСчетов = Новый Структура;
	
	СчетаСтрокой = "";
	ВидыСубконто = "РасчетыВСчетОтгрузки, НДСПоАренде, АвансыВыданные, Аренда";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, ВидыСубконто);
	СтруктураДополнительныхСписковСчетов.Вставить("СчетаПоСрочности", СчетаСтрокой);
	
	СчетаСтрокой = "";
	ВидыСубконто = "КраткосрочныеЦенныеБумаги, КраткосрочныеЦенныеБумагиПроценты, ДолгосрочныеЦенныеБумагиПроценты";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, ВидыСубконто);
	СтруктураДополнительныхСписковСчетов.Вставить("СчетаПоКредитамЗаймамБезОбработки", СчетаСтрокой);
	
	СчетаСтрокой = "";
	ВидыСубконто = "ДолгосрочныеЦенныеБумаги";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, ВидыСубконто);
	СтруктураДополнительныхСписковСчетов.Вставить("СчетаПоКредитамЗаймамПереводКЦБ", СчетаСтрокой);
	
	СчетаСтрокой = "";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, "ВидыПлатежейВГосБюджет");
	СтруктураДополнительныхСписковСчетов.Вставить("СчетаПоВидамПлатежей", СчетаСтрокой);
	
	СчетаСтрокой = "";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, "Лизинг");
	СтруктураДополнительныхСписковСчетов.Вставить("АПСчетаПоСрочности", СчетаСтрокой);
	
	СчетаСтрокой = "";
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.ДобавитьСчета(СчетаСтрокой, "РаботникиОрганизаций");
	СтруктураДополнительныхСписковСчетов.Вставить("СчетаПоРаботникам", СчетаСтрокой);
	
	Для каждого СписокСчетов Из СтруктураДополнительныхСписковСчетов Цикл
		Для каждого Счет Из СтрРазделить(СписокСчетов.Значение, ", ") Цикл
			СпособыОбработкиСчетовПояснений5.Вставить(Счет, СписокСчетов.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат СпособыОбработкиСчетовПояснений5;
	
КонецФункции

Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Если ТипЗнч(Счет) = Тип("Строка") Тогда
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет(Счет));
	Иначе
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	КонецЕсли;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиЗадолженностиПокупателей(ОбщиеНастройки)
	

	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", ОбщиеНастройки.Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ДебиторскаяЗадолженность.Форма");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);

	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ОбщиеНастройки.Организация);
	Отбор.Вставить("ДатаОтчета", ОбщиеНастройки.КонецПериода);
	
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Функция НастройкиЗадолженностиПоставщикам(ОбщиеНастройки)
	

	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", ОбщиеНастройки.Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.КредиторскаяЗадолженность.Форма");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);

	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ОбщиеНастройки.Организация);
	Отбор.Вставить("ДатаОтчета", ОбщиеНастройки.КонецПериода);
	
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

#КонецОбласти

Функция УчетНа70ВедетсяСводно() Экспорт
	
	СчетРасчетовСПерсоналом = Счет("70");
	
	Возврат НЕ БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоРаботникам(СчетРасчетовСПерсоналом);

	
КонецФункции

Функция ОбеспеченияОбязательств(СчетУчета, СторонаОбеспечения, Организация, ДатаУчета)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентПроводки,
		|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Стоимость,
		|	ХозрасчетныйОстатки.Валюта.Наименование КАК Валюта,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК СуммаВал,
		|	ВТ_ДанныеОбеспеченийПереопределяемый.ВидОбеспечения КАК ВидОбеспечения,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Наименование КАК КонтрагентНаименование,
		|	Контрагенты.ИНН КАК КонтрагентИНН,
		|	ВТ_ДанныеДоговоровПереопределяемый.Номер КАК ДоговорНомер,
		|	ВТ_ДанныеДоговоровПереопределяемый.Дата КАК ДоговорНач,
		|	ВТ_ДанныеДоговоровПереопределяемый.СрокДействия КАК ДоговорКон,
		|	Должники.Ссылка КАК Должник,
		|	Должники.Наименование КАК ДолжникНаименование,
		|	Должники.ИНН КАК ДолжникИНН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&СчетаУчета), &СубконтоКонтрагентыДоговоры, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|		ПО ХозрасчетныйОстатки.Субконто2 = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеОбеспеченийПереопределяемый КАК ВТ_ДанныеОбеспеченийПереопределяемый
		|		ПО ХозрасчетныйОстатки.Субконто2 = ВТ_ДанныеОбеспеченийПереопределяемый.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК Контрагенты
		|		ПО ХозрасчетныйОстатки.Субконто1 = Контрагенты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК Должники
		|		ПО ВТ_ДанныеДоговоровПереопределяемый.Владелец = Должники.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Контрагент
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СторонаОбеспечения", СторонаОбеспечения);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(ДатаУчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетУчета));
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	
	ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	Обеспечения = Запрос.Выполнить().Выгрузить();
	
	Возврат Обеспечения;
	
КонецФункции

Функция НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности, Интервалы)
	
	ДоступныеСчетаУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчетаРасчетов();
	
	Если Тип = 1 Тогда
		
		СчетаУчетаРасчетов       = ДоступныеСчетаУчета.СчетаРасчетовСКлиентами;

		
	ИначеЕсли Тип = 2 Тогда
		
		СчетаУчетаРасчетов       = ДоступныеСчетаУчета.СчетаРасчетовСПоставщиками;

		
	КонецЕсли;
	
	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКД.Добавить(ВидСубконтоДоговоры);
	
	ВидыСубконтоКДД = Новый СписокЗначений;
	ВидыСубконтоКДД.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКДД.Добавить(ВидСубконтоДоговоры);
	ВидыСубконтоКДД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций",         СписокОрганизаций);

	Запрос.УстановитьПараметр("КонецИнтервала",            КонецДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("ВидыСубконтоКД",            ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ВидыСубконтоКДД",           ВидыСубконтоКДД);
	Запрос.УстановитьПараметр("ГраницаОстатков",           Новый Граница(КонецДня(ДатаЗадолженности), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаЗадолженности",         НачалоДня(ДатаЗадолженности));
	Запрос.УстановитьПараметр("СтандартныйСрокОплаты",     0);
	Запрос.УстановитьПараметр("СчетаСДокументомРасчетов",  Новый Массив);
	Запрос.УстановитьПараметр("СчетаБезДокументаРасчетов", СчетаУчетаРасчетов);
	Запрос.УстановитьПараметр("ИспользуютсяСрокиОплаты",   Истина);
	
	Запрос.Текст = ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип, Интервалы);
	
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(Запрос.МенеджерВременныхТаблиц, ДатаЗадолженности);
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаПоставщика(Запрос.МенеджерВременныхТаблиц, ДатаЗадолженности);
	
	ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаДолгиПоДокументамИСрокиДолговБезДокументов(Тип, Интервалы)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыОстатки.Счет КАК Счет,
		|	ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
		|	ВзаиморасчетыОстатки.Субконто2 КАК Договор,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|			ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ КАК СрокОплаты,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОплатыИзДоговора,
		|	ВзаиморасчетыОстатки.Субконто3 КАК Документ,
		|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
		|ПОМЕСТИТЬ ВТ_ОстаткиДолгаПоДокументам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&СчетаСДокументомРасчетов), &ВидыСубконтоКДД, Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОстатки.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыОстатки.Счет КАК Счет,
		|	ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
		|	ВзаиморасчетыОстатки.Субконто2 КАК Договор,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|			ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ КАК СрокОплаты,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаОплатыИзДоговора,
		|	ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК ОстатокДолга
		|ПОМЕСТИТЬ ВТ_ОстаткиДолгаБезДокументовБезГруппировки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&СчетаБезДокументаРасчетов), &ВидыСубконтоКД, Организация В (&СписокОрганизаций)) КАК ВзаиморасчетыОстатки
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОстатки.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаПоДокументам.Счет,
		|	ВТ_ОстаткиДолгаПоДокументам.Контрагент,
		|	ВТ_ОстаткиДолгаПоДокументам.Договор,
		|	ВТ_ОстаткиДолгаПоДокументам.СрокОплаты,
		|	ВТ_ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора,
		|	ВТ_ОстаткиДолгаПоДокументам.ОстатокДолга
		|ИЗ
		|	ВТ_ОстаткиДолгаПоДокументам КАК ВТ_ОстаткиДолгаПоДокументам
		|ГДЕ
		|	ВТ_ОстаткиДолгаПоДокументам.Документ = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Счет КАК Счет,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Контрагент КАК Контрагент,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Договор КАК Договор,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты КАК СрокОплаты,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.ДатаОплатыИзДоговора КАК ДатаОплатыИзДоговора,
		|	СУММА(ВТ_ОстаткиДолгаБезДокументовБезГруппировки.ОстатокДолга) КАК ОстатокДолга
		|ПОМЕСТИТЬ ВТ_ОстаткиДолгаБезДокументов
		|ИЗ
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки КАК ВТ_ОстаткиДолгаБезДокументовБезГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Договор,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Контрагент,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.СрокОплаты,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.ДатаОплатыИзДоговора,
		|	ВТ_ОстаткиДолгаБезДокументовБезГруппировки.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаПоДокументам.Контрагент КАК Контрагент,
		|	ВТ_ОстаткиДолгаПоДокументам.Счет КАК Счет,
		|	ВТ_ОстаткиДолгаПоДокументам.Договор КАК Договор,
		|	ВТ_ОстаткиДолгаПоДокументам.Документ КАК Документ,
		|	ВТ_ОстаткиДолгаПоДокументам.ОстатокДолга КАК ПросроченнаяЗадолженность,
		|	ВТ_ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора КАК ДатаОплатыИзДоговора,
		|	ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ДОБАВИТЬКДАТЕ(ДанныеПервичныхДокументов.ДатаРегистратора, ДЕНЬ, ВТ_ОстаткиДолгаПоДокументам.СрокОплаты)) КАК СрокОплаты
		|ПОМЕСТИТЬ ВТ_ПросроченнаяЗадолженностьПоДокументам
		|ИЗ
		|	ВТ_ОстаткиДолгаПоДокументам КАК ВТ_ОстаткиДолгаПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрокиОплатыДокументовПереопределяемый КАК СрокиОплатыДокументов
		|		ПО (&ИспользуютсяСрокиОплаты)
		|			И ВТ_ОстаткиДолгаПоДокументам.Документ = СрокиОплатыДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ВТ_ОстаткиДолгаПоДокументам.Документ = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ВТ_ОстаткиДолгаПоДокументам.Документ <> НЕОПРЕДЕЛЕНО
		|	И ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ДОБАВИТЬКДАТЕ(ДанныеПервичныхДокументов.ДатаРегистратора, ДЕНЬ, ВТ_ОстаткиДолгаПоДокументам.СрокОплаты)) < &ДатаЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаПоДокументам.Контрагент,
		|	ВТ_ОстаткиДолгаПоДокументам.Счет,
		|	ВТ_ОстаткиДолгаПоДокументам.Договор,
		|	ВТ_ОстаткиДолгаПоДокументам.Документ,
		|	ВТ_ОстаткиДолгаПоДокументам.ОстатокДолга,
		|	ВТ_ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора,
		|	ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ДОБАВИТЬКДАТЕ(ДанныеПервичныхДокументов.ДатаРегистратора, ДЕНЬ, ВТ_ОстаткиДолгаПоДокументам.СрокОплаты))
		|ИЗ
		|	ВТ_ОстаткиДолгаПоДокументам КАК ВТ_ОстаткиДолгаПоДокументам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрокиОплатыДокументовПереопределяемый КАК СрокиОплатыДокументов
		|		ПО (&ИспользуютсяСрокиОплаты)
		|			И ВТ_ОстаткиДолгаПоДокументам.Документ = СрокиОплатыДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ВТ_ОстаткиДолгаПоДокументам.Документ = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ВТ_ОстаткиДолгаПоДокументам.Документ <> НЕОПРЕДЕЛЕНО
		|	И ВТ_ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ЕСТЬNULL(СрокиОплатыДокументов.СрокОплаты, ВТ_ОстаткиДолгаПоДокументам.ДатаОплатыИзДоговора) < &ДатаЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаБезДокументов.СрокОплаты КАК СрокОплаты
		|ИЗ
		|	ВТ_ОстаткиДолгаБезДокументов КАК ВТ_ОстаткиДолгаБезДокументов
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаБезДокументов.ДатаОплатыИзДоговора
		|ИЗ
		|	ВТ_ОстаткиДолгаБезДокументов КАК ВТ_ОстаткиДолгаБезДокументов
		|ГДЕ
		|	ВТ_ОстаткиДолгаБезДокументов.ДатаОплатыИзДоговора <> ДАТАВРЕМЯ(1, 1, 1)";
		
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.Счет КАК Счет,
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.Контрагент КАК Контрагент,
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.Договор КАК Договор,
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.Документ КАК Документ,
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.ПросроченнаяЗадолженность КАК ПросроченнаяПоСрокуКодСрока
		  |ПОМЕСТИТЬ ПросроченнаяКодСрока
		  |ИЗ
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам КАК ВТ_ПросроченнаяЗадолженностьПоДокументам
		  |ГДЕ
		  |	ВТ_ПросроченнаяЗадолженностьПоДокументам.СрокОплаты МЕЖДУ &ИнтервалКодСрокаНачало И &ИнтервалКодСрокаКонец";
	
	Для ИндСрока = 1 По Интервалы.Количество() Цикл
		КодСрока = Формат(ИндСрока, "ЧГ=0");
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
			+ СтрЗаменить(ШаблонЗапроса, "КодСрока", КодСрока);
		
	КонецЦикла;
	
	ТекстПодзапроса = 
		"ВЫБРАТЬ
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Счет КАК Счет,
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Контрагент КАК КонтрагентСсылка,
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Договор КАК ДоговорСсылка,
		|	СУММА(ВТ_ПросроченнаяЗадолженностьПоДокументам.ПросроченнаяЗадолженность) КАК Просроченная,
		|	СУММА(ЕСТЬNULL(Просроченная0.ПросроченнаяПоСроку0, 0)) КАК ПросроченнаяПоСроку0
		|ИЗ
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам КАК ВТ_ПросроченнаяЗадолженностьПоДокументам
		|	Просроченная0 КАК Просроченная0
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Счет,
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Контрагент,
		|	ВТ_ПросроченнаяЗадолженностьПоДокументам.Договор";
	
	Токен = "КАК ПросроченнаяПоСроку0";
	ШаблонРасширения =
		"	СУММА(ЕСТЬNULL(Просроченная%1.ПросроченнаяПоСроку%1, 0)) КАК ПросроченнаяПоСроку%1";
	
	РасширитьТекстЗапросаПоШаблону(ТекстПодзапроса, Токен, ШаблонРасширения, Интервалы, Истина);
	
	Токен = "Просроченная0 КАК Просроченная0";
	ШаблонРасширения =
		"		ЛЕВОЕ СОЕДИНЕНИЕ Просроченная%1 КАК Просроченная%1
		|		ПО ВТ_ПросроченнаяЗадолженностьПоДокументам.Счет = Просроченная%1.Счет
		|			И ВТ_ПросроченнаяЗадолженностьПоДокументам.Контрагент = Просроченная%1.Контрагент
		|			И ВТ_ПросроченнаяЗадолженностьПоДокументам.Договор = Просроченная%1.Договор
		|			И ВТ_ПросроченнаяЗадолженностьПоДокументам.Документ = Просроченная%1.Документ";
	
	РасширитьТекстЗапросаПоШаблону(ТекстПодзапроса, Токен, ШаблонРасширения, Интервалы);
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
	             + ТекстПодзапроса;
	
	Если Тип = 2 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаРазвернутыйОстатокДт", "СуммаРазвернутыйОстатокКт");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВзаиморасчетыОбороты.Счет КАК Счет,
		|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
		|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
		|	&ПолеУвеличениеДолга КАК УвеличениеДолга"
		+
		?(Индекс = 1, Символы.ПС + "ПОМЕСТИТЬ УвеличениеДолгаБезГруппировки" + Символы.ПС, Символы.ПС)
		+
		"ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоИнтервала0,
		|			&ГраницаОстатков,
		|			,
		|			Счет В (&СчетаБезДокументаРасчетов),
		|			&ВидыСубконтоКД,
		|			Организация В (&СписокОрганизаций),

		|			,
		|			) КАК ВзаиморасчетыОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОбороты.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|		ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ = &СрокОплаты0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыОбороты.Счет,
		|	ВзаиморасчетыОбороты.Субконто1,
		|	ВзаиморасчетыОбороты.Субконто2,
		|	&ПолеУвеличениеДолга
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоИнтервала0,
		|			&ГраницаОстатков,
		|			,
		|			Счет В (&СчетаСДокументомРасчетов),
		|			&ВидыСубконтоКДД,
		|			Субконто3 = НЕОПРЕДЕЛЕНО

		|				И Организация В (&СписокОрганизаций),
		|			,
		|			) КАК ВзаиморасчетыОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОбороты.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|		ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ = &СрокОплаты0";
	
	Если Тип = 1 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	ИначеЕсли Тип = 2 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеУвеличениеДолга", ТекстПоляУвеличениеДолга);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоИнтервала0"    , "НачалоИнтервала" + Индекс);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СрокОплаты0"         , "СрокОплаты"      + Индекс);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУвеличениеДолгаЗаПросроченныйПериод(Тип, ИндексПериода, ИндексСрока)
	
	ИмяВременнойТаблицы = "УвеличениеДолгаЗаПросроченныйПериод" + ИндексПериода;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВзаиморасчетыОбороты.Счет КАК Счет,
		|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
		|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
		|	&ПолеУвеличениеДолга КАК УвеличениеДолга"
		+
		?(ИндексСрока = 1, Символы.ПС + "ПОМЕСТИТЬ "+ ИмяВременнойТаблицы + Символы.ПС, Символы.ПС)
		+
		"ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоИнтервала0,
		|			&КонецИнтервала0,
		|			,
		|			Счет В (&СчетаБезДокументаРасчетов),
		|			&ВидыСубконтоКД,
		|			Организация В (&СписокОрганизаций),

		|			,
		|			) КАК ВзаиморасчетыОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОбороты.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|		ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ = &СрокОплаты0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВзаиморасчетыОбороты.Счет,
		|	ВзаиморасчетыОбороты.Субконто1,
		|	ВзаиморасчетыОбороты.Субконто2,
		|	&ПолеУвеличениеДолга
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоИнтервала0,
		|			&КонецИнтервала0,
		|			,
		|			Счет В (&СчетаСДокументомРасчетов),
		|			&ВидыСубконтоКДД,
		|			Субконто3 = НЕОПРЕДЕЛЕНО

		|				И Организация В (&СписокОрганизаций),
		|			,
		|			) КАК ВзаиморасчетыОбороты
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ДоговорыКонтрагентов
		|		ПО ВзаиморасчетыОбороты.Субконто2 = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ВЫБОР КОГДА ЕСТЬNULL(ДоговорыКонтрагентов.УстановленСрокОплаты, ЛОЖЬ)
		|		ТОГДА ЕСТЬNULL(ДоговорыКонтрагентов.СрокОплаты, &СтандартныйСрокОплаты)
		|		ИНАЧЕ &СтандартныйСрокОплаты
		|	КОНЕЦ = &СрокОплаты0";
	
	Если Тип = 1 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	ИначеЕсли Тип = 2 Тогда
		ТекстПоляУвеличениеДолга = 
		"ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотКт > 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
		|	ИНАЧЕ 0
		|КОНЕЦ - ВЫБОР
		|	КОГДА ВзаиморасчетыОбороты.СуммаОборотДт < 0
		|		ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
		|	ИНАЧЕ 0
		|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеУвеличениеДолга", ТекстПоляУвеличениеДолга);
	
	НаименованиеИнтервала = "Срок" + ИндексСрока + "Период" + ИндексПериода;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НачалоИнтервала0"    , НаименованиеИнтервала + "Начало");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КонецИнтервала0"     , НаименованиеИнтервала + "Конец");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СрокОплаты0"         , "СрокОплаты" + ИндексСрока);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов(Интервалы)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	УвеличениеДолгаБезГруппировки.Счет КАК Счет,
		|	УвеличениеДолгаБезГруппировки.Контрагент КАК Контрагент,
		|	УвеличениеДолгаБезГруппировки.Договор КАК Договор,
		|	СУММА(УвеличениеДолгаБезГруппировки.УвеличениеДолга) КАК УвеличениеДолга
		|ПОМЕСТИТЬ УвеличениеДолгаДляВсехСроков
		|ИЗ
		|	УвеличениеДолгаБезГруппировки КАК УвеличениеДолгаБезГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	УвеличениеДолгаБезГруппировки.Счет,
		|	УвеличениеДолгаБезГруппировки.Договор,
		|	УвеличениеДолгаБезГруппировки.Контрагент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Контрагент,
		|	Договор";
	
	ТекстПодзапроса = 
		"ВЫБРАТЬ
		|	ВТ_ОстаткиДолгаБезДокументов.Счет КАК Счет,
		|	ВТ_ОстаткиДолгаБезДокументов.Контрагент КАК КонтрагентСсылка,
		|	ВТ_ОстаткиДолгаБезДокументов.Договор КАК ДоговорСсылка,
		|	ВЫБОР
		|		КОГДА ВТ_ОстаткиДолгаБезДокументов.ОстатокДолга > ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
		|			ТОГДА ВТ_ОстаткиДолгаБезДокументов.ОстатокДолга - ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Просроченная,
		|	&ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0
		|ИЗ
		|	ВТ_ОстаткиДолгаБезДокументов КАК ВТ_ОстаткиДолгаБезДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ УвеличениеДолгаДляВсехСроков КАК УвеличениеДолгаДляВсехСроков
		|		ПО ВТ_ОстаткиДолгаБезДокументов.Контрагент = УвеличениеДолгаДляВсехСроков.Контрагент
		|			И ВТ_ОстаткиДолгаБезДокументов.Договор = УвеличениеДолгаДляВсехСроков.Договор
		|			И ВТ_ОстаткиДолгаБезДокументов.Счет = УвеличениеДолгаДляВсехСроков.Счет
		|	УвеличениеДолгаЗаПросроченныйПериод0 КАК УвеличениеДолгаЗаПросроченныйПериод0";
	
	Токен = "&ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0";
	РасширитьТекстЗапросаПоПросроченнойЗадолженности(ТекстПодзапроса, Токен, Интервалы);
	
	Токен = "УвеличениеДолгаЗаПросроченныйПериод0 КАК УвеличениеДолгаЗаПросроченныйПериод0";
	ШаблонРасширения =
		"		ЛЕВОЕ СОЕДИНЕНИЕ УвеличениеДолгаЗаПросроченныйПериод%1 КАК УвеличениеДолгаЗаПросроченныйПериод%1
		|		ПО ВТ_ОстаткиДолгаБезДокументов.Счет = УвеличениеДолгаЗаПросроченныйПериод%1.Счет
		|			И ВТ_ОстаткиДолгаБезДокументов.Контрагент = УвеличениеДолгаЗаПросроченныйПериод%1.Контрагент
		|			И ВТ_ОстаткиДолгаБезДокументов.Договор = УвеличениеДолгаЗаПросроченныйПериод%1.Договор";
	
	РасширитьТекстЗапросаПоШаблону(ТекстПодзапроса, Токен, ШаблонРасширения, Интервалы);
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
	             + ТекстПодзапроса;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Преобразует одну строку запроса, содержащую токен, завершающийся символом "0" в несколько строк
// с нарастанием порядкового номера.
//
// Пример:
//
// СУММА(ПросроченнаяПоСроку0)
//
// СУММА(ПросроченнаяПоСроку1),
// СУММА(ПросроченнаяПоСроку2)
//
Процедура РасширитьТекстЗапросаПоТокену(ТекстЗапроса, Токен, Интервалы)
	
	ПолныйТекстЗапроса = Новый ТекстовыйДокумент;
	ЗначащаяЧастьТокена = Лев(Токен, СтрДлина(Токен) - 1);
	
	Для Инд = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		СтрокаЗапроса = СтрПолучитьСтроку(ТекстЗапроса, Инд);
		
		Если СтрНайти(СтрокаЗапроса, Токен) = 0 Тогда
			ПолныйТекстЗапроса.ДобавитьСтроку(СтрокаЗапроса);
			
		Иначе
			Для ИндИнтервала = 1 По Интервалы.Количество() Цикл
				СтрокаЗамены = ЗначащаяЧастьТокена + Формат(ИндИнтервала, "ЧГ=0");
				НоваяСтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, Токен, СтрокаЗамены);
				
				Если ИндИнтервала <> Интервалы.Количество() Тогда
					НоваяСтрокаЗапроса = НоваяСтрокаЗапроса + ",";
				КонецЕсли;
				
				ПолныйТекстЗапроса.ДобавитьСтроку(НоваяСтрокаЗапроса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ПолныйТекстЗапроса.ПолучитьТекст();
	
КонецПроцедуры

// Преобразует одну строку запроса, содержащую токен, в несколько строк со значением 0.
//
// Пример:
//
// &ЗаменитьПоСрокам0
//
// 0,
// 0
//
Процедура РасширитьТекстЗапросаПоНезначащимПолям(ТекстЗапроса, Токен, Интервалы)
	
	ПолныйТекстЗапроса = Новый ТекстовыйДокумент;
	
	Для Инд = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		СтрокаЗапроса = СтрПолучитьСтроку(ТекстЗапроса, Инд);
		
		Если СтрНайти(СтрокаЗапроса, Токен) = 0 Тогда
			ПолныйТекстЗапроса.ДобавитьСтроку(СтрокаЗапроса);
			
		Иначе
			Для ИндИнтервала = 1 По Интервалы.Количество() Цикл
				СтрокаЗамены = "0";
				НоваяСтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, Токен, СтрокаЗамены);
				
				Если ИндИнтервала <> Интервалы.Количество() Тогда
					НоваяСтрокаЗапроса = НоваяСтрокаЗапроса + ",";
				КонецЕсли;
				
				ПолныйТекстЗапроса.ДобавитьСтроку(НоваяСтрокаЗапроса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ПолныйТекстЗапроса.ПолучитьТекст();
	
КонецПроцедуры

// Преобразует одну строку запроса, содержащую токен, в несколько строк по шаблону
// с нарастанием порядкового номера.
//
Процедура РасширитьТекстЗапросаПоШаблону(ТекстЗапроса, Токен, ШаблонРасширения, Интервалы, ДобавлятьЗапятую = Ложь)
	
	ПолныйТекстЗапроса = Новый ТекстовыйДокумент;
	ЗначащаяЧастьТокена = Лев(Токен, СтрДлина(Токен) - 1);
	
	Для Инд = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		СтрокаЗапроса = СтрПолучитьСтроку(ТекстЗапроса, Инд);
		
		Если СтрНайти(СтрокаЗапроса, Токен) = 0 Тогда
			ПолныйТекстЗапроса.ДобавитьСтроку(СтрокаЗапроса);
			
		Иначе
			Для ИндИнтервала = 1 По Интервалы.Количество() Цикл
				СтрокаЗамены = Формат(ИндИнтервала, "ЧГ=0");
				НоваяСтрокаЗапроса = СтрЗаменить(ШаблонРасширения, "%1", СтрокаЗамены);
				
				Если ДобавлятьЗапятую И ИндИнтервала <> Интервалы.Количество() Тогда
					НоваяСтрокаЗапроса = НоваяСтрокаЗапроса + ",";
				КонецЕсли;
				
				ПолныйТекстЗапроса.ДобавитьСтроку(НоваяСтрокаЗапроса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ПолныйТекстЗапроса.ПолучитьТекст();
	
КонецПроцедуры

// Преобразует одну строку запроса, содержащую токен, в несколько строк по шаблону
// с нарастанием порядкового номера.
//
Процедура РасширитьТекстЗапросаПоПросроченнойЗадолженности(ТекстЗапроса, Токен, Интервалы)
	
	ШаблонРасширения =
		"	ВЫБОР
		|		КОГДА &ОстатокЗадолженностиПоСроку > 0
		|			ТОГДА ВЫБОР
		|					КОГДА &ОстатокЗадолженностиПоСроку < ЕСТЬNULL(УвеличениеДолгаЗаПросроченныйПериод0.УвеличениеДолга, 0)
		|						ТОГДА &ОстатокЗадолженностиПоСроку
		|					ИНАЧЕ ЕСТЬNULL(УвеличениеДолгаЗаПросроченныйПериод0.УвеличениеДолга, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПросроченнаяПоСроку0";
	
	ПолныйТекстЗапроса = Новый ТекстовыйДокумент;
	ЗначащаяЧастьТокена = Лев(Токен, СтрДлина(Токен) - 1);
	
	Для Инд = 1 По СтрЧислоСтрок(ТекстЗапроса) Цикл
		СтрокаЗапроса = СтрПолучитьСтроку(ТекстЗапроса, Инд);
		
		Если СтрНайти(СтрокаЗапроса, Токен) = 0 Тогда
			ПолныйТекстЗапроса.ДобавитьСтроку(СтрокаЗапроса);
			
		Иначе
			Для ИндИнтервала = 1 По Интервалы.Количество() Цикл
				НоваяСтрокаЗапроса = ШаблонРасширения;
				
				// Замена выражения реверсивного вычисления остатка задолженности по сроку.
				СтрокаЗамены = "ВТ_ОстаткиДолгаБезДокументов.ОстатокДолга - ЕСТЬNULL(УвеличениеДолгаДляВсехСроков.УвеличениеДолга, 0)";
				Для ИндВложения = 1 По ИндИнтервала - 1 Цикл
					ЧленВыражения = СтрЗаменить(
						" - ЕСТЬNULL(УвеличениеДолгаЗаПросроченныйПериод%1.УвеличениеДолга, 0)",
						"%1",
						Формат(ИндВложения, "ЧГ=0"));
						
					СтрокаЗамены = СтрокаЗамены + ЧленВыражения;
					
				КонецЦикла;
				
				НоваяСтрокаЗапроса = СтрЗаменить(НоваяСтрокаЗапроса, "&ОстатокЗадолженностиПоСроку", СтрокаЗамены);
				
				// Замена имени таблицы.
				НоваяСтрокаЗапроса = СтрЗаменить(НоваяСтрокаЗапроса,
					"УвеличениеДолгаЗаПросроченныйПериод0",
					"УвеличениеДолгаЗаПросроченныйПериод" + Формат(ИндИнтервала, "ЧГ=0"));
				
				// Замена псевдонима поля.
				НоваяСтрокаЗапроса = СтрЗаменить(НоваяСтрокаЗапроса,
					"ПросроченнаяПоСроку0",
					"ПросроченнаяПоСроку" + Формат(ИндИнтервала, "ЧГ=0"));
				
				Если ИндИнтервала <> Интервалы.Количество() Тогда
					НоваяСтрокаЗапроса = НоваяСтрокаЗапроса + ",";
				КонецЕсли;
				
				ПолныйТекстЗапроса.ДобавитьСтроку(НоваяСтрокаЗапроса);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ПолныйТекстЗапроса.ПолучитьТекст();
	
КонецПроцедуры

#Область ЗаполнениеОтчетности2017Кв3_ДебКредЗадолженность

Функция ПросроченнаяЗадолженность(Организация, ДатаЗадолженности, Тип, Интервалы) Экспорт
	
	СписокОрганизаций = СписокДоступныхОрганизаций(Организация);
	
	Запрос = НовыйЗапросПросроченнаяЗадолженность(Тип, СписокОрганизаций, ДатаЗадолженности, Интервалы);
	
	ДлинаСуток = 86400;
	Для Каждого Интервал Из Интервалы Цикл
		ИнтервалНачало = НачалоДня(ДатаЗадолженности - Интервал.Окончание * ДлинаСуток);
		ИнтервалКонец  = КонецДня(ДатаЗадолженности - Интервал.Начало * ДлинаСуток);
		
		Запрос.УстановитьПараметр("Интервал" + Интервал.Код + "Начало", ИнтервалНачало);
		Запрос.УстановитьПараметр("Интервал" + Интервал.Код + "Конец",  ИнтервалКонец);
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЧислоВременныхТаблиц = Запрос.МенеджерВременныхТаблиц.Таблицы.Количество()-1;
	
	ПросроченнаяЗадолженность = РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить(); // учтены сроки оплаты документов

	
	СрокиОплаты = РезультатЗапроса[РезультатЗапроса.Количество()-1-Интервалы.Количество()-1].Выгрузить().ВыгрузитьКолонку("СрокОплаты"); // сроки оплаты долгов без документов
	
	Если СрокиОплаты.Количество() > 0 Тогда
		ТекстЗапросаУвеличениеДолга = "";
		
		Для Индекс = 0 По СрокиОплаты.ВГраница() Цикл
			СрокОплаты             = СрокиОплаты[Индекс];
			Если ТипЗнч(СрокОплаты) = Тип("Число") Тогда
				ДатаНачалаИнтервала = НачалоДня(ДатаЗадолженности - ДлинаСуток * СрокОплаты);
			Иначе
				// Срок оплаты задан в договоре датой
				ДатаНачалаИнтервала = СрокОплаты;
			КонецЕсли;
			ГраницаНачалаИнтервала = Новый Граница(ДатаНачалаИнтервала, ВидГраницы.Включая);
			
			Запрос.УстановитьПараметр("НачалоИнтервала" + (Индекс+1), ГраницаНачалаИнтервала);
			Запрос.УстановитьПараметр("СрокОплаты"      + (Индекс+1), СрокОплаты);
			
			Если НЕ ПустаяСтрока(ТекстЗапросаУвеличениеДолга) Тогда
				ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
			КонецЕсли;
			
			ТекстЗапросаУвеличениеДолга = ТекстЗапросаУвеличениеДолга
				+ ТекстЗапросаУвеличениеДолгаЗаПериодСрока(Тип, Индекс + 1);
			
		КонецЦикла;
		
		ТекстыЗапросовПросроченногоПоСрокам = Новый Массив;
		
		Для ИндексПериода = 0 По Интервалы.Количество() - 1 Цикл
			Интервал = Интервалы[ИндексПериода];
			ТекстЗапросаПросроченногоПоСрокам = "";
			
			Для ИндексСрока = 0 По СрокиОплаты.ВГраница() Цикл
				СрокОплаты = СрокиОплаты[ИндексСрока];
				Если ТипЗнч(СрокОплаты) = Тип("Число") Тогда
					ДатаСрокаОплаты = НачалоДня(ДатаЗадолженности - ДлинаСуток * СрокОплаты);
				Иначе
					// Срок оплаты задан в договоре датой
					ДатаСрокаОплаты = СрокОплаты;
				КонецЕсли;
				ИнтервалНачало = НачалоДня(ДатаСрокаОплаты - Интервал.Окончание * ДлинаСуток);
				ИнтервалКонец  = КонецДня(ДатаСрокаОплаты - Интервал.Начало * ДлинаСуток);
				
				НаименованиеИнтервала = "Срок" + (ИндексСрока + 1)
				                      + "Период" + (ИндексПериода + 1);
				
				Запрос.УстановитьПараметр(НаименованиеИнтервала + "Начало", ИнтервалНачало);
				Запрос.УстановитьПараметр(НаименованиеИнтервала + "Конец",  ИнтервалКонец);
				Запрос.УстановитьПараметр("СрокОплаты" + (ИндексСрока + 1), СрокОплаты);
				
				Если НЕ ПустаяСтрока(ТекстЗапросаПросроченногоПоСрокам) Тогда
					ТекстЗапросаПросроченногоПоСрокам = ТекстЗапросаПросроченногоПоСрокам
						+ Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
				КонецЕсли;
				
				ТекстЗапросаПросроченногоПоСрокам = ТекстЗапросаПросроченногоПоСрокам
					+ ТекстЗапросаУвеличениеДолгаЗаПросроченныйПериод(Тип, ИндексПериода + 1, ИндексСрока + 1);
				
			КонецЦикла;
			
			ТекстыЗапросовПросроченногоПоСрокам.Добавить(ТекстЗапросаПросроченногоПоСрокам);
			
		КонецЦикла;
		
		ПолныйТекстЗапроса = ТекстЗапросаУвеличениеДолга;
		
		Для Каждого ТекстЗапросаПросроченногоПоСрокам Из ТекстыЗапросовПросроченногоПоСрокам Цикл
			ПолныйТекстЗапроса = ПолныйТекстЗапроса
			                   + ОбщегоНазначения.РазделительПакетаЗапросов()
			                   + ТекстЗапросаПросроченногоПоСрокам;
		КонецЦикла;
		
		ПолныйТекстЗапроса = ПолныйТекстЗапроса
		             + ОбщегоНазначения.РазделительПакетаЗапросов()
		             + ТекстЗапросаПодсчетПросроченногоДолгаБезДокументов(Интервалы);
		
		Запрос.Текст = ПолныйТекстЗапроса;
		
		ОстальнаяПросроченнаяЗадолженность = Запрос.Выполнить().Выгрузить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОстальнаяПросроченнаяЗадолженность, ПросроченнаяЗадолженность);
		
	КонецЕсли;
	
	КолонкиГруппировок = "Счет, КонтрагентСсылка, ДоговорСсылка";
	КолонкиСуммирования = "Просроченная";
	Для Каждого Интервал Из Интервалы Цикл
		КолонкиСуммирования = КолонкиСуммирования + ", ПросроченнаяПоСроку" + Интервал.Код;
	КонецЦикла;
	
	ПросроченнаяЗадолженность.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат ПросроченнаяЗадолженность;
	
КонецФункции

// Возвращает текст запроса для расчета долгосрочной дебиторской задолженности.
//
// Возвращаемое значение:
//   Текст - текста запроса.
//
Функция ТекстЗапроса2017Кв3_ДебДолгосрочная(Интервалы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Задолженность,
		|	МИНИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьПоДокументам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ХозрасчетныйОстатки.Организация = ДанныеПервичныхДокументов.Организация
		|			И ХозрасчетныйОстатки.Субконто3 = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Задолженность,
		|	НЕОПРЕДЕЛЕНО КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьБезДокументов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.СуммаОстатокДт,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И НЕ Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговоры,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеДанных.Счет КАК Счет,
		|	ОбъединениеДанных.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ОбъединениеДанных.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ОбъединениеДанных.ДатаВозникновения) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ВсяЗадолженность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ЗадолженностьПоДокументам.Счет КАК Счет,
		|		ВТ_ЗадолженностьПоДокументам.КонтрагентСсылка КАК КонтрагентСсылка,
		|		ВТ_ЗадолженностьПоДокументам.ДоговорСсылка КАК ДоговорСсылка,
		|		ВТ_ЗадолженностьПоДокументам.Задолженность КАК Задолженность,
		|		ВТ_ЗадолженностьПоДокументам.ДатаВозникновения КАК ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьПоДокументам КАК ВТ_ЗадолженностьПоДокументам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ЗадолженностьБезДокументов.Счет,
		|		ВТ_ЗадолженностьБезДокументов.КонтрагентСсылка,
		|		ВТ_ЗадолженностьБезДокументов.ДоговорСсылка,
		|		ВТ_ЗадолженностьБезДокументов.Задолженность,
		|		ВТ_ЗадолженностьБезДокументов.ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьБезДокументов КАК ВТ_ЗадолженностьБезДокументов) КАК ОбъединениеДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеДанных.Счет,
		|	ОбъединениеДанных.КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ВТ_ВсяЗадолженность.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ВТ_ВсяЗадолженность.ДатаВозникновения) КАК ДатаВозникновения,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.Просроченная, 0)) КАК Просроченная,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.ПросроченнаяПоСроку0, 0)) КАК ПросроченнаяПоСроку0
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	ВТ_ВсяЗадолженность КАК ВТ_ВсяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Просроченная КАК ВТ_Просроченная
		|		ПО ВТ_ВсяЗадолженность.Счет = ВТ_Просроченная.Счет
		|			И ВТ_ВсяЗадолженность.КонтрагентСсылка = ВТ_Просроченная.КонтрагентСсылка
		|			И ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_Просроченная.ДоговорСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.КонтрагентСсылка) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.ДоговорСсылка) КАК Договор,
		|	ВТ_ДанныеДоговоровПереопределяемый.Номер КАК Номер,
		|	ВТ_ДанныеДоговоровПереопределяемый.Дата КАК Дата,
		|	СУММА(ВТ_Задолженность.Задолженность) КАК Задолженность,
		|	ВТ_Задолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_Задолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	ВТ_Задолженность.КонтрагентСсылка.ИНН КАК ИНН,
		|	ВТ_Задолженность.КонтрагентСсылка.КПП КАК КПП,
		|	СУММА(ЕСТЬNULL(ВТ_Резервы.Резерв, 0)) КАК Резерв,
		|	ВТ_Задолженность.ДатаВозникновения КАК ДатаВозникновения,
		|	СУММА(ВТ_Задолженность.Просроченная) КАК Просроченная,
		|	СУММА(ВТ_Задолженность.ПросроченнаяПоСроку0) КАК ПросроченнаяПоСроку0
		|ИЗ
		|	ВТ_Задолженность КАК ВТ_Задолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Резервы КАК ВТ_Резервы
		|		ПО ВТ_Задолженность.КонтрагентСсылка = ВТ_Резервы.КонтрагентСсылка
		|			И ВТ_Задолженность.ДоговорСсылка = ВТ_Резервы.ДоговорСсылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|		ПО ВТ_Задолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|ГДЕ
		|	ВТ_ДанныеДоговоровПереопределяемый.УстановленСрокОплаты
		|	И ВТ_ДанныеДоговоровПереопределяемый.СрокОплаты > 365
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Задолженность.КонтрагентСсылка,
		|	ВТ_Задолженность.ДоговорСсылка,
		|	ВТ_Задолженность.ДатаВозникновения,
		|	ВТ_ДанныеДоговоровПереопределяемый.Номер,
		|	ВТ_ДанныеДоговоровПереопределяемый.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задолженность УБЫВ
		|ИТОГИ
		|	СУММА(Задолженность),
		|	МАКСИМУМ(ИНН),
		|	МАКСИМУМ(КПП),
		|	СУММА(Резерв),
		|	СУММА(Просроченная),
		|	СУММА(ПросроченнаяПоСроку0)
		|ПО
		|	ОБЩИЕ,
		|	КонтрагентСсылка";
	
	Токен = "ПросроченнаяПоСроку0";
	РасширитьТекстЗапросаПоТокену(ТекстЗапроса, Токен, Интервалы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета краткосрочной дебиторской задолженности.
//
// Возвращаемое значение:
//   Текст - текста запроса.
//
Функция ТекстЗапроса2017Кв3_ДебКраткосрочная(Интервалы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Задолженность,
		|	МИНИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьПоДокументам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ХозрасчетныйОстатки.Организация = ДанныеПервичныхДокументов.Организация
		|			И ХозрасчетныйОстатки.Субконто3 = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокДт) КАК Задолженность,
		|	НЕОПРЕДЕЛЕНО КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьБезДокументов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.СуммаОстатокДт,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И НЕ Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговоры,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеДанных.Счет КАК Счет,
		|	ОбъединениеДанных.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ОбъединениеДанных.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ОбъединениеДанных.ДатаВозникновения) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ВсяЗадолженность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ЗадолженностьПоДокументам.Счет КАК Счет,
		|		ВТ_ЗадолженностьПоДокументам.КонтрагентСсылка КАК КонтрагентСсылка,
		|		ВТ_ЗадолженностьПоДокументам.ДоговорСсылка КАК ДоговорСсылка,
		|		ВТ_ЗадолженностьПоДокументам.Задолженность КАК Задолженность,
		|		ВТ_ЗадолженностьПоДокументам.ДатаВозникновения КАК ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьПоДокументам КАК ВТ_ЗадолженностьПоДокументам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ЗадолженностьБезДокументов.Счет,
		|		ВТ_ЗадолженностьБезДокументов.КонтрагентСсылка,
		|		ВТ_ЗадолженностьБезДокументов.ДоговорСсылка,
		|		ВТ_ЗадолженностьБезДокументов.Задолженность,
		|		ВТ_ЗадолженностьБезДокументов.ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьБезДокументов КАК ВТ_ЗадолженностьБезДокументов) КАК ОбъединениеДанных

		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеДанных.Счет,
		|	ОбъединениеДанных.КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ВТ_ВсяЗадолженность.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ВТ_ВсяЗадолженность.ДатаВозникновения) КАК ДатаВозникновения,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.Просроченная, 0)) КАК Просроченная,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.ПросроченнаяПоСроку0, 0)) КАК ПросроченнаяПоСроку0
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	ВТ_ВсяЗадолженность КАК ВТ_ВсяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Просроченная КАК ВТ_Просроченная
		|		ПО ВТ_ВсяЗадолженность.Счет = ВТ_Просроченная.Счет
		|			И ВТ_ВсяЗадолженность.КонтрагентСсылка = ВТ_Просроченная.КонтрагентСсылка
		|			И ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_Просроченная.ДоговорСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|		ПО ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|ГДЕ
		|	ВТ_ДанныеДоговоровПереопределяемый.Ссылка ЕСТЬ NULL
		|	ИЛИ НЕ (ВТ_ДанныеДоговоровПереопределяемый.УстановленСрокОплаты И ВТ_ДанныеДоговоровПереопределяемый.СрокОплаты > 365)
		|	ИЛИ ВТ_ВсяЗадолженность.Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Контрагент КАК Контрагент,
		|	ИсходныеДанные.Договор КАК Договор,
		|	ИсходныеДанные.ПредметУчета КАК ПредметУчета,
		|	ИсходныеДанные.Задолженность КАК Задолженность,
		|	ИсходныеДанные.ИНН КАК ИНН,
		|	ИсходныеДанные.КПП КАК КПП,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.Номер КАК Номер,
		|	ИсходныеДанные.Резерв КАК Резерв,
		|	ИсходныеДанные.ДатаВозникновения КАК ДатаВозникновения,
		|	ИсходныеДанные.Просроченная КАК Просроченная,
		|	ИсходныеДанные.ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Задолженность.КонтрагентСсылка КАК ГруппировочноеПоле1,
		|		НЕОПРЕДЕЛЕНО КАК ПредметУчета,
		|		ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.КонтрагентСсылка) КАК Контрагент,
		|		ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.ДоговорСсылка) КАК Договор,
		|		ВТ_Задолженность.КонтрагентСсылка.ИНН КАК ИНН,
		|		ВТ_Задолженность.КонтрагентСсылка.КПП КАК КПП,

		|		ВТ_ДанныеДоговоровПереопределяемый.Дата КАК Дата,
		|		ВТ_ДанныеДоговоровПереопределяемый.Номер КАК Номер,
		|		ВТ_Задолженность.ДатаВозникновения КАК ДатаВозникновения,
		|		ВТ_Задолженность.Задолженность КАК Задолженность,
		|		ЕСТЬNULL(ВТ_Резервы.Резерв, 0) КАК Резерв,
		|		ВТ_Задолженность.Просроченная КАК Просроченная,
		|		ВТ_Задолженность.ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0
		|	ИЗ
		|		ВТ_Задолженность КАК ВТ_Задолженность
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Резервы КАК ВТ_Резервы
		|			ПО ВТ_Задолженность.КонтрагентСсылка = ВТ_Резервы.КонтрагентСсылка
		|				И ВТ_Задолженность.ДоговорСсылка = ВТ_Резервы.ДоговорСсылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|			ПО ВТ_Задолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		"""",
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		ХозрасчетныйОстатки.СуммаОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаБезАналитики), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		"""",
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаБезАналитикиРазвернуто), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		"""",
		|		"""",

		|		NULL,
		|		NULL,
		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаВидыПлатежей), &СубконтоВидыПлатежей, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2),
		|		"""",
		|		"""",

		|		NULL,
		|		NULL,
		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаВидыПлатежейУровни), &СубконтоВидыПлатежейУровни, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		"""",
		|		"""",

		|		NULL,
		|		NULL,
		|		0,
		|		ХозрасчетныйОстатки.СуммаОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаУчредители), &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаКонтрагенты), &СубконтоКонтрагенты, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаРаботники), &СубконтоРаботники, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаРезервы), &СубконтоРезервы, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасходыБудущихПериодов.ВидАктива,
		|		&ТекстРасходыБудущихПериодов,
		|		"""",
		|		"""",
		|		"""",
		|		"""",

		|		NULL,
		|		NULL,
		|		0,
		|		ХозрасчетныйОстатки.СуммаОстатокДт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&КонецПериода,
		|				Счет В (&СчетаУчетаРасходыБудущихПериодов),
		|				&СубконтоРасходыБудущихПериодов,
		|				Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РасходыБудущихПериодовПереопределяемый КАК РасходыБудущихПериодов
		|			ПО РасходыБудущихПериодов.Ссылка = ХозрасчетныйОстатки.Субконто1
		|				И РасходыБудущихПериодов.ВидАктива = ЗНАЧЕНИЕ(Перечисление.ВидыАктивовДляРБП.ДебиторскаяЗадолженность)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		&ТекстНДСПоАвансамПредоплатамВыданным,
		|		"""",
		|		"""",
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,

		|		0,
		|		-ХозрасчетныйОстатки.СуммаОстатокКт,
		|		0,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаНДСАвансов), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ИсходныеДанные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задолженность УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(Контрагент),
		|	МАКСИМУМ(ПредметУчета),
		|	СУММА(Задолженность),
		|	МАКСИМУМ(ИНН),
		|	МАКСИМУМ(КПП),
		|	СУММА(Резерв),
		|	СУММА(Просроченная),
		|	СУММА(ПросроченнаяПоСроку0)
		|ПО
		|	ОБЩИЕ,
		|	ИсходныеДанные.ГруппировочноеПоле1";
	
	Токен = "ПросроченнаяПоСроку0";
	РасширитьТекстЗапросаПоТокену(ТекстЗапроса, Токен, Интервалы);
	
	Токен = "&ЗаменитьПоСрокам0";
	РасширитьТекстЗапросаПоНезначащимПолям(ТекстЗапроса, Токен, Интервалы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета долгосрочной кредиторской задолженности.
//
// Возвращаемое значение:
//   Текст - текста запроса.
//
Функция ТекстЗапроса2017Кв3_КредДолгосрочная(Интервалы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Задолженность,
		|	МИНИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьПоДокументам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ХозрасчетныйОстатки.Организация = ДанныеПервичныхДокументов.Организация
		|			И ХозрасчетныйОстатки.Субконто3 = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Задолженность,
		|	НЕОПРЕДЕЛЕНО КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьБезДокументов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.СуммаОстатокКт,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				И НЕ Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговоры,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеДанных.Счет КАК Счет,
		|	ОбъединениеДанных.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ОбъединениеДанных.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ОбъединениеДанных.ДатаВозникновения) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ВсяЗадолженность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ЗадолженностьПоДокументам.Счет КАК Счет,
		|		ВТ_ЗадолженностьПоДокументам.КонтрагентСсылка КАК КонтрагентСсылка,
		|		ВТ_ЗадолженностьПоДокументам.ДоговорСсылка КАК ДоговорСсылка,
		|		ВТ_ЗадолженностьПоДокументам.Задолженность КАК Задолженность,
		|		ВТ_ЗадолженностьПоДокументам.ДатаВозникновения КАК ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьПоДокументам КАК ВТ_ЗадолженностьПоДокументам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ЗадолженностьБезДокументов.Счет,
		|		ВТ_ЗадолженностьБезДокументов.КонтрагентСсылка,
		|		ВТ_ЗадолженностьБезДокументов.ДоговорСсылка,
		|		ВТ_ЗадолженностьБезДокументов.Задолженность,
		|		ВТ_ЗадолженностьБезДокументов.ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьБезДокументов КАК ВТ_ЗадолженностьБезДокументов) КАК ОбъединениеДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеДанных.Счет,
		|	ОбъединениеДанных.КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ВТ_ВсяЗадолженность.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ВТ_ВсяЗадолженность.ДатаВозникновения) КАК ДатаВозникновения,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.Просроченная, 0)) КАК Просроченная,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.ПросроченнаяПоСроку0, 0)) КАК ПросроченнаяПоСроку0
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	ВТ_ВсяЗадолженность КАК ВТ_ВсяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Просроченная КАК ВТ_Просроченная
		|		ПО ВТ_ВсяЗадолженность.Счет = ВТ_Просроченная.Счет
		|			И ВТ_ВсяЗадолженность.КонтрагентСсылка = ВТ_Просроченная.КонтрагентСсылка
		|			И ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_Просроченная.ДоговорСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.КонтрагентСсылка) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.ДоговорСсылка) КАК Договор,
		|	СУММА(ВТ_Задолженность.Задолженность) КАК Задолженность,
		|	ВТ_Задолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_Задолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	ВТ_ДанныеДоговоровПереопределяемый.Номер КАК Номер,
		|	ВТ_ДанныеДоговоровПереопределяемый.Дата КАК Дата,
		|	ВТ_Задолженность.КонтрагентСсылка.ИНН КАК ИНН,
		|	ВТ_Задолженность.КонтрагентСсылка.КПП КАК КПП,
		|	ВТ_Задолженность.ДатаВозникновения КАК ДатаВозникновения,
		|	СУММА(ВТ_Задолженность.Просроченная) КАК Просроченная,
		|	СУММА(ВТ_Задолженность.ПросроченнаяПоСроку0) КАК ПросроченнаяПоСроку0
		|ИЗ
		|	ВТ_Задолженность КАК ВТ_Задолженность
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|	ПО ВТ_Задолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|ГДЕ
		|	ВТ_ДанныеДоговоровПереопределяемый.УстановленСрокОплаты
		|	И ВТ_ДанныеДоговоровПереопределяемый.СрокОплаты > 365
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Задолженность.КонтрагентСсылка,
		|	ВТ_Задолженность.ДоговорСсылка,
		|	ВТ_Задолженность.ДатаВозникновения,
		|	ВТ_ДанныеДоговоровПереопределяемый.Номер,
		|	ВТ_ДанныеДоговоровПереопределяемый.Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задолженность УБЫВ
		|ИТОГИ
		|	СУММА(Задолженность),
		|	МАКСИМУМ(ИНН),
		|	МАКСИМУМ(КПП),
		|	СУММА(Просроченная),
		|	СУММА(ПросроченнаяПоСроку0)
		|ПО
		|	ОБЩИЕ,
		|	КонтрагентСсылка";
	
	Токен = "ПросроченнаяПоСроку0";
	РасширитьТекстЗапросаПоТокену(ТекстЗапроса, Токен, Интервалы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для расчета краткосрочной кредиторской задолженности.
//
// Возвращаемое значение:
//   Текст - текста запроса.
//
Функция ТекстЗапроса2017Кв3_КредКраткосрочная(Интервалы) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Задолженность,
		|	МИНИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьПоДокументам
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО ХозрасчетныйОстатки.Организация = ДанныеПервичныхДокументов.Организация
		|			И ХозрасчетныйОстатки.Субконто3 = ДанныеПервичныхДокументов.Документ
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК КонтрагентСсылка,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорСсылка,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК Задолженность,
		|	НЕОПРЕДЕЛЕНО КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ЗадолженностьБезДокументов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговорыДокументы,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.Субконто3 = НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.СуммаОстатокКт,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&КонецПериода,
		|			(Счет В (&СчетаУчетаКонтрагентыДоговоры)
		|				ИЛИ Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока))
		|				И НЕ Счет В (&СчетаСДокументомРасчетов),
		|			&СубконтоКонтрагентыДоговоры,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеДанных.Счет КАК Счет,
		|	ОбъединениеДанных.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ОбъединениеДанных.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ОбъединениеДанных.ДатаВозникновения) КАК ДатаВозникновения
		|ПОМЕСТИТЬ ВТ_ВсяЗадолженность
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_ЗадолженностьПоДокументам.Счет КАК Счет,
		|		ВТ_ЗадолженностьПоДокументам.КонтрагентСсылка КАК КонтрагентСсылка,
		|		ВТ_ЗадолженностьПоДокументам.ДоговорСсылка КАК ДоговорСсылка,
		|		ВТ_ЗадолженностьПоДокументам.Задолженность КАК Задолженность,
		|		ВТ_ЗадолженностьПоДокументам.ДатаВозникновения КАК ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьПоДокументам КАК ВТ_ЗадолженностьПоДокументам
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВТ_ЗадолженностьБезДокументов.Счет,
		|		ВТ_ЗадолженностьБезДокументов.КонтрагентСсылка,
		|		ВТ_ЗадолженностьБезДокументов.ДоговорСсылка,
		|		ВТ_ЗадолженностьБезДокументов.Задолженность,
		|		ВТ_ЗадолженностьБезДокументов.ДатаВозникновения
		|	ИЗ
		|		ВТ_ЗадолженностьБезДокументов КАК ВТ_ЗадолженностьБезДокументов) КАК ОбъединениеДанных

		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеДанных.Счет,
		|	ОбъединениеДанных.КонтрагентСсылка,
		|	ОбъединениеДанных.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет,
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка КАК КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка КАК ДоговорСсылка,
		|	СУММА(ВТ_ВсяЗадолженность.Задолженность) КАК Задолженность,
		|	МИНИМУМ(ВТ_ВсяЗадолженность.ДатаВозникновения) КАК ДатаВозникновения,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.Просроченная, 0)) КАК Просроченная,
		|	СУММА(ЕСТЬNULL(ВТ_Просроченная.ПросроченнаяПоСроку0, 0)) КАК ПросроченнаяПоСроку0
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	ВТ_ВсяЗадолженность КАК ВТ_ВсяЗадолженность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Просроченная КАК ВТ_Просроченная
		|		ПО ВТ_ВсяЗадолженность.Счет = ВТ_Просроченная.Счет
		|			И ВТ_ВсяЗадолженность.КонтрагентСсылка = ВТ_Просроченная.КонтрагентСсылка
		|			И ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_Просроченная.ДоговорСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|		ПО ВТ_ВсяЗадолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|ГДЕ
		|	ВТ_ДанныеДоговоровПереопределяемый.Ссылка ЕСТЬ NULL
		|	ИЛИ НЕ (ВТ_ДанныеДоговоровПереопределяемый.УстановленСрокОплаты И ВТ_ДанныеДоговоровПереопределяемый.СрокОплаты > 365)
		|	ИЛИ ВТ_ВсяЗадолженность.Счет В (&СчетаУчетаКонтрагентыДоговорыБезСрока)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсяЗадолженность.КонтрагентСсылка,
		|	ВТ_ВсяЗадолженность.ДоговорСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КонтрагентСсылка,
		|	ДоговорСсылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Контрагент КАК Контрагент,
		|	ИсходныеДанные.Договор КАК Договор,
		|	ИсходныеДанные.Номер КАК Номер,
		|	ИсходныеДанные.Дата КАК Дата,
		|	ИсходныеДанные.ПредметУчета КАК ПредметУчета,
		|	ИсходныеДанные.Задолженность КАК Задолженность,
		|	ИсходныеДанные.ИНН КАК ИНН,
		|	ИсходныеДанные.КПП КАК КПП,
		|	ИсходныеДанные.ДатаВозникновения КАК ДатаВозникновения,
		|	ИсходныеДанные.Просроченная КАК Просроченная,
		|	ИсходныеДанные.ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Задолженность.КонтрагентСсылка КАК ГруппировочноеПоле1,
		|		НЕОПРЕДЕЛЕНО КАК ПредметУчета,
		|		ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.КонтрагентСсылка) КАК Контрагент,
		|		ПРЕДСТАВЛЕНИЕ(ВТ_Задолженность.ДоговорСсылка) КАК Договор,
		|		ВТ_ДанныеДоговоровПереопределяемый.Номер КАК Номер,
		|		ВТ_ДанныеДоговоровПереопределяемый.Дата КАК Дата,
		|		ВЫРАЗИТЬ(ВТ_Задолженность.КонтрагентСсылка КАК Справочник.Контрагенты).ИНН КАК ИНН,
		|		ВЫРАЗИТЬ(ВТ_Задолженность.КонтрагентСсылка КАК Справочник.Контрагенты).КПП КАК КПП,

		|		ВТ_Задолженность.ДатаВозникновения КАК ДатаВозникновения,
		|		ВТ_Задолженность.Задолженность КАК Задолженность,
		|		ВТ_Задолженность.Просроченная КАК Просроченная,
		|		ВТ_Задолженность.ПросроченнаяПоСроку0 КАК ПросроченнаяПоСроку0
		|	ИЗ
		|		ВТ_Задолженность КАК ВТ_Задолженность
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоровПереопределяемый
		|			ПО ВТ_Задолженность.ДоговорСсылка = ВТ_ДанныеДоговоровПереопределяемый.Ссылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаБезАналитики), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаБезАналитикиРазвернуто), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаВидыПлатежей), &СубконтоВидыПлатежей, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2),
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаВидыПлатежейУровни), &СубконтоВидыПлатежейУровни, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Субконто1,
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаУчредители), &СубконтоУчредители, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаКонтрагенты), &СубконтоКонтрагенты, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаРаботники), &СубконтоРаботники, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаРезервы), &СубконтоРезервы, Организация = &Организация) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Счет.Наименование,
		|		"""",
		|		"""",
		|		NULL,
		|		NULL,
		|		"""",
		|		"""",

		|		0,
		|		-ХозрасчетныйОстатки.СуммаОстатокДт,
		|		0,
		|		&ЗаменитьПоСрокам0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчетаНДСАвансов), , Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ИсходныеДанные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Задолженность УБЫВ
		|ИТОГИ
		|	МАКСИМУМ(Контрагент),
		|	МАКСИМУМ(ПредметУчета),
		|	СУММА(Задолженность),
		|	МАКСИМУМ(ИНН),
		|	МАКСИМУМ(КПП),
		|	СУММА(Просроченная),
		|	СУММА(ПросроченнаяПоСроку0)
		|ПО
		|	ОБЩИЕ,
		|	ИсходныеДанные.ГруппировочноеПоле1";
	
	Токен = "ПросроченнаяПоСроку0";
	РасширитьТекстЗапросаПоТокену(ТекстЗапроса, Токен, Интервалы);
	
	Токен = "&ЗаменитьПоСрокам0";
	РасширитьТекстЗапросаПоНезначащимПолям(ТекстЗапроса, Токен, Интервалы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает счета по видам обработки для расчета долгосрочной дебиторской задолженности
// по виду задолженности.
//
// Параметры:
//   ВидЗадолженности - Строка - идентификатор вида задолженности.
//
// Возвращаемое значение:
//   Структура - Структура с элементами, соответствующими способу обработки счетов
//               в запросе, содержащих строки со списками обрабатываемых счетов.
//
Функция СчетаУчета2017Кв3_ДебДср(ВидЗадолженности) Экспорт
	
	СчетаЗапроса = Новый Структура;
	
	Если ВидЗадолженности = "Расчеты" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"62.03, 62.01, 62.21, 62.31, 76.06, 76.26, 76.36");
		
	ИначеЕсли ВидЗадолженности = "Авансы" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"60.02, 60.22, 60.32, 76.07.3");
		
	ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"76.07.2, 76.07.4");
		
	ИначеЕсли ВидЗадолженности = "Прочая" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"76.05, 76.25, 76.35, 76.09, 76.29, 76.39");
		
	КонецЕсли;
	
	Возврат СчетаЗапроса;
	
КонецФункции

// Возвращает счета по видам обработки для расчета краткосрочной дебиторской задолженности
// по виду задолженности.
//
// Параметры:
//   ВидЗадолженности - Строка - идентификатор вида задолженности.
//
// Возвращаемое значение:
//   Структура - Структура с элементами, соответствующими способу обработки счетов
//               в запросе, содержащих строки со списками обрабатываемых счетов.
//
Функция СчетаУчета2017Кв3_ДебКср(ВидЗадолженности) Экспорт
	
	СчетаЗапроса = Новый Структура;
	
	Если ВидЗадолженности = "Расчеты" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"62.03, 62.01, 62.21, 62.31, 76.06, 76.26, 76.36");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитики", "46");
		
	ИначеЕсли ВидЗадолженности = "Авансы" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"60.02, 60.22, 60.32, 76.07.3");
		
	ИначеЕсли ВидЗадолженности = "Платежи" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаВидыПлатежей",
			"68.01, 68.02, 68.03, 68.06, 68.07, 68.08, 68.09, 68.11, 68.12, 68.13, 68.15, 68.21.1, 68.21.2, 68.34, 68.52,
			|69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.02.5, 69.02.6, 69.02.7, 
			|69.03.1, 69.03.2, 69.04, 69.05.1, 69.05.2, 69.06.1, 69.06.2, 69.06.3, 69.06.4, 69.06.5, 69.09, 69.11, 69.12");
		СчетаЗапроса.Вставить("СчетаУчетаВидыПлатежейУровни", "68.04.1, 68.10");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитики", "68.04.2, 68.90");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитикиРазвернуто", "69.13");
		
	ИначеЕсли ВидЗадолженности = "Учредители" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаУчредители", "75.01");
		
	ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры", "76.07.2, 76.07.4");
		
	ИначеЕсли ВидЗадолженности = "Прочая" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"76.05, 76.25, 76.35, 76.09, 76.29, 76.39");
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговорыБезСрока",
			"76.02, 76.22, 76.32, 76.01.1, 76.21, 76.03, 76.К");
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагенты", "76.41, 76.49");
		СчетаЗапроса.Вставить("СчетаУчетаРаботники", "70, 71, 73.03");
		СчетаЗапроса.Вставить("СчетаУчетаРезервы", "96.09");
		СчетаЗапроса.Вставить("СчетаУчетаРасходыБудущихПериодов", "97, 76.01.2, 76.01.9");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитики", "70, 73.01, 73.02, 76.14");
		СчетаЗапроса.Вставить("СчетаУчетаНДСАвансов", "76.ВА");
		
	КонецЕсли;
	
	Возврат СчетаЗапроса;
	
КонецФункции

// Возвращает счета по видам обработки для расчета долгосрочной кредиторской задолженности
// по виду задолженности.
//
// Параметры:
//   ВидЗадолженности - Строка - идентификатор вида задолженности.
//
// Возвращаемое значение:
//   Структура - Структура с элементами, соответствующими способу обработки счетов
//               в запросе, содержащих строки со списками обрабатываемых счетов.
//
Функция СчетаУчета2017Кв3_КредДср(ВидЗадолженности) Экспорт
	
	СчетаЗапроса = Новый Структура;
	
	Если ВидЗадолженности = "Расчеты" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"60.01, 60.21, 60.31, 60.03, 76.05, 76.25, 76.35");
		
	ИначеЕсли ВидЗадолженности = "Авансы" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"62.02, 62.22, 62.32, 76.06, 76.26, 76.36, 76.07.3");
		
	ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"76.07.2, 76.07.4");
		
	ИначеЕсли ВидЗадолженности = "Прочая" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры", "76.09, 76.29, 76.39");
		
	КонецЕсли;
	
	Возврат СчетаЗапроса;
	
КонецФункции

// Возвращает счета по видам обработки для расчета краткосрочной кредиторской задолженности
// по виду задолженности.
//
// Параметры:
//   ВидЗадолженности - Строка - идентификатор вида задолженности.
//
// Возвращаемое значение:
//   Структура - Структура с элементами, соответствующими способу обработки счетов
//               в запросе, содержащих строки со списками обрабатываемых счетов.
//
Функция СчетаУчета2017Кв3_КредКср(ВидЗадолженности) Экспорт
	
	СчетаЗапроса = Новый Структура;
	
	Если ВидЗадолженности = "Расчеты" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"60.01, 60.21, 60.31, 60.03, 76.05, 76.25, 76.35");
		
	ИначеЕсли ВидЗадолженности = "Авансы" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры",
			"62.02, 62.22, 62.32, 76.06, 76.26, 76.36, 76.07.3");
		
	ИначеЕсли ВидЗадолженности = "Платежи" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаВидыПлатежей",
			"68.01, 68.02, 68.03, 68.06, 68.07, 68.08, 68.09, 68.11, 68.12, 68.13, 68.15, 68.21.1, 68.21.2, 68.34, 68.52,
			|69.01, 69.02.1, 69.02.2, 69.02.3, 69.02.4, 69.02.5, 69.02.6, 69.02.7, 69.03.1, 69.03.2,
			|69.04, 69.05.1, 69.05.2, 69.06.1, 69.06.2, 69.06.3, 69.06.4, 69.06.5, 69.09, 69.11, 69.12");
		СчетаЗапроса.Вставить("СчетаУчетаВидыПлатежейУровни", "68.04.1, 68.10");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитики", "68.04.2, 68.32, 68.42, 68.90");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитикиРазвернуто", "69.13");
		
	ИначеЕсли ВидЗадолженности = "Учредители" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаУчредители", "75.02");
		
	ИначеЕсли ВидЗадолженности = "Лизинг" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры", "76.07.2, 76.07.4");
		
	ИначеЕсли ВидЗадолженности = "Прочая" Тогда
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговоры", "76.09, 76.29, 76.39");
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагентыДоговорыБезСрока", "76.01.1, 76.21, 76.03, 76.К");
		СчетаЗапроса.Вставить("СчетаУчетаКонтрагенты", "76.41, 76.49");
		СчетаЗапроса.Вставить("СчетаУчетаРаботники", "70, 71, 73.03");
		СчетаЗапроса.Вставить("СчетаУчетаБезАналитики", "70, 76.04, 76.Н");
		СчетаЗапроса.Вставить("СчетаУчетаНДСАвансов", "76.АВ");
		
		// Удаление дубликата счета 70 в списках
		Если ЗаполнениеБухгалтерскойОтчетности.УчетНа70ВедетсяСводно() Тогда
			СчетаЗапроса.СчетаУчетаРаботники = СтрЗаменить(СчетаЗапроса.СчетаУчетаРаботники, "70, ", "");
		Иначе
			СчетаЗапроса.СчетаУчетаБезАналитики = СтрЗаменить(СчетаЗапроса.СчетаУчетаБезАналитики, "70, ", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СчетаЗапроса;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеОтчетности2017Кв3_ДоходыРасходы

Функция ДоходыПоСтатьям_2017Кв3(ПараметрыЗаполнения)
	
	ЗапросПоДоходам = ДоходыПоСтатьям_2017Кв3_Запрос(ПараметрыЗаполнения);
	
	Результат = ЗапросПоДоходам.Выполнить().Выгрузить();
	
	Обороты99_01 = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыСчета99_01ПоАналитике(ПараметрыЗаполнения);
	КО_99_01_ЧрезвычайныеДоходыРасходы = Обороты99_01[Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы].КО;
	
	Если КО_99_01_ЧрезвычайныеДоходыРасходы <> 0 Тогда
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.НаименованиеСтатьи = "Чрезвычайные доходы";
		СтрокаРезультата.СуммаПоСтатье = КО_99_01_ЧрезвычайныеДоходыРасходы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоходыПоСтатьям_2017Кв3_Запрос(ПараметрыЗаполнения)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДетальныеДанные.Статья КАК Статья,
		|	МАКСИМУМ(ДетальныеДанные.НаименованиеСтатьи) КАК НаименованиеСтатьи,
		|	СУММА(ДетальныеДанные.СуммаПоСтатье) КАК СуммаПоСтатье
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Статья,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование КАК НаименованиеСтатьи,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаПоСтатье
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, , , СчетКт В (&Счет_91_01), &СубконтоПрочиеДоходыИРасходы, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_КО_91_01)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В (&Счет_91_02), &СубконтоПрочиеДоходыИРасходы, СчетКт В (&Счет_68_02), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__68_02)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В (&Счет_91_02), &СубконтоПрочиеДоходыИРасходы, СчетКт В (&Счет_76_ОТ), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__76_ОТ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачПериода,
		|				&КонПериода,
		|				Период,
		|				СчетДт В (&Счет_01)
		|					ИЛИ СчетДт В (&Счет_03)
		|					ИЛИ СчетДт В (&Счет_04),
		|				,
		|				СчетКт В (&Счет_91_01),
		|				&СубконтоПрочиеДоходыИРасходы,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_КО_91_01__010304)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачПериода,
		|				&КонПериода,
		|				Период,
		|				СчетДт В (&Счет_91_02),
		|				&СубконтоПрочиеДоходыИРасходы,
		|				СчетКт В (&Счет_02)
		|					ИЛИ СчетКт В (&Счет_05),
		|				,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__0205)) КАК ДетальныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ДетальныеДанные.Статья,
		|	ДетальныеДанные.НаименованиеСтатьи
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДетальныеДанные.СуммаПоСтатье) <> 0";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("НачПериода", ПараметрыЗаполнения.НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", ПараметрыЗаполнения.КонецПериода);
	
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.УстановитьПолныйТекстЗапроса(Запрос);
	
	УстановитьСчетаВидыСтатейДоходы_2017Кв3(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Процедура УстановитьСчетаВидыСтатейДоходы_2017Кв3(Запрос)
	
	Запрос.УстановитьПараметр("Счет_91_01", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("91.01")));
	Запрос.УстановитьПараметр("Счет_91_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("91.02")));
	Запрос.УстановитьПараметр("Счет_68_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("68.02")));
	Запрос.УстановитьПараметр("Счет_76_ОТ", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("76.ОТ")));
	
	Запрос.УстановитьПараметр("Счет_01", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("01")));
	Запрос.УстановитьПараметр("Счет_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("02")));
	Запрос.УстановитьПараметр("Счет_03", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("03")));
	Запрос.УстановитьПараметр("Счет_04", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("04")));
	Запрос.УстановитьПараметр("Счет_05", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("05")));
	
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	ВПДР_КО_91_01 = Новый Массив;
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВосстановлениеАмортизационнойПремии);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ИзлишкиПриИнвентаризации);
	ВПДР_КО_91_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	
	ВПДР_ДО_91_02__68_02 = Новый Массив;
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КорректировкаПрибылиДоРыночныхЦен);
	
	ВПДР_ДО_91_02__76_ОТ = Новый Массив;
	ВПДР_ДО_91_02__76_ОТ.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_ДО_91_02__76_ОТ.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	
	ВПДР_КО_91_01__010304 = Новый Массив;
	ВПДР_КО_91_01__010304.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПереоценкаВнеоборотныхАктивов);
	
	ВПДР_ДО_91_02__0205 = Новый Массив;
	ВПДР_ДО_91_02__0205.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПереоценкаВнеоборотныхАктивов);
	
	Запрос.УстановитьПараметр("ВПДР_КО_91_01", ВПДР_КО_91_01);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__68_02", ВПДР_ДО_91_02__68_02);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__76_ОТ", ВПДР_ДО_91_02__76_ОТ);
	Запрос.УстановитьПараметр("ВПДР_КО_91_01__010304", ВПДР_КО_91_01__010304);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__0205", ВПДР_ДО_91_02__0205);
	
КонецПроцедуры

Функция РасходыПоСтатьям_2017Кв3(ПараметрыЗаполнения)
	
	Результат = Новый ТаблицаЗначений;
	
	ЗапросПоРасходам = РасходыПоСтатьям_2017Кв3_Запрос(ПараметрыЗаполнения);
	
	Результат = ЗапросПоРасходам.Выполнить().Выгрузить();
	
	Обороты99_01 = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыСчета99_01ПоАналитике(ПараметрыЗаполнения);
	ДО_99_01_ЧрезвычайныеДоходыРасходы = Обороты99_01[Перечисления.ПрибылиИУбытки.ЧрезвычайныеДоходыРасходы].ДО;
	
	Если ДО_99_01_ЧрезвычайныеДоходыРасходы <> 0 Тогда
		СтрокаРезультата = Результат.Добавить();
		СтрокаРезультата.НаименованиеСтатьи = "Чрезвычайные расходы";
		СтрокаРезультата.СуммаПоСтатье = ДО_99_01_ЧрезвычайныеДоходыРасходы;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасходыПоСтатьям_2017Кв3_Запрос(ПараметрыЗаполнения)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДетальныеДанные.Статья КАК Статья,
		|	МАКСИМУМ(ДетальныеДанные.НаименованиеСтатьи) КАК НаименованиеСтатьи,
		|	СУММА(ДетальныеДанные.СуммаПоСтатье) КАК СуммаПоСтатье
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Статья,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование КАК НаименованиеСтатьи,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаПоСтатье
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В (&Счет_91_02), &СубконтоПрочиеДоходыИРасходы, , , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_92_01)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В (&Счет_91_02), &СубконтоПрочиеДоходыИРасходы, СчетКт В (&Счет_68_02), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__68_02)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачПериода, &КонПериода, Период, СчетДт В (&Счет_91_02), &СубконтоПрочиеДоходыИРасходы, СчетКт В (&Счет_76_ОТ), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__76_ОТ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоДт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачПериода,
		|				&КонПериода,
		|				Период,
		|				СчетДт В (&Счет_91_02),
		|				&СубконтоПрочиеДоходыИРасходы,
		|				СчетКт В (&Счет_01)
		|					ИЛИ СчетКт В (&Счет_03)
		|					ИЛИ СчетКт В (&Счет_04),
		|				,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоДт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_ДО_91_02__010304)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОборотыДтКт.СубконтоКт1,
		|		ПрочиеДоходыИРасходы.Ссылка.Наименование,
		|		-1 * ХозрасчетныйОборотыДтКт.СуммаОборот
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|				&НачПериода,
		|				&КонПериода,
		|				Период,
		|				СчетДт В (&Счет_02)
		|					ИЛИ СчетДт В (&Счет_05),
		|				,
		|				СчетКт В (&Счет_91_01),
		|				&СубконтоПрочиеДоходыИРасходы,
		|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПрочиеДоходыИРасходыПереопределяемый КАК ПрочиеДоходыИРасходы
		|			ПО ХозрасчетныйОборотыДтКт.СубконтоКт1 = ПрочиеДоходыИРасходы.Ссылка
		|				И ПрочиеДоходыИРасходы.ВидПрочихДоходовИРасходов В (&ВПДР_КО_91_01__0205)) КАК ДетальныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ДетальныеДанные.Статья,
		|	ДетальныеДанные.НаименованиеСтатьи
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДетальныеДанные.СуммаПоСтатье) <> 0";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("НачПериода", ПараметрыЗаполнения.НачалоПериода);
	Запрос.УстановитьПараметр("КонПериода", ПараметрыЗаполнения.КонецПериода);
	
	ЗаполнениеБухгалтерскойОтчетностиПереопределяемый.УстановитьПолныйТекстЗапроса(Запрос);
	
	УстановитьСчетаВидыСтатейРасходы_2017Кв3(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Процедура УстановитьСчетаВидыСтатейРасходы_2017Кв3(Запрос)
	
	Запрос.УстановитьПараметр("Счет_91_01", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("91.01")));
	Запрос.УстановитьПараметр("Счет_91_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("91.02")));
	Запрос.УстановитьПараметр("Счет_68_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("68.02")));
	Запрос.УстановитьПараметр("Счет_76_ОТ", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("76.ОТ")));
	
	Запрос.УстановитьПараметр("Счет_01", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("01")));
	Запрос.УстановитьПараметр("Счет_02", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("02")));
	Запрос.УстановитьПараметр("Счет_03", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("03")));
	Запрос.УстановитьПараметр("Счет_04", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("04")));
	Запрос.УстановитьПараметр("Счет_05", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("05")));
	
	Запрос.УстановитьПараметр("СубконтоПрочиеДоходыИРасходы", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	
	ВПДР_ДО_92_01 = Новый Массив;
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.УчастиеВДругихОрганизациях);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВРоссийскихОрганизациях);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДолевоеУчастиеВИностранныхОрганизациях);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ЛиквидацияОсновныхСредств);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделок);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОперацииСФинансовымиИнструментамиСрочныхСделокОР);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ОтчисленияВОценочныеРезервы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РазницаМеждуПервоначальнойИНоминальнойСтоимостьюПоДолговымЦеннымБумагам);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ВозмещениеУбытковКПолучениюУплате);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НалогиИСборы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПремияПокупателю);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СписаниеДебиторскойКредиторскойЗадолженности);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.НДСПоСписаннойКредиторскойЗадолженности);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.БезвозмездноеПолучениеИмуществаРаботУслугИмущественныхПрав);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РасходыОтСниженияСтоимостиАктивов);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ВПДР_ДО_92_01.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам);
	
	ВПДР_ДО_91_02__68_02 = Новый Массив;
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы);
	ВПДР_ДО_91_02__68_02.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам);
	
	ВПДР_ДО_91_02__76_ОТ = Новый Массив;
	ВПДР_ДО_91_02__76_ОТ.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВПДР_ДО_91_02__76_ОТ.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства);
	
	ВПДР_ДО_91_02__010304 = Новый Массив;
	ВПДР_ДО_91_02__010304.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПереоценкаВнеоборотныхАктивов);
	
	ВПДР_КО_91_01__0205 = Новый Массив;
	ВПДР_КО_91_01__0205.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ПереоценкаВнеоборотныхАктивов);
	
	Запрос.УстановитьПараметр("ВПДР_ДО_92_01", ВПДР_ДО_92_01);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__68_02", ВПДР_ДО_91_02__68_02);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__76_ОТ", ВПДР_ДО_91_02__76_ОТ);
	Запрос.УстановитьПараметр("ВПДР_ДО_91_02__010304", ВПДР_ДО_91_02__010304);
	Запрос.УстановитьПараметр("ВПДР_КО_91_01__0205", ВПДР_КО_91_01__0205);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОтчетности2017Кв3_ФинансовыеВложения

Функция Заполнить2017Кв3_ФинансовыеВложения_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ)
	
	СтрокаМСЧ = МСЧ.Строки.Добавить();
	
	СтрокаМСЧ.Данные = Новый Структура;
	
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100101", "");
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100102", "");
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100103", "");
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100104", '0001-01-01');
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100105", '0001-01-01');
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100106", 0);
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100107", "");
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100108", 0);
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100109", '0001-01-01');
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100110", 0);
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100111", 0);
	СтрокаМСЧ.Данные.Вставить(ПрефиксМСЧ + "М100112", "");
	
	СтрокаМСЧ.ДанныеМногострочныхЧастей = Новый Структура;
	
	Возврат СтрокаМСЧ;
	
КонецФункции

Функция ФинансовыеВложенияКраткосрочные_2017Кв3(ПараметрыСведений)
	
	Организация = ПараметрыСведений.Организация;
	ДатаСведений = ПараметрыСведений.ДатаСведений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1) КАК Контрагент,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КПП,
		|	ХозрасчетныйОстатки.Счет.Наименование КАК СчетНаименование,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СКД,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалСКД,
		|	"""" КАК Договор,
		|	"""" КАК ДоговорНомер,
		|	"""" КАК ДоговорДата,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2) КАК ЦеннаяБумага,
		|	"""" КАК БанковскийСчет
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСведений, Счет В (&СчетаКонтрагентыБумаги), &СубконтоКонтрагентыБумаги, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """"),
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """"),
		|	ХозрасчетныйОстатки.Счет.Наименование,
		|	-1 * ХозрасчетныйОстатки.СуммаОстатокКт,
		|	ХозрасчетныйОстатки.Валюта,
		|	-1 * ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт,
		|	"""",
		|	"""",
		|	"""",
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2),
		|	""""
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСведений, Счет В (&СчетаРезервы), &СубконтоКонтрагентыБумаги, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1),
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """"),
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """"),
		|	ХозрасчетныйОстатки.Счет.Наименование,
		|	ХозрасчетныйОстатки.СуммаОстатокДт,
		|	ХозрасчетныйОстатки.Валюта,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто2),
		|	ЕСТЬNULL(ВТ_ДанныеДоговоров.Номер, """"),
		|	ЕСТЬNULL(ВТ_ДанныеДоговоров.Дата, """"),
		|	"""",
		|	""""
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСведений, Счет В (&СчетаКонтрагентыДоговоры), &СубконтоКонтрагентыДоговоры, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоров
		|		ПО ХозрасчетныйОстатки.Субконто2 = ВТ_ДанныеДоговоров.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_БанковскиеСчета.НаименованиеБанка, """"),
		|	"""",
		|	"""",
		|	ХозрасчетныйОстатки.Счет.Наименование,
		|	ХозрасчетныйОстатки.СуммаОстатокДт,
		|	ХозрасчетныйОстатки.Валюта,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
		|	"""",
		|	"""",
		|	"""",
		|	"""",
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1)
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСведений, Счет В (&СчетаБанковскиеСчета), &СубконтоБанковскиеСчета, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаПереопределяемый КАК ВТ_БанковскиеСчета
		|		ПО ХозрасчетныйОстатки.Субконто1 = ВТ_БанковскиеСчета.Счет";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений + 1);
	
	СчетаКонтрагентыБумаги = МассивСчетовВИерархииИзСписка("58.01.2, 58.02");
	Запрос.УстановитьПараметр("СчетаКонтрагентыБумаги", СчетаКонтрагентыБумаги);
	
	СчетаРезервы = МассивСчетовВИерархииИзСписка("59");
	Запрос.УстановитьПараметр("СчетаРезервы", СчетаРезервы);
	
	СубконтоКонтрагентыБумаги = Новый Массив;
	СубконтоКонтрагентыБумаги.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыБумаги.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыБумаги", СубконтоКонтрагентыБумаги);
	
	СчетаКонтрагентыДоговоры = МассивСчетовВИерархииИзСписка("58.03, 58.04, 58.05");
	Запрос.УстановитьПараметр("СчетаКонтрагентыДоговоры", СчетаКонтрагентыДоговоры);
	
	СубконтоКонтрагентыДоговоры = Новый Массив;
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоКонтрагентыДоговоры", СубконтоКонтрагентыДоговоры);
	
	СчетаБанковскиеСчета = МассивСчетовВИерархииИзСписка("55.03, 55.23");
	Запрос.УстановитьПараметр("СчетаБанковскиеСчета", СчетаБанковскиеСчета);
	
	СубконтоБанковскиеСчета = Новый Массив;
	СубконтоБанковскиеСчета.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	Запрос.УстановитьПараметр("СубконтоБанковскиеСчета", СубконтоБанковскиеСчета);
	
	ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ФинансовыеВложенияДолгосрочные_2017Кв3(ПараметрыСведений)
	
	Организация = ПараметрыСведений.Организация;
	ДатаСведений = ПараметрыСведений.ДатаСведений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Субконто1) КАК Контрагент,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КПП,
		|	ХозрасчетныйОстатки.Счет.Наименование КАК СчетНаименование,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СКД,
		|	ХозрасчетныйОстатки.Валюта КАК Валюта,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалСКД
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаСведений, Счет В (&СчетаУчета), &СубконтоКонтрагенты, Организация = &Организация) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ХозрасчетныйОстатки.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений + 1);
	Запрос.УстановитьПараметр("СчетаУчета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет("58.01.1")));
	Запрос.УстановитьПараметр("СубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросовВременныхТаблиц

Функция ТекстЗапросаВТ_БанковскиеСчета()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Счет,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета КАК Валютный,
	|	ВЫБОР КОГДА БанковскиеСчетаКонтрагентов.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчетаКонтрагентов.БИКБанка
	|	ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаКонтрагентов.Банк.Код,"""") КОНЕЦ КАК БИКБанка,
	|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчетаКонтрагентов.Банк) КАК НаименованиеБанка,
	|	БанковскиеСчетаКонтрагентов.Банк.СВИФТБИК КАК СВИФТБИК,
	|	БанковскиеСчетаКонтрагентов.Банк.Страна.Код КАК КодСтраны,
	|	Валюты.Код КАК КодВалюты
	|ПОМЕСТИТЬ ВТ_БанковскиеСчетаПереопределяемый
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = Валюты.Ссылка
	|ГДЕ
	|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		И БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета КАК Валютный,
	|	ВЫБОР КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка ТОГДА
	|		БанковскиеСчетаОрганизаций.БИКБанка
	|	ИНАЧЕ ЕСТЬNULL(БанковскиеСчетаОрганизаций.Банк.Код,"""") КОНЕЦ КАК БИКБанка,
	|	ПРЕДСТАВЛЕНИЕ(БанковскиеСчетаОрганизаций.Банк) КАК НаименованиеБанка,
	|	БанковскиеСчетаОрганизаций.Банк.СВИФТБИК КАК СВИФТБИК,
	|	БанковскиеСчетаОрганизаций.Банк.Страна.Код КАК КодСтраны,
	|	Валюты.Код КАК КодВалюты
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = Валюты.Ссылка
	|ГДЕ
	|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДокументыПоСчету()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДенежныеСредстваБезналичные.Регистратор КАК Ссылка,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерВходящегоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаВходящегоДокумента,
	|	ДенежныеСредстваБезналичные.ХозяйственнаяОперация КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	|		КОГДА ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель
	|		КОГДА ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	|		КОГДА ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК СчетКонтрагента
	|ПОМЕСТИТЬ ВТ_ДокументыПоСчетуПереопределяемый
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДенежныеСредстваБезналичные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ДенежныеСредстваБезналичные.Регистратор = РеестрДокументов.Ссылка
	|		И ДенежныеСредстваБезналичные.ХозяйственнаяОперация = РеестрДокументов.ХозяйственнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО ДенежныеСредстваБезналичные.Регистратор = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО ДенежныеСредстваБезналичные.Регистратор = СписаниеБезналичныхДенежныхСредств.Ссылка
	|ГДЕ
	|	ДенежныеСредстваБезналичные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДенежныеСредстваБезналичные.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	ДенежныеСредстваБезналичные.Регистратор,
	|	РеестрДокументов.НомерПервичногоДокумента,
	|	РеестрДокументов.ДатаПервичногоДокумента,
	|	ДенежныеСредстваБезналичные.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	|		КОГДА ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетОтправитель
	|		КОГДА ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
	|		КОГДА ЕСТЬNULL(СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель,
	|			ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеКонтрагентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка КАК Ссылка,
	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	|	ДанныеКонтрагентов.КПП КАК КПП,
	|	ДанныеКонтрагентов.НаименованиеПолное КАК Наименование
	|ПОМЕСТИТЬ ВТ_ДанныеКонтрагентовПереопределяемый
	|ИЗ
	|	Справочник.Контрагенты КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	ДанныеКонтрагентов.КПП,
	|	ДанныеКонтрагентов.НаименованиеПолное
	|ИЗ
	|	Справочник.Организации КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	"""",
	|	ДанныеКонтрагентов.ФИО
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеДоговоров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТ_ДанныеДоговоровПереопределяемый
	|ИЗ Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.ОрганизацияПолучатель КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	ВЫБОР КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный) ТОГДА 100
	|	КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный) ТОГДА 400
	|	ИНАЧЕ Договоры.СрокДней КОНЕЦ КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаПоследнегоПлатежа КАК СрокДействия
	|ИЗ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	400 КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыАренды КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДоговорыКредитовДепозитов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДоговорыКредитовДепозитов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовДепозитов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.КредитВБанке) ТОГДА ""Кредит""
	|		КОГДА ДоговорыКредитовДепозитов.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм) ТОГДА ""Займ""
	|	ИНАЧЕ """" КОНЕЦ КАК Продукт,
	|	ДоговорыКредитовДепозитов.СуммаТраншей КАК СуммаТраншей,
	|	ДоговорыКредитовДепозитов.ВалютаВзаиморасчетов КАК Валюта,
	|	ЕСТЬNULL(Ставки.Процент, 0) КАК Процент
	|ПОМЕСТИТЬ ВТ_ДоговорыКредитовДепозитовПереопределяемый
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовДепозитов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцентныеСтавкиФинансовыхИнструментов КАК Ставки
	|	ПО Ставки.Договор = ДоговорыКредитовДепозитов.Ссылка
	|ГДЕ
	|	НЕ ДоговорыКредитовДепозитов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_СрокиОплатыДокументов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.РасчетныйДокумент КАК Документ,
	|	ТаблицаОстатков.ДатаПлатежа КАК СрокОплаты,
	|	ТаблицаОстатков.ДолгОстаток КАК Долг
	|ПОМЕСТИТЬ ВТ_СрокиОплатыДокументовПереопределяемый
	|ИЗ
	|	ТаблицаОстатковКлиентов КАК ТаблицаОстатков
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатков.РасчетныйДокумент КАК Документ,
	|	ТаблицаОстатков.ДатаПлатежа КАК СрокОплаты,
	|	ТаблицаОстатков.ДолгОстаток КАК Долг
	|ИЗ
	|	ТаблицаОстатковПоставщиков КАК ТаблицаОстатков";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеОбеспечений()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Ссылка,
	               |	"""" КАК ВидОбеспечения,
	               |	"""" КАК Должник,
	               |	"""" КАК ДолжникИНН,
	               |	"""" КАК ДолжникНаименование,
	               |	"""" КАК ОбеспечениеПредоставил,
	               |	"""" КАК ОбеспечениеПредоставилИНН,
	               |	"""" КАК ОбеспечениеПредоставилНаименование,
	               |	"""" КАК ОбеспечениеПолучил,
	               |	"""" КАК ОбеспечениеПолучилИНН,
	               |	"""" КАК ОбеспечениеПолучилНаименование
	               |ПОМЕСТИТЬ ВТ_ДанныеОбеспеченийПереопределяемый
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Ссылка";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеПП()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПлатежноеПоручение.Ссылка КАК Списание,
		|	НЕОПРЕДЕЛЕНО КАК ПлатежноеПоручение,
		|	ПлатежноеПоручение.СтатусСоставителя КАК СтатусПлательщика_101,
		|	ПлатежноеПоручение.КодБК КАК КБК_104,
		|	ПлатежноеПоручение.КодОКАТО КАК ОКАТО_105,
		|	ПлатежноеПоручение.ПоказательОснования КАК Основание_106,
		|	ПлатежноеПоручение.ПоказательПериода КАК Период_107,
		|	ПлатежноеПоручение.ПоказательНомера КАК Номер_108,
		|	ПлатежноеПоручение.ПоказательДаты КАК Дата_109
		|ПОМЕСТИТЬ ВТ_ДанныеПППереопределяемый
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК ПлатежноеПоручение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СчетаОтчетов

Процедура ДобавитьСчетаЗаполненияОСВПоСчету2017Кв3(ТаблицаСчетов) Экспорт
	
	ВсеСчета = "01, 02, 03, 04, 05, 07, 08, 09,
	           |10, 11, 14, 15, 16, 19,
	           |20, 21, 23, 25, 26, 28, 29,
	           |40, 41, 42, 43, 44, 45, 46,
	           |50, 51, 52, 55, 57, 58, 59,
	           |60, 62, 63, 66, 67, 68, 69,
	           |70, 71, 73, 75, 76, 77, 79,
	           |80, 81, 82, 83, 84, 86,
	           |90, 91, 94, 96, 97, 98, 99,
	           |001, 003, 007, 008, 009";
	
	ДобавитьСчетаЗаполнения(ТаблицаСчетов, ВсеСчета)
	
КонецПроцедуры

Процедура ДобавитьСчетаЗаполненияАнализСчета2017Кв3(ТаблицаСчетов) Экспорт
	
	ВсеСчета = "01, 02, 03, 04, 05, 07, 08, 09,
	           |10, 14, 15, 16, 19,
	           |20, 23, 25, 26,
	           |40, 41, 43, 44, 45,
	           |50, 51, 52, 55, 57, 58, 59,
	           |60, 62, 63, 66, 67, 68, 69,
	           |70, 71, 73, 75, 76, 77, 79,
	           |80, 81, 86, 90, 91";
	
	СчетаПоУмолчанию = "50, 51, 52, 55";
	
	ДобавитьСчетаЗаполнения(ТаблицаСчетов, ВсеСчета, СчетаПоУмолчанию);
	
КонецПроцедуры

// Добавить счета заполнения отчета
// 
// Параметры:
//  ТаблицаСчетов - ТаблицаЗначений:
//    * Счет - ПланСчетовСсылка.Хозрасчетный
//    * Наименование - Строка
//    * Включен - Булево
//  ВсеСчета - Строка
//  СчетаПоУмолчанию - Строка
//
Процедура ДобавитьСчетаЗаполнения(ТаблицаСчетов, Знач ВсеСчета, Знач СчетаПоУмолчанию = "")
	
	ВсеСчета = СтрРазделить(ВсеСчета, ",", Ложь);
	СокрЛППоМассиву(ВсеСчета);
	
	СчетаПоУмолчанию = СтрРазделить(СчетаПоУмолчанию, ",", Ложь);
	СокрЛППоМассиву(СчетаПоУмолчанию);
	
	СчетаСРеквизитами = ЗаполнениеБухгалтерскойОтчетностиИтоги.СчетаСРеквизитами();
	
	Для Каждого КодСчета Из ВсеСчета Цикл
		ДобавляемыйСчет = ЗаполнениеБухгалтерскойОтчетностиИтоги.СчетСРеквизитами(КодСчета, СчетаСРеквизитами);
		
		НоваяСтрокаТаблицы = ТаблицаСчетов.Добавить();
		НоваяСтрокаТаблицы.Счет = ДобавляемыйСчет.Ссылка;
		НоваяСтрокаТаблицы.Наименование = ДобавляемыйСчет.Код + " " + ДобавляемыйСчет.Наименование;
		НоваяСтрокаТаблицы.Включен = СчетаПоУмолчанию.Найти(КодСчета) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СокрЛППоМассиву(ИсходныйМассив)
	
	Для Инд = 0 По ИсходныйМассив.ВГраница() Цикл
		ИсходныйМассив[Инд] = СокрЛП(ИсходныйМассив[Инд]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета) Экспорт
	
	Если ОтправляемыйСчет = Счет("01") Тогда
		УстановитьПараметрыСчета_01(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("02") Тогда
		УстановитьПараметрыСчета_02(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("03") Тогда
		УстановитьПараметрыСчета_03(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("04") Тогда
		УстановитьПараметрыСчета_04(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("05") Тогда
		УстановитьПараметрыСчета_05(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("07") Тогда
		УстановитьПараметрыСчета_07(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("08") Тогда
		УстановитьПараметрыСчета_08(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("09") Тогда
		УстановитьПараметрыСчета_09(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("10") Тогда
		УстановитьПараметрыСчета_10(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("14") Тогда
		УстановитьПараметрыСчета_14(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("16") Тогда
		УстановитьПараметрыСчета_16(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("19") Тогда
		УстановитьПараметрыСчета_19(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("20") Тогда
		УстановитьПараметрыСчета_20(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("21") Тогда
		УстановитьПараметрыСчета_21(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("23") Тогда
		УстановитьПараметрыСчета_23(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("25") Тогда
		УстановитьПараметрыСчета_25(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("26") Тогда
		УстановитьПараметрыСчета_26(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("28") Тогда
		УстановитьПараметрыСчета_28(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("29") Тогда
		УстановитьПараметрыСчета_29(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("40") Тогда
		УстановитьПараметрыСчета_40(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("41") Тогда
		УстановитьПараметрыСчета_41(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("42") Тогда
		УстановитьПараметрыСчета_42(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("43") Тогда
		УстановитьПараметрыСчета_43(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("44") Тогда
		УстановитьПараметрыСчета_44(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("45") Тогда
		УстановитьПараметрыСчета_45(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("50") Тогда
		УстановитьПараметрыСчета_50(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("51") Тогда
		УстановитьПараметрыСчета_51(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("52") Тогда
		УстановитьПараметрыСчета_52(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("55") Тогда
		УстановитьПараметрыСчета_55(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("57") Тогда
		УстановитьПараметрыСчета_57(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("58") Тогда
		УстановитьПараметрыСчета_58(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("59") Тогда
		УстановитьПараметрыСчета_59(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("60") Тогда
		УстановитьПараметрыСчета_60(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("62") Тогда
		УстановитьПараметрыСчета_62(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("63") Тогда
		УстановитьПараметрыСчета_63(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("66") Тогда
		УстановитьПараметрыСчета_66(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("67") Тогда
		УстановитьПараметрыСчета_67(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("68") Тогда
		УстановитьПараметрыСчета_68(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("69") Тогда
		УстановитьПараметрыСчета_69(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("70") Тогда
		УстановитьПараметрыСчета_70(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("71") Тогда
		УстановитьПараметрыСчета_71(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("73") Тогда
		УстановитьПараметрыСчета_73(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("75") Тогда
		УстановитьПараметрыСчета_75(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("76") Тогда
		УстановитьПараметрыСчета_76(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("77") Тогда
		УстановитьПараметрыСчета_77(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("79") Тогда
		УстановитьПараметрыСчета_79(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("80") Тогда
		УстановитьПараметрыСчета_80(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("81") Тогда
		УстановитьПараметрыСчета_81(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("83") Тогда
		УстановитьПараметрыСчета_83(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("84") Тогда
		УстановитьПараметрыСчета_84(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("86") Тогда
		УстановитьПараметрыСчета_86(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("90") Тогда
		УстановитьПараметрыСчета_90(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("91") Тогда
		УстановитьПараметрыСчета_91(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("96") Тогда
		УстановитьПараметрыСчета_96(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("97") Тогда
		УстановитьПараметрыСчета_97(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("98") Тогда
		УстановитьПараметрыСчета_98(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("99") Тогда
		УстановитьПараметрыСчета_99(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("001") Тогда
		УстановитьПараметрыСчета_001(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("003") Тогда
		УстановитьПараметрыСчета_003(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("007") Тогда
		УстановитьПараметрыСчета_007(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("008") Тогда
		УстановитьПараметрыСчета_008(ПараметрыСчета);
	ИначеЕсли ОтправляемыйСчет = Счет("009") Тогда
		УстановитьПараметрыСчета_009(ПараметрыСчета);
	КонецЕсли;
	
КонецПроцедуры

#Область ПараметрыОтправкиСчетов

Процедура УстановитьПараметрыСчета_01(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_02(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_03(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_04(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_05(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_07(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_08(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбъектыСтроительства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_09(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_10(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура,Склады");
	СтрокаПараметров.Количественный = Истина;
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	СтрокаПараметров.Количественный = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_14(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ГруппыПродукции");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_16(ПараметрыСчета)
	
	СтрокаПараметров = ПараметрыСчета[0];
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_19(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_20(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат,ГруппыПродукции");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_21(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат,ГруппыПродукции");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_23(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_25(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_26(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_28(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_29(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ГруппыПродукции,СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_40(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыСтоимости");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_41(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура,Склады");
	СтрокаПараметров.Количественный = Истина;
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Склады");
	СтрокаПараметров.Количественный = Истина;
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	СтрокаПараметров.Количественный = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_42(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_43(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	СтрокаПараметров.Количественный = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_44(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиЗатрат");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_45(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Номенклатура");
	СтрокаПараметров.Количественный = Истина;
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_50(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_51(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_52(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_55(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета,СтатьиДвиженияДенежныхСредств");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "БанковскиеСчета");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_57(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "СтатьиДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_58(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_59(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_60(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_62(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_63(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_66(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_67(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_68(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_69(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыПлатежейВГосБюджет");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_70(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_71(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_73(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_75(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_76(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_77(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ВидыАктивовИОбязательств");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_79(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОбособленныеПодразделения");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_80(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_81(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_83(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ОсновныеСредства");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НематериальныеАктивы");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ЦенныеБумаги");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_84(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НаправленияИспользованияПрибыли");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_86(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ЦелевыеСредства,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_90(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "НоменклатурныеГруппы");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_91(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ПрочиеДоходыИРасходы");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_96(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Резервы");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_97(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РасходыБудущихПериодов");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_98(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ДоходыБудущихПериодов,Контрагенты");
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "РаботникиОрганизаций");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_99(ПараметрыСчета)
	
	СтрокаПараметров = ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "ПрибылиИУбытки");
	СтрокаПараметров.РазвернутоеСальдо = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_001(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,ОсновныеСредства");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_003(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_007(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_008(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Процедура УстановитьПараметрыСчета_009(ПараметрыСчета)
	
	ДобавитьВидыСубконоПоСчету(ПараметрыСчета, "Контрагенты,Договоры");
	
КонецПроцедуры

Функция ДобавитьВидыСубконоПоСчету(ПараметрыСчета, СписокВидовСубконто)
	
	СтрокаПараметров = ПараметрыСчета.Добавить();
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	ВидыСубконто = СтрРазделить(СписокВидовСубконто, ",", Ложь);
	
	Для Каждого ВидСубконто Из ВидыСубконто Цикл
		СтрокаПараметров.Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ВидСубконто]);
	КонецЦикла;
	
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти

#Область ОберткиФункцийИПроцедур

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

Функция МассивСчетовВИерархииИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено)
	
	Возврат ЗаполнениеБухгалтерскойОтчетности.МассивСчетовВИерархииИзСписка(СписокСчетов, ИмяСпискаСчетов);
	
КонецФункции

Функция СчетаИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено)
	
	Возврат ЗаполнениеОтчетностиВБанки.СчетаИзСписка(СписокСчетов, ИмяСпискаСчетов);
	
КонецФункции

Процедура УстановитьЗначениеПоказателя(ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	ЗаполнениеОтчетностиВБанки.УстановитьЗначениеПоказателя(
		ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя);
	
КонецПроцедуры

Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя,
		ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
		ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя,
		ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

Функция СписокДоступныхОрганизаций(Организация)
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Если ЗначениеЗаполнено(Организация) И СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	ИначеЕсли СписокДоступныхОрганизаций.Количество() <> 0 Тогда
		СписокОрганизаций = СписокДоступныхОрганизаций;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СписокОрганизаций;
	
КонецФункции

#КонецОбласти
