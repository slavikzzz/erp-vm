// Модуль содержит внутреннюю механику заполнения бухгалтерской отчетности с изменяемой структурой.
// Прикладные правила и пояснения логики заполнения в целом см. в ЗаполнениеБухгалтерскойОтчетностиПравила
// Начинать ознакомление с механизмом рекомендуется с ЗаполнениеБухгалтерскойОтчетностиПравила.

#Область ПрограммныйИнтерфейс

// Выполняет прикладную часть заполнения отчета - получение и обработку данных.
// Помещение этих данных в отчет см. в БухгалтерскаяОтчетностьБРО, области ДеревоДанныхРазделов
//
// Параметры:
//  РезультатЗаполнения - БухгалтерскаяОтчетностьБРО.НовыйРезультатЗаполненияРазделаОтчета - 
//                        заполняемая коллекция с результатом расчета
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела - описание структуры отчета (раздела отчета) и правил его заполнения
//  Контекст - БухгалтерскаяОтчетностьБРО.НовыйКонтекстЗаполненияОтчета
//
Процедура ЗаполнитьОтчет(РезультатЗаполнения, ЗаполняемыеПоказатели, Контекст) Экспорт
	
	РезультатЗаполнения = БухгалтерскаяОтчетностьБРО.НовыйРезультатЗаполненияРазделаОтчета();
	
	Процессор = НовыйПроцессорЗаполненияОтчета();
	Процессор.ЗаполняемыеПоказатели = ЗаполняемыеПоказатели;
	Процессор.Контекст = Контекст;
	Процессор.РасшифровкаОрганизаций = РасшифровкаОрганизаций(Контекст.Организации);
	Процессор.ЕстьФилиалы = (Процессор.РасшифровкаОрганизаций.Количество() > 1);
	
	// Период бухгалтерской отчетности всегда выражен целым числом месяцев с начала года,
	// то есть, например, даже если в отчетность за первый года включаются данные с ноября 2024 по декабрь 2025,
	// это отчетность "за 2025 год".
	ФорматнаяСтрока = СтрШаблон("Л=%1; ФП=Истина", Процессор.КодЯзыка);
	Процессор.ПредставлениеПериода = ПредставлениеПериода(
		НачалоГода(Контекст.Период.КонецДата),
		КонецМесяца(Контекст.Период.КонецДата),
		ФорматнаяСтрока);

	КоллекцииСумм.ДобавитьНаборСумм(Процессор.ОписаниеСумм, "Сумма", "Сумма");
	
	// В целом расчет состоит из двух этапов
	// 1. Сначала выполняем алгоритмы заполнения - то есть, получение данных и вычисление значений показателей.
	//    Одновременно выполняется часть описания для пользователя порядка расчета показателей - его существенные моменты.
	//    Результат этапа - в Процессор.ЗначенияПоказателей и Процессор.ЗачтенныеЗначенияПоказателей
	// 2. Затем рассчитанные показатели компонуются в группы.
	//    В ходе этого обеспечивается всеобъемлющее линейное описание расчета - "расшифровка".
	//    Результат этапа - в Процессор.ЗначенияЗаполненияОтчета и Процессор.РасшифровкаЗаполненияОтчета
	
	ПравилаПолученияДанныхРаздела = ПравилаПолученияДанных(Процессор.ЗаполняемыеПоказатели);
	ЗачитываемыеПоказатели = ЗачитываемыеПоказатели(Процессор.ЗаполняемыеПоказатели);
	
	Для Каждого ПравилаПолученияДанныхАлгоритма Из ПравилаПолученияДанныхРаздела Цикл
		
		Процессор.Алгоритм = ПравилаПолученияДанныхАлгоритма.Ключ;
		Процессор.ПравилаПолученияДанных = ПравилаПолученияДанныхАлгоритма.Значение;
		Процессор.ОсновнойПоказатель = ОсновнойПоказатель(ПравилаПолученияДанныхАлгоритма.Значение);
		Процессор.ДанныеУчета = Неопределено;
		Процессор.ДанныеАлгоритма.Очистить();
		Процессор.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПолучитьПереоопределяемыеСчета(Процессор.ДанныеАлгоритма, ПравилаПолученияДанныхАлгоритма);
		ЗаполнениеБухгалтерскойОтчетностиПравила.СоздатьКлассифицируемыеОбъекты(
			Процессор.МенеджерВременныхТаблиц,
			Процессор.Алгоритм,
			Процессор.ПравилаПолученияДанных);
			
		ЗаполнениеБухгалтерскойОтчетностиПравила.ПолучитьДанныеУчета(Процессор); // Все данные, необходимые для расчета и описания всех показателей
		
		ОписатьЗначенияПоказателей(Процессор);
		
		ЗачестьПоказатели(Процессор, ЗачитываемыеПоказатели);
	
	КонецЦикла;
	
	Для Каждого ГруппаПоказателей Из Процессор.ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
		
		РасчетГруппы = НачатьРасчетГруппыОтчета(ГруппаПоказателей, Процессор);
		
		СоставГруппы = БухгалтерскаяОтчетностьБРО.СоставГруппыПоказателей(ГруппаПоказателей, Процессор.ЗаполняемыеПоказатели);
		Для Каждого Показатель Из СоставГруппы Цикл
			ДобавитьОписаниеПоказателяОтчета(РасчетГруппы, Показатель);
		КонецЦикла;
		
		ЗакончитьРасчетГруппыОтчета(РасчетГруппы);
		
	КонецЦикла;
	
	РезультатЗаполнения.Значения    = Процессор.ЗначенияЗаполненияОтчета;
	РезультатЗаполнения.Расшифровка = Процессор.РасшифровкаЗаполненияОтчета;
	
КонецПроцедуры

// Определяет структуру отчета по умолчанию и правила его заполнения.
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела -
//                заполняемая коллекция с описание структуры отчета (раздела отчета) и правил его заполнения
//  Раздел - Строка - имя заполняемого отчета (в терминах БРО - "раздела отчета"), см. БухгалтерскаяОтчетностьБРО.РазделыОтчета
//  Контекст - см. БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета
//
Процедура ОпределитьЗаполняемыеПоказатели(ЗаполняемыеПоказатели, Раздел, Контекст) Экспорт
	
	ПроцессорЗаполнения = НовыйПроцессорОписанияЗаполняемыеПоказатели();
	
	ПроцессорЗаполнения.Раздел = Раздел;
	ПроцессорЗаполнения.ЗаполняемыеПоказатели = ЗаполняемыеПоказатели;
	
	ЗаполнениеБухгалтерскойОтчетностиПравила.ЗаполнитьНастройкиПоУмолчанию(ПроцессорЗаполнения);
	
	ДетализироватьГруппыПоказателейПоУмолчанию(ЗаполняемыеПоказатели, Контекст);
	
	Для Каждого Правило Из ПравилаПолученияДанных(ЗаполняемыеПоказатели) Цикл
		ЗаполнениеБухгалтерскойОтчетностиПравила.НастроитьПоказатели(Правило.Значение, Правило.Ключ, Контекст);
	КонецЦикла;
	
КонецПроцедуры

// Содержит коды строк, заполняемых в отчете исходя из настроек по умолчанию.
// 
// Возвращаемое значение:
//  Структура:
//    * Ключ - имя раздела из БухгалтерскаяОтчетностьБРО.РазделыОтчета
//    * Значение - Массив из Строка - коды строк из приложения 10 к ФСБУ 4
//
Функция КодыЗаполняемыхСтрок() Экспорт
	
	КодыСтрок = Новый Структура;
	Для Каждого ИмяРаздела Из БухгалтерскаяОтчетностьБРО.РазделыОтчета() Цикл
		
		ПроцессорЗаполнения = НовыйПроцессорОписанияЗаполняемыеПоказатели();
		ПроцессорЗаполнения.Раздел = ИмяРаздела;
		ПроцессорЗаполнения.ЗаполняемыеПоказатели = БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела();
		
		ЗаполнениеБухгалтерскойОтчетностиПравила.ЗаполнитьНастройкиПоУмолчанию(ПроцессорЗаполнения);
		
		КодыСтрокРаздела = Новый Массив;
		КонтрольДублей = Новый Соответствие;
		Для Каждого ОписаниеГруппыПоказателей Из ПроцессорЗаполнения.ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
			
			Если ПустаяСтрока(ОписаниеГруппыПоказателей.КодСтроки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КонтрольДублей[ОписаниеГруппыПоказателей.КодСтроки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КодыСтрокРаздела.Добавить(ОписаниеГруппыПоказателей.КодСтроки);
			КонтрольДублей.Вставить(ОписаниеГруппыПоказателей.КодСтроки, Истина);
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(КодыСтрокРаздела) Тогда
			Продолжить;
		КонецЕсли;
		
		КодыСтрок.Вставить(ИмяРаздела, КодыСтрокРаздела);
		
	КонецЦикла;
	
	Возврат КодыСтрок;
	
КонецФункции

// Определяет объекты учета, составляющие каждый показатель исходя из выполненных разработчиком или пользователем настроек.
// Как правило, такие объекты учета образуют некоторый классификатор, часто это разного рода "статьи" - например, статьи расходов.
// С помощью этого подхода, например, в ходе пользовательской настройки правил заполнения отчета 
// одни статьи расходов могут быть отнесены к одному показателю, другие - к другому.
//
// Следует отличать от объектов учета, не являющихся обобщающими, соответствующих объектам реального мира, а не классификатору.
// (Можно опираться на определение Классификатора)
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  Соответствие:
//       * Ключ - идентификатор показателя
//       * Значение - СписокЗначений из ЛюбаяСсылка - объекты и их представления
//
Функция КлассифицируемыеОбъекты(ЗаполняемыеПоказатели) Экспорт
	
	КлассифицируемыеОбъекты = Новый Соответствие;
	ПравилаПолученияДанных = ПравилаПолученияДанных(ЗаполняемыеПоказатели);
	
	Для Каждого ПравилаПолученияДанныхАлгоритма Из ПравилаПолученияДанных Цикл
		
		ОсновнойПоказатель = ОсновнойПоказатель(ПравилаПолученияДанныхАлгоритма.Значение);
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗаполнениеБухгалтерскойОтчетностиПравила.СоздатьКлассифицируемыеОбъекты(
			МенеджерВременныхТаблиц,
			ПравилаПолученияДанныхАлгоритма.Ключ,
			ПравилаПолученияДанныхАлгоритма.Значение);
		
		ЗаполнитьКлассифицируемыеОбъектыАлгоритма(
			КлассифицируемыеОбъекты,
			МенеджерВременныхТаблиц,
			ПравилаПолученияДанныхАлгоритма.Ключ,
			ОсновнойПоказатель);
		
	КонецЦикла;
	
	Возврат КлассифицируемыеОбъекты;
	
КонецФункции

// Определяет объекты учета, составляющие показатели с определенным алгоритмом.
// См. также КлассифицируемыеОбъекты
//
// Параметры:
//  КлассифицируемыеОбъекты - см. КлассифицируемыеОбъекты - заполняемая коллекция
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - содержит таблицы, созданные в ЗаполнениеБухгалтерскойОтчетностиПравила.СоздатьКлассифицируемыеОбъекты
//  Алгоритм                - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения, реализованного в ЗаполнениеБухгалтерскойОтчетностиПравила
//  ОсновнойПоказатель      - Число - идентификатор основного показателя. См. также БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя()
//                            Основной показатель - это тот, к которому следует отнести объекты, про которые правила заполнения не содержат явных указаний.
//
Процедура ЗаполнитьКлассифицируемыеОбъектыАлгоритма(КлассифицируемыеОбъекты, МенеджерВременныхТаблиц, Алгоритм, ОсновнойПоказатель) Экспорт
	
	ВыборкаПоказателей = ЗаполнениеБухгалтерскойОтчетностиПравила.КлассифицируемыеОбъекты(
		МенеджерВременныхТаблиц,
		Алгоритм);
	
	Если ВыборкаПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаПоказателей.Следующий() Цикл
		
		ИдентификаторПоказателя = ВыборкаПоказателей.Показатель;
		Если ИдентификаторПоказателя = Null Тогда
			ИдентификаторПоказателя = ОсновнойПоказатель;
		КонецЕсли;
		
		КлассифицируемыеОбъектыПоказателя = Новый СписокЗначений;
		КлассифицируемыеОбъекты.Вставить(ИдентификаторПоказателя, КлассифицируемыеОбъектыПоказателя);
		
		ВыборкаОбъектов = ВыборкаПоказателей.Выбрать();
		Пока ВыборкаОбъектов.Следующий() Цикл
			КлассифицируемыеОбъектыПоказателя.Добавить(ВыборкаОбъектов.Объект, ВыборкаОбъектов.Представление, ВыборкаОбъектов.Активный);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает сведения об основных показателях, заданных в структуре отчета.
// Основной показатель - это тот, к которому следует отнести объекты, про которые правила заполнения не содержат явных указаний.
// Такие показатели иногда могут иметь названия вида "прочие", "иные" и т.п.
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела
// 
// Возвращаемое значение:
//  Соответствие:
//    * Ключ - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения, реализованного в ЗаполнениеБухгалтерскойОтчетностиПравила
//    * Значение - Число - идентификатор показателя. См. также БухгалтерскаяОтчетностьБРО.Показатель()
//
Функция ОсновныеПоказатели(ЗаполняемыеПоказатели) Экспорт
	
	ОсновныеПоказатели = Новый Соответствие;
	
	ПравилаПолученияДанных = ПравилаПолученияДанных(ЗаполняемыеПоказатели);
	
	Для Каждого ПравилаПолученияДанныхАлгоритма Из ПравилаПолученияДанных Цикл
		
		Если ПравилаПолученияДанныхАлгоритма.Ключ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОсновнойПоказатель = ОсновнойПоказатель(ПравилаПолученияДанныхАлгоритма.Значение);
		
		ОсновныеПоказатели.Вставить(ПравилаПолученияДанныхАлгоритма.Ключ, ОсновнойПоказатель);
		
	КонецЦикла;
	
	Возврат ОсновныеПоказатели;
	
КонецФункции

// Добавляет показатель в структуру отчета.
// После вызова метода в показателе может потребоваться заполнить Отбор и другие НастройкиАлгоритма.
// Также для использования в отчете показатель нужно включить в одну или несколько групп показателей.
//
// Параметры:
//  ЗаполняемыеПоказатели    - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела - дополняемая коллекция
//  Наименование             - Строка - наименование показателя. Следует локализовать языком базы, так как предполагается его сохранение в отчете
//  АлгоритмЗаполнения       - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения, реализованного в ЗаполнениеБухгалтерскойОтчетностиПравила
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений из БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели - добавленный показатель
//
Функция ДобавитьПоказатель(ЗаполняемыеПоказатели, Наименование, АлгоритмЗаполнения) Экспорт
	
	Показатель = ЗаполняемыеПоказатели.Показатели.Добавить();
	Показатель.Наименование = Наименование;
	Показатель.Вывод        = Истина;
	
	Если ЗначениеЗаполнено(АлгоритмЗаполнения) Тогда
		Показатель.Заполнение = НовыйАлгоритмЗаполнения(АлгоритмЗаполнения);
	КонецЕсли;
	
	Возврат Показатель;
	
КонецФункции

// Конструктор коллекции, описывающей правила заполнения конкретного показателя и инициализированной прикладным алгоритмом заполнения.
//
// Параметры:
//  Алгоритм - Строка, ЛюбаяСсылка - идентификатор алгоритма заполнения, реализованного в ЗаполнениеБухгалтерскойОтчетностиПравила
// 
// Возвращаемое значение:
//  БухгалтерскаяОтчетностьБРО.НовыйАлгоритмЗаполнения
//
Функция НовыйАлгоритмЗаполнения(Алгоритм) Экспорт
	
	Заполнение = БухгалтерскаяОтчетностьБРО.НовыйАлгоритмЗаполнения();
	Заполнение.Идентификатор = Алгоритм;
	
	ЗаполнениеБухгалтерскойОтчетностиПравила.ИнициализироватьЗаполнениеПоказателя(Заполнение.НастройкиАлгоритма, Алгоритм);
	
	Возврат Заполнение;
	
КонецФункции

// Конструктор коллекции с данными расшифровки порядка заполнения показателей.
// Данные расшифровки основаны на описании значений показателей - см. НовыйЗначенияПоказателей - поэтому частично повторяют их.
// В отличие от НовыйЗначенияПоказателей, в расшифровке представление линейное или "плоское", в виде пригодном для вывода пользователю "как есть".
// Тем не менее, наличие иерархии пользователю также требуется показывать, поэтому здесь появляется поле Уровень.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новый данные расшифровки:
//   * Уровень       - Число - Уровень вложенности расшифровки
//   * ТипЗаписи     - Строка - Определяет представление строки пользователю, см. ОбщаяФорма.РасшифровкаПоказателейРегламентированныхОтчетов
//   * ПредметЗаписи - Произвольный - как правило, ссылка; например, организация или иной объект учета, из классификатора или соответствующий объекту реального мира
//   * Описание      - Строка - Описание записи расшифровки
//   * Сумма         - Число - Значение расшифровки
//   * Отчет         - См. НовыйНастройкиОтчета
//
Функция НовыйДанныеРасшифровки() Экспорт
	
	Расшифровка = Новый ТаблицаЗначений;
	
	Расшифровка.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число"));
	Расшифровка.Колонки.Добавить("ТипЗаписи",     ТипСтроковыйИдентификатор());
	Расшифровка.Колонки.Добавить("ПредметЗаписи");
	Расшифровка.Колонки.Добавить("Описание",      Новый ОписаниеТипов("Строка"));
	Расшифровка.Колонки.Добавить("Сумма",         БухгалтерскаяОтчетностьБРО.ТипСумма());
	Расшифровка.Колонки.Добавить("Отчет",         Новый ОписаниеТипов("Структура"));
	
	Возврат Расшифровка;
	
КонецФункции

// Позволяет заполнить поля сохраняемой в отчете расшифровки заполнения - при использовании механизма хранения, основанного на версии отчета 2011 года.
// Вызывается для каждого заполняемого значения (поля) отчета.
//
// Параметры:
//  ОберткаРасшифровки - БухгалтерскаяОтчетностьБРО.НовыйШаблонРасшифровкиМеханизм2011 - заполняемое значение: обертка значений расшифровки, помещаемая в контейнер
//  ЗаписьРасшифровкиЗначения - Число - индекс записи в ДанныеРасшифровки; значение из Расшифровка в БухгалтерскаяОтчетностьБРО.НовыйЗначенияЗаполненияОтчета
//  ДанныеРасшифровки - НовыйДанныеРасшифровки
//
Процедура УстановитьЗаписьРасшифровки(ОберткаРасшифровки, ЗаписьРасшифровкиЗначения, ДанныеРасшифровки) Экспорт
	
	СодержимоеЗаписиРасшифровки = ДанныеРасшифровки[ЗаписьРасшифровкиЗначения];
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.УстановитьЗаписьЛинейнойРасшифровки(
		ОберткаРасшифровки,
		СодержимоеЗаписиРасшифровки.ТипЗаписи,
		СодержимоеЗаписиРасшифровки.Описание,
		СодержимоеЗаписиРасшифровки.Сумма,
		СодержимоеЗаписиРасшифровки.Уровень,
		СодержимоеЗаписиРасшифровки.ПредметЗаписи,
		СодержимоеЗаписиРасшифровки.Отчет);
	
	КонецПроцедуры
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Для вызова конструктора из подсистемы настраиваемой отчетности.
// 
// Возвращаемое значение:
//  Структура - см. НовыйПроцессорОписанияЗаполняемыеПоказатели
//
Функция ПолучитьНовыйПроцессорОписанияЗаполняемыеПоказатели() Экспорт
	
	ПроцессорЗаполнения = НовыйПроцессорОписанияЗаполняемыеПоказатели();
	
	Возврат ПроцессорЗаполнения;
	
КонецФункции

// Вызывает процедуру ДетализироватьГруппыПоказателейПоУмолчанию.
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела -
//                заполняемая коллекция с описание структуры отчета (раздела отчета) и правил его заполнения
//  Контекст - см. БухгалтерскаяОтчетностьБРО.НовыйКонтекстОтчета
Процедура ДетализироватьГруппыПоказателейПоУмолчаниюВстроенная(ЗаполняемыеПоказатели, Контекст) Экспорт
	
	ДетализироватьГруппыПоказателейПоУмолчанию(ЗаполняемыеПоказатели, Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеОтчета

#Область Процессор

// Управляющая коллекция, обеспечивающая заполнение отчета.
// 
// В модуле используются и другие коллекции-процессоры, но этот - основной.
// Поэтому имя Процессор указывает именно на него.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйПроцессорЗаполненияОтчета()
	
	Процессор = Новый Структура;
	
	// Исходные данные
	Процессор.Вставить("ЗаполняемыеПоказатели"); // См. БухгалтерскаяОтчетностьБРО.ЗаполняемыеПоказателиРаздела
	Процессор.Вставить("Контекст", БухгалтерскаяОтчетностьБРО.НовыйКонтекстЗаполненияОтчета());
	
	// Результат заполнения
	Процессор.Вставить("ЗначенияЗаполненияОтчета",     БухгалтерскаяОтчетностьБРО.НовыйЗначенияЗаполненияОтчета());
	Процессор.Вставить("РасшифровкаЗаполненияОтчета",  НовыйДанныеРасшифровки());
	Процессор.Вставить("ЗначенияПоказателей",          НовыйЗначенияПоказателей());
	Процессор.Вставить("ЗачтенныеЗначенияПоказателей", Новый Соответствие); // Ключ - идентификатор показателя; Значение - НовыйКомпонентыЗачетаПоказателя
	
	// Служебные (private) данные
	Процессор.Вставить("КодЯзыка", ОбщегоНазначения.КодОсновногоЯзыка());// Результат расчета записывается в информационную базу (в регл. отчет), поэтому локализуется основным языком
	Процессор.Вставить("ПредставлениеПериода", "");
	Процессор.Вставить("РасшифровкаОрганизаций", Новый СписокЗначений);// СписокЗначений из СправочникСсылка.Организации, см. РасшифровкаОрганизаций()
	Процессор.Вставить("ЕстьФилиалы", Ложь);
	Процессор.Вставить("ОписаниеСумм", КоллекцииСумм.НовыйОписаниеКоллекцииСумм());
	
	Процессор.Вставить("Алгоритм"); // Идентификатор алгоритма. Свойства ниже имеют смысл в контекст этого алгоритма
	Процессор.Вставить("ПравилаПолученияДанных"); // массив из ЗаполняемыеПоказатели.Показатели с указанным Алгоритмом
	Процессор.Вставить("ОсновнойПоказатель", -1);
	Процессор.Вставить("ДанныеУчета");// результат запроса получения данных для расчета показателей. Требования к запросу см. в ЗаполнениеБухгалтерскойОтчетностиПравила.ПолучитьДанныеУчета
	Процессор.Вставить("ДанныеАлгоритма", Новый Структура); // Состав определяется алгоритмом
	Процессор.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Возврат Процессор;
	
КонецФункции

Функция НовыйЗначенияПоказателей()
	
	// На верхнем уровне - показатели, на следующем - организации.
	// Остальные уровни зависят от алгоритма заполнения - это могут быть объекты аналитики или счета (субсчета).
	// См. ЗаполнениеБухгалтерскойОтчетностиПравила.ОписатьПорядокЗаполненияПоказателя
	
	Протокол = Новый ДеревоЗначений;
	
	Протокол.Колонки.Добавить("Показатель",       ТипЧисловойИдентификатор());
	Протокол.Колонки.Добавить("ТипЗаписи",        ТипСтроковыйИдентификатор());
	Протокол.Колонки.Добавить("ПредметЗаписи"); // См. в НовыйДанныеРасшифровки
	Протокол.Колонки.Добавить("Описание",         Новый ОписаниеТипов("Строка")); // Для вывода пользователю
	Протокол.Колонки.Добавить("Разъяснение",      Новый ОписаниеТипов("Строка")); // Для вывода пользователю в ходе первоначального освоения
	Протокол.Колонки.Добавить("Значение",         БухгалтерскийУчетКлиентСервер.ТипСумма());
	Протокол.Колонки.Добавить("Отчет",            Новый ОписаниеТипов("Структура")); // См. НовыйНастройкиОтчета
	
	Возврат Протокол;
	
КонецФункции

Функция ТипЧисловойИдентификатор()
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(10);
КонецФункции

Функция ТипСтроковыйИдентификатор()
	Возврат ОбщегоНазначения.ОписаниеТипаСтрока(255);
КонецФункции

#КонецОбласти

#Область ОписаниеРасчетаПоказателей

// Содержит упорядоченный список организаций с представлениями и отметками об активности.
//
// Параметры:
//  Организации - Массив из СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  СписокЗначений из СправочникСсылка.Организации
//
Функция РасшифровкаОрганизаций(Организации)
	
	РасшифровкаОрганизаций = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.ПометкаУдаления КАК ВАрхиве,
	|	Организации.Представление КАК Представление,
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка КАК ЭтоГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Организации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГоловнаяОрганизация УБЫВ,
	|	ВАрхиве,
	|	Организации.Наименование,
	|	Организации.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РасшифровкаОрганизаций.Добавить(Выборка.Ссылка, Выборка.Представление, Не Выборка.ВАрхиве);
	КонецЦикла;
	
	Возврат РасшифровкаОрганизаций;
	
КонецФункции

Процедура ОписатьЗначенияПоказателей(Процессор)
	
	// Здесь заполняем Процессор.ЗначенияПоказателей
	// 1. сначала добавим туда "статические" данные, иерархически описывающие получение данных в общем виде:
	//    - показатели, текстовое описание получения данных
	//    - обязательные шаги расчета каждого показателя:
	//      -- перечень организаций
	//      -- другие, определяемые алгоритмом - обычно это счета или корреспонденции счетов.
	// 2. затем наполним созданную иерархию "динамическими" данными - за период: аналитикой и числовыми значениями.
	// 3. если предполагает алгоритм - выполним суммирование динамических данных
	
	Если Процессор.ДанныеУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияПорядкаЗаполненияПоказателей = Новый Соответствие;// Ключ - Идентификатор; Значение - НовыйОписаниеПорядкаЗаполненияПоказателя
	
	Для Каждого Показатель Из Процессор.ПравилаПолученияДанных Цикл
		
		ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
		
		ЗаписьПоказатель = Процессор.ЗначенияПоказателей.Строки.Добавить();
		ЗаписьПоказатель.ТипЗаписи  = "Показатель";
		ЗаписьПоказатель.Показатель = ИдентификаторПоказателя;
		
		ОписаниеПорядкаЗаполнения = НовыйОписаниеПорядкаЗаполненияПоказателя();
		ОписанияПорядкаЗаполненияПоказателей.Вставить(ИдентификаторПоказателя, ОписаниеПорядкаЗаполнения);
		
		ОписаниеПорядкаЗаполнения.ЗначениеЗаполнения = ЗаписьПоказатель;
		ОписаниеПорядкаЗаполнения.ШагиРасчета.Добавить(Процессор.РасшифровкаОрганизаций, "Организация");
		
		ЭтоОсновнойПоказатель = (ИдентификаторПоказателя = Процессор.ОсновнойПоказатель);
		
		ЗаполнениеБухгалтерскойОтчетностиПравила.ОписатьПорядокЗаполненияПоказателя(
			ОписаниеПорядкаЗаполнения,
			Показатель,
			ЭтоОсновнойПоказатель,
			Процессор);
		
		ЗаписьПоказатель.Описание    = ОписаниеПорядкаЗаполнения.Текст;
		ЗаписьПоказатель.Разъяснение = ОписаниеПорядкаЗаполнения.Разъяснение;
		
		ОписаниеПорядкаЗаполнения.Отчет.ВидыСубконто = ОбщегоНазначенияБПКлиентСервер.ЗначенияКоллекции(ОписаниеПорядкаЗаполнения.Отчет.Субконто);
		
		СоздатьОбязательныеШагиРасчета(ЗаписьПоказатель, ОписаниеПорядкаЗаполнения, Процессор, Новый Структура);
		
	КонецЦикла;
	
	ВыборкаПоказатель = Процессор.ДанныеУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоказатель.Следующий() Цикл
		
		ИдентификаторПоказателя = ВыборкаПоказатель.Показатель;
		Если ИдентификаторПоказателя = Null Тогда
			ИдентификаторПоказателя = Процессор.ОсновнойПоказатель;
		КонецЕсли;
		
		ОписаниеПорядкаЗаполнения = ОписанияПорядкаЗаполненияПоказателей[ИдентификаторПоказателя];
		
		Если ОписаниеПорядкаЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОписаниеПорядкаЗаполнения.ЗначениеЗаполнения.Значение = ВыборкаПоказатель.Значение;
		
		ВыполнитьШагиРасчета(
			ОписаниеПорядкаЗаполнения.ЗначениеЗаполнения,
			ВыборкаПоказатель,
			ОписаниеПорядкаЗаполнения,
			ОписаниеПорядкаЗаполнения.ШагиРасчета,
			Процессор,
			Новый Структура);
		
	КонецЦикла;
	
	СуммирующиеПоказатели = Новый Соответствие; // Ключ - идентификатор суммирующего показателя; Значение - массив из идентификаторов суммируемых показателей
	ЗаполнениеБухгалтерскойОтчетностиПравила.ОписатьСуммирующиеПоказатели(
		СуммирующиеПоказатели,
		Процессор.Алгоритм,
		Процессор.ДанныеАлгоритма);
	СуммироватьЗначенияПоказателей(Процессор, СуммирующиеПоказатели);
	
КонецПроцедуры

Функция НовыйОписаниеПорядкаЗаполненияПоказателя()
	
	Описание = Новый Структура;
	
	Описание.Вставить("ЗначениеЗаполнения"); // запись из ЗначенияЗаполненияОтчета
	Описание.Вставить("Текст",           "");
	Описание.Вставить("Разъяснение",     "");
	Описание.Вставить("ШагиРасчета",     Новый СписокЗначений);
	Описание.Вставить("КешШаблонов",     Новый Соответствие);
	Описание.Вставить("ДанныеАлгоритма", Новый Структура);
	Описание.Вставить("Отчет",           НовыйПостроительОписанияОтчетов());
	
	Возврат Описание;
	
КонецФункции

Процедура СоздатьОбязательныеШагиРасчета(ЗаписьРодитель, ОписаниеПорядкаЗаполнения, Процессор, ВыполненныеШагиРасчета, КешПредставлений = Неопределено)
	
	ИндексШагаРасчета = ВыполненныеШагиРасчета.Количество();
	Если ИндексШагаРасчета >= ОписаниеПорядкаЗаполнения.ШагиРасчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ШагРасчета = ОписаниеПорядкаЗаполнения.ШагиРасчета[ИндексШагаРасчета];
	ИмяШага = ШагРасчета.Представление;
	ФиксированныеЗначения = ШагРасчета.Значение;
	
	Если ФиксированныеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(Не ВыполненныеШагиРасчета.Свойство(ИмяШага));// Исключим бесконечную рекурсию
	
	СоставШагаРасчета = ОбщегоНазначения.СкопироватьРекурсивно(ВыполненныеШагиРасчета);
	
	Если КешПредставлений = Неопределено Тогда
		КешПредставлений = Новый Структура;
	КонецЕсли;
	
	Для Каждого ОписаниеЗначения Из ФиксированныеЗначения Цикл
		
		Если Не ОписаниеЗначения.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьРасчет = ЗаписьРодитель.Строки.Добавить();
		ЗаписьРасчет.ТипЗаписи     = ИмяШага;
		ЗаписьРасчет.ПредметЗаписи = ОписаниеЗначения.Значение;
		ЗаписьРасчет.Описание      = ОписаниеЗначения.Представление;
		
		СоставШагаРасчета.Вставить(ИмяШага, ОписаниеЗначения.Значение);
		КешПредставлений.Вставить(ИмяШага, ОписаниеЗначения.Представление);
		
		УстановитьОтчет(ЗаписьРасчет, СоставШагаРасчета, ОписаниеПорядкаЗаполнения, Процессор);
		
		ЗаполнениеБухгалтерскойОтчетностиПравила.ОписатьЗаполняемоеЗначение(
			ЗаписьРасчет,
			СоставШагаРасчета,
			КешПредставлений,
			ОписаниеПорядкаЗаполнения,
			Процессор);
		
		СоздатьОбязательныеШагиРасчета(ЗаписьРасчет, ОписаниеПорядкаЗаполнения, Процессор, СоставШагаРасчета, КешПредставлений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьШагиРасчета(ЗаписьРодитель, ВыборкаРодитель, ОписаниеПорядкаЗаполнения, ШагиРасчета, Процессор, ВыполненныеШагиРасчета, КешПредставлений = Неопределено)
	
	ИндексШагаРасчета = ВыполненныеШагиРасчета.Количество();
	Если ИндексШагаРасчета >= ШагиРасчета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ШагРасчета = ШагиРасчета[ИндексШагаРасчета];
	ИмяШага = ШагРасчета.Представление;
	ФиксированныеЗначения = ШагРасчета.Значение;
	
	ОбщегоНазначенияКлиентСервер.Проверить(Не ВыполненныеШагиРасчета.Свойство(ИмяШага));// Исключим бесконечную рекурсию
	
	СоставШагаРасчета = ОбщегоНазначения.СкопироватьРекурсивно(ВыполненныеШагиРасчета);
	
	Если КешПредставлений = Неопределено Тогда
		КешПредставлений = Новый Структура;
	КонецЕсли;
	
	Выборка = ВыборкаРодитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		
		ПредметЗаписи = Выборка[ИмяШага];
		
		Если ПредметЗаписи = Null Тогда
			// Пропускаем уровень (оставаясь на том же шаге)
			ВыполнитьШагиРасчета(ЗаписьРодитель, Выборка, ОписаниеПорядкаЗаполнения, ШагиРасчета, Процессор, СоставШагаРасчета, КешПредставлений);
			Продолжить;
		КонецЕсли;
		
		ЗаписьРасчет = Неопределено;
		ОписаниеЗаполнено = Истина;
		Если ЗначениеЗаполнено(ФиксированныеЗначения) Тогда
			ЗаписьРасчет = ЗаписьРодитель.Строки.Найти(ПредметЗаписи, "ПредметЗаписи");
			Если ЗаписьРасчет = Неопределено Тогда
				// При необходимости можно вставить в нужную позицию - определяемую шаблоном из ФиксированныеЗначения
			КонецЕсли;
		КонецЕсли;
		Если ЗаписьРасчет = Неопределено Тогда
			ЗаписьРасчет = ЗаписьРодитель.Строки.Добавить();
			ЗаписьРасчет.ТипЗаписи     = ИмяШага;
			ЗаписьРасчет.ПредметЗаписи = ПредметЗаписи;
			ОписаниеЗаполнено = Ложь;
		КонецЕсли;
		
		СоставШагаРасчета.Вставить(ИмяШага, ПредметЗаписи);
		
		ЗаписьРасчет.Значение = Выборка.Значение;
		
		Если Не ОписаниеЗаполнено Тогда
			
			ПредставлениеПредметаЗаписи = ПредставлениеПоляВыборки(Выборка, ИмяШага, ПредметЗаписи);
			КешПредставлений.Вставить(ИмяШага, ПредставлениеПредметаЗаписи);
			
			УстановитьОтчет(ЗаписьРасчет, СоставШагаРасчета, ОписаниеПорядкаЗаполнения, Процессор);
			
			ЗаполнениеБухгалтерскойОтчетностиПравила.ОписатьЗаполняемоеЗначение(
				ЗаписьРасчет,
				СоставШагаРасчета,
				КешПредставлений,
				ОписаниеПорядкаЗаполнения,
				Процессор);
			
			Если ПустаяСтрока(ЗаписьРасчет.Описание) Тогда
				ЗаписьРасчет.Описание = ПредставлениеПредметаЗаписи;
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьШагиРасчета(ЗаписьРасчет, Выборка, ОписаниеПорядкаЗаполнения, ШагиРасчета, Процессор, СоставШагаРасчета, КешПредставлений);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеПоляВыборки(Выборка, ИмяШага, ПредметЗаписи)
	
	ИмяПредставления = ИмяПредставления(ИмяШага);
	СловоПредставление = Новый Структура(ИмяПредставления);
	ЗаполнитьЗначенияСвойств(СловоПредставление, Выборка);
	Представление = СловоПредставление[ИмяПредставления];
	Если ТипЗнч(Представление) = Тип("Строка") Тогда
		Возврат Представление;
	Иначе
		Возврат Строка(ПредметЗаписи);
	КонецЕсли;
	
КонецФункции

Функция ИмяПредставления(ШагРасчета)
	Возврат СтрШаблон("%1Представление", ШагРасчета);
КонецФункции

Процедура СуммироватьЗначенияПоказателей(Процессор, СуммирующиеПоказатели)
	
	Для Каждого СуммирующийПоказатель Из СуммирующиеПоказатели Цикл
		
		ЗначениеПоказателя = Процессор.ЗначенияПоказателей.Строки.Найти(СуммирующийПоказатель.Ключ, "Показатель");
		Если ЗначениеПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПоказателя.Значение = 0;
		ЗначениеПоказателя.Строки.Очистить();
		
		Для Каждого ИдентификаторПоказателяСлагаемое Из СуммирующийПоказатель.Значение Цикл
			
			ПоказательСлагаемое = БухгалтерскаяОтчетностьБРО.Показатель(ИдентификаторПоказателяСлагаемое, Процессор.ЗаполняемыеПоказатели);
			
			ЗначениеСлагаемого = ЗначениеПоказателя.Строки.Добавить();
			ЗначениеСлагаемого.Описание = ПоказательСлагаемое.Наименование;
			
			ЗначениеПоказателяСлагаемое = Процессор.ЗначенияПоказателей.Строки.Найти(ИдентификаторПоказателяСлагаемое, "Показатель");
			Если ЗначениеПоказателяСлагаемое = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеСлагаемого.Значение = ЗначениеПоказателяСлагаемое.Значение;
			ЗначениеПоказателя.Значение = ЗначениеПоказателя.Значение + ЗначениеСлагаемого.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеОтчеты

Функция НовыйПостроительОписанияОтчетов()
	
	// Шаблон настроек отчетов для расшифровки всех слагаемых показателя.
	// Шаблон инициализируется для показателя и далее на основе него на каждом шаге и для каждого слагаемого формируется НовыйНастройкиОтчета.
	
	ПостроительОписанияОтчетов = Новый Структура;
	ПостроительОписанияОтчетов.Вставить("ВидОтчета",           ""); // "ОборотыСчета" или "АнализСубконто"; см. также ЗаполнениеРасшифровкаРегламентированнойОтчетности
	ПостроительОписанияОтчетов.Вставить("СчетГруппа",          ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	ПостроительОписанияОтчетов.Вставить("Субсчета",            Новый Массив); // Из ПланыСчетов.Хозрасчетный
	ПостроительОписанияОтчетов.Вставить("Субконто",            Новый Структура); // Ключ - имя поля отчета (шага), Значение - вид субконто
	ПостроительОписанияОтчетов.Вставить("ОтборыПоказателя",    Новый Структура); // Ключ - имя поля отчета (шага), Значение - массив из значений отбора или соответствие.
	                                    // Соответствие в ОтборыПоказателя позволяет описать отбор через точку от поля отчета.
	                                    // Ключ - относительный путь к полю отбора, Значение - массив из значений отбора.
	                                    // Например, для отбора вида Номенклатура.Производитель.ИНН относительный путь - Производитель.ИНН
	// Следующие свойства - приватные, их не следует изменять вне этого модуля
	ПостроительОписанияОтчетов.Вставить("ВидыСубконто",        Новый Массив);       // Уникальных значений из Субконто
	ПостроительОписанияОтчетов.Вставить("КешОписанийСубконто", Новый Соответствие); // Ключ - вид субконто, Значение - ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйОписаниеСубконто
	
	Возврат ПостроительОписанияОтчетов;
	
КонецФункции

Процедура УстановитьОтчет(ЗаписьРасчет, СоставШагаРасчета, ОписаниеПорядкаЗаполнения, Процессор)
	
	Если ПустаяСтрока(ОписаниеПорядкаЗаполнения.Отчет.ВидОтчета) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРасчет.Отчет = НовыйНастройкиОтчета(ОписаниеПорядкаЗаполнения.Отчет, СоставШагаРасчета, Процессор);
	
КонецПроцедуры

Функция НовыйНастройкиОтчета(ПостроительОписанияОтчетов, СоставШагаРасчета, Процессор)
	
	СчетОтчета = ПостроительОписанияОтчетов.СчетГруппа;
	ОтчетПоСчетуГруппе = Истина;
	Если СоставШагаРасчета.Свойство("Счет") Тогда
		СчетОтчета = СоставШагаРасчета.Счет;
		ОтчетПоСчетуГруппе = Ложь;
	Иначе
		Если ПостроительОписанияОтчетов.Субсчета.Количество() = 1 Тогда
			СчетОтчета = ПостроительОписанияОтчетов.Субсчета[0];
			ОтчетПоСчетуГруппе = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВключатьОбособленныеПодразделения = Истина;
	Организация = Процессор.Контекст.Организации[0];
	Если СоставШагаРасчета.Свойство("Организация") Тогда
		Если Процессор.Контекст.Организации.Количество() > 1
			И СоставШагаРасчета.Организация = Организация Тогда
			ВключатьОбособленныеПодразделения = Ложь;
		КонецЕсли;
		Организация = СоставШагаРасчета.Организация;
	КонецЕсли;
	
	Отчет = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйНастройкиОтчетаПоРегиструБухгалтерии(
		ПостроительОписанияОтчетов.ВидОтчета,
		Организация,
		Процессор.Контекст.Период.Начало,
		Процессор.Контекст.Период.Конец,
		СчетОтчета,
		Процессор.ОписаниеСумм);
	
	Если ПостроительОписанияОтчетов.ВидОтчета = "ОборотыСчета" Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьОборотыСчета(Отчет, "", Ложь, Ложь, Истина, Ложь);
	КонецЕсли;
	
	Если Не ВключатьОбособленныеПодразделения Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ИсключитьОбособленныеПодразделения(Отчет);
	КонецЕсли;
	
	Если ОтчетПоСчетуГруппе И ЗначениеЗаполнено(ПостроительОписанияОтчетов.Субсчета) Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Отчет,
			"Счет",
			ПостроительОписанияОтчетов.Субсчета,
			ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	Если ПостроительОписанияОтчетов.ВидОтчета = "АнализСчета" И СоставШагаРасчета.Свойство("КорСчет") Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
			Отчет,
			"КорСчет",
			СоставШагаРасчета.КорСчет);
	КонецЕсли;
	
	Если ПостроительОписанияОтчетов.ВидОтчета = "АнализСубконто" Тогда
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.НастроитьАнализСубконто(Отчет, ПостроительОписанияОтчетов.ВидыСубконто);
	КонецЕсли;
	
	ОписаниеВсехСубконтоСчета = ПостроительОписанияОтчетов.КешОписанийСубконто[СчетОтчета];// Всех необходимых, но не обязательно всех на счете
	Если ОписаниеВсехСубконтоСчета = Неопределено Тогда
		
		ОписаниеВсехСубконтоСчета = ЗаполнениеРасшифровкаРегламентированнойОтчетности.ОписаниеСубконтоОтчета(
			ПостроительОписанияОтчетов.ВидОтчета,
			ПостроительОписанияОтчетов.ВидыСубконто,
			СчетОтчета);
		
		ПостроительОписанияОтчетов.КешОписанийСубконто.Вставить(СчетОтчета, ОписаниеВсехСубконтоСчета);
		
	КонецЕсли;
	
	Для Каждого ОписаниеСубконтоОтчета Из ПостроительОписанияОтчетов.Субконто Цикл
		
		ОписаниеСубконтоСчета = ОписаниеВсехСубконтоСчета[ОписаниеСубконтоОтчета.Значение];
		Если ОписаниеСубконтоСчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПоля = ОписаниеСубконтоОтчета.Ключ;
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьГруппировкуВНастройкиОтчета(
			Отчет,
			ОписаниеСубконтоСчета.Имя,
			ОписаниеСубконтоСчета.Представление);
		
		Если СоставШагаРасчета.Свойство(ИмяПоля) Тогда
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
				Отчет,
				ОписаниеСубконтоСчета.Имя,
				СоставШагаРасчета[ИмяПоля]);
		ИначеЕсли ПостроительОписанияОтчетов.ОтборыПоказателя.Свойство(ИмяПоля) Тогда
			ЗначениеОтбора = ПостроительОписанияОтчетов.ОтборыПоказателя[ИмяПоля];
			
			ТипЗначенияОтбора = ТипЗнч(ЗначениеОтбора);
			Если ТипЗначенияОтбора = Тип("Массив") Тогда
				ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
					Отчет,
					ОписаниеСубконтоСчета.Имя,
					ЗначениеОтбора,
					ВидСравненияКомпоновкиДанных.ВСписке);
			ИначеЕсли ТипЗначенияОтбора = Тип("Структура") Или ТипЗначенияОтбора = Тип("Соответствие") Тогда
				Для Каждого ОтборЧерезТочку Из ЗначениеОтбора Цикл
					ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьОтборВНастройкиОтчета(
						Отчет,
						СтрШаблон("%1.%2", ОписаниеСубконтоСчета.Имя, ОтборЧерезТочку.Ключ),
						ОтборЧерезТочку.Значение,
						ВидСравненияКомпоновкиДанных.ВСписке);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Отчет;
	
КонецФункции

#КонецОбласти

#Область ЗачетПоказателей

// Зачитывать можно показатели, включенные в несколько групп.
//
// Зачет принципиально возможен, потому что в общем случае значение показателя описывается набором значений - по субсчетам и/или по аналитике.
// Такие значения перед выводом в отчет так или иначе суммируются, поэтому их можно назвать "слагаемыми".
//
// При этом может предполагаться, что все значения имеют одинаковый, заранее известный знак, и если это предположение не выполняется,
// то значение выводится "как есть".
// Например, сумма денег в кассе предполагается положительным значением, но если в данных учета ошибка и сумма в учете отрицательная,
// то нужно вывести в отчет отрицательное число.
//
// В более сложных случаях знак значений заранее не определен, у разных значений могут быть разные знаки.
// Например, курсовые разницы могут быть как положительными, так и отрицательными -
// и это нормальный ход вещей, отрицательные значения не свидетельствуют об ошибках.
// В таких случаях может оказаться, что в зависимости от знака суммы слагаемых (всех вместе или раздельно в произвольных комбинациях),
// значения показателя нужно разместить в двух разных группах - положительные в одной, отрицательные в другой.
//
// Правила зачета - то есть, вычисления положительного и отрицательного компонента - могут быть достаточно сложными.
// По умолчанию все значения суммируются - то есть, получается одно значение показателя, положительное или отрицательное
// (другими словами, все значения зачитываются).
// Но, например, может понадобиться просуммировать раздельно все положительные значения и все отрицательные - то есть,
// не зачитывать их вовсе или зачитывать частично.
//
// Техническая реализация зачета показателей основана на том, что определяются пары групп показателей - одна "положительная", другая "отрицательная".
// По умолчанию для показателей, входящих в такие пары определяется одна сумма слагаемых (всех вместе).
// Положительное значение помещается в положительную группу, отрицательное - в отрицательную.
// Таким образом, значение у показателя будет одно, в одной из двух групп.
//
// Однако, каждый прикладной алгоритм заполнения может реализовывать свои способы зачета показателей,
// в том числе для разных показателей одного алгоритма - разные.
// Способ, применяемый для конкретного алгоритма, может быть сохранен в правиле с помощью ЗаполнениеБухгалтерскойОтчетностиПравила.ИнициализироватьЗаполнениеПоказателя
// Реализация каждого из таких способов - в ЗаполнениеБухгалтерскойОтчетностиПравила.ЗачестьПоказатели.
// То есть, алгоритм может "отказаться" от простого суммирования и предоставить для каждого показателя _две_ суммы,
// одна из которых "положительная (строго говоря - заведомо имеет не отрицательный знак, то есть, положительная или равная нулю),
// а вторая - "отрицательная" (заведомо имеет не положительный знак).
// С ними поступаем так же: положительное значение помещается в положительную группу, отрицательное - в отрицательную.
// Однако, в этом случае значение может оказаться "распределено" между двумя группами.

// Коллекция хранит сведения о том, куда (в какую группу или какие группы) фактически были включены ("распределены") значения показателя.
//
Функция НовыйКомпонентыЗачетаПоказателя()

	Компоненты = Новый Структура;
	Компоненты.Вставить("Положительный",       НовыйКомпонентЗачетаПоказателя());
	Компоненты.Вставить("Отрицательный",       НовыйКомпонентЗачетаПоказателя());
	Компоненты.Вставить("ВозможныДваЗначения", Истина);
	Возврат Компоненты;

КонецФункции

Функция НовыйКомпонентЗачетаПоказателя()
	
	Компонент = Новый Структура;
	Компонент.Вставить("ГруппаПоказателей", -1);
	Компонент.Вставить("Значение",          0);
	Компонент.Вставить("Пояснение",         "");
	Возврат Компонент;
	
КонецФункции

Функция НовыйГруппыЗачитываемогоПоказателя()
	
	Группы = Новый Структура;
	Группы.Вставить("Положительная", -1);
	Группы.Вставить("Отрицательная", -1);
	Возврат Группы;
	
КонецФункции

Функция ЗачитываемыеПоказатели(ЗаполняемыеПоказатели)
	
	ЗачитываемыеПоказатели = Новый Соответствие; // Ключ - идентификатор показателя; Значение - НовыйГруппыЗачитываемогоПоказателя
	
	ПоложительныеГруппы = Новый Соответствие; // Ключ - идентификатор показателя; Значение - индекс группы
	// Принимаем условность: положительная группа предшествует отрицательной
	
	Для Каждого ГруппаПоказателей Из ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
		
		Если ГруппаПоказателей.Показатель <> Неопределено Тогда
			// Зачет показателей в группах имени себя не поддержан
			Продолжить;
		КонецЕсли;
		
		ИндексГруппыПоказателей = ЗаполняемыеПоказатели.ГруппыПоказателей.Индекс(ГруппаПоказателей);
		
		Для Каждого Показатель Из ГруппаПоказателей.Состав Цикл
			
			ПоложительнаяГруппа = ПоложительныеГруппы[Показатель];
			Если ПоложительнаяГруппа = Неопределено Тогда
				ПоложительныеГруппы.Вставить(Показатель, ИндексГруппыПоказателей);
			Иначе
				ГруппыЗачитываемогоПоказателя = ЗачитываемыеПоказатели[Показатель];
				Если ГруппыЗачитываемогоПоказателя = Неопределено Тогда
					ГруппыЗачитываемогоПоказателя = НовыйГруппыЗачитываемогоПоказателя();
					ГруппыЗачитываемогоПоказателя.Положительная = ПоложительнаяГруппа;
					ЗачитываемыеПоказатели.Вставить(Показатель, ГруппыЗачитываемогоПоказателя);
				КонецЕсли;
				ГруппыЗачитываемогоПоказателя.Отрицательная = ИндексГруппыПоказателей;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗачитываемыеПоказатели;
	
КонецФункции

Процедура ЗачестьПоказатели(ПроцессорЗаполненияОтчета, ЗачитываемыеПоказатели)
	
	Для Каждого Показатель Из ПроцессорЗаполненияОтчета.ПравилаПолученияДанных Цикл
		
		ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
		ГруппыЗачитываемогоПоказателя = ЗачитываемыеПоказатели[ИдентификаторПоказателя];
		Если ГруппыЗачитываемогоПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияПоказателя = ПроцессорЗаполненияОтчета.ЗначенияПоказателей.Строки.Найти(ИдентификаторПоказателя, "Показатель");
		Если ЗначенияПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КомпонентыЗачета = НовыйКомпонентыЗачетаПоказателя();
		КомпонентыЗачета.Положительный.ГруппаПоказателей = ГруппыЗачитываемогоПоказателя.Положительная;
		КомпонентыЗачета.Отрицательный.ГруппаПоказателей = ГруппыЗачитываемогоПоказателя.Отрицательная;
		
		ОсобенныйРасчет = ЗаполнениеБухгалтерскойОтчетностиПравила.ЗачестьПоказатели(
			КомпонентыЗачета,
			Показатель,
			ЗначенияПоказателя,
			ПроцессорЗаполненияОтчета);
			
		Если Не ОсобенныйРасчет Тогда
			
			КомпонентыЗачета.ВозможныДваЗначения = Ложь;
			КомпонентыЗачета.Положительный.Пояснение  = НСтр("ru = 'положительное значение';
															|en = 'положительное значение'", ПроцессорЗаполненияОтчета.КодЯзыка);
			КомпонентыЗачета.Отрицательный.Пояснение  = НСтр("ru = 'отрицательное значение';
															|en = 'отрицательное значение'", ПроцессорЗаполненияОтчета.КодЯзыка);
			
			Если ЗначенияПоказателя.Значение >= 0 Тогда
				КомпонентыЗачета.Положительный.Значение   = ЗначенияПоказателя.Значение;
			Иначе
				КомпонентыЗачета.Отрицательный.Значение   = ЗначенияПоказателя.Значение;
			КонецЕсли;
			
		КонецЕсли;
		
		ПроцессорЗаполненияОтчета.ЗачтенныеЗначенияПоказателей.Вставить(ИдентификаторПоказателя, КомпонентыЗачета);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполненныеЗначенияЗачетаПоказателей(КомпонентыЗачета)
	
	КомпонентыМассив = Новый Массив;
	
	Если КомпонентыЗачета = Неопределено Тогда
		Возврат КомпонентыМассив;
	КонецЕсли;
	
	Если КомпонентыЗачета.Положительный.Значение <> 0 Тогда
		КомпонентыМассив.Добавить(КомпонентыЗачета.Положительный);
	КонецЕсли;
	
	Если КомпонентыЗачета.Отрицательный.Значение <> 0 Тогда
		КомпонентыМассив.Добавить(КомпонентыЗачета.Отрицательный);
	КонецЕсли;
	
	Возврат КомпонентыМассив;
	
КонецФункции

Функция ЗначениеГруппыЗачетаПоказателей(КомпонентыМассив, ИндексГруппы)
	Для Каждого КомпонентЗачета Из КомпонентыМассив Цикл
		Если КомпонентЗачета.ГруппаПоказателей = ИндексГруппы Тогда
			Возврат КомпонентЗачета.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;
КонецФункции

#КонецОбласти

#Область ОбъединениеПоказателейВГруппы

Функция НовыйРасчетГруппыОтчета()
	
	РасчетГруппы = Новый Структура;
	
	РасчетГруппы.Вставить("ПроцессорЗаполнения"); // НовыйПроцессорЗаполненияОтчета
	
	РасчетГруппы.Вставить("Группа");           // Запись из ГруппыПоказателей
	РасчетГруппы.Вставить("ИндексГруппы", -1);
	РасчетГруппы.Вставить("ЗначениеГруппы");         // Запись из НовыйЗначенияЗаполненияОтчета
	РасчетГруппы.Вставить("СодержитЕдинственныйПоказатель", Ложь);
	
	// Обновляются по мере описания показателей
	РасчетГруппы.Вставить("Показатель"); // Запись из Показатели
	РасчетГруппы.Вставить("ИдентификаторПоказателя", -1);
	РасчетГруппы.Вставить("ЗначениеПоказателя"); // Запись из НовыйЗначенияЗаполненияОтчета
	
	РасчетГруппы.Вставить("ЗначенияПоказателей",    Новый Соответствие); // Ключ - идентификатор показателя; Значение - Запись из НовыйЗначенияЗаполненияОтчета
	
	// Расшифровка содержит сначала состав группы (показатели), а потом - расчет каждого из этих показателей.
	// Выводить удобнее по каждому показателю - то есть, первый показатель в составе группы и его расчет, затем второй и так далее.
	// Поэтому информация о каждом новом показателе вставляется в "середину" расшифровки.
	// До окончания расчета группы храним ссылки на записи, а когда порядок записей фиксируется - записываем их индексы.
	РасчетГруппы.Вставить("РасшифровкаПоказателей", Новый Соответствие); // Ключ - идентификатор показателя; Значение - массив записей расшифровки
	РасчетГруппы.Вставить("РасшифровкаГруппы",      Новый Массив); // записей расшифровки
	
	Возврат РасчетГруппы;
	
КонецФункции

Функция НачатьРасчетГруппыОтчета(ГруппаПоказателей, ПроцессорЗаполненияОтчета)
	
	ИндексГруппы = ГруппаПоказателей.Владелец().Индекс(ГруппаПоказателей);
	
	РасчетГруппы = НовыйРасчетГруппыОтчета();
	РасчетГруппы.ПроцессорЗаполнения  = ПроцессорЗаполненияОтчета;
	РасчетГруппы.Группа               = ГруппаПоказателей;
	РасчетГруппы.ИндексГруппы         = ИндексГруппы;
	РасчетГруппы.ЗначениеГруппы       = ПроцессорЗаполненияОтчета.ЗначенияЗаполненияОтчета.Строки.Добавить();
	РасчетГруппы.ЗначениеГруппы.Показатель = ИндексГруппы;
	РасчетГруппы.СодержитЕдинственныйПоказатель = (ГруппаПоказателей.Показатель <> Неопределено);
	
	ДобавитьЗаголовокРасшифровкиГруппыПоказателей(РасчетГруппы);
	
	Возврат РасчетГруппы;

КонецФункции

Процедура ДобавитьЗаголовокРасшифровкиГруппыПоказателей(РасчетГруппы)
	
	ЗаписьРасшифровки = ДобавитьЗаписьРасшифровкиГруппы(РасчетГруппы);
	
	ЗаписьРасшифровки.ТипЗаписи = "ЗаголовокГруппы";
	
	НаименованиеГруппы = БухгалтерскаяОтчетностьБРО.НаименованиеГруппыПоказателей(
		РасчетГруппы.Группа,
		РасчетГруппы.ПроцессорЗаполнения.ЗаполняемыеПоказатели);
	
	ЗаписьРасшифровки.Описание  = СтрШаблон(
		НСтр("ru = '%1 (%2) - за %3';
			|en = '%1 (%2) - за %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НаименованиеГруппы,
		РасчетГруппы.Группа.КодСтроки,
		РасчетГруппы.ПроцессорЗаполнения.ПредставлениеПериода);
	
КонецПроцедуры

Процедура ЗакончитьРасчетГруппыОтчета(РасчетГруппы)
	
	Если Не РасчетГруппы.СодержитЕдинственныйПоказатель Тогда
		ДобавитьИтогРасшифровкиГруппыПоказателей(РасчетГруппы);
	КонецЕсли;
	
	// Запишем расшифровку в коллекцию ЗначенияЗаполненияОтчета
	РасчетГруппы.ЗначениеГруппы.Расшифровка = Новый Массив;
	Для Каждого ЗаписьРасшифровки Из РасчетГруппы.РасшифровкаГруппы Цикл
		РасчетГруппы.ЗначениеГруппы.Расшифровка.Добавить(ЗаписьРасшифровки.Владелец().Индекс(ЗаписьРасшифровки));
	КонецЦикла;
	
	Для Каждого ОписанияЗначенияПоказателя Из РасчетГруппы.ЗначенияПоказателей Цикл
		Если ТипЗнч(ОписанияЗначенияПоказателя.Значение.Расшифровка) <> Тип("Массив") Тогда
			// Может быть инициализировано, если группа содержит единственный показатель
			// (тогда расшифровка группы и расшифровка показателя - одна и та же)
			ОписанияЗначенияПоказателя.Значение.Расшифровка = Новый Массив;
		КонецЕсли;
		ЗаписиРасшифровки = РасчетГруппы.РасшифровкаПоказателей[ОписанияЗначенияПоказателя.Ключ];
		Если Не ЗначениеЗаполнено(ЗаписиРасшифровки) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ЗаписьРасшифровки Из ЗаписиРасшифровки Цикл
			ОписанияЗначенияПоказателя.Значение.Расшифровка.Добавить(ЗаписьРасшифровки.Владелец().Индекс(ЗаписьРасшифровки));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьИтогРасшифровкиГруппыПоказателей(РасчетГруппы)
	
	ЗаписьРасшифровки = ДобавитьЗаписьРасшифровкиГруппы(РасчетГруппы);
	
	ЗаписьРасшифровки.ТипЗаписи = "Итог";
	ЗаписьРасшифровки.Описание  = НСтр("ru = 'Итого по группе показателей:';
										|en = 'Итого по группе показателей:'", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаписьРасшифровки.Сумма     = РасчетГруппы.ЗначениеГруппы.Значение;
	
КонецПроцедуры

Функция ДобавитьЗаписьРасшифровкиГруппы(РасчетГруппы)
	
	Если Не ЗначениеЗаполнено(РасчетГруппы.РасшифровкаГруппы) Тогда
		ЗаписьРасшифровки = РасчетГруппы.ПроцессорЗаполнения.РасшифровкаЗаполненияОтчета.Добавить();
	Иначе
		КрайняяЗаписьРасшифровкиГруппы = РасчетГруппы.РасшифровкаГруппы[РасчетГруппы.РасшифровкаГруппы.ВГраница()];
		ИндексВставки = РасчетГруппы.ПроцессорЗаполнения.РасшифровкаЗаполненияОтчета.Индекс(КрайняяЗаписьРасшифровкиГруппы) + 1;
		ЗаписьРасшифровки = РасчетГруппы.ПроцессорЗаполнения.РасшифровкаЗаполненияОтчета.Вставить(ИндексВставки);
	КонецЕсли;
	
	РасчетГруппы.РасшифровкаГруппы.Добавить(ЗаписьРасшифровки);
	
	Возврат ЗаписьРасшифровки;

КонецФункции

Процедура ДобавитьОписаниеПоказателяОтчета(РасчетГруппы, Показатель)
	
	ПроцессорЗаполненияОтчета = РасчетГруппы.ПроцессорЗаполнения;
	ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	// Определяем суммовое значение
	ПротоколЗначенияПоказателя = ПроцессорЗаполненияОтчета.ЗначенияПоказателей.Строки.Найти(ИдентификаторПоказателя, "Показатель");
	
	Если ПротоколЗначенияПоказателя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗачетаПоказателя = ПроцессорЗаполненияОтчета.ЗачтенныеЗначенияПоказателей[ИдентификаторПоказателя];
	ЗаполненныеЗначенияЗачетаПоказателей = ЗаполненныеЗначенияЗачетаПоказателей(РезультатЗачетаПоказателя);
	
	Значение = 0;
	Если РезультатЗачетаПоказателя = Неопределено Тогда
		Значение = ПротоколЗначенияПоказателя.Значение;
	Иначе
		Значение = ЗначениеГруппыЗачетаПоказателей(ЗаполненныеЗначенияЗачетаПоказателей, РасчетГруппы.ИндексГруппы);
	КонецЕсли;
	
	НачатьОписаниеПоказателяОтчета(РасчетГруппы, Показатель, Значение);
	
	// - заголовок
	Если Не РасчетГруппы.СодержитЕдинственныйПоказатель Тогда
		ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(
			РасчетГруппы,
			"Заголовок",
			Показатель.Наименование);
	КонецЕсли;
	// - пояснение заполнения
	Если Не ПустаяСтрока(ПротоколЗначенияПоказателя.Описание) Тогда
		ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(
			РасчетГруппы,
			"ПорядокРасчета",
			ПротоколЗначенияПоказателя.Описание);
	КонецЕсли;
	Если Не ПустаяСтрока(ПротоколЗначенияПоказателя.Разъяснение) Тогда
		ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(
			РасчетГруппы,
			"Разъяснение",
			ПротоколЗначенияПоказателя.Разъяснение);
	КонецЕсли;
	// - слагаемые
	ДобавитьОписаниеСлагаемыхПоказателяОтчета(РасчетГруппы, ПротоколЗначенияПоказателя.Строки, 0);
	// - итоги
	Если Не ЗначениеЗаполнено(ЗаполненныеЗначенияЗачетаПоказателей) Тогда
		ШаблонТекста = НСтр("ru = 'Итого по показателю:';
							|en = 'Итого по показателю:'", ПроцессорЗаполненияОтчета.КодЯзыка);
		ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(РасчетГруппы, "Итог", ШаблонТекста, Значение);
	Иначе
		ШаблонТекста = НСтр("ru = '%1 %2 в строку %3';
							|en = '%1 %2 в строку %3'", ПроцессорЗаполненияОтчета.КодЯзыка); // <Что-то> <включено> в строку <такую-то>
		СловоВключено = НСтр("ru = 'включено';
							|en = 'включено'", ПроцессорЗаполненияОтчета.КодЯзыка);
		Если РезультатЗачетаПоказателя.ВозможныДваЗначения Тогда
			// множественное число: отдельные слагаемые включены в одни группы, другие - в другие
			СловоВключено = НСтр("ru = 'включены';
								|en = 'включены'", ПроцессорЗаполненияОтчета.КодЯзыка);
		КонецЕсли;
		Для Каждого КомпонентПоказателя Из ЗаполненныеЗначенияЗачетаПоказателей Цикл
			ПредставлениеГруппы = ПредставлениеГруппыПоказателей(
				ПроцессорЗаполненияОтчета.ЗаполняемыеПоказатели.ГруппыПоказателей[КомпонентПоказателя.ГруппаПоказателей],
				ПроцессорЗаполненияОтчета.ЗаполняемыеПоказатели);
			ОписаниеДействия = СтрШаблон(
				ШаблонТекста,
				ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(КомпонентПоказателя.Пояснение),
				СловоВключено,
				ПредставлениеГруппы);
			ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(РасчетГруппы, "Итог", ОписаниеДействия, КомпонентПоказателя.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьОписаниеПоказателяОтчета(РасчетГруппы, Показатель, Значение)
	
	РасчетГруппы.Показатель = Показатель;
	РасчетГруппы.ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
	
	// Дополняем информацию о группе
	РасчетГруппы.ЗначениеГруппы.Значение = РасчетГруппы.ЗначениеГруппы.Значение + Значение;
	
	Если РасчетГруппы.СодержитЕдинственныйПоказатель Тогда
		
		// Описание показателя содержится непосредственно в описании группы
		РасчетГруппы.ЗначениеПоказателя = РасчетГруппы.ЗначениеГруппы;
		
	Иначе
		
		// Дополняем информацию о группе: в расшифровке показываем, что группа содержит показатель
		ЗаписьРасшифровки = ДобавитьЗаписьРасшифровкиГруппы(РасчетГруппы);
		
		ЗаписьРасшифровки.ТипЗаписи         = "Показатель";
		ЗаписьРасшифровки.Описание          = Показатель.Наименование;
		ЗаписьРасшифровки.Сумма             = Значение;
		
		// Отдельно от описания группы будет описание показателя
		РасчетГруппы.ЗначениеПоказателя = РасчетГруппы.ЗначениеГруппы.Строки.Добавить();
		РасчетГруппы.ЗначениеПоказателя.Показатель = РасчетГруппы.ИдентификаторПоказателя;
		РасчетГруппы.ЗначениеПоказателя.Значение   = Значение;
		
	КонецЕсли;
	
	РасчетГруппы.ЗначенияПоказателей.Вставить(РасчетГруппы.ИдентификаторПоказателя, РасчетГруппы.ЗначениеПоказателя);
	
КонецПроцедуры

Функция ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(РасчетГруппы, ТипЗаписи, Описание, Сумма = 0, ПредметЗаписи = Неопределено, Отчет = Неопределено, Уровень = 0)
	
	Запись = РасчетГруппы.ПроцессорЗаполнения.РасшифровкаЗаполненияОтчета.Добавить();
	
	Запись.Уровень       = Уровень;
	Запись.ТипЗаписи     = ТипЗаписи;
	Запись.ПредметЗаписи = ПредметЗаписи;
	Запись.Описание      = Описание;
	Запись.Сумма         = Сумма;
	Если Отчет <> Неопределено Тогда
		Запись.Отчет = Отчет;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(РасчетГруппы.РасшифровкаПоказателей, РасчетГруппы.ИдентификаторПоказателя, Запись);
	
	Возврат Запись;
	
КонецФункции

Процедура ДобавитьОписаниеСлагаемыхПоказателяОтчета(РасчетГруппы, Слагаемые, Уровень)
	
	Для Каждого Слагаемое Из Слагаемые Цикл
		
		ВыводитьШагРасчета = Истина;
		Если Слагаемое.ТипЗаписи = "Организация" Тогда
			ВыводитьШагРасчета = РасчетГруппы.ПроцессорЗаполнения.ЕстьФилиалы;
		КонецЕсли;
		
		КоличествоПодчиненныхСлагаемых = Слагаемое.Строки.Количество();
		ВыводитьПодчиненныеСлагаемые = (КоличествоПодчиненныхСлагаемых > 1 И КоличествоПодчиненныхСлагаемых < ЛимитОбъектовРасшифровки())
			Или (КоличествоПодчиненныхСлагаемых = 1 И ЗначениеЗаполнено(Слагаемое.Строки[0].ПредметЗаписи));
		
		Если ВыводитьШагРасчета Тогда
			
			Значение = Слагаемое.Значение;
			
			ТипЗаписиРасшифровки = "Слагаемое";
			Если Уровень = 0 И Слагаемое.ТипЗаписи = "Организация" Тогда
				ТипЗаписиРасшифровки = "Организация";
			ИначеЕсли ВыводитьПодчиненныеСлагаемые Тогда
				ТипЗаписиРасшифровки = "ИерархияСлагаемых";
			КонецЕсли;
			
			ДобавитьЗаписьРасшифровкиЗаполненияПоказателя(
				РасчетГруппы,
				ТипЗаписиРасшифровки,
				Слагаемое.Описание,
				Значение,
				Слагаемое.ПредметЗаписи,
				Слагаемое.Отчет,
				Уровень);
		КонецЕсли;
		
		Если ВыводитьПодчиненныеСлагаемые Тогда
			ДобавитьОписаниеСлагаемыхПоказателяОтчета(РасчетГруппы, Слагаемое.Строки, Уровень + 1);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ЛимитОбъектовРасшифровки()
	Возврат 5000;
КонецФункции

Функция ПредставлениеГруппыПоказателей(ГруппаПоказателей, ЗаполняемыеПоказатели)
	
	НаименованиеГруппы = БухгалтерскаяОтчетностьБРО.НаименованиеГруппыПоказателей(ГруппаПоказателей, ЗаполняемыеПоказатели);
	
	Возврат СтрШаблон(НСтр("ru = '""%1"" (%2)';
							|en = '""%1"" (%2)'"), НаименованиеГруппы, ГруппаПоказателей.КодСтроки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КоллекцияЗаполняемыхЗначений

// Управляющая коллекция для лаконичного описания состава отчета на языке 1С.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйПроцессорОписанияЗаполняемыеПоказатели() // Здесь сокращается до ПроцессорОписания. В контекст составления описания - до Процессор
	
	Процессор = Новый Структура;
	
	Процессор.Вставить("Раздел", ""); // См. БухгалтерскаяОтчетностьБРО.РазделыОтчета
	Процессор.Вставить("ЗаполняемыеПоказатели"); // См. БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела
	Процессор.Вставить("НаименованияКодовСтрок", БухгалтерскаяОтчетностьБРО.НаименованияКодовСтрок());
	Процессор.Вставить("КонтекстЗаполнения"); // Определяется в ЗаполнениеБухгалтерскойОтчетностиПравила
	
	Возврат Процессор;
	
КонецФункции

Процедура ДетализироватьГруппыПоказателейПоУмолчанию(ЗаполняемыеПоказатели, Контекст)
	
	// См. ЗаполнениеБухгалтерскойОтчетностиПравила.ДетализироватьГруппуПоказателей
	
	Шаблоны  = Новый Соответствие;
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Для Каждого ДополняемаяГруппа Из ЗаполняемыеПоказатели.ГруппыПоказателей Цикл
		
		Если ДополняемаяГруппа.Показатель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОсновнойПоказатель = БухгалтерскаяОтчетностьБРО.Показатель(ДополняемаяГруппа.Показатель, ЗаполняемыеПоказатели);
		Шаблон = Шаблоны[ОсновнойПоказатель.Заполнение.Идентификатор];
		Если Шаблон = Неопределено Тогда
			
			Шаблон = НовыйШаблонДинамическойГруппы();
			ПрименимостьОбщегоШаблона = Новый Массив;
			
			ЗаполнениеБухгалтерскойОтчетностиПравила.ДетализироватьГруппуПоказателей(
				Шаблон,
				ПрименимостьОбщегоШаблона,
				ОсновнойПоказатель.Заполнение.Идентификатор,
				Контекст,
				КодЯзыка);
			
			Шаблоны.Вставить(ОсновнойПоказатель.Заполнение.Идентификатор, Шаблон);
			Для Каждого АлгоритмОбщегоШаблона Из ПрименимостьОбщегоШаблона Цикл
				Шаблоны.Вставить(АлгоритмОбщегоШаблона, Шаблон);
			КонецЦикла;
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Шаблон.ДетальныеПоказатели) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставитьГруппуВложеннымПоказателем(ДополняемаяГруппа, ОсновнойПоказатель);
		ОсновнойПоказатель.Наименование = Шаблон.НаименованиеОсновногоПоказателя;
		ОсновнойПоказатель.Вывод        = Ложь;
		
		Для Каждого ШаблонПоказателя Из Шаблон.ДетальныеПоказатели Цикл
			
			Показатель = ДобавитьПоказатель(
				ЗаполняемыеПоказатели,
				ШаблонПоказателя.Наименование,
				ОсновнойПоказатель.Заполнение.Идентификатор);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Показатель.Заполнение.Отбор, ШаблонПоказателя.Отбор);
			
			ПозицияПоказателя = Шаблон.ДетальныеПоказатели.Индекс(ШаблонПоказателя);
			ИдентификаторПоказателя = БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(Показатель);
			ДополняемаяГруппа.Состав.Вставить(ПозицияПоказателя, ИдентификаторПоказателя); // Основной оставляем последним
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйШаблонДинамическойГруппы()
	
	Шаблон = Новый Структура;
	
	Шаблон.Вставить("НаименованиеОсновногоПоказателя", "");
	
	Шаблон.Вставить("ДетальныеПоказатели", Новый ТаблицаЗначений);
	Шаблон.ДетальныеПоказатели.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Шаблон.ДетальныеПоказатели.Колонки.Добавить("Отбор",        Новый ОписаниеТипов("Структура"));
	
	Возврат Шаблон;
	
КонецФункции

Процедура ПредставитьГруппуВложеннымПоказателем(ГруппаПоказателей, Показатель)
	
	ГруппаПоказателей.Наименование = Показатель.Наименование;
	ГруппаПоказателей.Состав.Добавить(ГруппаПоказателей.Показатель);
	ГруппаПоказателей.Показатель = Неопределено;
	
КонецПроцедуры

// Определяет состав показателей в разрезе алгоритмов их заполнения.
//
// Параметры:
//  ЗаполняемыеПоказатели - БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела - описание структуры отчета (раздела отчета) и правил его заполнения
// 
// Возвращаемое значение:
//  Соответствие - бакет:
//    * Ключ - идентификатор алгоритма
//    * Значение - Массив из  БухгалтерскаяОтчетностьБРО.НовыйЗаполняемыеПоказателиРаздела.Показатели
//
Функция ПравилаПолученияДанных(ЗаполняемыеПоказатели)
	
	ПравилаПолученияДанных = Новый Соответствие;
	
	Для Каждого ОписаниеПоказателя Из ЗаполняемыеПоказатели.Показатели Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеПоказателя.Заполнение.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиентСервер.ДополнитьРазделенныйМассив(ПравилаПолученияДанных, ОписаниеПоказателя.Заполнение.Идентификатор, ОписаниеПоказателя);
		
	КонецЦикла;
	
	Возврат ПравилаПолученияДанных;
	
КонецФункции

Функция ОсновнойПоказатель(ПоказателиАлгоритма)
	
	Для Каждого ОписаниеПоказателя Из ПоказателиАлгоритма Цикл
		
		Если ЗначениеЗаполнено(ОписаниеПоказателя.Заполнение.Отбор) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат БухгалтерскаяОтчетностьБРО.ИдентификаторПоказателя(ОписаниеПоказателя);
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

#КонецОбласти

Процедура ПолучитьПереоопределяемыеСчета(ДанныеАлгоритма, ПравилаПолученияДанныхАлгоритма)
	
	ПереопределяемыеСчета = Неопределено;
	ПравилаПолученияДанныхАлгоритма.Значение[0].Заполнение.НастройкиАлгоритма.Свойство("Счета", ПереопределяемыеСчета);
	ДанныеАлгоритма.Вставить("ПереопределяемыеСчета", ПереопределяемыеСчета);
	
КонецПроцедуры

#КонецОбласти
