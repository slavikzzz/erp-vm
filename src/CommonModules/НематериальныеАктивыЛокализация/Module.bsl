////////////////////////////////////////////////////////////////////////////////
// Процедуры, используемые для локализации справочника "Нематериальные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Параметры - см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
Процедура ДополнитьПараметрыДляПроведенияДокумента(Параметры, Документ, Свойства) Экспорт
	
	//++ Локализация
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПараметрыЦелевогоФинансированияНМА);
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

// Процедура формирования движений по подчиненным регистрам нематериальных активов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ПараметрыЦелевогоФинансированияНМА");
	//-- Локализация
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам нематериальных активов.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика справочника
//
// Параметры:
//  Объект - СправочникОбъект.НематериальныеАктивы - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт

	//++ Локализация
	
	Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
		Объект.ВидНМА = Перечисления.ВидыНМА.ПустаяСсылка();
		Объект.АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НМА1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НМА1",
			НСтр("ru = 'Карточка учета НМА (НМА-1)';
				|en = 'IA (IA-1) record card'"),
			ПечатьНМА1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	
	Команда = Документы.ПринятиеКУчетуНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеНМА.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Документы.ПринятиеКУчетуНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.ИзменениеПараметровНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	Команда = Документы.СписаниеНМАМеждународныйУчет.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		Команда.РежимЗаписи = "";
	КонецЕсли;
	
	//-- НЕ УТКА
	
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//++ Локализация
	
	Команда = Отчеты.ВедомостьПоНМА2_4.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	Команда = Отчеты.СправкаРасчетАмортизацииНМА2_4.ДобавитьКомандуОтчетаПоНМА(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаСоСведениями";
	КонецЕсли;
	
	//++ НЕ УТКА
	
	Команда = Отчеты.КарточкаНМАМеждународныйУчет.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если Команда <> Неопределено Тогда
		Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Команда = Отчеты.СравнениеНМА.ДобавитьКомандуОтчета(КомандыОтчетов);
		Если Команда <> Неопределено Тогда
			Команда.ВидимостьВФормах = "ФормаЭлемента, ФормаСпискаМФУ";
		КонецЕсли;
	КонецЕсли;
	
	//-- НЕ УТКА
	
	//-- Локализация
	
КонецПроцедуры

// Добавляет команды печати.
// 
// Параметры:
// 	КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4()
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.СтоимостьНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.АмортизацияНМА) Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "НМА1";
		КомандаПечати.Представление = НСтр("ru = 'Карточка учета НМА (НМА-1)';
											|en = 'IA (IA-1) record card'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
		КомандаПечати.СписокФорм = "ФормаЭлемента,ФормаСпискаСоСведениями";
		
		УправлениеПечатью.ДобавитьУсловиеВидимостиКоманды(
			КомандаПечати, 
			"ВидОбъектаУчета", 
			Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЭлемента

Процедура УстановитьВидимостьКомандВводаНаОсновании(Форма, ТаблицаКоманд) Экспорт

	//++ Локализация
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ПолучитьФункциональнуюОпцию("ОтображатьВнеоборотныеАктивы2_2") Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Организация = ВнеоборотныеАктивыЛокализация.ОрганизацияВКоторойНМАПринятКУчету(Объект.Ссылка);
			ПринятКУчету = ЗначениеЗаполнено(Организация);
			//++ НЕ УТКА
			Организация = МеждународныйУчетВнеоборотныеАктивы.ОрганизацияВКоторойНМАПринятКУчету(Объект.Ссылка);
			ПринятКЧетуМФУ = ЗначениеЗаполнено(Организация);
			//-- НЕ УТКА
		Иначе
			ПринятКУчету = Ложь;
			ПринятКЧетуМФУ = Ложь;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ПринятиеКУчетуНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = НЕ ПринятКУчету;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ИзменениеПараметровНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКУчету;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.СписаниеНМА", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКУчету;
		КонецЕсли;
		
		//++ НЕ УТКА
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ПринятиеКУчетуНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = НЕ ПринятКЧетуМФУ;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.ИзменениеПараметровНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКЧетуМФУ;
		КонецЕсли;
		
		ТекСтрока = ТаблицаКоманд.Найти("Документ.СписаниеНМАМеждународныйУчет", "Менеджер");
		Если ТекСтрока <> Неопределено Тогда
			Элементы[ТекСтрока.ИмяВФорме].Видимость = ПринятКЧетуМФУ;
		КонецЕсли;
		//-- НЕ УТКА
	
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбУчете(Форма, СведенияОбУчете, ПредставлениеСведений) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	
	Форма.ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
	
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияПринятКУчету2, ПредставлениеСведений.СведенияПринятКУчету2);
	ВнеоборотныеАктивыКлиентСервер.ЗаполнитьСведенияЭлемента(Элементы.СведенияСрокИспользования2, ПредставлениеСведений.СведенияСрокИспользования2);
	
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
	
	Если ВалютаУпр <> ВалютаРегл Тогда
		Элементы.ДекорацияЗаголовокНУ.Заголовок = СтрШаблон(НСтр("ru = 'НУ (%1):';
																|en = 'TA (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокПР.Заголовок = СтрШаблон(НСтр("ru = 'ПР (%1):';
																|en = 'PD (%1):'"), Строка(ВалютаРегл));
		Элементы.ДекорацияЗаголовокВР.Заголовок = СтрШаблон(НСтр("ru = 'ВР (%1):';
																|en = 'TD (%1):'"), Строка(ВалютаРегл));
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаполнитьСтоимостьИАмортизацию(Форма, СтоимостьИАмортизация) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Форма.ВосстановительнаяСтоимостьБУ   = СтоимостьИАмортизация.СтоимостьРегл;
	Форма.ВосстановительнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ;
	Форма.ВосстановительнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР;
	Форма.ВосстановительнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ;
	Форма.ВосстановительнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ;
	Форма.ВосстановительнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ;
	Форма.ВосстановительнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР;
	Форма.ВосстановительнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ;
	
	Форма.НакопленнаяАмортизацияБУ   = СтоимостьИАмортизация.АмортизацияРегл;
	Форма.НакопленнаяАмортизацияБУЦФ = СтоимостьИАмортизация.АмортизацияЦФ;
	Форма.НакопленнаяАмортизацияВР   = СтоимостьИАмортизация.АмортизацияВР;
	Форма.НакопленнаяАмортизацияВРЦФ = СтоимостьИАмортизация.АмортизацияВРЦФ;
	Форма.НакопленнаяАмортизацияНУ   = СтоимостьИАмортизация.АмортизацияНУ;
	Форма.НакопленнаяАмортизацияНУЦФ = СтоимостьИАмортизация.АмортизацияНУЦФ;
	Форма.НакопленнаяАмортизацияПР   = СтоимостьИАмортизация.АмортизацияПР;
	Форма.НакопленнаяАмортизацияПРЦФ = СтоимостьИАмортизация.АмортизацияПРЦФ;
	
	Форма.ОстаточнаяСтоимостьБУ   = СтоимостьИАмортизация.СтоимостьРегл - СтоимостьИАмортизация.АмортизацияРегл;
	Форма.ОстаточнаяСтоимостьБУЦФ = СтоимостьИАмортизация.СтоимостьЦФ   - СтоимостьИАмортизация.АмортизацияЦФ;
	Форма.ОстаточнаяСтоимостьВР   = СтоимостьИАмортизация.СтоимостьВР   - СтоимостьИАмортизация.АмортизацияВР;
	Форма.ОстаточнаяСтоимостьВРЦФ = СтоимостьИАмортизация.СтоимостьВРЦФ - СтоимостьИАмортизация.АмортизацияВРЦФ;
	Форма.ОстаточнаяСтоимостьНУ   = СтоимостьИАмортизация.СтоимостьНУ   - СтоимостьИАмортизация.АмортизацияНУ;
	Форма.ОстаточнаяСтоимостьНУЦФ = СтоимостьИАмортизация.СтоимостьНУЦФ - СтоимостьИАмортизация.АмортизацияНУЦФ;
	Форма.ОстаточнаяСтоимостьПР   = СтоимостьИАмортизация.СтоимостьПР   - СтоимостьИАмортизация.АмортизацияПР;
	Форма.ОстаточнаяСтоимостьПРЦФ = СтоимостьИАмортизация.СтоимостьПРЦФ - СтоимостьИАмортизация.АмортизацияПРЦФ;
	
	Если НЕ Форма.ПлательщикНалогаНаПрибыль Тогда
		Элементы.ВосстановительнаяСтоимостьНУ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПР.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВР.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияНУ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПР.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияВР.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьНУ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПР.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВР.Видимость          = Ложь;
		Элементы.ДекорацияЗаголовокНУ.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокВР.Видимость           = Ложь;
		Элементы.ДекорацияЗаголовокПР.Видимость           = Ложь;
	КонецЕсли; 
	
	Если СтоимостьИАмортизация.СтоимостьЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.СтоимостьПРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияВРЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияНУЦФ <> 0
		ИЛИ СтоимостьИАмортизация.АмортизацияПРЦФ <> 0 Тогда
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:';
																		|en = 'Own funds:'");
		Элементы.ГруппаОбесценениеЗаголовок.Заголовок    = НСтр("ru = 'Собственные средства:';
																|en = 'Own funds:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Истина;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Истина;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Истина;
		Элементы.ГруппаОбесценение.ОтображатьЗаголовок             = Истина;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Истина;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Истина;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Истина;
		
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Истина;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Истина;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Истина;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = Форма.ПлательщикНалогаНаПрибыль;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = Форма.ПлательщикНалогаНаПрибыль;
		
	Иначе
		
		Если Объект.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Первоначальная стоимость:';
																			|en = 'Initial cost:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Погашенная стоимость:';
																			|en = 'Repaid cost:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:';
																			|en = 'Net book value:'");
		Иначе
			Элементы.ГруппаТекущаяСтоимостьЗаголовок.Заголовок       = НСтр("ru = 'Восстановительная стоимость:';
																			|en = 'Replacement cost:'");
			Элементы.ГруппаНакопленнаяАмортизацияЗаголовок.Заголовок = НСтр("ru = 'Накопленная амортизация:';
																			|en = 'Accumulated depreciation:'");
			Элементы.ГруппаОстаточнаяСтоимостьЗаголовок.Заголовок    = НСтр("ru = 'Остаточная стоимость:';
																			|en = 'Net book value:'");
		КонецЕсли; 
		
		Элементы.ГруппаОбесценениеЗаголовок.Заголовок    = НСтр("ru = 'Обесценение:';
																|en = 'Impairment:'");
		
		Элементы.ГруппаТекущаяСтоимость.ОтображатьЗаголовок        = Ложь;
		Элементы.ГруппаНакопленнаяАмортизация.ОтображатьЗаголовок  = Ложь;
		Элементы.ГруппаОстаточнаяСтоимость.ОтображатьЗаголовок     = Ложь;
		
		Элементы.ГруппаТекущаяСтоимостьЗаголовокЦФ.Видимость       = Ложь;
		Элементы.ГруппаНакопленнаяАмортизацияЗаголовокЦФ.Видимость = Ложь;
		Элементы.ГруппаОстаточнаяСтоимостьЗаголовокЦФ.Видимость    = Ложь;
		
		Элементы.ВосстановительнаяСтоимостьБУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьНУЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьПРЦФ.Видимость   = Ложь;
		Элементы.ВосстановительнаяСтоимостьВРЦФ.Видимость   = Ложь;
		Элементы.НакопленнаяАмортизацияВРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияПРЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияНУЦФ.Видимость       = Ложь;
		Элементы.НакопленнаяАмортизацияБУЦФ.Видимость       = Ложь;
		Элементы.ОстаточнаяСтоимостьБУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьНУЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьПРЦФ.Видимость          = Ложь;
		Элементы.ОстаточнаяСтоимостьВРЦФ.Видимость          = Ложь;
		
	КонецЕсли; 
	
	Форма.ОбесценениеБУ   = СтоимостьИАмортизация.ОбесценениеРегл;
	Форма.ОбесценениеУУ   = СтоимостьИАмортизация.ОбесценениеУпр;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт

	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

Процедура НастроитьЗависимыеЭлементыФормы(Форма, СтруктураИзмененныхРеквизитов) Экспорт

	//++ Локализация
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("КодОКВЭД2")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.КодОКВЭД2РасширеннаяПодсказка.Заголовок =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД2, "Наименование");
		
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры
 
#КонецОбласти

#Область ФормаСписка

Процедура ДополнитьСведения2_4(ВнеоборотныйАктив, СведенияОбУчете, СтоимостьИАмортизация, МассивСумм, Сведения2_4) Экспорт

	//++ Локализация
	
	Если СведенияОбУчете <> Неопределено Тогда
		ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СведенияОбУчете.Организация, ТекущаяДатаСеанса());
		ВалютаРегл = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СведенияОбУчете.Организация);
	Иначе
		ПлательщикНалогаНаПрибыль = Ложь;
		ВалютаРегл = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	КонецЕсли; 
	
	// БУ
	ДанныеУчета = Новый Структура;
	ДанныеУчета.Вставить("Учет", "БУ");
	ДанныеУчета.Вставить("Валюта", ВалютаРегл);
	ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл + СтоимостьИАмортизация.СтоимостьЦФ);
	ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияРегл + СтоимостьИАмортизация.АмортизацияЦФ);
	ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьРегл 
													+ СтоимостьИАмортизация.СтоимостьЦФ
													- СтоимостьИАмортизация.АмортизацияРегл
													- СтоимостьИАмортизация.АмортизацияЦФ);
	МассивСумм.Добавить(ДанныеУчета);
	
	Если ПлательщикНалогаНаПрибыль Тогда
		
		// НУ
		ДанныеУчета = Новый Структура;
		ДанныеУчета.Вставить("Учет", "НУ");
		ДанныеУчета.Вставить("Валюта", ВалютаРегл);
		ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ + СтоимостьИАмортизация.СтоимостьНУЦФ);
		ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияНУ + СтоимостьИАмортизация.АмортизацияНУЦФ);
		
		ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьНУ 
														+ СтоимостьИАмортизация.СтоимостьНУЦФ 
														- СтоимостьИАмортизация.АмортизацияНУ 
														- СтоимостьИАмортизация.АмортизацияНУЦФ);
		МассивСумм.Добавить(ДанныеУчета);
		
		Если ПолучитьФункциональнуюОпцию("ВедетсяУчетПостоянныхИВременныхРазниц") Тогда
			
			// ПР
			ДанныеУчета = Новый Структура;
			ДанныеУчета.Вставить("Учет", "ПР");
			ДанныеУчета.Вставить("Валюта", ВалютаРегл);
			ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР + СтоимостьИАмортизация.СтоимостьПРЦФ);
			ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияПР + СтоимостьИАмортизация.АмортизацияПРЦФ);
			
			ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьПР 
															+ СтоимостьИАмортизация.СтоимостьПРЦФ 
															- СтоимостьИАмортизация.АмортизацияПР 
															- СтоимостьИАмортизация.АмортизацияПРЦФ);
			МассивСумм.Добавить(ДанныеУчета);
			
			// ВР
			ДанныеУчета = Новый Структура;
			ДанныеУчета.Вставить("Учет", "ВР");
			ДанныеУчета.Вставить("Валюта", ВалютаРегл);
			ДанныеУчета.Вставить("ВосстановительнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР + СтоимостьИАмортизация.СтоимостьВРЦФ);
			ДанныеУчета.Вставить("НакопленнаяАмортизация", СтоимостьИАмортизация.АмортизацияВР + СтоимостьИАмортизация.АмортизацияВРЦФ);
			ДанныеУчета.Вставить("ОстаточнаяСтоимость", СтоимостьИАмортизация.СтоимостьВР 
															+ СтоимостьИАмортизация.СтоимостьВРЦФ 
															- СтоимостьИАмортизация.АмортизацияВР 
															- СтоимостьИАмортизация.АмортизацияВРЦФ);
			МассивСумм.Добавить(ДанныеУчета);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВнеоборотныйАктив, "ВидОбъектаУчета,АмортизационнаяГруппа");
	Если ЗначениеЗаполнено(РеквизитыОбъекта.АмортизационнаяГруппа) Тогда
		ТекстСтроки = СтрШаблон(НСтр("ru = 'Амортизационная группа: %1';
									|en = 'Depreciation group: %1'"), РеквизитыОбъекта.АмортизационнаяГруппа);
		СведенияАмортизационнаяГруппа = Новый ФорматированнаяСтрока(ТекстСтроки);
		Сведения2_4.Вставить("СведенияАмортизационнаяГруппа", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияАмортизационнаяГруппа));
	Иначе
		Сведения2_4.Вставить("СведенияАмортизационнаяГруппа", Неопределено);
	КонецЕсли; 
	
	//-- Локализация
	
КонецПроцедуры

Функция ПолучитьСведения2_2(ВнеоборотныйАктив) Экспорт
	
	Сведения2_2 = Новый Массив;
	
	//++ Локализация
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("СтоимостьБУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьНУ", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьПР", 0);
	ЗначенияПоУмолчанию.Вставить("СтоимостьВР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияБУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияНУ", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияПР", 0);
	ЗначенияПоУмолчанию.Вставить("АмортизацияВР", 0);
	ЗначенияПоУмолчанию.Вставить("ЭтоНИОКР", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВнеоборотныйАктив", ВнеоборотныйАктив);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК ОбъектУчета,
	|	ПорядокУчетаНМА.СчетУчета КАК СчетУчета,
	|	ПорядокУчетаНМА.СчетНачисленияАмортизации КАК СчетАмортизации,
	|	ЕСТЬNULL(ПараметрыЦелевогоФинансирования.ПрименениеЦелевогоФинансирования, ЛОЖЬ) КАК ПрименениеЦелевогоФинансирования,
	|	ПараметрыЦелевогоФинансирования.СчетУчета КАК СчетУчетаЦФ,
	|	ПараметрыЦелевогоФинансирования.СчетАмортизации КАК СчетАмортизацииЦФ,
	|	ВЫБОР
	|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНИОКР,
	|	ЕСТЬNULL(МестоУчетаНМА.Организация, Значение(Справочник.Организации.ПустаяСсылка)) КАК Организация
	|ПОМЕСТИТЬ втАктивыИСчетаУчета
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК МестоУчетаНМА
	|		ПО НематериальныеАктивы.Ссылка = МестоУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК ПорядокУчетаНМА
	|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаНМА.НематериальныйАктив
	|			И МестоУчетаНМА.Организация = ПорядокУчетаНМА.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЦелевогоФинансированияНМА.СрезПоследних(, НематериальныйАктив = &ВнеоборотныйАктив) КАК ПараметрыЦелевогоФинансирования
	|		ПО НематериальныеАктивы.Ссылка = ПараметрыЦелевогоФинансирования.НематериальныйАктив
	|ГДЕ
	|	НематериальныеАктивы.Ссылка = &ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчета КАК Счет
	|ПОМЕСТИТЬ втСчетаОстатков
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизации
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетУчетаЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктивыИСчетаУчета.СчетАмортизацииЦФ
	|ИЗ
	|	втАктивыИСчетаУчета КАК АктивыИСчетаУчета
	|ГДЕ
	|	АктивыИСчетаУчета.ПрименениеЦелевогоФинансирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОбъектУчета,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПР,
	|	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВР
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					Т.Счет
	|				ИЗ
	|					втСчетаОстатков КАК Т),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Субконто1 В (&ВнеоборотныйАктив)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Стоимость.СуммаБУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаБУ, 0) КАК СтоимостьБУ,
	|	ЕСТЬNULL(Стоимость.СуммаНУ, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаНУ, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(Стоимость.СуммаВР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР, 0) КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР + СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ (ЕСТЬNULL(Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаПР, 0)) / (ЕСТЬNULL(Стоимость.СуммаВР + Стоимость.СуммаПР, 0) + ЕСТЬNULL(СтоимостьЦФ.СуммаВР + СтоимостьЦФ.СуммаПР, 0))
	|	КОНЕЦ КАК ДоляПР,
	|	ЕСТЬNULL(-Амортизация.СуммаБУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаБУ, 0) КАК АмортизацияБУ,
	|	ЕСТЬNULL(-Амортизация.СуммаНУ, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(-Амортизация.СуммаПР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(-Амортизация.СуммаВР, 0) + ЕСТЬNULL(-АмортизацияЦФ.СуммаВР, 0) КАК АмортизацияВР,
	|	втАктивыИСчетаУчета.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
	|	втАктивыИСчетаУчета.Организация КАК Организация
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	втАктивыИСчетаУчета КАК втАктивыИСчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(, НематериальныйАктив В (&ВнеоборотныйАктив)) КАК ПервоначальныеСведенияНМА
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = ПервоначальныеСведенияНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Стоимость
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Стоимость.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчета = Стоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК Амортизация
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = Амортизация.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизации = Амортизация.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК СтоимостьЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = СтоимостьЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетУчетаЦФ = СтоимостьЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК АмортизацияЦФ
	|		ПО втАктивыИСчетаУчета.ОбъектУчета = АмортизацияЦФ.ОбъектУчета
	|			И втАктивыИСчетаУчета.СчетАмортизацииЦФ = АмортизацияЦФ.Счет
	|			И (втАктивыИСчетаУчета.ПрименениеЦелевогоФинансирования)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ЭтоНИОКР КАК ЭтоНИОКР,
	|	ВременнаяТаблица.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьБУ
	|	КОНЕЦ КАК СтоимостьБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|				И ВременнаяТаблица.СтоимостьБУ = ВременнаяТаблица.СтоимостьНУ
	|			ТОГДА 0
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА (ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ) * (1 - ВременнаяТаблица.СтоимостьПР / (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ))
	|		ИНАЧЕ ВременнаяТаблица.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.СтоимостьБУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияБУ
	|	КОНЕЦ КАК АмортизацияБУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - ВременнаяТаблица.СтоимостьНУ
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияНУ
	|	КОНЕЦ КАК АмортизацияНУ,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(31,2))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияПР
	|	КОНЕЦ КАК АмортизацияПР,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.ЭтоНИОКР
	|			ТОГДА ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ) - (ВЫРАЗИТЬ((ВременнаяТаблица.ПервоначальнаяСтоимостьБУ - ВременнаяТаблица.ПервоначальнаяСтоимостьНУ - (ВременнаяТаблица.СтоимостьБУ - ВременнаяТаблица.СтоимостьНУ)) * ВременнаяТаблица.ДоляПР КАК ЧИСЛО(31,2)))
	|		ИНАЧЕ ВременнаяТаблица.АмортизацияВР
	|	КОНЕЦ КАК АмортизацияВР
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчанию, Выборка);
	КонецЕсли;
	
	ЗаголовокВалюты = Строка(ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
	
	Поля = "Представление, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР";
	
	Заголовок = НСтр("ru = 'Восстановительная стоимость (%1):';
					|en = 'Replacement cost (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru = 'Первоначальная стоимость (%1):';
						|en = 'Initial cost (%1):'");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР;
	Сведения2_2.Добавить(Строка);
	
	Заголовок = НСтр("ru = 'Накопленная амортизация (%1):';
					|en = 'Accumulated depreciation (%1):'");
	Если ЗначенияПоУмолчанию.ЭтоНИОКР Тогда
		Заголовок = НСтр("ru = 'Погашенная стоимость (%1):';
						|en = 'Repaid cost (%1): '");
	КонецЕсли;
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.АмортизацияВР;
	Сведения2_2.Добавить(Строка);
	
	Заголовок = НСтр("ru = 'Остаточная стоимость (%1):';
					|en = 'Depreciated cost (%1):'");
	Строка = Новый Структура(Поля);
	Строка.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок, ЗаголовокВалюты);
	Строка.СуммаБУ = ЗначенияПоУмолчанию.СтоимостьБУ-ЗначенияПоУмолчанию.АмортизацияБУ;
	Строка.СуммаНУ = ЗначенияПоУмолчанию.СтоимостьНУ-ЗначенияПоУмолчанию.АмортизацияНУ;
	Строка.СуммаПР = ЗначенияПоУмолчанию.СтоимостьПР-ЗначенияПоУмолчанию.АмортизацияПР;
	Строка.СуммаВР = ЗначенияПоУмолчанию.СтоимостьВР-ЗначенияПоУмолчанию.АмортизацияВР;
	Сведения2_2.Добавить(Строка);
	
	//-- Локализация
	
	Возврат Сведения2_2;
	
КонецФункции
 
#КонецОбласти

#Область Прочее

Функция ЕстьПраваНаЧтениеСведений() Экспорт

	//++ Локализация
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеЗапросаДляВыбора(Параметры, УстановитьВсеОтборы = Ложь) Экспорт

	ОписаниеЗапросаДляВыбора = Неопределено;
	
	//++ Локализация
	
	ДоступныеКонтексты = Новый Структура("БУ,УУ"); // По умолчанию доступны все контексты.
	Если Параметры.Свойство("Контекст") Тогда
		ДоступныеКонтексты = Новый Структура(Параметры.Контекст);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		ОтборСписка = Параметры.Отбор;
	Иначе
		ОтборСписка = Новый Структура;
	КонецЕсли;
	
	Если ОтборСписка.Свойство("ОтражатьВРеглУчете")
		И НЕ ОтборСписка.ОтражатьВРеглУчете
		И ДоступныеКонтексты.Свойство("БУ") Тогда
		ДоступныеКонтексты.Удалить("БУ"); // Доступен выбор отражения в учете и в регл. учете нет отражения.
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("ОтражатьВУпрУчете")
		И НЕ ОтборСписка.ОтражатьВУпрУчете
		И ДоступныеКонтексты.Свойство("УУ") Тогда
		ДоступныеКонтексты.Удалить("УУ"); // Доступен выбор отражения в учете и в упр. учете нет отражения.
	КонецЕсли; 
	
	Если Параметры.Свойство("ВариантПримененияЦелевогоФинансирования")
		И Параметры.ВариантПримененияЦелевогоФинансирования = Перечисления.ВариантыПримененияЦелевогоФинансирования.НеИспользуется Тогда
		ОтборСписка.Удалить("НаправлениеДеятельности");
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА) Тогда
		ОтборСписка.Удалить("Подразделение");
		ОтборСписка.Удалить("Организация");
	КонецЕсли;
	
	Если ОтборСписка.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Организация) Тогда
		ОтборСписка.Удалить("Организация");
	КонецЕсли; 
	
	Если ОтборСписка.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(ОтборСписка.Подразделение) Тогда
		ОтборСписка.Удалить("Подразделение");
	КонецЕсли; 
	
	ДополнительныеПоля = "";
	ТекстСоединения = "";
	ТекстОтборы = "";
	ПараметрыЗапроса = Новый Структура;
	ДоступныеПоля = Новый Массив;
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМА) Тогда
		
		ПолеОрганизация = "ЕСТЬNULL(МестоУчетаНМА.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
		ПолеПодразделение = "ЕСТЬNULL(МестоУчетаНМА.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))";
		ПолеГФУ = "ЕСТЬNULL(ПорядокУчетаНМА.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка))";
		
	Иначе
		
		ПолеОрганизация = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		ПолеПодразделение = "ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)";
		ПолеГФУ = "ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаВнеоборотныхАктивов.ПустаяСсылка)";
		
	КонецЕсли; 
	
	Если (ДоступныеКонтексты.Свойство("БУ") ИЛИ ДоступныеКонтексты.Свойство("УУ"))
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.МестоУчетаНМА)
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМА) Тогда
		
		ПолеДатаПринятияКУчетуРегл = 
			"ВЫБОР 
			|	КОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
			|			И (ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <= ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуНУ, ДАТАВРЕМЯ(1, 1, 1))
			|				ИЛИ ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуНУ, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1))
			|		ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1))
			|	ИНАЧЕ ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуНУ, ДАТАВРЕМЯ(1, 1, 1))
			|КОНЕЦ";
		ПолеДатаПринятияКУчетуУпр = "ЕСТЬNULL(ПервоначальныеСведенияНМА.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1))";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ) КАК ПервоначальныеСведенияНМА
		|		ПО ПервоначальныеСведенияНМА.Организация = МестоУчетаНМА.Организация
		|			И ПервоначальныеСведенияНМА.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив";
		
	Иначе
		ПолеДатаПринятияКУчетуРегл = "ДАТАВРЕМЯ(1, 1, 1)";
		ПолеДатаПринятияКУчетуУпр = "ДАТАВРЕМЯ(1, 1, 1)";
	КонецЕсли;
	
	ДополнительныеПоля = ДополнительныеПоля + "
		|,%1 КАК Организация
		|,%2 КАК Подразделение
		|,%3 КАК ГруппаФинансовогоУчета
		|,%4 КАК ДатаПринятияКУчетуРегл
		|,%5 КАК ДатаПринятияКУчетуУпр";
	
	ДополнительныеПоля = СтрШаблон(
		ДополнительныеПоля, 
		ПолеОрганизация, 
		ПолеПодразделение, 
		ПолеГФУ,
		ПолеДатаПринятияКУчетуРегл,
		ПолеДатаПринятияКУчетуУпр);
		
	Если ДоступныеКонтексты.Свойство("БУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		
		ДоступныеПоля.Добавить("СостояниеБУ");
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ВЫБОР 
			|	КОГДА СправочникНематериальныеАктивы.ЭтоГруппа 
			|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка)
			|	КОГДА ПорядокУчетаНМАБУ.СостояниеБУ <> ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка)
			|		ТОГДА ПорядокУчетаНМАБУ.СостояниеБУ
			|	ИНАЧЕ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету))
			|	КОНЕЦ КАК СостояниеБУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ) КАК ПорядокУчетаНМАБУ
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПорядокУчетаНМАБУ.НематериальныйАктив
		|			И ПорядокУчетаНМАБУ.Организация = МестоУчетаНМА.Организация";
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету) КАК СостояниеБУ";
		
	КонецЕсли; 
	
	Если ДоступныеКонтексты.Свойство("УУ")
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) Тогда
		
		ДополнительныеПоля = ДополнительныеПоля + "
			|,ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУУ";
		
		ТекстСоединения = ТекстСоединения + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ) КАК ПорядокУчетаНМАУУ
		|		ПО СправочникНематериальныеАктивы.Ссылка = ПорядокУчетаНМАУУ.НематериальныйАктив
		|			И ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация";
		
	Иначе
		
		ДополнительныеПоля = ДополнительныеПоля + ",ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету) КАК СостояниеУУ";
		
	КонецЕсли;
	
	ДоступенВыборУчета = (ОтборСписка.Свойство("ОтражатьВРеглУчете") ИЛИ ОтборСписка.Свойство("ОтражатьВУпрУчете"));
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
	
		Если ОтборСписка.Свойство("Состояние") Тогда
			
			Если Параметры.Свойство("ОтражатьВБУ") Тогда
				ОтражатьВБУ = Параметры.ОтражатьВБУ;
			ИначеЕсли ОтборСписка.Свойство("ОтражатьВРеглУчете") Тогда
				ОтражатьВБУ = ОтборСписка.ОтражатьВРеглУчете;
			Иначе
				ОтражатьВБУ = Ложь;
			КонецЕсли;
			
			Если Параметры.Свойство("ОтражатьВНУ") Тогда
				ОтражатьВНУ = Параметры.ОтражатьВНУ;
			ИначеЕсли ОтборСписка.Свойство("ОтражатьВРеглУчете") Тогда
				ОтражатьВНУ = ОтборСписка.ОтражатьВРеглУчете;
			Иначе
				ОтражатьВНУ = Ложь;
			КонецЕсли;
			
			Если ОтборСписка.Свойство("ОтражатьВУпрУчете") Тогда
				ОтражатьВУпрУчете = ОтборСписка.ОтражатьВУпрУчете;
			Иначе
				ОтражатьВУпрУчете = Ложь;
			КонецЕсли;
			
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				Если ДоступенВыборУчета Тогда
					
					Если ОтражатьВУпрУчете Тогда
						ТекстУсловия = ТекстУсловия 
						+ ?(ТекстУсловия <> "", " И ", "") + " ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
					КонецЕсли;

					Если ОтражатьВБУ И ОтражатьВНУ И НЕ Параметры.Свойство("ОтражатьВНУ") Тогда
						ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)
							|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние))";
					
					Иначе
						
						Если ОтражатьВБУ Тогда
							ТекстУсловия = 
							"	ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
						КонецЕсли;
						Если ОтражатьВНУ Тогда
							ТекстУсловия = ТекстУсловия 
							+ ?(ТекстУсловия <> "", " И ", "") + " ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ТекстУсловия = 
					"	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние))";
					
				КонецЕсли; 
			
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				Если ДоступенВыборУчета Тогда
					
					Если ОтражатьВБУ И ОтражатьВНУ И НЕ Параметры.Свойство("ОтражатьВНУ") Тогда
						
						ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)
							|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние))";
					
					Иначе
					
						Если ОтражатьВБУ Тогда
							ТекстУсловия = ТекстУсловия
							+ ?(ТекстУсловия <> "", " И ", "")
							+ "	ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
						КонецЕсли;
						
						Если ОтражатьВНУ Тогда
							ТекстУсловия = ТекстУсловия 
							+ ?(ТекстУсловия <> "", " И ", "")
							+ " ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
						КонецЕсли;
						
					КонецЕсли;
						
				Иначе
					
					ТекстУсловия = 
					"	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)
					|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние))";
					
				КонецЕсли;
			
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = 
				"ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В(&Состояние)";
				
			КонецЕсли;
			
			Если ТипЗнч(ОтборСписка.Состояние) = Тип("ФиксированныйМассив") Тогда
				ПараметрыЗапроса.Вставить("Состояние", Новый Массив(ОтборСписка.Состояние));
			Иначе
				ПараметрыЗапроса.Вставить("Состояние", ОтборСписка.Состояние);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыЗапроса.Состояние) = Тип("Массив") Тогда
				
				Если ПараметрыЗапроса.Состояние.Найти(Перечисления.СостоянияНМА.НеПринятКУчету) <> Неопределено
					И ПараметрыЗапроса.Состояние.Найти(Перечисления.СостоянияНМА.ПустаяСсылка()) = Неопределено Тогда
					ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияНМА.ПустаяСсылка());
				КонецЕсли;
			
			ИначеЕсли ПараметрыЗапроса.Состояние = Перечисления.СостоянияНМА.НеПринятКУчету Тогда
				
				ПараметрыЗапроса.Состояние = Новый Массив;
				ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияНМА.ПустаяСсылка());
				ПараметрыЗапроса.Состояние.Добавить(Перечисления.СостоянияНМА.НеПринятКУчету);
			
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;
			
			Параметры.Отбор.Удалить("Состояние");
			
		Иначе
			
			ТекстУсловия = "";
			
			Если ДоступныеКонтексты.Свойство("БУ") И ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("БУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ ЕСТЬNULL(ПорядокУчетаНМАБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка))";
				
			ИначеЕсли ДоступныеКонтексты.Свойство("УУ") Тогда
				
				ТекстУсловия = "
				|	(ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) = &Состояние
				|		ИЛИ &Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПустаяСсылка))";
				
			КонецЕсли;
			
			Если ТекстУсловия <> "" Тогда
				ПараметрыЗапроса.Вставить("Состояние", Перечисления.СостоянияНМА.ПустаяСсылка());
				ВнеоборотныеАктивыСлужебный.ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстановитьВсеОтборы Тогда
		
		Для каждого КлючИЗначение Из ОтборСписка Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "Организация" Тогда
				ПутьКПолю = ПолеОрганизация;
			ИначеЕсли КлючИЗначение.Ключ = "Подразделение" Тогда
				ПутьКПолю = ПолеПодразделение;
			ИначеЕсли КлючИЗначение.Ключ = "НаправлениеДеятельности" Тогда
				ПутьКПолю = "ЕСТЬNULL(ПорядокУчетаНМА.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))";
			ИначеЕсли КлючИЗначение.Ключ = "ВидОбъектаУчета" Тогда
				
				ПутьКПолю = "СправочникНематериальныеАктивы." + КлючИЗначение.Ключ;
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЭтоМассив = ТипЗнч(КлючИЗначение.Значение) = Тип("ФиксированныйМассив") 
						ИЛИ ТипЗнч(КлючИЗначение.Значение) = Тип("Массив");
						
			ТекстОтборы = ТекстОтборы 
							+ Символы.ПС 
							+ ?(ТекстОтборы <> "", "И ","")
							+ ПутьКПолю 
							+ ?(ЭтоМассив, " В (&" + КлючИЗначение.Ключ + ")", " = &" + КлючИЗначение.Ключ);
							
			ПараметрыЗапроса.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли; 
	
	ТекстПервые = "";
	Если Параметры.Свойство("СтрокаПоиска") Тогда
		ТекстОтборы = ТекстОтборы + "
		|" + ?(ТекстОтборы <> "", "И ","")
		+ "СправочникНематериальныеАктивы.Наименование ПОДОБНО &СтрокаПоиска
			|	И НЕ СправочникНематериальныеАктивы.ЭтоГруппа
			|	И НЕ СправочникНематериальныеАктивы.ПометкаУдаления";
		ТекстПервые = "РАЗРЕШЕННЫЕ ПЕРВЫЕ 10";
		ПараметрыЗапроса.Вставить("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	КонецЕсли;
	
	Если ТекстОтборы <> "" Тогда
		ТекстОтборы = "
		|ГДЕ
		|" + ТекстОтборы;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ //ПЕРВЫЕ//
	|	СправочникНематериальныеАктивы.Ссылка,
	|	СправочникНематериальныеАктивы.ПометкаУдаления,
	|	СправочникНематериальныеАктивы.Родитель,
	|	СправочникНематериальныеАктивы.ЭтоГруппа,
	|	СправочникНематериальныеАктивы.Код,
	|	СправочникНематериальныеАктивы.Наименование,
	|	СправочникНематериальныеАктивы.НаименованиеПолное,
	|	СправочникНематериальныеАктивы.ВидНМА,
	|	СправочникНематериальныеАктивы.АмортизационнаяГруппа,
	|	СправочникНематериальныеАктивы.ПрочиеСведения,
	|	СправочникНематериальныеАктивы.ВидОбъектаУчета,
	|	СправочникНематериальныеАктивы.ГруппаНМА,
	|	ЕСТЬNULL(ПорядокУчетаНМА.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности
	|	//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК СправочникНематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ) КАК МестоУчетаНМА
	|		ПО СправочникНематериальныеАктивы.Ссылка = МестоУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ) КАК ПорядокУчетаНМА
	|		ПО ПорядокУчетаНМА.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив
	|			И ПорядокУчетаНМА.Организация = МестоУчетаНМА.Организация
	|	//СОЕДИНЕНИЯ//
	|	//ОТБОРЫ//";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ДОПОЛНИТЕЛЬНЫЕ_ПОЛЯ//", ДополнительныеПоля);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//СОЕДИНЕНИЯ//", ТекстСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ОТБОРЫ//", ТекстОтборы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ//", ТекстПервые);

	ПараметрыСрезаПоследних = "";
	Если Параметры.Свойство("ДатаСведений") Тогда
		ПараметрыСрезаПоследних = "&ДатаСведений";
		ПараметрыЗапроса.Вставить("ДатаСведений", КонецДня(Параметры.ДатаСведений));
	КонецЕсли; 
	Если Параметры.Свойство("ТекущийРегистратор") Тогда
		ПараметрыСрезаПоследних = ПараметрыСрезаПоследних 
			+ ?(ПараметрыСрезаПоследних <> "", ", ", "") 
			+ "Регистратор <> &ТекущийРегистратор";
		ПараметрыЗапроса.Вставить("ТекущийРегистратор", Параметры.ТекущийРегистратор);
	КонецЕсли; 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПАРАМЕТРЫ_СРЕЗАПОСЛЕДНИХ", ПараметрыСрезаПоследних);
	
	ОписаниеЗапросаДляВыбора = Новый Структура("ТекстЗапроса,ПараметрыЗапроса,ДоступныеПоля", ТекстЗапроса, ПараметрыЗапроса, ДоступныеПоля);
	
	//-- Локализация
	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

Функция ПервоначальныеСведения(НематериальныйАктив, Период) Экспорт

	ПервоначальныеСведения = Неопределено;
	
	//++ Локализация
	
	ПервоначальныеСведения = Новый Структура;
	ПервоначальныеСведения.Вставить("Организация", Неопределено);
	ПервоначальныеСведения.Вставить("Подразделение", Неопределено);
	ПервоначальныеСведения.Вставить("ДатаПринятияКУчетуУУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаПринятияКУчетуБУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДатаПринятияКУчетуНУ", '000101010000');
	ПервоначальныеСведения.Вставить("ДокументПринятияКУчетуУУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументПринятияКУчетуБУ", Неопределено);
	ПервоначальныеСведения.Вставить("ДокументПринятияКУчетуНУ", Неопределено);
	ПервоначальныеСведения.Вставить("СостояниеУУ", Перечисления.СостоянияНМА.НеПринятКУчету);
	ПервоначальныеСведения.Вставить("СостояниеБУ", Перечисления.СостоянияНМА.НеПринятКУчету);
	ПервоначальныеСведения.Вставить("СостояниеНУ", Перечисления.СостоянияНМА.НеПринятКУчету);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАБУ) Тогда
		
		Возврат ПервоначальныеСведения;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.Организация,
	|	МестоУчетаНМА.Подразделение,
	|
	|	ПервоначальныеСведения.ДатаПринятияКУчетуУУ,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуНУ,
	|
	|	ПервоначальныеСведения.ДокументПринятияКУчетуУУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуНУ,
	|
	|	ЕСТЬNULL(ПорядокУчетаУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУУ,
	|	ЕСТЬNULL(ПорядокУчетаБУ.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеБУ,
	|	ЕСТЬNULL(ПорядокУчетаБУ.СостояниеНУ, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеНУ
	|
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК МестоУчетаНМА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПервоначальныеСведения
	|		ПО МестоУчетаНМА.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|			И МестоУчетаНМА.Организация = ПервоначальныеСведения.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаУУ
	|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаУУ.НематериальныйАктив
	|			И МестоУчетаНМА.Организация = ПорядокУчетаУУ.Организация
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(&Период, НематериальныйАктив = &Ссылка) КАК ПорядокУчетаБУ
	|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаБУ.НематериальныйАктив
	|			И МестоУчетаНМА.Организация = ПорядокУчетаБУ.Организация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", НематериальныйАктив);
	Запрос.УстановитьПараметр("Период", Период);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПервоначальныеСведения;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ПервоначальныеСведения, Выборка);
	
	//-- Локализация

	Возврат ПервоначальныеСведения;
	
КонецФункции
 
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

#Область Печать

Функция ПечатьНМА1(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НематериальныеАктивы_НМА1";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.НематериальныеАктивы.ПФ_MXL_НМА1");
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	ОборотнаяСторона = Макет.ПолучитьОбласть("ОборотнаяСторона");
	
	Если ПараметрыПечати.Свойство("ДатаСведений") Тогда
		ДатаСведений = ПараметрыПечати.ДатаСведений;
	Иначе
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДанныеПечатнойФормы = ДанныеПечатнойФормыНМА1(МассивОбъектов, ДатаСведений);
	
	ПараметрыШапки = Новый Структура(
	"ВидДеятельности,
	|ДатаСоставления,
	|ДатаПринятияКУчету,
	|ДокументВыбытияДата,
	|ДокументВыбытияНомер,
	|ДокументПринятияКУчету,
	|ДокументПринятияКУчетуДата,
	|ДокументПринятияКУчетуНомер,
	|ДокументРегистрации,
	|ДокументСписания,
	|КодПоОКПО,
	|НаименованиеНМА,
	|НомерКарточки,
	|Норма,
	|ОрганизацияНаименование,
	|ПервоначальнаяСтоимость,
	|Подразделение,
	|ПодразделениеНаименование,
	|ПричинаВыбытия,
	|СпособПоступления,
	|СрокПолезногоИспользования,
	|СуммаНачисленнойАмортизации,
	|СуммаРеализации,
	|СчетУчетаАмортизации,
	|СчетУчета");
	
	ПервыйДокумент = Истина;
	
	СведенияАктуальны = Истина;
	
	ВыборкаОбъектов = ДанныеПечатнойФормы.Выбрать();
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(ПараметрыШапки, ВыборкаОбъектов); 
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ВыборкаОбъектов.Организация, ДатаСведений);
		ПараметрыШапки.ОрганизацияНаименование = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		
		ПараметрыШапки.ДатаСоставления = ДатаСведений;
		
		ПараметрыШапки.НомерКарточки = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ВыборкаОбъектов.НомерКарточки, Истина, Ложь);
			
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументПринятияКУчетуНомер) Тогда
			ПараметрыШапки.ДокументПринятияКУчетуНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ВыборкаОбъектов.ДокументПринятияКУчетуНомер, Истина, Ложь);
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументВыбытияНомер) Тогда
			ПараметрыШапки.ДокументВыбытияНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				ВыборкаОбъектов.ДокументВыбытияНомер, Истина, Ложь);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.СрокПолезногоИспользования) Тогда
			ПараметрыШапки.Норма = 
				СтрШаблон(НСтр("ru = '%1%% в мес.';
								|en = '%1%% per month'"), Окр(1/ВыборкаОбъектов.СрокПолезногоИспользования*100, 3));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.ДокументРегистрацииНаименование) Тогда
			ПараметрыШапки.ДокументРегистрации = 
				СтрШаблон(НСтр("ru = '%1 №%2 от %3';
								|en = '%1 No%2 dated %3'"),
								ВыборкаОбъектов.ДокументРегистрацииНаименование,
								ВыборкаОбъектов.ДокументРегистрацииНомер,
								Формат(ВыборкаОбъектов.ДокументРегистрацииДата, "ДЛФ=D"));
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.Сумма) Тогда
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ВыборкаОбъектов.Организация);
			Если ВыборкаОбъектов.Валюта <> ВалютаРегламентированногоУчета Тогда
				ПараметрыШапки.СуммаРеализации = РаботаСКурсамиВалютУТ.ПересчитатьСуммуДокументаВВалюту(
														ВыборкаОбъектов.Сумма,
														ВыборкаОбъектов.Валюта,
														ВалютаРегламентированногоУчета,
														ВыборкаОбъектов.ДатаРеализации,
														ВыборкаОбъектов.Организация);
				
			Иначе
				ПараметрыШапки.СуммаРеализации = ВыборкаОбъектов.Сумма;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ВыборкаОбъектов.СрокПолезногоИспользования) Тогда
			ПараметрыШапки.СрокПолезногоИспользования = ВнеоборотныеАктивыКлиентСервер.ПредставлениеКоличестваМесяцевСтрокой(
				ВыборкаОбъектов.СрокПолезногоИспользования, Ложь);
		КонецЕсли;
			
		Шапка.Параметры.Заполнить(ПараметрыШапки);
		
		ТабДок.Вывести(Шапка);
		
		// Оборотная сторона
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		ТабДок.Вывести(ОборотнаяСторона);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, НомерСтрокиНачало, ОбъектыПечати, ВыборкаОбъектов.Ссылка);
		
		Если НЕ ВыборкаОбъектов.СведенияАктуальны Тогда
			СведенияАктуальны = Ложь;
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивы.ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны);
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеПечатнойФормыНМА1(МассивОбъектов, ДатаСведений)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведения.СпособПоступления КАК СпособПоступления,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументПринятияКУчетуБУ КАК ДокументПринятияКУчетуБУ,
	|	ПервоначальныеСведения.ДокументСписания КАК ДокументСписания
	|ПОМЕСТИТЬ втПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПервоначальныеСведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизации.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользования
	|ПОМЕСТИТЬ втПараметрыАмортизации
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПараметрыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокУчета.Организация КАК Организация,
	|	ПорядокУчета.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ВЫБОР КОГДА НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА) ТОГДА НастройкиПоАналитике.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КОНЕЦ) КАК СчетУчета,
	|	МАКСИМУМ(ВЫБОР КОГДА НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА_ЦФ) ТОГДА НастройкиПоАналитике.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КОНЕЦ) КАК СчетУчетаЦФ,
	|	МАКСИМУМ(ВЫБОР КОГДА НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА) ТОГДА НастройкиПоАналитике.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КОНЕЦ) КАК СчетУчетаАмортизации,
	|	МАКСИМУМ(ВЫБОР КОГДА НастройкиПоАналитике.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА_ЦФ) ТОГДА НастройкиПоАналитике.СчетУчета
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КОНЕЦ) КАК СчетУчетаАмортизацииЦФ
	|ПОМЕСТИТЬ втПорядокУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК ПорядокУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК НастройкиПоАналитике
	|		ПО НастройкиПоАналитике.ВидСчета В (&ВидыСчетовВнеоборотныхАктивов)
	|			И НастройкиПоАналитике.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И НастройкиПоАналитике.АналитикаУчета = ПорядокУчета.ГруппаФинансовогоУчета
	|			И НастройкиПоАналитике.МестоУчета = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчета.Организация,
	|	ПорядокУчета.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестоУчета.НематериальныйАктив КАК НематериальныйАктив,
	|	МестоУчета.Организация КАК Организация,
	|	МестоУчета.Подразделение КАК Подразделение,
	|	МестоУчета.Организация.КодПоОКПО КАК ОрганизацияКодПоОКПО
	|ПОМЕСТИТЬ втМестоУчета
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК МестоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СУММА(АмортизацияНМА.Амортизация) КАК Амортизация
	|ПОМЕСТИТЬ втАмортизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		АмортизацияНМА.НематериальныйАктив КАК НематериальныйАктив,
	|		-(АмортизацияНМА.АмортизацияРеглОстаток + АмортизацияНМА.АмортизацияЦФОстаток) КАК Амортизация
	|	ИЗ
	|		РегистрНакопления.АмортизацияНМА.Остатки(&ДатаСведений, НематериальныйАктив В (&МассивОбъектов)) КАК АмортизацияНМА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияНМА.НематериальныйАктив,
	|		ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * (АмортизацияНМА.АмортизацияРегл + АмортизацияНМА.АмортизацияЦФ)
	|	ИЗ
	|		РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеНМА2_4 КАК СписаниеНМА2_4
	|			ПО (СписаниеНМА2_4.Ссылка = АмортизацияНМА.Регистратор)
	|	ГДЕ
	|		АмортизацияНМА.Период <= &ДатаСведений
	|		И АмортизацияНМА.НематериальныйАктив В(&МассивОбъектов)
	|		И (АмортизацияНМА.Регистратор ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|				ИЛИ АмортизацияНМА.Регистратор ССЫЛКА Документ.СписаниеНМА2_4
	|					И СписаниеНМА2_4.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНМАЧастичное))) КАК АмортизацияНМА
	|
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(ДокументыПоНМА.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ втРеализацияВнеоборотныхАктивов
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|ГДЕ
	|	ДокументыПоНМА.ТипСсылки = &ТипРеализацияУслугПрочихАктивов
	|	И ДокументыПоНМА.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов)
	|	И ДокументыПоНМА.НематериальныйАктив В(&МассивОбъектов)
	|	И ДокументыПоНМА.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК Ссылка,
	|	НематериальныеАктивы.Код КАК НомерКарточки,
	|	НематериальныеАктивы.ДокументРегистрацииНаименование КАК ДокументРегистрацииНаименование,
	|	НематериальныеАктивы.ДокументРегистрацииДата КАК ДокументРегистрацииДата,
	|	НематериальныеАктивы.ДокументРегистрацииНомер КАК ДокументРегистрацииНомер,
	|	ЕСТЬNULL(НематериальныеАктивы.КодОКВЭД2.Наименование, """") КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА НематериальныеАктивы.НаименованиеПолное <> """"
	|			ТОГДА НематериальныеАктивы.НаименованиеПолное
	|		ИНАЧЕ НематериальныеАктивы.Наименование
	|	КОНЕЦ КАК НаименованиеНМА,
	|	втПервоначальныеСведения.СпособПоступления КАК СпособПоступления,
	|	втПервоначальныеСведения.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимость,
	|	втПервоначальныеСведения.ДатаПринятияКУчетуБУ КАК ДатаПринятияКУчету,
	|	втПервоначальныеСведения.ДокументПринятияКУчетуБУ КАК ДокументПринятияКУчетуБУ,
	|	втПервоначальныеСведения.ДокументСписания КАК ДокументСписания,
	|	втПараметрыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	втПорядокУчета.СчетУчета КАК СчетУчета,
	|	втПорядокУчета.СчетУчетаАмортизации КАК СчетУчетаАмортизации,
	|	втМестоУчета.Организация КАК Организация,
	|	втМестоУчета.ОрганизацияКодПоОКПО КАК КодПоОКПО,
	|	втМестоУчета.Подразделение.Наименование КАК ПодразделениеНаименование,
	|	ЕСТЬNULL(втАмортизация.Амортизация, 0) КАК СуммаНачисленнойАмортизации,
	|	ДокументПринятияКУчету.Ссылка КАК ДокументПринятияКУчету,
	|	ДокументПринятияКУчету.НомерПервичногоДокумента КАК ДокументПринятияКУчетуНомер,
	|	ДокументПринятияКУчету.ДатаПервичногоДокумента КАК ДокументПринятияКУчетуДата,
	|	ЕСТЬNULL(РеализацияУслугПрочихАктивов.СуммаДокумента, 0) КАК Сумма,
	|	ЕСТЬNULL(РеализацияУслугПрочихАктивов.Дата, 0) КАК ДатаРеализации,
	|	РеализацияУслугПрочихАктивов.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА втПервоначальныеСведения.ДокументСписания ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|			ТОГДА РеализацияУслугПрочихАктивов.Дата
	|		ИНАЧЕ ДокументВыбытия.ДатаПервичногоДокумента
	|	КОНЕЦ КАК ДокументВыбытияДата,
	|	ВЫБОР
	|		КОГДА втПервоначальныеСведения.ДокументСписания ССЫЛКА Документ.ПодготовкаКПередачеНМА2_4
	|			ТОГДА РеализацияУслугПрочихАктивов.Номер
	|		ИНАЧЕ ДокументВыбытия.НомерПервичногоДокумента
	|	КОНЕЦ КАК ДокументВыбытияНомер,
	|	ВЫРАЗИТЬ(ДокументВыбытия.Договор КАК Справочник.ДоговорыКонтрагентов).Наименование КАК ПричинаВыбытия,
	|	НЕ НематериальныеАктивы.Ссылка В (&ОбъектыДляКоторыхСведенияНеАктуальны) КАК СведенияАктуальны
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведения КАК втПервоначальныеСведения
	|		ПО НематериальныеАктивы.Ссылка = втПервоначальныеСведения.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыАмортизации КАК втПараметрыАмортизации
	|		ПО НематериальныеАктивы.Ссылка = втПараметрыАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестоУчета КАК втМестоУчета
	|		ПО НематериальныеАктивы.Ссылка = втМестоУчета.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчета КАК втПорядокУчета
	|		ПО втМестоУчета.Организация = втПорядокУчета.Организация
	|			И втМестоУчета.НематериальныйАктив = втПорядокУчета.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАмортизация КАК втАмортизация
	|		ПО НематериальныеАктивы.Ссылка = втАмортизация.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДокументПринятияКУчету
	|		ПО (ДокументПринятияКУчету.Ссылка = втПервоначальныеСведения.ДокументПринятияКУчетуБУ)
	|			И (НЕ ДокументПринятияКУчету.ДополнительнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДокументВыбытия
	|		ПО (ДокументВыбытия.Ссылка = втПервоначальныеСведения.ДокументСписания)
	|			И (НЕ ДокументВыбытия.ДополнительнаяЗапись)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализацияВнеоборотныхАктивов КАК втРеализацияВнеоборотныхАктивов
	|		ПО НематериальныеАктивы.Ссылка = втРеализацияВнеоборотныхАктивов.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПрочихАктивов
	|		ПО (РеализацияУслугПрочихАктивов.Ссылка = втРеализацияВнеоборотныхАктивов.Ссылка)
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&МассивОбъектов)
	|	И НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НематериальныеАктивы.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("ВидыСчетовВнеоборотныхАктивов", РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.НастраиваемыеВидыСчетов("ВнеоборотныеАктивы"));
	
	Запрос.УстановитьПараметр("ТипРеализацияУслугПрочихАктивов", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РеализацияУслугПрочихАктивов"));
		
	ОбъектыДляКоторыхСведенияНеАктуальны = ОтложенноеФормированиеДвиженийВНА.ОбъектыДляКоторыхДвиженияНеАктуальны(МассивОбъектов);
	Запрос.УстановитьПараметр("ОбъектыДляКоторыхСведенияНеАктуальны", ОбъектыДляКоторыхСведенияНеАктуальны);
		
	Результат = Запрос.Выполнить();
	
	Возврат Результат;

КонецФункции

#КонецОбласти

//-- Локализация

#КонецОбласти
