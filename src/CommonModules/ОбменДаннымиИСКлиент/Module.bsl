#Область СлужебныеПроцедурыИФункции

Функция ОбработкаОповещенияВФормеСпискаДокументовИС(Форма, ИмяПодсистемы, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбновитьСписок = Ложь;
	
	Если ИмяСобытия = ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененОбъект(ИмяПодсистемы, Форма) Тогда
		
		ОбновитьСписок = Истина;
	
	ИначеЕсли ИмяСобытия = ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы) Тогда
		
		ТипЗначения = ТипЗнч(Параметр.Ссылка);
		ПолноеИмяОбъекта = ОбщегоНазначенияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Истина);
		Если СтрНачинаетсяС(ПолноеИмяОбъекта, "Справочник.") Тогда
			ТипДокумента = Тип("СправочникСсылка." + ОбщегоНазначенияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь));
		ИначеЕсли СтрНачинаетсяС(ПолноеИмяОбъекта, "Документ.") Тогда
			ТипДокумента = Тип("ДокументСсылка." + ОбщегоНазначенияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь));
		КонецЕсли;
		
		Если ИмяПодсистемы = "ЗЕРНО" Тогда
			МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияЗЕРНОКлиент");
			МодульОбработки.ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник);
		КонецЕсли;
		
		Если ИмяПодсистемы = "ИСМП" Тогда
			МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиИСМПКлиент");
			МодульОбработки.ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник);
		КонецЕсли;
		
		Если ТипЗначения = Тип("Массив") Тогда
			
			Для Каждого ЭлементДанных Из Параметр.Ссылка Цикл
				Если ТипЗнч(ЭлементДанных) = ТипДокумента Тогда
					ОбновитьСписок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Не ОбновитьСписок Тогда
			ОбновитьСписок = (ТипЗначения = ТипДокумента);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ОбменДаннымиИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы) Тогда
		
		ОжидаемоеСвойство = ОбменДаннымиИСКлиентСервер.ИмяСвойстваОбновлятьСтатусВФормахДокументов(ИмяПодсистемы);
		
		Если (ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство(ОжидаемоеСвойство)) Тогда
			
			Параметр.Свойство(ОжидаемоеСвойство, ОбновитьСписок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "Список")
			И ВидимостьВИерархии(Форма.Элементы.Список) Тогда
			Форма.Элементы.Список.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокКОформлению")
			И ВидимостьВИерархии(Форма.Элементы.СписокКОформлению) Тогда
			Форма.Элементы.СписокКОформлению.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокПоДокументамКОформлению")
			И ВидимостьВИерархии(Форма.Элементы.СписокПоДокументамКОформлению) Тогда
			Форма.Элементы.СписокПоДокументамКОформлению.Обновить();
		КонецЕсли;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, "СписокКОформлениюГосмониторинг")
			И ВидимостьВИерархии(Форма.Элементы.СписокКОформлениюГосмониторинг) Тогда
			Форма.Элементы.СписокКОформлениюГосмониторинг.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбновитьСписок;
	
КонецФункции

Функция ВидимостьВИерархии(Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Элемент.Видимость И Элемент.Родитель <> Неопределено Тогда
		Возврат ВидимостьВИерархии(Элемент.Родитель);
	ИначеЕсли Элемент.Видимость И Элемент.Родитель = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Параметры:
//  Ответ - КодВозвратаДиалога
//  Контекст - Структура
Процедура ПодготовитьСообщенияКПередачеПодтверждениеПроведения(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(Контекст.НепроведенныеДокументы);
	ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2';
							|en = 'Документ %1 не проведен: %2'");
	НепроведенныеДокументы = Новый Массив;
	Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Строка(ИнформацияОДокументе.Ссылка),
				ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
		НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
	КонецЦикла;
	
	Контекст.МассивДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Контекст.МассивДокументов, НепроведенныеДокументы);
	
	// Оповещаем открытые формы о том, что были проведены документы.
	ТипыПроведенныхДокументов = Новый Соответствие;
	Для Каждого ПроведенныйДокумент Из Контекст.МассивДокументов Цикл
		ТипыПроведенныхДокументов.Вставить(ТипЗнч(ПроведенныйДокумент));
	КонецЦикла;
	Для Каждого Тип Из ТипыПроведенныхДокументов Цикл
		ОповеститьОбИзменении(Тип.Ключ);
	КонецЦикла;
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		
		Если Контекст.НепроведенныеДокументы.Количество() = НепроведенныеДокументы.Количество() Тогда
			
			Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документ';
											|en = 'Не удалось провести документ'");
			Иначе
				ТекстПредупреждения = НСтр("ru = 'Не удалось провести документы';
											|en = 'Не удалось провести документы'");
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		Иначе
			
			ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.';
								|en = 'Не удалось провести один или несколько документов.'");
			
			КнопкиДиалога = Новый СписокЗначений;
			Если Контекст.МассивДокументов.Количество() = 0 Тогда
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК';
																		|en = 'ОК'"));
			Иначе
				ТекстДиалога = ТекстДиалога + " " + НСтр("ru = 'Продолжить?';
														|en = 'Продолжить?'");
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить';
																			|en = 'Продолжить'"));
				КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена);
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения", ЭтотОбъект, Контекст),
				ТекстДиалога,
				КнопкиДиалога);
		
		КонецЕсли; 
		
	Иначе
		
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСообщенияКПередачеПослеПодтверждениеПродолжения(РезультатВопроса, Контекст) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Пропустить Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
	КонецЕсли;
	
КонецПроцедуры

#Область ДальнейшиеДействия

// Инициализировать структура данных для подготовки сообщений к передаче
//
//  Параметры:
//   ДинамическийСписок - ТаблицаФормы - Динамический список.
//   ДальнейшееДействие - ПеречислениеСсылка - Дальнейшее действие.
//   ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении проведения документов.
// Возвращаемое значение:
//  Структура - обязательные параметры для подготовки сообщений к передаче:
// * ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении проведения документов
// * ПричинаНедоступности - Строка - Причина недоступности
// * ДействиеНедоступно - Булево - Признак недоступности действия
// * ДальнейшееДействие - ПеречислениеСсылка - Дальнейшее действие (ПеречислениеСсылка..ДальнейшиеДействияПоВзаимодействию*)
// * ДинамическийСписок - ТаблицаФормы - Динамический список
// * РеквизитыДокументов - Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка - Документ
//    * Значение - Структура - Реквизиты документа
// * НепроведенныеДокументы - Массив Из ДокументСсылка - Непроведенные документы
// * ПараметрыПередачи - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Функция СтруктураПодготовкиСообщенийКПередаче(ДинамическийСписок, ДальнейшееДействие, ОповещениеПриЗавершении) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивДокументов",        Новый Массив);
	Контекст.Вставить("НепроведенныеДокументы",  Новый Массив);
	Контекст.Вставить("РеквизитыДокументов",     Новый Соответствие);
	Контекст.Вставить("ДинамическийСписок",      ДинамическийСписок);
	Контекст.Вставить("ДальнейшееДействие",      ДальнейшееДействие);
	Контекст.Вставить("ДействиеНедоступно",      Ложь);
	Контекст.Вставить("ПричинаНедоступности",    "");
	Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	Контекст.Вставить("ПараметрыПередачи",       Неопределено);
	
	Возврат Контекст;
	
КонецФункции

// Процедура - Определить доступность действий
//
// Параметры:
//  Контекст                       - (См. СтруктураПодготовкиСообщенийКПередаче).
//  ИменаКолонокДальнейшиеДействия - Массив Из Строка - Имена колонок с дальнейшими действиями.
//  ИменаРеквизитов                - Структура,Строка,Неопределено - Имена реквизитов для сохранения в РеквизитыДокументов.
//
Процедура ОпределитьДоступностьДействий(Контекст, ИменаКолонокДальнейшиеДействия, ИменаРеквизитов = Неопределено) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	ИмяПоляСсылка  = "Ссылка";
	
	Если ТипЗнч(Контекст.ДинамическийСписок.ТекущаяСтрока) = Тип("РегистрСведенийКлючЗаписи.ВскрытыеПотребительскиеУпаковкиИС") Тогда
		ИмяПоляСсылка = "Документ";
	КонецЕсли;
	
	Если Контекст.ПараметрыПередачи <> Неопределено
		И Контекст.ПараметрыПередачи.ИмяПоляСсылка <> Неопределено Тогда
		ИмяПоляСсылка = Контекст.ПараметрыПередачи.ИмяПоляСсылка;
	КонецЕсли;
	
	ВыделенныеСтроки = Контекст.ДинамическийСписок.ВыделенныеСтроки;
	Если Контекст.ПараметрыПередачи <> Неопределено
		И Контекст.ПараметрыПередачи.ВыделенныеСтроки <> Неопределено Тогда
		ВыделенныеСтроки = Контекст.ПараметрыПередачи.ВыделенныеСтроки;
	КонецЕсли;
	
	ДокументыДляПолученияРеквизитов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если ТипЗнч(ВыделеннаяСтрока) = ТипГруппировка Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки = Контекст.ДинамическийСписок.ДанныеСтроки(ВыделеннаяСтрока);
		ПроверкаПройдена = Ложь;
		Для Каждого ИмяКолонки Из ИменаКолонокДальнейшиеДействия Цикл
			ПроверкаПройдена = ПроверкаПройдена Или (ДанныеСтроки[ИмяКолонки] = Контекст.ДальнейшееДействие);
		КонецЦикла;
		Если ПроверкаПройдена Тогда 
			Контекст.МассивДокументов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
			Если Не ДанныеСтроки.Проведен Тогда
				Контекст.НепроведенныеДокументы.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
			КонецЕсли;
		КонецЕсли;
		Если ИменаРеквизитов <> Неопределено Тогда
			РеквизитыДокумента = Новый Структура;
			Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из ИменаРеквизитов Цикл
					Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, КлючИЗначение.Ключ) Тогда
						РеквизитыДокумента.Вставить(КлючИЗначение.Ключ, ДанныеСтроки[КлючИЗначение.Ключ]);
					Иначе
						ДокументыДляПолученияРеквизитов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, ИменаРеквизитов) Тогда
					РеквизитыДокумента.Вставить(ИменаРеквизитов, ДанныеСтроки[ИменаРеквизитов]);
				Иначе
					ДокументыДляПолученияРеквизитов.Добавить(ДанныеСтроки[ИмяПоляСсылка]);
				КонецЕсли;
			КонецЕсли;
			Контекст.РеквизитыДокументов.Вставить(ДанныеСтроки[ИмяПоляСсылка], РеквизитыДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументыДляПолученияРеквизитов.Количество() Тогда
		
		Реквизиты = Новый Массив;
		Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
			Для Каждого КлючИЗначение Из ИменаРеквизитов Цикл
				Реквизиты.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
		Иначе
			Реквизиты.Добавить(ИменаРеквизитов);
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначенияИСВызовСервера.ЗначенияРеквизитовОбъектов(ДокументыДляПолученияРеквизитов, Реквизиты);
		
		Для Каждого ДокументСсылка Из ДокументыДляПолученияРеквизитов Цикл
			Контекст.РеквизитыДокументов.Вставить(ДокументСсылка, ЗначенияРеквизитов[ДокументСсылка]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Подготовить сообщения к передаче
//
// Параметры:
//  Контекст - Структура - см СтруктураПодготовкиСообщенийКПередаче()
//
Процедура ПодготовитьСообщенияКПередаче(Контекст) Экспорт
	
	Если Контекст.МассивДокументов.Количество() = 0
		Или Контекст.ДействиеНедоступно Тогда
		
		Если Контекст.ДействиеНедоступно И ЗначениеЗаполнено(Контекст.ПричинаНедоступности) Тогда
			ПользовательскоеПредупреждение = Контекст.ПричинаНедоступности;
		ИначеЕсли Контекст.ДинамическийСписок.ВыделенныеСтроки.Количество() = 1 Тогда
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанного документа.';
													|en = 'Команда не может быть выполнена для указанного документа.'");
		Иначе
			ПользовательскоеПредупреждение = НСтр("ru = 'Команда не может быть выполнена для указанных документов.';
													|en = 'Команда не может быть выполнена для указанных документов.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(,ПользовательскоеПредупреждение);
		
		Возврат;
		
	КонецЕсли;
	
	Если Контекст.НепроведенныеДокументы.Количество() > 0 Тогда
		
		Если Контекст.НепроведенныеДокументы.Количество() = 1 Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
								|en = 'Для выполнения команды необходимо предварительно провести документ. Выполнить проведение документа и продолжить?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды необходимо предварительно провести документы. Выполнить проведение документов и продолжить?';
								|en = 'Для выполнения команды необходимо предварительно провести документы. Выполнить проведение документов и продолжить?'");
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
													|en = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеПодтверждениеПроведения", ЭтотОбъект, Контекст),
			ТекстВопроса,
			Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеПриЗавершении, Контекст);
	
КонецПроцедуры

// Только для внутреннего использования.
// 
// Параметры:
// 	ЭлементФормы - ПолеФормы - Элемент формы
// Возвращаемое значение:
// 	Неопределено - Элемент формы
Функция ПолучитьФормуПоЭлементуФормы(ЭлементФормы) Экспорт
	
	Если ТипЗнч(ЭлементФормы) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат ЭлементФормы;
	ИначеЕсли ЭлементФормы.Родитель = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПолучитьФормуПоЭлементуФормы(ЭлементФормы.Родитель);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти