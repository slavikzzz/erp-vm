////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции планирования производства
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переводит время из заданных единиц времени в секунды
//
// Параметры:
//  Время					 - Число								 - время
//  ЕдиницаИзмеренияВремени	 - ПеречислениеСсылка.ЕдиницыИзмеренияВремени	 - единица измерения времени.
// 
// Возвращаемое значение:
//   - Число - время в секундах
//
Функция ПолучитьВремяВСекундах(Время, ЕдиницаИзмеренияВремени) Экспорт
	
	Если Время = 0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Сутки") 
		ИЛИ ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День") Тогда
		
		ВремяВСекундах = Время * 86400; // 60 * 60 * 24
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута") Тогда
		
		ВремяВСекундах = Время * 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Час") Тогда
		
		ВремяВСекундах = Время * 3600; //60 * 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Секунда") Тогда
		
		ВремяВСекундах = Время;
		
	Иначе
		
		ВремяВСекундах = 0;
		
	КонецЕсли;

	Возврат ВремяВСекундах;
	
КонецФункции

// Переводит время в секундах во время в заданных единицах времени
//
// Параметры:
//  ВремяВСекундах			 - Число								 - время в секундах
//  ЕдиницаИзмеренияВремени	 - ПеречислениеСсылка.ЕдиницыИзмеренияВремени	 - единица измерения времени.
// 
// Возвращаемое значение:
//   - Число - время в единице измерения.
//
Функция ПолучитьВремяВЕдиницеИзмерения(ВремяВСекундах, ЕдиницаИзмеренияВремени) Экспорт
	
	Если ВремяВСекундах = 0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Сутки")
		ИЛИ ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День") Тогда
		
		Время = ВремяВСекундах / 86400; // 60 / 60 / 24;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута") Тогда
		
		Время = ВремяВСекундах / 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Час") Тогда
		
		Время = ВремяВСекундах / 3600; // 60 / 60;
		
	ИначеЕсли ЕдиницаИзмеренияВремени = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Секунда") Тогда
		
		Время = ВремяВСекундах;
		
	Иначе
		
		Время = 0;
		
	КонецЕсли;

	Возврат  Время;
	
КонецФункции

// Формирует представление времени в виде строки
//
// Параметры:
//  Время                   - Число - время
//	ЕдиницаИзмеренияВремени - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - есть параметр задан, 
//								то время выводится в формате ед. измерения, иначе используется формат "чч:мм:сс".
//
// Возвращаемое значение:
//   Строка   - Время строкой
//
Функция ПолучитьВремяСтрокой(Знач Время, ЕдиницаИзмеренияВремени = Неопределено) Экспорт

	Результат = "";
	
	Если ЕдиницаИзмеренияВремени = Неопределено Тогда
		
		Если Время < 0 Тогда
			
			Время = -Время;
			Результат = "-"
			
		КонецЕсли;
		
		Если Время >= 3600 Тогда
			
			Результат = Результат + Формат(Цел(Время / 3600), "ЧГ=0") + ":";
			
		КонецЕсли;
		
		Если Время > 0 Тогда
			
			Результат = Результат + Формат(Цел(Время % 3600 / 60), "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0") + ":" + Формат(Время % 60, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Время, "ЧРГ=; ЧН=; ЧГ=") + " " + Строка(ЕдиницаИзмеренияВремени);
		
	КонецЕсли;
		
	Возврат Результат;

КонецФункции

//++ НЕ УТКА

// Функция возвращает дату, выровненную по началу интервала планирования
//
// Параметры:
//  Период				 - Дата - исходная дата 
//  ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства - интервал планирования
//  НачалоИнтервала		 - Дата - начало интервала планирования
// Возвращаемое значение:
//  Дата - дата, выровненная по границе интервала планирования.
Функция НачалоИнтервалаПланирования(Период, ИнтервалПланирования, НачалоИнтервала = '00010101') Экспорт
	
	Возврат ВыровнятьПериодПоГраницеИнтервалаПланирования(Период, ИнтервалПланирования, НачалоИнтервала);
	
КонецФункции

// Функция возвращает дату выровненную по окончанию интервала планирования
//
// Параметры:
//  Период				 - Дата - исходная дата
//  ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства - интервал планирования
//  ОкончаниеИнтервала	 - Дата - окончание интервала планирования
// Возвращаемое значение:
//  Дата - дата, выровненная по границе интервала планирования.
Функция ОкончаниеИнтервалаПланирования(Период, ИнтервалПланирования, ОкончаниеИнтервала = '00010101') Экспорт
	
	Если ОкончаниеИнтервала = '00010101' Тогда
		
		Результат = Период;
		
		Если ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
			
			Результат = КонецЧаса(Результат);
			
		ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
			
			Результат = КонецДня(Результат);
			
		ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя") Тогда
			
			Результат = КонецНедели(Результат);
			
		ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Месяц") Тогда
			
			Результат = КонецМесяца(Результат);
			
		КонецЕсли;
		
		Возврат Результат;
		
	Иначе
		
		Возврат ВыровнятьПериодПоГраницеИнтервалаПланирования(Период, ИнтервалПланирования, ОкончаниеИнтервала);
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает следующий интервал планирования, полученный от переданного периода.
//
// Параметры:
//  Период						 - Дата - исходная дата
//  ИнтервалПланирования		 - ПеречислениеСсылка.ТочностьГрафикаПроизводства - интервал планирования
//  НачалоИнтервалаПланирования	 - Дата - начало интервала планирования
//  ВыровнятьПоГранице			 - Булево - определяет необходимость выравнивания периода по границе интервала планирования
//                                           используется при размещении и определении текущего интервала,
//                                           при расчете границ этапов ББВ в текущий момент не используется
// Возвращаемое значение:
//  Дата - дата начала следующего интервала планирования.
Функция СледующийИнтервалПланирования(Период, ИнтервалПланирования, Знач НачалоИнтервалаПланирования = '00010101', Знач ВыровнятьПоГранице = Ложь) Экспорт
	
	Результат = НачалоИнтервалаПланирования(Период, ИнтервалПланирования, НачалоИнтервалаПланирования);
	
	Если Результат >= Период Тогда
		
		Возврат ?(ВыровнятьПоГранице, Результат, НачалоИнтервалаПланирования(Период, ИнтервалПланирования)); 
		
	ИначеЕсли ВыровнятьПоГранице Тогда
		
		Возврат НачалоИнтервалаПланирования(ОкончаниеИнтервалаПланирования(Период, ИнтервалПланирования) + 1, ИнтервалПланирования, НачалоИнтервалаПланирования);
		
	Иначе
		
		Возврат НачалоИнтервалаПланирования(ОкончаниеИнтервалаПланирования(Период, ИнтервалПланирования) + 1, ИнтервалПланирования);
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает предыдущий интервал планирования, полученный от переданного периода.
//
// Параметры:
//  Период							 - Дата - исходная дата
//  ИнтервалПланирования			 - ПеречислениеСсылка.ТочностьГрафикаПроизводства - интервал планирования
//  ОкончаниеИнтервалаПланирования	 - Дата - окончание интервала планирования
//  ВыровнятьПоГранице			     - Булево - определяет необходимость выравнивания периода по границе интервала планирования
//                                               используется при размещении и определении текущего интервала,
//                                               при расчете границ этапов ББВ в текущий момент не используется
// Возвращаемое значение:
//  Дата - дата окончания предыдущего интервала планирования.
Функция ПредыдущийИнтервалПланирования(Период, ИнтервалПланирования, Знач ОкончаниеИнтервалаПланирования = '00010101', Знач ВыровнятьПоГранице = Ложь) Экспорт
	
	Результат = ОкончаниеИнтервалаПланирования(Период, ИнтервалПланирования, ОкончаниеИнтервалаПланирования);
	
	Если Результат <= Период Тогда
		
		Возврат ?(ВыровнятьПоГранице, Результат, ОкончаниеИнтервалаПланирования(Период, ИнтервалПланирования)); 
		
	ИначеЕсли ВыровнятьПоГранице Тогда
		
		Возврат ОкончаниеИнтервалаПланирования(НачалоИнтервалаПланирования(Период, ИнтервалПланирования) - 1, ИнтервалПланирования, ОкончаниеИнтервалаПланирования);
		
	Иначе
		
		Возврат ОкончаниеИнтервалаПланирования(НачалоИнтервалаПланирования(Период, ИнтервалПланирования) - 1, ИнтервалПланирования);
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает нормативную длительность интервала в единице измерения
//
// Параметры:
//  Интервал - ПеречислениеСсылка.ТочностьГрафикаПроизводства - Интервал планирования
//  ЕдиницаИзмерения - ПеречислениеСсылка.ЕдиницыИзмеренияВремени - Единица измерения, к которой нужно привести
//                                                                  нормативную длительность интервала
//                                                                  Значение по умолчанию "День".
// 
// Возвращаемое значение:
//   - Число - Нормативная длительность интервала (в единице измерения).
//
Функция ПолучитьНормативнуюДлительностьИнтервала(Знач Интервал, Знач ЕдиницаИзмерения = Неопределено) Экспорт
	
	Если ЕдиницаИзмерения = Неопределено
		ИЛИ ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День")
		ИЛИ ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Сутки") Тогда
		
		Если Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
			Возврат 1;
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
			Возврат 1/24;
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя") Тогда
			Возврат 7;
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Месяц") Тогда
			Возврат 30;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		
		Если Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
			Возврат ПолучитьВремяВЕдиницеИзмерения(86400, ЕдиницаИзмерения);
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
			Возврат ПолучитьВремяВЕдиницеИзмерения(3600, ЕдиницаИзмерения);
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя") Тогда
			Возврат ПолучитьВремяВЕдиницеИзмерения(86400*7, ЕдиницаИзмерения);
		ИначеЕсли Интервал = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Месяц") Тогда
			Возврат ПолучитьВремяВЕдиницеИзмерения(86400*30, ЕдиницаИзмерения);
		Иначе
			Возврат 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//-- НЕ УТКА

//++ Устарело_Производство21

//++ НЕ УТКА

#Область ЗаказНаПроизводство

#Область РедактированиеСпецификацииСтрокиЗаказа

// Функция возвращает пустую структуру данных по продукции
//
// Параметры:
//  ДанныеЗаполнения - Структура - структура данных строки продукции заказа на производство:
//  * КлючСвязи - УникальныйИдентификатор - Идентификатор строки продукции в заказе на производство
//  * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//  * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика продукции
//  * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель для работ
//  * Склад - СправочникСсылка.Склады - склад для продукции
//  * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//  * НазначениеЗаказа - СправочникСсылка.Назначения - назначение заказа на производство.
// 
// Возвращаемое значение:
//   - Структура - данные по продукции.
//
Функция СтруктураДанныхПродукции(Знач ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
			
		СтруктураДанных = Новый Структура;
		
		СтруктураДанных.Вставить("КлючСвязи");
		
		СтруктураДанных.Вставить("Номенклатура");
		СтруктураДанных.Вставить("Характеристика");
		СтруктураДанных.Вставить("Подразделение");
		СтруктураДанных.Вставить("Склад");
		
		СтруктураДанных.Вставить("Назначение");
		СтруктураДанных.Вставить("НазначениеЗаказа");
		
		СтруктураДанных.Вставить("ЕстьНазначение", Ложь);
		СтруктураДанных.Вставить("ПоЗаказуДавальца", Ложь);
		СтруктураДанных.Вставить("ОбосабливатьПоНазначениюЗаказа", Неопределено);
		
		СтруктураДанных.Вставить("ЭтоРабота");
		СтруктураДанных.Вставить("НаборУпаковок");
		СтруктураДанных.Вставить("ТипНоменклатуры");
		СтруктураДанных.Вставить("ИспользоватьУпаковки");
		
	Иначе
		
		СтруктураДанных = ПланированиеПроизводстваВызовСервера.СтруктураДанныхПродукции(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область Назначение

// Функция проверяет необходимость обновления назначения в ТЧ Выходные изделия и Возвратные отходы,
//  при изменении значимых реквизитов.
//
// Параметры:
//  ТекущиеДанные		 - ДанныеФормыКоллекция	 - строка ТЧ выходные изделия
//  СохраненныеЗначения	 - Структура			 - переменная модуля формы, в которой хранятся кешируемые значения
//  РежимОбновления		 - Строка				 - в переменную помещается режим обновления назначений для выходных изделий.
// 
// Возвращаемое значение:
//   - Истина - нужно обновить назначение, Ложь - в противном случае.
//
Функция НеобходимоОбновитьНазначениеВТЧВыходныеИзделия(Знач ТекущиеДанные, Знач СохраненныеЗначения, РежимОбновления) Экспорт
	
	РежимОбновления = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СохраненныеЗначения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(
				ТекущиеДанные, СохраненныеЗначения, "Номенклатура,Характеристика,Назначение,Подразделение,Склад") Тогда
		
		Если ТекущиеДанные.Назначение <> СохраненныеЗначения.Назначение Тогда
			РежимОбновления = "ПоВсем";
		Иначе
			РежимОбновления = "ПоПродукции";
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
			
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Заполняет реквизит Назначение в таблице выходных изделий по данным продукции
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаПроизводство, ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа - заказ на производство
//  ДанныеПродукции - Структура - данные строки продукции заказа на производство:
//    * КлючСвязи - УникальныйИдентификатор - ключ связи, идентифицирующий строку продукции заказа на производство
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика продукции
//    * ЭтоРабота - Булево - признак, что выполняем работу
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель для работ
//    * Склад - СправочникСсылка.Склады - склад для продукции
//    * ЕстьНазначение - Булево - признак, что назначение в строке продукции заполнено
//    * ПоЗаказуДавальца - Булево - признак, что производим по заказу давальца
//    * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//    * НазначениеЗаказа - СправочникСсылка.Назначения - назначение заказа на производство 
//  РежимОбновления - Строка - режим обновления назначений для выходных изделий ("ПоВсем", "ПоПродукции").
//
Процедура ЗаполнитьНазначениеВТЧВыходныеИзделия(Объект, Знач ДанныеПродукции, Знач РежимОбновления = "ПоВсем") Экспорт
	
	ПараметрыОтбора = Новый Структура("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	
	Для Каждого ЭлементКоллекции Из Объект.ВыходныеИзделия.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ЭлементКоллекции, ДанныеПродукции, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается"));
	КонецЦикла;
		
	Если РежимОбновления = "ПоПродукции" Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКоллекции Из Объект.ВозвратныеОтходы.НайтиСтроки(ПараметрыОтбора) Цикл
		ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(
			ЭлементКоллекции, ДанныеПродукции, ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Фиксированная"));
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет необходимость обновления назначения при окончании редактирования строки выходных изделий.
//
// Параметры:
//  ТекущиеДанные		 - ДанныеФормыКоллекция						 - строка ТЧ выходные изделия
//  СохраненныеЗначения	 - Структура								 - переменная модуля формы, в которой хранятся кешируемые значения
//  ТипСтоимости		 - ПеречислениеСсылка.ТипыСтоимостиВыходныхИзделий	 - тип стоимости выходного изделия
//  НоваяСтрока			 - Булево											 - признак указывает, что это новая строка.
// 
// Возвращаемое значение:
//   - Истина - нужно обновить назначение, Ложь - в противном случае.
//
Функция НеобходимоОбновитьНазначениеВСтрокеТЧВыходныеИзделия(Знач ТекущиеДанные, Знач СохраненныеЗначения, Знач ТипСтоимости, Знач НоваяСтрока = Ложь) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СохраненныеЗначения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается") Тогда
		ИменаПолей = "Номенклатура,Характеристика,Подразделение,Склад,ПроизводитсяВПроцессе";
	Иначе
		ИменаПолей = "Подразделение,Склад,ПроизводитсяВПроцессе";
	КонецЕсли;
	
	Возврат Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущиеДанные, СохраненныеЗначения, ИменаПолей);
	
КонецФункции

// Заполняет реквизит Назначение в строке выходных изделий по данным продукции
//
// Параметры:
//  ТекущиеДанные   - ДанныеФормыЭлементКоллекции - строка ТЧ выходные изделия
//  ДанныеПродукции - Структура - данные строки продукции заказа на производство:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика продукции
//    * ЭтоРабота - Булево - признак, что выполняем работу
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель для работ
//    * Склад - СправочникСсылка.Склады - склад для продукции
//    * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//    * НазначениеЗаказа - СправочникСсылка.Назначения - назначение заказа на производство
//    * ЕстьНазначение - Булево - признак, что назначение в строке продукции заполнено
//    * ПоЗаказуДавальца - Булево - признак, что производим по заказу давальца
//  ТипСтоимости    - ПеречислениеСсылка.ТипыСтоимостиВыходныхИзделий - тип стоимости выходного изделия.
//
Процедура ЗаполнитьНазначениеВСтрокеТЧВыходныеИзделия(ТекущиеДанные, Знач ДанныеПродукции, Знач ТипСтоимости) Экспорт
	
	Если ДанныеПродукции.ПоЗаказуДавальца Тогда // по заказу давальца
		
		ТекущиеДанные.Назначение = ДанныеПродукции.Назначение;
		
	ИначеЕсли ТекущиеДанные.ПроизводитсяВПроцессе Тогда // производится в процессе
		
		Если ДанныеПродукции.ЕстьНазначение Тогда
			ТекущиеДанные.Назначение = ДанныеПродукции.Назначение;
		Иначе
			ТекущиеДанные.Назначение = ДанныеПродукции.НазначениеЗаказа;
		КонецЕсли;
		
	ИначеЕсли ДанныеПродукции.ЕстьНазначение
				И ТипСтоимости = ПредопределенноеЗначение("Перечисление.ТипыСтоимостиВыходныхИзделий.Рассчитывается")
				И ТекущиеДанные.Номенклатура = ДанныеПродукции.Номенклатура
				И ТекущиеДанные.Характеристика = ДанныеПродукции.Характеристика
				И (ДанныеПродукции.ЭтоРабота И ТекущиеДанные.Подразделение = ДанныеПродукции.Подразделение
					ИЛИ НЕ ДанныеПродукции.ЭтоРабота И ТекущиеДанные.Склад = ДанныеПродукции.Склад) Тогда // продукция
		
		ТекущиеДанные.Назначение = ДанныеПродукции.Назначение;
		
	Иначе
		
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет необходимость обновления назначения в ТЧ Материалы и услуги,
//  при изменении значимых реквизитов.
//
// Параметры:
//  ТекущиеДанные		 - ДанныеФормыКоллекция	 - строка ТЧ Материалы и услуги
//  СохраненныеЗначения	 - Структура			 - переменная модуля формы, в которой хранятся кешируемые значения.
// 
// Возвращаемое значение:
//   - Истина - нужно обновить назначение, Ложь - в противном случае.
//
Функция НеобходимоОбновитьНазначениеВТЧМатериалыИУслуги(Знач ТекущиеДанные, Знач СохраненныеЗначения) Экспорт
	
	РежимОбновления = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СохраненныеЗначения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.Назначение <> СохраненныеЗначения.Назначение Тогда
		
		Возврат Истина;
		
	Иначе
			
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Заполняет реквизит Назначение в таблице материалов по данным продукции
//
// Параметры:
//  Объект			 - ДокументОбъект.ЗаказНаПроизводство, ОбработкаОбъект.РедактированиеСпецификацииСтрокиЗаказа	 - заказ на производство
//  ДанныеПродукции	 - Структура																					 - данные строки продукции заказа на производство.
//
Процедура ЗаполнитьНазначениеВТЧМатериалыИУслуги(Объект, Знач ДанныеПродукции) Экспорт
	
	ПараметрыОтбора = Новый Структура("КлючСвязиПродукция", ДанныеПродукции.КлючСвязи);
	
	Для Каждого ЭлементКоллекции Из Объект.МатериалыИУслуги.НайтиСтроки(ПараметрыОтбора) Цикл
		
		ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(ЭлементКоллекции, ДанныеПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет корректность заполнения назначения в строке ТЧ Материалы и услуги.
//
// Параметры:
//  ТекущиеДанные	 - ДанныеФормыКоллекция	 - строка ТЧ Материалы и услуги.
// 
// Возвращаемое значение:
//   - Истина - есть ошибки, Ложь - в противном случае.
//
Функция ЕстьОшибкиЗаполненияНазначенияВСтрокеТЧМатериалыИУслуги(Знач ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.Обособленно И ЗначениеЗаполнено(ТекущиеДанные.Назначение)
		ИЛИ ТекущиеДанные.Обособленно И НЕ ЗначениеЗаполнено(ТекущиеДанные.Назначение) Тогда
		
		Возврат Истина;
		
	Иначе
			
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция проверяет необходимость обновления назначения при окончании редактирования строки материалы и услуги.
//
// Параметры:
//  ТекущиеДанные		 - ДанныеФормыКоллекция	 - строка ТЧ материалы и услуги
//  СохраненныеЗначения	 - Структура			 - переменная модуля формы, в которой хранятся кешируемые значения
//  НоваяСтрока			 - Булево				 - признак указывает, что это новая строка.
// 
// Возвращаемое значение:
//   - Истина - нужно обновить назначение, Ложь - в противном случае.
//
Функция НеобходимоОбновитьНазначениеВСтрокеТЧМатериалыИУслуги(Знач ТекущиеДанные, Знач СохраненныеЗначения, Знач НоваяСтрока = Ложь) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СохраненныеЗначения = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.Обособленно <> СохраненныеЗначения.Обособленно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполненияНазначенияВСтрокеТЧМатериалыИУслуги(ТекущиеДанные) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет реквизит Назначение в строке материалов по данным продукции
//
// Параметры:
//  ТекущиеДанные   - ДанныеФормыЭлементКоллекции - строка ТЧ Материалы и услуги
//  ДанныеПродукции - Структура - данные строки продукции заказа на производство:
//    * Номенклатура - СправочникСсылка.Номенклатура - номенклатура продукции
//    * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика продукции
//    * ЭтоРабота - Булево - признак, что выполняем работу
//    * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение-получатель для работ
//    * Склад - СправочникСсылка.Склады - склад для продукции
//    * Назначение - СправочникСсылка.Назначения - назначение продукции заказа на производство
//    * НазначениеЗаказа - СправочникСсылка.Назначения - назначение заказа на производство
//    * ЕстьНазначение - Булево - признак, что назначение в строке продукции заполнено
//    * ПоЗаказуДавальца - Булево - признак, что производим по заказу давальца.
//
Процедура ЗаполнитьНазначениеВСтрокеТЧМатериалыИУслуги(ТекущиеДанные, Знач ДанныеПродукции) Экспорт
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе ИЛИ ТекущиеДанные.Обособленно Тогда
		
		Если ДанныеПродукции.ЕстьНазначение И (Не ДанныеПродукции.ОбосабливатьПоНазначениюЗаказа Или ТекущиеДанные.ПроизводитсяВПроцессе) Тогда
			ТекущиеДанные.Назначение = ДанныеПродукции.Назначение;
		Иначе
			ТекущиеДанные.Назначение = ДанныеПродукции.НазначениеЗаказа;
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные.Назначение = ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет корректность заполнения варианта обеспечения и флага обособленно в строке ТЧ Материалы и услуги.
//
// Параметры:
//  ПараметрыНоменклатурыТекущейСтроки - Структура - структура с полями:
//   * ЭтоРабота - Булево - признак что в текущей строке номенклатура с типом "Работа".
//  ТекущиеДанные - ДанныеФормыКоллекция - строка ТЧ Материалы и услуги.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки, Ложь - в противном случае.
//
Функция ЕстьОшибкиЗаполненияВариантаОбеспеченияИФлагаОбособленно(Знач ПараметрыНоменклатурыТекущейСтроки, Знач ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.ПроизводитсяВПроцессе И НЕ ТекущиеДанные.Обособленно Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (ТекущиеДанные.Обособленно И НЕ ТекущиеДанные.ЗаказатьНаСклад) И НЕ ТекущиеДанные.ПроизводитсяВПроцессе
		И Не ПараметрыНоменклатурыТекущейСтроки.ЭтоРабота Тогда
		Возврат Истина; // из запасов подразделения обособленно потребляются только производимые в процессе полуфабрикаты
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Рассчитывает значение полей "Вариант обеспечения" и "Обособленно", исходя других реквизитов строки заказа.
//
// Параметры:
//  ПроизводитсяВПроцессе - Булево - значение одноименного реквизита строки заказа.
//  ИзЗапасовПодразделения - значение одноименного реквизита строки заказа.
//
// Возвращаемое значение:
//  см. ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию
//
Функция ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ПроизводитсяВПроцессе, ИзЗапасовПодразделения) Экспорт
	
	Результат = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(ПроизводитсяВПроцессе);
	
	Если ИзЗапасовПодразделения Тогда
		Результат.Товар.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
		Результат.Тара .ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

//-- Устарело_Производство21

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Устарело_Производство21

//++ НЕ УТКА

#Область ВыводДиаграммыГанта

Процедура ВывестиДиаграммуГанта(ДиаграммаГанта, ТекущиеДанные, Ошибки, НеразвернутыеТочки, ВсеДанные = Ложь, Масштаб = "") Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НеразвернутыеТочки = Неопределено;
	
	ДиаграммаГанта.Очистить();
	
	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоДня(ТекущиеДанные.НачатьНеРанее), КонецДня(Макс(ТекущиеДанные.НачатьНеРанее, ТекущиеДанные.ДатаВыпуска)));
	
	НастроитьШкалуВремени(ДиаграммаГанта, Масштаб);
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ВсеДанные", ВсеДанные);
	ПараметрыВывода.Вставить("ТочностьПоШкалеВремени", ПолучитьДоступнуюТочностьПоШкалеВремени(ДиаграммаГанта));
	
	ВывестиЭтапы(ДиаграммаГанта, ТекущиеДанные.ИндексыЭтапов, ТекущиеДанные.Этапы, ДиаграммаГанта, Ошибки, НеразвернутыеТочки, ПараметрыВывода);
	
	ВывестиПериодыНедоступности(ДиаграммаГанта, ТекущиеДанные.ПериодыНедоступности);
	
КонецПроцедуры

Процедура ВывестиЭтапы(ДиаграммаГанта, ИндексыЭтапов, Этапы, ТочкаРодитель, Ошибки, НеразвернутыеТочки, ПараметрыВывода) Экспорт
	
	СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы = Новый Соответствие;
	
	Для каждого ИндексЭтапа Из ИндексыЭтапов Цикл
		
		Этап = Этапы[ИндексЭтапа];
		
		Если ТочкаРодитель.Точки.Количество() = 1 И ТипЗнч(ТочкаРодитель.Точки[0].Расшифровка) = Тип("ФиксированныйМассив") Тогда
			
			ТочкаЭтап = ТочкаРодитель.Точки[0];
			
		Иначе
			
			ТочкаЭтап = ТочкаРодитель.Точки.Добавить();
			
		КонецЕсли;
		
		ТочкаЭтап.Значение    = Этап.КлючСвязи;
		ТочкаЭтап.Текст       = Этап.НаименованиеЭтапа;
		ТочкаЭтап.Расшифровка = Этап.Этап;
		
		Если Этап.ПринятКВыполнению Тогда
			
			ТочкаЭтап.Картинка = БиблиотекаКартинок.ЭтапПроизводстваПринятКВыполнению;
			
		ИначеЕсли ТочкаЭтап.Картинка.Вид = ВидКартинки.Пустая Тогда
			
			ТочкаЭтап.Картинка = БиблиотекаКартинок.ЭтапПроизводства;
			
		КонецЕсли;
		
		Если Ошибки <> Неопределено Тогда
			
			Для каждого Ошибка Из Ошибки Цикл
				
				Если Ошибка.КлючСвязиЭтап = Этап.КлючСвязи Тогда
					
					ТочкаЭтап.Картинка = БиблиотекаКартинок.Предупреждение;
					
					Если ТипЗнч(Ошибка.ВидыРабочихЦентров) = Тип("Массив") Тогда
						
						Для каждого ВидРабочегоЦентра Из Ошибка.ВидыРабочихЦентров Цикл
							
							ВидРабочегоЦентраНаименование = ВидРабочегоЦентра.НаименованиеВидаРабочегоЦентра;
							
							ТочкаВидРабочегоЦентра = ДиаграммаГанта.УстановитьТочку(ВидРабочегоЦентраНаименование + Строка(Этап.КлючСвязи), Этап.КлючСвязи);
							ТочкаВидРабочегоЦентра.Текст = ВидРабочегоЦентраНаименование + НСтр("ru = '. Доступности вида рабочего центра недостаточно для размещения этапа.';
																								|en = '. Work center type availability is not enough to place the stage.'");
							
							РасшифровкаОшибки = Новый Структура;
							РасшифровкаОшибки.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра.ВидРабочегоЦентра);
							РасшифровкаОшибки.Вставить("НачалоПериода", Этап.МожноНачатьНеРанее);
							РасшифровкаОшибки.Вставить("НедостаточноДоступности");
							ТочкаВидРабочегоЦентра.Расшифровка = РасшифровкаОшибки;
							
						КонецЦикла;
						
					Иначе
						
						ПодразделениеНаименование = Этап.НаименованиеПодразделения;
						
						ТочкаПодразделение = ДиаграммаГанта.УстановитьТочку(ПодразделениеНаименование + Строка(Этап.КлючСвязи), Этап.Этап);
						ТочкаПодразделение.Текст = ПодразделениеНаименование + НСтр("ru = '. Не установлен график, по которому работает подразделение.';
																					|en = '. Schedule according to which the business unit operates is not set.'");
						ТочкаПодразделение.Расшифровка = Ошибка.ВидыРабочихЦентров;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Этап.НаКритическомПути Тогда
			
			ТочкаЭтап.Шрифт = Новый Шрифт(ТочкаЭтап.Шрифт,,, Истина);
			
		КонецЕсли;
		
		ВывестиИнтервалыЭтапа(ДиаграммаГанта, Этап, ТочкаЭтап, СледующиеЭтапыГрафика(ИндексыЭтапов, Этапы, Этап), СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы, ПараметрыВывода);
		
		ВывестиПолуфабрикаты(ДиаграммаГанта, Этапы, Этап.Полуфабрикаты, ТочкаЭтап, Ошибки, НеразвернутыеТочки, ПараметрыВывода);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИнтервалыЭтапа(ДиаграммаГанта, Этап, ТочкаЭтап, СледующиеЭтапы, СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы, ПараметрыВывода)
	
	СерияЗанятость = ДиаграммаГанта.УстановитьСерию("Занятость");
	ЗначенияДиаграммыГанта = ДиаграммаГанта.ПолучитьЗначение(ТочкаЭтап, СерияЗанятость);
	
	КоличествоЭтапа = 0;
	ЭтапНулевойДлительности = (НЕ Этап.ПланироватьРаботуВидовРабочихЦентров 
									И Этап.ДлительностьЭтапа = 0);
	
	Для каждого Интервал Из Этап.Интервалы Цикл
		
		ИнтервалДиаграммыГанта = ЗначенияДиаграммыГанта.Добавить();
		
		Если ЗначениеЗаполнено(Интервал.ФактическоеНачало)
			И ЗначениеЗаполнено(Интервал.ФактическоеОкончание) Тогда
			
			ЭтапВыполнен = Истина;
			
			// Если этап выполнили, то нужно использовать даты фактического выполнения
			// чтобы корректно выглядела диаграмма.
			
			Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
			
				НачалоЭтапа = НачалоИнтервалаПланирования(Интервал.ФактическоеНачалоРЦ, Этап.ИнтервалПланирования, Этап.НачалоИнтервалаПланирования);
				ОкончаниеЭтапа = ОкончаниеИнтервалаПланирования(Интервал.ФактическоеОкончаниеРЦ, Этап.ИнтервалПланирования, Этап.ОкончаниеИнтервалаПланирования);
				
			Иначе
				
				НачалоЭтапа = Интервал.ФактическоеНачалоРЦ;
				ОкончаниеЭтапа = Интервал.ФактическоеОкончаниеРЦ;
				
			КонецЕсли;
				
			НачалоПредварительногоБуфера = Мин(Интервал.ФактическоеНачало, НачалоЭтапа);
			ОкончаниеЗавершающегоБуфера = Макс(Интервал.ФактическоеОкончание, ОкончаниеЭтапа);
			
		Иначе
			
			ЭтапВыполнен = Ложь;
			
			НачалоЭтапа = Интервал.НачалоЭтапа;
			ОкончаниеЭтапа = Интервал.ОкончаниеЭтапа;
			
			НачалоПредварительногоБуфера = Интервал.НачалоПредварительногоБуфера;
			ОкончаниеЗавершающегоБуфера = Интервал.ОкончаниеЗавершающегоБуфера;
			
		КонецЕсли;
		
		ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим = (Этап.МожноНачатьНеРанее < Интервал.НачалоПредварительногоБуфера);
		
		ИнтервалДиаграммыГанта.Начало      = НачалоЭтапа;
		ИнтервалДиаграммыГанта.Конец       = ОкончаниеЭтапа;
		ИнтервалДиаграммыГанта.Расшифровка = ТочкаЭтап.Значение;
		ИнтервалДиаграммыГанта.Цвет        = WebЦвета.Зеленый;
		ИнтервалДиаграммыГанта.Текст       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Производство %1 ед/партий изделий, с %2 по %3';
													|en = 'Production of %1 units/batches, from %2 to %3'"),
												Строка(Интервал.Количество),
												Формат(НачалоПредварительногоБуфера, "ДФ='dd.MM.yyyy ЧЧ:мм'"),
												Формат(ОкончаниеЗавершающегоБуфера, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
												
		УточнениеГраницИнтервала(ИнтервалДиаграммыГанта.Начало, ИнтервалДиаграммыГанта.Конец, ПараметрыВывода);
												
		Если Интервал.ЕстьМаршрутныеЛисты Тогда
			
			ИнтервалДиаграммыГанта.Текст = ИнтервалДиаграммыГанта.Текст + " (" + НСтр("ru = 'сформированы маршрутные листы';
																						|en = 'route sheets are generated'") + ")";
			
		КонецЕсли;
												
		Если НачалоПредварительногоБуфера < НачалоЭтапа Тогда
													
			ИнтервалДиаграммыГантаПредварительныйБуфер = ЗначенияДиаграммыГанта.Добавить();
			
			ИнтервалДиаграммыГантаПредварительныйБуфер.Начало = НачалоПредварительногоБуфера;
			ИнтервалДиаграммыГантаПредварительныйБуфер.Конец  = НачалоПредварительногоБуфера;
			
			СвязьПредварительныйБуфер          = ИнтервалДиаграммыГанта.Добавить(ИнтервалДиаграммыГантаПредварительныйБуфер);
			СвязьПредварительныйБуфер.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоКонец;
			СвязьПредварительныйБуфер.Цвет     = WebЦвета.Зеленый;
			
			СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы.Вставить(Интервал.КлючСвязи, Новый Структура("Буфер, Интервал", ИнтервалДиаграммыГантаПредварительныйБуфер, ИнтервалДиаграммыГанта));
			
		Иначе
			
			СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы.Вставить(Интервал.КлючСвязи, Новый Структура("Буфер, Интервал", ИнтервалДиаграммыГанта, ИнтервалДиаграммыГанта));
			
		КонецЕсли;
		
		ИнтервалДобавленияСвязи = ИнтервалДиаграммыГанта;
		
		Если ОкончаниеЗавершающегоБуфера > ОкончаниеЭтапа Тогда
			
			ИнтервалДиаграммыГантаЗавершающийБуфер = ЗначенияДиаграммыГанта.Добавить();
			
			ИнтервалДиаграммыГантаЗавершающийБуфер.Начало = ОкончаниеЗавершающегоБуфера;
			ИнтервалДиаграммыГантаЗавершающийБуфер.Конец  = ОкончаниеЗавершающегоБуфера;
			
			СвязьПредварительныйБуфер          = ИнтервалДиаграммыГанта.Добавить(ИнтервалДиаграммыГантаЗавершающийБуфер);
			СвязьПредварительныйБуфер.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
			СвязьПредварительныйБуфер.Цвет     = WebЦвета.Зеленый;
			
			ИнтервалДобавленияСвязи = ИнтервалДиаграммыГантаЗавершающийБуфер;
			
		КонецЕсли;
		
		Если ЭтапВыполнен Тогда
			
			ИнтервалДиаграммыГанта.Цвет = WebЦвета.НейтральноЗеленый;
			
		ИначеЕсли Интервал.Перегружен Тогда
			
			ИнтервалДиаграммыГанта.Цвет = WebЦвета.Красный;
			
		ИначеЕсли Интервал.ТребуетсяПерепланировать Тогда
			
			ИнтервалДиаграммыГанта.Цвет = WebЦвета.ГрифельноСерый;
			
		ИначеЕсли ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим Тогда
			
			ИнтервалДиаграммыГанта.Цвет = WebЦвета.Васильковый;
			
		Иначе
			
			ИнтервалДиаграммыГанта.Цвет = WebЦвета.Зеленый;
			
		КонецЕсли;
		
		// Добавление связей со следующими этапами
		КоличествоЭтапа = КоличествоЭтапа + Интервал.Количество;
		
		Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
			
			КоличествоСледующегоЭтапа = 0;
			
			Для каждого ИнтервалСледующегоЭтапа Из СледующийЭтап.Интервалы Цикл
				
				КоличествоСледующегоЭтапа = КоличествоСледующегоЭтапа + ИнтервалСледующегоЭтапа.Количество;
				
				Если КоличествоСледующегоЭтапа >= Цел(КоличествоЭтапа * СледующийЭтап.Количество / Этап.Количество)
					И КоличествоСледующегоЭтапа - ИнтервалСледующегоЭтапа.Количество < Цел(КоличествоЭтапа * СледующийЭтап.Количество / Этап.Количество) Тогда
					
					НачалоСледующегоИнтервала = СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы.Получить(ИнтервалСледующегоЭтапа.КлючСвязи).Буфер;
					СледующийИнтервал = СоответствиеКлючейСвязиИнтерваловИИнтерваловДиаграммы.Получить(ИнтервалСледующегоЭтапа.КлючСвязи).Интервал;
					Связь = ИнтервалДобавленияСвязи.Добавить(НачалоСледующегоИнтервала);
					
					Если ИнтервалСледующегоЭтапа.НачалоПредварительногоБуфера <= ОкончаниеЗавершающегоБуфера 
							И НЕ ЭтапВыполнен 
							И НЕ ЭтапНулевойДлительности Тогда
					
						Связь.Цвет = WebЦвета.Красный;
						ИнтервалСледующегоЭтапа.ТребуетсяПерепланировать = Истина;
						
						Если НЕ ИнтервалСледующегоЭтапа.МаршрутныеЛистыПереданыКВыполнению Тогда
							
							СледующийИнтервал.Цвет = WebЦвета.ГрифельноСерый;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
		// Обновление полного интервала
		ДиаграммаГанта.УстановитьПолныйИнтервал(
			Мин(ДиаграммаГанта.НачалоПолногоИнтервала, НачалоПредварительногоБуфера),
			Макс(ДиаграммаГанта.КонецПолногоИнтервала, ОкончаниеЗавершающегоБуфера));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПолуфабрикаты(ДиаграммаГанта, Этапы, Полуфабрикаты, ТочкаРодитель, Ошибки, НеразвернутыеТочки, ПараметрыВывода)
	
	ВсеДанные = Ложь;
	Если ПараметрыВывода.Свойство("ВсеДанные") Тогда
		ВсеДанные = ПараметрыВывода.ВсеДанные;
	КонецЕсли;
	
	Если НеразвернутыеТочки = Неопределено Тогда
		
		НеразвернутыеТочкиКопия = Новый Массив;
		
	Иначе
		
		НеразвернутыеТочкиКопия = Новый Массив(НеразвернутыеТочки);
		
	КонецЕсли;
	
	Для каждого Полуфабрикат Из Полуфабрикаты Цикл
		
		ВывестиПодчиненные = Полуфабрикат.ИндексыЭтапов.Количество() > 0;
		
		ТочкаПолуфабрикат = ТочкаРодитель.Точки.Добавить();
		
		ТочкаПолуфабрикат.Значение           = Полуфабрикат.КлючСвязи;
		ТочкаПолуфабрикат.Текст              = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Полуфабрикат.Номенклатура, Полуфабрикат.Характеристика);
		ТочкаПолуфабрикат.Расшифровка        = Полуфабрикат.Номенклатура;
		ТочкаПолуфабрикат.Картинка           = БиблиотекаКартинок.Полуфабрикат;
		ТочкаПолуфабрикат.ПриоритетЦвета     = Истина;
		ТочкаПолуфабрикат.Цвет               = WebЦвета.СеребристоСерый;
		ТочкаПолуфабрикат.ДополнительныйЦвет = ТочкаПолуфабрикат.Цвет;
		
		Если Полуфабрикат.НаКритическомПути Тогда
			
			ТочкаПолуфабрикат.Шрифт = Новый Шрифт(ТочкаПолуфабрикат.Шрифт,,, Истина);
			
		КонецЕсли;
		
		ВывестиИнтервалыПолуфабриката(ДиаграммаГанта, Полуфабрикат.Интервалы, ТочкаПолуфабрикат);
		
		Если ВывестиПодчиненные Тогда
			
			Если ВсеДанные Тогда
				
				ВывестиЭтапы(ДиаграммаГанта, Полуфабрикат.ИндексыЭтапов, Этапы, ТочкаПолуфабрикат, Ошибки, НеразвернутыеТочки, ПараметрыВывода);
				
			Иначе
				
				// Фиктивная точка для возможности развернуть полуфабрикат до этапов
				ФиктивнаяТочка = ТочкаПолуфабрикат.Точки.Добавить();
				ФиктивнаяТочка.Значение = Новый УникальныйИдентификатор;
				ФиктивнаяТочка.Расшифровка = Полуфабрикат.ИндексыЭтапов;
				
				НеразвернутыеТочкиКопия.Добавить(Полуфабрикат.КлючСвязи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НеразвернутыеТочки = Новый ФиксированныйМассив(НеразвернутыеТочкиКопия);
	
КонецПроцедуры

Процедура ВывестиИнтервалыПолуфабриката(ДиаграммаГанта, Интервалы, ТочкаПолуфабрикат)
	
	СерияЗанятость = ДиаграммаГанта.УстановитьСерию("Занятость");
	ЗначенияДиаграммыГантаЭтап = ДиаграммаГанта.ПолучитьЗначение(ТочкаПолуфабрикат.Родитель, СерияЗанятость);
	ЗначенияДиаграммыГантаПолуфабрикат = ДиаграммаГанта.ПолучитьЗначение(ТочкаПолуфабрикат, СерияЗанятость);
	
	Для каждого Интервал Из Интервалы Цикл
		
		ИнтервалДиаграммыГанта = ЗначенияДиаграммыГантаПолуфабрикат.Добавить();
		
		ИнтервалДиаграммыГанта.Начало = Интервал.ДатаЗапуска;
		ИнтервалДиаграммыГанта.Конец = Интервал.ДатаВыпуска;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПериодыНедоступности(ДиаграммаГанта, ПериодыНедоступности)
	
	ДиаграммаГанта.ИнтервалыФона.Очистить();
	
	Для каждого ДанныеНедоступности Из ПериодыНедоступности Цикл
		
		ИнтервалФонаДиаграммыГанта = ДиаграммаГанта.ИнтервалыФона.Добавить(ДанныеНедоступности.Начало, ДанныеНедоступности.Окончание);
		ИнтервалФонаДиаграммыГанта.Цвет = WebЦвета.СветлоСерый;
		
	КонецЦикла;  
	
КонецПроцедуры

Процедура НастроитьШкалуВремени(ДиаграммаГанта, Знач Масштаб = "")
	
	ШкалаВремениЭлементы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	
	// Удаление всех элементов шкалы, кроме первого
	Для Индекс = -(ШкалаВремениЭлементы.Количество() - 1) По -1 Цикл
		
		ШкалаВремениЭлементы.Удалить(ШкалаВремениЭлементы[-Индекс]);
		
	КонецЦикла;
	
	ПервыйЭлементШкалы = ШкалаВремениЭлементы[0];
	ВторойЭлементШкалы = ШкалаВремениЭлементы.Добавить();
	
	ДлительностьБольшеМесяца = (ДиаграммаГанта.КонецПолногоИнтервала - ДиаграммаГанта.НачалоПолногоИнтервала > 31 * 86400);
	ДлительностьБольшеГода   = (ДиаграммаГанта.КонецПолногоИнтервала - ДиаграммаГанта.НачалоПолногоИнтервала > 366 * 86400);
	
	Масштаб = ?(ПустаяСтрока(Масштаб), ?(ДлительностьБольшеГода, "Мелкий", ?(ДлительностьБольшеМесяца, "Средний", "Крупный")), Масштаб);
	
	ПервыйЭлементШкалы.ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	ПервыйЭлементШкалы.ЛинииДелений = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	
	Если Масштаб = "Крупный" Тогда
		
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.День;
		ВторойЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Час;
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
		
	ИначеЕсли Масштаб = "Средний" Тогда
		
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ВторойЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.День;
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц; 
		ДиаграммаГанта.КратностьПериодическогоВарианта = 1;
		
	Иначе
		
		ПервыйЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Месяц;
		ВторойЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Неделя;
		
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Квартал; 
		ДиаграммаГанта.КратностьПериодическогоВарианта = 2;
		
	КонецЕсли;
	
	ВторойЭлементШкалы.ЛинииДелений = ?(ВторойЭлементШкалы.Единица = ТипЕдиницыШкалыВремени.Час, 
											Новый Линия(ТипЛинииДиаграммы.Точечная, 1), 
											Новый Линия(ТипЛинииДиаграммы.Сплошная, 1));
	
КонецПроцедуры

Функция ПолучитьДоступнуюТочностьПоШкалеВремени(ДиаграммаГанта) Экспорт
	
	ШкалаВремениЭлементы = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы;
	ЕдиницаИзмерения = ШкалаВремениЭлементы[ШкалаВремениЭлементы.Количество() - 1].Единица;
	
	Если ЕдиницаИзмерения = ТипЕдиницыШкалыВремени.Час Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час");
	ИначеЕсли ЕдиницаИзмерения = ТипЕдиницыШкалыВремени.Неделя Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День");
	КонецЕсли;
	
КонецФункции

Функция СледующиеЭтапыГрафика(ИндексыЭтапов, Этапы, Этап)
	
	Результат = Новый Массив;
	
	Для каждого ИндексЭтапа Из ИндексыЭтапов Цикл
		
		Если Этапы[ИндексЭтапа].НомерЭтапа = Этап.НомерСледующегоЭтапа Тогда
			
			Результат.Добавить(Этапы[ИндексЭтапа]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УточнениеГраницИнтервала(НачалоИнтервала, КонецИнтервала, ПараметрыВывода = Неопределено)
	
	Перем ТочностьПоШкалеВремени;
	
	Если ПараметрыВывода = Неопределено
		ИЛИ ПараметрыВывода.Свойство("ТочностьПоШкалеВремени", ТочностьПоШкалеВремени) = Ложь Тогда
		
		ТочностьПоШкалеВремени = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День");
		
	КонецЕсли;
	
	Если ТочностьПоШкалеВремени = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
		МинДлительность = 2 * 60;
	ИначеЕсли ТочностьПоШкалеВремени = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
		МинДлительность = 25 * 60;
	Иначе 
		МинДлительность = 200 * 60;
	КонецЕсли;
	
	Длительность = Макс(КонецИнтервала - НачалоИнтервала, МинДлительность);
	
	НачалоИнтервала = Макс(НачалоИнтервалаПланирования(НачалоИнтервала, ТочностьПоШкалеВремени) + МинДлительность * 2, Мин(НачалоИнтервала, ОкончаниеИнтервалаПланирования(НачалоИнтервала, ТочностьПоШкалеВремени) - 3 * МинДлительность + 1));
	КонецИнтервала  = Макс(НачалоИнтервалаПланирования(КонецИнтервала, ТочностьПоШкалеВремени) + МинДлительность * 3, Мин(НачалоИнтервала + Длительность, ОкончаниеИнтервалаПланирования(КонецИнтервала, ТочностьПоШкалеВремени) - 2 * МинДлительность) + 1);
	
КонецПроцедуры

#КонецОбласти

#Область ДиагностикаГрафикаПроизводства

Процедура ВывестиДиаграммуЭтапов(ДиаграммаГанта, ТаблицаЭтапы, Ошибки = Неопределено, ПериодыНедоступности = Неопределено, ЦветНедоступногоПериодаДиаграммы = Неопределено) Экспорт
	
	ДиаграммаГанта.Обновление = Ложь;
	ДиаграммаГанта.Очистить();
	
	ДобавитьШкалуЧас = Ложь;
	
	ПериодыЭтапов = Новый Соответствие;
	
	ИнтервалыДиаграммы = Новый Соответствие;
	
	СерияЗанятость = ДиаграммаГанта.УстановитьСерию("Занятость");
	
	// Вывод этапов
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ВывестиЭтапыРекурсивно(ПустойКлюч, ТаблицаЭтапы, Ошибки, ИнтервалыДиаграммы, СерияЗанятость, Неопределено, ДиаграммаГанта);
		
	// Добавление связей между этапами
	ДатаНачалаПолногоИнтервала    = Неопределено;
	ДатаОкончанияПолногоИнтервала = Неопределено;
	
	Для каждого Этап Из ТаблицаЭтапы Цикл
		
		ЭтапКоличество = 0;
		ЭтапНулевойДлительности = (НЕ Этап.ПланироватьРаботуВидовРабочихЦентров 
										И Этап.ДлительностьЭтапа = 0);
			
		СледующиеЭтапы = СледующиеЭтапы(ТаблицаЭтапы, Этап);
		
		Для каждого РазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
			
			Если РазмещениеЭтапа.ФактическоеНачало <> '000101010000' 
				И РазмещениеЭтапа.ФактическоеОкончание <> '000101010000' Тогда
				
				// Если этап выполнили, то нужно использовать даты фактического выполнения
				// чтобы корректно выглядела диаграмма.
				НачалоПредварительногоБуфера = НачалоИнтервалаПланирования(РазмещениеЭтапа.ФактическоеНачало, Этап.ИнтервалПланирования);
				ОкончаниеЗавершающегоБуфера = ОкончаниеИнтервалаПланирования(РазмещениеЭтапа.ФактическоеОкончание, Этап.ИнтервалПланирования);
				ЭтапВыполнен = Истина;
			Иначе
				НачалоПредварительногоБуфера = РазмещениеЭтапа.НачалоПредварительногоБуфера;
				ОкончаниеЗавершающегоБуфера = РазмещениеЭтапа.ОкончаниеЗавершающегоБуфера;
				ЭтапВыполнен = Ложь;
			КонецЕсли; 
			
			ДатаНачалаПолногоИнтервала = ?(ДатаНачалаПолногоИнтервала <> Неопределено, 
											Мин(НачалоПредварительногоБуфера, ДатаНачалаПолногоИнтервала), 
											НачалоПредварительногоБуфера);
											
			ДатаОкончанияПолногоИнтервала = ?(ДатаОкончанияПолногоИнтервала <> Неопределено, 
											Макс(ОкончаниеЗавершающегоБуфера, ДатаОкончанияПолногоИнтервала), 
											ОкончаниеЗавершающегоБуфера);
											
			Интервал = ИнтервалыДиаграммы.Получить(РазмещениеЭтапа.ИдентификаторИнтервала).ОкончаниеИнтервала;
			ЭтапКоличество = ЭтапКоличество + РазмещениеЭтапа.Количество;
			
			Для каждого СледующийЭтап Из СледующиеЭтапы Цикл
				
				СледующийЭтапКоличество = 0;
				
				Для каждого РазмещениеСледующегоЭтапа Из СледующийЭтап.РазмещениеЭтапа Цикл
					
					СледующийЭтапКоличество = СледующийЭтапКоличество + РазмещениеСледующегоЭтапа.Количество;
					
					Если СледующийЭтапКоличество >= Цел(ЭтапКоличество * СледующийЭтап.Количество / Этап.Количество)
						И СледующийЭтапКоличество - РазмещениеСледующегоЭтапа.Количество < Цел(ЭтапКоличество * СледующийЭтап.Количество / Этап.Количество) Тогда
						
						НачалоСледующегоИнтервала = ИнтервалыДиаграммы.Получить(РазмещениеСледующегоЭтапа.ИдентификаторИнтервала).НачалоИнтервала;
						СледующийИнтервал = ИнтервалыДиаграммы.Получить(РазмещениеСледующегоЭтапа.ИдентификаторИнтервала).Интервал;
						Связь = Интервал.Добавить(НачалоСледующегоИнтервала);
						
						Если РазмещениеСледующегоЭтапа.НачалоПредварительногоБуфера <= РазмещениеЭтапа.ОкончаниеЗавершающегоБуфера 
							И НЕ ЭтапВыполнен 
							И НЕ ЭтапНулевойДлительности Тогда
							
							Связь.Цвет = WebЦвета.Красный;
							РазмещениеСледующегоЭтапа.ТребуетсяПерепланировать = Истина;
							
							Если НЕ РазмещениеСледующегоЭтапа.МаршрутныеЛистыПереданыКВыполнению Тогда
			
								СледующийИнтервал.Цвет = WebЦвета.ГрифельноСерый;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Установка полного интервала диаграммы
	Если ЗначениеЗаполнено(ДатаНачалаПолногоИнтервала) И ЗначениеЗаполнено(ДатаОкончанияПолногоИнтервала) Тогда
		
		ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоДня(ДатаНачалаПолногоИнтервала), КонецДня(ДатаОкончанияПолногоИнтервала));
		
	КонецЕсли;
	
	НастроитьШкалуВремени(ДиаграммаГанта);
	
	Если ПериодыНедоступности <> Неопределено Тогда
		
		ДиаграммаГанта.ИнтервалыФона.Очистить();
		
		Для каждого ДанныеНедоступности Из ПериодыНедоступности Цикл
			
			ИнтервалФонаДиаграммыГанта = ДиаграммаГанта.ИнтервалыФона.Добавить(ДанныеНедоступности.Начало, ДанныеНедоступности.Окончание);
			ИнтервалФонаДиаграммыГанта.Цвет = ЦветНедоступногоПериодаДиаграммы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДиаграммаГанта.Обновление = Истина;
	
КонецПроцедуры

Процедура УстановитьПараметрыДиаграммыПоУмолчанию(Диаграмма) Экспорт

	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	Диаграмма.Окантовка = Истина;
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ВертикальнаяПрокрутка = Истина;
	Диаграмма.ОтображатьПустыеЗначения = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	
КонецПроцедуры

Процедура ВывестиЭтапыРекурсивно(КлючСвязиПолуфабрикат, ТаблицаЭтапы, Ошибки, ИнтервалыДиаграммы, СерияЗанятость, РодительЭтапа, ДиаграммаГанта)

	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	НайденныеСтроки = ТаблицаЭтапы.НайтиСтроки(Новый Структура("КлючСвязиПолуфабрикат", КлючСвязиПолуфабрикат));
	
	Для каждого ТекущийЭтап Из НайденныеСтроки Цикл
		
		ТочкаЭтап = ВывестиЭтап(ТекущийЭтап, Ошибки, РодительЭтапа, ДиаграммаГанта);
		
		// Вывод интервалов, в которых выполняется этап
		ЗначениеЭтап = ДиаграммаГанта.ПолучитьЗначение(ТочкаЭтап, СерияЗанятость);
		ВывестиРазмещениеЭтапа(ТекущийЭтап, ЗначениеЭтап, ИнтервалыДиаграммы);
		
		Для каждого СтрокаМатериал Из ТекущийЭтап.Материалы Цикл
			
			Если НЕ СтрокаМатериал.ПроизводитсяВПроцессе Тогда
				Продолжить;
			КонецЕсли;
			
			ТочкаМатериал = ДиаграммаГанта.УстановитьТочку(СтрокаМатериал.КлючСвязиПолуфабрикат, ТекущийЭтап.КлючСвязи);
			
			ТочкаМатериал.Текст = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
												СтрокаМатериал.Номенклатура, 
												СтрокаМатериал.Характеристика);
												
			ТочкаМатериал.Расшифровка = СтрокаМатериал.Номенклатура;
			ТочкаМатериал.Картинка = БиблиотекаКартинок.Полуфабрикат;
			
			ВывестиЭтапыРекурсивно(
					СтрокаМатериал.КлючСвязиПолуфабрикат, 
					ТаблицаЭтапы, 
					Ошибки, 
					ИнтервалыДиаграммы, 
					СерияЗанятость, 
					СтрокаМатериал.КлючСвязиПолуфабрикат, 
					ДиаграммаГанта);
			
		КонецЦикла; 
		
		Если КлючСвязиПолуфабрикат = ПустойКлюч Тогда
			ДиаграммаГанта.РазвернутьТочку(ТочкаЭтап, Истина);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиЭтап(Этап, Ошибки, РодительЭтапа, ДиаграммаГанта)

	Если Этап.ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
		ДобавитьШкалуЧас = Истина;
	КонецЕсли; 

	ТочкаЭтап = ДиаграммаГанта.УстановитьТочку(Этап.КлючСвязи, РодительЭтапа);
	ТочкаЭтап.Текст = Этап.НаименованиеЭтапа;
	ТочкаЭтап.Расшифровка = Этап.Этап;
	
	Если Этап.ПринятКВыполнению Тогда
		ТочкаЭтап.Картинка = БиблиотекаКартинок.ЭтапПроизводстваПринятКВыполнению;
	ИначеЕсли ТочкаЭтап.Картинка.Вид = ВидКартинки.Пустая Тогда
		ТочкаЭтап.Картинка = БиблиотекаКартинок.ЭтапПроизводства;
	КонецЕсли; 
	
	Если Ошибки <> Неопределено Тогда
		
		Для каждого Ошибка Из Ошибки Цикл
			
			Если Ошибка.КлючСвязиЭтап = Этап.КлючСвязи Тогда
				
				ТочкаЭтап.Картинка = БиблиотекаКартинок.Предупреждение;
				
				Если ТипЗнч(Ошибка.ВидыРабочихЦентров) = Тип("Массив") Тогда
					
					Для каждого ВидРабочегоЦентра Из Ошибка.ВидыРабочихЦентров Цикл
						
						ВидРабочегоЦентраНаименование = ВидРабочегоЦентра.НаименованиеВидаРабочегоЦентра;
						
						ТочкаВидРабочегоЦентра = ДиаграммаГанта.УстановитьТочку(ВидРабочегоЦентраНаименование + Строка(Этап.КлючСвязи), Этап.КлючСвязи);
						ТочкаВидРабочегоЦентра.Текст = ВидРабочегоЦентраНаименование + НСтр("ru = '. Доступности вида рабочего центра недостаточно для размещения этапа.';
																							|en = '. Work center type availability is not enough to place the stage.'");
						
						РасшифровкаОшибки = Новый Структура;
						РасшифровкаОшибки.Вставить("ВидРабочегоЦентра", ВидРабочегоЦентра.ВидРабочегоЦентра);
						РасшифровкаОшибки.Вставить("НачалоПериода", Этап.МожноНачатьНеРанее);
						РасшифровкаОшибки.Вставить("НедостаточноДоступности");
						ТочкаВидРабочегоЦентра.Расшифровка = РасшифровкаОшибки;
						
					КонецЦикла;
					
				Иначе
					
					ПодразделениеНаименование = Этап.НаименованиеПодразделения;
					
					ТочкаПодразделение = ДиаграммаГанта.УстановитьТочку(ПодразделениеНаименование + Строка(Этап.КлючСвязи), Этап.КлючСвязи);
					ТочкаПодразделение.Текст = ПодразделениеНаименование + НСтр("ru = '. Не установлен график, по которому работает подразделение.';
																				|en = '. Schedule according to which the business unit operates is not set.'");
					ТочкаПодразделение.Расшифровка = Ошибка.ВидыРабочихЦентров;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТочкаЭтап;
	
КонецФункции

Процедура ВывестиРазмещениеЭтапа(Этап, ЗначениеЭтап, ИнтервалыДиаграммы)
	
	ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим = Ложь;
	
	// Определим есть ли доступное время между окончанием предыдущего этапа и началом текущего
	// Если время есть, то дальше выделим этап цветом, 
	// чтобы пользователь мог видеть, что этап можно разместить раньше.
	ТекущийИнтервал = Этап.МожноНачатьНеРанее;
	
	Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда
		НачалоРаботыИсполнителей = ПланированиеПроизводстваКлиентСервер.НачалоИнтервалаПланирования(Этап.НачалоРаботыИсполнителей, Этап.ИнтервалПланирования);
	Иначе
		НачалоРаботыИсполнителей = НачалоДня(Этап.НачалоРаботыИсполнителей);
	КонецЕсли;
	
	Пока ТекущийИнтервал < НачалоРаботыИсполнителей Цикл
		
		ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим = Истина;
		Для каждого ИсполнительЭтапа Из Этап.Исполнители Цикл
			СтруктураПоиска = Новый Структура("ДатаИнтервала", ТекущийИнтервал);
			СписокСтрок = ИсполнительЭтапа.Загрузка.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 ИЛИ СписокСтрок[0].Свободно = 0 Тогда
				// У этого исполнителя нет доступного времени
				ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим Тогда
			Прервать;
		КонецЕсли;
		
		Если Этап.ПланироватьРаботуВидовРабочихЦентров Тогда 
			ТекущийИнтервал = ПланированиеПроизводстваКлиентСервер.ОкончаниеИнтервалаПланирования(ТекущийИнтервал, Этап.ИнтервалПланирования) + 1;
		Иначе
			ТекущийИнтервал = КонецДня(ТекущийИнтервал) + 1;
		КонецЕсли;
			
	КонецЦикла;
	
	Для каждого РазмещениеЭтапа Из Этап.РазмещениеЭтапа Цикл
		
		Если РазмещениеЭтапа.ФактическоеНачало <> '000101010000' 
			И РазмещениеЭтапа.ФактическоеОкончание <> '000101010000' Тогда
			
			// Если этап выполнили, то нужно использовать даты фактического выполнения
			// чтобы корректно выглядела диаграмма.
			НачалоЭтапа = НачалоИнтервалаПланирования(РазмещениеЭтапа.ФактическоеНачалоРЦ, Этап.ИнтервалПланирования);
			ОкончаниеЭтапа = ОкончаниеИнтервалаПланирования(РазмещениеЭтапа.ФактическоеОкончаниеРЦ, Этап.ИнтервалПланирования);
			НачалоПредварительногоБуфера = Мин(РазмещениеЭтапа.ФактическоеНачало, НачалоЭтапа);
			ОкончаниеЗавершающегоБуфера = Макс(РазмещениеЭтапа.ФактическоеОкончание, ОкончаниеЭтапа);
			ЭтапВыполнен = Истина;
		Иначе
			НачалоЭтапа = РазмещениеЭтапа.НачалоЭтапа;
			ОкончаниеЭтапа = РазмещениеЭтапа.ОкончаниеЭтапа;
			НачалоПредварительногоБуфера = РазмещениеЭтапа.НачалоПредварительногоБуфера;
			ОкончаниеЗавершающегоБуфера = РазмещениеЭтапа.ОкончаниеЗавершающегоБуфера;
			ЭтапВыполнен = Ложь;
		КонецЕсли; 
		
		Интервал = ЗначениеЭтап.Добавить();
		
		Интервал.Начало      = НачалоЭтапа;
		Интервал.Конец       = ОкончаниеЭтапа;
		Интервал.Расшифровка = Этап.КлючСвязи;
		Интервал.Текст       = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Производство %1 ед/партий изделий, с %2 по %3';
										|en = 'Production of %1 units/batches, from %2 to %3'"),
									Строка(РазмещениеЭтапа.Количество),
									Формат(НачалоПредварительногоБуфера, "ДФ='dd.MM.yyyy ЧЧ:мм'"),
									Формат(ОкончаниеЗавершающегоБуфера, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
									
		Если РазмещениеЭтапа.ЕстьМаршрутныеЛисты Тогда
			Интервал.Текст = Интервал.Текст + " (" + НСтр("ru = 'сформированы маршрутные листы';
															|en = 'route sheets are generated'") + ")";
		КонецЕсли;
		
		УточнениеГраницИнтервала(Интервал.Начало, Интервал.Конец);
		
		Если ЭтапВыполнен Тогда
			
			Интервал.Цвет = WebЦвета.НейтральноЗеленый;
			
		ИначеЕсли РазмещениеЭтапа.Перегружен Тогда
			
			Интервал.Цвет = WebЦвета.Красный;
			
		ИначеЕсли РазмещениеЭтапа.ТребуетсяПерепланировать Тогда
			
			Интервал.Цвет = WebЦвета.ГрифельноСерый;
			
		ИначеЕсли ЕстьДоступноеВремяМеждуПредыдущимЭтапомИТекущим Тогда
			
			Интервал.Цвет = WebЦвета.Васильковый;
			
		Иначе
			
			Интервал.Цвет = WebЦвета.Зеленый;
			
		КонецЕсли;
		
		ИдентификаторИнтервала = Новый УникальныйИдентификатор;
		РазмещениеЭтапа.ИдентификаторИнтервала = ИдентификаторИнтервала;
		
		НачалоИнтервала = Интервал;
		ОкончаниеИнтервала = Интервал;
		
		Если НачалоПредварительногоБуфера < НачалоЭтапа Тогда
			
			НачалоИнтервала = ЗначениеЭтап.Добавить();
			НачалоИнтервала.Начало = НачалоПредварительногоБуфера;
			НачалоИнтервала.Конец = НачалоПредварительногоБуфера;
			
			Связь = Интервал.Добавить(НачалоИнтервала);
			Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоКонец;
			Связь.Цвет = WebЦвета.Зеленый;
			
		КонецЕсли;
		
		Если ОкончаниеЗавершающегоБуфера > ОкончаниеЭтапа Тогда
			
			ОкончаниеИнтервала = ЗначениеЭтап.Добавить();
			ОкончаниеИнтервала.Начало = ОкончаниеЗавершающегоБуфера;
			ОкончаниеИнтервала.Конец = ОкончаниеЗавершающегоБуфера;
			
			Связь = Интервал.Добавить(ОкончаниеИнтервала);
			Связь.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
			Связь.Цвет = WebЦвета.Зеленый;
			
		КонецЕсли;
		
		ИнтервалыДиаграммы.Вставить(ИдентификаторИнтервала, Новый Структура("НачалоИнтервала, Интервал, ОкончаниеИнтервала", НачалоИнтервала, Интервал, ОкончаниеИнтервала));
		
	КонецЦикла;
	
КонецПроцедуры

Функция СледующиеЭтапы(Этапы, Этап)
	
	Результат = Новый Массив;
	
	// Следующий этап не указан и не производятся в процессе
	Если НЕ ЗначениеЗаполнено(Этап.НомерСледующегоЭтапа) И
		НЕ ЗначениеЗаполнено(Этап.КлючСвязиЭтапы) Тогда
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Поиск следующих этапов
	ПараметрыОтбораСледующиеЭтапы = Новый Структура("КлючСвязиПродукция");
	ПараметрыОтбораСледующиеЭтапы.КлючСвязиПродукция = Этап.КлючСвязиПродукция;
	
	Если ЗначениеЗаполнено(Этап.НомерСледующегоЭтапа) Тогда
		
		ПараметрыОтбораСледующиеЭтапы.Вставить("НомерЭтапа", Этап.НомерСледующегоЭтапа);
		ПараметрыОтбораСледующиеЭтапы.Вставить("Спецификация", Этап.Спецификация);
		ПараметрыОтбораСледующиеЭтапы.Вставить("ЭтапВосстановленияБрака", Этап.ЭтапВосстановленияБрака);
		
		Если Этап.ЭтапВосстановленияБрака Тогда
			
			Результат = Этапы.НайтиСтроки(ПараметрыОтбораСледующиеЭтапы);
			
			Если Результат.Количество() = 0 Тогда
				
				ПараметрыОтбораСледующиеЭтапы.ЭтапВосстановленияБрака = Ложь;
				
			КонецЕсли;
			
			Результат = Этапы.НайтиСтроки(ПараметрыОтбораСледующиеЭтапы);
			
		Иначе
		
			Результат = Этапы.НайтиСтроки(ПараметрыОтбораСледующиеЭтапы);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Этап.КлючСвязиЭтапы) Тогда
		
		ПараметрыОтбораСледующиеЭтапы.Вставить("КлючСвязи", Этап.КлючСвязиЭтапы);
		Результат = Этапы.НайтиСтроки(ПараметрыОтбораСледующиеЭтапы);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

//-- Устарело_Производство21

#Область Прочее

//++ НЕ УТКА

Функция ВыровнятьПериодПоГраницеИнтервалаПланирования(Период, ИнтервалПланирования, Граница)
	
	Результат = Период;
	
	Если ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Час") Тогда
		
		Результат = НачалоЧаса(Результат) + (Граница - '00010101');
		
	ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.День") Тогда
		
		Результат = НачалоДня(Результат) + (Граница - '00010101');
		
	ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Неделя") Тогда
		
		Результат = НачалоНедели(Результат) + (Граница - '00010101');
		
	ИначеЕсли ИнтервалПланирования = ПредопределенноеЗначение("Перечисление.ТочностьГрафикаПроизводства.Месяц") Тогда
		
		Если КонецМесяца(Результат) > Граница Тогда
		
			Результат = НачалоМесяца(Результат) + (Граница - '00010101');
			
		Иначе
			
			Результат = КонецМесяца(Результат) - (86400 - (Граница - '00010101') % 86400) + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПересчетаКоличестваЕдиниц(ТекущаяСтрока, ИмяТабличнойЧасти) Экспорт

	Если ИмяТабличнойЧасти = "МатериалыИУслуги" И НЕ ТекущаяСтрока.ЗаказатьНаСклад Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Возврат ПараметрыПересчета;
	ИначеЕсли (ИмяТабличнойЧасти = "ВыходныеИзделия" ИЛИ ИмяТабличнойЧасти = "ВозвратныеОтходы") 
		И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Склад) Тогда
		ПараметрыПересчета = Новый Структура("НужноОкруглять", Ложь);
		Возврат ПараметрыПересчета;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти
