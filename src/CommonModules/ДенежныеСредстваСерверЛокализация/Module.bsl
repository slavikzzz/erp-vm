
#Область ПрограммныйИнтерфейс

// Создает платежные документы, либо формирует данные заполнения для создания одного платежного документа.
//
// Параметры:
//    СтрокиГрафика - Массив - Ключи записей графика платежей
//    ТипДокумента - Строка - Тип создаваемых документов. Если не задан, будет определен автоматически.
//
// Возвращаемое значение:
//    Структура:
//        ОткрыватьФормуПомощника - Булево - Признак необходимости открытия формы помощника создания документов
//        ДокументКСозданию - Структура - Данные заполнения единственного документа
//        ДлительнаяОперация - Структура - Длительная операция создания нескольких документов
//        АдресСтрокГрафика - Строка - Адрес временного хранилища, в котором содержатся оплачиваемые строки графика.
//
Функция ОплатитьСтрокиГрафика(СтрокиГрафика, ТипДокумента) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("ПоддержкаБанковскогоИКазначейскогоСопровожденияГосконтрактов") Тогда
		Если ТребуетсяКонтрольГОЗ(СтрокиГрафика) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ОткрыватьФормуПомощника", Истина);
			Результат.Вставить("ОткрыватьФормуПомощникаНемедленно", Истина);
			Результат.Вставить("ТребуетсяКонтрольГОЗ", Истина);
			Результат.Вставить("АдресСтрокГрафика", ПоместитьВоВременноеХранилище(СтрокиГрафика));
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	Возврат Неопределено;
	
КонецФункции

// Формирует варианты наименования юридического лица в соответствии с его организационно-правовой формой.
//
// Параметры:
//    Наименование - Строка - Наименование юр. лица.
//
// Возвращаемое значение:
//    Структура - Наименование, РабочееНаименование, ПолноеНаименование.
//
Функция НаименованиеОрганизации(Знач Наименование) Экспорт
	
	Наименование = СокрЛП(Наименование);
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, Наименование, Наименование);
	
	//++ Локализация
	Если УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ООО';
																	|en = 'LLC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ОАО';
																			|en = 'JSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ЗАО';
																			|en = 'CJSC'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'ИП';
																			|en = 'IE'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'IE'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Общество с ограниченной ответственностью';
																			|en = 'Limited liability company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Общество с ограниченной ответственностью';
															|en = 'Limited liability company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ООО';
														|en = 'LLC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Открытое акционерное общество';
																			|en = 'Open Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Открытое акционерное общество';
															|en = 'Open Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ОАО';
														|en = 'JSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Закрытое акционерное общество';
																			|en = 'Closed Joint-Stock Company'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Закрытое акционерное общество';
															|en = 'Closed Joint-Stock Company'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ЗАО';
														|en = 'CJSC'");
	ИначеЕсли УбратьИзНаименованияОрганизационнуюФорму(Наименование, НСтр("ru = 'Индивидуальный предприниматель';
																			|en = 'Individual entrepreneur'")) Тогда
		ОрганизационноПравоваяФорма				= НСтр("ru = 'Индивидуальный предприниматель';
															|en = 'Individual entrepreneur'");
		ОрганизационноПравоваяФормаСокращенно	= НСтр("ru = 'ИП';
														|en = 'IE'");
	Иначе
		ОрганизационноПравоваяФорма				= "";
		ОрганизационноПравоваяФормаСокращенно	= "";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОрганизационноПравоваяФорма) Тогда
		КоличествоКавычек	= СтрЧислоВхождений(Наименование, """");
		Если КоличествоКавычек > 1 Тогда
			// Наименование организации внутри внешних кавычек
			ПозицияПервойКавычки = СтрНайти(Наименование, """");
			ПозицияПоследнейКавычки = 0;
			
			ВремНаименование = Наименование;
			
			ПозицияКавычки = ПозицияПервойКавычки;
			Пока ПозицияКавычки > 0 Цикл
				ПозицияПоследнейКавычки = ПозицияПоследнейКавычки + ПозицияКавычки;
				ВремНаименование = Сред(ВремНаименование, ПозицияКавычки + 1);
				ПозицияКавычки = СтрНайти(ВремНаименование, """");
			КонецЦикла;
			
			Наименование = Сред(Наименование, ПозицияПервойКавычки + 1, ПозицияПоследнейКавычки - ПозицияПервойКавычки - 1);
			Если НЕ КоличествоКавычек%2 = 0 Тогда
				Наименование = Наименование + """";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизационноПравоваяФорма) Тогда
		ПолноеНаименование = Наименование;
	Иначе
		ПолноеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 ""%2""",
			ОрганизационноПравоваяФорма, Наименование);
	КонецЕсли;
	
	СокращенноеНаименование = Наименование + ?(ПустаяСтрока(ОрганизационноПравоваяФормаСокращенно), "", " ")
		+ ОрганизационноПравоваяФормаСокращенно;
	
	СтруктураНаименования = Новый Структура("Наименование, СокращенноеНаименование, ПолноеНаименование",
		Наименование, СокращенноеНаименование, ПолноеНаименование);
	//-- Локализация
	
	Возврат СтруктураНаименования;
	
КонецФункции

// Функция получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для рублей используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета.
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	//-- Локализация
	
	Возврат Валюта;
	
КонецФункции

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов.
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт

	//++ Локализация
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Организация, Контрагент, ХозяйственнаяОперация, СписокКонтрагентов";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Организация, Контрагент, ХозяйственнаяОперация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"ОперацияССамозанятым", Параметры);
	//-- Локализация

КонецПроцедуры

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов.
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПриобретенияПоСтатистике(ОписаниеРеквизитов) Экспорт

	//++ Локализация
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = 
		"Организация, Контрагент, ХозяйственнаяОперация, Договор, НалогообложениеНДС";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = 
		"Организация, Контрагент, ХозяйственнаяОперация, НалогообложениеНДС";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"ОперацияССамозанятым", Параметры);
	//-- Локализация

КонецПроцедуры

//++ Локализация

#Область ИнтерфейсныеЭлементы

// Функция формирует массив хозяйственных операций, для которых доступно перечисление в бюджет.
//
// Возвращаемое значение:
//	Массив - массив хозяйственных операций.
//
Функция МассивОперацийПеречисленияВБюджет() Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	//++ НЕ УТ
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	//-- НЕ УТ
	
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратНалогов);
	
	Возврат МассивОпераций;
	
КонецФункции

// Процедура устанавливает видимость выбора операции оплаты таможенного платежа в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацииПеречислениеТаможне(Поле) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операций выдачи и погашения займов сотрудникам в форме.
//
// Параметры:
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции.
//
Процедура УстановитьВидимостьОперацийЗаймамСотрудникам(Поле) Экспорт
	
	ОперацииПоЗаймамДоступны = Не ПолучитьФункциональнуюОпцию("УправлениеТорговлей");
	
	//++ НЕ УТ
	ОперацииПоЗаймамДоступны = ПолучитьФункциональнуюОпцию("ИспользоватьЗаймыСотрудникам")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	//-- НЕ УТ
	
	Если Не ОперацииПоЗаймамДоступны Тогда
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Подмена префикса организации префиксом кассовой книги
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//    Префикс - Строка - префикс объекта, который нужно изменить.
//
Процедура УстановитьПрефиксКассовойКнигиНомеруДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	РеквизитыПрефиксации = "";
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		РеквизитыПрефиксации = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПрефиксации)
		И ЗначениеЗаполнено(РеквизитыПрефиксации.ИспользоватьПрефикс)
		И РеквизитыПрефиксации.ИспользоватьПрефикс Тогда
		
		ПрефиксКассовойКниги = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(РеквизитыПрефиксации.Префикс, 2, "0", "Слева");
		Префикс = ПрефиксКассовойКниги + Прав(Префикс, СтрДлина(Префикс) - 2);
	КонецЕсли;
	
КонецПроцедуры

// Сброс номера документа при необходимости его изменения
//
// Параметры:
//    Источник - ДокументОбъект - ПКО, РКО, Кассовая книга
//    Отказ - Булево - флаг отказа
//    РежимЗаписи - РежимЗаписиДокумента - Режим записи
//    РежимПроведения - РежимПроведенияДокумента - Режим проведения.
// 
Процедура ПроверитьНомерДокументаПоДатеОрганизацииКассовойКнигеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	ИначеЕсли Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксацияОбъектовСобытия.ПроверитьНомерДокументаПоДатеИОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения);
	
	РеквизитыПрефиксацииДоИзменения = "";
	РеквизитыПрефиксацииПослеИзменения = "";
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЛистКассовойКниги")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.ИнвентаризацияНаличныхДенежныхСредств") Тогда
		
		КассоваяКнигаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "КассоваяКнига");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассоваяКнигаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.КассоваяКнига);
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		КассаСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Касса");
		РеквизитыПрефиксацииДоИзменения = ПолучитьПрефиксациюКассыКассовойКниги(КассаСсылка);
		
		РеквизитыПрефиксацииПослеИзменения = ПолучитьПрефиксациюКассыКассовойКниги(Источник.Касса);
	КонецЕсли;
	
	ПрефиксДоИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииДоИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииДоИзменения.Префикс,
		"");
		
	ПрефиксПослеИзменения = ?(
		ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения)
		И ЗначениеЗаполнено(РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс)
		И РеквизитыПрефиксацииПослеИзменения.ИспользоватьПрефикс,
		РеквизитыПрефиксацииПослеИзменения.Префикс,
		"");
	
	Если ПрефиксДоИзменения <> ПрефиксПослеИзменения Тогда
		Источник.Номер = "";
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры выбора договора с заказчиком в рамках кооперации ГОЗ
//
// Параметры:
//    Элемент - ПолеФормы - Поле ввода договора.
//    ДополнительныеПараметры - Структура - Набор дополнительных параметров
//
Процедура УстановитьПараметрыВыбораДоговораСЗаказчиком(Элемент, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыВыбораДоговора = Новый Массив;
	
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПлатежиПо275ФЗ", Истина));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорСУчастникомГОЗ", Истина));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор.ПодходитДляПодбораВДоговорЗаказчика", Истина));
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого ДополнительныйПараметр Из ДополнительныеПараметры Цикл 
			ПараметрыВыбораДоговора.Добавить(Новый ПараметрВыбора("Отбор." + ДополнительныйПараметр.Ключ, ДополнительныйПараметр.Значение));
		КонецЦикла;
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораДоговора);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументов

//++ НЕ УТ

// Процедура заполняет таблицу на основании ведомостей различных типов оплаты в соответствии с отборами.
//
// Параметры:
//	ТаблицаВедомостей - ТаблицаЗначений, ТабличнаяЧасть - Заполняемая таблица
//	СтруктураПараметров - Структура - Структура отборов
//	ТаблицаРаботников - ТаблицаЗначений, ТабличнаяЧасть - Таблица, в которую помещаются работники первой ведомости.
//
Процедура ЗаполнитьПоВедомостямКОплате(ТаблицаВедомостей, СтруктураПараметров, ТаблицаРаботников = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИнтеграцияБЗК.ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТВедомости.Ведомость КАК Ведомость,
	|	МАКСИМУМ(ВТВедомости.Сумма) КАК Сумма,
	|	МАКСИМУМ(ВТВедомости.СуммаПоДокументу) КАК СуммаПоДокументу
	|ИЗ
	|	ДанныеВедомостейНаОплату КАК ВТВедомости
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВедомости.Ведомость";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаВедомостей.Добавить();
		НоваяСтрока.Ведомость = Выборка.Ведомость;
		НоваяСтрока.СтатьяДвиженияДенежныхСредств =
			Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(СтруктураПараметров.ХозяйственнаяОперация);
		
		Если СтруктураПараметров.Свойство("ЗаполнятьСуммуПоДокументу") Тогда
			НоваяСтрока.Сумма = Выборка.СуммаПоДокументу;
		Иначе
			НоваяСтрока.Сумма = Выборка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаВедомостей.Количество() > 0 И ТаблицаРаботников <> Неопределено Тогда
		СтруктураПараметров.Вставить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТаблицаВедомостей[0].Ведомость));
		СуммыКОплате = ДанныеРаботниковПоВедомостям(СтруктураПараметров);
		
		Если ТипЗнч(СуммыКОплате) = Тип("ТаблицаЗначений") Тогда
			ТаблицаРаботников.Загрузить(СуммыКОплате);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет таблицу на основании ведомостей на основании заявок на расходование денежных средств.
//
// Параметры:
//	ТаблицаВедомостей - ТаблицаЗначений, ТабличнаяЧасть - Заполняемая таблица
//	СтруктураПараметров - Структура - Структура отборов.
//
Процедура ЗаполнитьПоВедомостямИЗаявкамКОплате(ТаблицаВедомостей, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	
	Если СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаВедомости.Ведомость,
		|	ЗаявкаВедомости.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаВедомости.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ЗаявкаВедомости.Сумма
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаВедомости
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеВедомости
		|		ПО (ЗаявкаВедомости.Ведомость = СписаниеВедомости.Ведомость
		|		И СписаниеВедомости.Ссылка <> &Списание
		|		И СписаниеВедомости.Ссылка.Проведен)
		|ГДЕ
		|	ЗаявкаВедомости.Ссылка В(&Заявка)
		|	И ЗаявкаВедомости.Ссылка.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И СписаниеВедомости.Ведомость ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты);
		Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
		Запрос.УстановитьПараметр("Списание", СтруктураПараметров.Списание);
		
		
	ИначеЕсли СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств КАК Ведомость,
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(ОстаткиКВыплате.СуммаОстаток) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ВедомостьНаВыплатуЗарплатыПеречислением) КАК ОстаткиКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Ведомости
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|			ПО Ведомости.Сотрудник.ФизическоеЛицо = Оплата.ФизическоеЛицо
		|				И Ведомости.Ссылка = Оплата.Ведомость
		|		ПО ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = Ведомости.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаСписаниеБДС
		|		ПО ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежаСписаниеБДС.Ведомость
		|ГДЕ
		|	Оплата.Ведомость ЕСТЬ NULL
		|	И Ведомости.БанковскийСчет = &ЛицевойСчет
		|	И Ведомости.Ссылка.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ОстаткиКВыплате.ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	СУММА(-ДенежныеСредстваКВыплате.Сумма)
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Ведомости
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|			ПО Ведомости.Ссылка.Организация = СписаниеБезналичныхДенежныхСредств.Организация
		|				И Ведомости.БанковскийСчет = СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента
		|		ПО ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = Ведомости.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежаСписаниеБДС
		|		ПО ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств = РасшифровкаПлатежаСписаниеБДС.Ведомость
		|ГДЕ
		|	ДенежныеСредстваКВыплате.Регистратор = &Списание
		|	И СписаниеБезналичныхДенежныхСредств.Ссылка = &Списание
		|
		|СГРУППИРОВАТЬ ПО
		|	РасшифровкаПлатежаСписаниеБДС.ЗаявкаНаРасходованиеДенежныхСредств,
		|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств";
		
		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.УстановитьПараметр("ЛицевойСчет", СтруктураПараметров.ЛицевойСчет);
		Запрос.УстановитьПараметр("Списание", СтруктураПараметров.Списание);
		
		
	ИначеЕсли СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу
		Или СтруктураПараметров.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ведомость
		|ПОМЕСТИТЬ ВТ_Ведомости
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка В(&Заявка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаВедомости.Ведомость,
		|	ЗаявкаВедомости.СтатьяДвиженияДенежныхСредств,
		|	ЗаявкаВедомости.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	-КВыплатеОстатки.СуммаОстаток КАК Сумма
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаВедомости
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(
		|				,
		|				ЗаявкаНаРасходованиеДенежныхСредств В
		|					(ВЫБРАТЬ
		|						ВТ_Ведомости.Ведомость КАК Ведомость
		|					ИЗ
		|						ВТ_Ведомости КАК ВТ_Ведомости)) КАК КВыплатеОстатки
		|		ПО ЗаявкаВедомости.Ведомость = КВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаВедомости.Ссылка В(&Заявка)";
		
		Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаВедомостей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с данными о работниках и сумме выплаты по ведомости.
// Параметры:
//	СтруктураПараметров - Структура - Структура отборов;
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - для передачи таблицы в другой запрос.
//
// Возвращаемое значение:
//	ТаблицаЗначений - данные о работниках и суммах их начисления по ведомостям.
//
Функция ДанныеРаботниковПоВедомостям(СтруктураПараметров, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ИнтеграцияБЗК.ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВедомостейНаОплату.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостейНаОплату.Ведомость КАК Ведомость,
	|	СУММА(ДанныеВедомостейНаОплату.Сумма) КАК Сумма
	|ИЗ
	|	ДанныеВедомостейНаОплату КАК ДанныеВедомостейНаОплату
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостейНаОплату.Ведомость,
	|	ДанныеВедомостейНаОплату.ФизическоеЛицо
	|";
	
	ТаблицаРаботников = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураПараметров.Свойство("Работник") Тогда
		
		Если ТаблицаРаботников.Количество() > 0 Тогда
			Возврат ТаблицаРаботников[0].Сумма;
		Иначе
			Возврат 0;
		КонецЕсли;
		
	Иначе
		
		Возврат ТаблицаРаботников;
		
	КонецЕсли;
	
КонецФункции

// Процедура формирует данные для заполнения и расшифровку платежа платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ДанныеЗаполнения - Структура - Структура основания для заполнения документа.
//	РасшифровкаПлатежа - ТаблицаЗначений, ТабличнаяЧасть - Расшифровка платежа платежного документа.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
Процедура ЗаполнитьПоДоговоруЗаймаСотруднику(Знач Договор, ДанныеЗаполнения, РасшифровкаПлатежа,
		ЭтоПоступление, ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	ДанныеЗаполнения = ДанныеЗаполненияДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление, ТипДокумента);
	РасшифровкаПлатежа.Загрузить(ДанныеЗаполнения.РасшифровкаПлатежа);
	ДанныеЗаполнения.Вставить("СуммаДокумента", РасшифровкаПлатежа.Итог("Сумма"));
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает данные расшифровки платежа платежного документа по договору займа сотруднику.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Структура основания для заполнения документа.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ДокументИсключение - ДокументСсылка.РасходныйКассовыйОрдер,
//                       ДокументСсылка.СписаниеБезналичныхДенежныхСредств,
//                       ДокументСсылка.ПриходныйКассовыйОрдер,
//                       ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств - Документ, движения которого следует исключить.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Данные заполнения расшифровки платежа.
Функция ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ЭтоПоступление = Ложь, 
		ДокументИсключение = Неопределено, ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	ДатаАктуальности = ?(ДанныеЗаполнения.Свойство("Дата"), ДанныеЗаполнения.Дата, КонецДня(ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеЗаполнения.Свойство("ДоговорЗаймаСотруднику") Тогда
		ДействующиеДоговора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ДанныеЗаполнения.ДоговорЗаймаСотруднику);
	Иначе
		ДействующиеДоговора = ЗаймыСотрудникам.ДействующиеДоговорыЗаймаПоФизическомуЛицу(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.ПодотчетноеЛицо,
			ДатаАктуальности,
			НЕ ЭтоПоступление);
	КонецЕсли;
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("ЗаявкаНаРасходованиеДенежныхСредств", Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
	РасшифровкаПлатежа.Колонки.Добавить("ДоговорЗаймаСотруднику", Новый ОписаниеТипов("ДокументСсылка.ДоговорЗаймаСотруднику"));
	РасшифровкаПлатежа.Колонки.Добавить("ТипСуммыКредитаДепозита", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСуммГрафикаКредитовИДепозитов"));
	РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	Если ДействующиеДоговора = Неопределено Тогда
		Возврат РасшифровкаПлатежа;
	КонецЕсли;
	
	Если ЭтоПоступление Тогда
		СтатьиДДС = СтатьиДДСЗаймовСотрудникуПоУмолчанию(ДатаАктуальности, ДокументИсключение, ТипДокумента);
		Для Каждого Договор Из ДействующиеДоговора Цикл
			
			Задолженность = ЗаймыСотрудникам.ОстатокЗадолженности(Договор, ДатаАктуальности, ДокументИсключение);
			
			Если Задолженность.СуммаЗайма > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг;
				НоваяСтрока.Сумма = Задолженность.СуммаЗайма;
				НоваяСтрока.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация);
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДвиженияОсновногоДолга;
			КонецЕсли;
			
			Если Задолженность.Проценты > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.ТипСуммыКредитаДепозита = Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты;
				НоваяСтрока.Сумма = Задолженность.Проценты;
				НоваяСтрока.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация);
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьиДДС.СтатьяДвиженияПроцентов;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		ЗаявкиНаРасходованиеДС = Новый Соответствие;
		
		Если ДанныеЗаполнения.Свойство("ОплатаПоЗаявкам") И ДанныеЗаполнения.ОплатаПоЗаявкам Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДенежныеСредстваКВыплате.ЗаявкаНаРасходованиеДенежныхСредств,
			|	ДенежныеСредстваКВыплате.ДоговорЗаймаСотруднику
			|ИЗ
			|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредстваКВыплате
			|ГДЕ
			|	ДенежныеСредстваКВыплате.ДоговорЗаймаСотруднику В (&СписокДоговоров)";
			
			Запрос.УстановитьПараметр("СписокДоговоров", ДействующиеДоговора);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗаявкиНаРасходованиеДС.Вставить(Выборка.ДоговорЗаймаСотруднику, Выборка.ЗаявкаНаРасходованиеДенежныхСредств);
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Договор Из ДействующиеДоговора Цикл
			
			Остаток = ЗаймыСотрудникам.ОстатокНевыданныхСумм(Договор, ДатаАктуальности, ДокументИсключение);
			
			Если Остаток > 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкиНаРасходованиеДС[Договор];
				НоваяСтрока.ДоговорЗаймаСотруднику = Договор;
				НоваяСтрока.Сумма = Остаток;
				НоваяСтрока.ВалютаВзаиморасчетов = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация);
				НоваяСтрока.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

// Функция возвращает структуру статей ДДС для заполнения платежного документа. Поиск статьи ДДС 
// выполняется по хозяйственной операции и типу документа.
//
// Параметры:
//    ДатаАктуальности - Дата - Дата, на которую требуется получить статьи ДДС.
//    ДокументИсключение - ДокументСсылка.РасходныйКассовыйОрдер,
//                       ДокументСсылка.СписаниеБезналичныхДенежныхСредств,
//                       ДокументСсылка.ПриходныйКассовыйОрдер,
//                       ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств - Документ, движения которого следует исключить.
//    ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//    Структура - Структура статей ДДС.
Функция СтатьиДДСЗаймовСотрудникуПоУмолчанию(ДатаАктуальности, ДокументИсключение = Неопределено, ТипДокумента = "ПриходныйКассовыйОрдер") Экспорт
	
	СтатьяДвиженияОсновногоДолга = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	СтатьяДвиженияПроцентов = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументИсключение);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расшифровка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвижения,
	|	ЕСТЬNULL(Документ.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ИЗ
	|	Документ.%ТипДокумента%.РасшифровкаПлатежа КАК Расшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ТипДокумента% КАК Документ
	|		ПО Расшифровка.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Ссылка <> &Ссылка
	|	И Документ.Проведен
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|	И Документ.Дата <= &ДатаАктуальности
	|	И Расшифровка.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И Расшифровка.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДвиженияОсновногоДолга = Выборка.СтатьяДвижения;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Расшифровка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвижения,
	|	ЕСТЬNULL(Документ.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Дата
	|ИЗ
	|	Документ.%ТипДокумента%.РасшифровкаПлатежа КАК Расшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%ТипДокумента% КАК Документ
	|		ПО Расшифровка.Ссылка = Документ.Ссылка
	|ГДЕ
	|	Документ.Ссылка <> &Ссылка
	|	И Документ.Проведен
	|	И Документ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|	И Документ.Дата <= &ДатаАктуальности
	|	И Расшифровка.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И Расшифровка.ТипСуммыКредитаДепозита = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТипДокумента%", ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтатьяДвиженияПроцентов = Выборка.СтатьяДвижения;
	КонецЕсли;
	
	Возврат Новый Структура("СтатьяДвиженияОсновногоДолга, СтатьяДвиженияПроцентов", СтатьяДвиженияОсновногоДолга, СтатьяДвиженияПроцентов);
	
КонецФункции

//-- НЕ УТ

// Процедура заполняет документ на основании уведомления о зачислении валюты
//
// Параметры:
//	ДокументОснование - ДокументСсылка.УведомлениеОЗачисленииВалюты - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения.
//
Процедура ЗаполнитьДокументПоУведомлениюОЗачисленииВалюты(Знач ДокументОснование, ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПлатежныхДокументов.РаспоряжениеОбОбязательнойПродаже) КАК ТипПлатежногоДокумента,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК УведомлениеОЗачисленииВалюты,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчет.ОсновнойБанковскийСчет КАК БанковскийСчетПолучатель,
	|
	|	ДенежныеСредства.СуммаОстаток КАК СуммаДокумента
	|ИЗ
	|	Документ.УведомлениеОЗачисленииВалюты КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить ""Списание безналичных ДС"" на основании документа %1';
				|en = 'It is not required to enter Non-cash payment based on the %1 document'"),
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

// Помещает во временное хранилище таблицу подтверждающих документов
//
// Параметры:
//    ТипПлатежаФЗ275 - СправочникСсылка.ТипыПлатежейФЗ275 - Тип платежа ФЗ275
//    ИдентификаторВладельца - УникальныйИдентификатор - Идентификатор формы для помещения результата
//    Договор - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями, СправочникСсылка.ДоговорыКредитовИДепозитов - Договор по госконтракту
// 
// Возвращаемое значение:
//    Строка -Адрес во временном хранилище, по которому содержатся ссылки на подтверждающие документы 
//
Функция ПодтверждающиеДокументыФЗ275(ТипПлатежаФЗ275, ИдентификаторВладельца, Договор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	ДанныеСправочника.Файл         КАК Файл,
	|	ДанныеСправочника.Номер        КАК Номер,
	|	ДанныеСправочника.Дата         КАК Дата,
	|	ДанныеСправочника.Сумма        КАК Сумма
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Договор
	|	И &УказанДоговор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДокумента КАК ВидДокумента,
	|	НЕОПРЕДЕЛЕНО                   КАК Файл,
	|	НЕОПРЕДЕЛЕНО                   КАК Номер,
	|	НЕОПРЕДЕЛЕНО                   КАК Дата,
	|	НЕОПРЕДЕЛЕНО                   КАК Сумма
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275.ПодтверждающиеДокументы КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &ТипПлатежаФЗ275
	|	И НЕ &УказанДоговор
	|";
	
	Запрос.УстановитьПараметр("ТипПлатежаФЗ275", ТипПлатежаФЗ275);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("УказанДоговор", ЗначениеЗаполнено(Договор));
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), ИдентификаторВладельца);;
	
КонецФункции
//-- НЕ УТ

// Очищает реквизиты платежей в бюджет после проверки даты применения Приказа 107н 
//
// Параметры:
//	Объект - ДокументОбъект - Документ оплаты.
//	ПредыдущийПериод - Дата - исходный период (до изменения)
//	НовыйПериод - Дата - новый период.
//
Процедура ПриИзмененииПравилПлатежейВБюджет(Объект, ПредыдущийПериод, НовыйПериод) Экспорт
	
	ДатаНачалаПримененияПриказа107н = Константы.ДатаНачалаПримененияПриказа107н.Получить();
	
	ДействовалиНовыеПравила = (ПредыдущийПериод >= ДатаНачалаПримененияПриказа107н);
	ДействуютНовыеПравила   = (НовыйПериод >= ДатаНачалаПримененияПриказа107н);
	
	Если ДействовалиНовыеПравила <> ДействуютНовыеПравила Тогда
		Объект.КодОКАТО = "";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательНомера = "";
		Объект.ПоказательДаты = "";
		Объект.ПоказательТипа = "";
	КонецЕсли;
	
КонецПроцедуры

// Выбирает перечень КПП подразделений организации
//
// Параметры:
//    Организация - СправочникСсылка.Организации - Организация, для которой определяет перечень КПП.
//
// Возвращаемое значение:
//    Массив из Структура - содержит:
//     * КПП - Строка - КПП филиала
//     * Подразделение - СправочникСсылка.СтруктураПредприятия - Филиал, имеющий регистрацию в налоговом органе
//     * РегистрацияСсылка - СправочникСсылка.РегистрацииВНалоговомОргане - Регистрация филиала
//
Функция СписокКППОрганизации(Организация) Экспорт
	
	СписокВыбораКПП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК РегистрацияСсылка
	|ПОМЕСТИТЬ КППОрганизаций
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(, Организация = &Организация) КАК Регистрации
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КПП, ""0""),
	|	Организации.Наименование,
	|	Организации.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.ОбособленноеПодразделение
	|	И НЕ Организации.ПометкаУдаления
	|	И Организации.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	И Организации.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрганизаций.Действует)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Регистрации.РегистрацияВНалоговомОргане.КПП, """")  КАК КПП,
	|	ЕСТЬNULL(Регистрации.Подразделение.Наименование, """")       КАК Подразделение,
	|	Регистрации.РегистрацияВНалоговомОргане                      КАК РегистрацияСсылка
	|ИЗ
	|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
	|		, Организация.ГоловнаяОрганизация = &Организация И Организация <> &Организация) КАК Регистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КПП
	|;
	|//////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.КПП КАК КПП
	|ПОМЕСТИТЬ КПППредприятия
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КППОрганизаций.КПП КАК КПП,
	|	КППОрганизаций.Подразделение КАК Подразделение,
	|	КППОрганизаций.РегистрацияСсылка КАК РегистрацияСсылка
	|ИЗ
	|	КППОрганизаций КАК КППОрганизаций
	|ГДЕ
	|	НЕ КППОрганизаций.КПП В
	|				(ВЫБРАТЬ
	|					КПППредприятия.КПП КАК КПП
	|				ИЗ
	|					КПППредприятия КАК КПППредприятия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КПППредприятия.КПП КАК КПП
	|ИЗ
	|	КПППредприятия КАК КПППредприятия
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[3].Выбрать();
	Если Выборка.Следующий() Тогда
		КПП = Новый Структура("КПП, Подразделение, РегистрацияСсылка");
		ЗаполнитьЗначенияСвойств(КПП, Выборка);
		СписокВыбораКПП.Добавить(КПП);
	КонецЕсли;
	
	Выборка = Результат[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.КПП) Тогда
			КПП = Новый Структура("КПП, Подразделение, РегистрацияСсылка");
			ЗаполнитьЗначенияСвойств(КПП, Выборка);
			СписокВыбораКПП.Добавить(КПП);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбораКПП;
	
КонецФункции

#КонецОбласти

#Область ОбменСБанками

// Загружает электронную выписку банка
// 
// Параметры:
//     ЭлектроннаяВыпискаБанка - Ссылка - Электронная выписка банка
//
Процедура РазобратьВыпискуБанка(ЭлектроннаяВыпискаБанка) Экспорт
	
	Перем ДеревоВыписки;
	// ЭлектронноеВзаимодействие.ОбменСБанками
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(ЭлектроннаяВыпискаБанка, ДеревоВыписки);
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	КлиентБанк = Обработки.КлиентБанк.Создать();
	КлиентБанк.ЗаполнитьТаблицуСчетовЗагрузки();
	
	КлиентБанк.СоздаватьКонтрагентов = Истина;
	КлиентБанк.ПроводитьДокументы = Истина;
	
	СтрокаСчета = Неопределено;
	Если ДеревоВыписки.Строки.Количество() Тогда
		Выписки = ДеревоВыписки.Строки[0];
		
		Если Выписки.Строки.Количество() Тогда
			Выписка = Выписки.Строки[0];
			
			СтрокаНомерСчета = Выписка.Строки.Найти("Выписки.НомерСтроки.НомерСчета", "ПолныйПуть");
			Если СтрокаНомерСчета <> Неопределено Тогда
				
				СчетаВыписки = КлиентБанк.БанковскиеСчета.НайтиСтроки(Новый Структура("НомерСчета", СтрокаНомерСчета.Значение));
				Если СчетаВыписки.Количество() Тогда
					СтрокаСчета = СчетаВыписки[0];
					СтрокаФайла = КлиентБанк.Файлы.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаФайла, СтрокаСчета);
					СтрокаФайла.БанковскийСчет = СтрокаСчета.Ссылка;
					СтрокаФайла.АдресХранилищаФайла = ПоместитьВоВременноеХранилище(ДеревоВыписки, Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаСчета <> Неопределено Тогда
		КлиентБанк.ЗагрузитьПлатежиПоСчету(СтрокаСчета, Новый УникальныйИдентификатор, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ДенежныеДокументы

// Процедура заполняет таблицу остатками денежных документов
//
// Параметры:
//	Отбор - Структура - Параметры отбора остатков ДД:
//		* Организация		- СправочникСсылка.Организации 				- Организация, в которой хранятся ДД
//		* Подразделение		- СправочникСсылка.СтруктураПредприятия 	- Подразделение, в котором хранятся ДД
//		* МОЛ 				- СправочникСсылка.ФизическиеЛица 			- МОЛ, у которого хранятся ДД
//		* Ссылка			- ДокументСсылка.ВыбытиеДенежныхДокументов 	- Документ, движения которого должны быть исключены из расчета остатков
//		* ДенежныеДокументы	- Массив 									- отбор по денежным документам
//	Таблица - ТаблицаЗначений - таблица, в которую будет помещен результат получения остатков ДД.
//
Процедура ЗаполнитьПоОстаткамДД(Отбор, Таблица) Экспорт
	
	ПараметрыОтбора = Новый Структура("ДенежныеДокументы, Организация, Подразделение, МОЛ, Ссылка, Валюта");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Отбор);
	
	МассивДД = ?(ПараметрыОтбора.ДенежныеДокументы = Неопределено, Новый Массив, ПараметрыОтбора.ДенежныеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтборПоДД",			МассивДД.Количество() > 0);
	Запрос.УстановитьПараметр("ДенежныеДокументы",	МассивДД);
	Запрос.УстановитьПараметр("Организация",		ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Подразделение",		ПараметрыОтбора.Подразделение);
	Запрос.УстановитьПараметр("МОЛОтправитель",		ПараметрыОтбора.МОЛ);
	Запрос.УстановитьПараметр("Ссылка",				ПараметрыОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтборПоВалюте",		ПараметрыОтбора.Валюта <> Неопределено);
	Запрос.УстановитьПараметр("Валюта",				ПараметрыОтбора.Валюта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	СУММА(Остатки.Количество)	КАК Количество,
	|	СУММА(Остатки.Сумма)		КАК Сумма
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|		Остатки.КоличествоОстаток	КАК Количество,
	|		Остатки.СуммаОстаток		КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы.Остатки(
	|				,
	|				МОЛ = &МОЛОтправитель
	|					И Организация = &Организация
	|					И Подразделение = &Подразделение
	|					И (НЕ &ОтборПоВалюте ИЛИ ДенежныйДокумент.Валюта = &Валюта)
	|					И (НЕ &ОтборПоДД ИЛИ ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Движения.ДенежныйДокумент КАК ДенежныйДокумент,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Количество
	|		ИНАЧЕ
	|			-Движения.Количество
	|		КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			Движения.Сумма
	|		ИНАЧЕ
	|			-Движения.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ДенежныеДокументы КАК Движения
	|	ГДЕ
	|		Движения.Регистратор = &Ссылка
	|		И Движения.МОЛ = &МОЛОтправитель
	|		И Движения.Организация = &Организация
	|		И Движения.Подразделение = &Подразделение
	|		И (НЕ &ОтборПоВалюте ИЛИ Движения.ДенежныйДокумент.Валюта = &Валюта)
	|		И (НЕ &ОтборПоДД ИЛИ Движения.ДенежныйДокумент В (&ДенежныеДокументы))) КАК Остатки
	|	
	|СГРУППИРОВАТЬ ПО
	|	ДенежныйДокумент
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ДенежныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ДенежныйДокумент	КАК ДенежныйДокумент,
	|	Остатки.Количество			КАК Количество,
	|	Остатки.Сумма				КАК Сумма,
	|	Остатки.Сумма				КАК СуммаВозврата,
	|	СправочникДД.Цена			КАК Цена,
	|	СправочникДД.Цена			КАК ЦенаВозврата,
	|	СправочникДД.Валюта			КАК Валюта,
	|	СправочникДД.Наименование	КАК НаименованиеДенежногоДокумента,
	|	СправочникДД.Родитель		КАК ГруппаДокумента
	|ИЗ
	|	ВтОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДенежныеДокументы КАК СправочникДД
	|		ПО Остатки.ДенежныйДокумент = СправочникДД.Ссылка
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти
//-- НЕ УТ

#Область Бюджет

// Проверяет корректность заполнения налоговых реквизитов
//
// Параметры:
//	Объект - ДокументОбъект - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы
//	НепроверяемыеРеквизиты - Массив - Непроверяемые реквизиты документа
//	ФлагОбменСБанками - Булево - используется обмен с банком
//	ОшибкиЗаполнения - Строка - Накопленное описание ошибок.
//
Процедура ПроверитьЗаполнениеНалоговыхРеквизитов(Объект, Отказ, НепроверяемыеРеквизиты, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = Неопределено) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	ПеречислениеВБюджет = Объект.ПеречислениеВБюджет;
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	СтатусСоставителя = Объект.СтатусСоставителя;
	Дата = Объект.Дата;
	
	ДатаНачалаПримененияПриказа126н = Константы.ДатаНачалаПримененияПриказа126н.Получить();
	
	ПараметрыПроверкиЗаполнения = Новый Структура("ПрименениеПриказа107н, ПрименениеПриказа126н, ЕдиныйНалоговыйПлатеж",
		Дата >= Константы.ДатаНачалаПримененияПриказа107н.Получить() Или Не ЗначениеЗаполнено(Дата),
		ДатаНачалаПримененияПриказа126н <> '00010101' И Дата >= ДатаНачалаПримененияПриказа126н Или Не ЗначениеЗаполнено(Дата),
		ПлатежиВБюджет.ИспользуетсяЕдиныйНалоговыйПлатеж(Объект.Организация, Дата)
			И Объект.ТипНалога = Перечисления.ТипыНалогов.ЕдиныйНалоговыйПлатеж);
	
	МассивОпераций = МассивОперацийПеречисленияВБюджет();
	
	Если ПеречислениеВБюджет И МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
	
		// Проверки, общие для всех видов перечислений в бюджет
		Если ПлатежиВБюджетКлиентСервер.СтатусыПлательщика(
			ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Дата).НайтиПоЗначению(СтатусСоставителя) = Неопределено Тогда
			
			ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Статус составителя""';
								|en = 'Incorrect value of the ""Author status"" field '");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
			НепроверяемыеРеквизиты.Добавить("ПоказательТипа");
		КонецЕсли;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения реквизитов платежа в бюджет согласно 148н
//
// Параметры:
//	Объект - ДокументОбъект - Документ оплаты.
//	Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьИННиКППНаСоответствие148н(Объект, Отказ) Экспорт
	
	Если Объект.Дата < ПлатежиВБюджетКлиентСервер.НачалоДействияУказания3844У() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПлательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "ИНН, КПП");
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		И ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		РеквизитыПлательщика.КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РегистрацияВНалоговомОргане, "КПП");
	КонецЕсли;
	
	РеквизитыПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БанковскийСчетКонтрагента, "Владелец.ИНН, Владелец.КПП");
	
	Если Лев(РеквизитыПлательщика.ИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН плательщика не могут быть ""00""';
							|en = 'The first two digits of the payer TIN cannot be ""00"" '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПлательщика.КПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП плательщика не могут быть ""00""';
							|en = 'First two digits of a payer CRTR cannot be ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект,,, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецИНН, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры ИНН получателя не могут быть ""00""';
							|en = 'The first two digits of the recipient TIN cannot be ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
	Если Лев(РеквизитыПолучателя.ВладелецКПП, 2) = "00" Тогда
		ТекстОшибки = НСтр("ru = 'Первые две цифры КПП получателя не могут быть ""00""';
							|en = 'First two digits of a recipient CRTR cannot be ""00""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Контрагент",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ГОЗ

// Формирование текста назначения платежа для операций с использованием отдельных счетов
// Назначение платежа состоит из 4 частей:
//		1. Аванс / Оплата (необязательный) - Контроль необходимости указания подтверждающих исполнение документов
//		2. Предмет платежа - Контроль платежа по параметрам контракта (перечень товаров и услуг по тарифным ценам)
//		3. Блок автоматической обработки (необязательный) - Контроль состава приложенных обосновывающих документов
//		4. НДС (необязательный) - Указание в сумме платежа ставки и суммы платежа.
//
Функция НазначениеПлатежаФЗ275(Объект, Действие = "") Экспорт
	
	НазначениеПлатежа = "";
	НазначениеПлатежаМассивСтрок = Новый Массив;
	
	Если Объект.Свойство("ТипПлатежаФЗ275") Тогда
		ТипПлатежа = Объект.ТипПлатежаФЗ275;
	Иначе
		ТипПлатежа = Неопределено;
	КонецЕсли;
	
	ТипыПлатежей = Справочники.ТипыПлатежейФЗ275;
	
	ТипыПлатежейАвансаОплаты = Новый Массив;
	ТипыПлатежейАвансаОплаты.Добавить(2);
	ТипыПлатежейАвансаОплаты.Добавить(3);
	ТипыПлатежейАвансаОплаты.Добавить(9);
	ТипыПлатежейАвансаОплаты.Добавить(99);
	
	ТипыПлатежейНДС = Новый Массив;
	ТипыПлатежейНДС.Добавить(2);
	ТипыПлатежейНДС.Добавить(3);
	ТипыПлатежейНДС.Добавить(99);
	
	Если ЗначениеЗаполнено(ТипПлатежа) Тогда
		РеквизитыТипаПлатежа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТипПлатежа, "Код, НомерПунктаЗакона");
	КонецЕсли;
	
	РеквизитыЭтапа = Новый Структура("
		|ПредметОплаты, 
		|ПунктКонтрактаПредмета, 
		|ПунктКонтрактаОплаты, 
		|ВариантОплаты"); 
		
	РеквизитыЭтапа.Вставить("ПредметОплаты",			Объект.ПредметОплаты);
	РеквизитыЭтапа.Вставить("ПунктКонтрактаПредмета",	Объект.ПунктКонтрактаПредмета);
	РеквизитыЭтапа.Вставить("ПунктКонтрактаОплаты",		Объект.ПунктКонтрактаОплаты);
	РеквизитыЭтапа.Вставить("ВариантОплаты",			Объект.ВариантОплаты);
	
	#Область АвансОплата
	Если ТипыПлатежейАвансаОплаты.Найти(РеквизитыТипаПлатежа.Код) <> Неопределено Тогда
		Если РеквизитыЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.АвансДоПодтверждения
			Или РеквизитыЭтапа.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыПоставщику.ПредоплатаДоПоступления Тогда
			НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Авансовый платеж';
														|en = 'Advance payment'"));
		Иначе
			НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Оплата';
														|en = 'Payment'"));
		КонецЕсли;
		
		НазначениеПлатежаМассивСтрок.Добавить("(" + РеквизитыЭтапа.ПунктКонтрактаОплаты + ")");
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'за';
													|en = 'for'"));
	КонецЕсли;
	#КонецОбласти 
	
	#Область ПредметПлатежа
	Если ТипПлатежа = ТипыПлатежей.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов Тогда // Тип платежа 1
		КБК = СокрЛП(Объект.КодБК);
		
		ПредметПлатежаНалог = НазначениеПлатежаДляУплатыНалогов(
			КБК,
			ДенежныеСредстваПовтИспРФ.ВидНалоговогоОбязательстваПоКБК(КБК),
			Объект.Организация,
			Объект.Дата,
			ПлатежиВБюджетКлиентСервер.ПредставлениеНалоговогоПериода(Объект.ПоказательПериода));
		
		НазначениеПлатежаМассивСтрок.Добавить(ПредметПлатежаНалог);
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'ИГК';
													|en = 'SCI'"));
		НазначениеПлатежаМассивСтрок.Добавить("<ИГК>");
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ОплатаТоваровРаботУслугПоРегулируемымЦенам // Тип платежа 2
		Или ТипПлатежа = ТипыПлатежей.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц // Тип платежа 3
		Или ТипПлатежа = ТипыПлатежей.РасчетыСИностраннымиИсполнителями // Тип платежа 9
		Или ТипПлатежа = ТипыПлатежей.СписаниеНаОтдельныйСчет Тогда // Тип платежа 99
		
		НазначениеПлатежаМассивСтрок.Добавить(РеквизитыЭтапа.ПредметОплаты); // Предмет оплаты
		НазначениеПлатежаМассивСтрок.Добавить("(" + РеквизитыЭтапа.ПунктКонтрактаПредмета + ")");
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ОплатаТруда Тогда // Тип платежа 5
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Заработная плата';
													|en = 'Payroll'"));
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'за';
													|en = 'for'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка Тогда // Тип платежа 7
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Перечисление денежных средств на депозит';
													|en = 'Transfer cash to deposit'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком Тогда // Тип платежа 8
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Возврат суммы основного долга по кредиту';
													|en = 'Repayment of principal debt amount on credit'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств Тогда // Тип платежа 10
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Возмещение расходов на опережающее приобретение материалов';
													|en = 'Expense compensation for advance purchase of materials'"));
	ИначеЕсли ТипПлатежа = ТипыПлатежей.ПеречислениеПрибылиГоловномуИсполнителю Тогда // Тип платежа 11
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = 'Перечисление прибыли по выполненным контрактным обязательствам';
													|en = 'Transfer profit from performed contract obligations'"));
	КонецЕсли;
	#КонецОбласти
	
	#Область БлокАвтоматическойОбработки
	МассивПодтверждающихДокументов = Новый Массив;
	Если ТипЗнч(Объект.ПодтверждающиеДокументы) = Тип("ТаблицаЗначений") Тогда
		МассивСсылокВидов = Объект.ПодтверждающиеДокументы.ВыгрузитьКолонку("ВидДокумента");
	Иначе
		МассивСсылокВидов = Объект.ПодтверждающиеДокументы.Выгрузить(,"ВидДокумента").ВыгрузитьКолонку("ВидДокумента");
	КонецЕсли;
	СоответствиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылокВидов, "КраткоеНаименование, Наименование");
	
	Для Каждого СтрокаПодтверждающихДокументов Из Объект.ПодтверждающиеДокументы Цикл
		ПредставлениеВидаДокумента = ПредставлениеВидаДокумента(СтрокаПодтверждающихДокументов.ВидДокумента, СоответствиеРеквизитов);
		
		Представление = ПредставлениеПодтверждающегоДокумента(ПредставлениеВидаДокумента, СтрокаПодтверждающихДокументов.Номер, СтрокаПодтверждающихДокументов.Дата);
		
		МассивПодтверждающихДокументов.Добавить(Представление);
	КонецЦикла;
	Если МассивПодтверждающихДокументов.Количество() Тогда
		ПредставлениеВсехДокументов = СтрСоединить(МассивПодтверждающихДокументов, "; ");
		
		НазначениеПлатежаМассивСтрок.Добавить(НСтр("ru = '275-ФЗ';
													|en = '275 FL'"));
		НазначениеПлатежаМассивСтрок.Добавить("{" + РеквизитыТипаПлатежа.Код);
		НазначениеПлатежаМассивСтрок.Добавить(ПредставлениеВсехДокументов + "}");
	КонецЕсли;
	#КонецОбласти
	
	#Область НДС
	Если ТипыПлатежейНДС.Найти(РеквизитыТипаПлатежа.Код) <> Неопределено Тогда
		Если ТипЗнч(Объект) <> Тип("Структура") Тогда
			ТекстСуммаНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(Объект.Организация, Объект.Валюта, Объект.РасшифровкаПлатежа, Истина);
			НазначениеПлатежаМассивСтрок.Добавить(ТекстСуммаНДС);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Возврат СтрСоединить(НазначениеПлатежаМассивСтрок, " ");
	
КонецФункции

// Процедура очищает неиспользуемые реквизиты оплаты за счет средств ГОЗ
//
// Параметры:
//    ДокументОбъект - ДокументОбъект - Текущий документ.
//
Процедура ОчиститьНеиспользуемыеРеквизитыОплатыЗаСчетСредствГОЗ(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.ДоговорыСЗаказчиками.Количество() > 0 Тогда
		ДокументОбъект.ДоговорыСЗаказчиками.Очистить();
	КонецЕсли;
	Если ДокументОбъект.ПодтверждающиеДокументы.Количество() > 0 Тогда
		ДокументОбъект.ПодтверждающиеДокументы.Очистить();
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("ДоговорСУчастникомГОЗ");
	МассивРеквизитов.Добавить("ТипПлатежаФЗ275");
	МассивРеквизитов.Добавить("ПредметОплаты");
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для статьи целевых средств
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементСтатья - ПолеФормы - Поле для ввода статьи целевых средств.
//
Процедура УстановитьПараметрыВыбораСтатьиЦелевыхСредств(Объект, ЭлементСтатья) Экспорт
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту Тогда
		
		ЭлементСтатья.ОграничениеТипа =
			Новый ОписаниеТипов("СправочникСсылка.НаправленияРасходованияЦелевыхСредств, СправочникСсылка.ИсточникиПоступленияЦелевыхСредств");
	
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЭлементСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.НаправленияРасходованияЦелевыхСредств");
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		ЭлементСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ИсточникиПоступленияЦелевыхСредств");
	КонецЕсли;
	
КонецПроцедуры

#Область КонтрольПлатежейНаСоответствие275ФЗ

// Проверяет переданный документ на соответствие требованиям федеральных законов 275-ФЗ и 3729-У.
//
// Параметры:
//   Ссылка - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, ДокументСсылка.СписаниеБезналичныхДенежныхСредств -
//            проверяемый документ
//   ДанныеДокументовДляКонтроля - Массив - массив результатов запросов для контроля документов за исключением временных
//                                          таблиц и удалений временных таблиц.
//
// Возвращаемое значение:
//   РезультатыПроверок - Структура - результаты проверок
//       ВсеКонтролиПройдены - Булево
//       ОписанияРезультатов - ТаблицаЗначений - результаты проверки каждого правила
//           ИмяОбработчикаКонтроля - Строка - имя процедуры, проверяющей условия одного пункта контроля
//           КонтрольПройден - Булево - результат проверки одного пункта контроля
//           Описание - Строка - развернутое описания причин прохождения или непрохождения одного пункта контроля.
//
Функция КонтрольДокумента(Ссылка, ДанныеДокументовДляКонтроля = Неопределено) Экспорт
	РезультатыПроверок = ИнициализацияСвойствРезультатовПроверок();
	ИндексыРезультатовЗапросов = ИнициализацияИндексовРезультатовЗапросов();
	
	// Контроль раздела I "В соответствии с 275-ФЗ от 29.12.2012г."
	РезультатКонтроля_Раздел1_275_83_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_б(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_в(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_г(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_е(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_83_1_2_з(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	РезультатКонтроля_Раздел1_275_84_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_84_10(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	РезультатКонтроля_Раздел1_275_85_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_85_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел1_275_85_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	// Контроль раздела II "Указание Банка России 3729-У от 15.07.2015г."
	РезультатКонтроля_Раздел2_3729У_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел2_3729У_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	РезультатКонтроля_Раздел2_3729У_2_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, ДанныеДокументовДляКонтроля);
	
	Отбор = Новый Структура("КонтрольПройден", Ложь);
	НайденныеСтроки = РезультатыПроверок.ОписанияРезультатов.НайтиСтроки(Отбор);
	РезультатыПроверок.Вставить("ВсеКонтролиПройдены", НайденныеСтроки.Количество() = 0);
	
	Возврат РезультатыПроверок;
КонецФункции

// Формирует таблицу данных для пакетной проверки документов
//
// Параметры:
//   МассивСсылок - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств,
//                  ДокументСсылка.СписаниеБезналичныхДенежныхСредств - проверяемые документы.
//
// Возвращаемое значение:
//   ДанныеДокументовДляКонтроля - Массив - массив результатов запросов для контроля документов за исключением временных
//                                          таблиц и удалений временных таблиц.
//
Функция ДанныеДокументовДляКонтроля(МассивСсылок) Экспорт
	ОписаниеТекстаЗапроса = ОписаниеТекстаЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ОписаниеТекстаЗапроса.Текст;
	
	Запрос.УстановитьПараметр("ПроверяемыеДокументы", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	ДанныеДокументовДляКонтроля = Запрос.ВыполнитьПакет();
	
	// Удалим результаты запросов временных таблиц и уничтожения временных таблиц
	Для Номер = 1 По ОписаниеТекстаЗапроса.КоличествоВременныхТаблиц Цикл 
		ДанныеДокументовДляКонтроля.Удалить(0);
	КонецЦикла;
	
	Возврат ДанныеДокументовДляКонтроля;
КонецФункции

// По имени поля возвращает шаблон замены для запросах, где используется контроль отдельного банковского счета.
//
// Параметры:
//   ИсточникБанковскогоСчета - Строка - название поля банковского счета в запросе.
//
// Возвращаемое значение:
//   Строка - Текст запроса
//
Функция ТекстЗапросаПроверкиОтдельногоСчета(ИсточникБанковскогоСчета) Экспорт
	ТекстЗапроса = "// Проверка состояния отдельного счета ГОЗ (автоматически сформированный текст)";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "ВЫБОР КОГДА (" + ИсточникБанковскогоСчета + ".ОтдельныйСчетГОЗ";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "И НЕ " + ИсточникБанковскогоСчета + ".ГосударственныйКонтракт.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияГосударственныхКонтрактов.Завершен)" + ")";
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + Символы.Таб
		+ "ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
		
	Возврат ТекстЗапроса;
КонецФункции

// Проверяет корректность заполнения подтверждающих документов
//
// Параметры:
//	Объект - СправочникОбъект.ДоговорыКонтрагентов, ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый объект
//	Отказ - Булево - Признак отказа от продолжения работы
//	ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты документа
//	Ошибки - Строка - Накопленное описание ошибок.
//
Процедура ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(Объект, Отказ, ПроверяемыеРеквизиты, Ошибки) Экспорт
	
	Для Каждого ПодтверждающийДокумент Из Объект.ПодтверждающиеДокументы Цикл 
		ПодтверждаетИсполнениеКонтракта = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодтверждающийДокумент.ВидДокумента, "ПодтверждаетИсполнениеКонтракта");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств")
			И ПодтверждаетИсполнениеКонтракта Тогда
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Номер) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Номер"" в строке %1 списка ""Подтверждающие документы""';
						|en = 'The ""Number"" column is not populated in line %1 of the ""Justification documents"" list'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Номер", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Дата) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Дата"" в строке %1 списка ""Подтверждающие документы""';
						|en = 'The ""Date"" column is not populated in line %1 of the ""Justification documents"" list'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Дата", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодтверждающийДокумент.Сумма) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %1 списка ""Подтверждающие документы""';
						|en = 'The ""Amount"" column is not populated in line %1 of the ""Justification documents"" list'"),
					ПодтверждающийДокумент.НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПодтверждающиеДокументы[%1].Сумма", СообщениеОбОшибке, Неопределено, ПодтверждающийДокумент.НомерСтроки-1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет корректность заполнения подтверждающих документов
//
// Параметры:
//    Объект - СправочникОбъект.ДоговорыКонтрагентов, ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - проверяемый объект
//    Отказ - Булево - Признак отказа от продолжения работы.
//
Процедура ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(Объект, Отказ) Экспорт
	
	ЭтоДоговорСКонтрагентом = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	ЭтоДоговорМеждуОрганизациями = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями");
	
	БанковскийСчетКонтролировать = 
		Не (ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты));
	
	Если БанковскийСчетКонтролировать И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ОтдельныйСчетГОЗ");
		Если Не ОтдельныйСчетГОЗ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Должен быть выбран отдельный банковский счет ГОЗ';
					|en = 'Separate SDO bank account must be selected'"),
				Объект,
				"БанковскийСчет",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		БанковскийСчетПолучателя = Объект.БанковскийСчетКонтрагента;
		БанковскийСчетПолучателяИмя = "БанковскийСчетКонтрагента";
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		БанковскийСчетПолучателя = Объект.БанковскийСчетПолучателя;
		БанковскийСчетПолучателяИмя = "БанковскийСчетПолучателя";
		
	КонецЕсли;
	
	Если Объект.ДоговорСУчастникомГОЗ И ЗначениеЗаполнено(БанковскийСчетПолучателя) Тогда
		ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетПолучателя, "ОтдельныйСчетГОЗ");
		Если Не ОтдельныйСчетГОЗ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Должен быть выбран отдельный банковский счет ГОЗ';
					|en = 'Separate SDO bank account must be selected'"),
				Объект,
				БанковскийСчетПолучателяИмя,
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДоговорыСЗаказчиками.Количество() > 0 Тогда
		
		ТаблицаДоговоров = Объект.ДоговорыСЗаказчиками.Выгрузить(); 
		Отбор = Новый Структура("ДоговорСЗаказчиком", Неопределено);
		НеЗаполненныеСтроки = ТаблицаДоговоров.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаМассива Из НеЗаполненныеСтроки Цикл
			ТаблицаДоговоров.Удалить(СтрокаМассива);
		КонецЦикла;
		
		Если ТаблицаДоговоров.Количество() > 0 Тогда
		
			ЗначенияГосконтрактов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаДоговоров.ВыгрузитьКолонку("ДоговорСЗаказчиком"), "ГосударственныйКонтракт");
			
			Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Госконтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт");
				Если ЗначениеЗаполнено(Госконтракт) Тогда
					Для каждого КлючИЗначение Из ЗначенияГосконтрактов Цикл
						Если КлючИЗначение.Значение <> Госконтракт Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								НСтр("ru = 'Государственные контракты, указанные в договорах с заказчиками, не должны отличаться от госконтракта банковского счета.';
									|en = 'State contracts specified in the contract with customers should not differ from bank account state contract.'"),
								,,,
								Отказ);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если БанковскийСчетКонтролировать
		И Объект.ДоговорСУчастникомГОЗ Тогда
		
		Если
			ЭтоДоговорСКонтрагентом
			И ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт")
			<> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "ГосударственныйКонтракт")
			
			Или ЭтоДоговорМеждуОрганизациями
			И ЗначениеЗаполнено(Объект.БанковскийСчет)
			И ЗначениеЗаполнено(Объект.БанковскийСчетПолучателя)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчет, "ГосударственныйКонтракт")
			<> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетПолучателя, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Государственные контракты, указанные в банковских счетах, не должны отличаться.';
					|en = 'State contracts specified in the bank accounts should not differ.'"),
				,,,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

//-- Локализация

#Область ВыплатыСамозанятым

// Изменяет свойства элементов, связанных с операцией с самозанятыми, в документах "Приобретение товаров и услуг"
// и "Приобретение услуг и прочих активов".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой изменяется отображение.
//
Процедура НастроитьЭлементыОперацииССамозанятым(Форма, ЕстьПривязкаЧека = Истина) Экспорт

	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект; // ДанныеФормыСтруктура
	
	ВидыКонтрагентов = Новый Массив;
	ВидыКонтрагентов.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	ВидыКонтрагентов.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
	
	Элементы.ОперацияССамозанятым.Видимость =
		ВидыКонтрагентов.Найти(Форма.КонтрагентЮрФизЛицо) <> Неопределено
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
	
	Если ЕстьПривязкаЧека Тогда
		Элементы.СтатусЧекаСамозанятого.Видимость = Объект.ОперацияССамозанятым;
	КонецЕсли;
	
	Если Объект.ОперацияССамозанятым Тогда
		Элементы.НалогообложениеНДС.Видимость = Ложь;
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Отключает флаг закупки у самозанятого в документах приобретения: "Приобретение товаров и услуг" 
// и "Приобретение услуг и прочих активов".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа приобретения.
//
Процедура ЗаполнитьПризнакЗакупкиУСамозанятого(Форма) Экспорт

	//++ Локализация
	
	Объект = Форма.Объект;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ((Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
		И (Форма.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ Форма.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо)) Тогда
		Объект.ОперацияССамозанятым = Ложь;
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Заполняет документ при изменении флага "Операция с самозанятым".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ОперацияССамозанятымПриИзменении(Форма, ЕстьПривязкаЧека = Истина) Экспорт

	//++ Локализация

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(Форма, "Контрагент");
	
	Если Объект.ОперацияССамозанятым Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	Иначе
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		ПараметрыЗаполнения = МенеджерОбъекта.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Объект.НалогообложениеНДС, ПараметрыЗаполнения, Неопределено);
		УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСЗакупки(
			Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, Неопределено);
		
	КонецЕсли;
	
	НастроитьЭлементыОперацииССамозанятым(Форма, ЕстьПривязкаЧека);
	
	Если ЕстьПривязкаЧека Тогда
		
		Если Форма.ОперацияССамозанятым <> Объект.ОперацияССамозанятым Тогда
			УстановитьСтатусЗагрузкиЧеков(Форма);
		КонецЕсли;
		
		Форма.ОперацияССамозанятым = Объект.ОперацияССамозанятым;
		
	КонецЕсли;

	//-- Локализация
	
	Возврат;

КонецПроцедуры

// Устанавливает статус загрузки чеков в форме документов приобретения: "Приобретение товаров и услуг"
// и "Приобретение услуг и прочих активов".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа приобретения.
//
Процедура УстановитьСтатусЗагрузкиЧеков(Форма) Экспорт

	//++ Локализация

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВыплатыСамозанятым") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект; // ДанныеФормыСтруктура
	Элементы = Форма.Элементы;
	
	Если Не Объект.ОперацияССамозанятым Тогда
	
		Форма.ЧекиСамозанятого.Очистить();
		Форма.СтатусЧекаСамозанятого = "";
		Возврат;
	
	КонецЕсли;
	
	ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ГиперссылкаЦвет;
	
	Чеки = Новый Массив;
	
	Форма.ЧекиСамозанятого.Очистить();
	ЗаполнитьЧекиСамозанятого(Объект.Ссылка, Форма.ЧекиСамозанятого);
	
	Для Каждого ТекущийЧек Из Форма.ЧекиСамозанятого Цикл
		Чеки.Добавить(СтрШаблон("№%1", ТекущийЧек.НомерЧека));
	КонецЦикла;
	
	Если Чеки.Количество() = 0 Тогда
		
		СтатусЗагрузкиЧеков = НСтр("ru = 'Загрузить чек';
									|en = 'Import receipt'");
		ЦветТекстаСтатусЗагрузкиЧеков = ЦветаСтиля.ЦветТекстаПроблема;
		
	Иначе
	
		СтрокаЧеков = СтрСоединить(Чеки, ", ");
		СтатусЗагрузкиЧеков = СтрШаблон(НСтр("ru = '%1 %2';
											|en = '%1 %2'"), ?(Чеки.Количество() > 1, НСтр("ru = 'Чеки:';
																							|en = 'Receipts'"), НСтр("ru = 'Чек';
																													|en = 'Receipt'")), СтрокаЧеков);
	
	КонецЕсли;
	
	Форма.СтатусЧекаСамозанятого = СтроковыеФункции.ФорматированнаяСтрока(СтатусЗагрузкиЧеков);
	Элементы.СтатусЧекаСамозанятого.ЦветТекста = ЦветТекстаСтатусЗагрузкиЧеков;

	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

//++ Локализация

// Сохраняет чек самозанятого в присоединенных файлах документа.
// 
// Параметры:
//  Документ - ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ПриобретениеУслугПрочихАктивов - будущий
//             документ, владелец файла.
//  ДанныеЧека - Структура - Данные чека:
// * НомерЧека - Строка - номер чека.
// * СсылкаНаЧек - Строка - ссылка на чек.
// * ЧекСамозанятого - ДвоичныеДанные - файл чека в виде двоичных данных.
Процедура СохранитьЧекСамозанятого(Документ, ДанныеЧека) Экспорт

	Если Не ПустаяСтрока(ДанныеЧека.ЧекСамозанятого) Тогда
		
		ИмяФайла = СтрШаблон(НСтр("ru = '№%1';
									|en = '#%1'"), ДанныеЧека.НомерЧека);
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
		ПараметрыФайла.ВладелецФайлов = Документ;
		ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
		ПараметрыФайла.РасширениеБезТочки = "jpg";
		ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ПараметрыФайла.Вставить("ЭтоЧекСамозанятого", Истина);
		ПараметрыФайла.Вставить("СсылкаНаЧек", ДанныеЧека.СсылкаНаЧек);
		ПараметрыФайла.Служебный = Ложь;
		
		АдресФайла = ПоместитьВоВременноеХранилище(ДанныеЧека.ЧекСамозанятого);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла);
		
	ИначеЕсли Не ПустаяСтрока(ДанныеЧека.СсылкаНаЧек) Тогда
		ДобавитьЧекСамозанятогоИзИнтернета(
			ДанныеЧека.СсылкаНаЧек, Документ);
	КонецЕсли;

КонецПроцедуры

// Создает ссылку на скаченный файл чека самозанятого по переданной ссылке
//
// Параметры:
//  СсылкаНаЧек - Строка - URL на чек самозанятого на сайте ФНС
//  Документ - ДокументСсылка.ПриобретениеТоваровУслуг, ДокументСсылка.ПриобретениеУслугПрочихАктивов - Ссылка на 
//             документ, к которому присоединяется файл.
// 
Процедура ДобавитьЧекСамозанятогоИзИнтернета(СсылкаНаЧек, Документ) Экспорт

	Адрес = СсылкаНаЧек;
	
	ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
	ПараметрыПолучения.Таймаут = 1260;
	
	Результат = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(Адрес, ПараметрыПолучения);
	
	Если Результат.Статус Тогда
		
		ИмяФайла = СтрШаблон(НСтр("ru = '№%1';
									|en = 'No. %1'"), НомерЧекаИзСсылки(СсылкаНаЧек));
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла("Описание");
		ПараметрыФайла.ВладелецФайлов = Документ;
		ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
		ПараметрыФайла.РасширениеБезТочки = "jpg";
		ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		ПараметрыФайла.Служебный = Ложь;
		ПараметрыФайла.Вставить("ЭтоЧекСамозанятого", Истина);
		ПараметрыФайла.Вставить("СсылкаНаЧек", СсылкаНаЧек);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, Результат.Путь);
		
		УдалитьИзВременногоХранилища(Результат.Путь);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Не удалось скачать чек самозанятого.
			|Описание: %1
			|URL: %2';
			|en = 'Cannot download the self-employed person receipt.
			|Details: %1
			|URL: %2'");
		Если Результат.Свойство("КодСостояния") Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Код ошибки: %3';
															|en = 'Error code: %3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.СообщениеОбОшибке, Адрес, Результат.КодСостояния);
		Иначе
			ТекстОшибки = СтрШаблон(ТекстОшибки, Результат.СообщениеОбОшибке, Адрес);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение чека самозанятого по ссылке';
										|en = 'Get a self-employed person receipt using the link'"), УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

// Функция возвращает номер чека из ссылки на чек на сайте ФНС
//
// Параметры:
//  СсылкаНаЧек - Строка - URL на чек самозанятого на сайте ФНС
// 
// Возвращаемое значение:
//  Строка - Номер чека
//
Функция НомерЧекаИзСсылки(СсылкаНаЧек) Экспорт
	
	ЧастьСсылкиНаЧек = СтрЗаменить(СсылкаНаЧек, ДенежныеСредстваПовтИспРФ.АдресСервисаФНС(), "");
	МассивЧастейСсылки = СтрРазделить(ЧастьСсылкиНаЧек, "/");

	ИНН = ИННИзСсылкиНаЧек(МассивЧастейСсылки);
	
	НомерЧека = "";
	ПредыдущееЗначение = "";
	СоответствуетУсловиям = Ложь;
	// Номер чека идет после ИНН и перед "print"
	Для Каждого ЧастьСсылки Из МассивЧастейСсылки Цикл
		Если ЗначениеЗаполнено(НомерЧека) И ЧастьСсылки = "print" Тогда
			СоответствуетУсловиям = Истина;
		КонецЕсли;
		Если ПредыдущееЗначение = ИНН Тогда
			НомерЧека = ЧастьСсылки;
		КонецЕсли;
		ПредыдущееЗначение = ЧастьСсылки;
	КонецЦикла;
	Если Не СоответствуетУсловиям Тогда
		НомерЧека = "";
	КонецЕсли;
	
	Возврат НомерЧека;
	
КонецФункции

// Получает ИНН контрагента из ссылки на чек самозанятого.
// 
// Параметры:
//  МассивЧастейСсылки - Массив из Строка - Массив, полученный в результате разделения ссылки на чек по символу "/".
// 
// Возвращаемое значение:
//  Строка - ИНН
//
Функция ИННИзСсылкиНаЧек(МассивЧастейСсылки) Экспорт

	ИНН = "";
	Для Каждого ЧастьСсылки Из МассивЧастейСсылки Цикл
		
		Если ЧастьСсылки <> ""
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьСсылки) Тогда
			ТекстОшибки = "";
			СоответствуетТребованиям = 
				РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЧастьСсылки, Ложь, ТекстОшибки);
			Если СоответствуетТребованиям Тогда
				ИНН = ЧастьСсылки;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИНН;

КонецФункции

// Возвращает адрес сервиса ФНС с чеками
//
// Возвращаемое значение:
//   Строка - адрес страницы
//
Функция АдресСервисаФНС() Экспорт
	
	ИспользуетсяТестовыйРежим = Ложь;
	ОбменСБанкамиПереопределяемый.ПроверитьИспользованиеТестовогоРежима(ИспользуетсяТестовыйРежим);
	Если Не ИспользуетсяТестовыйРежим Тогда
		Возврат "https://lknpd.nalog.ru";
	Иначе
		Возврат "https://lknpd-adp.gnivc.ru";
	КонецЕсли;
	
КонецФункции

// Возвращает признак, что счет открыт в Сбербанке
//
// Параметры:
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Ссылка на банковский счет, который стоит проверить.
//
// Возвращаемое значение:
//   Булево - Истина, если счет открыт в Сбербанке
//
Функция ЭтоСчетСбербанка(БанковскийСчет) Экспорт
	
	РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	ЭтоСчетСбербанка = Ложь;
	
	БИК = РеквизитыСчета.БИК;
	Макет = Справочники.НастройкиОбменСБанками.ПолучитьМакет("СписокБанков");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Для Индекс = 1 По Макет.ВысотаТаблицы Цикл
		БИКБанка = Макет.Область(Индекс, 2).Текст;
		Если БИК <> БИКБанка Тогда
			Продолжить;
		КонецЕсли;
		СпособОбмена = Макет.Область(Индекс, 3).Текст;
		Если СпособОбмена = "Сбербанк" Тогда
			ЭтоСчетСбербанка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭтоСчетСбербанка;
	
КонецФункции

// Очищает неиспользуемые реквизиты при оплате самозанятым.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств,
//                   ДокументОбъект.СписаниеБезналичныхДенежныхСредств - текущий объект.
//
Процедура ОчиститьНеиспользуемыеРеквизитыОплатыСамозанятым(ДокументОбъект) Экспорт

	Если ДокументОбъект.ОперацияССамозанятым Тогда
		
		ДокументОбъект.ПеречислениеВБюджет = Ложь;

		//++ НЕ УТ
		ДокументОбъект.ПлатежиПо275ФЗ = Ложь;
		//-- НЕ УТ
		
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает параметры выбора для счета для списка контрагентов 
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскихСчетаСпискаКонтрагентов(Объект, Элемент) Экспорт
	
	СвязиПараметров = Новый Массив;
	СвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.БанковскиеСчетаСпискаКонтрагентов.ТекущиеДанные.Контрагент"));
	
	Если Объект.ПлатежСКонвертацией Тогда
		СвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметров);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСписокТиповДокумента(Объект, Элемент) Экспорт
	
	ТипыДокумента = Перечисления.ТипыПлатежныхДокументов;
	СписокВыбора = Элемент.СписокВыбора;
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ТипыДокумента.ПлатежноеПоручение);
	СписокВыбора.Добавить(ТипыДокумента.ИнкассовоеПоручение);
	СписокВыбора.Добавить(ТипыДокумента.ПлатежноеТребование);
	СписокВыбора.Добавить(ТипыДокумента.ПлатежныйОрдер);
	СписокВыбора.Добавить(ТипыДокумента.БанковскийОрдер);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи") Тогда
		СписокВыбора.Добавить(ТипыДокумента.РаспоряжениеОбОбязательнойПродаже);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	ИмяОбъекта = "";
	Если Форма.Параметры.Свойство("Ключ") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Форма.Параметры.Ключ));
		Если ОбъектМетаданных <> Неопределено Тогда
			ИмяОбъекта = ОбъектМетаданных.Имя;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить настройку полей формы';
								|en = 'Unable to configure form fields'");
	КонецЕсли;
	
	НастройкиПолейФормыЛокализация = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	
	МодульЛокализацииОбъекта = ОбщегоНазначения.ОбщийМодуль(ИмяОбъекта + "Локализация");
	МодульЛокализацииОбъекта.ЗаполнитьНастройкиПолейФормы(НастройкиПолейФормыЛокализация);
	
	НастройкиПолейФормы = Форма.РеквизитФормыВЗначение("НастройкиПолей");
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(НастройкиПолейФормы, НастройкиПолейФормыЛокализация);
	Форма.ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");
	
	ЗависимостиПолейФормы = ДенежныеСредстваСервер.ЗависимостиПолейФормы(НастройкиПолейФормы);
	Форма.ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");
	
КонецПроцедуры

Процедура ПриСозданииФормыСпискаПрисоединенныхФайлов(Форма) Экспорт
	
	Если ДокументыСПередачейФайловВБанк().Найти(ТипЗнч(Форма.ВладелецФайла)) <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Форма.Список.ТекстЗапроса);
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля.Добавить("Файлы.ДляПередачиВБанк");
		Форма.Список.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		НовыйЭлемент = Форма.Элементы.Добавить("СписокДляПередачиВБанк", Тип("ПолеФормы"), Форма.Элементы.Список);
		НовыйЭлемент.ПутьКДанным = "Список.ДляПередачиВБанк";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Форма.Элементы.Переместить(НовыйЭлемент, Форма.Элементы.Список, Форма.Элементы.СписокНомерКартинкиПодписанЗашифрован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыЭлементаПрисоединенныхФайлов(Форма) Экспорт
	
	Если ДокументыСПередачейФайловВБанк().Найти(ТипЗнч(Форма.Объект.ВладелецФайла)) <> Неопределено Тогда
		НовыйЭлемент = Форма.Элементы.Добавить("ДляПередачиВБанк", Тип("ПолеФормы"), Форма.Элементы.ГруппаОбщиеДанные);
		НовыйЭлемент.ПутьКДанным = "Объект.ДляПередачиВБанк";
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Форма.Элементы.Переместить(НовыйЭлемент, Форма.Элементы.ГруппаОбщиеДанные, Форма.Элементы.Наименование0);
	КонецЕсли;
	
КонецПроцедуры

Функция НадписьФайлыДляПередачиВБанк(Ссылка) Экспорт
	
	ТекстНадписи = НСтр("ru = 'Файлы для передачи в банк';
						|en = 'Files to transfer to the bank'");
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	%ИмяТаблицы%
		|ГДЕ
		|	ВладелецФайла = &Ссылка
		|	И ДляПередачиВБанк
		|	И НЕ ПометкаУдаления
		|";
		
		ИмяТаблицы = "Справочник." + Ссылка.Метаданные().Имя + "ПрисоединенныеФайлы";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяТаблицы%", ИмяТаблицы);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТекстНадписи = ТекстНадписи + " (" + Запрос.Выполнить().Выгрузить()[0].Количество + ")";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

Функция РеквизитыПлательщика(Объект) Экспорт
	
	Возврат ДанныеПлательщика(Объект.Организация, Объект.БанковскийСчет);
	
КонецФункции

// Возвращает значение основных реквизитов плательщика.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация.
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - банковский счет.
// 
// Возвращаемое значение:
//  Структура - данные плательщика:
// * ИННПлательщика - Строка, Неопределено - ИНН.
// * КПППлательщика - Строка, Неопределено - КПП.
// * ТекстПлательщика - Строка, Неопределено - наименование плательщика в печатных документах.
//
Функция ДанныеПлательщика(Организация, БанковскийСчет) Экспорт
	
	Результат = Новый Структура("ИННПлательщика, КПППлательщика, ТекстПлательщика");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		СписокРеквизитов = Новый Структура;
		СписокРеквизитов.Вставить("ИННПлательщика", "ИНН");
		СписокРеквизитов.Вставить("КПППлательщика", "КПП");
		
		ТекстКорреспондента = "";
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекстКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ТекстКорреспондента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстКорреспондента) Тогда
			Результат.ТекстПлательщика = ТекстКорреспондента;
		Иначе
			СписокРеквизитов.Вставить("ТекстПлательщика", "НаименованиеСокращенное");
		КонецЕсли;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, СписокРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, РеквизитыОрганизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НадписьРеквизитыПлательщика(ИНН, КПП, ТекстКорреспондента, ЮрФизЛицо, ХозяйственнаяОперация) Экспорт
	
	ШаблонНадписи = НСтр("ru = 'ИНН %1%2, %3';
						|en = 'TIN %1%2, %3'");
	
	СтрокаИНН = ?(ПустаяСтрока(ИНН), НСтр("ru = '<не указан>';
											|en = '<not specified>'"), СокрЛП(ИНН));
	
	ТребуетсяУказаниеКПП = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	КППОтсутствует = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	
	СтрокаКПП = ", " + НСтр("ru = 'КПП';
							|en = 'CRTR'");
	Если Не ЗначениеЗаполнено(КПП) Тогда
		Если ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		ИначеЕсли Не ТребуетсяУказаниеКПП И КППОтсутствует Тогда
			СтрокаКПП = "";
		ИначеЕсли ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " " + НСтр("ru = '<не указан>';
												|en = '<not specified>'");
		ИначеЕсли Не ТребуетсяУказаниеКПП И Не КППОтсутствует Тогда
			СтрокаКПП = СтрокаКПП + " 0";
		КонецЕсли;
	Иначе
		СтрокаКПП = СтрокаКПП + " " + КПП;
	КонецЕсли;
	
	СтрокаТекстКорреспондента = СокрЛП(ТекстКорреспондента);
	
	Возврат СтрШаблон(ШаблонНадписи,
		СтрокаИНН,
		СтрокаКПП,
		СтрокаТекстКорреспондента);
		
КонецФункции

//++ НЕ УТ

// Удаляет подключаемые команды обмена с банком
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения - форма, в которой необходимо исключить команды обмена с банком
//
Процедура УдалитьПодключаемыеКомандыОбменаСБанком(Объект) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныйОбменСБанкамиПоЗарплатнымПроектам") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ПараметрыПодключаемыхКоманд) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВидыКоманд = Новый ТаблицаЗначений;
	ВидыКоманд.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ВидыКоманд.Колонки.Добавить("ИмяПодменю", Новый ОписаниеТипов("Строка"));
	ВидыКоманд.Колонки.Добавить("Картинка");
	ВидыКоманд.Колонки.Добавить("Отображение");
	
	ОбменСБанкамиПоЗарплатнымПроектам.ПриОпределенииВидовПодключаемыхКоманд(ВидыКоманд);
	
	ПодключенныеКоманды = ПолучитьИзВременногоХранилища(Объект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	КорневыеПодменюИКоманды = Объект.ПараметрыПодключаемыхКоманд.КорневыеПодменюИКоманды;
	ПодменюСУсловиямиВидимости = Объект.ПараметрыПодключаемыхКоманд.ПодменюСУсловиямиВидимости;
		
	Если ТипЗнч(ПодключенныеКоманды) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого ВидКоманды Из ВидыКоманд Цикл
		
		ПодключеннаяКоманда = ПодключенныеКоманды.Найти(ВидКоманды.Имя, "Вид");
		
		Если ПодключеннаяКоманда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИскомаяКоманда = Объект.Команды.Найти(ПодключеннаяКоманда.ИмяВФорме);
		
		Если ИскомаяКоманда <> Неопределено Тогда
			Объект.Команды.Удалить(ИскомаяКоманда);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(КорневыеПодменюИКоманды, ВидКоманды.ИмяПодменю);
		
		ВсегоЭлементов = ПодменюСУсловиямиВидимости.ВГраница();
		
		Для Индекс = 0 По ВсегоЭлементов Цикл
			
			ЭлементМассива = ПодменюСУсловиямиВидимости.Получить(ВсегоЭлементов - Индекс);
			
			ИмяКоманды = "";
			ЭлементМассива.Свойство("Имя", ИмяКоманды);
			
			Если ИмяКоманды = ВидКоманды.ИмяПодменю Тогда
				ПодменюСУсловиямиВидимости.Удалить(ВсегоЭлементов - Индекс);
			КонецЕсли;
			
		КонецЦикла;
		
		ПодключенныеКоманды.Удалить(ПодключеннаяКоманда);
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(Объект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	Объект.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд = ПоместитьВоВременноеХранилище(ПодключенныеКоманды, Объект.УникальныйИдентификатор);

КонецПроцедуры

//-- НЕ УТ

// Проверяет корректность заполнения поля "Код вида дохода".
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств, ДокументОбъект.СписаниеБезналичныхДенежныхСредств - документ,
//           для которого выполняется проверка.
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - операция документа
//  Отказ - Булево - признак наличия ошибки
//
Процедура ПроверитьЗаполнениеКодаВидаДохода(Объект, ХозяйственнаяОперация, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаДохода) Тогда
		Возврат;
	КонецЕсли;
	
	Коды = ПлатежиВБюджетКлиентСервер.КодыВидовДохода(Объект.Дата,
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Если Коды.НайтиПоЗначению(Объект.КодВидаДохода) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Значение в поле ""КВД"" отсутствует в списке выбора.';
								|en = 'In the choice list, the ""IKC"" field is a missing value.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "КодВидаДохода", , Отказ);
		
	КонецЕсли;

КонецПроцедуры	

// Возвращает ссылку на созданный документ "Зачисление ДС на лицевые счета", формирует документ по данным файла
// 
// Параметры:
//  ДвоичныеДанныеФайла - ДвоичныеДанные - Файл в виде двоичных данных
//  БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет
// 
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.ПодтверждениеЗачисленияЗарплаты - подтверждение зачисления денежных средств
Функция ФормированиеПодтвержденияЗачисленияДенежныхСредств(ДвоичныеДанныеФайла, БанковскийСчет) Экспорт

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения());
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеЗаполнения = ОбменСБанкамиУТ.ДанныеПодтвержденияЗачисленияИзXDTO(ОбъектXDTO);
	
	ЧтениеXML.Закрыть();
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
	ХешСумма = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	ДанныеЗаполнения.Вставить("ХешФайла", ХешСумма);
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	
	Если ДанныеЗаполнения.РасчетныйСчетОрганизации <> НомерСчета Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ПервичныйДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ОшибочныеСтроки = ДанныеЗаполнения.Сотрудники.НайтиСтроки(Отбор);
	
	Для каждого ТекСтрока Из ОшибочныеСтроки Цикл
		ДанныеЗаполнения.Сотрудники.Удалить(ТекСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВложенныйЗапрос.Документ КАК Документ,
		|	ВложенныйЗапрос.Приоритет КАК Приоритет
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодтверждениеЗачисленияЗарплаты.Ссылка КАК Документ,
		|		0 КАК Приоритет
		|	ИЗ
		|		Документ.ПодтверждениеЗачисленияЗарплаты КАК ПодтверждениеЗачисленияЗарплаты
		|	ГДЕ
		|		ПодтверждениеЗачисленияЗарплаты.ХешФайла = &ХешФайла
		|		И ПодтверждениеЗачисленияЗарплаты.ПервичныйДокумент = &ПервичныйДокумент
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодтверждениеЗачисленияЗарплаты.Ссылка,
		|		1
		|	ИЗ
		|		Документ.ПодтверждениеЗачисленияЗарплаты КАК ПодтверждениеЗачисленияЗарплаты
		|	ГДЕ
		|		ПодтверждениеЗачисленияЗарплаты.ПервичныйДокумент = &ПервичныйДокумент) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("ПервичныйДокумент", ДанныеЗаполнения.ПервичныйДокумент);
	Запрос.УстановитьПараметр("ХешФайла", ХешСумма);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		
	Иначе
		ДокументОбъект = Документы.ПодтверждениеЗачисленияЗарплаты.СоздатьДокумент();
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		Возврат ДокументОбъект.Ссылка;
	КонецЕсли;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ДокументОбъект.УстановитьПометкуУдаления(Ложь);
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ДанныеЗаполнения);
	
	ЕстьОшибки = ДокументОбъект.ПроверитьЗаполнение();
	
	ОшибкиЗагрузки = "";
	
	Если ДокументОбъект.Сотрудники.Количество() <> ДанныеЗаполнения.КоличествоЗаписей Тогда
		ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗагрузки,
			НСтр("ru = 'Количество строк в документе не совпадает с контрольными данными.';
				|en = 'Number of lines in the document does not match the check data.'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ДанныеЗаполнения.СуммаИтого <> Неопределено
		И ДокументОбъект.Сотрудники.Итог("Сумма") <> ДанныеЗаполнения.СуммаИтого Тогда
		ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗагрузки,
			НСтр("ru = 'Сумма, зачисленная по документу, не совпадает с контрольными данными.';
				|en = 'Amount transferred under the document does not match the check data.'"));
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗагрузки,
														ДокументОбъект.ДополнительныеСвойства.ОшибкиЗаполнения);
	КонецЕсли;
	
	ДокументОбъект.ОшибкиЗагрузки = СокрЛП(ОшибкиЗагрузки);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Если Не ЕстьОшибки Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

// Возвращает таблицу физических лиц, созданную по данным ФИО.
// 
// Параметры:
//  Сотрудники - ТаблицаЗначений - таблица сотрудников для получения ссылок:
//   * Фамилия - Строка - фамилия сотрудника
//   * Имя - Строка - имя сотрудника
//   * Отчество - Строка - отчество сотрудника
//   * НомерЛицевогоСчета - Строка - номер лицевого счета сотрудника
//   * НомерСтроки - Строка - идентификатор номера строки в таблице
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Физические лица с номерами лицевых счетов:
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - ссылка на справочник для ФИО
//   * НомерЛицевогоСчета - Строка - номер лицевого счета ФИО
//   * НомерСтроки - Строка - идентификатор номера строки в передаваемой таблице сотрудников
//
Функция ФизическиеЛицаЛицевыхСчетов(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Сотрудники.Фамилия КАК СТРОКА(50)) КАК Фамилия,
		|	ВЫРАЗИТЬ(Сотрудники.Имя КАК СТРОКА(50)) КАК Имя,
		|	ВЫРАЗИТЬ(Сотрудники.Отчество КАК СТРОКА(50)) КАК Отчество,
		|	Сотрудники.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	Сотрудники.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ДанныеСотрудников
		|ИЗ
		|	&Сотрудники КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеСотрудников.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
		|	ДанныеСотрудников.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ДанныеСотрудников КАК ДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|		ПО ДанныеСотрудников.Фамилия = ФИОФизическихЛиц.Фамилия
		|			И ДанныеСотрудников.Имя = ФИОФизическихЛиц.Имя
		|			И ДанныеСотрудников.Отчество = ФИОФизическихЛиц.Отчество
		|";
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет наличие выполненной выгрузки реестра в банк на перечисление ДС физическим лицам в измененном документе и
// выдает пользователю вопрос.
//
// Параметры:
//  ТекущийОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - проверяемый документ.
//  Отказ - Булево - если Отказ будет ИСТИНА, то программа прекратит выполнения после обработчика, из которого вызвана
//                   процедура.
//  ПроверяемыеДанные - Массив из Строка - список имен основных реквизитов, табличных частей и реквизитов табличных частей,
//                                  которые могли измениться. В процедуре массив дополнен именами реквизитов.
//  ФлагОбменСБанками - Булево - признак запуска проверки в момент обмена с банком
//
Процедура ПроверитьВыгрузкуРеестраНаЗачислениеДенежныхСредств(ТекущийОбъект, Отказ, ФлагОбменСБанками) Экспорт
	
	Если НЕ (ТекущийОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ТекущийОбъект.СписокФизЛиц) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольныеРеквизиты = Новый Массив;
	КонтрольныеРеквизиты.Добавить("Организация");
	КонтрольныеРеквизиты.Добавить("Номер");
	КонтрольныеРеквизиты.Добавить("Дата");
	КонтрольныеРеквизиты.Добавить("ЛицевыеСчетаСотрудников");
	КонтрольныеРеквизиты.Добавить("БанковскийСчет");
	КонтрольныеРеквизиты.Добавить("Валюта");
	КонтрольныеРеквизиты.Добавить("ОтделениеБанка");
	КонтрольныеРеквизиты.Добавить("ФилиалОтделенияБанка");
	КонтрольныеРеквизиты.Добавить("НомерВходящегоДокумента");
	КонтрольныеРеквизиты.Добавить("ДатаВходящегоДокумента");
	КонтрольныеРеквизиты.Добавить("СуммаДокумента");
	КонтрольныеРеквизиты.Добавить("НомерДоговораСБанком");
	КонтрольныеРеквизиты.Добавить("ДатаДоговораСБанком");
	
	Если ТекущийОбъект.ДатаВыгрузкиРеестра <> '00010101' Тогда
		
		Если ДокументИзменен(ТекущийОбъект, КонтрольныеРеквизиты)
			И НЕ ДенежныеСредстваСервер.СуществуютЗачисленияДСНаЛицевыеСчета(ТекущийОбъект.Ссылка) Тогда
		
			ТекстСообщения = НСтр("ru = 'Данные изменились с последней выгрузки реестра в банк и могут повлиять на процесс зачисления денежных средств.';
									|en = 'The data has changed since the last registry export to the bank. It may affect the cash deposit process.'");
			
			Если Не ФлагОбменСБанками Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает первичный документ для документа "Зачисление ДС на лицевые счета" по уникальному идентификатору.
// 
// Параметры:
//  Идентификатор - Строка - уникальный идентификатор объекта в информационной базе.
// 
// Возвращаемое значение:
// - ОпределяемыйТип.ДокументЗачисленияЗарплаты
//
Функция ПервичныйДокументПоИдентификатору(Идентификатор) Экспорт
	
	ИдентификаторДокумента = Новый УникальныйИдентификатор(Идентификатор);
	ПервичныйДокументСсылка = Документы.СписаниеБезналичныхДенежныхСредств.ПолучитьСсылку(ИдентификаторДокумента);
	
	//++ НЕ УТ
	Если ПервичныйДокументСсылка.Пустая() Тогда
		
		ТипыПервичногоДокумента = Метаданные.Документы.ПодтверждениеЗачисленияЗарплаты.Реквизиты.ПервичныйДокумент.Тип.Типы();
	
		Для Каждого ТипПервичногоДокумента Из ТипыПервичногоДокумента Цикл
			
			МетаданныеПервичногоДокумента = Метаданные.НайтиПоТипу(ТипПервичногоДокумента);
			МенеджерПервичногоДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеПервичногоДокумента.ПолноеИмя());
			ПервичныйДокументСсылка = МенеджерПервичногоДокумента.ПолучитьСсылку(ИдентификаторДокумента);
			
			Если Не ПервичныйДокументСсылка.Пустая() Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	//-- НЕ УТ
	
	Возврат ПервичныйДокументСсылка;
	
КонецФункции

//++ НЕ УТ

// Проверяет уникальность добавляемой записи в справочники "Источники поступления целевых средств" 
// и "Направления расходования целевых средств" и выводит сообщение в случае ошибки.
//
// Параметры:
//  Объект - СправочникОбъект.ИсточникиПоступленияЦелевыхСредств, СправочникОбъект.НаправленияРасходованияЦелевыхСредств -
//        справочник, куда добавляется запись.
//  ЕстьОшибка - Булево - наличие ошибки при проверке.
//
Процедура ПроверитьУникальностьЗаписиСтатьиЦелевыхСредств(Объект, ЕстьОшибка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.Ссылка КАК Ссылка
		|ИЗ
		|	&ТекущийСправочник КАК ТаблицаДанных
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ЭтоГруппа
		|				ТОГДА ТаблицаДанных.Наименование = &Наименование
		|			ИНАЧЕ ТаблицаДанных.Код = &Код
		|		КОНЕЦ
		|	И ТаблицаДанных.Ссылка <> &Ссылка";
	
	ИмяСправочника = Объект.Метаданные().ПолноеИмя();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекущийСправочник", ИмяСправочника);
	
	Запрос.УстановитьПараметр("Код", Объект.Код);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ЭтоГруппа", Объект.ЭтоГруппа);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если Объект.ЭтоГруппа Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Папка с наименованием ""%1"" уже существует.
                                             |Измените наименование или используйте уже существующие данные.';
                                             |en = 'Folder with the ""%1"" name already exists.
                                             |Change the name or use the existing data.'"), Объект.Наименование);
			Поле = "Наименование";
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Запись с кодом ""%1"" уже существует.
                                             |Измените код или используйте уже существующие данные.';
                                             |en = 'Record with ""%1"" code already exists.
                                             |Change the code or use the existing data.'"), Объект.Код);
			Поле = "Код";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, , ЕстьОшибка);
		
	КонецЦикла;

КонецПроцедуры

// Выполняет чтение данных макета и заполняет таблицу классификатора
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта.
//  Макет - ТекстовыйДокумент - макет классификатора.
//
Процедура ЗаполнитьТаблицуКлассификатораСтатьейЦелевыхСредств(Форма, Макет) Экспорт

	КлассификаторXML = Макет.ПолучитьТекст();
	
	ТаблицаДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(КлассификаторXML);
	Форма.ТаблицаКлассификатора.Очистить();
	Форма.ТаблицаКлассификатора.Загрузить(ТаблицаДанных);

КонецПроцедуры

// Создает запись в справочнике статей целевых средств и возвращает список выбранных строк из данных классификатора
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма классификатора.
//  ИмяСправочника - Строка - имя справочника, в котором создается запись.
//  ВыбранныеСтроки - Массив - список выбранных строк из таблицы классификатора.
// 
// Возвращаемое значение:
//   - Массив
//
Функция ВыбранныеЗначенияИзКлассификатора(Форма, ИмяСправочника, ВыбранныеСтроки) Экспорт

	МассивВыбора = Новый Массив;
	
	Если ВыбранныеСтроки.Количество() > 0 Тогда
		
		Для Каждого ТекущаяСтрока Из ВыбранныеСтроки Цикл
			
			ДанныеСтроки = Форма.ТаблицаКлассификатора.НайтиПоИдентификатору(ТекущаяСтрока);
			
			ЭлементСправочника = Справочники[ИмяСправочника].НайтиПоКоду(ДанныеСтроки.Код);
			
			Если ЭлементСправочника.Пустая() Тогда
				ЭлементСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ЭлементСправочника, ДанныеСтроки);
				ЭлементСправочника.Наименование = ЭлементСправочника.Код;
				ЭлементСправочника.Записать();
			КонецЕсли;
			
			МассивВыбора.Добавить(ЭлементСправочника.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВыбора;

КонецФункции

// Возвращает признак действующего сотрудника.
// 
// Параметры:
//  Отбор - Структура - параметры проверки.
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоДействующийСотрудник(Отбор) Экспорт

	Если Не ЗначениеЗаполнено(Отбор.Сотрудник) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляПодбораСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудников
		|ГДЕ
		|	ДанныеДляПодбораСотрудников.Организация = &Организация
		|	И ДанныеДляПодбораСотрудников.ИдентификаторЗаписи В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ДанныеДляПодбораСотрудниковОтбор.ИдентификаторЗаписи
		|			ИЗ
		|				РегистрСведений.ДанныеДляПодбораСотрудников КАК ДанныеДляПодбораСотрудниковОтбор
		|			ГДЕ
		|				ДанныеДляПодбораСотрудниковОтбор.Сотрудник = ДанныеДляПодбораСотрудников.Сотрудник
		|				И ДанныеДляПодбораСотрудниковОтбор.Наименование = ДанныеДляПодбораСотрудников.Наименование
		|				И ДанныеДляПодбораСотрудниковОтбор.Начало <= &ДатаОкончания
		|				И (ДанныеДляПодбораСотрудниковОтбор.Окончание = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ДанныеДляПодбораСотрудниковОтбор.Окончание >= &ДатаНачала)
		|			УПОРЯДОЧИТЬ ПО
		|				ДанныеДляПодбораСотрудниковОтбор.ПоДоговоруГПХ,
		|				ДанныеДляПодбораСотрудниковОтбор.Начало УБЫВ,
		|				ДанныеДляПодбораСотрудниковОтбор.Организация,
		|				ДанныеДляПодбораСотрудниковОтбор.Филиал,
		|				ДанныеДляПодбораСотрудниковОтбор.Подразделение)
		|	И ДанныеДляПодбораСотрудников.ЭтоГоловнойСотрудник
		|	И НЕ ДанныеДляПодбораСотрудников.ВАрхиве
		|	И ДанныеДляПодбораСотрудников.Филиал = &Организация
		|	И ДанныеДляПодбораСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Отбор.Сотрудник);
	Запрос.УстановитьПараметр("Организация", Отбор.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", Отбор.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Отбор.ДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

//-- НЕ УТ

// Проверяет счет на соответствие лицевому счету при казначейском сопровождении.
//
// Параметры:
//  Объект - ФормаКлиентскогоПриложения - форма, на которой выполняется проверка.
//
Процедура ПроверитьЛицевойСчетКазначейскогоСопровождения(Объект) Экспорт

	//++ НЕ УТ
	Если ЗначениеЗаполнено(Объект.НомерЛицевогоСчета)
		И НЕ ЭтоЛицевойСчетКазначейскогоСопровождения(Объект.НомерЛицевогоСчета) Тогда

		ТекстОшибки = НСтр("ru = 'Номер не соответствует формату лицевого счета при казначейском сопровождении.';
							|en = 'The number does not match the personal account format upon treasury support.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	//-- НЕ УТ

КонецПроцедуры

// Корректирует номер документа на основании письма ЦБ России № 59-Т от 03.04.2013.
// 
// Параметры:
//  Объект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств, ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - 
//           документ, в котором выполняется корректировка.
//
Процедура ИзменитьНомерПлатежногоПоручения(Объект) Экспорт

	ПоследниеТриСимвола = Прав(СокрЛП(Объект.Номер), 3);
	ЭтоПлатежныйДокументКВыгрузке = (ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств")
		И Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение)
		ИЛИ (ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
		И Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование);
		
	Если ПоследниеТриСимвола = "000"
		И ЭтоПлатежныйДокументКВыгрузке
		И Не (ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
		ИЛИ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)) Тогда
		
		ПозицияДефис = Найти(Объект.Номер, "-");
		ОсновнойПрефикс = Лев(Объект.Номер, ПозицияДефис);
		ПользовательскийПрефикс = ПрефиксацияОбъектовКлиентСервер.ПользовательскийПрефикс(Объект.Номер);
		Префикс = ОсновнойПрефикс + ПользовательскийПрефикс;
		
		ДлинаНомера = СтрДлина(СокрЛП(Объект.Номер)) - СтрДлина(Префикс);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер, Истина, Истина);
		НомерДокумента = ?(НомерДокумента = "", 0, Число(НомерДокумента));
		НомерДокумента = Формат(НомерДокумента + 1, "ЧГ=0");
		
		Пока СтрДлина(НомерДокумента) < ДлинаНомера Цикл
			НомерДокумента = "0" + НомерДокумента;
		КонецЦикла;
		
		Объект.Номер = Префикс + НомерДокумента;
		
	КонецЕсли;

КонецПроцедуры

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//  Настройки - см. ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы.
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт

	Финансы = ФинансоваяОтчетностьСервер;
	
	ОтборВыплатаСамозанятому = ДенежныеСредстваСервер.ОтборВыплатаСамозанятому();
	ОтборСписокКонтрагентов = ДенежныеСредстваСервер.ОтборСписокКонтрагентов(ОтборВыплатаСамозанятому);
	
	// Оплата самозанятому
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОперацияССамозанятым");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, ГруппаИли);
	Финансы.НовыйОтбор(ГруппаИли, "Дополнительно.КонтрагентЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	Финансы.НовыйОтбор(ГруппаИли, "Дополнительно.КонтрагентЮрФизЛицо", Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	Финансы.НовыйОтбор(ГруппаИли, "ОперацияССамозанятым", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// Получатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЛокализацияГруппаПолучатель");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Получатель");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Самозанятый';
												|en = 'Self-employed person'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Получатель");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Финансы.НовыйОтбор(Элемент.Условие, "СписокКонтрагентов", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Пустой контрагент
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПустойКонтрагент");
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПлатежиПо275ФЗ
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПлатежиПо275ФЗ");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаНе);
	Элемент.Свойства.Вставить("Видимость");
	
	#Область РасшифровкаПлатежа
	// Контрагент
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Контрагент");
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	// ГруппаНДС
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаНДС");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область БанковскиеСчетаКонтрагентов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентов");
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентовКонтрагент");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Элемент.Свойства.Вставить("Заголовок", "Самозанятый");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскиеСчетаСпискаКонтрагентовБанковскийСчетКонтрагента");
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, Элемент.Условие);
	Элемент.Свойства.Вставить("Заголовок", "Счет");
	#КонецОбласти
	
КонецПроцедуры

// Процедура устанавливает параметры выбора для контрагента.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа.
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Элемент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Форма, Объект, Элемент) Экспорт
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	
КонецПроцедуры

// Устанавливает код вида дохода для самозанятого.
//
// Параметры:
//  Объект - ДокументОбъект - документ, в котором выполняется установка.
//
Процедура УстановитьКодВидаДоходаСамозанятого(Объект) Экспорт

	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ОперацияССамозанятым)
		И Не Объект.СписокКонтрагентов Тогда
		
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
		
		Если ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			Объект.КодВидаДохода = "1";
		Иначе
			Объект.КодВидаДохода = "";
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выполняет изменение данных объекта и реквизитов формы при изменении переключателя списка контрагентов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется изменение.
//
Процедура ПриИзмененииПризнакаСпискаКонтрагентов(Форма) Экспорт

	Форма.Объект.СписокКонтрагентов = Булево(Форма.СписокКонтрагентов);
	
	Форма.Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Форма.Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	
	Если Булево(Форма.СписокКонтрагентов) Тогда
		
		Форма.Объект.КодВидаДохода = "";
		
		Форма.ДоговорКонтрагента = Неопределено;
		Форма.Объект.Договор = Неопределено;
		ДенежныеСредстваСервер.ЗаполнитьДанныеОбъектаРасчетовРасшифровкиПлатежа(Форма.Объект);
		
	КонецЕсли;
	
	УстановитьПереключательРасшифровки(Форма);
	
	ЗаполнитьКонтрагентаРасшифровкиПлатежа(Форма.Объект);
	ЗаполнитьРеестрКонтрагентов(Форма.Объект);
	ДенежныеСредстваСерверЛокализация.УстановитьПараметрыВыбораБанковскихСчетаСпискаКонтрагентов(
		Форма.Объект, Форма.Элементы.БанковскиеСчетаСпискаКонтрагентовБанковскийСчетКонтрагента);

КонецПроцедуры

// Выполняет изменение данных объекта и реквизитов формы при изменении хозяйственной операции.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется изменение операции.
//
Процедура ПриИзмененииХозяйственнойОперации(Форма) Экспорт

	Если Форма.Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Форма.Объект.ОперацияССамозанятым Тогда
		
		ТипКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Контрагент, "ЮридическоеФизическоеЛицо");
		Если ТипКонтрагента <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Форма.Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Форма.Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		Форма.Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		
	Иначе
		Форма.СписокКонтрагентов = 0;
		Форма.Объект.СписокКонтрагентов = Булево(Форма.СписокКонтрагентов);
		Форма.Объект.ОперацияССамозанятым = Ложь;
	КонецЕсли;
	
	УстановитьКодВидаДоходаСамозанятого(Форма.Объект);
	
	ДенежныеСредстваКлиентСерверЛокализация.УстановитьПараметрыВыбораПолучателя(Форма, Форма.Объект, Форма.Элементы.Получатель);

КонецПроцедуры

// Переключает вид расшифровки платежа на форме: без разбиения/списком.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой выполняется переключение вида расшифровки.
//
Процедура УстановитьПереключательРасшифровки(Форма) Экспорт

	Форма.ПереключательРасшифровки = ?(Форма.Объект.РасшифровкаПлатежа.Количество() > 1, 1, Форма.Объект.СписокКонтрагентов);
	
	Если Форма.ПереключательРасшифровки Тогда
		Форма.Элементы.СтраницыРасшифровки.ТекущаяСтраница = Форма.Элементы.РасшифровкаСписком;
	Иначе
		Форма.Элементы.СтраницыРасшифровки.ТекущаяСтраница = Форма.Элементы.РасшифровкаБезРазбиения;
	КонецЕсли;

КонецПроцедуры

// Заполняет таблицу реестра контрагентов по расшифровке платежа.
//
// Параметры:
//  Объект - ДокументОбъект - исходные данные для формирования реестра контрагентов.
//
Процедура ЗаполнитьРеестрКонтрагентов(Объект) Экспорт

	Если Не Объект.СписокКонтрагентов Тогда
		
		Объект.БанковскиеСчетаСпискаКонтрагентов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	НовыйРеестр = РеестрКонтрагентов(Объект);
	Объект.БанковскиеСчетаСпискаКонтрагентов.Очистить();
	Объект.БанковскиеСчетаСпискаКонтрагентов.Загрузить(НовыйРеестр);

КонецПроцедуры

// Возвращает реестр контрагентов по расшифровке платежа.
// 
// Параметры:
//  Объект - ДокументОбъект, Структура - исходные данные с таблицей "Расшифровка платежа" для формирования реестра контрагентов.
// 
// Возвращаемое значение:
//  см. НоваяТаблицаБанковскихСчетовСпискаКонтрагентов.
//
Функция РеестрКонтрагентов(Объект) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расчеты.Сумма КАК Сумма,
		|	Расчеты.Контрагент КАК Контрагент,
		|	Расчеты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ Платежи
		|ИЗ
		|	&Расчеты КАК Расчеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Реестр.Контрагент КАК Контрагент,
		|	Реестр.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ПОМЕСТИТЬ ИсходныйРеестр
		|ИЗ
		|	&Реестр КАК Реестр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныйРеестр.Контрагент КАК Контрагент,
		|	ИсходныйРеестр.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств КАК Валюта
		|ИЗ
		|	ИсходныйРеестр КАК ИсходныйРеестр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО ИсходныйРеестр.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Платежи.Контрагент КАК Контрагент,
		|	ОбъектыРасчетов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
		|ИЗ
		|	Платежи КАК Платежи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО Платежи.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ОбъектыРасчетов.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Платежи.Контрагент КАК Контрагент,
		|	БанковскиеСчетаКонтрагентов.Ссылка КАК БанковскийСчетКонтрагента,
		|	БанковскиеСчетаКонтрагентов.Банк КАК Банк
		|ИЗ
		|	Платежи КАК Платежи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|		ПО Платежи.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
		|			И Платежи.ВалютаВзаиморасчетов = БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств
		|ГДЕ
		|	НЕ БанковскиеСчетаКонтрагентов.ПометкаУдаления
		|	И НЕ БанковскиеСчетаКонтрагентов.Закрыт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Платежи.Контрагент КАК Контрагент,
		|	СУММА(Платежи.Сумма) КАК Сумма,
		|	Платежи.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
		|ИЗ
		|	Платежи КАК Платежи
		|
		|СГРУППИРОВАТЬ ПО
		|	Платежи.Контрагент,
		|	Платежи.ВалютаВзаиморасчетов";
	
	ТаблицаКонтрагентов = Объект.РасшифровкаПлатежа.Выгрузить(, "ОбъектРасчетов, Контрагент, Сумма, ВалютаВзаиморасчетов");
	ТаблицаКонтрагентов.Свернуть("ОбъектРасчетов, Контрагент, ВалютаВзаиморасчетов", "Сумма");
	
	Запрос.УстановитьПараметр("Расчеты", ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("Реестр", Объект.БанковскиеСчетаСпискаКонтрагентов.Выгрузить(, "Контрагент, БанковскийСчетКонтрагента"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаРасшифровкаПлатежа = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	БанковскиеСчета = РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	БанковскиеСчетаПоОбъектуРасчетов = РезультатЗапроса[РезультатЗапроса.ВГраница() - 2].Выгрузить();
	БанковскиеСчетаПоРеестру = РезультатЗапроса[РезультатЗапроса.ВГраница() - 3].Выгрузить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	
	БанкПолучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "Банк");
	Результат = НоваяТаблицаБанковскихСчетовСпискаКонтрагентов();
	
	Пока ВыборкаРасшифровкаПлатежа.Следующий() Цикл
		
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасшифровкаПлатежа);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", НоваяСтрока.Контрагент);
		СчетаПоОбъектуРасчетовНайденныеСтроки = БанковскиеСчетаПоОбъектуРасчетов.НайтиСтроки(ПараметрыОтбора);
		
		Если СчетаПоОбъектуРасчетовНайденныеСтроки.Количество() = 1 Тогда
			
			НоваяСтрока.БанковскийСчетКонтрагента = СчетаПоОбъектуРасчетовНайденныеСтроки[0].БанковскийСчетКонтрагента;
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", НоваяСтрока.Контрагент);
		ПараметрыОтбора.Вставить("Валюта", ВыборкаРасшифровкаПлатежа.ВалютаВзаиморасчетов);
		ИсходныйРеестрНайденныеСтроки = БанковскиеСчетаПоРеестру.НайтиСтроки(ПараметрыОтбора);
		
		Если ИсходныйРеестрНайденныеСтроки.Количество() = 1 Тогда
			
			НоваяСтрока.БанковскийСчетКонтрагента = ИсходныйРеестрНайденныеСтроки[0].БанковскийСчетКонтрагента;
			Продолжить;
			
		КонецЕсли;
	
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Контрагент", НоваяСтрока.Контрагент);
		СчетаНайденныеСтроки = БанковскиеСчета.НайтиСтроки(ПараметрыОтбора);
		
		Если СчетаНайденныеСтроки.Количество() = 1 Тогда
			НоваяСтрока.БанковскийСчетКонтрагента = СчетаНайденныеСтроки[0].БанковскийСчетКонтрагента;
		ИначеЕсли СчетаНайденныеСтроки.Количество() > 1 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Контрагент", НоваяСтрока.Контрагент);
			ПараметрыОтбора.Вставить("Банк", БанкПолучателя);
			
			СчетаНайденныеСтрокиПоБанку = БанковскиеСчета.НайтиСтроки(ПараметрыОтбора);
			
			Если СчетаНайденныеСтрокиПоБанку.Количество() = 1 Тогда
				НоваяСтрока.БанковскийСчетКонтрагента = СчетаНайденныеСтрокиПоБанку[0].БанковскийСчетКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Выполняет проверку заполнения документа при расчетах с самозанятыми.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, в котором выполняется проверка.
//  Ошибка - Булево - признак ошибки при проверке.
//  ФлагОбменСБанками - Булево - признак выполнения обмена с банком.
//  ОшибкиЗаполнения - Строка - строки с ошибками.
//
Процедура ПроверитьЗаполнениеОплатыСамозанятому(ДокументОбъект, Ошибка, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт
	
	Если Не (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ДокументОбъект.ОперацияССамозанятым)Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОбъектыРасчетовССамозанятыми(ДокументОбъект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьРеестрКонтрагентов(ДокументОбъект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения);
	
КонецПроцедуры

// Заполняет контрагента по строке в табличную части "Расшифровка платежа".
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств,
//                   ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств - объект, в котором выполняется заполнение.
//
Процедура ЗаполнитьКонтрагентаРасшифровкиПлатежа(ДокументОбъект) Экспорт

	Если Не ДокументОбъект.СписокКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	РасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасшифровкаПлатежа.Партнер КАК Партнер
		|ПОМЕСТИТЬ РасшифровкаПлатежей
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасшифровкаПлатежей.НомерСтроки КАК НомерСтроки,
		|	ОбъектыРасчетов.Контрагент КАК Контрагент,
		|	0 КАК Приоритет
		|ИЗ
		|	РасшифровкаПлатежей КАК РасшифровкаПлатежей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасшифровкаПлатежей.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ОбъектыРасчетов.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасшифровкаПлатежей.НомерСтроки,
		|	Контрагенты.Ссылка,
		|	1
		|ИЗ
		|	РасшифровкаПлатежей КАК РасшифровкаПлатежей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО РасшифровкаПлатежей.Партнер = Контрагенты.Партнер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, "НомерСтроки, ОбъектРасчетов, Партнер"));
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРасшифровки.Контрагент) Тогда
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.ОбъектРасчетов) Тогда
				СтрокаРасшифровки.Контрагент = КонтрагентИзТаблицы(РезультатЗапроса, СтрокаРасшифровки.НомерСтроки, 0);
			ИначеЕсли ЗначениеЗаполнено(СтрокаРасшифровки.Партнер) Тогда
				СтрокаРасшифровки.Контрагент = КонтрагентИзТаблицы(РезультатЗапроса, СтрокаРасшифровки.НомерСтроки, 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пустую структуру с параметрами для выполнения процедуры при изменении контрагента.
// 
// Возвращаемое значение:
//  Структура:
// * Контрагент - СправочникСсылка.Контрагенты - измененный контрагент.
// * БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - банковский счет контрагента.
// * ЗаполнитьРасшифровкуПоКонтрагенту - Булево - признак заполнения табличной части "Расшифровка платежа" по контрагенту.
// * ТекущийПартнер - Неопределено, СправочникСсылка.Партнеры - значение партнера.
// * ТекущаяСтрокаРасшифровки - Неопределено, ДанныеФормыЭлементКоллекции - строка в табличной части "Расшифровка платежа".
//
Функция НовыйПараметрыПриИзмененииКонтрагента() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("БанковскийСчетКонтрагента", Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	Параметры.Вставить("ЗаполнитьРасшифровкуПоКонтрагенту", Истина);
	Параметры.Вставить("ТекущийПартнер", Неопределено);
	Параметры.Вставить("ТекущаяСтрокаРасшифровки", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает структуру параметров для процедуры при изменении контрагента табличной части "Расшифровка платежа" в форме документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в котором выполняется изменение.
//  ИдентификаторСтроки - Число - идентификатор текущей строки табличной части.
// 
// Возвращаемое значение:
//  Неопределено,
//  см. НовыйПараметрыПриИзмененииКонтрагента.
//
Функция ПараметрыПриИзмененииКонтрагентаВРасшифровкеПлатежа(Форма, ИдентификаторСтроки) Экспорт

	СтрокаТабличнойЧасти = Форма.Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	ТекущийПартнер = ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Партнер), СтрокаТабличнойЧасти.Партнер, Неопределено);
	
	Если ЗначениеЗаполнено(ТекущийПартнер) Тогда
		
		Если Не ПартнерыИКонтрагенты.КонтрагентДоступенДляВыбораДляПартнера(ТекущийПартнер, СтрокаТабличнойЧасти.Контрагент) Тогда
			ТекущийПартнер = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры = НовыйПараметрыПриИзмененииКонтрагента();
	Параметры.Вставить("Контрагент", СтрокаТабличнойЧасти.Контрагент);
	Параметры.Вставить("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
	Параметры.Вставить("ЗаполнитьРасшифровкуПоКонтрагенту", Истина);
	Параметры.Вставить("ТекущийПартнер", ТекущийПартнер);
	Параметры.Вставить("ТекущаяСтрокаРасшифровки", СтрокаТабличнойЧасти);
	
	Возврат Параметры;

КонецФункции

// Возвращает структуру параметров для процедуры при изменении партнера табличной части "Расшифровка платежа" в форме документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в котором выполняется изменение.
//  ИдентификаторСтроки - Число - идентификатор текущей строки табличной части.
// 
// Возвращаемое значение:
//  Неопределено,
//  см. НовыйПараметрыПриИзмененииКонтрагента.
//
Функция ПараметрыПриИзмененииПартнераВРасшифровкеПлатежа(Форма, ИдентификаторСтроки) Экспорт

	СтрокаТабличнойЧасти = Форма.Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = НовыйПараметрыПриИзмененииКонтрагента();
	
	Если Форма.Объект.СписокКонтрагентов Тогда
		
		ТекущийКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(СтрокаТабличнойЧасти.Партнер, ТекущийКонтрагент);
		
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонтрагент, "ЮридическоеФизическоеЛицо");
		
		Если ВидКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			СтрокаТабличнойЧасти.Контрагент = ТекущийКонтрагент;
		Иначе
			СтрокаТабличнойЧасти.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		
		Параметры.Вставить("Контрагент", СтрокаТабличнойЧасти.Контрагент);
		Параметры.Вставить("БанковскийСчетКонтрагента", БанковскийСчетКонтрагента);
		Параметры.Вставить("ЗаполнитьРасшифровкуПоКонтрагенту", Истина);
		Параметры.Вставить("ТекущийПартнер", СтрокаТабличнойЧасти.Партнер);
		Параметры.Вставить("ТекущаяСтрокаРасшифровки", СтрокаТабличнойЧасти);
		
	Иначе
		
		Параметры.Вставить("Контрагент", Форма.Объект.Контрагент);
		Параметры.Вставить("БанковскийСчетКонтрагента", Форма.Объект.БанковскийСчетКонтрагента);
		Параметры.Вставить("ЗаполнитьРасшифровкуПоКонтрагенту", Истина);
		Параметры.Вставить("ТекущийПартнер", СтрокаТабличнойЧасти.Партнер);
		Параметры.Вставить("ТекущаяСтрокаРасшифровки", СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Возврат Параметры;

КонецФункции

Процедура ИнициализироватьБанковскиеСчетаСпискаКонтрагентов(Объект, ДанныеЗаполнения = Неопределено) Экспорт

	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И Объект.ОперацияССамозанятым)
		ИЛИ (ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
		И (ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ДанныеЗаполнения.ОперацияССамозанятым)) Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
			И ДанныеЗаполнения.Свойство("СписокКонтрагентов") Тогда
			Объект.СписокКонтрагентов = ДанныеЗаполнения.СписокКонтрагентов;
		КонецЕсли;
		
		ЗаполнитьРеестрКонтрагентов(Объект);
		
	Иначе
		Объект.БанковскиеСчетаСпискаКонтрагентов.Очистить();
	КонецЕсли;

КонецПроцедуры

//++ НЕ УТ

// Заполняет сокращенное описание статьи целевых средств.
// 
// Параметры:
//  Объект - СправочникОбъект.ИсточникиПоступленияЦелевыхСредств, СправочникОбъект.НаправленияРасходованияЦелевыхСредств -
//           Объект, в котором выполняется заполнение сокращенного описания.
//
Процедура ЗаполнитьСокращенноеОписаниеСтатьиЦелевыхСредств(Объект) Экспорт

	Если Не Объект.ЭтоГруппа
		И Объект.ОписаниеСокращенное = "" Тогда
		Объект.ОписаниеСокращенное = Сред(Объект.Описание, 1, 1000);
	КонецЕсли;

КонецПроцедуры

// Проверяет наличие сотрудника в справочнике "Сотрудники" для операции погашениия займа.
// 
// Параметры:
//  Объект - ДокументОбъект.ПриходныйКассовыйОрдер, ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - документ, 
//           в котором выполняется проверка.
//  Отказ - Булево - признак прекращения выполнения исходного действия.
//  ФлагОбменСБанками - Булево -  признак текущего выполнения обмена с банками.
Процедура ПроверитьСотрудникаПередПогашениемЗайма(Объект, Отказ, ФлагОбменСБанками = Ложь) Экспорт

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником
		И ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ")
		И ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		
		ОшибкиЗаполнения = "";
		
		ПараметрыПолученияДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияДанных.Организация = Объект.Организация;
		ПараметрыПолученияДанных.НачалоПериода = Объект.Дата;
		ПараметрыПолученияДанных.ОкончаниеПериода = Объект.Дата;
		ПараметрыПолученияДанных.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ПодотчетноеЛицо);
		
		Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияДанных);
		
		Если Сотрудники.Количество() = 0 Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Кадровые данные сотрудника %1 по организации %2 на дату %3 отсутствуют или заполнены частично.';
					|en = 'HR data of employee %1 for the %2 company as of %3 is missing or partially filled.'"),
				Объект.ПодотчетноеЛицо,
				Объект.Организация,
				Объект.Дата);
			
			Если ФлагОбменСБанками Тогда
				ДенежныеСредстваСервер.ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПодотчетноеЛицо", "Объект", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

//-- НЕ УТ

// Выполняет проверку признака "Договор с плательщиком НПД" в договоре и "Операция с самозанятым" объекта расчетов в 
// табличной части "Расшифровка платежа".
//
// Параметры:
//  Объект - ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств, ДокументОбъект.СписаниеБезналичныхДенежныхСредств - документ,
//  в котором выполняется проверка.
//  Ошибка - Булево - признак ошибки при проверке.
//  ФлагОбменСБанками - Булево - признак выполнения процедуры в момент выполнения обработки обмена с банком.
//  ОшибкиЗаполнения - Строка - строка с ошибками.
//
Процедура ПроверитьЗаполнениеДокументаСФлагомСамозанятого(Объект, Ошибка, ФлагОбменСБанками = Ложь, ОшибкиЗаполнения = "") Экспорт

	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ЮрФизЛицо");
	ДокументСФлагом = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И (КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
		ИЛИ КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		ИЛИ Объект.СписокКонтрагентов);
	
	Если Не ДокументСФлагом Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Объект.РасшифровкаПлатежа.Выгрузить(, "ОбъектРасчетов, НомерСтроки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанные.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ИсходныеДанные.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(НЕ ДоговорыКонтрагентов.ДоговорССамозанятым, ЛОЖЬ) КАК ОшибкаДоговора,
		|	ЕСТЬNULL(НЕ ОбъектыРасчетов.ОперацияССамозанятым, ЛОЖЬ) КАК ОшибкаОбъектаРасчетов,
		|	ВЫБОР 
		|		КОГДА &Признак = ИСТИНА
		|			И НЕ ОбъектыРасчетов.НалогообложениеНДС ЕСТЬ NULL
		|			ТОГДА ВЫБОР 
		|				КОГДА ОбъектыРасчетов.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) 
		|					ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаРежимаНалогообложения
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|			ПО ОбъектыРасчетов.Договор = ДоговорыКонтрагентов.Ссылка
		|		ПО ТаблицаДанных.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ДоговорССамозанятым, 
		|		ЕСТЬNULL(ОбъектыРасчетов.ОперацияССамозанятым, 
		|				ВЫБОР 
		|					КОГДА &Признак = ИСТИНА 
		|						И НЕ ОбъектыРасчетов.НалогообложениеНДС ЕСТЬ NULL
		|						ТОГДА ВЫБОР
		|							КОГДА ОбъектыРасчетов.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|								ТОГДА ИСТИНА
		|						ИНАЧЕ ЛОЖЬ КОНЕЦ
		|					ИНАЧЕ &Признак
		|				КОНЕЦ)) <> &Признак";
		
	Запрос.УстановитьПараметр("ИсходныеДанные", Таблица);
	Запрос.УстановитьПараметр("Признак", Объект.ОперацияССамозанятым);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ТекстыСообщений = Новый Массив;
		
		Если Объект.ОперацияССамозанятым Тогда
			
			ТекстыСообщений.Добавить(НСтр("ru = 'В строке №%1 введены не корректные данные для документа с признаком оплаты самозанятому:';
											|en = 'Incorrect data is entered for a document with the ""Payment to self-employed person"" flag in line %1.'"));
			
			Если Выборка.ОшибкаДоговора Тогда
				ТекстыСообщений.Добавить(НСтр("ru = 'заполнен договор без признака ""Договор с плательщиком НПД"".';
												|en = 'The contract without the ""Contract with self-employment tax payer"" flag is specified.'"));
				ИмяРеквизита = "Договор";
			ИначеЕсли Выборка.ОшибкаОбъектаРасчетов Тогда
				ТекстыСообщений.Добавить(НСтр("ru = 'заполнен объект расчетов без признака ""Операция с самозанятым"".';
												|en = 'The AR/AP object without the ""Operation with self-employed person"" flag is specified.'"));
				ИмяРеквизита = "ОбъектРасчетов";
			Иначе
				ТекстыСообщений.Добавить(НСтр("ru = 'заполнен объект расчетов с не применяемым режимом налогообложения.';
												|en = 'The AR/AP object with an invalid tax treatment is specified.'"));
				ИмяРеквизита = "";
			КонецЕсли;
			
		Иначе
			
			ТекстыСообщений.Добавить(НСтр("ru = 'В строке №%1 введены не корректные данные для документа без признака оплаты самозанятому:';
											|en = 'Incorrect data is entered in line %1 for a document without the payment to self-employed person flag:'"));
			
			Если Выборка.ОшибкаДоговора Тогда
				ТекстыСообщений.Добавить(НСтр("ru = 'заполнен договор с признаком ""Договор с плательщиком НПД"".';
												|en = 'Contract with the ""Contract with self-employment tax payer"" flag is specified.'"));
				ИмяРеквизита = "Договор";
			Иначе
				ТекстыСообщений.Добавить(НСтр("ru = 'заполнен объект расчетов с признаком ""Операция с самозанятым"".';
												|en = 'AR/AP object with the ""Operation with self-employed person"" flag is specified.'"));
				ИмяРеквизита = "ОбъектРасчетов";
			КонецЕсли;
			
		КонецЕсли;
		
		Текст = СтрШаблон(СтрСоединить(ТекстыСообщений, Символы.ПС), Выборка.НомерСтроки);
		
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, Текст);
		Иначе
			
			Если Объект.СписокКонтрагентов
				ИЛИ Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Выборка.НомерСтроки, ИмяРеквизита);
			Иначе
				Поле = СтрШаблон("РасшифровкаБезРазбиения%1", ИмяРеквизита);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(Текст, Объект, Поле, , Ошибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьЗаполнениеОплатыСамозанятому(Объект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПрефиксациюКассыКассовойКниги(Ссылка)
	
	РеквизитыПрефиксации = Новый Структура("ИспользоватьПрефикс, Префикс");
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КассовыеКниги") Тогда
		РеквизитыПрефиксации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ИспользоватьПрефикс, Префикс");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Кассы") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "КассоваяКнига.ИспользоватьПрефикс, КассоваяКнига.Префикс");
		РеквизитыПрефиксации.Вставить("ИспользоватьПрефикс", Реквизиты.КассоваяКнигаИспользоватьПрефикс);
		РеквизитыПрефиксации.Вставить("Префикс", Реквизиты.КассоваяКнигаПрефикс);
	КонецЕсли;
	
	Возврат РеквизитыПрефиксации;
	
КонецФункции

Процедура ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки)
	
	ОшибкиЗаполнения = ОшибкиЗаполнения + "
	|" + ТекстОшибки;
	
КонецПроцедуры

//++ НЕ УТ

// Функция возвращает данные заполнения платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//	ТипДокумента - Строка - Тип формируемого документа. Применяется для поиска образца при заполнении расшифровки платежа.
//
// Возвращаемое значение:
//	Структура - Данные заполнения платежного документа.
Функция ДанныеЗаполненияДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление = Ложь, ТипДокумента = "ПриходныйКассовыйОрдер")
	
	ДанныеЗаполнения = ДанныеШапкиДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление);
	РасшифровкаПлатежа = ДанныеРасшифровкиПлатежаДокументаДДСПоДоговоруЗаймаСотруднику(ДанныеЗаполнения, ЭтоПоступление,, ТипДокумента);
	ДанныеЗаполнения.Вставить("РасшифровкаПлатежа",РасшифровкаПлатежа);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Функция возвращает данные заполнения шапки платежного документа по договору займа сотруднику.
//
// Параметры:
//	Договор - ДокументСсылка.ДоговорЗаймаСотруднику - Договор займа, по которому формируется платежный документ.
//	ЭтоПоступление - Булево - Признак, определяющий направление движение денежных средств.
//
// Возвращаемое значение
//	Структура - Данные заполнения шапки платежного документа.
Функция ДанныеШапкиДокументаДДСПоДоговоруЗаймаСотруднику(Договор, ЭтоПоступление = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Договор КАК ДоговорЗаймаСотруднику,
	|	&Договор КАК ДокументОснование,
	|	ДоговорЗаймаСотруднику.Организация КАК Организация,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо КАК ПодотчетноеЛицо,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо.Наименование КАК Выдать,
	|	ДоговорЗаймаСотруднику.ФизическоеЛицо.Наименование КАК ПринятоОт,
	|	ВЫБОР
	|		КОГДА &ЭтоПоступление
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	НЕ ДоговорЗаймаСотруднику.Проведен КАК ЕстьОшибкиПроведен,
	|	ДоговорЗаймаСотруднику.Организация.ВалютаРегламентированногоУчета КАК Валюта,
	|	Неопределено КАК Касса,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику
	|ГДЕ
	|	ДоговорЗаймаСотруднику.Ссылка = &Договор";
	
	Запрос.УстановитьПараметр("Договор",        Договор);
	Запрос.УстановитьПараметр("ЭтоПоступление", ЭтоПоступление);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЕстьОшибкиПроведен Тогда
		Текст = НСтр("ru = 'Договор займа сотруднику не проведен. Ввод на основании непроведенного документа запрещен';
					|en = 'Employee loan agreement is not posted. Input on the basis of unposted document is prohibited'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДанныеШапки = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеШапки.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Выборка);
	
	ДанныеШапки.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(ДанныеШапки.Организация, ДанныеШапки.Валюта);
	ДанныеШапки.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеШапки.Организация, ДанныеШапки.Валюта);
	ДанныеШапки.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Выборка.ПодотчетноеЛицо,
			Выборка.Валюта);
	
	Возврат ДанныеШапки;
	
КонецФункции

// Возвращает признак счета с казначейским сопровождением
//
// Параметры:
//  НомерСчета - Строка - проверяемая строка
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЭтоЛицевойСчетКазначейскогоСопровождения(НомерСчета)

	Если Не ЗначениеЗаполнено(НомерСчета) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (СтрДлина(СокрЛП(НомерСчета)) = 11
		И (Лев(НомерСчета, 2) = "71"
		ИЛИ Лев(НомерСчета, 2) = "41")) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

//-- НЕ УТ

Функция ДокументыСПередачейФайловВБанк()
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СправкаОПодтверждающихДокументах"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция УбратьИзНаименованияОрганизационнуюФорму(Наименование, ИмяОрганизационнойФормы)

	Результат = Ложь;
	
	Наименование = СокрЛП(Наименование);
	
	ДлинаНаименования			= СтрДлина(Наименование);
	ДлинаОрганизационнойФормы	= СтрДлина(ИмяОрганизационнойФормы);
	
	Если Лев(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрЛ(Сред(Наименование, ДлинаОрганизационнойФормы + 1));
		Результат		= Истина;
	КонецЕсли;	
	
	Если Прав(Наименование, ДлинаОрганизационнойФормы) = ИмяОрганизационнойФормы Тогда
		Наименование	= СокрП(Лев(Наименование, ДлинаНаименования - ДлинаОрганизационнойФормы - 1));
		Результат		= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак модифицированности документа
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.СписаниеБезналичныхДенежныхСредств - проверяемый документ.
//  ОсновныеРеквизиты - Массив из Строка - список имен метаданных ДокументОбъект для проверки изменений.
//
// Возвращаемое значение:
//   Булево
//
Функция ДокументИзменен(ДокументОбъект, ОсновныеРеквизиты)
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Для Каждого ТекущийРеквизит Из ОсновныеРеквизиты Цикл
		
		Если МетаданныеДокумента.Реквизиты.Найти(ТекущийРеквизит) <> Неопределено Тогда
			
			Если ДокументСсылка[ТекущийРеквизит] <> ДокументОбъект[ТекущийРеквизит] Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти.Найти(ТекущийРеквизит) <> Неопределено Тогда
			
			ВсегоОбъект = ДокументОбъект[ТекущийРеквизит].Количество();
			ВсегоСсылка = ДокументСсылка[ТекущийРеквизит].Количество();
			
			Если ВсегоСсылка <> ВсегоОбъект Тогда
				Возврат Истина;
			КонецЕсли;
			
			ТабличнаяЧасть = МетаданныеДокумента.ТабличныеЧасти[ТекущийРеквизит];
			
			Индекс = 0;
			
			Пока Индекс < ВсегоОбъект Цикл
				
				СтрокаТабличнойЧастиОбъекта = ДокументОбъект[ТекущийРеквизит][Индекс];
				СтрокаТабличнойЧастиСсылки = ДокументОбъект[ТекущийРеквизит][Индекс];
				
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					
					Если СтрокаТабличнойЧастиОбъекта[Реквизит.Имя] <> СтрокаТабличнойЧастиСсылки[Реквизит.Имя] Тогда
						Возврат Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область БюджетСлужебные

// Проверка заполнения реквизитов налоговых платежей в документе.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ оплаты.
//  ПараметрыПроверкиЗаполнения - Структура - Параметры проверки заполнения:
// * ПрименениеПриказа107н - Булево - 
// * ПрименениеПриказа126н - Булево - 
// * ЕдиныйНалоговыйПлатеж - Булево - 
//  Отказ - Булево - Признак отказа от продолжения работы
//  ФлагОбменСБанками - Булево - используется обмен с банком
//  ОшибкиЗаполнения - Строка - Накопленное описание ошибок.
//
Процедура ПроверитьЗаполнениеРеквизитовНалоговыхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	ПоказательНомера = Объект.ПоказательНомера;
	ПоказательДаты = Объект.ПоказательДаты;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	ДействуетПриказ199н_202110 = ПлатежиВБюджетКлиентСервер.ДействуетПриказ199н_202110(Объект.Дата);
	ДействуетПриказ199н_202302 = ПлатежиВБюджетКлиентСервер.ДействуетПриказ199н_202302(Объект.Дата);
	
	Если ПараметрыПроверкиЗаполнения.ЕдиныйНалоговыйПлатеж Тогда
		КодБК = Перечисления.ТипыНалогов.КБКПоВидуНалоговогоОбязательства(Перечисления.ТипыНалогов.ЕдиныйНалоговыйПлатеж);
		Если СокрЛП(Объект.КодБК) <> КодБК Тогда
			ТекстОшибки = НСтр("ru = 'КБК не соответствует реквизитам единого налогового платежа';
								|en = 'BCC does not match the unified tax payment details'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет");
			КонецЕсли;
		КонецЕсли;
		Если (ПоказательОснования <> "0" ИЛИ ПоказательПериода <> "0" ИЛИ ПоказательНомера <> "0" ИЛИ ПоказательДаты <> "0") Тогда
			ТекстОшибки = НСтр("ru = 'При перечислении в бюджет единого налогового платежа следует указать ""0"" в полях:
			| ""Основание"", ""Период"", ""Номер документа"" и ""Дата документа""';
			|en = 'When you transfer a unified tax payment to the budget, specify ""0"" in the ""Base document"", ""Period"", ""Document number"", and ""Document date"" fields.
			|'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ДействуетПриказ199н_202302
			И Объект.СтатусСоставителя <> "01"
			И Объект.СтатусСоставителя <> "27" Тогда
			
			ТекстОшибки =
				НСтр("ru = 'В поле ""Статус составителя"" следует указать значение ""01"" (для кредитных организаций ""27"")';
					|en = 'In the ""Author status"" field, set the value to ""01"" (for ""27"" depository institutions)'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НадписьРеквизитыПлатежаВБюджет", , Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДействуетПриказ199н_202302 Тогда
		
		Если ПлатежиВБюджетКлиентСервер.ПлатежАдминистрируетсяНалоговымиОрганами(Объект.КодБК) Тогда
			
			Если Не ПлатежиВБюджетКлиентСервер.ЭтоЕдиныйНалоговыйПлатеж(Объект.КодБК)
				И Объект.СтатусСоставителя <> "01"
				И Объект.СтатусСоставителя <> "02"
				И Объект.СтатусСоставителя <> "13"
				И Объект.СтатусСоставителя <> "27" Тогда
				
				ТекстОшибки =
					НСтр("ru = 'В поле ""Статус составителя"" следует указать значение ""01"", ""13"" (для кредитных организаций ""27"") или ""02"" (для уведомления об исчисленных суммах налога)';
						|en = 'In the ""Author status"" field, set the value to ""01"", ""13"" (""27"" for depository institutions), or ""02"" (for a notification of calculated tax amounts)'");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НадписьРеквизитыПлатежаВБюджет", , Отказ);
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н, Объект.Дата).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""';
							|en = 'Incorrect value of the ""Basis"" field '");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""';
								|en = 'Incorrect value in the ""Payment type"" field.'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти("АП,АР", ПоказательОснования) > 0 Тогда
		Если ЗначениеЗаполнено(ПоказательПериода)
			И ПоказательПериода <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Период""';
								|en = 'If the payment basis is ""AP"" or ""AR"", you should specify ""0"" in the ""Period"" field'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНайти("ТП,ЗД", ПоказательОснования) > 0	Тогда
		Если ЗначениеЗаполнено(ПоказательНомера) 
			И ПоказательНомера <> "0"
			И (НЕ ДействуетПриказ199н_202110
			ИЛИ ДействуетПриказ199н_202110
			И ПоказательОснования = "ТП") Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'При основании платежа ""%1"" необходимо указывать ""0"" в поле ""Номер""';
										|en = 'If the payment basis is %1, specify ""0"" in the ""Number"" field'"), ПоказательОснования);
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПоказательДатыСтрокой = ПоказательДаты;
		Если Лев(ПоказательДатыСтрокой, 1) = "0"
			И Сред(ПоказательДатыСтрокой, 2, 2) = " ." Тогда
			ПоказательДатыСтрокой = "0";
		КонецЕсли;
		
		Если ПустаяСтрока(СтрЗаменить(ПоказательДатыСтрокой, ".", "")) Тогда
			ПоказательДатыСтрокой = "";
		КонецЕсли;
		
		Если ПоказательОснования = "ЗД" Тогда
			Если ЗначениеЗаполнено(ПоказательДатыСтрокой)
				И ПоказательДатыСтрокой <> "0"
				И (НЕ ДействуетПриказ199н_202110
				ИЛИ ДействуетПриказ199н_202110
				И ПоказательНомера = "0") Тогда
				ТекстОшибки = НСтр("ru = 'При основании платежа ""ЗД"" следует указать ""0"" в поле ""Дата""';
									|en = 'If the payment basis is ""ZD"", you should specify ""0"" in the ""Date"" field '");
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПоказательОснования = "ЗД"
			И ДействуетПриказ199н_202110 Тогда
			
			Если ПоказательНомера <> "0" Тогда
				
				Префикс = Лев(ПоказательНомера, 2);
				
				Если СтрНайти("ТР,ПР,АП,АР", Префикс) = 0 Тогда
					
					ТекстОшибки = НСтр("ru = 'Необходимо указать номер документа с префиксом (ТР, ПР, АП или АР)';
										|en = 'Specify a document number with prefix (TR, PR, AP or AR)'");
					
					Если ФлагОбменСБанками Тогда
						ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ПоказательДатыСтрокой = "0" Тогда
					
					ТекстОшибки = НСтр("ru = 'Необходимо указать дату документа';
										|en = 'Specify a document date'");
					
					Если ФлагОбменСБанками Тогда
						ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверка заполнения реквизитов таможенных платежей в документе.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ оплаты.
//  ПараметрыПроверкиЗаполнения - Структура - Параметры проверки заполнения:
// * ПрименениеПриказа107н - Булево - 
// * ПрименениеПриказа126н - Булево - 
// * ЕдиныйНалоговыйПлатеж - Булево - 
//  Отказ - Булево - Признак отказа от продолжения работы
//  ФлагОбменСБанками - Булево - используется обмен с банком
//  ОшибкиЗаполнения - Строка - Накопленное описание ошибок.
//
Процедура ПроверитьЗаполнениеРеквизитовТаможенныхПлатежей(Объект, ПараметрыПроверкиЗаполнения, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	ВидПеречисленияВБюджет = Объект.ВидПеречисленияВБюджет;
	ПоказательОснования = Объект.ПоказательОснования;
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательТипа = Объект.ПоказательТипа;
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(
		ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н,
		?(Объект.Дата = Дата('00010101'), ТекущаяДатаСеанса(), Объект.Дата)).НайтиПоЗначению(ПоказательОснования) = Неопределено
		И ПоказательТипа <> "0" Тогда
		ТекстОшибки = НСтр("ru = 'Неверное значение поля ""Основание""';
							|en = 'Incorrect value of the ""Basis"" field '");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказательПериода) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить значение поля ""Код таможенного органа""';
							|en = 'Fill in the ""Customs authority code"" field'");
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПроверкиЗаполнения.ПрименениеПриказа126н Тогда
		Если ПлатежиВБюджетКлиентСервер.ТипыПлатежа(ВидПеречисленияВБюджет, ПараметрыПроверкиЗаполнения.ПрименениеПриказа107н).НайтиПоЗначению(ПоказательТипа) = Неопределено
			И ПоказательТипа <> "0" Тогда
			ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Тип платежа""';
								|en = 'Incorrect value in the ""Payment type"" field.'");
			Если ФлагОбменСБанками Тогда
				ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверка заполнения реквизитов иных платежей в бюджет в документе.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ оплаты
//  Отказ - Булево - Признак отказа от продолжения работы
//  ФлагОбменСБанками - Булево - используется обмен с банком
//  ОшибкиЗаполнения - Строка - Накопленное описание ошибок.
//
Процедура ПроверитьЗаполнениеРеквизитовИныхПлатежейВБюджет(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ПоказательПериода", "Период");
	СтруктураПолей.Вставить("ПоказательНомера", НСтр("ru = 'Номер документа';
													|en = 'Document number'"));
	СтруктураПолей.Вставить("ПоказательДаты", НСтр("ru = 'Дата документа';
													|en = 'Document date'"));
	
	ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения);
	
	Если Объект.СтатусСоставителя = "08" Тогда
		Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
			Если Объект[ЭлементСтруктуры.Ключ] <> "0" Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При статусе составителя ""08"" следует указать ""0"" в поле ""%1""';
						|en = 'Specify ""0"" in field ""%1"" if the author status is ""08""'"),
					ЭлементСтруктуры.Значение);
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеПоказателяПериода(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	ПоказательПериода = Объект.ПоказательПериода;
	ПоказательОснования = Объект.ПоказательОснования;
	
	ОшибкаЗаполненияПериода = Ложь;
	РасшифровкаОшибки = "";
	
	Если ПлатежиВБюджетКлиентСервер.ДействуетПриказ199н_202110(Объект.Дата) Тогда
	
		ПоказателиДляПроверкиКонкретнойДаты = "РС,ОТ,РТ,ВУ,ПБ,ИН";
		ПоказателиДляПроверки = "ТП,ЗД";
		
	Иначе
	
		ПоказателиДляПроверкиКонкретнойДаты = "ТР,РС,ОТ,РТ,ВУ,ПБ,ПР";
		ПоказателиДляПроверки = "ТП,ЗД";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоказательПериода) Тогда
		Если СтрНайти(ПоказателиДляПроверки, ПоказательОснования) > 0 И ПоказательПериода <> "0" Тогда
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			НомерПериода = Сред((ПоказательПериода), 4, 2);
			НомерПериода = ?(ПустаяСтрока(НомерПериода), 0, Число(НомерПериода));
			
			ГодПериода = Сред((ПоказательПериода), 7, 4);
			ГодПериода = ?(ПустаяСтрока(ГодПериода), 0, Число(ГодПериода));
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				Если СтрДлина(ПоказательПериода) - СтрДлина(СтрЗаменить(ПоказательПериода, ".", "")) <> 2
				 ИЛИ ГодПериода < 2000 Тогда
					ОшибкаЗаполненияПериода = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ПериодичностьНалога = "МС" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 12 Тогда
					ОшибкаЗаполненияПериода = Истина;
					РасшифровкаОшибки = Нстр("ru = 'четвертый и пятый знак периода платежа заполнены некорректно,
										|для месячных платежей необходимо заполнить порядковый номер месяца (с 1 по 12).';
										|en = 'the fourth and the fifth digit of the payment period are filled in incorrectly,
										|fill in the month sequence number (from 1 to 12) for monthly payments.'");
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "КВ" Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 4 Тогда
					ОшибкаЗаполненияПериода = Истина;
					РасшифровкаОшибки = Нстр("ru = 'четвертый и пятый знак периода платежа заполнены некорректно,
										|для квартальных платежей необходимо заполнить порядковый номер квартала (с 1 по 4).';
										|en = 'the fourth and the fifth digit of the payment period are filled in incorrectly,
										|fill in the quarter sequence number (from 1 to 4) for quarterly payments.'");
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ПЛ" > 0 Тогда
				Если НомерПериода < 1
				 ИЛИ НомерПериода > 2 Тогда
					ОшибкаЗаполненияПериода = Истина;
					РасшифровкаОшибки = Нстр("ru = 'четвертый и пятый знак периода платежа заполнены некорректно,
										|для полугодовых платежей необходимо заполнить порядковый номер полугодия (01 или 02).';
										|en = 'the fourth and the fifth digit of the payment period are filled in incorrectly,
										|fill in the half-year sequence number (01 or 02) for semiannual payments.'");
				КонецЕсли;
				
			ИначеЕсли ПериодичностьНалога = "ГД" Тогда
				Если НомерПериода <> 0 Тогда
					ОшибкаЗаполненияПериода = Истина;
					РасшифровкаОшибки = Нстр("ru = 'четвертый и пятый знак периода платежа заполнены некорректно
											|для годовых платежей необходимо заполнить значением 00.';
											|en = 'the fourth and the fifth digit of the payment period are filled in incorrectly,
											|fill in with value 00 for annual payments.'");
				КонецЕсли;
				
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
			
		ИначеЕсли СтрНайти(ПоказателиДляПроверкиКонкретнойДаты, ПоказательОснования) > 0
			И ПоказательПериода <> "0" Тогда
			
			ПериодичностьНалога = Сред((ПоказательПериода), 1, 2);
			
			Если СтрНайти("МС,КВ,ПЛ,ГД", ПериодичностьНалога) > 0 Тогда
				ОшибкаЗаполненияПериода = Истина;
				РасшифровкаОшибки = Нстр("ru = 'необходимо указать конкретный период платежа.';
										|en = 'specify a particular payment period.'");
			Иначе
				ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаЗаполненияПериода Тогда
		ТекстОшибки = НСтр("ru = 'Неверно указано значение в поле ""Период""';
							|en = 'Incorrect value in the ""Period"" field.'");
		
		Если РасшифровкаОшибки <> "" Тогда
			ТекстОшибки = ТекстОшибки + ":" + Символы.ПС + РасшифровкаОшибки;
		КонецЕсли;
		
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКБК(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КБК = Объект.КодБК;
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И СокрЛП(КБК) = "0" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(КБК)) <> 20 Тогда
		
		ТекстОшибки =  НСтр("ru = 'КБК должен состоять из 20 знаков';
							|en = 'BCC must contain 20 characters'");
		
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КБК) Тогда
		
		ТекстОшибки = НСтр("ru = 'КБК должен содержать только цифры';
							|en = 'BCC must contain only digits'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(КБК, "0", ""))) Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки КБК не могут одновременно принимать значение ""0""';
							|en = 'All BCC digits cannot be ""0"" at a time'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеОКТМО(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	КодОКАТО = Объект.КодОКАТО;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрЛП(КодОКАТО)) > 1 И ПустаяСтрока(СокрЛП(СтрЗаменить(КодОКАТО, "0", ""))) Тогда
		ТекстОшибки = НСтр("ru = 'Все знаки ОКТМО не могут одновременно принимать значение ""0""';
							|en = 'All RNCMT digits cannot be ""0"" at a time'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "НадписьРеквизитыПлатежаВБюджет",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеУИН(Объект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	УИН = Объект.ИдентификаторПлатежа;
	
	ТекстОшибки = "";
	
	// Проверим валидность введенного кода
	Если СтрДлина(СокрП(УИН)) <> 20 И СтрДлина(СокрП(УИН)) <> 25 И СтрДлина(СокрП(УИН)) <> 1 И СтрДлина(СокрП(УИН)) <> 0
		И СтрДлина(СокрЛП(УИН)) <> 4 Тогда
		
		ТекстОшибки =  НСтр("ru = 'УИН должен состоять из 20 или 25 знаков.
			|В случае отсутствия Уникального идентификатора начисления указывается значение ""0"".';
			|en = 'Payment ID must consist of 20 or 25 characters.
			|If there is no Unique ID of charges, ""0"" is specified.'");
		
	ИначеЕсли ПустаяСтрока(СокрЛП(СтрЗаменить(УИН, "0", ""))) И СтрДлина(СокрП(УИН)) <> 0 И СокрП(УИН) <> "0" Тогда
		
		ТекстОшибки = НСтр("ru = 'Все знаки УИН не могут одновременно принимать значение ""0""';
							|en = 'All payment ID digits cannot be ""0"" at a time'");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				"ИдентификаторПлатежа",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуПериода(Объект, ОшибкаЗаполненияПериода)
	
	ПоказательПериода = Объект.ПоказательПериода;
	
	ПозицияПериода = СтрНайти(СокрЛП(ПоказательПериода),".");
	ПозицияГода = СтрНайти(Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1), ".") + ПозицияПериода;

	ДатаПериода = Лев(СокрЛП(ПоказательПериода), ПозицияПериода - 1);
	НомерПериода = Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1, ПозицияГода - ПозицияПериода - 1);
	ГодПериода = Сред(СокрЛП(ПоказательПериода), ПозицияГода + 1);
	
	Попытка
		ДатаПоказателя = Дата(Число(ГодПериода), Число(НомерПериода), Число(ДатаПериода));
	Исключение
		ОшибкаЗаполненияПериода = Истина;
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТ

#Область ГОЗСлужебные

#Область Общие

// По имени обработчика контроля возвращает номер раздела контролей
//
// Параметры:
//   ИмяОбработчика - Строка - Имя обработчика.
//
// Возвращаемое значение:
//   Строка - Раздел
//
Функция РазделКонтроля(ИмяОбработчика)
	РазделКонтроля = "";
	
	Для Сч = 1 По 9 Цикл 
		Если СтрНайти(ИмяОбработчика, "Раздел" + Сч + "_") > 0 Тогда
			РазделКонтроля = "Раздел" + Сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РазделКонтроля;
КонецФункции

// Формирует назначение платежа для уплаты налогов
//
// Параметры:
//   КБК - Строка - КБК
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет - Вид налогового обязательства
//   Организация - СправочникСсылка.Организации - Организация
//   Период - Дата - Период
//   ПредставлениеНалоговогоПериода - Строка - Налоговый период строкой.
//
// Возвращаемое значение:
//  Строка - назначение платежа
//
Функция НазначениеПлатежаДляУплатыНалогов(КБК, ВидНалоговогоОбязательства, Организация = Неопределено, Знач Период = Неопределено, ПредставлениеНалоговогоПериода = "")
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(КБК) Тогда
		ВидНалога         = ДенежныеСредстваПовтИспРФ.ВидНалогаПоКБК(КБК);
		НазначениеПлатежа = ДенежныеСредстваПовтИспРФ.НазначениеПлатежаПоКБК(КБК);
		ДатаАктуальности  = Дата('20150101');
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставлениеНалоговогоПериода) И ВидНалоговогоОбязательства <> "Штраф" Тогда
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", ПредставлениеНалоговогоПериода);
	Иначе
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<Период>", "");
	КонецЕсли;
	
	// При уплате страховых взносов, как правило, требуется указывать регистрационный номер.
	КлючиРеквизитов = "РегистрационныйНомерПФР, ИПРегистрационныйНомерПФР, РегистрационныйНомерФСС, ИПРегистрационныйНомерФСС";
	РеквизитыОрганизации = ?(ЗначениеЗаполнено(Организация), ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, КлючиРеквизитов), Новый Структура(КлючиРеквизитов));
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР>",    РеквизитыОрганизации.РегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ПФР_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерПФР);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС>",    РеквизитыОрганизации.РегистрационныйНомерФСС);
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "<ФСС_ИП>", РеквизитыОрганизации.ИПРегистрационныйНомерФСС);
	
	НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, "  ", " ");
	
	Возврат НазначениеПлатежа;
	
КонецФункции

Функция ПредставлениеВидаДокумента(ВидДокумента, СоответствиеРеквизитов = Неопределено)
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СоответствиеРеквизитов = Неопределено Тогда
		РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "КраткоеНаименование, Наименование");
	Иначе
		РеквизитыВидаДокумента = СоответствиеРеквизитов[ВидДокумента];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыВидаДокумента.КраткоеНаименование) Тогда
		ПредставлениеВидДокумента = РеквизитыВидаДокумента.КраткоеНаименование;
	Иначе
		ПредставлениеВидДокумента = РеквизитыВидаДокумента.Наименование;
	КонецЕсли;
	
	Возврат ПредставлениеВидДокумента;
КонецФункции

Функция ПредставлениеПодтверждающегоДокумента(Знач ПредставлениеВидаДокумента, Знач НомерДокумента, Знач ДатаДокумента)
	МассивСтрокПодтверждающийДокумент = Новый Массив;
	
	МассивСтрокПодтверждающийДокумент.Добавить(ПредставлениеВидаДокумента);
	МассивСтрокПодтверждающийДокумент.Добавить("№" + НомерДокумента);
	МассивСтрокПодтверждающийДокумент.Добавить(НСтр("ru = 'от';
													|en = 'dated'"));
	МассивСтрокПодтверждающийДокумент.Добавить(Формат(ДатаДокумента, "ДФ=ddMMyyyy"));
	
	Представление = СтрСоединить(МассивСтрокПодтверждающийДокумент, " ");
	
	Возврат Представление;
КонецФункции

Функция ТребуетсяКонтрольГОЗ(СтрокиГрафика)
	
	СписокДляПроверкиГОЗ = Новый Массив;
	Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
		ТипОбъектаОплаты = ТипЗнч(СтрокаГрафика.ОбъектОплаты);
		Если ТипОбъектаОплаты = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			СписокДляПроверкиГОЗ.Добавить(СтрокаГрафика.ОбъектОплаты);
		ИначеЕсли ТипОбъектаОплаты = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
			СписокДляПроверкиГОЗ.Добавить(СтрокаГрафика.ОбъектОплаты);
		КонецЕсли;
	КонецЦикла;
	
	Если Не СписокДляПроверкиГОЗ.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокДляПроверкиГОЗ = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(СписокДляПроверкиГОЗ);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&СписокДляПроверкиГОЗ)
		|	И ДанныеДокумента.ПлатежиПо275ФЗ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&СписокДляПроверкиГОЗ)
		|	И ДанныеДокумента.ПлатежиПо275ФЗ
		|");
		
	Запрос.УстановитьПараметр("СписокДляПроверкиГОЗ", СписокДляПроверкиГОЗ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ИнициализацияСвойствРезультатовПроверок()
	СвойстваРезультатовПроверок = Новый Структура("ВсеКонтролиПройдены, ОписанияРезультатов", Истина);
	
	ОписанияОшибок = Новый ТаблицаЗначений;
	ОписанияОшибок.Колонки.Добавить("ИмяОбработчикаКонтроля");
	ОписанияОшибок.Колонки.Добавить("КонтрольПройден");
	ОписанияОшибок.Колонки.Добавить("Описание");
	ОписанияОшибок.Колонки.Добавить("Раздел");
	
	СвойстваРезультатовПроверок.Вставить("ОписанияРезультатов", ОписанияОшибок);
	
	Возврат СвойстваРезультатовПроверок;
КонецФункции

Функция ТипДокумента(Ссылка)
	Результат = Новый Структура;
	
	ТипЗначения = ТипЗнч(Ссылка);
	Контролируется = ТипЗначения = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипЗначения = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	
	Результат.Вставить("ТипЗначения", ТипЗначения);
	Результат.Вставить("Контролируется", Контролируется);
	
	Возврат Результат;
КонецФункции

Функция ОписаниеТекстаЗапроса()
	ОписаниеТекстаЗапроса = Новый Структура("Текст, КоличествоВременныхТаблиц");
	
	ОбъединяемыеЗапросы = Новый Массив;
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2());
	ОбъединяемыеЗапросы.Добавить(ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3());
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ВременныеТаблицы = Новый Массив;
	РезультирующиеВыборки = Новый Массив;
	УничтожениеОбщихВременныхТаблиц = Новый Массив;
	
	ШаблонПрефиксаТаблиц = "ЗапросКонтроля%1_";
	ИндексОбъединяемогоЗапроса = 0;
	Для Каждого ОбъединяемыйЗапрос Из ОбъединяемыеЗапросы Цикл 
		ПрефиксТаблиц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПрефиксаТаблиц, ИндексОбъединяемогоЗапроса);
		СхемаЗапроса.УстановитьТекстЗапроса(ОбъединяемыйЗапрос);
		
		ИменаВременныхТаблиц = Новый Соответствие;
		
		Для Каждого ПодзапросОбъединяемогоЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл 
			Если Не ПустаяСтрока(ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения) Тогда // Временная таблица подзапроса
				УточнитьИменаВременныхТаблицВЗапросе(ПодзапросОбъединяемогоЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц);
				
				ИменаВременныхТаблиц.Вставить(ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения, ПрефиксТаблиц + ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения);
				ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения = ИменаВременныхТаблиц[ПодзапросОбъединяемогоЗапроса.ТаблицаДляПомещения];
				ВременныеТаблицы.Добавить(ПодзапросОбъединяемогоЗапроса.ПолучитьТекстЗапроса());
			Иначе // Результирующая таблица подзапроса
				УточнитьИменаВременныхТаблицВЗапросе(ПодзапросОбъединяемогоЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц);
				
				РезультирующиеВыборки.Добавить(ПодзапросОбъединяемогоЗапроса.ПолучитьТекстЗапроса());
			КонецЕсли;
		КонецЦикла;
		
		ИндексОбъединяемогоЗапроса = ИндексОбъединяемогоЗапроса + 1; 
	КонецЦикла;
	
	РазделительЗапросов = "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
	
	ТекстЗапросаВременныеТаблицы = СтрСоединить(ВременныеТаблицы, РазделительЗапросов);
	ТекстЗапросаРезультирующиеВыборки = СтрСоединить(РезультирующиеВыборки, РазделительЗапросов);
	
	ОписаниеТекстаЗапроса.Вставить("Текст", ТекстЗапросаВременныеТаблицы + РазделительЗапросов + ТекстЗапросаРезультирующиеВыборки);
	ОписаниеТекстаЗапроса.Вставить("КоличествоВременныхТаблиц", ВременныеТаблицы.Количество());
	
	Возврат ОписаниеТекстаЗапроса;
КонецФункции

Процедура УточнитьИменаВременныхТаблицВЗапросе(ЗапросСхемыЗапроса, ИменаВременныхТаблиц, ПрефиксТаблиц)
	ЗапросУточняемыйПоИменамВременныхТаблиц = ЗапросСхемыЗапроса.ПолучитьТекстЗапроса();
	Для Каждого ИмяВременнойТаблицы Из ИменаВременныхТаблиц Цикл 
		ЗапросУточняемыйПоИменамВременныхТаблиц = СтрЗаменить(ЗапросУточняемыйПоИменамВременныхТаблиц, ИмяВременнойТаблицы.Ключ, ИмяВременнойТаблицы.Значение); 
		ЗапросУточняемыйПоИменамВременныхТаблиц = СтрЗаменить(ЗапросУточняемыйПоИменамВременныхТаблиц, ПрефиксТаблиц + ИмяВременнойТаблицы.Значение, ИмяВременнойТаблицы.Значение); 
	КонецЦикла;
	ЗапросСхемыЗапроса.УстановитьТекстЗапроса(ЗапросУточняемыйПоИменамВременныхТаблиц);
КонецПроцедуры

Функция ИнициализацияИндексовРезультатовЗапросов()
	ИндексыРезультатовЗапроса = Новый Соответствие;
	
	// Контроль раздела I "В соответствии с 275-ФЗ от 29.12.2012г."
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_1", 0);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_б", 1);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_в", 2);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_г", 3);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_е", 4);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_83_1_2_з", 5);
	
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_84_2", 6);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_84_10", 7);
	
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_1_1", 8);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_2_1", 9);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел1_275_85_2_2", 10);
	//
	// Контроль раздела II "Указание Банка России 3729-У от 15.07.2015г."
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_1", 11);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_2", 12);
	ИндексыРезультатовЗапроса.Вставить("РезультатКонтроля_Раздел2_3729У_2_3", 13);
	
	Возврат ИндексыРезультатовЗапроса;
КонецФункции

Функция ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)
	Возврат ИндексыРезультатовЗапросов[ИмяОбработчикаКонтроля];
КонецФункции

Процедура ДобавитьОписаниеРезультатаКонтроля(Знач ИмяОбработчикаКонтроля, Знач КонтрольПройден, Знач ОписаниеМассивСтрок, Знач ОписанияРезультатов)
	НовоеОписание = ОписанияРезультатов.Добавить();
	НовоеОписание.ИмяОбработчикаКонтроля = ИмяОбработчикаКонтроля;
	НовоеОписание.КонтрольПройден = КонтрольПройден;
	НовоеОписание.Описание = СтрСоединить(ОписаниеМассивСтрок, Символы.ПС + Символы.ПС);
	НовоеОписание.Раздел = РазделКонтроля(ИмяОбработчикаКонтроля);
КонецПроцедуры

#КонецОбласти

#Область КонтрольРаздела1
// Контроль раздела I "В соответствии с 275-ФЗ"

#Область Пункт83

Процедура РезультатКонтроля_Раздел1_275_83_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХозяйственнаяОперация");
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ДенежныеСредстваПовтИспРФ.ПрочаяОперацияСписанияДСПо275ФЗ(ХозяйственнаяОперация)
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		
		Описание = НСтр("ru = 'Контроль не требуется для операции ""%1"".';
						|en = 'Control is not required for transaction ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если НайденнаяСтрока.ТребуетсяПроверка И НайденнаяСтрока.УИП <> НайденнаяСтрока.ИГК Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'В поле УИП (%1) не указан ИГК отдельного счета (%2).';
									|en = 'Separate account SCI (%2) is not specified in UIP field (%1).'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						?(ЗначениеЗаполнено(НайденнаяСтрока.УИП), НайденнаяСтрока.УИП, "-"), 
						?(ЗначениеЗаполнено(НайденнаяСтрока.ИГК), НайденнаяСтрока.ИГК, "-"),);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_б(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_б";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	СсылкаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ХозяйственнаяОперация, ТипПлатежаФЗ275");
	Если СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		Описание = НСтр("ru = 'Контроль не требуется для операции ""%1"".';
						|en = 'Control is not required for transaction ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, СсылкаРеквизиты.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	ИначеЕсли СсылкаРеквизиты.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ОплатаТоваровРаботУслугПоРегулируемымЦенам Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа ""%1"".';
						|en = 'Control is not required for payment type ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, СсылкаРеквизиты.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если СтрЧислоВхождений(НайденнаяСтрока.НазначениеПлатежа, НайденнаяСтрока.ПредметОплаты) = 0 Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Товар, работа или услуга ""%1"", по которому применяются тарифы, не указан в назначении платежа.';
									|en = 'Goods, work or service ""%1"" by which the tariffs are applied is not specified in the purpose of payment.'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, НайденнаяСтрока.ПредметОплаты);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_в(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_в";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Состояние <> Перечисления.СостоянияГосударственныхКонтрактов.Завершен Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Контракт ""%1"" не завершен и имеет статус ""%2"".';
									|en = 'Contract ""%1"" is not completed and has status ""%2"".'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан подтверждающий документ вида ""Контракт"".';
									|en = 'Justification document of the ""Contract"" kind is not specified.'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан ни один документ, подтверждающий исполнение контракта.';
									|en = 'No document is specified that confirms contract execution.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм перечисления прибыли
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер прибыли %3 руб., указанный в контрактах.';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceeds a profit of %3 rub. specified in the contracts.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_г(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_г";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Договор ""%1"" закрыт.';
									|en = 'The ""%1"" contract is closed.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, 
						НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль головного исполнителя
				Если Не НайденнаяСтрока.ОрганизацияЭтоГоловнойИсполнитель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Организация ""%1"" не является головным исполнителем.';
									|en = 'The ""%1"" company is not a main assignee.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.Организация);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан подтверждающий документ вида ""Контракт"".';
									|en = 'Justification document of the ""Contract"" kind is not specified.'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан ни один документ, подтверждающий исполнение контракта.';
									|en = 'No document is specified that confirms contract execution.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм перечисления прибыли
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер прибыли %3 руб., указанный в контрактах.';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceeds a profit of %3 rub. specified in the contracts.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_е(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_е";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль состояния
				Если НайденнаяСтрока.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Договор ""%1"" закрыт.';
									|en = 'The ""%1"" contract is closed.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.КонтрактСЗаказчиком, 
						НайденнаяСтрока.Состояние);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан подтверждающий документ вида ""Контракт"".';
									|en = 'Justification document of the ""Contract"" kind is not specified.'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан ни один документ, подтверждающий исполнение контракта.';
									|en = 'No document is specified that confirms contract execution.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				
				// Контроль накопленных по контракту сумм возмещения
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > НайденнаяСтрока.СуммаПлан Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает размер возмещения %3 руб., указанный в контрактах.';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceeds a compensation amount of %3 rub. specified in the contracts.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаПлан, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_83_1_2_з(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_83_1_2_з";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль лимита 3 млн. руб.
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаРасходовВТекущемМесяце > 3000000 Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышает лимит 3 млн.руб. в месяц.';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceeds the limit of 3 million rub. per month.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаРасходовВТекущемМесяце, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль, что счет-получатель не принадлежит организации
				Если НайденнаяСтрока.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации Тогда
					Описание = НСтр("ru = 'Счет-получатель %1 принадлежит организации.';
									|en = 'Beneficiary account %1 belongs to the company.'");
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, НайденнаяСтрока.БанковскийСчет);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_1()
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).ГосударственныйКонтракт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)
	|	КОНЕЦ КАК ГосударственныйКонтракт,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).ДоговорСУчастникомГОЗ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПроверка
	|ПОМЕСТИТЬ РасшифровкаЗаявок
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В(&ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).ГосударственныйКонтракт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка)
	|	КОНЕЦ КАК ГосударственныйКонтракт,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов).ПлатежиПо275ФЗ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПроверка
	|ПОМЕСТИТЬ РасшифровкаСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В(&ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.УИП,
	|	ПроверяемыеДокументы.ИГК,
	|	ПроверяемыеДокументы.ТребуетсяПроверка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.ИдентификаторПлатежа КАК УИП,
	|		ЕСТЬNULL(Расшифровка.ГосударственныйКонтракт.Код, """") КАК ИГК,
	|		ЕСТЬNULL(Расшифровка.ТребуетсяПроверка, ЛОЖЬ) КАК ТребуетсяПроверка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаЗаявок КАК Расшифровка
	|			ПО ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = Расшифровка.Ссылка
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ИдентификаторПлатежа,
	|		ЕСТЬNULL(Расшифровка.ГосударственныйКонтракт.Код, """"),
	|		ЕСТЬNULL(Расшифровка.ТребуетсяПроверка, ЛОЖЬ)
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасшифровкаСписаний КАК Расшифровка
	|			ПО СписаниеСРасчетногоСчета.Ссылка = Расшифровка.Ссылка
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ) КАК ПроверяемыеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.УИП,
	|	ПроверяемыеДокументы.ИГК,
	|	ПроверяемыеДокументы.ТребуетсяПроверка";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_б()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПроверяемыеДокументы.ПредметОплаты КАК ПредметОплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа,
	|		ВЫРАЗИТЬ(ЗаявкаНаРасходованиеДенежныхСредств.ПредметОплаты КАК СТРОКА(210)) КАК ПредметОплаты
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.НазначениеПлатежа,
	|		ВЫРАЗИТЬ(СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПредметОплаты КАК СТРОКА(210))
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.НазначениеПлатежа,
	|	ПроверяемыеДокументы.ПредметОплаты";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_в()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Состояние,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.СуммаПрибыли, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл < Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыЗаявок
	|		ПО ПроверяемыеДокументы.Заявка.БанковскийСчет.ГосударственныйКонтракт = ДоговорыЗаявок.ГосударственныйКонтракт
	|			И ДоговорыЗаявок.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ДоговорыСписаний.Договор,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_г()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Организация
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).Организация
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОрганизацияЭтоГоловнойИсполнитель,
	|	ПроверяемыеДокументы.Ссылка.Организация КАК Организация,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Статус,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.СуммаПрибыли, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыЗаявок
	|		ПО ПроверяемыеДокументы.Заявка.БанковскийСчет.ГосударственныйКонтракт = ДоговорыЗаявок.ГосударственныйКонтракт
	|			И ДоговорыЗаявок.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).Организация
	|		КОГДА НЕ ДоговорыСписаний.Договор ЕСТЬ NULL 
	|				И ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ДоговорыСписаний.Договор.Организация = ВЫРАЗИТЬ(ПроверяемыеДокументы.Ссылка КАК Документ.СписаниеБезналичныхДенежныхСредств).Организация
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_е()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеНаВозмещениеЗатратЗаСчетСобственныхСредств))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыСписаний.Ссылка,
	|	ДоговорыСписаний.Договор,
	|	0 КАК СуммаКВозмещению
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов)
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК Договор
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|	ГДЕ
	|		РасшифровкаПлатежа.Ссылка В
	|				(ВЫБРАТЬ
	|					ПроверяемыеДокументы.Ссылка
	|				ИЗ
	|					ПроверяемыеДокументы КАК ПроверяемыеДокументы)) КАК ДоговорыСписаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка)) КАК Статус,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.СуммаКВозмещению, 0)) КАК СуммаПлан,
	|	СУММА(ЕСТЬNULL(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыОборот, 0)) КАК СуммаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен,
	|	МАКСИМУМ(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыЗаявок
	|		ПО ПроверяемыеДокументы.Заявка.БанковскийСчет.ГосударственныйКонтракт = ДоговорыЗаявок.ГосударственныйКонтракт
	|			И ДоговорыЗаявок.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыЗаявок.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				&ТекущаяДата,
	|				Регистратор,
	|				ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|		ПО (ДоговорыСписаний.Ссылка = ДвиженияДенежныеСредстваКонтрагентОбороты.Договор)
	|			И (ДвиженияДенежныеСредстваКонтрагентОбороты.Регистратор <> ПроверяемыеДокументы.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ДоговорыСписаний.Договор,
	|	ПроверяемыеДокументы.Заявка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.ПустаяСсылка))";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_83_1_2_з()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ОплатаИныхРасходовВПределахУстановленнойСуммыВМесяц))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчет КАК БанковскийСчет,
	|	ПроверяемыеДокументыГруппировка.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчетКасса КАК БанковскийСчет,
	|		ЛОЖЬ КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Ссылка.ПлатежиПо275ФЗ
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчетПолучатель <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчет,
	|	ПроверяемыеДокументыГруппировка.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК Ссылка
	|ПОМЕСТИТЬ ХозяйственныеОперацииРасходов
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|ГДЕ
	|	НастройкиХозяйственныхОпераций.Расход = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхУчета.ДенежныеСредства)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ДенежныеСредства КАК БанковскийСчет,
	|	СУММА(ДвиженияДенежныеСредстваДоходыРасходыОбороты.СуммаРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоБанковскимСчетам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныеСредстваДоходыРасходыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваДоходыРасходыОбороты.ДенежныеСредства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.ДенежныеСредства,
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДенежныхСредствОбороты.ДенежныеСредства,
	|	ДвиженияДенежныхСредствОбороты.СуммаРеглОборот
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В
	|					(ВЫБРАТЬ
	|						ПроверяемыеТипыПлатежей.Ссылка
	|					ИЗ
	|						ПроверяемыеТипыПлатежей)
	|				И ДенежныеСредства В
	|					(ВЫБРАТЬ
	|						ПроверяемыеДокументы.БанковскийСчет
	|					ИЗ
	|						ПроверяемыеДокументы)
	|				И ХозяйственнаяОперация В
	|					(ВЫБРАТЬ
	|						ХозяйственныеОперацииРасходов.Ссылка
	|					ИЗ
	|						ХозяйственныеОперацииРасходов)) КАК ДвиженияДенежныхСредствОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.БанковскийСчет КАК БанковскийСчет,
	|	ПроверяемыеДокументы.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации КАК ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ОплатыПоБанковскимСчетам.СуммаОплат), 0) КАК СуммаРасходовВТекущемМесяце
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоБанковскимСчетам КАК ОплатыПоБанковскимСчетам
	|		ПО ПроверяемыеДокументы.БанковскийСчет = ОплатыПоБанковскимСчетам.БанковскийСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.БанковскийСчет,
	|	ПроверяемыеДокументы.ЕстьБанковскиеСчетаПолучателиПринадлежащиеОрганизации,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Пункт84

Процедура РезультатКонтроля_Раздел1_275_84_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_84_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Проверка не превышения суммы платежей нарастающим итогом над остатком кредита
				Если НайденнаяСтрока.СуммаДокумента > НайденнаяСтрока.ОстатокКредита Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. превышает сумму остатка по кредиту %2 руб..';
												|en = '%1 rub. exceeds the remaining credit amount of %2 rub...'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.ОстатокКредита, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Проверка банковских реквизитов счета-отправителя и счета-получателя
				Если НайденнаяСтрока.БанкОтправитель <> НайденнаяСтрока.БанкПолучатель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Банковский счет %1 должен быть открыт в банке %2 счета-получателя %3.';
									|en = 'Bank account %1 should be opened in bank %2 of beneficiary''s account %3.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.БанкПолучатель, 
						НайденнаяСтрока.БанковскийСчетПолучатель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_84_10(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_84_10";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Проверка банковских реквизитов счета-отправителя и счета-получателя
				Если НайденнаяСтрока.БанкОтправитель <> НайденнаяСтрока.БанкПолучатель Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Банковский счет-получатель %1 должен быть открыт в уполномоченном банке %2.';
									|en = 'Beneficiary bank account %1 should be opened in authorized bank %2.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.БанковскийСчетПолучатель, 
						НайденнаяСтрока.БанкОтправитель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_84_2()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеСуммКредитовПеречисленныхУполномоченнымБанком))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк КАК БанкОтправитель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента КАК БанковскийСчетПолучатель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкПолучатель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк = РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкОтправительЭтоБанкПолучатель
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В(&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|		И РаспределениеПоСчетам.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк = СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументы.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументы.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументы.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументы.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	ЕСТЬNULL(СУММА(ПоступленияКредитныхСредств.СуммаОплатыОборот), 0) КАК ОстатокКредита
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|				,
	|				,
	|				,
	|				ДенежныеСредства В
	|						(ВЫБРАТЬ
	|							ПроверяемыеДокументы.БанковскийСчетОтправитель
	|						ИЗ
	|							ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|					И ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)) КАК ПоступленияКредитныхСредств
	|		ПО ПроверяемыеДокументы.БанковскийСчетОтправитель = ПоступленияКредитныхСредств.ДенежныеСредства
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента,
	|	ПроверяемыеДокументы.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументы.БанкОтправитель,
	|	ПроверяемыеДокументы.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументы.БанкПолучатель,
	|	ПроверяемыеДокументы.БанкОтправительЭтоБанкПолучатель";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_84_10()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТипыПлатежейФЗ275.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеТипыПлатежей
	|ИЗ
	|	Справочник.ТипыПлатежейФЗ275 КАК ТипыПлатежейФЗ275
	|ГДЕ
	|	ТипыПлатежейФЗ275.Ссылка В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.СписаниеСвязанноеСРазмещениемНаДепозитеУполномоченногоБанка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель КАК БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель КАК БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель КАК БанкОтправительЭтоБанкПолучатель
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк КАК БанкОтправитель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента КАК БанковскийСчетПолучатель,
	|		РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкПолучатель,
	|		ВЫРАЗИТЬ(РаспределениеПоСчетам.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций).Банк = РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.Банк КАК БанкОтправительЭтоБанкПолучатель
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В(&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|		И РаспределениеПоСчетам.Ссылка.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента,
	|		СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.Банк = СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.Банк
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		И СписаниеСРасчетногоСчета.ТипПлатежаФЗ275 В
	|				(ВЫБРАТЬ
	|					ПроверяемыеТипыПлатежей.Ссылка
	|				ИЗ
	|					ПроверяемыеТипыПлатежей КАК ПроверяемыеТипыПлатежей)) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправитель,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкПолучатель,
	|	ПроверяемыеДокументыГруппировка.БанкОтправительЭтоБанкПолучатель";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Пункт85

Процедура РезультатКонтроля_Раздел1_275_85_1_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_1_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	СсылкаРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ХозяйственнаяОперация, ТипПлатежаФЗ275");
	Если СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		И ДенежныеСредстваПовтИспРФ.ПрочаяОперацияСписанияДСПо275ФЗ(СсылкаРеквизиты.ХозяйственнаяОперация)
		И СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		И СсылкаРеквизиты.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		Описание = НСтр("ru = 'Контроль не требуется для операции ""%1"".';
						|en = 'Control is not required for transaction ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, СсылкаРеквизиты.ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	ИначеЕсли СсылкаРеквизиты.ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа ""%1"".';
						|en = 'Control is not required for payment type ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, СсылкаРеквизиты.ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль совпадения УИП и ИГК
				Если НайденнаяСтрока.ИГКСчетаОтправителя <> НайденнаяСтрока.УИП Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'ИГК %1 банковского счета-отправителя ""%2"" не совпадает с УИП %3.';
									|en = 'SCI %1 of payer bank account ""%2"" does not match UIP %3.'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.ИГКСчетаОтправителя, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.УИП);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
				
				// Контроль совпадения ИГК отдельных счетов
				Если НайденнаяСтрока.ИГКСчетаОтправителя <> НайденнаяСтрока.ИГКСчетаПолучателя Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'ИГК %1 банковского счета-отправителя ""%2"" не совпадает с ИГК %3 банковского счета-получателя ""%4"".';
									|en = 'SCI %1 of payer bank account ""%2"" does not match SCI %3 of beneficiary bank account ""%4"".'"); 
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						НайденнаяСтрока.ИГКСчетаОтправителя, 
						НайденнаяСтрока.БанковскийСчетОтправитель, 
						НайденнаяСтрока.ИГКСчетаПолучателя, 
						НайденнаяСтрока.БанковскийСчетПолучатель);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_85_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_2_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХозяйственнаяОперация");
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		Описание = НСтр("ru = 'Контроль не требуется для операции ""%1"".';
						|en = 'Control is not required for transaction ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль указания контракта
				Если Не НайденнаяСтрока.КонтрактУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан подтверждающий документ вида ""Контракт"".';
									|en = 'Justification document of the ""Contract"" kind is not specified.'"); 
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел1_275_85_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел1_275_85_2_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ХозяйственнаяОперация");
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту 
		И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		Описание = НСтр("ru = 'Контроль не требуется для операции ""%1"".';
						|en = 'Control is not required for transaction ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ХозяйственнаяОперация);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				// Контроль указания документов, подтверждающих исполнение контракта
				Если Не НайденнаяСтрока.ДокументИсполненияУказан Тогда
					КонтрольПройден = Ложь;
					
					Описание = НСтр("ru = 'Не указан ни один документ, подтверждающий исполнение контракта.';
									|en = 'No document is specified that confirms contract execution.'");
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_1_1()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка КАК Заявка,
	|	ПроверяемыеДокументыГруппировка.УИП КАК УИП,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель КАК БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель КАК ЭтоОСБанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя КАК ИГКСчетаОтправителя,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель КАК ЭтоОСБанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя КАК ИГКСчетаПолучателя,
	|	МАКСИМУМ(ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель) = МАКСИМУМ(ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель) КАК ВыбраныОтдельныеСчета,
	|	МАКСИМУМ(ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя) = МАКСИМУМ(ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя) КАК ИГКВыбранныхОтдельныхСчетовСовпадает
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспределениеПоСчетам.Ссылка КАК Ссылка,
	|		РаспределениеПоСчетам.Ссылка КАК Заявка,
	|		РаспределениеПоСчетам.Ссылка.ИдентификаторПлатежа КАК УИП,
	|		РаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетОтправитель,
	|		РаспределениеПоСчетам.БанковскийСчетКасса.ОтдельныйСчетГОЗ КАК ЭтоОСБанковскийСчетОтправитель,
	|		РаспределениеПоСчетам.БанковскийСчетКасса.ГосударственныйКонтракт.Код КАК ИГКСчетаОтправителя,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента
	|		КОНЕЦ КАК БанковскийСчетПолучатель,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель.ОтдельныйСчетГОЗ
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.ОтдельныйСчетГОЗ
	|		КОНЕЦ КАК ЭтоОСБанковскийСчетПолучатель,
	|		ВЫБОР
	|			КОГДА РаспределениеПоСчетам.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА РаспределениеПоСчетам.Ссылка.БанковскийСчетПолучатель.ГосударственныйКонтракт.Код
	|			ИНАЧЕ РаспределениеПоСчетам.Ссылка.БанковскийСчетКонтрагента.ГосударственныйКонтракт.Код
	|		КОНЕЦ КАК ИГКСчетаПолучателя
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК РаспределениеПоСчетам
	|	ГДЕ
	|		РаспределениеПоСчетам.Ссылка В (&ПроверяемыеДокументы)
	|		И РаспределениеПоСчетам.Ссылка.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств,
	|		СписаниеСРасчетногоСчета.ИдентификаторПлатежа,
	|		СписаниеСРасчетногоСчета.БанковскийСчет,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.ОтдельныйСчетГОЗ,
	|		СписаниеСРасчетногоСчета.БанковскийСчет.ГосударственныйКонтракт.Код,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель.ОтдельныйСчетГОЗ
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.ОтдельныйСчетГОЗ
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СписаниеСРасчетногоСчета.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|				ТОГДА СписаниеСРасчетногоСчета.БанковскийСчетПолучатель.ГосударственныйКонтракт.Код
	|			ИНАЧЕ СписаниеСРасчетногоСчета.БанковскийСчетКонтрагента.ГосударственныйКонтракт.Код
	|		КОНЕЦ
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументыГруппировка.Ссылка,
	|	ПроверяемыеДокументыГруппировка.Заявка,
	|	ПроверяемыеДокументыГруппировка.УИП,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетОтправитель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаОтправителя,
	|	ПроверяемыеДокументыГруппировка.БанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ЭтоОСБанковскийСчетПолучатель,
	|	ПроверяемыеДокументыГруппировка.ИГКСчетаПолучателя";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_1()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыПодтверждающихДокументов.Контракт)
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КонтрактФайлЗаполнен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ГДЕ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&ПроверяемыеДокументы)
	|			И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СписаниеСРасчетногоСчета.Ссылка,
	|			СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ГДЕ
	|			СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|			И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПроверяемыеДокументыГруппировка.Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка) КАК ПроверяемыеДокументы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|				И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|					(ВЫБРАТЬ
	|						ПроверяемыеВидыДокументов.Ссылка
	|					ИЗ
	|						ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел1_275_85_2_2()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	МАКСИМУМ(ЕстьNull(ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта, ЛОЖЬ)) КАК ДокументИсполненияУказан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Номер <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияНомерЗаполнен,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Дата <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияДатаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Сумма <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияСуммаЗаполнена,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаявкаПодтверждающиеДокументы.ВидДокумента.ПодтверждаетИсполнениеКонтракта
	|					И ЗаявкаПодтверждающиеДокументы.Файл <> Неопределено
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДокументИсполненияФайлЗаполнен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПроверяемыеДокументыГруппировка.Ссылка КАК Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка КАК Заявка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|		ИЗ
	|			Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ГДЕ
	|			ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В (&ПроверяемыеДокументы)
	|			И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СписаниеСРасчетногоСчета.Ссылка,
	|			СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|		ИЗ
	|			Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ГДЕ
	|			СписаниеСРасчетногоСчета.Ссылка В (&ПроверяемыеДокументы)
	|			И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеДокументыГруппировка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПроверяемыеДокументыГруппировка.Ссылка,
	|		ПроверяемыеДокументыГруппировка.Заявка) КАК ПроверяемыеДокументы
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|				И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|					(ВЫБРАТЬ
	|						ПроверяемыеВидыДокументов.Ссылка
	|					ИЗ
	|						ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонтрольРаздела2
// Контроль раздела II "Дополнительные критерии контроля"

Процедура РезультатКонтроля_Раздел2_3729У_2_1(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_1";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");

	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > 0.5 * НайденнаяСтрока.СуммаКонтракта Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышают 50% от цены контракта %3 руб..';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceed 50% of the contract price of %3 rub.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаКонтракта, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел2_3729У_2_2(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_2";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю
		И ТипПлатежаФЗ275 <> Справочники.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если НайденнаяСтрока.СуммаДокумента + НайденнаяСтрока.СуммаФакт > 0.2 * НайденнаяСтрока.СуммаКонтракта Тогда
					КонтрольПройден = Ложь;
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. превышают 50% от цены контракта %3 руб..';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. exceed 50% of the contract price of %3 rub.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
					
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаФакт, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаКонтракта, "ЧДЦ=2; ЧН="));
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Процедура РезультатКонтроля_Раздел2_3729У_2_3(РезультатыПроверок, ИндексыРезультатовЗапросов, Ссылка, Знач ДанныеДокументовДляКонтроля)
	ТипДокумента = ТипДокумента(Ссылка);
	Если НЕ ТипДокумента.Контролируется Тогда
		Возврат;
	КонецЕсли;
	
	ОписанияРезультатов = РезультатыПроверок.ОписанияРезультатов;
	ИмяОбработчикаКонтроля = "РезультатКонтроля_Раздел2_3729У_2_3";
	КонтрольПройден = Истина;
	
	ОписаниеМассивСтрок = Новый Массив;
	Описание = "";
	
	ТипПлатежаФЗ275 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ТипПлатежаФЗ275");
	Если ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов Тогда
		Описание = НСтр("ru = 'Контроль не требуется для типа платежа 275-ФЗ ""%1"".';
						|en = 'Control is not required for payment type 275-FZ ""%1"".'");
		Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ТипПлатежаФЗ275);
		ОписаниеМассивСтрок.Добавить(Описание);
	Иначе
		Если ДанныеДокументовДляКонтроля = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3();
			ПроверяемыеДокументы = Новый Массив;
			ПроверяемыеДокументы.Добавить(Ссылка);
			Запрос.УстановитьПараметр("ПроверяемыеДокументы", ПроверяемыеДокументы);
			
			ДанныеДокументовДляКонтроляТаблица = Запрос.Выполнить().Выгрузить();
		Иначе
			ДанныеДокументовДляКонтроляТаблица = ДанныеДокументовДляКонтроля[ИндексРезультатаЗапроса(ИндексыРезультатовЗапросов, ИмяОбработчикаКонтроля)].Выгрузить();
		КонецЕсли;
		
		Отбор = Новый Структура("Ссылка", Ссылка);
		НайденныеСтроки = ДанныеДокументовДляКонтроляТаблица.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() >= 1 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				Если Макс(НайденнаяСтрока.СуммаЗаявок, НайденнаяСтрока.СуммаОплат) > НайденнаяСтрока.ПодтверждающийДокументСумма Тогда
					КонтрольПройден = Ложь;
					
					ЧастиПредставления = Новый Массив;
					ЧастиПредставления.Добавить(НайденнаяСтрока.ПодтверждающийДокументВид);
					Если ЗначениеЗаполнено(НайденнаяСтрока.ПодтверждающийДокументНомер) Тогда
						ЧастиПредставления.Добавить(НСтр("ru = '№';
														|en = 'No.'"));
						ЧастиПредставления.Добавить(НайденнаяСтрока.ПодтверждающийДокументНомер);
					КонецЕсли;
					Если ЗначениеЗаполнено(НайденнаяСтрока.ПодтверждающийДокументДата) Тогда
						ЧастиПредставления.Добавить(НСтр("ru = 'от';
														|en = 'dated'") );
						ЧастиПредставления.Добавить(Формат(НайденнаяСтрока.ПодтверждающийДокументДата, "ДЛФ=D"));
					КонецЕсли;
					ПредставлениеДокумента = СтрСоединить(ЧастиПредставления, Символы.НПП);
					
					ЧастиОписания = Новый Массив;
					Если НайденнаяСтрока.ЭтоСписание Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма платежа';
													|en = 'Payment amount'")); 
					ИначеЕсли НайденнаяСтрока.ЭтоЗаявка Тогда
						ЧастиОписания.Добавить(НСтр("ru = 'Сумма заявки';
													|en = 'Request amount'")); 
					КонецЕсли;
					
					ЧастиОписания.Добавить(НСтр("ru = '%1 руб. с учетом ранее созданных распоряжений на сумму %2 руб. и оплат на сумму %3 руб. превышают сумму %4 руб. подтверждающего документа ""%5"".';
												|en = '%1 rub. considering previously created references to the amount of %2 rub. and payments to the amount of %3 rub. exceed the amount of %4 rub. of the ""%5"" justification document.'"));
					
					Описание = СтрСоединить(ЧастиОписания, " ");
						
					Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, 
						Формат(НайденнаяСтрока.СуммаДокумента, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаЗаявок, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.СуммаОплат, "ЧДЦ=2; ЧН="), 
						Формат(НайденнаяСтрока.ПодтверждающийДокументСумма, "ЧДЦ=2; ЧН="), 
						ПредставлениеДокумента);
					ОписаниеМассивСтрок.Добавить(Описание);
				КонецЕсли;
			КонецЦикла;
			
			Если КонтрольПройден Тогда
				Описание = НСтр("ru = 'Контроль пройден.';
								|en = 'Controlled.'");
				ОписаниеМассивСтрок.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьОписаниеРезультатаКонтроля(ИмяОбработчикаКонтроля, КонтрольПройден, ОписаниеМассивСтрок, ОписанияРезультатов);
КонецПроцедуры

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_1()
	ТекстЗапроса =  "ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|ГДЕ
	|	ПроверяемыеЗаявкиГруппировка.Заявка.ТипПлатежаФЗ275 = ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыВЗаявке.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	ЕСТЬNULL(ДоговорыВЗаявке.Сумма, 0) КАК СуммаКонтракта
	|ПОМЕСТИТЬ КонтрактыСЗаказчиками
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыВЗаявке
	|		ПО ПроверяемыеДокументы.Заявка.БанковскийСчет.ГосударственныйКонтракт = ДоговорыВЗаявке.ГосударственныйКонтракт
	|			И ДоговорыВЗаявке.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор КАК Договор,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоДоговорам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 = ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.УплатаНалоговИСборовТаможенныхПлатежейСтраховыхВзносов)
	|				И Договор В
	|					(ВЫБРАТЬ
	|						КонтрактыСЗаказчиками.КонтрактСЗаказчиком
	|					ИЗ
	|						КонтрактыСЗаказчиками)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(КонтрактыСЗаказчиками.СуммаКонтракта) КАК СуммаКонтракта,
	|	СУММА(ЕСТЬNULL(ОплатыПоДоговорам.СуммаОплат, 0)) КАК СуммаФакт
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
	|		ПО ПроверяемыеДокументы.Ссылка = КонтрактыСЗаказчиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоДоговорам КАК ОплатыПоДоговорам
	|		ПО (КонтрактыСЗаказчиками.КонтрактСЗаказчиком = ОплатыПоДоговорам.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_2()
	ТекстЗапроса =  "ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|ГДЕ
	|	ПроверяемыеЗаявкиГруппировка.Заявка.ТипПлатежаФЗ275 В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю), ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(РасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Справочник.ДоговорыКонтрагентов)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Договор
	|ПОМЕСТИТЬ ДоговорыСписаний
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Ссылка В
	|			(ВЫБРАТЬ
	|				ПроверяемыеДокументы.Ссылка
	|			ИЗ
	|				ПроверяемыеДокументы КАК ПроверяемыеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК КонтрактСЗаказчиком,
	|	СУММА(ЕСТЬNULL(ДоговорыСписаний.Договор.Сумма, 0)) КАК СуммаКонтракта
	|ПОМЕСТИТЬ КонтрактыСЗаказчиками
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыВЗаявке
	|		ПО ПроверяемыеДокументы.Заявка.БанковскийСчет.ГосударственныйКонтракт = ДоговорыВЗаявке.ГосударственныйКонтракт
	|			И ДоговорыВЗаявке.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыСКонтрагентами
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств)
	|			И (ДоговорыВЗаявке.Ссылка = ДоговорыСКонтрагентами.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСписаний КАК ДоговорыСписаний
	|		ПО (ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|			И ПроверяемыеДокументы.Ссылка = ДоговорыСписаний.Ссылка
	|			И (ДоговорыСписаний.Договор = ДоговорыВЗаявке.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ЕСТЬNULL(ДоговорыСписаний.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор КАК Договор,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагентОбороты.СуммаОплатыРеглОборот) КАК СуммаОплат
	|ПОМЕСТИТЬ ОплатыПоДоговорам
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(
	|			НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ),
	|			Авто,
	|			ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				И ТипПлатежаФЗ275 В (ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречислениеПрибылиГоловномуИсполнителю), ЗНАЧЕНИЕ(Справочник.ТипыПлатежейФЗ275.ПеречисленияПрибылиИсполнителю))
	|				И Договор В
	|					(ВЫБРАТЬ
	|						КонтрактыСЗаказчиками.КонтрактСЗаказчиком
	|					ИЗ
	|						КонтрактыСЗаказчиками)) КАК ДвиженияДенежныеСредстваКонтрагентОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагентОбороты.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ПроверяемыеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ПроверяемыеДокументы.Заявка КАК Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(КонтрактыСЗаказчиками.СуммаКонтракта) КАК СуммаКонтракта,
	|	СУММА(ЕСТЬNULL(ОплатыПоДоговорам.СуммаОплат, 0)) КАК СуммаФакт
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрактыСЗаказчиками КАК КонтрактыСЗаказчиками
	|		ПО ПроверяемыеДокументы.Ссылка = КонтрактыСЗаказчиками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоДоговорам КАК ОплатыПоДоговорам
	|		ПО (КонтрактыСЗаказчиками.КонтрактСЗаказчиком = ОплатыПоДоговорам.Договор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеДокументы.Ссылка,
	|	ПроверяемыеДокументы.Заявка,
	|	ПроверяемыеДокументы.Ссылка.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаРезультатКонтроля_Раздел2_3729У_2_3()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВидыДокументов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПроверяемыеВидыДокументов
	|ИЗ
	|	Справочник.ВидыПодтверждающихДокументов КАК ВидыДокументов
	|ГДЕ
	|	ВидыДокументов.ПодтверждаетИсполнениеКонтракта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеЗаявкиГруппировка.Ссылка КАК Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка КАК Заявка
	|ПОМЕСТИТЬ ПроверяемыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ПроверяемыеДокументы)
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СписаниеСРасчетногоСчета.Ссылка,
	|		СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|	ГДЕ
	|		СписаниеСРасчетногоСчета.Ссылка В(&ПроверяемыеДокументы)
	|		И СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств.ПлатежиПо275ФЗ
	|) КАК ПроверяемыеЗаявкиГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеЗаявкиГруппировка.Ссылка,
	|	ПроверяемыеЗаявкиГруппировка.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеДокументы.Ссылка КАК Ссылка,
	|	ПроверяемыеДокументы.Заявка КАК ПроверяемаяЗаявка,
	|	ЕСТЬNULL(ПроверяемыеДокументы.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.ВидДокумента, Неопределено) КАК ПодтверждающийДокументВид,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Номер, Неопределено) КАК ПодтверждающийДокументНомер,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Дата, Неопределено) КАК ПодтверждающийДокументДата,
	|	ЕСТЬNULL(ЗаявкаПодтверждающиеДокументы.Сумма, 0) КАК ПодтверждающийДокументСумма,
	|	ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы.Ссылка КАК Заявка
	|ПОМЕСТИТЬ ЗаявкиИспользующиеПодтверждающиеДокументы
	|ИЗ
	|	ПроверяемыеДокументы КАК ПроверяемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаПодтверждающиеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПодтверждающиеДокументы КАК ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы
	|			ПО ЗаявкаПодтверждающиеДокументы.Файл = ЗаявкаНаРасходованиеДенежныхСредствПодтверждающиеДокументы.Файл
	|		ПО ПроверяемыеДокументы.Заявка = ЗаявкаПодтверждающиеДокументы.Ссылка
	|			И (ЗаявкаПодтверждающиеДокументы.ВидДокумента В
	|				(ВЫБРАТЬ
	|					ПроверяемыеВидыДокументов.Ссылка
	|				ИЗ
	|					ПроверяемыеВидыДокументов КАК ПроверяемыеВидыДокументов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.Заявка КАК Заявка,
	|	СУММА(ЕСТЬNULL(СписаниеСРасчетногоСчета.СуммаДокумента, 0)) КАК Сумма
	|ПОМЕСТИТЬ ОплатыПоЗаявкам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка КАК Заявка
	|	ИЗ
	|		ЗаявкиИспользующиеПодтверждающиеДокументы КАК ЗаявкиИспользующиеПодтверждающиеДокументы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка) КАК Заявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеСРасчетногоСчета
	|		ПО Заявки.Заявка = СписаниеСРасчетногоСчета.ЗаявкаНаРасходованиеДенежныхСредств
	|			И (СписаниеСРасчетногоСчета.Проведен)
	|			И (СписаниеСРасчетногоСчета.БанковскийСчет.ОтдельныйСчетГОЗ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заявки.Заявка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка КАК Ссылка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЭтоЗаявка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств  КАК ЭтоСписание,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента КАК СуммаДокумента,
	|	СУММА(ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента) КАК СуммаЗаявок,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументВид КАК ПодтверждающийДокументВид,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументНомер КАК ПодтверждающийДокументНомер,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументДата КАК ПодтверждающийДокументДата,
	|	МАКСИМУМ(ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументСумма) КАК ПодтверждающийДокументСумма,
	|	СУММА(ЕстьNull(ОплатыПоЗаявкам.Сумма, 0)) КАК СуммаОплат
	|ИЗ
	|	ЗаявкиИспользующиеПодтверждающиеДокументы КАК ЗаявкиИспользующиеПодтверждающиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатыПоЗаявкам КАК ОплатыПоЗаявкам
	|		ПО ЗаявкиИспользующиеПодтверждающиеДокументы.Заявка = ОплатыПоЗаявкам.Заявка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.Ссылка,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументВид,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументНомер,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.ПодтверждающийДокументДата,
	|	ЗаявкиИспользующиеПодтверждающиеДокументы.СуммаДокумента";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти
//-- НЕ УТ

Процедура ПроверитьРеестрКонтрагентовПоРасшифровкеПлатежа(
			ДокументОбъект, Отказ, ФлагОбменСБанками, ОшибкиЗаполнения)

	РеестрПолучателей = ДокументОбъект.БанковскиеСчетаСпискаКонтрагентов.Выгрузить(, "НомерСтроки, Контрагент, Сумма");
	ТаблицаПолучателей = РеестрПолучателей.Скопировать();
	ТаблицаПолучателей.Свернуть("Контрагент", "Сумма");
	
	РасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа.Выгрузить(, "Контрагент, Сумма");
	РасшифровкаПлатежа.Свернуть("Контрагент", "Сумма");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокКонтрагентов.Контрагент КАК Контрагент,
		|	СписокКонтрагентов.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаПолучателей
		|ИЗ
		|	&СписокКонтрагентов КАК СписокКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.Контрагент КАК Контрагент,
		|	РасшифровкаПлатежа.Сумма КАК Сумма
		|ПОМЕСТИТЬ ТаблицаРасшифровка
		|ИЗ
		|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПолучателей.Контрагент КАК КонтрагентПолучатель,
		|	ТаблицаПолучателей.Сумма КАК СуммаПолучатель,
		|	ТаблицаРасшифровка.Контрагент КАК КонтрагентРасшифровка,
		|	ТаблицаРасшифровка.Сумма КАК СуммаРасшифровка
		|ПОМЕСТИТЬ ПолнаяТаблица
		|ИЗ
		|	ТаблицаРасшифровка КАК ТаблицаРасшифровка
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаПолучателей КАК ТаблицаПолучателей
		|		ПО ТаблицаРасшифровка.Контрагент = ТаблицаПолучателей.Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПолнаяТаблица.КонтрагентПолучатель КАК Контрагент,
		|	ИСТИНА КАК ОтсутствуетПоставщик,
		|	ЛОЖЬ КАК ОтсутствуетПолучатель,
		|	ЛОЖЬ КАК ОшибкаСуммы
		|ИЗ
		|	ПолнаяТаблица КАК ПолнаяТаблица
		|ГДЕ
		|	ПолнаяТаблица.КонтрагентРасшифровка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПолнаяТаблица.КонтрагентРасшифровка,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ПолнаяТаблица КАК ПолнаяТаблица
		|ГДЕ
		|	ПолнаяТаблица.КонтрагентПолучатель ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПолнаяТаблица.КонтрагентПолучатель,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ПолнаяТаблица КАК ПолнаяТаблица
		|ГДЕ
		|	ПолнаяТаблица.КонтрагентПолучатель = ПолнаяТаблица.КонтрагентРасшифровка
		|	И ПолнаяТаблица.СуммаПолучатель <> ПолнаяТаблица.СуммаРасшифровка";
	
	Запрос.УстановитьПараметр("СписокКонтрагентов", ТаблицаПолучателей);
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ТекстыСообщений = Новый Массив;
		
		Если РезультатЗапроса.ОтсутствуетПоставщик Тогда
			
			ПараметрыОтбора = Новый Структура("Контрагент", РезультатЗапроса.Контрагент);
			СписокСтрок = РеестрПолучателей.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаОшибки Из СписокСтрок Цикл
				
				ТекстШаблон = НСтр("ru = 'В строке %1 введен получатель, которого нет в расшифровке платежа';
									|en = 'Line %1 contains a payee who is not specified in the payment details'");
				ТекстСообщения = СтрШаблон(ТекстШаблон, СтрокаОшибки.НомерСтроки);
				ТекстыСообщений.Добавить(ТекстСообщения);
				
			КонецЦикла;
			
		ИначеЕсли РезультатЗапроса.ОтсутствуетПолучатель Тогда
			
			ТекстШаблон = НСтр("ru = 'В реестре отсутствует получатель ""%1""';
								|en = 'Payee ""%1"" is not specified in the registry'");
			ТекстСообщения = СтрШаблон(ТекстШаблон, РезультатЗапроса.Контрагент);
			ТекстыСообщений.Добавить(ТекстСообщения);
			
		ИначеЕсли РезультатЗапроса.ОшибкаСуммы Тогда
			
			ТекстШаблон = НСтр("ru = 'Сумма в реестре по получателю ""%1"" отличается от расшифровки платежа';
								|en = 'The amount in the registry by payee ""%1"" differs from the amount in the payment details'");
			ТекстСообщения = СтрШаблон(ТекстШаблон, РезультатЗапроса.Контрагент);
			ТекстыСообщений.Добавить(ТекстСообщения);
			
		КонецЕсли;
		
		Если ТекстыСообщений.Количество() <> 0 Тогда
			
			Для Каждого ТекущееСообщение Из ТекстыСообщений Цикл
				
				Если ФлагОбменСБанками Тогда
					ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекущееСообщение);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						ТекущееСообщение, ДокументОбъект, "БанковскиеСчетаСпискаКонтрагентов", , Отказ);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Таблица банковских счетов списка контрагентов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица банковских счетов списка контрагентов:
// * Контрагент - СправочникСсылка.Контрагенты - контрагент.
// * БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - банковский счет контрагента.
// * Сумма - Число - сумма списания.
//
Функция НоваяТаблицаБанковскихСчетовСпискаКонтрагентов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Таблица.Колонки.Добавить("БанковскийСчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	Таблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции

// Выполняет проверку реестра контрагентов.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, в котором выполняется проверка.
//  Ошибка - Булево - признак ошибки при проверке.
//  ФлагОбменСБанками - Булево - признак выполнения процедуры в момент выполнения обработки обмена с банком.
//  ОшибкиЗаполнения - Строка - строка с ошибками.
//
Процедура ПроверитьРеестрКонтрагентов(ДокументОбъект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения)
	
	Если Не ДокументОбъект.СписокКонтрагентов Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеестрКонтрагентовПоРасшифровкеПлатежа(ДокументОбъект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения);
	
КонецПроцедуры

// Выполняет проверку объектов расчета с самозанятыми.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - документ, в котором выполняется проверка.
//  Ошибка - Булево - признак ошибки при проверке.
//  ФлагОбменСБанками - Булево - признак выполнения процедуры в момент выполнения обработки обмена с банком.
//  ОшибкиЗаполнения - Строка - строка с ошибками.
//
Процедура ПроверитьОбъектыРасчетовССамозанятыми(ДокументОбъект, Ошибка, ФлагОбменСБанками, ОшибкиЗаполнения)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРасшифровка.НомерСтроки КАК НомерСтроки,
		|	ТаблицаРасшифровка.ОбъектРасчетов КАК ОбъектРасчетов
		|ПОМЕСТИТЬ РасшифровкаПлатежа
		|ИЗ
		|	&ТаблицаРасшифровка КАК ТаблицаРасшифровка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
		|	ОбъектыРасчетов.ТипСсылки КАК ТипСсылки
		|ИЗ
		|	РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасшифровкаПлатежа.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) В(&ТипыОбъектов)";
	
	СписокОбъектов = Новый Массив;
	//++ НЕ УТ
	СписокОбъектов.Добавить(Тип("ДокументСсылка.ОтчетОператораСистемыПлатон"));
	//-- НЕ УТ
	СписокОбъектов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
	СписокОбъектов.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
	
	Запрос.УстановитьПараметр("ТипыОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("ТаблицаРасшифровка", ДокументОбъект.РасшифровкаПлатежа.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если Запрос.МенеджерВременныхТаблиц <> Неопределено Тогда
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 1
			И Не ДокументОбъект.СписокКонтрагентов Тогда
			
			ТекстШаблон = НСтр("ru = 'Введен недопустимый объект расчета с самозанятыми ""%1""';
								|en = 'The specified object of AR/AP with self-employed person ""%1"" is incorrect'");
			ТекстСообщения = СтрШаблон(ТекстШаблон, РезультатЗапроса.ТипСсылки);
			
		Иначе
			
			ТекстШаблон = НСтр("ru = 'В строке %1 введен недопустимый объект расчета с самозанятыми ""%2""';
								|en = 'Line %1 contains an incorrect object of AR/AP with self-employed person ""%2""'");
			ТекстСообщения = СтрШаблон(ТекстШаблон, РезультатЗапроса.НомерСтроки, РезультатЗапроса.ТипСсылки);
			
		КонецЕсли;
		
		Поле = "РасшифровкаПлатежа[" + (РезультатЗапроса.НомерСтроки - 1) + "].ОбъектРасчетов";
		
		Если ФлагОбменСБанками Тогда
			ДобавитьОшибкуЗаполнения(ОшибкиЗаполнения, ТекстСообщения);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, ДокументОбъект, Поле, , Ошибка);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция КонтрагентИзТаблицы(Таблица, НомерСтроки, Приоритет)

	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("НомерСтроки", НомерСтроки);
	ПараметрыОтбора.Вставить("Приоритет", Приоритет);
	
	НайденноеЗначение = Таблица.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденноеЗначение.Количество() = 1 Тогда
		Контрагент = НайденноеЗначение[0].Контрагент;
	КонецЕсли;
	
	Возврат Контрагент;

КонецФункции

#Область ВыплатыСамозанятым

Процедура ЗаполнитьЧекиСамозанятого(Ссылка, ТаблицаЧеков = Неопределено) Экспорт

	Если ТаблицаЧеков = Неопределено Тогда
		ТаблицаЧеков = НоваяТаблицаЧековСамозанятых();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Наименование КАК НомерЧека,
	|	ПрисоединенныеФайлы.СсылкаНаЧек КАК СсылкаНаЧек,
	|	ПрисоединенныеФайлы.Ссылка КАК ФайлЧека
	|ИЗ
	|	&ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ПрисоединенныеФайлы.ЭтоЧекСамозанятого
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
	
	СсылкаПрисоединенныхФайлов = РаботаСФайлами.НоваяСсылкаНаФайл(Ссылка);
	ИмяДокумента = ОбщегоНазначения.ИмяТаблицыПоСсылке(СсылкаПрисоединенныхФайлов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПрисоединенныеФайлы", ИмяДокумента);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Чек = ТаблицаЧеков.Добавить();
			ЗаполнитьЗначенияСвойств(Чек, Выборка);
			Чек.НомерЧека = СтрЗаменить(Чек.НомерЧека, "№", "");
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Функция НоваяТаблицаЧековСамозанятых()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерЧека", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СсылкаНаЧек", Новый ОписаниеТипов("Строка"));
	
	ТипыФайлов = Новый Массив;
	ТипыФайлов.Добавить(Тип("СправочникСсылка.ПриобретениеТоваровУслугПрисоединенныеФайлы"));
	ТипыФайлов.Добавить(Тип("СправочникСсылка.ПриобретениеУслугПрочихАктивовПрисоединенныеФайлы"));
	Таблица.Колонки.Добавить("ФайлЧека", Новый ОписаниеТипов(ТипыФайлов));
	
	Возврат Таблица

КонецФункции

#КонецОбласти

#КонецОбласти
//-- Локализация
