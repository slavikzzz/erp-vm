////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ БУХГАЛТЕРСКОЙ ОТЧЕТНОСТИ.
// Модуль содержит переопределяемые процедуры и функции.
// Предназначен для заполнения регламентированного отчета
// "Бухгалтерская отчетность организаций" и финансовой отчетности в банки.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Счета

// Переопределяет идентичную функцию в общем модуле "ЗаполнениеБухгалтерскойОтчетностиИтоги":
//	описывает счета, отсутствующие в ней, однако использующуюся в текущей конфигурации.
//
//	Параметры:
//		УсловныйКодСчета - Строка - код счета, как правило соответствуют коду счета из плана счетов для соответствующего счета.
//
//	Возвращаемое значение:
//		ПланСчетовСсылка.Хозрасчетный - ссылка на счет бухгалтерского учета, соотвутствующий переданному условному коду.
//			В случае отсутствия соответствия - возвращает пустую ссылку.
//
Функция Счет(УсловныйКодСчета) Экспорт
	
	ПС = ПланыСчетов.Хозрасчетный;
	Результат = ПС.ПустаяСсылка();

	Если УсловныйКодСчета = "01.ЦФ" Тогда
		Результат = ПС.ОСвОрганизации_ЦФ;
	ИначеЕсли УсловныйКодСчета = "02.ЦФ" Тогда
		Результат = ПС.АмортизацияОС_01_ЦФ;
	ИначеЕсли УсловныйКодСчета = "07.ДР" Тогда
		Результат = ПС.ДопОборудованиеКУстановке;
	ИначеЕсли УсловныйКодСчета = "10.11.3" Тогда
		Результат = ПС.ИнвентарьВЭксплуатации;
	ИначеЕсли УсловныйКодСчета = "10.ДР" Тогда
		Результат = ПС.ДопРасходыМатериалы;
	ИначеЕсли УсловныйКодСчета = "19.11" Тогда
		Результат = ПС.НДСУплачиваемыйНалоговымАгентом;
	ИначеЕсли УсловныйКодСчета = "20" Тогда
		Результат = ПС.ОсновноеПроизводство;
	ИначеЕсли УсловныйКодСчета = "41.ДР" Тогда
		Результат = ПС.ДопРасходыТовары;
	ИначеЕсли УсловныйКодСчета = "60.НП" Тогда
		Результат = ПС.ОбязательстваПоНеотфактурованнымПоставкам;
	ИначеЕсли УсловныйКодСчета = "76.07.3" Тогда
		Результат = ПС.АвансыПоАренде;
	ИначеЕсли УсловныйКодСчета = "76.07.4" Тогда
		Результат = ПС.ВыкупАрендованногоИмущества;
	ИначеЕсли УсловныйКодСчета = "76.ОК" Тогда
		Результат = ПС.ТоварыКОформлениюОтчетовКомитенту;
	ИначеЕсли УсловныйКодСчета = "97.11" Тогда
		Результат = ПС.УбыткиПрошлыхЛет;
	ИначеЕсли УсловныйКодСчета = "98.05" Тогда
		Результат = ПС.ДоходыБудущихПериодовОтЦелевогоФинансированияОС;
	ИначеЕсли УсловныйКодСчета = "98.06" Тогда
		Результат = ПС.ДоходыБудущихПериодовОтЦелевогоФинансированияНМА;
	ИначеЕсли УсловныйКодСчета = "002" Тогда
		Результат = ПС.ТМЦпринятыеНаОтветственноеХранение;
	ИначеЕсли УсловныйКодСчета = "002.01" Тогда
		Результат = ПС.ТМЦнаскладах;
	ИначеЕсли УсловныйКодСчета = "002.02" Тогда
		Результат = ПС.ТМЦВПроизводстве_;
	ИначеЕсли УсловныйКодСчета = "002.02.1" Тогда
		Результат = ПС.ТМЦВПроизводстве;
	ИначеЕсли УсловныйКодСчета = "002.02.2" Тогда
		Результат = ПС.ТМЦПотребленныеВПроизводстве;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в таблицу предопределенный счет и его условный код.
//
// Параметры:
//   СчетаСУсловнымиКодами - ТаблицаЗначений
//     * Счет - ПланСчетовСсылка.Хозрасчетный
//     * УсловныйКод - Строка
//
// Пример:
//   НовыйСчет = СчетаСУсловнымиКодами.Добавить();
//   НовыйСчет.УсловныйКод = "83.11";
//   НовыйСчет.Счет = ПланСчетовСсылка.Хозрасчетный.
//
Процедура ДобавитьПредопределенныеСчета(СчетаСУсловнымиКодами) Экспорт
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "01.ЦФ", "ОСвОрганизации_ЦФ");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "02.ЦФ", "АмортизацияОС_01_ЦФ");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "10.11.3", "ИнвентарьВЭксплуатации");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "10.ДР", "ДопРасходыМатериалы");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "19.11", "НДСУплачиваемыйНалоговымАгентом");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "41.ДР", "ДопРасходыТовары");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "60.НП", "ОбязательстваПоНеотфактурованнымПоставкам");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "76.07.3", "АвансыПоАренде");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "76.07.4", "ВыкупАрендованногоИмущества");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "76.ОК", "ТоварыКОформлениюОтчетовКомитенту");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "97.11", "УбыткиПрошлыхЛет");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "98.05", "ДоходыБудущихПериодовОтЦелевогоФинансированияОС");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "98.06", "ДоходыБудущихПериодовОтЦелевогоФинансированияНМА");
	
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "002.01", "ТМЦнаскладах");
	ЗаполнениеБухгалтерскойОтчетностиИтоги.ДобавитьПредопределенныйСчет(СчетаСУсловнымиКодами, "002.02", "ТМЦВПроизводстве");

КонецПроцедуры

// Дополняет строку условных кодов счетов счетами, используемыми только в текущей конфигурации по переданным ключам.
//
// Параметры:
//	СчетаСтрокой - Строка - перечисление условных кодов счетов, разделанных запятой (например: "60.01, 60.02");
//	КлючиСчетов - Строка - перечисление ключей счетов (разделенные запятыми), по которым будут добавлены дополнительные счета в первый параметр.
//		(например: "АвансыВыданные, НеотфактурованныеПоставки").
//
Процедура ДобавитьСчета(СчетаСтрокой, КлючиСчетов) Экспорт
	
	Если ТипЗнч(КлючиСчетов) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	МассивКлючейСчетов = СтрРазделить(КлючиСчетов, ", ", Ложь);
	
	Если ТипЗнч(СчетаСтрокой) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	МассивСчетов = СтрРазделить(СчетаСтрокой, ", ");
	
	Если МассивКлючейСчетов.Найти("АвансыВыданные") <> Неопределено Тогда
		МассивСчетов.Добавить("76.07.3");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("Лизинг") <> Неопределено Тогда
		МассивСчетов.Добавить("76.07.4");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НеотфактурованныеПоставки") <> Неопределено Тогда
		МассивСчетов.Добавить("60.НП");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ОС") <> Неопределено Тогда
		МассивСчетов.Добавить("01.ЦФ");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("АмортизацияОС") <> Неопределено Тогда
		МассивСчетов.Добавить("02.ЦФ");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НалоговыйАгент") <> Неопределено Тогда
		МассивСчетов.Добавить("19.11");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ДСВПути") <> Неопределено Тогда
		МассивСчетов.Добавить("57.03");
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ТоварыКОформлениюОтчетовКомитенту") <> Неопределено Тогда
		МассивСчетов.Добавить("76.ОК");
	КонецЕсли;
	
	СчетаСтрокой = СтрСоединить(МассивСчетов, ", ");
	
КонецПроцедуры

// Дополняет строку условных кодов счетов счетами, используемыми только в текущей конфигурации по переданным ключам.
//
// Параметры:
//	МассивСчетов - Массив - массив элементов с типом "ПланСчетов.Хозрасчетный";
//	КлючиСчетов - Строка - перечисление ключей счетов (разделенные запятыми), по которым будут добавлены дополнительные счета в первый параметр.
//		(например: "АвансыВыданные, НеотфактурованныеПоставки").
//
Процедура ДобавитьСчетаВМассив(МассивСчетов, КлючиСчетов) Экспорт
	
	Если ТипЗнч(КлючиСчетов) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	МассивКлючейСчетов = СтрРазделить(КлючиСчетов, ", ", Ложь);
	
	Если ТипЗнч(МассивСчетов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивКлючейСчетов.Найти("АвансыВыданные") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("76.07.3"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("Лизинг") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("76.07.4"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НеотфактурованныеПоставки") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("60.НП"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ОС") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("01.ЦФ"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("АмортизацияОС") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("02.ЦФ"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("НалоговыйАгент") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("19.11"));
	КонецЕсли;
	Если МассивКлючейСчетов.Найти("ДСВПути") <> Неопределено Тогда
		МассивСчетов.Добавить(ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет("57.03"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗаполнения

// Инициализация переопределяемых параметров заполнения, на основании которых будут переопределяться значения показателей и расшифровки отчетов.
//
//	Параметры:
//		КонтекстВыполнения - Структура - структура параметров, использующаяся при составлении бух. отчетности. Обязательно должна содержать следующие свойства:
//			* НачалоПериодаОтчета - Дата - начало периода, по данным которого заполняется отчет;
//			* КонецПериодаОтчета - Дата - конец периода, по данным которого заполняется отчет;
//			* Организация - СправочникСсылка.Организации - организация, по данным которой заполяется отчет;
//			* ТаблицаРасшифровки - ТаблицаЗначений - таблица расшифровки значений.
//		ИмяРаздела - Строка - имя раздела, для которого переопределяются параметры;
//		НомерРаздела - Строка - номер раздела, для которого переопределяются параметры;
//		ЭтоИП - Булево - признак того, что организация, для которой происходит заполнение, является индивидуальным предпринимателем;
//		ДатаКонцаПериодаОтчета - Дата, Неопределено - дата для определения заполнения межотчетного периода.
//	Возвращаемое значение:
//		Структура - структура со следующими свойствами:
//			* Показатели - Соответствие - в данном свойстве хранятся значения переопределяемых показателей отчета;
//			* ОбщиеПараметрыРасшифровки - Структура, использующаяся при получении настройки расшифровки переопределяемых показателей, содержит следующие свойства:
//				** Организация - СправочникСсылка.Организации - организация, по данным которой заполяется отчет;
//				** НачалоПериода - Дата - начало периода, по данным которого заполняется отчет;
//				** КонецПериода - Дата - конец периода, по данным которого заполняется отчет;
//			* ТаблицаРасшифровки - ТаблицаЗначений - получается из параметра "КонтекстВыполнения";
//			* ДанныеДляЗаполнения - Структура - содержит расчитанные данные для заполнения отчета, заполняется из параметра "КонтекстВыполнения";
//			* ИмяРаздела - Строка - параметр "ИмяРаздела";
//			* ПараметрыПереопределенияСчетов - Структура - содержит данные, необходимые для переопределения счетов, содержит следующие свойства:
//				** НачалоПериода - Дата - начало периода, по данным которого заполняется отчет;
//				** КонецПериода - Дата - конец периода, по данным которого заполняется отчет;
//				** НомерРаздела - Строка - параметр "НомерРаздела";
//				** ЭтоИП - Булево - параметр "ЭтоИП".
//
Функция ИнициализироватьПереопределяемыеПараметрыЗаполнения(КонтекстВыполнения, ИмяРаздела, НомерРаздела, ЭтоИП = Неопределено, ДатаКонцаПериодаОтчета = Неопределено) Экспорт
	
	НачалоПериода = '00010101';
	КонецПериода = '00010101';
	Если КонтекстВыполнения.Свойство("КонтекстОтчета") Тогда
		Если КонтекстВыполнения.КонтекстОтчета.Свойство("НачалоПериодаОтчета") Тогда
			НачалоПериода = КонтекстВыполнения.КонтекстОтчета.НачалоПериодаОтчета;
			КонецПериода = КонтекстВыполнения.КонтекстОтчета.КонецПериодаОтчета;
		ИначеЕсли КонтекстВыполнения.КонтекстОтчета.Свойство("КонтекстСтроки") Тогда
			НачалоПериода = КонтекстВыполнения.КонтекстОтчета.КонтекстСтроки.ПроцессорПоказателя.НачалоПериода;
			КонецПериода = КонтекстВыполнения.КонтекстОтчета.КонтекстСтроки.ПроцессорПоказателя.КонецПериода;
		КонецЕсли;
	Иначе
		НачалоПериода = КонтекстВыполнения.НачалоПериодаОтчета;
		КонецПериода = КонтекстВыполнения.КонецПериодаОтчета;
	КонецЕсли;
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация",   КонтекстВыполнения.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоПериода);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода",  КонецПериода);
	
	ПараметрыПереопределенияСчетов = Новый Структура;
	ПараметрыПереопределенияСчетов.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПереопределенияСчетов.Вставить("КонецПериода",  КонецПериода);
	ПараметрыПереопределенияСчетов.Вставить("НомерРаздела",  НомерРаздела);
	Если ЭтоИП <> Неопределено Тогда
		ПараметрыПереопределенияСчетов.Вставить("ЭтоИП", ЭтоИП);
	КонецЕсли;
	ПараметрыПереопределенияСчетов.Вставить("ОрганизацияПрименяетФСБУ25",
		?(КонтекстВыполнения.Свойство("ОрганизацияПрименяетФСБУ25"), КонтекстВыполнения.ОрганизацияПрименяетФСБУ25, Ложь));

	ДанныеДляЗаполнения = ?(КонтекстВыполнения.Свойство("РассчитанныеПараметры"), КонтекстВыполнения.РассчитанныеПараметры, Новый Структура);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Показатели", Новый Соответствие);
	СтруктураПараметров.Вставить("ОбщиеПараметрыРасшифровки", ОбщиеПараметрыРасшифровки);
	СтруктураПараметров.Вставить("ТаблицаРасшифровки", КонтекстВыполнения.ТаблицаРасшифровки);
	СтруктураПараметров.Вставить("ДанныеДляЗаполнения", ДанныеДляЗаполнения);
	СтруктураПараметров.Вставить("ИмяРаздела", ИмяРаздела);
	СтруктураПараметров.Вставить("ПараметрыПереопределенияСчетов", ПараметрыПереопределенияСчетов);	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Дополняет значение показателя отчета переопределяемыми параметрами: когда значение показателя необходимо дополнить данными счетов, используемых только в текущей конфигурации.
//	На основании параметра "НаименованиеСтроки" и свойства "ПараметрыПереопределенияСчетов" параметра "ПараметрыЗаполнения" определяются какими значениями будет дополняться,
//	и если значение ранее еще не было подсчитано оно расчитывается, после чего значение показателя дополняется полученным значением.
//
//	Параметры:
//		ПараметрыЗаполнения - Структура - см. метод "ИнициализироватьПереопределяемыеПараметрыЗаполнения";
//		ЗначениеПоказателя - Число - значение, которое будет дополнено переопределяемыми знвачениями;
//		НаименованиеСтроки - Строка - строка, для которой заполняется значение показателя, на основании переданного значения определяется
//			какими переопределяемыми параметрами будет дополняться значение показателя.
//
Процедура ДополнитьЗначениеПоказателяПереопределяемымиПараметрами(ПараметрыЗаполнения, ЗначениеПоказателя, НаименованиеСтроки) Экспорт
	
	ПараметрыОбработки = ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, ПараметрыЗаполнения.ПараметрыПереопределенияСчетов);	
	
	Для каждого Параметр из ПараметрыОбработки Цикл
		Если ПараметрыЗаполнения.ДанныеДляЗаполнения.Свойство(Параметр.ИмяИсходныхДанных) Тогда
			
			ЗначениеПоказателяСчета = ПараметрыЗаполнения.Показатели.Получить(Параметр.ИдентификаторЗаполнения);
			Если ЗначениеПоказателяСчета = Неопределено Тогда
				ЗначениеПоказателяСчета = ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметр, ПараметрыЗаполнения.ДанныеДляЗаполнения);
				ПараметрыЗаполнения.Показатели.Вставить(Параметр.ИдентификаторЗаполнения, ЗначениеПоказателяСчета);
			КонецЕсли;
			
			ЗначениеПоказателя = ЗначениеПоказателя + Параметр.Знак * ЗначениеПоказателяСчета;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку расшифровки переопределяемого параметра. Вызывает для каждого переопредяемого значения метод "ДобавитьСтрокуРасшифровки"
//	общего модуля "ЗаполнениеРасшифровкаРегламентированнойОтчетности", перед этим получая все необходимые данные для переопределяемого значения.
//
//	Параметры:
//		ПараметрыЗаполнения - Структура - см. метод "ИнициализироватьПереопределяемыеПараметрыЗаполнения";
//		НаименованиеСтроки - Строка - строка, для которой заполняется значение показателя, на основании переданного значения определяется
//			какими переопределяемыми параметрами будет дополняться значение показателя;
//		ИмяОбластиПоказателя - Строка - имя параметра в макете, по которому будет заполняться расшифровка;
//		НаименованиеПоказателя - Строка - если требуется переопределить наименование.
//
Процедура ДобавитьСтрокуРасшифровкиПереопределяемогоПараметра(ПараметрыЗаполнения, НаименованиеСтроки, ИмяОбластиПоказателя, НаименованиеПоказателя = "") Экспорт
	
	ПараметрыОбработки = ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, ПараметрыЗаполнения.ПараметрыПереопределенияСчетов);
	
	Для каждого Параметр из ПараметрыОбработки Цикл
		
		Если ПараметрыЗаполнения.ДанныеДляЗаполнения.Свойство(Параметр.ИмяИсходныхДанных) Тогда
		
			ЗначениеПоказателяСчета = ПараметрыЗаполнения.Показатели.Получить(Параметр.ИдентификаторЗаполнения);
			Если ЗначениеПоказателяСчета = Неопределено Тогда
				ЗначениеПоказателяСчета = ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметр, ПараметрыЗаполнения.ДанныеДляЗаполнения);
				ПараметрыЗаполнения.Показатели.Вставить(Параметр.ИдентификаторЗаполнения, ЗначениеПоказателяСчета);
			КонецЕсли;
			
			Если Параметр.ИмяИсходныхДанных = "СальдоИОборотыПоСчетам" Тогда
				Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет(Параметр.Счет), "Код");
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчету(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
				НаименованиеСлагаемого = "!" + Параметр.ФункцияПолученияДанных + " " + Код;
			ИначеЕсли Параметр.ИмяИсходныхДанных = "ОборотыМеждуСчетами" Тогда
				Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет(Параметр.Счет), "Код");
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиАнализаСчета(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Параметр.Счет, Параметр.КорСчет);
				НаименованиеСлагаемого = "!" + Параметр.ФункцияПолученияДанных + " " + Код + " " + Код;
			ИначеЕсли Параметр.ИмяИсходныхДанных = "Обороты91ПоПереоценкеВнеоборотныхАктивов" Тогда
				ИмяВПДР = "ПереоценкаВнеоборотныхАктивов";
				Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиАнализаСчетаВПДР(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Параметр.Счет, Параметр.КорСчет, ИмяВПДР);
				ШаблонСлогаемого = "Оборот по дебету счета %1 %2 в корреспонденции со счетом %3";
				ОписаниеОбъектовВПДР = ЗаполнениеБухгалтерскойОтчетности.ОписаниеОбъектовВПДР(ИмяВПДР);
				НаименованиеСлагаемого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСлогаемого, Параметр.Счет, ОписаниеОбъектовВПДР, Параметр.КорСчет);
			Иначе
				ШаблонСлогаемого = "%1 на конец периода по %2 счета %3, развернутое по субконто %4";
				ВидСчетаФункции = ?(Параметр.ФункцияПолученияДанных = "СКК" Или Параметр.ФункцияПолученияДанных = "СККР", ВидДвиженияБухгалтерии.Кредит, ВидДвиженияБухгалтерии.Дебет);
				Если Параметр.ВидСчета = ВидСчета.Пассивный Тогда
					ВидСчетаСтрокой = НСтр("ru = 'кредиту';
											|en = 'credit'");
					ВидСальдоСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'Отрицательное сальдо';
																								|en = 'Negative balance'"), НСтр("ru = 'Положительное сальдо';
																																	|en = 'Positive balance'"));
				ИначеЕсли Параметр.ВидСчета = ВидСчета.Активный Тогда
					ВидСчетаСтрокой = НСтр("ru = 'дебету';
											|en = 'debit'");
					ВидСальдоСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'Положительное сальдо';
																								|en = 'Positive balance'"), НСтр("ru = 'Отрицательное сальдо';
																																	|en = 'Negative balance'"));
				Иначе
					ВидСчетаСтрокой = ?(ВидСчетаФункции = ВидДвиженияБухгалтерии.Дебет, НСтр("ru = 'дебету';
																							|en = 'debit'"), НСтр("ru = 'кредиту';
																													|en = 'credit'"));
					ВидСальдоСтрокой = НСтр("ru = 'Сальдо';
											|en = 'Balance'");
				КонецЕсли; 
				ВидСубконтоСтрокой = "";
				Настройки = Неопределено;
				Если Параметр.ИмяИсходныхДанных = "СиО_КонтрагентыДоговоры" Тогда
					Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуКонтрагентыДоговорыРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
					ВидСубконтоСтрокой = """Контрагенты"", ""Договоры""";
				ИначеЕсли Параметр.ИмяИсходныхДанных = "СиО_ВидыПлатежей" Тогда
					Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуВидыПлатежейРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
					ВидСубконтоСтрокой = """Виды платежей в бюджет (фонды)""";
				ИначеЕсли Параметр.ИмяИсходныхДанных = "СиО_Работники" Тогда
					Настройки = ЗаполнениеБухгалтерскойОтчетности.НастройкиОСВПоСчетуРаботникиРазвернуто(ПараметрыЗаполнения.ОбщиеПараметрыРасшифровки, Счет(Параметр.Счет));
					ВидСубконтоСтрокой = """Работники организации"""; 
				КонецЕсли;
				НаименованиеСлагаемого = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСлогаемого,
					ВидСальдоСтрокой, ВидСчетаСтрокой, Параметр.Счет, ВидСубконтоСтрокой);
				Если Не Параметр.ВидСчета = ВидСчета.АктивноПассивный Тогда
					НаименованиеСлагаемого = СтрЗаменить(НаименованиеСлагаемого, "развернутое ", "");
				КонецЕсли;
			КонецЕсли;
			
			НаименованиеПоказателя = ?(Параметр.ВыводитьНаименование И ЗначениеЗаполнено(НаименованиеПоказателя), НаименованиеПоказателя, "");
			ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
				ПараметрыЗаполнения.ТаблицаРасшифровки,
				ИмяОбластиПоказателя,
				НаименованиеПоказателя,
				?(Параметр.Знак = 1, "+", "-"),
				НаименованиеСлагаемого,
				Параметр.Знак * ЗначениеПоказателяСчета,
				ПараметрыЗаполнения.ИмяРаздела,
				Настройки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает счета расходов, используемые в текущей конфигурации.
// 
// Возвращаемое значение:
//  Массив из ПланСчетовСсылка.Хозрасчетный - предопределенные значения счетов расходов 
Функция ПредопределенныеСчетаРасходов() Экспорт
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
	Возврат Новый ФиксированныйМассив(СчетаРасходов);
	
КонецФункции

// Переопределяет текст запроса с учетом особенностей текущей конфигурации.
//
//	Параметры:
//		ИсходныйЗапрос - Запрос;
//
Процедура УстановитьПолныйТекстЗапроса(ИсходныйЗапрос) Экспорт
	
	ПереопределитьИсточникиДанных(ИсходныйЗапрос.Текст);
	
	МассивТекстовЗапроса = Новый Массив;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
		ИсходныйЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ПрочиеДоходыИРасходыПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ПрочиеДоходыИРасходыПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ПрочиеДоходыИРасходы());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_РасходыБудущихПериодовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_РасходыБудущихПериодовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_РасходыБудущихПериодов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДоговорыКонтрагентовПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДоговорыКонтрагентовПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДоговорыКонтрагентов());
		Если НЕ ИсходныйЗапрос.Параметры.Свойство("ВалютаРеглУчета") Тогда
			ИсходныйЗапрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ПереводыВКраткосрочныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ПереводыВКраткосрочныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ПереводыВКраткосрочные());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ВсеСФПолученныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ВсеСФПолученныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ВсеСФПолученные(ИсходныйЗапрос));
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ВсеСФВыданныеПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ВсеСФВыданныеПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ВсеСФВыданные(ИсходныйЗапрос));
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДанныеКонтрагентов") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДанныеКонтрагентов") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДанныеКонтрагентов());
	КонецЕсли;
	
	Если ИсходныйЗапрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_ДокументыМодернизацииПереопределяемый") = Неопределено
		И СтрНайти(ИсходныйЗапрос.Текст, "ВТ_ДокументыМодернизацииПереопределяемый") <> 0 Тогда
		МассивТекстовЗапроса.Добавить(ТекстЗапросаВТ_ДокументыМодернизации());
	КонецЕсли;
	
	Если МассивТекстовЗапроса.Количество() Тогда
		ТекстИсходногоЗапроса = ИсходныйЗапрос.Текст;
		ИсходныйЗапрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		ИсходныйЗапрос.Выполнить();
		ИсходныйЗапрос.Текст = ТекстИсходногоЗапроса;
	КонецЕсли;
	
КонецПроцедуры

// Получение предопределенного элемента. Требует переопределения, так как некоторые предопределенные элементы могут быть недоступны в текущей конфигурации.
// 
// Параметры:
//  ИмяПредопределенногоЭлемента - Строка - Имя предопределенного элемента, используемое в функции ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент().
// 
// Возвращаемое значение:
//  ЛюбаяСсылка, Массив из ПланВидовХарактеристикСсылка, Булево - Любые значения предопределенных элементов.
//
Функция ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента) Экспорт
	
	Если ИмяПредопределенногоЭлемента = "Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницы" Тогда
		МассивВозврата = Новый Массив;
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиДоходов.КурсовыеРазницы"));
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиРасходов.КурсовыеРазницы"));
		Возврат МассивВозврата;
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "Справочник.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты" Тогда
		МассивВозврата = Новый Массив;
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиДоходов.ДоходыПриКонвертацииВалюты"));
		МассивВозврата.Добавить(ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("ПланВидовХарактеристик.СтатьиРасходов.РасходыПриКонвертацииВалюты"));
		Возврат МассивВозврата;
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "Перечисление.ЭлементыЗатрат" Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПредопределенногоЭлемента, "Перечисление.ЭлементыЗатрат") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если ИмяПредопределенногоЭлемента = "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	КонецЕсли;
	
	Если ИмяПредопределенногоЭлемента = "ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Учредители" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ИмяПредопределенногоЭлемента);
		
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеБухгалтерскойОтчетностиПоказатели

// Возвращает признак учета расходов по элементам затрат организацией в течении указанного периода.
//
// Параметры:
//   НачалоПериодаОтчета - Дата - дата начала периода, за который проводится проверка вида учета расходов;
//   КонецПериодаОтчета - Дата - дата конца периода, за который проводится проверка вида учета расходов;
//   Организация - СправочникСсылка.Организация - организация, для которой нужно получить признак.
//
// Возвращаемое значение:
//   Булево - Истина, если в течении проверяемого периода организация вела учет расходов
//     по элементам затрат.
//
// Пример реализации:
//   Возврат ЭлементыЗатратНастройкаПараметровУчета.РасходыУчитываютсяПоЭлементамЗатрат(
//     НачалоПериодаОтчета, КонецПериодаОтчета, Организация);
//
Функция РасходыУчитываютсяПоЭлементамЗатрат(НачалоПериодаОтчета, КонецПериодаОтчета, Организация) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Заполняет описание структуры отчета о целевом использовании полученных средств - состав ее граф и строк
//
// Параметры:
//  Строки		 - Строка - возвращаемый параметр - перечень четырехзначных номеров строк отчета, разделенных запятыми
//  Упрощенная	 - Булево - Истина для упрощенной отчетности (содержащей сокращенный перечень строк)
//
Процедура ЗаполнитьОписаниеСтрокОЦИС(Строки, Упрощенная) Экспорт
	
	
КонецПроцедуры

// Предоставляет данные для заполнения отчета об использовании целевых поступивших средств.
// Данные собираются по одной организации, без учета входящих в нее филиалов.
//
// Параметры:
//  ПоказателиОтчета  - Соответствие - возвращаемый параметр, значения для заполнения строк отчета
//                      * Ключ - Строка - четырехсимвольный код строки
//                      * Значение - Число - значение показателя
//  РасшифровкаОтчета - ТаблицаЗначений - см. ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйРасшифровка
//                      В таблице
//                       - в поле ИмяПоказателя указывается четырехсимвольный код строки
//                       - не заполняется поле ИмяРаздела, определяемое кодом строки отчета
//  НачалоПериода - Дата (без времени) - начало периода отчета
//  КонецПериода  - Дата (без времени) - конец периода отчета
//  Организация   - СправочникСсылка.Организации - организация, по которой собираются данные
//  Упрощенная    - Булево - Истина для упрощенной отчетности (с меньшей детализацией)
//
Процедура ПолучитьДанныеЗаполненияОЦИС(ПоказателиОтчета, РасшифровкаОтчета, НачалоПериода, КонецПериода, Организация, Упрощенная) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ДополненияАлгоритмов

Процедура ДополнитьАлгоритмыБО2019Кв1Баланс(Алгоритмы, ПараметрыЗаполнения) Экспорт 
	
	ДополнитьАлгоритмыБО2019Кв1БалансERP(Алгоритмы, ПараметрыЗаполнения);

КонецПроцедуры

Процедура ДополнитьБО2019Кв1Баланс(КонтекстДополнения, ИмяОбластиПоказателя, ЗначениеПоказателя) Экспорт
	
КонецПроцедуры

Процедура ДополнитьУБО2015Кв1Баланс(КонтекстДополнения, ИмяОбластиПоказателя, ЗначениеПоказателя) Экспорт
	
КонецПроцедуры

Процедура ДополнитьСпособыОбработкиСчетов(СпособыОбработки, СпособыОбработкиСчетов) Экспорт
	
КонецПроцедуры

Процедура ДополнитьБО2011Кв4Пояснения5_Строки5510и5530(КонтекстСтроки) Экспорт
	
КонецПроцедуры

Процедура ДополнитьБО2011Кв4Пояснения5_Строки5513и5533(КонтекстСтроки) Экспорт
	
КонецПроцедуры

Процедура ДополнитьБО2011Кв4Пояснения5_Строки5560и5580(КонтекстСтроки) Экспорт
	
КонецПроцедуры

Процедура ДополнитьБО2011Кв4Пояснения5_Строки5566и5586(КонтекстСтроки) Экспорт
	
КонецПроцедуры

Процедура УстановитьТекстЗапросаПоПереопределяемымТаблицамПояснения51Краткосрочная(ТекстЗапроса) Экспорт
	
КонецПроцедуры

Процедура ДополнитьПараметрыЗапросаПояснения51Краткосрочная(Запрос) Экспорт
	
КонецПроцедуры

Процедура УстановитьТекстЗапросаПоПереопределяемымТаблицамПояснения53Краткосрочная(ТекстЗапроса) Экспорт
	
КонецПроцедуры

Процедура ДополнитьПараметрыЗапросаПояснения53Краткосрочная(Запрос) Экспорт
	
КонецПроцедуры

Процедура УстановитьНаименованиеСоставляющейДополнительногоСчета(НаименованиеСоставляющейДополнительногоСчета,
	ПараметрыСоставляющих, ИмяТаблицыСоставляющих, СчетСоставляющей) Экспорт
	
КонецПроцедуры

// Дополняет алгоритмы ОтчетБухОтчетностьФормаОтчета2011Кв4
// 
// Параметры:
//  ПроцессорПоказателя - см. ЗаполнениеБухгалтерскойОтчетностиОсновная
//  НаименованиеСтроки - строка
//  Раздел - Неопределено, Строка - Раздел баланса
Процедура ДополнитьАлгоритмыБО2011Кв4Баланс(ПроцессорПоказателя, НаименованиеСтроки, Раздел = Неопределено) Экспорт
	
	ДополнитьАлгоритмыБО2011Кв4БалансERP(ПроцессорПоказателя, НаименованиеСтроки, Раздел);
	
КонецПроцедуры

#КонецОбласти

#Область УчетнаяПолитика

Процедура ОпределитьУчетнуюПолитикуПрименяетсяФСБУ25(ПрименяетсяФСБУ25, Организация, КонецПериода) Экспорт
	
	ПрименяетсяФСБУ25 = РегламентированнаяОтчетность.ПрименяетсяФСБУ25(Организация, КонецПериода);
	
КонецПроцедуры

Процедура ОпределитьУчетнуюПолитикуПрименяетсяУСН(ПрименяетсяУСН, Организация, КонецПериода) Экспорт
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Организация, КонецПериода);
	
КонецПроцедуры

Процедура ОпределитьУчетнуюПолитикуПлательщикЕНВД(ПлательщикЕНВД, Организация, КонецПериода) Экспорт
	
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация, КонецПериода)
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовВременныхТаблиц

Функция ТекстЗапросаВТ_ДокументыМодернизации()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МодернизацияОС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДокументыМодернизацииПереопределяемый
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС
	|ГДЕ
	|	МодернизацияОС.СобытиеОС.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МодернизацияОС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МодернизацияОС2_4 КАК МодернизацияОС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_РасходыБудущихПериодов() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка,
	|	СтатьиРасходов.ВидАктива КАК ВидАктива
	|ПОМЕСТИТЬ ВТ_РасходыБудущихПериодовПереопределяемый
	|ИЗ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсERP

Процедура ПереопределитьЗапросСтруктураНДСвДДС(Запрос) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	|
	|	ВЫБОР КОГДА НЕ ПорядокОтраженияДенежныхСредств.СчетУчета ЕСТЬ NULL ТОГДА
	|			ПорядокОтраженияДенежныхСредств.СчетУчета
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДенежныеСредства) = ТИП(Справочник.КассыККМ) ТОГДА
	|			ВЫБОР КОГДА ДанныеРегистра.ВалютаПлатежа = &ВалютаРегУчета ТОГДА
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|			КОНЕЦ
	|	КОНЕЦ КАК СчетДДС,
	|
	|	0 КАК ДО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииПоступления) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДО_НДС,
	|
	|	0 КАК КО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КО_НДС
	|	
	|ПОМЕСТИТЬ ОборотыНДС
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент.Обороты(&НачПериода, &КонПериода, , Организация = &Организация) КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияДенежныхСредств
	|			ПО ПорядокОтраженияДенежныхСредств.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства), ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу))
	|				И ПорядокОтраженияДенежныхСредств.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ПорядокОтраженияДенежныхСредств.АналитикаУчета = ДанныеРегистра.ДенежныеСредства
	|				И ПорядокОтраженияДенежныхСредств.МестоУчета = НЕОПРЕДЕЛЕНО
	|	
	|ГДЕ
	|	НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	|
	|	ЕСТЬNULL(ПорядокОтраженияДенежныхСредств.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетДДС,
	|
	|	0 КАК ДО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииПоступления) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДО_НДС,
	|
	|	0 КАК КО,
	|	ВЫБОР КОГДА ДанныеРегистра.ХозяйственнаяОперация В (&ОперацииСписания) ТОГДА
	|		ДанныеРегистра.СуммаНДСРеглОборот
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КО_НДС
	|
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы.Обороты(&НачПериода, &КонПериода, , Организация = &Организация) КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК ПорядокОтраженияДенежныхСредств
	|			ПО ПорядокОтраженияДенежныхСредств.ВидСчета В (ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ДенежныеСредства), ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПродажиПоЭквайрингу))
	|				И ПорядокОтраженияДенежныхСредств.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				И ПорядокОтраженияДенежныхСредств.АналитикаУчета = ДанныеРегистра.ДенежныеСредства
	|				И ПорядокОтраженияДенежныхСредств.МестоУчета = НЕОПРЕДЕЛЕНО
	|	
	|ГДЕ
	|	НЕ ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств ЕСТЬ NULL
	|	И ДанныеРегистра.СтатьяДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийДенежныхСредств.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ
	|	ОборотыНДС.ВидДДС          КАК ВидДДС,
	|	ОборотыНДС.СчетДДС         КАК СчетДДС,
	|	СУММА(ОборотыНДС.ДО)       КАК ДО,
	|	СУММА(ОборотыНДС.ДО_НДС)   КАК ДО_НДС,
	|	СУММА(ОборотыНДС.КО)       КАК КО,
	|	СУММА(ОборотыНДС.КО_НДС)   КАК КО_НДС
	|
	|ИЗ
	|	ОборотыНДС КАК ОборотыНДС
	|	
	|ГДЕ
	|	ОборотыНДС.СчетДДС В (&СчетаДДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыНДС.ВидДДС,
	|	ОборотыНДС.СчетДДС
	|";
	
	ОперацииПоступления = Новый Массив;
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации);
	ОперацииПоступления.Добавить(Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств);
	
	ОперацииСписания = Новый Массив;
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ОперацииСписания.Добавить(Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	
	Запрос.УстановитьПараметр("ОперацииПоступления", ОперацииПоступления);
	Запрос.УстановитьПараметр("ОперацииСписания", ОперацииСписания);
	
	Запрос.Текст = ТекстЗапроса;
	
КонецПроцедуры

Процедура ПереопределитьЗапросСтруктураДДС(Запрос) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетДДС,
	|	ХозрасчетныйОбороты.Субконто1 КАК СтатьяДДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_Хозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В (&СчетаДДС), &СубконтоСтатьиДДС, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетДДС,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента) КАК СтатьяДДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериода, &КонПериода, Период, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)), &СубконтоДоговорыЭквайринга, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Хозрасчетный.СчетДДС КАК СчетДДС,
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДДС,
	|	СУММА(ВТ_Хозрасчетный.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ВТ_Хозрасчетный.СуммаОборотКт) КАК СуммаОборотКт
	|ИЗ
	|	ВТ_Хозрасчетный КАК ВТ_Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ПО ВТ_Хозрасчетный.СтатьяДДС = СтатьиДвиженияДенежныхСредств.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Хозрасчетный.СчетДДС,
	|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СубконтоДоговорыЭквайринга", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоговорыЭквайринга);
	
КонецПроцедуры

#КонецОбласти

Процедура ОпределитьЗасчитанныеНалогиЕНС(ЗасчитанныеНалоги, Организация, ДатаНачала, ДатаОкончания) Экспорт
	
	// НДФЛ.
	ЗасчитанныеНалоги.НДФЛ = 0;
	
	ВидыНалогов = НалоговыеПлатежиНДФЛОплатыТруда();

	ЗасчитанныеНалоги.НДФЛ = ЗасчитанныеНалоги.НДФЛ
		+ ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
			Организация, ДатаНачала, ДатаОкончания, ВидыНалогов).Итог("Сумма");
	
	// Налог на прибыль.
	ВидыНалогов = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговНаПрибыль();
	
	ЗасчитанныеНалоги.НалогНаПрибыль = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
		Организация, ДатаНачала, ДатаОкончания, ВидыНалогов).Итог("Сумма");
	
	// Страховые взносы.
	ВидыНалогов = ЕдиныйНалоговыйСчетПовтИсп.ВидыНалоговСтраховыеВзносы();
	
	ЗасчитанныеНалоги.СтраховыеВзносы = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
		Организация, ДатаНачала, ДатаОкончания, ВидыНалогов).Итог("Сумма");
	
	// Налог на прибыль с дивидендов.
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НалогНаПрибыль_НалоговыйАгент);
	
	ЗасчитанныеНалоги.НалогНаПрибыльСДивидендов = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
		Организация, ДатаНачала, ДатаОкончания, ВидыНалогов).Итог("Сумма");
	
	// НДФЛ с дивидендов.
	
	ВидыНалогов = НалоговыеПлатежиНДФЛДивиденды();
	ЗасчитанныеНалоги.НДФЛСДивидендов = ЕдиныйНалоговыйСчет.ЗачтенныеУплатыНалоговЗаПериод(
		Организация, ДатаНачала, ДатаОкончания, ВидыНалогов).Итог("Сумма");
	
КонецПроцедуры

// Налоговые платежи НДФЛОплаты труда.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыНалоговВзносов -
Функция НалоговыеПлатежиНДФЛОплатыТруда() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛ);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛСПревышения);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛ_ИП);
	
	Возврат ВидыНалогов;
	
КонецФункции

// Налоговые платежи НДФЛО дивиденды.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыНалоговВзносов -
Функция НалоговыеПлатежиНДФЛДивиденды() Экспорт
	
	ВидыНалогов = Новый Массив;
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛДивидендыСПревышения);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛДивиденды);
	ВидыНалогов.Добавить(Перечисления.ТипыНалогов.НДФЛДивидендыСотрудникам);
	
	Возврат ВидыНалогов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыERP

Процедура ПереопределитьИсточникиДанных(ТекстЗапроса)
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДоговорыКонтрагентовПереопределяемый", "ВТ_ДоговорыКонтрагентовПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРасходыБудущихПериодовПереопределяемый", "ВТ_РасходыБудущихПериодовПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаПрочиеДоходыИРасходыПереопределяемый", "ВТ_ПрочиеДоходыИРасходыПереопределяемый");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДокументыМодернизацииПереопределяемый", "ВТ_ДокументыМодернизацииПереопределяемый");
	
КонецПроцедуры

Функция ПараметрыОбработкиПереопределяемыхСчетовПоНаименованиюСтроки(НаименованиеСтроки, Параметры)
	
	Результат = Новый Массив;
	
	Если НаименованиеСтроки = "Кредиторская задолженность" Тогда
		Если Не Параметры.ОрганизацияПрименяетФСБУ25 Тогда
			ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", "СККР");
			Результат.Добавить(ПараметрыПоказателя);
		КонецЕсли;	
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", "СККР");
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "Дебиторская задолженность" Или НаименованиеСтроки = "П00001000051230" Или НаименованиеСтроки = "П00001000041230" Тогда
		Если Не Параметры.ОрганизацияПрименяетФСБУ25 Тогда
			ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", "СКДР");
			Результат.Добавить(ПараметрыПоказателя);
			ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.3", "СальдоИОборотыПоСчетам", "СКД");
			Результат.Добавить(ПараметрыПоказателя);
		КонецЕсли;
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", "СКДР");
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "Расчеты с разными дебиторами и кредиторами" Тогда
		Если Не Параметры.ОрганизацияПрименяетФСБУ25 Тогда
			ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.4", "СиО_КонтрагентыДоговоры", ?(Параметры.НомерРаздела = "Раздел2", "СКДР", "СККР"));
			Результат.Добавить(ПараметрыПоказателя);
		КонецЕсли;
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("60.НП", "СиО_КонтрагентыДоговоры", ?(Параметры.НомерРаздела = "Раздел2", "СКДР", "СККР"));
		Результат.Добавить(ПараметрыПоказателя);
	КонецЕсли;
	
	Если НаименованиеСтроки = "12301" И Не Параметры.ОрганизацияПрименяетФСБУ25 Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("76.07.3", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	КонецЕсли;
	
	Если Параметры.КонецПериода >= '2012-01-01' И НаименованиеСтроки = "Основные средства" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК", -1);
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "Основные средства в организации" ИЛИ НаименованиеСтроки = "Материальные внеоборотные активы" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК", -1);
		Результат.Добавить(ПараметрыПоказателя);

	ИначеЕсли НаименованиеСтроки = "П000100520004" ИЛИ НаименованиеСтроки = "П000100521004" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СНД");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520005" ИЛИ НаименованиеСтроки = "П000100521005" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СНК");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520006" ИЛИ НаименованиеСтроки = "П000100521006" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "08");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520007" ИЛИ НаименованиеСтроки = "П000100521007" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.09", "ОборотыМеждуСчетами", "ОБ", 1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);

	ИначеЕсли НаименованиеСтроки = "П000100520008" ИЛИ НаименованиеСтроки = "П000100521008" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "01.09");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520009" ИЛИ НаименованиеСтроки = "П000100521009" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "КО");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", -1, "02");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", -1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520010" ИЛИ НаименованиеСтроки = "П000100521010" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "ОборотыМеждуСчетами", "ОБ", 1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", -1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "01.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520011" ИЛИ НаименованиеСтроки = "П000100521011" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("83.01.1", "ОборотыМеждуСчетами", "ОБ", 1, "02.ЦФ", Истина);
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "ОборотыМеждуСчетами", "ОБ", -1, "83.01.1");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("91.02", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", 1, "02.ЦФ");
		Результат.Добавить(ПараметрыПоказателя);
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "Обороты91ПоПереоценкеВнеоборотныхАктивов", "ОБ", -1, "91.01");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520012" ИЛИ НаименованиеСтроки = "П000100521012" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("01.ЦФ", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "П000100520013" ИЛИ НаименованиеСтроки = "П000100521013" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("02.ЦФ", "СальдоИОборотыПоСчетам", "СКК");
		Результат.Добавить(ПараметрыПоказателя);

	ИначеЕсли НаименованиеСтроки = "Налог на добавленную стоимость по приобретенным ценностям" Или НаименованиеСтроки = "П00001000051220" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("19.11", "СальдоИОборотыПоСчетам", "СКД", -1);
		Результат.Добавить(ПараметрыПоказателя);
		
	ИначеЕсли НаименованиеСтроки = "Прочие оборотные активы" Или НаименованиеСтроки = "П00001000051260" Тогда
		
		ПараметрыПоказателя = ИнициализироватьПараметрыПоказателя("19.11", "СальдоИОборотыПоСчетам", "СКД");
		Результат.Добавить(ПараметрыПоказателя);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаВТ_ПрочиеДоходыИРасходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Доходы.Ссылка КАК Ссылка,
	|	Доходы.ВидПрочихДоходовИРасходов КАК ВидПрочихДоходовИРасходов
	|ПОМЕСТИТЬ ВТ_ПрочиеДоходыИРасходыПереопределяемый
	|ИЗ ПланВидовХарактеристик.СтатьиДоходов КАК Доходы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расходы.Ссылка КАК Ссылка,
	|	Расходы.ВидПрочихДоходовИРасходов
	|ИЗ ПланВидовХарактеристик.СтатьиРасходов КАК Расходы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДоговорыКонтрагентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ПОМЕСТИТЬ ВТ_ДоговорыКонтрагентовПереопределяемый
	|ИЗ Справочник.ДоговорыКонтрагентов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.ОрганизацияПолучатель КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	Договоры.УстановленСрокОплаты КАК УстановленСрокОплаты,
	|	Договоры.СрокОплаты КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыМеждуОрганизациями КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	ВЫБОР КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Краткосрочный) ТОГДА 100
	|	КОГДА Договоры.СрокДней = 0 И Договоры.ТипСрочности = ЗНАЧЕНИЕ(Перечисление.ТипыСрочностиКредитовИДепозитов.Долгосрочный) ТОГДА 400
	|	ИНАЧЕ Договоры.СрокДней КОНЕЦ КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаПоследнегоПлатежа КАК СрокДействия
	|ИЗ Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Контрагент КАК Владелец,
	|	ВЫБОР
	|		КОГДА &ВалютаРеглУчета <> Договоры.ВалютаВзаиморасчетов
	|				И НЕ Договоры.ОплатаВВалюте
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ИСТИНА КАК УстановленСрокОплаты,
	|	400 КАК СрокОплаты,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Номер КАК Номер,
	|	Договоры.Дата КАК Дата,
	|	Договоры.ДатаОкончанияДействия КАК СрокДействия
	|ИЗ Справочник.ДоговорыАренды КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ПереводыВКраткосрочные()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК Счет,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка) КАК ЦенныеБумаги
	|ПОМЕСТИТЬ ВТ_ПереводыВКраткосрочныеПереопределяемый
	|ГДЕ
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ВсеСФПолученные(ИсходныйЗапрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК СФПолученный,
	|	КлючиРеестраДокументов.Ключ КАК Контрагент,
	|	ДанныеРеестра.Договор
	|ПОМЕСТИТЬ ВТ_ВсеСФПолученныеПереопределяемый
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаПоНДСАвансов), &СубконтоКонтрагентыСФПолученные, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО ХозрасчетныйОстаткиИОбороты.Организация = ДанныеРеестра.Организация
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ДанныеРеестра.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|		ПО ДанныеРеестра.Организация = КлючиРеестраДокументов.Организация
	|			И ДанныеРеестра.Контрагент = КлючиРеестраДокументов.Ссылка
	|ГДЕ
	|	КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Организации ИЛИ КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ВсеСФВыданные(ИсходныйЗапрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК СФВыданный,
	|	КлючиРеестраДокументов.Ключ КАК Контрагент,
	|	ДанныеРеестра.Договор
	|ПОМЕСТИТЬ ВТ_ВсеСФВыданныеПереопределяемый
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаПоНДСАвансов), &СубконтоКонтрагентыСФВыданные, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|		ПО ХозрасчетныйОстаткиИОбороты.Организация = ДанныеРеестра.Организация
	|			И ХозрасчетныйОстаткиИОбороты.Субконто2 = ДанныеРеестра.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестраДокументов
	|		ПО ДанныеРеестра.Организация = КлючиРеестраДокументов.Организация
	|			И ДанныеРеестра.Контрагент = КлючиРеестраДокументов.Ссылка
	|ГДЕ
	|	КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Организации ИЛИ КлючиРеестраДокументов.Ключ ССЫЛКА Справочник.Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТ_ДанныеКонтрагентов()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка КАК Ссылка,
	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	|	ДанныеКонтрагентов.КПП КАК КПП
	|ПОМЕСТИТЬ ВТ_ДанныеКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	ДанныеКонтрагентов.КПП
	|ИЗ
	|	Справочник.Организации КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Ссылка,
	|	ДанныеКонтрагентов.ИНН,
	|	""""
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ДанныеКонтрагентов
	|ГДЕ
	|	НЕ ДанныеКонтрагентов.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьАлгоритмыБО2019Кв1БалансERP(Алгоритмы, ПараметрыЗаполнения)
	
#Область Строка1150
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("- СКК 02.ЦФ"), "1150");
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКД 01.ЦФ"), "11501", "1150");
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("- СКК 02.ЦФ"), "11501", "1150");
#КонецОбласти
	
#Область Строка1220
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("- СКД 19.11"), "1220");
#КонецОбласти
	
#Область Строка1230
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККО_КонтрагентыДоговоры 60.НП"),       "1230");
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКД 76.ОК"),                            "1230");
	Если Не ПараметрыЗаполнения.ПрименяетсяФСБУ25 Тогда
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКДР_КонтрагентыДоговоры 76.07.4"), "1230");
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКД 76.07.3"),                      "1230");
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКД 76.07.3"),                      "12301", "1230");
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКДР_КонтрагентыДоговоры 76.07.4"), "12308", "1230");
	КонецЕсли;
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККО_КонтрагентыДоговоры 60.НП"),       "12308", "1230");
#КонецОбласти

#Область Строка1260
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКД 19.11"), "1260");
#КонецОбласти

#Область Строка1520
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККП_КонтрагентыДоговоры 60.НП"),       "1520");
	ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СКК 76.ОК"),                            "1520");
	Если Не ПараметрыЗаполнения.ПрименяетсяФСБУ25 Тогда
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККР_КонтрагентыДоговоры 76.07.4"), "1520");
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККР_КонтрагентыДоговоры 76.07.4"), "15208", "1520");
		ДополнитьАлгоритмы(Алгоритмы, Составляющая("+ СККП_КонтрагентыДоговоры 60.НП"),   "15208", "1520");
	КонецЕсли;
#КонецОбласти

КонецПроцедуры

Процедура ДополнитьАлгоритмыБО2011Кв4БалансERP(ПроцессорПоказателя, НаименованиеСтроки, Раздел)
	
	Если НаименованиеСтроки = "Основные средства" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКК 02.ЦФ");
	ИначеЕсли НаименованиеСтроки = "Основные средства в организации" Тогда 
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКД 01.ЦФ");
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "- СКК 02.ЦФ");
	ИначеЕсли НаименованиеСтроки = "Налог на добавленную стоимость по приобретенным ценностям" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "- СКД 19.11");
	ИначеЕсли НаименованиеСтроки = "Дебиторская задолженность" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКДР_КонтрагентыДоговоры 76.07.4");
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКД 76.07.3");
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККО_КонтрагентыДоговоры 60.НП");
	ИначеЕсли НаименованиеСтроки = "Расчеты с разными дебиторами и кредиторами" Тогда
		Если Раздел = "Раздел5" Тогда
			ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККР_КонтрагентыДоговоры 76.07.4");
			ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККО_КонтрагентыДоговоры 60.НП");
		Иначе
			ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКДР_КонтрагентыДоговоры 76.07.4");
			ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККО_КонтрагентыДоговоры 60.НП");
		КонецЕсли;
	ИначеЕсли НаименованиеСтроки = "Прочие оборотные активы" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СКД 19.11");
	ИначеЕсли НаименованиеСтроки = "Кредиторская задолженность" Тогда
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККР_КонтрагентыДоговоры 76.07.4");
		ЗаполнениеБухгалтерскойОтчетностиОсновная.УчестьСоставляющую(ПроцессорПоказателя, "+ СККП_КонтрагентыДоговоры 60.НП");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ЗначениеПоказателяСчетаПоПараметрамОбработки(Параметры, ДанныеДляЗаполнения)
	
	Данные = ДанныеДляЗаполнения[Параметры.ИмяИсходныхДанных];
	Если Параметры.ФункцияПолученияДанных = "СКК" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКК(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СКД" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКД(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СКДР" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СКДР(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СККР" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СККР(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СНД" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СНД(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "СНК" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.СНК(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "ОБ" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.ОБ(Параметры.Счет, Параметры.КорСчет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "ДО" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.ДО(Параметры.Счет, Данные);
	ИначеЕсли Параметры.ФункцияПолученияДанных = "КО" Тогда
		Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.КО(Параметры.Счет, Данные);
	Иначе
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

Функция ИнициализироватьПараметрыПоказателя(Счет, ИмяДанных, ИмяВызываемойФункции, Знак = 1, КорСчет = "", ВыводитьНаименование = Ложь)
	
	СтруктураВозврата = Новый Структура;
	ИмяПоказателя = ИмяВызываемойФункции + "_" + СтрЗаменить(Счет, ".", "_") + ?(КорСчет = "", "", "__"+СтрЗаменить(КорСчет, ".", "_"));
	Если СтрНачинаетсяС(ИмяДанных, "СиО") Или СтрНачинаетсяС(ИмяДанных, "Обороты91") Тогда
		ИмяПоказателя = ИмяПоказателя + СтрЗаменить(СтрЗаменить(ИмяДанных, "СиО", ""), "Обороты91", "_");
	КонецЕсли;
	СтруктураВозврата.Вставить("Имя", ?(ЗначениеЗаполнено(КорСчет), Счет + "_" + КорСчет, Счет));
	СтруктураВозврата.Вставить("Счет", Счет);
	СтруктураВозврата.Вставить("ВидСчета", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Счет).Вид);
	СтруктураВозврата.Вставить("ИмяИсходныхДанных", ИмяДанных);
	СтруктураВозврата.Вставить("ФункцияПолученияДанных", ИмяВызываемойФункции);
	СтруктураВозврата.Вставить("Знак", Знак);
	СтруктураВозврата.Вставить("КорСчет", КорСчет);
	СтруктураВозврата.Вставить("ВыводитьНаименование", ВыводитьНаименование);
	СтруктураВозврата.Вставить("ИдентификаторЗаполнения", СтруктураВозврата.Имя + "_" + ИмяВызываемойФункции);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция Составляющая(ОписаниеСоставляющей, ДопПараметры = Неопределено)
	
	Составляющая = Новый Массив(2);
	Составляющая[0] = ОписаниеСоставляющей;
	Составляющая[1] = ДопПараметры;
	
	Возврат Составляющая;
	
КонецФункции

Процедура ДополнитьАлгоритмы(Алгоритмы, Составляющая, НомерСтроки, НомерОсновнойСтроки = Неопределено)
	
	// Ищем либо в основных строках, либо в доп. строках основной, если указан номер основной.
	НомерСтрокиПоиска = ?(НомерОсновнойСтроки <> Неопределено, НомерОсновнойСтроки, НомерСтроки);
	Строка = АлгоритмыСтроки(Алгоритмы, НомерСтрокиПоиска);
	Если Строка <> Неопределено Тогда
		Если НомерОсновнойСтроки <> Неопределено Тогда
			ДопСтрока = АлгоритмыСтроки(Строка.ДопСтроки, НомерСтроки); 
			Если ДопСтрока <> Неопределено Тогда
				ДопСтрока.Составляющие.Добавить(Составляющая);
			КонецЕсли;
		Иначе
			Строка.Составляющие.Добавить(Составляющая);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция АлгоритмыСтроки(Алгоритмы, НомерСтроки)
	
	Для Каждого Алгоритм Из Алгоритмы Цикл
		Если Алгоритм.Номер = НомерСтроки Тогда
			 Возврат Алгоритм;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти