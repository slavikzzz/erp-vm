
////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, обеспечивающие работу генератора финансовых отчетов
//  для получения финансовой отчетности.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Описание
// 
// Параметры:
// 	Параметры - Структура из КлючИЗначение - :
// 	 * ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов - 
// 	АдресХранилища - Строка - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// 	 * Результат - ТабличныйДокумент
// 	 * СообщенияОбОшибках - Массив из Строка
// 	 * Замеры - Структура - Замеры отче:
// 	   ** НаименованиеОтчета - Строка
// 	   ** ВыводОтчета - Число -  Время вывода отчета в милисекундах
// 	   ** ВсегоФормированиеОтчета - Число - Общее время формирования отчета в милисекундах
//
Функция СформироватьОтчет(Параметры, АдресХранилища = Неопределено) Экспорт
	
	КэшРеквизитов = Неопределено;
	ДеревоЭлементовОтчета = ОбновитьДеревоОтчета(Параметры.ВидОтчета,,КэшРеквизитов,Истина);
	
	РезультатВыполнения = Новый Структура;
	
	ТекстОшибки = "";
	ПроверкаЗацикливанияВидовОтчетов(ДеревоЭлементовОтчета, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		МассивОшибок = Новый Массив;
		ДобавитьСообщениеОбОшибке(МассивОшибок, ТекстОшибки);
		РезультатВыполнения.Вставить("СообщенияОбОшибках", МассивОшибок); 
		РезультатВыполнения.Вставить("Результат", Новый ТабличныйДокумент);
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		КонецЕсли;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Параметры.Вставить("КэшРеквизитов", 			КэшРеквизитов);
	Параметры.Вставить("СообщенияОбОшибках", 		Новый Массив);
	Параметры.Вставить("ДопСуффикс", 				"");
	Параметры.Вставить("БлокиОтчета", 				Новый Массив);
	Параметры.Вставить("ВидыЭлементов", 			Перечисления.ВидыЭлементовФинансовогоОтчета.Кэш());
	
	Сдвиг = "";
	Если Параметры.КратностьСумм = Перечисления.ВидыПредставленияЧисел.ВТысячах Тогда
		Сдвиг = "; ЧС=3";
	ИначеЕсли Параметры.КратностьСумм = Перечисления.ВидыПредставленияЧисел.ВМиллионах Тогда
		Сдвиг = "; ЧС=6";
	КонецЕсли;  
	Параметры.Вставить("ФорматЗначений", 			"ЧН=-; ЧО=0" + Сдвиг + ?(Сдвиг = "", "", "; ЧДЦ=0"));
	
	Параметры.Вставить("МаксКоличествоКолонок", 	0);
	Параметры.Вставить("НачалоФормированияОтчета", 	ТекущаяУниверсальнаяДатаВМиллисекундах());
	Параметры.Вставить("РасшифровкаОтчета", 		Новый Структура);
	
	Замеры = Новый Структура("НаименованиеОтчета", Строка(Параметры.ВидОтчета));
	Если Параметры.Свойство("ДанныеПоказателя") Тогда
		РасшифровкаПроизводногоПоказателя(Параметры);
		РезультатВыполнения.Вставить("Результат", Параметры.Результат);
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		КонецЕсли;
		Возврат РезультатВыполнения;
	Иначе
		Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОписаниеВидаОтчета(Параметры, ДеревоЭлементовОтчета);
		Замеры.Вставить("СборДанных", (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000);
	КонецЕсли;
	Параметры.Удалить("ДопСуффикс");
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДокументРезультат = ВывестиОтчет(Параметры, ДеревоЭлементовОтчета);
	
	Замеры.Вставить("ВыводОтчета", (ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало) / 1000);
	Замеры.Вставить("ВсегоФормированиеОтчета",(ТекущаяУниверсальнаяДатаВМиллисекундах() - Параметры.НачалоФормированияОтчета) / 1000);
	
	РезультатВыполнения.Вставить("СообщенияОбОшибках", Параметры.СообщенияОбОшибках);
	РезультатВыполнения.Вставить("Результат", ДокументРезультат);
	РезультатВыполнения.Вставить("Замеры", Замеры);
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	КонецЕсли;
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает таблицу интервалов переданного периода.
//
// Параметры:
//  ПериодОтчета - Структура - описание периода со следующими ключами - значениями:
//    *НачалоПериода - Дата - начало периода
//    *КонецПериода - Дата - конец периода
//    *Периодичность - Массив из Структура - :
//      **Периодичность - ПеречислениеСсылка.Периодичность - массив предопределенных интервалов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НоваяТаблицаИнтервалов - В таблице содержатся конкретные даты из переданного периода для предопределенных интервалов год,
//   					полугодие, квартал, месяц и т.д. Если в параметрах периода передан пустой массив интервалов,
//   					то возвращается таблица с единственной строкой содержащая только переданный период.
//
Функция ИнтервалыОтчета(ПериодОтчета) Экспорт
	
	НачалоПериода = НачалоМесяца(ПериодОтчета.НачалоПериода);
	КонецПериода = КонецМесяца(ПериодОтчета.КонецПериода);
	
	ПериодыПолученияПоказателей = Новый Массив;
	ПериодыПолученияПоказателей.Добавить(Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода));	
	
	Периодичность = Новый Массив;
	ИнтервалыОтчета = НоваяТаблицаИнтервалов();
	
	ЕстьПериодичностьГод = Ложь;
	ЕстьПериодичностьПолугодие = Ложь;
	ЕстьПериодичностьКвартал = Ложь;
	ЕстьПериодичностьМесяц = Ложь;
	КвантПериода = Неопределено;
	
	МинимальнаяДатаОтчета = НачалоПериода;
	
	Если ПериодОтчета.Периодичность.Количество() Тогда
		Периодичность = Новый Массив;
		Для Каждого Период Из ПериодОтчета.Периодичность Цикл
			Периодичность.Добавить(Период.Периодичность);
			
			Если Период.Периодичность = Перечисления.Периодичность.Год Тогда
				ЕстьПериодичностьГод = Истина;
			ИначеЕсли Период.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				ЕстьПериодичностьПолугодие = Истина;
			ИначеЕсли Период.Периодичность = Перечисления.Периодичность.Квартал Тогда
				ЕстьПериодичностьКвартал = Истина;
			ИначеЕсли Период.Периодичность = Перечисления.Периодичность.Месяц  Тогда
				ЕстьПериодичностьМесяц = Истина;
			КонецЕсли;
			
			Если Период.ВыводитьПоказателиАналогичныхПериодовПрошлыхЛет <> Неопределено
				И Период.ВыводитьПоказателиАналогичныхПериодовПрошлыхЛет Тогда
				Для КоличествоПериодов = 1 По Период.КоличествоПредыдущихЛет Цикл
					СравнительныйПериод = СравнительныйПериод(НачалоПериода, КонецПериода, Перечисления.Периодичность.Год, КоличествоПериодов);
					ПериодыПолученияПоказателей.Добавить(СравнительныйПериод);
					Если СравнительныйПериод.НачалоПериода < МинимальнаяДатаОтчета Тогда
						МинимальнаяДатаОтчета = СравнительныйПериод.НачалоПериода;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если Период.ВыводитьПоказателиПредыдущихПериодов <> Неопределено 
				И Период.ВыводитьПоказателиПредыдущихПериодов Тогда
				Для КоличествоПериодов = 1 По Период.КоличествоПредыдущихПериодов Цикл
					СравнительныйПериод = СравнительныйПериод(НачалоПериода, КонецПериода, Период.Периодичность, КоличествоПериодов);
					ПериодыПолученияПоказателей.Добавить(СравнительныйПериод);
					Если СравнительныйПериод.НачалоПериода < МинимальнаяДатаОтчета Тогда
						МинимальнаяДатаОтчета = СравнительныйПериод.НачалоПериода;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НовыйИнтервал = ИнтервалыОтчета.Добавить();
		НовыйИнтервал.ДатаОкончания = КонецПериода;
		НовыйИнтервал.ДатаНачала = НачалоПериода;
		Возврат ИнтервалыОтчета;
	КонецЕсли;
	
	КвантПериода = Неопределено;
	Если ЕстьПериодичностьМесяц Тогда
		КвантПериода = Перечисления.Периодичность.Месяц;
	ИначеЕсли ЕстьПериодичностьКвартал Тогда
		КвантПериода = Перечисления.Периодичность.Квартал;
	ИначеЕсли ЕстьПериодичностьПолугодие Тогда
		КвантПериода = Перечисления.Периодичность.Полугодие;
	ИначеЕсли ЕстьПериодичностьГод Тогда
		КвантПериода = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	КоличествоМесяцевОтчета = РазностьДатВМесяцах(НачалоПериода, КонецПериода);
	
	Если ЕстьПериодичностьГод И КоличествоМесяцевОтчета < 12 Тогда
		ВызватьИсключение НСтр("ru = 'В элементах отчета выбрана периодичность ""Год"". Период, за который строится отчет, не может быть менее 12 месяцев.';
								|en = '""Year"" frequency is selected in the report items. The report period cannot be less than 12 months.'");
	ИначеЕсли ЕстьПериодичностьПолугодие И КоличествоМесяцевОтчета < 6 Тогда
		ВызватьИсключение НСтр("ru = 'В элементах отчета выбрана периодичность ""Полугодие"". Период, за который строится отчет, не может быть менее 6 месяцев.';
								|en = '""Half year"" frequency is selected in the report items. The report period cannot be less than 6 months.'");
	ИначеЕсли ЕстьПериодичностьКвартал И КоличествоМесяцевОтчета < 3 Тогда
		ВызватьИсключение НСтр("ru = 'В элементах отчета выбрана периодичность ""Квартал"". Период, за который строится отчет, не может быть менее 3 месяцев.';
								|en = '""Quarter"" frequency is selected in the report items. The report period cannot be less than 3 months.'");
	КонецЕсли;
	
	ФинансовыеПериодыГод =
			ФинансовыеПериоды(
				Перечисления.Периодичность.Год, 
				НачалоПериода,
				КонецПериода,
				МинимальнаяДатаОтчета);
	
	ФинансовыеПериодыПолугодие =
			ФинансовыеПериоды(
				Перечисления.Периодичность.Полугодие,
				НачалоПериода,
				КонецПериода,
				МинимальнаяДатаОтчета);
	
	ФинансовыеПериодыКвартал = ФинансовыеПериоды(
				Перечисления.Периодичность.Квартал, 
				НачалоПериода,
				КонецПериода,
				МинимальнаяДатаОтчета);
	
	Для каждого ПериодПолученияДанных Из ПериодыПолученияПоказателей Цикл
	
		ДатаНачалаИнтервала = ПериодПолученияДанных.НачалоПериода;
		ДатаОкончанияИнтервала = ПериодПолученияДанных.НачалоПериода;
		
		Пока ДатаОкончанияИнтервала <  ПериодПолученияДанных.КонецПериода Цикл
			
			ДатаОкончанияИнтервала = ДатаКонцаНовогоИнтервала(ДатаОкончанияИнтервала, КвантПериода, ПериодПолученияДанных.КонецПериода);
			
			РезультатПоиска = ИнтервалыОтчета.НайтиСтроки(Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаИнтервала, ДатаОкончанияИнтервала));
			
			Если РезультатПоиска.Количество() = 0 Тогда
				НовыйИнтервал = ИнтервалыОтчета.Добавить(); 
				НовыйИнтервал.ДатаНачала = ДатаНачалаИнтервала;
				НовыйИнтервал.ДатаОкончания = ДатаОкончанияИнтервала;
				
				НовыйИнтервал.ПериодГод = ГраницыФинансовогоПериода(ДатаОкончанияИнтервала, ФинансовыеПериодыГод).КонецПериода;
				НовыйИнтервал.ПериодПолугодие = ГраницыФинансовогоПериода(ДатаОкончанияИнтервала, ФинансовыеПериодыПолугодие).КонецПериода;
				НовыйИнтервал.ПериодКвартал = ГраницыФинансовогоПериода(ДатаОкончанияИнтервала, ФинансовыеПериодыКвартал).КонецПериода;
				НовыйИнтервал.ПериодМесяц = КонецМесяца(ДатаОкончанияИнтервала);
			КонецЕсли;
			
			ДатаОкончанияИнтервала = ДатаОкончанияИнтервала + 1;
			ДатаНачалаИнтервала = ДатаОкончанияИнтервала;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ИнтервалыОтчета;
	
КонецФункции

Процедура СформироватьКомплектОтчетов(Параметры, АдресХранилища) Экспорт
	
	ИдентификаторГлавногоХранилища = Параметры.ИдентификаторГлавногоХранилища;
	
	ДанныеЭкземпляров = Новый Соответствие;
	Для Каждого Экземпляр Из Параметры.ЭкземплярыОтчетов Цикл
		
		ВидОтчета = Экземпляр.Ключ;
		Параметры.Вставить("ДанныеРасшифровки", ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторГлавногоХранилища));
		Параметры.ВидОтчета = ВидОтчета;
		Параметры.ВыводитьКодСтроки = ВидОтчета.ВыводитьКодСтроки;
		Параметры.ВыводитьПримечание = ВидОтчета.ВыводитьПримечание;
		Параметры.ЗаголовокКодаСтроки = ВидОтчета.ЗаголовокКодаСтроки;
		Параметры.ЗаголовокПримечания = ВидОтчета.ЗаголовокПримечания;
		Параметры.ЯзыкОтчета = ВидОтчета.ЯзыкОтчета;
		
		АдресДанныхОтчета = Экземпляр.Значение;
		РезультатВыполненияОтчета = СформироватьОтчет(Параметры);
		ПоместитьВоВременноеХранилище(РезультатВыполненияОтчета, АдресДанныхОтчета);
		
		Параметры.РезультатОтчета = РезультатВыполненияОтчета.Результат;
		
		НовыйЭкземпляр = Документы.ЭкземплярФинансовогоОтчета.СоздатьДокумент();
		НовыйЭкземпляр.Дата = ТекущаяДатаСеанса();
		НовыйЭкземпляр.Ответственный = Пользователи.ТекущийПользователь();
		НовыйЭкземпляр.Заполнить(Параметры);
		НовыйЭкземпляр.Валюта = Параметры.Валюта;
		
		НовыйЭкземпляр.Записать();
		
		ДанныеЭкземпляров.Вставить(АдресДанныхОтчета, НастройкиОтчета(Параметры));
		
	КонецЦикла;// по видам отчета
	
	РезультатВыполненияФоновогоЗадания = Новый Структура;
	РезультатВыполненияФоновогоЗадания.Вставить("Выполнено", Истина);
	РезультатВыполненияФоновогоЗадания.Вставить("ПериодОтчета", Параметры.ПериодОтчета);
	РезультатВыполненияФоновогоЗадания.Вставить("Отбор", Параметры.Отбор);
	РезультатВыполненияФоновогоЗадания.Вставить("НаборОтчетов", Параметры.НаборОтчетов);
	РезультатВыполненияФоновогоЗадания.Вставить("ОткрытьФормы", Параметры.ОткрытьФормы);
	РезультатВыполненияФоновогоЗадания.Вставить("ДанныеЭкземпляров", ДанныеЭкземпляров);
	
	ПоместитьВоВременноеХранилище(РезультатВыполненияФоновогоЗадания, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеКомплектовОтчетов

Функция НастройкиОтчета(Параметры)
	
	// Настройки контекстного отчета
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	НовыеНастройки = Новый Структура;
	НовыеНастройки.Вставить("КомплектОтчетности", Параметры.КомплектОтчетности);
	НовыеНастройки.Вставить("ВидОтчета"         , Параметры.ВидОтчета);
	НовыеНастройки.Вставить("НачалоПериода"     , Параметры.ПериодОтчета.НачалоПериода);
	НовыеНастройки.Вставить("КонецПериода"      , Параметры.ПериодОтчета.КонецПериода);
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.Отбор.Организация) Тогда
		Список.Добавить(Параметры.Отбор.Организация);
	КонецЕсли;
	НовыеНастройки.Вставить("Организации", Список);
	
	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.Отбор.Подразделение) Тогда
		Список.Добавить(Параметры.Отбор.Подразделение);
	КонецЕсли;
	НовыеНастройки.Вставить("Подразделения", Список);
	
	Если Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям() Тогда
		Список = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Параметры.Отбор.НаправлениеДеятельности) Тогда
			Список.Добавить(Параметры.Отбор.НаправлениеДеятельности);
		КонецЕсли;
		НовыеНастройки.Вставить("НаправленияДеятельности", Список);
	КонецЕсли;
	
	НовыеНастройки.Вставить("КратностьСумм"     , Параметры.КратностьСумм);
	НовыеНастройки.Вставить("ВыводитьЗаголовок" , Ложь);
	НовыеНастройки.Вставить("ВыводитьПодвал"    , Ложь);
	НовыеНастройки.Вставить("СкрыватьНастройкиПриФормированииОтчета", Ложь);
	НовыеНастройки.Вставить("ВидимостьПанелиНастроек", Истина);
	НовыеНастройки.Вставить("Ресурс"            , Параметры.Ресурс);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ДанныеОтчета", Новый ХранилищеЗначения(НовыеНастройки));
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетности

#Область ПроцедурыИФункцииПолученияНастроекОтчета

Процедура ОписаниеВидаОтчета(Параметры, ДеревоЭлементовОтчета)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Если ТипЗнч(ДеревоЭлементовОтчета) = Тип("СтрокаДереваЗначений") Тогда
		Если ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
			ИЛИ ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ДеревоЭлементовОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементОтчета Из ДеревоЭлементовОтчета.Строки Цикл
		
		Если ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.НередактируемыйТекст
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст Тогда
			ДобавитьТекстовыйБлок(Параметры, ЭлементОтчета);
			ОписаниеВидаОтчета(Параметры, ЭлементОтчета);
			
		ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			ДобавитьТаблицу(Параметры, ЭлементОтчета);
			
		ИначеЕсли ЭтоПоказатель(ЭлементОтчета.ВидЭлемента, ВидыЭлементов, ЭлементОтчета.ЭтоСвязанный) Тогда
			ДобавитьПоказательОтчета(Параметры, ЭлементОтчета);
			
		КонецЕсли;
		
	КонецЦикла;// по строкам элемента отчета
	
КонецПроцедуры

Процедура ДобавитьТекстовыйБлок(Параметры, ЭлементОтчета)

	ПеременныеФинОтчетов = ФинансоваяОтчетностьКлиентСервер.ПеременныеФинансовыхОтчетов();
	
	ПериодОтчета = Параметры.ПериодОтчета;
	ТекстЗаголовка = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
		ЭлементОтчета.ЭлементОтчета, "Текст", Параметры.КэшРеквизитов);
	
	ПредставлениеКомплектаОтчетности = КомплектОтчетностиВидаОтчета(Параметры.ВидОтчета);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,
			ПеременныеФинОтчетов.КомплектОтчетов.Имя, 
			ПредставлениеКомплектаОтчетности);
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,
			ПеременныеФинОтчетов.ВидОтчета.Имя,
			Строка(Параметры.ВидОтчета));
	
	Если СтрНайти(ТекстЗаголовка, ПеременныеФинОтчетов.ПериодОтчетности.Имя) > 0 Тогда
		ПериодСтрокой = ОтчетыУТКлиентСервер.ПолучитьПредставлениеПериода(ПериодОтчета.НачалоПериода, ПериодОтчета.КонецПериода, Истина, Параметры.ЯзыкОтчета);
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПеременныеФинОтчетов.ПериодОтчетности.Имя ,СокрЛП(ПериодСтрокой));
	КонецЕсли;
	
	Если СтрНайти(ТекстЗаголовка, ПеременныеФинОтчетов.КонечнаяДатаПериодаОтчета.Имя) > 0 Тогда
		КонецОтчета = Формат(ПериодОтчета.КонецПериода, "Л=" + Параметры.ЯзыкОтчета + "; ДЛФ=DD");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПеременныеФинОтчетов.КонечнаяДатаПериодаОтчета.Имя, Строка(КонецОтчета));
	КонецЕсли;
	
	Если СтрНайти(ТекстЗаголовка, ПеременныеФинОтчетов.ТекущаяДатаИВремя.Имя) > 0 Тогда
		ДатаФормированияОтчета = Формат(Параметры.ДатаФормированияОтчета, "Л=" + Параметры.ЯзыкОтчета + "ДЛФ=DT");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, ПеременныеФинОтчетов.ТекущаяДатаИВремя.Имя, ДатаФормированияОтчета);
	КонецЕсли;
	
	Если СтрНайти(ТекстЗаголовка, ПеременныеФинОтчетов.Организация.Имя) > 0 Тогда
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Организация") Тогда
			ЗначениеОтбора = Параметры.Отбор.Организация;
			
			Организации = Новый Массив;
			Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") Тогда
				Организации.Добавить(ЗначениеОтбора);
			ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Организации = ЗначениеОтбора;
			ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				Организации = ЗначениеОтбора.ВыгрузитьЗначения();
			КонецЕсли;
			
			ИмяОрганизации = "";
			ИменаРеквизитов = "Наименование,НаименованиеСокращенное,НаименованиеПолное";
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Организации, ИменаРеквизитов);
			
			Для Каждого Организация Из Реквизиты Цикл
				ИмяОрганизации = ИмяОрганизации + ?(ПустаяСтрока(ИмяОрганизации),"",", ");
				ИмяОрганизации = ИмяОрганизации + Организация.Значение.НаименованиеСокращенное;
			КонецЦикла;
			
		КонецЕсли; // Есть отбор по организации
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка,
				ПеременныеФинОтчетов.Организация.Имя,
				ИмяОрганизации);
	КонецЕсли;
	
	Данные = Новый Структура("Текст", ТекстЗаголовка);
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, Данные);

КонецПроцедуры

Процедура ДобавитьТаблицу(Параметры, ЭлементОтчета)
	
	ДеревоТаблицы = ЭлементОтчета;
	Если ДеревоТаблицы.ЭтоСвязанный Тогда
		ОтчетВладелец = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементОтчета.СвязанныйЭлемент, "Владелец");
		СвязаннаяТаблица = ОбновитьДеревоОтчета(ОтчетВладелец, ЭлементОтчета.СвязанныйЭлемент);
		ДеревоТаблицы = СвязаннаяТаблица.Строки[0];
	КонецЕсли;
	
	Параметры.Вставить("ВидТаблицы", ЭлементОтчета.ВидЭлемента);
	
	ДанныеТаблицы = ПодготовитьДанныеТаблицы(ДеревоТаблицы, Параметры);
	
	Если Параметры.ВыводитьПримечание Тогда
		НоваяСтрока = ДанныеТаблицы.КолонкиОтчета.Вставить(0);
		НоваяСтрока.ИмяКолонки = "Примечание";
		НоваяСтрока.УровеньИтога = -1;
	КонецЕсли;
	
	Если Параметры.ВыводитьКодСтроки Тогда
		НоваяСтрока = ДанныеТаблицы.КолонкиОтчета.Вставить(0);
		НоваяСтрока.ИмяКолонки = "КодСтрокиОтчета";
		НоваяСтрока.УровеньИтога = -1;
	КонецЕсли;
	
	Параметры.МаксКоличествоКолонок = Макс(Параметры.МаксКоличествоКолонок, ДанныеТаблицы.КолонкиОтчета.Количество());
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, ДанныеТаблицы);
	Параметры.ПериодОтчета.Периодичность.Очистить();
	
КонецПроцедуры

Процедура ДобавитьПоказательОтчета(Параметры, ЭлементОтчета)
	
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(Параметры);
	ПараметрыПоказателя.Показатель = ЭлементОтчета;
	
	ЗначениеПоказателя = ЗначениеПоказателяОтчета(ПараметрыПоказателя);
	
	РасшифровкаЯчейки = Новый Структура("ДатаНачала, ДатаОкончания, ВидЭлемента, СчетПланаСчетов, НемонетарныйПоказатель");
	ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ЭлементОтчета);
	РасшифровкаЯчейки.ДатаНачала = Параметры.ПериодОтчета.НачалоПериода;
	РасшифровкаЯчейки.ДатаОкончания = Параметры.ПериодОтчета.КонецПериода;
	РасшифровкаЯчейки.Вставить("Показатель", ЭлементОтчета.ЭлементОтчета);
	
	Данные = Новый Структура("ВыделитьЭлемент,ЭтоСвязанный");
	ЗаполнитьЗначенияСвойств(Данные,ЭлементОтчета);
	Данные.Вставить("Расшифровка", РасшифровкаЯчейки);
	Данные.Вставить("Значение", ЗначениеПоказателя[0].Значение);
	
	ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, Данные);
	
КонецПроцедуры

Функция ПодготовитьДанныеТаблицы(ДеревоТаблицы, Параметры)
	
	ЭтоПроизвольная = ДеревоТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.ТаблицаСложная;
	ТаблицаПоказателиВКолонках = ДеревоТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.ТаблицаПоказателиВКолонках;
	ОписаниеТаблицы = ОписаниеТаблицы(ЭтоПроизвольная, ТаблицаПоказателиВКолонках);
	ОписаниеТаблицы.Вставить("ВидыЭлементов", Параметры.ВидыЭлементов);
	ОписаниеТаблицы.Вставить("ЯзыкОтчета", Параметры.ЯзыкОтчета);
	
	ДеревоГоризонтальныхИтогов = ОписаниеТаблицы.ДеревоКолонок.Скопировать();
	ЗаполнитьОписаниеТаблицы(ДеревоТаблицы, ОписаниеТаблицы, Параметры);
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
		Если ЗначенияПоказателей.Колонки.Найти(Измерение) = Неопределено Тогда
			ЗначенияПоказателей.Колонки.Добавить(Измерение);
		КонецЕсли;
	КонецЦикла;
	Для каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
		Если ЗначенияПоказателей.Колонки.Найти(Измерение) = Неопределено Тогда
			ЗначенияПоказателей.Колонки.Добавить(Измерение);
		КонецЕсли
	КонецЦикла;
	Если ЭтоПроизвольная Тогда
		ЗначенияПоказателей.Колонки.Добавить("СтрокаТаблицы");
	КонецЕсли;
	Если ТаблицаПоказателиВКолонках Тогда
		ЗначенияПоказателей.Колонки.Добавить("ДатаНачала");
		ЗначенияПоказателей.Колонки.Добавить("ДатаОкончания");
	КонецЕсли;
	
	ВыборкаПоказателей = ЗначенияПоказателейТаблицы(Параметры, ОписаниеТаблицы);
	СформироватьДеревоГоризонтальныхИтогов(ОписаниеТаблицы.ДеревоКолонок, ВыборкаПоказателей, ОписаниеТаблицы, ДеревоГоризонтальныхИтогов);
	ОпределитьСоставОперандовГоризонтальныхИтогов(ДеревоГоризонтальныхИтогов, ОписаниеТаблицы);
	
	Показатели = ОписаниеТаблицы.Показатели;
	Для Каждого Показатель Из Показатели Цикл
		
		ПоказательЗначение = Показатель.Значение; // см. ОписаниеПоказателя
		ОписаниеТаблицы.ТекущийПоказатель = ПоказательЗначение.Описание;
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			ОписаниеТаблицы.СтрокаПоказателя = ПоказательЗначение.Строка;
			ОписаниеТаблицы.КолонкаПоказателя = Показатель.Значение.Колонка;
		КонецЕсли;
		Отбор = Новый Структура("Показатель", Показатель.Ключ);
		ЗначениеПоказателя = ВыборкаПоказателей.Скопировать(Отбор);
		
		// Дополним таблицу показателя колонками группировок строк
		Если ЭтоПроизвольная Тогда
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[ПоказательЗначение.Строка];
		Иначе
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[ПоказательЗначение.Описание.ЭлементОтчета];
		КонецЕсли;
		
		Если ЭтоПроизвольная Тогда
			ЗагрузитьЗначенияПоказателяВКолонку(ЗначениеПоказателя, ОписаниеТаблицы);
			ЗагрузитьЗначенияПоказателяВСтроку(ЗначениеПоказателя, ВертикальныеГруппировки, ОписаниеТаблицы, Параметры.ПериодОтчета);
		ИначеЕсли ТаблицаПоказателиВКолонках Тогда
			ЗагрузитьЗначенияПоказателяВКолонку(ЗначениеПоказателя, ОписаниеТаблицы);
			РассчитатьГоризонтальныеИтоги(ОписаниеТаблицы);
		Иначе
			ЗагрузитьЗначенияПоказателяВСтроку(ЗначениеПоказателя, ВертикальныеГруппировки, ОписаниеТаблицы, Параметры.ПериодОтчета);
		КонецЕсли;
		
	КонецЦикла;
	
	// Рассчитать итоги строк
	ДеревоВертикальныхИтогов = ОписаниеТаблицы.ДеревоСтрок.Скопировать(); // ТаблицаЗначений
	ДеревоВертикальныхИтогов.Строки.Очистить();
	ТипЧисло = Новый ОписаниеТипов("Число");
	Для Каждого Имя Из ОписаниеТаблицы.Ресурсы Цикл
		ДеревоВертикальныхИтогов.Колонки.Добавить(Имя, ТипЧисло);
		ДеревоВертикальныхИтогов.Колонки.Добавить(Имя + "_Точность", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	КонецЦикла;
	СформироватьДеревоВертикальныхИтогов(ОписаниеТаблицы.ДеревоСтрок, ОписаниеТаблицы, ДеревоВертикальныхИтогов);
	ОписаниеТаблицы.Вставить("ДеревоСтрок", ДеревоВертикальныхИтогов);
	
	// Вернем только необходимое
	ДанныеНаПечать = ДанныеТаблицыНаПечать();
	ЗаполнитьЗначенияСвойств(ДанныеНаПечать, ОписаниеТаблицы);
	Возврат ДанныеНаПечать;
	
КонецФункции

Функция ЗначенияПоказателейТаблицы(Параметры, ОписаниеТаблицы)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей; // ТаблицаЗначений
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(Параметры, ОписаниеТаблицы);
	ВыборкаПоказателей = Неопределено;
	Для Каждого Показатель Из ОписаниеТаблицы.Показатели Цикл
		
		ПоказательЗначение = Показатель.Значение; // см. ОписаниеПоказателя
		ПараметрыПоказателя.Показатель = ПоказательЗначение.Описание;
		Если Показатель.Значение.Свойство("Субконто") Тогда
			ПараметрыПоказателя.Субконто = Показатель.Значение.Субконто;
		Иначе
			ПараметрыПоказателя.Субконто = Новый Структура;
		КонецЕсли;
		
		Если ОписаниеТаблицы.Свойство("Субконто") Тогда
			Для каждого СубконтоОтчета  Из ОписаниеТаблицы.Субконто Цикл
				
			СтруктураСубконтоДляЗапроса = Новый Структура;
			СтруктураСубконтоДляЗапроса.Вставить("Вид",           СубконтоОтчета.Значение.ВидСубконто);
			СтруктураСубконтоДляЗапроса.Вставить("ЕстьНастройки", СубконтоОтчета.Значение.ЕстьНастройки);
			СтруктураСубконтоДляЗапроса.Вставить("Отбор",         СубконтоОтчета.Значение.ДополнительныйОтбор);
			СтруктураСубконтоДляЗапроса.Вставить("Наименование",  СубконтоОтчета.Значение.НаименованиеДляПечати);
				
			ПараметрыПоказателя.Субконто.Вставить(СубконтоОтчета.Ключ, СтруктураСубконтоДляЗапроса);
			КонецЦикла; 
		КонецЕсли;
		
		ЗначениеПоказателя = ЗначениеПоказателяОтчета(ПараметрыПоказателя);
		Если ПараметрыПоказателя.Свойство("ОшибкаРасчета") Тогда
			ПараметрыПоказателя.Удалить("ОшибкаРасчета");
		КонецЕсли;
		
		Если ВыборкаПоказателей = Неопределено Тогда
			ВыборкаПоказателей = Новый ТаблицаЗначений;
		КонецЕсли;
		Для каждого КолонкаЗначенияПоказателя Из ЗначениеПоказателя.Колонки Цикл
			Если ВыборкаПоказателей.Колонки.Найти(КолонкаЗначенияПоказателя.Имя) = Неопределено Тогда
				Если СтрНайти(КолонкаЗначенияПоказателя.Имя, "Аналитика") > 0 Тогда 
					ВыборкаПоказателей.Колонки.Добавить(КолонкаЗначенияПоказателя.Имя, Новый ОписаниеТипов);
				Иначе
					ВыборкаПоказателей.Колонки.Добавить(КолонкаЗначенияПоказателя.Имя, КолонкаЗначенияПоказателя.ТипЗначения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ВыборкаПоказателей, ЗначениеПоказателя);
		
		// Дополним таблицу показателя колонками группировок строк
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[ПоказательЗначение.Строка];
		Иначе
			ВертикальныеГруппировки = ОписаниеТаблицы.ВертикальныеГруппировки[ПоказательЗначение.Описание.ЭлементОтчета];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВертикальныеГруппировки) Тогда
			Для Каждого Группировка Из ВертикальныеГруппировки Цикл
				Если ЗначенияПоказателей.Колонки.Найти(Группировка.Ключ) = Неопределено Тогда
					ЗначенияПоказателей.Колонки.Добавить(Группировка.Ключ);
					ВыборкаПоказателей.Колонки.Добавить(Группировка.Ключ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыборкаПоказателей = Неопределено Тогда
		
		ИнтервалыОтчета = ПараметрыПоказателя.ИнтервалыОтчета.Скопировать();
		Измерения = ПараметрыПоказателя.Измерения;
		ВыборкаПоказателей = ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения);
		
	Иначе
		
		ИменаКолонок = "";
		Для Каждого Колонка Из ВыборкаПоказателей.Колонки Цикл
			ИменаКолонок = ИменаКолонок + Колонка.Имя + ",";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИменаКолонок, 1);
		ВыборкаПоказателей.Свернуть(ИменаКолонок);
		
		// Для пустых показателей заполним измерения, чтобы не выводилась лишняя пустая колонка
		ПустыеПоказатели = ВыборкаПоказателей.НайтиСтроки(Новый Структура("ПустоеЗначение", Истина));
		ЗначенияИзмерений = ВыборкаПоказателей.Скопировать(Новый Структура("ПустоеЗначение", Ложь));
		ЗначенияИзмерений.Свернуть(СтрСоединить(ОписаниеТаблицы.ИзмеренияТаблицы, ","));
		Если ЗначенияИзмерений.Количество() > 0 Тогда
			Для Каждого ПустойПоказатель Из ПустыеПоказатели Цикл
				Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
					ПустойПоказатель[Измерение] = ЗначенияИзмерений[0][Измерение];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		ВыборкаПоказателей.Колонки.Удалить("ПустоеЗначение");
		
		СтрокаСортировки = "";
		Для Каждого Период Из Параметры.ПериодОтчета.Периодичность Цикл
			Если ЗначениеЗаполнено(Период.Периодичность) Тогда
				СтрокаСортировки = СтрокаСортировки + ?(ПустаяСтрока(СтрокаСортировки),"",",")
				+ Период.ИмяКолонки +" "+Период.Сортировка;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаСортировки <> "" Тогда
			ВыборкаПоказателей.Сортировать(СтрокаСортировки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВыборкаПоказателей;
	
КонецФункции

// Заполняет структуру таблицы отчета.
// Из дерева таблицы рекурсивно получает параметры необходимые для построения таблицы.
// Параметры:
//  ДеревоТаблицы - ДеревоЗначений - 
//  ЭлементыТаблицы - см. ОписаниеТаблицы
//  Параметры - Структура - параметры построения отчета:
//   * ВидыЭлементов - Структура - перечислены виды элементов:
//     ** Ключ - Строка - имя вида элемента.
//     ** Значение - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
//  ЭтоКолонки - Булево - Признак колонок отчета
//
Процедура ЗаполнитьОписаниеТаблицы(ДеревоТаблицы, ЭлементыТаблицы, Параметры, ЭтоКолонки = Ложь)
	
	ЭтоСвязаннаяГруппа = Ложь;
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Показатели = ЭлементыТаблицы.Показатели;
	
	Если ЭлементыТаблицы.ЭтоПроизвольная Тогда
		НастройкаЯчеек = ДеревоТаблицы.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек, "ВидЭлемента");
		Если НастройкаЯчеек <>  Неопределено Тогда
			ПоказателиПроизвольнойТаблицы(НастройкаЯчеек, ЭлементыТаблицы, Параметры, ЭтоКолонки);
		КонецЕсли;
	КонецЕсли;
	СвязанныеЭлементы = ДеревоТаблицы.Строки.ВыгрузитьКолонку("СвязанныйЭлемент");
	СвязанныеОтчеты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СвязанныеЭлементы, "Владелец");
	Для Каждого Элемент Из ДеревоТаблицы.Строки Цикл
		
		ЭтоПоказатель = ЭтоПоказатель(Элемент.ВидЭлемента, ВидыЭлементов, Элемент.ЭтоСвязанный);
		ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент) + Параметры.ДопСуффикс;
		ДобавленНовыйУровень = Ложь;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			
			ДобавитьЭлементТаблицыИзмерение(ЭлементыТаблицы, Элемент, Параметры.ДопСуффикс, ЭтоКолонки, ВидыЭлементов, Параметры.ВидТаблицы);
			ДобавленНовыйУровень = Истина;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Группа Тогда
			
			Если Элемент.ЭтоСвязанный Тогда// по ссылке получить оригинальное дерево
				СвязаныйОтчет = СвязанныеОтчеты[Элемент.СвязанныйЭлемент];
				СвязанноеДерево = ОбновитьДеревоОтчета(СвязаныйОтчет, Элемент.СвязанныйЭлемент);
				Если СвязанноеДерево.Строки.Количество() > 0 Тогда
					ОписаниеГруппы = СвязанноеДерево.Строки[0];
					Параметры.ДопСуффикс = Параметры.ДопСуффикс + "X";
					// Грубый контроль зацикливания
					Если ОписаниеГруппы.ВидОтчета = Параметры.ВидОтчета Тогда
						Продолжить;
					КонецЕсли;
					Элемент = ОписаниеГруппы;
					ЭтоСвязаннаяГруппа = Истина;
					ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент) + Параметры.ДопСуффикс;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;// ЭтоСвязанный
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
			ЭлементыТаблицы.ТекущиеГруппировки.Вставить(ИдентификаторЭлемента, Элемент.ЭлементОтчета);
			ДобавленНовыйУровень = Истина;
			
		ИначеЕсли ЭтоПоказатель И Не ЭтоПоказатель(Элемент.Родитель.ВидЭлемента, ВидыЭлементов) Тогда
			
			Если Показатели.Получить(Элемент.ЭлементОтчета) = Неопределено Тогда
				Показатели.Вставить(Элемент.ЭлементОтчета, Новый Структура("Описание,Субконто", Элемент, Новый Структура));
			КонецЕсли;
			Субконто = Показатели.Получить(Элемент.ЭлементОтчета).Субконто;
			НомерСубконто = Субконто.Количество() + 1;
			ПодчиненныеСубконтоПоказателя(ЭлементыТаблицы, Элемент.Строки, Субконто, ВидыЭлементов, НомерСубконто, ЭтоКолонки);
			Показатели.Вставить(Элемент.ЭлементОтчета, Новый Структура("Описание,Субконто", Элемент, Субконто));
			Если НЕ ЭтоКолонки Тогда
				Родители = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементыТаблицы.ТекущиеГруппировки);
				ЭлементыТаблицы.ВертикальныеГруппировки.Вставить(Элемент.ЭлементОтчета, Родители);
			КонецЕсли;
			Если Элемент.Родитель = Неопределено 
					Или НЕ ЭтоПоказатель(Элемент.Родитель.ВидЭлемента, ВидыЭлементов, Элемент.Родитель.ЭтоСвязанный) Тогда
				ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
				ДобавленНовыйУровень = Истина;
			КонецЕсли;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И НЕ Элемент.ЭтоСвязанный Тогда
			
			ИдентификаторИтога = "Итог"+ИдентификаторЭлемента(Элемент.Родитель) + Параметры.ДопСуффикс;
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторИтога, , ДеревоТаблицы.Строки.Индекс(Элемент));
			ДобавленНовыйУровень = Истина;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.ЭлементТаблицы Тогда
			
			Если НЕ ЭтоКолонки Тогда
				Родители = ОбщегоНазначения.СкопироватьРекурсивно(ЭлементыТаблицы.ТекущиеГруппировки);
				ЭлементыТаблицы.ВертикальныеГруппировки.Вставить(Элемент.ЭлементОтчета, Родители);
			КонецЕсли;
			ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента);
			ДобавленНовыйУровень = Истина;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Колонки Тогда
			
			ЭтоКолонки = Истина;
			ЭлементыТаблицы.ТекущийУровень = ЭлементыТаблицы.ДеревоКолонок.Строки;
			
		ИначеЕсли Элемент.ВидЭлемента = ВидыЭлементов.Строки Тогда
			
			ЭтоКолонки = Ложь;
			ЭлементыТаблицы.ТекущийУровень = ЭлементыТаблицы.ДеревоСтрок.Строки;
			
		КонецЕсли;
		
		Если Элемент.ВидЭлемента <> ВидыЭлементов.НастройкаЯчеек И Элемент.Строки.Количество() Тогда
			ЗаполнитьОписаниеТаблицы(Элемент, ЭлементыТаблицы, Параметры, ЭтоКолонки);
		КонецЕсли;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Группа И ЭтоСвязаннаяГруппа Тогда
			Параметры.ДопСуффикс = Лев(Параметры.ДопСуффикс,СтрДлина(Параметры.ДопСуффикс)-1);
		КонецЕсли;
		
		Если Элемент.ВидЭлемента = ВидыЭлементов.Измерение ИЛИ Элемент.ВидЭлемента = ВидыЭлементов.Группа Тогда
			ЭлементыТаблицы.ТекущиеГруппировки.Удалить(ИдентификаторЭлемента);
		КонецЕсли;
		
		Если ДобавленНовыйУровень И ЗначениеЗаполнено(ЭлементыТаблицы.ТекущийРодитель) Тогда
			Родитель = ЭлементыТаблицы.ТекущийРодитель.Родитель;
			ЭлементыТаблицы.ТекущийРодитель = Родитель;
			Если Родитель = Неопределено И ЭтоКолонки Тогда
				ТекущийУровень = ЭлементыТаблицы.ДеревоКолонок.Строки;
			ИначеЕсли Родитель = Неопределено И НЕ ЭтоКолонки Тогда
				ТекущийУровень = ЭлементыТаблицы.ДеревоСтрок.Строки;
			Иначе
				ТекущийУровень = Родитель.Строки;
			КонецЕсли;
			ЭлементыТаблицы.ТекущийУровень = ТекущийУровень;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ВыборкаПоказателя - ТаблицаЗначений - Описание:
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
Процедура ЗагрузитьЗначенияПоказателяВКолонку(ВыборкаПоказателя, ОписаниеТаблицы)
	
	Отбор = Новый Структура("ЭлементОтчета", ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета) ;
	Колонки = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
	Если Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеТаблицы.СтрокаРесурсов = Неопределено Тогда
		ОписаниеТаблицы.СтрокаРесурсов = СтрСоединить(ОписаниеТаблицы.Ресурсы,",");
	КонецЕсли;
	
	ЗначенияПоказателя = ОписаниеТаблицы.ЗначенияПоказателей.СкопироватьКолонки();
	ПериодыЗначений = Новый Соответствие;
	
	Для каждого Колонка Из Колонки Цикл 
		
		Если ЗначениеЗаполнено(Колонка.Отбор) Тогда
			ЗначенияКолонки = ВыборкаПоказателя.НайтиСтроки(Колонка.Отбор); 
		Иначе
			ЗначенияКолонки = ВыборкаПоказателя;
		КонецЕсли;
		
		Для Каждого Ячейка Из ЗначенияКолонки Цикл
			Период = Новый Структура("ДатаНачала,ДатаОкончания", Ячейка.ДатаНачала, Ячейка.ДатаОкончания);
			ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
			
			НоваяСтрокаЗначений = ЗначенияПоказателя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, Ячейка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, ОписаниеТаблицы.ТекущийПоказатель);
			НоваяСтрокаЗначений[Колонка.ИмяКолонки] = Ячейка.Значение;
			Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
				ИдСтрокиОтчета = Ячейка[Измерение];
				ЗаполнитьРасшифровкуЯчейки(ИдСтрокиОтчета, Колонка, ОписаниеТаблицы, ПериодыЗначений);
			КонецЦикла;
			Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
				ИдСтрокиОтчета = Ячейка[Измерение];
				ЗаполнитьРасшифровкуЯчейки(ИдСтрокиОтчета, Колонка, ОписаниеТаблицы, ПериодыЗначений);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
		Группировка = "ДатаНачала,ДатаОкончания";
		Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
			Группировка = Группировка + "," + Измерение;
		КонецЦикла;
		ЗагрузитьВТаблицуЗначений(ЗначенияПоказателя, ОписаниеТаблицы.ЗначенияПоказателей);
		
		ТекущаяКолонка = ОписаниеТаблицы.ДеревоКолонок.Строки.Найти(ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета, "ЭлементОтчета");
		Если ТекущаяКолонка <> Неопределено Тогда
			Для каждого ПодчиненнаяКолонка Из ТекущаяКолонка.Строки Цикл
				ОписаниеТаблицы.ТекущийПоказатель = ПодчиненнаяКолонка;
				ЗагрузитьЗначенияПоказателяВКолонку(ВыборкаПоказателя, ОписаниеТаблицы);
			КонецЦикла;
			ОписаниеТаблицы.ТекущийПоказатель = ТекущаяКолонка;
		КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ВыборкаПоказателя - ТаблицаЗначений - Описание:
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
Процедура ЗагрузитьЗначенияПоказателяВСтроку(ВыборкаПоказателя, ГруппировкиПоказателя, ОписаниеТаблицы, ПериодОтчета)
	
	Отбор = Новый Структура("УровеньИтога", -2);
	ДетальныеКолонки = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
	ПериодыЗначений = Новый Соответствие;
	ЗначенияПоказателя = ОписаниеТаблицы.ЗначенияПоказателей.СкопироватьКолонки();
	
	ЭтотПоказатель = ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета;
	ЭтоОстаток = Ложь;
	ТипИтогаПоказателя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Неопределено, "ТипИтога", ЭтотПоказатель.РеквизитыВидаЭлемента);
	Если ТипИтогаПоказателя = Перечисления.ТипыИтогов.Сальдо Или ТипИтогаПоказателя = Перечисления.ТипыИтогов.СальдоДт 
				Или ТипИтогаПоказателя = Перечисления.ТипыИтогов.СальдоКт Тогда
		ЭтоОстаток = Истина;
	КонецЕсли;
	ОписаниеПоказателя = ОписаниеТаблицы.Показатели[ЭтотПоказатель];
	
	СтандартныеКолонки = "КодСтроки,Примечание,Показатель,Значение,ДатаОкончания";
	
	// Заполнить детальные колонки строки
	Для Каждого Колонка Из ДетальныеКолонки Цикл
		
		ДанныеЗаПериод = Ложь;
		
		Если ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда 
			
			КолонкиПоказателя = СтандартныеКолонки;
			Для каждого ЭлементОтбора Из Колонка.Отбор Цикл
				КолонкиПоказателя = КолонкиПоказателя + "," + ЭлементОтбора.Ключ;
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Дата") Тогда
					КолонкиПоказателя = КолонкиПоказателя + ",ДатаНачала";
					ДанныеЗаПериод = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ОписаниеПоказателя <> Неопределено И ОписаниеПоказателя.Свойство("Субконто") Тогда
				Для каждого СубконтоПоказателя Из ОписаниеПоказателя.Субконто Цикл
					Если СтрНайти(КолонкиПоказателя, ","+  СубконтоПоказателя.Ключ) = 0 Тогда
						КолонкиПоказателя = КолонкиПоказателя + "," + СубконтоПоказателя.Ключ;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Колонка.Отбор) Тогда
				ВыборкаПоКолонкамПоказателя = ВыборкаПоказателя.Скопировать(Колонка.Отбор, КолонкиПоказателя);
			Иначе
				ВыборкаПоКолонкамПоказателя = ВыборкаПоказателя.Скопировать(, КолонкиПоказателя);
			КонецЕсли;
			
			Если НЕ ВыборкаПоКолонкамПоказателя.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоОстаток Или (НЕ ЭтоОстаток И ДанныеЗаПериод) Тогда
				ВыборкаПоКолонкамПоказателя.Сортировать("ДатаОкончания Убыв"); 
				ОтборПоДате = Новый Структура("ДатаОкончания", ВыборкаПоКолонкамПоказателя[0].ДатаОкончания);
				ВыборкаПоКолонкамПоказателя = ВыборкаПоКолонкамПоказателя.Скопировать(ОтборПоДате);
			КонецЕсли;
			ВыборкаПоКолонкамПоказателя.Свернуть(СтрЗаменить(КолонкиПоказателя, ",Значение", ""), "Значение");
			
		Иначе
			
			Если ЗначениеЗаполнено(Колонка.Отбор) Тогда
				ВыборкаПоКолонкамПоказателя = ВыборкаПоказателя.НайтиСтроки(Колонка.Отбор);
			Иначе
				ВыборкаПоКолонкамПоказателя = ВыборкаПоказателя;
			КонецЕсли;
			
		КонецЕсли;      
			
		ЗаполнитьРасшифровку = Ложь;
		
		Для Каждого Ячейка Из ВыборкаПоКолонкамПоказателя Цикл
			
			Период = ОписаниеПериода(Ячейка.ДатаНачала, Ячейка.ДатаОкончания);
			ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
			
			НоваяСтрокаЗначений = ЗначенияПоказателя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, Ячейка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначений, ОписаниеТаблицы.ТекущийПоказатель);
			Если ОписаниеТаблицы.ЭтоПроизвольная И Колонка.ЭлементОтчета = ОписаниеТаблицы.КолонкаПоказателя
				ИЛИ НЕ ОписаниеТаблицы.ЭтоПроизвольная Тогда
				НоваяСтрокаЗначений[Колонка.ИмяКолонки] = Ячейка.Значение;
				ЗаполнитьРасшифровку = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполнитьРасшифровку Тогда
			Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
				ДанныеРасшифровки = ОписаниеТаблицы.СтрокаПоказателя;
			Иначе
				ДанныеРасшифровки = ЭтотПоказатель;
			КонецЕсли;
			ЗаполнитьРасшифровкуЯчейки(ДанныеРасшифровки, Колонка, ОписаниеТаблицы, ПериодыЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТаблицы.СтрокаРесурсов = Неопределено Тогда
		ОписаниеТаблицы.СтрокаРесурсов = СтрСоединить(ОписаниеТаблицы.Ресурсы, ",");
	КонецЕсли;
	
	Группировка = "ЭлементОтчета,НаименованиеДляПечати,КодСтрокиОтчета,Примечание";
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияСтрок Цикл
		Группировка = Группировка + "," + Измерение;
	КонецЦикла;
	Для Каждого Измерение Из ОписаниеТаблицы.ИзмеренияТаблицы Цикл
		Группировка = Группировка + "," + Измерение;
	КонецЦикла;
	Если ЗначениеЗаполнено(ГруппировкиПоказателя) Тогда
		Для Каждого ЗначениеГруппировки Из ГруппировкиПоказателя Цикл
			Группировка = Группировка + "," + ЗначениеГруппировки.Ключ;
			ЗначенияПоказателя.ЗаполнитьЗначения(ЗначениеГруппировки.Значение, ЗначениеГруппировки.Ключ);
		КонецЦикла;
	КонецЕсли;
	ЗначенияПоказателя.Свернуть(Группировка, ОписаниеТаблицы.СтрокаРесурсов);
	Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
		ЗначенияПоказателя.Колонки.Добавить("СтрокаТаблицы");
		ЗначенияПоказателя.ЗаполнитьЗначения(ОписаниеТаблицы.СтрокаПоказателя, "СтрокаТаблицы");
	КонецЕсли;
	
	// Рассчитать итоги строки
	Отбор = Новый Структура("УровеньИтога");
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтога = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтога Цикл
			Для Каждого СтрокаЗначений Из ЗначенияПоказателя Цикл
				СтрокаЗначений[Колонка.ИмяКолонки] = ИтогПоСтроке(СтрокаЗначений, Колонка, ПериодыЗначений);
			КонецЦикла;
			Если ЗначенияПоказателя.Количество() Тогда
				ЗаполнитьРасшифровкуЯчейки(ЭтотПоказатель, Колонка, ОписаниеТаблицы, ПериодыЗначений);
			КонецЕсли;
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
	ЗагрузитьВТаблицуЗначений(ЗначенияПоказателя, ОписаниеТаблицы.ЗначенияПоказателей);
	
КонецПроцедуры

Процедура РассчитатьГоризонтальныеИтоги(ОписаниеТаблицы)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	ПериодыЗначений = Новый Соответствие;
	
	Отбор = Новый Структура("УровеньИтога");
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтога = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтога Цикл
			Если НЕ Колонка.Операнды.Количество() Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого СтрокаЗначений Из ЗначенияПоказателей Цикл
				Период = Новый Структура("ДатаНачала,ДатаОкончания",СтрокаЗначений.ДатаНачала, СтрокаЗначений.ДатаОкончания);
				ПериодыЗначений.Вставить(Колонка.ИмяКолонки, Период);
				СтрокаЗначений[Колонка.ИмяКолонки] = ИтогПоСтроке(СтрокаЗначений, Колонка, ПериодыЗначений);
			КонецЦикла;
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ДеревоКолонок - см. ОписаниеДереваКолонокОтчета
// 	ВыборкаЗначений - ТаблицаЗначений, Неопределено - Описание:
// 	ОписаниеТаблицы - см. ОписаниеТаблицы
// 	КолонкаОтчета - см. ОписаниеДереваКолонокОтчета
// 	Отбор - Структура - Отбор отчета
// 	КолонкиГруппировки - Строка 
//
Процедура СформироватьДеревоГоризонтальныхИтогов(ДеревоКолонок, ВыборкаЗначений, ОписаниеТаблицы, КолонкаОтчета, Отбор = Неопределено, Знач КолонкиГруппировки = "")
	
	Если НЕ ЗначениеЗаполнено(Отбор) Тогда
		Отбор = Новый Структура;
		ОписаниеТаблицы.НомерКолонки = 1;
		Данные = ВыборкаЗначений.Скопировать();
	Иначе
		Данные = ВыборкаЗначений.Скопировать(Отбор);
	КонецЕсли;
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	ПредставлениеПериодаНаименование = Перечисления.ПредставлениеПериода.Наименование;
	
	Для Каждого Колонка Из ДеревоКолонок.Строки Цикл
		
		Если Колонка.ВидЭлемента = ВидыЭлементов.Группа Тогда
			
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			СформироватьДеревоГоризонтальныхИтогов(Колонка, ВыборкаЗначений, ОписаниеТаблицы, НоваяКолонкаОтчета, Отбор, КолонкиГруппировки);
			Если НоваяКолонкаОтчета <> КолонкаОтчета И ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + НоваяКолонкаОтчета.ПодчиненныхЭлементов;
			КонецЕсли;
			
		ИначеЕсли Колонка.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И Колонка.ВыводитьЗаголовокЭлемента Тогда
			
			Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
			КонецЕсли;
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			ИмяКолонки = Колонка.ИдентификаторЭлемента + "_" + Строка(ОписаниеТаблицы.НомерКолонки);
			ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы, Истина);
			
		ИначеЕсли Колонка.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			
			Если Не  Отбор.Свойство("Показатель") И ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
				МассивПоказателей = Новый Массив;
				ПодчиненныеПоказателиСубконто(ОписаниеТаблицы, Колонка, ВидыЭлементов, МассивПоказателей);
				Если МассивПоказателей.Количество() Тогда
					Данные.Очистить();
					Для каждого ПоказательСубконто Из МассивПоказателей Цикл
						ОтборПоПоказателю = Новый Структура(Новый ФиксированнаяСтруктура(Отбор));
						ОтборПоПоказателю.Вставить("Показатель", ПоказательСубконто);
						ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Данные, ВыборкаЗначений.Скопировать(ОтборПоПоказателю) );
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
			
			КолонкиГруппировкиТекущие = КолонкиГруппировки + ?(ПустаяСтрока(КолонкиГруппировки),"",",") + Колонка.ИмяКолонки;
			ДанныеГруппировки = Данные.Скопировать();
			ДанныеГруппировки.Свернуть(КолонкиГруппировкиТекущие);
			Для Каждого ДанныеКолонки Из ДанныеГруппировки Цикл
				
				ЗначениеИзмерения = ДанныеКолонки[Колонка.ИмяКолонки];
				НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
				Если Колонка.ПредставлениеПериода = ПредставлениеПериодаНаименование Тогда
					НоваяКолонкаОтчета.НаименованиеДляПечати = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(
																	ЗначениеИзмерения,Колонка.Периодичность,ОписаниеТаблицы.ЯзыкОтчета);
				Иначе
					НоваяКолонкаОтчета.НаименованиеДляПечати = Формат(ЗначениеИзмерения, "Л=" + ОписаниеТаблицы.ЯзыкОтчета + "; ДЛФ=DD");
				КонецЕсли;
				Если Колонка.Строки.Количество() Тогда
					Отбор.Вставить(Колонка.ИмяКолонки, ЗначениеИзмерения);
					СформироватьДеревоГоризонтальныхИтогов(Колонка, ВыборкаЗначений, ОписаниеТаблицы, НоваяКолонкаОтчета, Отбор, КолонкиГруппировкиТекущие);
					Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
						КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + НоваяКолонкаОтчета.ПодчиненныхЭлементов;
					КонецЕсли;
					Отбор.Удалить(Колонка.ИмяКолонки);
					
				Иначе
					Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
						КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
					КонецЕсли;
					ИмяКолонки = Колонка.ИмяКолонки + Строка(ОписаниеТаблицы.НомерКолонки);
					Отбор.Вставить(Колонка.ИмяКолонки, ЗначениеИзмерения);
					ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы);
					Отбор.Удалить(Колонка.ИмяКолонки);
					
				КонецЕсли;
				
			КонецЦикла;// по уникальным значениям текущего измерения
			
		Иначе
			
			НоваяКолонкаОтчета = КолонкаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКолонкаОтчета, Колонка);
			
			ИмяКолонки = Колонка.ИдентификаторЭлемента + "_" + Строка(ОписаниеТаблицы.НомерКолонки);
			ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы);
			
			Если Не ОписаниеТаблицы.ЭтоПроизвольная Тогда
				Отбор.Вставить("Показатель", Колонка.ЭлементОтчета);
			КонецЕсли;
			СформироватьДеревоГоризонтальныхИтогов(Колонка, ВыборкаЗначений, ОписаниеТаблицы, НоваяКолонкаОтчета, Отбор, КолонкиГруппировки);
			
			Если ТипЗнч(КолонкаОтчета) = Тип("СтрокаДереваЗначений") Тогда
				КолонкаОтчета.ПодчиненныхЭлементов = КолонкаОтчета.ПодчиненныхЭлементов + 1;
			КонецЕсли;
			
			Если НоваяКолонкаОтчета.ПодчиненныхЭлементов > 0 Тогда
				Описание = НоваяКолонкаОтчета.Описание; 
				Описание.ЭтоИтог = Истина;
			КонецЕсли;
			
			Отбор.Удалить("Показатель");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
// 	ИмяКолонки - Строка -
// 	НоваяКолонкаОтчета - см. ОписаниеДереваКолонокОтчета
// 	Отбор - Неопределено, Структура - Описание: 
// 	ОписаниеТаблицы - см. ОписаниеТаблицы
// 	ЭтоИтог - Булево - Описание
Процедура ДобавитьКолонкуТаблицы(ИмяКолонки, НоваяКолонкаОтчета, Отбор, ОписаниеТаблицы, ЭтоИтог = Ложь)
	
	ЗначенияПоказателей = ОписаниеТаблицы.ЗначенияПоказателей;
	
	НоваяКолонкаОтчета.ИмяКолонки = ИмяКолонки;
	Если ЗначенияПоказателей.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	ЗначенияПоказателей.Колонки.Добавить(ИмяКолонки, ТипЧисло, НоваяКолонкаОтчета.НаименованиеДляПечати);
	
	ОписаниеКолонки = ОписаниеТаблицы.КолонкиОтчета.Добавить(); // СтрокаТаблицыЗначений - см. ОписаниеКолонокОтчета
	ЗаполнитьЗначенияСвойств(ОписаниеКолонки, НоваяКолонкаОтчета);
	УровеньИтога = ?(ЭтоИтог,НоваяКолонкаОтчета.Уровень() - 1,-2);
	ОписаниеКолонки.УровеньИтога = УровеньИтога;
	ОписаниеКолонки.ИмяКолонки = ИмяКолонки;
	ОписаниеКолонки.Операнды = Новый Массив;
	ОписаниеКолонки.Отбор = ОбщегоНазначения.СкопироватьРекурсивно(Отбор);
	ОписаниеКолонки.ЭтоИтог = ЭтоИтог;
	
	НоваяКолонкаОтчета.Описание = ОписаниеКолонки;
	
	ОписаниеТаблицы.Ресурсы.Добавить(ИмяКолонки);
	ОписаниеТаблицы.ВсегоУровнейКолонок = Макс(УровеньИтога, ОписаниеТаблицы.ВсегоУровнейКолонок);
	ОписаниеТаблицы.НомерКолонки = ОписаниеТаблицы.НомерКолонки + 1;
	
КонецПроцедуры

Функция НайтиРодительскийИтог(Знач ВеткаДерева, ВидЭлементаИтог)
	
	ИмяКолонки = ВеткаДерева.ИмяКолонки;
	Пока ЗначениеЗаполнено(ВеткаДерева) Цикл
		Итог = ВеткаДерева.Строки.Найти(ВидЭлементаИтог,"ВидЭлемента");
		Если ЗначениеЗаполнено(Итог) И Итог.ИмяКолонки <> ИмяКолонки Тогда
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(Итог) И Итог.ИмяКолонки = ИмяКолонки Тогда
			Итог = Неопределено;
		КонецЕсли;
		ВеткаДерева = ВеткаДерева.Родитель;
	КонецЦикла;
	Возврат Итог;
	
КонецФункции

Процедура ДобавитьОперандИтога(ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы)
	
	КолонкаШапки = ДеревоИтогов.Строки.Найти(ИмяКолонки,"ИмяКолонки", Истина);
	Итог = НайтиРодительскийИтог(КолонкаШапки, ОписаниеТаблицы.ВидыЭлементов.ИтогПоГруппе);
	Если ЗначениеЗаполнено(Итог) Тогда
		ОписаниеИтога = ОписаниеТаблицы.КолонкиОтчета.Найти(Итог.ИмяКолонки,"ИмяКолонки");
		Если ЗначениеЗаполнено(ОписаниеИтога) Тогда
			ОписаниеИтога.Операнды.Добавить(ИмяКолонки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСоставОперандовГоризонтальныхИтогов(ДеревоИтогов, ОписаниеТаблицы)
	
	Отбор = Новый Структура("УровеньИтога", -2);
	ДетальныеКолонки = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
	
	Для Каждого Колонка Из ДетальныеКолонки Цикл
		ДобавитьОперандИтога(Колонка.ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы);
	КонецЦикла;
	
	УровеньИтога = ОписаниеТаблицы.ВсегоУровнейКолонок;
	Для Сч = 0 По ОписаниеТаблицы.ВсегоУровнейКолонок Цикл
		
		Отбор.УровеньИтога = УровеньИтога;
		КолонкиИтогов = ОписаниеТаблицы.КолонкиОтчета.НайтиСтроки(Отбор);
		Для Каждого Колонка Из КолонкиИтогов Цикл
			ДобавитьОперандИтога(Колонка.ИмяКолонки, ДеревоИтогов, ОписаниеТаблицы);
		КонецЦикла;
		УровеньИтога = УровеньИтога - 1;
		
	КонецЦикла;
	
	ШапкаТаблицы = ДеревоИтогов.Скопировать();
	ШапкаТаблицы.Строки.Очистить();
	СформироватьШапкуТаблицы(ДеревоИтогов, ШапкаТаблицы, ОписаниеТаблицы.КоличествоУровнейШапки, ОписаниеТаблицы.ТаблицаПоказателиВКолонках);
	ОписаниеТаблицы.Вставить("ШапкаТаблицы", ШапкаТаблицы);
	
КонецПроцедуры

Процедура СформироватьШапкуТаблицы(ДеревоИтогов, ШапкаТаблицы, ГлубинаВсего = 0, ПоказателиВКолонках = Ложь)
	
	Для Каждого Заголовок Из ДеревоИтогов.Строки Цикл
		НовыйЗаголовок = ШапкаТаблицы;
		Если  Заголовок.ВыводитьЗаголовокЭлемента Тогда
			НовыйЗаголовок = ШапкаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЗаголовок, Заголовок);
		ИначеЕсли Заголовок.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
			НовыйЗаголовок = ШапкаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЗаголовок, Заголовок);
			НовыйЗаголовок.НаименованиеДляПечати = "";
		КонецЕсли;
		СформироватьШапкуТаблицы(Заголовок, НовыйЗаголовок, ГлубинаВсего, ПоказателиВКолонках);
		Если НовыйЗаголовок.Строки.Количество() = 0 И ТипЗнч(НовыйЗаголовок) = Тип("СтрокаДереваЗначений") Тогда
			ГлубинаВсего = Макс(ГлубинаВсего, НовыйЗаголовок.Уровень());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуЯчейки(ИдСтрокиОтчета,ДанныеКолонки, ОписаниеТаблицы, ПериодыКолонок = Неопределено)
	
	РасшифровкаСтроки = ОписаниеТаблицы.Расшифровка[ИдСтрокиОтчета];
	Если РасшифровкаСтроки = Неопределено Тогда
		РасшифровкаСтроки = Новый Соответствие;
		ОписаниеТаблицы.Расшифровка.Вставить(ИдСтрокиОтчета, РасшифровкаСтроки);
	КонецЕсли;
	
	РасшифровкаЯчейки = РасшифровкаСтроки[ДанныеКолонки.ИмяКолонки];
	Если РасшифровкаЯчейки = Неопределено Тогда
		РасшифровкаЯчейки = Новый Структура("Показатель, ДатаНачала, ДатаОкончания, ВидЭлемента, СчетПланаСчетов, НемонетарныйПоказатель, Отбор, Точность");
		ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ОписаниеТаблицы.ТекущийПоказатель);
		РасшифровкаЯчейки.Показатель = ОписаниеТаблицы.ТекущийПоказатель.ЭлементОтчета;
		РасшифровкаСтроки.Вставить(ДанныеКолонки.ИмяКолонки, РасшифровкаЯчейки);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ДанныеКолонки);
	
	Если ПериодыКолонок <> Неопределено И ПериодыКолонок[ДанныеКолонки.ИмяКолонки] <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РасшифровкаЯчейки, ПериодыКолонок[ДанныеКолонки.ИмяКолонки]);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДеревоВертикальныхИтогов(ДеревоСтрок, ОписаниеТаблицы, СтрокаОтчета, Отбор = Неопределено)
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	ПредставлениеПериодаНаименование = Перечисления.ПредставлениеПериода.Наименование;
	
	Для Каждого Строка Из ДеревоСтрок.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Отбор) Тогда
			Отбор = Новый Структура;
			Если ОписаниеТаблицы.ЭтоПроизвольная И Строка.ВидЭлемента = ВидыЭлементов.ЭлементТаблицы Тогда
				Отбор.Вставить("СтрокаТаблицы", Строка.ЭлементОтчета);
				Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(Отбор);
			Иначе
				Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать();
			КонецЕсли;
		Иначе
			Если ОписаниеТаблицы.ЭтоПроизвольная И Строка.ВидЭлемента = ВидыЭлементов.ЭлементТаблицы Тогда
				Отбор.Вставить("СтрокаТаблицы", Строка.ЭлементОтчета);
			КонецЕсли;
			Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(Отбор);
		КонецЕсли;
		
		Если Строка.ВидЭлемента = ВидыЭлементов.Группа Тогда
			
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			СформироватьДеревоВертикальныхИтогов(Строка, ОписаниеТаблицы, НоваяСтрокаОтчета, Отбор);
			РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы);
			
		ИначеЕсли Строка.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И Строка.ВыводитьЗаголовокЭлемента И НЕ Строка.ЭтоСвязанный Тогда
			
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			
		ИначеЕсли Строка.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			
			Если Не  Отбор.Свойство("ЭлементОтчета") И Не ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
				МассивПоказателей = Новый Массив;
				ПодчиненныеПоказателиСубконто(ОписаниеТаблицы, Строка, ВидыЭлементов, МассивПоказателей);
				Если МассивПоказателей.Количество() Тогда
					Данные.Очистить();
					Для каждого ПоказательСубконто Из МассивПоказателей Цикл
						ОтборПоПоказателю = Новый Структура(Новый ФиксированнаяСтруктура(Отбор));
						ОтборПоПоказателю.Вставить("ЭлементОтчета", ПоказательСубконто);
						ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Данные, ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(ОтборПоПоказателю) );
					КонецЦикла; 
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.Строки.Количество() Тогда
				Данные.Свернуть(Строка.ИмяКолонки);
			Иначе
				Данные.Свернуть(Строка.ИмяКолонки, ОписаниеТаблицы.СтрокаРесурсов);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Сортировка) Тогда
				Данные.Сортировать(Строка.ИмяКолонки + " " + Строка.Сортировка);
			Иначе
				Данные.Сортировать(Строка.ИмяКолонки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Точность) Тогда
				Точность = Строка.Точность;
			Иначе
				Точность = 0;
			КонецЕсли;
			
			Для Каждого ДанныеСтроки Из Данные Цикл
				
				ЗначениеИзмерения = ДанныеСтроки[Строка.ИмяКолонки];
				ВидСубконто = Строка.ВидСубконто;// Структура
				Если ЗначениеЗаполнено(Строка.ВидСубконто) 
							И  Не ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеИзмерения))  Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, ДанныеСтроки);
				НоваяСтрокаОтчета.Точность = Точность;
				Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
					ЗаполнитьТочностьСтрокиПроизвольнойТаблицы(НоваяСтрокаОтчета, ОписаниеТаблицы, Строка.ЭлементОтчета);
				КонецЕсли;
				НоваяСтрокаОтчета.ЗначениеГруппировки = ЗначениеИзмерения;
				Если Строка.ПредставлениеПериода = ПредставлениеПериодаНаименование Тогда
					НоваяСтрокаОтчета.НаименованиеДляПечати = ФинансоваяОтчетностьСервер.ПредставлениеИнтервала(
																	ЗначениеИзмерения,Строка.Периодичность,ОписаниеТаблицы.ЯзыкОтчета);
				Иначе
					НоваяСтрокаОтчета.НаименованиеДляПечати = Формат(ЗначениеИзмерения, "Л=" + ОписаниеТаблицы.ЯзыкОтчета + "; ДЛФ=DD");
				КонецЕсли;
				Если Строка.Строки.Количество() Тогда
					Отбор.Вставить(Строка.ИмяКолонки, ЗначениеИзмерения);
					СформироватьДеревоВертикальныхИтогов(Строка, ОписаниеТаблицы, НоваяСтрокаОтчета, Отбор);
					РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы);
					Отбор.Удалить(Строка.ИмяКолонки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(Отбор) Тогда
				Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать();
			Иначе
				Данные = ОписаниеТаблицы.ЗначенияПоказателей.Скопировать(Отбор);
			КонецЕсли;
			
		Иначе
			
			НоваяСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтчета, Строка);
			Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
				ЗаполнитьТочностьСтрокиПроизвольнойТаблицы(НоваяСтрокаОтчета, ОписаниеТаблицы, Строка.ЭлементОтчета);
			КонецЕсли;
			Если Строка.ВидЭлемента <> ВидыЭлементов.ЭлементТаблицы Тогда
				Отбор.Вставить("ЭлементОтчета", Строка.ЭлементОтчета);
			КонецЕсли;
			СформироватьДеревоВертикальныхИтогов(Строка, ОписаниеТаблицы, НоваяСтрокаОтчета, Отбор);
			РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы);
			ЗаполнитьРесурсыТаблицы(НоваяСтрокаОтчета, Данные, ОписаниеТаблицы);
			
			Если Отбор  <> Неопределено Тогда
				Отбор.Удалить("ЭлементОтчета");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРесурсыТаблицы(НоваяСтрокаОтчета, ЗначенияРесурсов, ОписаниеТаблицы)
	
	Если ЗначенияРесурсов.Количество() Тогда
		Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
			Отбор = Новый Структура("СтрокаТаблицы", НоваяСтрокаОтчета.ЭлементОтчета);
			РесурсыСтроки = ЗначенияРесурсов.НайтиСтроки(Отбор);
			Если РесурсыСтроки.Количество() Тогда
				Для Каждого Ресурс Из ОписаниеТаблицы.Ресурсы Цикл
					НоваяСтрокаОтчета[Ресурс] = ИтогПоКолонке(РесурсыСтроки, Ресурс, ОписаниеТаблицы);
				КонецЦикла;
			КонецЕсли;
		Иначе
			РесурсыСтроки = ЗначенияРесурсов.НайтиСтроки(Новый Структура("ЭлементОтчета", НоваяСтрокаОтчета.ЭлементОтчета));
			МассивРесурсов = СтрРазделить(ОписаниеТаблицы.СтрокаРесурсов,",");
			Если РесурсыСтроки.Количество() Тогда
				Для каждого РесурсТаблицы Из МассивРесурсов Цикл 
					НоваяСтрокаОтчета[РесурсТаблицы] = 0;
					Для каждого РесурсСтроки Из РесурсыСтроки Цикл
						НоваяСтрокаОтчета[РесурсТаблицы] = НоваяСтрокаОтчета[РесурсТаблицы]
						+ РесурсСтроки[РесурсТаблицы];
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьВертикальныеИтоги(НоваяСтрокаОтчета, ОписаниеТаблицы)
	
	Отбор = Новый Структура("ВидЭлемента,ЭтоСвязанный",ОписаниеТаблицы.ВидыЭлементов.ИтогПоГруппе,Ложь);
	Строки = НоваяСтрокаОтчета.Строки.НайтиСтроки(Отбор);
	ИтогПоГруппе = Неопределено;
	Если Строки.Количество() Тогда
		ИтогПоГруппе = Строки[0];
	КонецЕсли;
	ОбратныйЗнак = 1;
	Если ИтогПоГруппе <> Неопределено И ИтогПоГруппе.ОбратныйЗнак Тогда
		ОбратныйЗнак = -1;
	КонецЕсли;
	
	Для Каждого Имя Из ОписаниеТаблицы.Ресурсы Цикл
		ЗначениеИтога = ОбратныйЗнак * НоваяСтрокаОтчета.Строки.Итог(Имя);
		НоваяСтрокаОтчета[Имя] = ЗначениеИтога;
		Если ИтогПоГруппе <> Неопределено Тогда
			ИтогПоГруппе[Имя] = ЗначениеИтога;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИтогПоСтроке(ЗначенияОперандов, ОписаниеИтога, ПериодыЗначений);
	
	Итог = 0;
	Для Каждого Имя Из ОписаниеИтога.Операнды Цикл
		Итог = Итог + ЗначенияОперандов[Имя];
		ПериодОперанда = ПериодыЗначений[Имя]; // см. ОписаниеПериода
		ПериодИтога = ПериодыЗначений[ОписаниеИтога.ИмяКолонки]; // см. ОписаниеПериода
		Если ПериодИтога = Неопределено Тогда
			ПериодыЗначений.Вставить(ОписаниеИтога.ИмяКолонки, ПериодОперанда);
		ИначеЕсли ПериодОперанда <> Неопределено Тогда
			ПериодИтога.ДатаНачала = Мин(ПериодИтога.ДатаНачала,ПериодОперанда.ДатаНачала);
			ПериодИтога.ДатаОкончания = Макс(ПериодИтога.ДатаОкончания,ПериодОперанда.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	Итог = ?(ОписаниеИтога.ОбратныйЗнак,-1,1)*Итог;
	Возврат Итог;
	
КонецФункции

Функция ИтогПоКолонке(СтрокиТаблицы, ИмяКолонки, ОписаниеТаблицы)
	
	Результат = 0;
	Для Каждого Строка Из СтрокиТаблицы Цикл
		Результат = Результат + Строка[ИмяКолонки];
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТочностьСтрокиПроизвольнойТаблицы(СтрокаОтчета, ОписаниеТаблицы, Строка)
	
	Для каждого СтрокаРесурсов Из ОписаниеТаблицы.Ресурсы Цикл
		Колонка = ОписаниеТаблицы.КолонкиОтчета.Найти(СтрокаРесурсов, "ИмяКолонки");
		Если Колонка = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Показатель = Неопределено;
		
		Для каждого ПоказательТаблицы Из ОписаниеТаблицы.Показатели Цикл
			АдресЯчейки = ПоказательТаблицы.Значение; // см. ОписаниеПоказателя
			Если АдресЯчейки.Строка = Строка И ПоказательТаблицы.Значение.Колонка = Колонка.ЭлементОтчета Тогда
				Показатель =  ПоказательТаблицы.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;  
		
		Если Показатель <> Неопределено Тогда
			ТочностьПоказателя = ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(Неопределено,"Точность", Показатель.РеквизитыВидаЭлемента);
			СтрокаОтчета[СтрокаРесурсов + "_Точность"] = ТочностьПоказателя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоказателиПроизвольнойТаблицы(ЯчейкиТаблицы, ЭлементыТаблицы, Параметры, ЭтоКолонки = Ложь)
	
	Для Каждого ЭлементЯчейки Из ЯчейкиТаблицы.Строки Цикл
		Если ЭтоПоказатель(ЭлементЯчейки.ВидЭлемента, Параметры.ВидыЭлементов, ЭлементЯчейки.ЭтоСвязанный) Тогда
			ЭлементОтчета = ЯчейкиТаблицы.ЭлементОтчета; // Структура - 
			АдресЯчейки = ЭлементОтчета.ЭлементыТаблицы.Найти(ЭлементЯчейки.ЭлементОтчета,"Элемент"); 
			Если АдресЯчейки <> Неопределено Тогда
				
				Описание = ОписаниеПоказателя(ЭлементЯчейки, АдресЯчейки.Строка, АдресЯчейки.Колонка);
				Описание.Вставить("Субконто", Новый Структура);
				ЭлементыТаблицы.Показатели.Вставить(ЭлементЯчейки.ЭлементОтчета, Описание);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементТаблицыИзмерение(ЭлементыТаблицы, Элемент, ДопСуффикс, ЭтоКолонки, ВидыЭлементов, ВидТаблицы)
	
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	ИдентификаторЭлемента = ИдентификаторЭлемента(Элемент);
	ЭтоПериод = Элемент.ТипИзмерения = ТипыИзмерений.Период;
	ЭтоСубконто = Элемент.ТипИзмерения = ТипыИзмерений.Субконто;
	
	Если ЭтоПериод Тогда
		
		ИменаПериодов = Новый Соответствие;
		ИменаПериодов.Вставить(Перечисления.Периодичность.День, "ПериодДень");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Неделя, "ПериодНеделя");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Декада, "ПериодДекада");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Месяц, "ПериодМесяц");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Квартал, "ПериодКвартал");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Полугодие, "ПериодПолугодие");
		ИменаПериодов.Вставить(Перечисления.Периодичность.Год, "ПериодГод");
		
		Данные = Новый Структура("Периодичность", Элемент.Периодичность);
		Данные.Вставить("ВыводитьПоказателиАналогичныхПериодовПрошлыхЛет",Элемент.ВыводитьПоказателиАналогичныхПериодовПрошлыхЛет);
		Данные.Вставить("ВыводитьПоказателиПредыдущихПериодов",Элемент.ВыводитьПоказателиПредыдущихПериодов);
		Данные.Вставить("КоличествоПредыдущихЛет",Элемент.КоличествоПредыдущихЛет);
		Данные.Вставить("КоличествоПредыдущихПериодов",Элемент.КоличествоПредыдущихПериодов);
		Данные.Вставить("Представление",Элемент.НаименованиеДляПечати);
		Данные.Вставить("Сортировка", ?(ЗначениеЗаполнено(Элемент.Сортировка),Элемент.Сортировка,"ВОЗР"));
		ЭлементыТаблицы.Периодичность.Добавить(Данные);
		ИмяКолонки = Строка(ИменаПериодов[Элемент.Периодичность]);
		Данные.Вставить("ИмяКолонки", ИмяКолонки);
		Если НЕ ЭтоКолонки Тогда
			ЭлементыТаблицы.ИзмеренияСтрок.Добавить(ИмяКолонки);
		КонецЕсли;
		
	ИначеЕсли ЭтоСубконто Тогда
		
		Если ЭлементыТаблицы.Свойство("Субконто") Тогда
			НомерСубконтоШапки = ЭлементыТаблицы.Субконто.Количество() + 1;
		Иначе
			ЭлементыТаблицы.Вставить("Субконто",Новый Структура);
			НомерСубконтоШапки = 1;
		КонецЕсли; 
		
		Если (ЭтоКолонки И ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках)
					Или (Не ЭтоКолонки И ВидТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках) Тогда       
			ИмяКолонки = "АналитикаШапки" + НомерСубконтоШапки;
			ЭлементыТаблицы.Субконто.Вставить(ИмяКолонки, Элемент);
			ДанныеИзмерения = Новый Структура("Значение, Представление, Отбор", ИмяКолонки, ИмяКолонки, Неопределено);
			ЭлементыТаблицы.ИзмеренияРегистра.Добавить(ДанныеИзмерения);
			ЭлементыТаблицы.ИзмеренияТаблицы.Добавить(ИмяКолонки);
		Иначе 
			Если ЭлементыТаблицы.ОписаниеАналитик[Элемент] = Неопределено Тогда
				Субконто = Новый Структура();
				МассивЭлементов = Новый Массив;
				МассивЭлементов.Добавить(Элемент);
				ПодчиненныеСубконтоПоказателя(ЭлементыТаблицы, МассивЭлементов, Субконто, ВидыЭлементов,  1 ,ЭтоКолонки);
			КонецЕсли;
			НомерСубконто = ЭлементыТаблицы.ОписаниеАналитик[Элемент].НомерАналитики;
			Если Не ЭлементыТаблицы.ЭтоПроизвольная Тогда
				ИмяКолонки = "Аналитика" + НомерСубконто;
			Иначе
				ИмяКолонки = ?(ЭтоКолонки, "АналитикаКолонок", "АналитикаСтрок") + НомерСубконто;
			КонецЕсли;
			Если ЭлементыТаблицы.ИзмеренияСтрок.Найти(ИмяКолонки) = Неопределено Тогда
				ЭлементыТаблицы.ИзмеренияСтрок.Добавить(ИмяКолонки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТипИзмерения = ТипыИзмерений.ИзмерениеРегистраБухгалтерии Тогда
		
		ИмяКолонки = Элемент.ИмяИзмерения;
		ДанныеИзмерения = Новый Структура("Значение, Представление, Отбор", ИмяКолонки, Элемент.НаименованиеДляПечати, Неопределено);
		ЗначениеОтбора = Элемент.ДополнительныйОтбор; //ХранилищеЗначения
		Настройки = ЗначениеОтбора.Получить();
		Если Настройки <> Неопределено Тогда
			ДанныеИзмерения.Отбор = Настройки.Отбор;
		КонецЕсли;
		ЭлементыТаблицы.ИзмеренияРегистра.Добавить(ДанныеИзмерения);
		ЭлементыТаблицы.ИзмеренияТаблицы.Добавить(ИмяКолонки);
		
	КонецЕсли;
	
	ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента, ИмяКолонки);
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	ЭлементыТаблицы - см. ОписаниеТаблицы
// 	Элемент - СтрокаДереваЗначений - 
// 	ИдентификаторЭлемента - Строка - 
// 	ИмяКолонки - Строка - 
// 	РасположениеИтога - Число, Неопределено - 
Процедура ДобавитьВДеревоВывода(ЭлементыТаблицы, Элемент, ИдентификаторЭлемента, ИмяКолонки = "", РасположениеИтога = Неопределено)
	
	ТекущийУровень = ЭлементыТаблицы.ТекущийУровень; // КоллекцияСтрокДереваЗначений - 
	НоваяКолонка = ТекущийУровень.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяКолонка, Элемент);
	НоваяКолонка.ИдентификаторЭлемента = ИдентификаторЭлемента;
	Если Элемент.ВидЭлемента = ЭлементыТаблицы.ВидыЭлементов.ИтогПоГруппе Тогда
		Если Элемент.ВыводитьЗаголовокЭлемента = Истина Тогда
			НоваяКолонка.РасположениеИтога = РасположениеИтога;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяКолонка.Родитель) Тогда
			НоваяКолонка.Родитель.РасположениеИтога = НоваяКолонка.РасположениеИтога;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяКолонки) Тогда
		НоваяКолонка.ИмяКолонки = ИмяКолонки;
	КонецЕсли;
	
	ЭлементыТаблицы.ТекущийУровень = НоваяКолонка.Строки;
	ЭлементыТаблицы.ТекущийРодитель = НоваяКолонка;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыОтчета - Структура
// 	ОписаниеТаблицы - см. ОписаниеТаблицы
// Возвращаемое значение:
// 	Структура -см. НовыеПараметрыПолученияПоказателя 
Функция ПараметрыПолученияПоказателя(ПараметрыОтчета, ОписаниеТаблицы = Неопределено)
	
	ПараметрыПоказателя = НовыеПараметрыПолученияПоказателя();
	ПараметрыПоказателя.ПериодОтчета = ПараметрыОтчета.ПериодОтчета;
	ПараметрыПоказателя.ОтборОтчета = ПараметрыОтчета.Отбор;
	ПараметрыПоказателя.СообщенияОбОшибках = ПараметрыОтчета.СообщенияОбОшибках;
	ПараметрыПоказателя.Ресурс = ПараметрыОтчета.Ресурс;
	ПараметрыПоказателя.Вставить("ВидыЭлементов", ПараметрыОтчета.ВидыЭлементов);
	
	Если ОписаниеТаблицы <> Неопределено Тогда
		ПараметрыПоказателя.ПериодОтчета.Вставить("Периодичность", ОписаниеТаблицы.Периодичность);
		ПараметрыПоказателя.Измерения = ОписаниеТаблицы.ИзмеренияРегистра;
	Иначе
		ПараметрыПоказателя.ПериодОтчета.Вставить("Периодичность", Новый Массив);
	КонецЕсли;
	
	ПараметрыПоказателя.ИнтервалыОтчета = ИнтервалыОтчета(ПараметрыОтчета.ПериодОтчета);
	
	Возврат ПараметрыПоказателя;
	
КонецФункции

Функция ФинансовыеПериоды(Знач Периодичность, Знач НачалоПериода, Знач КонецПериода, Знач МинимальнаяДатаОтчета)
	
	ФинансовыеПериоды = Новый Массив;
	ТекущаяДатаКонцаПериода = НачалоПериода - 1;
	Пока ТекущаяДатаКонцаПериода > МинимальнаяДатаОтчета Цикл
		ФинансовыйПериод = Новый Структура("НачалоПериода, КонецПериода");
		ФинансовыйПериод.НачалоПериода = ДатаНачалаПериода(ТекущаяДатаКонцаПериода, Периодичность);
		ФинансовыйПериод.КонецПериода = ТекущаяДатаКонцаПериода;
		ФинансовыеПериоды.Добавить(ФинансовыйПериод);
		ТекущаяДатаКонцаПериода = ФинансовыйПериод.НачалоПериода - 1;
	КонецЦикла;
	
	ТекущаяДатаНачалаПериода = НачалоПериода;
	Пока ТекущаяДатаНачалаПериода <= КонецПериода Цикл
		ФинансовыйПериод = Новый Структура("НачалоПериода, КонецПериода");
		ФинансовыйПериод.НачалоПериода = ТекущаяДатаНачалаПериода;
		ФинансовыйПериод.КонецПериода = ДатаКонцаНовогоИнтервала(ТекущаяДатаНачалаПериода, Периодичность, КонецПериода);
		ФинансовыеПериоды.Добавить(ФинансовыйПериод);
		ТекущаяДатаНачалаПериода = ФинансовыйПериод.КонецПериода + 1;
	КонецЦикла;

	Возврат ФинансовыеПериоды;
	
КонецФункции

Функция ГраницыФинансовогоПериода(Знач Дата, Знач ФинансовыеПериоды)
	
	Результат = Неопределено;
	Для каждого Период Из ФинансовыеПериоды Цикл
		Если Дата >= Период.НачалоПериода И Дата <= Период.КонецПериода Тогда
			Результат = Период;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция ДатаКонцаНовогоИнтервала(Знач ДатаПериода, Знач Периодичность, Знач КонецПериода)
	
	ДатаКонцаПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 2);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 5);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ДатаКонцаПериода = ДобавитьМесяц(ДатаКонцаПериода, 11);
	Иначе
		ДатаКонцаПериода = КонецПериода;
	КонецЕсли;
	ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода);
	Если ДатаКонцаПериода > КонецПериода Тогда
		ДатаКонцаПериода = КонецПериода;
	КонецЕсли;
	Возврат ДатаКонцаПериода;
	
КонецФункции

Функция РазностьДатВМесяцах(Знач НачалоПериода, Знач КонецПериода)
	
	Результат = 0;
	ТекущаяДата = НачалоПериода;
	Пока ТекущаяДата < КонецПериода Цикл
		Результат = Результат + 1;
		ТекущаяДата = ДобавитьМесяц(ТекущаяДата, 1);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СравнительныйПериод(НачалоПериода, КонецПериода, Периодичность, Смещение)
	
	Результат = Новый Структура();
	Результат.Вставить("НачалоПериода");
	Результат.Вставить("КонецПериода");
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		Результат.НачалоПериода = ДобавитьМесяц(НачалоПериода, -Смещение);
		Результат.КонецПериода = ДобавитьМесяц(КонецПериода, -Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Результат.НачалоПериода = ДобавитьМесяц(НачалоПериода, -3 * Смещение);
		Результат.КонецПериода = ДобавитьМесяц(КонецПериода, -3 * Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Результат.НачалоПериода = ДобавитьМесяц(НачалоПериода, -6 * Смещение);
		Результат.КонецПериода = ДобавитьМесяц(КонецПериода, -6 * Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Результат.НачалоПериода = ДобавитьМесяц(НачалоПериода, -12 * Смещение);
		Результат.КонецПериода = ДобавитьМесяц(КонецПериода, -12 * Смещение);
	Иначе
		ВызватьИсключение НСтр("ru = 'Для периодичности не определены правила получения сравнительного периода';
								|en = 'Comparison period rules are not defined for the frequency'");
	КонецЕсли;
	
	Результат.НачалоПериода = КонецМесяца(Результат.НачалоПериода);
	Результат.КонецПериода = КонецМесяца(Результат.КонецПериода);
	
	Возврат Результат;
	
КонецФункции

Функция ДатаНачалаПериода(КонецПериода, Периодичность)
	
	НачалоПериода = КонецПериода + 1;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -1);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -3);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -6);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -12);
	Иначе
		ВызватьИсключение НСтр("ru = 'Для периодичности не определены правила получения сравнительного периода';
								|en = 'Comparison period rules are not defined for the frequency'");
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Показатель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * КодСтроки - Строка -
// * Примечание - Строка -
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// * ПериодГод - Дата - 
// * ПериодПолугодие - Дата -
// * ПериодКвартал - Дата -
// * ПериодМесяц - Дата -
Функция НоваяТаблицаИнтервалов()
	
	Интервалы = Новый ТаблицаЗначений;
	Интервалы.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов"));
	Интервалы.Колонки.Добавить("КодСтроки" , Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	Интервалы.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	Интервалы.Колонки.Добавить("ДатаНачала",				ТипДата);
	Интервалы.Колонки.Добавить("ДатаОкончания",				ТипДата);
	Интервалы.Колонки.Добавить("ПериодГод",					ТипДата);
	Интервалы.Колонки.Добавить("ПериодПолугодие",			ТипДата);
	Интервалы.Колонки.Добавить("ПериодКвартал",				ТипДата);
	Интервалы.Колонки.Добавить("ПериодМесяц",				ТипДата);
	
	Возврат Интервалы;
	
КонецФункции

// Параметры:
// 	Параметры - Структура - :
// 	 *БлокиОтчета - Массив из Структура - описание блоков отчета.
// 	ЭлементОтчета - СтрокаДереваЗначений
// 	ДанныеЭлемента - Структура
//
Процедура ДобавитьОписаниеБлокаОтчета(Параметры, ЭлементОтчета, ДанныеЭлемента)
	
	ОписаниеБлока = ОписаниеБлокаОтчета();
	
	ЗаполнитьЗначенияСвойств(ОписаниеБлока, ЭлементОтчета);
	ОписаниеБлока.Вставить("Описание", ДанныеЭлемента);
	
	Параметры.БлокиОтчета.Добавить(ОписаниеБлока);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенийПоказателей

// Параметры:
// 	Параметры - Структура - Описание:
// * СообщенияОбОшибках - Массив из СообщениеПользователю - 
// * Измерения - СписокЗначений
// * Субконто - Структура Из КлючИЗначение - 
// * ОтборОтчета - СписокЗначений -
// * ИнтервалыОтчета - см. ИнтервалыОтчета
// * ПериодОтчета - Структура из КлючИЗначение -:
// ** НачалоПериода - Дата -
// ** КонецПериода - Дата -
// ** Периодичность - Массив Из ПеречислениеСсылка.Периодичность -
// * Ресурс - Строка -
// * Показатель - Структура, СтрокаТаблицыЗначений, Неопределено, СтрокаДереваЗначений - Описание:
// 	Показатель - Структура, СтрокаТаблицыЗначений, Неопределено, СтрокаДереваЗначений - Описание:
// * ЭтоСвязанный - Булево -
// * Ошибка - Булево -
// * ОписаниеОшибки - Строка -
// 	Точность - Неопределено, Число - Описание
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Показатель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * КодСтроки - Строка -
// * Примечание - Строка -
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// * ПериодГод - ПеречислениеСсылка.Периодичность -
// * ПериодПолугодие - ПеречислениеСсылка.Периодичность -
// * ПериодКвартал - ПеречислениеСсылка.Периодичность -
// * ПериодМесяц - ПеречислениеСсылка.Периодичность -
Функция ЗначениеПростогоПоказателя(Параметры, Показатель = Неопределено, Точность = Неопределено)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	ПериодОтчета = Параметры.ПериодОтчета;
	ИнтервалыОтчета = Параметры.ИнтервалыОтчета.Скопировать();
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
	Измерения = Параметры.Измерения;
	Субконто = Параметры.Субконто;
	ЗначениеПоказателя = ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения, Субконто);
	Ресурс = Параметры.Ресурс;
	
	Немонетарный = ВидыЭлементов.НемонетарныйПоказатель;
	Монетарный = ВидыЭлементов.МонетарныйПоказатель;
	
	// Установим параметры компоновки
	СхемаПоказателя = Справочники.ЭлементыФинансовыхОтчетов.СхемаПоказателя(ЭлементОтчета, Измерения, Субконто, Ресурс);
	Настройки = СхемаПоказателя.Настройки;
	Если ЭлементОтчета.ВидЭлемента = Монетарный
		И НЕ ЗначениеЗаполнено(ЭлементОтчета.СчетПланаСчетов) Тогда
		ШаблонТекста = НСтр("ru = 'Не определено значение показателя 
							|%1 (%2)
							|вида отчета %3
							|по причине: не указан счет плана счетов.';
							|en = 'Value of indicator 
							|%1 (%2)
							|of report kind %3 is not determined.
							|Reason: an account of the chart of accounts is not specified.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код,
			ЭлементОтчета.ВидОтчета);
		ОбщегоНазначения.СообщитьПользователю(Текст, ЭлементОтчета.ЭлементОтчета);
		ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		Параметры.Вставить("ОшибкаРасчета");
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из Параметры.ОтборОтчета Цикл
		Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
			Если ЭлементОтчета.ВидЭлемента = Монетарный
				ИЛИ (ЭлементОтчета.ВидЭлемента = Немонетарный
					И СтрНайти(ЭлементОтбора.Ключ, "Субконто") = 0
					И СтрНайти(ЭлементОтбора.Ключ, "НаправлениеДеятельности") = 0) Тогда
				НовыйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Если ТипЗнч(НовыйОтбор.ПравоеЗначение) = Тип("Массив") Тогда
					НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;// значение отбора заполнено
	КонецЦикла;
	
	ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета);
	
	ДанныеПоказателя = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПоказателя.Схема, Настройки, Новый Структура("ИнтервалыОтчета", ИнтервалыОтчета));
	
	КолоникиГруппировки = Новый Массив;
	Для каждого Колонка Из ДанныеПоказателя.Колонки Цикл
		Если Колонка.Имя <> "Значение" Тогда
			КолоникиГруппировки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	ДанныеПоказателя.Свернуть(СтрСоединить(КолоникиГруппировки, ","), "Значение");
	
	ТочностьПоказателя = 0;
	Если Точность <> Неопределено Тогда
		ТочностьПоказателя = Точность;
	ИначеЕсли ЭлементОтчета.Точность <>  Неопределено Тогда
		ТочностьПоказателя = ЭлементОтчета.Точность;
	КонецЕсли;
	Для каждого СтрокаДанныхПоказателя Из ДанныеПоказателя Цикл
		СтрокаДанныхПоказателя.Значение = Окр(СтрокаДанныхПоказателя.Значение, ТочностьПоказателя);
	КонецЦикла;
	
	Если ДанныеПоказателя.Количество() > 0 Тогда
		ЗначениеПоказателя.Очистить();
		ЗагрузитьВТаблицуЗначений(ДанныеПоказателя, ЗначениеПоказателя);
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ЗначениеПроизводногоПоказателя(Параметры, Показатель = Неопределено)
	
	ЭлементОтчета = Показатель; // СтрокаДереваЗначений - см. ОбновитьДеревоОтчета
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	ПериодОтчета = Параметры.ПериодОтчета;
	ИнтервалыОтчета = Параметры.ИнтервалыОтчета.Скопировать();
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета, 		"Показатель");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, 	"КодСтроки");
	ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.Примечание, 		"Примечание");
	ЗначениеПоказателя = ПустоеЗначениеПоказателя(ИнтервалыОтчета, Параметры.Измерения, Параметры.Субконто);
	
	Если ЭлементОтчета.ЭтоСвязанный Тогда
		ОперандыФормулы = ВыгрузитьОперандыФормулы(ЭлементОтчета.СвязанныйЭлемент);
	Иначе
		ОперандыФормулы = ВыгрузитьОперандыФормулы(ЭлементОтчета.ЭлементОтчета);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОперандыФормулы) Тогда
		ЗначенияОперандов = Новый ТаблицаЗначений;
		ИдентификаторыОперандов = "";
		// Получим значения операндов формулы
		Для Каждого Операнд Из ОперандыФормулы Цикл
			ИдентификаторыОперандов = ИдентификаторыОперандов + Операнд.Идентификатор + ",";
			ДанныеОперанда = ЭлементОтчета.Строки.Найти(Операнд.Операнд,"ЭлементОтчета");
			Если ДанныеОперанда = Неопределено Тогда
				ДанныеОперанда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Операнд.Операнд,
									"НаименованиеДляПечати,ВидЭлемента,ЕстьНастройки,ДополнительныйОтбор,ОбратныйЗнак");
				ДопРеквизиты = ФинансоваяОтчетностьВызовСервера.ЗначенияДополнительныхРеквизитов(
									Операнд.Операнд,
									"СчетПланаСчетов,ТипИтога,НачальноеСальдо,НемонетарныйПоказатель,КодСтрокиОтчета,Примечание,Точность");
				Для Каждого КлючЗначение Из ДопРеквизиты Цикл
					ДанныеОперанда.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
				КонецЦикла;
				ДанныеОперанда.Вставить("ЭлементОтчета", Операнд.Операнд);
				ДанныеОперанда.Вставить("ЭтоСвязанный", Ложь);
			КонецЕсли;
			ОперандЗначения = ЗначениеПростогоПоказателя(Параметры, ДанныеОперанда, ЭлементОтчета.Точность);
			КолонкаЗначение = ОперандЗначения.Колонки.Значение; // КолонкаТаблицыЗначений - 
			КолонкаЗначение.Имя = Операнд.Идентификатор;
			Если ЗначенияОперандов.Колонки.Количество() = 0 Тогда
				ЗначенияОперандов = ОперандЗначения.Скопировать();
				Продолжить;
			КонецЕсли;
			ЗначенияОперандов.Колонки.Добавить(Операнд.Идентификатор, Новый ОписаниеТипов("Число"));
			ЗагрузитьВТаблицуЗначений(ОперандЗначения,ЗначенияОперандов);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ИдентификаторыОперандов,1);
		Если Параметры.Свойство("ОшибкаРасчета") Тогда
			ШаблонТекста = НСтр("ru = 'Недостоверное значение показателя 
								|%1(%2)
								|по причине: ошибка расчета составных показателей.';
								|en = 'Unreliable value of indicator 
								|%1(%2).
								|Reason: an error occurred while calculating compound indicators.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, 
				ЭлементОтчета.НаименованиеДляПечати, 
				ЭлементОтчета.Код);
			ОбщегоНазначения.СообщитьПользователю(Текст, ЭлементОтчета.ЭлементОтчета);
			ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		КонецЕсли;
		
		КолонкиГруппировки = "";
		Для Каждого Колонка Из ЗначенияОперандов.Колонки Цикл
			Если СтрНайти(ИдентификаторыОперандов, Колонка.Имя) = 0 Тогда
				КолонкиГруппировки = КолонкиГруппировки + Колонка.Имя + ",";
			КонецЕсли;
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(КолонкиГруппировки,1);
		
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  ,"Показатель");
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета,"КодСтроки");
		ЗначенияОперандов.ЗаполнитьЗначения(ЭлементОтчета.Примечание     ,"Примечание");
		ЗначенияОперандов.Свернуть(КолонкиГруппировки,ИдентификаторыОперандов);
		
	Иначе
		ЗначенияОперандов = ИнтервалыОтчета.Скопировать(); 
		
		Для каждого ИзмерениеПоказателя Из Параметры.Измерения Цикл
			ЗначенияОперандов.Колонки.Добавить(ИзмерениеПоказателя.Значение);
		КонецЦикла; 
		
		Если Параметры.Субконто <> Неопределено Тогда
			Для каждого СубконтоПоказателя Из Параметры.Субконто Цикл
				 Если ЗначенияОперандов.Колонки.Найти(СубконтоПоказателя.Ключ) = Неопределено Тогда
					ЗначенияОперандов.Колонки.Добавить(СубконтоПоказателя.Ключ);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ЭлементОтчета.Формула) Тогда
		ШаблонТекста = НСтр("ru = 'Не определено значение показателя 
							|%1 (%2)
							|по причине: не указана формула расчета.';
							|en = 'Value of indicator 
							|%1 (%2) is not determined.
							|Reason: calculation formula is not specified.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код);
		ОбщегоНазначения.СообщитьПользователю(Текст);
		ДобавитьСообщениеОбОшибке(Параметры.СообщенияОбОшибках, Текст, ЭлементОтчета.ЭлементОтчета);
		Параметры.Вставить("ОшибкаРасчета");
	КонецЕсли;
	// Выполним формулу
	СхемаПоказателя = Справочники.ЭлементыФинансовыхОтчетов.СхемаПоказателя(ЭлементОтчета, Параметры.Измерения, Параметры.Субконто);
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ЗначенияОперандов", ЗначенияОперандов);
	ВнешниеНаборы.Вставить("ИнтервалыОтчета", ИнтервалыОтчета);
	
	Настройки = СхемаПоказателя.Настройки;
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "ЭлементОтчета", ЭлементОтчета.ЭлементОтчета);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "ОбратныйЗнак" , ЭлементОтчета.ОбратныйЗнак);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "НачалоПериода", ПериодОтчета.НачалоПериода);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки, "КонецПериода" , ПериодОтчета.КонецПериода);
	ФинансоваяОтчетностьСервер.УстановитьПараметрКомпоновки(Настройки,"Периодичность" , ПериодОтчета.Периодичность);
	ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета);
	
	ДанныеПоказателя = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаПоказателя.Схема, Настройки, ВнешниеНаборы);
	Если НЕ ЗначениеЗаполнено(ДанныеПоказателя) Тогда
		ДанныеПоказателя = ЗначенияОперандов.Скопировать();
	КонецЕсли;
	
	Если ЭлементОтчета.Точность <>  Неопределено Тогда
		Для каждого СтрокаДанныхПоказателя Из ДанныеПоказателя Цикл
			Если ТипЗнч(СтрокаДанныхПоказателя.Значение) = Тип("Число") Тогда
				СтрокаДанныхПоказателя.Значение = Окр(СтрокаДанныхПоказателя.Значение, ЭлементОтчета.Точность);
			Иначе
				СтрокаДанныхПоказателя.Значение = СтрокаДанныхПоказателя.Значение;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ДанныеПоказателя.Количество() > 0 Тогда
		ЗначениеПоказателя.Очистить();
		ЗагрузитьВТаблицуЗначений(ДанныеПоказателя, ЗначениеПоказателя);
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ВыгрузитьОперандыФормулы(Показатель)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперандыФормулы.НомерСтроки,
	|	ОперандыФормулы.Идентификатор,
	|	ОперандыФормулы.Операнд
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов.ОперандыФормулы КАК ОперандыФормулы
	|ГДЕ
	|	ОперандыФормулы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗначениеИтогаПоГруппе(Параметры, Показатель = Неопределено)
	
	ЭлементОтчета = Показатель;//Структура, СтрокаДереваЗначений - 
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	СвязанныйОтчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтчета.СвязанныйЭлемент, "Владелец");
	ПоказателиИтога = ОбновитьДеревоОтчета(СвязанныйОтчет, ЭлементОтчета.СвязанныйЭлемент);
	
	ИтогПоГруппе = Неопределено;
	Для Каждого ПоказательИтога Из ПоказателиИтога.Строки Цикл
		
		ЗначениеПоказателя = ЗначениеПоказателяОтчета(Параметры, ПоказательИтога);
		Если ЗначениеПоказателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИтогПоГруппе = Неопределено Тогда
			ИтогПоГруппе = ЗначениеПоказателя.Скопировать();
		Иначе
			ЗагрузитьВТаблицуЗначений(ЗначениеПоказателя, ИтогПоГруппе);
		КонецЕсли;
		
	КонецЦикла;
	Если Параметры.Свойство("ОшибкаРасчета") Тогда
		ШаблонТекста = НСтр("ru = 'Недостоверное значение итога по группе 
							|%1 (%2)
							|по причине: ошибка расчета составных показателей.';
							|en = 'Unreliable value of total by group 
							|%1(%2).
							|Reason: an error occurred while calculating compound indicators.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, 
			ЭлементОтчета.НаименованиеДляПечати, 
			ЭлементОтчета.Код);
		ОбщегоНазначения.СообщитьПользователю(Текст);
		Параметры.СообщенияОбОшибках.Добавить(Текст);
	КонецЕсли;
	Если ИтогПоГруппе = Неопределено Тогда
		ИнтервалыОтчета = Параметры.ИнтервалыОтчета.Скопировать();
		ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
		ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
		ИнтервалыОтчета.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
		Измерения = Параметры.Измерения;
		ИтогПоГруппе = ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения);
	КонецЕсли;
	
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.ЭлементОтчета  , "Показатель");
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.КодСтрокиОтчета, "КодСтроки");
	ИтогПоГруппе.ЗаполнитьЗначения(ЭлементОтчета.Примечание     , "Примечание");
	
	КолонкиГруппировки = "";
	Для Каждого Колонка Из ИтогПоГруппе.Колонки Цикл
		Если Колонка.Имя = "Значение" Тогда
			Продолжить;
		КонецЕсли;
		КолонкиГруппировки = КолонкиГруппировки + Колонка.Имя + ",";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(КолонкиГруппировки,1);
	
	ИтогПоГруппе.Свернуть(КолонкиГруппировки, "Значение");
	Если ЭлементОтчета.ОбратныйЗнак Тогда
		Для Каждого Итог Из ИтогПоГруппе Цикл
			Итог.Значение = -1 * Итог.Значение;
		КонецЦикла;
	КонецЕсли;
	Возврат ИтогПоГруппе;
	
КонецФункции

Функция ЗначениеПоказателяОтчета(Параметры, Показатель = Неопределено)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	ЭлементОтчета = Показатель;
	Если ЭлементОтчета = Неопределено Тогда
		ЭлементОтчета = Параметры.Показатель;
	КонецЕсли;
	Если ЭлементОтчета.ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель 
		ИЛИ ЭлементОтчета.ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель Тогда
		Результат = ЗначениеПростогоПоказателя(Параметры, Показатель);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель Тогда
		Результат = ЗначениеПроизводногоПоказателя(Параметры, Показатель);
	ИначеЕсли ЭлементОтчета.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе
		И ЭлементОтчета.ЭтоСвязанный Тогда
		Результат = ЗначениеИтогаПоГруппе(Параметры, Показатель);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьНастройкуПериодичности(Настройки, ПериодОтчета)
	
	Для Каждого Период Из ПериодОтчета.Периодичность Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, Период.ИмяКолонки, Период.Представление);
		ФинансоваяОтчетностьСервер.НовыйПорядок(Настройки, Период.ИмяКолонки, Период.Сортировка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВыводВТабличныйДокумент

// Параметры:
// 	Параметры - Структура из КлючИЗначение- :
// 	 *КэшРеквизитов - см. ФинансоваяОтчетностьСервер.КэшДополнительныеПоляЭлементов
// 	 *СообщенияОбОшибках - Массив из СообщениеПользователю -
// 	 *БлокиОтчета - Массив из Структура - :
// 	  **Описание - Структура -
// 	 *ВидыЭлементов - см. Перечисления.ВидыЭлементовФинансовогоОтчета.Кэш
// 	ДеревоЭлементовОтчета - см. ОписаниеДереваОтчета
// Возвращаемое значение:
// 	ТабличныйДокумент - Описание
Функция ВывестиОтчет(Параметры, ДеревоЭлементовОтчета)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПараметрыВыводаОтчета(Параметры);
	
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
	Для Каждого ОписаниеБлока Из Параметры.БлокиОтчета Цикл
		
		Если ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.НередактируемыйТекст Тогда
			ВывестиТекст(Параметры.МакетВывода, ОписаниеБлока, ДокументРезультат, ВидыЭлементов, Параметры.МаксКоличествоКолонок);
			
		ИначеЕсли ОписаниеБлока.ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель 
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе Тогда
			
			ВывестиПоказатель(Параметры, ОписаниеБлока, ДокументРезультат);
			
		ИначеЕсли ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках 
			ИЛИ ОписаниеБлока.ВидЭлемента = ВидыЭлементов.ТаблицаСложная Тогда
			
			ВывестиТаблицу(Параметры, ОписаниеБлока, ДокументРезультат);
			
		КонецЕсли;
		
	КонецЦикла;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПараметрыВыводаОтчета(Параметры)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	МакетОформления = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ФинансовыйОтчет");
	МакетВывода = Новый Структура;
	МакетВывода.Вставить("ВидЭлемента", Новый Соответствие);
	
	// Все макеты вывода
	МакетВывода.Вставить("ЗаголовокОтчета" , МакетОформления.ПолучитьОбласть("ЗаголовокОтчета"));
	МакетВывода.Вставить("Текст"           , МакетОформления.ПолучитьОбласть("Текст"));
	МакетВывода.Вставить("ЗаголовокТаблицы", МакетОформления.ПолучитьОбласть("ЗаголовокТаблицы"));
	МакетВывода.Вставить("ПустаяСтрока"    , МакетОформления.ПолучитьОбласть("ПустаяСтрока"));
	МакетВывода.Вставить("ИтогКолонки"     , МакетОформления.ПолучитьОбласть("Группировка|Значение"));
	
	МакетВывода.Вставить("Шапка", МакетСтроки(МакетОформления, "Шапка"));
	МакетВывода.Вставить("СтрокаОтчета", МакетСтроки(МакетОформления, "СтрокаОтчета"));
	МакетВывода.Вставить("Группировка", МакетСтроки(МакетОформления, "Группировка"));
	МакетВывода.Вставить("ИтогПоСтрокам", МакетСтроки(МакетОформления, "ИтогПоСтрокам"));
	МакетВывода.Вставить("ОдиночныйПоказатель", МакетСтроки(МакетОформления, "ОдиночныйПоказатель"));
	МакетВывода.Вставить("ОдиночныйПоказательВыделенный", МакетСтроки(МакетОформления, "ОдиночныйПоказательВыделенный"));
	МакетВывода.Вставить("НижняяГраницаТаблицы", МакетСтроки(МакетОформления, "НижняяГраницаТаблицы"));
	
	// Разложим по видам элементов
	МакетСтроки = МакетСтроки(МакетОформления, "СтрокаОтчета");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.МонетарныйПоказатель  , МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.НемонетарныйПоказатель, МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ПроизводныйПоказатель , МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ЭлементТаблицы        , МакетСтроки);
	
	МакетСтроки = МакетСтроки(МакетОформления, "Группировка");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.Измерение, МакетСтроки);
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.Группа, МакетСтроки);
	
	МакетСтроки = МакетСтроки(МакетОформления, "ИтогПоСтрокам");
	МакетВывода.ВидЭлемента.Вставить(ВидыЭлементов.ИтогПоГруппе, МакетСтроки);
	
	Параметры.Вставить("МакетВывода", МакетВывода);
	
	Возврат МакетВывода;
	
КонецФункции

// Параметры:
// 	МакетВывода - ТабличныйДокумент - 
// 	ЭлементВывода - см. ОписаниеБлокаОтчета
// 	ДокументРезультат - ТабличныйДокумент - Описание
// 	ВидыЭлементов - Структура - Описание
// 	ШиринаТекста - Число - Описание
Процедура ВывестиТекст(МакетВывода, ЭлементВывода, ДокументРезультат, ВидыЭлементов, ШиринаТекста)
	
	Если ЭлементВывода.ВидЭлемента = ВидыЭлементов.ЗаголовокОтчета Тогда
		Область = МакетВывода.ЗаголовокОтчета; // ТабличныйДокумент - 
		Область.Параметры.ЗаголовокОтчета = ЭлементВывода.Описание.Текст;
	ИначеЕсли ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаСложная
		ИЛИ ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВКолонках
		ИЛИ ЭлементВывода.ВидЭлемента = ВидыЭлементов.ТаблицаПоказателиВСтроках Тогда
		Область = МакетВывода.ЗаголовокТаблицы; // ТабличныйДокумент -
		Область.Параметры.ЗаголовокТаблицы = ЭлементВывода.НаименованиеДляПечати;
	Иначе
		Область = МакетВывода.Текст; // ТабличныйДокумент -
		Область.Параметры.Текст  = ЭлементВывода.Описание.Текст;
	КонецЕсли;
	ОбъединитьПоГоризонтали(Область, 1, 3, 2);
	НоваяОбласть = ДокументРезультат.Вывести(Область, 0);
	
	Если ЭлементВывода.ВидЭлемента = ВидыЭлементов.РедактируемыйТекст Тогда
		ОбластьТекста = ДокументРезультат.Область(НоваяОбласть.Верх+1,1);
		ОбластьТекста.Защита = Ложь;
		ОбластьТекста.ЦветФона = Новый Цвет(255,255,192);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Параметры - Структура из КлючИЗначение - Описание: 
// 	 * МакетВывода - ТабличныйДокумент -
// 	ЭлементВывода - см. ОписаниеБлокаОтчета
// 	ДокументРезультат - ТабличныйДокумент - Описание
Процедура ВывестиПоказатель(Параметры, ЭлементВывода, ДокументРезультат)
	
	МакетСтроки = Параметры.МакетВывода.ОдиночныйПоказатель; // ТабличныйДокумент - 
	Если ЭлементВывода.Описание.ВыделитьЭлемент Тогда
		МакетСтроки = Параметры.МакетВывода.ОдиночныйПоказательВыделенный;
	КонецЕсли;
	
	МакетПоказателя = МакетСтроки.Показатель; //ТабличныйДокумент - 
	МакетПоказателя.Параметры.Наименование = ЭлементВывода.НаименованиеДляПечати;
	МакетПоказателя.Параметры.Расшифровка = ЭлементВывода.ЭлементОтчета;
	ДокументРезультат.Вывести(МакетПоказателя);
	
	МакетЯчейки = МакетСтроки.Значение; // ТабличныйДокумент - 
	МакетЯчейки.Параметры.Значение = Формат(ЭлементВывода.Описание.Значение, Параметры.ФорматЗначений);
	МакетЯчейки.Параметры.Расшифровка = ЭлементВывода.Описание.Расшифровка;
	ОбластьМакета = ДокументРезультат.Присоединить(МакетЯчейки);
	
	Параметры.РасшифровкаОтчета.Вставить(ОбластьМакета.Имя, МакетЯчейки.Параметры.Расшифровка);
	
КонецПроцедуры

#Область ВыводТаблицы

// Параметры:
// 	Параметры - Структура - Описание:
// 	ЭлементВывода - см. ОписаниеБлокаОтчета
// 	ДокументРезультат - ТабличныйДокумент - Описание
Процедура ВывестиТаблицу(Параметры, ЭлементВывода, ДокументРезультат)
	
	Если ЭлементВывода.Описание.ШапкаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементВывода.ВыводитьЗаголовокЭлемента Тогда
		ВывестиТекст(Параметры.МакетВывода, ЭлементВывода, ДокументРезультат, Параметры.ВидыЭлементов, Параметры.МаксКоличествоКолонок);
	КонецЕсли;
	ВывестиШапкуТаблицы(Параметры, ЭлементВывода, ДокументРезультат);
	
	ДеревоСтрок = ЭлементВывода.Описание.ДеревоСтрок; // см. ОписаниеДереваОтчета
	Для Каждого СтрокаТаблицы Из ДеревоСтрок.Строки Цикл
		Параметры.Вставить("ОтборСтроки", Новый Структура);
		ВывестиСтрокуТаблицы(СтрокаТаблицы, ДокументРезультат, ЭлементВывода.Описание, Параметры);
	КонецЦикла;
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	ДокументРезультат.Вывести(Параметры.МакетВывода.ПустаяСтрока);
	Параметры.Удалить("ОтборСтроки");
	
КонецПроцедуры

Процедура ВывестиШапкуТаблицы(Параметры, ЭлементВывода, ДокументРезультат)
	
	МакетВывода = Параметры.МакетВывода.Шапка;
	СоответствиеЭлементовПоУровням = Новый Соответствие;
	ШапкаТаблицы = ЭлементВывода.Описание.ШапкаТаблицы;
	КоличествоУровнейШапки = ЭлементВывода.Описание.КоличествоУровнейШапки + 1;
	РаспределитьЭлементыПоУровням(ШапкаТаблицы.Строки, КоличествоУровнейШапки, СоответствиеЭлементовПоУровням);
	
	ПерваяСтрокаШапки = Неопределено;
	ОбводитьЭлементы = КоличествоУровнейШапки > 1;
	
	Для Сч = 1 По КоличествоУровнейШапки Цикл
		
		ВыведеннаяОбласть = ДокументРезультат.Вывести(МакетВывода.Показатель, 0);
		
		Если ПерваяСтрокаШапки = Неопределено Тогда
			ПерваяСтрокаШапки = ВыведеннаяОбласть.Верх;
		КонецЕсли;
		Если Параметры.ВыводитьКодСтроки Тогда
			ДокументРезультат.Присоединить(МакетВывода.КодСтрокиОтчета);
		КонецЕсли;
		Если Параметры.ВыводитьПримечание Тогда
			ДокументРезультат.Присоединить(МакетВывода.Примечание);
		КонецЕсли;
		
		Если СоответствиеЭлементовПоУровням.Количество() Тогда // проверка на наличие значений колонок
			
			ЭлементыУровня = СоответствиеЭлементовПоУровням[Сч];
			Для Каждого ЭлементУровня Из ЭлементыУровня Цикл
				Секция = МакетВывода.Значение; // ТабличныйДокумент - 
				
				Если ЭлементУровня = Неопределено
					ИЛИ НЕ ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Наименование = "";
				ИначеЕсли НЕ ЭлементУровня.ВыводитьЗаголовокЭлемента Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(ЭлементУровня.НаименованиеДляПечати) Тогда
					Секция.Параметры.Наименование = ЭлементУровня.НаименованиеДляПечати;
				КонецЕсли;
				
				ВыведеннаяОбласть = ДокументРезультат.Присоединить(Секция);
				Если ЭлементУровня = Неопределено Тогда
					Область = ДокументРезультат.Область(ВыведеннаяОбласть.Верх - 1,
														ВыведеннаяОбласть.Лево,
														ВыведеннаяОбласть.Верх,
														ВыведеннаяОбласть.Лево);
					Область.Объединить();
					Продолжить;
				КонецЕсли;
				
				КоличествоЯчеек = КоличествоКолонокЗаголовкаШапки(ЭлементУровня);
				Если КоличествоЯчеек > 1 Тогда
					Для Итер = 1 по КоличествоЯчеек - 1 Цикл
						ДокументРезультат.Присоединить(МакетВывода.Значение);
					КонецЦикла;
					ОбластьГруппировки = ОбъединитьПоГоризонтали(ДокументРезультат, ВыведеннаяОбласть.Лево, КоличествоЯчеек, ВыведеннаяОбласть.Верх);
					Если ОбластьГруппировки <> Неопределено Тогда
						ОбвестиОбласть(ОбластьГруппировки);
					КонецЕсли;
				ИначеЕсли ОбводитьЭлементы Тогда
					ОбвестиОбласть(ВыведеннаяОбласть);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПерваяКолонкаШапки = 1;
	ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки);
	Если Параметры.ВыводитьКодСтроки Тогда
		ПерваяКолонкаШапки = ПерваяКолонкаШапки + 1;
		ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки, Параметры.ЗаголовокКодаСтроки, Истина);
	КонецЕсли;
	Если Параметры.ВыводитьПримечание Тогда
		ПерваяКолонкаШапки = ПерваяКолонкаШапки + 1;
		ОбъединитьПоВертикали(ДокументРезультат, ПерваяСтрокаШапки, КоличествоУровнейШапки, ПерваяКолонкаШапки, Параметры.ЗаголовокПримечания, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вывести строку таблицы.
// 
// Параметры:
//  ДанныеСтрокиТаблицы - СтрокаДереваЗначений - Данные строки таблицы:
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * ИдентификаторЭлемента - Строка -
// * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * НаименованиеДляПечати - Строка -
// * ВыводитьЗаголовокЭлемента - Булево -
// * ВыделитьЭлемент - Булево -
// * РасположениеИтога - Число -
// * ОбратныйЗнак - Булево -
// * ПредставлениеПериода - Строка -
// * Периодичность - ПеречислениеСсылка.Периодичность -
// * ИмяКолонки - Строка -
// * Сортировка - Строка -
// * Точность - Число -
// * ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные -
//  ДокументРезультат - ТабличныйДокумент - Документ результат
//  ОписаниеТаблицы - Структура - Описание таблицы
//  Параметры - Структура - Параметры:
// * ОтборСтроки - Структура -
// * Отбор - Структура - отбор отчета 
//  Уровень - Число - Уровень
Процедура ВывестиСтрокуТаблицы(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень = 0)
	
	Если ДанныеСтрокиТаблицы.ВыводитьЗаголовокЭлемента Тогда
		ВывестиЯчейкиСтроки(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень);
	Иначе
		Уровень = Уровень - 1;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ДанныеСтрокиТаблицы.Строки Цикл
		ВывестиСтрокуТаблицы(СтрокаТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень+1);
	КонецЦикла;
	
	Если ДанныеСтрокиТаблицы.ВидЭлемента = Параметры.ВидыЭлементов.Группа Тогда
		Параметры.Отбор.Удалить(ДанныеСтрокиТаблицы.ИдентификаторЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ДанныеСтрокиТаблицы - СтрокаДереваЗначений - 
// 	ДокументРезультат - ТабличныйДокумент - Описание
// 	ОписаниеТаблицы - см. ОписаниеТаблицы
// 	Параметры - Структура - Описание:
// * ОтборСтроки - Структура -
// 	Уровень - Число - Описание
Процедура ВывестиЯчейкиСтроки(ДанныеСтрокиТаблицы, ДокументРезультат, ОписаниеТаблицы, Параметры, Уровень)
	
	ВидыЭлементов = Параметры.ВидыЭлементов;
	Если ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ДанныеСтрокиТаблицы.РасположениеИтога = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИтогВНачале = ДанныеСтрокиТаблицы.РасположениеИтога = 0;
	ЭтоГруппа = ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.Группа;
	ЭтоИзмерениеПериода = ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ПредставлениеПериода);
	ЭтоПроизвольная = ОписаниеТаблицы.ЭтоПроизвольная;
	// Заголовки групп выводим без ресурсов
	ВыводитьРесурсы = ((ЕстьИтогВНачале И ЭтоГруппа)//группы с итогами в начале группы выводятся с ресурсами
						ИЛИ НЕ ЭтоГруппа)// показатели, измерения, итоги выводятся с ресурсами
						И НЕ (ОписаниеТаблицы.ЭтоПроизвольная И ЭтоИзмерениеПериода);//измерения периода в матричных отчетах выводятся без ресурсов
						
	
	Если ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ДанныеСтрокиТаблицы.ЭтоСвязанный
			Или ДанныеСтрокиТаблицы.ВидЭлемента = ВидыЭлементов.Измерение Тогда
		МакетСтроки = Параметры.МакетВывода.СтрокаОтчета;
	Иначе
		МакетСтроки = Параметры.МакетВывода.ВидЭлемента[ДанныеСтрокиТаблицы.ВидЭлемента];
	КонецЕсли;
	Если ДанныеСтрокиТаблицы.ВыделитьЭлемент Тогда
		МакетСтроки = Параметры.МакетВывода.Группировка;
	КонецЕсли;
	
	ОбластьПоказателя = МакетСтроки.Показатель; // ТабличныйДокумент - 
	Если ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
		ОбластьПоказателя = МакетСтроки.ПоказательДляПоказателейВКолонках;
	КонецЕсли;
	
	ОбластьПоказателя.Параметры.Наименование = ДанныеСтрокиТаблицы.НаименованиеДляПечати;
	ОбластьПоказателя.Параметры.Расшифровка = ДанныеСтрокиТаблицы.ЭлементОтчета;
	ОбластьПоказателя.ТекущаяОбласть.Отступ = 2 * Уровень;
	ДокументРезультат.Вывести(ОбластьПоказателя, Уровень);
	
	Для Каждого Колонка Из ОписаниеТаблицы.КолонкиОтчета Цикл
		
		Если Колонка.ЭтоИтог И Колонка.ВидЭлемента <> ВидыЭлементов.ИтогПоГруппе Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеВыделенное =  Колонка.ВыделитьЭлемент 
			Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе;
		Точность = Неопределено;
		
		МакетЯчейки = МакетСтроки.Значение; // ТабличныйДокумент - 
		Если МакетСтроки.Свойство(Колонка.ИмяКолонки) Тогда
			МакетЯчейки = МакетСтроки[Колонка.ИмяКолонки];
		ИначеЕсли ЗначениеВыделенное Тогда
			МакетЯчейки = МакетСтроки.ЗначениеВыделенное;
		КонецЕсли;
		
		Если ВыводитьРесурсы Тогда
			
			Расшифровка = РасшифровкаЯчейки(ОписаниеТаблицы, ДанныеСтрокиТаблицы, Колонка.ИмяКолонки);
			МакетЯчейки.Параметры.Расшифровка = Расшифровка;
			
			Если ДанныеСтрокиТаблицы.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель
					Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель Тогда
				
				Если  ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Точность) Тогда
					Точность = ДанныеСтрокиТаблицы.Точность;
				ИначеЕсли ЗначениеЗаполнено(Колонка.ВидЭлемента) Тогда
					Точность = Колонка.Точность;
				КонецЕсли;
				ФорматнаяСтрока = "ЧДЦ="+?(Точность = Неопределено, "0", Точность);
				МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ФорматнаяСтрока);
				
			ИначеЕсли ЭтоПроизвольная Тогда
				
				Если (Расшифровка = Неопределено Или Расшифровка.Показатель.ВидЭлемента <> ВидыЭлементов.НемонетарныйПоказатель) 
						И ЗначениеЗаполнено(Колонка.ЭлементОтчета) Тогда
					Если ДанныеСтрокиТаблицы.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы
								И Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
						Точность = Колонка.Точность;
					Иначе
						Точность = ДанныеСтрокиТаблицы[Колонка.ИмяКолонки+"_Точность"];
					КонецЕсли;
				КонецЕсли;
				
				Если СтрНайти(Параметры.ФорматЗначений, "ЧС=") = 0 Тогда 
					
					Если Точность = Неопределено Тогда
						МакетЯчейки.Параметры.Значение = ДанныеСтрокиТаблицы[Колонка.ИмяКолонки];
					Иначе
						ФорматнаяСтрока = Параметры.ФорматЗначений + "; ЧДЦ="+?(Точность = Неопределено, "0", Точность);
						МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ФорматнаяСтрока);
					КонецЕсли;
					
				Иначе 
					ФорматнаяСтрока = Параметры.ФорматЗначений;
					МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ФорматнаяСтрока);
				КонецЕсли;
			
			ИначеЕсли (ЭтоПоказатель(ДанныеСтрокиТаблицы.ВидЭлемента, Параметры.ВидыЭлементов) Или ЭтоПоказатель(Колонка.ВидЭлемента, Параметры.ВидыЭлементов)
					Или ДанныеСтрокиТаблицы.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе
					Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе) Тогда
					
				ФорматнаяСтрока = Параметры.ФорматЗначений;
				Если СтрНайти(Параметры.ФорматЗначений, "ЧС=") = 0 Тогда 
					Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Точность) Тогда
						Точность = ДанныеСтрокиТаблицы.Точность;
					ИначеЕсли ЗначениеЗаполнено(Колонка.ВидЭлемента) Тогда
						Точность = Колонка.Точность;
					КонецЕсли;
					ФорматнаяСтрока = Параметры.ФорматЗначений + "; ЧДЦ="+?(Точность = Неопределено, "0", Точность);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Колонка.ВидЭлемента) И ДанныеСтрокиТаблицы.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе
						Или Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
					ДанныеСтрокиТаблицы[Колонка.ИмяКолонки] = Окр(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ?(Точность = Неопределено, 0, Точность));
				КонецЕсли;
				
				МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ФорматнаяСтрока);
				
			Иначе
				
				Если СтрНайти(Параметры.ФорматЗначений, "ЧС=") = 0 Тогда 
					Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.Точность) Тогда
						Точность = ДанныеСтрокиТаблицы.Точность;
					ИначеЕсли ЗначениеЗаполнено(Колонка.ВидЭлемента) Тогда
						Точность = Колонка.Точность;
					КонецЕсли;
					ФорматнаяСтрока = Параметры.ФорматЗначений + "; ЧДЦ="+?(Точность = Неопределено, "0", Точность);
				Иначе
					ФорматнаяСтрока = Параметры.ФорматЗначений
				КонецЕсли;
				
				МакетЯчейки.Параметры.Значение = Формат(ДанныеСтрокиТаблицы[Колонка.ИмяКолонки], ФорматнаяСтрока);
			КонецЕсли;
			
		Иначе
			МакетЯчейки.Параметры.Значение = "";
			МакетЯчейки.Параметры.Расшифровка = Неопределено;
		КонецЕсли;
		ОбластьМакета = ДокументРезультат.Присоединить(МакетЯчейки);
		
		Если МакетЯчейки.Параметры.Расшифровка <> Неопределено Тогда
			Параметры.РасшифровкаОтчета.Вставить(ОбластьМакета.Имя, МакетЯчейки.Параметры.Расшифровка);
		КонецЕсли;
		
	КонецЦикла;// по ячейкам строки
	
КонецПроцедуры

Процедура РаспределитьЭлементыПоУровням(Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая = 0)
	
	Если ГлубинаТекущая > ГлубинаВсего Тогда
		Возврат;
	КонецЕсли;
	
	СписокСтрок = СоответствиеСтрокУровням[ГлубинаТекущая + 1];
	Если СписокСтрок = Неопределено Тогда
		СписокСтрок = Новый Массив;
	КонецЕсли;
	СоответствиеСтрокУровням.Вставить(ГлубинаТекущая + 1, СписокСтрок);
	
	Если Строки = Неопределено ИЛИ Не Строки.Количество() Тогда
		
		СписокСтрок.Добавить(Неопределено);
		РаспределитьЭлементыПоУровням(Неопределено, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
		
	Иначе
		
		Для Каждого СтрокаПоказателя Из Строки Цикл
			
			СписокСтрок.Добавить(СтрокаПоказателя);
			РаспределитьЭлементыПоУровням(СтрокаПоказателя.Строки, ГлубинаВсего, СоответствиеСтрокУровням, ГлубинаТекущая + 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъединитьПоВертикали(Документ, НомерВерхнейСтроки, Знач КоличествоЯчеек, НомерКолонки, ТекстОбласти = "", Центрировать = Ложь)
	
	Область = Документ.Область(НомерВерхнейСтроки, НомерКолонки, НомерВерхнейСтроки + КоличествоЯчеек - 1, НомерКолонки);
	
	Если КоличествоЯчеек <= 1 Тогда
		
		Если НЕ ПустаяСтрока(ТекстОбласти) Тогда
			Область.Текст = ТекстОбласти;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Область.Объединить();
	Если НЕ ПустаяСтрока(ТекстОбласти) Тогда
		Область.Текст = ТекстОбласти;
	КонецЕсли;
	Если Центрировать Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

Функция МакетСтроки(МакетОформления, ИмяОбласти)
	
	МакетСтроки = Новый Структура;
	МакетСтроки.Вставить("Показатель",		 					МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Показатель"));
	МакетСтроки.Вставить("ПоказательДляПоказателейВКолонках", 
																	МакетОформления.ПолучитьОбласть(ИмяОбласти + "|ПоказательДляПоказателейВКолонках"));
	МакетСтроки.Вставить("КодСтрокиОтчета", 			МакетОформления.ПолучитьОбласть(ИмяОбласти + "|КодСтрокиОтчета"));
	МакетСтроки.Вставить("Примечание", 						МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Примечание"));
	МакетСтроки.Вставить("Значение", 								МакетОформления.ПолучитьОбласть(ИмяОбласти + "|Значение"));
	МакетСтроки.Вставить("ЗначениеВыделенное", 	МакетОформления.ПолучитьОбласть(ИмяОбласти + "|ЗначениеВыделенное"));
	Возврат МакетСтроки;
	
КонецФункции

Функция РасшифровкаЯчейки(ОписаниеТаблицы, ДанныеСтрокиТаблицы, ИмяКолонки)
	
	ВидыЭлементов = ОписаниеТаблицы.ВидыЭлементов;
	
	ИдСтрокиОтчета = ДанныеСтрокиТаблицы.ЭлементОтчета;
	ВидЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСтрокиТаблицы.ЭлементОтчета, "ВидЭлемента");
	Если ОписаниеТаблицы.ТаблицаПоказателиВКолонках Тогда
		ИдСтрокиОтчета = ДанныеСтрокиТаблицы.ЗначениеГруппировки;
	ИначеЕсли ТипЗнч(ИдСтрокиОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов")
			И ВидЭлемента = ВидыЭлементов.Измерение Тогда
		ИдСтрокиОтчета = ПоказательСубконто(ИдСтрокиОтчета, ВидыЭлементов);
	КонецЕсли;
	
	РасшифровкаСтроки = ОписаниеТаблицы.Расшифровка[ИдСтрокиОтчета];
	Если РасшифровкаСтроки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Расшифровка = РасшифровкаСтроки[ИмяКолонки];
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Расшифровка = ОбщегоНазначения.СкопироватьРекурсивно(Расшифровка);
		ЭтоПоказатель = ЭтоПоказатель(Расшифровка.Показатель.ВидЭлемента, ВидыЭлементов);
		СписокВидовСубконто = Новый СписокЗначений;
		Если ЭтоПоказатель Тогда
			ОписаниеПоказателя = ОписаниеТаблицы.Показатели[Расшифровка.Показатель];
		ИначеЕсли Расшифровка.Отбор.Свойство("Показатель") Тогда
			ОписаниеПоказателя = ОписаниеТаблицы.Показатели[Расшифровка.Отбор.Показатель];
		Иначе
			ОписаниеПоказателя = Неопределено;
		КонецЕсли;
		
		СтрокаДляРасшифровки = ДанныеСтрокиТаблицы;
		Пока ЗначениеЗаполнено(СтрокаДляРасшифровки) Цикл
			
			Если СтрокаДляРасшифровки.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
				
				ЗначениеГруппировки   = СтрокаДляРасшифровки.ЗначениеГруппировки;
				ИмяКолонкиГруппировки = СтрокаДляРасшифровки.ИмяКолонки;
				
				Если ЗначениеЗаполнено(ИмяКолонкиГруппировки) Тогда
					Расшифровка.Отбор.Вставить(ИмяКолонкиГруппировки, ЗначениеГруппировки);
					Если ОписаниеПоказателя <> Неопределено Тогда
						СубконтоПоказателя = ОписаниеПоказателя.Субконто; // Структура из КлючиИЗначение
						Если СубконтоПоказателя.Свойство(ИмяКолонкиГруппировки) Тогда
							Субконто = СубконтоПоказателя[ИмяКолонкиГруппировки]; // Структура из КлючИЗначения
							Если СписокВидовСубконто.НайтиПоЗначению(Субконто.Вид) = Неопределено Тогда
								СписокВидовСубконто.Добавить(Субконто.Вид);
							КонецЕсли;
						КонецЕсли;
						Для каждого ОтборСтроки из Расшифровка.Отбор Цикл
							Если СубконтоПоказателя.Свойство(ОтборСтроки.Ключ) Тогда
								Субконто = СубконтоПоказателя[ОтборСтроки.Ключ]; // Структура из КлючИЗначения
								Если СписокВидовСубконто.НайтиПоЗначению(Субконто.Вид) = Неопределено Тогда
									СписокВидовСубконто.Добавить(Субконто.Вид);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДляРасшифровки = СтрокаДляРасшифровки.Родитель;
			
		КонецЦикла;
		
		Если Расшифровка.Показатель.ВидЭлемента = ВидыЭлементов.Измерение Тогда
			Показатель = ПоказательСубконто(Расшифровка.Показатель, ВидыЭлементов);
			Если Показатель <> Неопределено Тогда
				Расшифровка.Показатель = Показатель;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокВидовСубконто.Количество() Тогда
			Расшифровка.Вставить("ВидСубконто", СписокВидовСубконто);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Расшифровка;
	
КонецФункции

Функция ОбъединитьПоГоризонтали(Документ, НомерЛевойКолонки, Знач КоличествоЯчеек, НомерСтроки, ТекстОбласти = "", Центрировать = Ложь)
	
	Если КоличествоЯчеек <= 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Область = Документ.Область(НомерСтроки, НомерЛевойКолонки, НомерСтроки, НомерЛевойКолонки + КоличествоЯчеек - 1);
	Область.Объединить();
	Если НЕ ПустаяСтрока(ТекстОбласти) Тогда
		Область.Текст = ТекстОбласти;
	КонецЕсли;
	Если Центрировать Тогда
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	КонецЕсли;
	
	Возврат Область;
	
КонецФункции

Процедура ОбвестиОбласть(Область)
	
	ЛинияРамки = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	Область.ГраницаСверху = ЛинияРамки;
	Область.ГраницаСлева  = ЛинияРамки;
	Область.ГраницаСправа = ЛинияРамки;
	
КонецПроцедуры

Функция КоличествоКолонокЗаголовкаШапки(ЭлементШапки)
	
	КоличествоКолонок = ЭлементШапки.Строки.Количество();
	КоличествоПодчиненныхКолонок(ЭлементШапки, КоличествоКолонок);
	Если КоличествоКолонок = 0 Тогда 
		Возврат 1;
	Иначе
		Возврат КоличествоКолонок;
	КонецЕсли;
	
КонецФункции

Процедура КоличествоПодчиненныхКолонок(Колонка, КоличествоКолонок)
	
	Для каждого ПодчиненныйЭлемент из Колонка.Строки Цикл
		
		Если ПодчиненныйЭлемент.Строки.Количество() Тогда
			КоличествоКолонок = КоличествоКолонок + ПодчиненныйЭлемент.Строки.Количество() - 1;
		КонецЕсли;
		
		КоличествоПодчиненныхКолонок(ПодчиненныйЭлемент, КоличествоКолонок);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииРасшифровкиОтчета


// Описание
// 
// Параметры:
// 	ПараметрыОтчета - Структура - Описание:
// * ДанныеПоказателя - Структура - 	:
//  **Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
Процедура РасшифровкаПроизводногоПоказателя(ПараметрыОтчета)
	
	ДанныеПоказателя = ПараметрыОтчета.ДанныеПоказателя;
	ОбратныйЗнак = ДанныеПоказателя.ОбратныйЗнак;
	
	// Подготовить макет
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.МеждународныйОтчет.ПолучитьМакет("РасшифровкаПроизводногоПоказателя");
	ОбластьСекции = Макет.ПолучитьОбласть("Секция");
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести заголовок отчета
	Область = Макет.ПолучитьОбласть("Показатель");
	Область.Параметры.Показатель = ДанныеПоказателя.НаименованиеДляПечати;
	ТабличныйДокумент.Вывести(Область);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести секцию параметров
	ОбластьЗаголовокСекции = Макет.ПолучитьОбласть("ЗаголовокСекции");
	ОбластьЗаголовокСекции.Параметры.Заголовок = "Параметры";
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	ТабличныйДокумент.НачатьГруппуСтрок();
	// Период
	Период = ПараметрыОтчета.ПериодОтчета;
	ПериодСтрокой = ОтчетыУТКлиентСервер.ПолучитьПредставлениеПериода(Период.НачалоПериода, Период.КонецПериода, Ложь, ПараметрыОтчета.ЯзыкОтчета);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, НСтр("ru = 'Период';
														|en = 'Period'")+": "+ПериодСтрокой);
	//Кратность сумм
	КратностьСумм = ПараметрыОтчета.КратностьСумм;
	Если КратностьСумм  <> Перечисления.ВидыПредставленияЧисел.БезИзменений Тогда
		ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, КратностьСумм);
	КонецЕсли;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);

	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести секцию отбора
	Если ПараметрыОтчета.Отбор.Количество() Тогда
		ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru = 'Отбор';
															|en = 'Filter'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
		ТабличныйДокумент.НачатьГруппуСтрок();
		Для Каждого ЭлементОтбора Из ПараметрыОтчета.Отбор Цикл
			Если ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
				Шаблон = "%1: %2";
				ЗначениеОтбора = СтрСоединить(ЭлементОтбора.Значение, ",");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ЭлементОтбора.Ключ, ЗначениеОтбора);
				ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, Текст);
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести текст формулы
	ТекстФормулы = ДанныеПоказателя.Формула;
	Если ОбратныйЗнак Тогда
		ТекстФормулы = "-("+ТекстФормулы+")";
	КонецЕсли;
	ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru = 'Формула расчета';
														|en = 'Calculation formula'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	ТабличныйДокумент.НачатьГруппуСтрок();
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, ТекстФормулы);
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	
	// Получим значения операндов формулы
	ТекстФормулы = "";
	ОперандыФормулы = ПолучитьОперандыФормулы(ДанныеПоказателя, ПараметрыОтчета, ТекстФормулы);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести текст формулы с подставленными значениями
	Если ОперандыФормулы.Количество() Тогда
		Если ОбратныйЗнак Тогда
			ТекстФормулы = "-("+ТекстФормулы+")";
		КонецЕсли;
		ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru = 'Вычисления';
															|en = 'Calculations'");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
		ТабличныйДокумент.НачатьГруппуСтрок();
		ВывестиСтроку(ТабличныйДокумент, ОбластьСекции, ТекстФормулы);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести результат расчета
	Область = Макет.ПолучитьОбласть("ЗначениеПоказателя");
	Область.Параметры.Результат = ДанныеПоказателя.Значение;
	ТабличныйДокумент.Вывести(Область);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	ВывестиСтроку(ТабличныйДокумент, ОбластьСекции);
	
	///////////////////////////////////////////////////////////////////////////////////
	// Вывести значения операндов
	ОбластьЗаголовокСекции.Параметры.Заголовок = НСтр("ru = 'Операнды формулы';
														|en = 'Formula operands'");
	ТабличныйДокумент.Вывести(ОбластьЗаголовокСекции);
	
	Область = Макет.ПолучитьОбласть("ШапкаОперандов");
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Операнд");
	Для Каждого Операнд Из ОперандыФормулы Цикл
		Область.Параметры.Заполнить(Операнд);
		ДанныеРасшифровки = Новый Структура("Показатель, ДатаНачала, ДатаОкончания", Операнд.ЭлементОтчета);
		ДанныеРасшифровки.Вставить("ДатаНачала", Период.НачалоПериода);
		ДанныеРасшифровки.Вставить("ДатаОкончания", Период.КонецПериода);
		Если ДанныеПоказателя.Свойство("ВидСубконто") Тогда
			ДанныеРасшифровки.Вставить("Отбор",       ДанныеПоказателя.Отбор);
			ДанныеРасшифровки.Вставить("ВидСубконто", ДанныеПоказателя.ВидСубконто);
		КонецЕсли;
		Область.Параметры.Показатель = ДанныеРасшифровки;
		ТабличныйДокумент.Вывести(Область);
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////
	// Установить дополнительные параметры табличного документа
	ТабличныйДокумент.ЧерноБелаяПечать = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	ПараметрыОтчета.Вставить("Результат", ТабличныйДокумент);
	
КонецПроцедуры

Процедура ВывестиСтроку(ТабличныйДокумент, Область, Текст = "")
	
	Область.Параметры.Строка = Текст;
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Функция ПолучитьОперандыФормулы(ДанныеЭлемента, ПараметрыОтчета, ТекстФормулы)
	
	ВидОтчета = ПараметрыОтчета.ВидОтчета;
	Точность = ДанныеЭлемента.Точность;
	Если ТипЗнч(Точность) <> Тип("Число") Тогда
		Точность = 0;
	КонецЕсли;
	
	ФорматнаяСтрока = ПараметрыОтчета.ФорматЗначений;
	Если СтрНайти(ФорматнаяСтрока, "ЧС=") = 0 И Точность >= 0 Тогда
		ФорматнаяСтрока = ФорматнаяСтрока + "; ЧДЦ=" + Точность;
	КонецЕсли;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Отчеты.МеждународныйОтчет.ПолучитьМакет("ОперандыПроизводногоПоказателя");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ЭлементОтчета", ДанныеЭлемента.Ссылка);
	КэшРеквизитов = ФинОтчеты.КэшДополнительныеРеквизиты(ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", КэшРеквизитов);
	
	ОперандыФормулы = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева);
	ТекстФормулы = ДанныеЭлемента.Формула;
	ПараметрыПоказателя = ПараметрыПолученияПоказателя(ПараметрыОтчета);
	
	Если ДанныеЭлемента.ВидСубконто <> Неопределено Тогда
		Для каждого ОтборПоказателя Из ДанныеЭлемента.Отбор Цикл
			
			Если СтрНайти(ОтборПоказателя.Ключ, "Субконто") > 0 Тогда
				
				НомерСубконто = Число(СтрЗаменить(ОтборПоказателя.Ключ, "Субконто", ""));
				Если НомерСубконто  > ДанныеЭлемента.ВидСубконто.Количество() Тогда
					Прервать;
				КонецЕсли;
				
				СтруктураОтбораСубконто = Новый Структура;
				СтруктураОтбораСубконто.Вставить("Вид", ДанныеЭлемента.ВидСубконто[НомерСубконто - 1].Значение);
				СтруктураОтбораСубконто.Вставить("ЕстьНастройки", Истина);
				СтруктураОтбораСубконто.Вставить("Наименование", ОтборПоказателя.Ключ);
				ОтборСубконто = Новый ОтборКомпоновкиДанных;
				ЭлементОтбораСубконто = ОтборСубконто.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораСубконто.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораСубконто.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОтборПоказателя.Ключ);
				ЭлементОтбораСубконто.ПравоеЗначение = ОтборПоказателя.Значение;
				ОтборДляСКД = Новый Структура("Отбор", ОтборСубконто);
				СтруктураОтбораСубконто.Вставить("Отбор", Новый ХранилищеЗначения(ОтборДляСКД));
				
				Если ПараметрыПоказателя.Субконто = Неопределено Тогда
					ПараметрыПоказателя.Субконто = Новый Структура;
				КонецЕсли;
				ПараметрыПоказателя.Субконто.Вставить(ОтборПоказателя.Ключ, СтруктураОтбораСубконто);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Операнд Из ОперандыФормулы Цикл
		СтрокаОтбора = "";
		Если Операнд.ЕстьНастройки Тогда
			ЗначениеОтбора = Операнд.ДополнительныйОтбор; //ХранилищеЗначения
			НастройкаОтбора = ЗначениеОтбора.Получить();
			Если НастройкаОтбора <> Неопределено Тогда
				СтрокаОтбора = Строка(НастройкаОтбора.Отбор);
			КонецЕсли;
		КонецЕсли;
		Операнд.Отбор = СтрокаОтбора;
		Операнд.ПредставлениеИтога = ПредставлениеТипаИтога(Операнд.ТипИтога, Операнд.НачальноеСальдо);
		ЗначенияОперанда = ЗначениеПростогоПоказателя(ПараметрыПоказателя, Операнд);
		Если ЗначенияОперанда.Количество() Тогда
			Значение = ЗначенияОперанда.Итог("Значение");
			Операнд.Значение = Формат(?(Точность >= 0, Значение, Окр(Значение, Точность)), ФорматнаяСтрока);
			Результат = ЗначенияОперанда[0];
			СтрокаЗначения = Формат(?(Точность >= 0, Результат.Значение, Окр(Результат.Значение, Точность)), ФорматнаяСтрока);
			Если Значение = 0 Тогда
				СтрокаЗначения = "0";
			КонецЕсли;
			ТекстФормулы = СтрЗаменить(ТекстФормулы, "["+Операнд.Идентификатор+"]", СтрокаЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстФормулы) Тогда
		ТекстФормулы = "0";
	КонецЕсли;
	
	Возврат ОперандыФормулы;
	
КонецФункции

Функция ПредставлениеТипаИтога(ТипИтога, НачальноеСальдо)
	
	Результат = "";
	ТипыИтогов = Перечисления.ТипыИтогов;
	Если ТипИтога = ТипыИтогов.Сальдо И НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Сальдо на начало периода';
						|en = 'Opening balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоДт И НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Дебетовое сальдо на начало периода';
						|en = 'Start debit balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоКт И НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Кредитовое сальдо на начало периода';
						|en = 'Start credit balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.Сальдо И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Сальдо на конец периода';
						|en = 'Closing balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоДт И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Дебетовое сальдо на конец периода';
						|en = 'Closing debit balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.СальдоКт И НЕ НачальноеСальдо Тогда
		Результат = НСтр("ru = 'Кредитовое сальдо на конец периода';
						|en = 'Closing credit balance'");
	ИначеЕсли ТипИтога = ТипыИтогов.Оборот Тогда
		Результат = НСтр("ru = 'Оборот за период';
						|en = 'Turnover for the period'");
	ИначеЕсли ТипИтога = ТипыИтогов.ОборотДт Тогда
		Результат = НСтр("ru = 'Дебетовый оборот за период';
						|en = 'Debit turnover for a period'");
	ИначеЕсли ТипИтога = ТипыИтогов.ОборотКт Тогда
		Результат = НСтр("ru = 'Кредитовый оборот за период';
						|en = 'Credit turnover for the period'");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункцииФормированиеОтчетности

Функция ПериодОтчета(НачалоПериода = Неопределено,КонецПериода = Неопределено) Экспорт
	
	Возврат Новый Структура("НачалоПериода,КонецПериода,Периодичность",
							 НачалоПериода,КонецПериода,Новый Массив);
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
//  * ДатаНачала - Дата - Начало периода.
//  * ДатаОкончания - Дата - Окончания периода.
// 
Функция ОписаниеПериода(ДатаНачала = Неопределено, ДатаОкончания = Неопределено)
	
	Возврат Новый Структура("ДатаНачала,ДатаОкончания", ДатаНачала, ДатаОкончания);
	
КонецФункции


// Описание
// 
// Параметры:
// 	Элемент - СтрокаДереваЗначений, Неопределено - Описание:
// * Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ЭлементОтчетаСвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * НаименованиеДляПечати - Строка -
// * ОбратныйЗнак - Булево -
// * ЕстьНастройки - Булево -
// * СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * Комментарий - Строка -
// * ДополнительныйОтбор - ХранилищеЗначения -
// * ЭтоСвязанный - Булево -
// * Код - Строка -
// * АдресСтруктурыЭлемента - Строка -
// * СчетПоказательИзмерение - ПланСчетовСсылка, СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов -
// * Примечание - СправочникСсылка.ВидыФинансовыхОтчетов -
// * Точность - Число -
// Возвращаемое значение:
// 	Строка - Уникальная строка сформированная по данным элемента
Функция ИдентификаторЭлемента(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СтрокаДереваЗначений") Тогда
		СтрокаВидаЭлемента = НаименованиеСсылки(Элемент.ВидЭлемента) + Строка(Элемент.Код);
	ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент,"Код,ВидЭлемента");
		СтрокаВидаЭлемента = НаименованиеСсылки(Реквизиты.ВидЭлемента) + Строка(Реквизиты.Код);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
		СтрокаВидаЭлемента = Элемент.Идентификатор;
	Иначе
		СтрокаВидаЭлемента = СтрЗаменить(ТРег(Строка(Элемент))," ","");
	КонецЕсли;
	
	СтрокаВидаЭлемента = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()/",СтрокаВидаЭлемента,"");
	
	Возврат СтрокаВидаЭлемента;
	
КонецФункции

Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник)
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

Функция НаименованиеСсылки(ИсходнаяСтрока)
	
	Возврат СтрЗаменить(ТРег(Строка(ИсходнаяСтрока))," ","");
	
КонецФункции


// Описание
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * СообщенияОбОшибках - Массив из СообщениеПользователю - 
// * Измерения - СписокЗначений -
// * Субконто - Структура Из КлючИЗначение -
// * ОтборОтчета - СписокЗначений -
// * ИнтервалыОтчета - см. ИнтервалыОтчета
// * ПериодОтчета - см. ПериодОтчета
// * Ресурс - Строка -
// * Показатель - Структура, СтрокаТаблицыЗначений, Неопределено, СтрокаДереваЗначений - Описание:
Функция НовыеПараметрыПолученияПоказателя()
	
	Результат = Новый Структура;
	Результат.Вставить("Показатель");
	Результат.Вставить("Ресурс", "Сумма");
	Результат.Вставить("ПериодОтчета", ПериодОтчета());
	Результат.Вставить("ИнтервалыОтчета");
	Результат.Вставить("ОтборОтчета", Новый СписокЗначений);
	Результат.Вставить("Субконто");
	Результат.Вставить("Измерения", Новый СписокЗначений);
	Результат.Вставить("СообщенияОбОшибках");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Структура - описание таблицы показателей:
//	* ЭтоПроизвольная - Булево -
//	* ТаблицаПоказателиВКолонках - Булево - 
//	* Показатели - Соответствие из КлючИЗначение- описание показателей:
//	 ** Ключ     - Строка - Имя показателя.
//	 ** Значение - см. ОписаниеПоказателя 
//	* Периодичность - Массив -  
//	* СтрокаРесурсов - Строка - 
//	* ЗначенияПоказателей - см. ЗначенияПоказателей
//	* ШапкаТаблицы - Структура - 
//	* КоличествоУровнейШапки - Число -
//	* ВсегоУровнейКолонок - Число -
//	* НомерКолонки - Число - 
//	* Ресурсы - Массив из Строка -
//	* Расшифровка - Соответствие - 
//	* ДеревоКолонок - см. ОписаниеДереваКолонокОтчета
//	* ДеревоСтрок - см. ОписаниеДереваСтрокОтчета
//	* ТекущийУровень - КоллекцияСтрокДереваЗначений - 
//	* ТекущийРодитель - СтрокаДереваЗначений -
//	* ТекущийПоказатель - СтрокаДереваЗначений -
//	* КолонкиОтчета - см. ОписаниеКолонокОтчета
//	* ВертикальныеГруппировки - Соответствие -
//	* ИзмеренияРегистра - Массив из Строка - 
//	* ИзмеренияТаблицы - Массив из Строка - 
//	* ИзмеренияСтрок - Массив из Строка - 
//	* ТекущиеГруппировки - Структура - 
//	* ОписаниеАналитик - Соответствие - 
//
Функция ОписаниеТаблицы(ЭтоПроизвольная = Ложь, ТаблицаПоказателиВКолонках = Ложь)
	
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ЭтоПроизвольная",                   ЭтоПроизвольная);
	ОписаниеТаблицы.Вставить("ТаблицаПоказателиВКолонках",        ТаблицаПоказателиВКолонках);
	ОписаниеТаблицы.Вставить("Показатели",                        Новый Соответствие);
	ОписаниеТаблицы.Вставить("Периодичность",                     Новый Массив);
	ОписаниеТаблицы.Вставить("СтрокаРесурсов",                    Неопределено);
	
	// Общие колонки дерева строк и дерева колонок
	ДеревоСтрок = ОписаниеДереваСтрокОтчета();
	
	// Дополним таблицу колонок
	ДеревоКолонок = ОписаниеДереваКолонокОтчета();
	
	ЗначенияПоказателей = ЗначенияПоказателей();
	
	ОписаниеКолонок = ОписаниеКолонокОтчета();
	
	ОписаниеТаблицы.Вставить("ЗначенияПоказателей",               ЗначенияПоказателей);
	ОписаниеТаблицы.Вставить("ШапкаТаблицы",                      Неопределено);
	ОписаниеТаблицы.Вставить("КоличествоУровнейШапки",            0);
	ОписаниеТаблицы.Вставить("ВсегоУровнейКолонок",               0);
	ОписаниеТаблицы.Вставить("НомерКолонки",                      1);
	ОписаниеТаблицы.Вставить("Ресурсы",                           Новый Массив);
	ОписаниеТаблицы.Вставить("Расшифровка",                       Новый Соответствие);
	
	ОписаниеТаблицы.Вставить("ДеревоКолонок",                     ДеревоКолонок);
	ОписаниеТаблицы.Вставить("ДеревоСтрок",                       ДеревоСтрок);
	
	ОписаниеТаблицы.Вставить("ТекущийУровень",                    Неопределено);
	ОписаниеТаблицы.Вставить("ТекущийРодитель",                   Неопределено);
	ОписаниеТаблицы.Вставить("ТекущийПоказатель",                 Неопределено);
	
	ОписаниеТаблицы.Вставить("КолонкиОтчета",                     ОписаниеКолонок);
	ОписаниеТаблицы.Вставить("ВертикальныеГруппировки",           Новый Соответствие);
	
	ОписаниеТаблицы.Вставить("ИзмеренияРегистра",                 Новый Массив);
	ОписаниеТаблицы.Вставить("ИзмеренияТаблицы",                  Новый Массив);
	ОписаниеТаблицы.Вставить("ИзмеренияСтрок",                    Новый Массив);
	ОписаниеТаблицы.Вставить("ТекущиеГруппировки",                Новый Структура);
	ОписаниеТаблицы.Вставить("ОписаниеАналитик",                  Новый Соответствие);
	
	Если ЭтоПроизвольная Тогда
		ОписаниеТаблицы.Вставить("СтрокаПоказателя" ,             Неопределено);
		ОписаниеТаблицы.Вставить("КолонкаПоказателя",             Неопределено);
	КонецЕсли;
	
	Возврат ОписаниеТаблицы;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// * НаименованиеДляПечати - Строка - 
// * КодСтрокиОтчета - Строка - 
// * Примечание - Строка - 
Функция ЗначенияПоказателей()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0));
	ТипСсылкаЭлементов = Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов");
	
	ЗначенияПоказателей = Новый ТаблицаЗначений;
	ЗначенияПоказателей.Колонки.Добавить("ЭлементОтчета" ,        ТипСсылкаЭлементов);
	ЗначенияПоказателей.Колонки.Добавить("НаименованиеДляПечати", ТипСтрока);
	ЗначенияПоказателей.Колонки.Добавить("КодСтрокиОтчета",       ТипСтрока);
	ЗначенияПоказателей.Колонки.Добавить("Примечание",            ТипСтрока);
	
	Возврат ЗначенияПоказателей;
	
КонецФункции

// Возвращаемое значение:
// 	ТаблицаЗначений - Содержит описание колонок отчета:
// * ИмяКолонки - Строка - 
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
// * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// * НаименованиеДляПечати - Строка- 
// * ОбратныйЗнак - Булево -
// * Операнды - Массив -
// * Отбор - Структура -
// * УровеньИтога - Число -
// * ЭтоИтог - Булево - 
// * ВыделитьЭлемент - Булево -
// * Точность - Число -
Функция ОписаниеКолонокОтчета()
	
	ТипСтрока = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0));
	ТипЧисло =  Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСсылкаЭлементов = Новый ОписаниеТипов("СправочникСсылка.ЭлементыФинансовыхОтчетов");
	
	ОписаниеКолонок = Новый ТаблицаЗначений;
	ОписаниеКолонок.Колонки.Добавить("ИмяКолонки",                ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ВидЭлемента");
	ОписаниеКолонок.Колонки.Добавить("ЭлементОтчета",             ТипСсылкаЭлементов);
	ОписаниеКолонок.Колонки.Добавить("НаименованиеДляПечати",     ТипСтрока);
	ОписаниеКолонок.Колонки.Добавить("ОбратныйЗнак",              ТипБулево);
	ОписаниеКолонок.Колонки.Добавить("Операнды");
	ОписаниеКолонок.Колонки.Добавить("Отбор");
	ОписаниеКолонок.Колонки.Добавить("УровеньИтога",              ТипЧисло);
	ОписаниеКолонок.Колонки.Добавить("ЭтоИтог",                   ТипБулево);
	ОписаниеКолонок.Колонки.Добавить("ВыделитьЭлемент",           ТипБулево);
	ОписаниеКолонок.Колонки.Добавить("Точность");
	
	Возврат ОписаниеКолонок;
	
КонецФункции

// Возвращаемое значение:
// 	ДеревоЗначений - Описание:
// 	 * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
// 	 * ИдентификаторЭлемента - Строка -
// 	 * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// 	 * НаименованиеДляПечати - Строка -
// 	 * ВыводитьЗаголовокЭлемента - Булево -
// 	 * ВыделитьЭлемент - Булево -
// 	 * РасположениеИтога - Число - 
// 	 * ОбратныйЗнак - Булево -
// 	 * ПредставлениеПериода - Строка -
// 	 * Периодичность - ПеречислениеСсылка.Периодичность -
// 	 * ИмяКолонки - Строка -
// 	 * Сортировка - Строка -
// 	 * Точность - Число -
// 	 * ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные -
// 	 * КодСтрокиОтчета - Строка -
// 	 * Примечание - Строка -
// 	 * ЭтоСвязанный - Булево - 
// 	 * ЗначениеГруппировки - Структура -
//
Функция ОписаниеДереваСтрокОтчета()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	 
	Результат = ОписаниеДереваОтчета();
	Результат.Колонки.Добавить("КодСтрокиОтчета");
	Результат.Колонки.Добавить("Примечание");
	Результат.Колонки.Добавить("ЭтоСвязанный", ТипБулево);
	Результат.Колонки.Добавить("ЗначениеГруппировки");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ДеревоЗначений - Описание:
// 	 * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// 	 * ИдентификаторЭлемента - Строка -
// 	 * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	 * НаименованиеДляПечати - Строка -
// 	 * ВыводитьЗаголовокЭлемента - Булево -
// 	 * ВыделитьЭлемент - Булево -
// 	 * РасположениеИтога - Число - 
// 	 * ОбратныйЗнак - Булево -
// 	 * ПредставлениеПериода - Строка -
// 	 * Периодичность - ПеречислениеСсылка.Периодичность -
// 	 * ИмяКолонки - Строка -
// 	 * Сортировка - Строка -
// 	 * Точность - Число -
// 	 * ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные -
// 	 * Операнды - Массив Из Строка -
// 	 * ПодчиненныхЭлементов - Число - 
// 	 * ЗначениеПоказателя - см. ПустоеЗначениеПоказателя
// 	 * Описание - СтрокаТаблицыЗначений -  
Функция ОписаниеДереваКолонокОтчета()
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	
	Результат = ОписаниеДереваОтчета();
	Результат.Колонки.Добавить("Операнды");
	Результат.Колонки.Добавить("ПодчиненныхЭлементов", ТипЧисло);
	Результат.Колонки.Добавить("ЗначениеПоказателя");
	Результат.Колонки.Добавить("Описание");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	ДеревоЗначений - Общие колонки дерева строк и дерева колонок:
// 	 * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// 	 * ИдентификаторЭлемента - Строка -
// 	 * ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	 * НаименованиеДляПечати - Строка -
// 	 * ВыводитьЗаголовокЭлемента - Булево -
// 	 * ВыделитьЭлемент - Булево -
// 	 * РасположениеИтога - Число - 
// 	 * ОбратныйЗнак - Булево -
// 	 * ПредставлениеПериода - Строка -
// 	 * Периодичность - ПеречислениеСсылка.Периодичность - 
// 	 * ИмяКолонки - Строка -
// 	 * Сортировка - Строка- 
// 	 * Точность - Число -
// 	 * ВидСубконто - ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные -
Функция ОписаниеДереваОтчета()
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	 
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("ВидЭлемента");
	Результат.Колонки.Добавить("ИдентификаторЭлемента");
	Результат.Колонки.Добавить("ЭлементОтчета");
	Результат.Колонки.Добавить("НаименованиеДляПечати");
	Результат.Колонки.Добавить("ВыводитьЗаголовокЭлемента", ТипБулево);
	Результат.Колонки.Добавить("ВыделитьЭлемент",           ТипБулево);
	Результат.Колонки.Добавить("РасположениеИтога");
	Результат.Колонки.Добавить("ОбратныйЗнак",              ТипБулево);
	Результат.Колонки.Добавить("ПредставлениеПериода");
	Результат.Колонки.Добавить("Периодичность");
	Результат.Колонки.Добавить("ИмяКолонки");
	Результат.Колонки.Добавить("Сортировка");
	Результат.Колонки.Добавить("Точность");
	Результат.Колонки.Добавить("ВидСубконто");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание показателя:
// * Описание - СтрокаДереваЗначений - 
// * Строка - СтрокаДереваЗначений - 
// * Колонка - СтрокаДереваЗначений - 
// 
Функция ОписаниеПоказателя(Описание= Неопределено, Строка = Неопределено, Колонка = Неопределено)
	
	Возврат Новый Структура("Описание, Строка, Колонка", Описание, Строка, Колонка);
	
КонецФункции

// Возвращаемое значение:
// 	Структура - Описание:
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
// * ВыводитьЗаголовокЭлемента - Булево -
// * НаименованиеДляПечати - Строка - 
// * ЭлементОтчета - СтрокаДереваЗначений - 
// * Описание - Структура -
Функция ОписаниеБлокаОтчета()
	
	ОписаниеБлока = Новый Структура("ВидЭлемента,ВыводитьЗаголовокЭлемента,НаименованиеДляПечати,ЭлементОтчета,Описание");
	Возврат ОписаниеБлока;
	
КонецФункции

Функция ДанныеТаблицыНаПечать()
	
	ДанныеНаПечать = Новый Структура;
	ДанныеНаПечать.Вставить("ВидыЭлементов");
	ДанныеНаПечать.Вставить("ДеревоСтрок");
	ДанныеНаПечать.Вставить("ЗначенияПоказателей");
	ДанныеНаПечать.Вставить("КоличествоУровнейШапки");
	ДанныеНаПечать.Вставить("КолонкиОтчета");
	ДанныеНаПечать.Вставить("Расшифровка");
	ДанныеНаПечать.Вставить("Ресурсы");
	ДанныеНаПечать.Вставить("ТаблицаПоказателиВКолонках");
	ДанныеНаПечать.Вставить("ШапкаТаблицы");
	ДанныеНаПечать.Вставить("ЭтоПроизвольная");
	ДанныеНаПечать.Вставить("Показатели");
	
	Возврат ДанныеНаПечать;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ИнтервалыОтчета - см. ИнтервалыОтчета
// 	Измерения - Неопределено, СписокЗначений - Описание
// 	Субконто - Структура из КлючИЗначение - Описание
// 		
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Показатель - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * КодСтроки - Строка -
// * Примечание - Строка -
// * ДатаНачала - Дата -
// * ДатаОкончания - Дата -
// * ПериодГод - ПеречислениеСсылка.Периодичность - 
// * ПериодПолугодие - ПеречислениеСсылка.Периодичность -
// * ПериодКвартал - ПеречислениеСсылка.Периодичность -
// * ПериодМесяц - ПеречислениеСсылка.Периодичность -
// 	
Функция ПустоеЗначениеПоказателя(ИнтервалыОтчета, Измерения = Неопределено, Субконто = Неопределено)
	
	ТипыИзмерений = Новый Соответствие;
	ТипыИзмерений.Вставить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТипыИзмерений.Вставить("Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТипыИзмерений.Вставить("НаправлениеДеятельности",Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	
	Результат = ИнтервалыОтчета.Скопировать();
	Результат.Колонки.Добавить("Значение",  Новый ОписаниеТипов("Число"));
	Если Измерения <> Неопределено Тогда
		Для Каждого Измерение Из Измерения Цикл
			Результат.Колонки.Добавить(Измерение.Значение, ТипыИзмерений[Измерение.Значение], Измерение.Представление);
			Если Измерение.Значение = "Субконто1" Тогда
				Результат.Колонки.Добавить("ВидСубконто",, "ВидСубконто");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Субконто <> Неопределено Тогда
		Для Каждого СубконтоПоказателя Из Субконто Цикл
			ТекущееСубконто = СубконтоПоказателя.Значение; // Структура из КлючИЗначение
			Если Результат.Колонки.Найти(СубконтоПоказателя.Ключ) = Неопределено Тогда
				Результат.Колонки.Добавить(СубконтоПоказателя.Ключ, ТекущееСубконто.Вид.ТипЗначения, ТекущееСубконто.Наименование);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Результат.Колонки.Добавить("ПустоеЗначение", Новый ОписаниеТипов("Булево"));
	Результат[0].ПустоеЗначение = Истина;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоПоказатель(ВидЭлемента, ВидыЭлементов, ЭтоСвязанный = Ложь)
	
	Возврат ВидЭлемента = ВидыЭлементов.МонетарныйПоказатель
			ИЛИ ВидЭлемента = ВидыЭлементов.НемонетарныйПоказатель 
			ИЛИ ВидЭлемента = ВидыЭлементов.ПроизводныйПоказатель
			ИЛИ ВидЭлемента = ВидыЭлементов.ИтогПоГруппе И ЭтоСвязанный;
	
КонецФункции

Процедура ДобавитьСообщениеОбОшибке(МассивСообщений, ТекстСообщенияПользователю, КлючДанных = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.КлючДанных = КлючДанных;
	
	МассивСообщений.Добавить(Сообщение);
	
КонецПроцедуры

// Показатель субконто.
// 
// Параметры:
//  Элемент - СтрокаДереваЗначений -
//  ВидыЭлементов - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета
// 
// Возвращаемое значение:
//  Неопределено - Показатель субконто
Функция ПоказательСубконто (Знач Элемент, ВидыЭлементов) 
	
	Пока ЗначениеЗаполнено(Элемент.Родитель) Цикл
		Если ЭтоПоказатель(Элемент.Родитель.ВидЭлемента, ВидыЭлементов) Тогда
			Возврат Элемент.Родитель;
		КонецЕсли;
		Элемент = Элемент.Родитель;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСтандартныхБухгалтерскихОтчетов

Процедура УстановитьГруппировкуВалюты(КомпоновщикНастроек, Включить)
	
	ГруппировкаВалюты = ФинансоваяОтчетностьСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура, "Валюта");
	
	Если ГруппировкаВалюты = Неопределено Тогда
		ГруппировкаВалюты = ФинансоваяОтчетностьСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура, "ВалютаБезЗаголовка");
		Если ГруппировкаВалюты <> Неопределено Тогда
			ГруппировкаВалюты.Имя = "Валюта";
		КонецЕсли;
	КонецЕсли;
	
	Если ГруппировкаВалюты <> Неопределено Тогда
		ГруппировкаРодитель = ГруппировкаВалюты.Родитель;
		
		Если ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаКомпоновкиДанных")
		И ГруппировкаРодитель.Имя = "НеВыводитьЗаголовок" Тогда
			ГруппировкаВалюты.Имя = "ВалютаБезЗаголовка";
		КонецЕсли;
		
		Если ГруппировкаВалюты.Использование <> Включить Тогда
			ГруппировкаВалюты.Использование = Включить;
			Если НЕ Включить Тогда
				Для каждого ПодчиненнаяГруппировка Из ГруппировкаВалюты.Структура Цикл
					Если ТипЗнч(ГруппировкаРодитель) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
						НоваяГруппировка = ГруппировкаРодитель.Структура.Добавить();
					Иначе
						НоваяГруппировка = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
					КонецЕсли;
					ПереместитьГруппировку(ПодчиненнаяГруппировка, НоваяГруппировка);
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		
		Ид = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ГруппировкаВалюты);
		ПользовательскаяГруппировка = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Ид);
		
		Если ПользовательскаяГруппировка <> Неопределено
		   И ПользовательскаяГруппировка.Использование <> Включить Тогда
			ПользовательскаяГруппировка.Использование = Включить;
			КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьГруппировку(ГруппировкаИсточник, ГруппировкаПриемник, ВключаяПодчиненные = Истина)
	
	ГруппировкаПриемник.Использование 	= ГруппировкаИсточник.Использование; 
	ГруппировкаПриемник.Имя 			= ГруппировкаИсточник.Имя; 
	
	Для каждого Элемент Из ГруппировкаИсточник.Выбор.Элементы Цикл 
		ДобавитьПоляВСтруктуруОтчета(ГруппировкаПриемник.Выбор.Элементы,Элемент) 
	КонецЦикла; 
		
	Для каждого Элемент Из ГруппировкаИсточник.Отбор.Элементы Цикл 
		ДобавитьОтборВСтруктуруОтчета(ГруппировкаПриемник.Отбор.Элементы,Элемент); 
	КонецЦикла; 
	
	Для каждого Элемент Из ГруппировкаИсточник.ПараметрыВывода.Элементы Цикл 
		ДобавитьПараметрыВыводаВСтруктуруОтчета(ГруппировкаПриемник.ПараметрыВывода.Элементы,Элемент); 
	КонецЦикла; 
	
	Для каждого Элемент Из ГруппировкаИсточник.ПоляГруппировки.Элементы Цикл 
		
		Если ТипЗнч(Элемент) = Тип("ПолеГруппировкиКомпоновкиДанных") Тогда 
			
			НовЭлемент = ГруппировкаПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(Элемент)); 
			ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, 
					"Использование,Поле,ТипГруппировки,ТипДополнения,НачалоПериода,КонецПериода");
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда 
			
			НовЭлемент = ГруппировкаПриемник.ПоляГруппировки.Элементы.Добавить(ТипЗнч(Элемент)); 
			НовЭлемент.Использование = Элемент.Использование; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого Элемент Из ГруппировкаИсточник.Порядок.Элементы Цикл 
		ДобавитьПорядокВСтруктуруОтчета(ГруппировкаПриемник.Порядок.Элементы,Элемент); 
	КонецЦикла; 
	
	Для каждого Элемент Из ГруппировкаИсточник.УсловноеОформление.Элементы Цикл 
		ДобавитьУсловноеОформлениеВСтруктуруОтчета(ГруппировкаПриемник.УсловноеОформление.Элементы,Элемент); 
	КонецЦикла; 
	
	Если ВключаяПодчиненные Тогда
		Для каждого СтруктураНижнегоУровня Из ГруппировкаИсточник.Структура Цикл 
			
			Если ТипЗнч(ГруппировкаПриемник) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				НоваяГруппировка = ГруппировкаПриемник.Структура.Добавить();
			Иначе
				НоваяГруппировка = ГруппировкаПриемник.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			КонецЕсли;
			
			ПереместитьГруппировку(СтруктураНижнегоУровня, НоваяГруппировка) 
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиГруппировкуПоПолю(Группировки, ИмяПоля, НайденнаяГруппировка)
	
	Для каждого Группировка Из Группировки Цикл
		
		Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			НайтиГруппировкуПоПолю(Группировка.Строки, ИмяПоля, НайденнаяГруппировка);
			Если НайденнаяГруппировка <> Неопределено Тогда
				Возврат;
			КонецЕсли;
			НайтиГруппировкуПоПолю(Группировка.Колонки, ИмяПоля, НайденнаяГруппировка);
			Если НайденнаяГруппировка <> Неопределено Тогда
				Возврат;
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(Группировка) = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипЗнч(Группировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			
			Если Группировка.ПоляГруппировки.Элементы.Количество() 
				И Группировка.ПоляГруппировки.Элементы[0].Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				НайденнаяГруппировка = Группировка;
				Возврат;
			КонецЕсли;
			
			НайтиГруппировкуПоПолю(Группировка.Структура, ИмяПоля, НайденнаяГруппировка);
			
			Если НайденнаяГруппировка <> Неопределено Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьПоляВСтруктуруОтчета(СтруктураПриемник, Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, "Заголовок,Использование,Поле");
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент));
		НовЭлемент.Использование = Элемент.Использование;
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, "Заголовок,Использование,Расположение,Поле");
		Для каждого ЭлементСтруктуры Из Элемент.Элементы Цикл
			ДобавитьПоляВСтруктуруОтчета(НовЭлемент.Элементы, ЭлементСтруктуры);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

Процедура ДобавитьПараметрыВыводаВСтруктуруОтчета(СтруктураПриемник,Элемент) 
	
	НовЭлемент = СтруктураПриемник.Найти(Строка(Элемент.Параметр)); 
	НовЭлемент.Значение = Элемент.Значение; 
	НовЭлемент.Использование = Элемент.Использование; 
	Для каждого Элемент Из Элемент.ЗначенияВложенныхПараметров Цикл 
		ДобавитьПараметрыВыводаВСтруктуруОтчета(НовЭлемент.ЗначенияВложенныхПараметров,Элемент); 
	КонецЦикла; 
	
КонецПроцедуры 

Процедура ДобавитьОтборВСтруктуруОтчета(СтруктураПриемник, Элемент)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент));
		ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, 
			"ВидСравнения,Использование,ЛевоеЗначение,ПравоеЗначение,Представление,Применение,РежимОтображения");
		
	ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент)); 
		ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, 
			"Использование,Представление,Применение,РежимОтображения,ТипГруппы");

		Для каждого ЭлементОтбора Из Элемент.Элементы Цикл 
			ДобавитьОтборВСтруктуруОтчета(НовЭлемент.Элементы, ЭлементОтбора); 
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ДобавитьУсловноеОформлениеВСтруктуруОтчета(СтруктураПриемник,Элемент) 
	
	НовЭлемент = СтруктураПриемник.Добавить(); 
	НовЭлемент.Представление = Элемент.Представление; 
	НовЭлемент.Использование = Элемент.Использование; 
	 
	Для каждого ЭлементОтбор Из Элемент.Отбор.Элементы Цикл 
		ДобавитьОтборВСтруктуруОтчета(НовЭлемент.Отбор.Элементы,ЭлементОтбор); 
	КонецЦикла; 
	 
	Для каждого ЭлементОформление Из Элемент.Оформление.Элементы Цикл 
		ДобавитьПараметрыВыводаВСтруктуруОтчета(НовЭлемент.Оформление.Элементы,ЭлементОформление); 
	КонецЦикла; 
	 
	Для каждого ЭлементПоле Из Элемент.Поля.Элементы Цикл 
		НовЭлементПоле = НовЭлемент.Поля.Элементы.Добавить(); 
		НовЭлементПоле.Использование 	= ЭлементПоле.Использование; 
		НовЭлементПоле.Поле 			= ЭлементПоле.Поле; 
	КонецЦикла; 
	
КонецПроцедуры 

Процедура ДобавитьПорядокВСтруктуруОтчета(СтруктураПриемник,Элемент) 
	
	Если ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда 
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент)); 
		ЗаполнитьЗначенияСвойств(НовЭлемент, Элемент, "Использование,Поле,ТипУпорядочивания");
		 
	ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда 
		
		НовЭлемент = СтруктураПриемник.Добавить(ТипЗнч(Элемент)); 
		НовЭлемент.Использование = Элемент.Использование; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Вызывается из стандартных отчетов МФУ.
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - 
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - 
// 	ДокументРезультат - ТабличныйДокумент - 
// 	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - 
// 	СтандартнаяОбработка - Булево - 
//
Процедура ПриКомпоновкеРезультата(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь; 
	ДокументРезультат.Очистить();
	МаксКоличествоСубконто = МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто();
	
	КлючВарианта = "";
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
		КлючВарианта = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
	ИначеЕсли КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("ВариантНаименование") Тогда
		КлючВарианта = СхемаКомпоновкиДанных.ВариантыНастроек[КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.ВариантНаименование];
	КонецЕсли;
	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
		ПараметрПланСчетов = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПланСчетов");
		Если ПараметрПланСчетов <> Неопределено
			И ПараметрПланСчетов.Использование
			И Не ЗначениеЗаполнено(ПараметрПланСчетов.Значение) Тогда
			ПараметрПланСчетов.Значение = Справочники.ПланыСчетовМеждународногоУчета.ПланСчетовПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрВидСубконто = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидСубконто");
	Если ПараметрВидСубконто <> Неопределено И  ПараметрВидСубконто.Использование Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрВидСубконто.Значение) Тогда
			КоличествоСубконто = 0
		ИначеЕсли ТипЗнч(ПараметрВидСубконто.Значение) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные") Тогда
			КоличествоСубконто = 1;
		Иначе
			КоличествоСубконто = ПараметрВидСубконто.Значение.Количество();
		КонецЕсли;
		
		Если КоличествоСубконто < МаксКоличествоСубконто Тогда 
			ГруппировкаСубконто = Неопределено;
			НайтиГруппировкуПоПолю(КомпоновщикНастроек.Настройки.Структура, "Субконто" + (КоличествоСубконто + 1), ГруппировкаСубконто); 
			
			Если ГруппировкаСубконто <> Неопределено Тогда
				ГруппировкаСубконто.Использование = Ложь;
				Ид = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту(ГруппировкаСубконто);
				ПользовательскаяГруппировка = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Ид);
				Если ПользовательскаяГруппировка <> Неопределено Тогда
					ПользовательскаяГруппировка.Использование = Ложь;
					КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
				КонецЕсли;
				
				ОсновнойНаборДанных = СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных;
				Если ТипЗнч(ОсновнойНаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
					ТекстЗапросаОстатки = ОсновнойНаборДанных.Элементы.Найти("Остатки").Запрос;
					ТекстЗапросаОбороты = ОсновнойНаборДанных.Элементы.Найти("Обороты").Запрос;
					Для НомерСубконто = КоличествоСубконто + 1 По МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто() Цикл
						ТекстСубконто 		= ".Субконто" + НомерСубконто + " КАК Субконто" + НомерСубконто + "," + Символы.ПС;
						ТекстЗапросаОстатки = СтрЗаменить(ТекстЗапросаОстатки, "ОстаткиИОбороты" + ТекстСубконто, "");
						ТекстЗапросаОбороты = СтрЗаменить(ТекстЗапросаОбороты, "МеждународныйОбороты" + ТекстСубконто, "");
					КонецЦикла;
					ОсновнойНаборДанных.Элементы.Найти("Остатки").Запрос = ТекстЗапросаОстатки;
					ОсновнойНаборДанных.Элементы.Найти("Обороты").Запрос = ТекстЗапросаОбороты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОбщиеПараметрыСтандартныхОтчетов(КомпоновщикНастроек);
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();

	ПоказателиОтчета = Новый Структура;
	ПоказателиОтчета.Вставить("ВалютнаяСумма", 			КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказательВалютнаяСумма"));
	ПоказателиОтчета.Вставить("СуммаПредставления", 	КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказательСуммаПредставления"));
	ПоказателиОтчета.Вставить("Сумма", 					КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказательСумма"));
	ПоказателиОтчета.Вставить("Количество", 			КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПоказательКоличество"));

	УстановитьГруппировкуВалюты(КомпоновщикНастроек, ПоказателиОтчета.ВалютнаяСумма.Значение);
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		
	Если КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("ТипИтога") Тогда
		
		ТипИтога = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.ТипИтога;
		НачальноеСальдо = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.НачальноеСальдо;
		ПоказателиОтчетаСУчетомТипаИтога(ТипИтога, НачальноеСальдо, ПоказателиОтчета);
		
	КонецЕсли;
	
	НастроитьПоляВыбора(ПоказателиОтчета, НастройкиКомпоновкиДанных);
	Если НастройкиКомпоновкиДанных.Структура.Количество() И ТипЗнч(НастройкиКомпоновкиДанных.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
		НастроитьПоляВыбора(ПоказателиОтчета, НастройкиКомпоновкиДанных.Структура[0]);
	КонецЕсли;
		
	ГруппаОтбора = КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Представление = НСтр("ru = 'Отбор по выбранным полям';
										|en = 'Filter upon selected fields'");
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;	
	НастроитьОтборПоСуммам(НастройкиКомпоновкиДанных.Выбор.Элементы, ГруппаОтбора);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
	
	УдалитьЗаголовкиПолей(ДокументРезультат);

	СФормироватьЗаголовкиПолей(КлючВарианта, КомпоновщикНастроек, СхемаКомпоновкиДанных, "");
	
	ПослеКомпоновкиРезультата(НастройкиКомпоновкиДанных, ДокументРезультат, ПоказателиОтчета, КлючВарианта);
	
КонецПроцедуры

Процедура СформироватьЗаголовкиПолей(КлючВарианта, КомпоновщикНастроек, СхемаКомпоновкиДанных, Заголовок)
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("ОсновнойНаборДанных");
	Если НаборДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПолеНабораДанных Из НаборДанных.Поля Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных") Тогда		
			Если СтрНайти(ПолеНабораДанных.Поле,"ПоказателиОтчета") = 0 
				И (СтрНайти(ПолеНабораДанных.Поле,"ВалютнаяСумма") > 0 
				ИЛИ СтрНайти(ПолеНабораДанных.Поле,"СуммаПредставления") > 0 
				ИЛИ СтрНайти(ПолеНабораДанных.Поле,".Сумма") > 0
				ИЛИ СтрНайти(ПолеНабораДанных.Поле,"Количество") > 0) Тогда 
				
				ПолеНабораДанных.Заголовок = Заголовок;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаголовкиПолей(Документ)
		
	Область = Документ.НайтиТекст("Функц.");
	Если Область <> Неопределено Тогда
		Область.Текст = "";
	КонецЕсли;
	
	ОбъединитьЗаголовкиПолей(Документ, НСтр("ru = 'Показатели';
											|en = 'Indicators'"));
		
КонецПроцедуры

Процедура ОбъединитьЗаголовкиПолей(Документ, ТекстОбласти) Экспорт
	
	Область = Документ.Область("R1C1");
	
	Пока Область <> Неопределено Цикл
		Область = Документ.НайтиТекст(ТекстОбласти,Область,,,Истина);
		Если Область <> Неопределено И Документ.ФиксацияСверху <> 0 Тогда
			Колонка = "C"+Строка(Область.Лево);
			ИмяОбласти = "R"+Строка(Область.Верх)+Колонка+":R"+Строка(Документ.ФиксацияСверху)+Колонка;
			ШапкаВалюты = Документ.Область(ИмяОбласти);
			ШапкаВалюты.Объединить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НастроитьПоляВыбора(ПоказателиОтчета, ЭлементОтчета)
	
	Если ТипЗнч(ЭлементОтчета) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		Для каждого КолонкаТаблицыГруппировки Из ЭлементОтчета.Колонки Цикл
			НастроитьПоляВыбора(ПоказателиОтчета, КолонкаТаблицыГруппировки);
		КонецЦикла;
		Возврат;
		
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		
		Для каждого ПодчиненнаяГруппировка Из ЭлементОтчета.Структура Цикл
			НастроитьПоляВыбора(ПоказателиОтчета, ПодчиненнаяГруппировка);
		КонецЦикла;
		НастроитьПоляВыбора(ПоказателиОтчета,ЭлементОтчета.Выбор.Элементы);
		
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		НастроитьПоляВыбора(ПоказателиОтчета,ЭлементОтчета.Выбор.Элементы);
		
	Иначе
		
		Для Каждого ПолеВыбора Из ЭлементОтчета Цикл	
			
			Если ТипЗнч(ПолеВыбора) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = Строка(ПолеВыбора.Поле);
			Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
				НастроитьПоляВыбора(ПоказателиОтчета, ПолеВыбора.Элементы);
			Иначе
				Для Каждого Показатель Из ПоказателиОтчета Цикл
					Если СтрНайти(ИмяПоля, Показатель.Ключ) > 0 Тогда
						ПолеВыбора.Использование = Показатель.Значение.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьОтборПоСуммам(ЭлементыОтчета, ГруппаОтбора)
	
	Для Каждого ЭлементОтчета Из ЭлементыОтчета Цикл
		
		ИмяПоля = Строка(ЭлементОтчета.Поле);
		Если ТипЗнч(ЭлементОтчета) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			НастроитьОтборПоСуммам(ЭлементОтчета.Элементы, ГруппаОтбора);
		Иначе
			Если (СтрНайти(ИмяПоля, "Оборот") > 0 ИЛИ СтрНайти(ИмяПоля, "Сальдо") > 0) И ЭлементОтчета.Использование Тогда
				НовыйОтбор = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйОтбор.ЛевоеЗначение = ЭлементОтчета.Поле;
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				НовыйОтбор.ПравоеЗначение = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОбщиеПараметрыСтандартныхОтчетов(КомпоновщикНастроек)
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "СтрокаОбщиеИтоги", НСтр("ru = 'Общие итоги';
																									|en = 'Grand totals'"));
	
	ПараметрКонецПериодаГраница = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "КонецПериодаГраница");
	Если ПараметрКонецПериодаГраница <> Неопределено Тогда
		ПараметрКонецПериодаГраница.Использование = Истина;
		ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ПериодОтчета");
		Если ПараметрПериод <> Неопределено Тогда
			ПериодЗначение = ПараметрПериод.Значение;// СтандартныйПериод - 
			Если ПараметрПериод.Использование И ЗначениеЗаполнено(ПериодЗначение.ДатаОкончания) Тогда  
				ПараметрКонецПериодаГраница.Значение = Новый Граница(КонецДня(ПериодЗначение.ДатаОкончания), ВидГраницы.Включая); 
			Иначе
				ПараметрКонецПериодаГраница.Значение = Дата(1,1,1)
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	МассивВидовСубконто = Новый Массив;
	ПараметрВидыСубконто = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "СписокВидовСубконто");
	Если ПараметрВидыСубконто <> Неопределено И ЗначениеЗаполнено(ПараметрВидыСубконто.Значение) Тогда
		Если ТипЗнч(ПараметрВидыСубконто.Значение) = Тип("СписокЗначений") Тогда
			СписокВидовСубконто = ПараметрВидыСубконто.Значение;
			Для Каждого ЭлементСписка Из СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда 
					МассивВидовСубконто.Добавить(ЭлементСписка.Значение);
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивВидовСубконто.Добавить(ПараметрВидыСубконто.Значение);
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"СписокВидовСубконто", МассивВидовСубконто);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказателиОтчетаСУчетомТипаИтога(ТипИтога, НачальноеСальдо, ПоказателиОтчета)
	
	ИменаПолей = Новый Массив;
	
	Если ТипИтога = Перечисления.ТипыИтогов.СальдоДт 
			Или ТипИтога = Перечисления.ТипыИтогов.СальдоКт 
			Или ТипИтога = Перечисления.ТипыИтогов.Сальдо Тогда
		Если НачальноеСальдо Тогда
			ИменаПолей.Добавить("Оборот");
			ИменаПолей.Добавить("КонечныйОстаток");
		Иначе
			ИменаПолей.Добавить("НачальныйОстаток");
			ИменаПолей.Добавить("Оборот");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипИтога = Перечисления.ТипыИтогов.ОборотДт Тогда
		ИменаПолей.Добавить("НачальныйОстаток");
		ИменаПолей.Добавить("ОборотКт");
		ИменаПолей.Добавить("КонечныйОстаток");
	КонецЕсли;	
	Если ТипИтога = Перечисления.ТипыИтогов.ОборотКт Тогда
		ИменаПолей.Добавить("НачальныйОстаток");
		ИменаПолей.Добавить("ОборотДт");
		ИменаПолей.Добавить("КонечныйОстаток");
	КонецЕсли;
	Если ТипИтога = Перечисления.ТипыИтогов.Оборот Тогда
		ИменаПолей.Добавить("НачальныйОстаток");
		ИменаПолей.Добавить("КонечныйОстаток");
	КонецЕсли;
	
	НовыеПоказателиОтчета = Новый Структура;
	
	Для каждого ПоказательОтчета Из ПоказателиОтчета Цикл
		Если ПоказательОтчета.Значение.Значение Тогда
			Для каждого ИмяПоля Из ИменаПолей Цикл
				НовыеПоказателиОтчета.Вставить(ПоказательОтчета.Ключ + ИмяПоля, Новый Структура("Значение", Ложь));
			КонецЦикла;
		КонецЕсли; 
		НовыеПоказателиОтчета.Вставить(ПоказательОтчета.Ключ, ПоказательОтчета.Значение);
	КонецЦикла;
	
	ПоказателиОтчета = НовыеПоказателиОтчета;
		
КонецПроцедуры

Процедура ПослеКомпоновкиРезультата(НастройкиКомпоновкиДанных, ДокументРезультат, ПоказателиОтчета, КлючВарианта)
	
	Если ПоказателиОтчета.ВалютнаяСумма.Значение И КлючВарианта = "АнализСчетаМеждународный" Тогда
		Область = ДокументРезультат.НайтиТекст("Кор. счет");
		Если Область <> Неопределено Тогда
			Область.Текст = Область.Текст + "," + Символы.ПС + "Валюта";
		КонецЕсли;
	КонецЕсли;
	
	СписокОрганизаций = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиКомпоновкиДанных.Отбор, "Организация",, ВидСравненияКомпоновкиДанных.ВСписке);
	Если ТипЗнч(СписокОрганизаций) = Тип("ЭлементОтбораКомпоновкиДанных") И СписокОрганизаций.Использование Тогда
		СписокОрганизаций = СписокОрганизаций.ПравоеЗначение;
	КонецЕсли;
	
	МассивОрганизаций = Неопределено;
	Если ТипЗнч(СписокОрганизаций) = Тип("СписокЗначений") Тогда
		МассивОрганизаций = СписокОрганизаций.ВыгрузитьЗначения();
	КонецЕсли;
	
	ПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "ПериодОтчета").Значение; // СтандартныйПериод - 

	НевыполненныеЗадания = МеждународныйУчетЗакрытиеМесяца.НевыполненныеОтложенныеЗадания(
		Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете, ПериодОтчета.ДатаОкончания, МассивОрганизаций, Неопределено);
	
	Если НевыполненныеЗадания.Количество() > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Данные отчета могут быть не актуальны, т.к. выполнены не все этапы закрытия месяца, проводки документов могут измениться.';
									|en = 'The report data might be outdated as some month-end closing stages were not performed. Document entries might change.'");
		ДокументРезультат.Область("R1C1").Текст = ТекстПредупреждения;
		ДокументРезультат.Область("R1C1").ЦветТекста = ЦветаСтиля.ЦветТекстаПроблема;
		ДокументРезультат.Область(1,, 1,).ВысотаСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииФормированияДеревьевЭлементов

// Процедура заполняет палитру новых элементов, доступных
// для выбора в экземпляре вида отчета, форме конструктора формул.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для элементов которых производится заполнение
//  Параметры  - Структура - дополнительные параметры дерева.
//
Процедура ОбновитьДеревоНовыхЭлементов(Форма, Параметры) Экспорт
	
	БыстрыйПоиск = Неопределено;
	ИмяЭлементаДерева = Параметры.ИмяЭлементаДерева;
	БыстрыйПоиск = Параметры.БыстрыйПоиск;
	РежимРаботы = Параметры.РежимРаботы;

	ДеревоЭлементов = ДеревоНовыхЭлементов(Форма, ИмяЭлементаДерева);
	ДеревоЭлементов.Строки.Очистить();
	
	БыстрыйПоискДляЗапроса = "";
	Если ЗначениеЗаполнено(БыстрыйПоиск) Тогда
		БыстрыйПоискДляЗапроса = "%" + БыстрыйПоиск + "%";
	КонецЕсли;
	
	ИндексыКартинок = ФинансоваяОтчетностьСервер.ТаблицаИндексовКартинок();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ВременнаяТаблицаИндексовКартинок();

#Область БазовыеЭлементыОтчета
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЭлементовОтчетов.Ссылка КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(ВидыЭлементовОтчетов.Ссылка) КАК НаименованиеДляПечати
	|
	|ИЗ
	|	Перечисление.ВидыЭлементовФинансовогоОтчета КАК ВидыЭлементовОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок
	|		ПО ВидыЭлементовОтчетов.Ссылка = ТаблицаИндексовКартинок.ВидЭлемента
	|		И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|
	|ГДЕ
	|	ВидыЭлементовОтчетов.Ссылка В (&ДоступныеВидыЭлементов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЭлементовОтчетов.Порядок
	|";
	ДоступныеВидыЭлементов = ДоступныеБазовыеЭлементыОтчетов(РежимРаботы);
	Запрос.УстановитьПараметр("ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(Запрос.Выполнить(), ДеревоЭлементов);
	
#КонецОбласти
	
#Область МонетарныеПоказатели
	Индекс = 0;
	МассивТекстовЗапроса = Новый Массив;
	МассивУзлов = Новый Массив;
	Для каждого ПланСчетов Из Параметры.ПланыСчетов Цикл
		
		ИмяПараметраПланСчетов = "ПланСчетов" + Индекс;
		ПредставлениеПланаСчетов = "";
		ОтборПланСчетов = "ИСТИНА";
		Если ТипЗнч(ПланСчетов) = Тип("СправочникСсылка.ПланыСчетовМеждународногоУчета") Тогда
			ОбъектМетаданныхПланСчетов = Метаданные.ПланыСчетов.Международный;
			ОтборПланСчетов = СтрШаблон("ЭлементыФинОтчетов.ПланСчетов = &%1", ИмяПараметраПланСчетов);
			ПредставлениеПланаСчетов = Строка(ПланСчетов);
		Иначе
			ОбъектМетаданныхПланСчетов = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ПланСчетов);
			МенеджерПланаСчетов = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданныхПланСчетов.ПолноеИмя());
			ПредставлениеПланаСчетов = МенеджерПланаСчетов.ПредставлениеВФинансовыхОтчетах();
		КонецЕсли;
		Запрос.УстановитьПараметр(ИмяПараметраПланСчетов, ПланСчетов);
		
		Отбор = Новый Структура();
		Отбор.Вставить(ИндексыКартинок.Колонки.ВидЭлемента.Имя,  Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
		Отбор.Вставить(ИндексыКартинок.Колонки.ИмяВспомогательногоЭлемента.Имя,  ПланСчетов);
		СтрокиИндексыКартинок = ИндексыКартинок.НайтиСтроки(Отбор);
		Если СтрокиИндексыКартинок.Количество() = 0 Тогда
			Отбор = Новый Структура();
			Отбор.Вставить(ИндексыКартинок.Колонки.ВидЭлемента.Имя,  Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
			Отбор.Вставить(ИндексыКартинок.Колонки.ИмяВспомогательногоЭлемента.Имя, "");
			СтрокиИндексыКартинок = ИндексыКартинок.НайтиСтроки(Отбор);
		КонецЕсли;
		ИндексКартинки = СтрокиИндексыКартинок[0].ИндексКартинки;
		
		ИмяПараметраИндексКартинки = "ИндексКартинки" + Индекс;
		Запрос.УстановитьПараметр(ИмяПараметраИндексКартинки, ИндексКартинки);
		
		Фрагмент = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель) КАК ВидЭлемента,
		|	&ИндексКартинки КАК НестандартнаяКартинка,
		|	ЭлементыФинОтчетов.Ссылка КАК ЭлементВидаОтчетности,
		|	ЭлементыФинОтчетов.Код КАК КодСчета,
		|	ЭлементыФинОтчетов.Порядок КАК Код,
		|	ЭлементыФинОтчетов.Наименование КАК Наименование,
		|	ЭлементыФинОтчетов.Наименование КАК НаименованиеДляПечати
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК ЭлементыФинОтчетов
		|	
		|ГДЕ
		|	НЕ ЭлементыФинОтчетов.ПометкаУдаления
		|	И &ОтборПланСчетов
		|	И &ОтборПоСтроке
		|
		|УПОРЯДОЧИТЬ ПО 
		|	Код ИЕРАРХИЯ
		|";
		
		Фрагмент = СтрЗаменить(Фрагмент, "&ИндексКартинки", "&" + ИмяПараметраИндексКартинки);
		Фрагмент = СтрЗаменить(Фрагмент, "&ПолноеИмяОбъектаМетаданных", ОбъектМетаданныхПланСчетов.ПолноеИмя());
		Фрагмент = СтрЗаменить(Фрагмент, "&ОтборПланСчетов", ОтборПланСчетов);
		
		ТекстОтбора = 
		?(ЗначениеЗаполнено(БыстрыйПоискДляЗапроса), 
			СтрШаблон("(ЭлементыФинОтчетов.Наименование ПОДОБНО ""%1"" ИЛИ ЭлементыФинОтчетов.Код ПОДОБНО ""%1"")", БыстрыйПоискДляЗапроса),
			"ИСТИНА");
		Фрагмент = СтрЗаменить(Фрагмент, "&ОтборПоСтроке", ТекстОтбора);
		МассивТекстовЗапроса.Добавить(Фрагмент);
		
		СтрокаМонетарногоПоказателя = ДеревоЭлементов.Строки.Вставить(3);
		СтрокаМонетарногоПоказателя.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель;
		СтрокаМонетарногоПоказателя.Наименование = СтрШаблон(НСтр("ru = 'План счетов ""%1""';
																	|en = 'Chart of accounts ""%1""'"), ПредставлениеПланаСчетов);
		СтрокаМонетарногоПоказателя.НаименованиеДляПечати = СтрШаблон(НСтр("ru = 'План счетов ""%1""';
																			|en = 'Chart of accounts ""%1""'"),  ПредставлениеПланаСчетов);
		СтрокаМонетарногоПоказателя.НестандартнаяКартинка = ИндексКартинки;
		СтрокаМонетарногоПоказателя.ЭтоГруппа = Истина;
		
		МассивУзлов.Добавить(СтрокаМонетарногоПоказателя);
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ТекстЗапросаМонетарныхПоказателей = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Если ТекстЗапросаМонетарныхПоказателей <> "" Тогда
		Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		Для Индекс = 0 По РезультатыЗапроса.Количество() - 1 Цикл
			ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(РезультатыЗапроса[Индекс], МассивУзлов[Индекс]);
		КонецЦикла;
	КонецЕсли;
#КонецОбласти
	
#Область НемонетарныеПоказатели
	Отбор = Новый Структура();
	Отбор.Вставить(ИндексыКартинок.Колонки.ВидЭлемента.Имя,  Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	Отбор.Вставить(ИндексыКартинок.Колонки.ИмяВспомогательногоЭлемента.Имя,  "");
	ИндексКартинки = ИндексыКартинок.НайтиСтроки(Отбор)[0].ИндексКартинки;
	
	СтрокаНемонетарногоПоказателя = ДеревоЭлементов.Строки.Добавить();
	СтрокаНемонетарногоПоказателя.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель;
	СтрокаНемонетарногоПоказателя.Наименование = НСтр("ru = 'Немонетарные показатели';
														|en = 'Non-monetary items'");
	СтрокаНемонетарногоПоказателя.НаименованиеДляПечати = НСтр("ru = 'Немонетарные показатели';
																|en = 'Non-monetary items'");
	СтрокаНемонетарногоПоказателя.НестандартнаяКартинка = ИндексКартинки;
	СтрокаНемонетарногоПоказателя.ЭтоГруппа = Истина;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель) КАК ВидЭлемента,
	|	ТаблицаИндексовКартинок.ИндексКартинки КАК НестандартнаяКартинка,
	|	НемонетарныеПоказатели.Ссылка КАК ЭлементВидаОтчетности,
	|	НемонетарныеПоказатели.Код КАК Код,
	|	НемонетарныеПоказатели.Наименование КАК Наименование,
	|	НемонетарныеПоказатели.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	НемонетарныеПоказатели.ЭтоГруппа КАК ЭтоГруппа
	|
	|ИЗ
	|	Справочник.НемонетарныеПоказатели КАК НемонетарныеПоказатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок КАК ТаблицаИндексовКартинок
	|		ПО (ВЫБОР
	|				КОГДА НемонетарныеПоказатели.ЭтоГруппа
	|					ТОГДА ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = ""Группа""
	|				ИНАЧЕ ТаблицаИндексовКартинок.ВидЭлемента = ЗНАЧЕНИЕ(Перечисление.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель)
	|						И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|			КОНЕЦ)
	|ГДЕ
	|	НемонетарныеПоказатели.ПометкаУдаления = ЛОЖЬ
	|	И НемонетарныеПоказатели.Предопределенный = ЛОЖЬ
	|	И &ОтборПоСтроке
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Наименование
	|";
	
	ТекстОтбора = 
		?(ЗначениеЗаполнено(БыстрыйПоискДляЗапроса), 
			СтрШаблон("НемонетарныеПоказатели.НаименованиеДляПечати ПОДОБНО ""%1""", БыстрыйПоискДляЗапроса), 
			"ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоСтроке", ТекстОтбора);
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ФинансоваяОтчетностьСервер.РезультатЗапросаВДерево(РезультатЗапроса, СтрокаНемонетарногоПоказателя);
#КонецОбласти
	
	Если РежимРаботы = Перечисления.РежимыОтображенияДереваНовыхЭлементов.НастройкаВидаОтчета Тогда
	
		// Добавим элементы таблицы
		СтрокаТаблицы = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная); 
		СтрокаЭлемент = СтрокаТаблицы.Строки.Добавить(); 
		ЭлементТаблицы = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы;
		СтрокаЭлемент.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ЭлементТаблицы);
		СтрокаЭлемент.Наименование = Строка(ЭлементТаблицы);
		СтрокаЭлемент.НаименованиеДляПечати = Строка(ЭлементТаблицы);
		СтрокаЭлемент.ВидЭлемента = ЭлементТаблицы;
		
		// Добавим измерения
		ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, Параметры.ПланыСчетов, БыстрыйПоиск);
		
	КонецЕсли;// РежимРаботы = НастройкаВидаОтчета
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

// Функция возвращает дерево элементов вида отчета
// 
// Параметры:
// 	ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов - вид отчета, для которого требуется построить дерево
// 	РодительЭлементов - Неопределено - Описание
// 	КэшРеквизитов - Неопределено - Описание
// 	ВыводитьЭлементыСложнойТаблицы - Булево - признак, что требуется выводить элементы, подчиненные элементу "Настройка Ячеек".
// 	
// Возвращаемое значение:
// 	ДеревоЗначений - дерево элементов финансового отчета:
// 	* Родитель - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// 	* ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - 
// 	* ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// 	* ЭлементОтчетаСвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	* НаименованиеДляПечати - Строка - 
// 	* ОбратныйЗнак - Булево -
// 	* ЕстьНастройки - Булево - 
// 	* СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// 	* Комментарий - Строка - 
// 	* ДополнительныйОтбор - ХранилищеЗначения - 
// 	* ЭтоСвязанный - Булево - 
// 	* Код - Строка - 
// 	* АдресСтруктурыЭлемента - Строка - 
// 	* СчетПоказательИзмерение - ПланСчетовСсылка, СправочникСсылка.ЭлементыФинансовыхОтчетов - 
// 	* ВидОтчета - СправочникСсылка.ВидыФинансовыхОтчетов -
// 	* Примечание - СправочникСсылка.ВидыФинансовыхОтчетов -
// 	* Точность - Число - 
// 	
Функция ОбновитьДеревоОтчета(ВидОтчета, Знач РодительЭлементов = Неопределено, КэшРеквизитов = Неопределено, ВыводитьЭлементыСложнойТаблицы = Ложь) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ДеревоЭлементовОтчета");
	Если ЗначениеЗаполнено(РодительЭлементов) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РодительЭлементов,"ВидЭлемента,Родитель");
		Если Реквизиты.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
			РодительЭлементов = Реквизиты.Родитель;
			СхемаДерева.СвязиНаборовДанных.Удалить(СхемаДерева.СвязиНаборовДанных[0]);
			ТекстЗапроса = СхемаДерева.НаборыДанных.ЭлементыОтчета.Запрос;
			СхемаДерева.НаборыДанных.ЭлементыОтчета.Запрос = СтрЗаменить(ТекстЗапроса, "И ЭлементыФинОтчетов.Родитель В(&Родители)", "");
		КонецЕсли;
	КонецЕсли;
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "ВидОтчета", ВидОтчета);
	КэшРеквизитов = ФинОтчеты.КэшДополнительныеРеквизиты(ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшРеквизитов", КэшРеквизитов);
	КэшПланыСчетовЭлементовОтчета = ФинОтчеты.КэшПланыСчетовЭлементовОтчета(ВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(КомпоновщикДерева, "КэшПланыСчетовЭлементовОтчета", КэшПланыСчетовЭлементовОтчета);
	
	Если РодительЭлементов <> Неопределено Тогда
		ФинОтчеты.УстановитьОтбор(КомпоновщикДерева.Настройки.Отбор,"ЭлементОтчета",РодительЭлементов,ВидСравненияКомпоновкиДанных.ВИерархии);
	КонецЕсли;
	
	Результат = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьДеревоСохраненныхЭлементов(Форма, Параметры) Экспорт
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	ИмяЭлементаДерева = ФинОтчеты.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	ФильтрПоВидуОтчета = ФинОтчеты.ПолучитьПараметр(Параметры,"ФильтрПоВидуОтчета");
	ТекущийВидОтчета = ФинОтчеты.ПолучитьПараметр(Параметры,"ТекущийВидОтчета");
	БыстрыйПоиск = ФинОтчеты.ПолучитьПараметр(Параметры,"БыстрыйПоиск");
	ВыводитьЭлементыСложнойТаблицы = ФинОтчеты.ПолучитьПараметр(Параметры,"ВыводитьЭлементыСложнойТаблицы", Ложь);
	РежимРаботы = Параметры.РежимРаботы;
	ПланыСчетовОтчета = Параметры.ПланыСчетов;
	ДоступныеВидыЭлементов = ДоступныеСохраненныеЭлементыОтчетов(РежимРаботы);
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	СхемаДерева = Справочники.ВидыФинансовыхОтчетов.ПолучитьМакет("ДеревоСохраненныхЭлементов");
	КомпоновщикДерева = ФинОтчеты.КомпоновщикСхемы(СхемаДерева);
	НастройкиКД = КомпоновщикДерева.Настройки;
	
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ДоступныеВидыЭлементов", ДоступныеВидыЭлементов);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ВыводитьЭлементыСложнойТаблицы", ВыводитьЭлементыСложнойТаблицы);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ПланыСчетов", ПланыСчетовОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "ТекущийОтчет", ТекущийВидОтчета);
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиКД, "КэшПланыСчетовЭлементовОтчета", ФинОтчеты.КэшПланыСчетовЭлементовОтчета(ФильтрПоВидуОтчета));
	
	ФинОтчеты.УстановитьОтбор(НастройкиКД.Отбор, "НаименованиеДляПечати", БыстрыйПоиск,,ЗначениеЗаполнено(БыстрыйПоиск));
	ФинОтчеты.УстановитьОтбор(НастройкиКД.Отбор, "ВидОтчета", ФильтрПоВидуОтчета,,ЗначениеЗаполнено(ФильтрПоВидуОтчета));
	
	ДеревоЭлементов = ФинОтчеты.ВыгрузитьРезультатСКД(СхемаДерева, КомпоновщикДерева,,Истина);
	
	ДопРеквизиты = Новый Структура("СчетПланаСчетов,ТипИтога,НачальноеСальдо,НемонетарныйПоказатель,ВыводитьЗаголовокЭлемента");
	Для Каждого Колонка Из ДеревоЭлементов.Колонки Цикл
		Для Каждого Реквизит Из ДопРеквизиты Цикл
			Если СтрНайти(Колонка.Имя, Реквизит.Ключ) > 0 Тогда
				Колонка.Имя = Реквизит.Ключ;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВидЭлемента = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель");
	Отбор = Новый Структура("ВидЭлемента", ВидЭлемента);
	МонетарныеПоказатели = ДеревоЭлементов.Строки.НайтиСтроки(Отбор, Истина);
	//++ Локализация
	Для Каждого Показатель Из МонетарныеПоказатели Цикл
		Если ТипЗнч(Показатель.СчетПланаСчетов) = РеглУчетКлиентСервер.ТипПланСчетов() Тогда
			Показатель.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ВидЭлемента, "Регл");
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
		
	СгруппироватьДеревоПоВидамОтчетов(ДеревоЭлементов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

Процедура ОбновитьДеревоСсылокЭлемента(Форма, Параметры) Экспорт
	
	ИмяЭлементаДерева = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ИмяЭлементаДерева");
	ЭлементОтчета = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"ЭлементОтчета");
	СчетПланаСчетов = ФинансоваяОтчетностьСервер.ПолучитьПараметр(Параметры,"СчетПланаСчетов");
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = ФинансоваяОтчетностьСервер.ВременнаяТаблицаИндексовКартинок();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаСсылокНаЭлементОтчета();
	ЭтоСчетМУ = Истина;
	Если ЗначениеЗаполнено(СчетПланаСчетов) Тогда
		ЭтоСчетМУ = ТипЗнч(СчетПланаСчетов) = МеждународныйУчетКлиентСервер.ТипПланСчетов();
	КонецЕсли;
	Запрос.УстановитьПараметр("ЭтоСчетМУ", ЭтоСчетМУ);
	Запрос.УстановитьПараметр("ЭлементОтчета", ЭлементОтчета);
	Запрос.УстановитьПараметр("Владелец", ЭлементОтчета.Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоЭлементов = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Параметры.Вставить("КоличествоСсылок", ДеревоЭлементов.Строки.Количество());
	
	СгруппироватьДеревоПоВидамОтчетов(ДеревоЭлементов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЭлементов, ИмяЭлементаДерева);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииФормированияДеревьевЭлементов

Функция ТекстЗапросаСсылокНаЭлементОтчета() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭлементыФинОтчетов.Владелец КАК ВидОтчета,
	|	ЭлементыФинОтчетов.Ссылка КАК ЭлементОтчета,
	|	ЭлементыФинОтчетов.НаименованиеДляПечати КАК НаименованиеДляПечати,
	|	ТаблицаИндексовКартинок.ИндексКартинки + 1 КАК НестандартнаяКартинка
	|ИЗ
	|	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндексовКартинок
	|		ПО ЭлементыФинОтчетов.ВидЭлемента = ТаблицаИндексовКартинок.ВидЭлемента
	|		И ТаблицаИндексовКартинок.ИмяВспомогательногоЭлемента = """"
	|ГДЕ
	|	ЭлементыФинОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И (ЭлементыФинОтчетов.СвязанныйЭлемент = &ЭлементОтчета
	|				И (ЭлементыФинОтчетов.Владелец <> &Владелец ИЛИ &Владелец = НЕОПРЕДЕЛЕНО)
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеДляПечати";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СгруппироватьДеревоПоВидамОтчетов(Дерево)
	
	ДеревоПоВидамОтчетов = Дерево.Скопировать();
	ДеревоПоВидамОтчетов.Строки.Очистить();
	
	СтрокиДерева = Дерево.Строки;
	СтрокиДерева.Сортировать("ВидОтчета");
	СтрокиДереваПоВидамОтчетов = ДеревоПоВидамОтчетов.Строки;
	ГруппирующаяСтрока = Неопределено;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл 
		
		Если ГруппирующаяСтрока = Неопределено ИЛИ ГруппирующаяСтрока.ВидОтчета <> СтрокаДерева.ВидОтчета Тогда
			ГруппирующаяСтрока = СтрокиДереваПоВидамОтчетов.Добавить();
			ГруппирующаяСтрока.НаименованиеДляПечати = СтрокаДерева.ВидОтчета;
			ГруппирующаяСтрока.ВидОтчета = СтрокаДерева.ВидОтчета;
			ГруппирующаяСтрока.НестандартнаяКартинка = 43;
		КонецЕсли;
		
		ПараметрыУстановки = ФинансоваяОтчетностьСервер.ШаблонПараметровУстановкиНовогоРодителя();
		ПараметрыУстановки.ЭтоСохраненные = Истина;
		ФинансоваяОтчетностьСервер.УстановитьНовогоРодителя(СтрокаДерева, ГруппирующаяСтрока, ПараметрыУстановки);
		
	КонецЦикла;
	
	Дерево = ДеревоПоВидамОтчетов;
	
КонецПроцедуры

Функция ДоступныеБазовыеЭлементыОтчетов(РежимДерева = Неопределено)
	
	РежимыРаботыДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов;
	Список = Новый СписокЗначений;
	
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчетаТолькоПоказатели Тогда
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	КонецЕсли;
	
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчета Тогда// остальные
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Функция ДоступныеСохраненныеЭлементыОтчетов(РежимДерева)
	
	РежимыРаботыДерева = Перечисления.РежимыОтображенияДереваНовыхЭлементов;
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель);
	Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	
	Если РежимДерева = РежимыРаботыДерева.НастройкаВидаОтчета Тогда// остальные кроме измерений
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Группа);
		Список.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

// Возвращаемое значение:
// 	ДеревоЗначений - Описание:
// 	 *КодСчета - Строка - 
// 	 *Наименование - Строка - 
// 	 *НаименованиеДляПечати - Строка - 
// 
Функция ДеревоНовыхЭлементов(Форма, ИмяЭлементаДерева)
	
	ДеревоЭлементов = Форма.РеквизитФормыВЗначение(ИмяЭлементаДерева);
	
	Возврат ДеревоЭлементов;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ДеревоЭлементов - ДеревоЗначений - Описание:
// 	 *КодСчета - Строка - 
// 	 *Наименование - Строка - 
// 	 *НаименованиеДляПечати - Строка - 
// 	ПланыСчетов - Массив Из СправочникСсылка.ПланыСчетовМеждународногоУчета - 
// 	            - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных - 
// 	БыстрыйПоиск - Строка -
//
Процедура ДобавитьИзмеренияВДеревоНовыхЭлементов(ДеревоЭлементов, ПланыСчетов, БыстрыйПоиск)

	СтрокаИзмерения = ДеревоЭлементов.Строки.Найти(Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение); 
	СтрокаИзмерения.ВидЭлемента = Неопределено; //группировочная запись измерений не может быть перенесена в элементы отчета
	
	// Добавление периода
	СтрокаПериод = ДобавитьСтрокуИзмерения(СтрокаИзмерения, НСтр("ru = 'Период';
																|en = 'Period'"));
	СтрокаПериод.ВидЭлемента = Неопределено; //группировочная запись измерений
	СтрокаПериод.ЭтоГруппа = Истина;         //не может быть перенесена в элементы бюджета
	СтрокаПериод.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru = 'Год';
												|en = 'Year'")      , ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru = 'Полугодие';
												|en = 'Half-year'"), ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru = 'Квартал';
												|en = 'Quarter'")  , ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
	ДобавитьСтрокуИзмерения(СтрокаПериод, НСтр("ru = 'Месяц';
												|en = 'Month'")    , ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	
	ПланыСчетовПоТипам = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(ПланыСчетов);
	
	Для каждого КлючИЗначение Из ПланыСчетовПоТипам Цикл
		Если КлючИЗначение.Ключ = Тип("СправочникСсылка.ПланыСчетовМеждународногоУчета") Тогда
			ОбъектМетаданныхВидыСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоМеждународные;
			ДобавитьВидыСубконто(СтрокаИзмерения, БыстрыйПоиск, ОбъектМетаданныхВидыСубконто);
		Иначе
			Для каждого ИдентификаторОбъектовМетаданных Из КлючИЗначение.Значение Цикл 
				ОбъектМетаданныхПланСчетов = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектовМетаданных);
				ОбъектМетаданныхВидыСубконто = ОбъектМетаданныхПланСчетов.ВидыСубконто;
				ДобавитьВидыСубконто(СтрокаИзмерения, БыстрыйПоиск, ОбъектМетаданныхВидыСубконто);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление организации
	ДобавитьСтрокуИзмерения(СтрокаИзмерения, НСтр("ru = 'Организация';
													|en = 'Company'"));
	
	// Добавление подразделения
	ДобавитьСтрокуИзмерения(СтрокаИзмерения, НСтр("ru = 'Подразделение';
													|en = 'Business unit'"));
	
	// Добавление направление деятельности
	Если Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям() Тогда
		ДобавитьСтрокуИзмерения(СтрокаИзмерения, НСтр("ru = 'Направление деятельности';
														|en = 'Line of business'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВидыСубконто(СтрокаИзмерения, БыстрыйПоиск, ОбъектМетаданныхВидыСубконто)
	
	СтрокаСубконто = ДобавитьСтрокуИзмерения(СтрокаИзмерения, ОбъектМетаданныхВидыСубконто.ПредставлениеСписка);
	СтрокаСубконто.ВидЭлемента = Неопределено;	//группировочная запись о измерениях 
	СтрокаСубконто.ЭтоГруппа = Истина; 		//не может быть перенесена в элементы отчета
	СтрокаСубконто.НестандартнаяКартинка = ФинансоваяОтчетностьВызовСервера.НестандартнаяКартинка(Неопределено, "Группа");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка,
	|	ВидыСубконто.Наименование КАК Наименование
	|ИЗ
	|	&ВидыСубконто КАК ВидыСубконто
	|ГДЕ
	|	НЕ ВидыСубконто.ПометкаУдаления
	|	И &ОтборПоНаименованию
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ВидыСубконто", ОбъектМетаданныхВидыСубконто.ПолноеИмя());
	
	Если ЗначениеЗаполнено(БыстрыйПоиск) Тогда
		ОтборПоНаименованию = "ВидыСубконто.Наименование ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""";
	Иначе
		ОтборПоНаименованию = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтборПоНаименованию", ОтборПоНаименованию);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаСубконто = ДобавитьСтрокуИзмерения(СтрокаСубконто, Выборка.Наименование, Выборка.Ссылка);
		НоваяСтрокаСубконто.ЭтоСубконто = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуИзмерения(СтрокаКудаДобавлять, Наименование, ЭлементОтчета = Неопределено,НаименованиеДляПечати = "")
	
	НоваяСтрока = СтрокаКудаДобавлять.Строки.Добавить();
	Измерение = ПредопределенноеЗначение("Перечисление.ВидыЭлементовФинансовогоОтчета.Измерение");
	НоваяСтрока.ВидЭлемента = Измерение;
	НоваяСтрока.НестандартнаяКартинка = ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(Измерение);
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.НаименованиеДляПечати = Наименование;
	Если НЕ ПустаяСтрока(НаименованиеДляПечати) Тогда
		НоваяСтрока.НаименованиеДляПечати = НаименованиеДляПечати;
	КонецЕсли;
	НоваяСтрока.ЭлементВидаОтчетности = ?(ЭлементОтчета = Неопределено, Наименование, ЭлементОтчета);
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция КомплектОтчетностиВидаОтчета(ВидОтчета)
	
	Результат = Справочники.КомплектыФинансовыхОтчетов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыФинансовыхОтчетовВидыОтчетов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(КомплектыФинансовыхОтчетовВидыОтчетов.Ссылка) КАК Представление
	|ИЗ
	|	Справочник.КомплектыФинансовыхОтчетов.ВидыОтчетов КАК КомплектыФинансовыхОтчетовВидыОтчетов
	|ГДЕ
	|	КомплектыФинансовыхОтчетовВидыОтчетов.ВидФинансовогоОтчета = &ВидФинансовогоОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ВидФинансовогоОтчета", ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет содержится ли в отборе переданные значения счета, вида субконто и значения субконто.
// Результат равен истина если все не пустые значения содержатся в отборе. 
// Если значение пустое, то его наличие в отборе не проверяется и на результат функции оно не оказывает влияния.
// Например: Если передан счет и вид субконто, то результат будет равен истина если в отборе содержится и счет 
//           и в отборе есть поля с типом содержащиеся в типе вида субконто.
//           Если передан только счет, то результат будет истина если он содержится в отборе.
//
// Параметры:
// 	ХранилищеОтбора - ХранилищеЗначения - 
// 	Счет - ПланСчетовСсылка - 
// 	ВидСубконто- ПланВидовХарактеристикСсылка.ВидыСубконтоМеждународные -
// 	ЗначениеСубконто - СправочникСсылка - 
// 	ИсключитьСчет - Булево - Описание
// 
// Возвращаемое значение:
// 	Булево - Описание
//
Функция ХранилищеОтбораСодержитЗначения(ХранилищеОтбора, Счет, ВидСубконто, ЗначениеСубконто, ИсключитьСчет = Ложь) Экспорт
	
	Если ХранилищеОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьСчет = ЗначениеЗаполнено(Счет) И НЕ ИсключитьСчет;
	ЕстьВид  = ЗначениеЗаполнено(ВидСубконто);
	ЕстьЗнач = ЗначениеЗаполнено(ЗначениеСубконто);
	Если НЕ ЕстьСчет И НЕ ЕстьВид И НЕ ЕстьЗнач Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиОтбора = ХранилищеОтбора.Получить();
	Если НастройкиОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СчетОК = ЕстьСчет И ОтборСодержитЗначение(НастройкиОтбора.Отбор, Счет);
	ВидОК  = ЕстьВид И ОтборСодержитТип(НастройкиОтбора.Отбор, ВидСубконто);
	ЗначОК = ЕстьЗнач И ОтборСодержитЗначение(НастройкиОтбора.Отбор, ЗначениеСубконто);
	
	Возврат НЕ ЕстьСчет И (ВидОК И (НЕ ЕстьЗнач ИЛИ ЗначОК) 
							ИЛИ НЕ ЕстьВид И ЗначОК)
			ИЛИ СчетОК И (ВидОК И (НЕ ЕстьЗнач ИЛИ ЗначОК) 
							ИЛИ НЕ ЕстьВид И (НЕ ЕстьЗнач ИЛИ ЗначОК));
	
КонецФункции

Функция ОтборСодержитЗначение(ОтборКД, Значение)
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ОтборСодержитЗначение(ЭлементОтбора, Значение);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			ЭлементСписка = ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(Значение);
			Если ЭлементСписка <> Неопределено Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ПравоеЗначение = Значение И ЭлементОтбора.ПравоеЗначение <> Неопределено Тогда
			Результат = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Отбор содержит тип.
// 
// Параметры:
//  ОтборКД - ГруппаЭлементовОтбораКомпоновкиДанных - Отбор КД
//  ВидСубконто - СтрокаТаблицыЗначений - Вид субконто
// 
// Возвращаемое значение:
//  Булево - Отбор содержит тип
Функция ОтборСодержитТип(ОтборКД, ВидСубконто)
	
	Если НЕ ЗначениеЗаполнено(ВидСубконто) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ОтборСодержитТип(ЭлементОтбора, ВидСубконто);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ПравоеЗначение = Неопределено Тогда
			// Пропустить ход
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Для Каждого Элемент Из ЭлементОтбора.ПравоеЗначение Цикл
				Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение)) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьСписокРесурсовОтчета(ЭлементРесурс, ВалютыРесурсов, ПланыСчетов) Экспорт
	
	СписокВыбора = ЭлементРесурс.СписокВыбора;
	СписокВыбора.Очистить();
	
	СтруктуаВалютыРесурсов = Новый Структура();
	
	Если ПланыСчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиРеглУчета = РеглУчетСервер.НастройкиУчета();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ИспользуетсяМеждународный = Ложь;
	ИспользуетсяРегламентированный = Ложь;
	
	ВалютаФункциональнаяДоступна = Ложь;
	
	ВалютаПредставления = Неопределено;
	ВалютаПредставленияДоступна = Ложь;
		
	ПланыСчетовПоТипам = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(ПланыСчетов);
	Если ПланыСчетовПоТипам[Тип("СправочникСсылка.ПланыСчетовМеждународногоУчета")] <> Неопределено Тогда
		ИспользуетсяМеждународный = Истина;
		
		ВалютаФункциональнаяДоступна = Истина;
		ВалютаПредставленияДоступна = Истина;
		
		ЗначенияВалют = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ПланыСчетовПоТипам[Тип("СправочникСсылка.ПланыСчетовМеждународногоУчета")], "ВалютаПредставления");
		
		Для каждого КлючИЗначения Из ЗначенияВалют Цикл
			Если ВалютаПредставления = Неопределено Тогда
				ВалютаПредставления = КлючИЗначения.Значение["ВалютаПредставления"];
			КонецЕсли;
			Если КлючИЗначения.Значение["ВалютаПредставления"] <> ВалютаПредставления Тогда
				ВалютаПредставленияДоступна = Ложь;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	Если Не ВалютаПредставленияДоступна Тогда
		ВалютаПредставления = Неопределено;
	КонецЕсли;
	
	Если ПланыСчетовПоТипам[ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РеглУчетКлиентСервер.ТипПланСчетов(), Ложь)] <> Null Тогда
		ИспользуетсяРегламентированный = Истина;
	КонецЕсли;
	
	Если ИспользуетсяМеждународный Тогда
		
		Если ВалютаФункциональнаяДоступна Тогда
			СписокВыбора.Добавить("Сумма", НСтр("ru = 'В функциональной валюте организации';
												|en = 'In company functional currency'"));
			СтруктуаВалютыРесурсов.Вставить("Сумма", Неопределено);
		КонецЕсли;
		Если ВалютаПредставленияДоступна Тогда
			СписокВыбора.Добавить("СуммаПредставления", НСтр("ru = 'В валюте представления';
															|en = 'In presentation currency'") + СтрШаблон(" (%1)", ВалютаПредставления));
			СтруктуаВалютыРесурсов.Вставить("СуммаПредставления", ВалютаПредставления);
		КонецЕсли;
		
	ИначеЕсли ИспользуетсяРегламентированный Тогда
		
		СписокВыбора.Добавить("Сумма", НСтр("ru = 'Бухгалтерский учет в регл. валюте организации';
											|en = 'Company local accounting currency'"));
		СтруктуаВалютыРесурсов.Вставить("Сумма", Неопределено);
		Если НастройкиРеглУчета.ДополнительноВедетсяУправленческийУчет Тогда
			СписокВыбора.Добавить("СуммаУУ", НСтр("ru = 'Управленческий учет';
													|en = 'Management accounting'") + СтрШаблон(" (%1)", ВалютаУправленческогоУчета));
			СтруктуаВалютыРесурсов.Вставить("СуммаУУ", ВалютаУправленческогоУчета);
		КонецЕсли;
		Если НастройкиРеглУчета.ДополнительноВедетсяУчетВВалютеФинОтчетности Тогда
			СписокВыбора.Добавить("СуммаФО", 
				НСтр("ru = 'В валюте финансовой отчетности';
					|en = 'In financial reporting currency'") + СтрШаблон(" (%1)", НастройкиРеглУчета.ВалютаФинОтчетности));
			СтруктуаВалютыРесурсов.Вставить("СуммаФО", НастройкиРеглУчета.ВалютаФинОтчетности);
		КонецЕсли;
		
	ИначеЕсли ИспользуетсяМеждународный И ИспользуетсяРегламентированный Тогда
		
		СписокВыбора.Добавить("Сумма",НСтр("ru = 'В функц. и регл. валюте организации';
											|en = 'In functional and local accounting currency of the company'"));
		СтруктуаВалютыРесурсов.Вставить("Сумма", Неопределено);
		
	КонецЕсли;
	
	ВалютыРесурсов = Новый ФиксированнаяСтруктура(СтруктуаВалютыРесурсов); // Т.к. хранение в реквизите формы, то должна быть фиксированная структура
	
КонецПроцедуры

Процедура ПроверкаЗацикливанияВидовОтчетов(Граф, ТекстНайденногоЦикла = "", РаскраскаВершин = Неопределено)   Экспорт
	
	Если ЗначениеЗаполнено(ТекстНайденногоЦикла) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаскраскаВершин = Неопределено Тогда 
		РаскраскаВершин = Новый Соответствие;
	КонецЕсли;
	
	Для каждого Вершина  Из Граф.Строки  Цикл
		
		Если РаскраскаВершин.Получить(Вершина.ЭлементОтчета) = Неопределено Тогда
			
			Если Вершина.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
					Или Вершина.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
				Продолжить;
			КонецЕсли;
			
			//Новая вершина
			Если Вершина.ВидЭлемента <>  Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
				РаскраскаВершин.Вставить(Вершина.ЭлементОтчета, 1);
			КонецЕсли;
			
			ПроверкаЗацикливанияВидовОтчетов(Вершина, ТекстНайденногоЦикла, РаскраскаВершин);
			
			Если ЗначениеЗаполнено(Вершина.СвязанныйЭлемент) Тогда
				ВидОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вершина.СвязанныйЭлемент, "Владелец");
				ПодчиненныйГраф = ОбновитьДеревоОтчета(ВидОтчета, Вершина.СвязанныйЭлемент);
				ПроверкаЗацикливанияВидовОтчетов(ПодчиненныйГраф, ТекстНайденногоЦикла, РаскраскаВершин);
			КонецЕсли;
			
			Если Вершина.ВидЭлемента =  Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе  И Не ЗначениеЗаполнено(Вершина.СвязанныйЭлемент)  Тогда
				РаскраскаВершин.Вставить(Вершина.ЭлементОтчета, 0);
				ВидОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вершина.ЭлементОтчета, "Владелец");
				ПодчиненныйГраф = ОбновитьДеревоОтчета(ВидОтчета, Вершина.ЭлементОтчета);
				ПроверкаЗацикливанияВидовОтчетов(ПодчиненныйГраф, ТекстНайденногоЦикла, РаскраскаВершин);
			КонецЕсли;
			
			РаскраскаВершин.Вставить(Вершина.ЭлементОтчета, 0);
			
		ИначеЕсли РаскраскаВершин[Вершина.ЭлементОтчета] = 1 Тогда
			
			//Найден цикл
			Для каждого Вершина Из РаскраскаВершин Цикл
				
				ЭлементОтчета = Вершина.Ключ;
				
				ИсключаемыеВиды = Новый Массив;
				ИсключаемыеВиды.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках );
				ИсключаемыеВиды.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках);
				ИсключаемыеВиды.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная);
				ИсключаемыеВиды.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Колонки);
				ИсключаемыеВиды.Добавить(Перечисления.ВидыЭлементовФинансовогоОтчета.Строки);
				
				Если Вершина.Значение = 1  
						И ЗначениеЗаполнено(ЭлементОтчета.ВидЭлемента) 
						И ИсключаемыеВиды.Найти(ЭлементОтчета.ВидЭлемента) = Неопределено Тогда
					ТекстНайденногоЦикла = ТекстНайденногоЦикла + ЭлементОтчета.НаименованиеДляПечати + " ("  +  ЭлементОтчета.Владелец + "), ";
				КонецЕсли; 
			КонецЦикла;
			
			ТекстНайденногоЦикла = СтрШаблон(НСтр("ru = 'Обнаружено зацикливание элементов отчетов: %1';
													|en = 'Report items looping is detected: %1'"), Лев(ТекстНайденногоЦикла, СтрДлина(ТекстНайденногоЦикла)-2));
			Возврат;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПодчиненныеСубконтоПоказателя(ОписаниеТаблицы, СтрокиЭлементов, Субконто, ВидыЭлементов, НомерСубконто = 1, ЭтоКолонки = Ложь)
	                                                                                                                                                                                                                                                                                                            
	Для каждого СтрокаЭлемента Из СтрокиЭлементов Цикл
		
		Если СтрокаЭлемента.ТипИзмерения = Перечисления.ТипыИзмеренийФинансовогоОтчета.Субконто Тогда
			
			СтруктураСубконтоДляЗапроса = Новый Структура;
			СтруктураСубконтоДляЗапроса.Вставить("Вид", 								СтрокаЭлемента.ВидСубконто);
			СтруктураСубконтоДляЗапроса.Вставить("ЕстьНастройки", 	СтрокаЭлемента.ЕстьНастройки);
			СтруктураСубконтоДляЗапроса.Вставить("Наименование", 	СтрокаЭлемента.НаименованиеДляПечати);
			
			ИмяСубконто = "Аналитика" + НомерСубконто;
			
			Если СтрокаЭлемента.ЕстьНастройки И Не ОписаниеТаблицы.ЭтоПроизвольная  Тогда
				ДополнительныйОтбор = СтрокаЭлемента.ДополнительныйОтбор; //ХранилищеЗначения
				НастройкиОтбора = ДополнительныйОтбор.Получить();
				ЗаменитьИмяСубконтоВОтборе(НастройкиОтбора.Отбор, ИмяСубконто);
				ОтборАналитики = Новый ХранилищеЗначения(НастройкиОтбора);
			Иначе
				ОтборАналитики = СтрокаЭлемента.ДополнительныйОтбор;
			КонецЕсли;
			СтруктураСубконтоДляЗапроса.Вставить("Отбор", ОтборАналитики);
			
			Субконто.Вставить(ИмяСубконто, СтруктураСубконтоДляЗапроса); 
			ОписаниеТаблицы.ОписаниеАналитик.Вставить(СтрокаЭлемента, Новый Структура("НомерАналитики", НомерСубконто));
			
			//Для сложной таблицы добавляем аналитику в показатели построчно
			Если ОписаниеТаблицы.ЭтоПроизвольная Тогда
				Для каждого ПоказательОтчета Из ОписаниеТаблицы.Показатели Цикл
					Если ЭтоКолонки И ПоказательОтчета.Значение.Колонка = СтрокаЭлемента.ЭлементОтчета
								Или Не  ЭтоКолонки И ПоказательОтчета.Значение.Строка = СтрокаЭлемента.ЭлементОтчета Тогда
						НомерСубконтоПоказателя = 1;
						Для Каждого СубконтоПоказателя Из ПоказательОтчета.Значение.Субконто Цикл
							Если СтрНайти(СубконтоПоказателя.Ключ, ?(ЭтоКолонки, "АналитикаКолонок", "АналитикаСтрок") ) <> 0 Тогда
								НомерСубконтоПоказателя = НомерСубконтоПоказателя + 1;
							КонецЕсли;
						КонецЦикла;
						Для каждого ЗначениеСубконто Из Субконто Цикл
							ИмяСубконто = ?(ЭтоКолонки, "АналитикаКолонок", "АналитикаСтрок") + НомерСубконтоПоказателя; 
							Если ЗначениеСубконто.Значение.ЕстьНастройки Тогда
								ЗначениеОтбора = ЗначениеСубконто.Значение.Отбор; //ХранилищеЗначения
								НастройкиОтбора = ЗначениеОтбора.Получить();
								ЗаменитьИмяСубконтоВОтборе(НастройкиОтбора.Отбор, ИмяСубконто);
								ОтборАналитики = Новый ХранилищеЗначения(НастройкиОтбора);
							Иначе
								ОтборАналитики = ЗначениеСубконто.Значение.Отбор;
							КонецЕсли;
							НовоеЗначениеСубконто = Новый Структура("Вид, ЕстьНастройки, Наименование");
							ЗаполнитьЗначенияСвойств(НовоеЗначениеСубконто, ЗначениеСубконто.Значение);
							НовоеЗначениеСубконто.Вставить("Отбор", ОтборАналитики);
							ПоказательОтчета.Значение.Субконто.Вставить(ИмяСубконто, НовоеЗначениеСубконто);
							НомерСубконтоПоказателя = НомерСубконтоПоказателя + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НомерСубконто = НомерСубконто + 1;
			
			Если СтрокаЭлемента.Строки.Количество() Тогда
				ПодчиненныеСубконтоПоказателя(ОписаниеТаблицы, СтрокаЭлемента.Строки, Субконто, ВидыЭлементов, НомерСубконто, ЭтоКолонки);
			КонецЕсли;
			
		ИначеЕсли ЭтоПоказатель(СтрокаЭлемента.ВидЭлемента, ВидыЭлементов) И Не ЭтоПоказатель(СтрокаЭлемента.Родитель.ВидЭлемента, ВидыЭлементов) Тогда
			
			ДанныеПоказателя = ОписаниеТаблицы.Показатели.Получить(СтрокаЭлемента.ЭлементОтчета);
			Если ДанныеПоказателя = Неопределено Тогда
				ОписаниеТаблицы.Показатели.Вставить(СтрокаЭлемента.ЭлементОтчета, Новый Структура("Описание,Субконто", СтрокаЭлемента, Субконто));
			Иначе
				Для каждого ЗначениеСубконто Из Субконто Цикл
					ДанныеПоказателя.Субконто.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
				КонецЦикла;  
			КонецЕсли;
			
		ИначеЕсли СтрокаЭлемента.ВидЭлемента = ВидыЭлементов.ЭлементТаблицы Тогда
			
			Если  Субконто.Свойство("Аналитика1") Тогда
				Для каждого ПоказательОтчета Из ОписаниеТаблицы.Показатели Цикл
					Если ЭтоКолонки И ПоказательОтчета.Значение.Колонка = СтрокаЭлемента.ЭлементОтчета
						Или Не  ЭтоКолонки И ПоказательОтчета.Значение.Строка = СтрокаЭлемента.ЭлементОтчета Тогда
						НомерСубконтоПоказателя = 1;
						Для Каждого СубконтоПоказателя Из ПоказательОтчета.Значение.Субконто Цикл
							Если СтрНайти(СубконтоПоказателя.Ключ, ?(ЭтоКолонки, "АналитикаКолонок", "АналитикаСтрок") ) <> 0 Тогда
								НомерСубконтоПоказателя = НомерСубконтоПоказателя + 1;
							КонецЕсли;
						КонецЦикла;
						Для каждого ЗначениеСубконто Из Субконто Цикл
							ИмяСубконто = ?(ЭтоКолонки, "АналитикаКолонок", "АналитикаСтрок") + НомерСубконтоПоказателя; 
							
							Если ЗначениеСубконто.Значение.ЕстьНастройки Тогда
								ЗначениеОтбора = ЗначениеСубконто.Значение.Отбор; //ХранилищеЗначения
								НастройкиОтбора = ЗначениеОтбора.Получить();
								ЗаменитьИмяСубконтоВОтборе(НастройкиОтбора.Отбор, ИмяСубконто);
								ОтборАналитики = Новый ХранилищеЗначения(НастройкиОтбора);
							Иначе
								ОтборАналитики = ЗначениеСубконто.Значение.Отбор;
							КонецЕсли;
							НовоеЗначениеСубконто = Новый Структура("Вид, ЕстьНастройки, Наименование");
							ЗаполнитьЗначенияСвойств(НовоеЗначениеСубконто, ЗначениеСубконто.Значение);
							НовоеЗначениеСубконто.Вставить("Отбор", ОтборАналитики);
							ПоказательОтчета.Значение.Субконто.Вставить(ИмяСубконто, ЗначениеСубконто.Значение);
							НомерСубконтоПоказателя = НомерСубконтоПоказателя + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтрокаЭлемента.ВидЭлемента = ВидыЭлементов.Группа Тогда
			
			Если СтрокаЭлемента.Строки.Количество() Тогда
				ПодчиненныеСубконтоПоказателя(ОписаниеТаблицы, СтрокаЭлемента.Строки, Субконто, ВидыЭлементов, НомерСубконто, ЭтоКолонки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодчиненныеПоказателиСубконто(ОписаниеТаблицы, СтрокаЭлемента, ВидыЭлементов,  МассивПоказателей)
	
	Для Каждого СтрокаОтчета Из СтрокаЭлемента.Строки Цикл
		
		Если ЭтоПоказатель(СтрокаОтчета.ВидЭлемента, ВидыЭлементов) Тогда
			МассивПоказателей.Добавить(СтрокаОтчета.ЭлементОтчета);
		КонецЕсли;
		
		Если СтрокаОтчета.Строки.Количество() Тогда
			ПодчиненныеПоказателиСубконто(ОписаниеТаблицы, СтрокаОтчета, ВидыЭлементов, МассивПоказателей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьИмяСубконтоВОтборе(Настройка, НовоеИмяСубконто)  Экспорт
	
	Для каждого НастройкаОтбора Из Настройка.Элементы Цикл
		
		Если ТипЗнч(НастройкаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЗаменитьИмяСубконтоВОтборе(НастройкаОтбора, НовоеИмяСубконто);
		Иначе
			
			Если СтрНайти(НастройкаОтбора.ЛевоеЗначение, "Субконто") <> 0 Тогда
				
				Для НомерСубконтоОтбора = 1 По МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто() Цикл
					Если СтрНайти(НастройкаОтбора.ЛевоеЗначение, "Субконто" + НомерСубконтоОтбора) <> 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				НастройкаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
				СтрЗаменить(НастройкаОтбора.ЛевоеЗначение, "Субконто"+НомерСубконтоОтбора, НовоеИмяСубконто));
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти