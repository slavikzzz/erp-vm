#Область ПрограммныйИнтерфейс

Функция СвойстваРеспондентаРосстата(Знач Респондент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИмеетТОСП", Ложь);
	Результат.Вставить("ЭтоОрганизация", Ложь);
	Результат.Вставить("ЭтоТОСП", Ложь);
	
	Если ТипЗнч(Респондент) = Тип("СправочникСсылка.Организации") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Респондент, "ОбособленноеПодразделение,ЕстьОбособленныеПодразделения");
		Результат.ЭтоТОСП = Реквизиты.ОбособленноеПодразделение;
		Результат.ЭтоОрганизация = Истина;
		
		Если Реквизиты.ЕстьОбособленныеПодразделения Тогда
			Результат.ИмеетТОСП = Истина;
		КонецЕсли;
		
	Иначе
		// Это подразделение. Респондентом Росстата может быть только Организация или Обособленное подразделение.
		// Регистрационный номер Росстата можем присвоить любому подразделению даже не отмеченному флагом ОбособленноеПодразделение.
		Результат.ЭтоТОСП = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваРеспондентаПоРегистрации(Знач Регистрация) Экспорт
	
	СвойстваРегистрации = СвойстваРегистрацииВОрганеСтатистики(Регистрация, "СтруктурнаяЕдиница");
	СвойстваРеспондента = СвойстваРеспондентаРосстата(СвойстваРегистрации.СтруктурнаяЕдиница);
	Возврат СвойстваРеспондента;
	
КонецФункции

Функция СвойстваРегистрацииВОрганеСтатистики(Знач Регистрация, Знач Реквизиты = Неопределено) Экспорт
	
	Если Реквизиты = Неопределено Тогда
		Реквизиты = ВсеРеквизитыРегистрации();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистрация, Реквизиты);
	
КонецФункции

// Сведения о регистрации в органе статистики.
//
// Параметры:
//  СтруктурнаяЕдиница - СправочникСсылка.Организаци, СправочникСсылка.ПодразделенияОрганизаций - и т.п. объект использующий регистрацию
//                       cм. ОпределяемыйТип.ТерриторияВыполненияРабот.
//  ДатаАктуальности   - Дата   - Дата актуальности сведений (не обязательный).
//  Реквизиты          - Строка - Запрашиваемые реквизиты регистрации через запятую (не обязательный).
// 
// Возвращаемое значение:
//  Структура с полями:
//    * Регистрация       - СправочникСсылка.РегистрацииВОрганеСтатистики - Ссылка на регистрацию Росстата.
//    * ДанныеРегистрации - Структура - См. СвойстваРегистрацииВОрганеСтатистики.
//    * ЭтоРеспондент     - Булево - Признак, что СтруктурнаяЕдиница является респондентом (хозяином регистрации).
//
Функция СведенияОРегистрацииВОрганеСтатистики(Знач СтруктурнаяЕдиница, Знач ДатаАктуальности = Неопределено, Знач Реквизиты = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Регистрация", Неопределено);
	Результат.Вставить("ДанныеРегистрации", Новый Структура);
	Результат.Вставить("ЭтоРеспондент", Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация.СтруктурнаяЕдиница КАК Респондент,
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация КАК Регистрация,
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних(&ДатаСреза, ) КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|ГДЕ
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
		|	И НЕ ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация.ПометкаУдаления
		|	И НЕ ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация.ВАрхиве
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Период УБЫВ");
		
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаАктуальности);
	
	Реквизиты = ?(Реквизиты = Неопределено, ВсеРеквизитыРегистрации(), Реквизиты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат.ДанныеРегистрации = Новый Структура(Реквизиты);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.Регистрация = Выборка.Регистрация;
		Результат.ДанныеРегистрации = СвойстваРегистрацииВОрганеСтатистики(Выборка.Регистрация, Реквизиты);
		Результат.ДанныеРегистрации.Вставить("Период", Выборка.Период);
		Результат.ЭтоРеспондент = Выборка.Респондент = СтруктурнаяЕдиница;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДополнитьПоРегистрацииРеспондента(СведенияОрганизации, СведенияРегистрации, Знач РегистрацияРеспондента, Знач Организация, Знач ДатаЗначения) Экспорт
	
	Если ЗначениеЗаполнено(РегистрацияРеспондента) Тогда
		СвойстваРегистрации = СвойстваРегистрацииВОрганеСтатистики(РегистрацияРеспондента);
	Иначе
		СведенияОРегистраци = СведенияОРегистрацииВОрганеСтатистики(Организация, ДатаЗначения);
		РегистрацияРеспондента = СведенияОРегистраци.Регистрация;
		СвойстваРегистрации = СведенияОРегистраци.ДанныеРегистрации;
	КонецЕсли;
		
	СвойстваРеспондента = СвойстваРеспондентаРосстата(СвойстваРегистрации.СтруктурнаяЕдиница);
	
	Если СвойстваРеспондента.ЭтоТОСП Тогда
		СведенияРегистрации.ОКПО = СвойстваРегистрации.ИдентификационныйНомер;
		СведенияРегистрации.АдрПочт_JSON = СвойстваРегистрации.АдресПочтовый;
		СведенияРегистрации.ОбособленноеПодразделение = СвойстваРегистрации.СтруктурнаяЕдиница;
	ИначеЕсли СведенияОрганизации.Свойство("ОКПО") Тогда
		СведенияРегистрации.ОКПО = СведенияОрганизации.ОКПО;
	КонецЕсли;
	
	Если СвойстваРегистрации.Представитель <> Неопределено Тогда 
		Сведения = СведенияОПредставителеПоРегистрацииВОрганеСтатистики(РегистрацияРеспондента, ДатаЗначения);
		СведенияОрганизации.ФИООтвСтатистика = Сведения.ФИОПредставителя;
		СведенияОрганизации.ДолжнОтвСтатистика = Сведения.Должность;
		СведенияОрганизации.ТелОтвСтатистика = Сведения.ТелефонРабочий;
		СведенияОрганизации.АдресЭлПочтыОтвСтатистика = Сведения.АдресЭлектроннойПочты;
	КонецЕсли;
	
	РегистрацияРеспондента = ?(РегистрацияРеспондента = Неопределено,
		ПредопределенноеЗначение("Справочник.РегистрацииВОрганеСтатистики.ПустаяСсылка"), РегистрацияРеспондента);
	
	Возврат РегистрацияРеспондента;
	
КонецФункции

// Возвращает структурные единицы (Подразделения и Организации) использующие указанную регистрацию Росстата с учетом иерархии.
// Принято, что регистрация наследуется вниз по иерархии подразделений, до тех пор пока не будет явно задана в нижестоящем подразделении.
//
// Параметры:
//  Регистрация	     - СправочникСсылка.РегистрацииВОрганеСтатистики - Ссылка на регистрацию Росстата.
//  ДатаАктуальности - Дата - Дата актуальности сведений.
// 
// Возвращаемое значение:
//  Массив - Структурные единицы, использующие указанную регистрацию с учетом иерархии.
//
Функция СтруктурныеЕдиницыПоРегистрации(Знач Регистрация, Знач ДатаАктуальности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистрация", Регистрация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТПодразделенияСРегистрацией
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних(&ДатаАктуальности, ) КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка)
		|			И (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация = &Регистрация)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА ПодразделенияОрганизаций.Владелец
		|		ИНАЧЕ ПодразделенияОрганизаций.Родитель
		|	КОНЕЦ КАК Родитель,
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация КАК Регистрация
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних(&ДатаАктуальности, ) КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка)
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодразделенияСРегистрацией.Ссылка
		|			ИЗ
		|				ВТПодразделенияСРегистрацией КАК ПодразделенияСРегистрацией)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	ВЫБОР
		|		КОГДА Организации.ГоловнаяОрганизация = Организации.Ссылка
		|			ТОГДА Организации.Ссылка
		|		ИНАЧЕ Организации.ГоловнаяОрганизация
		|	КОНЕЦ,
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних(&ДатаАктуальности, ) КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница = Организации.Ссылка)
		|			И (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация = &Регистрация)";
	
	// Строим транзитивное замыкание.
	ТаблицаПодчиненности = Новый ТаблицаЗначений;
	ТаблицаПодчиненности.Колонки.Добавить("Элемент", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации"));
	ТаблицаПодчиненности.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Организации"));
	ТаблицаПодчиненности.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаПодчиненности.Колонки.Добавить("УровеньЭлемента", Новый ОписаниеТипов("Число"));
	ТаблицаПодчиненности.Колонки.Добавить("Регистрация", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВОрганеСтатистики"));
	
	СоответствиеПодчиненности = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеПодчиненности.Вставить(Выборка.Ссылка, Выборка.Родитель);
	КонецЦикла;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		Родитель = СоответствиеПодчиненности[Выборка.Ссылка];
		УровеньЭлемента = Выборка.Ссылка.Уровень();
		Уровень = 1;
		Пока Истина Цикл
			НоваяСтрока = ТаблицаПодчиненности.Добавить();
			НоваяСтрока.Элемент = Выборка.Ссылка;
			НоваяСтрока.Родитель = Родитель;
			НоваяСтрока.Уровень = Уровень;
			НоваяСтрока.УровеньЭлемента = УровеньЭлемента;
			НоваяСтрока.Регистрация = Выборка.Регистрация;
			Если Выборка.Ссылка = Родитель Тогда
				НоваяСтрока.Уровень = 0;
				Прервать;
			КонецЕсли;
			ПредыдущийРодитель = Родитель;
			Родитель = СоответствиеПодчиненности[Родитель];
			Если Родитель = Неопределено И ПредыдущийРодитель <> Неопределено Тогда
				Если ТипЗнч(ПредыдущийРодитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
					Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущийРодитель, "Владелец");
				Иначе
					Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредыдущийРодитель, "ГоловнаяОрганизация");
				КонецЕсли;
			КонецЕсли;
			Уровень = Уровень + 1;
			Если ПредыдущийРодитель = Родитель Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПодчиненности.Сортировать("Уровень,УровеньЭлемента");
	
	Отбор = Новый Структура("Уровень, Элемент");
	Для Каждого Строка Из ТаблицаПодчиненности Цикл
		Если Не ЗначениеЗаполнено(Строка.Регистрация) Тогда
			Отбор.Уровень = Строка.Уровень;
			Отбор.Элемент = Строка.Родитель;
			Строки = ТаблицаПодчиненности.НайтиСтроки(Отбор);
			Если Строки.Количество() Тогда
				ЭлементРодитель = Строки[0];
				Строка.Регистрация = ЭлементРодитель.Регистрация;
				СтрокиЭлемента = ТаблицаПодчиненности.НайтиСтроки(Новый Структура("Элемент", Строка.Элемент));
				Для Каждого Стр Из СтрокиЭлемента Цикл
					Стр.Регистрация = Строка.Регистрация;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПодчиненности.Свернуть("Элемент,Регистрация");
	
	Отбор = Новый Структура("Регистрация", Регистрация);
	Элементы = ТаблицаПодчиненности.Скопировать(ТаблицаПодчиненности.НайтиСтроки(Отбор), "Элемент");
	Возврат Элементы.ВыгрузитьКолонку("Элемент");
	
КонецФункции

// Возвращает признак, что для отчета выбрана регистрация респондента Росстата.
// Это значит, что в этом экземпляре отчета используется механизм регистраций, а не устаревший механизм обособленных подразделений.
//
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета.
// 
// Возвращаемое значение:
//  Булево - Истина если в отчете выбрана регистрация респондента Росстата.
//
Функция ВыбранаРегистрацияРеспондента(Знач ПараметрыОтчета) Экспорт
	
	Возврат ПараметрыОтчета.Свойство("РегистрацияРеспондента") И ПараметрыОтчета.РегистрацияРеспондента <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьНаличиеКодаРегистрацииВСправочникеОрганыФСГС(Знач РегистрацияРеспондента) Экспорт
	
	Подключен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			РегистрацияРеспондента.Владелец,
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСГС"));
	
	Если Подключен Тогда
		Попытка
			СвойстваРегистрации = СвойстваРегистрацииВОрганеСтатистики(РегистрацияРеспондента, "КодОрганаФСГС");
			КодФСГС = СвойстваРегистрации.КодОрганаФСГС;
			Если ЗначениеЗаполнено(КодФСГС) И Не ЗначениеЗаполнено(Справочники.ОрганыФСГС.НайтиПоКоду(КодФСГС)) Тогда 
				Сообщение = "ru='Код органа ФСГС %1 регистрации респондента не найден в справочнике органов ФСГС, проверьте наличие подключенного направления сдачи отчетности'";
				ОбщегоНазначения.СообщитьПользователю(
					НСтр(СтрШаблон(Сообщение, СокрЛП(КодФСГС)))
				);
			КонецЕсли;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка получения кода ФСГС регистрации в органе статистики';
											|en = 'An error occurred when getting the FSSS code for registration in the statistics authority'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция МестаИспользованияРегистрацииВОрганеСтатистики(Регистрация, ДатаАктуальности) Экспорт
	
	Результат = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	РегистрацииВОрганеСтатистикиПереопределяемый.ЗаполнитьИспользованиеРегистрацииВОрганеСтатистики(Регистрация, ДатаАктуальности, Результат, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		ЗаполнитьИспользованиеРегистрацииВОрганеСтатистики(Регистрация, ДатаАктуальности, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СвойстваОбъектаЗаписаны(Знач Ссылка, Свойства) Экспорт
	
	ЗапрашиваемыеСвойства = Новый Массив;
	Для Каждого Свойство Из Свойства Цикл
		ЗапрашиваемыеСвойства.Добавить(Свойство.Ключ);
	КонецЦикла;
	Значения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ЗапрашиваемыеСвойства);
	
	Для Каждого Свойство Из Свойства Цикл
		Если Свойство.Значение <> Значения[Свойство.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции 

Функция ПрочитатьРегистрациюГоловногоПодразделения(Знач Родитель) Экспорт
	
	МенеджерЗаписи = РегистрацииВОрганеСтатистикиФормы.ПрочитатьРегистрациюГоловногоПодразделения(Родитель);

	МетаданныеРегистра = Метаданные.РегистрыСведений.ИспользованиеРегистрацийВОрганеСтатистики;
	МенеджерЗаписиСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	
	Возврат МенеджерЗаписиСтруктура;
	
КонецФункции

Функция ВсеРеквизитыРегистрации()
	
	Возврат "Наименование,СтруктурнаяЕдиница,КодОрганаФСГС,ИдентификационныйНомер,
			|Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,АдресПочтовый";
	
КонецФункции

// Предназначена для получения сведений об уполномоченном представителе организации в органе статистики.
// Параметры:
//	 РегистрацияВОрганеСтатистики - СправочникСсылка.РегистрацииВОрганеСтатистики - должно быть непустым значением.
//	 ДатаПодписи - дата - дата, по состоянию на которую будут читаться данные представителя-физлица.
//
// Возвращаемое значение: 
//   Структура - структура с полями: 
//	   * ТипПодписанта - строка со значениями "1", "2";
//	   * ПредставительЮрЛицо - Булево - признак представителя юр. лица; 
//	   * НаименованиеОрганизацииПредставителя - Строка - наименование организации представителя;
//	   * ДокументПредставителя - Строка - документ представителя;
//	   * Фамилия - Строка - фамилия;
//	   * Имя - Строка - имя;
//	   * Отчество - Строка - отчество;
//	   * ФИОПредставителя - Строка - ФИО представителя.
//	   * ФИОПредставителя - Строка - ФИО представителя.
//
Функция СведенияОПредставителеПоРегистрацииВОрганеСтатистики(РегистрацияВОрганеСтатистики, ДатаПодписи)
	
	Результат = Новый Структура;
	Результат.Вставить("ТипПодписанта", "1");
	Результат.Вставить("ПредставительЮрЛицо", Истина);
	Результат.Вставить("НаименованиеОрганизацииПредставителя", "");
	Результат.Вставить("ДокументПредставителя", "");
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("ФИОПредставителя", "");
	Результат.Вставить("Должность", "");
	Результат.Вставить("ТелефонРабочий", "");
	Результат.Вставить("АдресЭлектроннойПочты", "");

	Если Не ЗначениеЗаполнено(РегистрацияВОрганеСтатистики) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВОрганеСтатистики,
		"Представитель, УполномоченноеЛицоПредставителя, ДокументПредставителя, Владелец");
	
	Если Не ЗначениеЗаполнено(ДанныеРегистрации.Представитель) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Представитель = ДанныеРегистрации.Представитель;
	Результат.ТипПодписанта = "2";
	
	Если Не РегламентированнаяОтчетность.ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		
		ИмяПоля = ?(Представитель.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено, "НаименованиеПолное", "Наименование");
		Результат.НаименованиеОрганизацииПредставителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Представитель, ИмяПоля);
		Результат.ФИОПредставителя = СокрЛП(ДанныеРегистрации.УполномоченноеЛицоПредставителя);
		СтрокиФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДанныеРегистрации.УполномоченноеЛицоПредставителя, " ");
		
		Если СтрокиФИО.Количество() > 0 Тогда
			
			Результат.Фамилия = СокрЛП(СтрокиФИО[0]);
			
			Если СтрокиФИО.Количество() > 1 Тогда
				
				Результат.Имя = СокрЛП(СтрокиФИО[1]);
				
				Если СтрокиФИО.Количество() > 2 Тогда
					
					Для ИндСтроки = 2 По СтрокиФИО.ВГраница() Цикл
						Результат.Отчество = Результат.Отчество + ?(ЗначениеЗаполнено(Результат.Отчество), " ", "") + СтрокиФИО[ИндСтроки]
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Физлица = Новый Массив;
		Физлица.Добавить(Представитель);
		ДанныеФизлиц = СвойстваФизическихЛицПоКадровомуУчету(Физлица, ДанныеРегистрации.Владелец);
		
		СведенияПредставителя = ДанныеФизлиц[Представитель];
		
		Результат.ПредставительЮрЛицо = Ложь;
		Результат.Фамилия = СведенияПредставителя.Фамилия;
		Результат.Имя = СведенияПредставителя.Имя;
		Результат.Отчество = СведенияПредставителя.Отчество;
		Результат.ФИОПредставителя = СокрЛП(СокрЛП(Результат.Фамилия) + " " + СокрЛП(Результат.Имя) + " " + СокрЛП(Результат.Отчество));
		Если СведенияПредставителя.Свойство("Должность") Тогда
			Результат.Должность = СведенияПредставителя.Должность;
			Результат.ТелефонРабочий = СведенияПредставителя.ТелефонРабочийПредставление;
			Результат.АдресЭлектроннойПочты = СведенияПредставителя.EMailПредставление;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ДокументПредставителя = ДанныеРегистрации.ДокументПредставителя;
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваФизическихЛицПоКадровомуУчету(Физлица, Организация)

	СвойстваФизическихЛиц = Новый Соответствие;
	
	ТаблицаСотрудников = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(Физлица, Истина, Организация, ТекущаяДатаСеанса());
	Если ТаблицаСотрудников.Количество() Тогда
		ЗапрашиваемыеДанные = "Фамилия,Имя,Отчество,ТелефонРабочийПредставление,EMailПредставление,Должность";
		ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Истина, ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник"),
			ЗапрашиваемыеДанные, ТекущаяДатаСеанса());
	Иначе
		ЗапрашиваемыеДанные = "Фамилия,Имя,Отчество";
		ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, Физлица,
			ЗапрашиваемыеДанные, ТекущаяДатаСеанса());
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКадровыхДанных Цикл
		Значения = Новый Структура(ЗапрашиваемыеДанные);
		ЗаполнитьЗначенияСвойств(Значения, СтрокаТаблицы);
		СвойстваФизическихЛиц.Вставить(СтрокаТаблицы.ФизическоеЛицо, Значения);
	КонецЦикла; 
	
	Возврат СвойстваФизическихЛиц;

КонецФункции

Процедура ЗаполнитьИспользованиеРегистрацииВОрганеСтатистики(Регистрация, ДатаАктуальности, МестаИспользования) Экспорт
	
	СтруктурныеЕдиницы = СтруктурныеЕдиницыПоРегистрации(Регистрация, ДатаАктуальности);
	Если СтруктурныеЕдиницы.Количество() Тогда
		
		Организации = Новый Массив;
		Подразделения = Новый Массив;
		Для Каждого Элемент Из СтруктурныеЕдиницы Цикл
			Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Организации") Тогда
				Организации.Добавить(Элемент);
			ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Подразделения.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
		Если Организации.Количество() Тогда
			СтандартнаяОбработка = Истина;
			РегистрацииВОрганеСтатистикиПереопределяемый.ЗаполнитьСвойстваОрганизаций(Организации, СтандартнаяОбработка);
			Если СтандартнаяОбработка Тогда
				ЗаполнитьСвойстваОрганизаций(Организации);
			КонецЕсли;
			МестаИспользования.Вставить(НСтр("ru = 'Организации';
											|en = 'Companies'"), Организации);
		КонецЕсли;
		
		Если Подразделения.Количество() Тогда
			СтандартнаяОбработка = Истина;
			РегистрацииВОрганеСтатистикиПереопределяемый.ЗаполнитьСвойстваПодразделений(Подразделения, СтандартнаяОбработка);
			Если СтандартнаяОбработка Тогда
				ЗаполнитьСвойстваПодразделений(Подразделения);
			КонецЕсли;
			МестаИспользования.Вставить(НСтр("ru = 'Подразделения';
											|en = 'Business units'"), Подразделения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваОрганизаций(Организации)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&Ссылки)");
	Запрос.УстановитьПараметр("Ссылки", Организации);
	Организации = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваПодразделений(Подразделения)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка,
		|	Подразделения.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка В(&Ссылки)");
	Запрос.УстановитьПараметр("Ссылки", Подразделения);
	Подразделения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти
