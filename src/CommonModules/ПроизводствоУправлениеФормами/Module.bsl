////////////////////////////////////////////////////////////////////////////////
// Процедуры управления формами подсистемы "Производство"
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область НастройкаФорм

#Область УсловноеОформление

#Область ОбеспечениеМатериаламиИРаботами

// Добавляет на форму условное оформление обеспечения производства.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ИменаЭлементов   - см. ПроизводствоУправлениеФормами.ИменаЭлементовОбеспеченияМатериаламиИРаботами
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеОбеспеченияМатериаламиИРаботами(Форма, ИмяОбъекта, ИмяТЧ, ИменаЭлементов, ПутиКДанным = Неопределено) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// СтандартноеОформление
	#Область СтандартноеОформление
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма, 
		ИменаЭлементов.ТЧНоменклатураЕдиницаИзмерения,
		ИмяОбъекта + "." + ИмяТЧ + ".Упаковка");

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма, 
		ИменаЭлементов.ТЧХарактеристика,
		ИмяОбъекта + "." + ИмяТЧ + ".ХарактеристикиИспользуются");

	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, 
		"СерииВсегдаВТЧТовары", 
		ИменаЭлементов.ТЧСерия, 
		ИмяОбъекта + "." + ИмяТЧ + ".СтатусУказанияСерий", 
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	
	#КонецОбласти
	
	// Запрет редактирования спецификации если не установлен флаг Производится
	#Область Обеспечение_Спецификация_ТолькоПросмотр
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧСпецификация);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ДинамическаяСтруктура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<указывается при производстве в процессе>';
																|en = '<specified during production in the process>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	#КонецОбласти
	
	// Склад, отметка незаполненного
	#Область СкладОтметкаНезаполненного
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧСклад);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СкладОбязателен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	// Склад можно выбрать только для товаров
	#Область ТолькоПросмотрСклад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧСклад);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	// Представление полей при отмене строк
	#Область ОтменаСтрок
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧСклад);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧДатаОтгрузки);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧКоличествоУпаковок);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы[ИменаЭлементов.ИмяТЧ],
		ИменаЭлементов.ТЧОтменено,
		ИменаЭлементов.ТЧПричинаОтмены,
		ИменаЭлементов.ТЧЦена,
		ИменаЭлементов.ТЧСумма);
	
	#КонецОбласти
	
	УстановитьУсловноеОформлениеСтатьиКалькуляции(
		Форма, ИмяОбъекта, ИмяТЧ, ИменаЭлементов.ТЧСтатьяКалькуляции, ПутиКДанным, Истина);
		
	#Область ДатаОтгрузки
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,
		ИменаЭлементов.ДатаОтгрузки,
		ИмяОбъекта + ".ДатаОтгрузки",
		"ДатаОтгрузкиОбязательна");
	
	ОбеспечениеВДокументахСервер.ДоступныеОстаткиДобавитьОформлениеКолонкиДоступно(Форма);
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление,
		ИменаЭлементов.ТЧДатаОтгрузки,
		ИмяОбъекта + "." + ИмяТЧ + ".ДатаОтгрузки",
		ИмяОбъекта + "." + ИмяТЧ + ".ДатаОтгрузкиОбязательна");
	
	#КонецОбласти
	
	ОбеспечениеВДокументахСервер.УстановитьУсловноеОформлениеОбособленно(
		УсловноеОформление,
		Элементы[ИменаЭлементов.ТЧОбособленно],
		ИмяОбъекта + "." + ИмяТЧ + ".ВариантОбеспечения",
		ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
		
	// Флаг Обособленно нельзя снимать для полуфабрикатов в процессе
	#Область ОбособленноТолькоПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧОбособленно);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Назначение нельзя изменять при действии Отгрузить, для тары и для полуфабрикатов в процессе,
	// в этапе не динамического заказа если снят флаг Обособленно
	#Область НазначениеТолькоПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ВариантОбеспечения");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ВариантыОбеспечения.Отгрузить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);

	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Обособленно");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "ДинамическаяСтруктура");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// Назначение не нужно заполнять для тары и отмененных строк
	#Область НазначениеПроверкаНезаполненного
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Производится");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Обособленно");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область НазначениеПредставление
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров и работ>';
																|en = '<for goods and works>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧНазначение);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Отбор = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Обособленно");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
	#Область ПроизводитсяТолькоПросмотр
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ТЧПроизводится);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ТипНоменклатуры");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Перечисления.ТипыНоменклатуры.МногооборотнаяТара;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
КонецПроцедуры

// Добавляет на форму условное оформление для поля ВариантОбеспечения.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеПолейОбеспечения(Форма, ИмяОбъекта, ИмяТЧ, ПутиКДанным = Неопределено) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	#Область Склад
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "Склад"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.ПереданРанее;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<не требуется>';
																				|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	
	#КонецОбласти
	
КонецПроцедуры

// Добавляет на форму условное оформление для поля ДатаОтгрузки.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//
Процедура УстановитьУсловноеОформлениеДатыОтгрузки(Форма, ИмяОбъекта, ИмяТЧ, ПутиКДанным = Неопределено) Экспорт
	
	// Видимость при использовании общей даты
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ДатаОтгрузки"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + ".НеОтгружатьЧастями");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Обязательность заполнения для переданных ранее
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "ДатаОтгрузки"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВариантыОбеспечения.ПереданРанее;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru = '<не требуется>';
																				|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	
КонецПроцедуры

#КонецОбласти

// Добавляет на форму условное оформление для поля СтатьяКалькуляции.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма.
//  ИмяОбъекта       - Строка - имя объекта.
//  ИмяТЧ            - Строка - имя табличной части.
//  ИмяЭлемента      - Строка - имя оформляемого элемента формы.
//  ПутиКДанным      - Структура, Неопределено - пути к данным.
//  ЕстьОтменаСтрок  - Булево - признак отмены строк.
//
Процедура УстановитьУсловноеОформлениеСтатьиКалькуляции(Форма, ИмяОбъекта, ИмяТЧ, ИмяЭлемента, ПутиКДанным = Неопределено, ЕстьОтменаСтрок = Ложь) Экспорт
	
	// Описание:
	// - статья калькуляции обязательна в статусе Начат и Завершен если строка не отменена.
	УсловноеОформление = Форма.УсловноеОформление;
	
	СписокСтатусов = Новый СписокЗначений;
	
	//++ НЕ УТКА
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	//-- НЕ УТКА
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КИсполнению);
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению);
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.Закрыт);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, "Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Если ЕстьОтменаСтрок Тогда
		
		ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
	КонецЕсли;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#Область Прочее

// Формирует структуру имен оформляемых элементов формы.
// 
// Возвращаемое значение:
//  Структура - Имена элементов обеспечения этапа производства:
// * ДатаОтгрузки - Строка - имя элемента на форме
// * ИмяТЧ - Строка - имя элемента табличной части формы
// * ТЧНоменклатураЕдиницаИзмерения - Строка - имя колонки в табличной части
// * ТЧХарактеристика - Строка - имя колонки в табличной части
// * ТЧСерия - Строка - имя колонки в табличной части
// * ТЧСпецификация - Строка - имя колонки в табличной части
// * ТЧСклад - Строка - имя колонки в табличной части
// * ТЧДатаОтгрузки - Строка - имя колонки в табличной части
// * ТЧКоличествоУпаковок - Строка - имя колонки в табличной части
// * ТЧЦена - Строка - имя колонки в табличной части
// * ТЧСумма - Строка - имя колонки в табличной части
// * ТЧОтменено - Строка - имя колонки в табличной части
// * ТЧПричинаОтмены - Строка - имя колонки в табличной части
// * ТЧОбособленно - Строка - имя колонки в табличной части
// * ТЧСтатьяКалькуляции - Строка - имя колонки в табличной части
Функция ИменаЭлементовОбеспеченияМатериаламиИРаботами() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДатаОтгрузки");
	ВозвращаемоеЗначение.Вставить("ИмяТЧ");
	ВозвращаемоеЗначение.Вставить("ТЧНоменклатураЕдиницаИзмерения");
	ВозвращаемоеЗначение.Вставить("ТЧХарактеристика");
	ВозвращаемоеЗначение.Вставить("ТЧСерия");
	ВозвращаемоеЗначение.Вставить("ТЧСпецификация");
	ВозвращаемоеЗначение.Вставить("ТЧСклад");
	ВозвращаемоеЗначение.Вставить("ТЧДатаОтгрузки");
	ВозвращаемоеЗначение.Вставить("ТЧКоличествоУпаковок");
	ВозвращаемоеЗначение.Вставить("ТЧЦена");
	ВозвращаемоеЗначение.Вставить("ТЧСумма");
	ВозвращаемоеЗначение.Вставить("ТЧОтменено");
	ВозвращаемоеЗначение.Вставить("ТЧПричинаОтмены");
	ВозвращаемоеЗначение.Вставить("ТЧОбособленно");
	ВозвращаемоеЗначение.Вставить("ТЧСтатьяКалькуляции");
	ВозвращаемоеЗначение.Вставить("ТЧНазначение");
	ВозвращаемоеЗначение.Вставить("ТЧПроизводится");
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Поле компоновки данных по пути.
// 
// Параметры:
//  ИмяОбъекта - Строка - Имя объекта
//  ПутиКДанным - Структура - Пути к данным
//  ИмяПоля - Строка - Имя поля
// 
// Возвращаемое значение:
//  ПолеКомпоновкиДанных - Поле компоновки данных по пути
//
Функция ПолеКомпоновкиДанныхПоПути(ИмяОбъекта, ПутиКДанным, ИмяПоля) Экспорт
	
	ПутьКДаннымПоля = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПутиКДанным, ИмяПоля, ИмяОбъекта + "." + ИмяПоля);
	Возврат Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти
