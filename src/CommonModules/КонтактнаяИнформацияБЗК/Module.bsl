#Область СлужебныйПрограммныйИнтерфейс

#Область Адреса

// Возвращает структуру адреса приведенную к указанному составу полей.
//
// Параметры:
//   СведенияОбАдресе - Структура - Результат одной из функций:
//       • РаботаСАдресами.СведенияОбАдресе;
//       • КонтактнаяИнформацияБЗК.СведенияОбАдресеСТипами.
//   ИменаПолей - Строка - Имена полей возвращаемой структуры.
//       Поддерживаются все поля структуры СведенияОбАдресе.
//       Кроме того, поддерживаются поля "Корпус", "Строение", "Литера", "Сооружение", "Участок", "Квартира".
//       Примеры: "Индекс, Регион, Район, Город, НаселенныйПункт, Территория, Улица, Дом, Корпус, Строение, Квартира",
//                "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпус, Квартира".
//
// Возвращаемое значение:
//   Структура - Свернутая структура адреса.
//
Функция СвернутьСведенияОбАдресе(СведенияОбАдресе, ИменаПолей, Разделитель = ", ") Экспорт
	Результат = Новый Структура(ИменаПолей);
	
	ЗаполнитьЗначенияСвойств(Результат, СведенияОбАдресе);
	
	// Определение заполняемых полей и дозаполнение пустыми строками.
	ТребуетсяНаселенныйПункт        = Результат.Свойство("НаселенныйПункт");
	ТребуетсяГород                  = Результат.Свойство("Город");
	ТребуетсяВнутригородскойРайон   = Результат.Свойство("ВнутригородскойРайон");
	ТребуетсяТерритория             = Результат.Свойство("Территория");
	ТребуетсяУлица                  = Результат.Свойство("Улица");
	ТребуетсяДом                    = Результат.Свойство("Дом");
	ТребуетсяЗдание                 = Результат.Свойство("Здание");
	ТребуетсяНомерЗемельногоУчастка = Результат.Свойство("НомерЗемельногоУчастка");
	ТребуетсяКорпус                 = Результат.Свойство("Корпус");
	ТребуетсяСтроение               = Результат.Свойство("Строение");
	ТребуетсяЛитера                 = Результат.Свойство("Литера");
	ТребуетсяСооружение             = Результат.Свойство("Сооружение");
	ТребуетсяУчасток                = Результат.Свойство("Участок");
	ТребуетсяКвартира               = Результат.Свойство("Квартира");
	Для Каждого КлючИЗначение Из Результат Цикл
		Если СтрСравнить(КлючИЗначение.Ключ, "Корпуса") = 0
			Или СтрСравнить(КлючИЗначение.Ключ, "Помещения") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
	// Город записывается в населенный пункт.
	// Его сокращения тоже важны, т.к. например, в одном регионе бывают одноименная деревня/поселок и город.
	Если Не ТребуетсяГород И ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
		Если ТребуетсяНаселенныйПункт Тогда
			Результат.НаселенныйПункт = Соединить(СведенияОбАдресе.Город, Результат.НаселенныйПункт, Разделитель);
		КонецЕсли;
	КонецЕсли;
	
	// Внутригородской район требуется выводить в населенном пункте только в том случае,
	// если не заполнен ни город, ни населенный пункт.
	Если Не ТребуетсяВнутригородскойРайон И ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайон) Тогда
		Если ТребуетсяНаселенныйПункт И Результат.НаселенныйПункт = "" Тогда
			Результат.НаселенныйПункт = СведенияОбАдресе.ВнутригородскойРайон;
			Если Результат.Свойство("НаселенныйПунктТипКраткий")
				И СведенияОбАдресе.Свойство("ВнутригородскойРайонТипКраткий") Тогда
				Результат.НаселенныйПунктТипКраткий = СведенияОбАдресе.ВнутригородскойРайонТипКраткий;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Обратная совместимость.
	// * ДополнительнаяТерритория - Строка - устаревшее свойство. Текстовое представление дополнительной территории.
	Если ТребуетсяУлица
		И Не ЗначениеЗаполнено(Результат.Улица)
		И ЗначениеЗаполнено(СведенияОбАдресе.ДополнительнаяТерритория) Тогда
		Результат.Улица = СведенияОбАдресе.ДополнительнаяТерритория;
		Если Результат.Свойство("УлицаТипКраткий")
			И СведенияОбАдресе.Свойство("ДополнительнаяТерриторияСокращение") Тогда
			Результат.УлицаТипКраткий = СведенияОбАдресе.ДополнительнаяТерриторияСокращение;
		КонецЕсли;
	КонецЕсли;
	
	// Территорию следует выводить либо в населенном пункте, либо в улице.
	Если Не ТребуетсяТерритория И ЗначениеЗаполнено(СведенияОбАдресе.Территория) Тогда
		// Порядок проверок важен: в приоритете - пустой населенный пункт, затем пустая улица.
		Если ТребуетсяНаселенныйПункт И Результат.НаселенныйПункт = "" Тогда
			Результат.НаселенныйПункт = СведенияОбАдресе.Территория;
			Если Результат.Свойство("НаселенныйПунктТипКраткий")
				И СведенияОбАдресе.Свойство("ТерриторияТипКраткий") Тогда
				Результат.НаселенныйПунктТипКраткий = СведенияОбАдресе.ТерриторияТипКраткий;
			КонецЕсли;
		ИначеЕсли ТребуетсяУлица И Результат.Улица = "" Тогда
			Результат.Улица = СведенияОбАдресе.Территория;
			Если Результат.Свойство("УлицаТипКраткий")
				И СведенияОбАдресе.Свойство("ТерриторияТипКраткий") Тогда
				Результат.УлицаТипКраткий = СведенияОбАдресе.ТерриторияТипКраткий;
			КонецЕсли;
		ИначеЕсли ТребуетсяНаселенныйПункт Тогда
			Результат.НаселенныйПункт = Соединить(Результат.НаселенныйПункт, СведенияОбАдресе.Территория, Разделитель);
		КонецЕсли;
	КонецЕсли;
	
	// * Здание - Структура - структура с информацией о здании адреса.
	//   ** ТипЗдания - Строка - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
	//   ** Номер     - Строка - Представление номера дома (только для адресов РФ).
	// * НомерЗемельногоУчастка - Строка - Представление номера земельного участка (только для адресов РФ).
	Если ТребуетсяДом Тогда
		Дом = Результат.Дом;
		Здание = СведенияОбАдресе.Здание;
		Если Не ТребуетсяЗдание
			И ТипЗнч(Здание) = Тип("Структура")
			И ЗначениеЗаполнено(Здание.Номер)
			И Дом <> Здание.Номер Тогда
			Результат.Дом = ?(Результат.Дом = "", "", Результат.Дом + "/") + Здание.Номер;
		КонецЕсли;
		Если Не ТребуетсяНомерЗемельногоУчастка
			И ЗначениеЗаполнено(СведенияОбАдресе.НомерЗемельногоУчастка)
			И СведенияОбАдресе.НомерЗемельногоУчастка <> Дом
			И СведенияОбАдресе.НомерЗемельногоУчастка <> Здание.Номер Тогда
			Результат.Дом = ?(Результат.Дом = "", "", Результат.Дом + "/") + СведенияОбАдресе.НомерЗемельногоУчастка;
		КонецЕсли;
	КонецЕсли;
	
	// * Помещения - Массив - содержит структуры (поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
	Если ТребуетсяКвартира Тогда
		Помещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбАдресе, "Помещения");
		Если ТипЗнч(Помещения) = Тип("Массив") Тогда
			Для Каждого Помещение Из Помещения Цикл
				Результат.Квартира = Соединить(Результат.Квартира, Помещение.Номер, Разделитель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяКорпус Или ТребуетсяСтроение Или ТребуетсяЛитера Или ТребуетсяСооружение Или ТребуетсяУчасток Тогда
		Корпуса = СтруктураКорпусов(СведенияОбАдресе, ТребуетсяЛитера);
		
		// Участок добавляется в менее заполненное поле (при необходимости - через разделитель).
		Если Не ТребуетсяУчасток И ЗначениеЗаполнено(Корпуса.Участок) Тогда
			Если Корпуса.Строение = "" Тогда
				Корпуса.Строение = Корпуса.Участок;
			ИначеЕсли Корпуса.Корпус = "" Тогда
				Корпуса.Корпус = Корпуса.Участок;
			ИначеЕсли СтрДлина(Корпуса.Строение) < СтрДлина(Корпуса.Корпус) Тогда
				Корпуса.Строение = Корпуса.Строение + "/" + Корпуса.Участок;
			Иначе
				Корпуса.Корпус   = Корпуса.Корпус   + "/" + Корпуса.Участок;
			КонецЕсли;
		КонецЕсли;
		
		// Строение и сооружение - одно и то же, одновременно их быть не может.
		Если Не ТребуетсяСооружение И ЗначениеЗаполнено(Корпуса.Сооружение) Тогда
			Корпуса.Строение = Корпуса.Строение + Корпуса.Сооружение;
		КонецЕсли;
		
		Если Не ТребуетсяСтроение И ЗначениеЗаполнено(Корпуса.Строение) Тогда
			Корпуса.Корпус = Соединить(Корпуса.Корпус, Корпуса.Строение, Разделитель);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат, Корпуса);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует массив корпусов из сведений об адресе в структуру корпусов.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе или КонтактнаяИнформацияБЗК.СтруктураКорпусов.
//                    - Массив из Структура - Значение свойства "Корпуса" результата функции СведенияОбАдресе.
//
// Возвращаемое значение:
//   Структура - Перечень корпусов в виде структуры:
//       * Корпус     - Строка
//       * Строение   - Строка
//       * Литера     - Строка
//       * Сооружение - Строка
//       * Участок    - Строка
//
Функция СтруктураКорпусов(СведенияОбАдресе, ТребуетсяЛитера = Истина) Экспорт
	Если ТипЗнч(СведенияОбАдресе) = Тип("Массив") Тогда
		МассивКорпусов = СведенияОбАдресе;
	ИначеЕсли СведенияОбАдресе.Свойство("Корпус") Тогда
		Возврат СведенияОбАдресе;
	Иначе
		МассивКорпусов = СведенияОбАдресе.Корпуса;
	КонецЕсли;
	
	Корпуса = Новый Структура("Корпус, Строение, Литера, Сооружение, Участок", "", "", "", "", "");
	
	Для Каждого Корпус Из МассивКорпусов Цикл
		Если Не ЗначениеЗаполнено(Корпус.Номер) Тогда
			Продолжить;
		КонецЕсли;
		ТипКорпуса = Корпус.ТипКорпуса;
		Если СтрСравнить(ТипКорпуса, "Литер") = 0 Или СтрСравнить(ТипКорпуса, "Лит") = 0 Тогда
			// "Литер" и "Лит" считается устаревшим дублем корпусов типа "Литера".
			ТипКорпуса = "Литера";
		ИначеЕсли Не Корпуса.Свойство(ТипКорпуса) Тогда
			ТипКорпуса = "Сооружение";
		КонецЕсли;
		Если Корпуса[ТипКорпуса] = "" Тогда
			Корпуса[ТипКорпуса] = Корпус.Номер;
		Иначе
			Корпуса[ТипКорпуса] = Корпуса[ТипКорпуса] + "/" + Корпус.Номер;
		КонецЕсли;
	КонецЦикла;
	
	// Литера является добавкой к любому из корпусов.
	// Например, "Корпус 5, Литера А" это "Корпус 5А", а "Строение 10, Литер Б" это "Строение 10Б".
	Если Не ТребуетсяЛитера Тогда
		Если ЗначениеЗаполнено(Корпуса.Литера) Тогда
			Если ЗначениеЗаполнено(Корпуса.Корпус) Тогда
				Корпуса.Корпус = Корпуса.Корпус + Корпуса.Литера;
			ИначеЕсли ЗначениеЗаполнено(Корпуса.Строение) Тогда
				Корпуса.Строение = Корпуса.Строение + Корпуса.Литера;
			ИначеЕсли ЗначениеЗаполнено(Корпуса.Сооружение) Тогда
				Корпуса.Сооружение = Корпуса.Сооружение + Корпуса.Литера;
			ИначеЕсли ЗначениеЗаполнено(Корпуса.Участок) Тогда
				Корпуса.Участок = Корпуса.Участок + Корпуса.Литера;
			Иначе
				Корпуса.Корпус = Корпуса.Литера;
			КонецЕсли;
		КонецЕсли;
		Корпуса.Удалить("Литера");
	КонецЕсли;
	
	Возврат Корпуса;
КонецФункции

// Возвращает представление корпусов адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе или КонтактнаяИнформацияБЗК.СтруктураКорпусов.
//   ОграничениеДлины - Число     - Используется для определения переключения между полным и кратким представлением.
//   Разделитель      - Строка    - Разделитель корпусов.
//
// Возвращаемое значение:
//   Строка - Представление корпусов.
//
Функция ПредставлениеКорпусов(СведенияОбАдресе, ОграничениеДлины = 0, Разделитель = ", ") Экспорт
	Корпуса = СтруктураКорпусов(СведенияОбАдресе, Ложь);
	Представление = ПредставлениеКорпусовПолное(Корпуса, Разделитель);
	Если ОграничениеДлины > 0 И СтрДлина(Представление) > ОграничениеДлины Тогда
		Представление = ПредставлениеКорпусовКраткое(Корпуса, Разделитель);
	КонецЕсли;
	Возврат Представление;
КонецФункции

// Возвращает полное представление корпусов адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе или КонтактнаяИнформацияБЗК.СтруктураКорпусов.
//   Разделитель      - Строка    - Разделитель корпусов.
//
// Возвращаемое значение:
//   Строка - Полное представление корпусов.
//
Функция ПредставлениеКорпусовПолное(СведенияОбАдресе, Разделитель = ", ") Экспорт
	ПолныеПредставления = Новый Массив;
	
	Корпуса = СтруктураКорпусов(СведенияОбАдресе, Ложь);
	Если ЗначениеЗаполнено(Корпуса.Корпус) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Корпус';
											|en = 'Block'") + " " + Корпуса.Корпус);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Строение) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Строение';
											|en = 'Construction'") + " " + Корпуса.Строение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Сооружение) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Сооружение';
											|en = 'Facility'") + " " + Корпуса.Сооружение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Участок) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Участок';
											|en = 'Area'") + " " + Корпуса.Участок);
	КонецЕсли;
	
	Возврат СтрСоединить(ПолныеПредставления, Разделитель);
КонецФункции

// Возвращает краткое представление корпусов адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе или КонтактнаяИнформацияБЗК.СтруктураКорпусов.
//   РазделительКорпусов - Строка - Строка вставляемая между корпусами.
//   РазделительТипа     - Строка - Строка вставляемая между типом и представлением корпуса.
//
// Возвращаемое значение:
//   Строка - Краткое представление корпусов.
//
Функция ПредставлениеКорпусовКраткое(СведенияОбАдресе, РазделительКорпусов = ", ", РазделительТипа = ". ") Экспорт
	КраткиеПредставления = Новый Массив;
	
	Корпуса = СтруктураКорпусов(СведенияОбАдресе, Ложь);
	Если ЗначениеЗаполнено(Корпуса.Корпус) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'к';
											|en = 'to'")    + РазделительТипа + Корпуса.Корпус);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Строение) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'стр';
											|en = 'page'")  + РазделительТипа + Корпуса.Строение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Сооружение) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'соор';
											|en = 'constr'") + РазделительТипа + Корпуса.Сооружение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Корпуса.Участок) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'уч';
											|en = 'area'")   + РазделительТипа + Корпуса.Участок);
	КонецЕсли;
	
	Возврат СтрСоединить(КраткиеПредставления, РазделительКорпусов);
КонецФункции

// Преобразует массив помещений из сведений об адресе в структуру помещений.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе или КонтактнаяИнформацияБЗК.СтруктураКвартир.
//                    - Массив из Структура - Значение свойства "Помещения" результата функции СведенияОбАдресе.
//
// Возвращаемое значение:
//   Структура - Перечень помещений в виде структуры:
//       * Квартира  - Строка
//       * Офис      - Строка
//       * Бокс      - Строка
//       * Помещение - Строка
//       * Комната   - Строка
//       * Этаж      - Строка
//       * АЯ        - Строка
//       * ПО        - Строка
//       * ВЧ        - Строка
//
Функция СтруктураПомещений(СведенияОбАдресе) Экспорт
	Если ТипЗнч(СведенияОбАдресе) = Тип("Массив") Тогда
		МассивПомещений = СведенияОбАдресе;
	ИначеЕсли СведенияОбАдресе.Свойство("Квартира") Тогда
		Возврат СведенияОбАдресе;
	Иначе
		МассивПомещений = СведенияОбАдресе.Помещения;
	КонецЕсли;
	
	Помещения = Новый Структура("Квартира, Офис, Бокс, Помещение, Комната, Этаж, АЯ, ПО, ВЧ",
		"", "", "", "", "", "", "", "", "");
	Буквы = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
		+ "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	
	Для Каждого Помещение Из МассивПомещений Цикл
		Если Не ЗначениеЗаполнено(Помещение.Номер) Тогда
			Продолжить;
		КонецЕсли;
		ТипПомещения = Помещение.ТипПомещения;
		ТипПомещения = СтроковыеФункцииБЗККлиентСервер.СкопироватьСимволы(ТипПомещения, Буквы);
		Если Не ЗначениеЗаполнено(ТипПомещения) Или Не Помещения.Свойство(ТипПомещения) Тогда
			ТипПомещения = "Квартира";
		КонецЕсли;
		Если Помещения[ТипПомещения] = "" Тогда
			Помещения[ТипПомещения] = Помещение.Номер;
		Иначе
			Помещения[ТипПомещения] = Помещения[ТипПомещения] + " " + Помещение.Номер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Помещения;
КонецФункции

// Возвращает представление помещений адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе, КонтактнаяИнформацияБЗК.СтруктураПомещений.
//   ОграничениеДлины - Число     - Используется для определения переключения между полным и кратким представлением.
//   Разделитель      - Строка    - Строка вставляемая между помещениями.
//   РазделительТипа  - Строка    - Строка вставляемая между типом и представлением помещения.
//
// Возвращаемое значение:
//   Строка - Представление помещений.
//
Функция ПредставлениеПомещений(СведенияОбАдресе, ОграничениеДлины = 0, Разделитель = ", ", РазделительТипа = ". ") Экспорт
	Помещения = СтруктураПомещений(СведенияОбАдресе);
	Представление = ПредставлениеПомещенийПолное(Помещения, Разделитель);
	Если ОграничениеДлины > 0 И СтрДлина(Представление) > ОграничениеДлины Тогда
		Представление = ПредставлениеПомещенийКраткое(Помещения, Разделитель);
	КонецЕсли;
	Возврат Представление;
КонецФункции

// Возвращает полное представление помещений адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе, КонтактнаяИнформацияБЗК.СтруктураПомещений.
//   Разделитель      - Строка    - Строка вставляемая между помещениями.
//   РазделительТипа  - Строка    - Строка вставляемая между типом и представлением помещения.
//
// Возвращаемое значение:
//   Строка - Полное представление помещений.
//
Функция ПредставлениеПомещенийПолное(СведенияОбАдресе, Разделитель = ", ", РазделительТипа = ". ") Экспорт
	ПолныеПредставления = Новый Массив;
	
	Помещения = СтруктураПомещений(СведенияОбАдресе);
	Если ЗначениеЗаполнено(Помещения.Этаж) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Этаж';
											|en = 'Floor'") + " " + Помещения.Этаж);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Квартира) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Квартира';
											|en = 'Apartment'") + " " + Помещения.Квартира);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Офис) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Офис';
											|en = 'Office'") + " " + Помещения.Офис);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Помещение) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Помещение';
											|en = 'Wareroom'") + " " + Помещения.Помещение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Комната) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Комната';
											|en = 'Room'") + " " + Помещения.Комната);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Бокс) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'Бокс';
											|en = 'Box'") + " " + Помещения.Бокс);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.АЯ) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'А/я';
											|en = 'Mail box'") + " " + Помещения.АЯ);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.ПО) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'П/о';
											|en = 'Post office'") + " " + Помещения.ПО);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.ВЧ) Тогда
		ПолныеПредставления.Добавить(НСтр("ru = 'В/ч';
											|en = 'Military post'") + " " + Помещения.ВЧ);
	КонецЕсли;
	
	Возврат СтрСоединить(ПолныеПредставления, Разделитель);
КонецФункции

// Возвращает краткое представление корпусов адреса.
//
// Параметры:
//   СведенияОбАдресе - Структура - См. РаботаСАдресами.СведенияОбАдресе, КонтактнаяИнформацияБЗК.СтруктураПомещений.
//   Разделитель      - Строка    - Строка вставляемая между помещениями.
//   РазделительТипа  - Строка    - Строка вставляемая между типом и представлением помещения.
//
// Возвращаемое значение:
//   Строка - Краткое представление помещений.
//
Функция ПредставлениеПомещенийКраткое(СведенияОбАдресе, Разделитель = ", ", РазделительТипа = ". ") Экспорт
	КраткиеПредставления = Новый Массив;
	
	Помещения = СтруктураПомещений(СведенияОбАдресе);
	Если ЗначениеЗаполнено(Помещения.Этаж) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Эт';
											|en = 'Floor'")   + РазделительТипа + Помещения.Этаж);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Квартира) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Кв';
											|en = 'Apt'")   + РазделительТипа + Помещения.Квартира);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Офис) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Оф';
											|en = 'Of'")   + РазделительТипа + Помещения.Офис);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Помещение) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Пом';
											|en = 'Wareroom'")  + РазделительТипа + Помещения.Помещение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Комната) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Ком';
											|en = 'Room'")  + РазделительТипа + Помещения.Комната);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.Бокс) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'Бокс';
											|en = 'Box'") + РазделительТипа + Помещения.Бокс);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.АЯ) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'А/я';
											|en = 'Mail box'")  + РазделительТипа + Помещения.АЯ);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.ПО) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'П/о';
											|en = 'Post office'")  + РазделительТипа + Помещения.ПО);
	КонецЕсли;
	Если ЗначениеЗаполнено(Помещения.ВЧ) Тогда
		КраткиеПредставления.Добавить(НСтр("ru = 'В/ч';
											|en = 'Military post'")  + РазделительТипа + Помещения.ВЧ);
	КонецЕсли;
	
	Возврат СтрСоединить(КраткиеПредставления, Разделитель);
КонецФункции

// Возвращает сведения об адресе в виде отдельных частей адреса и различных кодов (код региона, ОКТМО и др.).
//   Возвращаемые поля содержат адресные сокращения (ул., р-н, и так далее...).
//   К корпусам типы не добавляются.
//   Для получения представления корпусов рекомендуется использовать функцию ПредставлениеКорпусов.
//
// Параметры:
//   Адрес - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO-пакету Адрес.
//         - ОбъектXDTO - XDTO-объект, соответствующий XDTO пакету Адрес.
//
// Возвращаемое значение:
//   Структура:
//        * Представление              - Строка - Представление адреса по административно-территориальному делению.
//        * МуниципальноеПредставление - Строка - Представление адреса по муниципальному делению.
//        * ТипАдреса                  - Строка - Основной тип адреса (только для адресов РФ).
//                                                Варианты: "Муниципальный", "Административно-территориальный".
//        * Страна                     - Строка - Представление страны.
//        * КодСтраны                  - Строка - Код страны по ОКСМ.
//        * Индекс                     - Строка - Почтовый индекс.
//        * КодРегиона                 - Строка - Код региона РФ.
//        * Регион                     - Строка - Представление региона РФ.
//        * Район                      - Строка - Представление района у адресов по административно-территориальному делению.
//        * МуниципальныйРайон         - Строка - Представление муниципального района для адреса по муниципальному делению.
//        * КодМуниципальногоРайона    - Строка - Код муниципального района:
//                                                1- муниципальный район; 2- городской округ; 3 - внутригородская территория
//                                                города федерального значения; 4 - муниципальный округ.
//                                                Если не удалось определить код, то возвращается пустая строка.
//        * Город                      - Строка - Представление города у адресов по административно-территориальному делению.
//        * Поселение                  - Строка - Представление поселения у адресов по муниципальному делению.
//        * КодПоселения               - Строка - код поселения: 1 - городское поселение; 2 - сельское поселение; 3-  межселенная
//                                                территория в составе муниципального района; 4 - внутригородской район
//                                                городского округа;
//        * ВнутригородскойРайон       - Строка - Представление внутригородского района.
//        * НаселенныйПункт            - Строка - Представление населенного пункта.
//        * Территория                 - Строка - Представление территории (элемента планировочной структуры).
//        * Улица                      - Строка - Представление улицы.
//        * Здание  - Структура
//            ** ТипЗдания - Строка - Тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
//            ** Номер     - Строка - Представление номера дома (только для адресов РФ).
//        * Корпуса - Структура - Перечень корпусов адреса: "Корпус", "Строение", "Литера", "Сооружение", "Участок".
//        * Квартира - Строка - Номер квартиры.
//        * НомерЗемельногоУчастка - Строка - Представление номера земельного участка (только для адресов РФ).
//        * Комментарий - Строка - комментарий об адресе.
//        * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - идентификационный код последнего адресного объекта
//                                        в иерархи адреса. Например, для адреса: Москва г., Дмитровское ш., д.9 это
//                                        будет идентификатор улицы.
//                                        Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//        * ИдентификаторДома             - УникальныйИдентификатор - идентификационный код дома(строения) адресного объекта.
//                                        Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//                                        Пустая строка если значение отсутствует.
//        * ИдентификаторЗемельногоУчастка - УникальныйИдентификатор - идентификационный код земельного участка
//                                       адресного объекта. При отсутствии значения - пустая строка.
//        * ДополнительныеКоды  - Структура - коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
//                                            Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//
Функция СведенияОбАдресеСТипами(Адрес) Экспорт
	Если ТипЗнч(Адрес) = Тип("Структура") Тогда
		СведенияОбАдресе = Адрес;
	Иначе
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес);
	КонецЕсли;
	
	// Сокращения тоже являются частью адреса (определяют его смысл в плане уникальности).
	// Например, регион: "Кемеровская область -", сокращение: "Кузбасс".
	Если ЗначениеЗаполнено(СведенияОбАдресе.РегионТипКраткий) Тогда
		СведенияОбАдресе.Регион = СведенияОбАдресе.Регион + " " + СведенияОбАдресе.РегионТипКраткий;
	КонецЕсли;
	
	// Представление района у адресов по административно-территориальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Район)
		И ЗначениеЗаполнено(СведенияОбАдресе.РайонТипКраткий) Тогда
		СведенияОбАдресе.Район = СведенияОбАдресе.Район + " " + СведенияОбАдресе.РайонТипКраткий;
	КонецЕсли;
	
	// Представление муниципального района для адреса по муниципальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.МуниципальныйРайон)
		И ЗначениеЗаполнено(СведенияОбАдресе.МуниципальныйРайонТипКраткий) Тогда
		СведенияОбАдресе.МуниципальныйРайон = СведенияОбАдресе.МуниципальныйРайон + " " + СведенияОбАдресе.МуниципальныйРайонТипКраткий;
	КонецЕсли;
	
	// Сокращения города тоже важны, т.к. например, в одном регионе бывают одноименная деревня/поселок и город.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город)
		И ЗначениеЗаполнено(СведенияОбАдресе.ГородТипКраткий) Тогда
		СведенияОбАдресе.Город = СведенияОбАдресе.Город + " " + СведенияОбАдресе.ГородТипКраткий;
	КонецЕсли;
	
	// Представление поселения у адресов по муниципальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Поселение)
		И ЗначениеЗаполнено(СведенияОбАдресе.ПоселениеТипКраткий) Тогда
		СведенияОбАдресе.Поселение = СведенияОбАдресе.Поселение + " " + СведенияОбАдресе.ПоселениеТипКраткий;
	КонецЕсли;
	
	// Внутригородской район.
	Если ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайон)
		И ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайонТипКраткий) Тогда
		СведенияОбАдресе.ВнутригородскойРайон = СведенияОбАдресе.ВнутригородскойРайон + " " + СведенияОбАдресе.ВнутригородскойРайонТипКраткий;
	КонецЕсли;
	
	// Например, район: "Сходня", сокращение: "мкр".
	Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт)
		И ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПунктТипКраткий) Тогда
		СведенияОбАдресе.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт + " " + СведенияОбАдресе.НаселенныйПунктТипКраткий;
	КонецЕсли;
	
	// Территория.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Территория)
		И ЗначениеЗаполнено(СведенияОбАдресе.ТерриторияТипКраткий) Тогда
		СведенияОбАдресе.Территория = СведенияОбАдресе.Территория + " " + СведенияОбАдресе.ТерриторияТипКраткий;
	КонецЕсли;
	
	// Например, улица: "10-я В.О.", сокращение: "линия".
	Если ЗначениеЗаполнено(СведенияОбАдресе.Улица)
		И ЗначениеЗаполнено(СведенияОбАдресе.УлицаТипКраткий) Тогда
		СведенияОбАдресе.Улица = СведенияОбАдресе.Улица + " " + СведенияОбАдресе.УлицаТипКраткий;
	КонецЕсли;
	
	Возврат СведенияОбАдресе;
КонецФункции

// Возвращает структуру с индексом и представлением адреса без индекса.
//
// Параметры:
//   ЗначениеАдреса - Строка - Адрес в формате JSON.
//
// Возвращаемое значение:
//   Структура
//       * Индекс        - Строка - Индекс адреса.
//       * Представление - Строка - Представлением адреса без индекса.
//
Функция ИндексИПредставлениеАдреса(ЗначениеАдреса) Экспорт
	СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса);
	Результат = Новый Структура;
	Результат.Вставить("Индекс", Лев(СтруктураАдреса.Индекс, 6));
	Результат.Вставить("Представление", ПредставлениеАдресаБезИндекса(СтруктураАдреса));
	Возврат Результат;
КонецФункции

// Возвращает представление адреса без индекса.
//
// Параметры:
//   СтруктураАдреса - Структура - См. РаботаСАдресами.СведенияОбАдресе.
//
// Возвращаемое значение:
//   Строка - Представление адреса без индекса.
//
Функция ПредставлениеАдресаБезИндекса(СтруктураАдреса) Экспорт
	// Если индекса нет то представление возвращается "как есть".
	Если Не ЗначениеЗаполнено(СтруктураАдреса.Индекс) Или Не ЗначениеЗаполнено(СтруктураАдреса.Представление) Тогда
		Возврат СтруктураАдреса.Представление;
	КонецЕсли;
	// Если индекс не найден то представление возвращается "как есть".
	Позиция = СтрНайти(СтруктураАдреса.Представление, СтруктураАдреса.Индекс);
	Если Позиция = 0 Тогда
		Возврат СтруктураАдреса.Представление;
	КонецЕсли;
	// Если индекс найден не в начале строки то представление возвращается "как есть".
	СтрокаДоИндекса = Лев(СтруктураАдреса.Представление, Позиция - 1);
	Если ЗначениеЗаполнено(СтрокаДоИндекса)
		И СтрНайти(СтрокаДоИндекса, СтруктураАдреса.Регион) > 0 Тогда
		Возврат СтруктураАдреса.Представление;
	КонецЕсли;
	НачалоПредставленияБезИндекса = Позиция + СтрДлина(СтруктураАдреса.Индекс);
	Пока Истина Цикл
		Символ = Сред(СтруктураАдреса.Представление, НачалоПредставленияБезИндекса, 1);
		Если ПустаяСтрока(Символ) Или Символ = "," Тогда
			НачалоПредставленияБезИндекса = НачалоПредставленияБезИндекса + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Сред(СтруктураАдреса.Представление, НачалоПредставленияБезИндекса);
КонецФункции

#КонецОбласти

#Область Телефоны

// Возвращает сведения о телефоне.
//   Возвращает корректные значения полей структуры в случае,
//   если номер телефона изначально введен без пробелов и разделителей (например: +79992223344).
//
// Параметры:
//   ЗначениеТелефона - Строка - Значение контактной информации типа "Телефон" в формате JSON.
//
// Возвращаемое значение:
//   Структура - См. УправлениеКонтактнойИнформацией.СведенияОТелефоне.
//
Функция СтруктураТелефона(ЗначениеТелефона) Экспорт
	Результат = УправлениеКонтактнойИнформацией.СведенияОТелефоне(ЗначениеТелефона);
	
	Результат.КодСтраны     = СокрЛП(Результат.КодСтраны);
	Результат.КодГорода     = СокрЛП(Результат.КодГорода);
	Результат.НомерТелефона = СокрЛП(Результат.НомерТелефона);
	Результат.Добавочный    = СокрЛП(Результат.Добавочный);
	Результат.Представление = СокрЛП(Результат.Представление);
	
	// Если ввести номер телефона в поле ввода без пробелов и разделителей (например: +79992223344),
	// то весь номер телефона запишется либо в код страны, либо в номер телефона, а все остальные поля окажутся пустыми.
	Если (Результат.КодГорода = "" 
			И Результат.НомерТелефона = "" 
			И (Результат.КодСтраны = Результат.Представление
				Или "+" + Результат.КодСтраны = Результат.Представление))
		Или (Результат.КодГорода = "" 
			И Результат.КодСтраны = "" 
			И Результат.НомерТелефона = Результат.Представление) Тогда
		Если СтрДлина(Результат.Представление) <= 10 Тогда
			Возврат Результат;
		КонецЕсли;
		Если СтрНачинаетсяС(Результат.Представление, "+") Тогда
			Результат.КодСтраны     = Лев(Результат.Представление, 2);
			Результат.КодГорода     = Сред(Результат.Представление, 3, 3);
			Результат.НомерТелефона = Сред(Результат.Представление, 6);
		Иначе
			Результат.КодСтраны     = Лев(Результат.Представление, 1);
			Результат.КодГорода     = Сред(Результат.Представление, 2, 3);
			Результат.НомерТелефона = Сред(Результат.Представление, 5);
			Если Не СтрНачинаетсяС(Результат.КодСтраны, "8") Тогда
				Результат.КодСтраны = "+" + Результат.КодСтраны;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Результат.КодСтраны <> "" И Не СтрНачинаетсяС(Результат.КодСтраны, "+") Тогда
			Результат.КодСтраны = "+" + Результат.КодСтраны;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает представление телефона.
//
// Параметры:
//   ЗначениеТелефона  - Строка    - Значение контактной информации типа "Телефон" (строка json или xml).
//                     - Структура - Результат функции КонтактнаяИнформацияБЗК.СтруктураТелефона.
//   ОграничениеДлины  - Число     - Ограничение длины телефона.
//   ДляПечатиПоБуквам - Булево    - Если Истина то будет сформировано представление для функции
//                                   ПрямыеВыплатыПособийСоциальногоСтрахования.ВывестиТелефонПоБуквам.
//
// Возвращаемое значение:
//   Строка - Удобочитаемое представление телефона, например: "+7 123 456-78-90".
//
Функция ПредставлениеТелефона(ЗначениеТелефона, ОграничениеДлины = 0, ДляПечатиПоБуквам = Ложь, ВыводитьКомментарий = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(ЗначениеТелефона) Тогда
		Возврат "";
	КонецЕсли;
	Если ТипЗнч(ЗначениеТелефона) = Тип("Структура") Тогда
		СтруктураТелефона = ЗначениеТелефона;
	Иначе
		СтруктураТелефона = СтруктураТелефона(ЗначениеТелефона);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтруктураТелефона.Представление) Тогда
		Возврат "";
	КонецЕсли;
	
	// Форматы номеров:
	// ххх-ххх-ххх
	// ххх-ххх-хх
	// ххх-хх-хх
	// хх-хх-хх
	// х-хх-хх
	// хх-хх
	Номер = СтроковыеФункцииБЗККлиентСервер.СкопироватьЦифры(СтруктураТелефона.НомерТелефона);
	ДлинаНомера = СтрДлина(Номер);
	Если ДлинаНомера = 4 Тогда
		СтруктураТелефона.НомерТелефона = Лев(Номер, 2) + "-" + Сред(Номер, 3);
	ИначеЕсли ДлинаНомера = 5 Тогда
		СтруктураТелефона.НомерТелефона = Лев(Номер, 1) + "-" + Сред(Номер, 2, 2) + "-" + Сред(Номер, 4);
	ИначеЕсли ДлинаНомера = 6 Тогда
		СтруктураТелефона.НомерТелефона = Лев(Номер, 2) + "-" + Сред(Номер, 3, 2) + "-" + Сред(Номер, 5);
	ИначеЕсли ДлинаНомера = 7 Тогда
		СтруктураТелефона.НомерТелефона = Лев(Номер, 3) + "-" + Сред(Номер, 4, 2) + "-" + Сред(Номер, 6);
	ИначеЕсли ДлинаНомера >= 8 Тогда
		СтруктураТелефона.НомерТелефона = Лев(Номер, 3) + "-" + Сред(Номер, 4, 3) + "-" + Сред(Номер, 7);
	КонецЕсли;
	
	// Формирование представления со скобками, комментарием и добавочным.
	Если Не ДляПечатиПоБуквам Тогда
		
		// Полное представление.
		Если ВыводитьКомментарий Тогда
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода,
				СтруктураТелефона.НомерТелефона,
				СтруктураТелефона.Добавочный,
				СтруктураТелефона.Комментарий);
			Если ОграничениеДлины = 0 Или СтрДлина(Представление) <= ОграничениеДлины Тогда
				Возврат Представление;
			КонецЕсли;
		КонецЕсли;
		
		// Представление со скобками и добавочным, но без комментария.
		Если Не ВыводитьКомментарий Или ЗначениеЗаполнено(СтруктураТелефона.Комментарий) Тогда
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода,
				СтруктураТелефона.НомерТелефона,
				СтруктураТелефона.Добавочный,
				"");
			Если ОграничениеДлины = 0 Или СтрДлина(Представление) <= ОграничениеДлины Тогда
				Возврат Представление;
			КонецЕсли;
		КонецЕсли;
		
		// Представление со скобками, но без комментария и добавочного.
		Если ЗначениеЗаполнено(СтруктураТелефона.Добавочный) Тогда
			Представление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураТелефона.КодСтраны,
				СтруктураТелефона.КодГорода,
				СтруктураТелефона.НомерТелефона,
				"",
				"");
			Если СтрДлина(Представление) <= ОграничениеДлины Тогда
				Возврат Представление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Формирование представления без скобок и комментария.
	МассивПредставлений = Новый Массив;
	
	Если ЗначениеЗаполнено(СтруктураТелефона.КодСтраны) Тогда
		МассивПредставлений.Добавить(СтруктураТелефона.КодСтраны);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТелефона.КодГорода) Тогда
		Разделитель = ?(МассивПредставлений.Количество() > 0, ?(ДляПечатиПоБуквам, "-", " "), "");
		МассивПредставлений.Добавить(Разделитель + СтруктураТелефона.КодГорода);
	КонецЕсли;
	
	Если ДлинаНомера > 0 Тогда
		Разделитель = ?(МассивПредставлений.Количество() > 0, ?(ДляПечатиПоБуквам, "-", " "), "");
		МассивПредставлений.Добавить(Разделитель + СтруктураТелефона.НомерТелефона);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТелефона.Добавочный) Тогда
		Если ДляПечатиПоБуквам Тогда
			МассивПредставлений.Добавить(" " + СтрШаблон(НСтр("ru = 'доб.%1';
																|en = 'ext.%1'"), СтруктураТелефона.Добавочный));
		Иначе
			МассивПредставлений.Добавить(", " + СтрШаблон(НСтр("ru = 'доб. %1';
																|en = 'ext. %1'"), СтруктураТелефона.Добавочный));
		КонецЕсли;
	КонецЕсли;
	
	Пока Истина Цикл
		Представление = СтрСоединить(МассивПредставлений, "");
		Если ОграничениеДлины = 0 Или СтрДлина(Представление) <= ОграничениеДлины Тогда
			Возврат Представление;
		КонецЕсли;
		МассивПредставлений.Удалить(МассивПредставлений.ВГраница());
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Возвращает таблицу, содержащую контактную информацию нескольких объектов.
//   Работает аналогично функции УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов,
//   однако не поднимает исключение в случае, если дата не указана,
//   и поддерживает передачу одной ссылки или объекта в параметре СсылкиИлиОбъекты.
//
// Параметры:
//    СсылкиИлиОбъекты         - Массив, ФиксированныйМассив, ЛюбаяСсылка, Объект
//    ТипыКонтактнойИнформации - Массив, ПеречислениеСсылка.ТипыКонтактнойИнформации, Неопределено
//    ВидыКонтактнойИнформации - Массив, СправочникСсылка.ВидыКонтактнойИнформации, Неопределено
//    Дата                     - Дата, Неопределено
//
// Возвращаемое значение:
//  ТаблицаЗначений
//    * Объект           - ЛюбаяСсылка
//    * Вид              - СправочникСсылка.ВидыКонтактнойИнформации
//    * Тип              - ПеречислениеСсылка.ТипыКонтактнойИнформации
//    * Значение         - Строка
//    * Представление    - Строка
//    * Дата             - Дата
//    * ИдентификаторСтрокиТабличнойЧасти - Число
//    * ЗначенияПолей    - Строка
//
Функция КонтактнаяИнформацияОбъектов(Знач СсылкиИлиОбъекты, Знач ТипыКонтактнойИнформации = Неопределено, Знач ВидыКонтактнойИнформации = Неопределено, Знач Дата = Неопределено) Экспорт
	Если СсылкиИлиОбъекты = Неопределено Тогда
		Возврат УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация();
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(СсылкиИлиОбъекты) = Тип("Массив") Тогда
		МассивОбъектов = СсылкиИлиОбъекты;
	ИначеЕсли ТипЗнч(СсылкиИлиОбъекты) = Тип("ФиксированныйМассив") Тогда
		МассивОбъектов = Новый Массив(СсылкиИлиОбъекты);
	Иначе
		МассивОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкиИлиОбъекты);
	КонецЕсли;
	
	Для Индекс = 0 По МассивОбъектов.ВГраница() Цикл
		СсылкаИлиОбъект = МассивОбъектов[Индекс];
		Если СериализацияБЗК.ЭтоТипОбъекта(XMLТипЗнч(СсылкаИлиОбъект)) Тогда
			МассивОбъектов[Индекс] = СсылкаИлиОбъект.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,
		ТипыКонтактнойИнформации,
		ВидыКонтактнойИнформации,
		Дата);
КонецФункции

// Получает представление контактной информации объекта заданного вида.
//
// Параметры:
//   ТаблицаКИ - ТаблицаЗначений - См. УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов.
//   Владелец  - ЛюбаяСсылка                               - Владелец контактной информации.
//   Вид       - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеКонтактнойИнформации(ТаблицаКИ, Владелец = Неопределено, Вид = Неопределено) Экспорт
	КонтактнаяИнформация = НайтиКонтактнуюИнформацию(ТаблицаКИ, Владелец, Вид);
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат КонтактнаяИнформация.Представление;
	КонецЕсли;
КонецФункции

// Получает представление контактной информации объекта заданного вида.
//
// Параметры:
//   ТаблицаКИ - ТаблицаЗначений - См. УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов.
//   Владелец  - ЛюбаяСсылка                               - Владелец контактной информации.
//   Вид       - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//
// Возвращаемое значение:
//   Строка
//
Функция ЗначениеКонтактнойИнформации(ТаблицаКИ, Владелец = Неопределено, Вид = Неопределено) Экспорт
	КонтактнаяИнформация = НайтиКонтактнуюИнформацию(ТаблицаКИ, Владелец, Вид);
	Если КонтактнаяИнформация = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат КонтактнаяИнформация.Значение;
	КонецЕсли;
КонецФункции

// Находит контактную информацию объекта заданного вида.
//
// Параметры:
//   ТаблицаКИ - ТаблицаЗначений - См. УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов.
//   Владелец  - ЛюбаяСсылка                               - Владелец контактной информации.
//   Вид       - СправочникСсылка.ВидыКонтактнойИнформации - Вид контактной информации.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений, Неопределено
//
Функция НайтиКонтактнуюИнформацию(ТаблицаКИ, Владелец = Неопределено, Вид = Неопределено) Экспорт
	Если Владелец = Неопределено Тогда
		Если Вид = Неопределено Тогда
			Найденные = ТаблицаКИ;
		Иначе
			Возврат ТаблицаКИ.Найти(Вид, "Вид");
		КонецЕсли;
	Иначе
		Если Вид = Неопределено Тогда
			Возврат ТаблицаКИ.Найти(Владелец, "Объект");
		Иначе
			Найденные = ТаблицаКИ.НайтиСтроки(Новый Структура("Объект, Вид", Владелец, Вид));
		КонецЕсли;
	КонецЕсли;
	
	Если Найденные.Количество() > 0 Тогда
		Возврат Найденные[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ВводКонтактнойИнформации

// Обработчик для события формы ПриСозданииНаСервере, вызывается после вызова соответствующего метода подсистемы
// УправлениеКонтактнойИнформации. Дополняет элементы отображения полей ввода адресов, полями
// отображающими результаты проверки адресов на корректность.
//
// Параметры:
//    Форма - ФормаКлиентскогоПриложения - Форма объекта-владельца, предназначенная для вывода контактной 
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма);
	ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма);
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму.
//
Процедура ОбновитьКонтактнуюИнформацию(Форма, Результат, ЗависимостиВидовАдресов = Неопределено) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Свойство("Перечитать")
		И Результат.Перечитать = Истина Тогда
		
		ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма);
	КонецЕсли;
	
	ЗаполнитьЗависимыеАдреса(Форма, Результат, ЗависимостиВидовАдресов);
	
	ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма);
	
КонецПроцедуры

// Обновляет представление и отображение поля ввода адреса.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Обновляемая форма.
//   ИмяПоляВводаПредставления - Строка - Имя поля ввода, связанного с реквизитом формы,
//       в котором хранится представление контактной информации.
//       Пример: "ПредставлениеАдресаОрганизации".
//   ЗначениеКонтактнойИнформации - Строка - Значение контактной информации в XML или JSON.
//
Процедура ОбновитьПолеВводаАдреса(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации) Экспорт
	
	ПолеВвода = Форма.Элементы.Найти(ИмяПоляВводаПредставления);
	Если ПолеВвода = Неопределено Тогда
		Возврат; // Элемент недоступен по правам или по ФО - обновлять не требуется.
	КонецЕсли;
	
	Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);
	
	Если ПустаяСтрока(Представление) Тогда
		Представление = НСтр("ru = '<Не заполнен>';
							|en = '<Not populated>'");
		ПредставлениеРезультатаПроверки = НСтр("ru = 'Адрес не заполнен';
												|en = 'Address is not filled in'");
		ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	Иначе
		РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(ЗначениеКонтактнойИнформации);
		Если РезультатПроверки.Результат = "Корректный" Тогда
			ПредставлениеРезультатаПроверки = НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями';
													|en = 'Address is entered correctly - according to the requirements'");
			ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Иначе
			ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
			СообщенияПроверки = Новый Массив;
			СообщенияПроверки.Добавить(НСтр("ru = 'Адрес не соответствует адресному классификатору:';
											|en = 'Address does not correspond to address classifier:'"));
			Для Каждого Ошибка Из РезультатПроверки.СписокОшибок Цикл
				СообщенияПроверки.Добавить(Ошибка.Представление);
			КонецЦикла;
			ПредставлениеРезультатаПроверки = СтрСоединить(СообщенияПроверки, Символы.ПС);
		КонецЕсли;
	КонецЕсли;
	
	ПолеВвода.РасширеннаяПодсказка.Заголовок = ПредставлениеРезультатаПроверки;
	ПолеВвода.ЦветТекста = ЦветТекста;
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПолеВвода.ПутьКДанным, Представление);
	
КонецПроцедуры

// Обновляет представление и отображение поля ввода телефона.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Обновляемая форма.
//   ИмяПоляВводаПредставления - Строка - Имя поля ввода, связанного с реквизитом формы,
//       в котором хранится представление контактной информации.
//       Пример: "ПредставлениеАдресаОрганизации".
//   ЗначениеКонтактнойИнформации - Строка - Значение контактной информации в XML или JSON.
//
Процедура ОбновитьПолеВводаТелефона(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации) Экспорт
	
	ПолеВвода = Форма.Элементы.Найти(ИмяПоляВводаПредставления);
	Если ПолеВвода = Неопределено Тогда
		Возврат; // Элемент недоступен по правам или по ФО - обновлять не требуется.
	КонецЕсли;
	
	Представление = ПредставлениеТелефона(ЗначениеКонтактнойИнформации);
	Если ПустаяСтрока(Представление) Тогда
		Представление = НСтр("ru = '<Не заполнен>';
							|en = '<Not populated>'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПолеВвода.ПутьКДанным, Представление);
	
	ПолеВвода.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
КонецПроцедуры

// Обновляет представление и отображение поля ввода контактной информации.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Обновляемая форма.
//   ИмяПоляВводаПредставления - Строка - Имя поля ввода, связанного с реквизитом формы,
//       в котором хранится представление контактной информации.
//       Пример: "ПредставлениеАдресаОрганизации".
//   ЗначениеКонтактнойИнформации - Строка - Значение контактной информации в XML или JSON.
//   ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации 
//
Процедура ОбновитьПолеВводаКонтактнойИнформации(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации, ТипКонтактнойИнформации) Экспорт
	
	Если ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		ОбновитьПолеВводаАдреса(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации);
		
	ИначеЕсли ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		ОбновитьПолеВводаТелефона(Форма, ИмяПоляВводаПредставления, ЗначениеКонтактнойИнформации);
		
	Иначе
		
		ПолеВвода = Форма.Элементы.Найти(ИмяПоляВводаПредставления);
		Если ПолеВвода = Неопределено Тогда
			Возврат; // Элемент недоступен по правам или по ФО - обновлять не требуется.
		КонецЕсли;
		
		Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначениеКонтактнойИнформации);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПолеВвода.ПутьКДанным, Представление);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Соединить(Фрагмент1, Фрагмент2, Разделитель)
	Возврат ?(
		ЗначениеЗаполнено(Фрагмент1) И ЗначениеЗаполнено(Фрагмент2),
		Фрагмент1 + Разделитель + Фрагмент2,
		Строка(Фрагмент1) + Строка(Фрагмент2));
КонецФункции

#Область ВводКонтактнойИнформации

// Дополняет форму, содержащую контактную информацию предупреждающими
// надписями для полей содержащих адрес.
//
Процедура ДополнитьФормуПолямиОтображенияПроверкиАдресов(Форма)

	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		ПоложениеЗаголовкаВерх = ВРег(Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ПоложениеЗаголовка) = ВРег("ПоложениеЗаголовкаЭлементаФормы.Верх");
		РоссийскиеАдреса = ЗарплатаКадрыПовтИсп.ВидыРоссийскихАдресов();
		
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
			Если Элемент <> Неопределено Тогда
				
				Если ПоложениеЗаголовкаВерх Тогда
					Элемент.ВысотаЗаголовка = 1;
				КонецЕсли;
				
				// Для полей контактной информации, содержащих телефонные номера ограничивается ширина.
				Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Факс
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				
					Элемент.Ширина = 20;
					
				// Поля, содержащие адрес дополняются, полями отображающими результаты проверки адресов.
				ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					
					Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
						Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
					КонецЕсли;
					
					Если ПоложениеЗаголовкаВерх Тогда
						Элемент.Ширина = 55;
						Элемент.Высота = 2;
					КонецЕсли;
					
					Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица Тогда
						
						Если ПоложениеЗаголовкаВерх Тогда
							Элемент.Ширина = 44;
						Иначе
							Элемент.Ширина = 47;
						КонецЕсли;
						
						ИмяГруппыАдресаПоПрописке = "ГруппаАдресПоПрописке" + Элемент.Имя;
						ГруппаАдресаПоПрописке = Форма.Элементы.Найти(ИмяГруппыАдресаПоПрописке);
						Если ГруппаАдресаПоПрописке = Неопределено Тогда
							
							ГруппаАдресаПоПрописке = Форма.Элементы.Найти(ИмяГруппыАдресаПоПрописке);
							Если ГруппаАдресаПоПрописке = Неопределено Тогда
								
								ГруппаАдресаПоПрописке = Форма.Элементы.Добавить(ИмяГруппыАдресаПоПрописке, Тип("ГруппаФормы"));
								
								ГруппаАдресаПоПрописке.Вид = ВидГруппыФормы.ОбычнаяГруппа;
								ГруппаАдресаПоПрописке.ОтображатьЗаголовок = Ложь;
								ГруппаАдресаПоПрописке.Отображение = ОтображениеОбычнойГруппы.Нет;
								ГруппаАдресаПоПрописке.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
								
								Форма.Элементы.Переместить(ГруппаАдресаПоПрописке, Элемент.Родитель, Элемент);
								Форма.Элементы.Переместить(Элемент, ГруппаАдресаПоПрописке);
								
							КонецЕсли;
							
							ЭлементДатаРегистрации = Форма.Элементы.Найти("ДатаРегистрации" + Элемент.Имя);
							Если ЭлементДатаРегистрации = Неопределено Тогда
								
								ЭлементДатаРегистрации = Форма.Элементы.Добавить("ДатаРегистрации" + Элемент.Имя, Тип("ПолеФормы"), ГруппаАдресаПоПрописке);
								
								ЭлементДатаРегистрации.Вид = ВидПоляФормы.ПолеВвода;
								ЭлементДатаРегистрации.ПутьКДанным = "ФизическоеЛицо.ДатаРегистрации";
								ЭлементДатаРегистрации.РастягиватьПоГоризонтали = Ложь;
								ЭлементДатаРегистрации.Ширина = 8;
								
								Если ПоложениеЗаголовкаВерх Тогда
									ЭлементДатаРегистрации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
									ЭлементДатаРегистрации.ВысотаЗаголовка = 1;
								Иначе
									ЭлементДатаРегистрации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
								КонецЕсли;
								
								ЭлементДатаРегистрации.УстановитьДействие("ПриИзменении", "Подключаемый_ФизлицоДатаРегистрацииПриИзменении");
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет предупреждающие надписи к элементу, содержащему адрес.
//
Процедура ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма)

	АдресныйКлассификаторЗагружен = Неопределено;
	ПроверенныеАдреса = Новый Соответствие;
	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		РоссийскиеАдреса = ЗарплатаКадрыПовтИсп.ВидыРоссийскихАдресов();
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
				И РоссийскиеАдреса.Получить(КонтактнаяИнформация.Вид) = Истина Тогда
				
				Если АдресныйКлассификаторЗагружен = Неопределено Тогда
					АдресныйКлассификаторЗагружен = АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
				КонецЕсли;
				
				Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
				Если Элемент <> Неопределено Тогда
					
					УстановитьОтображениеПоляАдреса(
						Форма[Элемент.Имя],
						КонтактнаяИнформация.Значение,
						Элемент,
						Форма,
						КонтактнаяИнформация.Вид,
						АдресныйКлассификаторЗагружен,
						ПроверенныеАдреса,
						КонтактнаяИнформация.Комментарий);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Осуществляет проверку заполненного элемента содержащего адрес и выводит
// предупреждающие надписи.
//
Процедура УстановитьОтображениеПоляАдреса(Адрес, СписокПолей, Элемент, Форма, ВидАдреса, АдресныйКлассификаторЗагружен = Неопределено, ПроверенныеАдреса = Неопределено, Комментарий = "") Экспорт
	
	СообщенияПроверки = "";
	ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	Если ТипЗнч(ПроверенныеАдреса) = Тип("Соответствие") Тогда
		НастройкиОтображенияАдреса = ПроверенныеАдреса.Получить(Адрес);
	Иначе
		НастройкиОтображенияАдреса = Неопределено;
	КонецЕсли;
	
	Если НастройкиОтображенияАдреса = Неопределено Тогда
		
		Если Не ПустаяСтрока(Адрес) И Адрес <> НСтр("ru = 'Заполнить';
													|en = 'Fill'") Тогда
		
			Если АдресныйКлассификаторЗагружен = Неопределено Тогда
				АдресныйКлассификаторЗагружен = АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
			КонецЕсли;
			
			Если Не АдресныйКлассификаторЗагружен Тогда

				СообщенияПроверки = НСтр("ru = 'Адресный классификатор не загружен';
										|en = 'Address classifier is not imported'");
				РезультатПроверки = Неопределено;

			Иначе
				
				РезультатПроверки = ЗарплатаКадрыВызовСервера.ПроверитьАдрес(СписокПолей, ВидАдреса);
				Если РезультатПроверки.Результат <> "Корректный" Тогда
					
					Для каждого ЭлементОписанияОшибки Из РезультатПроверки.СписокОшибок Цикл
						СообщенияПроверки = СообщенияПроверки + ЭлементОписанияОшибки.Представление + Символы.ПС;
					КонецЦикла;
					СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
					
					СообщенияПроверки = НСтр("ru = 'Адрес не соответствует адресному классификатору';
											|en = 'Address does not correspond to address classifier'") + Символы.ПС + СообщенияПроверки;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'Адрес введен правильно - в соответствии с требованиями';
																		|en = 'Address is entered correctly - according to the requirements'"), СообщенияПроверки);
			ЗаголовокОшибкиДополнительный = СтрПолучитьСтроку(СообщенияПроверки, 1);
			СообщенияПроверки = СокрЛП(Сред(СообщенияПроверки, СтрДлина(ЗаголовокОшибкиДополнительный) + 1));
			
			Если РезультатПроверки = Неопределено ИЛИ РезультатПроверки.Результат <> "Корректный" Тогда
				ЦветТекстаПоля = ЦветаСтиля.ПоясняющийОшибкуТекст;
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		СообщенияПроверки = НастройкиОтображенияАдреса.СообщенияПроверки;
		ЦветТекстаПоля = НастройкиОтображенияАдреса.ЦветТекстаПоля;
	КонецЕсли;
	
	Если ТипЗнч(ПроверенныеАдреса) = Тип("Соответствие") Тогда
		ПроверенныеАдреса.Вставить(Адрес, Новый Структура("СообщенияПроверки,ЦветТекстаПоля", СообщенияПроверки, ЦветТекстаПоля));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Элемент.Имя,
		"ЦветТекста",
		ЦветТекстаПоля);
	
	Если Не ПустаяСтрока(Комментарий) Тогда
		СообщенияПроверки = СообщенияПроверки + Символы.ПС + Комментарий;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(
		Форма,
		Элемент.Имя,
		СообщенияПроверки);

КонецПроцедуры

Процедура ЗаполнитьЗависимыеАдреса(Форма, Результат, ЗависимостиВидовАдресов)
	
	Если ЗависимостиВидовАдресов <> Неопределено
		И Результат <> Неопределено И Результат.Свойство("ИмяРеквизита") Тогда
		
		ИмяЭлемента = Результат.ИмяРеквизита;
		
		КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
		Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
			
			СтруктураПоиска = Новый Структура("ИмяРеквизита", ИмяЭлемента);
			НайденныеСтрокиТекущегоАдреса = КоллекцияПолейКонтактнойИнформации.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтрокиТекущегоАдреса.Количество() > 0 Тогда
				
				СтрокаТекущегоАдреса = НайденныеСтрокиТекущегоАдреса[0];
				Если НЕ ПустаяСтрока(СтрокаТекущегоАдреса.Значение) Тогда
					
					КоллекцияЗависимыхВидов = ЗависимостиВидовАдресов.Получить(СтрокаТекущегоАдреса.Вид);
					Если КоллекцияЗависимыхВидов <> Неопределено Тогда
						
						Для каждого ЭлементКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
							
							Для каждого ЗависимыйВид Из КоллекцияЗависимыхВидов Цикл
								Если ЭлементКонтактнойИнформации.Вид = ЗависимыйВид
									И ПустаяСтрока(ЭлементКонтактнойИнформации.Значение) Тогда
									
									ЭлементКонтактнойИнформации.Значение = СтрокаТекущегоАдреса.Значение;
									ЭлементКонтактнойИнформации.Представление = СтрокаТекущегоАдреса.Представление;
									Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
									
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
