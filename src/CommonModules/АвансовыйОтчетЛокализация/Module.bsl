
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
	//++ Локализация
	ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.Проведение, Отказ);
	
	Если Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Истина);
	КонецЕсли;
	//-- Локализация
	Возврат;
		
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	ИспользоватьСтатусыАвансовыхОтчетов = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыАвансовыхОтчетов");
	
	ОтразитьДокументВУчете = Не ИспользоватьСтатусыАвансовыхОтчетов
		Или ИспользоватьСтатусыАвансовыхОтчетов И Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Утвержден;
	
	ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Ложь;
	
	Для ТекИндекс = 0 По Объект.ПрочиеРасходы.Количество()-1 Цикл
		
		ОтразитьСтрокуВУчете = ОтразитьДокументВУчете И Не Объект.ПрочиеРасходы[ТекИндекс].Отменено;
		
		АдресОшибки = СтрШаблон(НСтр("ru = 'в строке %1 списка ""Расходы""';
									|en = 'in the %1 line of the ""Expenses"" list'"), Объект.ПрочиеРасходы[ТекИндекс].НомерСтроки);
		
		Если (Не ЗначениеЗаполнено(Объект.ПрочиеРасходы[ТекИндекс]["НомерСФ"]) Или Не ЗначениеЗаполнено(Объект.ПрочиеРасходы[ТекИндекс]["ДатаСФ"]))
			И Объект.ПрочиеРасходы[ТекИндекс]["ПредъявленСФ"]
			И Объект.ПрочиеРасходы[ТекИндекс]["СтавкаНДС"] <> Справочники.СтавкиНДС.БезНДС
			И ОтразитьСтрокуВУчете Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнены параметры счет-фактуры';
								|en = 'Tax invoice parameters are not filled'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + " " + АдресОшибки,
				Объект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеРасходы", Объект.ПрочиеРасходы[ТекИндекс].НомерСтроки, "ПредставлениеСФ"),,
				Отказ);
		КонецЕсли;
		
		Если ОтразитьДокументВУчете И Объект.ПрочиеРасходы[ТекИндекс].СтавкаНДС <> Справочники.СтавкиНДС.БезНДС
			И Не Объект.ПрочиеРасходы[ТекИндекс].ПредъявленСФ И Не Объект.ПрочиеРасходы[ТекИндекс].БланкСтрогойОтчетности Тогда
			ПроверитьСтатьюСписанияНДСВУчетнойПолитике = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверитьСтатьюСписанияНДСВУчетнойПолитике Тогда
		Политика = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиУчетаНДС", Объект.Организация, Объект.Дата);
		ОсновноеНалогообложениеНДСПродажи = УчетНДСУП.ПараметрыУчетаПоОрганизации(Объект.Организация, Объект.Дата).ОсновноеНалогообложениеНДСПродажи;
		Если Политика <> Неопределено И Не ЗначениеЗаполнено(Политика.СтатьяРасходовСписаниеНДС) 
			И ОсновноеНалогообложениеНДСПродажи = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			ТекстОшибки = НСтр("ru = 'Для списания НДС в расходы в действующей учетной политике должна быть заполнена статья списания.';
								|en = 'Fill the write-off item to write-off VAT to the current accounting policy expenses.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект, "Организация",, Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	//++ Локализация	
	ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.ОтменаПроведения, Отказ);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//++ Локализация
	Для каждого СтрокаТаблицы Из Объект.ПрочиеРасходы Цикл
		Если СтрокаТаблицы.БланкСтрогойОтчетности Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерДокументаОплаты) Тогда
				СтрокаТаблицы.НомерДокументаОплаты = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаДокументаОплаты) Тогда
				СтрокаТаблицы.ДатаДокументаОплаты = Объект.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СгенерироватьСчетаФактуры(Объект, Отказ);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ДокументыКДобавлению = Новый Массив;
	ДокументыКУдалению = Новый Массив;
	
	Если Объект.ДополнительныеСвойства.Свойство("ДокументыЗакупки") Тогда
		
		ДокументыКДобавлению = Новый Массив;
		ДокументыКУдалению = Новый Массив;
		
		ДокументыЗакупки = Объект.ДополнительныеСвойства.ДокументыЗакупки;
		ДокументыВОтчете = СписокДокументовЗакупки(Объект.Ссылка);
		
		Для каждого ДокументВОтчете Из ДокументыВОтчете Цикл
			Если ДокументыЗакупки.Найти(ДокументВОтчете) = Неопределено Тогда
				ДокументыКУдалению.Добавить(ДокументВОтчете);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДокументЗакупки Из ДокументыЗакупки Цикл
			Если ТипЗнч(ДокументЗакупки) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов")
				И ДокументыВОтчете.Найти(ДокументЗакупки) = Неопределено Тогда
				ДокументыКДобавлению.Добавить(ДокументЗакупки);
			КонецЕсли;
		КонецЦикла;
		
		Документы.АвансовыйОтчет.УдалитьДобавитьДокументыЗакупки(
			Неопределено, ДокументыКУдалению, Объект.ДополнительныеСвойства, Отказ);
		Документы.АвансовыйОтчет.УдалитьДобавитьДокументыЗакупки(
			Объект.Ссылка, ДокументыКДобавлению, Объект.ДополнительныеСвойства, Отказ);
	КонецЕсли;
	//-- НЕ УТ
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(Объект);
	Если Не СвойстваДокумента.ЭтоНовый И СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбновитьСчетаФактуры(Объект, РежимЗаписиДокумента.Запись, Отказ);
	КонецЕсли;
	
	Если СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
		Или Объект.Статус = Перечисления.СтатусыАвансовогоОтчета.Подготовлен Тогда
		ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Ложь);
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	//++ Локализация
	Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
		СтрокаТЧ.ПредъявленСФ = Ложь;
		СтрокаТЧ.БланкСтрогойОтчетности = Ложь;
		СтрокаТЧ.НомерСФ = "";
		СтрокаТЧ.ДатаСФ = Неопределено;
		СтрокаТЧ.СчетФактура = Неопределено;
	КонецЦикла;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	//++ Локализация
	Документы.СчетФактураПолученныйАванс.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаписьКнигиПокупок.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- Локализация
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	Если ПравоДоступа("Изменение", Метаданные.Документы.АвансовыйОтчет) Тогда
		// Авансовый отчет
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "АвансовыйОтчет1";
		КомандаПечати.Представление = НСтр("ru = 'Авансовый отчет';
											|en = 'Expense report'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		//++ НЕ УТ
		КомандаПечати.Обработчик = "РеглУчетКлиент.ПечатьСРасширеннойПроверкойОтраженияВРеглУчете";
		//-- НЕ УТ
		
		// Извещение
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьИзвещений";
		КомандаПечати.Идентификатор = "Извещение";
		КомандаПечати.Представление = НСтр("ru = 'Извещение';
											|en = 'Notification'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	//++ Локализация
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет1")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет2")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет3")
		Или УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет4") Тогда
		
		ДатаНачалаПечатиЕдиногоАвансовогоОтчета = Константы.ДатаНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
		ЕдиныйАвансовыйОтчетБезусловно = Не Константы.ВидимостьДатыНачалаПечатиЕдиногоАвансовогоОтчета.Получить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата >= &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ &ЕдиныйАвансовыйОтчетБезусловно)
		|";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчета", ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		Запрос.УстановитьПараметр("ЕдиныйАвансовыйОтчетБезусловно", ЕдиныйАвансовыйОтчетБезусловно);
		
		НовыеАвансовыеОтчеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если НовыеАвансовыеОтчеты.Количество() Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"АвансовыйОтчет1",
				НСтр("ru = 'Авансовый отчет';
					|en = 'Expense report'"),
				СформироватьПечатнуюФормуАвансовогоОтчета(НовыеАвансовыеОтчеты, ОбъектыПечати, ПараметрыПечати));
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата < &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ НЕ &ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана
		|			И НЕ &ЕдиныйАвансовыйОтчетБезусловно)
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата < &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ НЕ &ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана
		|			И НЕ &ЕдиныйАвансовыйОтчетБезусловно)
		|;
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|;
		//++ НЕ УТ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&МассивОбъектов)
		|	И (ДанныеДокумента.Дата < &ДатаНачалаПечатиЕдиногоАвансовогоОтчета
		|		ИЛИ НЕ &ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана
		|			И НЕ &ЕдиныйАвансовыйОтчетБезусловно)
		|;
		//-- НЕ УТ
		|";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчета", ДатаНачалаПечатиЕдиногоАвансовогоОтчета);
		Запрос.УстановитьПараметр("ДатаНачалаПечатиЕдиногоАвансовогоОтчетаУказана", ЗначениеЗаполнено(ДатаНачалаПечатиЕдиногоАвансовогоОтчета));
		Запрос.УстановитьПараметр("ЕдиныйАвансовыйОтчетБезусловно", ЕдиныйАвансовыйОтчетБезусловно);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Для Инд = 0 По РезультатЗапроса.ВГраница() Цикл
			СтарыеАвансовыеОтчеты = РезультатЗапроса[Инд].Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если СтарыеАвансовыеОтчеты.Количество() Тогда
				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					"АвансовыйОтчет" + Строка(Инд + 1),
					НСтр("ru = 'Авансовый отчет';
						|en = 'Expense report'"),
					СформироватьПечатнуюФормуАвансовогоОтчетаСтараяВерсия(СтарыеАвансовыеОтчеты, ОбъектыПечати, ПараметрыПечати));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

// Функция получает данные для формирования печатной формы "Извещение"
//
// Параметры:
//	ПараметрыПечати - Структура
//	МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные.
//
// Возвращаемое значение:
// 	Структура:
// 		* РезультатПоШапке - РезультатЗапроса
//
Функция ПолучитьДанныеДляПечатнойФормыИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, Запрос.МенеджерВременныхТаблиц);
	Запрос.Текст = ТекстЗапросаПечати(Запрос, Ложь) + "
	|
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Документы.Организация КАК Организация,
	|	Документы.ПодотчетноеЛицо КАК Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо) КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	&НазначениеПлатежа КАК НазначениеПлатежа,
	|	СуммыАвансовыхОтчетов.КонечныйОстаток КАК СуммаДокумента
	|
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Документы
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СуммыАвансовыхОтчетов КАК СуммыАвансовыхОтчетов
	|		ПО СуммыАвансовыхОтчетов.Ссылка = Документы.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлассификаторБанков КАК КлассификаторБанков
	|	ПО
	|		Документы.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|	ПО
	|		Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|	
	|ГДЕ
	|	Документы.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("НазначениеПлатежа", НСтр("ru = 'Возврат суммы, выданной под отчет.';
														|en = 'Return of the amount issued to an advance holder.'"));
	
	РегистраторыДенежныеСредстваВыдано = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	//++ НЕ УТ
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.ВыбытиеДенежныхДокументов"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("РегистраторыДенежныеСредстваВыдано", РегистраторыДенежныеСредстваВыдано);
	
	//++ НЕ УТ
	МассивНеОтраженныхДокументов = Неопределено;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПараметрыПечати.Свойство("ДокументыБезПроводок", МассивНеОтраженныхДокументов);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивНеОтраженныхДокументов", МассивНеОтраженныхДокументов);
	//-- НЕ УТ
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.ВГраница()]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

//-- Локализация

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация

	ТекстыОтражения = Новый Массив;
	
	// Общие фрагменты проводок по включению в стоимость НДС
	ТекстыОтражения.Добавить(РеглУчетВыборкиСерверПовтИсп.ТекстВключениеНДСпоПриобретеннымЦенностям());

#Область ТекстОплатаПоставщикам // (Дт 60.01 :: Кт 71)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Оплата поставщикам через подотчетное лицо (Дт 60.01 :: Кт 71)
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ДолгУпр, 0) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками) КАК ВидСчетаДт,
	|	РасчетыПоДокументам.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	РасчетыПоДокументам.Валюта КАК ВалютаДт,
	|	РасчетыПоДокументам.Подразделение КАК ПодразделениеДт,
	|	РасчетыПоДокументам.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	РасчетыПоДокументам.Контрагент КАК СубконтоДт1,
	|	РасчетыПоДокументам.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Долг, 0) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЕСТЬNULL(ДенежныеСредстваКонтрагент.ВалютаПлатежа, РасчетыПоДокументам.Валюта) КАК ВалютаКт,
	|	
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваКонтрагент.ВалютаПлатежа, РасчетыПоДокументам.Валюта) = &ВалютаРеглУчета ТОГДА
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаПостоплатыВВалютеПлатежа, ЕСТЬNULL(РасчетыПоДокументам.Долг, 0)) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Оплата поставщикам через подотчетное лицо"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Операция.Ссылка = РасчетыПоДокументам.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДенежныеСредстваКонтрагент КАК ДенежныеСредстваКонтрагент
	|	ПО
	|		ДенежныеСредстваКонтрагент.Ссылка = РасчетыПоДокументам.Ссылка
	|		И ДенежныеСредстваКонтрагент.Контрагент = РасчетыПоДокументам.Контрагент
	|		И ДенежныеСредстваКонтрагент.Договор = РасчетыПоДокументам.Договор
	|		И ДенежныеСредстваКонтрагент.НаправлениеДеятельности = РасчетыПоДокументам.НаправлениеДеятельности
	|		И ДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И ДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов = РасчетыПоДокументам.Валюта
	|		И ДенежныеСредстваКонтрагент.ВалютаПлатежа <> РасчетыПоДокументам.Валюта
	|
	|ГДЕ
	|	ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, 0) <> 0
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПредоплатаПоставщикам // (Дт 60.02 :: Кт 71)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Оплата аванса поставщикам через подотчетное лицо (Дт 60.02 :: Кт 71)
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, Расчеты.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр, Расчеты.СуммаУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные) КАК ВидСчетаДт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.Подразделение КАК ПодразделениеДт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	Расчеты.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата, Расчеты.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЕСТЬNULL(ДенежныеСредстваКонтрагент.ВалютаПлатежа, Расчеты.Валюта) КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваКонтрагент.ВалютаПлатежа, Расчеты.Валюта) = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(ДенежныеСредстваКонтрагент.СуммаПредоплатыВВалютеПлатежа, ЕСТЬNULL(РасчетыПоДокументам.Предоплата, Расчеты.Сумма)) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Оплата аванса поставщикам через подотчетное лицо"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСПоставщиками КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО
	|		Расчеты.Ссылка = РасчетыПоДокументам.Ссылка
	|		И Расчеты.Контрагент = РасчетыПоДокументам.Контрагент
	|		И Расчеты.Договор = РасчетыПоДокументам.Договор
	|		И Расчеты.ГруппаФинансовогоУчета = РасчетыПоДокументам.ГруппаФинансовогоУчета
	|		И Расчеты.Подразделение = РасчетыПоДокументам.Подразделение
	|		И Расчеты.НаправлениеДеятельности = РасчетыПоДокументам.НаправлениеДеятельности
	|		И Расчеты.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И Расчеты.Валюта = РасчетыПоДокументам.Валюта
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДенежныеСредстваКонтрагент КАК ДенежныеСредстваКонтрагент
	|	ПО
	|		ДенежныеСредстваКонтрагент.Ссылка = Расчеты.Ссылка
	|		И ДенежныеСредстваКонтрагент.Контрагент = Расчеты.Контрагент
	|		И ДенежныеСредстваКонтрагент.Договор = Расчеты.Договор
	|		И ДенежныеСредстваКонтрагент.ГруппаФинансовогоУчета = Расчеты.ГруппаФинансовогоУчета
	|		И ДенежныеСредстваКонтрагент.Подразделение = Расчеты.Подразделение
	|		И ДенежныеСредстваКонтрагент.НаправлениеДеятельности = Расчеты.НаправлениеДеятельности
	|		И ДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств = Расчеты.СтатьяДвиженияДенежныхСредств
	|		И ДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов = Расчеты.Валюта
	|		И ДенежныеСредстваКонтрагент.ВалютаПлатежа <> Расчеты.Валюта
	|
	|ГДЕ
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, Расчеты.СуммаРегл) <> 0
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстПрочиеРасходы // (Дт 44 :: Кт 71)
	ТекстЗапроса = "
	|ВЫБРАТЬ // Поступление услуг (Дт 44 :: Кт 71)
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ВЫБОР КОГДА  ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		ЕСТЬNULL(Суммы.СуммаБезНДСУпр, (Строки.СуммаСНДС - Строки.СуммаНДС) / КурсВалютыУпрУчета.Курс)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.СуммаСНДС / КурсВалютыУпрУчета.Курс)
	|	КОНЕЦ КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Строки.СтатьяРасходов КАК СубконтоДт1,
	|	Строки.АналитикаРасходов КАК СубконтоДт2,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL ТОГДА
	|			ВЫБОР КОГДА ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка) 
	|					ТОГДА ОбъектыСтроительства.СпособСтроительства
	|				ИНАЧЕ 
	|					ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный) 
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ВЫБОР 
	|		КОГДА ВЫРАЗИТЬ(Строки.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ПринятиеКНалоговомуУчету 
	|			ТОГДА ВЫБОР 
	|					КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 						ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|						ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|					ТОГДА
	|						ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|					ИНАЧЕ
	|						ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|					КОНЕЦ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаНУДт,
	|	ВЫБОР 
	|		КОГДА НЕ ВЫРАЗИТЬ(Строки.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ПринятиеКНалоговомуУчету 
	|			ТОГДА ВЫБОР 
	|					КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 						ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|						ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|					ТОГДА
	|						ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|					ИНАЧЕ
	|						ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|					КОНЕЦ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		Строки.Сумма - Строки.СуммаНДС
	|	ИНАЧЕ
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР КОГДА Строки.Содержание = """" ТОГДА
	|		""Поступление расходов""
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(Строки.Содержание КАК Строка(150))
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНДСРаспределяется
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиНДСРаспределяется.Ссылка
	|		И СтатьиНДСРаспределяется.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|	ПО 
	|		ОбъектыСтроительства.Ссылка = Строки.АналитикаРасходов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		Операция.Ссылка = УчетнаяПолитикаОрганизаций.Ссылка
	|		И Операция.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(Операция.ДатаУтверждения, ДЕНЬ) = УчетнаяПолитикаОрганизаций.ДатаОтражения
	|
	|ГДЕ
	|	СтатьиНаПрочиеАктивы.Ссылка ЕСТЬ NULL
	|	И ТИПЗНАЧЕНИЯ(Строки.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	И НЕ Строки.Отменено
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстНаПрочиеАктивы // (Дт 44 :: Кт 71)
	// Поддержка статей расходов с устаревшим направлением распределения "НаПрочиеАктивы".
	ТекстЗапроса = "
	|ВЫБРАТЬ // Поступление услуг (Дт 44 :: Кт 71)
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|	КОНЕЦ КАК Сумма,	
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		ЕСТЬNULL(Суммы.СуммаБезНДСУпр, (Строки.СуммаСНДС - Строки.СуммаНДС) / КурсВалютыУпрУчета.Курс)
	|	ИНАЧЕ
	|		ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.СуммаСНДС / КурсВалютыУпрУчета.Курс)
	|	КОНЕЦ КАК СуммаУУ,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеОперации) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ВЫБОР 
	|		КОГДА ВЫРАЗИТЬ(Строки.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ПринятиеКНалоговомуУчету 
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 					ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|					ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|				ТОГДА
	|					ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|				ИНАЧЕ
	|					ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|				КОНЕЦ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаНУДт,
	|	ВЫБОР 
	|		КОГДА НЕ ВЫРАЗИТЬ(Строки.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов).ПринятиеКНалоговомуУчету 
	|			ТОГДА ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 					ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|					ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|				ТОГДА
	|					ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.СуммаСНДС - Строки.СуммаНДС)
	|				ИНАЧЕ
	|					ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС)
	|				КОНЕЦ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|		ИЛИ НЕ СтатьиНДСРаспределяется.Ссылка ЕСТЬ NULL
	|	ТОГДА
	|		Строки.Сумма - Строки.СуммаНДС
	|	ИНАЧЕ
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР КОГДА Строки.Содержание = """" ТОГДА
	|		""Поступление расходов""
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(Строки.Содержание КАК Строка(150))
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|	ПО
	|		Строки.Ссылка = ДокументыКОтражению.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиПрочихОпераций
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиПрочихОпераций.Ссылка
	|		И СтатьиПрочихОпераций.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНДСРаспределяется
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиНДСРаспределяется.Ссылка
	|		И СтатьиНДСРаспределяется.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		Операция.Ссылка = УчетнаяПолитикаОрганизаций.Ссылка
	|		И Операция.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(Операция.ДатаУтверждения, ДЕНЬ) = УчетнаяПолитикаОрганизаций.ДатаОтражения
	|
	|ГДЕ
	|	Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	И НЕ Строки.Отменено
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // Поступление на прочие активы (Дт <ХХ.ХХ> :: Кт <60.1, 76> )
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.НомерСтроки КАК ИдентификаторСтроки,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|	ТОГДА
	|		Суммы.СуммаБезНДСРегл
	|	КОГДА Операция.ЗакупкаПодДеятельность В (&ТипыНеОблагаемыеНДС)
	|	ТОГДА
	|		Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл
	|	ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|	ТОГДА
	|		Суммы.СуммаБезНДСУпр
	|	КОГДА Операция.ЗакупкаПодДеятельность В (&ТипыНеОблагаемыеНДС)
	|	ТОГДА
	|		Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр
	|	ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	Строки.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Строки.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Строки.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Строки.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Строки.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|	ТОГДА
	|		Строки.Сумма - Строки.СуммаНДС
	|	КОГДА Операция.ЗакупкаПодДеятельность В (&ТипыНеОблагаемыеНДС)
	|	ТОГДА
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Суммы.СуммаБезНДСРегл = Суммы.СуммаБезНДС ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.НДСПредъявленныйПриВключенииВСтоимость, ЛОЖЬ) 
	| 		ИЛИ Операция.ЗакупкаПодДеятельность В (&ТипыОблагаемыеНДС)
	|	ТОГДА
	|		Строки.Сумма - Строки.СуммаНДС
	|	КОГДА Операция.ЗакупкаПодДеятельность В (&ТипыНеОблагаемыеНДС)
	|	ТОГДА
	|		Строки.Сумма
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Поступление на прочие активы"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|	ПО
	|		Операция.Ссылка = УчетнаяПолитикаОрганизаций.Ссылка
	|		И Операция.Организация = УчетнаяПолитикаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(Операция.ДатаУтверждения, ДЕНЬ) = УчетнаяПолитикаОрганизаций.ДатаОтражения
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Строки.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	И НЕ Строки.Отменено
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
#КонецОбласти

#Область ТекстПоступлениеУслугНДС // (Дт <19.ХХ> :: Кт <71>)
	ТекстЗапроса = "
	|ВЫБРАТЬ // НДС при поступлении по рег. НДСПредъявленный (Дт <19.ХХ> :: Кт <71>) @НДСПредъявленный
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	СУММА(НДСПредъявленный.НДС) КАК Сумма,
	|	СУММА(НДСПредъявленный.НДСУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаДт,
	|	НДСПредъявленный.ВидДеятельностиНДС                                    КАК АналитикаУчетаДт,
	|	НДСПредъявленный.ВидЦенности                                           КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеДт,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|
	|	НДСПредъявленный.Поставщик КАК СубконтоДт1,
	|	НДСПредъявленный.СчетФактура КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	СУММА(Строки.СуммаНДС) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""НДС при поступлении"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Строки.Ссылка
	|		И НДСПредъявленный.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И НДСПредъявленный.Событие <> ЗНАЧЕНИЕ(Перечисление.СобытияНДСПредъявленный.СписаниеНДСНаРасходы)
	|		И НДСПредъявленный.НастройкаХозяйственнойОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВключениеНДСВСтоимость)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|	ПО
	|		Строки.СтатьяРасходов = Статьи.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВводСобственныхСредств КАК ВводСобственныхСредств
	|	ПО ДокументыКОтражению.Ссылка = ВводСобственныхСредств.Ссылка
	|		И НДСПредъявленный.СчетФактура = ВводСобственныхСредств.СчетФактура
	|		И НДСПредъявленный.НаправлениеДеятельности = ВводСобственныхСредств.ИсходноеНаправлениеДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	Операция.Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ,
	|	Операция.Организация,
	|	Операция.Валюта,
	|	Операция.ПодотчетноеЛицо,
	|	Статьи.ВариантРаспределенияРасходовРегл,
	|	Строки.АналитикаРасходов,
	|	Строки.Валюта,
	|	НДСПредъявленный.ВидДеятельностиНДС,
	|	ЕСТЬNULL(ВводСобственныхСредств.НаправлениеДеятельности, НДСПредъявленный.НаправлениеДеятельности),
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.Поставщик, 
	|	НДСПредъявленный.СчетФактура
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстКонвертацияВалюты // (Дт 71 :: Кт 71)
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	ВЫБОР КОГДА Строки.КорВалюта = &ВалютаУпрУчета ТОГДА
	|		Строки.СуммаВКорВалюте
	|	КОГДА Строки.Валюта = &ВалютаУпрУчета ТОГДА
	|		Строки.Сумма
	|	ИНАЧЕ
	|		Строки.СуммаРегл / КурсВалютыУпрУчета.Курс
	|	КОНЕЦ КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Строки.КорВалюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Строки.КорВалюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетДт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.СуммаВКорВалюте КАК ВалютнаяСуммаДт,
	
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.СуммаВВалюте КАК ВалютнаяСуммаКт,
	|
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Конвертация валюты подотчетным лицом"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныхСредств КАК Строки
	|	ПО
	|		Строки.Регистратор = Операция.Ссылка
	|		И Строки.ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.КонвертацияВалютыПодотчетнымЛицом)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|ГДЕ
	|	Операция.Мультивалютный
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстКонвертацияВалютыПрочиеДоходы // (Дт 71:: Кт 91.1)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Положительная разница (доходы) от покупки иностранной валюты (Дт 71:: Кт 91.1)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.Сумма КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Строки.Валюта КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетДт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы) КАК ВидСчетаКт,
	|	Строки.СтатьяДоходовРасходов КАК АналитикаУчетаКт,
	|	Строки.Подразделение КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	Строки.СтатьяДоходовРасходов КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Положительная разница (доходы) от покупки иностранной валюты"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК Строки
	|	ПО
	|		Строки.Регистратор = Операция.Ссылка
	|ГДЕ
	|	Операция.Мультивалютный
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстКонвертацияВалютыПрочиеРасходы // (Дт 91.2 :: Кт 71)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Отрицательная разница (расходы) от покупки иностранной валюты (Дт 91.2 :: Кт 52)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(Операция.Дата, ДЕНЬ) = Операция.ДатаУтверждения ТОГДА
	|			Операция.Дата
	|		ИНАЧЕ
	|			Операция.ДатаУтверждения
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Строки.СуммаРегл КАК Сумма,
	|	Строки.Сумма КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяДоходовРасходов КАК ГруппаФинансовогоУчетаДт,
	|	Строки.Подразделение КАК МестоУчетаДт,
	|
	|	Операция.Валюта КАК ВалютаДт,
	|	Строки.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|
	|	Строки.СтатьяДоходовРасходов КАК СубконтоДт1,
	|	Строки.АналитикаРасходов КАК СубконтоДт2,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL ТОГДА
	|			ВЫБОР КОГДА ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка) 
	|					ТОГДА ОбъектыСтроительства.СпособСтроительства
	|				ИНАЧЕ 
	|					ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный) 
	|			КОНЕЦ
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Строки.Валюта КАК ВалютаКт,
	|	Строки.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА Строки.Валюта = &ВалютаРеглУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Отрицательная разница (расходы) от покупки иностранной валюты"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК Строки
	|	ПО
	|		Строки.Регистратор = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО
	|		Строки.СтатьяДоходовРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|	ПО 
	|		ОбъектыСтроительства.Ссылка = Строки.АналитикаРасходов
	|ГДЕ
	|	Операция.Мультивалютный
	|	И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Утвержден)
	|	И Строки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КурсовыеРазницыДСУбыток)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	//-- Локализация
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстыЗапроса = Новый Массив;
	
	#Область РасчетыСПоставщикамиПоДокументам
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	СУММА(Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг) КАК Долг,
	|	СУММА(Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл) КАК ДолгРегл
	|ПОМЕСТИТЬ РасчетыСПоставщикамиПоДокументам
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|		И НЕ &НоваяАрхитектураВзаиморасчетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ЗаказПоставщику = ОбъектыРасчетов.Ссылка)
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Расчеты.Ссылка КАК Ссылка,
	|	Расчеты.Контрагент КАК Контрагент,
	|	Расчеты.Договор КАК Договор,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение КАК Подразделение,
	|	Расчеты.Валюта КАК Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	СУММА(Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(-Расчеты.Долг) КАК Долг,
	|	СУММА(-Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(-Расчеты.ДолгРегл) КАК ДолгРегл
	|ИЗ
	|	РасчетыСПоставщикамиНоваяАрхитектура КАК Расчеты
	|	
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Ссылка,
	|	Расчеты.Контрагент,
	|	Расчеты.Договор,
	|	Расчеты.НаправлениеДеятельности,
	|	Расчеты.ГруппаФинансовогоУчета,
	|	Расчеты.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Контрагент,
	|	Договор,
	|	НаправлениеДеятельности,
	|	Валюта,
	|	СтатьяДвиженияДенежныхСредств";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ДвиженияДенежныеСредстваКонтрагент
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор КАК Ссылка,
	|	ДвиженияДенежныеСредстваКонтрагент.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ДвиженияДенежныеСредстваКонтрагент.НаправлениеДеятельностиКонтрагента КАК НаправлениеДеятельности,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ДвиженияДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагент.СуммаПостоплатыВВалютеПлатежа) КАК СуммаПостоплатыВВалютеПлатежа,
	|	СУММА(ДвиженияДенежныеСредстваКонтрагент.СуммаПредоплатыВВалютеПлатежа) КАК СуммаПредоплатыВВалютеПлатежа
	|ПОМЕСТИТЬ ДенежныеСредстваКонтрагент
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДвиженияДенежныеСредстваКонтрагент
	|	ПО
	|		ДокументыКОтражению.Ссылка = ДвиженияДенежныеСредстваКонтрагент.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (ДвиженияДенежныеСредстваКонтрагент.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДенежныеСредстваКонтрагент.Регистратор,
	|	ДвиженияДенежныеСредстваКонтрагент.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ДвиженияДенежныеСредстваКонтрагент.НаправлениеДеятельностиКонтрагента,
	|	ОбъектыРасчетов.Подразделение,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаВзаиморасчетов,
	|	ДвиженияДенежныеСредстваКонтрагент.ВалютаПлатежа,
	|	ДвиженияДенежныеСредстваКонтрагент.СтатьяДвиженияДенежныхСредств
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат ТекстЗапроса;
	
	//-- Локализация
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

//++ Локализация

// Определяет входящие в авансовый отчет документы закупки
//
// Параметры:
//    Ссылка - ДокументСсылка.АвансовыйОтчет - ссылка на авансовый отчет
//
// Возвращаемое значение:
//    Массив - Ссылки на документы закупки
//
Функция СписокДокументовЗакупки(Ссылка) Экспорт
	
	Результат = Новый Массив;
	//++ НЕ УТ
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет = &Ссылка
	|	И ДанныеДокумента.Ссылка.Проведен
	|";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	//-- НЕ УТ
	Возврат Результат;
	
КонецФункции
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Процедура СгенерироватьСчетаФактуры(Объект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ПрочиеРасходы", Объект.ПрочиеРасходы.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПрочиеРасходы.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПрочиеРасходы.ПредъявленСФ КАК ПредъявленСФ,
	|	ПрочиеРасходы.Контрагент КАК Контрагент,
	|	ПрочиеРасходы.БланкСтрогойОтчетности КАК БланкСтрогойОтчетности,
	|	ПрочиеРасходы.ДатаСФ КАК ДатаСФ,
	|	ПрочиеРасходы.НомерСФ КАК НомерСФ,
	|	ПрочиеРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ПрочиеРасходы.ЭлектронныйБилет КАК ЭлектронныйБилет,
	|	ПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПрочиеРасходы.Валюта КАК Валюта,
	|	ПрочиеРасходы.СчетФактура КАК СчетФактура,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеВходящегоДокумента
	|ПОМЕСТИТЬ ПрочиеРасходы
	|ИЗ
	|	&ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	(ПрочиеРасходы.ПредъявленСФ ИЛИ ПрочиеРасходы.БланкСтрогойОтчетности)
	|	И НЕ ПрочиеРасходы.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР КОГДА ПрочиеРасходы.ЭлектронныйБилет <> ЗНАЧЕНИЕ(Документ.Бронирование.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.ЭлектронныйБилет
	|	ИНАЧЕ
	|		ПрочиеРасходы.ПервичныйДокумент
	|	КОНЕЦ КАК ДокументОснование,
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	ПрочиеРасходы.Контрагент КАК Контрагент,
	|	ПрочиеРасходы.ПредъявленСФ КАК ПредъявленСФ,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.БланкСтрогойОтчетности
	|			ТОГДА ПрочиеРасходы.ДатаВходящегоДокумента
	|		ИНАЧЕ ПрочиеРасходы.ДатаСФ
	|	КОНЕЦ КАК ДатаСФ,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходы.БланкСтрогойОтчетности
	|			ТОГДА ПрочиеРасходы.НомерВходящегоДокумента
	|		ИНАЧЕ ПрочиеРасходы.НомерСФ
	|	КОНЕЦ КАК НомерСФ,
	|	ПрочиеРасходы.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента КАК НаименованиеДокумента
	|ИЗ
	|	ПрочиеРасходы КАК ПрочиеРасходы";
	
	ТаблицаОснований = Запрос.Выполнить().Выгрузить();
	ТаблицаСФ = УчетНДСРФ.ЗарегистрироватьСчетаФактурыПолученныеПоТаблицеОснований(ТаблицаОснований);
	
	Для Каждого СтрокаРасходов Из Объект.ПрочиеРасходы Цикл
		СтрокаСФ = ТаблицаСФ.Найти(СтрокаРасходов.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если Не СтрокаСФ = Неопределено Тогда
			СтрокаРасходов.СчетФактура = СтрокаСФ.СчетФактура;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрочиеРасходы.СчетФактура КАК Ссылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	НЕ ПрочиеРасходы.СчетФактура В (&СчетаФактурыНовыйСостав)
	|	И ПрочиеРасходы.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("СчетаФактурыНовыйСостав", ТаблицаСФ.ВыгрузитьКолонку("СчетФактура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСчетаФактуры(Объект, РежимЗаписи, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления КАК ИзменитьПометкуУдаления,
	|	ДанныеДокумента.Проведен <> &Проведен И НЕ (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления) КАК ИзменитьРежимЗаписи
	|ИЗ
	|	Документ.СчетФактураПолученный КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&СчетаФактурыОтчета)
	|	И (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления
	|		ИЛИ ДанныеДокумента.Проведен <> &Проведен И &ПотенциальнаяСменаРежимаПроведения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления КАК ИзменитьПометкуУдаления,
	|	ДанныеДокумента.Проведен <> &Проведен И НЕ (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления) КАК ИзменитьРежимЗаписи
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&СчетаФактурыОтчета)
	|	И (ДанныеДокумента.ПометкаУдаления <> &ПометкаУдаления
	|		ИЛИ ДанныеДокумента.Проведен <> &Проведен И &ПотенциальнаяСменаРежимаПроведения)
	|";
	
	Запрос.УстановитьПараметр("СчетаФактурыОтчета", Объект.ПрочиеРасходы.ВыгрузитьКолонку("СчетФактура"));
	Запрос.УстановитьПараметр("ПометкаУдаления", Объект.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Запрос.УстановитьПараметр("ПотенциальнаяСменаРежимаПроведения",
		РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстСообщения =
				СтрШаблон(НСтр("ru = '%1 находится в процессе редактирования и не может быть изменен.';
								|en = '%1 is being edited and cannot be changed.'"), ДокументОбъект);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
		КонецПопытки;
		
		Если Выборка.ИзменитьРежимЗаписи Тогда
			ДокументОбъект.Записать(РежимЗаписи);
		КонецЕсли;
		
		Если Выборка.ИзменитьПометкуУдаления Тогда
			ДокументОбъект.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуНДСПоСчетамФактурам(Объект, Проведен)
	
	СчетаФактуры = УчетНДСРФ.НоваяТаблицаСчетовФактур();
	Для каждого СтрокаТЧ Из Объект.ПрочиеРасходы Цикл
		Если СтрокаТЧ.ПредъявленСФ ИЛИ СтрокаТЧ.БланкСтрогойОтчетности Тогда
			СтрокаСчетаФактуры = СчетаФактуры.Добавить();
			Если ЗначениеЗаполнено(СтрокаТЧ.ЭлектронныйБилет) Тогда
				СтрокаСчетаФактуры.СчетФактура = СтрокаТЧ.ЭлектронныйБилет;
			Иначе
				СтрокаСчетаФактуры.СчетФактура = СтрокаТЧ.ПервичныйДокумент;
			КонецЕсли;
			СтрокаСчетаФактуры.СуммаОплаты = СтрокаТЧ.СуммаНДС;
			СтрокаСчетаФактуры.НомерДокументаПеречисленияНалога = СтрокаТЧ.НомерДокументаОплаты;
			СтрокаСчетаФактуры.ДатаДокументаПеречисленияНалога = СтрокаТЧ.ДатаДокументаОплаты;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыДокументаОплаты = Новый Структура();
	РеквизитыДокументаОплаты.Вставить("ДатаПеречисленияВБюджет", Объект.Дата);
	РеквизитыДокументаОплаты.Вставить("НомерДокумента",
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер));
	РеквизитыДокументаОплаты.Вставить("ДатаДокумента",           Объект.Дата);
	РеквизитыДокументаОплаты.Вставить("ТипНалога",               Перечисления.ТипыНалогов.НДС);
	
	УчетНДСРФ.ЗарегистрироватьОплатуНДСПоСчетамФактурам(СчетаФактуры, Объект.Ссылка, РеквизитыДокументаОплаты, Проведен);
	
КонецПроцедуры

//-- Локализация

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры
//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПорядокОтраженияПрочихОпераций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	&Период			КАК Дата,
	|	&Организация	КАК Организация,
	|	&Ссылка			КАК Документ,
	|	""""			КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиПрочихОпераций
	|	ПО
	|		Строки.СтатьяРасходов = СтатьиПрочихОпераций.Ссылка
	|		И СтатьиПрочихОпераций.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|		И СтатьиПрочихОпераций.ВидЦенностиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|
	|ГДЕ
	|	Строки.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		Документы.АвансовыйОтчет.ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		Документы.АвансовыйОтчет.ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ДатаДокумента               КАК Период,
	|	&Организация                 КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ГДЕ
	|	&Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыАвансовогоОтчета.Подготовлен)
	|";
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ"
		+ ДоходыИРасходыСервер.ДополнитьТекстЗапросаТаблицаОтражениеДокументовВРеглУчете();
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса временной таблицы "ПоступлениеДенежныхДокументовРасходовано".
// 
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений из КлючИЗначение - Список текстов запроса проведения.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
Функция ТекстЗапросаВременнаяТаблицаИзрасходованоПоступлениеДенежныхДокументов(Запрос, ТекстыЗапроса) Экспорт

	ИмяРегистра = "ПоступлениеДенежныхДокументовРасходовано";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	СУММА(ПоступлениеДенежныхДокументов.СуммаДокумента) КАК Сумма
	|ПОМЕСТИТЬ ПоступлениеДенежныхДокументовРасходовано
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеДенежныхДокументов КАК ПоступлениеДенежныхДокументов
	|		ПО (ДанныеДокумента.Ссылка = ПоступлениеДенежныхДокументов.АвансовыйОтчет)
	|			И (ПоступлениеДенежныхДокументов.Проведен)
	|			И (НЕ ДанныеДокумента.Мультивалютный)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

//-- НЕ УТ

//-- Локализация

#КонецОбласти

#Область Интерфейс

Функция ТекстАвансовыйОтчет(АвансовыйОтчет) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(АвансовыйОтчет) Тогда
		
		СтрокаСсылка = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Включен в %1';
							|en = 'Included in %1'"), Строка(АвансовыйОтчет)),,,, ПолучитьНавигационнуюСсылку(АвансовыйОтчет));
		СтрокаОчистить = Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить,,,, "ОчиститьАвансовыйОтчет");
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаСсылка);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(СтрокаОчистить);
		
		Результат = Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		Результат = Новый ФорматированнаяСтрока(НСтр("ru = 'Включить в авансовый отчет';
													|en = 'To include in expense report'"),,,, "ВключитьВАвансовыйОтчет");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПечатьСлужебные

//++ Локализация
Функция СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ШаблонОшибки = НСтр("ru = 'Печать АО-1 используется только для документов с операцией ""Закупка через подотчетное лицо"".';
						|en = 'You should print AO-1 only for documents with the ""Purchase through advance holder"" operation.'");
	
	ИспользуетсяРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаПечати(Запрос, ИспользуетсяРеглУчет);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	РегистраторыДенежныеСредстваВыдано = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	//++ НЕ УТ
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.ВыбытиеДенежныхДокументов"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("РегистраторыДенежныеСредстваВыдано", РегистраторыДенежныеСредстваВыдано);
	
	//++ НЕ УТ
	МассивНеОтраженныхДокументов = Неопределено;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПараметрыПечати.Свойство("ДокументыБезПроводок", МассивНеОтраженныхДокументов);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивНеОтраженныхДокументов", МассивНеОтраженныхДокументов);
	//-- НЕ УТ
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = МассивРезультатов[10].Выбрать();
	ВыборкаПоказатели = МассивРезультатов[9].Выбрать();
	ВыборкаКонвертация = МассивРезультатов[12].Выбрать();
	ВыборкаОборотнаяСторона = МассивРезультатов[11].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяРеглУчет Тогда
		ВыборкаПроводок = МассивРезультатов[15].Выбрать();
		ВыборкаСчетов = МассивРезультатов[16].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[16].Выбрать();
		Проводки = МассивРезультатов[15].Выгрузить();
	Иначе
		ВыборкаПроводок = МассивРезультатов[13].Выбрать();
		ВыборкаСчетов = МассивРезультатов[13].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[13].Выбрать();
		Проводки = МассивРезультатов[13].Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатов[10].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонОшибки);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЕстьДвиженияПоНесколькимВалютам = МассивРезультатов[9].Выгрузить().НайтиСтроки(Новый Структура("Ссылка",Выборка.Ссылка)).Количество() > 1;
		ПечатьВИностраннойВалюте = Выборка.Мультивалютный Или ЕстьДвиженияПоНесколькимВалютам;
		Если ПечатьВИностраннойВалюте Тогда
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчетВИностраннойВалюте_ru";
		Иначе
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет_ru";
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ОбластьТитул = Макет.ПолучитьОбласть("Титул");
		ОбластьТитулПодвал = Макет.ПолучитьОбласть("ТитулПодвал");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьТитул, Выборка.Ссылка);
		
		ОбластьТитул.Параметры.Заполнить(Выборка);
		ОбластьТитул.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ОбластьТитул.Параметры.РуководительПредставление = Выборка.Руководитель;
		
		ОбластьТитулПодвал.Параметры.Заполнить(Выборка);
		ОбластьТитулПодвал.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		ОбластьТитулПодвал.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		//++ НЕ УТ
		УстановитьПривилегированныйРежим(Истина);
		СтруктураДанныхСотрудника = ТабельныйНомерИДолжностьФизическогоЛица(Выборка.ПодотчетноеЛицо, Выборка.ДатаДокумента, Выборка.Организация);
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбластьТитул.Параметры.ТабельныйНомер = СтруктураДанныхСотрудника.ТабельныйНомер;
		ОбластьТитул.Параметры.ДолжностьПодотчетногоЛицаПредставление = СтруктураДанныхСотрудника.Должность;
		//-- НЕ УТ
		
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		
		Если Не ПечатьВИностраннойВалюте Тогда
			
			ПолученоИзКассы = 0; ПолученоПоБанковскимКартам = 0;
			ПолученоИзКассыВВалюте = ""; ПолученоПоБанковскимКартамВВалюте = "";
			НачальныйОстаток = 0; НачальныйПерерасход = 0;
			КонечныйОстаток = 0; КонечныйПерерасход = 0;
			Израсходовано = 0;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				
				Если ВыборкаПоказатели.Валюта <> ВалютаРегламентированногоУчета Тогда
					Если ВыборкаПоказатели.СуммаВыданоНаличными > 0 Тогда
						ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоНаличными)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
					Если ВыборкаПоказатели.СуммаВыданоКартой > 0 Тогда
						ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте
							+ " " + Строка(ВыборкаПоказатели.СуммаВыданоКартой)
							+ " " + Строка(ВыборкаПоказатели.Валюта) + " ";
					КонецЕсли;
				КонецЕсли;
				
				ПолученоИзКассы = ПолученоИзКассы + ВыборкаПоказатели.СуммаВыданоНаличнымиРегл;
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + ВыборкаПоказатели.СуммаВыданоКартойРегл;
				
				НачальныйОстаток = НачальныйОстаток + ВыборкаПоказатели.НачальныйОстатокРегл;
				НачальныйПерерасход = НачальныйПерерасход + ВыборкаПоказатели.НачальныйПерерасходРегл;
				КонечныйОстаток = КонечныйОстаток + ВыборкаПоказатели.КонечныйОстатокРегл;
				КонечныйПерерасход = КонечныйПерерасход + ВыборкаПоказатели.КонечныйПерерасходРегл;
				Израсходовано = Израсходовано + ВыборкаПоказатели.СуммаИзрасходованоРегл;
			КонецЦикла;
			
			ВыборкаПоказатели.Сбросить();
			
			ВыводитьВалюту = Истина;
			Если НачальныйПерерасход > 0 И (ПолученоИзКассы > 0 Или ПолученоПоБанковскимКартам > 0) Тогда
				ВыводитьВалюту = Ложь;
			КонецЕсли;
			
			ОбластьТитул.Параметры.ПолученоИзКассы = ПолученоИзКассы;
			ОбластьТитул.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
			ОбластьТитул.Параметры.ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
			Если ВыводитьВалюту Тогда
				ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте;
				ОбластьТитул.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте;
			КонецЕсли;
			ОбластьТитул.Параметры.НачальныйОстаток = НачальныйОстаток;
			ОбластьТитул.Параметры.НачальныйПерерасход = НачальныйПерерасход;
			ОбластьТитул.Параметры.КонечныйОстаток = КонечныйОстаток;
			ОбластьТитул.Параметры.КонечныйПерерасход = КонечныйПерерасход;
			ОбластьТитул.Параметры.Израсходовано = Израсходовано;
			
			ОбластьТитулПодвал.Параметры.СуммаОтчетаПрописью =
				РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Израсходовано, ВалютаРегламентированногоУчета, Ложь);
			
			ИспСумма = Окр(Израсходовано, 2, 1);
			ЦелСумма = Цел(Израсходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьТитул.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
			
			Счетчик = 0;
			Проводки.Свернуть("Регистратор, СчетДт, СчетКт", "Сумма");
			СтруктураПоиска = Новый Структура("Регистратор", Выборка.Ссылка);
			НайденныеПроводки = Проводки.НайтиСтроки(СтруктураПоиска);
			Для каждого Проводка Из НайденныеПроводки Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик < 9 Тогда
					ОбластьТитул.Параметры["СубСчетДебет"  + Счетчик] = Проводка.СчетДт;
					ОбластьТитул.Параметры["СуммаДебет"    + Счетчик] = Проводка.Сумма;
					ОбластьТитул.Параметры["СубСчетКредит" + Счетчик] = Проводка.СчетКт;
					ОбластьТитул.Параметры["СуммаКредит"   + Счетчик] = Проводка.Сумма;
				Иначе
					Если Счетчик = 9 Тогда
						ТабличныйДокумент.Вывести(ОбластьТитул);
					КонецЕсли;
					ОбластьПроводок = Макет.ПолучитьОбласть("СтрокаПроводок");
					ОбластьПроводок.Параметры["СубСчетДебет" ] = Проводка.СчетДт;
					ОбластьПроводок.Параметры["СуммаДебет"   ] = Проводка.Сумма;
					ОбластьПроводок.Параметры["СубСчетКредит"] = Проводка.СчетКт;
					ОбластьПроводок.Параметры["СуммаКредит"  ] = Проводка.Сумма;
					ТабличныйДокумент.Вывести(ОбластьПроводок);
				КонецЕсли;
			КонецЦикла;
		
			Если Счетчик < 9 Тогда
				ТабличныйДокумент.Вывести(ОбластьТитул);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ИтогоПоОтчету = 0;
			ИтогоПоОтчетуВВалюте = 0;
			ИтогоПоУчету = 0;
			ИтогоПоУчетуВВалюте = 0;
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоУчету = ИтогоПоУчету + ВыборкаПоРасходам.ПоУчету;
				Если ВыборкаПоРасходам.ВалютаРеглУчета <> ВыборкаПоРасходам.Валюта Тогда
					ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчетуВВалюте;
					ИтогоПоУчетуВВалюте = ИтогоПоУчетуВВалюте + ВыборкаПоРасходам.ПоУчетуВВалюте;
				Иначе
					ОбластьМакета.Параметры.ПоОтчетуВВалюте = 0;
					ОбластьМакета.Параметры.ПоУчетуВВалюте = 0;
				КонецЕсли;
				
				ОбластьМакета.Параметры.ДебетСубСчета = "";
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда // Оплата и прочие расходы
					
					МассивСчетов = Новый Массив;
					
					Если ЗначениеЗаполнено(ВыборкаПоРасходам.СчетУчета) Тогда
						
						МассивСчетов.Добавить(ВыборкаПоРасходам.СчетУчета);
					Иначе
						
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
						СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
						Если ИспользуетсяРеглУчет Тогда 
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
						КонецЕсли;
						
						ВыборкаСчетов.Сбросить();
					
						Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
							МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
						КонецЦикла;
						
						СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
						
						ВыборкаСчетов.Сбросить();
						Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
							МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
						КонецЦикла;
						
						// НДС
						Если ВыборкаПоРасходам.НомерРаздела = 1 И ВыборкаПоРасходам.СуммаНДС <> 0 Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ДокументДвижения", ВыборкаПоРасходам.ДокументДвижения);
							СтруктураПоиска.Вставить("ЗначениеСубконто",
								?(ЗначениеЗаполнено(ВыборкаПоРасходам.Контрагент), ВыборкаПоРасходам.Контрагент, Неопределено));
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								
								СтруктураПоискаУточнение = Новый Структура;
								СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
								СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
								Если ЗначениеЗаполнено(ВыборкаПоРасходам.ПервичныйДокумент) Тогда
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.ПервичныйДокумент);
								Иначе
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.Ссылка);
								КонецЕсли;
								
								ВыборкаСчетовУточнение.Сбросить();
								Пока ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Цикл
									МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
						
						// Оплата
						Если ВыборкаПоРасходам.НомерРаздела = 2 Тогда
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								
								СтруктураПоискаУточнение = Новый Структура;
								СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
								СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
								
								ВыборкаСчетовУточнение.Сбросить();
								Если Не ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Тогда
									МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
				Для каждого СчетДт Из МассивСчетов Цикл
					ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
						+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
						+ СчетДт;
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
			ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
			ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоУчету;
			ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоУчетуВВалюте;
			ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
			
		Иначе // Валютный отчет
			
			ТабличныйДокумент.Вывести(ОбластьТитул);
			
			Область = Макет.ПолучитьОбласть("Титул1|Показатели");
			ТабличныйДокумент.Вывести(Область);
			ЕстьСтрокаКонвертации = ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
			Если ЕстьСтрокаКонвертации Тогда
				Область = Макет.ПолучитьОбласть("Титул1|Конвертация");
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул2|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.НачальныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.НачальныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул3|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоНаличными <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоНаличными;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул4|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаВыданоКартой <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаВыданоКартой;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул5|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.СуммаИзрасходовано <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.СуммаИзрасходовано;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул6|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйОстаток <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйОстаток;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул7|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Пока ЕстьСтрокаКонвертации Цикл
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЦикла;
			
			Пока ВыборкаПоказатели.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаПоказатели.КонечныйПерерасход <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаПоказатели.Валюта;
					Область.Параметры.Сумма = ВыборкаПоказатели.КонечныйПерерасход;
					ТабличныйДокумент.Вывести(Область);
					
					Если ЕстьСтрокаКонвертации Тогда
						ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ВыборкаПоказатели.Сбросить();
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТекстЗапросаПечати(Запрос, ИспользуетсяРеглУчет)
	
	ТекстЗапроса = Документы.АвансовыйОтчет.ТекстЗапросаДанныеАвансовыхОтчетов(Запрос, "СуммыАвансовыхОтчетов") + 
	"
	|ВЫБРАТЬ // 9
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличными) КАК СуммаВыданоНаличными,
	|	СУММА(ДанныеШапки.СуммаВыданоКартой) КАК СуммаВыданоКартой,
	|	СУММА(ДанныеШапки.КонечныйОстаток) КАК КонечныйОстаток,
	|	СУММА(ДанныеШапки.КонечныйПерерасход) КАК КонечныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаИзрасходовано + ДанныеШапки.СуммаВозвращено) КАК СуммаИзрасходовано,
	|	СУММА(ДанныеШапки.НачальныйОстаток) КАК НачальныйОстаток,
	|	СУММА(ДанныеШапки.НачальныйПерерасход) КАК НачальныйПерерасход,
	|	СУММА(ДанныеШапки.СуммаВыданоНаличнымиРегл) КАК СуммаВыданоНаличнымиРегл,
	|	СУММА(ДанныеШапки.СуммаВыданоКартойРегл) КАК СуммаВыданоКартойРегл,
	|	СУММА(ДанныеШапки.КонечныйОстатокРегл) КАК КонечныйОстатокРегл,
	|	СУММА(ДанныеШапки.КонечныйПерерасходРегл) КАК КонечныйПерерасходРегл,
	|	СУММА(ДанныеШапки.СуммаИзрасходованоРегл + ДанныеШапки.СуммаВозвращеноРегл) КАК СуммаИзрасходованоРегл,
	|	СУММА(ДанныеШапки.НачальныйОстатокРегл) КАК НачальныйОстатокРегл,
	|	СУММА(ДанныеШапки.НачальныйПерерасходРегл) КАК НачальныйПерерасходРегл
	|ИЗ
	|	СуммыАвансовыхОтчетов КАК ДанныеШапки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШапки.Ссылка,
	|	ДанныеШапки.ВалютаРегламентированногоУчета,
	|	ДанныеШапки.Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 10
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ПодотчетноеЛицо) КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Подразделение) КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Валюта) КАК ПредставлениеВалютыДокумента,
	|	ДанныеДокумента.Мультивалютный КАК Мультивалютный,
	|	ДанныеДокумента.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.КоличествоЛистов КАК КоличествоЛистов,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|			ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 11
	|	ПрочиеРасходы.Ссылка                           КАК Ссылка,
	|	ПрочиеРасходы.Ссылка                           КАК ДокументДвижения,
	|	ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента   КАК НаименованиеРасхода,
	|	ПрочиеРасходы.НомерВходящегоДокумента          КАК ДокументНомер,
	|	ПрочиеРасходы.ДатаВходящегоДокумента           КАК ДокументДата,
	|	ПрочиеРасходы.СтатьяРасходов                   КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов                КАК АналитикаРасходов,
	|	ПрочиеРасходы.Контрагент                       КАК Контрагент,
	|	NULL                                           КАК КонтрагентОплаты,
	|	ВЫБОР КОГДА ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.Ссылка.Валюта
	|	ИНАЧЕ
	|		ПрочиеРасходы.Валюта
	|	КОНЕЦ КАК Валюта,
	//++ НЕ УТ
	|	ВЫБОР КОГДА ПрочиеРасходы.НастройкаСчетовУчета.СчетУчета ЕСТЬ NULL ТОГДА
	//-- НЕ УТ
	|		НЕОПРЕДЕЛЕНО
	//++ НЕ УТ
	|	ИНАЧЕ
	|		ПрочиеРасходы.НастройкаСчетовУчета.СчетУчета
	|	КОНЕЦ
	//-- НЕ УТ
	|	      КАК СчетУчета,
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.СуммаСНДС)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчету,
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ПрочиеРасходы.СуммаСНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчетуВВалюте,
	|	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.СуммаСНДС)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|	КОНЕЦ КАК ПоОтчету,
	|	ПрочиеРасходы.СуммаСНДС КАК ПоОтчетуВВалюте,
	|	
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ПрочиеРасходы.СуммаНДС) КАК СуммаНДС,
	|	ПрочиеРасходы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	1 КАК НомерРаздела,
	|	ПрочиеРасходы.ИдентификаторСтроки КАК НомерСтроки,
	|	ПрочиеРасходы.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
	|	ПО
	|		ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
	|		И ДвиженияПрочиеРасходы.СтатьяДоходовРасходов = ПрочиеРасходы.СтатьяРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаРасходов = ПрочиеРасходы.АналитикаРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаАктивовПассивов = ПрочиеРасходы.АналитикаАктивовПассивов
	|		И ДвиженияПрочиеРасходы.Подразделение = ПрочиеРасходы.Подразделение
	|		И ДвиженияПрочиеРасходы.СуммаВВалюте = ПрочиеРасходы.СуммаСНДС
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ПрочиеРасходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		
	|	
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета,
	|	ОплатаПоставщикам.НаименованиеВходящегоДокумента,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоставщикам.Контрагент,
	|	ВЫБОР КОГДА ОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ОплатаПоставщикам.Ссылка.Валюта
	|	ИНАЧЕ
	|		ОплатаПоставщикам.Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО,
	
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.ВалютаВзаиморасчетов = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета 
	|			ТОГДА ОплатаПоставщикам.СуммаВзаиморасчетов
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			ЕСТЬNULL(Расчеты.ДолгРегл + Расчеты.ПредоплатаРегл, ОплатаПоставщикам.Сумма)
	|	КОНЕЦ ПоУчету,
	|	ОплатаПоставщикам.Сумма КАК ПоУчетуВВалюте,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.ВалютаВзаиморасчетов = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета 
	|			ТОГДА ОплатаПоставщикам.СуммаВзаиморасчетов
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			ЕСТЬNULL(Расчеты.ДолгРегл + Расчеты.ПредоплатаРегл, ОплатаПоставщикам.Сумма)
	|	КОНЕЦ КАК ПоОтчету,
	|	ОплатаПоставщикам.Сумма КАК ПоОтчетуВВалюте,
	|	0 КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ПервичныйДокумент,
	|	2 КАК НомерРаздела,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК Расчеты
	|			ПО Расчеты.ДокументРегистратор = ОплатаПоставщикам.Ссылка
	|				И Расчеты.ИдентификаторФинЗаписи = ОплатаПоставщикам.ИдентификаторСтроки
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДокументПриобретение.АвансовыйОтчет,
	|	ДокументПриобретение.Ссылка,
	|	ДокументПриобретение.Организация.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ КАК НаименованиеВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДокументПриобретение.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл,ДанныеДокумента.СуммаСНДС)) КАК ПоУчету,
	|	СУММА(ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)) КАК ПоУчетуВВалюте,
	|	СУММА(ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл,ДанныеДокумента.СуммаСНДС)) КАК ПоОтчету,
	|	СУММА(ЕСТЬNULL(ДанныеДокумента.СуммаСНДС, 0)) КАК ПоОтчетуВВалюте,
	|	0 КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ПервичныйДокумент,
	|	
	|	0 КАК НомерРаздела,
	|	МАКСИМУМ(ДанныеДокумента.ИдентификаторСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(ДанныеДокумента.НомерСтроки) КАК НомерСтрокиУпорядочивания
	|	
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДокументПриобретение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ПриобретениеТоваровУслуг.Товары КАК ДанныеДокумента
	|		ПО
	|			ДокументПриобретение.Ссылка = ДанныеДокумента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|		ПО
	|			Суммы.Регистратор = ДанныеДокумента.Ссылка
	|			И Суммы.ИдентификаторСтроки = ДанныеДокумента.ИдентификаторСтроки
	|			И Суммы.СуммаБезНДСРегл <> 0
	|	
	|ГДЕ
	|	ДокументПриобретение.АвансовыйОтчет В (&МассивДокументов)
	|	И ДокументПриобретение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|	И ДокументПриобретение.Проведен
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДокументПриобретение.Ссылка,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НаименованиеВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НаименованиеВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НаименованиеВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.НомерВходящегоДокумента = """" ТОГДА
	|			ДокументПриобретение.НомерВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.НомерВходящегоДокумента
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ДатаВходящегоДокумента = ДАТАВРЕМЯ(1,1,1) ТОГДА
	|			ДокументПриобретение.ДатаВходящегоДокумента
	|		ИНАЧЕ
	|			ДанныеДокумента.ДатаВходящегоДокумента
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипУслуги),
	|	ДанныеДокумента.НомерБилета,
	|	ДанныеДокумента.Дата,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДенежныеСредства.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДенежныеСредства.Сумма > 0
	|					ИЛИ ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДенежныеСредства.Сумма < 0
	|					ТОГДА ДенежныеСредства.СуммаРегл
	|				ИНАЧЕ -ДенежныеСредства.СуммаРегл
	|			КОНЕЦ) КАК ПоУчету,
	|	СУММА(ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДенежныеСредства.Сумма > 0
	|					ИЛИ ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДенежныеСредства.Сумма < 0
	|					ТОГДА ДенежныеСредства.Сумма
	|				ИНАЧЕ -ДенежныеСредства.Сумма
	|			КОНЕЦ) КАК ПоУчетуВВалюте,
	|	СУММА(ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДенежныеСредства.Сумма > 0
	|					ИЛИ ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДенежныеСредства.Сумма < 0
	|					ТОГДА ДенежныеСредства.СуммаРегл
	|				ИНАЧЕ -ДенежныеСредства.СуммаРегл
	|			КОНЕЦ) КАК ПоОтчету,
	|	СУММА(ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И ДенежныеСредства.Сумма > 0
	|					ИЛИ ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) И ДенежныеСредства.Сумма < 0
	|					ТОГДА ДенежныеСредства.Сумма
	|				ИНАЧЕ -ДенежныеСредства.Сумма
	|			КОНЕЦ) КАК ПоОтчетуВВалюте,
	|	0 КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ПервичныйДокумент,
	|	0 КАК НомерРаздела,
	|	ДанныеДокумента.Номер КАК НомерСтроки,
	|	ДанныеДокумента.Номер КАК НомерСтрокиУпорядочивания
	|ИЗ
	|	Документ.Бронирование КАК ДанныеДокумента
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.ТипУслуги),
	|	ДанныеДокумента.НомерБилета,
	|	ДанныеДокумента.Дата,
	|	ДенежныеСредства.Валюта,
	|	ДанныеДокумента.Номер
	|	
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРеглУчета,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДенежныеСредства.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.Сумма, 0)),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.Сумма, 0)),
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	
	|	0 КАК НомерРаздела,
	|	ДанныеДокумента.Номер КАК НомерСтроки,
	|	ДанныеДокумента.Номер КАК НомерСтрокиУпорядочивания
	|
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка,
	|	ДенежныеСредства.Валюта
	|	
	//-- НЕ УТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела,
	|	НомерСтрокиУпорядочивания
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 12
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ТаблицаКонвертацияВалюты.Валюта КАК ВалютаИсходная,
	|	ТаблицаКонвертацияВалюты.Сумма КАК СуммаИсходная,
	|	ТаблицаКонвертацияВалюты.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ТаблицаКонвертацияВалюты.СуммаКонвертации КАК СуммаКонвертации,
	|	ТаблицаКонвертацияВалюты.КурсКонвертации КАК Курс
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|	ПО
	|		ТаблицаКонвертацияВалюты.Ссылка = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Если Не ИспользуетсяРеглУчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ //13
		|	ОплатаПоставщикам.Ссылка КАК Регистратор,
		|	ОплатаПоставщикам.Ссылка КАК ДокументДвижения,
		|	""60"" КАК СчетДт,
		|	ОплатаПоставщикам.Контрагент КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ОплатаПоставщикам.Ссылка.Валюта = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
		|	ОплатаПоставщикам.Сумма
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
		|ГДЕ
		|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрочиеРасходы.Ссылка КАК Регистратор,
		|	ПрочиеРасходы.Ссылка КАК ДокументДвижения,
		|	ПрочиеРасходы.СтатьяРасходов.КорреспондирующийСчет,
		|	ПрочиеРасходы.СтатьяРасходов КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки,
		
		|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
		|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
		|		ИНАЧЕ
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
		|		ПО
		|			ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
		|			И ДвиженияПрочиеРасходы.НомерСтроки = ПрочиеРасходы.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
		|		ПО
		|			Суммы.Регистратор = ПрочиеРасходы.Ссылка
		|			И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
		|			И Суммы.СуммаБезНДСРегл <> 0
		|ГДЕ
		|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслуг.АвансовыйОтчет КАК Регистратор,
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК ДокументДвижения,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	1 КАК НомерСтроки,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) - СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС)
		|	ИНАЧЕ
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|			ПО ПриобретениеТоваровУслуг.АвансовыйОтчет В (&МассивДокументов)
		|				И ПриобретениеТоваровУслуг.Ссылка = ПриобретениеТоваровУслугТовары.Ссылка
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслуг.АвансовыйОтчет,
		|	ПриобретениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслуг.АвансовыйОтчет КАК Регистратор,
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК ДокументДвижения,
		|	""19"" КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	2 КАК НомерСтроки,
		|	СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС) КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|			ПО ПриобретениеТоваровУслуг.АвансовыйОтчет В (&МассивДокументов)
		|				И ПриобретениеТоваровУслуг.Ссылка = ПриобретениеТоваровУслугТовары.Ссылка
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслуг.АвансовыйОтчет,
		|	ПриобретениеТоваровУслугТовары.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументДвижения,
		|	НомерСтроки
		|;
		|";
	Иначе
	//++ НЕ УТ
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ // 13
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Ссылка КАК ДокументДвижения
	|ПОМЕСТИТЬ ДокументыДвижения
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.Бронирование КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДанныеДокумента.АвансовыйОтчет,
	|	ДанныеДокумента.Ссылка
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.АвансовыйОтчет В (&МассивДокументов)
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументДвижения
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 14
	|	ДокументыДвижения.Регистратор КАК Регистратор,
	|	ДокументыДвижения.ДокументДвижения КАК ДокументДвижения,
	|	Хозрасчетный.Период КАК Период,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыДвижения
	|	ПО
	|		ДокументыДвижения.ДокументДвижения = Хозрасчетный.Регистратор
	|	И НЕ Хозрасчетный.СчетДт.Забалансовый
	|	И НЕ Хозрасчетный.СчетКт.Забалансовый
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ // 15
	|	Проводки.Регистратор КАК Регистратор,
	|	Проводки.ДокументДвижения КАК ДокументДвижения,
	|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|	ТОГДА
	|		Проводки.СчетДт.Родитель.Код
	|	ИНАЧЕ
	|		Проводки.СчетДт.Код
	|	КОНЕЦ КАК СчетДт,
	|	Проводки.СчетКт.Код КАК СчетКт,
	|	МИНИМУМ(Проводки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Проводки.Сумма) КАК Сумма
	|ИЗ
	|	Проводки КАК Проводки
	|
	|СГРУППИРОВАТЬ ПО
	|	Проводки.Регистратор,
	|	Проводки.ДокументДвижения,
	|	Проводки.СчетДт,
	|	Проводки.СчетКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 16
	|	Проводки.Регистратор КАК Регистратор,
	|	Проводки.ДокументДвижения КАК ДокументДвижения,
	|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
	|	ТОГДА
	|		Проводки.СчетДт.Родитель.Код
	|	ИНАЧЕ
	|		Проводки.СчетДт.Код
	|	КОНЕЦ КАК СчетДт,
	|	Проводки.Сумма КАК Сумма,
	|	Субконто.Значение КАК ЗначениеСубконто
	|ИЗ
	|	Проводки КАК Проводки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|	ПО
	|		ВидыСубконто.Ссылка = Проводки.СчетДт
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто
	|	ПО
	|		Субконто.Регистратор = Проводки.Регистратор
	|		И Субконто.Период = Проводки.Период
	|		И Субконто.НомерСтроки = Проводки.НомерСтроки
	|		И Субконто.Вид = ВидыСубконто.ВидСубконто
	|		И Субконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 17
	|	ОтражениеДокументовВРеглУчете.Регистратор КАК Ссылка,
	|	ОтражениеДокументовВРеглУчете.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
	|ГДЕ
	|	ОтражениеДокументовВРеглУчете.Регистратор В (&МассивНеОтраженныхДокументов)
	|;";
	//-- НЕ УТ
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска)
	
	Область = Макет.ПолучитьОбласть("СтрокаТитул|Конвертация");
	ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаКонвертация);
	ТабличныйДокумент.Присоединить(Область);
	Возврат ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
	
КонецФункции

Функция СформироватьПечатнуюФормуАвансовогоОтчетаСтараяВерсия(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ШаблонОшибки = НСтр("ru = 'Печать АО-1 используется только для документов с операцией ""Закупка через подотчетное лицо"".';
						|en = 'You should print AO-1 only for documents with the ""Purchase through advance holder"" operation.'");
	
	ИспользуетсяРеглУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвансовыйОтчет";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);	
	
	РегистраторыДенежныеСредстваВыдано = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	//++ НЕ УТ
	РегистраторыДенежныеСредстваВыдано.Добавить(Тип("ДокументСсылка.ВыбытиеДенежныхДокументов"));
	//-- НЕ УТ
	Запрос.УстановитьПараметр("РегистраторыДенежныеСредстваВыдано", РегистраторыДенежныеСредстваВыдано);
	
	
	//++ НЕ УТ
	МассивНеОтраженныхДокументов = Неопределено;
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") Тогда
		ПараметрыПечати.Свойство("ДокументыБезПроводок", МассивНеОтраженныхДокументов);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивНеОтраженныхДокументов", МассивНеОтраженныхДокументов);
	//-- НЕ УТ
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка            КАК Ссылка,
	|	ДанныеДокумента.Дата 			  КАК ДатаДокумента,
	|	ДанныеДокумента.МоментВремени     КАК МоментВремени,
	|	ДанныеДокумента.Организация       КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо   КАК ПодотчетноеЛицо
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ1
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.МоментВремени,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|
	//-- НЕ УТ
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ПодотчетноеЛицо
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетНаПечатьВТ1.ДатаДокумента КАК ДатаСобытия,
	|	АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФильтрФизическихЛиц
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ1 КАК АвансовыйОтчетНаПечатьВТ1"; 
	
	Запрос.Выполнить();
	
	//++ НЕ УТ
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, "ВТФильтрФизическихЛиц","ФизическоеЛицо,ДатаСобытия");
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц,Истина,"ФИОПолные");
	//-- НЕ УТ
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетНаПечатьВТ1.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ1.Организация,
	|	АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ1.МоментВремени,
	|	МАКСИМУМ(ДенежныеСредства.Период) КАК ПериодПредыдущийОтчет
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ2
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ1
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ1.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо
	|		И ДенежныеСредства.МоментВремени < АвансовыйОтчетНаПечатьВТ1.МоментВремени
	|		И ТИПЗНАЧЕНИЯ(ДенежныеСредства.Регистратор) В (
	|			ТИП(Документ.АвансовыйОтчет),
	|			ТИП(Документ.ПриобретениеТоваровУслуг),
	|			ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	//++ НЕ УТ
	|			, ТИП(Документ.ПоступлениеДенежныхДокументов)
	//-- НЕ УТ
	|		)
	|	
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ1.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ1.Организация,
	|	АвансовыйОтчетНаПечатьВТ1.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ1.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АвансовыйОтчетНаПечатьВТ2.Организация,
	|	АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ2.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ2.МоментВремени,
	|	ДенежныеСредства.Регистратор КАК ПредыдущийОтчет,
	|	ДенежныеСредства.МоментВремени КАК МоментВремениПредыдущийОтчет
	|
	|ПОМЕСТИТЬ АвансовыйОтчетНаПечатьВТ3
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ2 КАК АвансовыйОтчетНаПечатьВТ2
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Организация = АвансовыйОтчетНаПечатьВТ2.Организация
	|		И ДенежныеСредства.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо
	|		И ДенежныеСредства.Период = АвансовыйОтчетНаПечатьВТ2.ПериодПредыдущийОтчет
	|		И ТИПЗНАЧЕНИЯ(ДенежныеСредства.Регистратор) В (
	|			ТИП(Документ.АвансовыйОтчет),
	|			ТИП(Документ.ПриобретениеТоваровУслуг),
	|			ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	//++ НЕ УТ
	|			, ТИП(Документ.ПоступлениеДенежныхДокументов)
	//-- НЕ УТ
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ2.Организация,
	|	АвансовыйОтчетНаПечатьВТ2.ПодотчетноеЛицо,
	|	Ссылка,
	|	ПредыдущийОтчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 2
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта,
	|	
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличными,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Валюта <> ДенежныеСредстваВыдано.Организация.ВалютаРегламентированногоУчета
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (&РегистраторыДенежныеСредстваВыдано) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоНаличнымиВВалюте,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств), ТИП(Документ.ПодтверждениеЗачисленияЗарплаты)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартой,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И ДенежныеСредстваВыдано.Валюта <> ДенежныеСредстваВыдано.Организация.ВалютаРегламентированногоУчета
	|			И ТИПЗНАЧЕНИЯ(ДенежныеСредстваВыдано.Регистратор) В (ТИП(Документ.СписаниеБезналичныхДенежныхСредств), ТИП(Документ.ПодтверждениеЗачисленияЗарплаты)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВыданоКартойВВалюте,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредстваВыдано.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеНеизрасходованныхПодотчетныхСумм)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.СуммаРегл, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВозвращено,
	|
	|	СУММА(ВЫБОР
	|		КОГДА ДенежныеСредстваВыдано.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			И ДенежныеСредстваВыдано.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеНеизрасходованныхПодотчетныхСумм)) ТОГДА
	|			ЕСТЬNULL(ДенежныеСредстваВыдано.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ) КАК СуммаВозвращеноВВалюте
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваВыдано
	|	ПО
	|		((ДенежныеСредстваВыдано.МоментВремени > АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ИЛИ АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет ЕСТЬ NULL)
	|			И ДенежныеСредстваВыдано.МоментВремени < АвансовыйОтчетНаПечатьВТ3.МоментВремени)
	|		И ДенежныеСредстваВыдано.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваВыдано.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	ДенежныеСредстваВыдано.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 3
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|		-ЕСТЬNULL(ДенежныеСредстваПредыдущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НачальныйПерерасход,
	|
	|	ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглРасход, 0) КАК Израсходовано,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0) > 0 ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КонечныйОстаток,
	|	ВЫБОР КОГДА ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0) < 0 ТОГДА
	|		-ЕСТЬNULL(ДенежныеСредстваТекущийОтчет.СуммаРеглКонечныйОстаток, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КонечныйПерерасход
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо) В (ВЫБРАТЬ Организация, Подотчетноелицо ИЗ АвансовыйОтчетНаПечатьВТ1)) КАК ДенежныеСредстваПредыдущийОтчет
	|	ПО
	|		ДенежныеСредстваПредыдущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.ПредыдущийОтчет
	|		И ДенежныеСредстваПредыдущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваПредыдущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.ОстаткиИОбороты(,, Регистратор,,
	|			(Организация, Подотчетноелицо) В (ВЫБРАТЬ Организация, Подотчетноелицо ИЗ АвансовыйОтчетНаПечатьВТ1)) КАК ДенежныеСредстваТекущийОтчет
	|	ПО
	|		ДенежныеСредстваТекущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|		И ДенежныеСредстваТекущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваТекущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 4
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Ссылка.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	//++ НЕ УТ
	|	ВЫБОР КОГДА ЕСТЬNULL(КадровыеДанныеФизическихЛиц.ФИОПолные,"""") = """" 
	|		ТОГДА
	//-- НЕ УТ
	|			ДанныеДокумента.ПодотчетноеЛицо
	//++ НЕ УТ
	|		ИНАЧЕ ЕСТЬNULL(КадровыеДанныеФизическихЛиц.ФИОПолные,"""")
	|	КОНЕЦ
	//-- НЕ УТ
	|	КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.Ссылка.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Ссылка.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Ссылка.Подразделение.Представление КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Ссылка.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Ссылка.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка.Валюта.Представление КАК ПредставлениеВалютыДокумента,
	
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) = ТИП(Документ.АвансовыйОтчет) ТОГДА
	|		ДанныеДокумента.Ссылка.Мультивалютный
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Мультивалютный,
	
	|	ДанныеДокумента.Ссылка.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.Ссылка.КоличествоЛистов КАК КоличествоЛистов,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ1 КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	//++ НЕ УТ
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц 
	|		ПО ДанныеДокумента.ПодотчетноеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|		И ДанныеДокумента.ДатаДокумента = КадровыеДанныеФизическихЛиц.Период
	//-- НЕ УТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 5
	|	ПрочиеРасходы.Ссылка                           КАК Ссылка,
	|	ПрочиеРасходы.НаименованиеВходящегоДокумента   КАК НаименованиеРасхода,
	|	ПрочиеРасходы.НомерВходящегоДокумента          КАК ДокументНомер,
	|	ПрочиеРасходы.ДатаВходящегоДокумента           КАК ДокументДата,
	|	ПрочиеРасходы.СтатьяРасходов                   КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов                КАК АналитикаРасходов,
	|	ПрочиеРасходы.Контрагент                       КАК Контрагент,
	|	NULL                                           КАК КонтрагентОплаты,
	|	ВЫБОР КОГДА ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ПрочиеРасходы.Ссылка.Валюта
	|	ИНАЧЕ
	|		ПрочиеРасходы.Валюта
	|	КОНЕЦ КАК Валюта,
	//++ НЕ УТ
	|	ВЫБОР КОГДА ПрочиеРасходы.НастройкаСчетовУчета.СчетУчета ЕСТЬ NULL ТОГДА
	//-- НЕ УТ
	|		НЕОПРЕДЕЛЕНО
	//++ НЕ УТ
	|	ИНАЧЕ
	|		ПрочиеРасходы.НастройкаСчетовУчета.СчетУчета
	|	КОНЕЦ
	//-- НЕ УТ
	|	      КАК СчетУчета,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|		ИНАЧЕ
	|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчету,
	
	|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
	|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ПрочиеРасходы.Сумма
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоУчетуВВалюте,
	|	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
	|	КОНЕЦ КАК ПоОтчету,
	
	|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта <> ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|		ПрочиеРасходы.Сумма
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ПоОтчетуВВалюте,
	|	
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, ПрочиеРасходы.СуммаНДС) КАК СуммаНДС,
	
	|	1 КАК НомерРаздела,
	|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
	|	ПО
	|		ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
	|		И ДвиженияПрочиеРасходы.СтатьяДоходовРасходов = ПрочиеРасходы.СтатьяРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаРасходов = ПрочиеРасходы.АналитикаРасходов
	|		И ДвиженияПрочиеРасходы.АналитикаАктивовПассивов = ПрочиеРасходы.АналитикаАктивовПассивов
	|		И ДвиженияПрочиеРасходы.Подразделение = ПрочиеРасходы.Подразделение
	|		И ДвиженияПрочиеРасходы.СуммаВВалюте = ПрочиеРасходы.Сумма
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Регистратор = ПрочиеРасходы.Ссылка
	|		И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|		
	|	
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.НаименованиеВходящегоДокумента,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ОплатаПоставщикам.Контрагент,
	|	ВЫБОР КОГДА ОплатаПоставщикам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		ОплатаПоставщикам.Ссылка.Валюта
	|	ИНАЧЕ
	|		ОплатаПоставщикам.Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	ОплатаПоставщикам.Сумма,
	|	ВЫБОР
	|		КОГДА ОплатаПоставщикам.Ссылка.Валюта <> ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ОплатаПоставщикам.Сумма
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	0,
	
	|	2 КАК НомерРаздела,
	|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|	
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеДокумента.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	0,
	|	3 КАК НомерРаздела,
	|	0 КАК НомерСтроки
	|
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Валюта
	|	
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	"""",
	|	НЕОПРЕДЕЛЕНО,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДенежныеСредства.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	0,
	|	4 КАК НомерРаздела,
	|	0 КАК НомерСтроки
	|
	|ИЗ
	|	Документ.ПоступлениеДенежныхДокументов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДенежныеСредства.Валюта
	|	
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	"""",
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеДокумента.Валюта,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	СУММА(ЕСТЬNULL(ДенежныеСредства.СуммаРегл, 0)),
	|	СУММА(ВЫБОР
	|		КОГДА ДанныеДокумента.Валюта <> ДанныеДокумента.Организация.ВалютаРегламентированногоУчета ТОГДА
	|			ЕСТЬNULL(ДенежныеСредства.Сумма, 0)
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ),
	|	0,
	|	5 КАК НомерРаздела,
	|	0 КАК НомерСтроки
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредства
	|	ПО
	|		ДенежныеСредства.Регистратор = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 6
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ТаблицаКонвертацияВалюты.Валюта КАК ВалютаИсходная,
	|	ТаблицаКонвертацияВалюты.Сумма КАК СуммаИсходная,
	|	ТаблицаКонвертацияВалюты.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ТаблицаКонвертацияВалюты.СуммаКонвертации КАК СуммаКонвертации
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.КонвертацияВалюты КАК ТаблицаКонвертацияВалюты
	|	ПО
	|		ТаблицаКонвертацияВалюты.Ссылка = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 7
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.МоментВремени,
	|	АвансовыйОтчетНаПечатьВТ3.ПредыдущийОтчет,
	|	ЕСТЬNULL(АвансовыйОтчетНаПечатьВТ3.МоментВремениПредыдущийОтчет, ДАТАВРЕМЯ(1,1,1,0,0,1)) КАК МоментВремениПредыдущийОтчет
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3 КАК АвансовыйОтчетНаПечатьВТ3
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ // 8
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ДенежныеСредстваТекущийОтчет.Валюта,
	|	ЕСТЬNULL(СУММА(ДенежныеСредстваТекущийОтчет.Сумма), 0) КАК Сумма
	|
	|ИЗ
	|	АвансовыйОтчетНаПечатьВТ3
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваТекущийОтчет
	|	ПО
	|		ДенежныеСредстваТекущийОтчет.Регистратор = АвансовыйОтчетНаПечатьВТ3.Ссылка
	|		И ДенежныеСредстваТекущийОтчет.Организация = АвансовыйОтчетНаПечатьВТ3.Организация
	|		И ДенежныеСредстваТекущийОтчет.ПодотчетноеЛицо = АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо
	|		И ДенежныеСредстваТекущийОтчет.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДенежныеСредстваТекущийОтчет.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетНаПечатьВТ3.Ссылка,
	|	АвансовыйОтчетНаПечатьВТ3.Организация,
	|	АвансовыйОтчетНаПечатьВТ3.ПодотчетноеЛицо,
	|	ДенежныеСредстваТекущийОтчет.Валюта
	|;
	|";
	
	Если Не ИспользуетсяРеглУчет Тогда
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаПоставщикам.Ссылка КАК Регистратор,
		|	""60"" КАК СчетДт,
		|	ОплатаПоставщикам.Контрагент КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ОплатаПоставщикам.Ссылка.Валюта = ОплатаПоставщикам.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
		|	ОплатаПоставщикам.Сумма
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
		|ГДЕ
		|	ОплатаПоставщикам.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрочиеРасходы.Ссылка КАК Регистратор,
		|	ПрочиеРасходы.СтатьяРасходов.КорреспондирующийСчет,
		|	ПрочиеРасходы.СтатьяРасходов КАК ЗначениеСубконто,
		|	ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	ПрочиеРасходы.НомерСтроки КАК НомерСтроки,
		
		|	ВЫБОР КОГДА НЕ ПрочиеРасходы.Отменено ТОГДА
		|		ВЫБОР КОГДА ПрочиеРасходы.Ссылка.Валюта = ПрочиеРасходы.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ПрочиеРасходы.Сумма)
		|		ИНАЧЕ
		|			ЕСТЬNULL(ДвиженияПрочиеРасходы.СуммаРегл, ЕСТЬNULL(Суммы.СуммаНДСРегл, 0) + ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0))
		|		КОНЕЦ
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ
		|	
		|ИЗ
		|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДвиженияПрочиеРасходы
		|		ПО
		|			ДвиженияПрочиеРасходы.Регистратор = ПрочиеРасходы.Ссылка
		|			И ДвиженияПрочиеРасходы.НомерСтроки = ПрочиеРасходы.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
		|		ПО
		|			Суммы.Регистратор = ПрочиеРасходы.Ссылка
		|			И Суммы.ИдентификаторСтроки = ПрочиеРасходы.ИдентификаторСтроки
		|			И Суммы.СуммаБезНДСРегл <> 0
		|ГДЕ
		|	ПрочиеРасходы.Ссылка В (&МассивДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК Регистратор,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	1 КАК НомерСтроки,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС) ТОГДА
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) - СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС)
		|	ИНАЧЕ
		|		СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС)
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка В (&МассивДокументов)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар) ТОГДА
		|		""41""
		|	ИНАЧЕ
		|		""91.02""
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Ссылка КАК Регистратор,
		|	""19"" КАК СчетДт,
		|	НЕОПРЕДЕЛЕНО,
		|	ВЫБОР КОГДА ПриобретениеТоваровУслугТовары.Ссылка.Валюта = ПриобретениеТоваровУслугТовары.Ссылка.Организация.ВалютаРегламентированногоУчета ТОГДА
		|		""71.01""
		|	ИНАЧЕ
		|		""71.21""
		|	КОНЕЦ КАК СчетКт,
		|	2 КАК НомерСтроки,
		|	СУММА(ПриобретениеТоваровУслугТовары.СуммаНДС) КАК Сумма
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка В (&МассивДокументов)
		|	И ПриобретениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|	
		|СГРУППИРОВАТЬ ПО
		|	ПриобретениеТоваровУслугТовары.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|";
	//++ НЕ УТ
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	Хозрасчетный.Регистратор КАК Регистратор,
		|	Хозрасчетный.Период КАК Период,
		|	Хозрасчетный.СчетДт КАК СчетДт,
		|	Хозрасчетный.СчетКт КАК СчетКт,
		|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
		|	Хозрасчетный.Сумма КАК Сумма
		|ПОМЕСТИТЬ Проводки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор В (&МассивДокументов)
		|	И НЕ Хозрасчетный.СчетДт.Забалансовый
		|	И НЕ Хозрасчетный.СчетКт.Забалансовый
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Проводки.Регистратор КАК Регистратор,
		|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		|	ТОГДА
		|		Проводки.СчетДт.Родитель.Код
		|	ИНАЧЕ
		|		Проводки.СчетДт.Код
		|	КОНЕЦ КАК СчетДт,
		|	Проводки.СчетКт.Код КАК СчетКт,
		|	МИНИМУМ(Проводки.НомерСтроки) КАК НомерСтроки,
		|	СУММА(Проводки.Сумма) КАК Сумма
		|ИЗ
		|	Проводки КАК Проводки
		|
		|СГРУППИРОВАТЬ ПО
		|	Проводки.Регистратор,
		|	Проводки.СчетДт,
		|	Проводки.СчетКт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Проводки.Регистратор КАК Регистратор,
		|	ВЫБОР КОГДА Проводки.СчетДт В ИЕРАРХИИ(
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками),
		|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		|	ТОГДА
		|		Проводки.СчетДт.Родитель.Код
		|	ИНАЧЕ
		|		Проводки.СчетДт.Код
		|	КОНЕЦ КАК СчетДт,
		|	Проводки.Сумма КАК Сумма,
		|	Субконто.Значение КАК ЗначениеСубконто
		|ИЗ
		|	Проводки КАК Проводки
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
		|	ПО
		|		ВидыСубконто.Ссылка = Проводки.СчетДт
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто
		|	ПО
		|		Субконто.Регистратор = Проводки.Регистратор
		|		И Субконто.Период = Проводки.Период
		|		И Субконто.НомерСтроки = Проводки.НомерСтроки
		|		И Субконто.Вид = ВидыСубконто.ВидСубконто
		|		И Субконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтражениеДокументовВРеглУчете.Регистратор КАК Ссылка,
		|	ОтражениеДокументовВРеглУчете.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВРеглУчете КАК ОтражениеДокументовВРеглУчете
		|ГДЕ
		|	ОтражениеДокументовВРеглУчете.Регистратор В (&МассивНеОтраженныхДокументов)
		|;";
	//-- НЕ УТ
	КонецЕсли;
		
	ЗапросВалютныхОстатков = Новый Запрос;
	ЗапросВалютныхОстатков.Текст = "
	|ВЫБРАТЬ
	|	Данные.Валюта КАК Валюта,
	|	СУММА(СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(СуммаКонечныйОстаток) КАК СуммаКонечныйОстаток,
	|	СУММА(СуммаНачальныйПерерасход) КАК СуммаНачальныйПерерасход,
	|	СУММА(СуммаКонечныйПерерасход) КАК СуммаКонечныйПерерасход
	|ИЗ
	|(ВЫБРАТЬ
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток > 0 ТОГДА
	|		ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНачальныйОстаток,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток < 0 ТОГДА
	|		-ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНачальныйПерерасход,
	|	0 КАК СуммаКонечныйОстаток,
	|	0 КАК СуммаКонечныйПерерасход
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|		&ДатаНачальныхОстатков,
	|		Организация = &Организация И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	) КАК ДанныеРегистра
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	0,
	|	0,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток > 0 ТОГДА
	|		ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаОстаток < 0 ТОГДА
	|		-ДанныеРегистра.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ
	|	
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(
	|		&ДатаКонечныхОстатков,
	|		Организация = &Организация И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	) КАК ДанныеРегистра) КАК Данные
	|СГРУППИРОВАТЬ ПО
	|	Валюта
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = МассивРезультатов[4].Выбрать();
	ВыборкаОстатки = МассивРезультатов[3].Выбрать();
	ВыборкаВыдано = МассивРезультатов[2].Выбрать();
	
	ВыборкаКонвертация = МассивРезультатов[6].Выбрать();
	ВыборкаДатыОстатков = МассивРезультатов[7].Выбрать();
	ВыборкаИзрасходованоВВалюте = МассивРезультатов[8].Выбрать();
	
	ВыборкаОборотнаяСторона = МассивРезультатов[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользуетсяРеглУчет Тогда
		ВыборкаПроводок = МассивРезультатов[10].Выбрать();
		ВыборкаСчетов = МассивРезультатов[11].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[11].Выбрать();
		Проводки = МассивРезультатов[10].Выгрузить();
	Иначе
		ВыборкаПроводок = МассивРезультатов[9].Выбрать();
		ВыборкаСчетов = МассивРезультатов[9].Выбрать();
		ВыборкаСчетовУточнение = МассивРезультатов[9].Выбрать();
		Проводки = МассивРезультатов[9].Выгрузить();
	КонецЕсли;
	
	Если МассивРезультатов[4].Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонОшибки);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПечатьВИностраннойВалюте = (Выборка.Валюта <> Выборка.ВалютаРегламентированногоУчета Или Выборка.Мультивалютный);
		Если ПечатьВИностраннойВалюте Тогда
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчетВИностраннойВалюте_ru";
		Иначе
			ИмяМакета = "Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет_ru";
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Выводим титульный лист авансового отчета
		ОбластьТитул = Макет.ПолучитьОбласть("Титул");
		ОбластьТитулПодвал = Макет.ПолучитьОбласть("ТитулПодвал");
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьТитул, Выборка.Ссылка);
		
		Постфикс = ПостфиксНомераДокумента(Выборка.Ссылка);
		
		ОбластьТитул.Параметры.Заполнить(Выборка);
		ОбластьТитул.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер) + Постфикс;
		ОбластьТитул.Параметры.РуководительПредставление = Выборка.Руководитель;
		
		ОбластьТитулПодвал.Параметры.Заполнить(Выборка);
		ОбластьТитулПодвал.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер) + Постфикс;
		ОбластьТитулПодвал.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		//++ НЕ УТ
		УстановитьПривилегированныйРежим(Истина);
		СтруктураДанныхСотрудника = ТабельныйНомерИДолжностьФизическогоЛица(Выборка.ПодотчетноеЛицо, Выборка.ДатаДокумента, Выборка.Организация);
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбластьТитул.Параметры.ТабельныйНомер = СтруктураДанныхСотрудника.ТабельныйНомер;
		ОбластьТитул.Параметры.ДолжностьПодотчетногоЛицаПредставление = СтруктураДанныхСотрудника.Должность;
		//-- НЕ УТ
		
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		
		Если Не ПечатьВИностраннойВалюте Тогда
			
			ПолученоИзКассы = 0; ПолученоПоБанковскимКартам = 0;
			ПолученоИзКассыВВалюте = ""; ПолученоПоБанковскимКартамВВалюте = "";
			НачальныйОстаток = 0; НачальныйПерерасход = 0;
			КонечныйОстаток = 0; КонечныйПерерасход = 0;
			Израсходовано = 0;
			
			Если ВыборкаОстатки.НайтиСледующий(СтруктураПоиска) Тогда
				НачальныйОстаток = ВыборкаОстатки.НачальныйОстаток;
				НачальныйПерерасход = ВыборкаОстатки.НачальныйПерерасход;
				КонечныйОстаток = ВыборкаОстатки.КонечныйОстаток;
				КонечныйПерерасход = ВыборкаОстатки.КонечныйПерерасход;
				Израсходовано = ВыборкаОстатки.Израсходовано;
			КонецЕсли;
			
			ВыборкаОстатки.Сбросить();
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				
				Если ВыборкаВыдано.Валюта <> ВыборкаВыдано.ВалютаРегламентированногоУчета Тогда
					Если ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте > 0 Тогда
						ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте
							+ " " + Строка(ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте)
							+ " " + Строка(ВыборкаВыдано.Валюта) + " ";
					КонецЕсли;
					Если ВыборкаВыдано.СуммаВыданоКартойВВалюте > 0 Тогда
						ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте
							+ " " + Строка(ВыборкаВыдано.СуммаВыданоКартойВВалюте)
							+ " " + Строка(ВыборкаВыдано.Валюта) + " ";
					КонецЕсли;
				КонецЕсли;
				ПолученоИзКассы = ПолученоИзКассы + ВыборкаВыдано.СуммаВыданоНаличными;
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам + ВыборкаВыдано.СуммаВыданоКартой;
				
			КонецЦикла;
			
			ВыборкаВыдано.Сбросить();
			
			ВыводитьВалюту = Истина;
			Если НачальныйПерерасход > 0 И (ПолученоИзКассы > 0 Или ПолученоПоБанковскимКартам > 0) Тогда
				ВыводитьВалюту = Ложь;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоИзКассы);
				ПолученоИзКассы = ПолученоИзКассы - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			Если НачальныйПерерасход > 0 Тогда
				СуммаВозмещения = Мин(НачальныйПерерасход, ПолученоПоБанковскимКартам);
				ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам - СуммаВозмещения;
				НачальныйПерерасход = НачальныйПерерасход - СуммаВозмещения;
			КонецЕсли;
			
			ОбластьТитул.Параметры.ПолученоИзКассы = ПолученоИзКассы;
			ОбластьТитул.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
			ОбластьТитул.Параметры.ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
			Если ВыводитьВалюту Тогда
				ОбластьТитул.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассыВВалюте;
				ОбластьТитул.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартамВВалюте;
			КонецЕсли;
			
			ОбластьТитул.Параметры.НачальныйОстаток = НачальныйОстаток;
			ОбластьТитул.Параметры.НачальныйПерерасход = НачальныйПерерасход;
			ОбластьТитул.Параметры.КонечныйОстаток = КонечныйОстаток;
			ОбластьТитул.Параметры.КонечныйПерерасход = КонечныйПерерасход;
			ОбластьТитул.Параметры.Израсходовано = Израсходовано;
			
			ОбластьТитулПодвал.Параметры.СуммаОтчетаПрописью =
				РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Израсходовано, Выборка.ВалютаРегламентированногоУчета, Ложь);
			
			ИспСумма = Окр(Израсходовано, 2, 1);
			ЦелСумма = Цел(Израсходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьТитул.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьТитул.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
			
			Счетчик = 0;
			Проводки.Свернуть("Регистратор, СчетДт, СчетКт", "Сумма");
			СтруктураПоиска = Новый Структура("Регистратор", Выборка.Ссылка);
			НайденныеПроводки = Проводки.НайтиСтроки(СтруктураПоиска);
			Для каждого Проводка Из НайденныеПроводки Цикл
				Счетчик = Счетчик + 1;
				Если Счетчик < 9 Тогда
					ОбластьТитул.Параметры["СубСчетДебет"  + Счетчик] = Проводка.СчетДт;
					ОбластьТитул.Параметры["СуммаДебет"    + Счетчик] = Проводка.Сумма;
					ОбластьТитул.Параметры["СубСчетКредит" + Счетчик] = Проводка.СчетКт;
					ОбластьТитул.Параметры["СуммаКредит"   + Счетчик] = Проводка.Сумма;
				Иначе
					Если Счетчик = 9 Тогда
						ТабличныйДокумент.Вывести(ОбластьТитул);
					КонецЕсли;
					ОбластьПроводок = Макет.ПолучитьОбласть("СтрокаПроводок");
					ОбластьПроводок.Параметры["СубСчетДебет" ] = Проводка.СчетДт;
					ОбластьПроводок.Параметры["СуммаДебет"   ] = Проводка.Сумма;
					ОбластьПроводок.Параметры["СубСчетКредит"] = Проводка.СчетКт;
					ОбластьПроводок.Параметры["СуммаКредит"  ] = Проводка.Сумма;
					ТабличныйДокумент.Вывести(ОбластьПроводок);
				КонецЕсли;
			КонецЦикла;
			
			Если Счетчик < 9 Тогда
				ТабличныйДокумент.Вывести(ОбластьТитул);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			ИтогоПоОтчету = 0;
			ИтогоПоОтчетуВВалюте = 0;
			ИтогоПоУчету = 0;
			ИтогоПоУчетуВВалюте = 0;
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчетуВВалюте;
				ИтогоПоУчету = ИтогоПоУчету + ВыборкаПоРасходам.ПоУчету;
				ИтогоПоУчетуВВалюте = ИтогоПоУчетуВВалюте + ВыборкаПоРасходам.ПоУчетуВВалюте;
				
				ОбластьМакета.Параметры.ДебетСубСчета = "";
				
				Если ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда // Оплата и прочие расходы
					
					МассивСчетов = Новый Массив;
					
					Если ЗначениеЗаполнено(ВыборкаПоРасходам.СчетУчета) Тогда
						
						МассивСчетов.Добавить(ВыборкаПоРасходам.СчетУчета);
					Иначе
						
						Если ИспользуетсяРеглУчет Тогда
						
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
							ВыборкаСчетов.Сбросить();
						
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							// НДС
							Если ВыборкаПоРасходам.НомерРаздела = 1 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.Контрагент);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
									
									ВыборкаСчетовУточнение.Сбросить();
									Пока ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Цикл
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЦикла;
								КонецЦикла;
							КонецЕсли;
							
							// Оплата
							Если ВыборкаПоРасходам.НомерРаздела = 2 Тогда
								
								СтруктураПоиска = Новый Структура;
								СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
								СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
								
								ВыборкаСчетов.Сбросить();
								Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
									
									СтруктураПоискаУточнение = Новый Структура;
									СтруктураПоискаУточнение.Вставить("СчетДт",           ВыборкаСчетов.СчетДт);
									СтруктураПоискаУточнение.Вставить("Регистратор",      Выборка.Ссылка);
									СтруктураПоискаУточнение.Вставить("ЗначениеСубконто", Выборка.Ссылка);
									
									ВыборкаСчетовУточнение.Сбросить();
									Если Не ВыборкаСчетовУточнение.НайтиСледующий(СтруктураПоискаУточнение) Тогда
										МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						Иначе
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.СтатьяРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.АналитикаРасходов);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
							
							СтруктураПоиска = Новый Структура;
							СтруктураПоиска.Вставить("Регистратор",      Выборка.Ссылка);
							СтруктураПоиска.Вставить("ЗначениеСубконто", ВыборкаПоРасходам.КонтрагентОплаты);
							
							ВыборкаСчетов.Сбросить();
							Пока ВыборкаСчетов.НайтиСледующий(СтруктураПоиска) Цикл
								МассивСчетов.Добавить(ВыборкаСчетов.СчетДт);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				Иначе // Закупка
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Регистратор", Выборка.Ссылка);
					
					ВыборкаПроводок.Сбросить();
					МассивСчетов = Новый Массив;
					
					Пока ВыборкаПроводок.НайтиСледующий(СтруктураПоиска) Цикл
						МассивСчетов.Добавить(ВыборкаПроводок.СчетДт);
					КонецЦикла;
				КонецЕсли;
				
				ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивСчетов);
				Для каждого СчетДт Из МассивСчетов Цикл
					ОбластьМакета.Параметры.ДебетСубСчета = ОбластьМакета.Параметры.ДебетСубСчета
						+ ?(ПустаяСтрока(ОбластьМакета.Параметры.ДебетСубСчета), "", ", ")
						+ СчетДт;
				КонецЦикла;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
			ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
			ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоУчету;
			ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоУчетуВВалюте;
			ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
			
		Иначе // Валютный отчет
			
			ТабличныйДокумент.Вывести(ОбластьТитул);
			
			Область = Макет.ПолучитьОбласть("Титул1|Показатели");
			ТабличныйДокумент.Вывести(Область);
			
			ЕстьСтрокаКонвертации = ВыборкаКонвертация.НайтиСледующий(СтруктураПоиска);
			Если ЕстьСтрокаКонвертации Тогда
				Область = Макет.ПолучитьОбласть("Титул1|Конвертация");
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			ВыборкаВалютныхОстатков = Неопределено;
			
			// Остатки
			Если ВыборкаДатыОстатков.НайтиСледующий(СтруктураПоиска) Тогда
				
				ЗапросВалютныхОстатков.УстановитьПараметр("ДатаНачальныхОстатков", Новый Граница(ВыборкаДатыОстатков.МоментВремениПредыдущийОтчет));
				ЗапросВалютныхОстатков.УстановитьПараметр("ДатаКонечныхОстатков", Новый Граница(ВыборкаДатыОстатков.МоментВремени));
				ЗапросВалютныхОстатков.УстановитьПараметр("Организация", ВыборкаДатыОстатков.Организация);
				ЗапросВалютныхОстатков.УстановитьПараметр("ПодотчетноеЛицо", ВыборкаДатыОстатков.ПодотчетноеЛицо);
				
				ВыборкаВалютныхОстатков = ЗапросВалютныхОстатков.Выполнить().Выбрать();
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаНачальныйОстаток <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаНачальныйОстаток;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Область = Макет.ПолучитьОбласть("Титул2|Показатели");
				ТабличныйДокумент.Вывести(Область);
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаНачальныйПерерасход <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаНачальныйПерерасход;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
			КонецЕсли;
			
			// Обороты
			Область = Макет.ПолучитьОбласть("Титул3|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаВыдано.СуммаВыданоНаличными <> 0 Или ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаВыдано.Валюта;
					Если ВыборкаВыдано.Валюта = Выборка.ВалютаРегламентированногоУчета Тогда
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоНаличными;
					Иначе
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоНаличнымиВВалюте;
					КонецЕсли;
					ТабличныйДокумент.Вывести(Область);
				КонецЕсли;
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			ВыборкаВыдано.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул4|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаВыдано.НайтиСледующий(СтруктураПоиска) Цикл
				Если ВыборкаВыдано.СуммаВыданоКартой <> 0 Или ВыборкаВыдано.СуммаВыданоКартойВВалюте <> 0 Тогда
					Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
					Область.Параметры.Валюта = ВыборкаВыдано.Валюта;
					Если ВыборкаВыдано.Валюта = Выборка.ВалютаРегламентированногоУчета Тогда
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоКартой;
					Иначе
						Область.Параметры.Сумма = ВыборкаВыдано.СуммаВыданоКартойВВалюте;
					КонецЕсли;
					ТабличныйДокумент.Вывести(Область);
				КонецЕсли;
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			ВыборкаВыдано.Сбросить();
			
			Область = Макет.ПолучитьОбласть("Титул5|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Пока ВыборкаИзрасходованоВВалюте.НайтиСледующий(СтруктураПоиска) Цикл
				Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
				ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаИзрасходованоВВалюте);
				ТабличныйДокумент.Вывести(Область);
				
				Если ЕстьСтрокаКонвертации Тогда
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			
			// Остатки
			Область = Макет.ПолучитьОбласть("Титул6|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Если ЕстьСтрокаКонвертации Тогда
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЕсли;
			
			Если ВыборкаВалютныхОстатков <> Неопределено Тогда
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаКонечныйОстаток <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаКонечныйОстаток;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Пока ЕстьСтрокаКонвертации Цикл
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЦикла;
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("Титул7|Показатели");
			ТабличныйДокумент.Вывести(Область);
			Пока ЕстьСтрокаКонвертации Цикл
				ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
			КонецЦикла;
			
			Если ВыборкаВалютныхОстатков <> Неопределено Тогда
				
				Пока ВыборкаВалютныхОстатков.Следующий() Цикл
					Если ВыборкаВалютныхОстатков.СуммаКонечныйПерерасход <> 0 Тогда
						Область = Макет.ПолучитьОбласть("СтрокаТитул|Показатели");
						Область.Параметры.Валюта = ВыборкаВалютныхОстатков.Валюта;
						Область.Параметры.Сумма = ВыборкаВалютныхОстатков.СуммаКонечныйПерерасход;
						ТабличныйДокумент.Вывести(Область);
						
						Если ЕстьСтрокаКонвертации Тогда
							ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ВыборкаВалютныхОстатков.Сбросить();
				
				Пока ЕстьСтрокаКонвертации Цикл
					ЕстьСтрокаКонвертации = ВывестиСтрокуКонвертации(Макет, ТабличныйДокумент, ВыборкаКонвертация, СтруктураПоиска);
				КонецЦикла;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьТитулПодвал);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			// Оборотная сторона
			ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			
			НомерСтроки = 0;
			
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
			ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
			
			ОбработанныеНомераСтрок = Новый Массив;
			ТекущийРаздел = 0;
			
			ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
			Пока ВыборкаПоРасходам.Следующий() Цикл
				
				Если ТекущийРаздел <> ВыборкаПоРасходам.НомерРаздела Тогда
					ОбработанныеНомераСтрок.Очистить();
					ТекущийРаздел = ВыборкаПоРасходам.НомерРаздела;
				КонецЕсли;
				
				Если ОбработанныеНомераСтрок.Найти(ВыборкаПоРасходам.НомерСтроки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбработанныеНомераСтрок.Добавить(ВыборкаПоРасходам.НомерСтроки);
				
				ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
				НомерСтроки = НомерСтроки + 1;
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Подвал авансового отчета
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ВыборкаОборотнаяСторона.Сбросить();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПостфиксНомераДокумента(Ссылка)
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		Возврат НСтр("ru = 'А';
					|en = 'A'", Метаданные.Языки.Русский.КодЯзыка);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат НСтр("ru = 'Т';
					|en = 'T'", Метаданные.Языки.Русский.КодЯзыка);
	//++ НЕ УТ
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
		Возврат НСтр("ru = 'Д';
					|en = 'D'", Метаданные.Языки.Русский.КодЯзыка);
	//-- НЕ УТ
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов") Тогда
		Возврат НСтр("ru = 'П';
					|en = 'П'", Метаданные.Языки.Русский.КодЯзыка);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// ++ НЕ УТ
Функция ТабельныйНомерИДолжностьФизическогоЛица(ФизическоеЛицо, Дата, Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ТабельныйНомер", "");
	Результат.Вставить("Должность", "");
	
	ПараметрыПолученияДанных = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияДанных.Организация = Организация;
	ПараметрыПолученияДанных.НачалоПериода = Дата;
	ПараметрыПолученияДанных.ОкончаниеПериода = Дата;
	ПараметрыПолученияДанных.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	
	Сотрудники = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияДанных);
	
	ПолучаемыеДанные = Новый Массив;
	ПолучаемыеДанные.Добавить("Должность");
	ПолучаемыеДанные.Добавить("ТабельныйНомер");

	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, // Только разрешенные
		Сотрудники.ВыгрузитьКолонку("Сотрудник"),
		ПолучаемыеДанные,
		Дата);
	
	Если КадровыеДанные.Количество() > 0 Тогда
		Результат.ТабельныйНомер = КадровыеДанные[0].ТабельныйНомер;
		Результат.Должность = СокрЛП(КадровыеДанные[0].Должность);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТ

//-- Локализация

#КонецОбласти

#КонецОбласти
