#Область ПрограммныйИнтерфейс

// Возвращает адреса серверов меток времени в порядке, требуемом банками. 
// И добавляет в него отсутствующие адреса из ЭлектроннаяПодпись.ОбщиеНастройки().АдресаСерверовМетокВремени
Функция АдресаСерверовМетокВремени() Экспорт
	
	Возврат УниверсальныйОбменСБанкамиПовтИсп.АдресаСерверовМетокВремени();
	
КонецФункции

Функция ЕстьПравоНаИзменениеДанныхИСвойствТранзакций() Экспорт
	
	Возврат (ПравоДоступа("Изменение", Метаданные.Справочники.ТранзакцииОбменаСБанками)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СвойстваТранзакцийОбменаСБанками));
	
КонецФункции

Функция ДоступнаОблачнаяКриптография() Экспорт
	
	Возврат УниверсальныйОбменСБанками.ДоступнаОблачнаяКриптография();
	
КонецФункции

Функция СервисТранзакции(Транзакция) Экспорт
	
	Документооборот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Транзакция, "Документооборот");
	Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
	Возврат Сервис;
	
КонецФункции

Функция ТранзакцииПоПредмету(Предмет, Знач Отбор = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ТранзакцииПоПредмету(Предмет, Отбор);
	
КонецФункции

Функция ОрганизацияТранзакции(Транзакция) Экспорт
	
	Если ТипЗнч(Транзакция) = Тип("Массив") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Транзакция, "Организация");
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Транзакция, "Организация");
	КонецЕсли;
	
КонецФункции

Функция ДатаТранспортаТранзакции(Транзакция) Экспорт
	
	Если ТипЗнч(Транзакция) = Тип("Массив") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Транзакция, "ДатаТранспорта");
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Транзакция, "ДатаТранспорта");
	КонецЕсли;
	
КонецФункции

// См. УниверсальныйОбменСБанками.ПротоколОбработкиОтчетностиБанком
Функция ПротоколОбработкиОтчетностиБанком(ПредметИлиТранзакция, ТипыДокументовПротокола, ТипыТранзакцийПротокола = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПротоколОбработкиОтчетностиБанком(ПредметИлиТранзакция, ТипыДокументовПротокола, ТипыТранзакцийПротокола);
	
КонецФункции

Функция ПредметТранзакции(Транзакция) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПредметТранзакции(Транзакция);
	
КонецФункции

Функция ОбновитьДанныеРесурсаВЖурналеОперацийСФайлами(Идентификатор, ИсходноеИмяФайла, ИдентификаторАрхива, ИмяРесурса, Знач Данные, Распаковать = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РаспакованныеДанные", Неопределено);
	
	// Выбираем перечень файлов в пакете.
	Выборка = УниверсальныйОбменСБанками.
				ВыбратьДанныеВЖурналеОперацийСФайламиПоИдентификатору(Идентификатор, ИсходноеИмяФайла, ИдентификаторАрхива);
	Если Выборка.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Данные о вложении не найдены.';
										|en = 'Attachment data is not found.'");
		Возврат Результат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	
	Выборка.Следующий();
	МенеджерЗаписи.Идентификатор       = Идентификатор;
	МенеджерЗаписи.ИсходноеИмяФайла    = Выборка.ИсходноеИмяФайла;
	МенеджерЗаписи.Предмет             = Выборка.Предмет;
	МенеджерЗаписи.Организация         = Выборка.Организация;
	МенеджерЗаписи.ИдентификаторАрхива = ИдентификаторАрхива;
	МенеджерЗаписи.Прочитать();
	
	Попытка
		Если Распаковать Тогда
			// Распаковка сжатого файла.
			РезультатРаспаковки = УниверсальныйОбменСБанками.
				РаспаковатьДвоичныеДанные(Данные, ИсходноеИмяФайла);
			Если НЕ РезультатРаспаковки.Выполнено Тогда
				Результат.ОписаниеОшибки = РезультатРаспаковки.ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			Данные = РезультатРаспаковки.РаспакованныеДанные;
			Результат.РаспакованныеДанные = Данные;
		КонецЕсли;
		МенеджерЗаписи[ИмяРесурса] = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
		Если ИмяРесурса = "Подпись" И Данные <> Неопределено Тогда
			МенеджерЗаписи.ПодписьВыполнена = Истина;
			МенеджерЗаписи.ПодписьНеДействительна = Ложь;
		КонецЕсли;
		МенеджерЗаписи.Записать();
	Исключение
		Результат.ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСертификатаИзДвоичныхДанных(ДанныеСертификата) Экспорт
	
	СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.СертификатКриптографииВСтуктуру(СертификатКриптографии);
	
КонецФункции

Функция СтрокаОтпечаткаВДвоичныеДанные(Строка) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СтрокаОтпечаткаВДвоичныеДанные(Строка);
	
КонецФункции

Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат УниверсальныйОбменСБанками.ТекущаяДатаНаСервере();
	
КонецФункции

Функция СертификатШифрованияБанков(Сервис, СписокБанков = Неопределено) Экспорт
	
	Сертификаты = УниверсальныйОбменСБанками.СертификатШифрованияБанков(Сервис, СписокБанков);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Сертификаты);
	
КонецФункции

Функция СертификатыПодписиБанка(Банк) Экспорт
	
	Сертификаты = УниверсальныйОбменСБанками.СертификатыПодписиБанка(Банк);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Сертификаты);
	
КонецФункции

Функция СертификатАвторизацииБанка(Банк) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СертификатАвторизацииБанка(Банк);
	
КонецФункции

// Получает сертификат, сопоставленный организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - см. УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(),
//                                 или ФинОтчетностьВБанкиКлиентСервер.ПараметрыОтбораСертификата()
//
// Возвращаемое значение:
//   Структура - сертификат и доверенность на владельца сертификата:
//               * ОтпечатокСертификата - ОпределяемыйТип.ОтпечатокСертификатаДляОбменаСБанками -
//                    Если сертификат для организации и сервиса не задан, возвращается пустая строка.
//               * Доверенность - ОпределяемыйТип.МЧДУниверсальныйОбменСБанками
//
Функция СертификатОрганизации(ПараметрыОтбора) Экспорт
	
	СертификатСПредставителем = Новый Структура;
	СертификатСПредставителем.Вставить("ОтпечатокСертификата", "");
	СертификатСПредставителем.Вставить("Доверенность");
	
	ФизическоеЛицо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыОтбора, "ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ФизическоеЛицоОтбор = ?(ЗначениеЗаполнено(ФизическоеЛицо), ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо), Новый Массив);
	ФизическоеЛицоОтбор.Добавить(Справочники.ФизическиеЛица.ПустаяСсылка());	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтбора.Организация);
	Запрос.УстановитьПараметр("Сервис",              ПараметрыОтбора.Сервис);
	Запрос.УстановитьПараметр("ФизическоеЛицо",      ФизическоеЛицо);
	Запрос.УстановитьПараметр("ФизическоеЛицоОтбор", ФизическоеЛицоОтбор);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СертификатыОрганизацийДляОбменаСБанками.СертификатОтпечаток КАК Сертификат,
	|	СертификатыОрганизацийДляОбменаСБанками.Доверенность КАК Доверенность,
	|	ВЫБОР
	|		КОГДА СертификатыОрганизацийДляОбменаСБанками.ФизическоеЛицо = &ФизическоеЛицо
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Приоритет,
	|	СертификатыОрганизацийДляОбменаСБанками.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.СертификатыОрганизацийДляОбменаСБанками КАК СертификатыОрганизацийДляОбменаСБанками
	|ГДЕ
	|	СертификатыОрганизацийДляОбменаСБанками.Организация = &Организация
	|	И СертификатыОрганизацийДляОбменаСБанками.Сервис = &Сервис
	|	И СертификатыОрганизацийДляОбменаСБанками.ФизическоеЛицо В(&ФизическоеЛицоОтбор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ,
	|	ФизическоеЛицо";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат СертификатСПредставителем;
	КонецЕсли;
		
	ДанныеСертификата = Результат.Выгрузить().Получить(0);
	СертификатСПредставителем.ОтпечатокСертификата = ДанныеСертификата.Сертификат;
	СертификатСПредставителем.Доверенность = ДанныеСертификата.Доверенность;
	
	Возврат СертификатСПредставителем;
	
КонецФункции

// Сопоставляет сертификат для организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - см. УниверсальныйОбменСБанкамиКлиентСервер.ПараметрыОтбораСертификата(),
//                                 или ФинОтчетностьВБанкиКлиентСервер.ПараметрыОтбораСертификата()
//  ОтпечатокСертификата - ОпределяемыйТип.ОтпечатокСертификатаДляОбменаСБанками - сопоставленный сертификат.
//  Доверенность - ОпределяемыйТип.МЧДУниверсальныйОбменСБанками - сопоставленный сертификат.
//
// Возвращаемое значение:
//   Булево      - если Истина, то сертификат успешно сопоставлен; иначе Ложь.
//
Функция СохранитьСертификатОрганизации(ПараметрыОтбора, Знач ОтпечатокСертификата, Знач Доверенность = Неопределено) Экспорт

	СертификатыОрганизацийДляОбменаСБанками = РегистрыСведений.СертификатыОрганизацийДляОбменаСБанками.СоздатьНаборЗаписей();
	
	Запись = СертификатыОрганизацийДляОбменаСБанками.Добавить();
	Запись.Сервис      = ПараметрыОтбора.Сервис;
	Запись.Организация = ПараметрыОтбора.Организация;
	ПараметрыОтбора.Свойство("ФизическоеЛицо", Запись.ФизическоеЛицо);
	
	Запись.СертификатОтпечаток = ОтпечатокСертификата;
	Если ЗначениеЗаполнено(Доверенность) Тогда
		Запись.Доверенность = Доверенность;
	КонецЕсли;
	
	Отбор = СертификатыОрганизацийДляОбменаСБанками.Отбор;
	Отбор.Сервис.Установить(Запись.Сервис);
	Отбор.Организация.Установить(Запись.Организация);
	Отбор.ФизическоеЛицо.Установить(Запись.ФизическоеЛицо);
	СертификатыОрганизацийДляОбменаСБанками.Записать(Истина);
	
	Возврат Истина;
	
КонецФункции

Функция РаспаковатьДвоичныеДанные(Данные, ИмяФайла, Идентификатор = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РаспаковатьДвоичныеДанные(Данные, ИмяФайла, Идентификатор);
	
КонецФункции

Функция НайтиСертификатБанкаТранзакцииПоОтпечатку(Транзакция, Отпечаток) Экспорт
	
	СертификатыБанка = УниверсальныйОбменСБанками.СертификатыПодписиБанка(Транзакция.Банк);
	ОтпечатокСтрока = УниверсальныйОбменСБанкамиКлиентСервер.ДвоичныеДанныеВСтроку(Отпечаток);
	СертификатНайден = СертификатыБанка.Найти(ОтпечатокСтрока, "СертификатОтпечаток") <> Неопределено;
	
	Возврат СертификатНайден;
	
КонецФункции

Функция ПолучитьДанныеХранилища(Хранилище) Экспорт
	
	Возврат Хранилище.Получить();
	
КонецФункции

Функция ОпределитьТипТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьТипТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками);
	
КонецФункции

Функция ОпределитьТипДокументаПоСсылке(Сервис, ВидДокументовОбменСБанками) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьТипДокументаПоСсылке(Сервис, ВидДокументовОбменСБанками);
	
КонецФункции

Функция ОпределитьСервисПоСсылке(СсылкаНаСервис) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьСервисПоСсылке(СсылкаНаСервис);
	
КонецФункции

// Определяет используемые при обмене с банками справочники машиночитаемых доверенностей (МЧД).
//
// Параметры:
//  Подсистема   - Строка - имя подсистемы, хранящие данные МЧД. Может принимать значения:
//                * "РегламентированнаяОтчетность" - относящиеся к Библиотеке регламентированной отчетности;
//                * "СтандартныеПодсистемы" - относящиеся к Библиотеке стандартных подсистем;
//                * "ЭлектронноеВзаимодействие" - относящиеся к Библиотеке электронных документов;
//                * пустая строка - любые справочники, хранящие МЧД.
//  ФорматСписка - Строка - какие типы у элементов списка справочников. Может принимать значения:
//                * "Тип" - в возвращаемом значении будут типы "СправочникСсылка".
//                * "Строка" - в возвращаемом значении будут имена справочников.
//
// Возвращаемое значение:
//   Массив из Строка - список справочников.
//
Функция ДоступныеСправочникиМЧД(Подсистема = "", ФорматСписка = "Тип") Экспорт
	
	ПоддерживаемыеСправочники = Новый Массив;
	
	// Формируем список справочников, которые могут использоваться при обмене с банками.
	ВозможныеСправочники = Новый Структура;
	
	СправочникиПодсистемы = Новый Массив;
	СправочникиПодсистемы.Добавить("МашиночитаемыеДоверенностиРаспределенныйРеестр");
	СправочникиПодсистемы.Добавить("МашиночитаемыеДоверенностиФНС");
	ВозможныеСправочники.Вставить("РегламентированнаяОтчетность", СправочникиПодсистемы);
	
	СправочникиПодсистемы = Новый Массив;
	СправочникиПодсистемы.Добавить("МашиночитаемыеДоверенности");
	ВозможныеСправочники.Вставить("СтандартныеПодсистемы", СправочникиПодсистемы);
	
	СправочникиПодсистемы = Новый Массив;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами.ЭлектронныеДокументы") Тогда
		СправочникиПодсистемы.Добавить("МЧД003");
		СправочникиПодсистемы.Добавить("МашиночитаемыеДоверенностиОрганизаций");
	КонецЕсли;
	ВозможныеСправочники.Вставить("ЭлектронноеВзаимодействие", СправочникиПодсистемы);
	
	// Проверяем, используются ли справочники в текущей конфигурации.
	СуществующиеСправочники = Метаданные.Справочники;
	ИспользуемыеСправочники = Метаданные.ОпределяемыеТипы.МЧДУниверсальныйОбменСБанками.Тип;
	
	Для Каждого ПодсистемаСправочников Из ВозможныеСправочники Цикл
		
		Если Не ПустаяСтрока(Подсистема) И Подсистема <> ПодсистемаСправочников.Ключ Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяСправочника Из ПодсистемаСправочников.Значение Цикл
			
			СуществующийСправочник = СуществующиеСправочники.Найти(ИмяСправочника);
			Если СуществующийСправочник <> Неопределено
			   И ИспользуемыеСправочники.СодержитТип(Тип("СправочникСсылка." + ИмяСправочника))
			   И ПравоДоступа("Просмотр", СуществующийСправочник) Тогда
			   
				УказаниеНаСправочник = ?(ФорматСписка = "Тип", Тип("СправочникСсылка." + ИмяСправочника), ИмяСправочника);
				ПоддерживаемыеСправочники.Добавить(УказаниеНаСправочник);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПоддерживаемыеСправочники;
	
КонецФункции

Функция ЭтоОблачныйСертификатПользователя(Отпечаток) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиПовтИсп.ЭтоОблачныйСертификатПользователя(Отпечаток);
	
КонецФункции

Функция ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция);
	
КонецФункции

Функция ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, Идентификатор) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, Идентификатор);
	
КонецФункции

Функция РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция);
	
КонецФункции

Функция ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки);
	
КонецФункции

// Используется для получения параметров, используемых при отладке функциональности.
//
// Параметры:
//  Параметр     - Строка - имя настройки, хранящейся в константе ПараметрыТестированияУниверсальногоОбменаСБанками.
//
// Возвращаемое значение:
//   Булево или иное - значение особого параметра, задействующего анализируемую отладку.
//
Функция ПолучитьПараметрТестирования(Параметр) Экспорт
	
	Возврат  УниверсальныйОбменСБанками.ПолучитьПараметрТестирования(Параметр);
	
КонецФункции

Функция РеквизитыОрганизации(Организация, Реквизиты) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РеквизитыОрганизации(Организация, Реквизиты);
	
КонецФункции

// См. УниверсальныйОбменСБанками.ДокументооборотыПоПредмету.
Функция ДокументооборотыПоПредмету(Предмет, Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ДокументооборотыПоПредмету(Предмет, Отбор, ВключаяПомеченныеНаУдаление);
	
КонецФункции

Функция ПоследнийДокументооборотПоПредмету(Предмет, Знач Отбор = Неопределено, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПоследнийДокументооборотПоПредмету(Предмет, Отбор, ВключаяПомеченныеНаУдаление);
	
КонецФункции

#Область ПрограммныйИнтерфейсДляПотребителей

// См. УниверсальныйОбменСБанками.ПометитьНаУдалениеТранзакцию
Процедура ПометитьНаУдалениеТранзакции(Транзакции) Экспорт
	
	УниверсальныйОбменСБанками.ПометитьНаУдалениеТранзакции(Транзакции);
	
КонецПроцедуры

Функция ТранзакцииТребующиеРасшифровки(Сервис = Неопределено, Организация = Неопределено, СписокТранзакций = Неопределено,
	Ответственный = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ТранзакцииТребующиеРасшифровки(Сервис, Организация, СписокТранзакций, Ответственный);
	
КонецФункции

Функция НайтиОблачныйСертификатВХранилище(Отпечаток) Экспорт
	
	Возврат УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(Отпечаток);
	
КонецФункции

Функция ОтправитьТранзакцииВБанк(Сервис, Транзакции) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(Сервис, Транзакции);
	
КонецФункции

Функция ВременныеДанныеТранзакции(Идентификатор, СписокФайлов = Неопределено, ИсходныеДанные = Ложь, Результаты = Ложь, Подписи = Ложь, РезультатыПослеРасшифровки = Ложь) Экспорт
	
	Результат = УниверсальныйОбменСБанками.ВременныеДанныеТранзакции(Идентификатор, СписокФайлов, ИсходныеДанные, Результаты, Подписи);
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами() Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПараметрыСоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами();;
	
КонецФункции

Функция СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(Параметры) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(Параметры);
	
КонецФункции

// Возвращает текст сообщения для пользователя о том, что необходимо проверить доступ к серверу обмена с банками.
//
// Параметры:
//	ИсходныйТекстОшибки - Строка - Исходное представление ошибки для пользователя.
//
// Возвращаемое значение:
//	Строка - Подробное сообщение для пользователя с рекомендацией по проверке доступа.
//
Функция ПодготовитьТекстОшибкиОбновленияДанныхСервиса(ИсходныйТекстОшибки) Экспорт

	ПараметрыСервераОбменаСБанками = УниверсальныйОбменСБанками.ПараметрыСервераОбменаСБанками();
	
	АдресСервиса = ПараметрыСервераОбменаСБанками.АдресСервиса;
	ПортСервиса  = ПараметрыСервераОбменаСБанками.ПортСервиса;

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Если ОбщегоНазначения.КлиентПодключенЧерезВебСервер() Тогда
			// Если клиент подключен через веб-сервер, то надо проверять на том компьютере, где запущен веб-сервер.
			МестоПредоставленияДоступа = НСтр("ru = 'на веб-сервере, где опубликована база данных.';
												|en = 'On the web server where the database is published.'");
		Иначе
			МестоПредоставленияДоступа = НСтр("ru = 'на вашем компьютере.';
												|en = 'On your computer.'");
		КонецЕсли;
	Иначе
		// Серверная база 
		МестоПредоставленияДоступа = НСтр("ru = 'на сервере 1С:Предприятия.
												|Доступ необходим для пользователя, от имени которого работает служба сервера (по-умолчанию используется USR1CV8).';
												|en = 'On 1C:Enterprise server.
												|The access is required for the user, under which the server service is running. USR1CV8 is used by default.'");
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Для работы с сервисом предоставьте доступ к ресурсу %1 (порт %2) %3';
							|en = 'To use the service, grant access to the resource %1 (port %2) %3'");
	ТекстСообщения = СтрШаблон(ТекстСообщения, АдресСервиса, Формат(ПортСервиса, "ЧГ=0"), МестоПредоставленияДоступа) + "
					|
					|" + ИсходныйТекстОшибки;

	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

// Получает список архивов, которые требуется создать перед формированием транзакции.
//
// Параметры:
//  Идентификатор - Строка - идентификатор транзакции.
//
// Возвращаемое значение:
//   Массив - список архивов.
//
Функция ИдентификаторыСоздаваемыхАрхивов(Знач Идентификатор) Экспорт
	
	ЗапросАрхивов = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива КАК ИдентификаторАрхива
	|ИЗ
	|	РегистрСведений.ЖурналОперацийСФайламиОбменаСБанками КАК ЖурналОперацийСФайламиОбменаСБанками
	|ГДЕ
	|	ЖурналОперацийСФайламиОбменаСБанками.Идентификатор = &Идентификатор
	|	И ЖурналОперацийСФайламиОбменаСБанками.ИдентификаторАрхива <> """"");
	ЗапросАрхивов.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Возврат ЗапросАрхивов.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторАрхива");
	
КонецФункции

Функция ПодготовитьАрхивыВЖурналеОперацийСФайлами(Идентификатор, ПараметрыПрогрессаВыполнения) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПодготовитьАрхивыВЖурналеОперацийСФайлами(Идентификатор, "", ПараметрыПрогрессаВыполнения);
	
КонецФункции

#КонецОбласти