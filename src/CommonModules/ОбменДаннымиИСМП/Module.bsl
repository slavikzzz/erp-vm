#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаСообщений

// Подготовить к передаче универсально.
// 
// Параметры:
//  ВходящиеДанные - Массив из см. ОбменДаннымиИСМПКлиентСервер.ПараметрыОбработкиДокументов
//  ПараметрыОбмена - см. ПараметрыОбмена
// 
// Возвращаемое значение:
//  см. РезультатВыполненияОбменаДанными
Функция ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = РезультатВыполненияОбменаДанными();
	
	// Собрать JSON для передаваемых документов
	// Требуется подписание документа на клиенте? Если да, то документы требуется вернуть на клиент.
	// Нужен ли запрос авторизации? Если да, то документы нужно положить в очередь и вернуться на клиент для авторизации
	// После всего - выполнить передачу и дождаться результата - изменений.
	СообщенияJSON = Новый Массив;
	Для Каждого ПараметрыОбработкиДокумента Из ВходящиеДанные Цикл
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
		ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);
		
		Если ПараметрыОбработкиДокумента.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СогласиеОПредоставлениеИнформации Тогда
			
			МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
			СообщенияДокументаJSON = МодульИнтеграцияИСМПСлужебный.СообщениеКПередачеJSONСогласиеОПредоставлениеИнформации(
				ПараметрыОбработкиДокумента,
				ДополнительныеПараметры);
			
		Иначе
			
			СообщенияДокументаJSON = СообщениеКПередачеJSON(
				ПараметрыОбработкиДокумента.Ссылка,
				ПараметрыОбработкиДокумента.ДальнейшееДействие,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
		Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
			СообщенияJSON.Добавить(СообщениеJSON);
		КонецЦикла;
		
	КонецЦикла;
	
	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
	
	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                       И ПараметрыОбмена.СообщенияКПодписанию.Количество())
	                       Или (ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено
	                       И ПараметрыОбмена.КОбновлениюКлючейСессии.Количество());
	
	ТребуетсяОпределениеВидаУпаковки = ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено;

	ДоступныеСертификаты          = Неопределено;
	АдресКОпределениюВидаУпаковки = "";

	Если ТребуетсяОпределениеВидаУпаковки
		И ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда

		СообщенияКОпределениюВидаУпаковок = СообщенияКОпределениюВидаУпаковок(ПараметрыОбмена);

		ПроверитьКлючиСессии(
			СообщенияКОпределениюВидаУпаковок,
			СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

		ДоступныеСертификаты(СообщенияКОпределениюВидаУпаковок, ДоступныеСертификаты);
		
		МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
		АдресКОпределениюВидаУпаковки = МодульШтрихкодированиеИСМПСлужебный.ДанныеКОпределениюВидаУпаковки(ПараметрыОбмена);

		Если Не ЗначениеЗаполнено(АдресКОпределениюВидаУпаковки) Тогда
			ТребуетсяОпределениеВидаУпаковки = Ложь;
			ПараметрыОбмена.КОпределениюВидаУпаковки = Неопределено;
		КонецЕсли;

	КонецЕсли;

	Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ТребуетсяОпределениеВидаУпаковки Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание Или ТребуетсяОпределениеВидаУпаковки)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		ВозвращаемоеЗначение.КОпределениюВидаУпаковки       = АдресКОпределениюВидаУпаковки;

		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии  = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		Если ПараметрыОбмена.НастройкиОбменаСУЗ <> Неопределено Тогда
			Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
				Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
					НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Ожидать                   = ОбщегоНазначенияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПодготовитьКПередачеДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ВходящиеДанные    = ПараметрыФоновогоЗадания.ВходящиеДанные;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПодготовитьКПередачеУниверсально(ВходящиеДанные, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив из см. СтруктураСообщенияXML().
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеИдентификаторСоединения Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ;
		
		ПараметрыЗапросаИдентификатораСоединенияСУЗ = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры;
		
		НомерВерсии = 1;
		
		СообщенияJSON = Новый Массив;
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ПараметрыЗапросаИдентификатораСоединенияСУЗ.Организация;
		
		СообщениеJSON.Описание = ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СообщениеJSON.ПараметрыЗапроса = Новый Структура;
		СообщениеJSON.ПараметрыЗапроса.Вставить("address", ПараметрыЗапросаИдентификатораСоединенияСУЗ.ПараметрыЗапроса.Адрес);
		
		ТелоСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(
			СообщениеJSON.ПараметрыЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
		СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Операция           = Операция;
		СообщениеJSON.Версия             = НомерВерсии;
		
		СообщениеJSON.ТребуетсяПодписание       = Истина;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления["ВерсииФорматаОбменаСУЗ"]["V2"];
		СообщениеJSON.СтанцияУправленияЗаказами = ПараметрыЗапросаИдентификатораСоединенияСУЗ.СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = ПараметрыЗапросаИдентификатораСоединенияСУЗ.ПроизводственныйОбъект;
		
		СообщениеJSON.ПараметрыПодключенияКСУЗ = ПараметрыЗапросаИдентификатораСоединенияСУЗ.ПараметрыПодключенияКСУЗ;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ВозвращаемоеЗначение = СообщенияJSON;
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеМестаОсуществленияДеятельности Тогда
		
		Операция = Перечисления.ВидыОперацийИСМП.ЗапросМестОсуществленияДеятельности;
		
		ПараметрыЗапросаМОД = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры;
		
		НомерВерсии = 1;
		
		СообщенияJSON = Новый Массив;
		
		СообщениеJSON = СтруктураСообщенияJSON();
		СообщениеJSON.Организация = ПараметрыЗапросаМОД.Организация;
		СообщениеJSON.ВидПродукции = ПараметрыЗапросаМОД.ВидПродукции;
		
		СообщениеJSON.Описание = ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СообщениеJSON.ПараметрыЗапроса = Новый Структура;
		
		ТелоСообщенияJSON = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(
			СообщениеJSON.ПараметрыЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON = ТелоСообщенияJSON;
		СообщениеJSON.ТипСообщения       = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Операция           = Операция;
		СообщениеJSON.Версия             = НомерВерсии;
		
		СообщениеJSON.ТребуетсяПодписание       = Ложь;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления["ВерсииФорматаОбменаСУЗ"]["V2"];
		СообщениеJSON.СтанцияУправленияЗаказами = ПараметрыЗапросаМОД.СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = ПараметрыЗапросаМОД.ПроизводственныйОбъект;
		СообщениеJSON.ПараметрыПодключенияКСУЗ  = ПараметрыЗапросаМОД.ПараметрыПодключенияКСУЗ;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ВозвращаемоеЗначение = СообщенияJSON;
		
	Иначе
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ДокументСсылка);
		ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена) Экспорт
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	СообщенияНеТребующиеПодписания     = Новый Массив();
	
	Для Каждого СообщениеJSON Из СообщенияJSON Цикл
		
		ТребуетсяПодписание = СообщениеJSON.ТребуетсяПодписание И Не ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки);
		ТребуетсяПодписаниеДополнительногоСообщения = ТребуетсяПодписание И ЗначениеЗаполнено(СообщениеJSON.ТекстДополнительногоСообщенияJSON);
		
		ОтдельнаяОрганизацияПодписантДополнительногоСообщения = ?(ЗначениеЗаполнено(СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения)
			И СообщениеJSON.Организация <> СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения,
			СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения,
			Неопределено);
		
		СтрокаСертификата                         = Неопределено;
		СтрокаСертификатаДополнительногоСообщения = Неопределено;
		
		ДополнительноеСообщениеУспешноПодписано   = Ложь;
		
		Если СертификатыДляПодписанияНаСервере <> Неопределено И ТребуетсяПодписание Тогда
			
			МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
			
			СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
				СообщениеJSON.Организация,
				"Организация");
				
			Если ТребуетсяПодписаниеДополнительногоСообщения Тогда
				
				Если ЗначениеЗаполнено(ОтдельнаяОрганизацияПодписантДополнительногоСообщения) Тогда
					
					СтрокаСертификатаДополнительногоСообщения = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
						ОтдельнаяОрганизацияПодписантДополнительногоСообщения,
						"Организация");
						
				Иначе
					СтрокаСертификатаДополнительногоСообщения = СтрокаСертификата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ТребуетсяПодписание
			И СтрокаСертификата <> Неопределено) Или Не ТребуетсяПодписание Тогда
			
			Если ТребуетсяПодписание Тогда
				
				// Для подписания документов требуется открепленная подпись
				ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
				ПараметрыCMS.Открепленная = Истина;
				
				Если МенеджерКриптографии <> Неопределено Тогда
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
				КонецЕсли;
				
				ДанныеДляПодписания = СообщениеJSON.ТекстСообщенияJSON;
				
				Если ТипЗнч(СообщениеJSON.ПараметрыЗапроса) = Тип("Структура")
					И СообщениеJSON.ПараметрыЗапроса.Свойство("ДвоичныеДанныеДляПодписания") Тогда
					ДанныеДляПодписания = СообщениеJSON.ПараметрыЗапроса.ДвоичныеДанныеДляПодписания;
				КонецЕсли;
				
				РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
					ДанныеДляПодписания,
					ПараметрыCMS,
					СтрокаСертификата.СертификатКриптографии,
					МенеджерКриптографии);
					
				Если ТребуетсяПодписаниеДополнительногоСообщения И СтрокаСертификатаДополнительногоСообщения <> Неопределено Тогда
					
					ДанныеДляПодписанияДополнительногоСообщения = СообщениеJSON.ТекстДополнительногоСообщенияJSON;
					
					Если ТипЗнч(СообщениеJSON.ПараметрыЗапроса) = Тип("Структура")
						И СообщениеJSON.ПараметрыЗапроса.Свойство("ДвоичныеДанныеДляПодписанияДополнительногоСообщения") Тогда
						ДанныеДляПодписанияДополнительногоСообщения = СообщениеJSON.ПараметрыЗапроса.ДвоичныеДанныеДляПодписанияДополнительногоСообщения;
					КонецЕсли;
					
					РезультатПодписанияДопСообщения = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
						ДанныеДляПодписанияДополнительногоСообщения,
						ПараметрыCMS,
						СтрокаСертификатаДополнительногоСообщения.СертификатКриптографии,
						МенеджерКриптографии);
						
					Если РезультатПодписанияДопСообщения.Успех Тогда
						// если подписано дополнительное сообщение
						ДополнительноеСообщениеУспешноПодписано = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если РезультатПодписания.Успех И (Не ТребуетсяПодписаниеДополнительногоСообщения Или ДополнительноеСообщениеУспешноПодписано) Тогда
					
					ТребуетсяПодписание = Ложь;
					
					СвойстваПодписи = Новый Структура;
					СвойстваПодписи.Вставить("Подпись", РезультатПодписания.Подпись);
					
					СообщениеJSON.Вставить("СвойстваПодписи", СвойстваПодписи);
					СообщениеJSON.Вставить("Сертификат",      СтрокаСертификата.Сертификат);
					
					Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
					КонецЕсли;
					
					ПодписанныеСообщения = ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация];
					Если ПодписанныеСообщения = Неопределено Тогда
						ПодписанныеСообщенияПоОрганизациям.Вставить(СообщениеJSON.Организация, Новый Массив);
					КонецЕсли;
					
					ПодписанныеСообщенияПоОрганизациям[СообщениеJSON.Организация].Добавить(СообщениеJSON);
					
				КонецЕсли;
				
			Иначе
				
				СообщенияНеТребующиеПодписания.Добавить(СообщениеJSON);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяПодписание Тогда
			
			Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию = Новый Соответствие;
			КонецЕсли;
			
			СообщенияКПодписанию = ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация];
			Если СообщенияКПодписанию = Неопределено Тогда
				ПараметрыОбмена.СообщенияКПодписанию.Вставить(СообщениеJSON.Организация, Новый Массив);
			КонецЕсли;
			
			Если ТребуетсяПодписаниеДополнительногоСообщения Тогда
				
				Если Не ЗначениеЗаполнено(ОтдельнаяОрганизацияПодписантДополнительногоСообщения) Тогда
					ОтдельнаяОрганизацияПодписантДополнительногоСообщения = СообщениеJSON.Организация;
				КонецЕсли;
				
				Если ПараметрыОбмена.СообщенияКПодписанию[ОтдельнаяОрганизацияПодписантДополнительногоСообщения] = Неопределено Тогда
					ПараметрыОбмена.СообщенияКПодписанию.Вставить(ОтдельнаяОрганизацияПодписантДополнительногоСообщения, Новый Массив);
				КонецЕсли;
				
				ДополнительноеСообщениеJSON = ОбщегоНазначения.СкопироватьРекурсивно(СообщениеJSON);
				
				СообщениеJSON.СлужебныйИдентификатор = Новый УникальныйИдентификатор();
				
				ДополнительноеСообщениеJSON.СлужебныйИдентификатор            = Новый УникальныйИдентификатор();
				ДополнительноеСообщениеJSON.ИдентификаторОсновногоСообщения   = СообщениеJSON.СлужебныйИдентификатор;
				ДополнительноеСообщениеJSON.ТекстСообщенияJSON                = СообщениеJSON.ТекстДополнительногоСообщенияJSON;
				ДополнительноеСообщениеJSON.Описание                          = СообщениеJSON.ОписаниеДополнительное;
				Если СообщениеJSON.ПараметрыЗапроса.Свойство("ДвоичныеДанныеДляПодписанияДополнительногоСообщения") Тогда
					ДополнительноеСообщениеJSON.ПараметрыЗапроса.Вставить(
						"ДвоичныеДанныеДляПодписания",
						СообщениеJSON.ПараметрыЗапроса.ДвоичныеДанныеДляПодписанияДополнительногоСообщения);
				КонецЕсли;
				ДополнительноеСообщениеJSON.ТекстДополнительногоСообщенияJSON = "";
				ДополнительноеСообщениеJSON.ОрганизацияПодписиДополнительногоСообщения = Неопределено;
				
				СообщениеJSON.ТекстДополнительногоСообщенияJSON          = "";
				СообщениеJSON.ОрганизацияПодписиДополнительногоСообщения = Неопределено;
				
				ПараметрыОбмена.СообщенияКПодписанию[ОтдельнаяОрганизацияПодписантДополнительногоСообщения].Добавить(ДополнительноеСообщениеJSON);
				
			КонецЕсли;
			
			ПараметрыОбмена.СообщенияКПодписанию[СообщениеJSON.Организация].Добавить(СообщениеJSON);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СообщениеJSON Из СообщенияНеТребующиеПодписания Цикл
		Организация = СообщениеJSON.Организация;
		Если Организация = Неопределено Тогда
			Организация = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация");
		КонецЕсли;
		ЕстьСообщенияКПодписанию = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
			И ЗначениеЗаполнено(ПараметрыОбмена.СообщенияКПодписанию[Организация]));
		Если ЕстьСообщенияКПодписанию Тогда
			КоллекцияСообщений = МассивИзСоответствияПоКлючу(ПараметрыОбмена.СообщенияПослеПодписания, Организация);
			КоллекцияСообщений.Добавить(СообщениеJSON);
		Иначе
			КоллекцияСообщений = МассивИзСоответствияПоКлючу(
				ПодписанныеСообщенияПоОрганизациям,
				Организация);
			КоллекцияСообщений.Добавить(СообщениеJSON);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодписанныеСообщенияПоОрганизациям;
	
КонецФункции

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  ПодписанныеСообщенияПоОрганизациям - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. СтруктураСообщенияXML - сообщения к передаче
//  ПараметрыОбмена - см. ПараметрыОбмена
Процедура ПодготовитьПодписанныеСообщенияКПередаче(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПодписанныеСообщенияПоОрганизациям Цикл
		
		СообщенияJSON = КлючИЗначение.Значение;
		
		ПодготовитьСообщенияКПередаче(СообщенияJSON, ПараметрыОбмена);
		
	КонецЦикла;
	
	ПодписанныеСообщенияПоОрганизациям = Неопределено;
	
КонецПроцедуры

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  СообщенияXML    - Массив из см. СтруктураСообщенияXML- содержит структуру сообщений, которые подготавливаются к передаче
//    
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
//  ИдентификаторЗаявки - Строка, Неопределено -
Процедура ПодготовитьСообщенияКПередаче(СообщенияXML, ПараметрыОбмена, ИдентификаторЗаявки = Неопределено) Экспорт
	
	Если ТипЗнч(СообщенияXML) = Тип("Структура") Тогда
		КоллекцияСообщенийXML = Новый Массив;
		КоллекцияСообщенийXML.Добавить(СообщенияXML);
	Иначе
		КоллекцияСообщенийXML = СообщенияXML;
	КонецЕсли;
	
	Для Каждого Сообщение Из КоллекцияСообщенийXML Цикл
		
		Если ЗначениеЗаполнено(Сообщение.ИдентификаторЗаявки) Тогда
			ТекущийИдентификаторЗаявки = Сообщение.ИдентификаторЗаявки;
		Иначе
			ТекущийИдентификаторЗаявки = ИдентификаторЗаявки;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыОчереди = Новый Структура;
			// Назначение сообщений: ИСМП, МОТП или СУЗ
			РеквизитыОчереди.Вставить("ВидПродукции",                 Сообщение.ВидПродукции);
			РеквизитыОчереди.Вставить("Операция",                     Сообщение.Операция);
			РеквизитыОчереди.Вставить("Назначение",                   Сообщение.Назначение);
			РеквизитыОчереди.Вставить("СтанцияУправленияЗаказами",    Сообщение.СтанцияУправленияЗаказами);
			РеквизитыОчереди.Вставить("ПроизводственныйОбъект",       Сообщение.ПроизводственныйОбъект);
			
			// Источник
			РеквизитыОчереди.Вставить("Организация",                  Сообщение.Организация);
			РеквизитыОчереди.Вставить("Документ",                     Сообщение.Документ);
			РеквизитыОчереди.Вставить("ДокументОснование",            Сообщение.ДокументОснование);
			
			// Описание, протокол и очередь
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", Сообщение);
			РеквизитыОчереди.Вставить("ПротоколОбмена",               Неопределено);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               Сообщение.ЗагружатьПосле);
			РеквизитыОчереди.Вставить("ЗагружатьДо",                  Сообщение.ЗагружатьДо);
			РеквизитыОчереди.Вставить("ИдентификаторЗаявки",          ТекущийИдентификаторЗаявки);
			РеквизитыОчереди.Вставить("СообщениеОснование",           Сообщение.СообщениеОснование);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение,
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
			Исключение
				
				ТекстОшибки            = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ИС МП:
				           |%2';
				           |en = 'Сообщение ""%1"" не подготовлено к отправке в ИС МП:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			ИсходящееСообщение    = Неопределено;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания       = ТекущаяУниверсальнаяДата();
			ЭлементОчереди.Сообщение          = ИсходящееСообщение;
			ЭлементОчереди.СообщениеОснование = Сообщение.СообщениеОснование;
			
			ЭлементОчереди.Организация       = Сообщение.Организация;
			ЭлементОчереди.Документ          = Сообщение.Документ;
			ЭлементОчереди.ДокументОснование = Сообщение.ДокументОснование;
			
			ЭлементОчереди.ВидПродукции              = Сообщение.ВидПродукции;
			ЭлементОчереди.Операция                  = Сообщение.Операция;
			ЭлементОчереди.Назначение                = Сообщение.Назначение;
			ЭлементОчереди.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			ЭлементОчереди.ПроизводственныйОбъект    = Сообщение.ПроизводственныйОбъект;
			
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Сообщение;
			ЭлементОчереди.ПротоколОбмена               = Неопределено;
			ЭлементОчереди.ИдентификаторЗаявки          = ТекущийИдентификаторЗаявки;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2     = Сообщение.ЗагружатьПосле;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ЗагружатьДо) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = Сообщение.ЗагружатьДо;
				НоваяЗависимость.Сообщение2     = ИсходящееСообщение;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
		Иначе
			
			СтрокаРезультата = СтруктураИзменения();
			
			СтрокаРезультата.Операция                  = Сообщение.Операция;
			СтрокаРезультата.Назначение                = Сообщение.Назначение;
			СтрокаРезультата.СтанцияУправленияЗаказами = Сообщение.СтанцияУправленияЗаказами;
			
			СтрокаРезультата.Организация           = Сообщение.Организация;
			СтрокаРезультата.Объект                = Сообщение.Документ;
			СтрокаРезультата.ДокументОснование     = Сообщение.ДокументОснование;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			СтрокаРезультата.НовыйСтатус           = Неопределено;
			СтрокаРезультата.ОбъектИзменен         = Ложь;
			
			СтрокаРезультата.Сообщение                    = Сообщение.Идентификатор;
			СтрокаРезультата.ТекстСообщения               = "";
			СтрокаРезультата.ПредставлениеПротоколаОбмена = "";
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис ВетИС.
//
// Параметры:
//  Сообщение - см. СтруктураСообщенияXML
//  РеквизитыОчереди - Неопределено, Структура - Параметры очереди сообщений ВетИС
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус - Неопределено, ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - новый статус
//    * ИсходящееСообщение - Строка, Неопределено - идентификатор сообщения
//    * ТекстОшибки - Строка - текст ошибки
//
Функция ПодготовитьСообщениеКПередаче(Сообщение, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",        "");
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не ЗначениеЗаполнено(Сообщение.Идентификатор) Тогда
			ИсходящееСообщение = Строка(Новый УникальныйИдентификатор);
		Иначе
			ИсходящееСообщение = Сообщение.Идентификатор;
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		Если РеквизитыОчереди <> Неопределено
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца
			Тогда
			
			ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение.Документ)
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
			И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца
			Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Сообщение.Документ);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(
				Сообщение.Документ, Сообщение.Операция, Сообщение.ПараметрыЗапроса);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2';
			           |en = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Сообщение.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПодготовитьСообщенияКПередачеПовторно(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей) Экспорт

	СообщенияJSON = Новый Массив;

	ПараметрыОбработкиДокумента = Новый Структура;

	ПараметрыОбработкиДокумента = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОбмена",             ПараметрыОбмена);
	ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);
	ДополнительныеПараметры.Вставить("Сообщение",                   ЭлементОчереди.Сообщение);
	
	СообщенияДокументаJSON = СообщениеКПередачеJSON(
		ПараметрыОбработкиДокумента.Ссылка,
		ПараметрыОбработкиДокумента.ДальнейшееДействие,
		ДополнительныеПараметры);

	Для Каждого СообщениеJSON Из СообщенияДокументаJSON Цикл
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЦикла;

	СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

	ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);

	// Добавить подписанные сообщения в очередь сообщений
	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);

	// Исходное виртуальное сообщение более не актуально. В регистр сведений сообщение не записывалось.
	УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

КонецПроцедуры

Процедура ПодготовитьСообщенияПоАбстрактнойОперацииПодключениеКОборудованиюРозлива(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей)
	
	КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
		ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация));
	
	РезультатЗапросаАбстрактный = Новый Структура();
	РезультатЗапросаАбстрактный.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатЗапросаАбстрактный, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	ДанныеЗапросаСтатусов = Новый Массив;
	
	СтрокаКодаМаркировки = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
		ПараметрыЗапроса.КодМаркировкиСтрокой,
		ЭлементОчереди.ВидПродукции,
		ПользовательскиеПараметрыРазбораКодаМаркировки);
	ДанныеЗапросаСтатусов.Добавить(СтрокаКодаМаркировки);
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		МодульИнтерфейсМОТП = ОбщегоНазначения.ОбщийМодуль("ИнтерфейсМОТП");
		Результат = МодульИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(
			ДанныеЗапросаСтатусов,
			ЭлементОчереди.Организация);
		
		Если ТребуетсяОбновлениеКлючаСессии(Результат, ЭлементОчереди, ПараметрыОбмена) Тогда
			Возврат;
		ИначеЕсли Результат.СтатусыКодовМаркировки = Неопределено Тогда
			Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
				ВызватьИсключение Результат.ТекстОшибки;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ДанныеСтатуса = Результат.СтатусыКодовМаркировки[СтрокаКодаМаркировки];
		
	Иначе
		
		ДанныеСтатуса = Новый Структура("ОсобоеСостояние,ДатаПодключения,ГоденДо");
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	
	ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений();
	ТаблицыБлокируемыхСсылок.Колонки.Добавить("КодМаркировки", Метаданные.ОпределяемыеТипы.ШтрихкодУпаковкиИС.Тип);
	ТаблицыБлокируемыхСсылок.Колонки.Добавить("ДанныеПодключения");
	ТаблицыБлокируемыхСсылок.Колонки.Добавить("УдалитьКодМаркировки",  Новый ОписаниеТипов("Булево"));
	
	Если ДанныеСтатуса.ОсобоеСостояние = Перечисления.СтатусыКодовМаркировкиИСМП.ПодключенКОборудованиюРозлива Тогда
		
		НоваяСтрока = ТаблицыБлокируемыхСсылок.Добавить();
		НоваяСтрока.КодМаркировки = ПараметрыЗапроса.КодМаркировки;
	
		НоваяСтрока.ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
		НоваяСтрока.ДанныеПодключения.ДатаПодключения = ДанныеСтатуса.ДатаПодключения;
		НоваяСтрока.ДанныеПодключения.СрокРеализации  = ДанныеСтатуса.ГоденДо;
		НоваяСтрока.ДанныеПодключения.КодМаркировки   = ПараметрыЗапроса.КодМаркировки;
		
	Иначе
		
		ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализации.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализации.НачинаетсяСоСкобки       = Ложь;
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("participantInn", ПараметрыЗапроса.ИНН);
		Если СтрДлина(ПараметрыЗапроса.ИНН) < 12 Тогда
			ТелоЗапроса.Вставить("participantKpp", ПараметрыЗапроса.КПП);
		Иначе
			Если ЗначениеЗаполнено(ПараметрыЗапроса.КодФИАС) Тогда
				ТелоЗапроса.Вставить("fiasId", ПараметрыЗапроса.КодФИАС);
			КонецЕсли;
		КонецЕсли;
	
		ТелоЗапроса.Вставить("codes", Новый Массив);
		
		СтрокаДанных = Новый Структура;
		СтрокаДанных.Вставить(
			"cis",
			КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации));
		СтрокаДанных.Вставить("connectDate", Формат(ПараметрыЗапроса.ДатаПодключения, "ДФ=yyyy-MM-dd;"));
		Если ЗначениеЗаполнено(ПараметрыЗапроса.СрокРеализации) Тогда
			СтрокаДанных.Вставить("expirationDate", Формат(ПараметрыЗапроса.СрокРеализации, "ДФ=yyyy-MM-dd;"));
		КонецЕсли;
		
		ТелоЗапроса.codes.Добавить(СтрокаДанных);
		
		СообщениеJSON = ЗаполнитьСообщениеJSONКПередаче(
			ТелоЗапроса,
			Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки,
			ЭлементОчереди);
		
		СообщениеJSON.ПараметрыЗапроса = Новый Структура;
		СообщениеJSON.ПараметрыЗапроса.Вставить("КодМаркировки", ПараметрыЗапроса.КодМаркировки);
		
		СообщениеJSON.Версия             = ПараметрыЗапроса.НомерВерсии;
		СообщениеJSON.СообщениеОснование = ЭлементОчереди.Сообщение;
		СообщениеJSON.ЗагружатьДо        = ЭлементОчереди.Сообщение;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
		ПодписанныеСообщенияПоОрганизациям = СообщенияКПередаче(СообщенияJSON, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
		
		ПроверитьКлючиСессии(ПодписанныеСообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена);
		
		// Добавить подписанные сообщения в очередь сообщений
		ПодготовитьПодписанныеСообщенияКПередаче(
			ПодписанныеСообщенияПоОрганизациям,
			ПараметрыОбмена);
		
		ИдентификаторЗаявки = СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписей,
			ИдентификаторЗаявки,
			Неопределено,
			Неопределено);
		
		ЭлементОчереди.ИдентификаторЗаявки = ИдентификаторЗаявки;
		ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		
	КонецЕсли;
	
	Если ТаблицыБлокируемыхСсылок.Количество() Тогда
		
		БлокировкаДанных = Новый БлокировкаДанных();
	
		ЭлементБлокировки = БлокировкаДанных.Добавить(Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки", "КодМаркировки");
		
		//@skip-check lock-out-of-try
		БлокировкаДанных.Заблокировать();
		
		Для Каждого СтрокаТаблицы Из ТаблицыБлокируемыхСсылок Цикл
			
			Если СтрокаТаблицы.ДанныеПодключения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(
				СтрокаТаблицы.КодМаркировки)[СтрокаТаблицы.КодМаркировки];
				
			Если ДанныеПодключения = Неопределено Тогда
				Продолжить; // КМ был удален ранее (до обработки документа)
			КонецЕсли;
			
			Если ДанныеПодключения.Статус = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено Тогда
				РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ЗаписатьВскрытиеПотребительскойУпаковки(
					СтрокаТаблицы.ДанныеПодключения,
					ДанныеПодключения);
			Иначе
				РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.УдалитьВскрытыеПотребительскиеУпаковки(СтрокаТаблицы.КодМаркировки);
			КонецЕсли;
			
		КонецЦикла;
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     Результат.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               Результат.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", Результат.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2';
					           |en = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					Результат.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1';
					           |en = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1'"),
					Результат.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
	Если СообщенияJSON.Количество() = 0 Тогда
		ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

// Добавить сообщение в регистра сведений ОчередьСообщенийИСМП.
//
// Параметры:
//  Сообщение - СправочникСсылка.ИСМППрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  Реквизиты - Структура                          - реквизиты очереди сообщений ИС МП.
//
Процедура ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьМенеджерЗаписи();
	НоваяЗапись.ДатаСоздания       = ТекущаяУниверсальнаяДата();
	НоваяЗапись.Сообщение          = Сообщение;
	НоваяЗапись.СообщениеОснование = Реквизиты.СообщениеОснование;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	НоваяЗапись.ВидПродукции              = Реквизиты.ВидПродукции;
	НоваяЗапись.Операция                  = Реквизиты.Операция;
	НоваяЗапись.Назначение                = Реквизиты.Назначение;
	НоваяЗапись.СтанцияУправленияЗаказами = Реквизиты.СтанцияУправленияЗаказами;
	
	// Источник
	НоваяЗапись.Организация       = Реквизиты.Организация;
	НоваяЗапись.Документ          = Реквизиты.Документ;
	НоваяЗапись.ДокументОснование = Реквизиты.ДокументОснование;
	
	// Описание, протокол и очередь
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.ПротоколОбмена               = Новый ХранилищеЗначения(Неопределено);
	НоваяЗапись.ЗагружатьПосле               = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.ЗагружатьДо                  = Реквизиты.ЗагружатьДо;
	НоваяЗапись.ИдентификаторЗаявки          = Реквизиты.ИдентификаторЗаявки;
	
	НоваяЗапись.Записать();
	
КонецПроцедуры

// Приводит код маркировки к виду, необходимому для системы ИС МП.
// 
// Параметры:
//  СтрокаКодаМаркировки - Структура - Строка кода маркировки.
//  ПараметрыНормализации - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки
// Возвращаемое значение:
//  Неопределено, Строка - Код маркировки после нормализации.
Функция КодМаркировкиДляПередачиИСМП(СтрокаКодаМаркировки, ПараметрыНормализации) Экспорт
	
	ЗначениеДляПоиска = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
		СтрокаКодаМаркировки, СтрокаКодаМаркировки.ВидПродукции, ПараметрыНормализации);
	
	Возврат ЗначениеДляПоиска;
	
КонецФункции

// Создает структуру сообщения для отправки и заполняет основные значения по общему элементу очереди.
// 
// Параметры:
//  ТелоЗапроса - Структура - Структура данных для создания сообщения.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП -  операция обмена.
//  ОбщийЭлементОчереди - СтрокаТаблицыЗначений - (См. ОбменДаннымиИСМП.ИнициализиоватьОчередьСообщений).
//  
// Возвращаемое значение:
//  Структура - см. СтруктураСообщенияJSON
//
Функция ЗаполнитьСообщениеJSONКПередаче(ТелоЗапроса, Операция, ОбщийЭлементОчереди) Экспорт
	
	СообщениеJSON = СтруктураСообщенияJSON();
	СообщениеJSON.Идентификатор = Строка(Новый УникальныйИдентификатор());
	
	СообщениеJSON.Организация       = ОбщийЭлементОчереди.Организация;
	СообщениеJSON.Документ          = ОбщийЭлементОчереди.Документ;
	СообщениеJSON.ДокументОснование = ОбщийЭлементОчереди.ДокументОснование;
	
	СообщениеJSON.Описание = ОписаниеОперацииПередачиДанных(Операция, ОбщийЭлементОчереди.Документ);
	
	СообщениеJSON.ТекстСообщенияJSON  = ОбменДаннымиИСМПКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = Неопределено;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.СообщениеОснование  = ОбщийЭлементОчереди.Сообщение;
	СообщениеJSON.ПараметрыЗапроса    = Неопределено;
	
	СообщениеJSON.ВидПродукции = ОбщийЭлементОчереди.ВидПродукции;
	СообщениеJSON.Операция     = Операция;
	СообщениеJSON.Назначение   = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	//@skip-check constructor-function-return-section
	Возврат СообщениеJSON;
	
КонецФункции

#КонецОбласти

#Область КонструкторыСтруктур

// Возвращает структуру параметров обмена.
// 
// Параметры:
//  Организации - Неопределено - Организации
//  УникальныйИдентификатор - Неопределено - Уникальный идентификатор
//  ЭтоРегламентноеЗадание - Булево - Это регламентное задание
// 
// Возвращаемое значение:
//  Структура - Параметры обмена:
// * НастройкиОбменаСУЗ - Неопределено
//                      - см. ИнтеграцияИСМП.НастройкиОбменаСУЗ
// * Организации - Неопределено - 
// * КОбновлениюКлючейСессии - Неопределено - 
// * СообщенияКПодписанию - Неопределено - 
// * КОпределениюВидаУпаковки - Неопределено - 
// * СообщенияПослеПодписания - Неопределено - 
// * ОжидатьНаСервере - Булево - 
// * ОжидатьНаКлиенте - Булево - 
// * ФоновоеЗадание - Неопределено - 
// * Изменения - Массив из см. СтруктураИзменения - 
// * ОбработанныеЭлементыОчереди - Массив из СтрокаТаблицыЗначений - 
// * ОчередьСообщений - см. ИнициализиоватьОчередьСообщений
// * ЗависимостиСообщений - см. ИнициализироватьЗависимостиСообщений
// * УникальныйИдентификатор - Неопределено - 
// * АдресВоВременномХранилище - Неопределено - 
// * АдресДанныхЛогаЗапроса - Неопределено - 
// * АдресКОпределениюВидаУпаковки - Неопределено - 
// * СтопЛист - ТаблицаЗначений - :
// ** Организация - ОпределяемыйТип.Организация
// * КонтрольКоличестваЗаказовСУЗ - Соответствие из КлючиЗначение - 
Функция ПараметрыОбмена(Организации = Неопределено, УникальныйИдентификатор = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("НастройкиОбменаСУЗ", Неопределено);
	ПараметрыОбмена.Вставить("Организации",        Организации);
	
	ПараметрыОбмена.Вставить("КОбновлениюКлючейСессии",  Неопределено);
	ПараметрыОбмена.Вставить("СообщенияКПодписанию",     Неопределено);
	ПараметрыОбмена.Вставить("КОпределениюВидаУпаковки", Неопределено);
	ПараметрыОбмена.Вставить("СообщенияПослеПодписания", Неопределено);
	
	ПараметрыОбмена.Вставить("ОжидатьНаСервере", Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте", Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",   Неопределено);
	
	ПараметрыОбмена.Вставить("Изменения", Новый Массив);
	
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            ИнициализиоватьОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        ИнициализироватьЗависимостиСообщений());
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресДанныхЛогаЗапроса", Неопределено);
	КонецЕсли;
	
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресКОпределениюВидаУпаковки", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресКОпределениюВидаУпаковки", Неопределено);
	КонецЕсли;
	
	ТаблицаСтопЛист = Новый ТаблицаЗначений;
	ТаблицаСтопЛист.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	ПараметрыОбмена.Вставить("СтопЛист",                     ТаблицаСтопЛист);
	ПараметрыОбмена.Вставить("КонтрольКоличестваЗаказовСУЗ", Новый Соответствие());
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		ПараметрыОбмена.НастройкиОбменаСУЗ = МодульИнтеграцияИСМП.НастройкиОбменаСУЗ(Организации, ЭтоРегламентноеЗадание)
	КонецЕсли;
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Функция ИнициализиоватьОчередьСообщений()

	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	ОчередьСообщений.Колонки.Добавить("СообщениеОснование");
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	ОчередьСообщений.Колонки.Добавить("ВидПродукции");
	ОчередьСообщений.Колонки.Добавить("Операция");
	ОчередьСообщений.Колонки.Добавить("Назначение");
	ОчередьСообщений.Колонки.Добавить("СтанцияУправленияЗаказами");
	ОчередьСообщений.Колонки.Добавить("ПроизводственныйОбъект");
	
	// Источник
	ОчередьСообщений.Колонки.Добавить("Организация");
	ОчередьСообщений.Колонки.Добавить("Документ");
	ОчередьСообщений.Колонки.Добавить("ДокументОснование");
	
	// Описание, протокол и очередь
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("ПротоколОбмена");
	ОчередьСообщений.Колонки.Добавить("ДатаМодификацииУниверсальная", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЗаявки");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторПоследнегоБлокаКодов");
	
	// Временная техническая информация
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатус");
	ОчередьСообщений.Колонки.Добавить("ТекущийСтатусОбработки");
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	// Индексы
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	ОчередьСообщений.Индексы.Добавить("СтанцияУправленияЗаказами, ИдентификаторЗаявки");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция ИнициализироватьЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	// Индексы
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	
	Возврат ЗависимостиСообщений;

КонецФункции

// Формирует пустую структуру сообщения XML
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                       - Строка - Текст ошибки.
//   * Ошибки                            - Соответствие из КлючИЗначение - Описание ошибок.
//   * Описание                          - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияJSON                - Строка - Текст сообщения JSON.
//   * ТекстДополнительногоСообщенияJSON - Строка - Текст дополнительного сообщения JSON.
//   * СлужебныйИдентификатор            - УникальныйИдентификатор - для поиска основного сообщения в случае передачи двух
//   	сообщений через ТекстСообщенияJSON и ТекстДополнительногоСообщенияJSON в одном.
//   	Заполняется для основного сообщения в ходе обмена.
//   * ИдентификаторОсновногоСообщения   - УникальныйИдентификатор - для поиска основного сообщения в случае передачи двух
//   	сообщений через ТекстСообщенияJSON и ТекстДополнительногоСообщенияJSON в одном.
//   	Присваивается значение из поля СлужебныйИдентификатор для дополнительного сообщения в ходе обмена.
//   * ОрганизацияПодписиДополнительногоСообщения - ОпределяемыйТип.Организация - организация, подписывающая дополнительное сообщение
//   * ТипЗапроса                        - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Организация                       - ОпределяемыйТип.Организация - Организация.
//   * Операция                          - ПеречислениеСсылка.ВидыОперацийИСМП - Вид операции.
//   * Документ                          - ДокументСсылка - Документ.
//   * Версия                            - Строка - Версия сообщения.
//   * СообщениеОснование                - СправочникСсылка.ИСМППрисоединенныеФайлы, Строка - сообщение основание.
//   * ДанныеДляПолученияДокумента       - Структура - Данные для получения документа.
//   * ДокументОснование                 - ДокументСсылка - Документ основание.
Функция СтруктураСообщенияJSON() Экспорт
	
	СообщениеJSON = Новый Структура;
	
	СообщениеJSON.Вставить("ТекстОшибки", "");
	СообщениеJSON.Вставить("Ошибки", Новый Соответствие);
	СообщениеJSON.Вставить("ИдентификаторЗаявки");

	// Для отображения в форме подписания
	СообщениеJSON.Вставить("Описание", "");
	// Для управления очередностью
	СообщениеJSON.Вставить("Идентификатор");
	СообщениеJSON.Вставить("ЗагружатьДо");
	СообщениеJSON.Вставить("ЗагружатьПосле");
	
	// Для использования в механизмах электронной подписи
	СообщениеJSON.Вставить("ТекстСообщенияJSON");
	СообщениеJSON.Вставить("ТребуетсяПодписание");
	СообщениеJSON.Вставить("ТипСообщения");
	СообщениеJSON.Вставить("Версия", 0);
	
	СообщениеJSON.Вставить("ТекстДополнительногоСообщенияJSON");
	СообщениеJSON.Вставить("ОрганизацияПодписиДополнительногоСообщения");
	СообщениеJSON.Вставить("СлужебныйИдентификатор");
	СообщениеJSON.Вставить("ИдентификаторОсновногоСообщения");
	// Для отображения в форме подписания для дополнительного сообщения
	СообщениеJSON.Вставить("ОписаниеДополнительное", "");
	
	// Для сохранения в Протокол обмена
	СообщениеJSON.Вставить("ВерсияГосИС");
	СообщениеJSON.Вставить("ВидПродукции");
	СообщениеJSON.Вставить("Операция");
	СообщениеJSON.Вставить("Назначение");
	СообщениеJSON.Вставить("ФорматОбмена");
	СообщениеJSON.Вставить("СтанцияУправленияЗаказами");
	СообщениеJSON.Вставить("ПроизводственныйОбъект");
	
	// Используется при запросах квитанций
	СообщениеJSON.Вставить("СообщениеОснование");
	
	// Используется при получении кодов маркировки из СУЗ
	СообщениеJSON.Вставить("ПараметрыЗапроса");
	СообщениеJSON.Вставить("ПараметрыПодключенияКСУЗ");
	
	// Для обновления в формах
	СообщениеJSON.Вставить("Организация");
	СообщениеJSON.Вставить("Документ");
	СообщениеJSON.Вставить("ДокументОснование");
	
	//@skip-check constructor-function-return-section
	Возврат СообщениеJSON;
	
КонецФункции

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	
	// Назначение сообщений: ИСМП, МОТП или СУЗ
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("Назначение");
	СтруктураИзменения.Вставить("СтанцияУправленияЗаказами");
	
	// Источник
	СтруктураИзменения.Вставить("Организация");
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДокументОснование");
	
	// Событие
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ОбъектИзменен",         Ложь);
	СтруктураИзменения.Вставить("НовыйСтатус",           Неопределено);
	
	// Описание, протокол
	СтруктураИзменения.Вставить("Сообщение");
	СтруктураИзменения.Вставить("ТекстСообщения");
	СтруктураИзменения.Вставить("ПредставлениеПротоколаОбмена");
	
	//@skip-check constructor-function-return-section
	Возврат СтруктураИзменения;
	
КонецФункции

Функция ПараметрыСеансаИС() Экспорт
	
	ПараметрыСеансаИС = Новый Структура;
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП",          Неопределено);
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСУЗ",           Неопределено);
	ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМПРозница",   Неопределено);
	ПараметрыСеансаИС.Вставить("CDNПлощадкиСОшибкамиОбменаИСМП", Неопределено);
	ПараметрыСеансаИС.Вставить(
		"ПараметрыЛогированияЗапросовИСМП",
		ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов());
	
	УчитываемыеВидыМаркируемойПродукции = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции();
	
	Если УчитываемыеВидыМаркируемойПродукции.Количество() > 0 Тогда
		//@skip-check empty-except-statement
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМП", ПараметрыСеанса.ДанныеКлючаСессииИСМП);
		Исключение
			// Действие не требуется
		КонецПопытки;
		//@skip-check empty-except-statement
		Попытка
			ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииИСМПРозница", ПараметрыСеанса.ДанныеКлючаСессииИСМПРозница);
		Исключение
			// Действие не требуется
		КонецПопытки;
		//@skip-check empty-except-statement
		Попытка
			ПараметрыСеансаИС.Вставить("CDNПлощадкиСОшибкамиОбменаИСМП", ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП);
		Исключение
			// Действие не требуется
		КонецПопытки;
		Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
			//@skip-check empty-except-statement
			Попытка
				ПараметрыСеансаИС.Вставить("ДанныеКлючаСессииСУЗ", ПараметрыСеанса["ДанныеКлючаСессииСУЗ"]);
			Исключение
				// Действие не требуется
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыСеансаИС;
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
//  ТекстПоКоличествуСообщений - Строка - Текст с количеством сообщений
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии, ТекстПоКоличествуСообщений);
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ЕГАИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеДанных.Получить(ОперацияПередачиДанных);
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  Описание - Строка - Описание операции
//  ДокументСсылка - ДокументСсылка - Документ
//  НомерВерсии - Число - Номер версии
//  ТекстПоКоличествуСообщений - Строка - Текст с количеством сообщений
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено, ТекстПоКоличествуСообщений = Неопределено)
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2""';
										|en = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1. Версия %2';
										|en = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		ТекстВозврата = СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3';
										|en = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстПоКоличествуСообщений) Тогда
		ТекстВозврата = ТекстВозврата + ". " + ТекстПоКоличествуСообщений;
	КонецЕсли;
	
	Возврат ТекстВозврата;

КонецФункции

// Возвращает операции обмена с ИС МП, разбитые на категории
// 
// Возвращаемое значение:
//  Структура - со свойствами:
//    * ПередачаДанных - Соответствие из КлючиЗначение - Операции передачи данных.
//    * ПолучениеДанных - Соответствие из КлючиЗначение - Операции получения данных.
//
Функция КатегорииОпераций()
	
	ПередачаДанных = Новый Соответствие;
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Оформление заказа на эмиссию кодов маркировки';
			|en = 'Оформление заказа на эмиссию кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Оформление GTIN для маркировки остатков продукции';
			|en = 'Оформление GTIN для маркировки остатков продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиРасчетСтатуса,
		НСтр("ru = 'Расчет статуса заказа на эмиссию (Абстрактная операция)';
			|en = 'Расчет статуса заказа на эмиссию (Абстрактная операция)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо,
		НСтр("ru = 'Дозагрузки кодов маркировки';
			|en = 'Дозагрузки кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ,
		НСтр("ru = 'Закрытие заказа на эмиссию кодов маркировки';
			|en = 'Закрытие заказа на эмиссию кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗакрытиеЗаказаНаЭмиссиюСУЗ,
		НСтр("ru = 'Закрытие заказа на эмиссию';
			|en = 'Закрытие заказа на эмиссию'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Агрегация,
		НСтр("ru = 'Передача сведений об агрегации кодов маркировки';
			|en = 'Передача сведений об агрегации кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание,
		НСтр("ru = 'Передача сведений о формировании агрегата';
			|en = 'Передача сведений о формировании агрегата'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора,
		НСтр("ru = 'Передача сведений о формировании набора';
			|en = 'Передача сведений о формировании набора'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение,
		НСтр("ru = 'Передача сведений о переагрегации';
			|en = 'Передача сведений о переагрегации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление,
		НСтр("ru = 'Передача сведений о расформировании агрегата';
			|en = 'Передача сведений о расформировании агрегата'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса,
		НСтр("ru = 'Передача сведений в СУЗ об агрегации кодов маркировки (Расчет статуса)';
			|en = 'Передача сведений в СУЗ об агрегации кодов маркировки (Расчет статуса)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТК,
		НСтр("ru = 'Передача сведений об обработке кодов АТК';
			|en = 'Передача сведений об обработке кодов АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКСоздание,
		НСтр("ru = 'Передача сведений о формировании АТК';
			|en = 'Передача сведений о формировании АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКИзменение,
		НСтр("ru = 'Передача сведений о трансформации АТК';
			|en = 'Передача сведений о трансформации АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АТКУдаление,
		НСтр("ru = 'Передача сведений о расформировании АТК';
			|en = 'Передача сведений о расформировании АТК'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса,
		НСтр("ru = 'Передача сведений о переагрегации (абстрактная операция)';
			|en = 'Передача сведений о переагрегации (абстрактная операция)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента,
		НСтр("ru = 'Проверка статуса обработки документа агрегации';
			|en = 'Проверка статуса обработки документа агрегации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборот,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции';
			|en = 'Передача сведений о вводе в оборот маркированной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции собственного производства';
			|en = 'Передача сведений о вводе в оборот маркированной продукции собственного производства'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции';
			|en = 'Передача сведений о вводе в оборот маркированной импортной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции (с ФТС)';
			|en = 'Передача сведений о вводе в оборот маркированной импортной продукции (с ФТС)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной импортной продукции (мех, с ФТС)';
			|en = 'Передача сведений о вводе в оборот маркированной импортной продукции (мех, с ФТС)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору';
			|en = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика,
		НСтр("ru = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору';
			|en = 'Передача сведений о вводе в оборот маркированной продукции, произведенной по договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц,
		НСтр("ru = 'Передача сведений о вводе в оборот продукции, полученной от физических лиц';
			|en = 'Передача сведений о вводе в оборот продукции, полученной от физических лиц'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков,
		НСтр("ru = 'Передача сведений о вводе в оборот остатков продукции';
			|en = 'Передача сведений о вводе в оборот остатков продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля,
		НСтр("ru = 'Передача сведений о вводе в оборот при трансграничной торговле';
			|en = 'Передача сведений о вводе в оборот при трансграничной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса,
		НСтр("ru = 'Передача сведений о вводе в оборот (Расчет статуса)';
			|en = 'Передача сведений о вводе в оборот (Расчет статуса)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ,
		НСтр("ru = 'Передача сведений об индивидуализации КИЗ';
			|en = 'Передача сведений об индивидуализации КИЗ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ,
		НСтр("ru = 'Передача сведений о подтверждении поступления КИЗ';
			|en = 'Передача сведений о подтверждении поступления КИЗ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса,
		НСтр("ru = 'Передача сведений о подтверждении поступления КИЗ (расчет статуса)';
			|en = 'Передача сведений о подтверждении поступления КИЗ (расчет статуса)'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборота,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции';
			|en = 'Передача сведений о выводе из оборота продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при конфискации товаров';
			|en = 'Передача сведений о выводе из оборота продукции при конфискации товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при уничтожении товаров';
			|en = 'Передача сведений о выводе из оборота продукции при уничтожении товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при банкротстве или ликвидации организации';
			|en = 'Передача сведений о выводе из оборота продукции при банкротстве или ликвидации организации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при безвозмездной передаче товара';
			|en = 'Передача сведений о выводе из оборота продукции при безвозмездной передаче товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при внутреннем использовании продукции';
			|en = 'Передача сведений о выводе из оборота продукции при внутреннем использовании продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при возврате товара физическому лицу';
			|en = 'Передача сведений о выводе из оборота продукции при возврате товара физическому лицу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции в процессе реализации продукции по договору рассрочки';
			|en = 'Передача сведений о выводе из оборота продукции в процессе реализации продукции по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже по кредитному договору';
			|en = 'Передача сведений о выводе из оборота продукции при розничной продаже по кредитному договору'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при порче или утери товара';
			|en = 'Передача сведений о выводе из оборота продукции при порче или утери товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации конфискованной продукции';
			|en = 'Передача сведений о выводе из оборота продукции при реализации конфискованной продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при реализации по договору рассрочки';
			|en = 'Передача сведений о выводе из оборота продукции при реализации по договору рассрочки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже';
			|en = 'Передача сведений о выводе из оборота продукции при розничной продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДляЦелейВРозницу,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при розничной продаже';
			|en = 'Передача сведений о выводе из оборота продукции при розничной продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте в ЕАЭС';
			|en = 'Передача сведений о выводе из оборота продукции при экспорте в ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при экспорте за пределы ЕАЭС';
			|en = 'Передача сведений о выводе из оборота продукции при экспорте за пределы ЕАЭС'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота при дистанционной торговле';
			|en = 'Передача сведений о выводе из оборота при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам,
		НСтр("ru = 'Передача сведений о выводе из оборота при продаже по образцам';
			|en = 'Передача сведений о выводе из оборота при продаже по образцам'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа,
		НСтр("ru = 'Передача сведений о выводе из оборота при дистанционной продаже';
			|en = 'Передача сведений о выводе из оборота при дистанционной продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак,
		НСтр("ru = 'Передача сведений о выводе из оборота бракованного товара';
			|en = 'Передача сведений о выводе из оборота бракованного товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности,
		НСтр("ru = 'Передача сведений о выводе из оборота товара по истечению срока годности';
			|en = 'Передача сведений о выводе из оборота товара по истечению срока годности'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы,
		НСтр("ru = 'Передача сведений о выводе из оборота лабораторных образцов';
			|en = 'Передача сведений о выводе из оборота лабораторных образцов'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка,
		НСтр("ru = 'Передача сведений о выводе из оборота при отзыве с рынка';
			|en = 'Передача сведений о выводе из оборота при отзыве с рынка'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации,
		НСтр("ru = 'Передача сведений о выводе из оборота при рекламации';
			|en = 'Передача сведений о выводе из оборота при рекламации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины,
		НСтр("ru = 'Передача сведений о выводе из оборота по другим причинам';
			|en = 'Передача сведений о выводе из оборота по другим причинам'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта,
		НСтр("ru = 'Передача сведений о выводе из оборота при тестировании продукта';
			|en = 'Передача сведений о выводе из оборота при тестировании продукта'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое,
		НСтр("ru = 'Передача сведений о выводе из оборота по другим причинам';
			|en = 'Передача сведений о выводе из оборота по другим причинам'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну,
		НСтр("ru = 'Передача сведений о выводе из оборота при продаже по сделкам, составляющим гос. тайну';
			|en = 'Передача сведений о выводе из оборота при продаже по сделкам, составляющим гос. тайну'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей,
		НСтр("ru = 'Передача сведений о выводе из оборота при использовании продукции для производственных целей';
			|en = 'Передача сведений о выводе из оборота при использовании продукции для производственных целей'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара,
		НСтр("ru = 'Передача сведений о выводе из оборота при утилизации товара';
			|en = 'Передача сведений о выводе из оборота при утилизации товара'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту,
		НСтр("ru = 'Передача сведений о выводе из оборота при продаже по государственному (муниципальному) контракту';
			|en = 'Передача сведений о выводе из оборота при продаже по государственному (муниципальному) контракту'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка,
		НСтр("ru = 'Передача сведений о выводе из оборота при фасовке';
			|en = 'Передача сведений о выводе из оборота при фасовке'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат,
		НСтр("ru = 'Передача сведений о выводе из оборота при продаже через вендинговый аппарат';
			|en = 'Передача сведений о выводе из оборота при продаже через вендинговый аппарат'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику,
		НСтр("ru = 'Передача сведений о выводе из оборота при реализации незарегистрированному участнику';
			|en = 'Передача сведений о выводе из оборота при реализации незарегистрированному участнику'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование,
		НСтр("ru = 'Передача сведений об отмене вывода из оборота';
			|en = 'Передача сведений об отмене вывода из оборота'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения,
		НСтр("ru = 'Передача сведений о выводе из оборота при использовании для медицинского применения';
			|en = 'Передача сведений о выводе из оборота при использовании для медицинского применения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ,
		НСтр("ru = 'Передача сведений о корректировке остатков ОСУ';
			|en = 'Передача сведений о корректировке остатков ОСУ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения,
		НСтр("ru = 'Передача сведений о выводе из оборота при использовании для ветеринарного применения';
			|en = 'Передача сведений о выводе из оборота при использовании для ветеринарного применения'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПересортицаПоКодам,
		НСтр("ru = 'Передача сведений о выводе из оборота продукции при пересортице по кодам';
			|en = 'Передача сведений о выводе из оборота продукции при пересортице по кодам'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборот,
		НСтр("ru = 'Передача сведений о возврате в оборот при дистанционной торговле';
			|en = 'Передача сведений о возврате в оборот при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи,
		НСтр("ru = 'Передача сведений о возврате в оборот при дистанционной торговле';
			|en = 'Передача сведений о возврате в оборот при дистанционной торговле'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации,
		НСтр("ru = 'Передача сведений о возврате в оборот при розничной реализации';
			|en = 'Передача сведений о возврате в оборот при розничной реализации'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоИзОборотаВЦеляхНеСвязанныхСРеализацией,
		НСтр("ru = 'Передача сведений о возврате товара, выведенного из оборота в целях, не связанных с их последующей реализацией';
			|en = 'Передача сведений о возврате товара, выведенного из оборота в целях, не связанных с их последующей реализацией'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратТовараВОборотПоСделкеСГосТайной,
		НСтр("ru = 'Передача сведений о возврате в оборот, выведенного из оборота для продажи по сделке с государственной тайной';
			|en = 'Передача сведений о возврате в оборот, выведенного из оборота для продажи по сделке с государственной тайной'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараВыведенногоДляПроизводственныхЦелей,
		НСтр("ru = 'Передача сведений о возврате товара, выведенного из оборота для производственных целей';
			|en = 'Передача сведений о возврате товара, выведенного из оборота для производственных целей'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи,
		НСтр("ru = 'Передача сведений о возврате товара, возвращенного покупателем, приобретавшим его в целях, не связанных с последующей реализацией';
			|en = 'Передача сведений о возврате товара, возвращенного покупателем, приобретавшим его в целях, не связанных с последующей реализацией'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриПродажеЧерезВендинговыйАппарат,
		НСтр("ru = 'Передача сведений о возврате в оборот при продаже через вендинговый аппарат';
			|en = 'Передача сведений о возврате в оборот при продаже через вендинговый аппарат'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки';
			|en = 'Передача сведений в СУЗ об использовании кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на производственную линию';
			|en = 'Передача сведений в СУЗ о передаче кодов маркировки на производственную линию'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер,
		НСтр("ru = 'Передача сведений в СУЗ о передаче кодов маркировки на принтер';
			|en = 'Передача сведений в СУЗ о передаче кодов маркировки на принтер'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ,
		НСтр("ru = 'Передача сведений в СУЗ о печати кодов маркировки';
			|en = 'Передача сведений в СУЗ о печати кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о потере распечатанных кодов маркировки';
			|en = 'Передача сведений в СУЗ о потере распечатанных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ,
		НСтр("ru = 'Передача сведений в СУЗ о верификации нанесенных кодов маркировки';
			|en = 'Передача сведений в СУЗ о верификации нанесенных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки (Расчет статуса)';
			|en = 'Передача сведений в СУЗ об использовании кодов маркировки (Расчет статуса)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки,
		НСтр("ru = 'Передача сведений в СУЗ об использовании кодов маркировки (Проверка статуса кодов маркировки)';
			|en = 'Передача сведений в СУЗ об использовании кодов маркировки (Проверка статуса кодов маркировки)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.КвитанцияДокумента,
		НСтр("ru = 'Передача сведений в СУЗ для запроса квитанции об обработке документа';
			|en = 'Передача сведений в СУЗ для запроса квитанции об обработке документа'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании эмитированных кодов маркировки';
			|en = 'Передача сведений о списании эмитированных кодов маркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиПриПоступлении,
		НСтр("ru = 'Передача сведений о списании эмитированных кодов маркировки (при поступлении)';
			|en = 'Передача сведений о списании эмитированных кодов маркировки (при поступлении)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеВведенныхВОборотКодовМаркировки,
		НСтр("ru = 'Передача сведений о списании введенных в оборот кодов маркировки для последующей перемаркировки';
			|en = 'Передача сведений о списании введенных в оборот кодов маркировки для последующей перемаркировки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента,
		НСтр("ru = 'Проверка статуса обработки документа списание';
			|en = 'Проверка статуса обработки документа списание'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса,
		НСтр("ru = 'Передача сведений о списании эмитированных кодов маркировки (Абстрактная операция)';
			|en = 'Передача сведений о списании эмитированных кодов маркировки (Абстрактная операция)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СписаниеКодовВыбывшихДоОбязательностиМаркировки,
		НСтр("ru = 'Передача сведений о списании кодов, выбывших до обязательности маркировки';
			|en = 'Передача сведений о списании кодов, выбывших до обязательности маркировки'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Перемаркировка,
		НСтр("ru = 'Передача сведений о перемаркировке продукции';
			|en = 'Передача сведений о перемаркировке продукции'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже';
			|en = 'Передача сведений об отгрузке товаров при продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент,
		НСтр("ru = 'Передача сведений об отгрузке товаров при передаче от агента к принципалу';
			|en = 'Передача сведений об отгрузке товаров при передаче от агента к принципалу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений об отгрузке товаров при безвозмездной передаче';
			|en = 'Передача сведений об отгрузке товаров при безвозмездной передаче'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия,
		НСтр("ru = 'Передача сведений об отгрузке товаров при передаче от комитента комиссионеру';
			|en = 'Передача сведений об отгрузке товаров при передаче от комитента комиссионеру'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже по гос.контракту';
			|en = 'Передача сведений об отгрузке товаров при продаже по гос.контракту'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя,
		НСтр("ru = 'Передача сведений об отгрузке товаров при продаже для собственных нужд покупателя';
			|en = 'Передача сведений об отгрузке товаров при продаже для собственных нужд покупателя'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ,
		НСтр("ru = 'Передача сведений об отгрузке товаров в ЕАЭС с признанием КИ';
			|en = 'Передача сведений об отгрузке товаров в ЕАЭС с признанием КИ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ,
		НСтр("ru = 'Передача сведений об отгрузке товаров в ЕАЭС при объемно-сортовом учете';
			|en = 'Передача сведений об отгрузке товаров в ЕАЭС при объемно-сортовом учете'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать,
		НСтр("ru = 'Передача сведений об аннулировании отгрузки';
			|en = 'Передача сведений об аннулировании отгрузки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование,
		НСтр("ru = 'Передача сведений об аннулировании отгрузки';
			|en = 'Передача сведений об аннулировании отгрузки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.Приемка,
		НСтр("ru = 'Передача сведений о приемке товаров';
			|en = 'Передача сведений о приемке товаров'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаПродажа,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже';
			|en = 'Передача сведений о приемке товаров при продаже'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаАгент,
		НСтр("ru = 'Передача сведений о приемке товаров при передаче от агента к принципалу';
			|en = 'Передача сведений о приемке товаров при передаче от агента к принципалу'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаБезвозмезднаяПередача,
		НСтр("ru = 'Передача сведений о приемке товаров при безвозмездной передаче';
			|en = 'Передача сведений о приемке товаров при безвозмездной передаче'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаКомиссия,
		НСтр("ru = 'Передача сведений о приемке товаров при передаче от комитента комиссионеру';
			|en = 'Передача сведений о приемке товаров при передаче от комитента комиссионеру'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаПриобретениеГосПредприятием,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже по гос.контракту';
			|en = 'Передача сведений о приемке товаров при продаже по гос.контракту'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаДляСобственныхНуждПокупателя,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже для собственных нужд покупателя';
			|en = 'Передача сведений о приемке товаров при продаже для собственных нужд покупателя'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаТрансграничнаяТорговля,
		НСтр("ru = 'Передача сведений о приемке товаров при продаже (трансграничная торговля)';
			|en = 'Передача сведений о приемке товаров при продаже (трансграничная торговля)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭССПризнаниемКМ,
		НСтр("ru = 'Передача сведений о приемке товаров из ЕАЭС с признанием КИ';
			|en = 'Передача сведений о приемке товаров из ЕАЭС с признанием КИ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаИзЕАЭСПриОСУ,
		НСтр("ru = 'Передача сведений о приемке товаров из ЕАЭС при объемно-сортовом учете';
			|en = 'Передача сведений о приемке товаров из ЕАЭС при объемно-сортовом учете'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаОтклонить,
		НСтр("ru = 'Передача сведений об отклонении приемки';
			|en = 'Передача сведений об отклонении приемки'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПриемкаОтклонен,
		НСтр("ru = 'Передача сведений об отклонении приемки';
			|en = 'Передача сведений об отклонении приемки'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ,
		НСтр("ru = 'Запрос идентификатора соединения для подключения к СУЗ';
			|en = 'Запрос идентификатора соединения для подключения к СУЗ'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗапросМестОсуществленияДеятельности,
		НСтр("ru = 'Запрос мест осуществления деятельности';
			|en = 'Запрос мест осуществления деятельности'"));
		
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот,
		НСтр("ru = 'Передача сведений о кодах идентификации для ввода в оборот';
			|en = 'Передача сведений о кодах идентификации для ввода в оборот'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот,
		НСтр("ru = 'Передача сведений о разрешительной документации для ввода в оборот';
			|en = 'Передача сведений о разрешительной документации для ввода в оборот'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании,
		НСтр("ru = 'Передача сведений о перевзвешивании';
			|en = 'Передача сведений о перевзвешивании'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ,
		НСтр("ru = 'Передача корректировки сведений о кодах';
			|en = 'Передача корректировки сведений о кодах'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД,
		НСтр("ru = 'Передача корректировки сведений о сроках годности и ВСД';
			|en = 'Передача корректировки сведений о сроках годности и ВСД'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности,
		НСтр("ru = 'Передача корректировки сведений о сроках годности';
			|en = 'Передача корректировки сведений о сроках годности'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес,
		НСтр("ru = 'Передача корректировки сведений о фактическом весе';
			|en = 'Передача корректировки сведений о фактическом весе'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки,
		НСтр("ru = 'Подключение кега к оборудованию для розлива';
			|en = 'Подключение кега к оборудованию для розлива'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковкиРасчетСтатуса,
		НСтр("ru = 'Подключение кега к оборудованию для розлива';
			|en = 'Подключение кега к оборудованию для розлива'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетИСМПСведенияОбОтклонениях,
		НСтр("ru = 'Запрос сведений об отклонениях';
			|en = 'Запрос сведений об отклонениях'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетИСМПСписокКИНаБалансе,
		НСтр("ru = 'Запрос списка кодов идентификации';
			|en = 'Запрос списка кодов идентификации'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка,
		НСтр("ru = 'Подача УПД в ГИС МТ до отгрузки продукции';
			|en = 'Подача УПД в ГИС МТ до отгрузки продукции'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя,
		НСтр("ru = 'Подача УПД в ГИС МТ до отгрузки продукции (предварительное формирование)';
			|en = 'Подача УПД в ГИС МТ до отгрузки продукции (предварительное формирование)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОД,
		НСтр("ru = 'Подача УПД в ГИС МТ';
			|en = 'Подача УПД в ГИС МТ'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца,
		НСтр("ru = 'Подача УПД в ГИС МТ (предварительное формирование)';
			|en = 'Подача УПД в ГИС МТ (предварительное формирование)'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки,
		НСтр("ru = 'Отмена подачи УПД в ГИС МТ до отгрузки продукции';
			|en = 'Отмена подачи УПД в ГИС МТ до отгрузки продукции'"));
	
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузку,
		НСтр("ru = 'Разрешение на отгрузку';
			|en = 'Разрешение на отгрузку'"));
	ПередачаДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузкуАннулирование,
		НСтр("ru = 'Отмена разрешения на отгрузку';
			|en = 'Отмена разрешения на отгрузку'"));
	
	ПолучениеДанных = Новый Соответствие;
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
		НСтр("ru = 'Получение результата обработки документа ИС МП';
			|en = 'Получение результата обработки документа ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиЗаказаНаЭмиссиюКодовМаркировки,
		НСтр("ru = 'Получение результата обработки Заказа на эмиссию кодов маркировки ИС МП';
			|en = 'Получение результата обработки Заказа на эмиссию кодов маркировки ИС МП'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение кодов маркировки из СУЗ';
			|en = 'Получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо,
		НСтр("ru = 'Получение кодов маркировки из СУЗ';
			|en = 'Получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Повторное получение кодов маркировки из СУЗ';
			|en = 'Повторное получение кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ,
		НСтр("ru = 'Получение статуса пула кодов маркировки из СУЗ';
			|en = 'Получение статуса пула кодов маркировки из СУЗ'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировкиЗапросGTINНаОстатки,
		НСтр("ru = 'Оформление GTIN для маркировки остатков продукции';
			|en = 'Оформление GTIN для маркировки остатков продукции'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ЗагрузкаВходящихДокументов,
		НСтр("ru = 'Загрузка входящих документов';
			|en = 'Загрузка входящих документов'"));
	ПолучениеДанных.Вставить(
		Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки,
		НСтр("ru = 'Получение результата выгрузки ГИС МТ';
			|en = 'Получение результата выгрузки ГИС МТ'"));
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных",  ПередачаДанных);
	Категории.Вставить("ПолучениеДанных", ПолучениеДанных);
	
	Возврат Категории;
	
КонецФункции

// Получить статусы ИСМП, цвет текста которых "требует внимания"
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка - Статусы ИС МП, для которых требуется устанавливать цвет "требует внимания"
//
Функция СтатусыЦветТекстаТребуетВнимания() Экспорт
	
	СтатусыЦветТекстаТребуетВнимания = Новый Массив;
	
	Для Каждого Статус Из Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СтатусыОшибок() Цикл
		СтатусыЦветТекстаТребуетВнимания.Добавить(Статус);
	КонецЦикла;
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		МодульИнтеграциИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		МодульИнтеграциИСМП.ДополнитьСтатусыЦветТекстаТребуетВнимания(СтатусыЦветТекстаТребуетВнимания);
		
	КонецЕсли;
	
	Возврат СтатусыЦветТекстаТребуетВнимания;
	
КонецФункции

// Результат выполнения обмена данными.
// 
// Возвращаемое значение:
//  Структура - Результат выполнения обмена данными:
// * ТребуетсяОбновлениеКлючаСессии - Неопределено, Булево - 
// * ДоступныеСертификаты - Неопределено, Соответствие из КлючИЗначение - 
// * ТребуетсяПодписание - Неопределено, Соответствие из КлючИЗначение - 
// * СообщенияПослеПодписания - Неопределено, Соответствие из КлючИЗначение - 
// * КОпределениюВидаУпаковки - Неопределено, Соответствие из КлючИЗначение - 
// * Изменения - Массив из см. СтруктураИзменения  
// * ДлительнаяОперация - Неопределено - 
// * Ожидать - Неопределено, Число - 
// * АдресВоВременномХранилище - Неопределено, Строка - 
// * АдресДанныхЛогаЗапроса - Неопределено, Строка -
// * ИзвлекатьДанныеЛогаЗапросов - Булево - 
Функция РезультатВыполненияОбменаДанными() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДоступныеСертификаты",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПодписание",            Неопределено);
	ВозвращаемоеЗначение.Вставить("СообщенияПослеПодписания",       Неопределено);
	ВозвращаемоеЗначение.Вставить("КОпределениюВидаУпаковки",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Изменения",                      Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",             Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище",      Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресДанныхЛогаЗапроса",         Неопределено);
	ВозвращаемоеЗначение.Вставить(
		"ИзвлекатьДанныеЛогаЗапросов",
		ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СообщенияКОпределениюВидаУпаковок(ПараметрыОбмена)

	СообщенияКОпределениюВидаУпаковки = Новый Соответствие;

	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений Тогда
			СообщенияПоОрганизации = СообщенияКОпределениюВидаУпаковки[ЭлементОчереди.Организация];
			Если СообщенияПоОрганизации = Неопределено Тогда
				СообщенияПоОрганизации = Новый Массив;
				СообщенияКОпределениюВидаУпаковки.Вставить(ЭлементОчереди.Организация, СообщенияПоОрганизации);
			КонецЕсли;
			СообщенияПоОрганизации.Добавить(ЭлементОчереди.РеквизитыИсходящегоСообщения);
		КонецЕсли;
	КонецЦикла;

	Возврат СообщенияКОпределениюВидаУпаковки;

КонецФункции

// Соответствие зависимых операций.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Соответствие зависимых операций
Функция СоответствиеЗависимыхОпераций()
	
	Результат = Новый Соответствие();
	Результат.Вставить(Перечисления.ВидыОперацийИСМП.КвитанцияДокумента, Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	Результат.Вставить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ, Перечисления.ВидыОперацийИСМП.КвитанцияДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция СтроковоеПредставлениеПустогоУникальногоИдентификатора() Экспорт
	Возврат "00000000-0000-0000-0000-000000000000";
КонецФункции

#КонецОбласти

#Область ОбработкаЭлементовОчереди

Функция ОбработатьОчередьСообщений(ПараметрыОбмена) Экспорт
	
	СтруктураПоискаСтопЛист = Новый Структура("Организация");
	
	ПовторитьЦиклОбработкиСообщений  = Истина;
	МинимальноеКоличествоИтераций    = 0;
	МинимальнаяДатаСледующейОперации = Неопределено;
	МодульРасширеннойОбработки       = Неопределено;

	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульРасширеннойОбработки = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
	КонецЕсли;
	
	Пока ПовторитьЦиклОбработкиСообщений Цикл
		
		ПовторитьЦиклОбработкиСообщений = Ложь;
		
		МинимальноеКоличествоИтераций    = 0;
		МинимальнаяДатаСледующейОперации = Неопределено;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			СтруктураПоискаСтопЛист.Организация = ЭлементОчереди.Организация;
			
			Если ПараметрыОбмена.СтопЛист.НайтиСтроки(СтруктураПоискаСтопЛист).Количество() > 0 Тогда
				// При выполнении обмена по организации были ошибки. Пропустим сообщения.
				Продолжить;
			КонецЕсли;
			
			ДатаСледующейИтерации = Неопределено;
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЗаявки) Тогда
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации, МодульРасширеннойОбработки) Тогда
					
					ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, МодульРасширеннойОбработки);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации, МодульРасширеннойОбработки) Тогда
					
					ОбработатьЭлементОчередиПолученияДанных(ЭлементОчереди, ПараметрыОбмена, МодульРасширеннойОбработки);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДатаСледующейИтерации <> Неопределено
				И (МинимальнаяДатаСледующейОперации = Неопределено Или МинимальнаяДатаСледующейОперации > ДатаСледующейИтерации) Тогда
				МинимальнаяДатаСледующейОперации = ДатаСледующейИтерации;
			КонецЕсли;
			
			Если ЭлементОчереди.КоличествоИтераций < МинимальноеКоличествоИтераций Тогда
				МинимальноеКоличествоИтераций = ЭлементОчереди.КоличествоИтераций;
			КонецЕсли;
			
		КонецЦикла;
		
		// Действия после основного цикла очереди.
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОбработанныеЭлементыОчереди Цикл
			Если ПараметрыОбмена.ОчередьСообщений.Индекс(ЭлементОчереди) <> -1 Тогда
				ПараметрыОбмена.ОчередьСообщений.Удалить(ЭлементОчереди);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Очистить();
		
		Если МинимальнаяДатаСледующейОперации <> Неопределено
			И МинимальнаяДатаСледующейОперации < ТекущаяДатаСеанса() Тогда
			ПовторитьЦиклОбработкиСообщений = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальнаяДатаСледующейОперации;
	
КонецФункции

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СообщениеИлиДокумент = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Очередь.ДатаСоздания       КАК ДатаСоздания,
	|	Очередь.Сообщение          КАК Сообщение,
	|	Очередь.СообщениеОснование КАК СообщениеОснование,
	|	
	|	Очередь.ВидПродукции              КАК ВидПродукции,
	|	Очередь.Операция                  КАК Операция,
	|	Очередь.Назначение                КАК Назначение,
	|	Очередь.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	Очередь.ПроизводственныйОбъект    КАК ПроизводственныйОбъект,
	|	
	|	Очередь.Организация       КАК Организация,
	|	Очередь.Документ          КАК Документ,
	|	Очередь.ДокументОснование КАК ДокументОснование,
	|	
	|	Очередь.РеквизитыИсходящегоСообщения      КАК РеквизитыИсходящегоСообщения,
	|	Очередь.ПротоколОбмена                    КАК ПротоколОбмена,
	|	Очередь.ДатаМодификацииУниверсальная      КАК ДатаМодификацииУниверсальная,
	|	Очередь.ЗагружатьПосле                    КАК ЗагружатьПосле,
	|	Очередь.ЗагружатьДо                       КАК ЗагружатьДо,
	|	Очередь.ИдентификаторЗаявки               КАК ИдентификаторЗаявки,
	|	Очередь.ИдентификаторПоследнегоБлокаКодов КАК ИдентификаторПоследнегоБлокаКодов
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК Очередь
	|ГДЕ
	|	&УсловиеПоОрганизациям
	|");
	
	Если ПараметрыОбмена.Организации <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "Очередь.Организация В(&Организации)");
		Запрос.УстановитьПараметр("Организации", ПараметрыОбмена.Организации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоОрганизациям", "ИСТИНА");
	КонецЕсли;
	
	Если СообщениеИлиДокумент <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + Символы.ПС +
			"И (Очередь.Сообщение В(&СообщениеИлиДокумент) Или Очередь.Документ В(&СообщениеИлиДокумент))";
		
		Запрос.УстановитьПараметр("СообщениеИлиДокумент", СообщениеИлиДокумент);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		ПротоколОбмена               = Выборка.ПротоколОбмена.Получить();
		
		Если РеквизитыИсходящегоСообщения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания       = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение          = Выборка.Сообщение;
		ЭлементОчереди.СообщениеОснование = Выборка.СообщениеОснование;
		
		ЭлементОчереди.ВидПродукции              = Выборка.ВидПродукции;
		ЭлементОчереди.Операция                  = Выборка.Операция;
		ЭлементОчереди.Назначение                = Выборка.Назначение;
		ЭлементОчереди.СтанцияУправленияЗаказами = Выборка.СтанцияУправленияЗаказами;
		ЭлементОчереди.ПроизводственныйОбъект    = Выборка.ПроизводственныйОбъект;
		
		ЭлементОчереди.Организация       = Выборка.Организация;
		ЭлементОчереди.Документ          = Выборка.Документ;
		ЭлементОчереди.ДокументОснование = Выборка.ДокументОснование;
		
		ЭлементОчереди.РеквизитыИсходящегоСообщения      = РеквизитыИсходящегоСообщения;
		ЭлементОчереди.ПротоколОбмена                    = ПротоколОбмена;
		ЭлементОчереди.ДатаМодификацииУниверсальная      = Выборка.ДатаМодификацииУниверсальная;
		ЭлементОчереди.ИдентификаторЗаявки               = Выборка.ИдентификаторЗаявки;
		ЭлементОчереди.ИдентификаторПоследнегоБлокаКодов = Выборка.ИдентификаторПоследнегоБлокаКодов;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьДо) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.ЗагружатьДо;
			НоваяЗависимость.Сообщение2 = Выборка.Сообщение;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
		Если ПротоколОбмена <> Неопределено
			И ПротоколОбмена.Количество() > 0 Тогда
			
			ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
			ЭлементОчереди.ТекущийСтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					ПоследняяЗаписьПротоколаОбмена, "Статус") Тогда
				ЭлементОчереди.ТекущийСтатус = ПоследняяЗаписьПротоколаОбмена.Статус;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, МодульРасширеннойОбработки)
	
	НачатьТранзакцию();
	
	Попытка
		
		// Повторное формирование сообщений - это исключительно виртуальная операция
		ЭтоПовторноеФормированиеСообщения = (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца);
		
		Если Не ЭтоПовторноеФормированиеСообщения Тогда

			ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

			Блокировка = Новый БлокировкаДанных;

			ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;

			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование;
			КонецЕсли;

			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");

			Блокировка.Заблокировать();

			НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
			НаборЗаписей.Прочитать();

			Если ЭлементОчередиОснование <> ЭлементОчереди Тогда
				НаборЗаписейОснование = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
				НаборЗаписейОснование.Отбор.Сообщение.Установить(ЭлементОчередиОснование.Сообщение);
				НаборЗаписейОснование.Прочитать();
			КонецЕсли;

		КонецЕсли;
		
		Если ЭтоПовторноеФормированиеСообщения
			Или (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			Если Не ЭтоПовторноеФормированиеСообщения Тогда
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					Если ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаявки)
						И ЗаписьНабора.ИдентификаторЗаявки <> СтроковоеПредставлениеПустогоУникальногоИдентификатора() Тогда

						ОтменитьТранзакцию();

						// Сообщение уже передано в ГИС МТ, но еще не обработано.
						ЭлементОчереди.ИдентификаторЗаявки = ЗаписьНабора.ИдентификаторЗаявки;
						Возврат;

					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МодульРасширеннойОбработки = Неопределено Тогда
				СообщениеОбработано = Ложь;
			Иначе
				СообщениеОбработано = МодульРасширеннойОбработки.ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
			КонецЕсли;
			
			Если Не СообщениеОбработано Тогда
				
				Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
					
					Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
						Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
						Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца
						Тогда
						ПодготовитьСообщенияКПередачеПовторно(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
					ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковкиРасчетСтатуса Тогда
						ПодготовитьСообщенияПоАбстрактнойОперацииПодключениеКОборудованиюРозлива(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей);
					Иначе
						ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование);
					КонецЕсли;
					
				КонецЕсли;
			
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Иначе
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			Возврат;
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2';
			           |en = 'При передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиПолученияДанных(ЭлементОчереди, ПараметрыОбмена, МодульРасширеннойОбработки)
	
	Если МодульРасширеннойОбработки <> Неопределено Тогда
		СообщениеОбработано = МодульРасширеннойОбработки.ОбработатьЭлементОчередиПолученияДанных(ЭлементОчереди, ПараметрыОбмена);
		Если СообщениеОбработано Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковкиРасчетСтатуса Тогда
			// Фиктивная операция по изменению статуса и записи протокола обмена
			ЗагрузитьРезультатОбработкиАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена);
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
			ЗагрузитьРезультатОбработкиСДополнительнымиДействиями(ЭлементОчереди, ПараметрыОбмена);
		Иначе
			ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена);
		КонецЕсли;
	
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка';
								|en = 'Внутренняя ошибка'");
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение, Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиДокумент, ПараметрыОбмена) Экспорт
	
	ЭлементОчереди = Неопределено;
	
	Если ТипЗнч(ЭлементОчередиДокумент) <> Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если СтрокаТЧ.Документ = ЭлементОчередиДокумент Тогда
				ЭлементОчереди = СтрокаТЧ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементОчереди = ЭлементОчередиДокумент;
	КонецЕсли;
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено, МодульРасширеннойОбработки = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПовторноеФормирование = (ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительноеФормированиеТитулаПродавцаИПокупателя
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДФормированиеИПодписаниеТитулаПродавца);
	
	Если ПовторноеФормирование И ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
		Или ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		ТребуетсяОбновлениеКлючаСессии = ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди);
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ТребуетсяПодписание
		И Не ЭлементОчереди.РеквизитыИсходящегоСообщения.Свойство("СвойстваПодписи") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МодульРасширеннойОбработки <> Неопределено
		И Не МодульРасширеннойОбработки.СообщениеМожноПередавать(
		ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости = Неопределено, ДатаСледующейИтерации = Неопределено, МодульРасширеннойОбработки = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение); // Есть ли сообщения
	ПараметрыОтбора.Вставить("Загрузка",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	ЕстьЗависимости = (НайденныеЗависимости.Количество() > 0);
	
	Если ЕстьЗависимости Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = Ложь;
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
		Или ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		ТребуетсяОбновлениеКлючаСессии = ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди);
	Иначе
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
	Если ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяПодписание = Ложь;
	Если ПараметрыОбмена.СообщенияКПодписанию = Неопределено Тогда
		ТребуетсяПодписание = Ложь;
	Иначе
		ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию[ЭлементОчереди.Организация] <> Неопределено);
	КонецЕсли;

	Если ТребуетсяПодписание Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТребуетсяОжидание = Не (ЭлементОчереди.ДатаСледующейИтерации = Неопределено
	                    Или ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса());
	Если ТребуетсяОжидание Тогда
		
		ДатаСледующейИтерации = ЭлементОчереди.ДатаСледующейИтерации;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МодульРасширеннойОбработки <> Неопределено
		И Не МодульРасширеннойОбработки.СообщениеМожноЗагружать(
		ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости, ДатаСледующейИтерации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьДатуСледующейИтерации(ЭлементОчереди, Инкремент = 1) Экспорт
	
	Если Инкремент > 0 Тогда
		ЭлементОчереди.КоличествоИтераций = ЭлементОчереди.КоличествоИтераций + Инкремент;
	Иначе
		ЭлементОчереди.КоличествоИтераций = 1;
	КонецЕсли;
	
	ЭлементОчереди.ДатаСледующейИтерации = ТекущаяДатаСеанса() + ВремяОжидания(ЭлементОчереди.КоличествоИтераций);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеОбмена

Процедура ВыполнитьОбменДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПараметрыОбмена   = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ВыполнитьОбменУниверсально(ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Выполнить обмен универсально.
// 
// Параметры:
//  ПараметрыОбмена - см. ПараметрыОбмена
// 
// Возвращаемое значение:
//  см. РезультатВыполненияОбменаДанными
Функция ВыполнитьОбменУниверсально(ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = РезультатВыполненияОбменаДанными();
	
	ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
	
	ЕстьОшибки = Ложь;
	Если ПараметрыОбмена.УникальныйИдентификатор <> Неопределено Тогда
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
	               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
	
	ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
	                       И ПараметрыОбмена.СообщенияКПодписанию.Количество())
	                       Или (ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено
	                       И ПараметрыОбмена.КОбновлениюКлючейСессии.Количество());
	
	Если ТребуетсяОжидание И Не ТребуетсяПодписание Тогда
		
		Если ДатаСледующейИтерации <> Неопределено Тогда
			ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
		Иначе
			ВремяОжидания = 0;
		КонецЕсли;
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		ИначеЕсли Не ПараметрыОбмена.ОжидатьНаКлиенте Тогда
			Возврат ПродолжитьВыполнениеОбменаУниверсально(Неопределено, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда
		
		ДоступныеСертификаты = Неопределено;
		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии  = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		Если ПараметрыОбмена.НастройкиОбменаСУЗ <> Неопределено Тогда
			Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
				Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
					НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Ожидать                   = ОбщегоНазначенияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Продолжить выполнение обмена универсально.
// 
// Параметры:
//  ПодписанныеСообщенияПоОрганизациям - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из см. СтруктураСообщенияXML - сообщения к передаче
//  ПараметрыОбмена - см. ПараметрыОбмена
// 
// Возвращаемое значение:
//  см. РезультатВыполненияОбменаДанными
Функция ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = РезультатВыполненияОбменаДанными();
	
	ПараметрыОбмена.КОпределениюВидаУпаковки = Неопределено;

	ПодготовитьПодписанныеСообщенияКПередаче(
		ПодписанныеСообщенияПоОрганизациям,
		ПараметрыОбмена);
	
	ВыполнитьИтерацию = Истина;
	ВремяОжидания     = Неопределено;
	Пока ВыполнитьИтерацию Цикл
		
		//@skip-check query-in-loop
		ДатаСледующейИтерации = ОбработатьОчередьСообщений(ПараметрыОбмена);
		
		ЕстьОшибки = Ложь;
		Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
			Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяОжидание = ДатаСледующейИтерации <> Неопределено
		               Или (Не ЕстьОшибки И ПараметрыОбмена.ОчередьСообщений.Количество() > 0);
		
		ТребуетсяПодписание = (ПараметрыОбмена.СообщенияКПодписанию <> Неопределено
		                   И ПараметрыОбмена.СообщенияКПодписанию.Количество())
		                   Или (ПараметрыОбмена.КОбновлениюКлючейСессии <> Неопределено
		                   И ПараметрыОбмена.КОбновлениюКлючейСессии.Количество());
		
		ТребуетсяОпределениеВидаУпаковки = ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено;

		ДоступныеСертификаты          = Неопределено;
		АдресКОпределениюВидаУпаковки = "";

		Если ТребуетсяОпределениеВидаУпаковки
			И ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда

			СообщенияКОпределениюВидаУпаковок = СообщенияКОпределениюВидаУпаковок(ПараметрыОбмена);

			ПроверитьКлючиСессии(
				СообщенияКОпределениюВидаУпаковок,
				Неопределено, ПараметрыОбмена);

			ДоступныеСертификаты(СообщенияКОпределениюВидаУпаковок, ДоступныеСертификаты);
			
			МодульШтрихкодированиеИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМПСлужебный");
			АдресКОпределениюВидаУпаковки = МодульШтрихкодированиеИСМПСлужебный.ДанныеКОпределениюВидаУпаковки(ПараметрыОбмена);

			Если Не ЗначениеЗаполнено(АдресКОпределениюВидаУпаковки) Тогда
				ТребуетсяОпределениеВидаУпаковки = Ложь;
				ПараметрыОбмена.КОпределениюВидаУпаковки = Неопределено;
			КонецЕсли;

		КонецЕсли;

		Если ТребуетсяОжидание И Не ТребуетсяПодписание И Не ТребуетсяОпределениеВидаУпаковки Тогда
			
			Если ДатаСледующейИтерации <> Неопределено Тогда
				ВремяОжидания = Окр(ДатаСледующейИтерации - ТекущаяДатаСеанса(), 0, РежимОкругления.Окр15как20);
			Иначе
				ВремяОжидания = 0;
			КонецЕсли;
			
			Если ПараметрыОбмена.ОжидатьНаСервере Тогда
				ОбщегоНазначенияИС.Ожидать(ВремяОжидания, ПараметрыОбмена);
			ИначеЕсли ПараметрыОбмена.ОжидатьНаКлиенте И ВремяОжидания <> 0 Тогда
				ВыполнитьИтерацию = Ложь;
			КонецЕсли;
			
		Иначе
			
			ВыполнитьИтерацию = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (ТребуетсяОжидание Или ТребуетсяПодписание Или ТребуетсяОпределениеВидаУпаковки)
		И ПараметрыОбмена.АдресВоВременномХранилище <> Неопределено Тогда

		Если ТребуетсяПодписание Тогда
			
			ПроверитьКлючиСессии(
				ПараметрыОбмена.СообщенияКПодписанию,
				Неопределено, ПараметрыОбмена);
			
			ДоступныеСертификаты(ПараметрыОбмена.КОбновлениюКлючейСессии, ДоступныеСертификаты);
			ДоступныеСертификаты(ПараметрыОбмена.СообщенияКПодписанию,    ДоступныеСертификаты);
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ДоступныеСертификаты           = ДоступныеСертификаты;
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = ПараметрыОбмена.КОбновлениюКлючейСессии;
		ВозвращаемоеЗначение.ТребуетсяПодписание            = ПараметрыОбмена.СообщенияКПодписанию;
		ВозвращаемоеЗначение.СообщенияПослеПодписания       = ПараметрыОбмена.СообщенияПослеПодписания;
		ВозвращаемоеЗначение.КОпределениюВидаУпаковки       = АдресКОпределениюВидаУпаковки;

		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ФоновоеЗадание           = Неопределено;
		ПараметрыОбмена.КОбновлениюКлючейСессии  = Неопределено;
		ПараметрыОбмена.СообщенияКПодписанию     = Неопределено;
		ПараметрыОбмена.СообщенияПослеПодписания = Неопределено;
		
		Если ПараметрыОбмена.НастройкиОбменаСУЗ <> Неопределено Тогда
			Для Каждого НастройкаОбменаСУЗ Из ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере Цикл
				Для Каждого НастройкаПоОрганизации Из НастройкаОбменаСУЗ.Значение Цикл
					НастройкаПоОрганизации.ФоновоеЗадание = Неопределено;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

		ВозвращаемоеЗначение.Ожидать                   = ОбщегоНазначенияИС.ВремяОжидания(ВремяОжидания);
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыОбмена.АдресВоВременномХранилище) Тогда
			УдалитьИзВременногоХранилища(ПараметрыОбмена.АдресВоВременномХранилище);
		КонецЕсли;
		
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
		
	КонецЕсли;
	
	ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, ВозвращаемоеЗначение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПродолжитьВыполнениеОбменаДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ПодписанныеСообщенияПоОрганизациям = ПараметрыФоновогоЗадания.ПодписанныеСообщенияПоОрганизациям;
	ПараметрыОбмена                    = ПараметрыФоновогоЗадания.ПараметрыОбмена;
	ПараметрыСеансаИС                  = ПараметрыФоновогоЗадания.ПараметрыСеансаИС;
	
	ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС);
	
	ВозвращаемоеЗначение = ПродолжитьВыполнениеОбменаУниверсально(ПодписанныеСообщенияПоОрганизациям, ПараметрыОбмена);
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

Процедура ПередатьСообщениеИСМП(ЭлементОчереди, ПараметрыОбмена, НаборЗаписей, НаборЗаписейОснование)
	
	СтанцияУправленияЗаказами = Неопределено;
	ФорматОбмена              = Неопределено;
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
		
		НастройкаОбменаПоОрганизации = ПараметрыОбмена.НастройкиОбменаСУЗ.ОбменНаСервере.Получить(ЭлементОчереди.Организация);
		Если НастройкаОбменаПоОрганизации <> Неопределено Тогда
			НастройкаОбменаСУЗ        = НастройкаОбменаПоОрганизации;
			СтанцияУправленияЗаказами = НастройкаОбменаСУЗ.СтанцияУправленияЗаказами;
			ФорматОбмена              = НастройкаОбменаСУЗ.ФорматОбмена;
		КонецЕсли;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В информационной базе не найдена активная настройка для подключения к СУЗ.';
					|en = 'В информационной базе не найдена активная настройка для подключения к СУЗ.'"),
				ЭлементОчереди.Организация);
			ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	СвойстваДополнительнойПодписи = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыИсходящегоСообщения, "СвойстваДополнительнойПодписи") Тогда
		СвойстваДополнительнойПодписи = РеквизитыИсходящегоСообщения.СвойстваДополнительнойПодписи;
	КонецЕсли;
	
	ДанныеОбработки = ИнтерфейсИСМПОбщегоНазначения.СоздатьДокументПоСообщению(
		РеквизитыИсходящегоСообщения.Организация,
		РеквизитыИсходящегоСообщения.Операция,
		РеквизитыИсходящегоСообщения.ВидПродукции,
		РеквизитыИсходящегоСообщения.ТекстСообщенияJSON,
		ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(РеквизитыИсходящегоСообщения.СвойстваПодписи),
		РеквизитыИсходящегоСообщения.ПараметрыЗапроса,
		РеквизитыИсходящегоСообщения.ТекстДополнительногоСообщенияJSON,
		ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(СвойстваДополнительнойПодписи));
	
	Если ТребуетсяОбновлениеКлючаСессии(ДанныеОбработки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
		ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
		ДанныеОбработки);
	
	Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
			
			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2';
						           |en = 'Сообщение по документу %1 не принято ИС МП:
						           |Текст ошибки: %2'"),
						ЭлементОчереди.Документ,
						ДанныеОбработки.ТекстОшибки);
				Иначе
					РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1';
						           |en = 'Сообщение не принято ИС МП:
						           |Текст ошибки: %1'"),
						ДанныеОбработки.ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
			
			ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);

			Если Не (ЭлементОчередиОснование.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
				Или ЭлементОчередиОснование.Операция = Перечисления.ВидыОперацийИСМП.АТК
				Или ((ЭлементОчередиОснование.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДПредварительнаяОтгрузка
						Или ЭлементОчередиОснование.Операция = Перечисления.ВидыОперацийИСМП.ПеремещениеМеждуМОДОтменаПредварительнойОтгрузки)
					  И РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ПроверкаДокументовИСМП"))) Тогда
				Реквизиты = Новый Структура;
				Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
				Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
				Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
				Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
				Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
				Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
				Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
				Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);

				ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(
					ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена);
				ДобавитьЗаписьВПротоколОбмена(
					ПротоколаОбменаXML,
					Реквизиты);
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			Если НаборЗаписейОснование = Неопределено Тогда
			
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,
					СтанцияУправленияЗаказами,
					Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена));
				
			Иначе
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписей,
					ДанныеОбработки.ИдентификаторЗаявки,
					СтанцияУправленияЗаказами,
					Неопределено);
				
				ОбновитьИдентификаторЗаявкиСообщенияОчереди(
					НаборЗаписейОснование,
					Неопределено,
					Неопределено,
					Новый ХранилищеЗначения(
						ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена).ПротоколОбмена));
						
			КонецЕсли;
			
			ЭлементОчереди.ИдентификаторЗаявки          = ДанныеОбработки.ИдентификаторЗаявки;
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
			
			ЭлементОчереди.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ФорматОбмена",              ФорматОбмена);
				ДополнительныеПараметры.Вставить("СтанцияУправленияЗаказами", СтанцияУправленияЗаказами);
				ДополнительныеПараметры.Вставить("Назначение",                Перечисления.НазначениеСообщенийИСМП.ИСМП);
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки,
					ДополнительныеПараметры);
				
			Иначе
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ЭлементОчереди.Документ, ЭлементОчереди.Операция, ДанныеОбработки.СтатусОбработки);
				
			КонецЕсли;
			
		Иначе
			
			НовыйСтатус = ДанныеОбработки.СтатусОбработки;
			
		КонецЕсли;
		
		Если ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование
			И ЭлементОчереди.Операция <> Перечисления.ВидыОперацийИСМП.РазрешениеНаОтгрузкуАннулирование Тогда
			ЗаписатьИдентификаторЗаявкиВДокумент(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, МенеджерОбъекта);
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			И ТипЗнч(ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса) = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса, "ИспользуетсяПакетнаяПередачаСообщений", Ложь) Тогда
			
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			Если ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ДанныеСообщения") Тогда
				МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
				МодульИнтеграцияИСМПСлужебный.ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчереди);
			КонецЕсли;
			
		Иначе
			
			РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
	Иначе
		
		РезультатОбработкиОтвета = Новый Структура;
		РезультатОбработкиОтвета.Вставить("НовыйСтатус");
		РезультатОбработкиОтвета.Вставить("ТекстОшибки");
		
		РезультатыПередачиСообщения = Новый Структура;
		РезультатыПередачиСообщения.Вставить("РезультатОтправкиЗапроса",     ДанныеОбработки.РезультатОтправкиЗапроса);
		РезультатыПередачиСообщения.Вставить("РезультатОбработкиОтвета",     РезультатОбработкиОтвета);
		
		РезультатыПередачиСообщения.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		РезультатыПередачиСообщения.Вставить("ТекстСообщения",               РеквизитыИсходящегоСообщения.ТекстСообщенияJSON);
		РезультатыПередачиСообщения.Вставить("ПредставлениеПротоколаОбмена", ПредставлениеПротоколаОбмена);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2';
					           |en = 'Сообщение по документу %1 не принято ИС МП:
					           |Текст ошибки: %2'"),
					ЭлементОчереди.Документ,
					ДанныеОбработки.ТекстОшибки);
			Иначе
				РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1';
					           |en = 'Сообщение не принято ИС МП:
					           |Текст ошибки: %1'"),
					ДанныеОбработки.ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыОбработки

Процедура ЗагрузитьРезультатОбработкиАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда

		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

		// Обновить статус у документа.
		РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ЭлементОчереди.Документ);
		СтрокаРезультата = СтруктураИзменения();
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

		СтрокаРезультата.ТекстОшибки           = "";
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = Неопределено;
		СтрокаРезультата.ОбъектИзменен         = Ложь;

		СтрокаРезультата.Сообщение = ЭлементОчереди.Сообщение;

		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

		Возврат;

	КонецЕсли;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТК
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковкиРасчетСтатуса Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;

	МассивОшибок    = Новый Массив;
	ОписаниеОшибки  = "";
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл

		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда

			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			ДанныеОтвета = ОбщегоНазначенияИСКлиентСервер.ТекстJSONВОбъект(СтрокаТЧ.ОтветТело);

			Если ДанныеОтвета <> Неопределено Тогда
				Если ТипЗнч(ДанныеОтвета) = Тип("Массив") Тогда
					ТелоОтвета = ДанныеОтвета[0];
				Иначе
					ТелоОтвета = ДанныеОтвета;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТелоОтвета, "errors") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, ТелоОтвета["errors"], Истина);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
		ОписаниеОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = НСтр("ru = '<Описание ошибки отсутствует>';
									|en = '<Описание ошибки отсутствует>'");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРезультата = СтруктураИзменения();
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;

	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

	СтрокаРезультата.ТекстОшибки           = ОписаниеОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Истина;
	СтрокаРезультата.НовыйСтатус           = СтатусОбработки;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	СтрокаРезультата.Сообщение             = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ТекстСообщения        = ОписаниеОшибки;

	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.Статус            = Неопределено;
	ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
	ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
	ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
	ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ПараметрыЗапроса;
	
	РезультатОбработкиЗаявки = Новый Структура;
	РезультатОбработкиЗаявки.Вставить("СтатусОбработки", СтатусОбработки);
	
	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
	КонецЕсли;
	
	СоздаватьШтрихкодыУпаковок = Ложь;
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		И ПараметрыЗапроса.Свойство("СоздаватьШтрихкодыУпаковок")
		И ПараметрыЗапроса.СоздаватьШтрихкодыУпаковок
		И МодульИнтеграцияИСМПСлужебный <> Неопределено Тогда

		ДанныеДереваУпаковок = МодульИнтеграцияИСМПСлужебный.ПодготовитьДеревоУпаковокВерхнегоУровняПоДокументу(
			ЭлементОчереди.Документ);

		Если ЗначениеЗаполнено(ДанныеДереваУпаковок.ТекстОшибки) Тогда
			СтрокаРезультата.ТекстОшибки = ДанныеДереваУпаковок.ТекстОшибки;
			ПараметрыОбновленияСтатуса.Вставить("ОшибкаПриСозданииШтрихкодовУпаковок", Истина);
		Иначе
			СоздаватьШтрихкодыУпаковок = Истина;
		КонецЕсли;

	КонецЕсли;

	НачатьТранзакцию();

	Попытка

		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);

		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);

		Реквизиты = Новый Структура;
		Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
		Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
		Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
		Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
		Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
		Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
		Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
		Реквизиты.Вставить("Описание",             ОписаниеОшибки);

		ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
		ДобавитьЗаписьВПротоколОбмена(
			ПротоколаОбменаXML,
			Реквизиты);

		СтрокаРезультата.ОбъектИзменен = Истина;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПротоколаОбменаXML;
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);

		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать
			И ЗначениеЗаполнено(ЭлементОчереди.Документ)
			И СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
			И МодульИнтеграцияИСМПСлужебный <> Неопределено Тогда
			МодульИнтеграцияИСМПСлужебный.ОчиститьОчередьЗапросаСтатусаОтгрузкаТоваровИСМП(
				ЭлементОчереди, СтатусОбработки);
		КонецЕсли;

		ЗафиксироватьТранзакцию();

		ТранзакцияЗафиксирована = Истина;

	Исключение

		ОтменитьТранзакцию();

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3';
			           |en = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);

		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;

		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных, ЭлементОчереди.Документ);

		ТранзакцияЗафиксирована = Ложь;

	КонецПопытки;

	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

	Если ТранзакцияЗафиксирована Тогда

		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

		Если СоздаватьШтрихкодыУпаковок Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ШтрихкодыУпаковокТоваров");
			НачатьТранзакцию();
			Попытка
				МенеджерОбъекта.СоздатьШтрихкодыУпаковокПоДаннымДерева(
					ДанныеДереваУпаковок.ДеревоУпаковок,
					ДанныеДереваУпаковок.ПараметрыСканирования);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ИмяСобытияЖурналРегистрации = НСтр(
					"ru = 'ГосИС: Запись штрихкодов упаковок верхнего уровня при обработке очереди сообщений';
					|en = 'ГосИС: Запись штрихкодов упаковок верхнего уровня при обработке очереди сообщений'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
				ВызватьИсключение ПодробноеПредставлениеОшибки;
			КонецПопытки;

		КонецЕсли;

	Иначе

		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗагрузкиПереданногоДокумента(ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса)
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		МенеджерОбъекта.ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
			
	ИначеЕсли ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
		МодульИнтеграцияИСМПСлужебный.ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди, ПараметрыОбмена, РезультатОбработкиЗаявки, ПараметрыОбновленияСтатуса);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиСДополнительнымиДействиями(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатАгрегации";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОтгрузкиТоваровИСМП";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатУдаленияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультаИзмененияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатСозданияАТК";
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки Тогда
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента";
	Иначе
		КлючеваяОперация = "ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатПриемкиТоваровИСМП";
	КонецЕсли;
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация,
		ЭлементОчереди.ВидПродукции,
		ЭлементОчереди.Операция);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// БРМК. Обработка повторного подключения кега в связи с отсутствием расширенного статуса в методе codes/check
	Если Не ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС()
		И ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ВскрытиеПотребительскойУпаковки
		И РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		И СтрНачинаетсяС(РезультатОбработкиЗаявки.ТекстОшибки, "218:")
		И СтрРазделить(РезультатОбработкиЗаявки.ТекстОшибки, Символы.ПС).Количество() = 1 Тогда
		
		РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		РезультатОбработкиЗаявки.ТекстОшибки     = "";
		РезультатОбработкиЗаявки.Статус          = Перечисления.СтатусыДокументовИСМП.Принят;
	
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	ЭлементОчередиОснование = ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
	
	ТипИСМП = ЭлементОчереди.Документ.Метаданные().Имя;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчередиОснование.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписейОснования = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписейОснования.Отбор.Сообщение.Установить(ЭлементОчереди.СообщениеОснование);
		НаборЗаписейОснования.Прочитать();

		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0)
			Или Не (НаборЗаписейОснования.Выбран() И НаборЗаписейОснования.Количество() > 0) Тогда
			
			Если НаборЗаписейОснования.Количество() = 0 Тогда

				УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
				ЗафиксироватьТранзакцию();

			Иначе

				ОтменитьТранзакцию();

			КонецЕсли;
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ТипИСМП);
			
			Возврат;
			
		КонецЕсли;
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиОснование,
			РезультатОбработкиЗаявки);
			
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
			
			ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.Статус            = Неопределено;
			ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
			ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
			ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
				ЕстьЗависимыеСообщения = Истина;
			Иначе
				ЕстьЗависимыеСообщения = Ложь;
				Для Каждого ЭлементОчередиКУдалению Из ПараметрыОбмена.ОчередьСообщений Цикл
					Если ЭлементОчередиКУдалению.Сообщение <> ЭлементОчереди.Сообщение
						И ЭлементОчередиКУдалению.СообщениеОснование = ЭлементОчереди.СообщениеОснование Тогда
						ЕстьЗависимыеСообщения = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			ПараметрыОбновленияСтатуса.Вставить("ЕстьЗависимыеСообщения", ЕстьЗависимыеСообщения);
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ЭлементОчереди.Документ,
				Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
				ПараметрыОбновленияСтатуса);
			
			Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
				МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда

				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание Тогда

					КодАТК = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.Объект[0].body.atk;
					ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
					ВложенныеКоды    = ПараметрыЗапроса.ДанныеСообщения;

					ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
					Если ПараметрыЗапросаКОбновлению.Свойство("РезультатФормированияАТК") Тогда
						РезультатФормированияАТК = ПараметрыЗапросаКОбновлению.РезультатФормированияАТК;
					Иначе
						РезультатФормированияАТК = Новый Массив;
						ПараметрыЗапросаКОбновлению.Вставить("РезультатФормированияАТК", РезультатФормированияАТК);
					КонецЕсли;
					РезультатФормированияАТК.Добавить(Новый Структура("КодАТК, ВложенныеКоды", КодАТК, ВложенныеКоды));

					МодульИнтеграцияИСМПСлужебный.ОбновитьПараметрыЗапросаИсходящегоСообщенияВОчереди(ЭлементОчередиОснование, ПараметрыЗапросаКОбновлению);

				Иначе

					ОбработкаЗагрузкиПереданногоДокумента(
						ЭлементОчереди,
						ПараметрыОбмена,
						РезультатОбработкиЗаявки,
						ПараметрыОбновленияСтатуса);

				КонецЕсли;

			ИначеЕсли РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
				И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса <> Неопределено 
				И ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ДанныеСообщения") Тогда

				МодульИнтеграцияИСМПСлужебный.ВыполнитьЗаписьВРегистрПакетКодов(ЭлементОчереди);

			КонецЕсли;
			
			Если РезультатОбработкиЗаявки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
				СтрокаРезультата = СтруктураИзменения();
				СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
				СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
				СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
				
				СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
				СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
				СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
				
				СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.Передано              = Ложь;
				СтрокаРезультата.Принято               = Истина;
				СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
				СтрокаРезультата.ОбъектИзменен         = Ложь;
				
				СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
				СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
				СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
				
				ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			КонецЕсли;
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		КонецЕсли;
		
		ОбновитьИдентификаторЗаявкиСообщенияОчереди(
			НаборЗаписейОснования,,,
			Новый ХранилищеЗначения(ЭлементОчередиОснование.ПротоколОбмена));
			
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ТипИСМП);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗагрузитьРезультатОбработкиДокумента(ЭлементОчереди, ПараметрыОбмена)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияИСМПСлужебный.ЗагрузитьРезультатОбработкиДокумента");
	
	РезультатОбработкиЗаявки = ИнтерфейсИСМПОбщегоНазначения.СтатусОбработкиДокументаПоИдентификатору(
		ЭлементОчереди.ИдентификаторЗаявки,
		ЭлементОчереди.Организация, ЭлементОчереди.ВидПродукции, ЭлементОчереди.Операция);
	
	Если ТребуетсяОбновлениеКлючаСессии(РезультатОбработкиЗаявки, ЭлементОчереди, ПараметрыОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПовторОперации = ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки);
	
	Если ТребуетсяПовторОперации Тогда
		// Если с момента последнего изменения статуса прошло более 5 минут,
		// то отложим обработку элемента очереди до следующей попытки обмена.
		Если Не ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная) Тогда
			ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементОчереди.ДатаМодификацииУниверсальная)
			И ТекущаяУниверсальнаяДата() - ЭлементОчереди.ДатаМодификацииУниверсальная >= 5 * 60 Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		ИначеЕсли ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетсяПодтверждениеПоступления
			Или ЭлементОчереди.ТекущийСтатус = Перечисления.СтатусыДокументовИСМП.ОжидаетРегистрациюУчастникаГИСМТ Тогда
			ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
		Иначе
			УстановитьДатуСледующейИтерации(ЭлементОчереди, 1);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ЭлементОчереди.ТекущийСтатус                = РезультатОбработкиЗаявки.Статус;
	ЭлементОчереди.ТекущийСтатусОбработки       = РезультатОбработкиЗаявки.СтатусОбработки;
	ЭлементОчереди.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
	
	Если ЭлементОчереди.Документ = Неопределено Тогда
		ИмяШагаЗамераПроизводительности = Строка(ЭлементОчереди.Операция);
	Иначе
		ИмяШагаЗамераПроизводительности = ЭлементОчереди.Документ.Метаданные().Имя;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
		ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийИСМП.Измерения.Сообщение.Тип);
		ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОчередьСообщенийИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
		НаборЗаписей.Прочитать();
		
		Если Не (НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0) Тогда
			
			ОтменитьТранзакцию();
			
			// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ИмяШагаЗамераПроизводительности);
				
			Возврат;
			
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		
		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.Статус            = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = РезультатОбработкиЗаявки.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		ОбработкаЗагрузкиПереданногоДокумента(
			ЭлементОчереди,
			ПараметрыОбмена,
			РезультатОбработкиЗаявки,
			ПараметрыОбновленияСтатуса);
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			РезультатОбработкиЗаявки.Операция,
			ПараметрыОбновленияСтатуса);
		
		ПредставлениеПротоколаОбмена = ДобавитьВПротоколОбмена(
			ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена),
			РезультатОбработкиЗаявки);
		
		Если РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
			Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ
			Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("Документ",             ЭлементОчереди.Документ);
			Реквизиты.Вставить("ИдентификаторЗапроса", ЭлементОчереди.ИдентификаторЗаявки);
			Реквизиты.Вставить("Операция",             ЭлементОчереди.Операция);
			Реквизиты.Вставить("СообщениеОснование",   ЭлементОчереди.СообщениеОснование);
			Реквизиты.Вставить("Версия",               ЭлементОчереди.РеквизитыИсходящегоСообщения.Версия);
			Реквизиты.Вставить("ТипСообщения",         ЭлементОчереди.РеквизитыИсходящегоСообщения.ТипСообщения);
			Реквизиты.Вставить("СтатусОбработки",      РезультатОбработкиЗаявки.СтатусОбработки);
			Реквизиты.Вставить("Описание",             РезультатОбработкиЗаявки.ТекстОшибки);
			
			ПротоколаОбменаXML = ОбщегоНазначения.ЗначениеВСтрокуXML(ЭлементОчереди.ПротоколОбмена);
			ДобавитьЗаписьВПротоколОбмена(
				ПротоколаОбменаXML,
				Реквизиты);
			
			УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			ОбновитьИдентификаторЗаявкиСообщенияОчереди(
				НаборЗаписей,,,
				Новый ХранилищеЗначения(ЭлементОчереди.ПротоколОбмена))
			
		КонецЕсли;
		
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = РезультатОбработкиЗаявки.ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = ПредставлениеПротоколаОбмена;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
		ТранзакцияЗафиксирована = Истина;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ИмяШагаЗамераПроизводительности);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТранзакцияЗафиксирована = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON см. в журнале регистрации.'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация);
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4';
			           |en = 'При загрузке статуса обработки документа %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ЭлементОчереди.Документ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			ЭлементОчереди.Организация,
			РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
		
		ОбъектМетаданных = Неопределено;
		Если ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
			ОбъектМетаданных = ЭлементОчереди.Документ.Метаданные();
		КонецЕсли;
		
		ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации, ОбъектМетаданных, ЭлементОчереди.Документ);
		
	КонецПопытки;
	
	Если ТранзакцияЗафиксирована
		И (РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
		   Или РезультатОбработкиЗаявки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована) Тогда
		
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
	ИначеЕсли Не ТранзакцияЗафиксирована Тогда
		
		ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьДатуСледующейИтерации(ЭлементОчереди, 0);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
КонецПроцедуры

Процедура ЗавершитьПодготовкуСообщенийАбстрактнойОперации(ЭлементОчереди, ПараметрыОбмена, Статус = Неопределено, ТекстОшибки = "") Экспорт
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
		
		НаборСтатусовПоДокументу = РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ЭлементОчереди.Документ,, ЭлементОчереди.Сообщение);
		НовыйСтатус = НаборСтатусовПоДокументу[0].Статус;
		СтрокаРезультата = СтруктураИзменения();
		
		СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
		СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
		СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
		
		СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
		СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
		СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = Ложь;
		СтрокаРезультата.Передано              = Ложь;
		СтрокаРезультата.Принято               = Истина;
		СтрокаРезультата.НовыйСтатус           = НовыйСтатус;
		СтрокаРезультата.ОбъектИзменен         = Ложь;
		
		СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстСообщения               = ТекстОшибки;
		СтрокаРезультата.ПредставлениеПротоколаОбмена = Неопределено;
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);

	Иначе

		ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();

		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ЭлементОчереди.Операция;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = ЭлементОчереди.ПротоколОбмена;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;

		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(ЭлементОчереди.Документ);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ЭлементОчереди.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);

		УдалитьСообщениеИзОчереди(ЭлементОчереди, ПараметрыОбмена);
		УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатПередачиСообщения(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
	ИначеЕсли РезультатыПередачиСообщения.РезультатОтправкиЗапроса <> Неопределено
		И ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
		ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
	КонецЕсли;
	
	Передано = Не ЗначениеЗаполнено(ТекстОшибки);
	
	ЭлементОчереди.ТекстОшибки = ТекстОшибки;
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;

	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	СтрокаРезультата.Передано              = Передано;
	СтрокаРезультата.Принято               = Ложь;
	СтрокаРезультата.НовыйСтатус           = РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = РезультатыПередачиСообщения.Сообщение;
	СтрокаРезультата.ТекстСообщения               = РезультатыПередачиСообщения.ТекстСообщения;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = РезультатыПередачиСообщения.ПредставлениеПротоколаОбмена;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	Если Не Передано Тогда
		ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяПовторОперации(ЭлементОчереди, РезультатОбработкиЗаявки) Экспорт

	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния    = 408       // Таймаут
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 500       // Ошибки сервера
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 502       // Bad Gateway
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 503       // Сервер недоступен
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 504       // Gateway Timeout
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 403       // Ошибка авторизации
		Или РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 429 Тогда // Слишком много запросов
		Возврат Истина;
	КонецЕсли;

	Если Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ЗапросОтправлен
		Или Не РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.ОтветПолучен Тогда
		Возврат Истина;
	КонецЕсли;

	// Ошибка валидации. Один или несколько запрошенных ID заказов не найдены.
	// Способ обхода: повтор запроса.
	Если РезультатОбработкиЗаявки.РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
		Возврат Истина;
	КонецЕсли;

	Если РезультатОбработкиЗаявки.Свойство("СтатусОбработки") И ЭлементОчереди.ТекущийСтатусОбработки = РезультатОбработкиЗаявки.СтатусОбработки
		И (Не РезультатОбработкиЗаявки.Свойство("Статус") Или ЭлементОчереди.ТекущийСтатус = РезультатОбработкиЗаявки.Статус) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция РазобратьТекстОшибки(Знач ТекстОшибки, ЗаголовокОшибки)
	
	НомерНачальногоСимвола = СтрНайти(ТекстОшибки, "{");
	Если НомерНачальногоСимвола = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерКонечногоСимвола = СтрНайти(ТекстОшибки, "}");
	Если НомерКонечногоСимвола = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаголовокОшибки = Лев(ТекстОшибки, НомерНачальногоСимвола -1);
	
	ТекстОшибкиJSON = Сред(ТекстОшибки, НомерНачальногоСимвола, НомерКонечногоСимвола - НомерНачальногоСимвола + 1);
	Возврат ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(ТекстОшибкиJSON, Ложь);
	
КонецФункции

#КонецОбласти

#Область Авторизация

Процедура ЗапроситьУстановитьКлючСессии(ТребуетсяЗапроситьУстановитьКлючСессии, ПодписанныеСообщенияПоОрганизациям,
	ПараметрыОбмена) Экспорт
	
	Если ТребуетсяЗапроситьУстановитьКлючСессии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиУстановкиКлючаСессииПоОрганизациям = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из ТребуетсяЗапроситьУстановитьКлючСессии Цикл
		
		Организация                   = КлючИЗначение.Ключ;
		ДанныеДляУстановкиКлючаСессии = КлючИЗначение.Значение;
		
		МассивОшибок = Новый Массив;
		
		Для Каждого ЭлементДанных Из ДанныеДляУстановкиКлючаСессии Цикл
			
			РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
				ЭлементДанных.ПараметрыЗапроса,
				ЭлементДанных.ПараметрыАвторизации,
				ОбщегоНазначенияИСМПСлужебный.ПодписьИзСвойствПодписи(ЭлементДанных.СвойстваПодписи));
			
			Если Не РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен
				И ПодписанныеСообщенияПоОрганизациям <> Неопределено Тогда
				
				// Вывести сообщение об ошибке установке ключа сессии.
				// Дальнейший обмен по организации невозможен.
				Сообщения = ПодписанныеСообщенияПоОрганизациям[Организация];
				Для Каждого Сообщение Из Сообщения Цикл
					Сообщение.ТекстОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки) Тогда
				
				ЗаголовокОшибки = "";
				СтруктураТекстаОшибки = РазобратьТекстОшибки(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки, ЗаголовокОшибки);
				Если СтруктураТекстаОшибки = Неопределено
					Или Не СтруктураТекстаОшибки.Свойство("error_message") Тогда
					ОписаниеОшибки = РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки;
				Иначе
					ОписаниеОшибки = СтруктураТекстаОшибки.error_message;
					ОбщегоНазначенияИСМП.ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапросаИУстановкиКлючаСессии.ТекстОшибки);
				КонецЕсли;
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка авторизации в сервисе ИС МП:
					           |%1 по организации %2';
					           |en = 'Ошибка авторизации в сервисе ИС МП:
					           |%1 по организации %2'"),
					ОписаниеОшибки, Организация);
				
				МассивОшибок.Добавить(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОшибок.Количество() > 0 Тогда
			ОшибкиУстановкиКлючаСессииПоОрганизациям.Вставить(Организация, СтрСоединить(МассивОшибок, Символы.ПС));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиУстановкиКлючаСессииПоОрганизациям.Количество() > 0 Тогда
		
		ОчередьСообщений = ПараметрыОбмена.ОчередьСообщений;
		Для Каждого Сообщение Из ОчередьСообщений Цикл
			
			ТекстОшибки = ОшибкиУстановкиКлючаСессииПоОрганизациям.Получить(Сообщение.Организация);
			Если ТекстОшибки <> Неопределено Тогда
				ПриОтменеТранзакции(Сообщение, ТекстОшибки, ПараметрыОбмена);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКлючиСессии(СообщенияПоОрганизациям, СертификатыДляПодписанияНаСервере, ПараметрыОбмена) Экспорт
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СертификатыДляПодписанияНаСервере = Неопределено Тогда
		СертификатыДляПодписанияНаСервере = ИнтерфейсАвторизацииИСМПСлужебный.СертификатыДляПодписанияНаСервере();
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		Сообщения   = КлючИЗначение.Значение;
		
		Для Каждого Сообщение Из Сообщения Цикл
			
			Организация = Сообщение.Организация;
			
			Если Сообщение.Назначение = Перечисления.НазначениеСообщенийИСМП.ИСМП
				И ЗначениеЗаполнено(Сообщение.ТекстСообщенияJSON)
				Или Сообщение.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений Тогда
				
				ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Организация);
				
			ИначеЕсли Сообщение.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами
				И Сообщение.Операция <> Перечисления.ВидыОперацийИСМП.ЗапросИдентификатораСоединенияСУЗ Тогда
				
				МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
				РезультатПолученияНастройки = МодульИнтеграцияИСМПСлужебный.НастройкаОбменаСУЗ(
					ПараметрыОбмена,
					Сообщение);
					
				Если Не РезультатПолученияНастройки.Успешно Тогда
					ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
				КонецЕсли;
				
				НастройкаОбмена = РезультатПолученияНастройки.НастройкаОбмена;
				
				Если Не ЗначениеЗаполнено(НастройкаОбмена.ИдентификаторСоединения) Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(НастройкаОбмена);
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
				ПараметрыЗапросаКлючаСессии, Неопределено, Ложь);
	
			ТребуетсяОбновлениеКлючаСессии = (КлючСессии = Неопределено);
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				
				Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
					ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
				КонецЕсли;
				
				Если Не ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, Сообщение) Тогда
					
					РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
					
					ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
					Если ПараметрыАвторизации = Неопределено Тогда
						ОбщегоНазначения.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
						Продолжить;
					КонецЕсли;
					
					СтрокаСертификата = Неопределено;
					Если СертификатыДляПодписанияНаСервере <> Неопределено Тогда
						
						МенеджерКриптографии = СертификатыДляПодписанияНаСервере.МенеджерКриптографии;
						
						СтрокаСертификата = СертификатыДляПодписанияНаСервере.Сертификаты.Найти(
							Организация, "Организация");
						
					КонецЕсли;
					
					КлючСессииЗапрошенИУстановлен = Ложь;
					Если СтрокаСертификата <> Неопределено Тогда
						
						// Для авторизации требуется прикрепленная подпись
						ПараметрыCMS = ЭлектроннаяПодпись.ПараметрыCMS();
						ПараметрыCMS.Открепленная = Ложь;
						
						Если МенеджерКриптографии <> Неопределено Тогда
							МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтрокаСертификата.Пароль;
						КонецЕсли;
						
						РезультатПодписания = ИнтерфейсАвторизацииИСМПСлужебный.Подписать(
							ПараметрыАвторизации.Данные,
							ПараметрыCMS,
							СтрокаСертификата.СертификатКриптографии,
							МенеджерКриптографии);
						
						Если РезультатПодписания.Успех Тогда
							
							РезультатЗапросаИУстановкиКлючаСессии = ИнтерфейсАвторизацииИСМПСлужебный.ЗапроситьУстановитьКлючСессии(
								ПараметрыЗапросаКлючаСессии,
								ПараметрыАвторизации,
								РезультатПодписания.Подпись);
							
							КлючСессииЗапрошенИУстановлен = РезультатЗапросаИУстановкиКлючаСессии.КлючСессииУстановлен;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не КлючСессииЗапрошенИУстановлен Тогда
						
						ДобавитьКОбновлениюКлючейСессий(
							ПараметрыОбмена,
							Сообщение,
							ПараметрыЗапросаКлючаСессии,
							ПараметрыАвторизации,
							Организация);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКОбновлениюКлючейСессий(ПараметрыОбмена, ЭлементОчереди, ПараметрыЗапросаКлючаСессии, ПараметрыАвторизации, Организация = Неопределено) Экспорт
	
	ДобавляемоеЗначение = Новый Структура();
	ДобавляемоеЗначение.Вставить("ПараметрыЗапроса",     ПараметрыЗапросаКлючаСессии);
	ДобавляемоеЗначение.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ДобавляемоеЗначение.Вставить("Назначение",           ЭлементОчереди.Назначение);
	
	Если Организация = Неопределено Тогда
		Организация = ЭлементОчереди.Организация;
	КонецЕсли;
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии.Получить(Организация);
	
	Если КоллекцияПоОрганизации = Неопределено Тогда
		КоллекцияПоОрганизации = Новый Соответствие();
		ПараметрыОбмена.КОбновлениюКлючейСессии.Вставить(Организация, КоллекцияПоОрганизации);
	КонецЕсли;
	
	КоллекцияПоНазначению = КоллекцияПоОрганизации[ЭлементОчереди.Назначение];
	Если КоллекцияПоНазначению = Неопределено Тогда
		КоллекцияПоНазначению = Новый Соответствие();
		КоллекцияПоОрганизации.Вставить(ЭлементОчереди.Назначение, КоллекцияПоНазначению);
	КонецЕсли;
	
	Если ИнтерфейсАвторизацииИСМПСлужебный.ЭтоПараметрыЗапросаСУЗ(ПараметрыЗапросаКлючаСессии) Тогда
		КоллекцияПоНазначению.Вставить(ПараметрыЗапросаКлючаСессии.ПроизводственныйОбъект, ДобавляемоеЗначение);
	Иначе
		КоллекцияПоНазначению.Вставить(ЭлементОчереди.Назначение, ДобавляемоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, ЭлементОчереди) Экспорт
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация];
	
	Если КоллекцияПоОрганизации = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоллекцияПоНазначению = КоллекцияПоОрганизации[ЭлементОчереди.Назначение];
	Если КоллекцияПоНазначению = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнтерфейсАвторизацииИСМПСлужебный.ЭтоПараметрыЗапросаСУЗ(ПараметрыЗапросаКлючаСессии) Тогда
		Возврат КоллекцияПоНазначению[ПараметрыЗапросаКлючаСессии.ПроизводственныйОбъект] <> Неопределено;
	Иначе
		Возврат КоллекцияПоНазначению[ЭлементОчереди.Назначение] <> Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяОбновлениеКлючаСессии(РезультатыПередачиСообщения, ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ТребуетсяОбновлениеКлючаСессии = РезультатыПередачиСообщения.ТребуетсяОбновлениеКлючаСессии;
	Если Не ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
		ПараметрыОбмена.КОбновлениюКлючейСессии = Новый Соответствие;
	КонецЕсли;
	
	Если ЭлементОчереди.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами Тогда
		
		Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
			
			МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
			РезультатПолученияНастройки = МодульИнтеграцияИСМПСлужебный.НастройкаОбменаСУЗ(
				ПараметрыОбмена,
				ЭлементОчереди);
			
			Если Не РезультатПолученияНастройки.Успешно Тогда
				Если РезультатПолученияНастройки.ТребуетсяОбновлениеКлючаСессии Тогда
					Возврат Истина;
				Иначе
					ВызватьИсключение РезультатПолученияНастройки.ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(
				РезультатПолученияНастройки.НастройкаОбмена);
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ЭлементОчереди.Организация);
	КонецЕсли;
	
	Если Не ПараметрыЗапросаДобавленыКОбновлению(ПараметрыОбмена, ПараметрыЗапросаКлючаСессии, ЭлементОчереди) Тогда
	
		РезультатЗапроса = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьПараметрыАвторизации(ПараметрыЗапросаКлючаСессии);
		
		ПараметрыАвторизации = РезультатЗапроса.ПараметрыАвторизации;
		Если ПараметрыАвторизации = Неопределено Тогда
			
			ПриОтменеТранзакции(
				ЭлементОчереди, РезультатЗапроса.ТекстОшибки, ПараметрыОбмена);
			
		Иначе
			
			ДобавитьКОбновлениюКлючейСессий(
				ПараметрыОбмена,
				ЭлементОчереди,
				ПараметрыЗапросаКлючаСессии,
				ПараметрыАвторизации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПрочитатьПараметрыСеансаИС(ПараметрыСеансаИС) Экспорт
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМП <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = ПараметрыСеансаИС.ДанныеКлючаСессииИСМП;
	КонецЕсли;
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииСУЗ <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСУЗ = ПараметрыСеансаИС.ДанныеКлючаСессииСУЗ;
	КонецЕсли;
	
	Если ПараметрыСеансаИС.ДанныеКлючаСессииИСМПРозница <> Неопределено Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМПРозница = ПараметрыСеансаИС.ДанныеКлючаСессииИСМПРозница;
	КонецЕсли;
	
	ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовИСМП);
	ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыСеансаИС.ПараметрыЛогированияЗапросовИСМП);
	
КонецПроцедуры

Функция ДанныеКОбновлениюКлючейСессииПрисутствуют(ПараметрыОбмена, ЭлементОчереди)
	
	Если ПараметрыОбмена.КОбновлениюКлючейСессии = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоллекцияПоОрганизации = ПараметрыОбмена.КОбновлениюКлючейСессии[ЭлементОчереди.Организация];
	Если КоллекцияПоОрганизации = Неопределено
		Или КоллекцияПоОрганизации.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Статусы

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина, СообщениеПрерывания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Ссылка                       КАК Сообщение,
	|	ИСМППрисоединенныеФайлы.Операция                     КАК Операция,
	|	ИСМППрисоединенныеФайлы.ТипСообщения                 КАК ТипСообщения,
	|	ИСМППрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаСоздания,
	|	ЛОЖЬ                                                 КАК КПередаче,
	|	ВЫБОР КОГДА ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	ИСМППрисоединенныеФайлы.СтатусОбработки КАК СтатусОбработки,
	|	НЕОПРЕДЕЛЕНО                            КАК ПротоколОбмена,
	|	ИСМППрисоединенныеФайлы.Версия          КАК Версия
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.Документ = &ДокументСсылка
	|	И НЕ ИСМППрисоединенныеФайлы.Операция В (&СлужебныеОперацииПротокола)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийИСМП.Сообщение                  КАК Сообщение,
	|	ОчередьСообщенийИСМП.Операция                   КАК Операция,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) КАК ТипСообщения,
	|	ОчередьСообщенийИСМП.ДатаСоздания               КАК ДатаСоздания,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки = """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР КОГДА ОчередьСообщенийИСМП.ИдентификаторЗаявки <> """" ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Передан,
	|	НЕОПРЕДЕЛЕНО                        КАК СтатусОбработки,
	|	ОчередьСообщенийИСМП.ПротоколОбмена КАК ПротоколОбмена,
	|	1
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|ГДЕ
	|	ОчередьСообщенийИСМП.Документ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания ВОЗР
	|";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	СлужебныеОперацииПротокола = Новый Массив;
	СлужебныеОперацииПротокола.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетИСМППолучениеРезультатаВыгрузки);
	
	Запрос.УстановитьПараметр("СлужебныеОперацииПротокола", СлужебныеОперацииПротокола);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовИСМП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	АбстрактныеОперации = Новый Массив;
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.СписаниеПроверкаСтатусаОбработкиДокумента);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса);
	АбстрактныеОперации.Добавить(Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировкиРасчетСтатуса);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПакетСтатусовОбработкиОперации = Новый Соответствие;
		ПредыдущаяВыборка = Новый Структура;
		ПредыдущаяВыборка.Вставить("Версия",   Неопределено);
		ПредыдущаяВыборка.Вставить("Операция", Неопределено);
		
		ЕстьОшибки = Ложь;
		ЕстьУспешно = Ложь;
		
		ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если СообщениеПрерывания <> Неопределено
				И Выборка.Сообщение = СообщениеПрерывания Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрыОбновления = Неопределено;
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция);
						
					ПакетСтатусовОбработкиОперации = Новый Соответствие;
					
				ИначеЕсли Выборка.Передан Тогда
					
					Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
						// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
						Продолжить;
					КонецЕсли;

					СтатусОбработки = Выборка.СтатусОбработки;
					Операция        = Выборка.Операция;
					Если Не ЗначениеЗаполнено(СтатусОбработки) Тогда
						Если Выборка.ПротоколОбмена <> Неопределено Тогда
							ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
						КонецЕсли;
						Если ПротоколОбмена = Неопределено Тогда
							Если АбстрактныеОперации.Найти(Выборка.Операция)<> Неопределено Тогда
								СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
								ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса = Истина;
							Иначе
								Продолжить;
							КонецЕсли;
						ИначеЕсли ПротоколОбмена.Количество() > 0 Тогда
							ПоследняяЗаписьПротоколаОбмена = ПротоколОбмена[ПротоколОбмена.Количество() - 1];
							СтатусОбработки = ПоследняяЗаписьПротоколаОбмена.СтатусОбработки;
							Операция        = ПоследняяЗаписьПротоколаОбмена.Операция;
						КонецЕсли;
					КонецЕсли;
					
					Если Не (ОперацииСообщенияСовпадают(Выборка, ПредыдущаяВыборка) Или ПредыдущаяВыборка.Операция = Неопределено) Тогда
						ЕстьУспешно = Ложь;
						ЕстьОшибки = Ложь;
					КонецЕсли;
					
					Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
						ЕстьУспешно = Истина;
					ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично
						Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен Тогда
						ЕстьОшибки = Истина;
					КонецЕсли;
					
					Если ВерсииСообщенияСовпадают(Выборка, ПредыдущаяВыборка) Тогда
						ПакетСтатусовОбработкиОперации.Вставить(СтатусОбработки);
					Иначе
						ПакетСтатусовОбработкиОперации = Новый Соответствие;
						ПакетСтатусовОбработкиОперации.Вставить(СтатусОбработки);
					КонецЕсли;
					
					Если Операция <> Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
						И ПротоколОбмена <> Неопределено Тогда
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
							ДокументСсылка,
							Операция,
							СтатусОбработки);
						
						ПакетСтатусовОбработкиОперации = Новый Соответствие;
						
					Иначе
						
						ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
						ПараметрыОбновленияСтатуса.Статус            = Неопределено;
						ПараметрыОбновленияСтатуса.СтатусОбработки   = СтатусОбработки;
						ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
						ПараметрыОбновленияСтатуса.ПротоколОбмена    = Выборка.ПротоколОбмена;
						ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
						
						Если ПакетСтатусовОбработкиОперации <> Неопределено Тогда
							ПараметрыОбновленияСтатуса.Вставить("ПакетСтатусовОбработкиОперации", ПакетСтатусовОбработкиОперации);
						КонецЕсли;
						
						Если ЕстьОшибки И ЕстьУспешно
							Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбработанаЧастично Тогда
							ПараметрыОбновленияСтатуса.Вставить("ОбработанЧастично", Истина);
						КонецЕсли;
						
						ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
							ДокументСсылка,
							Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
							ПараметрыОбновленияСтатуса);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если Выборка.ПротоколОбмена <> Неопределено Тогда
					ПротоколОбмена = Выборка.ПротоколОбмена.Получить();
				КонецЕсли;
				Если ПротоколОбмена = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.Статус            = Неопределено;
				ПараметрыОбновленияСтатуса.СтатусОбработки   = Выборка.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции = Выборка.Операция;
				ПараметрыОбновленияСтатуса.ПротоколОбмена    = ПротоколОбмена;
				ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
					ДокументСсылка,
					Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
					ПараметрыОбновленияСтатуса);
				
				ПакетСтатусовОбработкиОперации = Новый Соответствие;
				
			КонецЕсли;
			
			Если СообщениеПрерывания = Неопределено Тогда
				
				Если ПараметрыОбновления <> Неопределено Тогда
					РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			Иначе
				
				Если (Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
					Или Выборка.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована
					Или Выборка.СтатусОбработки = Неопределено) Тогда
					
					Если ПараметрыОбновления <> Неопределено Тогда
						РегистрыСведений.СтатусыДокументовИСМП.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПредыдущаяВыборка, Выборка);
			
			Если ТребуетсяОбработатьСообщениеАбстрактнаяОперацияРасчетСтатуса Тогда
				// дополнительные операции по обработке документа выполняются при обработке сообщениия по абстрактной операции
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

// Получить представление статуса ИС МП.
//
// Параметры:
//  Статус                     - ПеречислениеСсылка - Статус документа ИС МП.
//  ВходящиеДальнейшееДействие - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - входящие дальнейшие действия.
//  ДопустимыеДействия         - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Список разрешенных дальнейших действий.
//  ДополнительноеСостояние    - Неопределено, ФорматированнаяСтрока -
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ИС МП.
//
Функция ПредставлениеСтатуса(Статус, ВходящиеДальнейшееДействие, ДопустимыеДействия, ДополнительноеСостояние = Неопределено) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(Статус) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВнимания = СтатусыЦветТекстаТребуетВнимания();
		
		Если СтатусыЦветТекстаТребуетВнимания.Найти(Статус) <> Неопределено Тогда
			СтатусПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(Статус),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина';
						|en = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусПредставление = Новый ФорматированнаяСтрока(Строка(Статус));
		КонецЕсли;
		
	Иначе
		СтатусПредставление = Статус;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП")
		И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки     = "";
		ЯвляетсяГиперссылкой = Истина;
		Представление        = НРег(Строка(ДальнейшееДействие));
		Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗапроситьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
			ТекстГиперссылки = "ЗапроситьGTINНаОстатки";
			Представление    = НСтр("ru = 'запросите GTIN на остатки';
									|en = 'запросите GTIN на остатки'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
			ТекстГиперссылки = "ПередатьДанные";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями Тогда
			ТекстГиперссылки = "ПередатьДанныеСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
			ТекстГиперссылки = "ПередатьОтчет";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями Тогда
			ТекстГиперссылки = "ПередатьОтчетСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗаблокируйтеКодыМаркировки Тогда
			ТекстГиперссылки = "ЗаблокироватьКодыМаркировки";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПеремаркировку Тогда
			ТекстГиперссылки = "ВыполнитеПеремаркировку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
			ТекстГиперссылки = "ВыполнитьАгрегацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями Тогда
			ТекстГиперссылки = "ВыполнитьАгрегациюСИсправлениями"
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию Тогда
			ТекстГиперссылки = "ОтменитьОперацию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных Тогда
			ТекстГиперссылки = "ОтменитьПередачуДанных";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку Тогда
			ТекстГиперссылки = "АннулироватьОтгрузку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление Тогда
			ТекстГиперссылки = "ПодтвердитеПоступление";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОткажитесьОтНакладной Тогда
			ТекстГиперссылки = "ОтказатьсяОтНакладной";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПроверку Тогда
			ТекстГиперссылки = "ВыполнитьПроверку";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК Тогда
			ТекстГиперссылки = "ВыполнитьФормированиеАТК";
			Представление    = НСтр("ru = 'выполните формирование АТК';
									|en = 'выполните формирование АТК'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СоздайтеШтрихкодыУпаковок Тогда
			ТекстГиперссылки = "СоздатьШтрихкодыУпаковок";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ Тогда
			ТекстГиперссылки = "ВыполнитьИндивидуализациюКИЗ";
			Представление    = НСтр("ru = 'выполните индивидуализацию КИЗ';
									|en = 'выполните индивидуализацию КИЗ'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями Тогда
			ТекстГиперссылки = "ПодтвердитеПоступлениеСИсправлениями";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗакройтеЗаказНаЭмиссию Тогда
			ТекстГиперссылки = "ЗакройтеЗаказНаЭмиссию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПолучениеКодовМаркировки Тогда
			ТекстГиперссылки = "ВыполнитеПолучениеКодовМаркировки";
			Представление    = НСтр("ru = 'выполните дозагрузку кодов';
									|en = 'выполните дозагрузку кодов'");
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота Тогда
			ТекстГиперссылки = "АннулироватьВыводИзОборота";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию Тогда
			ТекстГиперссылки = "ЗапроситьКвитанцию";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеОтчет Тогда
			ТекстГиперссылки = "ЗапроситьОтчет";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеРазрешениеНаОтгрузкуПродукции Тогда
			ТекстГиперссылки = "ЗапроситьРазрешениеНаОтгрузкуПродукции";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОформитеПеремещение Тогда
			ТекстГиперссылки = "ОформитьПеремещение";
		ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеРазрешениеНаОтгрузкуПродукции Тогда
			ТекстГиперссылки = "ОтменитьРазрешениеНаОтгрузкуПродукции";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или';
															|en = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				
				//@skip-check new-font
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					Представление,
					Новый Шрифт(,,,,Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		Если ЗначениеЗаполнено(ДополнительноеСостояние) Тогда
			СтрокиДальнейшееДействие.Добавить(" | ");
			СтрокиДальнейшееДействие.Добавить(ДополнительноеСостояние);
		КонецЕсли;
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	ИначеЕсли ЗначениеЗаполнено(ДополнительноеСостояние) Тогда
		СтрокиДальнейшееДействие = Новый Массив;
		СтрокиДальнейшееДействие.Добавить(СтатусПредставление);
		СтрокиДальнейшееДействие.Добавить(" | ");
		СтрокиДальнейшееДействие.Добавить(ДополнительноеСостояние);
		СтатусПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусПредставление;
	
КонецФункции

// Выполняет начальную запись в регистр "Статусы документов ИС МП"
// 
// Параметры:
//  Источник - ДокументОбъект - записываемый документ
Процедура ЗаписатьСтатусДокументаПоУмолчанию(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = (Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый)
		Или Источник.ДополнительныеСвойства.Свойство("ТребуетсяПерезаписьСтатусаПоУмолчанию");
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовИСМП.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовИСМП.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ИСМП в форме документа.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияJSON - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияJSON, Реквизиты, ПроверятьХешБезСсылки = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.Документ);
	Возврат ПротоколОбменаИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ИСМППрисоединенныеФайлы,
		ТекстСообщенияJSON,
		Реквизиты,
		ПроверятьХешБезСсылки);
	
КонецФункции

Функция ДобавитьВПротоколОбмена(ЭлементОчереди, ДанныеОбработки) Экспорт
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		
		ПротоколОбмена = ОбщегоНазначенияИСМП.ИнициализироватьТаблицуПротоколОбмена();
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
			ТипыСтатуса = Новый Массив;
			ТипыСтатуса.Добавить(ТипЗнч(ДанныеОбработки.Статус));
			ПротоколОбмена.Колонки.Добавить("Статус", Новый ОписаниеТипов(ТипыСтатуса));
		КонецЕсли;
		
		ЭлементОчереди.ПротоколОбмена = ПротоколОбмена;
		
	Иначе
		ПротоколОбмена = ЭлементОчереди.ПротоколОбмена;
	КонецЕсли;
	
	ДополнительныеПараметрыHTTP   = ДанныеОбработки.РезультатОтправкиЗапроса.ДополнительныеПараметры;
	ПараметрыОтправкиHTTPЗапросов = ДополнительныеПараметрыHTTP.ПараметрыОтправкиHTTPЗапросов;
	HTTPМетод                     = ДополнительныеПараметрыHTTP.HTTPМетод;
	HTTPЗапрос                    = ДополнительныеПараметрыHTTP.HTTPЗапрос;
	HTTPОтвет                     = ДополнительныеПараметрыHTTP.HTTPОтвет;
	
	ЗапросЗаголовки = Новый Массив;
	Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
		ЗапросЗаголовки.Добавить(
			СтрШаблон("%1: %2", КлючИЗначение.Ключ, КлючИЗначение.Значение));
	КонецЦикла;
	
	ЗаписьПротокола = ПротоколОбмена.Добавить();
	ЗаписьПротокола.ДатаУниверсальная = ТекущаяУниверсальнаяДата();
	ЗаписьПротокола.Операция          = ДанныеОбработки.Операция;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗаписьПротокола, "Статус")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "Статус") Тогда
		ЗаписьПротокола.Статус = ДанныеОбработки.Статус;
	КонецЕсли;
	ЗаписьПротокола.СтатусОбработки   = ДанныеОбработки.СтатусОбработки;
	ЗаписьПротокола.Запрос            = ОбщегоНазначенияИСМП.URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
	ЗаписьПротокола.ЗапросЗаголовки   = СтрСоединить(ЗапросЗаголовки, Символы.ПС);
	ЗаписьПротокола.ЗапросТело        = HTTPЗапрос.ПолучитьТелоКакСтроку();
	
	Если (ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ
		Или ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗНезависимо
		Или ДанныеОбработки.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ)
		И ДанныеОбработки.ДанныеБлока <> Неопределено
		И ДанныеОбработки.ДанныеБлока.КодыМаркировки <> Неопределено Тогда
		
		КоличествоКодовВБлоке = ДанныеОбработки.ДанныеБлока.КодыМаркировки.Количество();
		
		Если КоличествоКодовВБлоке > 1 Тогда
			ПервыйКодМаркировки = СтрШаблон(
				НСтр("ru = '%1... (+ еще %2)';
					|en = '%1... (+ еще %2)'"),
				Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21),
				КоличествоКодовВБлоке - 1);
		ИначеЕсли КоличествоКодовВБлоке = 1 Тогда
			ПервыйКодМаркировки = СтрШаблон("%1...", Лев(ДанныеОбработки.ДанныеБлока.КодыМаркировки[0], 21));
		КонецЕсли;
		
		ЗаписьПротокола.ОтветЗаголовки = ОбменДаннымиИСМПКлиентСервер.ЗаголовкиИзHTTPОтвета(HTTPОтвет.Заголовки);
		
		Если КоличествоКодовВБлоке = 0 Тогда
			ЗаписьПротокола.ОтветТело = СтрШаблон(
				НСтр("ru = '
					       |Новые коды маркировки отсутствуют.
				 	       |Идентификатор последнего блока кодов: %1';
				 	       |en = '
				 	       |Новые коды маркировки отсутствуют.
				 	       |Идентификатор последнего блока кодов: %1'"),
				ДанныеОбработки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов);
		Иначе
			ЗаписьПротокола.ОтветТело = СтрШаблон(
				НСтр("ru = '{
				           |  %1
				           |}
				           |Коды маркировки записаны в пул. Количество: %2
				           |Идентификатор последнего блока кодов: %3';
				           |en = '{
				           |  %1
				           |}
				           |Коды маркировки записаны в пул. Количество: %2
				           |Идентификатор последнего блока кодов: %3'"),
				ПервыйКодМаркировки, КоличествоКодовВБлоке,
				ДанныеОбработки.ДанныеБлока.ИдентификаторПоследнегоБлокаКодов);
		КонецЕсли;
		
	ИначеЕсли HTTPОтвет <> Неопределено Тогда
		
		ЗаписьПротокола.ОтветЗаголовки = ОбменДаннымиИСМПКлиентСервер.ЗаголовкиИзHTTPОтвета(HTTPОтвет.Заголовки);
		
		Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
			ЗаписьПротокола.ОтветТело = HTTPОтвет.Тело;
		Иначе
			ЗаписьПротокола.ОтветТело = HTTPОтвет.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если ДанныеОбработки.Свойство("ТекстОшибки")
			И Не ЗначениеЗаполнено(ЗаписьПротокола.ОтветТело) Тогда
			ЗаписьПротокола.ОтветТело = ДанныеОбработки.ТекстОшибки;
		КонецЕсли;
			
	Иначе
		ЗаписьПротокола.ОтветТело = ДанныеОбработки.ТекстОшибки;
	КонецЕсли;
	
	ПредставлениеПротоколаОбмена = ОбщегоНазначенияИСМП.ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод)
	                             + ОбщегоНазначенияИСМП.ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено,, ДанныеОбработки.ТекстОшибки);
	
	Возврат ПредставлениеПротоколаОбмена;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ВремяОжидания(НомерИтерации) Экспорт
	
	Если НомерИтерации <= 1 Тогда
		ВремяОжидания = 5;
	ИначеЕсли НомерИтерации < 15 Тогда
		ВремяОжидания = 5 * Pow(1.4, НомерИтерации - 1);
	Иначе
		ВремяОжидания = 120;
	КонецЕсли;
	
	Возврат ВремяОжидания;
	
КонецФункции

Функция ВерсииСообщенияСовпадают(Выборка, ПредыдущаяВыборка)
	
	Результат = Ложь;
	
	Если ПредыдущаяВыборка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выборка.Версия = ПредыдущаяВыборка.Версия И Выборка.Операция = ПредыдущаяВыборка.Операция Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииСообщенияСовпадают(Выборка, ПредыдущаяВыборка)
	
	Результат = Ложь;
	
	Если ПредыдущаяВыборка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выборка.Операция = ПредыдущаяВыборка.Операция
		Или СоответствиеЗависимыхОпераций().Получить(Выборка.Операция) = ПредыдущаяВыборка.Операция Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МассивИзСоответствияПоКлючу(ВходящееСоответствие, Ключ)
	
	Если ВходящееСоответствие = Неопределено Тогда
		ВходящееСоответствие = Новый Соответствие;
	КонецЕсли;
	
	Коллекция = ВходящееСоответствие[Ключ];
	Если Коллекция = Неопределено Тогда
		Коллекция = Новый Массив();
		ВходящееСоответствие.Вставить(Ключ, Коллекция);
	КонецЕсли;
	
	Возврат Коллекция;
	
КонецФункции

Функция ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементОчереди.СообщениеОснование) Тогда
		Возврат ЭлементОчереди;
	Иначе
		Возврат ПараметрыОбмена.ОчередьСообщений.Найти(ЭлементОчереди.СообщениеОснование, "Сообщение");
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьЛогЗапросовВоВременноеХранилищеВозвращаемогоЗначения(ПараметрыОбмена, Приемник) Экспорт
	
	Если ОбщегоНазначенияИСВызовСервера.ЭтоФоновоеЗаданиеНаСервере() Тогда
		ПараметрыЛогирования = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
		Если ПараметрыЛогирования.Включено Тогда
			ДанныеЛогаЗапросов = ЛогированиеЗапросовИС.СодержаниеЛогаЗапросов(ПараметрыЛогирования);
			Если ДанныеЛогаЗапросов <> Неопределено Тогда
				ПараметрыОбмена.АдресДанныхЛогаЗапроса = ПоместитьВоВременноеХранилище(ДанныеЛогаЗапросов, ПараметрыОбмена.АдресДанныхЛогаЗапроса);
				Приемник.АдресДанныхЛогаЗапроса = ПараметрыОбмена.АдресДанныхЛогаЗапроса;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторЗаявкиВДокумент(ЭлементОчереди, ДанныеОбработки, ПараметрыОбмена, МенеджерОбъекта)
	
	Если ДанныеОбработки.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята
		Или Не ЗначениеЗаполнено(ЭлементОчереди.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ЭлементОчереди.Документ.Метаданные();
	Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ИдентификаторЗаявки", МетаданныеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить(МетаданныеДокумента.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
	//@skip-check lock-out-of-try
	Блокировка.Заблокировать();
	
	ДокументОбъект                     = ЭлементОчереди.Документ.ПолучитьОбъект();
	ДокументОбъект.ИдентификаторЗаявки = ДанныеОбработки.ИдентификаторЗаявки;
	ДокументОбъект.Записать();
	
КонецПроцедуры

// @skip-check method-too-many-params
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ОчередьСообщенийИСМП - Набор записей
//  ИдентификаторЗаявки - Строка, Неопределено - Идентификатор заявки
//  СтанцияУправленияЗаказами - Неопределено - Станция управления заказами
//  ПротоколОбменаВХранилищеЗначения - Неопределено, ХранилищеЗначения - Протокол обмена в хранилище значения
//  ИдентификаторПоследнегоБлокаКодов - Неопределено - Идентификатор последнего блока кодов
Процедура ОбновитьИдентификаторЗаявкиСообщенияОчереди(
	НаборЗаписей, ИдентификаторЗаявки = Неопределено, СтанцияУправленияЗаказами = Неопределено,
	ПротоколОбменаВХранилищеЗначения = Неопределено, ИдентификаторПоследнегоБлокаКодов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		
		ИзменитьДатуМодификации = Ложь;
		
		Если ИдентификаторЗаявки <> Неопределено
			И ЗаписьНабора.ИдентификаторЗаявки <> ИдентификаторЗаявки Тогда
			ЗаписьНабора.ИдентификаторЗаявки = ИдентификаторЗаявки;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ПротоколОбменаВХранилищеЗначения <> Неопределено Тогда
			ЗаписьНабора.ПротоколОбмена = ПротоколОбменаВХранилищеЗначения;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если СтанцияУправленияЗаказами <> Неопределено
			И ЗаписьНабора.СтанцияУправленияЗаказами <> СтанцияУправленияЗаказами Тогда
			ЗаписьНабора.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИдентификаторПоследнегоБлокаКодов <> Неопределено
			И ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов <> ИдентификаторПоследнегоБлокаКодов Тогда
			ЗаписьНабора.ИдентификаторПоследнегоБлокаКодов = ИдентификаторПоследнегоБлокаКодов;
			ИзменитьДатуМодификации = Истина;
		КонецЕсли;
		
		Если ИзменитьДатуМодификации
			Или Не ЗначениеЗаполнено(ЗаписьНабора.ДатаМодификацииУниверсальная) Тогда
			ЗаписьНабора.ДатаМодификацииУниверсальная = ТекущаяУниверсальнаяДата();
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПриОтменеТранзакции(ЭлементОчереди, ТекстОшибки, ПараметрыОбмена) Экспорт
	
	СтрокаРезультата = СтруктураИзменения();
	
	СтрокаРезультата.Операция                  = ЭлементОчереди.Операция;
	СтрокаРезультата.Назначение                = ЭлементОчереди.Назначение;
	СтрокаРезультата.СтанцияУправленияЗаказами = ЭлементОчереди.СтанцияУправленияЗаказами;
	
	СтрокаРезультата.Организация       = ЭлементОчереди.Организация;
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Ложь;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Истина;
	СтрокаРезультата.НовыйСтатус           = Неопределено;
	СтрокаРезультата.ОбъектИзменен         = Ложь;
	
	СтрокаРезультата.Сообщение                    = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ТекстСообщения               = Неопределено;
	СтрокаРезультата.ПредставлениеПротоколаОбмена = Неопределено;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
	СтрокаСтопЛист = ПараметрыОбмена.СтопЛист.Добавить();
	СтрокаСтопЛист.Организация = ЭлементОчереди.Организация;
	
КонецПроцедуры

Функция ДоступныеСертификаты(СообщенияПоОрганизациям, ДоступныеСертификаты = Неопределено) Экспорт
	
	Если СообщенияПоОрганизациям = Неопределено Тогда
		Возврат ДоступныеСертификаты;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СообщенияПоОрганизациям Цикл
		
		Организация = КлючИЗначение.Ключ;
		
		Если ДоступныеСертификаты = Неопределено Тогда
			ДоступныеСертификаты = Новый Соответствие;
		КонецЕсли;
		
		СертификатыПользователяДляПодписиПоОрганизации = ДоступныеСертификаты[Организация];
		Если СертификатыПользователяДляПодписиПоОрганизации = Неопределено Тогда
			ДоступныеСертификаты.Вставить(
				Организация,
				ОбщегоНазначенияИС.СертификатыПользователяДляПодписиПоОрганизации(Организация, Истина));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеСертификаты;
	
КонецФункции

#КонецОбласти

#КонецОбласти