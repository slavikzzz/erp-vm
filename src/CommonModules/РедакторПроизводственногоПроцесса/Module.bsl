////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции редактора производственного процесса
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЭтапПроизводства

// Устанавливает доступность элементов этапа по статусу
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	ДоступностьРеквизитов - Булево
// 	СпецификацияЗакрыта - Булево
// 	ПрефиксЭлементов - Строка
Процедура УстановитьДоступностьЭлементовЭтапаПоСтатусу(Форма, ДоступностьРеквизитов, СпецификацияЗакрыта, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НомерЭтапа");
	МассивЭлементов.Добавить("НомерСледующегоЭтапа");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("СпособПроизводства");
	МассивЭлементов.Добавить("ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий");
	МассивЭлементов.Добавить("ПланироватьРаботуВидовРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентров");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("УслугиПереработчика");
	МассивЭлементов.Добавить("ГрафикРаботыПартнера");
	МассивЭлементов.Добавить("ПорядокРаботыВидовРабочихЦентров");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].ТолькоПросмотр = НЕ ДоступностьРеквизитов;
	КонецЦикла;
	
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ЗаполнитьВидыРабочихЦентров");
	МассивЭлементов.Добавить("ВидыРабочихЦентровДобавитьАльтернативный");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].Доступность = ДоступностьРеквизитов;
	КонецЦикла;
	
	// Если спецификация закрыта то сделаем недоступными остальные реквизиты
	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ПредварительныйБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
	МассивЭлементов.Добавить("ЗавершающийБуфер");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	МассивЭлементов.Добавить("ДлительностьЭтапа");
	МассивЭлементов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	МассивЭлементов.Добавить("Непрерывный");
	
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Форма.Элементы[СоответствиеЭлементов[ИмяЭлемента]].ТолькоПросмотр = СпецификацияЗакрыта;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет единицу измерения буфера в списке
//
// Параметры:
//  ИнтервалПланирования - ПеречислениеСсылка.ТочностьГрафикаПроизводства	 - интервал планирования
//  СписокВыбора		 - СписокЗначений									 - Список для заполнения.
//
Процедура ЗаполнитьВыборЕдиницыИзмеренияБуфера(ИнтервалПланирования, СписокВыбора) Экспорт

	СписокВыбора.Очистить();
	//++ НЕ УТКА
	Если ИнтервалПланирования = Перечисления.ТочностьГрафикаПроизводства.Час Тогда
		СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.Час);
	КонецЕсли;
	//-- НЕ УТКА
	СписокВыбора.Добавить(Перечисления.ЕдиницыИзмеренияВремени.День);
	
КонецПроцедуры

// Производит проверку единицы измерения буферов
// 
// Параметры:
// 	Объект - СправочникОбъект.ЭтапыПроизводства
// 	Форма - ФормаКлиентскогоПриложения
// 	ЗаменитьЗначения - Булево
// 	ПрефиксЭлементов - Строка
Процедура ПроверитьВыборЕдиницыИзмеренияБуферов(Объект, Форма, ЗаменитьЗначения, ПрефиксЭлементов = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	// Предварительный буфер
	СписокВыбора = Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияПредварительногоБуфера].СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияПредварительногоБуфера) = Неопределено 
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияПредварительногоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ПредварительныйБуфер = 0;
			Объект.ЕдиницаИзмеренияПредварительногоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ПутьКДанным = СтрРазделить(Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияПредварительногоБуфера].ПутьКДанным, ".");
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения предварительного буфера.';
									|en = 'Incorrect unit of measure of the preliminary buffer is specified.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						ПутьКДанным[1],
						ПутьКДанным[0]);
		КонецЕсли; 
		
	КонецЕсли; 

	// Завершающий буфер
	СписокВыбора = Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияЗавершающегоБуфера].СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) = Неопределено
		И ЗначениеЗаполнено(Объект.ЕдиницаИзмеренияЗавершающегоБуфера) Тогда
		
		Если ЗаменитьЗначения Тогда
			
			Объект.ЗавершающийБуфер = 0;
			Объект.ЕдиницаИзмеренияЗавершающегоБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
			
		ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ПутьКДанным = СтрРазделить(Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияЗавершающегоБуфера].ПутьКДанным, ".");
			
			ТекстСообщения = НСтр("ru = 'Указана некорректная единица измерения завершающего буфера.';
									|en = 'Incorrect unit of measure of the follow-up buffer is specified.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,,
						ПутьКДанным[1],
						ПутьКДанным[0]);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

//++ НЕ УТКА

#Область ВидыРабочихЦентров

// Устанавливает условное оформление списка видов РЦ
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма
// 	ИмяТЧ - Строка - имя табличной части
Процедура УстановитьУсловноеОформлениеВидыРабочихЦентров(Форма, ИмяТЧ) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	// Запрет снятия флажка Использовать для вида РЦ
	#Область ЗапретИспользовать
	
	Если Элементы.Найти(ИмяТЧ + "Использовать") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы    = Элементы[ИмяТЧ + "Использовать"]; // ПолеФормы
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".Использовать");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;

		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	КонецЕсли;
	
	#КонецОбласти

	// Выделение альтернативного вида РЦ
	#Область АльтернативныйВРЦЦвет
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеФормы    = Элементы[ИмяТЧ + "ВидРабочегоЦентра"]; // ПолеФормы
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".Альтернативный");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветАльтернативногоВидаРабочихЦентров);
	
	#КонецОбласти
	
	// Варианты наладки
	#Область ВариантыНаладки
	
	Если Элементы.Найти(ИмяТЧ + "ВариантНаладки") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеФормы    = Элементы[ИмяТЧ + "ВариантНаладки"]; // ПолеФормы
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ИспользуетсяВариантНаладки");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																	|en = '<not used>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли;
	
	#КонецОбласти
	
	// Запрет редактирования времени работы, если применяется синхронная загрузка
	#Область ВремяРаботыПриСинхроннойЗагрузке
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеФормы    = Элементы[ИмяТЧ + "ВремяРаботы"]; // ПолеФормы
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ПолеФормы    = Элементы[ИмяТЧ + "ЕдиницаИзмерения"]; // ПолеФормы
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	// ОтметкаНезаполненного для поля Загрузка
	#Область Загрузка_ОтметкаНезаполненного
	
	Если Элементы.Найти(ИмяТЧ + "Загрузка") <> Неопределено Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Загрузка");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ПараллельнаяЗагрузка");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																	|en = '<not used>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Устанавливает дополнительное условное оформление видов рабочих центров при синхронной загрузке
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	ИмяТЧ - Строка
// 	ИмяОбъекта - Строка
// 	ПрефиксЭлементов - Строка
Процедура УстановитьУсловноеОформлениеРеквизитовПриСинхроннойЗагрузке(Форма, ИмяТЧ, ИмяОбъекта = "Объект", ПрефиксЭлементов = "") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	// Скрываем редактирование времени работы, если применяется синхронная загрузка, но не выбран вариант наладки.
	#Область ВремяРаботыПриСинхроннойЗагрузке_Скрыть
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ВремяРаботы"].Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ЕдиницаИзмерения"].Имя);
	
	ОтборГруппаИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборГруппаИ = ОтборГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(ОтборГруппаИ, ИмяТЧ);
	
	ОтборГруппаИ = ОтборГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ДобавитьОтборОформленияОдновременнаяЗагрузка(ОтборГруппаИ, ИмяОбъекта, ИмяТЧ, СоответствиеЭлементов);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Скрываем надпись предназначенную для синхронной загрузки
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Скрыть
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ВремяРаботыПриСинхроннойЗагрузке"].Имя);
		
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
	ОтборГруппаНЕ = ОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(ОтборГруппаНЕ, ИмяТЧ);
		
	ОтборГруппаНЕ = ОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппаНЕ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
		
	ДобавитьОтборОформленияОдновременнаяЗагрузка(ОтборГруппаНЕ, ИмяОбъекта, ИмяТЧ, СоответствиеЭлементов);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти
	
	// Показываем надпись предназначенную для синхронной загрузки если вариант наладки не выбран.
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойЗагрузке_Показать
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ВремяРаботыПриСинхроннойЗагрузке"].Имя);

	ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(Элемент.Отбор, ИмяТЧ);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по варианту наладки>';
																|en = '<by equipment setup settings>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти
	
	// Показываем надпись при одновременном порядке работы если время определяется синхронными видами РЦ.
	#Область ВидыРабочихЦентровВремяРаботыПриСинхроннойОдновременнойЗагрузке_Показать
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ+"ВремяРаботыПриСинхроннойЗагрузке"].Имя);
		
	ДобавитьОтборОформленияОдновременнаяЗагрузка(Элемент.Отбор, ИмяОбъекта, ИмяТЧ, СоответствиеЭлементов);
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по ВРЦ с синхронной загрузкой>';
																|en = '<by work center type with synchronous load>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ДобавитьОтборОформленияСинхроннаяЗагрузкаВариантНаладкиНеЗаполнен(Группа, ИмяТЧ)
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ВидРабочегоЦентра");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
		
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ИспользуетсяВариантНаладки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".ВариантНаладки");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
КонецПроцедуры

Процедура ДобавитьОтборОформленияОдновременнаяЗагрузка(Группа, ИмяОбъекта, ИмяТЧ, СоответствиеЭлементов)
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТЧ + ".СинхроннаяЗагрузка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(СоответствиеЭлементов.ЕстьСинхроннаяЗагрузка);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОбъекта+".ПорядокРаботыВидовРабочихЦентров");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоВидовРабочихЦентров(ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров, ВсеВидыРабочихЦентров, ЗаполнитьВремяСинхроннойЗагрузки) Экспорт
	
	СписокВидовРабочихЦентров = Новый Массив;
	СписокВариантовНаладки = Новый Массив;
	
	КоллекцияВидыРЦ = ВсеВидыРабочихЦентров.ПолучитьЭлементы();	
	КоллекцияВидыРЦ.Очистить();

	Для каждого СтрокаВидРЦ Из ВидыРабочихЦентров Цикл
		НовыйВидРЦ = КоллекцияВидыРЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаВидРЦ);
		
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВидРабочегоЦентра) Тогда
			СписокВидовРабочихЦентров.Добавить(НовыйВидРЦ.ВидРабочегоЦентра);
		КонецЕсли; 
		Если ЗначениеЗаполнено(НовыйВидРЦ.ВариантНаладки) Тогда
			СписокВариантовНаладки.Добавить(НовыйВидРЦ.ВариантНаладки);
		КонецЕсли; 
		
		КоллекцияАльтернативныеВидыРЦ = НовыйВидРЦ.ПолучитьЭлементы();
		СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаВидРЦ.КлючСвязи);
		СписокСтрок = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		НовыйВидРЦ.ДоступноИзменениеИспользовать = (СписокСтрок.Количество() <> 0);
		Для каждого СтрокаАльтернативныйВидРЦ Из СписокСтрок Цикл
			НовыйАльтернативныйВидРЦ = КоллекцияАльтернативныеВидыРЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			НовыйАльтернативныйВидРЦ.Альтернативный = Истина;
			НовыйАльтернативныйВидРЦ.ДоступноИзменениеИспользовать = Истина;
			
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра) Тогда
				СписокВидовРабочихЦентров.Добавить(НовыйАльтернативныйВидРЦ.ВидРабочегоЦентра);
			КонецЕсли; 
			Если ЗначениеЗаполнено(НовыйАльтернативныйВидРЦ.ВариантНаладки) Тогда
				СписокВариантовНаладки.Добавить(НовыйАльтернативныйВидРЦ.ВариантНаладки);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	ЗначенияРеквизитовВидовРЦ =
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			СписокВидовРабочихЦентров, 
			"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
	
	Если СписокВариантовНаладки.Количество() <> 0 Тогда
		ЗначенияРеквизитовВариантовНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
												СписокВариантовНаладки, 
												"ВремяРаботы,ЕдиницаИзмерения");
	Иначе
		ЗначенияРеквизитовВариантовНаладки = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаВидРЦ Из КоллекцияВидыРЦ Цикл
		
		РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаВидРЦ.ВидРабочегоЦентра);
		РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаВидРЦ.ВариантНаладки);
		ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
			РеквизитыВидаРЦ,
			РеквизитыВариантаНаладки,
			Ложь,
			СтрокаВидРЦ,
			ЗаполнитьВремяСинхроннойЗагрузки);
		
		КоллекцияАльтернативныеВидыРЦ = СтрокаВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из КоллекцияАльтернативныеВидыРЦ Цикл
			
			РеквизитыВидаРЦ = ЗначенияРеквизитовВидовРЦ.Получить(СтрокаАльтернативныйВидРЦ.ВидРабочегоЦентра);
			РеквизитыВариантаНаладки = ЗначенияРеквизитовВариантовНаладки.Получить(СтрокаАльтернативныйВидРЦ.ВариантНаладки);
			ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				РеквизитыВидаРЦ,
				РеквизитыВариантаНаладки,
				Ложь,
				СтрокаАльтернативныйВидРЦ,
				ЗаполнитьВремяСинхроннойЗагрузки);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьВидыРабочихЦентров(ВсеВидыРабочихЦентров, ПланироватьРаботу, ВидыРабочихЦентров, АльтернативныеВидыРабочихЦентров) Экспорт

	ВидыРабочихЦентров.Очистить();
	АльтернативныеВидыРабочихЦентров.Очистить();
	
	Если НЕ ПланироватьРаботу Тогда
		Возврат;
	КонецЕсли;
	
	ПустойКлюч = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	ОсновныеВидыРабочихЦентров = ВсеВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из ОсновныеВидыРабочихЦентров Цикл
		НовыйВидРЦ = ВидыРабочихЦентров.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидРЦ, СтрокаОсновнойВидРЦ);
		Если НовыйВидРЦ.КлючСвязи = ПустойКлюч Тогда
			НовыйВидРЦ.КлючСвязи = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		АльтернативныеВидыРЦ = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		Для каждого СтрокаАльтернативныйВидРЦ Из АльтернативныеВидыРЦ Цикл
			НовыйАльтернативныйВидРЦ = АльтернативныеВидыРабочихЦентров.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйАльтернативныйВидРЦ, СтрокаАльтернативныйВидРЦ);
			НовыйАльтернативныйВидРЦ.КлючСвязиВидыРабочихЦентров = НовыйВидРЦ.КлючСвязи;
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(РеквизитыВидаРЦ, РеквизитыВариантаНаладки, ПолучитьРеквизиты, СтрокаВидРЦ, ЗаполнитьВремяСинхроннойЗагрузки = Истина) Экспорт

	Если ПолучитьРеквизиты Тогда
		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра) Тогда
			РеквизитыВидаРЦ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВидРабочегоЦентра, 
													"ИспользуютсяВариантыНаладки,ПараллельнаяЗагрузка,
													|ВариантЗагрузки,ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВидаРЦ = Неопределено;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтрокаВидРЦ.ВариантНаладки) Тогда
			РеквизитыВариантаНаладки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
													СтрокаВидРЦ.ВариантНаладки, 
													"ВремяРаботы,ЕдиницаИзмерения");
		Иначе
			РеквизитыВариантаНаладки = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = Ложь;
	СтрокаВидРЦ.ПараллельнаяЗагрузка = Ложь;
	СтрокаВидРЦ.СинхроннаяЗагрузка = Ложь;
	
	Если РеквизитыВидаРЦ = Неопределено Тогда
		СтрокаВидРЦ.ВремяРаботы = 0;
		СтрокаВидРЦ.ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	ИспользуютсяВариантыНаладки = РеквизитыВидаРЦ.ИспользуютсяВариантыНаладки;
	СтрокаВидРЦ.ИспользуетсяВариантНаладки = (ИспользуютсяВариантыНаладки = Истина);
	
	СтрокаВидРЦ.ПараллельнаяЗагрузка = РеквизитыВидаРЦ.ПараллельнаяЗагрузка;
	
	Если РеквизитыВидаРЦ.ПараллельнаяЗагрузка
		И РеквизитыВидаРЦ.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный Тогда
		
		Если ЗаполнитьВремяСинхроннойЗагрузки Тогда
			
			Если ИспользуютсяВариантыНаладки Тогда
				Если РеквизитыВариантаНаладки <> Неопределено Тогда
					ВремяРаботы = РеквизитыВариантаНаладки.ВремяРаботы;
					ЕдиницаИзмерения = РеквизитыВариантаНаладки.ЕдиницаИзмерения;
				Иначе
					ВремяРаботы = 0;
					ЕдиницаИзмерения = Перечисления.ЕдиницыИзмеренияВремени.ПустаяСсылка();
				КонецЕсли; 
			Иначе
				ВремяРаботы = РеквизитыВидаРЦ.ВремяРаботы;
				ЕдиницаИзмерения = РеквизитыВидаРЦ.ЕдиницаИзмерения;
			КонецЕсли;
			СтрокаВидРЦ.ВремяРаботы = ВремяРаботы;
			СтрокаВидРЦ.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
		КонецЕсли;
		
		СтрокаВидРЦ.СинхроннаяЗагрузка = Истина;
		
	КонецЕсли;
	
	Если СтрокаВидРЦ.СинхроннаяЗагрузка Тогда
		РеквизитыРасчетаПоФормуле = Новый Структура("РасчетПоФормуле,АлгоритмРасчетаКоличества",Ложь,"");
		ЗаполнитьЗначенияСвойств(СтрокаВидРЦ, РеквизитыРасчетаПоФормуле);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка) Экспорт
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
		Объект.ВидыРабочихЦентров,
		Ложь,
		Истина,
		Объект.ОтборПоСвойствам);
		
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыАвтовыбораИРасчетаКоличества(
		Объект.АльтернативныеВидыРабочихЦентров,
		Ложь,
		Истина,
		Объект.ОтборПоСвойствам);
	
	ЗаполнитьДеревоВидовРабочихЦентров(
		Объект.ВидыРабочихЦентров,
		Объект.АльтернативныеВидыРабочихЦентров,
		ВидыРабочихЦентров,
		Истина);
	
	РедакторПроизводственногоПроцессаКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

Процедура ПроверитьОчиститьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка) Экспорт
	
	СохранитьВидыРабочихЦентров(
		ВидыРабочихЦентров,
		Объект.ПланироватьРаботуВидовРабочихЦентров,
		Объект.ВидыРабочихЦентров,
		Объект.АльтернативныеВидыРабочихЦентров);
	
	УправлениеДаннымиОбИзделиях.ПроверитьСоответствиеРеквизитовПодразделению(Объект);
	
	ЗаполнитьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

Процедура РассчитатьДлительностьЭтапа(Объект, ВидыРабочихЦентров) Экспорт
	
	СправочникОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ЭтапыПроизводства"));
	
	СохранитьВидыРабочихЦентров(
		ВидыРабочихЦентров,
		СправочникОбъект.ПланироватьРаботуВидовРабочихЦентров,
		СправочникОбъект.ВидыРабочихЦентров,
		СправочникОбъект.АльтернативныеВидыРабочихЦентров);
	
	СправочникОбъект.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ();
	
	ЗаполнитьЗначенияСвойств(Объект, СправочникОбъект, "ЕдиницаИзмеренияДлительностиЭтапа, ДлительностьЭтапа");
	
КонецПроцедуры

Процедура ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Объект, Форма, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка, ПрефиксЭлементов = "") Экспорт
	
	Справочники.ЭтапыПроизводства.ЗаполнитьВидыРабочихЦентровПоМаршрутнойКарте(Объект);
	ПроверитьВыборЕдиницыИзмеренияБуферов(Объект, Форма, Истина, ПрефиксЭлементов);

	// По умолчанию используем основные виды РЦ
	Для каждого СтрокаОсновнойВидРЦ Из Объект.ВидыРабочихЦентров Цикл
		СтрокаОсновнойВидРЦ.Использовать = Истина;
	КонецЦикла;
	
	ЗаполнитьВидыРабочихЦентров(Объект, ВидыРабочихЦентров, ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

Функция ЗаполнитьВидыРабочихЦентровПоОперациямКонструктор() Экспорт
	
	ДанныеОпераций  = Новый ТаблицаЗначений;
	
	ДанныеОпераций.Колонки.Добавить("Заполнена",         Новый ОписаниеТипов("Булево"));
	ДанныеОпераций.Колонки.Добавить("НомерОперации",     Новый ОписаниеТипов("Число"));
	ДанныеОпераций.Колонки.Добавить("Ссылка",            Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеОперации"));
	ДанныеОпераций.Колонки.Добавить("РабочийЦентр",      Новый ОписаниеТипов("СправочникСсылка.РабочиеЦентры,СправочникСсылка.ВидыРабочихЦентров"));
	ДанныеОпераций.Колонки.Добавить("ВариантНаладки",    Новый ОписаниеТипов("СправочникСсылка.ВариантыНаладки"));
	ДанныеОпераций.Колонки.Добавить("ВремяШтучное",      Новый ОписаниеТипов("Число"));
	ДанныеОпераций.Колонки.Добавить("ВремяШтучноеЕдИзм", Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	ДанныеОпераций.Колонки.Добавить("ВремяПЗ",           Новый ОписаниеТипов("Число"));
	ДанныеОпераций.Колонки.Добавить("ВремяПЗЕдИзм",      Новый ОписаниеТипов("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"));
	ДанныеОпераций.Колонки.Добавить("Загрузка",          Новый ОписаниеТипов("Число"));
	
	ДанныеОпераций.Колонки.Добавить("СодержитТехнологическийПроцесс",      Новый ОписаниеТипов("Булево"));
	ДанныеОпераций.Колонки.Добавить("ТехнологическийПроцесс",              Новый ОписаниеТипов("СправочникСсылка.ТехнологическиеПроцессы"));
	ДанныеОпераций.Колонки.Добавить("КоэффициентТехнологическогоПроцесса", Новый ОписаниеТипов("Число"));
	
	Возврат ДанныеОпераций;
	
КонецФункции

Функция ЗаполнитьВидыРабочихЦентровПоОперациям(ЭтапОбъект, ДанныеОпераций) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеОпераций.Заполнена                           КАК Заполнена,
	|	ДанныеОпераций.НомерОперации                       КАК НомерОперации,
	|	ДанныеОпераций.Ссылка                              КАК Ссылка,
	|	ДанныеОпераций.РабочийЦентр                        КАК РабочийЦентр,
	|	ДанныеОпераций.ВариантНаладки                      КАК ВариантНаладки,
	|	ДанныеОпераций.ВремяШтучное                        КАК ВремяШтучное,
	|	ДанныеОпераций.ВремяШтучноеЕдИзм                   КАК ВремяШтучноеЕдИзм,
	|	ДанныеОпераций.ВремяПЗ                             КАК ВремяПЗ,
	|	ДанныеОпераций.ВремяПЗЕдИзм                        КАК ВремяПЗЕдИзм,
	|	ДанныеОпераций.Загрузка                            КАК Загрузка,
	|	ДанныеОпераций.СодержитТехнологическийПроцесс      КАК СодержитТехнологическийПроцесс,
	|	ДанныеОпераций.ТехнологическийПроцесс              КАК ТехнологическийПроцесс,
	|	ДанныеОпераций.КоэффициентТехнологическогоПроцесса КАК КоэффициентТехнологическогоПроцесса
	|
	|ПОМЕСТИТЬ ВтДанныеОпераций
	|ИЗ
	|	&ДанныеОпераций КАК ДанныеОпераций
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВложенныйЗапрос.РабочийЦентр
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра
	|	КОНЕЦ                                               КАК ВидРабочегоЦентра,
	|	ВложенныйЗапрос.ВариантНаладки                      КАК ВариантНаладки,
	|	ВложенныйЗапрос.Загрузка                            КАК Загрузка,
	|	ВложенныйЗапрос.Коэффициент                         КАК Коэффициент,
	|	ВложенныйЗапрос.НомерОперации                       КАК НомерОперации,
	|	ВложенныйЗапрос.ТехнологическийПроцесс              КАК ТехнологическийПроцесс,
	|	ВложенныйЗапрос.ТехнологическийПроцессНомерОперации КАК ТехнологическийПроцессНомерОперации,
	|	&ТекстРеквизитыРасчетаВремениВыполненияОперации
	|
	|ПОМЕСТИТЬ ВтДанныеПоРабочимЦентрам
	|ИЗ (
	|		ВЫБРАТЬ
	|			ДанныеОпераций.НомерОперации                                                                 КАК НомерОперации,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.Владелец,          НЕОПРЕДЕЛЕНО)                     КАК ТехнологическийПроцесс,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.НомерОперации,     0)                                КАК ТехнологическийПроцессНомерОперации,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.РабочийЦентр,      ДанныеОпераций.РабочийЦентр)      КАК РабочийЦентр,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВариантНаладки,    ДанныеОпераций.ВариантНаладки)    КАК ВариантНаладки,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяШтучное,      ДанныеОпераций.ВремяШтучное)      КАК ВремяШтучное,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяШтучноеЕдИзм, ДанныеОпераций.ВремяШтучноеЕдИзм) КАК ВремяШтучноеЕдИзм,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяПЗ,           ДанныеОпераций.ВремяПЗ)           КАК ВремяПЗ,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяПЗЕдИзм,      ДанныеОпераций.ВремяПЗЕдИзм)      КАК ВремяПЗЕдИзм,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.Загрузка,          ДанныеОпераций.Загрузка)          КАК Загрузка,
	|			ВЫБОР КОГДА ДанныеОпераций.СодержитТехнологическийПроцесс
	|				ТОГДА ДанныеОпераций.КоэффициентТехнологическогоПроцесса
	|			ИНАЧЕ 1 КОНЕЦ                                                                                КАК Коэффициент
	|		ИЗ
	|			ВтДанныеОпераций КАК ДанныеОпераций
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическийПроцессОперации
	|				ПО ДанныеОпераций.СодержитТехнологическийПроцесс
	|					И ДанныеОпераций.ТехнологическийПроцесс = ТехнологическийПроцессОперации.Владелец
	|					И НЕ ТехнологическийПроцессОперации.ПометкаУдаления
	|		ГДЕ
	|			ДанныеОпераций.Заполнена
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			ДанныеОпераций.НомерОперации,
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.Владелец,          НЕОПРЕДЕЛЕНО),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.НомерОперации,     0),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.РабочийЦентр,      РеквизитыОперации.РабочийЦентр),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВариантНаладки,    РеквизитыОперации.ВариантНаладки),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяШтучное,      РеквизитыОперации.ВремяШтучное),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяШтучноеЕдИзм, РеквизитыОперации.ВремяШтучноеЕдИзм),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяПЗ,           РеквизитыОперации.ВремяПЗ),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.ВремяПЗЕдИзм,      РеквизитыОперации.ВремяПЗЕдИзм),
	|			ЕСТЬNULL(ТехнологическийПроцессОперации.Загрузка,          РеквизитыОперации.Загрузка),
	|			ВЫБОР КОГДА РеквизитыОперации.СодержитТехнологическийПроцесс
	|				ТОГДА РеквизитыОперации.КоэффициентТехнологическогоПроцесса
	|			ИНАЧЕ 1 КОНЕЦ
	|		ИЗ
	|			ВтДанныеОпераций КАК ДанныеОпераций
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК РеквизитыОперации
	|				ПО ДанныеОпераций.Ссылка = РеквизитыОперации.Ссылка
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехнологическиеОперации КАК ТехнологическийПроцессОперации
	|				ПО РеквизитыОперации.СодержитТехнологическийПроцесс
	|					И РеквизитыОперации.ТехнологическийПроцесс = ТехнологическийПроцессОперации.Владелец
	|					И НЕ ТехнологическийПроцессОперации.ПометкаУдаления
	|		ГДЕ
	|			НЕ ДанныеОпераций.Заполнена
	|	
	|	) КАК ВложенныйЗапрос
	|
	|ГДЕ
	|	 (ВЫБОР
	|		КОГДА ВложенныйЗапрос.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).УчитыватьДоступностьПоГрафикуРаботы
	|		КОГДА ВложенныйЗапрос.РабочийЦентр ССЫЛКА Справочник.РабочиеЦентры
	|			ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.УчитыватьДоступностьПоГрафикуРаботы
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)
	|	И (ВЫБОР
	|		КОГДА ВложенныйЗапрос.РабочийЦентр ССЫЛКА Справочник.ВидыРабочихЦентров
	|			ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.РабочийЦентр КАК Справочник.ВидыРабочихЦентров).Подразделение
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.РабочийЦентр КАК Справочник.РабочиеЦентры).ВидРабочегоЦентра.Подразделение
	|	КОНЕЦ) = &Подразделение
	|;
	|
	|ВЫБРАТЬ
	|	Т.*
	|ИЗ
	|	ВтДанныеПоРабочимЦентрам КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерОперации,
	|	Т.ТехнологическийПроцессНомерОперации
	|;
	|
	|ВЫБРАТЬ
	|	Т.НомерОперации                                                                                                 КАК НомерОперации,
	|	Т.ТехнологическийПроцесс                                                                                        КАК ТехнологическийПроцесс,
	|	КОЛИЧЕСТВО(Т.ТехнологическийПроцессНомерОперации) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.ТехнологическийПроцессНомерОперации) КАК Последовательно
	|ИЗ
	|	ВтДанныеПоРабочимЦентрам КАК Т
	|ГДЕ
	|	Т.ТехнологическийПроцесс <> НЕОПРЕДЕЛЕНО
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерОперации,
	|	Т.ТехнологическийПроцесс
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстРеквизитыРасчетаВремениВыполненияОперации",
		Справочники.ТехнологическиеОперации.ТекстЗапросаРеквизитыРасчетаВремениВыполненияОперации("ВложенныйЗапрос"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеОпераций",   ДанныеОпераций);
	Запрос.УстановитьПараметр("Подразделение",    ЭтапОбъект.Подразделение);
	
	РезультатыЗапроса    = Запрос.ВыполнитьПакет();
	ВыборкаВРЦ           = РезультатыЗапроса[2].Выбрать();
	РезультатТехпроцессы = РезультатыЗапроса[3].Выгрузить();
	
	ЭтапОбъект.ВидыРабочихЦентров.Очистить();
	ЭтапОбъект.АльтернативныеВидыРабочихЦентров.Очистить();
	ЭтапОбъект.ПорядокРаботыВидовРабочихЦентров = Неопределено;
	
	МассивНомеров = ДанныеОпераций.ВыгрузитьКолонку("НомерОперации");
	
	Если ВыборкаВРЦ.Количество() > 0 Тогда
	
		Если МассивНомеров.Количество() = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивНомеров).Количество()
			И РезультатТехпроцессы.Найти(Ложь, "Последовательно") = Неопределено Тогда
			ЭтапОбъект.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно;
		Иначе
			ЭтапОбъект.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ВидРабочегоЦентра,ВариантНаладки");
		СписокВидовРабочихЦентров = ЭтапОбъект.ВидыРабочихЦентров;
		Пока ВыборкаВРЦ.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаВРЦ);
			СписокСтрок = СписокВидовРабочихЦентров.НайтиСтроки(СтруктураПоиска);
			
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокаВидРЦ = СписокВидовРабочихЦентров.Добавить();
				СтрокаВидРЦ.КлючСвязи         = Новый УникальныйИдентификатор;
				СтрокаВидРЦ.ВидРабочегоЦентра = ВыборкаВРЦ.ВидРабочегоЦентра;
				СтрокаВидРЦ.ВариантНаладки    = ВыборкаВРЦ.ВариантНаладки;
				СтрокаВидРЦ.ЕдиницаИзмерения  = ВыборкаВРЦ.ВремяШтучноеЕдИзм;
				РедакторПроизводственногоПроцессаКлиентСервер.ПриВводеНовойСтрокиВидовРабочихЦентров(СтрокаВидРЦ, Ложь);
			Иначе
				СтрокаВидРЦ = СписокСтрок[0];
			КонецЕсли;
			
			Если ЭтапОбъект.ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Последовательно Тогда
				
				Если ВыборкаВРЦ.ВремяШтучноеЕдИзм = СтрокаВидРЦ.ЕдиницаИзмерения Тогда
					ВремяРаботы = ВыборкаВРЦ.ВремяШтучное;
				Иначе
					ВремяРаботы = ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВЕдиницеИзмерения(
																ПланированиеПроизводстваКлиентСервер.ПолучитьВремяВСекундах(
																			ВыборкаВРЦ.ВремяШтучное,
																			ВыборкаВРЦ.ВремяШтучноеЕдИзм),
																СтрокаВидРЦ.ЕдиницаИзмерения);
				КонецЕсли;
				
				СтрокаВидРЦ.ВремяРаботы = СтрокаВидРЦ.ВремяРаботы + ВремяРаботы * ВыборкаВРЦ.Коэффициент;
				СтрокаВидРЦ.Загрузка    = СтрокаВидРЦ.Загрузка + ВыборкаВРЦ.Загрузка * ВыборкаВРЦ.Коэффициент;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область ТехнологическаяОперация

// Обработчик изменения Участка в операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	ПрефиксЭлементов - Строка

Процедура УчастокПриИзменении(Объект, Форма, ПрефиксЭлементов = "") Экспорт
	
	НастроитьПараметрыВыбораРабочихЦентров(Объект, Форма, Неопределено, ПрефиксЭлементов, "Участок");
	
	Если НЕ Объект.Участок = Справочники.ПроизводственныеУчастки.ПустаяСсылка() 
		И Тип("СправочникСсылка.РабочиеЦентры") = ТипЗнч(Объект.РабочийЦентр) Тогда
		Объект.РабочийЦентр = Справочники.РабочиеЦентры.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения рабочего центра в операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	ПрефиксЭлементов - Строка
Процедура РабочийЦентрПриИзменении(Объект, Форма, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	ПроверитьКорректностьВариантаНаладки(Объект);
	
	ПрочитатьРеквизитыРабочегоЦентра(Объект, Форма,, СоответствиеЭлементов);
	
	НастроитьВидимостьДоступностьПоРеквизитамРЦ(Форма, СоответствиеЭлементов);
	
	Элементы = Форма.Элементы;
	
	Элементы[СоответствиеЭлементов.Участок].ПодсказкаВвода = 
		ПредставлениеУчастка(Объект, Элементы[СоответствиеЭлементов.Участок].Видимость);
	
	Если НЕ Элементы[СоответствиеЭлементов.Загрузка].Видимость Тогда
		Объект.Загрузка = 0;
	КонецЕсли;
	
	Если НЕ Элементы[СоответствиеЭлементов.ВремяШтучное].Видимость Тогда
		Объект.ВремяШтучное = 0;
	КонецЕсли;
	
	Если НЕ Элементы[СоответствиеЭлементов.ВремяПЗ].Видимость Тогда
		Объект.ВремяПЗ = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВариантНаладкиПриИзменении(Объект, Форма, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	РеквизитыЗависятОтВариантаНаладки = Форма[СоответствиеЭлементов.СинхроннаяЗагрузка]
											И Форма[СоответствиеЭлементов.ИспользуютсяВариантыНаладки];
	
	Если РеквизитыЗависятОтВариантаНаладки Тогда
		ПрочитатьРеквизитыВариантаНаладки(Объект, Форма, СоответствиеЭлементов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьРеквизитыРабочегоЦентра(Объект, Форма, ПрефиксЭлементов = "", СоответствиеЭлементов = Неопределено) Экспорт
	
	Если СоответствиеЭлементов = Неопределено Тогда
		СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	КонецЕсли;
	
	ЗначенияРеквизитов = Справочники.ВидыРабочихЦентров.ЗначенияРеквизитовВидаРабочегоЦентра(
		Объект.РабочийЦентр, Объект.ВариантНаладки);
	
	Для каждого КлючИЗначение Из СтруктураСоответствияЭлементовРеквизитамРабочегоЦентра(СоответствиеЭлементов) Цикл
		Если ЗначенияРеквизитов.Свойство(КлючИЗначение.Значение) Тогда
			Форма[КлючИЗначение.Ключ] = ЗначенияРеквизитов[КлючИЗначение.Значение];
		КонецЕсли;
	КонецЦикла;
	
	Форма[СоответствиеЭлементов.СинхроннаяЗагрузка] =
		(ЗначенияРеквизитов.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиРабочихЦентров.Синхронный);
	
КонецПроцедуры

Процедура ПрочитатьРеквизитыВариантаНаладки(Объект, Форма, СоответствиеЭлементов)
	
	ЗначенияРеквизитов = Справочники.ВариантыНаладки.ЗначенияРеквизитовВариантаНаладки(Объект.ВариантНаладки);
	
	Для каждого КлючИЗначение Из СтруктураСоответствияЭлементовРеквизитамРабочегоЦентра(СоответствиеЭлементов) Цикл
		Если ЗначенияРеквизитов.Свойство(КлючИЗначение.Значение) Тогда
			Форма[КлючИЗначение.Ключ] = ЗначенияРеквизитов[КлючИЗначение.Значение];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураСоответствияЭлементовРеквизитамРабочегоЦентра(СоответствиеЭлементов)
	
	Результат = Новый Структура;
	
	Результат.Вставить(СоответствиеЭлементов.ИспользуютсяВариантыНаладки,           "ИспользуютсяВариантыНаладки");
	Результат.Вставить(СоответствиеЭлементов.ПараллельнаяЗагрузка,                  "ПараллельнаяЗагрузка");
	Результат.Вставить(СоответствиеЭлементов.ВремяРаботыПриСинхроннойЗагрузке,      "ВремяРаботы");
	Результат.Вставить(СоответствиеЭлементов.ЕдиницаИзмеренияПриСинхроннойЗагрузке, "ЕдиницаИзмерения");
	Результат.Вставить(СоответствиеЭлементов.ЕдиницаИзмеренияЗагрузки,              "ЕдиницаИзмеренияЗагрузки");
	
	Возврат Результат;
	
КонецФункции


// Производит настройку параметров выбора участка технологических операций
// 
// Параметры:
//  Объект - СправочникОбъект.ТехнологическиеОперации - Объект
//  Форма - ФормаКлиентскогоПриложения - Форма
// 	Подразделение - СправочникСсылка.СтруктураПредприятия
//  ПрефиксЭлементов - Строка - Префикс элементов
Процедура НастроитьПараметрыВыбораУчасток(Объект, Форма, Подразделение = Неопределено, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	Если Подразделение = Неопределено Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
	КонецЕсли;
	
	ИмяПараметра = "Отбор.Владелец";
	
	НастроитьПараметрыВыбора(ИмяПараметра, Подразделение, Форма.Элементы[СоответствиеЭлементов.Участок]);
		
КонецПроцедуры

// Производит настройку параметров выбора рабочих центров технологической операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	Подразделение - СправочникСсылка.СтруктураПредприятия
// 	ПрефиксЭлементов - Строка
// 	СписокПараметров - Строка
Процедура НастроитьПараметрыВыбораРабочихЦентров(Объект, Форма, Подразделение = Неопределено, ПрефиксЭлементов = "", СписокПараметров = "") Экспорт

	Инициализация = ПустаяСтрока(СписокПараметров);
	СтруктураРеквизитов = Новый Структура(СписокПараметров);
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("Подразделение") Тогда
		
		ИмяПараметра = "Отбор.Подразделение";

		Если Подразделение = Неопределено Тогда
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
		КонецЕсли;

		НастроитьПараметрыВыбора(ИмяПараметра, Подразделение, Форма.Элементы[СоответствиеЭлементов.РабочийЦентр]);
		НастроитьПараметрыВыбора(ИмяПараметра, Подразделение, Форма.Элементы[СоответствиеЭлементов.ВспомогательныеРабочиеЦентрыРабочийЦентр]);

	КонецЕсли;

	Если Инициализация Или СтруктураРеквизитов.Свойство("Участок") Тогда
		
		ИмяПараметра = "Отбор.Участок";

		Участок = Объект.Участок;
		
		Если Участок = Справочники.ПроизводственныеУчастки.ПустаяСсылка() Тогда
			Участок = Неопределено;
		КонецЕсли;
			
		НастроитьПараметрыВыбора(ИмяПараметра, Участок, Форма.Элементы[СоответствиеЭлементов.РабочийЦентр]);
		НастроитьПараметрыВыбора(ИмяПараметра, Участок, Форма.Элементы[СоответствиеЭлементов.ВспомогательныеРабочиеЦентрыРабочийЦентр]);
		
	КонецЕсли;

КонецПроцедуры

Процедура НастроитьПараметрыВыбора(ИмяПараметра, ЗначениеПараметра, ЭлементФормы)
	
	ПараметрыВыбораЭлемента = Новый Массив(ЭлементФормы.ПараметрыВыбора);
	
	Индекс = 0;
	Пока Индекс <= ПараметрыВыбораЭлемента.ВГраница() Цикл
		ПараметрВыбора = ПараметрыВыбораЭлемента[Индекс]; // ПараметрВыбора
		Если ПараметрВыбора.Имя = ИмяПараметра Тогда
			ПараметрыВыбораЭлемента.Удалить(Индекс);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		НовыйПараметр = Новый ПараметрВыбора(ИмяПараметра, ЗначениеПараметра);
		ПараметрыВыбораЭлемента.Добавить(НовыйПараметр);
	КонецЕсли;
	
	ЭлементФормы.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры
	
Функция ОпределитьДоступностьЭлементовОперации(СтатусВладельца) Экспорт
	
	Возврат (СтатусВладельца = Перечисления.СтатусыМаршрутныхКарт.ВРазработке
				ИЛИ СтатусВладельца = Перечисления.СтатусыСпецификаций.ВРазработке
				ИЛИ СтатусВладельца = Перечисления.СтатусыТехнологическихПроцессов.ВРазработке);
	
КонецФункции

// Производит настройку элементов операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	ПараметрыПодразделения - Структура
// 	ПрефиксЭлементов - Строка
Процедура НастроитьВидимостьДоступностьЭлементовОперации(Объект, Форма, ПараметрыПодразделения = Неопределено, ПрефиксЭлементов = "") Экспорт
	
	Элементы = Форма.Элементы;
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	ДоступностьЭлементов        = Форма[СоответствиеЭлементов.ДоступностьЭлементов];
	ИспользуютсяВариантыНаладки = Форма[СоответствиеЭлементов.ИспользуютсяВариантыНаладки];
	
	Если НЕ Форма.ТолькоПросмотр Тогда
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("НомерОперации");
		МассивЭлементов.Добавить("НомерСледующейОперации");
		МассивЭлементов.Добавить("Участок");
		МассивЭлементов.Добавить("РабочийЦентр");
		МассивЭлементов.Добавить("ВремяШтучное");
		МассивЭлементов.Добавить("ВремяШтучноеЕдИзм");
		МассивЭлементов.Добавить("ВремяПЗ");
		МассивЭлементов.Добавить("ВремяПЗЕдИзм");
		МассивЭлементов.Добавить("Загрузка");
		МассивЭлементов.Добавить("Непрерывная");
		МассивЭлементов.Добавить("ВспомогательныеРабочиеЦентры");
		МассивЭлементов.Добавить("Количество");
		МассивЭлементов.Добавить("ЕдиницаИзмерения");
		МассивЭлементов.Добавить("Контроль");
		МассивЭлементов.Добавить("МожноПовторить");
		МассивЭлементов.Добавить("МожноПропустить");
		МассивЭлементов.Добавить("ВидОперации");
		
		Для каждого ИмяЭлемента Из МассивЭлементов Цикл
			Элементы[СоответствиеЭлементов[ИмяЭлемента]].ТолькоПросмотр = НЕ ДоступностьЭлементов;
		КонецЦикла;
		
		Элементы[СоответствиеЭлементов.ВариантНаладки].Доступность = ДоступностьЭлементов И ИспользуютсяВариантыНаладки;
		
	КонецЕсли;
	
	ВидимостьПараметров = Истина;
	//++ Устарело_Производство21
	ВидимостьПараметров = Форма.ИспользуетсяПроизводство22 И НЕ Форма.ИспользуетсяПроизводство21;
	//-- Устарело_Производство21
	
	Элементы[СоответствиеЭлементов.ГруппаКоличество].Видимость         = ВидимостьПараметров;
	Элементы[СоответствиеЭлементов.ГруппаВыполнение].Видимость         = ВидимостьПараметров;

	#Область ПараметрыПооперационногоПланированияИПроизводственныхУчастков
	
	Если ПараметрыПодразделения = Неопределено Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Подразделение");
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыПодразделения = Неопределено Тогда
		
		ВидимостьПараметровПооперационногоПланирования = Истина;
		ВидимостьПараметровПроизводственныхУчастков = Истина;
		
	Иначе
		
		ВидимостьПараметровПооперационногоПланирования = (ПараметрыПодразделения.ИспользоватьПооперационноеПланирование
					И НЕ Объект.СодержитТехнологическийПроцесс
					//++ Устарело_Производство21
						И Форма.ИспользуетсяПроизводство22
					ИЛИ ПараметрыПодразделения.УправлениеМаршрутнымиЛистами = Перечисления.УправлениеМаршрутнымиЛистами.ПооперационноеПланирование
						И Форма.ИспользуетсяПроизводство21
					//-- Устарело_Производство21
					);
		ВидимостьПараметровПроизводственныхУчастков = (ПараметрыПодразделения.ИспользоватьУчастки
					ИЛИ (НЕ ПараметрыПодразделения.ИспользоватьУчастки
						И ЗначениеЗаполнено(Объект.Участок))
					);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольВыполненияОпераций") Тогда
			Элементы[СоответствиеЭлементов.Контроль].Видимость = НЕ ПараметрыПодразделения.ИспользоватьПооперационноеПланирование
					ИЛИ Объект.Контроль <> Перечисления.ВариантыКонтроляТехнологическихОпераций.НеТребуется;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы[СоответствиеЭлементов.ГруппаПередаточнаяПартия].Видимость             = ВидимостьПараметровПооперационногоПланирования;
	Элементы[СоответствиеЭлементов.Непрерывная].Видимость                          = ВидимостьПараметровПооперационногоПланирования;
	Элементы[СоответствиеЭлементов.СтраницаВспомогательныеРабочиеЦентры].Видимость = ВидимостьПараметровПооперационногоПланирования;
	Элементы[СоответствиеЭлементов.Участок].Видимость                              = ВидимостьПараметровПроизводственныхУчастков;
	
	#КонецОбласти
	
	НастроитьВидимостьДоступностьПоРеквизитамРЦ(Форма, СоответствиеЭлементов);
	
КонецПроцедуры

// Производит настройку элементов по реквизитам РЦ
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	СоответствиеЭлементов - Структура
Процедура НастроитьВидимостьДоступностьПоРеквизитамРЦ(Форма, СоответствиеЭлементов)
	
	Элементы = Форма.Элементы;
	
	ДоступностьЭлементов        = Форма[СоответствиеЭлементов.ДоступностьЭлементов];
	ИспользуютсяВариантыНаладки = Форма[СоответствиеЭлементов.ИспользуютсяВариантыНаладки];
	ПараллельнаяЗагрузка        = Форма[СоответствиеЭлементов.ПараллельнаяЗагрузка];
	СинхроннаяЗагрузка          = Форма[СоответствиеЭлементов.СинхроннаяЗагрузка];
	
	Если ДоступностьЭлементов Тогда
		Элементы[СоответствиеЭлементов.ВариантНаладки].Доступность = ИспользуютсяВариантыНаладки;
	КонецЕсли;
	
	Элементы[СоответствиеЭлементов.Загрузка].Видимость                 = ПараллельнаяЗагрузка;
	Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияЗагрузки].Видимость = ПараллельнаяЗагрузка;
	
	Элементы[СоответствиеЭлементов.ВремяШтучное].Видимость      = НЕ СинхроннаяЗагрузка;
	Элементы[СоответствиеЭлементов.ВремяШтучноеЕдИзм].Видимость = НЕ СинхроннаяЗагрузка;
	Элементы[СоответствиеЭлементов.ВремяПЗ].Видимость           = НЕ СинхроннаяЗагрузка;
	Элементы[СоответствиеЭлементов.ВремяПЗЕдИзм].Видимость      = НЕ СинхроннаяЗагрузка;
	
	Элементы[СоответствиеЭлементов.ВремяРаботыПриСинхроннойЗагрузке].Видимость      = СинхроннаяЗагрузка;
	Элементы[СоответствиеЭлементов.ЕдиницаИзмеренияПриСинхроннойЗагрузке].Видимость = СинхроннаяЗагрузка;
	
КонецПроцедуры

Процедура ПроверитьКорректностьВариантаНаладки(Объект)
	
	Если ЗначениеЗаполнено(Объект.ВариантНаладки) Тогда
		
		Если ЗначениеЗаполнено(Объект.РабочийЦентр) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Справочник.ВариантыНаладки КАК ВариантыНаладки,
			|	Справочник.РабочиеЦентры КАК РабочиеЦентры
			|ГДЕ
			|	ВариантыНаладки.Ссылка = &ВариантНаладки
			|	И РабочиеЦентры.Ссылка = &РабочийЦентр
			|	И ВЫБОР 
			|		КОГДА ТИПЗНАЧЕНИЯ(&РабочийЦентр) = ТИП(Справочник.РабочиеЦентры)
			|			ТОГДА РабочиеЦентры.ВидРабочегоЦентра
			|		ИНАЧЕ &РабочийЦентр
			|	КОНЕЦ = ВариантыНаладки.Владелец
			|";
			Запрос.УстановитьПараметр("ВариантНаладки", Объект.ВариантНаладки);
			Запрос.УстановитьПараметр("РабочийЦентр",   Объект.РабочийЦентр);
			
			Если Запрос.Выполнить().Пустой() Тогда
				
				Объект.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
				
			КонецЕсли;
			
		Иначе
			
			Объект.ВариантНаладки = Справочники.ВариантыНаладки.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Представление участка.
// 
// Параметры:
//  Объект - СправочникСсылка.ТехнологическиеОперации
//  ВидимостьЭлементаУчасток - Boolean
// 
// Возвращаемое значение:
//  Строка - Представление участка
Функция ПредставлениеУчастка(Объект, ВидимостьЭлементаУчасток) Экспорт
	
	Результат = "";
	
	Если ВидимостьЭлементаУчасток
		И ЗначениеЗаполнено(Объект.РабочийЦентр)
		И ТипЗнч(Объект.РабочийЦентр) = Тип("СправочникСсылка.РабочиеЦентры") Тогда
		Результат = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РабочийЦентр, "Участок"));
	КОнецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДополнительныеРеквизитыВидаОперации

// Устанавливает условное оформление реквизитов вида операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	ПрефиксЭлементов - Строка
// 	СоответствиеЭлементов - Структура
Процедура УстановитьУсловноеОформлениеРеквизитовВидаОперации(Форма, ПрефиксЭлементов = "", СоответствиеЭлементов = Неопределено) Экспорт
	
	УсловноеОформление  = Форма.УсловноеОформление; // УсловноеОформлениеКомпоновкиДанных
	Элементы            = Форма.Элементы;
	
	Если СоответствиеЭлементов = Неопределено Тогда
		СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	КонецЕсли;
	
	ЭлементЗначениеМин  = Элементы[СоответствиеЭлементов.ДопРеквизитыЗначениеМин];  // ПолеФормы
	ЭлементЗначениеМакс = Элементы[СоответствиеЭлементов.ДопРеквизитыЗначениеМакс]; // ПолеФормы
	ЭлементДопРеквизиты = Элементы[СоответствиеЭлементов.ДопРеквизиты];             // ТаблицаФормы
	
	ДопРеквизиты        = Форма[СоответствиеЭлементов.ДопРеквизиты];
	
	//
	
	ПредставлениеНастройки = НСтр("ru = 'Реквизиты вида операции';
									|en = 'Operation kind attributes'");
	
	ЭлементыОформленияУдалить = Новый Массив;
	Для каждого Элемент из УсловноеОформление.Элементы Цикл
		Если Элемент.Представление = ПредставлениеНастройки Тогда
			ЭлементыОформленияУдалить.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент из ЭлементыОформленияУдалить Цикл
		УсловноеОформление.Элементы.Удалить(Элемент);
	КонецЦикла;
	
	СвойстваБезНормативов = Новый СписокЗначений;
	
	//
	
	Для каждого Строка Из ДопРеквизиты Цикл
		
		Если Строка.ТипЗначения.Типы().ВГраница() = 0
			И Строка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			Элемент.Представление = ПредставлениеНастройки;
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗначениеМин.Имя);
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗначениеМакс.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СоответствиеЭлементов.ДопРеквизиты+".Свойство");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Строка.Свойство;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Формат", Строка.Формат);
			
		Иначе
			
			СвойстваБезНормативов.Добавить(Строка.Свойство);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//
	
	Если СвойстваБезНормативов.Количество() > 0 Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = ПредставлениеНастройки;
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗначениеМин.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СоответствиеЭлементов.ДопРеквизиты+".Свойство");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СвойстваБезНормативов;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используются>';
																	|en = '<not used>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		Элемент.Представление = ПредставлениеНастройки;
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементЗначениеМакс.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СоответствиеЭлементов.ДопРеквизиты+".Свойство");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СвойстваБезНормативов;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	КонецЕсли;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = ПредставлениеНастройки;
			
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементДопРеквизиты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СоответствиеЭлементов.ДопРеквизиты+".Удален");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
КонецПроцедуры

// Производит чтение реквизитов вида операции
// 
// Параметры:
// 	Объект - СправочникОбъект.ТехнологическиеОперации
// 	Форма - ФормаКлиентскогоПриложения
// 	ПрефиксЭлементов - Строка
// 	СоответствиеЭлементов - Структура
Процедура ПрочитатьРеквизитыВидаОперации(Объект, Форма, ПрефиксЭлементов = "", СоответствиеЭлементов = Неопределено) Экспорт
	
	Если СоответствиеЭлементов = Неопределено Тогда
		СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	КонецЕсли;
	
	Если Объект.ВидОперации.Пустая() Тогда
		Форма[СоответствиеЭлементов.ДопРеквизиты].Очистить();
		Форма[СоответствиеЭлементов.ДопРеквизитыКоличество] = 0;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Справочники.ВидыТехнологическихОпераций.СоздатьВТСвойстваНабора(
		Объект.ВидОперации,
		МенеджерВременныхТаблиц,
		Истина,
		Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Нормативы.Свойство     КАК Свойство,
		|	Нормативы.ЗначениеМин  КАК ЗначениеМин,
		|	Нормативы.ЗначениеМакс КАК ЗначениеМакс
		|ПОМЕСТИТЬ ВТНормативы
		|ИЗ
		|	&Нормативы КАК Нормативы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Свойство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвойстваНабора.Свойство             КАК Свойство,
		|	СвойстваНабора.Заголовок            КАК Заголовок,
		|	СвойстваНабора.ТипЗначения          КАК ТипЗначения,
		|	СвойстваНабора.ФорматСвойства       КАК Формат,
		|	СвойстваНабора.НомерСтроки          КАК НомерСтроки,
		|	3                                   КАК НомерКартинки,
		|	ЕСТЬNULL(Нормативы.ЗначениеМин, 0)  КАК ЗначениеМин,
		|	ЕСТЬNULL(Нормативы.ЗначениеМакс, 0) КАК ЗначениеМакс,
		|	ЛОЖЬ                                КАК Удален
		|ИЗ
		|	ВТСвойстваНабора КАК СвойстваНабора
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормативы КАК Нормативы
		|		ПО СвойстваНабора.Свойство = Нормативы.Свойство
		|ГДЕ
		|	НЕ СвойстваНабора.ЭтоДополнительноеСведение
		|	И НЕ СвойстваНабора.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Нормативы.Свойство,
		|	Нормативы.Свойство.Заголовок,
		|	Нормативы.Свойство.ТипЗначения,
		|	Нормативы.Свойство.ФорматСвойства,
		|	0,
		|	3,
		|	Нормативы.ЗначениеМин,
		|	Нормативы.ЗначениеМакс,
		|	ИСТИНА
		|ИЗ
		|	ВТНормативы КАК Нормативы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвойстваНабора КАК СвойстваНабора
		|		ПО Нормативы.Свойство = СвойстваНабора.Свойство
		|			И (НЕ СвойстваНабора.ПометкаУдаления)
		|ГДЕ
		|	СвойстваНабора.Свойство ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Удален,
		|	НомерСтроки
		|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Нормативы", Объект.НормативыВидаОперации.Выгрузить());
	
	ДопРеквизиты = Запрос.Выполнить().Выгрузить();
	
	Форма[СоответствиеЭлементов.ДопРеквизиты].Загрузить(ДопРеквизиты);
	Форма[СоответствиеЭлементов.ДопРеквизитыКоличество] = ДопРеквизиты.Количество();
	
	// Заполнение формата доп. реквизитов
	Для каждого Строка Из Форма[СоответствиеЭлементов.ДопРеквизиты] Цикл
		
		Если Строка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			
			Если ЗначениеЗаполнено(Строка.Формат) Тогда
				
				Если СтрНайти(Строка.Формат, "ЧЦ") = 0 Тогда
					Строка.Формат = Строка.Формат + "; ЧЦ=" + Строка.ТипЗначения.КвалификаторыЧисла.Разрядность;
				КонецЕсли;
				
				Если СтрНайти(Строка.Формат, "ЧДЦ") = 0 Тогда
					Строка.Формат = Строка.Формат + "; ЧДЦ=" + Строка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				КонецЕсли;
				
			Иначе
				
				Строка.Формат = СтрШаблон("ЧЦ=%1; ЧДЦ=%2",
					Строка.ТипЗначения.КвалификаторыЧисла.Разрядность,
					Строка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьУсловноеОформлениеРеквизитовВидаОперации(Форма,,СоответствиеЭлементов);
	
КонецПроцедуры

Процедура ВидОперацииПриИзменении(Объект, Форма, ПрефиксЭлементов = "") Экспорт
	
	СоответствиеЭлементов = РедакторПроизводственногоПроцессаКлиентСервер.СоответствиеЭлементов(ПрефиксЭлементов);
	
	ДопРеквизиты  = Форма[СоответствиеЭлементов.ДопРеквизиты];
	ВидОперации   = Форма[СоответствиеЭлементов.ВидОперации];
	
	Если Объект.ВидОперации <> ВидОперации Тогда
		
		ДопРеквизиты.Очистить();
		Форма[СоответствиеЭлементов.ДопРеквизитыКоличество] = ДопРеквизиты.Количество();
		Форма[СоответствиеЭлементов.ВидОперации]            = Объект.ВидОперации;
		
		Объект.НормативыВидаОперации.Очистить();
		
	ИначеЕсли НЕ Объект.ВидОперации.Пустая() Тогда
		
		РедакторПроизводственногоПроцессаКлиентСервер.ЗагрузитьНормативыВидаОперации(Объект, ДопРеквизиты);
		
	КонецЕсли;
	
	ПрочитатьРеквизитыВидаОперации(Объект, Форма,, СоответствиеЭлементов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТКА

#Область ПроверкаЗаполнения

// Конструктор таблицы для проверки последовательности элементов производственного процесса
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Ссылка - СправочникСсылка.ЭтапыПроизводства,СправочникСсылка.ТехнологическиеОперации
// * Наименование - Строка
// * Номер - Число
// * НомерСледующего - Число
Функция ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	МассивТиповСсылки = Новый Массив;
	МассивТиповСсылки.Добавить(Тип("СправочникСсылка.ЭтапыПроизводства"));
	//++ НЕ УТКА
	МассивТиповСсылки.Добавить(Тип("СправочникСсылка.ТехнологическиеОперации"));
	//-- НЕ УТКА
	
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("СправочникОбъект.ЭтапыПроизводства"));
	//++ НЕ УТКА
	МассивТиповОбъекта.Добавить(Тип("СправочникОбъект.ТехнологическиеОперации"));
	//-- НЕ УТКА
	
	Результат.Колонки.Добавить("Объект",                     Новый ОписаниеТипов(МассивТиповОбъекта));
	Результат.Колонки.Добавить("Представление",              Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	
	Результат.Колонки.Добавить("Операция",                   Новый ОписаниеТипов(МассивТиповСсылки));
	Результат.Колонки.Добавить("НомерОперации",              Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НомерСледующейОперации",     Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НетСледующейОперации",       Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка"));
	
	//++ НЕ УТКА
	Результат.Колонки.Добавить("КонтрольОшибкаПоследовательности", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КонтрольОшибкаЕдиницыИзмерения",   Новый ОписаниеТипов("Булево"));
	//-- НЕ УТКА
	
	Возврат Результат;
	
КонецФункции

// Производит проверку порядка элементов производственного процесса
// 
// Параметры:
//	ТаблицаЭлементов - см. ТаблицаПроверкиПорядкаЭлементовПроизводственногоПроцессаКонструктор
//	СтруктураПроверок - Структура
// 	Отказ - Булево
// 	Сообщения - Массив - массив для сбора сообщений
// 	ВладелецОбъект - СправочникОбъект.ЭтапыПроизводства
//
Процедура ПроверитьПорядокЭлементовПроизводственногоПроцесса(ТаблицаЭлементов, СтруктураПроверок, Отказ, Сообщения = Неопределено, ВладелецОбъект = Неопределено) Экспорт
	
	Если ТаблицаЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерОперации");
	
	ТаблицаЭлементов.ЗаполнитьЗначения("Номер следующего", "ПолеНомерСледующейОперации");
	ТаблицаЭлементов.Индексы.Добавить("НомерОперации");
	
	Для Индекс = 0 По ТаблицаЭлементов.Количество() - 1 Цикл
		
		ТекущаяСтрока = ТаблицаЭлементов[Индекс];
		
		СтруктураПоиска.НомерОперации = ТекущаяСтрока.НомерСледующейОперации;
		СледующиеОперации = ТаблицаЭлементов.НайтиСтроки(СтруктураПоиска);
		
		Если НЕ ЗначениеЗаполнено(СледующиеОперации) И ТекущаяСтрока.НомерСледующейОперации <> 0 Тогда
			ТекущаяСтрока.НетСледующейОперации = Истина;
		КонецЕсли;
		
		//++ НЕ УТКА
		
		Если СтруктураПроверок.Свойство("КонтрольныеОперации")
			И ТекущаяСтрока.Объект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих Тогда
			
			Если НЕ ЗначениеЗаполнено(СледующиеОперации) Тогда
				ТекущаяСтрока.КонтрольОшибкаПоследовательности = Истина;
			Иначе
				Для каждого СледующаяОперация Из СледующиеОперации Цикл
					
					Если СледующаяОперация.Объект.Контроль <> Перечисления.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих
						И СледующаяОперация.Объект.Контроль <> Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется Тогда
						ТекущаяСтрока.КонтрольОшибкаПоследовательности = Истина;
					КонецЕсли;
					
					Если (СледующаяОперация.Объект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих
							ИЛИ СледующаяОперация.Объект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется)
						И ТекущаяСтрока.Объект.ЕдиницаИзмерения <> СледующаяОперация.Объект.ЕдиницаИзмерения Тогда
						ТекущаяСтрока.КонтрольОшибкаЕдиницыИзмерения = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Если НЕ ПоследовательностьСпискаОперацийПравильная(ТаблицаЭлементов, СтруктураПроверок) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	КлючДанных = Неопределено;
	Если ВладелецОбъект <> Неопределено Тогда
		КлючДанных = ?(ВладелецОбъект.ЭтоНовый(), ВладелецОбъект.ПолучитьСсылкуНового(), ВладелецОбъект.Ссылка);
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных);
	
КонецПроцедуры

// Проверяет последовательность этапов спецификации или операций маршрутных карт
//
// Параметры:
//  ВладелецОпераций	 - СправочникСсылка	 - ссылка на владельца операций
//  СтруктураПараметров	 - Структура		 - обязательные поля: 
//  											ИмяСправочникаОпераций, ПолеНомерОперации, ПолеНомерСледующейОперации
//  СтруктураПроверок	 - Структура		 - состав проверок и тексты сообщений об ошибках
//  Отказ				 - Булево			 - признак отмены текущего действия.
// 
// Возвращаемое значение:
//  Булево - истина, если последовательность операций правильная.
//
Функция ПоследовательностьОперацийПравильная(ВладелецОпераций, СтруктураПараметров, СтруктураПроверок, Отказ = Ложь) Экспорт
	
	ИмяСправочникаОпераций     = СтруктураПараметров.ИмяСправочникаОпераций;
	ПолеНомерОперации          = СтруктураПараметров.ПолеНомерОперации;
	ПолеНомерСледующейОперации = СтруктураПараметров.ПолеНомерСледующейОперации;
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|	СпрОперации.Ссылка КАК Операция,
	|	СпрОперации.Представление КАК Представление,
	|	
	|	&КорректностьПоследовательностиКонтрольныхОпераций,
	|	
	|	СпрОперации." + ПолеНомерОперации + " КАК НомерОперации,
	|	СпрОперации." + ПолеНомерСледующейОперации + " КАК НомерСледующейОперации,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпрСледующиеОперации.Ссылка ЕСТЬ NULL 
	|				И СпрОперации." + ПолеНомерСледующейОперации + " <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК НетСледующейОперации
	|
	|ИЗ
	|	Справочник." + ИмяСправочникаОпераций + " КАК СпрОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочникаОпераций + " КАК СпрСледующиеОперации
	|		ПО СпрОперации." + ПолеНомерСледующейОперации + " = СпрСледующиеОперации." + ПолеНомерОперации + "
	|			И (СпрСледующиеОперации.Владелец = &Владелец)
	|			И (НЕ СпрСледующиеОперации.ПометкаУдаления)
	|ГДЕ
	|	СпрОперации.Владелец = &Владелец
	|	И НЕ СпрОперации.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрОперации.Ссылка,
	|	СпрОперации.Представление,
	|	СпрОперации." + ПолеНомерОперации + ",
	|	СпрОперации." + ПолеНомерСледующейОперации;
	
	ТекстКонтрольныеОперации = "";
	//++ НЕ УТКА
	Если СтруктураПроверок.Свойство("КонтрольныеОперации") Тогда
		ТекстКонтрольныеОперации = ТекстКорректностьПоследовательностиКонтрольныхОпераций();
	КонецЕсли;
	//-- НЕ УТКА
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КорректностьПоследовательностиКонтрольныхОпераций," , ТекстКонтрольныеОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ВладелецОпераций);
	
	СписокОпераций = Запрос.Выполнить().Выгрузить();
	
	СписокОпераций.Колонки.Добавить("ПолеНомерСледующейОперации", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки));
	СписокОпераций.ЗаполнитьЗначения(ПолеНомерСледующейОперации, "ПолеНомерСледующейОперации");
	
	ЕстьОшибки = НЕ ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций);
	
	Отказ = Отказ ИЛИ ЕстьОшибки;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет заданный список операций/этапов на корректность по следующим критериям:
// - имеется первая операция и она одна;
// - имеется последняя операция;
// - имеются все последующие операции.
//
// Параметры:
//	СписокОпераций - ТаблицаЗначений - операции/этапы для проверки, колонки:
//		* Операция - СправочникСсылка - ссылка на этап/операцию.
//		* Представление - Строка - представление этапа/операции.
//		* НомерОперации - Число - номер операции.
//		* НомерСледующейОперации - Число - номер следующей операции.
//		* НетСледующейОперации - Булево - флаг того, что в списке отсутствует операция,
//			номер которой указан в качестве номера следующей операции.
//		* ПолеНомерСледующейОперации - Строка - наименование реквизита формы, с которым необходимо
//			связать сообщение об отсутствии следующей операции.
//  СтруктураПроверок - Структура - состав проверок и тексты сообщений об ошибках
//  ВладелецОпераций - СправочникСсылка - ссылка на владельца операций.
//
// Возвращаемое значение:
//   Булево   - истина, если последовательность операций правильная.
//
Функция ПоследовательностьСпискаОперацийПравильная(СписокОпераций, СтруктураПроверок, ВладелецОпераций = Неопределено) Экспорт
	
	ЕстьОшибки = Ложь;
	
	#Область НетПервойОперации_НесколькоПервыхОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерОперации", 1));
	Если СтруктураПроверок.Свойство("НетПервойОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПервойОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПервыхОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПервыхОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетПоследнейОперации_НесколькоПоследнихОпераций
	
	СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НомерСледующейОперации", 0));
	Если СтруктураПроверок.Свойство("НетПоследнейОперации")
		И СписокСтрок.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НетПоследнейОперации,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки);
		
	ИначеЕсли СтруктураПроверок.Свойство("НесколькоПоследнихОпераций")
		И СписокСтрок.Количество() > 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураПроверок.НесколькоПоследнихОпераций,
			ВладелецОпераций,
			,
			,
			ЕстьОшибки); 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НетСледующейОперации
	
	Если СтруктураПроверок.Свойство("НетСледующейОперации") Тогда
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("НетСледующейОперации", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СтруктураПроверок.НетСледующейОперации,
				ЭлементКоллекции.Представление);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭлементКоллекции.Операция,
				ЭлементКоллекции.ПолеНомерСледующейОперации,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;

	#КонецОбласти
	
	//++ НЕ УТКА
	
	#Область КонтрольныеОперации
	
	Если СтруктураПроверок.Свойство("КонтрольныеОперации") Тогда
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("КонтрольОшибкаПоследовательности", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтрШаблон(СтруктураПроверок.КонтрольныеОперации.КонтрольОшибкаПоследовательности,
				ЭлементКоллекции.Представление);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
		СписокСтрок = СписокОпераций.НайтиСтроки(Новый Структура("КонтрольОшибкаЕдиницыИзмерения", Истина));
		Для каждого ЭлементКоллекции Из СписокСтрок Цикл
			
			ТекстСообщения = СтрШаблон(СтруктураПроверок.КонтрольныеОперации.КонтрольОшибкаЕдиницыИзмерения,
				ЭлементКоллекции.Представление);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				,
				,
				,
				ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//-- НЕ УТКА
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Производит проверку заполнения реквизитов этапа производства
// 
// Параметры:
// 	ЭтапОбъект - СправочникОбъект.ЭтапыПроизводства
// 	Отказ - Булево
// 	Сообщения - Массив - массив для сбора сообщений
Процедура ПроверитьЗаполнениеРеквизитовЭтапа(ЭтапОбъект, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	КлючДанных = ?(ЭтапОбъект.ЭтоНовый(), ЭтапОбъект.ПолучитьСсылкуНового(), ЭтапОбъект.Ссылка);
	
	Если НЕ ЭтапОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных, Истина);
	
КонецПроцедуры

Процедура ПроверитьЭтапыПроизводстваНаСтороне(Этапы, ДанныеСпецификации, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	Если Этапы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производство на стороне доступно только для типа производственного процесса "Изготовление, сборка"
	Если ДанныеСпецификации.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'В спецификации типа ""%1"" не допускается использовать этапы, выполняемые переработчиком';
										|en = 'Cannot use the stages performed by the subcontractor in BOM of the %1 type'"),
			ДанныеСпецификации.ТипПроизводственногоПроцесса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	// В КА не допускается в многоэтапной спецификации использовать этапы, выполняемые переработчиком
	Если ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс И ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		ТекстСообщения = НСтр("ru = 'В многоэтапной спецификации не допускается использовать этапы, выполняемые переработчиком';
								|en = 'Cannot use stages executed by the subcontractor in multi-stage BOM'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ДанныеЭтапов = Новый ТаблицаЗначений;
	ДанныеЭтапов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ЭтапыПроизводства"));
	ДанныеЭтапов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДанныеЭтапов.Колонки.Добавить("ПроизводствоНаСтороне", Новый ОписаниеТипов("Булево"));
	ДанныеЭтапов.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов("Число"));
	ДанныеЭтапов.Колонки.Добавить("НомерСледующегоЭтапа", Новый ОписаниеТипов("Число"));
	
	Для каждого Этап Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЭтапов.Добавить(), Этап);
	КонецЦикла;
	
	ТаблицаМатериалыИУслуги = ДанныеСпецификации.МатериалыИУслуги.Выгрузить();
	ТаблицаВыходныеИзделия  = ДанныеСпецификации.ВыходныеИзделия.Выгрузить();
	ТаблицаВозвратныеОтходы = ДанныеСпецификации.ВозвратныеОтходы.Выгрузить();
	//++ НЕ УТКА
	ТаблицаПромежуточныйВыпуск = ДанныеСпецификации.ПромежуточныйВыпуск.Выгрузить();
	//-- НЕ УТКА
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеЭтапов.Ссылка,
	|	ДанныеЭтапов.Наименование,
	|	ДанныеЭтапов.ПроизводствоНаСтороне,
	|	ДанныеЭтапов.НомерЭтапа,
	|	ДанныеЭтапов.НомерСледующегоЭтапа
	|ПОМЕСТИТЬ ВТДанныеЭтапов
	|ИЗ
	|	&ДанныеЭтапов КАК ДанныеЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки                                                   КАК НомерСтроки,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.Номенклатура КАК Справочник.Номенклатура)            КАК Номенклатура,
	|	ВЫРАЗИТЬ(МатериалыИУслуги.ЭтапРедактирование КАК Справочник.ЭтапыПроизводства) КАК ЭтапРедактирование,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе                                         КАК ПроизводитсяВПроцессе,
	|	ВЫБОР
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                          КАК ПроизводитсяНаЭтапе,
	|	ВЫБОР
	|		КОГДА МатериалыИУслуги.ИсточникПолученияПолуфабриката ССЫЛКА Справочник.ЭтапыПроизводства
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                                          КАК ПроизводитсяПоСпецификации
	|ПОМЕСТИТЬ ВТТаблица
	|ИЗ
	|	&МатериалыИУслуги КАК МатериалыИУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЭтапов.Ссылка                КАК Ссылка,
	|	СписокЭтапов.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне
	|ПОМЕСТИТЬ ВтСписокЭтапов
	|ИЗ
	|	ВТДанныеЭтапов КАК СписокЭтапов
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЭтапыПроизводства.ПустаяСсылка),
	|	МАКСИМУМ(СписокЭтапов.ПроизводствоНаСтороне)
	|ИЗ
	|	ВТДанныеЭтапов КАК СписокЭтапов
	|ГДЕ
	|	СписокЭтапов.НомерЭтапа = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокЭтапов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.НомерСтроки                       КАК НомерСтроки,
	|	МатериалыИУслуги.Номенклатура                      КАК Номенклатура,
	|	ЕСТЬNULL(СписокЭтапов.ПроизводствоНаСтороне, ЛОЖЬ) КАК ПроизводствоНаСтороне,
	|	МатериалыИУслуги.ПроизводитсяВПроцессе             КАК ПроизводитсяВПроцессе,
	|	МатериалыИУслуги.ПроизводитсяНаЭтапе               КАК ПроизводитсяНаЭтапе,
	|	МатериалыИУслуги.ПроизводитсяПоСпецификации        КАК ПроизводитсяПоСпецификации
	|ПОМЕСТИТЬ ВТМатериалыИУслуги
	|ИЗ
	|	ВТТаблица КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСписокЭтапов КАК СписокЭтапов
	|		ПО МатериалыИУслуги.ЭтапРедактирование = СписокЭтапов.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Ссылка               КАК Этап,
	|	Таблица.Наименование         КАК НаименованиеЭтапа,
	|	Таблица.НомерЭтапа           КАК НомерЭтапа,
	|	Таблица.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
	|ИЗ
	|	ВТДанныеЭтапов КАК Таблица
	|ГДЕ 
	|	 Таблица.ПроизводствоНаСтороне
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки
	|ГДЕ
	|	ЛОЖЬ
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТМатериалыИУслуги КАК Т
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					И Т.ПроизводствоНаСтороне
	|					И НЕ &ИспользуетсяТолькоПередачаВПереработку2_5
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	//-- Устарело_Переработка24
	|";
	
	НастройкиПодсистемыПроизводство = ПроизводствоСерверПовтИсп.НастройкиПодсистемыПроизводство();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МатериалыИУслуги", ТаблицаМатериалыИУслуги);
	Запрос.УстановитьПараметр("ДанныеЭтапов", ДанныеЭтапов);
	//++ Устарело_Переработка24
	Запрос.УстановитьПараметр("ИспользуетсяТолькоПередачаВПереработку2_5", НастройкиПодсистемыПроизводство.ИспользуетсяТолькоПередачаВПереработку2_5);
	//-- Устарело_Переработка24
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	// Для этапов выполняемых на стороне должны быть описаны материалы и выходные изделия
	Если Не Результат[КоличествоПакетов - 3].Пустой() Тогда
		
		Если ДанныеСпецификации.МногоэтапныйПроизводственныйПроцесс Тогда
			
			//++ НЕ УТКА
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ЭтапРедактирование");
			
			ПараметрыОтбораОтправитель = Новый Структура;
			ПараметрыОтбораОтправитель.Вставить("ЭтапОтправитель");
			
			ПараметрыОтбораПолучатель = Новый Структура;
			ПараметрыОтбораПолучатель.Вставить("ЭтапПолучатель");
			
			ПараметрыОтбораПоПустомуЭтапу = Новый Структура;
			ПараметрыОтбораПоПустомуЭтапу.Вставить("ЭтапРедактирование", Справочники.ЭтапыПроизводства.ПустаяСсылка());
			
			ШаблонТекстаНетСтрокВТабличнойЧасти = НСтр("ru = 'Для этапа %1, выполняемого переработчиком, не введено ни одной строки в список ""%2""';
														|en = 'No lines are entered into the ""%2"" list for stage %1 performed by data subcontractor'");
			
			Выборка = Результат[КоличествоПакетов - 2].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ПараметрыОтбора.ЭтапРедактирование = Выборка.Этап;
				
				МассивСтрокВыходныеИзделия = ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокВыходныеИзделия,
						ТаблицаВыходныеИзделия.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				МассивСтрокВозвратныеОтходы = ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерСледующегоЭтапа = 0 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокВозвратныеОтходы,
						ТаблицаВозвратныеОтходы.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				ЕстьПромежуточныйВыпуск = Ложь;
				Если ДанныеСпецификации.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества Тогда
					ЕстьПромежуточныйВыпуск = Истина;
				ИначеЕсли ДанныеСпецификации.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную Тогда
					ПараметрыОтбораОтправитель.ЭтапОтправитель = Выборка.Этап;
					МассивСтрокПромежуточныйВыпуск = ТаблицаПромежуточныйВыпуск.НайтиСтроки(ПараметрыОтбораОтправитель);
					ЕстьПромежуточныйВыпуск = МассивСтрокПромежуточныйВыпуск.ВГраница() <> -1;
				КонецЕсли;
				
				// проверяем все этапы за исключением последнего, последний проверит платформа
				Если Выборка.НомерСледующегоЭтапа <> 0
					И МассивСтрокВозвратныеОтходы.ВГраница() = -1
					И Не ЕстьПромежуточныйВыпуск Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонТекстаНетСтрокВТабличнойЧасти,
						Выборка.НаименованиеЭтапа,
						ДанныеСпецификации.ПредставлениеТаблицыВФорме("ВозвратныеОтходы"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ДанныеСпецификации, "ВозвратныеОтходы",, Отказ);
					
				КонецЕсли;
				
				МассивСтрокМатериалыИУслуги = ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбора);
				
				Если Выборка.НомерЭтапа = 1 Тогда
					
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрокМатериалыИУслуги,
						ТаблицаМатериалыИУслуги.НайтиСтроки(ПараметрыОтбораПоПустомуЭтапу));
						
				КонецЕсли;
				
				ЕстьПотреблениеПромежуточногоВыпуска = Ложь;
				Если ДанныеСпецификации.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.ТоварДругогоКачества
					И Выборка.НомерЭтапа <> 1 Тогда
					ЕстьПотреблениеПромежуточногоВыпуска = Истина;
				ИначеЕсли ДанныеСпецификации.ВариантПромежуточногоВыпуска = Перечисления.ВариантыПромежуточногоВыпуска.НастраиваетсяВручную Тогда
					ПараметрыОтбораПолучатель.ЭтапПолучатель = Выборка.Этап;
					МассивСтрокПромежуточныйВыпуск = ТаблицаПромежуточныйВыпуск.НайтиСтроки(ПараметрыОтбораПолучатель);
					ЕстьПотреблениеПромежуточногоВыпуска = МассивСтрокПромежуточныйВыпуск.ВГраница() <> -1;
				КонецЕсли;
				
				// Для этапа, выполняемого переработчиком, должен быть описан хотя бы один материал
				Если МассивСтрокМатериалыИУслуги.ВГраница() = -1
					И Не ЕстьПотреблениеПромежуточногоВыпуска Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонТекстаНетСтрокВТабличнойЧасти,
						Выборка.НаименованиеЭтапа,
						ДанныеСпецификации.ПредставлениеТаблицыВФорме("МатериалыИУслуги"));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, ДанныеСпецификации, "МатериалыИУслуги",, Отказ);
						
				КонецЕсли;
				
			КонецЦикла;
			//-- НЕ УТКА
			
		Иначе
			
			// Для этапа, выполняемого переработчиком, должен быть описан хотя бы один материал
			Если ТаблицаМатериалыИУслуги.Количество() = 0 Тогда
				
				ШаблонТекста = НСтр("ru = 'Не введено ни одной строки в список ""Материалы и услуги""';
									|en = 'No line is entered into the ""Materials and services"" list'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ШаблонТекста, ДанныеСпецификации, "МатериалыИУслуги",, Отказ);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// В списке ""Материалы и работы"" не допускается указание работ для этапов, выполняемых переработчиком
	Если Не Результат[КоличествоПакетов - 1].Пустой() Тогда
		
		ШаблонТекста = НСтр("ru = 'Указание работ для этапов, выполняемых переработчиком, допускается при отключенном учете по версии 2.4 (см. строку %1 списка ""Материалы и работы"").';
							|en = 'Work specification for the subcontractor stages is available if accounting of version 2.4 is disabled (see the %1 line of the ""Materials and works"" list).'");
		
		Выборка = Результат[КоличествоПакетов - 1].Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			Поле           = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МатериалыИУслуги", Выборка.НомерСтроки, "Номенклатура");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, ДанныеСпецификации, Поле,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения);
	
КонецПроцедуры

Функция СтруктураПроверокПоследовательностиЭтапов(ТипПроизводственногоПроцесса, СписокПроверок = "") Экспорт
	
	СтруктураПроверок = Новый Структура;
	
	СтруктураПроверок.Вставить("НетПервойОперации",    НСтр("ru = 'Отсутствует первый этап.';
															|en = 'The first stage is missing.'"));
	СтруктураПроверок.Вставить("НетПоследнейОперации", НСтр("ru = 'Отсутствует последний этап.';
															|en = 'The last stage is missing.'"));
	СтруктураПроверок.Вставить("НетСледующейОперации", НСтр("ru = 'Этап ""%1"" ссылается на несуществующий этап.';
															|en = 'Stage ""%1"" refers to a non-existing stage.'"));
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
		//++ Устарело_Производство21
		ИЛИ ПроизводствоСервер.ИспользуетсяПроизводство21()
		//-- Устарело_Производство21
		Тогда
		СтруктураПроверок.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних этапов.';
																		|en = 'There cannot be more than one last stage.'"));
	КонецЕсли;
	
	Если ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Ремонт
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
		//++ Устарело_Производство21
		ИЛИ ПроизводствоСервер.ИспользуетсяПроизводство21()
		//-- Устарело_Производство21
		Тогда
		СтруктураПроверок.Вставить("НесколькоПервыхОпераций", НСтр("ru = 'Не может быть несколько первых этапов.';
																	|en = 'There cannot be more than one first stage.'"));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокПроверок) Тогда
		МассивПроверок =  СтрРазделить(СписокПроверок, ",");
		Для каждого КлючИЗначение Из СтруктураПроверок Цикл
			Если МассивПроверок.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				СтруктураПроверок.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПроверок;
	
КонецФункции

//++ НЕ УТКА

Процедура ПроверитьКорректностьЗаполненияОпераций(Владелец, Подразделение, Отказ) Экспорт
	
	Если Владелец.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТехнологическиеОперации.Ссылка                                                                 КАК Ссылка,
		|	ТехнологическиеОперации.Представление                                                          КАК Представление,
		|	СтруктураПредприятия.Представление                                                             КАК ПодразделениеПредставление,
		|	ТехнологическиеОперации.Контроль                                                               КАК Контроль,
		|	ЕСТЬNULL(ВидыРабочихЦентров.Подразделение, &Подразделение) <> &Подразделение
		|		ИЛИ ЕСТЬNULL(ВладельцыРабочихЦентров.Подразделение, &Подразделение) <> &Подразделение      КАК ОшибкаПринадлежностиВРЦ,
		|	СтруктураПредприятия.ИспользоватьПооперационноеПланирование
		|		И ТехнологическиеОперации.Контроль В (
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.Требуется),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих)) КАК ОшибкаВариантаКонтроля
		|ИЗ
		|	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|		ПО ТехнологическиеОперации.РабочийЦентр = ВидыРабочихЦентров.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеЦентры КАК РабочиеЦентры
		|		ПО ТехнологическиеОперации.РабочийЦентр = РабочиеЦентры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРабочихЦентров КАК ВладельцыРабочихЦентров
		|		ПО (РабочиеЦентры.ВидРабочегоЦентра = ВладельцыРабочихЦентров.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ПО СтруктураПредприятия.Ссылка = &Подразделение
		|ГДЕ
		|	ТехнологическиеОперации.Владелец = &Владелец
		|	И ТехнологическиеОперации.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТехнологическиеОперации.НомерОперации");
	
	Запрос.УстановитьПараметр("Владелец",      Владелец);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ШаблонОшибкаПринадлежностиВРЦ = НСтр("ru = 'Рабочий центр операции ""%1"" не принадлежит подразделению ""%2""';
											|en = 'Work center of the ""%1"" operation does not belong to the ""%2"" business unit'");
		ШаблонОшибкаВариантаКонтроля  = НСтр("ru = 'Использование варианта контроля ""%1"" в подразделениях с пооперационным планированием не поддерживается';
											|en = 'The ""%1"" control option in business units with Manufacturing Execution System is not supported'");
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОшибкаПринадлежностиВРЦ Тогда
				ТекстСообщения = СтрШаблон(ШаблонОшибкаПринадлежностиВРЦ, Выборка.Представление, Выборка.ПодразделениеПредставление);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,"Объект.РабочийЦентр", Отказ);
			КонецЕсли;
			
			Если Выборка.ОшибкаВариантаКонтроля Тогда
				ТекстСообщения = СтрШаблон(ШаблонОшибкаВариантаКонтроля, Выборка.Контроль);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,,"Объект.Контроль", Отказ);
			КонецЕсли;
			
			ОперацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ОперацияОбъект.ПроверитьЗаполнение() Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьМаршрутныеКартыЭтапов(Этапы, НачалоДействия, КонецДействия, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	МаршрутныеКарты = Новый Массив;
	Для каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.МаршрутнаяКарта) Тогда
			МаршрутныеКарты.Добавить(Этап.МаршрутнаяКарта);
		КонецЕсли;
	КонецЦикла;
	
	Если МаршрутныеКарты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = Справочники.МаршрутныеКарты.ЗначенияРеквизитовМаршрутныхКарт(МаршрутныеКарты);
	
	Для каждого Этап Из Этапы Цикл // СправочникОбъект.ЭтапыПроизводства
		
		Если НЕ ЗначениеЗаполнено(Этап.МаршрутнаяКарта) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючДанных = ?(Этап.ЭтоНовый(), Этап.ПолучитьСсылкуНового(), Этап.Ссылка);
		
		Справочники.РесурсныеСпецификации.ПроверитьКорректностьУказанияМаршрутнойКарты(
			НачалоДействия, КонецДействия, ЗначенияРеквизитов[Этап.МаршрутнаяКарта], КлючДанных, Этап.Наименование, Отказ);
		
	КонецЦикла;
	
	ОбработатьСообщенияПользователю(Сообщения);
	
КонецПроцедуры

Процедура ПроверитьСоответствиеОтбораПоСвойствам(Этапы, СпецификацияОбъект, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	ШаблонСообщения   = НСтр("ru = 'В настройках использования указаны неверные свойства, см. вид рабочего центра ""%1"".';
							|en = 'Invalid properties are specified in usage settings, see work center type ""%1"".'");
	ПустойКлючСвязи   = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	СтруктураПоиска   = Новый Структура("КлючСвязи");
	ОсновноеИзделие   = УправлениеДаннымиОбИзделияхКлиентСервер.ДанныеОсновногоИзделияСпецификации(СпецификацияОбъект);
	ДоступныеСвойства = УправлениеДаннымиОбИзделиях.ПолучитьСвойстваДляОтбораПоСвойствам(
		ОсновноеИзделие.ВидНоменклатуры,,Ложь).ВыгрузитьКолонку("Свойство");
	
	Для каждого Этап Из Этапы Цикл // СправочникОбъект.ЭтапыПроизводства
		
		Если Этап.ОтборПоСвойствам.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка = ?(Этап.ЭтоНовый(), Этап.ПолучитьСсылкуНового(), Этап.Ссылка);
		
		Для каждого ИмяТЧ Из СтрРазделить("ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров",",") Цикл
			Для каждого СтрокаВРЦ из Этап[ИмяТЧ] Цикл
				Если СтрокаВРЦ.КлючСвязи = ПустойКлючСвязи Тогда
					Продолжить;
				КонецЕсли;
				СтруктураПоиска.КлючСвязи = СтрокаВРЦ.КлючСвязи;
				СтрокиОтбора = Этап.ОтборПоСвойствам.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
					Если ДоступныеСвойства.Найти(СтрокаОтбора.Свойство) = Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтрШаблон(ШаблонСообщения, СтрокаВРЦ.ВидРабочегоЦентра),
							Ссылка,
							"ВидыРабочихЦентров",,
							Отказ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбработатьСообщенияПользователю(Сообщения);
	
КонецПроцедуры

Процедура ПроверитьАлгоритмРасчетаКоличества(Этапы, СпецификацияОбъект, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	СтрокиДляПроверки = Новый ТаблицаЗначений;
	СтрокиДляПроверки.Колонки.Добавить("Ссылка");
	СтрокиДляПроверки.Колонки.Добавить("ИмяТЧ");
	СтрокиДляПроверки.Колонки.Добавить("НомерСтроки");
	СтрокиДляПроверки.Колонки.Добавить("АлгоритмРасчетаКоличества");
	СтрокиДляПроверки.Колонки.Добавить("ВидРабочегоЦентраПредставление");
	
	Для каждого Этап Из Этапы Цикл // СправочникОбъект.ЭтапыПроизводства
		
		Ссылка = ?(Этап.ЭтоНовый(), Этап.ПолучитьСсылкуНового(), Этап.Ссылка);
		
		Для каждого ИмяТЧ Из СтрРазделить("ВидыРабочихЦентров,АльтернативныеВидыРабочихЦентров",",") Цикл
			Для каждого СтрокаВРЦ из Этап[ИмяТЧ] Цикл
				Если НЕ ПустаяСтрока(СтрокаВРЦ.АлгоритмРасчетаКоличества) Тогда
					НоваяСтрока = СтрокиДляПроверки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВРЦ);
					НоваяСтрока.Ссылка = Ссылка;
					НоваяСтрока.ИмяТЧ  = ИмяТЧ;
					НоваяСтрока.ВидРабочегоЦентраПредставление = СтрокаВРЦ.ВидРабочегоЦентра;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Если СтрокиДляПроверки <> Неопределено И СтрокиДляПроверки.Количество() Тогда
		
		ОписаниеИсточников = Справочники.РесурсныеСпецификации.ВыгрузитьДанныеДляКонструктораФормул(СпецификацияОбъект, "");
		
		Справочники.ЭтапыПроизводства.ПроверитьАлгоритмРасчетаВремениРаботыВРЦ(СтрокиДляПроверки, ОписаниеИсточников, Ложь, Отказ);
		
		ОбработатьСообщенияПользователю(Сообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Производит проверку заполнения реквизитов операции
// 
// Параметры:
// 	ОперацияОбъект - СправочникОбъект.ТехнологическиеОперации
// 	ЭтапОбъект - СправочникОбъект.ЭтапыПроизводства
// 	ПараметрыПодразделения - см. ПроизводствоСервер.ПараметрыПроизводственногоПодразделения
// 	Отказ - Булево
// 	Сообщения - Массив - массив для сбора сообщений
Процедура ПроверитьЗаполнениеРеквизитовОперации(ОперацияОбъект, ЭтапОбъект, ПараметрыПодразделения, Отказ = Ложь, Сообщения = Неопределено) Экспорт
	
	КлючДанных = ?(ОперацияОбъект.ЭтоНовый(), ОперацияОбъект.ПолучитьСсылкуНового(), ОперацияОбъект.Ссылка);
	
	СтатусСпецификации = Неопределено;
	Если НЕ ОперацияОбъект.ДополнительныеСвойства.Свойство("СтатусСпецификации", СтатусСпецификации) Тогда
		СтатусСпецификации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОперацияОбъект.Спецификация, "Статус");
		ОперацияОбъект.ДополнительныеСвойства.Вставить("СтатусСпецификации", СтатусСпецификации);
	КонецЕсли;
	
	Если НЕ ОперацияОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных, Истина);
	
	Если СтатусСпецификации = Перечисления.СтатусыСпецификаций.Действует Тогда
		
		Если ОперацияОбъект.СодержитТехнологическийПроцесс Тогда
			
			РеквизитыТП = Справочники.ТехнологическиеПроцессы.ЗначенияРеквизитовТехнологическогоПроцесса(ОперацияОбъект.ТехнологическийПроцесс);
			
			Если ЭтапОбъект.Подразделение <> РеквизитыТП.Подразделение Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Подразделение технологического процесса (""%1"") не соответствует подразделению этапа (""%2"").';
						|en = 'The technological process business unit (""%1"") does not match the stage business unit (""%2"").'"),
					РеквизитыТП.Подразделение,
					ЭтапОбъект.Подразделение);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных,,, Отказ);
				
			КонецЕсли;
			
			Если РеквизитыТП.Статус <> Перечисления.СтатусыТехнологическихПроцессов.Действует Тогда
				
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Технологический процесс ""%1"" должен иметь статус ""Действует"".';
						|en = 'Technological process ""%1"" must be in ""Valid"" status.'"),
					ОперацияОбъект.ТехнологическийПроцесс);
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных,,, Отказ);
				
			КонецЕсли;
			
		Иначе
			
		ПроверитьЗаполнениеРабочихЦентровОперации(ОперацияОбъект, ЭтапОбъект.Подразделение, КлючДанных, Отказ);
		
		ПроверитьКорректностьВариантаКонтроляОперации(ОперацияОбъект, ПараметрыПодразделения, КлючДанных, Отказ);
			
			// Проверка реквизитов вида операции
			Для каждого Строка Из ОперацияОбъект.НормативыВидаОперации Цикл
				
				Если Строка.ЗначениеМин > Строка.ЗначениеМакс И Строка.ЗначениеМакс <> 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Минимальное значение реквизита ""%1"" превышает максимальное значение';
													|en = 'The minimum value of the ""%1"" attribute exceeds the maximum value'"),
						Строка.Свойство);
						
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных,,, Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(Сообщения, КлючДанных);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРабочихЦентровОперации(ОперацияОбъект, ПодразделениеЭтапа, КлючДанных, Отказ = Ложь) Экспорт
	
	РабочиеЦентры = Новый Массив;
	Участки = Новый Массив;
	
	Если ЗначениеЗаполнено(ОперацияОбъект.РабочийЦентр) Тогда
		РабочиеЦентры.Добавить(ОперацияОбъект.РабочийЦентр);
	КонецЕсли;
	
	Для каждого СтрокаРЦ из ОперацияОбъект.ВспомогательныеРабочиеЦентры Цикл
		Если ЗначениеЗаполнено(СтрокаРЦ.РабочийЦентр) Тогда
			РабочиеЦентры.Добавить(СтрокаРЦ.РабочийЦентр);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОперацияОбъект.Участок) Тогда
		Участки.Добавить(ОперацияОбъект.Участок);
	КонецЕсли;
	
	Если РабочиеЦентры.Количество() ИЛИ Участки.Количество() > 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Подразделение %1 ""%2"" (""%3"") не соответствует подразделению этапа.';
								|en = '%1 ""%2"" (""%3"") business unit does not correspond to the stage business unit.'");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("РабочиеЦентры",      РабочиеЦентры);
		Запрос.УстановитьПараметр("ПодразделениеЭтапа", ПодразделениеЭтапа);
		Запрос.УстановитьПараметр("Участки", Участки);
		Запрос.УстановитьПараметр("ТекстПредставлениеВидаРабочегоМеста", НСтр("ru = 'вида рабочего центра';
																				|en = 'work center type'")); 
		Запрос.УстановитьПараметр("ТекстПредставлениеРабочегоМеста", НСтр("ru = 'рабочего центра';
																			|en = 'work center'")); 
		Запрос.УстановитьПараметр("ТекстПредставлениеУчастка", НСтр("ru = 'участка';
																	|en = 'area'")); 
		Запрос.Текст = "ВЫБРАТЬ
		|	&ТекстПредставлениеВидаРабочегоМеста КАК ОбъектПредставление,
		|	ВидыРабочихЦентров.Представление КАК Представление,
		|	ВидыРабочихЦентров.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	Справочник.ВидыРабочихЦентров КАК ВидыРабочихЦентров
		|ГДЕ
		|	ВидыРабочихЦентров.Ссылка В (&РабочиеЦентры)
		|	И ВидыРабочихЦентров.Подразделение <> &ПодразделениеЭтапа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТекстПредставлениеРабочегоМеста,
		|	РабочиеЦентры.Представление,
		|	РабочиеЦентры.ВидРабочегоЦентра.Подразделение.Представление
		|ИЗ
		|	Справочник.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	РабочиеЦентры.Ссылка В (&РабочиеЦентры)
		|	И РабочиеЦентры.ВидРабочегоЦентра.Подразделение <> &ПодразделениеЭтапа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТекстПредставлениеУчастка,
		|	ПроизводственныеУчастки.Представление,
		|	ПроизводственныеУчастки.Владелец.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	Справочник.ПроизводственныеУчастки КАК ПроизводственныеУчастки
		|ГДЕ
		|	ПроизводственныеУчастки.Ссылка В (&Участки)
		|	И ПроизводственныеУчастки.Владелец <> &ПодразделениеЭтапа";
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					Выборка.ОбъектПредставление,
					Выборка.Представление,
					Выборка.ПодразделениеПредставление);
					
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных,,, Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьВариантаКонтроляОперации(ОперацияОбъект, ПараметрыПодразделения, КлючДанных, Отказ = Ложь)
	
	Если ПараметрыПодразделения.ИспользоватьПооперационноеПланирование
		И (ОперацияОбъект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.Требуется
			ИЛИ ОперацияОбъект.Контроль = Перечисления.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих) Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Использование варианта контроля ""%1"" в подразделениях с пооперационным планированием не поддерживается';
										|en = 'The ""%1"" control option in business units with Manufacturing Execution System is not supported'"),
			ОперацияОбъект.Контроль);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПроверокПоследовательностиОпераций(СписокПроверок = "", ПараметрыПодразделения = Неопределено) Экспорт
	
	СтруктураПроверок = Новый Структура;
	
	СтруктураПроверок.Вставить("НесколькоПервыхОпераций",    НСтр("ru = 'Не может быть несколько первых операций.';
																	|en = 'There cannot be several first operations.'"));
	СтруктураПроверок.Вставить("НесколькоПоследнихОпераций", НСтр("ru = 'Не может быть несколько последних операций.';
																	|en = 'There cannot be several last operations.'"));
	СтруктураПроверок.Вставить("НетПервойОперации",          НСтр("ru = 'Отсутствует первая операция.';
																	|en = 'The first operation is missing.'"));
	СтруктураПроверок.Вставить("НетПоследнейОперации",       НСтр("ru = 'Отсутствует последняя операция.';
																	|en = 'The last operation is missing.'"));
	СтруктураПроверок.Вставить("НетСледующейОперации",       НСтр("ru = 'Операция ""%1"" ссылается на несуществующую операцию.';
																	|en = 'The ""%1"" operation refers to a non-existing operation.'"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольВыполненияОпераций")
		И (ПараметрыПодразделения = Неопределено ИЛИ НЕ ПараметрыПодразделения.ИспользоватьПооперационноеПланирование) Тогда
		
		СообщенияКонтроля = Новый Структура;
		
		СообщенияКонтроля.Вставить("КонтрольОшибкаПоследовательности",
			НСтр("ru = 'Операция ""%1"". Отсутствует завершающая контрольная операция.';
				|en = 'The ""%1"" operation. The final control operation is missing.'"));
		СообщенияКонтроля.Вставить("КонтрольОшибкаЕдиницыИзмерения",
			НСтр("ru = 'Операция ""%1"". Единица измерения в последовательности контролируемых операций должна совпадать.';
				|en = 'The ""%1"" operation. The unit of measure in the sequence of controlled operations must match.'"));
		
		СтруктураПроверок.Вставить("КонтрольныеОперации", СообщенияКонтроля);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СписокПроверок) Тогда
		МассивПроверок =  СтрРазделить(СписокПроверок, ",");
		Для каждого КлючИЗначение Из СтруктураПроверок Цикл
			Если МассивПроверок.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				СтруктураПроверок.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПроверок;
	
КонецФункции

// Подстановка для контроля корректности контрольных операций
// 
// Возвращаемое значение:
//  Строка -  Текст подстановки
Функция ТекстКорректностьПоследовательностиКонтрольныхОпераций() Экспорт
	
	Результат = "
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпрОперации.Контроль = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих)
	|			И (СпрСледующиеОперации.Контроль <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих)
	|					И СпрСледующиеОперации.Контроль <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.Требуется)
	|				ИЛИ СпрСледующиеОперации.Ссылка ЕСТЬ NULL)
	|			И ЕСТЬNULL(СпрОперации.Владелец.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ) = ЛОЖЬ
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК КонтрольОшибкаПоследовательности,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА СпрОперации.Контроль = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих)
	|			И (СпрСледующиеОперации.Контроль = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.ТребуетсяНаПоследующих)
	|					ИЛИ СпрСледующиеОперации.Контроль <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляТехнологическихОпераций.Требуется))
	|			И СпрОперации.ЕдиницаИзмерения <> СпрСледующиеОперации.ЕдиницаИзмерения
	|			И ЕСТЬNULL(СпрОперации.Владелец.Подразделение.ИспользоватьПооперационноеПланирование, ЛОЖЬ) = ЛОЖЬ
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК КонтрольОшибкаЕдиницыИзмерения,
	|";
	
	Возврат Результат;
	
КонецФункции

//-- НЕ УТКА

Процедура ОбработатьСообщенияПользователю(Сообщения, КлючДанных = Неопределено, РазбитьПострочно = Ложь)
	
	Если Сообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СообщенияТекущие = Новый Массив;
	
	Для каждого Сообщение Из ПолучитьСообщенияПользователю(Истина) Цикл
		Если РазбитьПострочно Тогда
			Для каждого ТекстСообщения Из СтрРазделить(Сообщение.Текст, Символы.ПС) Цикл
				НовоеСообщение = Новый СообщениеПользователю();
				ЗаполнитьЗначенияСвойств(НовоеСообщение, Сообщение);
				НовоеСообщение.Текст = ТекстСообщения;
				НовоеСообщение.КлючДанных = ?(КлючДанных <> Неопределено, КлючДанных, НовоеСообщение.КлючДанных);
				СообщенияТекущие.Добавить(НовоеСообщение);
			КонецЦикла;
		Иначе
			Сообщение.КлючДанных = ?(КлючДанных <> Неопределено, КлючДанных, Сообщение.КлючДанных);
			СообщенияТекущие.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сообщения, СообщенияТекущие);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура СтруктураПроизводственногоПроцессаВФоне(Параметры, АдресХранилища) Экспорт
	
	Результат = СтруктураПроизводственногоПроцесса(Параметры);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция СтруктураПроизводственногоПроцесса(Параметры)
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.РедакторПроизводственногоПроцесса.СтруктураПроизводственногоПроцесса");
	ВесЗамера = 0;
	
	КартинкиЭлементов                    = Неопределено;
	Спецификация                         = Параметры["Спецификация"];
	Дерево                               = Параметры["ПроизводственныйПроцессДерево"]; // ДеревоЗначений
	Результат                            = Новый Структура;
	МассивПодразделений                  = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	""Этап""                    КАК ВидЭлемента,
	|	Этапы.Наименование          КАК Наименование,
	|	Этапы.Ссылка                КАК Ссылка,
	|	Этапы.ПроизводствоНаСтороне КАК ПроизводствоНаСтороне,
	|	Этапы.НомерЭтапа            КАК Номер,
	|	Этапы.НомерСледующегоЭтапа  КАК НомерСледующего,
	|	Этапы.Подразделение         КАК Подразделение
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК Этапы
	|
	|ГДЕ
	|	Этапы.Владелец = &Спецификация
	|	И НЕ Этапы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этапы.НомерЭтапа,
	|	Ссылка
	|;
	|
	//++ НЕ УТКА
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Операция""                                                 КАК ВидЭлемента,
	|	Операции.Наименование                                        КАК Наименование,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства) КАК Этап,
	|	Операции.Ссылка                                              КАК Ссылка,
	|	Операции.СодержитТехнологическийПроцесс                      КАК СодержитТехнологическийПроцесс,
	|	Операции.ТехнологическийПроцесс                              КАК ТехнологическийПроцесс,
	|	Операции.НомерОперации                                       КАК Номер,
	|	Операции.НомерСледующейОперации                              КАК НомерСледующего,
	|	Операции.РабочийЦентр                                        КАК РабочийЦентр,
	|	Операции.Идентификатор                                       КАК ИдентификаторОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|ГДЕ
	|	Операции.Спецификация = &Спецификация
	|	И НЕ Операции.ПометкаУдаления
	|	И &ПрочитатьОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ЭтапыПроизводства),
	|	Операции.НомерОперации,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Операция""                                                       КАК ВидЭлемента,
	|	Операции.Наименование                                              КАК Наименование,
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ТехнологическиеПроцессы) КАК ТехнологическийПроцесс,
	|	Операции.Ссылка                                                    КАК Ссылка,
	|	Операции.НомерОперации                                             КАК Номер,
	|	Операции.НомерСледующейОперации                                    КАК НомерСледующего,
	|	Операции.РабочийЦентр                                              КАК РабочийЦентр,
	|	Операции.Идентификатор                                             КАК ИдентификаторОперации
	|ИЗ
	|	Справочник.ТехнологическиеОперации КАК Операции
	|ГДЕ
	|	Операции.Владелец В (
	|					ВЫБРАТЬ
	|						ОперацииТП.ТехнологическийПроцесс КАК ТехнологическийПроцесс
	|					ИЗ
	|						Справочник.ТехнологическиеОперации КАК ОперацииТП
	|					ГДЕ
	|						ОперацииТП.СодержитТехнологическийПроцесс
	|						И ОперацииТП.Спецификация = &Спецификация
	|						И НЕ ОперацииТП.ПометкаУдаления)
	|	И НЕ Операции.ПометкаУдаления
	|	И &ПрочитатьОперации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫРАЗИТЬ(Операции.Владелец КАК Справочник.ТехнологическиеПроцессы),
	|	Операции.НомерОперации,
	|	Ссылка
	//-- НЕ УТКА
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Спецификация", Спецификация);
	//++ НЕ УТКА
	Запрос.УстановитьПараметр("ПрочитатьОперации", ПолучитьФункциональнуюОпцию("ХранитьОперацииВРесурсныхСпецификациях"));
	//-- НЕ УТКА
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоЭтапов          = 0;
	КоличествоОпераций        = 0;
	ЕстьМногооперационныйЭтап = Ложь;
	
	ТаблицаЭтапы = РезультатыЗапроса[0].Выгрузить();
	//++ НЕ УТКА
	ТаблицаОперацииЭтапа = РезультатыЗапроса[1].Выгрузить();
	ТаблицаОперацииТП    = РезультатыЗапроса[2].Выгрузить();
	ТаблицаОперацииЭтапа.Индексы.Добавить("Этап");
	ТаблицаОперацииТП.Индексы.Добавить("ТехнологическийПроцесс");
	ПоискПоЭтапу = Новый Структура("Этап");
	ПоискПоТП    = Новый Структура("ТехнологическийПроцесс");
	ДлинаИдентификатора = Справочники.ТехнологическиеОперации.ДлинаИдентификатораОперации();
	//-- НЕ УТКА
	
	Для каждого ВыборкаЭтап из ТаблицаЭтапы Цикл
		
		СтрокаЭтап = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЭтап, ВыборкаЭтап);
		РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(СтрокаЭтап, КартинкиЭлементов);
		
		КоличествоЭтапов = КоличествоЭтапов + 1;
		
		//++ НЕ УТКА
		
		КоличествоОперацийЭтапа = 0;
		
		ПоискПоЭтапу.Этап = ВыборкаЭтап.Ссылка;
		ВыборкаОперацииЭтапа = ТаблицаОперацииЭтапа.Скопировать(ПоискПоЭтапу);
		Для каждого ВыборкаОперация Из ВыборкаОперацииЭтапа Цикл
			
			СтрокаОперация = СтрокаЭтап.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОперация, ВыборкаОперация);
			
			КоличествоОперацийЭтапа = КоличествоОперацийЭтапа + 1;
			
			Если ВыборкаОперация.СодержитТехнологическийПроцесс Тогда
				
				ПоискПоТП.ТехнологическийПроцесс = СтрокаОперация.ТехнологическийПроцесс;
				ВыборкаОперацииТП = ТаблицаОперацииТП.Скопировать(ПоискПоТП);
				Для каждого ВыборкаОперацияТП Из ВыборкаОперацииТП Цикл
					
					СтрокаОперацияТП = СтрокаОперация.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОперацияТП, ВыборкаОперацияТП,,"ТехнологическийПроцесс, ИдентификаторОперации");
					СтрокаОперацияТП.ТолькоПросмотр = Истина;
					РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(СтрокаОперацияТП, КартинкиЭлементов);
					СтрокаОперацияТП.ИдентификаторОперации = ВыборкаОперацияТП.ИдентификаторОперации
						+ (СтрокаОперация.ИдентификаторОперации * Pow(10, ДлинаИдентификатора));
					
					ВесЗамера = ВесЗамера + 1;
					
				КонецЦикла;
				СтрокаОперация.ТехнологическийПроцесс = ВыборкаОперация.ТехнологическийПроцесс;
				
			КонецЕсли;
			РедакторПроизводственногоПроцессаКлиентСервер.УстановитьКартинкуЭлемента(СтрокаОперация, КартинкиЭлементов);
			
		КонецЦикла;
		
		КоличествоОпераций = КоличествоОпераций + КоличествоОперацийЭтапа;
		Если КоличествоОперацийЭтапа > 1 Тогда
			ЕстьМногооперационныйЭтап = Истина;
		КонецЕсли;
		
		Если МассивПодразделений.Найти(СтрокаЭтап.Подразделение) = Неопределено Тогда
			МассивПодразделений.Добавить(СтрокаЭтап.Подразделение);
		КонецЕсли;
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Результат.Вставить("ПроизводственныйПроцессДерево", Дерево);
	Результат.Вставить("МассивПодразделений",           МассивПодразделений);
	Результат.Вставить("ЭтапКоличество",                КоличествоЭтапов);
	Результат.Вставить("ОперацияКоличество",            КоличествоОпераций);
	Результат.Вставить("ЕстьМногооперационныйЭтап",     ЕстьМногооперационныйЭтап);
	
	ВесЗамера = ВесЗамера + КоличествоЭтапов + КоличествоОпераций;
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ВесЗамера / 1000);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
