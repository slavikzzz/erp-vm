
#Область ПрограммныйИнтерфейс

// Возвращает признак полной версии БГосИС
// 
// Возвращаемое значение:
//  Булево - Это расширенная версия гос ИС
Функция ЭтоРасширеннаяВерсияГосИС() Экспорт
	
	Возврат ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС("ИСМП");
	
КонецФункции

// Виды продукции обязательной маркировки.
// 
// Возвращаемое значение:
//  ФиксированныйМассив из ПеречислениеСсылка.ВидыПродукцииИС - Виды продукции обязательной маркировки
Функция ВидыПродукцииОбязательнойМаркировки() Экспорт
	
	Возврат ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВидыПродукцииОбязательнойМаркировки(НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

// Вести учет маркируемой продукции.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС
// 
// Возвращаемое значение:
//  Булево - Вести учет маркируемой продукции
Функция ВестиУчетМаркируемойПродукции(ВидМаркируемойПродукции) Экспорт
	
	ИмяФункциональнойОпцииВестиУчет = "";
	
	Если ЭтоРасширеннаяВерсияГосИС() Тогда
		ИмяФункциональнойОпцииВестиУчет = "ВестиУчетМаркируемойПродукцииИСМП";
	Иначе
		ИмяФункциональнойОпцииВестиУчет = "ВестиУчетМаркируемойПродукцииИСМПРМК";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпцииВестиУчет) Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВестиУчетПродукции КАК ВестиУчетПродукции
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
		|ГДЕ
		|	ВидПродукции = &ВидМаркируемойПродукции
		|";

		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);

		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			Возврат Ложь;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.ВестиУчетПродукции;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Используется маркируемая продукция.
// 
// Возвращаемое значение:
//  Булево - Используется маркируемая продукция
Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Если ЭтоРасширеннаяВерсияГосИС() Тогда
		//@skip-check wrong-string-literal-content
		Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	Иначе
		Возврат ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМПРМК");
	КонецЕсли;
	
КонецФункции

#Область JSON

// Форматировать лог запросов.
// 
// Параметры:
//  ИсходныйТекст -Строка - Исходный текст
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Строка - Форматировать лог запросов
Функция ФорматироватьЛогЗапросов(ИсходныйТекст, ДополнительныеПараметры) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ИсходныйТекст);
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Если КоличествоСтрок = 0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	КлючиРазворачиванияBASE64 = Новый Соответствие();
	КлючиРазворачиванияBASE64.Вставить("product_document");
	
	Для СмещениеСКонца = 0 По КоличествоСтрок - 1 Цикл
		
		НомерСтрокиСКонца = КоличествоСтрок - СмещениеСКонца;
		ТекущаяСтрока     = ТекстовыйДокумент.ПолучитьСтроку(НомерСтрокиСКонца);
		ДанныеСтроки      = Новый Массив();
		Если СтрНачинаетсяС(ТекущаяСтрока, "{")
			Или СтрНачинаетсяС(ТекущаяСтрока, "[") Тогда
			Попытка
				ДанныеСтроки.Добавить(ОбщегоНазначенияИС.ФорматироватьJSON(ТекущаяСтрока, Ложь, КлючиРазворачиванияBASE64));
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстовыйДокумент.УдалитьСтроку(НомерСтрокиСКонца);
		ТекстовыйДокумент.ВставитьСтроку(НомерСтрокиСКонца, СтрСоединить(ДанныеСтроки, Символы.ПС));
		
	КонецЦикла;
	
	Возврат СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции

#КонецОбласти

#Область XDTO

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO          - ОбъектXDTO - Объект XDTO
//  ИмяТипа             - Строка     - Имя типа.
//  ИспользоватьОтступы - Булево     - Использование отступов.
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ИмяТипа = "Файл", ИспользоватьОтступы = Ложь) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(РаботаСXMLИС.ПараметрыФорматированияXML(ИспользоватьОтступы));
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	ТекстыИсключения = Новый Массив();
	ТекстыИсключения.Добавить("d2p1:");
	ТекстыИсключения.Добавить("d4p1:");
	ТекстыИсключения.Добавить("xmlns=""""");
	ТекстыИсключения.Добавить("xmlns=""http://www.w3.org/2001/XMLSchema""");
	ТекстыИсключения.Добавить("xmlns:xs=""http://www.w3.org/2001/XMLSchema""");
	ТекстыИсключения.Добавить("xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""");
	
	Если ЭтоРасширеннаяВерсияГосИС() Тогда
		ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO["ТипыМОТП"].ПространствоИмен));
		ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO["АгрегацияМОТП"].ПространствоИмен));
		ТекстыИсключения.Добавить(СтрШаблон("xmlns:d2p1=""%1""", Метаданные.ПакетыXDTO["ВыбытиеМОТП"].ПространствоИмен));
		ТекстыИсключения.Добавить(СтрШаблон("xmlns=""%1""",      Метаданные.ПакетыXDTO["АгрегацияМОТП"].ПространствоИмен));
		ТекстыИсключения.Добавить(СтрШаблон("xmlns=""%1""",      Метаданные.ПакетыXDTO["ВыбытиеМОТП"].ПространствоИмен));
	КонецЕсли;
	
	Для Каждого СтрокаПоиска Из ТекстыИсключения Цикл
		Если ИспользоватьОтступы Тогда
			ТекущаяСтрокаПоиска = СтрокаПоиска + Символы.ПС;
		Иначе
			ТекущаяСтрокаПоиска = СтрокаПоиска;
		КонецЕсли;
		ТекстXML = СтрЗаменить(ТекстXML, ТекущаяСтрокаПоиска, "");
	КонецЦикла;
	
	Возврат ТекстXML;
	
КонецФункции

#КонецОбласти

#Область HTTPЗапросы

// Получить данные из сервиса.
// 
// Параметры:
//  АдресЗапроса - Строка - Адрес запроса
//  КлючСессии - Строка - Ключ сессии
//  ПараметрыОтправкиHTTPЗапросов - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов
//  ЗаголовкиHTTP - Неопределено, Соответствие из КлючИЗначение - Заголовки HTTP
//  HTTPОтветЭмуляция - Неопределено - HTTPОтвет эмуляция
// 
// Возвращаемое значение:
//  Структура - Получить данные из сервиса:
// * ПараметрыОтправкиHTTPЗапросов - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыОтправкиHTTPЗапросов
// * HTTPМетод - Строка - 
// * HTTPЗапрос - HTTPЗапрос - 
// * HTTPОтвет - HTTPОтвет, Неопределено - 
// * ТекстОшибки - Строка - 
Функция ПолучитьДанныеИзСервиса(АдресЗапроса, КлючСессии, ПараметрыОтправкиHTTPЗапросов, ЗаголовкиHTTP = Неопределено, HTTPОтветЭмуляция = Неопределено) Экспорт
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса")
		И ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСМПСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
		ВремяОжиданияСледующегоЗапроса = МодульИнтеграцияИСМПСлужебный.ВремяОжиданияСледующегоЗапросаСУЗ(ПараметрыОтправкиHTTPЗапросов);
		Если ВремяОжиданияСледующегоЗапроса > 0 Тогда
			ОбщегоНазначенияИС.Ожидать(ВремяОжиданияСледующегоЗапроса, ПараметрыОтправкиHTTPЗапросов);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаголовкиHTTP = Неопределено Тогда
		ЗаголовкиHTTP = Новый Соответствие();
		ЗаголовкиHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовкиHTTP.Вставить("Cache-Control",  "no-cache");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовкиHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос  = Новый HTTPЗапрос(АдресЗапроса, ЗаголовкиHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
		ЗащищенноеСоединение = ОбщегоНазначенияИСКлиентСерверПовтИсп.ЗащищенноеСоединение();
	Иначе
		ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если HTTPОтветЭмуляция = Неопределено Тогда
		
		Попытка
			
			Соединение = Новый HTTPСоединение(
				ПараметрыОтправкиHTTPЗапросов.Сервер,
				ПараметрыОтправкиHTTPЗапросов.Порт,,,
				ИнтернетПрокси,
				ПараметрыОтправкиHTTPЗапросов.Таймаут,
				ЗащищенноеСоединение);
			
			HTTPОтвет = Соединение.Получить(HTTPЗапрос);
			
		Исключение
			
			ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(
					НСтр("ru = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4';
						|en = 'Ошибка при выполнении запроса GET %1 в %2 %3:%4'"),
					АдресЗапроса,
					ПараметрыОтправкиHTTPЗапросов.ПредставлениеСервиса,
					ПараметрыОтправкиHTTPЗапросов.Сервер,
					ПараметрыОтправкиHTTPЗапросов.Порт) + Символы.ПС +
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	Иначе
		
		HTTPОтвет = HTTPОтветЭмуляция;
		
	КонецЕсли;
	
	ПутьКФайлу = Неопределено;
	ОбщегоНазначенияИСМППереопределяемый.ПриОпределенииПутиКФайлуЛогирования(ПутьКФайлу);
	Если ПутьКФайлу <> Неопределено Тогда
		ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, "GET", ПутьКФайлу);
		ВывестиHTTPЗапросВЛог(HTTPОтвет,  Неопределено, Неопределено, ПутьКФайлу, ТекстОшибки);
	КонецЕсли;
	
	ПараметрыЛогированияЗапросов = ЛогированиеЗапросовИСМП.ПараметрыЛогированияЗапросов();
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPЗапрос;
	ДанныеЗаписи.HTTPМетод       = "GET";
	ДанныеЗаписи.АдресРесурса    = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, ДанныеЗаписи.HTTPМетод);
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	ДанныеЗаписи                 = ЛогированиеЗапросовИС.НоваяСтруктураДанныхЗаписи();
	ДанныеЗаписи.HTTPЗапросОтвет = HTTPОтвет;
	ДанныеЗаписи.ТекстОшибки     = ТекстОшибки;
	ЛогированиеЗапросовИС.Вывести(ДанныеЗаписи, ПараметрыЛогированияЗапросов);
	
	Если ПараметрыОтправкиHTTPЗапросов.Свойство("ДатаПоследнегоЗапроса") Тогда
		ПараметрыОтправкиHTTPЗапросов.ДатаПоследнегоЗапроса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     "GET");
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Вывести HTTP-Запрос в лог
//
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTP-запрос для вывода в файл.
//             - HTTPОтвет  - HTTP-ответ для вывода в файл.
//  ПараметрыОтправкиHTTPЗапросов - Структура из КлючИЗначение - дополнительные параметры отправки
//  HTTPМетод - Строка - PUT, GET, POST и проч.
//  ПутьКФайлу - Строка - Путь к файлу для записи лога.
//  ТекстОшибки - Строка - текст ошибки выполнения
//
// Возвращаемое значение:
//  Строка - Представление протокола
Функция ВывестиHTTPЗапросВЛог(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, ПутьКФайлу = Неопределено, ТекстОшибки = "") Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Если HTTPЗапрос <> Неопределено Тогда
		Если ТипЗнч(HTTPЗапрос) = Тип("HTTPЗапрос") Тогда
			
			Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
				ТекстовыйДокумент.ДобавитьСтроку("");
			КонецЕсли;
			
			URLЗапроса = URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод);
			
			ТекстовыйДокумент.ДобавитьСтроку(URLЗапроса);
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("HTTPОтвет") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
			ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Код состояния: %1", HTTPЗапрос.КодСостояния));
		ИначеЕсли ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
			ТекстовыйДокумент.ДобавитьСтроку("");
			ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Запрос проксирован через сервис интернет-поддержки';
													|en = 'Запрос проксирован через сервис интернет-поддержки'"));
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из HTTPЗапрос.Заголовки Цикл
			
			ЗначениеЗаголовка = КлючИЗначение.Значение;
			
			ТекстовыйДокумент.ДобавитьСтроку(
				СтрШаблон("%1: %2", КлючИЗначение.Ключ, ЗначениеЗаголовка));
			
		КонецЦикла;
		
		Если ТипЗнч(HTTPЗапрос) = Тип("Структура") Тогда
			Тело = HTTPЗапрос.Тело;
		Иначе
			Тело = HTTPЗапрос.ПолучитьТелоКакСтроку();
		КонецЕсли;
		
		Если Не ПустаяСтрока(Тело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(Тело);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
	КонецЕсли;
	
	Если ПутьКФайлу <> Неопределено Тогда
		ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
	КонецЕсли;
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область РазрешительныйРежимРозничнойПродажи

// Включает аварийный режим на определенное пользователем время;
// Аварийный режим подразумевает полное отключение запросов к ГИС МТ и розничную продажу
// отслеживаемых товарных групп без проверок разрешительного режима.
// 
// Параметры:
//  СрокДействияВЧасах - Число - Срок включения аварийного режима в часах
Процедура ВключитьАварийныйРежимРазрешительнойСистемы(СрокДействияВЧасах = 0) Экспорт
	
	НастройкиСканирования    = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	УниверсальнаяДатаТекущая = ТекущаяУниверсальнаяДата();
	
	Если СрокДействияВЧасах = 0 И ЗначениеЗаполнено(НастройкиСканирования.ЧастотаОбновленияCDNПлощадок) Тогда
		СрокДействияВЧасах = НастройкиСканирования.ЧастотаОбновленияCDNПлощадок;
	ИначеЕсли СрокДействияВЧасах = 0 Тогда
		// пока нет особых рекомендаций, аварийный режим включается на сутки
		СрокДействияВЧасах = 24;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиСканирования.АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата)
		И УниверсальнаяДатаТекущая < НастройкиСканирования.АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата Тогда
		ДатаОкончанияАварийногоРежима = НастройкиСканирования.АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата + СрокДействияВЧасах * 3600;
	Иначе
		ДатаОкончанияАварийногоРежима = УниверсальнаяДатаТекущая + СрокДействияВЧасах * 3600;
	КонецЕсли;
	
	НастройкиСканирования.АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата = ДатаОкончанияАварийногоРежима;
	
	КонстантаЗначение = Новый ХранилищеЗначения(НастройкиСканирования);
	Константы.НастройкиСканированияКодовМаркировкиИСМП.Установить(КонстантаЗначение);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Отключает действие аварийного режима
// Действие разрешительного режима возобновляется в штатном режиме.
//
Процедура ОтключитьАварийныйРежимРазрешительнойСистемы() Экспорт
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	НастройкиСканирования.АварийноеОтключенияРазрешительногоРежимаДоУниверсальнаяДата = Дата(1, 1, 1);
	
	КонстантаЗначение = Новый ХранилищеЗначения(НастройкиСканирования);
	Константы.НастройкиСканированияКодовМаркировкиИСМП.Установить(КонстантаЗначение);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Возвращает признак необходимости обновления площадок и их ранжированный список
//  от наиболее приоритетной по скорости отклика до наименее приоритетной.
// 
// Возвращаемое значение:
//  Структура - структура данных CDN-площадок:
// * ТребуетсяОбновлениеПлощадок - Булево - признак, что все площадки либо заблокированы, либо не загружены,
//    либо срок их актуальности подошел к концу
// * ТаблицаПлощадок - ТаблицаЗначений - сортированный список CDN-площадок:
// ** АдресПлощадки - Строка - адрес площадки
// ** Сервер - Строка - адрес сервера
// ** Порт - Число - порт
// ** ЗащищенноеСоединение - Булево - защищенное соединение
// ** СкоростьОтклика - Число - общая скорость отклика, сумма среднего времени обработки КМ на площадке
//     и времени обращения к ней
// ** ПлощадкаДоступна - Булево - признак доступности площадки
Функция СортированнаяТаблицаCDNПлощадок() Экспорт
	
	ТаблицаПлощадок = Новый ТаблицаЗначений();
	ТаблицаПлощадок.Колонки.Добавить("АдресПлощадки",        ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаПлощадок.Колонки.Добавить("Сервер",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаПлощадок.Колонки.Добавить("Порт",                 ОбщегоНазначения.ОписаниеТипаЧисло(6));
	ТаблицаПлощадок.Колонки.Добавить("ЗащищенноеСоединение", Новый ОписаниеТипов("Булево"));
	ТаблицаПлощадок.Колонки.Добавить("СкоростьОтклика",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаПлощадок.Колонки.Добавить("ПлощадкаДоступна",     Новый ОписаниеТипов("Булево"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	CDNПлощадкиИСМП.АдресПлощадки                                               КАК АдресПлощадки,
		|	CDNПлощадкиИСМП.Сервер                                                      КАК Сервер,
		|	CDNПлощадкиИСМП.Порт                                                        КАК Порт,
		|	CDNПлощадкиИСМП.ЗащищенноеСоединение                                        КАК ЗащищенноеСоединение,
		|	CDNПлощадкиИСМП.СреднееВремяОтвета + CDNПлощадкиИСМП.СреднееВремяПроверкиКМ КАК СкоростьОтклика,
		|	CDNПлощадкиИСМП.ДатаНедоступнаДоУниверсальная < &ТекущаяУниверсальнаяДата   КАК ПлощадкаДоступна,
		|	ДОБАВИТЬКДАТЕ(CDNПлощадкиИСМП.ДатаОбновленияУниверсальная, ЧАС,
		|		&ВремяОбновленияПлощадок) >= &ТекущаяУниверсальнаяДата                  КАК ПлощадкаАктуальна,
		|	CDNПлощадкиИСМП.СреднееВремяПроверкиКМ > 0
		|		И CDNПлощадкиИСМП.СреднееВремяОтвета > 0                                КАК БылПолученОтветПлощадки
		|ИЗ
		|	РегистрСведений.СостоянияCDNПлощадокИСМП КАК CDNПлощадкиИСМП
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПлощадкаДоступна УБЫВ,
		|	БылПолученОтветПлощадки УБЫВ,
		|	СкоростьОтклика";
	
	Запрос.УстановитьПараметр("ВремяОбновленияПлощадок",  ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ЧастотаОбновленияCDNПлощадок());
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЕстьХотяБыОднаАктивнаяПлощадка = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПлощадок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		
		Если Не ЕстьХотяБыОднаАктивнаяПлощадка
			И ВыборкаДетальныеЗаписи.ПлощадкаАктуальна Тогда
			ЕстьХотяБыОднаАктивнаяПлощадка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("ТребуетсяОбновлениеПлощадок", Не ЕстьХотяБыОднаАктивнаяПлощадка);
	СтруктураВозврата.Вставить("ТаблицаПлощадок",             ТаблицаПлощадок);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает ранжированный список локальных модулей "Честный знак" для оффлайн проверки кодов маркировки
//  от наиболее приоритетного до наименее приоритетного.
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация для отправки запроса в ЛМ
//  РабочееМесто - ОпределяемыйТип.РабочиеМестаИС - рабочее место для получения запроса
// 
// Возвращаемое значение:
//  Структура:
//  * СерверныеМодули - Соответствие из КлючИЗначение:
//  	** Ключ - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
//  	** Значение - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//	* КлиентскиеМодули - Соответствие из КлючИЗначение:
//  	** Ключ - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
//  	** Значение - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
Функция СортированнаяТаблицаЛокальныхМодулейЧестныйЗнак(Организация, РабочееМесто = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("СерверныеМодули",  Новый Соответствие);
	СтруктураВозврата.Вставить("КлиентскиеМодули", Новый Соответствие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиПодключенияЛокальныхМодулейИСМП.Организация               КАК Организация,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.РабочееМесто              КАК РабочееМесто,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.Приоритет                 КАК Приоритет,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.ОбменНаСервере            КАК ОбменНаСервере,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.АдресПодключенияЛМ        КАК АдресПодключения,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.СерверПодключенияЛМ       КАК Сервер,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.ПортПодключенияЛМ         КАК Порт,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.ЗащищенноеСоединение      КАК ЗащищенноеСоединение,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.Таймаут                   КАК Таймаут,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.Логин                     КАК Логин,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.НастроенныеТоварныеГруппы КАК НастроенныеТоварныеГруппы,
		|	НастройкиПодключенияЛокальныхМодулейИСМП.ХешСумма                  КАК ХешСумма
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияЛокальныхМодулейИСМП КАК НастройкиПодключенияЛокальныхМодулейИСМП
		|ГДЕ
		|	НастройкиПодключенияЛокальныхМодулейИСМП.Организация = &Организация
		|	И ВЫБОР
		|		КОГДА &РабочееМесто = НЕОПРЕДЕЛЕНО
		|			ТОГДА НастройкиПодключенияЛокальныхМодулейИСМП.ОбменНаСервере
		|		ИНАЧЕ НастройкиПодключенияЛокальныхМодулейИСМП.РабочееМесто = &РабочееМесто
		|			ИЛИ НастройкиПодключенияЛокальныхМодулейИСМП.РабочееМесто = &ПустоеЗначениеРабочееМесто
		|	КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	ОбменНаСервере УБЫВ,
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("РабочееМесто",               РабочееМесто);
	Запрос.УстановитьПараметр("ПустоеЗначениеРабочееМесто", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.РабочиеМестаИС));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ДанныеТоварныхГрупп = ОбщегоНазначенияИСМПВызовСервера.СписокУчитываемойПродукцииТребующейОбязательнойОффлайнПроверкиПриПродажеВРозницуНаДату();
		
		Для Каждого ТоварнаяГруппа Из ДанныеТоварныхГрупп Цикл
			
			Если ВыборкаДетальныеЗаписи.ОбменНаСервере Тогда
				СписокМодулейПоВидуОбмена = СтруктураВозврата.СерверныеМодули;
			Иначе
				СписокМодулейПоВидуОбмена = СтруктураВозврата.КлиентскиеМодули;
			КонецЕсли;
			
			ДанныеМодулейПоВидуПродукции = СписокМодулейПоВидуОбмена.Получить(ТоварнаяГруппа);
			
			Если ДанныеМодулейПоВидуПродукции = Неопределено Тогда
				ДанныеМодулейПоВидуПродукции = Новый Массив;
			КонецЕсли;
			
			НоваяСтрока = КонструкторПодключенияЛокальногоМодуляЧестныйЗнак();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			
			ПарольАдминистратора = РегистрыСведений.НастройкиПодключенияЛокальныхМодулейИСМП.ПарольАдминистратораИзБезопасногоХранилища(
				ВыборкаДетальныеЗаписи.ХешСумма);
			
			НоваяСтрока.Пароль = ПарольАдминистратора;
			ДанныеМодулейПоВидуПродукции.Добавить(НоваяСтрока);
			
			Если ВыборкаДетальныеЗаписи.ОбменНаСервере Тогда
				СтруктураВозврата.СерверныеМодули.Вставить(ТоварнаяГруппа, ДанныеМодулейПоВидуПродукции);
			Иначе
				СтруктураВозврата.КлиентскиеМодули.Вставить(ТоварнаяГруппа, ДанныеМодулейПоВидуПродукции);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Блокирует список CDN-площадок на время, указанное пользователем, 
//  или стандартный срок из настроек ИС МП.
// 
// Параметры:
//  МассивПлощадок - Массив из Строка - Массив площадок к блокировке
//  ВремяБлокировки - Число - Время блокировки, если 0, то берется стандартное время блокировки
Процедура ЗаблокироватьСписокПлощадок(МассивПлощадок, ВремяБлокировки = 0) Экспорт
	
	Если МассивПлощадок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВремяБлокировки = 0 Тогда
		ВремяБлокировки = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ВремяБлокировкиCDNПлощадки();
	КонецЕсли;
	
	Для Каждого АдресПлощадки Из МассивПлощадок Цикл
		
		МенеджерЗаписи = РегистрыСведений.СостоянияCDNПлощадокИСМП.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.АдресПлощадки = АдресПлощадки;
		МенеджерЗаписи.Прочитать();
		
		Если Не МенеджерЗаписи.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаНедоступнаДоУниверсальная = ТекущаяУниверсальнаяДата() + ВремяБлокировки * 60;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак необходимости запуска процедуры обновления списка CDN-площадок.
// 
// Возвращаемое значение:
//  Булево - Истина, если список площадок пуст (при первом запуске) или все площадки обновлены ранее
//   срока их актуальности
Функция ТребуетсяОбновлениеСпискаCDNПлощадок() Экспорт
	
	Если ОбщегоНазначенияИСМПВызовСервера.СписокУчитываемойПродукцииТребующейОбязательнойОнлайнПроверкиПриПродажеВРозницуНаДату().Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК ЕстьАктивныеПлощадки
		|ИЗ
		|	РегистрСведений.СостоянияCDNПлощадокИСМП КАК CDNПлощадкиИСМП
		|ГДЕ
		|	ДОБАВИТЬКДАТЕ(CDNПлощадкиИСМП.ДатаОбновленияУниверсальная, СЕКУНДА, &ВремяОбновленияПлощадок) >= &ТекущаяУниверсальнаяДата";
	
	Запрос.УстановитьПараметр("ВремяОбновленияПлощадок",  ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ЧастотаОбновленияCDNПлощадок() * 3600);
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата", ТекущаяУниверсальнаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	ТребуетсяОбновление = РезультатЗапроса.Пустой();
	
	Возврат ТребуетсяОбновление;
	
КонецФункции

// Длительная операция актуализации списка и времени отклика CDN-площадок.
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьАктуализациюCDNПлощадокДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	Если ПараметрыФоновогоЗадания.Свойство("ОбновлятьБезПроверкиДатыОбновления") И ПараметрыФоновогоЗадания.ОбновлятьБезПроверкиДатыОбновления Тогда
		ТребуетсяОбновлениеCDNПлощадок = Истина;
	Иначе
		ТребуетсяОбновлениеCDNПлощадок = ТребуетсяОбновлениеСпискаCDNПлощадок();
	КонецЕсли;
	
	Если Не ТребуетсяОбновлениеCDNПлощадок Тогда
		
		ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначения.АктуализацияСпискаCDNПлощадок(ПараметрыФоновогоЗадания.Организация);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	Если РезультатОбновления.СписокПлощадок.Количество() Тогда
		
		РезультатЗаписи = ЗаписатьДанныеСостоянияCDNПлощадокВРегистр(РезультатОбновления.СписокПлощадок);
		
		Если РезультатЗаписи.Отказ Тогда
			
			ВозвращаемоеЗначение.ЕстьОшибки  = Истина;
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗаписи.ТекстОшибки;
			
		ИначеЕсли ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки) Тогда
			
			ВозвращаемоеЗначение.ЕстьОшибки  = Истина;
			ВозвращаемоеЗначение.ТекстОшибки = РезультатОбновления.ТекстОшибки;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = РезультатОбновления.ТребуетсяОбновлениеКлючаСессииРозница;
		
		// если требуется обновление токена, не выводить текст ошибки, выводить общее окно с подсказкой настройки
		Если Не ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница Тогда
			
			ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
			ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Длительная операция инициализации конфигурации локального модуля "Честный знак", первый этап настройки.
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьИнициализациюКонфигурацииЛокальногоМодуляЧЗДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ(ПараметрыФоновогоЗадания.Организация,
		ПараметрыФоновогоЗадания.ПараметрыУстановки);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = РезультатОбновления.ТребуетсяОбновлениеКлючаСессииРозница;
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Длительная операция запроса статуса локального модуля "Честный знак", второй этап настройки.
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьЗапросСтатусаЛокальногоМодуляЧЗДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                 Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",           Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ВерсияСборки",               "");
	ВозвращаемоеЗначение.Вставить("Статус",                     "");
	ВозвращаемоеЗначение.Вставить("ДатаПоследнейСинхронизации", Дата(1, 1, 1));
	ВозвращаемоеЗначение.Вставить("ТребуетсяЗагрузка",          Ложь);
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ЗапроситьСтатусЛокальногоМодуляЧЗ(ПараметрыФоновогоЗадания.Организация, ПараметрыФоновогоЗадания.ПараметрыУстановки);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки                 = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки                = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации           = РезультатОбновления.ОтказАвторизации;
	ВозвращаемоеЗначение.ВерсияСборки               = РезультатОбновления.ВерсияСборки;
	ВозвращаемоеЗначение.Статус                     = РезультатОбновления.Статус;
	ВозвращаемоеЗначение.ТребуетсяЗагрузка          = РезультатОбновления.ТребуетсяЗагрузка;
	ВозвращаемоеЗначение.ДатаПоследнейСинхронизации = РезультатОбновления.ДатаПоследнейСинхронизации;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Длительная операция смены пароля администратора локального модуля "Честный знак", вариативный этап настройки.
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьСменуПароляАдминистрированияЛокальногоМодуляЧЗДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",       Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(ПараметрыФоновогоЗадания.Организация, ПараметрыФоновогоЗадания.ПараметрыУстановки, ПараметрыФоновогоЗадания.НовыйПароль);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки       = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки      = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации = РезультатОбновления.ОтказАвторизации;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Длительная операция настройки товарных групп локального модуля "Честный знак", финальный этап настройки.
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьНастройкуТоварныхГруппЛокальногоМодуляЧЗДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.НастройкаТоварныхГруппЛокальногоМодуляЧЗ(ПараметрыФоновогоЗадания.Организация, ПараметрыФоновогоЗадания.ПараметрыУстановки, ПараметрыФоновогоЗадания.ПараметрыНастройкиТоварныхГрупп);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = РезультатОбновления.ТребуетсяОбновлениеКлючаСессииРозница;
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Длительная операция получения конфигурации локального модуля "Честный знак".
// 
// Параметры:
//  ПараметрыФоновогоЗадания - Структура - Параметры запуска фонового задания
//  АдресРезультата - Строка - адрес возврата результата
Процедура ВыполнитьПолучениеКонфигурацииЛокальногоМодуляЧЗДлительнаяОперация(ПараметрыФоновогоЗадания, АдресРезультата) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",             Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",       Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",            "");
	ВозвращаемоеЗначение.Вставить("АдресСервернойЧасти",    "");
	ВозвращаемоеЗначение.Вставить("НастройкаТоварныхГрупп", Неопределено);
	
	Если ПараметрыФоновогоЗадания.Свойство("ПараметрыЛогированияЗапросовИСМП") Тогда
		
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИС.НастроитьПараметрыЛогированияВФоновомЗадании(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ЛогированиеЗапросовИСМП.УстановитьПараметрыЛогированияЗапросов(ПараметрыФоновогоЗадания.ПараметрыЛогированияЗапросовИСМП);
		ВыполнятьЛогирование = Истина;
		
	КонецЕсли;
	
	РезультатОбновления = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ЗапроситьКонфигурациюЛокальногоМодуляЧЗ(ПараметрыФоновогоЗадания.Организация, ПараметрыФоновогоЗадания.ПараметрыУстановки);
	
	Если ВыполнятьЛогирование Тогда
		ЛогированиеЗапросовИСМП.ЗаполнитьВозвращаемыеДанныеФоновогоЗадания(ВозвращаемоеЗначение);
	КонецЕсли;
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	ВозвращаемоеЗначение.АдресСервернойЧасти                   = РезультатОбновления.АдресСервернойЧасти;
	ВозвращаемоеЗначение.НастройкаТоварныхГрупп                = РезультатОбновления.НастройкаТоварныхГрупп;
	
	ПоместитьВоВременноеХранилище(ВозвращаемоеЗначение, АдресРезультата);
	
КонецПроцедуры

// Запись данных площадок в регистр СостоянияCDNПлощадокИСМП.
// 
// Параметры:
//  СписокПлощадок - Соответствие Из КлючИЗначение - полученные CDN-площадки:
//   * Ключ - Строка - Адрес площадки.
//   * Значение - (см. ИнтерфейсИСМП.ЗамерыСкоростиCDNПлощадок)
// Возвращаемое значение:
//  Структура:
//     * Отказ - Булево
//     * ТекстОшибки - Строка - заполнено, если Отказ = Истина
Функция ЗаписатьДанныеСостоянияCDNПлощадокВРегистр(СписокПлощадок) Экспорт
	
	РезультатВозврата = Новый Структура("Отказ, ТекстОшибки", Ложь, "");
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияCDNПлощадокИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.СостоянияCDNПлощадокИСМП.СоздатьНаборЗаписей();
		НаборЗаписей.Записать();
		
		Для Каждого СтрокаСпискаПлощадок Из СписокПлощадок Цикл
			
			ЗаписьРегистра = РегистрыСведений.СостоянияCDNПлощадокИСМП.СоздатьМенеджерЗаписи();
			
			ЗаписьРегистра.АдресПлощадки          = СтрокаСпискаПлощадок.Ключ;
			ЗаписьРегистра.СреднееВремяОтвета     = СтрокаСпискаПлощадок.Значение.СреднееВремяОтвета;
			ЗаписьРегистра.СреднееВремяПроверкиКМ = СтрокаСпискаПлощадок.Значение.СреднееВремяПроверкиКМ;
			
			ЗаписьРегистра.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		РезультатВозврата.Отказ       = Истина;
		РезультатВозврата.ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат РезультатВозврата;
	
КонецФункции

#КонецОбласти

// Инициализация таблицы протокола обмена элемента очереди из ИС МП.
// Параметры:
//  ВключитьКодСостояния - Булево - признак, добавлять ли в таблицу колонку КодСостояния
//
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
//  * ДатаУниверсальная - Дата - Дата.
//  * Операция - ПеречислениеСсылка.ВидыОперацийИСМП - вид операции.
//  * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - статус обработки сообщения.
//  * Запрос - Строка - запрос.
//  * ЗапросЗаголовки - Строка - заголовки запроса.
//  * ЗапросТело - Строка - тело запроса.
//  * ОтветЗаголовки - Строка - заголовки ответа.
//  * ОтветТело - Строка - ответ.
//  * КодСостояния - Строка - код состояния запроса.
Функция ИнициализироватьТаблицуПротоколОбмена(ВключитьКодСостояния = Ложь) Экспорт
	
	ПротоколОбмена = Новый ТаблицаЗначений;
	ПротоколОбмена.Колонки.Добавить("ДатаУниверсальная", Новый ОписаниеТипов("Дата"));
	ПротоколОбмена.Колонки.Добавить("Операция",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийИСМП"));
	ПротоколОбмена.Колонки.Добавить("СтатусОбработки",   Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП"));
	ПротоколОбмена.Колонки.Добавить("Запрос",            Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросЗаголовки",   Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ЗапросТело",        Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветЗаголовки",    Новый ОписаниеТипов("Строка"));
	ПротоколОбмена.Колонки.Добавить("ОтветТело",         Новый ОписаниеТипов("Строка"));
	Если ВключитьКодСостояния Тогда
		ПротоколОбмена.Колонки.Добавить("КодСостояния", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Возврат ПротоколОбмена;
	
КонецФункции

// Заголовки из HTTPОтвета.
// 
// Параметры:
//  HTTPОтвет - HTTPОтвет
// 
// Возвращаемое значение:
//  Строка - Заголовки из HTTPОтвета
Функция ЗаголовкиИзHTTPОтвета(HTTPОтвет) Экспорт
	
	ОтветЗаголовки = Новый Массив;
	
	ИгноруемыеЗаголовки = Новый Соответствие;
	ИгноруемыеЗаголовки.Вставить(ВРег("Set-Cookie"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Expires"),                Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Via"),                    Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Connection"),             Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Proxy-Connection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Server"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Vary"),                   Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Frame-Options"),        Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Transfer-Encoding"),      Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Pragma"),                 Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-Content-Type-Options"), Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("X-XSS-Protection"),       Истина);
	ИгноруемыеЗаголовки.Вставить(ВРег("Cache-Control"),          Истина);
	
	Для Каждого КлючИЗначение Из HTTPОтвет.Заголовки Цикл
		Заголовок = КлючИЗначение.Ключ;
		Если ИгноруемыеЗаголовки[ВРег(Заголовок)] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ОтветЗаголовки.Добавить(
			СтрШаблон("%1: %2", Заголовок, КлючИЗначение.Значение));
	КонецЦикла;
	
	Возврат СтрСоединить(ОтветЗаголовки, Символы.ПС);
	
КонецФункции

// URLЗапроса.
// 
// Параметры:
//  HTTPЗапрос - HTTPЗапрос - HTTPЗапрос
//  ПараметрыОтправкиHTTPЗапросов - Структура, Неопределено - Параметры отправки HTTPЗапросов:
// * ИспользоватьЗащищенноеСоединение - Булево - 
// * Таймаут - Число - 
// * Порт - Число - 
// * Сервер - Строка - 
// * ПредставлениеСервиса - Строка - 
//  HTTPМетод - Строка, Неопределено - HTTPМетод
// 
// Возвращаемое значение:
//  Строка - URLЗапроса
// Формируется строка URL по HTTP-запросу или переданным параметрам
// 
// Параметры:
//  HTTPЗапрос                    - HTTPЗапрос - HTTP-запрос
//  ПараметрыОтправкиHTTPЗапросов - Структура, Неопределено - Параметры отправки HTTP-запросов
//  HTTPМетод                     - Строка, Неопределено - HTTPМетод
//  АдресРесурса                  - Строка - Адрес ресурса
// 
// Возвращаемое значение:
//  Строка - URL запроса
Функция URLЗапроса(HTTPЗапрос, ПараметрыОтправкиHTTPЗапросов, HTTPМетод, АдресРесурса = "") Экспорт

	Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
		Протокол = "https";
	Иначе
		Протокол = "http";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресРесурса) И HTTPЗапрос <> Неопределено Тогда
		АдресРесурса = HTTPЗапрос.АдресРесурса;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		"%1 %2://%3:%4/%5",
		HTTPМетод,
		Протокол,
		ПараметрыОтправкиHTTPЗапросов.Сервер,
		Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0;"),
		АдресРесурса);
	
	Возврат URLЗапроса;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив из Строка - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = Метаданные.ПараметрыСеанса.ПараметрыЛогированияЗапросовИСМП.Имя Тогда
		ЛогированиеЗапросовИС.УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры);
	ИначеЕсли ИмяПараметра = "ДанныеКлючаСессииСУЗ" Тогда
		ПараметрыСеанса.ДанныеКлючаСессииСУЗ = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	ИначеЕсли ИмяПараметра = Метаданные.ПараметрыСеанса.ДанныеКлючаСессииИСМП.Имя Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМП = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	ИначеЕсли ИмяПараметра = Метаданные.ПараметрыСеанса.ДанныеКлючаСессииИСМПРозница.Имя Тогда
		ПараметрыСеанса.ДанныеКлючаСессииИСМПРозница = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	ИначеЕсли ИмяПараметра = Метаданные.ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП.Имя Тогда
		ПараметрыСеанса.CDNПлощадкиСОшибкамиОбменаИСМП = Новый ХранилищеЗначения(Неопределено);
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ИменаПараметров  = ОбщегоНазначенияИСМПКлиентСервер.ИменаПараметровРаботыКлиента();
	
	Параметры.Вставить(
		ИменаПараметров.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом, 
		ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом());
	
КонецПроцедуры

// Возвращает признак, поддерживает ли БПО логирование проверок КМ и проверку КМ единым методом
// 
// Возвращаемое значение:
//  Булево - Истина, если версия БПО выше 3.2.2.24
Функция ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом() Экспорт
	
	Возврат ОбщегоНазначенияИСМППовтИсп.ВерсияБПОПоддерживаетПроверкуКМЕдинымМетодом();
	
КонецФункции

#КонецОбласти

// Минимальная цена розничной продажи табачной продукции.
// 
// Возвращаемое значение:
//  Структура - Минимальная цена розничной продажи табачной продукции:
// * МинРЦ - Число - минимальная розничная цена табачной продукции
// * ЗагруженыАктуальныеЦены - Булево - Истина, если загружена минимальная цена
Функция МинимальнаяЦенаРозничнойПродажиТабачнойПродукции() Экспорт
	
	СтруктураМинимальнойЦены = Новый Структура;
	СтруктураМинимальнойЦены.Вставить("МинРЦ",                   0);
	СтруктураМинимальнойЦены.Вставить("ЗагруженыАктуальныеЦены", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МинимальныеЦеныПодакцизныхТоваровИС.МинимальнаяЦена КАК МинимальнаяЦена
		|ИЗ
		|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК МинимальныеЦеныПодакцизныхТоваровИС
		|ГДЕ
		|	МинимальныеЦеныПодакцизныхТоваровИС.ВидПодакцизногоТовара = &ВидПодакцизногоТовара
		|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаНачалаДействия <= &ДатаПроверки
		|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаОкончанияДействия >= &ДатаПроверки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МинимальныеЦеныПодакцизныхТоваровИС.МинимальнаяЦена
		|ИЗ
		|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК МинимальныеЦеныПодакцизныхТоваровИС
		|ГДЕ
		|	МинимальныеЦеныПодакцизныхТоваровИС.ВидПодакцизногоТовара = &ВидПодакцизногоТовара
		|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаНачалаДействия <= &ДатаПроверки
		|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаОкончанияДействия = &Актуальная";
	
	Запрос.УстановитьПараметр("Актуальная",            Дата("00010101"));
	Запрос.УстановитьПараметр("ВидПодакцизногоТовара", Перечисления.ВидыПодакцизныхТоваровИС.ТабачнаяПродукция);
	Запрос.УстановитьПараметр("ДатаПроверки",          ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураМинимальнойЦены.МинРЦ = ВыборкаДетальныеЗаписи.МинимальнаяЦена;
		СтруктураМинимальнойЦены.ЗагруженыАктуальныеЦены = Истина;
	КонецЦикла;
	
	Возврат СтруктураМинимальнойЦены;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Идентификаторы ФИАС по данным адреса.
// 
// Параметры:
//  ДанныеАдреса - Строка -
// 
// Возвращаемое значение:
//  Структура - Идентификатор ФИАСПо данным адреса:
// * Идентификатор - Строка - Детальный идентификатор.
// * ИдентификаторДома - Строка -
// * ИдентификаторАдресногоОбъекта - Строка -
// * ИдентификаторКвартиры - Строка -
// * Представление - Строка -
Функция ИдентификаторФИАСПоДаннымАдреса(ДанныеАдреса) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Идентификатор");
	ВозвращаемоеЗначение.Вставить("ИдентификаторДома");
	ВозвращаемоеЗначение.Вставить("ИдентификаторАдресногоОбъекта");
	ВозвращаемоеЗначение.Вставить("ИдентификаторКвартиры");
	ВозвращаемоеЗначение.Вставить("Представление");
	
	ДанныеКИ                      = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ДанныеАдреса);
	СведенияОбАдресе              = РаботаСАдресами.СведенияОбАдресе(ДанныеКИ, Новый Структура("КодыАдреса", Истина));
	
	ВозвращаемоеЗначение.ИдентификаторДома             = Строка(СведенияОбАдресе.ИдентификаторДома);
	ВозвращаемоеЗначение.ИдентификаторАдресногоОбъекта = Строка(СведенияОбАдресе.ИдентификаторАдресногоОбъекта);
	ВозвращаемоеЗначение.Представление                 = СведенияОбАдресе.Представление;
	
	Если ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторДома) Тогда
		ВозвращаемоеЗначение.Идентификатор = ВозвращаемоеЗначение.ИдентификаторДома;
	ИначеЕсли ЗначениеЗаполнено(СведенияОбАдресе.ИдентификаторАдресногоОбъекта) Тогда
		ВозвращаемоеЗначение.Идентификатор = ВозвращаемоеЗначение.ИдентификаторАдресногоОбъекта;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ИС МП.
//
// Параметры:
//  ТекстОшибки      - Строка           - текст ошибки.
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных с ошибкой.
//  Данные           - Произвольный     - объект данных с ошибкой.
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ОбъектМетаданных = Неопределено, Данные = Неопределено) Экспорт
	
	ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
		ТекстОшибки,
		НСтр("ru = 'ИС МП';
			|en = 'ИС МП'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ОбъектМетаданных,
		Данные);
	
КонецПроцедуры

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - формируемый список значений.
//  ВсеТребующиеДействия - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru = 'Все требующие действия';
														|en = 'Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru = 'Все требующие ожидания';
														|en = 'Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru = 'Все требующие действия или ожидания';
																	|en = 'Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
	
КонецПроцедуры

// Конструктор таблицы локальных модулей честный знак.
// 
// Возвращаемое значение:
// - Структура - описание подключения локального модуля:
// * Организация - Неопределено, Произвольный, ОпределяемыйТип.Организация - организация для отправки запроса в ЛМ
// * РабочееМесто - Неопределено, Произвольный, ОпределяемыйТип.РабочиеМестаИС - рабочее место для получения запроса
// * Приоритет - Число - приоритет настройки
// * ОбменНаСервере - Булево - Истина, если обмен производится на сервере
// * АдресПодключения - Строка - адрес площадки
// * Сервер - Строка - адрес сервера
// * Порт - Число - порт
// * ЗащищенноеСоединение - Булево - защищенное соединение
// * Логин - Строка - логин администратора ЛМ ЧЗ
// * Пароль - Строка - пароль администратора ЛМ ЧЗ
// * Таймаут - Число - таймаут подключения
Функция КонструкторПодключенияЛокальногоМодуляЧестныйЗнак() Экспорт
	
	СтруктураЛокальногоМодуля = Новый Структура();
	
	СтруктураЛокальногоМодуля.Вставить("Организация",               ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Организация));
	СтруктураЛокальногоМодуля.Вставить("РабочееМесто",              ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.РабочиеМестаИС));
	СтруктураЛокальногоМодуля.Вставить("Приоритет",                 0);
	СтруктураЛокальногоМодуля.Вставить("ОбменНаСервере",            Ложь);
	СтруктураЛокальногоМодуля.Вставить("АдресПодключения",          "");
	СтруктураЛокальногоМодуля.Вставить("Сервер",                    "");
	СтруктураЛокальногоМодуля.Вставить("Порт",                      0);
	СтруктураЛокальногоМодуля.Вставить("ЗащищенноеСоединение",      Ложь);
	СтруктураЛокальногоМодуля.Вставить("Логин",                     "");
	СтруктураЛокальногоМодуля.Вставить("Пароль",                    "");
	СтруктураЛокальногоМодуля.Вставить("Таймаут",                   0);
	
	Возврат СтруктураЛокальногоМодуля;
	
КонецФункции

// Возвращает таблицу кодов маркировки с минимальными и максимальными розничными ценами
//
// Параметры:
//  ШтрихкодыУпаковок - ТаблицаЗначений - коды маркировки, по которым осуществляется проверка:
//  * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров, Строка -
//  ПараметрыСканирования - см. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования
// Возвращаемое значение:
//  ТаблицаЗначений - результаты проверки:
//  * Номенклатура             - СправочникСсылка.Номенклатура - номенклатура из штрихкода
//  * Характеристика           - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика из штрихкода
//  * Серия                    - СправочникСсылка.СерииНоменклатуры - серия из штрихкода
//  * МРЦ                      - Число - максимальная розничная цена, указанная в коде маркировки
//  * МинимальнаяРозничнаяЦена - Число - установленная минимальная розничная цена табачной продукции
//  * ТекстОшибки              - Строка - ошибка разбора кода маркировки
//  * КодМаркировки            - Строка - значение из штрихкода
//  * НарушениеМРЦ             - Булево - Истина, если МРЦ меньще установленной законодательством минимальной розничной цены
Функция МинимальныеЦеныТабачнойПродукции(ШтрихкодыУпаковок, ПараметрыСканирования) Экспорт
	
	МинимальнаяРозничнаяЦена         = 0;
	МинимальнаяЦенаТабачнойПродукции = МинимальнаяЦенаРозничнойПродажиТабачнойПродукции();
	
	Если МинимальнаяЦенаТабачнойПродукции.ЗагруженыАктуальныеЦены Тогда
		МинимальнаяРозничнаяЦена = МинимальнаяЦенаТабачнойПродукции.МинРЦ;
	КонецЕсли;
	
	РезультатыПроверки = Новый ТаблицаЗначений;
	РезультатыПроверки.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	РезультатыПроверки.Колонки.Добавить("Характеристика",           Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	РезультатыПроверки.Колонки.Добавить("Серия",                    Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	РезультатыПроверки.Колонки.Добавить("МРЦ",                      ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РезультатыПроверки.Колонки.Добавить("МинимальнаяРозничнаяЦена", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	РезультатыПроверки.Колонки.Добавить("ТекстОшибки",              ОбщегоНазначения.ОписаниеТипаСтрока(40));
	РезультатыПроверки.Колонки.Добавить("КодМаркировки",            ОбщегоНазначения.ОписаниеТипаСтрока(150));
	РезультатыПроверки.Колонки.Добавить("НарушениеМРЦ",             Новый ОписаниеТипов("Булево"));
	
	ВидПродукцииТабак           = Перечисления.ВидыПродукцииИС.Табак;
	ПримечаниеКРазборуШтрихкода = Новый Структура;
	ШтрихкодыУпаковокТоваров    = Новый Массив;
	
	Для каждого ШтрихкодНаПроверку Из ШтрихкодыУпаковок Цикл
		Если ТипЗнч(ШтрихкодНаПроверку.Штрихкод) = Тип("Строка") Тогда
			СтрокаРезультатПроверки = РезультатыПроверки.Добавить();
			СтрокаРезультатПроверки.КодМаркировки = ШтрихкодНаПроверку.Штрихкод;
		Иначе
			ШтрихкодыУпаковокТоваров.Добавить(ШтрихкодНаПроверку.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если ШтрихкодыУпаковокТоваров.Количество() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.Представление КАК КодМаркировки,
		|	ШтрихкодыУпаковокТоваров.Номенклатура КАК Номенклатура,
		|	ШтрихкодыУпаковокТоваров.Характеристика КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Серия КАК Серия
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&МассивШтрихкодов)";
		
		Запрос.УстановитьПараметр("МассивШтрихкодов", ШтрихкодыУпаковокТоваров);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаРезультатПроверки = РезультатыПроверки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультатПроверки, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого СтрокаУпаковок Из РезультатыПроверки Цикл
		МаксимальнаяРозничнаяЦена = 0;
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаУпаковок.КодМаркировки, ВидПродукцииТабак, ПримечаниеКРазборуШтрихкода);
		
		СтрокаУпаковок.МинимальнаяРозничнаяЦена = МинимальнаяРозничнаяЦена;
		
		Если ЗначениеЗаполнено(ПримечаниеКРазборуШтрихкода.ИдентификаторОшибки) Тогда
			СтрокаУпаковок.ТекстОшибки = ПримечаниеКРазборуШтрихкода.ТекстОшибки;
		Иначе
			СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			
			СоставКодаМаркировки.Свойство("МРЦ", МаксимальнаяРозничнаяЦена);
			
			Если МаксимальнаяРозничнаяЦена <> Неопределено И МаксимальнаяРозничнаяЦена > 0 Тогда
				СтрокаУпаковок.МРЦ = МаксимальнаяРозничнаяЦена;
				
				Если МаксимальнаяРозничнаяЦена < МинимальнаяРозничнаяЦена Тогда
					СтрокаУпаковок.НарушениеМРЦ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатыПроверки;
	
КонецФункции

Процедура ЗаполнитьПоСтатистике(Поля, ДанныеЗаполнения, ДанныеПоследнихДокументов, ПоляОтбора = "ВидПродукции") Экспорт
	
	Отбор = Новый Структура;
	ОтбираемыеПоля = СтрРазделить(ПоляОтбора, ",", Ложь);
		
	Для каждого ПолеОтбора из ОтбираемыеПоля Цикл
		ИмяПоля = СокрЛП(ПолеОтбора);
		Если ДанныеЗаполнения[ИмяПоля] <> Неопределено Тогда
			Отбор.Вставить(ИмяПоля, ДанныеЗаполнения[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Отбор = Неопределено;
	КонецЕсли;
	
	ЗаполняемыеПоля = СтрРазделить(Поля, ",");
	
	РезультатыАнализа = ДанныеПоследнихДокументов.Скопировать(
		Отбор, Поля + ", Количество");
	
	РезультатыАнализа.Свернуть(Поля, "Количество");
	РезультатыАнализа.Сортировать("Количество Убыв");
	Если РезультатыАнализа.Количество() > 0 Тогда
		Для Каждого Поле Из ЗаполняемыеПоля Цикл
			ИмяПоля = СокрЛП(Поле);
			ДанныеЗаполнения[ИмяПоля] = РезультатыАнализа[0][ИмяПоля];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Интерактиваная передача данных о подключении кега к оборудованию розлива разрешена.
// 
// Возвращаемое значение:
//  Булево - Интерактиваная передача данных о подключении кега к оборудованию розлива разрешена
Функция ИнтерактиванаяПередачаДанныхОПодключенииКегаКОборудованиюРозливаРазрешена() Экспорт
	
	Разрешено = Истина;
	
	ОбщегоНазначенияИСМППереопределяемый.ИнтерактиванаяПередачаДанныхОПодключенииКегаКОборудованиюРозливаРазрешена(Разрешено);
	
	Возврат Разрешено;
	
КонецФункции

#КонецОбласти