
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды
// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	//++ Локализация
	
	//-- Локализация
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийМодуляОбъекта

// Обработчик события ОбработкаПроверкиЗаполнения объекта справочника Договоры
//
// Параметры:
//  Отказ - Булево - см. описание платформенного метода ОбработкаПроверкиЗаполнения
//  ПроверяемыеРеквизиты - Массив - см. описание платформенного метода ОбработкаПроверкиЗаполнения
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения. 
//  СправочникОбъект - СправочникОбъект.ДоговорыКредитовИДепозитов
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, СправочникОбъект) Экспорт
	//++ Локализация
		
	Перем Ошибки;
	//++ НЕ УТ
	Если ДоступныПлатежиПо275ФЗ(СправочникОбъект) Тогда
		ДенежныеСредстваСерверЛокализация.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(СправочникОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
	КонецЕсли;
	//-- НЕ УТ
	
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.Контрагент, "ЮрФизЛицо");
	
	Если СправочникОбъект.УникальныйНомерВалютногоКонтроля <> ""
		И ИспользоватьУникальныйНомерВалютногоКонтроля(СправочникОбъект, КонтрагентЮрФизЛицо) Тогда
		ДенежныеСредстваКлиентСерверЛокализация.ПроверитьУникальныйНомерВалютногоКонтракта(
			СправочникОбъект, СправочникОбъект.УникальныйНомерВалютногоКонтроля, Отказ);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы элемента справочника Договоры
//
// Параметры:
//  Отказ - Булево - см. описание платформенного метода ПередЗаписью
//  СправочникОбъект - СправочникОбъект.ДоговорыКредитовИДепозитов - записываемый объект
//
Процедура ПередЗаписью(Отказ, СправочникОбъект) Экспорт
	//++ Локализация
	
	Если СправочникОбъект.УникальныйНомерВалютногоКонтроля <> "" Тогда
		
		КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.Контрагент, "ЮрФизЛицо");
		
		Если Не ИспользоватьУникальныйНомерВалютногоКонтроля(СправочникОбъект, КонтрагентЮрФизЛицо) Тогда
			СправочникОбъект.УникальныйНомерВалютногоКонтроля = "";
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация

	//++ НЕ УТ
	Если ИмяЭлемента = "БанковскийСчет" Тогда
		БанковскийСчетПриИзменении(Форма);
	КонецЕсли;
	//-- НЕ УТ
	Если ИмяЭлемента = "ХарактерДоговора" Тогда
		ХарактерДоговораПриИзменении(Форма);
		УстановитьВидимостьИдентификатораВалютногоКонтракта(Форма);
	КонецЕсли;
	
	Если ИмяЭлемента = "ТипДоговора"
		Или ИмяЭлемента = "Контрагент"
		Или ИмяЭлемента = "Валюта"
		Или ИмяЭлемента = "Организация" Тогда
		УстановитьВидимостьИдентификатораВалютногоКонтракта(Форма);
	КонецЕсли; 
	
	//++ НЕ УТ
	Если ИмяЭлемента = "Контрагент" Тогда
		УстановитьВидимостьВидаДоходаИностранногоКонтрагента(Форма);
	КонецЕсли;
	
	Если ИмяЭлемента = "ВидДоходаИностранногоКонтрагента" Тогда
		УстановитьВидимостьПояснениеКВидуДохода(Форма);
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника ДоговорыКонтрагентов.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация

	//++ НЕ УТ
	УправлениеНастройкойГОЗ(Форма);
	Форма.ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Форма.АдресПодтверждающихДокументовВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Форма.Объект.ПодтверждающиеДокументы.Выгрузить(),
		Форма.УникальныйИдентификатор);
	//-- НЕ УТ
	
	УстановитьВидимостьИдентификатораВалютногоКонтракта(Форма);
	
	//++ НЕ УТ
	УстановитьВидимостьВидаДоходаИностранногоКонтрагента(Форма);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере формы элемента справочника ДоговорыКонтрагентов
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере формы элемента справочника ДоговорыКонтрагентов
//
// Параметры:
//  Отказ           - Булево - признак отказа.
//  ТекущийОбъект   - СправочникОбъект - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация

	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация

	//++ НЕ УТ
	Если ИмяКоманды = "ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ" Тогда
		ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(ПараметрыОбработки, Форма)
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление формы
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы =  Форма.Элементы;
КонецПроцедуры

#КонецОбласти

#Область ПрочиеСлужебныеМетоды

Процедура ДополнитьДанныеШапкиДокументаДДС(ДанныеШапки, ДоговорКредитаДепозита) Экспорт
	//++ Локализация
	
	ДанныеШапки.Вставить("ПлатежиПо275ФЗ", Ложь);
	//++ НЕ УТ
	Если ЗначениеЗаполнено(ДанныеШапки.БанковскийСчет)
		И (ДанныеШапки.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм
			Или ДанныеШапки.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит) Тогда
			
			ДанныеШапки.ПлатежиПо275ФЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.БанковскийСчет, "ОтдельныйСчетГОЗ");
			
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Дополняется настройки
// 
// Параметры:
//     Настройки - ТаблицаЗначений - таблица с колонками:
//         * Поля - Массив из Строка - Поля, для которых действует настройка.
//         * Условие - ОтборКомпоновкиДанных - Определяет действительность настройки.
//         * Свойства - Структура - Свойства полей.
//
Процедура ДополнитьНастройкиПолейФормы(Настройки) Экспорт
	//++ Локализация
		
	//++ НЕ УТ
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КодРаздел7ДекларацииНДС");
	ФинансоваяОтчетностьСервер.НовыйОтбор(Элемент.Условие, "ХарактерДоговора", Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный);
	Элемент.Свойства.Вставить("Видимость");
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

Процедура ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(Результат, Форма) Экспорт
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
	ПодтверждающиеДокументы = ПолучитьИзВременногоХранилища(Результат.АдресПодтверждающихДокументовВоВременномХранилище);
	ПодтверждающиеДокументыОбъекта = Форма.Объект.ПодтверждающиеДокументы;
	ПодтверждающиеДокументыОбъекта.Очистить();
	Для каждого ТекСтрока Из ПодтверждающиеДокументы Цикл
		НоваяСтрока = ПодтверждающиеДокументыОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	УправлениеНастройкойГОЗ(Форма);
	Форма.Модифицированность = Истина;
КонецПроцедуры

// Возвращает информацию о доступности платежей по 275-ФЗ
//
// Параметры:
//	Договор - СправочникСсылка.ДоговорыКредитовИДепозитов - Договор, данные по которому требуется получить.
//
// Возвращаемое значение:
//	Булево
//
Функция ДоступныПлатежиПо275ФЗ(СправочникОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(СправочникОбъект.БанковскийСчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтдельныйСчетГОЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчет, "ОтдельныйСчетГОЗ");
	
	Возврат ОтдельныйСчетГОЗ
		И (СправочникОбъект.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит
		Или СправочникОбъект.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм
			И СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке);
	
КонецФункции

Процедура УправлениеНастройкойГОЗ(Форма) Экспорт
	Форма.ПлатежиПо275ФЗ = ДоговорыКредитовИДепозитовЛокализация.ДоступныПлатежиПо275ФЗ(Форма.Объект);
	Форма.Элементы.ЛокализацияГруппаНастроитьГОЗ.Видимость = Форма.ПлатежиПо275ФЗ;	
КонецПроцедуры
//-- НЕ УТ

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные
//++ Локализация

//++ НЕ УТ

Процедура БанковскийСчетПриИзменении(Форма)
	УправлениеНастройкойГОЗ(Форма);
КонецПроцедуры
//-- НЕ УТ
Процедура ХарактерДоговораПриИзменении(Форма)
	//++ НЕ УТ
	УправлениеНастройкойГОЗ(Форма);
	//-- НЕ УТ
КонецПроцедуры

Процедура УстановитьВидимостьИдентификатораВалютногоКонтракта(Форма)

	Элементы = Форма.Элементы;
	Элементы.УникальныйНомерВалютногоКонтроля.Видимость =
		ИспользоватьУникальныйНомерВалютногоКонтроля(Форма.Объект, Форма.КонтрагентЮрФизЛицо);
	
КонецПроцедуры

//++ НЕ УТ	
Процедура УстановитьВидимостьВидаДоходаИностранногоКонтрагента(Форма)

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "СтранаРегистрации");
	Элементы.ВидДоходаИностранногоКонтрагента.Видимость = ЗначениеЗаполнено(СтранаРегистрацииКонтрагента)
		И СтранаРегистрацииКонтрагента <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
	УстановитьВидимостьПояснениеКВидуДохода(Форма);

	
КонецПроцедуры
	
Процедура УстановитьВидимостьПояснениеКВидуДохода(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	ВидимостьПояснениеКВидуДохода = (Объект.ВидДоходаИностранногоКонтрагента = 
		ПредопределенноеЗначение("Перечисление.ВидыДоходовИностранныхОрганизаций.ДоходыУслугиВзаимозависимым")
		ИЛИ Объект.ВидДоходаИностранногоКонтрагента = 
		ПредопределенноеЗначение("Перечисление.ВидыДоходовИностранныхОрганизаций.ДоходПриравненныйДивидендам"))
		И ТекущаяДатаСеанса() < Дата(2025,4,1)
		И Элементы.ВидДоходаИностранногоКонтрагента.Видимость; 
		
	Элементы.ПояснениеКВидуДохода.Видимость = ВидимостьПояснениеКВидуДохода;
	
КонецПроцедуры
//-- НЕ УТ	

Функция ИспользоватьУникальныйНомерВалютногоКонтроля(Объект, КонтрагентЮрФизЛицо)

	ХарактерыДоговоров = Новый Массив;
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм);
	ХарактерыДоговоров.Добавить(Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный);
	
	ТипыДоговоров = Новый Массив;
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговораКредитовИДепозитов.КредитВБанке);
	ТипыДоговоров.Добавить(Перечисления.ТипыДоговораКредитовИДепозитов.ВнешнийЗайм);
	
	Возврат ХарактерыДоговоров.Найти(Объект.ХарактерДоговора) <> Неопределено
		И ТипыДоговоров.Найти(Объект.ТипДоговора) <> Неопределено
		И ДенежныеСредстваКлиентСерверЛокализация.ПрименяетсяВалютныйКонтроль(КонтрагентЮрФизЛицо);

КонецФункции

//-- Локализация
#КонецОбласти

#КонецОбласти