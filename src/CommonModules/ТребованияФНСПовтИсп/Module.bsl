////////////////////////////////////////////////////////////////////////////////
//
// Серверные процедуры и функции регламентированных отчетов общего назначения 
// с кешируемым результатом на время сеанса.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция ДатаПлюсДниПоКалендарю(ДатаОт, КоличествоДней) Экспорт

	Результат = Новый Структура();
	Результат.Вставить("КалендарьЗаполнен", Ложь);
	Результат.Вставить("Дата", Дата(1,1,1));
	
	Попытка
		
		Календарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
		Дата = КалендарныеГрафики.ДатаПоКалендарю(
			Календарь, 
			ДатаОт, 
			КоличествоДней, 
			Истина);
			
		Результат.Дата = Дата;
		Результат.КалендарьЗаполнен = Истина;
	
	Исключение
		
		Дата = ТребованияФНС.ДатаПлюсДни(ДатаОт, КоличествоДней);
		Результат.Дата = Дата;
	
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаПлюсДни(ДатаОт, КоличествоДней, УчитыватьВыходные = Истина) Экспорт

	День = 24*60*60;
	Результат = ДатаОт;
	
	ДельтаТекущая = 1;
	Пока ДельтаТекущая <= КоличествоДней Цикл
		
		Результат = Результат + День;
		
		ДобавитьДень = 
			УчитыватьВыходные И НЕ ЭтоВыходной(Результат) 
			ИЛИ НЕ УчитыватьВыходные;
			
		Если ДобавитьДень Тогда
			ДельтаТекущая = ДельтаТекущая + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РазностьДатПоКалендарю(ДатаНачала, ДатаОкончания) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("КалендарьЗаполнен", Ложь);
	Результат.Вставить("Дельта", 0);
	
	ЭтоПросрочка = 	ДатаОкончания < ДатаНачала;
	Если ЭтоПросрочка Тогда
		
		Дельта = ТребованияФНСПовтИсп.РазностьДат(ДатаОкончания, ДатаНачала);
		Результат.Дельта = -Дельта;
		Возврат Результат;
		
	КонецЕсли;
	
	Календарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	Попытка
	
		Дельта = КалендарныеГрафики.РазностьДатПоКалендарю(
			Календарь, 
			ДатаНачала, 
			ДатаОкончания, 
			Истина);
			
		// Т.к. между одинаковыми датами выдает результат 1
		Дельта = Дельта - 1;
		
		// Т.к. если сейчас выходной, а конечная дата выпадает на Пн,
		// то показывает разность 0 дней, хотя фактически еще есть целый Пн
		Если Дельта = 0 
			И НачалоДня(ДатаНачала) < НачалоДня(ДатаОкончания)
			И ЭтоВыходной(ДатаНачала) Тогда
			Дельта = 1;
		КонецЕсли;
		
		Результат.Дельта = Дельта;
		Результат.КалендарьЗаполнен = Истина;
	
	Исключение
		Дельта = ТребованияФНС.РазностьДатПоВыходным(ДатаНачала, ДатаОкончания);
		Результат.Дельта = Дельта;
	КонецПопытки; 
		
	Возврат Результат;
	
КонецФункции

Функция РазностьДат(ДатаНачала, ДатаОкончания) Экспорт
	
	День = 24*60*60;
	КоличествоДней = Цел((ДатаОкончания - ДатаНачала) / День);
	
	Возврат КоличествоДней;
	
КонецФункции

Функция РазностьДатПоВыходным(ДатаНачала, ДатаОкончания) Экспорт
	
	День = 24*60*60;
	ТекущийДень = ДатаНачала;
	
	КоличествоДней = 0;
	Пока НачалоДня(ТекущийДень) < НачалоДня(ДатаОкончания) Цикл
		
		ТекущийДень = ТекущийДень + День;
		
		Если НЕ ЭтоВыходной(ТекущийДень) Тогда
			КоличествоДней = КоличествоДней + 1;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат КоличествоДней;
	
КонецФункции

Функция ЭтоВыходной(День) Экспорт

	Результат = 
		ДеньНедели(День) = 6
		ИЛИ ДеньНедели(День) = 7;
				
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКоличествоОтветовНаТребования(Ссылки, ТолькоОтправленные = Ложь, ВключаяНевозможностьПредоставленияДокументов = Истина) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ПолучитьКоличествоОтветовНаТребования(Ссылки, ТолькоОтправленные, ВключаяНевозможностьПредоставленияДокументов);
	
КонецФункции

Функция ПолучитьИдентификаторыПолучателя(ЦиклОбмена) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	СообщенияЦикла = КонтекстЭДОСервер.ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена,,Ложь);
	// Получаем транспортное сообщение, содержащее требование.
	// Оно обязательно должно быть, иначе бы мы сейчас не подтверждали его получение.
	СтрДокументНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ДокументНО));
	
	Если СтрДокументНО.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПервичноеТранспортноеСообщение = СтрДокументНО[0];
	ТранспортноеСообщение = ПервичноеТранспортноеСообщение.Ссылка;
	
	// Ищем файл с описанием передаваемого документа TR_INFSOOB
	// см. ПРИКАЗ от 9 ноября 2010 г. N ММВ-7-6/535@
	ИмяФайла = "TR_INFSOOB.xml";
	ВложенияПервичногоСообщения = КонтекстЭДОСервер.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, , ИмяФайла);
	Если ВложенияПервичногоСообщения.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить содержимое файлов сообщения %1. Перейдите по ссылке %2 и перерасшифруйте транспортное сообщение';
							|en = 'Не удалось получить содержимое файлов сообщения %1. Перейдите по ссылке %2 и перерасшифруйте транспортное сообщение'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Строка(ТранспортноеСообщение),
			ПолучитьНавигационнуюСсылку(ТранспортноеСообщение));
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	ВложениеПервичногоСообщения = ВложенияПервичногоСообщения[0];
	
	// записываем вложение во временный файл
	ФайлВложение = ПолучитьИмяВременногоФайла("xml");
	Попытка
		ВложениеПервичногоСообщения.Данные.Получить().Записать(ФайлВложение);
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить содержимое файла TR_INFSOOB.xml сообщения %1 (ссылка %2)';
							|en = 'Не удалось получить содержимое файла TR_INFSOOB.xml сообщения %1 (ссылка %2)'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Строка(ТранспортноеСообщение),
			ПолучитьНавигационнуюСсылку(ТранспортноеСообщение));
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоXML = КонтекстЭДОСервер.ЗагрузитьXMLВДеревоЗначений(ФайлВложение);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ФайлВложение);
	Если ДеревоXML = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить сформировать дерево из содержимого файла TR_INFSOOB.xml сообщения %1 (ссылка %2)';
							|en = 'Не удалось получить сформировать дерево из содержимого файла TR_INFSOOB.xml сообщения %1 (ссылка %2)'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Строка(ТранспортноеСообщение),
			ПолучитьНавигационнуюСсылку(ТранспортноеСообщение));
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура;
	
	Узел = ДеревоXML.Строки.Найти("КодНО", "Имя", Истина);
	Если Узел = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось найти узел КодНО в файле TR_INFSOOB.xml сообщения %1 (ссылка %2)';
							|en = 'Не удалось найти узел КодНО в файле TR_INFSOOB.xml сообщения %1 (ссылка %2)'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Строка(ТранспортноеСообщение),
			ПолучитьНавигационнуюСсылку(ТранспортноеСообщение));
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		
		Возврат Неопределено;
	Иначе
		Результат.Вставить("ПромежуточныйНалоговыйОрган", Узел.Значение);
	КонецЕсли;
	
	Узел = ДеревоXML.Строки.Найти("КодНО2", "Имя", Истина);
	Если Узел = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось найти узел КодНО2 в файле TR_INFSOOB.xml сообщения %1 (ссылка %2)';
							|en = 'Не удалось найти узел КодНО2 в файле TR_INFSOOB.xml сообщения %1 (ссылка %2)'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Строка(ТранспортноеСообщение),
			ПолучитьНавигационнуюСсылку(ТранспортноеСообщение));
		
		ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
		
		Возврат Неопределено;
	Иначе
		Результат.Вставить("КонечныйНалоговыйОрган", Узел.Значение);
	КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

#КонецОбласти