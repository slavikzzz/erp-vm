////////////////////////////////////////////////////////////////////////////////
// Подсистема "Переработка на стороне".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ГруппыЗатрат

// Текст проверки не заполнена группы затрат ТЧДокумента.
// 
// Параметры:
//  ИмяТЧ - Строка
//  ИмяТаблицыИмяТЧ - Строка
//  СинонимТЧИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Строка - Текст проверки не заполнена группы затрат ТЧДокумента
Функция ТекстПроверкиНеЗаполненаГруппыЗатратТЧДокумента(ИмяТЧ, ИмяТаблицыИмяТЧ, СинонимТЧИмяТЧ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяТаблицыИмяТЧ            КАК ИмяТаблицы,
	|	&СинонимТЧИмяТЧ             КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки  КАК НомерСтроки,
	|	0                           КАК НомерГруппыЗатрат,
	|	""НеЗаполненаГруппаЗатрат"" КАК ТипПроверки
	|ИЗ
	|	ИмяТЧ КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.НомерГруппыЗатрат = 0
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыИмяТЧ", ИмяТаблицыИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СинонимТЧИмяТЧ",  СинонимТЧИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТЧ",           ИмяТЧ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст проверки не соответствует заказу.
// 
// Параметры:
//  ИмяТЧ - Строка
//  ИмяТаблицыИмяТЧ - Строка
//  СинонимТЧИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Строка - Текст проверки не соответствует заказу
Функция ТекстПроверкиНеСоответствуетЗаказу(ИмяТЧ, ИмяТаблицыИмяТЧ, СинонимТЧИмяТЧ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяТаблицыИмяТЧ                 КАК ИмяТаблицы,
	|	&СинонимТЧИмяТЧ                  КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки       КАК НомерСтроки,
	|	ТабличнаяЧасть.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеСоответствуетЗаказу""        КАК ТипПроверки
	|ИЗ
	|	ИмяТЧ КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатратОтсутствующиеВЗаказе КАК НомераГруппЗатрат
	|	ПО НомераГруппЗатрат.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|ГДЕ
	|	НомераГруппЗатрат.НомерГруппыЗатрат ЕСТЬ НЕ NULL
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыИмяТЧ", ИмяТаблицыИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СинонимТЧИмяТЧ",  СинонимТЧИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТЧ",           ИмяТЧ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст проверки несуществующая группа затрат ТЧДокумента.
// 
// Параметры:
//  ИмяТЧ - Строка
//  ИмяТаблицыИмяТЧ - Строка
//  СинонимТЧИмяТЧ - Строка
// 
// Возвращаемое значение:
//  Строка - Текст проверки несуществующая группа затрат ТЧДокумента
Функция ТекстПроверкиНесуществующаяГруппаЗатратТЧДокумента(ИмяТЧ, ИмяТаблицыИмяТЧ, СинонимТЧИмяТЧ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИмяТаблицыИмяТЧ                 КАК ИмяТаблицы,
	|	&СинонимТЧИмяТЧ                  КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки       КАК НомерСтроки,
	|	ТабличнаяЧасть.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""УказанаНесуществующая""        КАК ТипПроверки
	|ИЗ
	|	ИмяТЧ КАК ТабличнаяЧасть
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ НомераГруппЗатрат КАК НомераГруппЗатрат
	|	ПО НомераГруппЗатрат.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|ГДЕ
	|	НЕ ТабличнаяЧасть.НомерГруппыЗатрат = 0
	|	И НомераГруппЗатрат.НомерГруппыЗатрат ЕСТЬ NULL
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыИмяТЧ", ИмяТаблицыИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СинонимТЧИмяТЧ",  СинонимТЧИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТЧ",           ИмяТЧ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст проверки не указано назначение.
// 
// Параметры:
//  Отбор - Соответствие - описание отбора
// 
// Возвращаемое значение:
//  Строка - Текст проверки не указано назначение
//
Функция ТекстПроверкиНеУказаноНазначение(Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИмяТаблицыВыходныеИзделия       КАК ИмяТаблицы,
	|	&СинонимТЧВыходныеИзделия        КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки       КАК НомерСтроки,
	|	ТабличнаяЧасть.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеУказаноНазначение""          КАК ТипПроверки
	|ИЗ
	|	ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	&ГруппировкаЗатрат В(
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукцииИНазначениям),
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациямИНазначениям))
	|	И ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
	|	И &ДопОтбор
	|";
	
	ТекстОтбора = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопОтбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА

// Текст проверки не указаны изделия.
// 
// Параметры:
//  Отбор - Соответствие - описание отбора
// 
// Возвращаемое значение:
//  Строка - Текст проверки не указаны изделия
Функция ТекстПроверкиНеУказаныИзделия(Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИмяТаблицыВыходныеИзделия          КАК ИмяТаблицы,
	|	&СинонимТЧВыходныеИзделия           КАК СинонимТЧ,
	|	0                                   КАК НомерСтроки,
	|	НомераГруппЗатрат.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеУказаныИзделия""                КАК ТипПроверки
	|ИЗ
	|	НомераГруппЗатрат КАК НомераГруппЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВыходныеИзделия КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.НомерГруппыЗатрат = НомераГруппЗатрат.НомерГруппыЗатрат
	|ГДЕ
	|	&ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|	И ТабличнаяЧасть.НомерГруппыЗатрат ЕСТЬ NULL
	|	И ВЫРАЗИТЬ(НомераГруппЗатрат.ЭтапПроизводства КАК Документ.ЭтапПроизводства2_2).НомерСледующегоЭтапа = 0
	|	И &ДопОтбор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ИмяТаблицыПобочныеИзделия          КАК ИмяТаблицы,
	|	&СинонимТЧПобочныеИзделия           КАК СинонимТЧ,
	|	0                                   КАК НомерСтроки,
	|	НомераГруппЗатрат.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеУказаныИзделия""                КАК ТипПроверки
	|ИЗ
	|	НомераГруппЗатрат КАК НомераГруппЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПобочныеИзделия КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.НомерГруппыЗатрат = НомераГруппЗатрат.НомерГруппыЗатрат
	|ГДЕ
	|	&ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
	|	И ТабличнаяЧасть.НомерГруппыЗатрат ЕСТЬ NULL
	|	И НЕ ВЫРАЗИТЬ(НомераГруппЗатрат.ЭтапПроизводства КАК Документ.ЭтапПроизводства2_2).НомерСледующегоЭтапа = 0
	|	И &ДопОтбор
	|";
	
	ТекстОтбора = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопОтбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТКА

// Текст проверки не указаны материалы.
// 
// Параметры:
//  ИмяТЧ - Строка
//  ИмяТаблицыИмяТЧ - Строка
//  СинонимТЧИмяТЧ - Строка
//  Отбор - Соответствие - описание отбора
// 
// Возвращаемое значение:
//  Строка - Текст проверки не указаны материалы
Функция ТекстПроверкиНеУказаныМатериалы(ИмяТЧ, ИмяТаблицыИмяТЧ, СинонимТЧИмяТЧ, Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИмяТаблицыИмяТЧ                    КАК ИмяТаблицы,
	|	&СинонимТЧИмяТЧ                     КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки          КАК НомерСтроки,
	|	НомераГруппЗатрат.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеУказаныМатериалы""              КАК ТипПроверки
	|ИЗ
	|	НомераГруппЗатрат КАК НомераГруппЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТЧ КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.НомерГруппыЗатрат = НомераГруппЗатрат.НомерГруппыЗатрат
	|ГДЕ
	|	ТабличнаяЧасть.НомерГруппыЗатрат ЕСТЬ NULL
	|	И &ДопОтбор
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыИмяТЧ", ИмяТаблицыИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СинонимТЧИмяТЧ",  СинонимТЧИмяТЧ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТЧ",           ИмяТЧ);
	
	ТекстОтбора = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопОтбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст проверки не указаны услуги.
// 
// Параметры:
//  Отбор - Неопределено - Отбор
// 
// Возвращаемое значение:
//  Строка - Текст проверки не указаны услуги
Функция ТекстПроверкиНеУказаныУслуги(Отбор = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ИмяТаблицыУслуги                   КАК ИмяТаблицы,
	|	&СинонимТЧУслуги                    КАК СинонимТЧ,
	|	ТабличнаяЧасть.НомерСтроки          КАК НомерСтроки,
	|	НомераГруппЗатрат.НомерГруппыЗатрат КАК НомерГруппыЗатрат,
	|	""НеУказаныУслуги""                 КАК ТипПроверки
	|ИЗ
	|	НомераГруппЗатрат КАК НомераГруппЗатрат
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Услуги КАК ТабличнаяЧасть
	|	ПО ТабличнаяЧасть.НомерГруппыЗатрат = НомераГруппЗатрат.НомерГруппыЗатрат
	|ГДЕ
	|	ТабличнаяЧасть.НомерГруппыЗатрат ЕСТЬ NULL
	|	И &УслугиПоПереработке = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияУслугДокументовПереработки.УказываютсяВЗаказеОтчете)
	|	И &ДопОтбор
	|";
	
	ТекстОтбора = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопОтбор", ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СообщитьОшибкиЗаполненияГруппЗатрат(Выборка, ПредставлениеГруппЗатрат, Отказ) Экспорт
	
	ШаблонНеСоответствуетЗаказу     = НСтр("ru = 'В строке ""%1"" списка ""%2"" указана группа затрат, отсутствующая в заказе переработчику.';
											|en = 'The ""%1"" line of the ""%2"" list contains the cost group missing in ""Subcontracting purchase order"".'");
	ШаблонНеЗаполненаГруппа         = НСтр("ru = 'Не заполнена группа затрат в строке ""%1"" списка ""%2"".';
											|en = 'Cost group in the ""%1"" line of the ""%2"" list is not filled in.'");
	ШаблонУказанаНесуществующая     = НСтр("ru = 'В строке ""%1"" списка ""%2"" указана группа затрат, по которой отсутствует выпуск изделий.';
											|en = 'The ""%1"" line of the ""%2"" list contains the cost group for which there is no finished product release.'");
	//++ НЕ УТКА
	ШаблонНеУказаныИзделия          = НСтр("ru = 'Для группы затрат ""%1"" не указан выпуск изделий.';
											|en = 'Finished product release is not specified for the ""%1"" cost group.'");
	ШаблонНеправильныйТипСтоимости  = НСтр("ru = 'Выпуск изделий по рассчитываемой стоимости недоступен, т.к. этап, к которому относится изделие, не является выпускающим.';
											|en = 'Finished product release at the calculated cost is unavailable as the stage of the product is not a release one.'");
	//-- НЕ УТКА
	ШаблонНеУказаноНазначение       = НСтр("ru = 'Необходимо указать назначение в строке ""%1"" списка ""%2""';
											|en = 'Specify the assignment in the ""%1"" line of the ""%2"" list'");
	ШаблонНеУказаныМатериалы        = НСтр("ru = 'Для группы затрат ""%1"" не указаны материалы и работы.';
											|en = 'Materials and works are not specified for the ""%1"" cost group.'");
	ШаблонНеУказаныУслуги           = НСтр("ru = 'Для группы затрат ""%1"" не указаны услуги переработчика.';
											|en = 'Subcontractor services are not specified for the ""%1"" cost group.'");
	ШаблонНесколькоИмпортныхИзделий = НСтр("ru = 'Для группы затрат ""%1"" указано несколько импортных изделий.';
											|en = 'Several imported finished products are specified for the ""%1"" cost group.'");
	ШаблонНеУказанИмпортныйМатериал = НСтр("ru = 'Для группы затрат ""%1"" не указан основной импортный материал.';
											|en = 'Main imported material is not specified for the ""%1"" cost group.'");
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтроки = Формат(Выборка.НомерСтроки, "ЧГ=");
		
		Если Выборка.ТипПроверки = "НеСоответствуетЗаказу" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеСоответствуетЗаказу, НомерСтроки, Выборка.СинонимТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Поле,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеЗаполненаГруппаЗатрат" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненаГруппа, НомерСтроки, Выборка.СинонимТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Поле,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "УказанаНесуществующая" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонУказанаНесуществующая, НомерСтроки, Выборка.СинонимТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Поле,
				"Объект");
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеУказаноНазначение" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеУказаноНазначение, НомерСтроки, Выборка.СинонимТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "Назначение");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Поле,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеУказаныМатериалы" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеУказаныМатериалы, ПредставлениеГруппЗатрат[Выборка.НомерГруппыЗатрат]);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Выборка.ИмяТаблицы,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеУказаныУслуги" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеУказаныУслуги, ПредставлениеГруппЗатрат[Выборка.НомерГруппыЗатрат]);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Выборка.ИмяТаблицы,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		//++ НЕ УТКА
		Если Выборка.ТипПроверки = "НеУказаныИзделия" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеУказаныИзделия, ПредставлениеГруппЗатрат[Выборка.НомерГруппыЗатрат]);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Выборка.ИмяТаблицы,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеправильныйТипСтоимости" Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеправильныйТипСтоимости, НомерСтроки, Выборка.СинонимТЧ);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТаблицы, Выборка.НомерСтроки, "ГруппаЗатрат");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Поле,
				"Объект",
				Отказ);
			
		КонецЕсли;
		//-- НЕ УТКА
		
		Если Выборка.ТипПроверки = "НесколькоИмпортныхИзделий" Тогда
			
			ТекстСообщения =
				СтрШаблон(ШаблонНесколькоИмпортныхИзделий, ПредставлениеГруппЗатрат[Выборка.НомерГруппыЗатрат]);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Выборка.ИмяТаблицы,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ТипПроверки = "НеУказанИмпортныйМатериал" Тогда
			
			ТекстСообщения =
				СтрШаблон(ШаблонНеУказанИмпортныйМатериал, ПредставлениеГруппЗатрат[Выборка.НомерГруппыЗатрат]);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				Выборка.ИмяТаблицы,
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		ПереработкаНаСторонеЛокализация.СообщитьОшибкиЗаполненияГруппЗатрат(Выборка, ПредставлениеГруппЗатрат, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ИсправлениеОшибокВИсходныхДанных

Процедура ПроверкаНаПобочныйВыпускБезОсновногоВОтчетеПереработчика25(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Регистратор,
	|	ДанныеДокумента.Организация КАК Организация
	|
	|ПОМЕСТИТЬ ПобочныйВыпускБезОсновногоВОтчетеПереработчика25
	|ИЗ 
	|	Документ.ОтчетПереработчика2_5 КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика2_5.ПобочныеИзделия КАК ОтчетПереработчика2_5ПобочныеИзделия
	|	ПО ДанныеДокумента.Ссылка = ОтчетПереработчика2_5ПобочныеИзделия.Ссылка
	|		И ДанныеДокумента.Проведен
	|		И ДанныеДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ДанныеДокумента.Организация В (&МассивОрганизаций)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ОтчетПереработчика2_5ВыходныеИзделия
	|	ПО (ОтчетПереработчика2_5ПобочныеИзделия.Ссылка = ОтчетПереработчика2_5ВыходныеИзделия.Ссылка)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику2_5 КАК ДокументЗаказПереработчику
	|	ПО ДанныеДокумента.ЗаказПереработчику = ДокументЗаказПереработчику.Ссылка
	|
	//++ НЕ УТКА
	
	// Распоряжение может быть этапом, а может быт заказом на производство.
	// Если это этап, то проверка должна срабатывать только если это выпускающий этап.
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|	ПО ЭтапПроизводства2_2.Ссылка = ДокументЗаказПереработчику.Распоряжение
	//-- НЕ УТКА
	|
	|ГДЕ
	|	ОтчетПереработчика2_5ВыходныеИзделия.Ссылка ЕСТЬ NULL
	//++ НЕ УТКА
	|	И (ЭтапПроизводства2_2.Ссылка ЕСТЬ NULL ИЛИ ЭтапПроизводства2_2.НомерСледующегоЭтапа = 0)
	//-- НЕ УТКА
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",		НСтр("ru = 'Организация';
													|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор",		НСтр("ru = 'Документ';
													|en = 'Document'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ПобочныйВыпускБезОсновногоВОтчетеПереработчика25",
		НСтр("ru = 'Обнаружены отчеты переработчика с выпуском по фиксированной стоимости без выпуска по расчетной в организации ""%1"" за период %2';
			|en = 'Subcontracting services notifications received with release at the fixed cost without release at the estimated cost in the ""%1"" company for the %2 period are found'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Регистратор");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,,
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
КонецПроцедуры

//++ Устарело_Переработка24
Процедура ПроверкаЦеныВозвратныхОтходовВОтчетеПереработчика(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОтчетПереработчика.Организация 	КАК Организация,
	|	ОтчетПереработчика.Ссылка 		КАК Регистратор,
	|	СУММА(1) 						КАК КоличествоСтрок
	|ПОМЕСТИТЬ ОтчетыПереработчикаБезЦенВозвратныхОтходов
	|ИЗ
	|	Документ.ОтчетПереработчика.ВозвратныеОтходы КАК ТаблицаПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика КАК ОтчетПереработчика
	|		ПО ТаблицаПродукции.Ссылка = ОтчетПереработчика.Ссылка
	|ГДЕ
	|	&ПартионныйУчетВерсии22
	|	И ОтчетПереработчика.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетПереработчика.Организация В(&МассивОрганизаций)
	|	И ОтчетПереработчика.Проведен
	|	И ТаблицаПродукции.Цена = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетПереработчика.Организация,
	|	ОтчетПереработчика.Ссылка";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация",		НСтр("ru = 'Организация';
													|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор",		НСтр("ru = 'Документ';
													|en = 'Document'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоСтрок", НСтр("ru = 'Количество строк с ошибками';
												|en = 'Quantity of lines with errors'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтчетыПереработчикаБезЦенВозвратныхОтходов",
		НСтр("ru = 'Обнаружены незаполненные цены возвратных отходов в документах организации ""%1"" за период %2';
			|en = 'Non-populated prices of recyclable waste are detected in documents of the ""%1"" company for %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Регистратор");
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
	 	ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаОстатковПереработкиНаСтороне2_4

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ОстаткиПереработкиНаСтороне2_4(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока =  ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(
		ТаблицаЭтапов,
		ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковПередачиВПереработку2_4);
	
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПереработкаНаСтороне.Оформление_ОстаткиПереработкиНаСтороне2_4");
	НоваяСтрока.ДействиеИспользование =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПереработкаНаСтороне.Использование_ОстаткиПереработкиНаСтороне2_4");
	НоваяСтрока.ДействиеВыполнить  =  ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ПанельАдминистрированияКА.Формы.Производство.ПолноеИмя());
		
КонецПроцедуры

// Обработчики этапа
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_ОстаткиПереработкиНаСтороне2_4(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваров.ВидЗапасов.Организация     КАК Организация,
	|	&ОстаткиПереданныхТоваров                 КАК ТипОстатка,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры КАК Аналитика,
	|	ОстаткиТоваров.КоличествоОстаток          КАК Остаток
	|ПОМЕСТИТЬ ВТНеОформленныеОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыПереданныеПереработчику.Остатки КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоНаСтороне
	|	И ОстаткиТоваров.ВидЗапасов.Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиТоваров.Организация                КАК Организация,
	|	&ОстаткиПолученныхТоваров                 КАК ТипОстатка,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры КАК Аналитика,
	|	ОстаткиТоваров.КоличествоОстаток          КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(, Организация В (&МассивОрганизаций)) КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоНаСтороне
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказКлиента КАК Документ.ЗаказПереработчику).Организация КАК Организация,
	|	&ОстаткиЗаказовМатериалов      КАК ТипОстатка,
	|	ОстаткиТоваров.ЗаказКлиента    КАК Аналитика,
	|	ОстаткиТоваров.ЗаказаноОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказПереработчику)) КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоНаСтороне
	|	И ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказКлиента КАК Документ.ЗаказПереработчику).Организация В (&МассивОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказПоставщику КАК Документ.ЗаказПереработчику).Организация КАК Организация,
	|	&ОстаткиЗаказовПродукции       КАК ТипОстатка,
	|	ОстаткиТоваров.ЗаказПоставщику КАК Аналитика,
	|	ОстаткиТоваров.ЗаказаноОстаток КАК Остаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказПоставщику) = ТИП(Документ.ЗаказПереработчику)) КАК ОстаткиТоваров
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|	ПО ИСТИНА
	|
	|ГДЕ
	|	НЕ Константы.ИспользоватьПроизводствоНаСтороне
	|	И ВЫРАЗИТЬ(ОстаткиТоваров.ЗаказПоставщику КАК Документ.ЗаказПереработчику).Организация В (&МассивОрганизаций)
	|";
	
	Запрос.УстановитьПараметр("ОстаткиПереданныхТоваров", НСтр("ru = 'Остаток переданных товаров';
																|en = 'Transferred stock balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиПолученныхТоваров", НСтр("ru = 'Остаток полученных товаров';
																|en = 'Received stock balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиЗаказовМатериалов", НСтр("ru = 'Остаток заказанных материалов';
																|en = 'Ordered material balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Запрос.УстановитьПараметр("ОстаткиЗаказовПродукции",  НСтр("ru = 'Остаток заказанной продукции';
																|en = 'Ordered manufactured product balance'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ВТНеОформленныеОстатки = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков передачи в переработку (версии 2.4).';
				|en = 'No balance of subcontracting services received (version 2.4).'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Оформляет этап закрытия месяца.
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Оформление_ОстаткиПереработкиНаСтороне2_4(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование   = НСтр("ru = 'Оформление остатков передачи в переработку (версии 2.4)';
															|en = 'Register subcontracting balance (version 2.4)'");
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Включить';
															|en = 'Enable'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.
// 
// Параметры:
// 	ТаблицаПроверок - см. АудитСостоянияСистемы.ТаблицаПроверокСостоянияСистемы
//
Процедура ОписаниеПроверок_ОстаткиПереработкиНаСтороне2_4(ТаблицаПроверок) Экспорт
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(
		ТаблицаПроверок,
		"ОформлениеОстатковПередачиВПереработку2_4",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОстатковПередачиВПереработку2_4,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ПереработкаНаСтороне.ПроверкаОстаткиПереработкиНаСтороне2_4");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформлены остатки передачи в переработку (версии 2.4)';
			|en = 'Balance of subcontracting services received is not registered (version 2.4)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'При отключенной опции ""Производство на стороне (версии 2.4)"" не должно быть остатков по передаче в переработку (версии 2.4).';
			|en = 'There must be no balance of subcontracting (version 2.4) if the ""Production by third party (version 2.4)"" option is disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

// Регистрация ошибок.
// 
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаОстаткиПереработкиНаСтороне2_4(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ТипОстатка",  НСтр("ru = 'Тип остатка';
											|en = 'Balance type'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Аналитика",   НСтр("ru = 'Аналитика';
											|en = 'Dimension'",   ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Остаток",     НСтр("ru = 'Остаток';
											|en = 'Вalance'",     ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТНеОформленныеОстатки",
		НСтр("ru = 'Обнаружены остатки передачи в переработку (версии 2.4) по организации ""%1"" на конец периода %2';
			|en = 'Balance of subcontracting (version 2.4) of the ""%1"" company for the %2 period end is detected'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры
//-- Устарело_Переработка24

#КонецОбласти

#Область ПроверкаОстатковКОформлениюОтчетовПереработчиков

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_ОстаткиКОформлениюОтчетовПереработчиков(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока =  ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(
		ТаблицаЭтапов,
		ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПереработчиков);
	
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ДействиеОформление =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПереработкаНаСтороне.Оформление_ОстаткиКОформлениюОтчетовПереработчиков");
	НоваяСтрока.ДействиеИспользование =  ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ПереработкаНаСтороне.Использование_ОстаткиКОформлениюОтчетовПереработчиков");
	
	НоваяСтрока.ДействиеВыполнить  =  ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЖурналДокументовПередачиВПереработку2_5.Формы.КОформлениюНакладных.ПолноеИмя(), Истина);
	НоваяСтрока.ДействиеВыполнить.ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаОтчеты");
	
КонецПроцедуры

// Обработчики этапа
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Использование_ОстаткиКОформлениюОтчетовПереработчиков(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваров.Организация                КАК Организация,
	|	ОстаткиТоваров.АналитикаУчетаНоменклатуры КАК Аналитика,
	|	-ОстаткиТоваров.КоличествоОстаток         КАК Остаток
	|ПОМЕСТИТЬ ОстаткиКОформлениюОтчетовПереработчиков
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК ОстаткиТоваров
	|
	|ГДЕ
	|	ОстаткиТоваров.КоличествоОстаток < 0
	|	И ОстаткиТоваров.ВидЗапасов.ТипЗапасов В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияПереработчика),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПолуфабрикатДавальца))
	|	И (ЕСТЬNULL(ОстаткиТоваров.АналитикаУчетаНоменклатуры.Договор.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)) =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком2_5)
	|		ИЛИ ЕСТЬNULL(ОстаткиТоваров.АналитикаУчетаНоменклатуры.Договор.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)) =
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПереработчиком2_5_ЕАЭС))
	|";
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОстаткиКОформлениюОтчетовПереработчиков = 0 Тогда

		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет остатков к оформлению отчетов переработчиков.';
				|en = 'There is no balance to register ""Subcontracting services notifications received"".'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

// Оформляет этап закрытия месяца.
// 
// Параметры:
// 	ПараметрыОбработчика - см. ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыОбработчикаЭтапаЗакрытияМесяцаДляПроверки
//
Процедура Оформление_ОстаткиКОформлениюОтчетовПереработчиков(ПараметрыОбработчика) Экспорт
	
	ПараметрыОбработчика.ДанныеЭтапа.ТекстВыполнить = НСтр("ru = 'Оформить';
															|en = 'Register'");
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

// Проверки состояния системы, относящиеся к этапу.
// 
// Параметры:
// 	ТаблицаПроверок - см. АудитСостоянияСистемы.ТаблицаПроверокСостоянияСистемы
//
Процедура ОписаниеПроверок_ОстаткиКОформлениюОтчетовПереработчиков(ТаблицаПроверок) Экспорт
	
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(
		ТаблицаПроверок,
		"ОформлениеОтчетовПереработчиков",
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеОтчетовПереработчиков,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"ПереработкаНаСтороне.ПроверкаОстаткиКОформлениюОтчетовПереработчиков");
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Не оформлены отчеты переработчиков.';
			|en = '""Subcontracting services notifications received"" are not registered.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'На все поступившие от переработчика изделия должны быть оформлены отчеты переработчика.';
			|en = '""Subcontracting services notification received"" must be registered for all products received from the subcontractor.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
КонецПроцедуры

// Регистрация ошибок.
// 
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаОстаткиКОформлениюОтчетовПереработчиков(ПараметрыПроверки) Экспорт
	
	Если НЕ ЗакрытиеМесяцаСервер.ПроверкаВыполняетсяМеханизмомЗакрытияМесяца(ПараметрыПроверки) Тогда
		Возврат;
	КонецЕсли;
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", НСтр("ru = 'Организация';
											|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Аналитика",   НСтр("ru = 'Аналитика';
											|en = 'Dimension'",   ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Остаток",     НСтр("ru = 'Остаток';
											|en = 'Balance'",     ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОстаткиКОформлениюОтчетовПереработчиков",
		НСтр("ru = 'Обнаружены остатки к оформлению отчетов переработчиков по организации ""%1"" на конец периода %2';
			|en = 'Balance to register ""Subcontracting services notifications received"" for the ""%1"" company at the end of the %2 period are found'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//++ Устарело_Переработка24
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.УслугиПереработчиковКОформлению);
		//-- Устарело_Переработка24
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),	
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам переработки на стороне.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//++ Устарело_Переработка24
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УслугиПереработчиковКОформлению");
	//-- Устарело_Переработка24
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию договора.
// 
// Параметры:
//  ЭтоПроизводствоВЕАЭС - Булево - признак производства у переработчика в странах ЕАЭС.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперацияДоговора(ЭтоПроизводствоВЕАЭС = Ложь) Экспорт
	
	Если ЭтоПроизводствоВЕАЭС Тогда 
		Возврат Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчикаВСтранахЕАЭС2_5;
	Иначе
		Возврат Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с поставщиками
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСПоставщикамиПрименимы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область Форма

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;

	ЗакупкиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Договор);
	
КонецПроцедуры

//Получает договор по умолчанию.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - 
//
Функция ПолучитьДоговорПоУмолчанию(Объект) Экспорт
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Партнер",     Объект.Партнер);
	ПараметрыОбъекта.Вставить("Договор",     Объект.Договор);
	ПараметрыОбъекта.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация", Объект.Организация);
	ПараметрыОбъекта.Вставить("Соглашение",  Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Возврат ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ПараметрыОбъекта, ХозяйственнаяОперацияДоговора());
	
КонецФункции

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Партнер
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
			
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Контрагент
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ЗаголовокПоПартнеру", НСтр("ru = 'По переработчику';
																					|en = 'By subcontractor'")));
			
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	//Договор
	МассивПараметровВыбора       = Новый Массив;
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
			
	МассивПараметровВыбора.Добавить(
			Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ХозяйственнаяОперацияДоговора()));
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВвозТоваровИзТаможенногоСоюза") Тогда
		МассивПараметровВыбора.Добавить(
			Новый ПараметрВыбора("ПереработкаВСтранахЕАЭС", Истина));
	КонецЕсли;

	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	

	МассивСвязейПараметровВыбора = Новый Массив;

	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));

	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));

	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));

	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Соглашение", "Объект.Соглашение", РежимИзмененияСвязанногоЗначения.НеИзменять));

	Элементы.Договор.ПараметрыВыбора       = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	// Направление деятельности
	Если Не Элементы.Найти("НаправлениеДеятельности") = Неопределено Тогда
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчетЗатрат", Истина));
		
		Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Выполняется проверка отчета переработчика и заказа переработчику
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаказПереработчику2_5, ДокументОбъект.ОтчетПереработчика2_5 - проверяемый документ
// 	Отказ - Булево - флаг отказа
//
Процедура ПроверитьСоответствиеОтчетовПереработчикаЗаказуПереработчику(Объект, Отказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаИсточник.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.Организация = &Организация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК Организация,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.Подразделение = &Подразделение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК Подразделение,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.Партнер = &Партнер
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК Партнер,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.Контрагент = &Контрагент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.Договор = &Договор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК Договор,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.УслугиПоПереработке = &УслугиПоПереработке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК УслугиПоПереработке,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.ГруппировкаЗатрат = &ГруппировкаЗатрат
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК ГруппировкаЗатрат,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ ТаблицаИсточник.НаправлениеДеятельности = &НаправлениеДеятельности
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ)                 КАК НаправлениеДеятельности
	|ИЗ
	|	&ТаблицаИсточник КАК ТаблицаИсточник
	|
	|ГДЕ
	|	ТаблицаИсточник.Проведен
	|	И НЕ &ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику2_5.ПустаяСсылка)
	|	И &ОтборПоОснованию
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИсточник.Ссылка
	|";
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетПереработчика2_5") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточник", "Документ.ЗаказПереработчику2_5");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОснованию", "ТаблицаИсточник.Ссылка = &ЗаказПереработчику");
		
		Запрос.УстановитьПараметр("ЗаказПереработчику", Объект.ЗаказПереработчику);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаИсточник", "Документ.ОтчетПереработчика2_5");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОснованию", "ТаблицаИсточник.ЗаказПереработчику = &ЗаказПереработчику");
		
		Запрос.УстановитьПараметр("ЗаказПереработчику", Объект.Ссылка);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение",           Объект.Подразделение);
	Запрос.УстановитьПараметр("Партнер",                 Объект.Партнер);
	Запрос.УстановитьПараметр("Контрагент",              Объект.Контрагент);
	Запрос.УстановитьПараметр("Договор",                 Объект.Договор);
	Запрос.УстановитьПараметр("УслугиПоПереработке",     Объект.УслугиПоПереработке);
	Запрос.УстановитьПараметр("ГруппировкаЗатрат",       Объект.ГруппировкаЗатрат);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Объект.НаправлениеДеятельности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Шаблон = НСтр("ru = 'В ""%1"" значение поля ""%2"" отличается от указанного в заказе.';
						|en = 'The ""%2"" field value in ""%1"" is different from the value specified in the order.'");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетПереработчика2_5") Тогда
			ОтчетПереработчика = Объект.Ссылка;
		Иначе
			ОтчетПереработчика = Выборка.Ссылка;
		КонецЕсли;
		
		Если Выборка.Организация Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Организация';
																		|en = 'Company'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Организация",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ГруппировкаЗатрат Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Группировка затрат';
																		|en = 'Group costs'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"ГруппировкаЗатрат",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.Подразделение Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Подразделение';
																		|en = 'Business unit'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Подразделение",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.Партнер Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Партнер';
																		|en = 'Partner'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Партнер",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.Контрагент Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Контрагент';
																		|en = 'Counterparty'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Контрагент",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.Договор Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Договор';
																		|en = 'Contract'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Договор",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.УслугиПоПереработке Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Услуги по переработке';
																		|en = 'Subcontracting services'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"УслугиПоПереработке",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.НаправлениеДеятельности Тогда
			
			ТекстСообщения = СтрШаблон(Шаблон, ОтчетПереработчика, НСтр("ru = 'Направление деятельности';
																		|en = 'Line of business'"));
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"НаправлениеДеятельности",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПредставлениеГруппыЗатрат(Знач ПараметрыГруппыЗатрат, Знач ГруппировкаЗатрат, Знач Продукция, Знач ИмяПоляГруппаЗатрат) Экспорт
	
	ПредставлениеГруппы = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции
		ИЛИ ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям Тогда
		
		СтруктураПоиска = Новый Структура(ИмяПоляГруппаЗатрат, ПараметрыГруппыЗатрат[ИмяПоляГруппаЗатрат]);
		СписокСтрок = Продукция.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			Возврат "";
		КонецЕсли;
		СтрокаПродукция = СписокСтрок[0];
		Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции Тогда
			ПредставлениеГруппы = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				Строка(СтрокаПродукция.Номенклатура),
				Строка(СтрокаПродукция.Характеристика),,,
				Строка(СтрокаПродукция.Назначение));
			
		Иначе
			ПредставлениеГруппы = Строка(СтрокаПродукция.Спецификация);
		КонецЕсли;
		
		//++ НЕ УТКА	
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыГруппыЗатрат.Распоряжение) Тогда
			
			//++ Устарело_Производство21
			Если ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
				ШаблонТекста = НСтр("ru = 'Заказ № %1 от %2 (%3)';
									|en = 'Order No. %1 from %2 (%3)'");
			Иначе
			//-- Устарело_Производство21	
				ШаблонТекста = НСтр("ru = 'Этап № %1 от %2 (%3)';
									|en = 'Stage No. %1 dated %2 (%3)'");
			//++ Устарело_Производство21	
			КонецЕсли;
			//-- Устарело_Производство21
			
			Если ЗначениеЗаполнено(ПараметрыГруппыЗатрат.Спецификация) Тогда
				Спецификация = ПараметрыГруппыЗатрат.Спецификация;
			Иначе
				Спецификация = НСтр("ru = 'без спецификации';
									|en = 'without bill of materials'");
			КонецЕсли;
			
			РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыГруппыЗатрат.Распоряжение, "Номер,Дата");
			ПредставлениеГруппы = СтрШаблон(ШаблонТекста,
											ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыРаспоряжения.Номер, Ложь, Истина),
											Формат(РеквизитыРаспоряжения.Дата, "ДЛФ=D"),
											Спецификация);
			
		КонецЕсли;
		
		//-- НЕ УТКА
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПредставлениеГруппы;

КонецФункции 

// Проверяет возможность закрытия заказа
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказПереработчику, ДокументОбъект.ЗаказПереработчику2_5 - контролируемый документ.
//  Отказ	 - Булево							 - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(Объект, Отказ) Экспорт
	
	Если Объект.Статус <> Перечисления.СтатусыЗаказовПереработчикам.Закрыт Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Ссылка) КАК ЗаказыКлиентовОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И (ЗаказыКлиентовОстатки.ЗаказаноОстаток > 0
		|			ИЛИ ЗаказыКлиентовОстатки.КОформлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &Ссылка) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчеты.Валюта КАК Валюта,
		|	-Расчеты.КОплатеОстаток КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ОбъектРасчетов.Объект = &Ссылка) КАК Расчеты
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И Расчеты.КОплатеОстаток < 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Ссылка) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И (ЗаказыПоставщикамОстатки.ЗаказаноОстаток > 0
		|		ИЛИ ЗаказыПоставщикамОстатки.КОформлениюОстаток > 0
		|		ИЛИ ЗаказыПоставщикамОстатки.КПоступлениюОстаток > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОстатки.ДокументПоступления
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &Ссылка) КАК ТоварыКПоступлениюОстатки
		|ГДЕ
		|	&КонтролироватьПолнуюОтработку
		|	И ТоварыКПоступлениюОстатки.КОформлениюОрдеровОстаток + ТоварыКПоступлениюОстатки.ПринимаетсяОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УслугиПереработчика.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Ссылка) КАК УслугиПереработчика
		|ГДЕ
		|	УслугиПереработчика.СуммаОстаток > 0
		|	И &КонтролироватьПолнуюОтработку
		//++ Устарело_Переработка24
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УслугиПереработчика.СуммаКонечныйОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.УслугиПереработчиковКОформлению.ОстаткиИОбороты(, , , , ЗаказПереработчику = &Ссылка) КАК УслугиПереработчика
		|ГДЕ
		|	ЕСТЬNULL(УслугиПереработчика.СуммаКонечныйОстаток, 0) > 0
		|	И &КонтролироватьПолнуюОтработку
		//-- Устарело_Переработка24
		|";
		
	КонтролироватьПолнуюОтработку =
		ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки2_5")
			И ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПереработчику2_5")
		//++ Устарело_Переработка24
		Или ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки")
			И ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПереработчику")
		//-- Устарело_Переработка24
		Или Ложь;
	
	КонтролироватьРасчеты =
		(ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты2_5")
			И ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПереработчику2_5")
		//++ Устарело_Переработка24
		Или ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты")
			И ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказПереработчику")
		//-- Устарело_Переработка24
		Или Ложь)
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамНакладным;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("КонтролироватьПолнуюОтработку", КонтролироватьПолнуюОтработку);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты", КонтролироватьРасчеты);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОтгрузка    = Результат[0].Выбрать();
	ВыборкаРасчеты     = Результат[1].Выбрать();
	ВыборкаПоступление = Результат[2].Выбрать();
	ВыборкаОтчеты      = Результат[3].Выбрать();
	
	Если ВыборкаОтгрузка.Следующий() Тогда 
		ТекстОшибки = НСтр("ru = 'Сырье и материалы по заказу ""%1"" отгружены не полностью.
							|Закрытие заказа возможно только с полностью отгруженными/отмененными строками';
							|en = 'Raw and consumable materials by the ""%1"" order are not shipped fully.
							|You can close the order only for fully shipped/canceled lines'");
							
		ТекстОшибки = СтрШаблон(ТекстОшибки, Объект.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаПоступление.Следующий() Тогда 
		ТекстОшибки = НСтр("ru = 'Продукция по заказу ""%1"" поступила не полностью.
							|Закрытие заказа возможно только с полностью поступившими/отмененными строками';
							|en = 'Products against the ""%1"" order were not fully received.
							|You can close the order only with fully received/canceled lines'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, Объект.Ссылка);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		ТекстОшибки = НСтр("ru = 'Расчеты по заказу ""%1"" не завершены.
		|Для закрытия заказа требуется оплата %2 %3
		|Закрытие заказа возможно только с полностью оплаченными/отмененными строками';
		|en = 'Settlements of order ""%1"" are not completed.
		|To close the order, payment is required %2 %3
		|You can close order only when all lines are paid/canceled'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, 
							Объект.Ссылка, 
							Строка(ВыборкаРасчеты.КОплатеОстаток), 
							Строка(ВыборкаРасчеты.Валюта));
							
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
	Если ВыборкаОтчеты.Следующий() Тогда 
		ТекстОшибки = НСтр("ru = 'Не все отчеты переработчику сформированы.
		|Для закрытия заказа требуется оформление отчетов на %1 %2.
		|Закрытие заказа возможно только с откорректированной стоимостью услуг';
		|en = 'Not all subcontractor reports are generated.
		|To close the order, it is required to generate reports for %1 %2. 
		|The order can be closed only with the corrected service cost'");
		
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(ВыборкаОтчеты.Сумма), Строка(Объект.Валюта));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
