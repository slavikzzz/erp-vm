////////////////////////////////////////////////////////////////////////////////
// Подсистема "Учет рабочего времени".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Регистрирует рабочее время в переданной коллекции движений.
//
// 	Параметры: 
//		Движения - коллекция движений, обязательно содержащая набор записей
//				   регистра накопления ДанныеОперативногоУчетаРабочегоВремениСотрудников.
//		ДанныеОВремени - таблица значений с колонками.
//			Дата  - конкретная дата на которую регистрируется время или любая 
//					(например, первое число) дата месяца в том случае, если 
//					регистрируются данные в целом за месяц (ВЦеломЗаПериод - истина).
//			Сотрудник
//			ВидВремени (не обязательно) - если колонки нет, то считается, что это - Явка.
//			Дней (не обязательно) - требуется только если ВЦеломЗаПериод - истина.
//			Часов (не обязательно)
//			План (не обязательно) - булево, признак того, что регистрируется плановое время
//									если колонки нет, то считается, что регистрируется 
//									фактическое время.
//			Внутрисменное (не обязательно) - булево, признак того, что регистрируется 
//											 внутрисменное время. Если колонки нет, то 
//											 считается, что регистрируется целосменное время.
//			ВЦеломЗаПериод (не обязательно) - булево, признак того, что регистрируется время в
//							 				  целом за месяц. Если колонки нет, то регистрируются 
//											  данные на переданную дату. Если ВЦеломЗаПериод 
//											  не передано или Ложь, то колонка Дней не может быть больше 1.
//		ПериодРегистрации - месяц в котором регистрируются данные, если не указан то считается что данные 
//							регистрируются в том же месяце за который вводятся.
//    	Записывать - Булево - Если Истина, то наборы будут записаны сразу.
//					          Если Ложь - наборам будет установлен признак Записывать = Истина.
//                            По умолчанию Ложь.
//
// Например, 
// - Если переданы только колонки Дата и Сотрудник, то это значит, что 
//   переданные даты - целые, полностью отработанные, рабочие дни.
// - Если переданы колонки Дата, Сотрудник, Дней и ВЦеломЗаПериод заполнена как Истина, то это 
//   значит, что передано количество полностью отработанных дней в том месяце, который 
//	 соответствует переданной дате.
Процедура ЗарегистрироватьРабочееВремяСотрудников(Движения, ДанныеОВремени, ПериодРегистрации = '00010101', Записывать = Ложь) Экспорт
	ВидыДанныхДляВидовВремени = ВидыДанныхДляВидовВремени();
	
	ДанныеСводногоУчетаРабочегоВремениСотрудников = Ложь;
	ДанныеОперативногоУчетаРабочегоВремениСотрудников = Ложь;
	
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		ВЦеломЗаПериод = ПолучитьЗначениеСвойства(СтрокаДанных, "ВЦеломЗаПериод", Ложь);
		Если ВЦеломЗаПериод Тогда
			ДобавитьЗаписьСводныхДанныхУчетаВремени(Движения, СтрокаДанных, ПериодРегистрации);		
			ДанныеСводногоУчетаРабочегоВремениСотрудников = Истина;
		Иначе	
			ДобавитьЗаписьОперативныхДанныхУчетаВремени(Движения, СтрокаДанных, ПериодРегистрации, ВидыДанныхДляВидовВремени);
			ДанныеОперативногоУчетаРабочегоВремениСотрудников = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Записывать Тогда
		НаборыКЗаписи = Новый Массив;
		Если ДанныеСводногоУчетаРабочегоВремениСотрудников Тогда
			НаборыКЗаписи.Добавить(Движения.ДанныеСводногоУчетаРабочегоВремениСотрудников);
		КонецЕсли;
		Если ДанныеОперативногоУчетаРабочегоВремениСотрудников Тогда
			НаборыКЗаписи.Добавить(Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников);
		КонецЕсли;
		
		Для Каждого Набор Из НаборыКЗаписи Цикл
			Если Набор.Записывать Тогда
				Набор.Записать();
				Набор.Записывать = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую таблицы, необходимой для метода ЗарегистрироватьРабочееВремяСотрудников структуры.
//
// Возвращаемое значение
//	Таблица значений с полями:
// 		Дата
//		Сотрудник
//	    ВидВремени
//		ВидВремениВытесняемый
//		Дней
//		Часов
//		План
//		Внутрисменное
//		ВЦеломЗаПериод
Функция ТаблицаДляРегистрацииВремени() Экспорт
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремениВытесняемый", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Территория", Новый ОписаниеТипов("СправочникСсылка.ТерриторииВыполненияРабот"));
	ТаблицаДанныхОВремени.Колонки.Добавить("УсловияТруда", Новый ОписаниеТипов("СправочникСсылка.УсловияТруда"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОВремени.Колонки.Добавить("План", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Внутрисменное", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции	                                                                      

// Проверяет регистрируемые данные о фактическом времени времени. 
//  Данный метод должен вызваться в обработчике ОбработкаПроверкиЗаполнения	
//  документа-регистратора данных о времени.
//
// 	Параметры:
//		Регистратор - ссылка на документ регистратор.
//		ДанныеОВремени - таблица значений с колонками.
//			Дата  - конкретная дата на которую регистрируется время или любая 
//					(например, первое число) дата месяца в том случае, если 
//					регистрируются данные в целом за месяц (ВЦеломЗаПериод - истина).
//			Сотрудник
//			ВидВремени (не обязательно) - если колонки нет, то считается, что это - Явка.
//			Дней (не обязательно) - если не задано, то считается что на каждую дату регистрируется по одному дню.
//			Часов (не обязательно)
//			ВЦеломЗаПериод -  (не обязательный, по умолчанию ложь).
//		Отказ - булево, признак наличия ошибок.
//		ВыводитьОшибкиПользователю - булево, необязательный. Признак необходимости выводить ошибки в виде сообщений
//		                             пользователю.
//		ПериодРегистрации - необязательный. Период регистрации данных о времени.
//
//	Возвращаемое значение:
//		Массив структур с полями:  
//			Сотрудник - сотрудник, по которому регистрируется время.
//			Дата - дата, за которую введено некорректное значение.
//			ВидВремени - не корректно введенный вид времени (может быть пустым).
//			Документ - ссылка на документ, записи которого противоречат вводимым данным (может быть пустым).
//			ТекстОшибки - текст ошибки.
//			
Функция ПроверитьРегистрируемыеДанныхОВремени(Регистратор, ДанныеОВремени, Отказ = Ложь, ВыводитьОшибкиПользователю = Ложь, ПериодРегистрации = Неопределено) Экспорт
	ОписанияОшибокВводаВремени = Новый Массив;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеОВремени(МенеджерВТ, ДанныеОВремени);
	
	ПроверитьРегистрациюЦелосменногоВремени(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	ПроверитьСоответствиеФактическогоВремениПлановому(МенеджерВТ, ОписанияОшибокВводаВремени, ПериодРегистрации, Отказ);
	
	Если ВыводитьОшибкиПользователю Тогда
		Ошибки = Новый Соответствие;
		Для Каждого ОписаниеОшибки Из ОписанияОшибокВводаВремени Цикл
			ДобавитьОшибкуПоСотруднику(Ошибки, ОписаниеОшибки.Сотрудник, ОписаниеОшибки.ТекстОшибки);	
		КонецЦикла;	
	КонецЕсли;
	
	ВывестиОшибкиПоСотрудникам(Ошибки, Отказ);

	Возврат ОписанияОшибокВводаВремени;
КонецФункции

// Регистрирует сторно записи в регистрах накопления учета времени.
//
// Параметры:
//  Движения - КоллекцияДвижений, Структура - Коллекция движений, обязательно содержащая наборы записей
//                                            регистров учета времени.
//  ПериодРегистрации    - Дата             - Период регистрации сторно записей (начало месяца).
//  ИсправляемыйДокумент - ДокументСсылка   - Документ по которому регистрируются сторно записи.
//  Сотрудники           - Массив - Содержит сотрудников, по которым надо зарегистрировать сторно-записи.
//                                  Если параметр не передан, то все записи исправляемого документа
//                                  будут сторнированы в регистрах накопления учета рабочего времени.
//  Записывать           - Булево - Необязательный. Если истина, наборы будут записаны сразу,
//                                  если ложь наборам будет установлен признак Записывать = Истина.
//
Процедура ЗарегистрироватьСторноЗаписиПоДокументу(Движения, ПериодРегистрации, ИсправляемыйДокумент, Сотрудники, Записывать = Ложь) Экспорт	
	ИмяУчета = "УчетРабочегоВремениРасширенный";
	
	МетаданныеРегистров = МетаданныеРегистровИсточниковДанныхУчетаВремени();
	
	НаборыКЗаписи = Новый Массив;
	
	ИсправляемыеДокументыПоСотрудникам = ИсправляемыеДокументыПоСотрудникам(ИсправляемыйДокумент, Сотрудники);
	
	ДвиженияВСтруктуре = ТипЗнч(Движения) = Тип("Структура");
	Набор = Неопределено;

	Для Каждого ОписаниеРегистра Из МетаданныеРегистров Цикл
		ИсправляемыеДанные = ИсправляемыеДвиженияПоРегистру(ОписаниеРегистра, ИсправляемыеДокументыПоСотрудникам);	
		
		Если ДвиженияВСтруктуре Тогда 
			Движения.Свойство(ОписаниеРегистра.Имя, Набор);
		Иначе 
			Набор = Движения.Найти(ОписаниеРегистра.Имя);
		КонецЕсли;
		
		Если Набор = Неопределено
			Или Не ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(Набор, ИмяУчета)
			Или ИсправляемыеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из ИсправляемыеДанные Цикл
			СтрокаНабора = Набор.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаДанных);
			
			ЭтоСторноЗапись = Ложь;
			Для Каждого Ресурс Из ОписаниеРегистра.Ресурсы Цикл
				Если СтрокаДанных[Ресурс.Имя] < 0 Тогда
					ЭтоСторноЗапись = Истина;
					Прервать;
				Иначе
					СтрокаНабора[Ресурс.Имя] = - СтрокаДанных[Ресурс.Имя];
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоСторноЗапись Тогда
				Набор.Удалить(СтрокаНабора);
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеРегистра.Имя <> "ДанныеОперативногоУчетаРабочегоВремениСотрудников" Тогда
				СтрокаНабора.ПериодРегистрации = ПериодРегистрации;
			КонецЕсли;
	
		КонецЦикла;	
		
		Набор.Записывать = Истина;
		
		НаборыКЗаписи.Добавить(Набор);
	КонецЦикла;	
	
	Если Записывать Тогда
		Для Каждого Набор Из НаборыКЗаписи Цикл
			Набор.Записать();
			Набор.Записывать = Ложь;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры	

// Возвращает массив незаполненных графиков в расчетном году.
//
// Параметры:
//		РасчетныйГод - Дата - исследуемый год(по умолчанию текущий).
//
// Возвращаемое значение:
//		Массив графиков работы сотрудников
//
Функция НайтиНезаполненныеГрафикиРаботы(РасчетныйГод = Неопределено) Экспорт
	
	Если РасчетныйГод = Неопределено Тогда
		РасчетныйГод = НачалоГода(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(РасчетныйГод));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(РасчетныйГод));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботыСотрудника
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|ГДЕ
		|	ГрафикиРаботыСотрудников.ПометкаУдаления = ЛОЖЬ
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияВремени
		|						ПО
		|							ВидыИспользованияВремени.Ссылка = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|					И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &КонецГода
		|					И ЕСТЬNULL(ВидыИспользованияВремени.РабочееВремя, ЛОЖЬ))
		|	И НЕ ГрафикиРаботыСотрудников.ЭтоГруппа";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГрафикРаботыСотрудника");
	
КонецФункции

// Регистрирует рабочее введенное табелем Т-13 в переданной коллекции движений.
// Параметры: 
//		Движения
//		ДанныеОВремени - таблица значений с колонками.
//			Дата  - конкретная дата на которую регистрируется время или любая 
//					(например, первое число) дата месяца в том случае, если 
//					регистрируются данные в целом за месяц (ВЦеломЗаПериод - истина).
//			Сотрудник
//			ВидВремени  - если колонки нет, то считается, что это - Явка.
//			Дней (не обязательно) - требуется только если ВЦеломЗаПериод - истина.
//			Часов 
//			ВЦеломЗаПериод (не обязательно) - булево, признак того, что регистрируется время в
//							 				  целом за месяц. Если колонки нет, то регистрируются 
//											  данные на переданную дату. Если ВЦеломЗаПериод 
//											  не передано или Ложь, то колонка Дней не может быть больше 1.
//		ПериодРегистрации - месяц в котором регистрируются данные.
//			
Процедура ЗарегистрироватьДанныеТабеля(Движения, ДанныеОВремени, ПериодРегистрации = '00010101') Экспорт
	ДанныеОВремени.Индексы.Добавить("Сотрудник, Дата, РабочееВремя, ПереходящаяЧастьСмены");	
	СтруктураПоиска = Новый Структура("Сотрудник, Дата, РабочееВремя, ПереходящаяЧастьСмены");
	СтруктураПоиска.РабочееВремя = Истина;
	СтруктураПоиска.ПереходящаяЧастьСмены = Ложь;	
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		Запись = Движения.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Добавить();
		
		Запись.Период = ПериодСтрокиРегистрируемыхДанных(СтрокаДанных);
		Запись.Сотрудник = СтрокаДанных.Сотрудник;
		Запись.Организация = СтрокаДанных.Организация;
		Запись.ПериодРегистрации = ?(ПериодРегистрации = '00010101', НачалоМесяца(Запись.Период), ПериодРегистрации);
		Запись.ВидУчетаВремени = СтрокаДанных.ВидВремени;
		Запись.Территория = СтрокаДанных.Территория;
		Запись.УсловияТруда = СтрокаДанных.УсловияТруда;
		Запись.Смена = СтрокаДанных.Смена;
		
		Если Не СтрокаДанных.ПереходящаяЧастьСмены Тогда 
			Запись.Дни = СтрокаДанных.Дней;
		Иначе
			СтруктураПоиска.Сотрудник = СтрокаДанных.Сотрудник;
			СтруктураПоиска.Дата = СтрокаДанных.Дата;
			Если ДанныеОВремени.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				Запись.Дни = СтрокаДанных.Дней;
			КонецЕсли;	
		КонецЕсли;	
		Запись.Часы = СтрокаДанных.Часов;
		
		Запись.ПереходящаяЧастьПредыдущейСмены = ЭтоПереходящаяЧастьПредыдущейСмены(СтрокаДанных);
		Запись.ПереходящаяЧастьТекущейСмены = ЭтоПереходящаяЧастьТекущейСмены(СтрокаДанных);
	КонецЦикла;	
	
	Движения.ДанныеТабельногоУчетаРабочегоВремениСотрудников.Записывать = Истина;
КонецПроцедуры

// Регистрирует рабочее введенное индивидуальным графиком в переданной коллекции движений.
// Параметры: 
//		Движения
//		ДанныеОВремени - таблица значений с колонками.
//			Дата  - конкретная дата на которую регистрируется время или любая 
//					(например, первое число) дата месяца в том случае, если 
//					регистрируются данные в целом за месяц (ВЦеломЗаПериод - истина).
//			Сотрудник
//			ВидВремени  - если колонки нет, то считается, что это - Явка.
//			Дней (не обязательно) - требуется только если ВЦеломЗаПериод - истина.
//			Часов 
//			ВЦеломЗаПериод (не обязательно) - булево, признак того, что регистрируется время в
//							 				  целом за месяц. Если колонки нет, то регистрируются 
//											  данные на переданную дату. Если ВЦеломЗаПериод 
//											  не передано или Ложь, то колонка Дней не может быть больше 1.
//		ПериодРегистрации - месяц в котором регистрируются данные, если не указан то считается что данные 
//							регистрируются в том же месяце за который вводятся.
//			
Процедура ЗарегистрироватьДанныеИндивидуальногоГрафика(Движения, ДанныеОВремени, ПериодРегистрации = '00010101') Экспорт
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		Запись = Движения.ДанныеИндивидуальныхГрафиковСотрудников.Добавить();
		
		Запись.Период = ПериодСтрокиРегистрируемыхДанных(СтрокаДанных);
		Запись.Сотрудник = СтрокаДанных.Сотрудник;
		Запись.Организация = СтрокаДанных.Организация;
		Запись.ПериодРегистрации = ?(ПериодРегистрации = '00010101', НачалоМесяца(Запись.Период), ПериодРегистрации);
		Запись.ВидУчетаВремени = СтрокаДанных.ВидВремени;
		Запись.Смена = СтрокаДанных.Смена;
		
		Если Не СтрокаДанных.ПереходящаяЧастьСмены Тогда 
			Запись.Дни = СтрокаДанных.Дней;
		КонецЕсли;	
		Запись.Часы = СтрокаДанных.Часов;
		
		Запись.ПереходящаяЧастьПредыдущейСмены = ЭтоПереходящаяЧастьПредыдущейСмены(СтрокаДанных);
		Запись.ПереходящаяЧастьТекущейСмены = ЭтоПереходящаяЧастьТекущейСмены(СтрокаДанных);
	КонецЦикла;	
	
	Движения.ДанныеИндивидуальныхГрафиковСотрудников.Записывать = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf85-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ГрафикиРаботыСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.РежимыРаботыСотрудников);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	ГруппаПроверок = ГруппыПроверок.Добавить();
	ГруппаПроверок.Наименование					= НСтр("ru = 'Учет рабочего времени';
															|en = 'Time tracking'");
	ГруппаПроверок.Идентификатор				= "КонтрольУчетаРабочегоВремени";
	ГруппаПроверок.КонтекстПроверокВеденияУчета	= ГруппаПроверок.Идентификатор;
	
	Проверка = Проверки.Добавить();
	Проверка.ИдентификаторГруппы			= ГруппаПроверок.Идентификатор;
	Проверка.Наименование					= НСтр("ru = 'Заполненность графика работы сотрудников';
													|en = 'Completeness of employee work schedule'");
	Проверка.Причины						= НСтр("ru = 'График работы сотрудников не заполнен';
													|en = 'Employee work schedule is not filled in'");
	Проверка.Рекомендация					= НСтр("ru = 'Заполнить график работы сотрудников';
													|en = 'Fill in the employee work schedule'");
	Проверка.Идентификатор					= ГруппаПроверок.Идентификатор + ".ПроверкаЗаполненностиГрафиков";
	Проверка.ОбработчикПроверки				= "УчетРабочегоВремениПроверкиРасширенный.ПроверкаЗаполненностиГрафиков";
	Проверка.КонтекстПроверокВеденияУчета	= ГруппаПроверок.КонтекстПроверокВеденияУчета;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "УчетРабочегоВремени.СоздатьВидыИспользованияРабочегоВремениПоНастройкам";
	Обработчик.НачальноеЗаполнение = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "УчетРабочегоВремениРасширенный.УстановитьНастройкуКонтроляПлановогоИФактическогоВремени";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.11";
	Обработчик.Процедура = "Справочники.ГрафикиРаботыСотрудников.УстановитьПризнакУчитыватьНерабочиеДни";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7c0f1515-a866-48ff-985e-6bf357b9286c");
	Обработчик.Комментарий = НСтр("ru = 'Установка признака учета оплачиваемых нерабочих дней.';
									|en = 'Setting the paid non-working days accounting flag.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.82";
	Обработчик.Процедура = "УчетРабочегоВремениРасширенный.ЗаполнитьНомераОплачиваемыхНерабочихПериодов";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a4f89750-e548-40ba-96f7-cb7f7e497c79");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение оплачиваемых нерабочих периодов.';
									|en = 'Fill in paid non-working periods.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.83";
	Обработчик.Процедура = "УчетРабочегоВремениРасширенный.ОбновитьГрафикиРаботыСотрудников2020";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ff2a782a-97db-4114-b273-5254d23b3ca1");
	Обработчик.Комментарий = НСтр("ru = 'Обновление графиков работы за 2020 год.';
									|en = 'Updated work schedules for 2020.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.96";
	Обработчик.Процедура = "УчетРабочегоВремениРасширенный.ИсправитьДанныеПроизводственныхКалендарейПомесячно";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.17.51";
	Обработчик.Процедура = "УчетРабочегоВремениРасширенный.ОбновитьГрафикиРаботыСотрудников2021";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("34a3b04b-8d41-4989-8a28-b5dc8f6b79d4");
	Обработчик.Комментарий = НСтр("ru = 'Обновление графиков работы за 2021 год.';
									|en = 'Updated work schedules for 2021.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.19.36";
	Обработчик.Процедура = "Справочники.РежимыРаботыСотрудников.ЗаполнитьСменыРежимовРаботы";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3880e6ec-d12c-407e-981c-da377788729b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение смен у режимов работы';
									|en = 'Fill in shifts of modes'");
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.24.19";
	Обработчик.Процедура = "УчетРабочегоВремени.СоздатьВидыИспользованияРабочегоВремениПоНастройкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.29.77";
	Обработчик.Процедура = "УчетРабочегоВремени.СоздатьВидыИспользованияРабочегоВремениПоНастройкам";
	
КонецПроцедуры

#КонецОбласти

// Возвращает пустую таблицы, необходимой для метода ЗарегистрироватьРабочееВремяСотрудников структуры.
//
// Возвращаемое значение
//	Таблица значений с полями:
// 		Дата
//		Сотрудник
//	    ВидВремени
//		ВидВремениВытесняемый
//		Часов
//		Смена
//		ПереходящаяЧастьПредыдущейСмены
//		ПереходящаяЧастьПредыдущейСмены
Функция ТаблицаДляРегистрацииВремениВнутрисменныхОтклонений() Экспорт
	ТаблицаДанныхОВремени = Новый ТаблицаЗначений;
	ТаблицаДанныхОВремени.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремениВытесняемый", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхОВремени.Колонки.Добавить("Смена", Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ПереходящаяЧастьПредыдущейСмены", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхОВремени.Колонки.Добавить("ПереходящаяЧастьТекущейСмены", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаДанныхОВремени;
КонецФункции

// Возвращает структуру, описывающую фильтр для методаТДанныеПроизводственногоКалендаряПоСотрудникам.
//
// Возвращаемое значение:
//	Структура с полями:
//		ИмяВТ - имя временной таблицы фильтра
//		ИмяПоляСотрудник (по умолчанию "Сотрудник") - имя поля содержащего сотрудника
//		ИмяПоляДатаНачала (по умолчанию "ДатаНачала") - имя поля содержащего дату начала интервала
//		ИмяПоляДатаОкончания (по умолчанию "ДатаОкончания") - имя поля содержащего дату окончания интервала.
//
Функция ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоСотрудникам() Экспорт
	ОписаниеФильтра = Новый Структура;
	ОписаниеФильтра.Вставить("ИмяВТ");
	ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	Возврат ОписаниеФильтра;
КонецФункции	

// Помещает в менеджер временных таблиц таблицу ВТДанныеПроизводственногоКалендаряПоСотрудникам с полями:
//		Сотрудник - график работы.
//		ДатаНачала - дата начала периода.
//		ДатаОкончания - дата окончания периода.
//		НормаДнейПоПроизводственномуКалендарю - количество рабочих дней и предпраздничных дней за период.
//		НормаЧасовПоПроизводственномуКалендарю - количество рабочих часов, исходя из 40 часовой рабочей недели.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы:
//		ВТПериодыГрафиков с полями:
//			Сотрудник     - СправочникСсылка.Сотрудники - сотрудник, для которого надо получить данные 
////			            производственного календаря.
//			ДатаНачала    - Дата - начало периода.
//			ДатаОкончания - Дата - окончание периода.
//	ОписаниеФильтра       - Структура - см. ОписаниеФильтраВТДанныеПроизводственногоКалендаряПоСотрудникам
//  ИмяВТРезультат        - Строка    - имя результирующей временной таблицы.
//
Процедура СоздатьВТДанныеПроизводственногоКалендаряПоСотрудникам(МенеджерВременныхТаблиц, ОписаниеФильтра, ИмяВТРезультат = "ВТДанныеПроизводственногоКалендаряПоСотрудникам") Экспорт
	
	ОписаниеФильтраПолученияГрафиков = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписаниеФильтра.ИмяВТ, "Сотрудник");		
	ОписаниеФильтраПолученияГрафиков.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", ОписаниеФильтра.ИмяПоляСотрудник);
	ОписаниеФильтраПолученияГрафиков.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", ОписаниеФильтра.ИмяПоляДатаНачала);
	ОписаниеФильтраПолученияГрафиков.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", ОписаниеФильтра.ИмяПоляДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды("ГрафикРаботыСотрудников", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтраПолученияГрафиков);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Получим периоды, на начало которых графики не определены 
	// (т.е. сотрудник еще не принят на работу и нужно использовать срез первых).
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фильтр.ДатаНачала КАК ДатаНачала,
	|	Фильтр.ДатаОкончания КАК ДатаОкончания,
	|	Фильтр.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ГрафикРаботыСотрудниковПериоды.НачалоПериода, ДЕНЬ, -1), Фильтр.ДатаОкончания)) КАК КонецПериода
	|ПОМЕСТИТЬ ВТПериодыИспользованияСрезаПервых
	|ИЗ
	|	ВТФильтр КАК Фильтр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковПериоды КАК ГрафикРаботыСотрудниковПериоды
	|		ПО Фильтр.Сотрудник = ГрафикРаботыСотрудниковПериоды.Сотрудник
	|			И Фильтр.ДатаНачала = ГрафикРаботыСотрудниковПериоды.ДатаНачала
	|			И Фильтр.ДатаОкончания = ГрафикРаботыСотрудниковПериоды.ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	Фильтр.Сотрудник,
	|	Фильтр.ДатаНачала,
	|	Фильтр.ДатаОкончания
	|
	|ИМЕЮЩИЕ
	|	(Фильтр.ДатаНачала <> МИНИМУМ(ГрафикРаботыСотрудниковПериоды.НачалоПериода)
	|		ИЛИ МИНИМУМ(ГрафикРаботыСотрудниковПериоды.НачалоПериода) ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ВТПериодыИспользованияСрезаПервых КАК ПериодыИспользованияСрезаПервых";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФильтр", ОписаниеФильтра.ИмяВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Фильтр.Сотрудник", "Фильтр." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Фильтр.ДатаНачала", "Фильтр." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Фильтр.ДатаОкончания", "Фильтр." + ОписаниеФильтра.ИмяПоляДатаОкончания);
		
	Если Запрос.Выполнить().Пустой() Тогда
		ИмяВТИнтервалыГрафиков = "ВТГрафикРаботыСотрудниковПериоды";				
	Иначе
		ФильтрСрезаПервыхГрафиков = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПериодыИспользованияСрезаПервых", "Сотрудник", "ДатаНачала, ДатаОкончания, КонецПериода");
		ФильтрСрезаПервыхГрафиков.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "ДатаНачала");
		
		УстановитьПривилегированныйРежим(Истина);
		ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраСрезПервых("ГрафикРаботыСотрудников", МенеджерВременныхТаблиц, Ложь, ФильтрСрезаПервыхГрафиков);
		УстановитьПривилегированныйРежим(Ложь);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикРаботыСотрудниковПериоды.ДатаНачала КАК ДатаНачала,
		|	ГрафикРаботыСотрудниковПериоды.ДатаОкончания КАК ДатаОкончания,
		|	ГрафикРаботыСотрудниковПериоды.Сотрудник КАК Сотрудник,
		|	ГрафикРаботыСотрудниковПериоды.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикРаботыСотрудниковПериоды.НачалоПериода КАК НачалоПериода,
		|	ГрафикРаботыСотрудниковПериоды.КонецПериода КАК КонецПериода
		|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковПериодыДополненные
		|ИЗ
		|	ВТГрафикРаботыСотрудниковПериоды КАК ГрафикРаботыСотрудниковПериоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГрафикРаботыСотрудниковСрезПервых.ДатаНачала,
		|	ГрафикРаботыСотрудниковСрезПервых.ДатаОкончания,
		|	ГрафикРаботыСотрудниковСрезПервых.Сотрудник,
		|	ГрафикРаботыСотрудниковСрезПервых.ГрафикРаботы,
		|	ГрафикРаботыСотрудниковСрезПервых.ДатаНачала,
		|	ГрафикРаботыСотрудниковСрезПервых.КонецПериода
		|ИЗ
		|	ВТГрафикРаботыСотрудниковСрезПервых КАК ГрафикРаботыСотрудниковСрезПервых
		|";
				
		Запрос.Выполнить();
		
		ИмяВТИнтервалыГрафиков = "ВТГрафикРаботыСотрудниковПериодыДополненные";
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковПериоды.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудниковПериоды.ДатаНачала КАК ДатаНачала,
	|	ГрафикРаботыСотрудниковПериоды.ДатаОкончания КАК ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейПоПроизводственномуКалендарю,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаЧасовПоПроизводственномуКалендарю
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряПоСотрудникам
	|ИЗ
	|	ВТГрафикРаботыСотрудниковПериоды КАК ГрафикРаботыСотрудниковПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ГрафикРаботыСотрудниковПериоды.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ГрафикРаботыСотрудниковПериоды.НачалоПериода <= ДанныеПроизводственногоКалендаря.Дата
	|			И ГрафикРаботыСотрудниковПериоды.КонецПериода >= ДанныеПроизводственногоКалендаря.Дата
	|			И (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикРаботыСотрудниковПериоды.Сотрудник,
	|	ГрафикРаботыСотрудниковПериоды.ДатаНачала,
	|	ГрафикРаботыСотрудниковПериоды.ДатаОкончания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТГрафикРаботыСотрудниковПериоды", ИмяВТИнтервалыГрафиков);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеПроизводственногоКалендаряПоСотрудникам", ИмяВТРезультат);
	
	Запрос.Выполнить();	
КонецПроцедуры	

// Вычисляет максимальные периоды регистрации времени в разрезе.
//  Сотрудник, ПериодДействия.
//
// Параметры:
//		ТаблицаСотрудников - таблица значений, см. ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам()
//		ПериодРегистрации - дата актуальности.	
//
Процедура УстановитьПериодыРегистрацииВремениПоСотрудникам(ТаблицаСотрудников, ПериодРегистрации) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.ПериодДействия
	|ПОМЕСТИТЬ ВТИсходныеДанные
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Выполнить();
	
	СоздатьВТПериодыРегистрацииВремениСотрудников(МенеджерВременныхТаблиц, ПериодРегистрации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТПериодыРегистрацииВремениСотрудников КАК ПериодыРегистрацииВремени";
	
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

// Составляет таблицу, используемую в качестве параметра получения периодов регистрации времени по сотрудникам.
//
// Возвращаемое значение - таблица значений
//			Сотрудник - сотрудник, по которому необходимо рассчитать время.
//			ПериодДействия - начало месяца, за который необходимо рассчитывать отработанное время.
//			ПериодРегистрации - тип Дата, будет заполнен максимальными периодами 
//								регистрации по сотрудникам и периодам действия.
//
Функция ПустаяТаблицаУстановкиПериодовРегистрацииВремениПоСотрудникам() Экспорт
		
	СотрудникиПериоды = Новый ТаблицаЗначений;
	СотрудникиПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиПериоды.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	СотрудникиПериоды.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Возврат СотрудникиПериоды;
	
КонецФункции

// Возвращает структуру параметров для процедуры СоздатьВТДанныеУчетаРабочегоВремениСотрудников.
//
// Возвращаемое значение:
//	Структура - содержит поля:
//		* РассчитыватьПлановоеВремя - Булево - определяет необходимость получения плановых данных (по умолчанию Ложь).
//		* НеучитываемыеРегистраторы - Массив, Неопределено - определяет данные каких регистраторов следует игнорировать при
//		                              получении данных, если равен Неопределено, будут получены данные всех регистраторов
//		                              (по умолчанию Неопределено).
//		* ИмяВТСотрудники - Строка - имя временной таблицы содержащей список сотрудников для получения данных (по умолчанию
//		                             ВТСотрудники).
//
Функция ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников() Экспорт
	ПараметрыПолученияДанныхОВремени = Новый Структура;
	
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьДанныеПлан", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("НеучитываемыеРегистраторы", Новый Массив);
	ПараметрыПолученияДанныхОВремени.Вставить("ИмяВТСотрудники", "ВТСотрудники");
	ПараметрыПолученияДанныхОВремени.Вставить("ИмяВТРезультат", "ВТДанныеУчетаРабочегоВремениСотрудников");
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьУсловияТрудаИТерритории", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ДатаНачала", '00010101');
	ПараметрыПолученияДанныхОВремени.Вставить("ДатаОкончания", '00010101');
	
	Возврат ПараметрыПолученияДанныхОВремени;
КонецФункции	

// Помещает в менеджер временных таблиц временную таблицу ВТДанныеУчетаРабочегоВремениСотрудников с данными учета
// времени сотрудников.
//	
// Параметры:
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - обязательно содержащий в себе таблицы:
//     * ВТСотрудники (имя временной таблицы определяется в параметре ПараметрыПолученияДанныхОВремени) - временная
//     таблица - обязательно содержит поля.
//        ** Сотрудник         - СправочникСсылка.Сотрудники - сотрудник, по которому нужно получить данные.
//        ** Месяц 	           - Дата - месяц, за который нужно получить данные.
//        ** ДатаАктуальности  - Дата - Будут учитываться только те данные о времени, 
//										которые зарегистрированы не позже переданного значения.
//        ** ДатаНачала 	   - Дата - ограничивает период получения данных внутри месяца.
//        ** ДатаОкончания 	   - Дата - ограничивает период получения данных внутри месяца.
//  ТолькоРазрешенные - Булево - определяет, будет ли производится попытка получить данные, на которые у пользователя
//                               нет прав.
//								 Используется когда данные необходимо получать целостно.
//  ПараметрыПолученияДанныхОВремени - Структура - структура с полями (см. функцию
//                                                 ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников).
//
// Результат выполнения - 
//	Помещает в МенеджерВременныхТаблиц таблицу ВТДанныеУчетаРабочегоВремениСотрудников с полями.
//     * Сотрудник         - СправочникСсылка.Сотрудники - сотрудник.
//     * Дата      		   - Дата - дата за которую получены данные.
//     * ВЦеломЗаПериод    - Булево - признак того, что данные были зарегистрированы сводно.
//     * Дней              - Число - в случае сводной регистрации времени может быть меньше 1.
//     * Часов			   - Число - количество часов по виду времени за день.
//     * ВидУчетаВремени   - СправочникСсылка.ВидыИспользованияРабочегоВремени - вид использования рабочего времени.
//     * ОсновноеВремя     - СправочникСсылка.ВидыИспользованияРабочегоВремени - основное время, один из
//                                                                               предопределенных в системе видов
//                                                                               времени.
//     * НормаЧасов        - Число - норма часов по всем видам времени за день.
//     * ПериодРегистрации - Дата  - период в котором были зарегистрированы данные о времени.
//     * ЧасовПлан		   - Число - плановое количество часов.
//     * ДнейПлан		   - Число - плановое количество дней, в случае сводной регистрации планового времени, может быть
//                              меньше 1.
//
Процедура СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияДанныхОВремени) Экспорт
	ПараметрыПолученияДанныхОВремениСлужебный = ПараметрыПолученияДанныхУчетаВремени();
		
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанныхОВремениСлужебный, ПараметрыПолученияДанныхОВремени);
	
	Запрос = ЗапросВТДанныеУчетаРабочегоВремениСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанныхОВремениСлужебный);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
КонецПроцедуры	

// Возвращает структуру параметров для процедуры СоздатьВТПлановоеВремя.
//
// Возвращаемое значение:
//	Структура - содержит поля:	
//		* НеучитываемыеРегистраторы - Массив, Неопределено - определяет данные каких регистраторов следует игнорировать при
//		                              получении данных, если равен Неопределено, будут получены данные всех регистраторов
//		                              (по умолчанию Неопределено).
//		* ИмяВТСотрудники - Строка - имя временной таблицы содержащей список сотрудников для получения данных (по умолчанию
//		                             ВТСотрудники).
//    	* ПолучатьПлановоеВремяЗаПолныйМесяц - Булево - если истина то в месяце приема сотрудника будет дополнительно учтено время 
//														по графику до даты приема
//
//    	* ОтноситьПереходящуюЧастьСменыКДнюНачала - Булево - определяет отнесение часов переходящей части смены к дню ее начала
//
Функция ПараметрыДляСоздатьВТПлановоеВремяСотрудников() Экспорт
	ПараметрыПолученияДанныхОВремени = Новый Структура;
	ПараметрыПолученияДанныхОВремени.Вставить("НеучитываемыеРегистраторы", Новый Массив);
	ПараметрыПолученияДанныхОВремени.Вставить("ИмяВТСотрудники", "ВТСотрудники");
	ПараметрыПолученияДанныхОВремени.Вставить("ОтноситьПереходящуюЧастьСменыКДнюНачала", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьПлановоеВремяЗаПолныйМесяц", Ложь);
	
	Возврат ПараметрыПолученияДанныхОВремени;	
КонецФункции	

// Помещает в менеджер временных таблиц временную таблицу ВТПлановоеВремя с данными учета времени сотрудников.
//	
// Параметры:
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - обязательно содержащий в себе таблицы:
//     * ВТСотрудники (имя временной таблицы определяется в параметре ПараметрыПолученияДанныхОВремени) - временная
//     таблица - обязательно содержит поля.
//        ** Сотрудник         - СправочникСсылка.Сотрудники - сотрудник, по которому нужно получить данные.
//        ** Месяц 	           - Дата - месяц, за который нужно получить данные.
//        ** ДатаАктуальности  - Дата - период регистрации. Будут учитываться только те данные о времени, 
//										которые зарегистрированы не позже переданного значения.
//        ** ДатаНачала 	   - Дата - ограничивает период получения данных внутри месяца.
//        ** ДатаОкончания 	   - Дата - ограничивает период получения данных внутри месяца.
//  ТолькоРазрешенные - Булево - определяет, будет ли производится попытка получить данные, на которые у пользователя
//                               нет прав.
//								 Используется когда данные необходимо получать целостно.
//  ПараметрыПолученияДанныхОВремени - Структура - структура с полями (см. функцию
//                                                 ПараметрыДляСоздатьВТПлановоеВремяСотрудников).
//
// Результат выполнения - 
//	Помещает в МенеджерВременныхТаблиц таблицу ВТДанныеУчетаРабочегоВремениСотрудников с полями.
//     * Сотрудник                - СправочникСсылка.Сотрудники - сотрудник.
//     * Период      	          - Дата - дата за которую получены данные.
//     * ПериодРегистрацииВремени - Дата  - период в котором были зарегистрированы данные о времени.
//     * Дней                     - Число - в случае сводной регистрации времени может быть меньше 1.
//     * Часов			          - Число - количество плановых часов по виду времени за день.
//     * ВидУчетаВремени          - СправочникСсылка.ВидыИспользованияРабочегоВремени - вид использования рабочего
//                                                                                      времени.
//     * ВЦеломЗаПериод           - Булево - признак того, что данные были зарегистрированы сводно.
//     * НормаЧасов               - Число - норма часов, может отличаться от значения поля  Часов, если сотрудник
//                                          работает по графику неполного времени.
//
Процедура СоздатьВТПлановоеВремя(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияПлановогоВремени) Экспорт
	ПараметрыПолученияДанныхУчетаВремени = ПараметрыПолученияПлановыхДанныхУчетаВремени();
	
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаКДаннымУчетаВремени();
	
	ПараметрыПолученияДанныхУчетаВремени.НеучитываемыеРегистраторы = ПараметрыПолученияПлановогоВремени.НеучитываемыеРегистраторы;
	ПараметрыПолученияДанныхУчетаВремени.ОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрыПолученияПлановогоВремени.ОтноситьПереходящуюЧастьСменыКДнюНачала;
	ПараметрыПолученияДанныхУчетаВремени.ПолучатьНормуВремениЗаПолныйМесяц = ПараметрыПолученияПлановогоВремени.ПолучатьПлановоеВремяЗаПолныйМесяц;
	
	ПараметрыПостроенияЗапроса.ИмяВТИсточникДанных = ПараметрыПолученияПлановогоВремени.ИмяВТСотрудники;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = "ВТПлановоеВремя";
	
	ЗапросВТРезультат = СоздатьЗапросПолученияПлановыхДанныхУчетаВремени(ПараметрыПолученияДанныхУчетаВремени, ПараметрыПостроенияЗапроса);	

	ЗапросВТРезультат.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросВТРезультат.Выполнить();
	
КонецПроцедуры	

// Помещает в менеджер временных таблиц таблицу ВТРабочееВремяПоИнтервалам.
//
// Параметры:
//	МенеджерВТ - менеджер временных таблиц, содержащий следующие таблицы:
//		ВТСотрудникиИнтервалы с полями:
//			Сотрудник - 			
//			ДатаНачала - 
//			ДатаОкончания -
//
// Процедура помещает в менеджер временных таблиц таблицу
//	ВТРабочееВремяПоИнтервалам с полями:
//		Сотрудник - 
//		ДатаНачала - 
//		ДатаОкончания -
//      НормаДней - 
//		НормаЧасов
Процедура СоздатьВТРабочееСотрудниковВремяПоИнтервалам(МенеджерВременныхТаблиц, ДатаАктуальности) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиИнтервалы.Сотрудник,
	|	НАЧАЛОПЕРИОДА(СотрудникиИнтервалы.ДатаНачала, МЕСЯЦ) КАК Месяц,
	|	НАЧАЛОПЕРИОДА(СотрудникиИнтервалы.ДатаНачала, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(СотрудникиИнтервалы.ДатаНачала, МЕСЯЦ) КАК ДатаОкончания,
	|	&ДатаАктуальности КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТСотрудникиИнтервалы КАК СотрудникиИнтервалы";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
		
	СоздатьВТДанныеУчетаРабочегоВремениСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	Запрос.УстановитьПараметр("Явка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.УстановитьПараметр("Ночные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Запрос.УстановитьПараметр("Вечерние", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	Запрос.УстановитьПараметр("Сверхурочные", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	                                         
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиИнтервалы.Сотрудник,
	|	СотрудникиИнтервалы.ДатаНачала,
	|	СотрудникиИнтервалы.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ДанныеУчетаРабочегоВремениСотрудников.Часов, 0) > 0
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДней,
	|	СУММА(ЕСТЬNULL(ДанныеУчетаРабочегоВремениСотрудников.Часов, 0)) КАК НормаЧасов
	|ПОМЕСТИТЬ ВТРабочееВремяПоИнтервалам
	|ИЗ
	|	ВТСотрудникиИнтервалы КАК СотрудникиИнтервалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|		ПО (ДанныеУчетаРабочегоВремениСотрудников.Сотрудник = СотрудникиИнтервалы.Сотрудник)
	|			И (ДанныеУчетаРабочегоВремениСотрудников.Дата >= СотрудникиИнтервалы.ДатаНачала)
	|			И (ДанныеУчетаРабочегоВремениСотрудников.Дата <= СотрудникиИнтервалы.ДатаОкончания)
	|ГДЕ
	|	ДанныеУчетаРабочегоВремениСотрудников.ОсновноеВремя В (&Явка, &Ночные, &Вечерние, &Сверхурочные)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиИнтервалы.ДатаНачала,
	|	СотрудникиИнтервалы.ДатаОкончания,
	|	СотрудникиИнтервалы.Сотрудник";

	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудники");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТПараметрыЗарегистрированныхДанныхУчетаВремени");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудникСРассчитаннымиДанными");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТПараметрыПолученияДанныхПоСотрудникам");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТЗарегистрированныеВидыДанныхУчетаВремени");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТИсточникиПолученияДанныхУчетаВремени");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТДанныеРегистровУчетаВремени");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТНормаВремени");
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТДанныеУчетаРабочегоВремениСотрудников");
	
КонецПроцедуры	

// Добавляет в указанный менеджер временных таблиц ВТПериодыРегистрацииВремениСотрудников,
// в которой подбирает для каждого сотрудника актуальный период регистрации времени, 
// действующий на момент указанного периода регистрации начислений.
// 
// Параметры:
//	- МенеджерВременныхТаблиц - менеджер временных таблиц, в котором должна быть ВТ с полями Сотрудник и ПериодДействия.
//	- ПериодРегистрации - период регистрации начислений.
//  - ИмяВТИсходныеДанные - имя ВТ содержащая сотрудников и периоды действия по которым надо получить периоды
//                          регистрации времени.
//
Процедура СоздатьВТПериодыРегистрацииВремениСотрудников(МенеджерВременныхТаблиц, ПериодРегистрации, ИмяВТИсходныеДанные = "ВТИсходныеДанные") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходныеДанные.Сотрудник,
	|	МАКСИМУМ(ЕСТЬNULL(ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодРегистрации,
	|	ИсходныеДанные.ПериодДействия
	|ПОМЕСТИТЬ ВТПериодыРегистрацииВремениСотрудников
	|ИЗ
	|	ВТИсходныеДанные КАК ИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|		ПО ИсходныеДанные.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации <= &ПериодРегистрации)
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц = ИсходныеДанные.ПериодДействия)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходныеДанные.Сотрудник,
	|	ИсходныеДанные.ПериодДействия";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТИсходныеДанные КАК ИсходныеДанные", ИмяВТИсходныеДанные + " КАК ИсходныеДанные");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Помещает в менеджер временных таблиц таблицу ВТДанныеПроизводственногоКалендаряПоГрафикам.
//
// Параметры:
//	МенеджерВТ - менеджер временных таблиц, содержащий следующие таблицы:
//		ВТПериодыГрафиков с полями:
//			ГрафикРаботы     - график работы, по которому надо получить данные произв. календаря.
//			НачалоПериода    - дата начала периода.
//			ОкончаниеПериода - дата окончания периода.
//
// Процедура помещает в менеджер временных таблиц таблицу
//	ВТДанныеПроизводственногоКалендаряПоГрафикам с полями:
//		ГрафикРаботы      - график работы.
//		НачалоПериода     - дата начала периода.
//		ОкончаниеПериода  - дата окончания периода.
//		ДнейПоПятидневке  - количество рабочих дней по пятидневке в периоде по данным производственного календаря.
//		ДнейПоШестидневке - количество рабочих дней по шестидневке в периоде по данным производственного календаря.
//		ДнейКалендарных   - количество дней календарных в периоде по данным производственного календаря.
//
Процедура СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =				   
 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
 	|	ПериодыГрафиков.ГрафикРаботы КАК Сотрудник,
 	|	ПериодыГрафиков.НачалоПериода КАК ДатаНачала,
 	|	ПериодыГрафиков.ОкончаниеПериода КАК ДатаОкончания
 	|ПОМЕСТИТЬ ВТИзмеренияДатыДляТаблицыРегистра
 	|ИЗ
 	|	ВТПериодыГрафиков КАК ПериодыГрафиков
 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
 	|		ПО ПериодыГрафиков.ГрафикРаботы = Сотрудники.Ссылка";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляТаблицыРегистра",
			"Сотрудник"),
		ПараметрыПостроения,
		"ВТГрафикиСотрудниковСрезИДвижения");
		
	ТаблицыКУничтожению = Новый Массив;
	ТаблицыКУничтожению.Добавить("ВТИзмеренияДатыДляТаблицыРегистра");
	ТаблицыКУничтожению.Добавить("ВТГрафикиСотрудниковСрезИДвижения");	
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы КАК Сотрудник,
	|	ПериодыГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыГрафиков.Период КАК НачалоПериода,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПериодыГрафиковСлед.Период ЕСТЬ NULL 
	|					ИЛИ ПериодыГрафиковСлед.Период > СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|				ТОГДА СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыГрафиковСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ОкончаниеПериода,
	|	СотрудникиСИндивидуальнымиГрафиками.НачалоПериода КАК НачалоПериодаИсходная,
	|	СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода КАК ОкончаниеПериодаИсходная
	|ПОМЕСТИТЬ ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками
	|ИЗ
	|	ВТПериодыГрафиков КАК СотрудникиСИндивидуальнымиГрафиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиковСлед
	|			ПО ПериодыГрафиков.Сотрудник = ПериодыГрафиковСлед.Сотрудник
	|				И ПериодыГрафиков.Период < ПериодыГрафиковСлед.Период
	|		ПО СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы = ПериодыГрафиков.Сотрудник
	|			И СотрудникиСИндивидуальнымиГрафиками.НачалоПериода <= ПериодыГрафиков.Период
	|			И СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода >= ПериодыГрафиков.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы,
	|	ПериодыГрафиков.ГрафикРаботы,
	|	ПериодыГрафиков.Период,
	|	СотрудникиСИндивидуальнымиГрафиками.НачалоПериода,
	|	СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода,
	|	ПериодыГрафиков.НачалоПериода КАК НачалоПериодаИсходная,
	|	ПериодыГрафиков.ОкончаниеПериода КАК ОкончаниеПериодаИсходная
	|ПОМЕСТИТЬ ВТПериодыПроизводственныхКалендарей
	|ИЗ
	|	ВТПериодыГрафиков КАК ПериодыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода,
	|	ПериодыГрафиков.НачалоПериодаИсходная,
	|	ПериодыГрафиков.ОкончаниеПериодаИсходная
	|ИЗ
	|	ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками КАК ПериодыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоШестидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейКалендарных,
	|	ПериодыПроизводственныхКалендарей.НачалоПериода,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериода,
	|	ПериодыПроизводственныхКалендарей.НачалоПериодаИсходная,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериодаИсходная,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|					И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейКалендарныхБезУчетаПраздников,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Праздников
	|ПОМЕСТИТЬ ВТДанныеПроизводственныхКалендарей
	|ИЗ
	|	ВТПериодыПроизводственныхКалендарей КАК ПериодыПроизводственныхКалендарей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПериодыПроизводственныхКалендарей.НачалоПериода <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПериодыПроизводственныхКалендарей.ОкончаниеПериода >= ДанныеПроизводственногоКалендаря.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь,
	|	ПериодыПроизводственныхКалендарей.НачалоПериодаИсходная,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериодаИсходная,
	|	ПериодыПроизводственныхКалендарей.НачалоПериода,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаряПоГрафикам.ГрафикРаботы,
	|	ДанныеПроизводственногоКалендаряПоГрафикам.НачалоПериода,
	|	ДанныеПроизводственногоКалендаряПоГрафикам.ОкончаниеПериода,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.ДнейПоПятидневке) КАК ДнейПоПятидневке,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.ЧасовПоПятидневке) КАК ЧасовПоПятидневке,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.ДнейПоШестидневке) КАК ДнейПоШестидневке,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.ДнейКалендарных) КАК ДнейКалендарных,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.ДнейКалендарныхБезУчетаПраздников) КАК ДнейКалендарныхБезУчетаПраздников,
	|	СУММА(ДанныеПроизводственногоКалендаряПоГрафикам.Праздников) КАК Праздников
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряПоГрафикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодыГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|		ПериодыГрафиков.НачалоПериода КАК НачалоПериода,
	|		ПериодыГрафиков.ОкончаниеПериода КАК ОкончаниеПериода,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.ДнейПоПятидневке, 0) КАК ДнейПоПятидневке,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.ЧасовПоПятидневке, 0) КАК ЧасовПоПятидневке,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.ДнейПоШестидневке, 0) КАК ДнейПоШестидневке,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.ДнейКалендарных, 0) КАК ДнейКалендарных,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.ДнейКалендарныхБезУчетаПраздников, 0) КАК ДнейКалендарныхБезУчетаПраздников,
	|		ЕСТЬNULL(ДанныеПроизводственныхКалендарей.Праздников, 0) КАК Праздников
	|	ИЗ
	|		ВТПериодыГрафиков КАК ПериодыГрафиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственныхКалендарей КАК ДанныеПроизводственныхКалендарей
	|			ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственныхКалендарей.ПроизводственныйКалендарь)
	|				И ПериодыГрафиков.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная
	|				И ПериодыГрафиков.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная
	|				И ПериодыГрафиков.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериода
	|				И ПериодыГрафиков.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.Сотрудник,
	|		ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная,
	|		ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная,
	|		ДанныеПроизводственныхКалендарей.ДнейПоПятидневке,
	|		ДанныеПроизводственныхКалендарей.ЧасовПоПятидневке,
	|		ДанныеПроизводственныхКалендарей.ДнейПоШестидневке,
	|		ДанныеПроизводственныхКалендарей.ДнейКалендарных,
	|		ДанныеПроизводственныхКалендарей.ДнейКалендарныхБезУчетаПраздников,
	|		ДанныеПроизводственныхКалендарей.Праздников
	|	ИЗ
	|		ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками КАК ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеПроизводственныхКалендарей КАК ДанныеПроизводственныхКалендарей
	|			ПО ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.НачалоПериодаИсходная = ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная
	|				И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ОкончаниеПериодаИсходная = ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная
	|				И (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственныхКалендарей.ПроизводственныйКалендарь)
	|				И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериода
	|				И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериода) КАК ДанныеПроизводственногоКалендаряПоГрафикам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПроизводственногоКалендаряПоГрафикам.ГрафикРаботы,
	|	ДанныеПроизводственногоКалендаряПоГрафикам.НачалоПериода,
	|	ДанныеПроизводственногоКалендаряПоГрафикам.ОкончаниеПериода";
	
	ТаблицыКУничтожению.Добавить("ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками");
	ТаблицыКУничтожению.Добавить("ВТПериодыПроизводственныхКалендарей");
	ТаблицыКУничтожению.Добавить("ВТДанныеПроизводственныхКалендарей");
	
	Запрос.Выполнить();	
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВТ, ТаблицыКУничтожению);
КонецПроцедуры	

// Помещает в менеджер временных таблиц таблицу ВТДатыПроизводственногоКалендаряПоГрафикам.
//
// Параметры:
//	МенеджерВТ - менеджер временных таблиц, содержащий следующие таблицы:
//		ВТПериодыГрафиков с полями:
//			ГрафикРаботы - график работы, по которому надо получить данные произв. календаря.
//			НачалоПериода - дата начала периода.
//			ОкончаниеПериода - дата окончания периода.
//
// Процедура помещает в менеджер временных таблиц таблицу
//	ВТДатыПроизводственногоКалендаряПоГрафикам с полями:
//		ГрафикРаботы - график работы.
//		НачалоПериода - дата начала периода.
//		ОкончаниеПериода - дата окончания периода.
//		Дата - дата по календарю
//		ДеньПоПятидневке - булево, Истина, если день на указанную дату является рабочим по пятидневной рабочей неделе
//		                   календаря.
//		ДеньПоШестидневке - булево, Истина, если день на указанную дату является рабочим по шестидневной рабочей неделе
//		                    календаря.
//		ЧасовПоПятидневке - количество рабочих часов по пятидневке в указанную дату.
//
Процедура СоздатьВТДатыПроизводственногоКалендаряПоГрафикам(МенеджерВТ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст =				   
 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
 	|	ПериодыГрафиков.ГрафикРаботы КАК Сотрудник,
 	|	ПериодыГрафиков.НачалоПериода КАК ДатаНачала,
 	|	ПериодыГрафиков.ОкончаниеПериода КАК ДатаОкончания
 	|ПОМЕСТИТЬ ВТИзмеренияДатыДляТаблицыРегистра
 	|ИЗ
 	|	ВТПериодыГрафиков КАК ПериодыГрафиков
 	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
 	|		ПО ПериодыГрафиков.ГрафикРаботы = Сотрудники.Ссылка";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДатыДляТаблицыРегистра",
			"Сотрудник"),
		ПараметрыПостроения,
		"ВТГрафикиСотрудниковСрезИДвижения");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы КАК Сотрудник,
	|	ПериодыГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыГрафиков.Период КАК НачалоПериода,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПериодыГрафиковСлед.Период ЕСТЬ NULL 
	|					ИЛИ ПериодыГрафиковСлед.Период > СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|				ТОГДА СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыГрафиковСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ОкончаниеПериода,
	|	СотрудникиСИндивидуальнымиГрафиками.НачалоПериода КАК НачалоПериодаИсходная,
	|	СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода КАК ОкончаниеПериодаИсходная
	|ПОМЕСТИТЬ ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками
	|ИЗ
	|	ВТПериодыГрафиков КАК СотрудникиСИндивидуальнымиГрафиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиковСлед
	|			ПО ПериодыГрафиков.Сотрудник = ПериодыГрафиковСлед.Сотрудник
	|				И ПериодыГрафиков.Период < ПериодыГрафиковСлед.Период
	|		ПО СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы = ПериодыГрафиков.Сотрудник
	|			И СотрудникиСИндивидуальнымиГрафиками.НачалоПериода <= ПериодыГрафиков.Период
	|			И СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода >= ПериодыГрафиков.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиСИндивидуальнымиГрафиками.ГрафикРаботы,
	|	ПериодыГрафиков.ГрафикРаботы,
	|	ПериодыГрафиков.Период,
	|	СотрудникиСИндивидуальнымиГрафиками.НачалоПериода,
	|	СотрудникиСИндивидуальнымиГрафиками.ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода,
	|	ПериодыГрафиков.НачалоПериода КАК НачалоПериодаИсходная,
	|	ПериодыГрафиков.ОкончаниеПериода КАК ОкончаниеПериодаИсходная
	|ПОМЕСТИТЬ ВТПериодыПроизводственныхКалендарей
	|ИЗ
	|	ВТПериодыГрафиков КАК ПериодыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ПериодыГрафиков.НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода,
	|	ПериодыГрафиков.НачалоПериодаИсходная,
	|	ПериодыГрафиков.ОкончаниеПериодаИсходная
	|ИЗ
	|	ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками КАК ПериодыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь,
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеньПоПятидневке,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 7
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|			ТОГДА 8
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеньПоШестидневке,
	|	ВЫБОР
	|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДеньПраздничный,
	|	ПериодыПроизводственныхКалендарей.НачалоПериода,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериода,
	|	ПериодыПроизводственныхКалендарей.НачалоПериодаИсходная,
	|	ПериодыПроизводственныхКалендарей.ОкончаниеПериодаИсходная
	|ПОМЕСТИТЬ ВТДатыПроизводственныхКалендарей
	|ИЗ
	|	ВТПериодыПроизводственныхКалендарей КАК ПериодыПроизводственныхКалендарей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПериодыПроизводственныхКалендарей.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПериодыПроизводственныхКалендарей.НачалоПериода <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПериодыПроизводственныхКалендарей.ОкончаниеПериода >= ДанныеПроизводственногоКалендаря.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыГрафиков.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыГрафиков.НачалоПериода КАК НачалоПериода,
	|	ПериодыГрафиков.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеПроизводственныхКалендарей.Дата,
	|	ДанныеПроизводственныхКалендарей.ДеньПоПятидневке,
	|	ДанныеПроизводственныхКалендарей.ЧасовПоПятидневке,
	|	ДанныеПроизводственныхКалендарей.ДеньПоШестидневке,
	|	ДанныеПроизводственныхКалендарей.ДеньПраздничный
	|ПОМЕСТИТЬ ВТДатыПроизводственногоКалендаряПоГрафикам
	|ИЗ
	|	ВТПериодыГрафиков КАК ПериодыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственныхКалендарей КАК ДанныеПроизводственныхКалендарей
	|		ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственныхКалендарей.ПроизводственныйКалендарь)
	|			И ПериодыГрафиков.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная
	|			И ПериодыГрафиков.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная
	|			И ПериодыГрафиков.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериода
	|			И ПериодыГрафиков.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.Сотрудник,
	|	ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная,
	|	ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная,
	|	ДанныеПроизводственныхКалендарей.Дата,
	|	ДанныеПроизводственныхКалендарей.ДеньПоПятидневке,
	|	ДанныеПроизводственныхКалендарей.ЧасовПоПятидневке,
	|	ДанныеПроизводственныхКалендарей.ДеньПоШестидневке,
	|	ДанныеПроизводственныхКалендарей.ДеньПраздничный
	|ИЗ
	|	ВТОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками КАК ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПроизводственныхКалендарей КАК ДанныеПроизводственныхКалендарей
	|		ПО ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.НачалоПериодаИсходная = ДанныеПроизводственныхКалендарей.НачалоПериодаИсходная
	|			И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ОкончаниеПериодаИсходная = ДанныеПроизводственныхКалендарей.ОкончаниеПериодаИсходная
	|			И (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственныхКалендарей.ПроизводственныйКалендарь)
	|			И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.НачалоПериода = ДанныеПроизводственныхКалендарей.НачалоПериода
	|			И ОбщиеГрафикиСотрудниковСИндивидуальнымиГрафиками.ОкончаниеПериода = ДанныеПроизводственныхКалендарей.ОкончаниеПериода";
	
	Запрос.Выполнить();	
	
КонецПроцедуры	

// Возвращает структуру с параметрами для метода СоздатьВТКалендарноеВремяСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяТаблицыПериодовСотрудников - имя временной таблицы - "фильтра".
//		ИмяПоляСотрудник - имя поля сотрудника для отбора.
//      ИмяПоляДатаНачала - имя поля даты начала периоды выборки данных.
//		ИмяПоляДатаОкончания - имя поля даты окончания выборки данных.
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяТаблицыПериодовСотрудников - имя временной таблицы отборов сотрудников.
//			ИмяПоляСотрудник - имя поля сотрудника для отбора.
//	        ИмяПоляДатаНачала - имя поля даты начала периоды выборки данных.
//			ИмяПоляДатаОкончания - имя поля даты окончания выборки данных.
//
Функция ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников(МенеджерВременныхТаблиц, ИмяТаблицыПериодовСотрудников, ИмяПоляСотрудник = "Сотрудник", ИмяПоляДатаНачала = "ДатаНачала", ИмяПоляДатаОкончания = "ДатаОкончания") Экспорт
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяТаблицыПериодовСотрудников", ИмяТаблицыПериодовСотрудников);
	ОписательВременныхТаблиц.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ОписательВременныхТаблиц.Вставить("ИмяПоляДатаНачала", ИмяПоляДатаНачала);
	ОписательВременныхТаблиц.Вставить("ИмяПоляДатаОкончания", ИмяПоляДатаОкончания);
	
	Возврат ОписательВременныхТаблиц;
КонецФункции	

// Создает и помещает в менеджер временных таблиц
//  таблицу ВТКалендарноеВремяСотрудников с данными производственного календаря 
//	сотрудников за период. Список сотрудников и периодов,
//  по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
//  таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
//  колонки имена которых переданы в метод ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКалендарноеВремяСотрудников.
//		ТолькоРазрешенные - Булево
//	
// Помещает в менеджер таблицу ВТКалендарноеВремяСотрудников,
//	содержащую данные о времени сотрудников по производственным календарям с полями:
//		Сотрудник, 
//		ДатаНачала, 
//		ДатаОкончания, 
//		КалендарныхДнейВПериоде, 
//		КалендарныхДнейВПериодеБезУчетаПраздников
//		РабочихДнейВПериоде.
//
Процедура СоздатьВТКалендарноеВремяСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Сотрудник,
	|	ИсточникДанных.ДатаНачала КАК ДатаНачала,
	|	ИсточникДанных.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиПериодыСрезаДвижений
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ОписательВременныхТаблиц.ИмяТаблицыПериодовСотрудников); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Сотрудник", "." + ОписательВременныхТаблиц.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаНачала", "." + ОписательВременныхТаблиц.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ДатаОкончания", "." + ОписательВременныхТаблиц.ИмяПоляДатаОкончания);
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиПериодыСрезаДвижений", "Сотрудник");
	
	ПараметрыСреза = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыСреза.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыСреза);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ГрафикРаботыСотрудников.Период,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТПроизводственныеКалендариСотрудников
	|ИЗ
	|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ГрафикРаботыСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныеКалендариСотрудников.Сотрудник,
	|	ПроизводственныеКалендариСотрудников.Период КАК ДатаНачалаДействияКалендаря,
	|	ПроизводственныеКалендариСотрудников.ПроизводственныйКалендарь,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПроизводственныеКалендариСотрудниковСлед.Период ЕСТЬ NULL 
	|				ТОГДА СотрудникиПериодыСрезаДвижений.ДатаОкончания
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПроизводственныеКалендариСотрудниковСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ДатаОкончанияДействияКалендаря,
	|	СотрудникиПериодыСрезаДвижений.ДатаОкончания КАК ДатаОкончания,
	|	СотрудникиПериодыСрезаДвижений.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВТПериодыДействияКалендарейСотрудников
	|ИЗ
	|	ВТСотрудникиПериодыСрезаДвижений КАК СотрудникиПериодыСрезаДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроизводственныеКалендариСотрудников КАК ПроизводственныеКалендариСотрудников
	|		ПО СотрудникиПериодыСрезаДвижений.Сотрудник = ПроизводственныеКалендариСотрудников.Сотрудник
	|			И СотрудникиПериодыСрезаДвижений.ДатаНачала <= ПроизводственныеКалендариСотрудников.Период
	|			И СотрудникиПериодыСрезаДвижений.ДатаОкончания >= ПроизводственныеКалендариСотрудников.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроизводственныеКалендариСотрудников КАК ПроизводственныеКалендариСотрудниковСлед
	|		ПО (ПроизводственныеКалендариСотрудников.Сотрудник = ПроизводственныеКалендариСотрудниковСлед.Сотрудник)
	|			И (ПроизводственныеКалендариСотрудников.Период < ПроизводственныеКалендариСотрудниковСлед.Период)
	|			И (ПроизводственныеКалендариСотрудниковСлед.Период >= СотрудникиПериодыСрезаДвижений.ДатаНачала)
	|			И (ПроизводственныеКалендариСотрудниковСлед.Период <= СотрудникиПериодыСрезаДвижений.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственныеКалендариСотрудников.Сотрудник,
	|	ПроизводственныеКалендариСотрудников.Период,
	|	ПроизводственныеКалендариСотрудников.ПроизводственныйКалендарь,
	|	СотрудникиПериодыСрезаДвижений.ДатаОкончания,
	|	СотрудникиПериодыСрезаДвижений.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДействияКалендарейСотрудников.Сотрудник,
	|	ПериодыДействияКалендарейСотрудников.ДатаНачала,
	|	ПериодыДействияКалендарейСотрудников.ДатаОкончания,
	|	ДанныеПроизводственногоКалендаряПомесячно.РабочихДней КАК НормаДнейЗаМесяц,
	|	ДанныеПроизводственногоКалендаряПомесячно.РабочихЧасовДлительностьНедели40Часов КАК НормаЧасовЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КалендарныхДнейВПериоде,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочихДнейВПериоде,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КалендарныхДнейВПериодеБезУчетаПраздников
	|ПОМЕСТИТЬ ВТКалендарноеВремяСотрудников
	|ИЗ
	|	ВТПериодыДействияКалендарейСотрудников КАК ПериодыДействияКалендарейСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО ПериодыДействияКалендарейСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И ПериодыДействияКалендарейСотрудников.ДатаНачалаДействияКалендаря <= ДанныеПроизводственногоКалендаря.Дата
	|			И ПериодыДействияКалендарейСотрудников.ДатаОкончанияДействияКалендаря >= ДанныеПроизводственногоКалендаря.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаряПомесячно КАК ДанныеПроизводственногоКалендаряПомесячно
	|		ПО ПериодыДействияКалендарейСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаряПомесячно.ПроизводственныйКалендарь
	|			И (НАЧАЛОПЕРИОДА(ПериодыДействияКалендарейСотрудников.ДатаНачала, МЕСЯЦ) = ДанныеПроизводственногоКалендаряПомесячно.Месяц)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияКалендарейСотрудников.Сотрудник,
	|	ПериодыДействияКалендарейСотрудников.ДатаНачала,
	|	ПериодыДействияКалендарейСотрудников.ДатаОкончания,
	|	ДанныеПроизводственногоКалендаряПомесячно.РабочихДней,
	|	ДанныеПроизводственногоКалендаряПомесячно.РабочихЧасовДлительностьНедели40Часов";
	
	Запрос.Выполнить();

КонецПроцедуры	

// Процедура помещает временную таблицу 
//	ВТВремяСотрудников с полями:
//		Сотрудник
//		ДатаНачалаПериода
//		ДатаОкончанияПериода
//		ОтработаноДней,
//		ОтработаноЧасов,
//		ОтработаноЧасов,
//		ПроизводственныйКалендарьПятидневкаЧасы,
//		ОтработаноДнейШестидневка,
//		НормаДней,
//		НормаЧасов,
//		ОтработаноДнейКалендарных,
//		СуммированныйУчетРабочегоВремени
//		ОтработаноДнейПоПроизводственномуКалендарю,
//		ОтработаноЧасовПоПроизводственномуКалендарю
//		НормаДнейПоПроизводственномуКалендарю,
//		НормаЧасовПоПроизводственномуКалендарю
//	
// Параметры:
//	ТаблицаСотрудников - ТаблицаЗначений с полями.
//		Сотрудник 
//		ДатаНачалаПериода
//		ДатаОкончанияПериода
//		ВидВремени - необязательный, если в таблице нет этой
//					 колонки, то будет использован РабочееВремя.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	УчитыватьДанныеПослеУвольнения - Булево, определяет будут ли включены данные графика
//										за даты после увольнения сотрудника в результирующие данные.
//
Процедура СоздатьВТВремяПоГрафикамСотрудников(ТаблицаСотрудников, МенеджерВременныхТаблиц, УчитыватьДанныеПослеУвольнения = Ложь) Экспорт
	
	Если ТаблицаСотрудников.Колонки.Найти("ВидВремени") = Неопределено Тогда 
		ТаблицаСотрудников.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
		ТаблицаСотрудников.ЗаполнитьЗначения(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"), "ВидВремени");
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", Справочники.ПроизводственныеКалендари.ПустаяСсылка());
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСотрудников.ДатаНачалаПериода,
	|	ТаблицаСотрудников.ДатаОкончанияПериода,
	|	ТаблицаСотрудников.ВидВремени,
	|	ТаблицаСотрудников.Сотрудник
	|ПОМЕСТИТЬ ВТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Сотрудники.ДатаНачалаПериода) КАК Период,
	|	Сотрудники.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиПериоды
	|ИЗ
	|	ВТаблицаСотрудников КАК Сотрудники
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник";
	               				   
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
		
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудниковДляДанныхКалендарей";	
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаПриема,ДатаЗавершенияРаботы");
	
	Запрос.УстановитьПараметр("УчитыватьДанныеПослеУвольнения", УчитыватьДанныеПослеУвольнения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ВЫБОР
	|		КОГДА ТаблицаСотрудников.ДатаНачалаПериода < КадровыеДанныеСотрудников.ДатаПриема
	|			ТОГДА КадровыеДанныеСотрудников.ДатаПриема
	|		ИНАЧЕ ТаблицаСотрудников.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериодаРаботы,
	|	ВЫБОР
	|		КОГДА &УчитыватьДанныеПослеУвольнения
	|			ТОГДА ТаблицаСотрудников.ДатаОкончанияПериода
	|		КОГДА КадровыеДанныеСотрудников.ДатаЗавершенияРаботы <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ТаблицаСотрудников.ДатаОкончанияПериода > КадровыеДанныеСотрудников.ДатаЗавершенияРаботы
	|			ТОГДА КадровыеДанныеСотрудников.ДатаЗавершенияРаботы
	|		ИНАЧЕ ТаблицаСотрудников.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериодаРаботы,
	|	ТаблицаСотрудников.ВидВремени,
	|	ТаблицаСотрудников.ДатаНачалаПериода,
	|	ТаблицаСотрудников.ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТаблицаСотрудников КАК ТаблицаСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудниковДляДанныхКалендарей КАК КадровыеДанныеСотрудников
	|		ПО ТаблицаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник";
	
	Запрос.Выполнить();

	ИзмеренияДаты = Новый Массив;
	ИзмеренияДаты.Добавить("Сотрудник");
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды",
			"Сотрудник"));
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПервых.Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПервых.Период,
	|	ГрафикРаботыСотрудниковСрезПервых.ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиРаботыСотрудниковСрезы
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПервых КАК ГрафикРаботыСотрудниковСрезПервых
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	|		ПО ГрафикРаботыСотрудниковСрезПервых.Сотрудник = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
	|ГДЕ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПоследних.Период,
	|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудниковСрезы.Сотрудник,
	|	МАКСИМУМ(ГрафикиРаботыСотрудниковСрезы.Период) КАК Период
	|ПОМЕСТИТЬ ВТДатыГрафиков
	|ИЗ
	|	ВТГрафикиРаботыСотрудниковСрезы КАК ГрафикиРаботыСотрудниковСрезы
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыСотрудниковСрезы.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудниковСрезы.Сотрудник,
	|	ГрафикиРаботыСотрудниковСрезы.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиЧасов,
	|	ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияГрафиковРаботыСотрудников.ПоЦикламПроизвольнойДлины)
	|			ТОГДА 5
	|		КОГДА ГрафикиРаботыСотрудников.РабочихДнейВНеделе = 6
	|			ТОГДА 6
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК РабочихДнейВНеделе
	|ПОМЕСТИТЬ ВТГрафикиРаботыСотрудников
	|ИЗ
	|	ВТДатыГрафиков КАК ДатаГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудниковСрезы КАК ГрафикиРаботыСотрудниковСрезы
	|		ПО ДатаГрафиков.Сотрудник = ГрафикиРаботыСотрудниковСрезы.Сотрудник
	|			И ДатаГрафиков.Период = ГрафикиРаботыСотрудниковСрезы.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудниковСрезы.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКалендарей.Сотрудник,
	|	ДанныеКалендарей.ДатаНачалаПериода,
	|	ДанныеКалендарей.ДатаОкончанияПериода,
	|	ДанныеКалендарей.ОтработаноДнейПятидневка КАК ОтработаноДнейПятидневка,
	|	ДанныеКалендарей.ОтработаноДнейШестидневка КАК ОтработаноДнейШестидневка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 5 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейПятидневка, 0) > ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|			ТОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 5 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейПятидневка, 0) - ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроизводственныйКалендарьПятидневкаЧасы,
	|	ВЫБОР
	|		КОГДА ДанныеКалендарей.РабочихДнейВНеделе = 5
	|			ТОГДА ДанныеКалендарей.ОтработаноДнейПятидневка
	|		ИНАЧЕ ДанныеКалендарей.ОтработаноДнейШестидневка
	|	КОНЕЦ КАК ОтработаноДнейПоПроизводственномуКалендарю,
	|	ВЫБОР
	|		КОГДА ДанныеКалендарей.РабочихДнейВНеделе = 5
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 5 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейПятидневка, 0) > ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|						ТОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 5 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейПятидневка, 0) - ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 6 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейШестидневка, 0) > ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|					ТОГДА ЕСТЬNULL(ДанныеКалендарей.ДлительностьРабочейНеделиЧасов, 0) / 6 * ЕСТЬNULL(ДанныеКалендарей.ОтработаноДнейШестидневка, 0) - ЕСТЬNULL(ДанныеКалендарей.ПредпраздничныеДни, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ОтработаноЧасовПоПроизводственномуКалендарю
	|ПОМЕСТИТЬ ВТДанныеКалендарей
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВЫБОР
	|				КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноДнейПятидневка,
	|		СУММА(ВЫБОР
	|				КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|						ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|						ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ОтработаноДнейШестидневка,
	|		СУММА(ВЫБОР
	|				КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК ПредпраздничныеДни,
	|		МАКСИМУМ(ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов) КАК ДлительностьРабочейНеделиЧасов,
	|		Сотрудники.Сотрудник КАК Сотрудник,
	|		Сотрудники.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		Сотрудники.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|		МАКСИМУМ(ГрафикиРаботыСотрудников.РабочихДнейВНеделе) КАК РабочихДнейВНеделе
	|	ИЗ
	|		ВТСотрудники КАК Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО Сотрудники.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|			ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|				И (ДанныеПроизводственногоКалендаря.Дата >= Сотрудники.ДатаНачалаПериодаРаботы)
	|				И (ДанныеПроизводственногоКалендаря.Дата <= Сотрудники.ДатаОкончанияПериодаРаботы)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Сотрудники.Сотрудник,
	|		Сотрудники.ДатаНачалаПериода,
	|		Сотрудники.ДатаОкончанияПериода) КАК ДанныеКалендарей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеГрафиков.Сотрудник,
	|	ДанныеГрафиков.ДатаНачалаПериода,
	|	ДанныеГрафиков.ДатаОкончанияПериода,
	|	СУММА(ДанныеГрафиков.ОтработаноДней) КАК ОтработаноДней,
	|	СУММА(ДанныеГрафиков.ОтработаноЧасов) КАК ОтработаноЧасов,
	|	СУММА(ДанныеГрафиков.ОтработаноДнейПятидневка) КАК ОтработаноДнейПятидневка,
	|	СУММА(ДанныеГрафиков.ПроизводственныйКалендарьПятидневкаЧасы) КАК ПроизводственныйКалендарьПятидневкаЧасы,
	|	СУММА(ДанныеГрафиков.ОтработаноДнейШестидневка) КАК ОтработаноДнейШестидневка,
	|	СУММА(ДанныеГрафиков.НормаДней) КАК НормаДней,
	|	СУММА(ДанныеГрафиков.НормаЧасов) КАК НормаЧасов,
	|	РАЗНОСТЬДАТ(ДанныеГрафиков.ДатаНачалаПериода, ДанныеГрафиков.ДатаОкончанияПериода, ДЕНЬ) + 1 КАК ОтработаноДнейКалендарных,
	|	МАКСИМУМ(ДанныеГрафиков.СуммированныйУчетРабочегоВремени) КАК СуммированныйУчетРабочегоВремени,
	|	СУММА(ДанныеГрафиков.ОтработаноДнейПоПроизводственномуКалендарю) КАК ОтработаноДнейПоПроизводственномуКалендарю,
	|	СУММА(ДанныеГрафиков.ОтработаноЧасовПоПроизводственномуКалендарю) КАК ОтработаноЧасовПоПроизводственномуКалендарю,
	|	СУММА(ДанныеГрафиков.НормаДнейПроизводственныйКалендарь) КАК НормаДнейПоПроизводственномуКалендарю,
	|	СУММА(ДанныеГрафиков.НормаЧасовПроизводственныйКалендарь) КАК НормаЧасовПоПроизводственномуКалендарю
	|ПОМЕСТИТЬ ВТВремяПоГрафикамСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сотрудники.Сотрудник КАК Сотрудник,
	|		Сотрудники.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|		Сотрудники.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|		ВЫБОР
	|			КОГДА ДанныеГрафиковСотрудников.Дата ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА ДанныеГрафиковСотрудников.Дата >= Сотрудники.ДатаНачалаПериодаРаботы
	|					И ДанныеГрафиковСотрудников.Дата <= Сотрудники.ДатаОкончанияПериодаРаботы
	|				ТОГДА ДанныеГрафиковСотрудников.ОсновноеЗначение
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтработаноДней,
	|		ВЫБОР
	|			КОГДА ДанныеГрафиковСотрудников.Дата ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА ДанныеГрафиковСотрудников.Дата >= Сотрудники.ДатаНачалаПериодаРаботы
	|					И ДанныеГрафиковСотрудников.Дата <= Сотрудники.ДатаОкончанияПериодаРаботы
	|				ТОГДА ДанныеГрафиковСотрудников.ДополнительноеЗначение
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОтработаноЧасов,
	|		ЕСТЬNULL(ДанныеГрафиковСотрудников.ОсновноеЗначение, 0) КАК НормаДней,
	|		ЕСТЬNULL(ДанныеГрафиковСотрудников.ДополнительноеЗначение, 0) КАК НормаЧасов,
	|		0 КАК ОтработаноДнейПятидневка,
	|		0 КАК ПроизводственныйКалендарьПятидневкаЧасы,
	|		0 КАК ОтработаноДнейШестидневка,
	|		ГрафикиРаботыСотрудников.СуммированныйУчетРабочегоВремени КАК СуммированныйУчетРабочегоВремени,
	|		0 КАК ОтработаноДнейПоПроизводственномуКалендарю,
	|		0 КАК ОтработаноЧасовПоПроизводственномуКалендарю,
	|		0 КАК НормаДнейПроизводственныйКалендарь,
	|		0 КАК НормаЧасовПроизводственныйКалендарь
	|	ИЗ
	|		ВТСотрудники КАК Сотрудники
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО Сотрудники.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ДанныеГрафиковСотрудников
	|			ПО (ГрафикиРаботыСотрудников.ГрафикРаботы = ДанныеГрафиковСотрудников.ГрафикРаботы)
	|				И (ДанныеГрафиковСотрудников.Дата >= НАЧАЛОПЕРИОДА(Сотрудники.ДатаНачалаПериода, МЕСЯЦ))
	|				И (ДанныеГрафиковСотрудников.Дата <= КОНЕЦПЕРИОДА(Сотрудники.ДатаОкончанияПериода, МЕСЯЦ))
	|				И Сотрудники.ВидВремени = ДанныеГрафиковСотрудников.ВидУчетаВремени
	|				И (НЕ ДанныеГрафиковСотрудников.ВремяВЧасах)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКалендарей.Сотрудник,
	|		ДанныеКалендарей.ДатаНачалаПериода,
	|		ДанныеКалендарей.ДатаОкончанияПериода,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ДанныеКалендарей.ОтработаноДнейПятидневка,
	|		ДанныеКалендарей.ПроизводственныйКалендарьПятидневкаЧасы,
	|		ДанныеКалендарей.ОтработаноДнейШестидневка,
	|		ЛОЖЬ,
	|		ДанныеКалендарей.ОтработаноДнейПоПроизводственномуКалендарю,
	|		ДанныеКалендарей.ОтработаноЧасовПоПроизводственномуКалендарю,
	|		0,
	|		0
	|	ИЗ
	|		ВТДанныеКалендарей КАК ДанныеКалендарей
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСотрудников.Сотрудник,
	|		ТаблицаСотрудников.ДатаНачалаПериода,
	|		ТаблицаСотрудников.ДатаОкончанияПериода,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		ДанныеПроизводственногоКалендаряПомесячно.РабочихДней,
	|		ДанныеПроизводственногоКалендаряПомесячно.РабочихЧасовДлительностьНедели40Часов
	|	ИЗ
	|		ВТСотрудники КАК ТаблицаСотрудников
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|			ПО (ГрафикиРаботыСотрудников.Сотрудник = ТаблицаСотрудников.Сотрудник)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаряПомесячно КАК ДанныеПроизводственногоКалендаряПомесячно
	|			ПО (ДанныеПроизводственногоКалендаряПомесячно.ПроизводственныйКалендарь = ГрафикиРаботыСотрудников.ПроизводственныйКалендарь)
	|				И (ДанныеПроизводственногоКалендаряПомесячно.Год = ГОД(ТаблицаСотрудников.ДатаНачалаПериода))
	|				И (ДанныеПроизводственногоКалендаряПомесячно.Месяц = НАЧАЛОПЕРИОДА(ТаблицаСотрудников.ДатаНачалаПериода, МЕСЯЦ))) КАК ДанныеГрафиков
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеГрафиков.Сотрудник,
	|	ДанныеГрафиков.ДатаНачалаПериода,
	|	ДанныеГрафиков.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудники";
		
	Запрос.Выполнить();			
	
КонецПроцедуры	

// Функция возвращает структуру параметров для метода ДобавитьОписаниеПоляНормыВремени.
//
//	Параметры:
//		ИмяПоляНорма - имя поля содержащего значение нормы времени,
//		ИмяПоляПериод - имя поля содержащего месяц за который получено значение нормы времени.
//	
// Возвращаемое значение	
//	Структура с полями:
//		ИмяВТНормаВремени - имя временной таблицы, содержащей данные о норме времени.
//		ИмяПоляПериод - имя поля содержащего месяц за который получено значение нормы времени.
//		ОписаниеПолейНормыВремени - массив структур с полями.
//			- ИмяПоляНорма - имя поля содержащего значение нормы времени.
//			= ИмяПоляИсточникаДанныхНормы - имя поля содержащего ссылку на источник данных нормы
//				допустимые типы: СправочникСсылка.Сотрудники (индивидуальные графики),
//								 СправочникСсылка.ГрафикиРаботыСотрудников (общие графики)	
//								 СправочникСсылка.ПроизводственныеКалендари (производственные календари).
//		 Для добавления	элемента описания поля в массив нужно использовать метод ДобавитьОписаниеПоляНормыВремени.
//
Функция ПараметрыДляПроверитьЗаполнениеНормыВремени(ИмяВТНормаВремени, ИмяПоляПериод) Экспорт
	Возврат Новый Структура("ИмяВТНормаВремени, ИмяПоляПериод, ОписаниеПолейНормыВремени", ИмяВТНормаВремени, ИмяПоляПериод, Новый Массив);	
КонецФункции

// Добавляет в описание поля нормы времени в параметры проверки нормы.
//	
//	Параметры:
//		ПараметрыПроверкиНормы - структура (см. описание метода ПараметрыДляПроверитьЗаполнениеНормыВремени).
//			ИмяПоляНорма - имя поля содержащего значение нормы времени.
//			ИмяПоляИсточникаДанныхНормы - имя поля содержащего ссылку на источник данных нормы.
//		
Процедура ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверкиНормы, ИмяПоляНорма, ИмяПоляИсточникаДанныхНормы) Экспорт
	ОписаниеПоля = Новый Структура("ИмяПоляНорма, ИмяПоляИсточникаДанныхНормы", ИмяПоляНорма, ИмяПоляИсточникаДанныхНормы);
	
	ПараметрыПроверкиНормы.ОписаниеПолейНормыВремени.Добавить(ОписаниеПоля);
КонецПроцедуры	

// Помещает в менеджер временных таблиц таблицу ВТДанныеГрафиков,
// данные графиков сотрудников.
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий следующие таблицы:
//		ВТСотрудники с полями:
//			Период - дата, на которую необходимо получить данные.
//			Сотрудник
//
// Процедура помещает в менеджер временных таблиц таблицу
//	ВТДанныеГрафиков с полями:
//		Период
//		Сотрудник
//		НормаДнейКалендаряМесяц - норма дней по производственному календарю за месяц.
//		НормаЧасовКалендаряМесяц - норма часов по производственному календарю за месяц.
//		НормаДнейКалендаряГод - норма дней по производственному календарю за год.
//      НормаЧасовКалендаряГод - норма часов по производственному календарю за год.
//      НормаДнейГрафикаМесяц - норма дней по графику работы за месяц
//		НормаЧасовГрафикаМесяц = норма часов по графику работы за месяц.
//      НормаДнейПолногоГрафикаМесяц - норма дней по графику полного времени за месяц 
//										(если для сотрудника не установлен график сокращенного рабочего времени, то значение будет совпадать с НормаДнейГрафикаМесяц)
//		НормаЧасовПолногоГрафикаМесяц = норма часов по графику работы за месяц.
//										(если для сотрудника не установлен график сокращенного рабочего времени, то значение будет совпадать с НормаЧасовГрафикаМесяц).
//
Процедура СоздатьВТНормыВремениГрафиковКалендарей(МенеджерВТ) Экспорт	
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГрафикРаботыСотрудников",
		МенеджерВТ,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудники",
			"Сотрудник"),
		ПараметрыПостроения);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	НАЧАЛОПЕРИОДА(Сотрудники.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТПериодыОпределенияНаличияИндивидуальныхСведений
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыОпределенияНаличияИндивидуальныхСведений.Сотрудник,
	|	ПериодыОпределенияНаличияИндивидуальныхСведений.Месяц
	|ПОМЕСТИТЬ ВТСотрудникиСИндивидуальнымиГрафиками
	|ИЗ
	|	ВТПериодыОпределенияНаличияИндивидуальныхСведений КАК ПериодыОпределенияНаличияИндивидуальныхСведений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников
	|		ПО ПериодыОпределенияНаличияИндивидуальныхСведений.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Сотрудник
	|			И ПериодыОпределенияНаличияИндивидуальныхСведений.Месяц = ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Месяц
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудниковСрезПоследних.Период, МЕСЯЦ) КАК Месяц,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиСИндивидуальнымиГрафиками.Сотрудник ЕСТЬ NULL 
	|			ТОГДА СотрудникиСИндивидуальнымиГрафиками.Сотрудник
	|		КОГДА ОписаниеГрафиков.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ОписаниеГрафиков.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикПолногоВремени,
	|	ВЫБОР
	|		КОГДА НЕ СотрудникиСИндивидуальнымиГрафиками.Сотрудник ЕСТЬ NULL 
	|			ТОГДА СотрудникиСИндивидуальнымиГрафиками.Сотрудник
	|		ИНАЧЕ ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ГрафикРаботыСотрудниковСрезПоследних.Период,
	|	ВЫБОР
	|		КОГДА ОписаниеГрафиков.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ОписаниеГрафиков.ДлительностьРабочейНедели
	|		ИНАЧЕ ЕСТЬNULL(ОписаниеГрафиковПолногоВремени.ДлительностьРабочейНедели, 0)
	|	КОНЕЦ КАК ДлительностьРабочейНеделиЧасов,
	|	5 КАК ДлительностьРабочейНеделиДней,
	|	ОписаниеГрафиков.ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТГрафикиРаботыСотрудников
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ОписаниеГрафиков
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ОписаниеГрафиковПолногоВремени
	|			ПО ОписаниеГрафиков.ГрафикПолногоРабочегоВремени = ОписаниеГрафиковПолногоВремени.Ссылка
	|		ПО ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы = ОписаниеГрафиков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиСИндивидуальнымиГрафиками КАК СотрудникиСИндивидуальнымиГрафиками
	|		ПО ГрафикРаботыСотрудниковСрезПоследних.Сотрудник = СотрудникиСИндивидуальнымиГрафиками.Сотрудник
	|			И (НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудниковСрезПоследних.Период, МЕСЯЦ) = СотрудникиСИндивидуальнымиГрафиками.Месяц)
	|ГДЕ
	|	НЕ ОписаниеГрафиков.ПроизводственныйКалендарь ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.Месяц,
	|	ГрафикиРаботыСотрудников.ГрафикРаботы
	|ПОМЕСТИТЬ ВТГрафикиРаботы
	|ИЗ
	|	ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.Месяц,
	|	ГрафикиРаботыСотрудников.ГрафикПолногоВремени
	|ИЗ
	|	ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ГрафикиРаботыСотрудников.Месяц
	|ПОМЕСТИТЬ ВТКалендари
	|ИЗ
	|	ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.ГрафикРаботы,
	|	ГрафикиРаботы.Месяц,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма) КАК НормаДнейГрафикаМесяц,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма) КАК НормаЧасовГрафикаМесяц
	|ПОМЕСТИТЬ ВТДанныеГрафиковРаботы
	|ИЗ
	|	ВТГрафикиРаботы КАК ГрафикиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботы.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ГрафикиРаботы.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя)
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботы.ГрафикРаботы,
	|	ГрафикиРаботы.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, МЕСЯЦ) И КОНЕЦПЕРИОДА(Календари.Месяц, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряГод,
	|	Календари.ПроизводственныйКалендарь,
	|	Календари.Месяц
	|ПОМЕСТИТЬ ВТДанныеКалендарей
	|ИЗ
	|	ВТКалендари КАК Календари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО Календари.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(Календари.Месяц, ГОД) И КОНЕЦПЕРИОДА(Календари.Месяц, ГОД))
	|			И (ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Календари.ПроизводственныйКалендарь,
	|	Календари.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботыСотрудников.Сотрудник,
	|	ГрафикиРаботыСотрудников.Период,
	|	ДанныеКалендарей.НормаДнейКалендаряМесяц КАК НормаДнейКалендаряМесяц,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов ЕСТЬ NULL 
	|				ИЛИ ДанныеКалендарей.НормаДнейКалендаряМесяц ЕСТЬ NULL 
	|			ТОГДА NULL
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряМесяц > ДанныеКалендарей.ПредпраздничныеДниМесяца
	|					ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряМесяц - ДанныеКалендарей.ПредпраздничныеДниМесяца
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НормаЧасовКалендаряМесяц,
	|	ДанныеКалендарей.НормаДнейКалендаряГод КАК НормаДнейКалендаряГод,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов ЕСТЬ NULL 
	|				ИЛИ ДанныеКалендарей.НормаДнейКалендаряГод ЕСТЬ NULL 
	|			ТОГДА NULL
	|		КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряГод > ДанныеКалендарей.ПредпраздничныеДниГода
	|					ТОГДА ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиЧасов / ГрафикиРаботыСотрудников.ДлительностьРабочейНеделиДней * ДанныеКалендарей.НормаДнейКалендаряГод - ДанныеКалендарей.ПредпраздничныеДниГода
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НормаЧасовКалендаряГод,
	|	ДанныеГрафиков.НормаДнейГрафикаМесяц КАК НормаДнейГрафикаМесяц,
	|	ДанныеГрафиков.НормаЧасовГрафикаМесяц КАК НормаЧасовГрафикаМесяц,
	|	ДанныеГрафиковПолногоВремени.НормаДнейГрафикаМесяц КАК НормаДнейПолногоГрафикаМесяц,
	|	ДанныеГрафиковПолногоВремени.НормаЧасовГрафикаМесяц КАК НормаЧасовПолногоГрафикаМесяц,
	|	ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь,
	|	ГрафикиРаботыСотрудников.Месяц
	|ПОМЕСТИТЬ ВТДанныеГрафиков
	|ИЗ
	|	ВТГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиковРаботы КАК ДанныеГрафиков
	|		ПО ГрафикиРаботыСотрудников.ГрафикРаботы = ДанныеГрафиков.ГрафикРаботы
	|			И ГрафикиРаботыСотрудников.Месяц = ДанныеГрафиков.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеГрафиковРаботы КАК ДанныеГрафиковПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоВремени = ДанныеГрафиковПолногоВремени.ГрафикРаботы
	|			И ГрафикиРаботыСотрудников.Месяц = ДанныеГрафиковПолногоВремени.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеКалендарей КАК ДанныеКалендарей
	|		ПО ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеКалендарей.ПроизводственныйКалендарь
	|			И ГрафикиРаботыСотрудников.Месяц = ДанныеКалендарей.Месяц";
		
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	Запрос.Выполнить();
	
	ПараметрыПроверкиНормыВремени = ПараметрыДляПроверитьЗаполнениеНормыВремени("ВТДанныеГрафиков", "Месяц");
	
	ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверкиНормыВремени, "НормаДнейГрафикаМесяц", "ГрафикРаботы");
	ДобавитьОписаниеПоляНормыВремени(ПараметрыПроверкиНормыВремени, "НормаДнейКалендаряМесяц", "ПроизводственныйКалендарь");
	
	ПроверитьЗаполнениеНормыВремени(МенеджерВТ, ПараметрыПроверкиНормыВремени);
КонецПроцедуры

// Проверяет данные о норме времени. Поля, содержащие норму времени, проверяются на Null.
// Если норма времени есть Null, в этом случае считается, что источник данных нормы не заполнен
// и вызывается исключение, в тексте которого описаны какие источники данных за какие месяцы 
// не заполнены. В качестве источника данных нормы может выступать элементы справочников
// ГрафикиРаботыСотрудников (общий график), Сотрудники (индивидуальный график), ПроизводственныеКалендари.
//
// Параметры:
// 		МенеджерВременныхТаблиц - менеджер временных таблиц, содержащих таблицу с данными нормы.
//		ПараметрыПроверки - структура, см. описание ПараметрыДляПроверитьЗаполнениеНормыВремени.
//
Процедура ПроверитьЗаполнениеНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки) Экспорт
	
	Выборка = ВыборкаДанныхДляДляПроверкиНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки);
	
	ОбщиеГрафики = Новый Массив;
	СотрудникиСИндивидуальнымиГрафиками = Новый Массив;
	ПроизводственныеКалендари = Новый Массив;
	Месяцы = Новый Массив;
	НачалоПериода = Дата(1, 1, 1);
	КонецПериода = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
	Пока Выборка.Следующий() Цикл
		Месяцы.Добавить(Выборка.Месяц);
		НачалоПериода = Мин(НачалоГода(Выборка.Месяц), НачалоПериода);
		КонецПериода = Макс(КонецГода(Выборка.Месяц), КонецПериода);
		
		Для Каждого ОписаниеПоля Из ПараметрыПроверки.ОписаниеПолейНормыВремени Цикл 
			Если Выборка[ОписаниеПоля.ИмяПоляНорма] = Null Тогда
				ИсточникДанныхНормы = Выборка[ОписаниеПоля.ИмяПоляИсточникаДанныхНормы];
				
				Если ТипЗнч(ИсточникДанныхНормы) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
					ОбщиеГрафики.Добавить(ИсточникДанныхНормы);
				ИначеЕсли ТипЗнч(ИсточникДанныхНормы) = Тип("СправочникСсылка.Сотрудники") Тогда  
					СотрудникиСИндивидуальнымиГрафиками.Добавить(ИсточникДанныхНормы);
				ИначеЕсли ТипЗнч(ИсточникДанныхНормы) = Тип("СправочникСсылка.ПроизводственныеКалендари") Тогда  
					ПроизводственныеКалендари.Добавить(ИсточникДанныхНормы);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
	
	НезаполненныеОбщиеГрафики = НезаполненныеОбщиеГрафики(ОбщиеГрафики, НачалоПериода, КонецПериода);
	Если НезаполненныеОбщиеГрафики.Количество() = 0
		И СотрудникиСИндивидуальнымиГрафиками.Количество() = 0 
		И ПроизводственныеКалендари.Количество() = 0 Тогда
		// Проблем не обнаружено
		Возврат;
	КонецЕсли;	
	
	ТекстОбъектыДляПроверки = "";
	
	// Формируем текст сообщения отдельно: по общим... 
	ТекстОбщиеГрафики = "";
	Если НезаполненныеОбщиеГрафики.Количество() > 0 Тогда
		
		ЗаголовкиГрафиков = "";
		Для Каждого График Из НезаполненныеОбщиеГрафики Цикл
			ЗаголовкиГрафиков = ЗаголовкиГрафиков + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("«%1», ", График);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовкиГрафиков, 2);
		Если НезаполненныеОбщиеГрафики.Количество() = 1 Тогда
			ТекстОбщиеГрафики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'общему графику %1';
																							|en = 'general schedule %1'"), ЗаголовкиГрафиков);
		Иначе
			ТекстОбщиеГрафики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'общим графикам %1';
																							|en = 'general schedules %1'"), ЗаголовкиГрафиков);
		КонецЕсли;
		
		ТекстОбъектыДляПроверки = НСтр("ru = 'графиков работы';
										|en = 'work schedules'");
	КонецЕсли;
	
	// ..И по индивидуальным графикам.
	// Для формирования текста сообщений получим ФИО сотрудников имеющих инд. графики.
	ФИОСотрудниковСИндивидуальнымиГрафиками = Новый Массив;	
	Если СотрудникиСИндивидуальнымиГрафиками.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокСотрудников", СотрудникиСИндивидуальнымиГрафиками);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо.ФИО КАК ФИО,
		|	Сотрудники.ФизическоеЛицо.Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ФИОСотрудниковСИндивидуальнымиГрафиками.Добавить(Выборка.ФИО);	
		КонецЦикла;
	КонецЕсли;
	
	ТекстИндивидуальныеГрафики = "";
	Если СотрудникиСИндивидуальнымиГрафиками.Количество() > 0 Тогда
		ЗаголовкиГрафиков = "";
		Для Каждого ФИО Из ФИОСотрудниковСИндивидуальнымиГрафиками Цикл
			ЗаголовкиГрафиков = ЗаголовкиГрафиков + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1, ", ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовкиГрафиков, 2);
		Если СотрудникиСИндивидуальнымиГрафиками.Количество() = 1 Тогда
			ТекстИндивидуальныеГрафики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'индивидуальному графику сотрудника %1';
																										|en = 'individual employee schedule %1'"), ЗаголовкиГрафиков);
		Иначе
			ТекстИндивидуальныеГрафики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'индивидуальным графикам сотрудников %1';
																										|en = 'individual employee schedules %1'"), ЗаголовкиГрафиков);
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОбъектыДляПроверки) Тогда
			ТекстОбъектыДляПроверки = НСтр("ru = 'графиков работы';
											|en = 'work schedules'");
		КонецЕсли;	
	КонецЕсли;
	
	// Формируем текст сообщения отдельно: по производственным календарям... 
	ТекстКалендари = "";
	Если ПроизводственныеКалендари.Количество() > 0 Тогда
		ЗаголовкиКалендарей = "";
		Для Каждого График Из ПроизводственныеКалендари Цикл
			ЗаголовкиКалендарей = ЗаголовкиКалендарей + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("«%1», ", График);
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовкиГрафиков, 2);
		Если ПроизводственныеКалендари.Количество() = 1 Тогда
			ТекстКалендари = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'производственному календарю %1';
																							|en = 'business calendar %1'"), ЗаголовкиКалендарей);
		Иначе
			ТекстКалендари = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'производственным календарям %1';
																							|en = 'business calendars %1'"), ЗаголовкиКалендарей);
		КонецЕсли;
		
		ТекстОбъектыДляПроверки = ТекстОбъектыДляПроверки + ?(ПустаяСтрока(ТекстОбъектыДляПроверки), "", " и ") +  НСтр("ru = 'производственных календарей';
																														|en = 'business calendars'")
	КонецЕсли;
	
	ТекстГрафикиРаботы = ТекстОбщиеГрафики;
	ТекстГрафикиРаботы = ТекстГрафикиРаботы + ?(Не ПустаяСтрока(ТекстГрафикиРаботы) И Не ПустаяСтрока(ТекстИндивидуальныеГрафики), " и ", "") + ТекстИндивидуальныеГрафики;
	ТекстГрафикиРаботы = ТекстГрафикиРаботы + ?(Не ПустаяСтрока(ТекстГрафикиРаботы) И Не ПустаяСтрока(ТекстКалендари), " и ", "") + ТекстКалендари;
	
	ТекстМесяцы = "";
	Если Месяцы.Количество() > 0 Тогда
		ТекстМесяцы = "";
		Для Каждого Месяц Из Месяцы Цикл
			ТекстМесяцы = ТекстМесяцы + Формат(Месяц, "ДФ='ММММ гггг'") + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстМесяцы, 2);
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось определить норму времени по %1 за %2. 
          |Возможно, графики работы не заполнены на этот период. 
          |Проверьте заполнение %3.';
          |en = 'Cannot determine standard hours by %1 for %2. 
          |Work schedule may not be filled in for this period.
          |Check population %3.'"), 
		 ТекстГрафикиРаботы, 
		 ТекстМесяцы,
		 ТекстОбъектыДляПроверки);
		 
	ВызватьИсключение ТекстСообщения;
	
КонецПроцедуры	

// Предназначена для получения настроек подсистемы учета рабочего времени.
//
// Возвращаемое значение - структура с именем настройки в качестве ключа.
//
Функция НастройкиУчетаВремени() Экспорт
	
	НастройкиУчетаВремени = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
	НастройкиУчетаВремени.Прочитать();
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиУчетаВремени, Метаданные.РегистрыСведений.НастройкиУчетаВремени);
							
	// Если настройки не заполнены, все значения по умолчанию оставляем Ложь.
	Возврат СтруктураНастроек;
	
КонецФункции

// Определяет совпадают ли нормы времени при смене графика работы:
// 	нормы совпадают в том случае, если норма по первому графику 
// 	с начала месяца до смены графика, равна норме по второму графику 
// 	с начала месяца до смены графика и норма по первому графику после смены графика
// 	и до конца месяца равна норме по второму графику после смены графика и до конца месяца.
//
// Параметры:
//	СтарыйГрафик
//	НовыйГрафик
//	ДатаСменыГрафика
//	ВремяВЧасах (необязательный) - булево, определяет сравнивать норму в часах или в днях.
//
// Возвращаемое значение - булево:
//	Истина - норма по графикам совпадает,
//	Ложь - не совпадает.
//
Функция НормыПриСменеГрафиковСовпадают(СтарыйГрафик, НовыйГрафик, ДатаСменыГрафика, ВремяВЧасах = Ложь) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтарыйГрафик", СтарыйГрафик);
	Запрос.УстановитьПараметр("НовыйГрафик", НовыйГрафик);
	Запрос.УстановитьПараметр("ДатаСменыГрафика", ДатаСменыГрафика);
	Запрос.УстановитьПараметр("Месяц", НачалоМесяца(ДатаСменыГрафика));
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя")); 
	Запрос.УстановитьПараметр("ВремяВЧасах", ВремяВЧасах);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РазницаНормыГрафиков.НормаДоСменыГрафика) КАК НормаДоСменыГрафика,
	|	СУММА(РазницаНормыГрафиков.НормаПослеСменыГрафика) КАК НормаПослеСменыГрафика
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.Дата < &ДатаСменыГрафика
	|				ТОГДА ВЫБОР
	|						КОГДА &ВремяВЧасах
	|							ТОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|						ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НормаДоСменыГрафика,
	|		ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.Дата >= &ДатаСменыГрафика
	|				ТОГДА ВЫБОР
	|						КОГДА &ВремяВЧасах
	|							ТОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|						ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НормаПослеСменыГрафика
	|	ИЗ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|	ГДЕ
	|		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &СтарыйГрафик
	|		И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|		И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя
	|		И НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.Дата < &ДатаСменыГрафика
	|				ТОГДА ВЫБОР
	|						КОГДА &ВремяВЧасах
	|							ТОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|						ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		-ВЫБОР
	|			КОГДА ГрафикиРаботыПоВидамВремени.Дата >= &ДатаСменыГрафика
	|				ТОГДА ВЫБОР
	|						КОГДА &ВремяВЧасах
	|							ТОГДА ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|						ИНАЧЕ ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|	ГДЕ
	|		ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &НовыйГрафик
	|		И ГрафикиРаботыПоВидамВремени.Месяц = &Месяц
	|		И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = &РабочееВремя
	|		И НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах) КАК РазницаНормыГрафиков
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РазницаНормыГрафиков.НормаДоСменыГрафика) <> 0
	|		ИЛИ СУММА(РазницаНормыГрафиков.НормаПослеСменыГрафика) <> 0)";
	
	Возврат Запрос.Выполнить().Пустой();	
КонецФункции
 
// Регистрирует внутрисменные отклонения, введенные спец. документами.
// Параметры: 
//		Движения
//		ДанныеОВремени - таблица значений с колонками.
//			Дата  - конкретная дата на которую регистрируется время или любая 
//					(например, первое число) дата месяца в том случае, если 
//					регистрируются данные в целом за месяц (ВЦеломЗаПериод - истина).
//			Сотрудник
//			ВидВремени  - если колонки нет, то считается, что это - Явка.
//			ВидВремениВытесняемый - плановый вид времени, вместо которого регистрируется внутрисменное отклонение.
//			Часов 
//		ПериодРегистрации - месяц в котором регистрируются данные.
//
Процедура ЗарегистрироватьВнутрисменныеОтклонения(Движения, ДанныеОВремени, ПериодРегистрации = '00010101', Записывать = Ложь) Экспорт 
	Если Записывать Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;	
	
	Для Каждого СтрокаДанных Из ДанныеОВремени Цикл
		ПериодРегистрации = ?(ПериодРегистрации = '00010101', НачалоМесяца(СтрокаДанных.Период), ПериодРегистрации);
		
		ЗаписьНабора = Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Добавить();
		ЗаписьНабора.Период = СтрокаДанных.Дата;
		ЗаписьНабора.ПериодРегистрации = ПериодРегистрации;
		ЗаписьНабора.Сотрудник = СтрокаДанных.Сотрудник;
		ЗаписьНабора.Организация = СтрокаДанных.Организация;
		ЗаписьНабора.ВидУчетаВремени = СтрокаДанных.ВидВремени;
		ЗаписьНабора.ВидДанных = Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеВнутрисменныхНеявок;
		ЗаписьНабора.Дни = 1;
		ЗаписьНабора.Часы = СтрокаДанных.Часов;
		ЗаписьНабора.ПереходящаяЧастьПредыдущейСмены = СтрокаДанных.ПереходящаяЧастьПредыдущейСмены;
		ЗаписьНабора.ПереходящаяЧастьТекущейСмены = СтрокаДанных.ПереходящаяЧастьТекущейСмены;
		
		Если ЗначениеЗаполнено(СтрокаДанных.ВидВремениВытесняемый) Тогда 
			ЗаписьВытесняемогоВремени = Движения.ВытесняемоеПлановоеВремяСотрудников.Добавить();
			ЗаписьВытесняемогоВремени.Период = СтрокаДанных.Дата;
			ЗаписьВытесняемогоВремени.ПериодРегистрации = ПериодРегистрации;
			ЗаписьВытесняемогоВремени.Сотрудник = СтрокаДанных.Сотрудник;
			ЗаписьВытесняемогоВремени.Организация = СтрокаДанных.Организация;
			ЗаписьВытесняемогоВремени.ВидУчетаВремени = СтрокаДанных.ВидВремениВытесняемый;
			ЗаписьВытесняемогоВремени.Часы = СтрокаДанных.Часов;
			ЗаписьВытесняемогоВремени.Смена = СтрокаДанных.Смена;
			ЗаписьВытесняемогоВремени.ПереходящаяЧастьПредыдущейСмены = СтрокаДанных.ПереходящаяЧастьПредыдущейСмены;
			ЗаписьВытесняемогоВремени.ПереходящаяЧастьТекущейСмены = СтрокаДанных.ПереходящаяЧастьТекущейСмены;
		КонецЕсли;	
	КонецЦикла;	
		
		
	Если Записывать Тогда
		Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записать();
		Движения.ВытесняемоеПлановоеВремяСотрудников.Записать();
		
		Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записывать = Ложь;
		Движения.ВытесняемоеПлановоеВремяСотрудников.Записывать = Ложь;
	Иначе	
		Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записывать = Истина;
		Движения.ВытесняемоеПлановоеВремяСотрудников.Записывать = Истина;
	КонецЕсли;	
	
КонецПроцедуры	
	
Процедура СоздатьГрафикРаботыПятидневка() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботыСотрудников.Ссылка
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников";
	
	Если Запрос.Выполнить().Пустой() Тогда
	
		ГрафикПятидневка = Справочники.ГрафикиРаботыСотрудников.СоздатьЭлемент();
		ГрафикПятидневка.ЗаполнитьПараметрыГрафикаПоУмолчанию();
		ГрафикПятидневка.Наименование = НСтр("ru = 'Пятидневка';
											|en = 'Five-day work period'");
		
		НомерГода = Год(ТекущаяДатаСеанса());
		
		ДанныеГрафика = ГрафикПятидневка.ДанныеГрафикаПоНастройкам(НомерГода);		
		
		ГрафикПятидневка.ЗаписатьДанныеГрафика(ДанныеГрафика, НомерГода);
	КонецЕсли;	
КонецПроцедуры	

// Выполняет формирование сводных (помесячно) сведений о производственном календаре.
//
// Параметры:
//	- УсловияОбновления - таблица значений с колонками.
//		- КодПроизводственногоКалендаря - код производственного календаря, данные которого изменились,
//		- Год - год, за который изменились данные.
//	- (не используется) РежимЗагрузки - необязательный, если Истина, запись будет производиться в режиме ОбменДанными.Загрузка.
//
Процедура ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления, РежимЗагрузки = Ложь) Экспорт
	
	Если Не ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ДанныеПроизводственногоКалендаряПомесячно) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УсловияОбновления", УсловияОбновления);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Условия.КодПроизводственногоКалендаря КАК КодПроизводственногоКалендаря,
		|	Условия.Год КАК Год
		|ПОМЕСТИТЬ ВТУсловияОбновления
		|ИЗ
		|	&УсловияОбновления КАК Условия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год,
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Месяц,
		|	СУММА(1) КАК КалендарныхДней,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихДней,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 40 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 40 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели40Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 36 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 36 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели36Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 24 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 24 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели24Часа
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияОбновления КАК УсловияОбновления
		|		ПО (УсловияОбновления.КодПроизводственногоКалендаря = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь.Код)
		|			И (УсловияОбновления.Год = ДанныеПроизводственногоКалендаря.Год)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год,
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводственныйКалендарь,
		|	Год";
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаряПомесячно.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			НаборЗаписей.Отбор.ПроизводственныйКалендарь.Установить(Выборка.ПроизводственныйКалендарь);
			НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
			Если ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет применяется для сотрудника суммированный учет рабочего времени или нет.
//
Функция СотрудникуПрименяетсяСуммированныйУчетРабочегоВремени(Сотрудник, Дата) Экспорт
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "СуммированныйУчетРабочегоВремени", Дата);
	
	ПрименяетсяСуммированныйУчет = Ложь;
	Если КадровыеДанные.Количество() > 0 Тогда
		ПрименяетсяСуммированныйУчет = ?(КадровыеДанные[0].СуммированныйУчетРабочегоВремени = Null, Ложь, КадровыеДанные[0].СуммированныйУчетРабочегоВремени);
	КонецЕсли;
	
	Возврат ПрименяетсяСуммированныйУчет;
	
КонецФункции

// Функция возвращает структуру с полями описывающими временную таблицу фильтр
//  для метода СоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда.
//
// Возвращаемое значение - структура с полями:
//	ИмяТаблицы - имя временной таблицы-фильтра
//	ИмяПоляСотрудник - имя поля сотрудник в таблице (значение по умолчанию "Сотрудник")
//	ИмяПоляМесяц - имя поля месяц в таблице	(значение по умолчанию "Месяц)
//	ИмяПоляДатаНачала - имя поля дата начала в таблице (значение по умолчанию "ДатаНачала")
//	ИмяПоляДатаОкончания - имя поля дата окончания в таблице (значение по умолчанию "ДатаОкончания")
//	ИмяПоляГрафикРаботы - имя поля график работы в таблице (значение по умолчанию "ГрафикРаботы")
//	ИмяПоляПериодРегистрацииВремени - имя поля график работы в таблице (значение по умолчанию "ПериодРегистрацииВремени")
//	ИмяПоляВидВремени - имя поля вид времени в таблице (значение по умолчанию "ВидУчетаВремени")
//	ИмяПоляВидВремени - имя поля вид времени в таблице (значение по умолчанию "ВидУчетаВремени").
//  
Функция ОписаниеФильтраДляСоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда() Экспорт
	 ОписаниеФильтра = Новый Структура;
	 
	 ОписаниеФильтра.Вставить("ИмяТаблицы");
	 ОписаниеФильтра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	 ОписаниеФильтра.Вставить("ИмяПоляМесяц", "Месяц");
	 ОписаниеФильтра.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	 ОписаниеФильтра.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	 ОписаниеФильтра.Вставить("ИмяПоляГрафикРаботы", "ГрафикРаботы");
	 ОписаниеФильтра.Вставить("ИмяПоляПериодРегистрацииВремени", "ПериодРегистрацииВремени");
	 ОписаниеФильтра.Вставить("ИмяПоляВидВремени", "ВидУчетаВремени");
	 ОписаниеФильтра.Вставить("ДополнительныеПоля", Новый Массив);
	 
	 Возврат ОписаниеФильтра;
КонецФункции	

// Создает и помещает в менеджер временных таблиц
//  таблицу ВТОтработанноеВремяПоТерриториямУсловияхТруда с отработанным временем за период 
//	в разрезе сотрудников, территорий и условий труда. Данные о времени получаются из регистра "ГрафикиРаботыПоВидамВремени". 
//	В менеджере должна быть таблица-фильтр с полями:
//		Сотрудник,
//		Месяц,
//		ДатаНачала,
//		ДатаОкончания,
//		ГрафикРаботы - ссылка на график - источник данных о времени (СправочникСсылка.ГрафикиРаботыСотрудников или СправочникСсылка.Сотрудники),
//		ПериодРегистрацииВремени,
//		ВидВремени - если не заполнен, то будет выполнен отбор по виду времени "рабочееВремя" 
//		ВыполнятьОтборПоВидуВремени - Булево. Если установлено значение Ложь, то при получении данных вид времени
//										не учитывает, т.е. данные будут получены по всем видам времени, попавшим в заданный период
//	псевдонимы данных полей в таблице фильтре передаются в параметре ОписаниеФильтра.
//		
// Параметры:
//		МенеджерВременныхТаблиц - менеджер временных таблиц
//		ОписаниеФильтра - структура. См. ОписаниеФильтраДляСоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда.
//	
// Помещает в менеджер таблицу ВТОтработанноеВремяПоТерриториямУсловияхТруда,
//	содержащую данные о времени сотрудников по производственным календарям с полями:
//  	Сотрудник,
//  	Месяц,
//  	ДатаНачала,
//  	ДатаОкончания,
//  	ПериодРегистрацииВремени,
//  	ГрафикРаботы,
//  	ВидУчетаВремени,
// 		Территория,
//  	УсловияТруда,
//  	Дней,
//  	Часов
//
Процедура СоздатьВТОтработанноеВремяПоТерриториямУсловияхТруда(МенеджерВременныхТаблиц, ОписаниеФильтра) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ИсточникДанных.Сотрудник КАК Сотрудник,
	|	ИсточникДанных.Месяц КАК Месяц,
	|	МИНИМУМ(ИсточникДанных.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ИсточникДанных.ДатаОкончания) КАК ДатаОкончания,
	|	ИсточникДанных.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени
	|ПОМЕСТИТЬ ВТСотрудникиМесяцыПолученияТерриторий
	|ИЗ
	|	ВТИсточникДанных КАК ИсточникДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникДанных.Сотрудник,
	|	ИсточникДанных.Месяц,
	|	ИсточникДанных.ПериодРегистрацииВремени";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсточникДанных", ОписаниеФильтра.ИмяТаблицы); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Сотрудник", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Месяц", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаНачала", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаОкончания", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ИмяПоляПериодРегистрацииВремени", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени);

	
	Запрос.Выполнить();
	
	ОписаниеФильтраПолученияПериодовТерриторий = ОписаниеТаблицыОтбораДляЗапросВТПериодыДействияТерриторий();
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяТаблицы = "ВТСотрудникиМесяцыПолученияТерриторий";
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяПоляПериодРегистрации = "ПериодРегистрацииВремени";
	
	ОписаниеИсточникаДанныхОВремени = ОписаниеИсточникаДанныхОВремениДляЗапросВТПериоды();
	ОписаниеИсточникаДанныхОВремени.ИмяТаблицы = "РегистрСведений.ГрафикиРаботыПоВидамВремени"; 
	ОписаниеИсточникаДанныхОВремени.ИмяПоляСотрудник = "ГрафикРаботы";
	
	СоздатьВТПериодыТерриторий(
		Ложь,
		МенеджерВременныхТаблиц, 
		ОписаниеФильтраПолученияПериодовТерриторий, 
		ОписаниеИсточникаДанныхОВремени);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Сотрудник КАК Сотрудник,
	|	ИсточникДанных.Месяц КАК Месяц,
	|	ИсточникДанных.ДатаНачала КАК ДатаНачала,
	|	ИсточникДанных.ДатаОкончания КАК ДатаОкончания,
	|	ИсточникДанных.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	ИсточникДанных.ГрафикРаботы КАК ГрафикРаботы,
	|	ИсточникДанных.ВидВремени КАК ВидВремени,
	|	ИсточникДанных.ВыполнятьОтборПоВидуВремени КАК ВыполнятьОтборПоВидуВремени,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
	|		ИНАЧЕ ИсточникДанных.ВидВремени
	|	КОНЕЦ КАК ВидВремениДляСвязи
	|ПОМЕСТИТЬ ВТПериодыПолученияДанных
	|ИЗ
	|	ВТИсточникДанных КАК ИсточникДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыПолученияДанных.Сотрудник,
	|	ПериодыПолученияДанных.Месяц,
	|	ПериодыПолученияДанных.ДатаНачала,
	|	ПериодыПолученияДанных.ДатаОкончания,
	|	ПериодыПолученияДанных.ПериодРегистрацииВремени,
	|	ПериодыПолученияДанных.ГрафикРаботы,
	|	ПериодыПолученияДанных.ВидВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА ПериодыТерриторий.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ГрафикиРаботыПоВидамВремени.Территория
	|		ИНАЧЕ ПериодыТерриторий.Территория
	|	КОНЕЦ КАК Территория,
	|	ГрафикиРаботыПоВидамВремени.УсловияТруда,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК Дней,
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК Часов
	|ПОМЕСТИТЬ ВТОтработанноеВремяПоТерриториямУсловияхТруда
	|ИЗ
	|	ВТПериодыПолученияДанных КАК ПериодыПолученияДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ПериодыПолученияДанных.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И ПериодыПолученияДанных.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
	|			И ПериодыПолученияДанных.ПериодРегистрацииВремени = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
	|			И (ПериодыПолученияДанных.ВидВремениДляСвязи = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|				ИЛИ НЕ ПериодыПолученияДанных.ВыполнятьОтборПоВидуВремени)
	|			И ПериодыПолученияДанных.ДатаНачала <= ГрафикиРаботыПоВидамВремени.Дата
	|			И ПериодыПолученияДанных.ДатаОкончания >= ГрафикиРаботыПоВидамВремени.Дата
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыТерриторий КАК ПериодыТерриторий
	|		ПО ПериодыПолученияДанных.Сотрудник = ПериодыТерриторий.Сотрудник
	|			И (ПериодыТерриторий.Месяц = ГрафикиРаботыПоВидамВремени.Месяц)
	|			И (ПериодыТерриторий.ДатаНачала <= ГрафикиРаботыПоВидамВремени.Дата)
	|			И (ПериодыТерриторий.ДатаОкончания >= ГрафикиРаботыПоВидамВремени.Дата
	|				ИЛИ ПериодыТерриторий.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыПолученияДанных.Сотрудник,
	|	ПериодыПолученияДанных.Месяц,
	|	ПериодыПолученияДанных.ДатаНачала,
	|	ПериодыПолученияДанных.ДатаОкончания,
	|	ПериодыПолученияДанных.ПериодРегистрацииВремени,
	|	ПериодыПолученияДанных.ГрафикРаботы,
	|	ПериодыПолученияДанных.ВидВремени,
	|	ВЫБОР
	|		КОГДА ПериодыТерриторий.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ГрафикиРаботыПоВидамВремени.Территория
	|		ИНАЧЕ ПериодыТерриторий.Территория
	|	КОНЕЦ,
	|	ГрафикиРаботыПоВидамВремени.УсловияТруда";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсточникДанных", ОписаниеФильтра.ИмяТаблицы); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Сотрудник", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.Месяц", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляМесяц);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаНачала", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ДатаОкончания", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ПериодРегистрацииВремени", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляПериодРегистрацииВремени);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ГрафикРаботы", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляГрафикРаботы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных.ВидВремени", "ИсточникДанных." + ОписаниеФильтра.ИмяПоляВидВремени);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

// Записывает набор движений регистра накопления ДниЧасыОтгуловСотрудников
// 	после чего проверяет на получившиеся отрицательные остатки.
// В случае наличия таковых возвращает Отказ = Истина.
//
// 	Параметры: 
//		Движения - коллекция движений, обязательно содержащая набор записей
//				   регистра накопления ДниЧасыОтгулов.
//		ДанныеОбОтгулах - таблица значений с колонками.
//			Организация
//			Сотрудник
//			ВидДвижения
//			Период
//			Дни
//			Часы
Процедура ЗарегистрироватьИПроверитьОстаткиДниЧасыОтгуловСотрудников(Движения, ДанныеОбОтгулах, Отказ) Экспорт
	
	// Записываем набор.
	ЗарегистрироватьДниЧасыОтгуловСотрудников(Движения, ДанныеОбОтгулах, Истина);
	
	Если ДанныеОбОтгулах.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка Отрицательных остатков.
	СтрокаПараметров = ДанныеОбОтгулах[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Остаток
		|ИЗ
		|	РегистрНакопления.ДниЧасыОтгулов.Остатки(
		|			&МоментВремени,
		|			Организация = &Организация
		|				И Сотрудник = &Сотрудник) КАК ДниЧасыОтгуловОстатки
		|ГДЕ
		|	(ДниЧасыОтгуловОстатки.ДниОстаток < 0
		|			ИЛИ ДниЧасыОтгуловОстатки.ЧасыОстаток < 0)";
	
	Запрос.УстановитьПараметр("МоментВремени", КонецДня(СтрокаПараметров.Период));
	Запрос.УстановитьПараметр("Организация", СтрокаПараметров.Организация);
	Запрос.УстановитьПараметр("Сотрудник", СтрокаПараметров.Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьОтрицательныеОстатки = НЕ РезультатЗапроса.Пустой();
	Отказ = Отказ ИЛИ ЕстьОтрицательныеОстатки;
	
	Если ЕстьОтрицательныеОстатки Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У сотрудника %1 нет достаточного количества заработанных отгулов на %2';
				|en = 'Employee %1 has insufficient number of days off on %2'"),
			СтрокаПараметров.Сотрудник, Формат(СтрокаПараметров.Период, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "РасходЧасовОтгула", "Объект");
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует рабочее время в переданной коллекции движений.
//
// 	Параметры: 
//		Движения - коллекция движений, обязательно содержащая набор записей
//				   регистра накопления ДниЧасыОтгулов.
//		ДанныеОбОтгулах - таблица значений с колонками.
//			Сотрудник
//			ВидДвижения
//			Период
//			Дни
//			Часы
Процедура ЗарегистрироватьДниЧасыОтгуловСотрудников(Движения, ДанныеОбОтгулах, ЗаписыватьСразу = Ложь) Экспорт
	
	Движения.ДниЧасыОтгулов.Записывать = Истина;
		
	Для Каждого СтрокаДанных Из ДанныеОбОтгулах Цикл
		ЗаполнитьЗначенияСвойств(Движения.ДниЧасыОтгулов.Добавить(), СтрокаДанных);
	КонецЦикла;	
	
	Если ЗаписыватьСразу Тогда
		Движения.ДниЧасыОтгулов.БлокироватьДляИзменения = Истина;
		Движения.ДниЧасыОтгулов.Записать();
		Движения.ДниЧасыОтгулов.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Сторнирует отгулы сотрудников.
//
// Параметры:
//  Движения			 - КоллекцияДвижений, Структура	 - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент - ДокументСсылка				 - Документ, записи которого необходимо сторнировать.
//  Записывать			 - Булево						 - Если Истина, то наборы будут записаны сразу, если Ложь, то наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДниЧасыОтгуловСотрудников(Движения, ИсправленныйДокумент, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетРабочегоВремениРасширенный";
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДниЧасыОтгулов;

	НаборыЗаписей = ОбщегоНазначенияБЗК.ДвиженияВСтруктуру(Движения);
	
	НаборЗаписей = Неопределено;
	Если НаборыЗаписей.Свойство(МетаданныеРегистра.Имя, НаборЗаписей)
		И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, ИмяУчета) Тогда
		
		РегистрыНакопления.ДниЧасыОтгулов.СторнироватьДвижения(НаборЗаписей, ИсправленныйДокумент, Записывать);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает дату окончания, по дате начала и количеству рабочих дней
//
Функция ДатаОкончанияПоГрафикуРаботыСотрудника(Сотрудник, ДатаНачала, КоличествоДней) Экспорт
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	// Так как непонятно в каком месяце лежит дата окончания, используем помесячные запросы.
	ТекущаяДатаНачала = ДатаНачала;
	ОстатокДней = КоличествоДней;
	ДатаОкончания = ДатаНачала;
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанных.ИмяВТСотрудники = "ВТСотрудники";
	
	Пока ОстатокДней > 0
		И (ДобавитьМесяц(НачалоМесяца(ДатаНачала), 6) > НачалоМесяца(ТекущаяДатаНачала)) Цикл
		
		// Подготовка таблицы
		ТаблицаСотрудников.Очистить();
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Месяц = НачалоМесяца(ТекущаяДатаНачала);
		НоваяСтрока.ДатаАктуальности = ТекущаяДатаСеанса();
		НоваяСтрока.ДатаНачала = ТекущаяДатаНачала;
		НоваяСтрока.ДатаОкончания = КонецМесяца(ТекущаяДатаНачала);
		
		// Получаем кадровые данные
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		СоздатьВТСотрудники(Запрос.МенеджерВременныхТаблиц, ТаблицаСотрудников);
		СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанных);
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТПлановоеВремя.Сотрудник КАК Сотрудник,
			|	ВТПлановоеВремя.Дата КАК ДатаОкончания
			|ИЗ
			|	ВТПлановоеВремя КАК ВТПлановоеВремя
			|ГДЕ
			|	ВТПлановоеВремя.ЧасыПлан > 0
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаОкончания";
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			ОстатокДней = ОстатокДней - 1;
			Если ОстатокДней <= 0 Тогда
				ДатаОкончания = ВыборкаЗапроса.ДатаОкончания;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Добавим месяц и в случае наличия остатка дней, сделаем запрос снова
		ТекущаяДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаНачала), 1);
	КонецЦикла;
	
	Возврат ДатаОкончания;

КонецФункции

// Возвращает дату окончания, по дате начала и количеству рабочих дней
//
Функция КоличествоДнейПоГрафикуРаботыСотрудника(Сотрудник, ДатаНачала, ДатаОкончания) Экспорт

	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат 0;
	КонецЕсли;

	// Подготовка таблицы
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ТекущаяДатаНачала = ДатаНачала;
	
	Пока НачалоМесяца(ТекущаяДатаНачала) <= НачалоМесяца(ДатаОкончания) Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Месяц = НачалоМесяца(ТекущаяДатаНачала);
		НоваяСтрока.ДатаАктуальности = НачалоМесяца(ДатаОкончания);
		НоваяСтрока.ДатаНачала = ТекущаяДатаНачала;
		НоваяСтрока.ДатаОкончания = Мин(ДатаОкончания, КонецМесяца(ТекущаяДатаНачала));
		
		ТекущаяДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаНачала), 1);
	КонецЦикла;
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанных.ИмяВТСотрудники = "ВТСотрудники";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСотрудники(Запрос.МенеджерВременныхТаблиц, ТаблицаСотрудников);
	СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанных);
	
     Запрос.Текст =
          "ВЫБРАТЬ РАЗЛИЧНЫЕ
          |	ВТПлановоеВремя.Сотрудник КАК Сотрудник,
          |	ВТПлановоеВремя.Дата КАК Дней
          |ПОМЕСТИТЬ ВТДатыРаботы
          |ИЗ
          |	ВТПлановоеВремя КАК ВТПлановоеВремя
          |ГДЕ
          |	ВТПлановоеВремя.ЧасыНорма > 0
          |;
          |
          |////////////////////////////////////////////////////////////////////////////////
          |ВЫБРАТЬ ПЕРВЫЕ 1
          |	ВТДатыРаботы.Сотрудник,
          |	КОЛИЧЕСТВО(ВТДатыРаботы.Дней) КАК Дней
          |ИЗ
          |	ВТДатыРаботы КАК ВТДатыРаботы
          |
          |СГРУППИРОВАТЬ ПО
          |	ВТДатыРаботы.Сотрудник";
		  
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе	
		Возврат РезультатЗапроса.Выгрузить()[0].Дней;
	КонецЕсли;
		
КонецФункции

// Возвращает структуру со значением накопленных отгулов сотрудника
// 	Параметры: 
//		Сотрудник
//		НаДату
// 	Возвращаемое значение: 
// 		Структура, с полями
//			РасходДнейОтгула
//			РасходЧасовОтгула
Функция ДниЧасыНакопленныхОтгулов(Организация, Сотрудник, НаДату) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Отгулы = Новый Структура("РасходДнейОтгула, РасходЧасовОтгула");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДниЧасыОтгуловОстатки.ДниОстаток КАК РасходДнейОтгула,
		|	ДниЧасыОтгуловОстатки.ЧасыОстаток КАК РасходЧасовОтгула
		|ИЗ
		|	РегистрНакопления.ДниЧасыОтгулов.Остатки(&НаДату, Сотрудник = &Сотрудник) КАК ДниЧасыОтгуловОстатки";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Отгулы.РасходДнейОтгула = 0;
		Отгулы.РасходЧасовОтгула = 0;
	Иначе
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		ЗаполнитьЗначенияСвойств(Отгулы, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Отгулы;
	
КонецФункции

// Высчитывает текущий период расчета суммированного учета согласно параметрам
//
Функция ПериодСуммированногоУчетаПоПрошлымДокументам(Организация, ДатаДокумента, Сотрудник = Неопределено) Экспорт

	ПериодСуммированногоУчета = Новый Структура("ПериодСуммированногоУчетаНачало, ПериодСуммированногоУчетаОкончание");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РегистрацияПереработок.ПериодСуммированногоУчетаОкончание
		|ИЗ
		|	Документ.РегистрацияПереработок.Сотрудники КАК РегистрацияПереработокСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистрацияПереработок КАК РегистрацияПереработок
		|		ПО РегистрацияПереработокСотрудники.Ссылка = РегистрацияПереработок.Ссылка
		|ГДЕ
		|	РегистрацияПереработок.Проведен";
		
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РегистрацияПереработок.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	
	Если НЕ Сотрудник = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И РегистрацияПереработокСотрудники.Сотрудник = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст +"
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрацияПереработок.ПериодСуммированногоУчетаОкончание УБЫВ";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	// Если "опереться" не что - ставим начало года.
	ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало = НачалоГода(ДатаДокумента);
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		// Если найден уже введенный документ - начинаем сразу после его окончания.
		ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало = ДобавитьМесяц(ВыборкаДетальныеЗаписи.ПериодСуммированногоУчетаОкончание, 1);
		Если ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало > ДатаДокумента Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли НЕ Сотрудник = Неопределено Тогда
		// Документ не найден - но можно "опереться" на дату приема сотрудника.
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ДатаПриема", ДатаДокумента, , Ложь);
		Если КадровыеДанные.Количество() > 0 Тогда
			ПериодСуммированногоУчета.ПериодСуммированногоУчетаНачало = КадровыеДанные[0].ДатаПриема;
		КонецЕсли;
	КонецЕсли;
	ПериодСуммированногоУчета.ПериодСуммированногоУчетаОкончание = НачалоМесяца(ДатаДокумента);
	
	Возврат ПериодСуммированногоУчета;
	
КонецФункции

// Возвращает свойства общих графиков
//
// Параметры:
// 	СписокГрафиков - Массив, содержащий ссылки типа СправочникСсылка.ГрафикиРаботыСотрудников.
//
// Возвращаемое значение
// 	Соответствие - ключами являются ссылки типа СправочникСсылка.ГрафикиРаботыСотрудников, значения - структуры с полями
//		ПроизводственныйКалендарь - СправочникСсылка.ПроизводственныеКалендари
//		СуммированныйУчетРабочегоВремени - булево
//		ДлительностьРабочейНедели - число
//		НеполноеРабочееВремя - булево
//		СокращеннаяРабочаяНеделя - булево
//		НеполныйРабочийДень - булево
//		ГрафикПолногоРабочегоВремени - СправочникСсылка.ГрафикиРаботыСотрудников
//
Функция СвойстваОбщихГрафиков(СписокГрафиков) Экспорт
	ПолучаемыеПоля = Новый Массив;
	ПолучаемыеПоля.Добавить("ПроизводственныйКалендарь");
	ПолучаемыеПоля.Добавить("СуммированныйУчетРабочегоВремени");
	ПолучаемыеПоля.Добавить("ДлительностьРабочейНедели");
	ПолучаемыеПоля.Добавить("НеполноеРабочееВремя");
	ПолучаемыеПоля.Добавить("СокращеннаяРабочаяНеделя");
	ПолучаемыеПоля.Добавить("НеполныйРабочийДень");
	ПолучаемыеПоля.Добавить("ГрафикПолногоРабочегоВремени");	
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокГрафиков, СтрСоединить(ПолучаемыеПоля, ","));
	
КонецФункции	

Функция ДанныеОбщихГрафиков(ОбщиеГрафикиПоГодам) Экспорт
	ОбщиеГрафикиПоГодам.Колонки.ГрафикРаботы.Имя = "Ссылка";
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(ОбщиеГрафикиПоГодам, "Ссылка", "Год");
	
	ОписаниеТаблицыГрафиков = Новый Структура;
	ОписаниеТаблицыГрафиков.Вставить("ИзмеренияДляПоиска", Новый Соответствие);
	ОписаниеТаблицыГрафиков.ИзмеренияДляПоиска.Вставить("ССЫЛКА", Истина);
	
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&ШаблонГод КАК Год,
	|	ГрафикиРаботыСотрудников.Ссылка КАК ГрафикРаботы,
	|	ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени КАК ГрафикПолногоРабочегоВремени,
	|	ГрафикиРаботыСотрудников.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	ГрафикиПолногоВремени.ДлительностьРабочейНедели КАК ДлительностьРабочейНеделиГрафикаПолногоВремени,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасовНормаПолногоГрафика,
	|	СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНормаПолногоГрафика,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА СреднемесячныеНормыВремениГрафиковПолногоВремени.СреднемесячноеЧислоЧасов
	|		ИНАЧЕ СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасовНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейНорма,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасов,
	|	СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДней
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиПоГодам КАК ГрафикиПоГодам
	|		ПО (&ШаблонУсловиеСвязиПоСсылке)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиПолногоВремени
	|		ПО ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ГрафикиПолногоВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|		ПО (ГрафикиРаботыСотрудников.Ссылка = СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников)
	|			И (&ШаблонУсловиеПоГоду)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковПолногоВремени
	|		ПО ГрафикиПолногоВремени.Ссылка = СреднемесячныеНормыВремениГрафиковПолногоВремени.ГрафикРаботыСотрудников
	|			И (&ШаблонУсловиеПоГоду)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ГрафикиПоГодам", "ГрафикиРаботыСотрудников");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеТаблицыГрафиков,
		"",
		ОператорЗапроса);
		
	ВыражениеПоляГод = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Год", ОписаниеИспользованияФильтра);	
	
	УсловиеСоединенияПоГоду = "СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = " + ВыражениеПоляГод;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "СреднемесячныеНормыВремениГрафиковРаботыСотрудников", УсловиеСоединенияПоГоду);
	
	УсловиеСоединенияПоГоду = "СреднемесячныеНормыВремениГрафиковПолногоВремени.Год = " + ВыражениеПоляГод;
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловиеСоединения(ОператорЗапроса, "СреднемесячныеНормыВремениГрафиковПолногоВремени", УсловиеСоединенияПоГоду);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляГод, "Год", Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОбщиеГрафикиПоГодам.Колонки.Ссылка.Имя = "ГрафикРаботы";
	
	Возврат Результат;
КонецФункции

Функция НовыйФильтрПолученияСводныхДанныхКалендарей() Экспорт 
	ФильтрПолученияДанныхКалендарей = Новый ТаблицаЗначений;
	ФильтрПолученияДанныхКалендарей.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ФильтрПолученияДанныхКалендарей.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	Возврат ФильтрПолученияДанныхКалендарей;
КонецФункции	

Функция ДанныеПроизводственныхКалендарейСводно(ПериодыКалендари) Экспорт
	Если ПериодыКалендари.Количество() = 0 Тогда
		Возврат ДанныеПроизводственныхКалендарейСводноПустаяТаблица();
	КонецЕсли;	
	
	ПериодыКалендари.Свернуть("ПроизводственныйКалендарь, Месяц");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
							ПериодыКалендари,
							"ПроизводственныйКалендарь",
							"Месяц");
							
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ДанныеПроизводственногоКалендаря");						
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
		
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниМесяца,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ФильтрМесяц_, МЕСЯЦ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДниГода,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаряГод,
	|	&ШаблонМесяц КАК Месяц,
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ИЗ
	|	ВТРазличныеИсточникиДанныхНормыВремениКалендарей КАК Календари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (&ШаблонУсловиеПоИзмерениям)
	|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрМесяц_, ГОД) И КОНЕЦПЕРИОДА(&ФильтрМесяц_, ГОД))
	|			И (ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Нерабочий)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь,
	|	&ШаблонМесяц";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
		
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("Календари", "ДанныеПроизводственногоКалендаря");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорЗапроса);
		
	ВыраженияПоляМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("Месяц", ОписаниеИспользованияФильтра);
	ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи = СтрЗаменить(ОписаниеИспользованияФильтра.ТекстШаблонаУсловийСвязи, "&ФильтрМесяц_", ВыраженияПоляМесяц);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыраженияПоляМесяц, "Месяц", Ложь);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыраженияПоляМесяц);
		
	ВыражениеПоляПредпраздничныеДниМесяца = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ПредпраздничныеДниМесяца");
	ВыражениеПоляПредпраздничныеДниМесяца  = СтрЗаменить(ВыражениеПоляПредпраздничныеДниМесяца, "&ФильтрМесяц_", ВыраженияПоляМесяц); 
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПредпраздничныеДниМесяца, "ПредпраздничныеДниМесяца", Ложь);
	
	ВыражениеПоляНормаДнейКалендаряМесяц = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "НормаДнейКалендаряМесяц");
	ВыражениеПоляНормаДнейКалендаряМесяц = СтрЗаменить(ВыражениеПоляНормаДнейКалендаряМесяц, "&ФильтрМесяц_", ВыраженияПоляМесяц); 
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляНормаДнейКалендаряМесяц, "НормаДнейКалендаряМесяц", Ложь);
	
	ВыражениеПоляРабочиеДниМесяца = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "РабочиеДниМесяца");
	ВыражениеПоляРабочиеДниМесяца = СтрЗаменить(ВыражениеПоляНормаДнейКалендаряМесяц, "&ФильтрМесяц_", ВыраженияПоляМесяц); 
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляРабочиеДниМесяца, "РабочиеДниМесяца", Ложь);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция НовыйФильтрПолученияДанныхКалендарей() Экспорт 
	ФильтрПолученияДанныхКалендарей = Новый ТаблицаЗначений;
	ФильтрПолученияДанныхКалендарей.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ФильтрПолученияДанныхКалендарей.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ФильтрПолученияДанныхКалендарей.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат ФильтрПолученияДанныхКалендарей;
КонецФункции	

Функция ДанныеПроизводственныхКалендарей(ПериодыКалендари) Экспорт
	Если ПериодыКалендари.Количество() = 0 Тогда
		Возврат ДанныеПроизводственныхКалендарейПустаяТаблица();
	КонецЕсли;	
	
	ПериодыКалендари.Свернуть("ПроизводственныйКалендарь, ДатаНачала, ДатаОкончания");
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
							ПериодыКалендари,
							"ПроизводственныйКалендарь");
							
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ДанныеПроизводственногоКалендаря");						
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
		
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РабочиеДни,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПредпраздничныеДни,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПраздничныеДни,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НормаДнейКалендаря,
	|		СУММА(1) КАК ДнейКалендарных,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 7
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 8
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасовПоПятидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|					ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейПоШестидневке,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейКалендарныхБезУчетаПраздников,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Праздников,
	|	&ШаблонДатаНачала КАК ДатаНачала,
	|	&ШаблонДатаОкончания КАК ДатаОкончания,
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ИЗ
	|	ВТРазличныеИсточникиДанныхНормыВремениКалендарей КАК Календари
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (&ШаблонУсловиеПоИзмерениям)
	|			И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ФильтрДатаНачала_ И &ФильтрДатаОкончания_
	|СГРУППИРОВАТЬ ПО
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь,
	|	&ШаблонДатаНачала,
	|	&ШаблонДатаОкончания";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
		
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("Календари", "ДанныеПроизводственногоКалендаря");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");	
	ВыраженияПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ВыраженияПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ВыраженияПоляДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ВыраженияПоляДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыраженияПоляДатаНачала, "ДатаНачала");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыраженияПоляДатаНачала);
	
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыраженияПоляДатаОкончания, "ДатаОкончания");
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьГруппировку(ОператорЗапроса, ВыраженияПоляДатаОкончания);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(ОписаниеПакета, ОписаниеФильтра, ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ПраздничныеДниКалендаря(Календарь, ДатаНачала, ДатаОкончания) Экспорт
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата");
КонецФункции	
	
Функция НормаЧасовКалендаряЗаГод(ДанныеКалендаря, СвойстваГрафика) Экспорт 
	Если ДанныеКалендаря Или СвойстваГрафика = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	ДлительностьРабочейНеделиДней = 5;
	
	Если СвойстваГрафика.ДлительностьРабочейНеделиЧасов / ДлительностьРабочейНеделиДней * ДанныеКалендаря.НормаДнейКалендаряМесяц > ДанныеКалендаря.ПредпраздничныеДниМесяца Тогда
		Возврат СвойстваГрафика.ДлительностьРабочейНеделиЧасов / ДлительностьРабочейНеделиДней * ДанныеКалендаря.НормаДнейКалендаряГод - ДанныеКалендаря.ПредпраздничныеДниГода;
	КонецЕсли;	
	
	Возврат 0;
КонецФункции

Функция НормаЧасовКалендаряЗаМесяц(ДанныеКалендаря, СвойстваГрафика) Экспорт
	Если ДанныеКалендаря Или СвойстваГрафика = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	ДлительностьРабочейНеделиДней = 5;
	
	Если СвойстваГрафика.ДлительностьРабочейНеделиЧасов / ДлительностьРабочейНеделиДней * ДанныеКалендаря.НормаДнейКалендаряМесяц > ДанныеКалендаря.ПредпраздничныеДниМесяца Тогда
		Возврат СвойстваГрафика.ДлительностьРабочейНеделиЧасов / ДлительностьРабочейНеделиДней * ДанныеКалендаря.НормаДнейКалендаряМесяц - ДанныеКалендаря.ПредпраздничныеДниМесяца;
	КонецЕсли;	
	
	Возврат 0;
КонецФункции

Функция ДанныеПроизводственныхКалендарейСводноПустаяТаблица()
	ДанныеПроизводственныхКалендарей = Новый ТаблицаЗначений;
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("РабочиеДниМесяца", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПредпраздничныеДниМесяца", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("НормаДнейКалендаряМесяц", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("РабочиеДниГода", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПредпраздничныеДниГода", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("НормаДнейКалендаряГод", Новый ОписаниеТипов("Число"));
	
	
	Возврат ДанныеПроизводственныхКалендарей;	
КонецФункции	

Функция БуквенныйКодВидаВремени(ВидВремени, ПериодРегистрации) Экспорт
	
	Если ВидВремени = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидВремени, БуквенныйКодИмяРеквизита(ПериодРегистрации));
	КонецЕсли;
	
КонецФункции

Функция ДанныеПроизводственныхКалендарейПустаяТаблица()
	ДанныеПроизводственныхКалендарей = Новый ТаблицаЗначений;
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПроизводственныйКалендарь", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("РабочиеДни", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПредпраздничныеДни", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ПраздничныеДни", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("НормаДнейКалендаря", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДнейКалендарных", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДнейПоПятидневке", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ЧасовПоПятидневке", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДнейПоШестидневке", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("ДнейКалендарныхБезУчетаПраздников", Новый ОписаниеТипов("Число"));
	ДанныеПроизводственныхКалендарей.Колонки.Добавить("Праздников", Новый ОписаниеТипов("Число"));
	
	Возврат ДанныеПроизводственныхКалендарей;	
КонецФункции

Процедура ПеренестиДанныеУчетаВремениВНовыеРегистры() Экспорт 
	РегистраторыДляПереноса = РегистраторыДляЗаполненияНовыхРегистров();	
	
	Пока РегистраторыДляПереноса.Следующий() Цикл
		НачатьТранзакцию();
		Если РегистраторыДляПереноса.ЕстьОстальныеДанные Тогда			
			ДанныеДляЗаписи = ДанныеДляЗаписиВНовыеРегистры(РегистраторыДляПереноса.Регистратор);
			
			ЗаписатьДанныеВНовыеРегистры(РегистраторыДляПереноса.Регистратор, ДанныеДляЗаписи);	
			
			Если РегистраторыДляПереноса.ЕстьДанныеТабеля Тогда
				УдалитьЛишниеЗаписиИзНабораДанныхТабеля(РегистраторыДляПереноса.Регистратор);
			Иначе
				Набор = РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Установить(РегистраторыДляПереноса.Регистратор);
				Набор.ОбменДанными.Загрузка = Истина;
				Набор.Записать();
			КонецЕсли;	
		Иначе
			ОписаниеРегистра = РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.ОписаниеРегистра();
			Набор = РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(РегистраторыДляПереноса.Регистратор);
			Набор.Прочитать();
			ЗаписатьПараметрыРегистрируемыхДанных(РегистраторыДляПереноса.Регистратор, ОписаниеРегистра, Истина); 			
		КонецЕсли; 
		ЗафиксироватьТранзакцию();
	КонецЦикла;	 	
КонецПроцедуры

Функция ВидыВремениВключаемыеВНорму() Экспорт
	ВидыВремени = Новый Массив;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	

	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	

	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеВремяОбучающихся");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	

	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВРежимеНеполногоВремени");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремени.Добавить(ВидВремени);
	КонецЕсли;	                                                                                                   
	
	Если ВыделятьНерабочиеДниОтдельнымВидомВремени() Тогда
		ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни");
		Если ЗначениеЗаполнено(ВидВремени) Тогда
			ВидыВремени.Добавить(ВидВремени);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ВидыВремени;
КонецФункции	

// Возвращает описание набора для метода СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды.
//
// Возвращаемое значение - структура с полями
//			ТипИсточникаДанных - (Тип) - тип источника данных. Тип("ТаблицаЗначений") или Тип("МенеджерВременныхТаблиц")
//			ИмяПоляСотрудник - строка 
//			ИмяПоляДатаНачала - строка
//			ИмяПоляДатаОкончания - строка.
//
Функция ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных() Экспорт
	ОписаниеИсходногоНабора = Новый Структура;
	ОписаниеИсходногоНабора.Вставить("ТипИсточникаДанных", Тип("МенеджерВременныхТаблиц"));
	ОписаниеИсходногоНабора.Вставить("ТаблицаИсточникДанных");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляДатаНачала", "ДатаНачала");
	ОписаниеИсходногоНабора.Вставить("ИмяПоляДатаОкончания", "ДатаОкончания");
	
	Возврат ОписаниеИсходногоНабора;
	
КонецФункции	

// Возвращает объект (Обработка.МенеджерДанныхУчетаВремениСотрудников), 
// реализующий набор методов для получения данных учета времени.
// Оптимально использовать, когда данные запрашиваются несколько раз. 
// На вход передается описание набора данных, по которому в дальнейшем будут запрашиваться данные.
// Обращения к некотором методам возможны только в разрезе значений переданных в наборе данных.
// (подробнее см. Обработка.МенеджерДанныхУчетаВремениСотрудников).
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  ДатаАктуальности - Дата - дата, ограничивающая период определения источников данных учета времени. 
//                            Обычно ПериодРегистрации документа-начислятеля. 
//  ОписаниеНабораСотрудников - см. ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных() - 
//
// Возвращаемое значение: 
//  ОбработкаОбъект.МенеджерДанныхУчетаВремениСотрудников
//
Функция СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(МенеджерВременныхТаблиц, ДатаАктуальности, ОписаниеНабораСотрудников) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерДанных = Обработки.МенеджерДанныхУчетаВремениСотрудников.Создать();	
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерДанных.УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблиц);
	МенеджерДанных.УстановитьДатуАктуальности(ДатаАктуальности);
	МенеджерДанных.УстановитьИсходныйНаборСотрудников(ОписаниеНабораСотрудников);
	
	Возврат МенеджерДанных;
	
КонецФункции

// Возвращает объект (Обработка.МенеджерДанныхУчетаВремениСотрудников), 
// реализующий набор методов для получения данных учета времени. 
// Оптимально использовать, когда данные запрашиваются один раз или заранее неизвестен набор данных, 
// по которому будут выполняться запросы.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//  ДатаАктуальности - Дата - дата, ограничивающая период определения источников данных учета времени. 
//                            Обычно ПериодРегистрации документа-начислятеля 
//  ИмяПоляДатаОкончания - Строка.
//
// Возвращаемое значение:
//  ОбработкаОбъект.МенеджерДанныхУчетаВремениСотрудников
//
Функция СоздатьМенеджерДанных(МенеджерВременныхТаблиц, ДатаАктуальности) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерДанных = Обработки.МенеджерДанныхУчетаВремениСотрудников.Создать();	
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерДанных.УстановитьМенеджерВременныхТаблиц(МенеджерВременныхТаблиц);
	МенеджерДанных.УстановитьДатуАктуальности(ДатаАктуальности);
	
	Возврат МенеджерДанных;
	
КонецФункции

Функция ТребуетсяПолучениеТерриторий(ПараметрыФормированияДанных)
	
	ПолучатьТерритории = Истина;
	
	Если Не ПараметрыФормированияДанных.ПолучатьУсловияТрудаИТерритории Тогда
		ПолучатьТерритории = Ложь;
	ИначеЕсли Не ПараметрыФормированияДанных.УчитыватьТабельныеДанныеОТерриториях Тогда
		ПолучатьТерритории = Ложь;	
	КонецЕсли;
	
	Возврат ПолучатьТерритории;
	
КонецФункции

#Область ПроверкаРегистрируемыхДанныхОВремениСотрудников

Функция ПроверитьРегистрациюВнутрисменногоВремени(Регистратор, ДанныеОВремени, ПериодРегистрации = Неопределено, Отказ = Ложь) Экспорт
	ОписанияОшибокВводаВремени = Новый Массив;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеОВремениВнутрисменныхОтклонений(МенеджерВТ, ДанныеОВремени);
	
	ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ);
	
	ПроверитьСочетаниеФактическогоВремениВытесняемомуПлановому(МенеджерВТ, ОписанияОшибокВводаВремени, ПериодРегистрации, Отказ);
	
	Возврат ОписанияОшибокВводаВремени;	
		
КонецФункции	

Процедура ПроверитьСочетаниеФактическогоВремениВытесняемомуПлановому(МенеджерВременныхТаблиц, ОписанияОшибокВводаВремени, ПериодРегистрации = Неопределено, Отказ = Ложь)
	СоздатьВТДопустимыеСочетанияПлановогоИФактическогоВремени(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ?(ПериодРегистрации = Неопределено, '00010101', ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОВремени.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК Месяц,
	|	ВЫБОР
	|		КОГДА &ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ)
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ КАК ДатаАктуальности,
	|	НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();

	СоздатьВТПлановоеВремя(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОЧасовыхОтклонениях.Сотрудник КАК Сотрудник,
	|	ДанныеОЧасовыхОтклонениях.Дата КАК Дата,
	|	Сотрудники.Наименование КАК СотрудникНаименование,
	|	ВЫБОР
	|		КОГДА ПлановоеВремя.ВидУчетаВремени ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесоответствиеФактическогоВремениПлановому,
	|	ДанныеОЧасовыхОтклонениях.Часов КАК ЧасовФакт,
	|	ЕСТЬNULL(ПлановоеВремя.ЧасыПлан, 0) КАК ЧасовПлан,
	|	ВЫБОР
	|		КОГДА ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениФактический ЕСТЬ NULL
	|				ИЛИ ОписаниеПлановыхВидовВремени.Целосменное
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НедопустимоеСочетаниеФактическогоИПлановогоВремени,
	|	ОписаниеФактическихВидовВремени.Наименование КАК ВидВремениНаименование,
	|	ОписаниеПлановыхВидовВремени.Наименование КАК ВидВремениВытесняемыйНаименование,
	|	ОписаниеПлановыхВидовВремени.Ссылка КАК ВидВремениПлановый,
	|	ОписаниеФактическихВидовВремени.Ссылка КАК ВидВремениФактический
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОЧасовыхОтклонениях
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ДанныеОЧасовыхОтклонениях.Сотрудник = Сотрудники.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеПлановыхВидовВремени
	|		ПО ДанныеОЧасовыхОтклонениях.ВидВремениВытесняемый = ОписаниеПлановыхВидовВремени.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеФактическихВидовВремени
	|		ПО ДанныеОЧасовыхОтклонениях.ВидВремени = ОписаниеФактическихВидовВремени.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопустимыеСочетанияПлановогоИФактическогоВремени КАК ДопустимыеСочетанияПлановогоИФактическогоВремени
	|		ПО (ОписаниеФактическихВидовВремени.ОсновноеВремя = ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениФактический)
	|			И (ОписаниеПлановыхВидовВремени.ОсновноеВремя = ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениПлановый)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановоеВремя КАК ПлановоеВремя
	|		ПО ДанныеОЧасовыхОтклонениях.Сотрудник = ПлановоеВремя.Сотрудник
	|			И ДанныеОЧасовыхОтклонениях.Дата = ПлановоеВремя.Дата
	|			И ДанныеОЧасовыхОтклонениях.ВидВремениВытесняемый = ПлановоеВремя.ВидУчетаВремени
	|			И ДанныеОЧасовыхОтклонениях.ПереходящаяЧастьПредыдущейСмены = ПлановоеВремя.ПереходящаяЧастьПредыдущейСмены
	|			И ДанныеОЧасовыхОтклонениях.ПереходящаяЧастьТекущейСмены = ПлановоеВремя.ПереходящаяЧастьТекущейСмены
	|ГДЕ
	|	(ВЫБОР
	|				КОГДА ПлановоеВремя.ВидУчетаВремени ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ВЫБОР
	|				КОГДА ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениФактический ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|			ИЛИ ЕСТЬNULL(ПлановоеВремя.ЧасыПлан, 0) < ДанныеОЧасовыхОтклонениях.Часов)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстОшибкиНедопустимоеСочетаниеШаблон = НСтр("ru = '%1: за %2 вместо планового вида времени %3 не может быть введен фактический вид времени %4';
													|en = '%1: %4 actual time kind cannot be entered for %2 instead of %3 planned time kind'");
	ТекстОшибкиНесоответствиеПланаФактуШаблон = НСтр("ru = '%1: за %2 для сотрудника по графику не запланировано вида времени %3, 
                                                     |рекомендуется оформить на данного сотрудника отдельный документ.';
                                                     |en = '%1: %3 time kind is not planned for %2 for employee on schedule,
                                                     |it is recommended that you register a separate document for the employee.'");
	ТекстОшибкиНесоответствиеЧасовПлануШаблон = НСтр("ru = '%1: за %2 для сотрудника по виду времени %3, запланировано меньше часов,
                                                     |чем часов регистрируемого отклонения.';
                                                     |en = '%1: by %3 time kind less hours are planned for %2 for the employee
                                                     |than hours of the registered variance.'");

	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		Если Выборка.НесоответствиеФактическогоВремениПлановому Тогда
			ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
			ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
			ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремениФактический;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиНесоответствиеПланаФактуШаблон, Выборка.СотрудникНаименование,
			                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																				  Выборка.ВидВремениВытесняемыйНаименование);
		
			ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
			ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
			ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
		ИначеЕсли Выборка.ЧасовПлан < Выборка.ЧасовФакт Тогда
			ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
			ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
			ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремениФактический;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиНесоответствиеЧасовПлануШаблон, Выборка.СотрудникНаименование,
			                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																				  Выборка.ВидВремениВытесняемыйНаименование);
		
			ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
			ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
			ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
		КонецЕсли;
		
		Если Выборка.НедопустимоеСочетаниеФактическогоИПлановогоВремени Тогда
			ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
			ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
			ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремениФактический;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиНедопустимоеСочетаниеШаблон, Выборка.СотрудникНаименование,
			                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																				  Выборка.ВидВремениВытесняемыйНаименование, Выборка.ВидВремениНаименование);
		
			ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
			ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
			ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);	
		КонецЕсли;	
	КонецЦикла;	
			
КонецПроцедуры	

Процедура ПроверитьСоответствиеРегистрируемыхЧасовДлинеСуток(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремени.Дата КАК Дата,
	|	ДанныеОВремени.Сотрудник КАК Сотрудник,
	|	Сотрудники.Наименование КАК СотрудникНаименование,
	|	СУММА(ДанныеОВремени.Часов) КАК Часов
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО ДанныеОВремени.ВидВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|			И (ВидыИспользованияРабочегоВремени.ОсновноеВремя <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ДанныеОВремени.Сотрудник = Сотрудники.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремени.Дата,
	|	ДанныеОВремени.ПереходящаяЧастьСмены,
	|	ДанныеОВремени.Сотрудник,
	|	Сотрудники.Наименование
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДанныеОВремени.Часов) > 24
	|		ИЛИ СУММА(ДанныеОВремени.Часов) < 0)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстОшибкиПревышениеШаблон = НСтр("ru = '%1: за %2 зарегистрировано более 24 часов.';
										|en = '%1: more than 24 hours are registered for %2.'");
	ТекстОшибкиОтрицательныеЧасыШаблон = НСтр("ru = '%1: за %2 зарегистрировано отрицательное число часов.';
												|en = '%1: negative number of hours is registered for %2.'");

	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
		
		Если Выборка.Часов > 24 Тогда 
			ТекстОшибкиШаблон = ТекстОшибкиПревышениеШаблон;
		Иначе
			ТекстОшибкиШаблон = ТекстОшибкиОтрицательныеЧасыШаблон;
		КонецЕсли;	
			
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"));
		
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
		
		ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
		
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПроверитьСоответствиеФактическогоВремениПлановому(МенеджерВременныхТаблиц, ОписанияОшибокВводаВремени, ПериодРегистрации = Неопределено, Отказ = Ложь) Экспорт 
	
	Настройки = НастройкиУчетаВремени();
	
	Если Не Настройки.ПроверятьСоответствиеФактическогоВремениПлановому Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьВТДопустимыеСочетанияПлановогоИФактическогоВремени(МенеджерВременныхТаблиц);
	                                                                   
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ?(ПериодРегистрации = Неопределено, '00010101', ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидВремениВыходной", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОВремени.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК Месяц,                                                                        
	|	ВЫБОР
	|		КОГДА &ПериодРегистрации = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ)
	|		ИНАЧЕ &ПериодРегистрации
	|	КОНЕЦ КАК ДатаАктуальности,
	|	НАЧАЛОПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(ДанныеОВремени.Дата, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();

	СоздатьВТПлановоеВремя(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	СостоянияСотрудников.СоздатьВТПериодыСостоянийСотрудников(МенеджерВременныхТаблиц, "ВТСотрудники");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСменыРаботыСотрудников") Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТПлановоеВремя.Сотрудник КАК Сотрудник,
		|	ВТПлановоеВремя.Месяц КАК Месяц,
		|	ВТПлановоеВремя.ДатаАктуальности КАК ДатаАктуальности,
		|	ВТПлановоеВремя.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТПлановоеВремя.План КАК План,
		|	ВТПлановоеВремя.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
		|	ВТПлановоеВремя.Дата КАК Дата,
		|	ВТПлановоеВремя.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ВТПлановоеВремя.Территория КАК Территория,
		|	ВТПлановоеВремя.УсловияТруда КАК УсловияТруда,
		|	ВТПлановоеВремя.Дни КАК Дни,
		|	ВТПлановоеВремя.Часы КАК Часы,
		|	ВТПлановоеВремя.ДниПлан КАК ДниПлан,
		|	ВТПлановоеВремя.ЧасыПлан КАК ЧасыПлан,
		|	ВТПлановоеВремя.ДниНорма КАК ДниНорма,
		|	ВТПлановоеВремя.ЧасыНорма КАК ЧасыНорма,
		|	ВТПлановоеВремя.Смена КАК Смена,
		|	ВТПлановоеВремя.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
		|	ВТПлановоеВремя.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены
		|ПОМЕСТИТЬ ВТПлановоеВремяВременно
		|ИЗ
		|	ВТПлановоеВремя КАК ВТПлановоеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановоеВремя КАК ВТПлановоеВремяПредыдущаяСмена
		|		ПО ВТПлановоеВремя.Сотрудник = ВТПлановоеВремяПредыдущаяСмена.Сотрудник
		|			И ВТПлановоеВремя.Дата = ВТПлановоеВремяПредыдущаяСмена.Дата
		|			И (ВТПлановоеВремяПредыдущаяСмена.ПереходящаяЧастьПредыдущейСмены = ИСТИНА)
		|ГДЕ
		|	(ВТПлановоеВремя.ПереходящаяЧастьТекущейСмены = ИСТИНА
		|			ИЛИ ВТПлановоеВремяПредыдущаяСмена.Сотрудник ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПлановоеВремя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТПлановоеВремяВременно.Сотрудник КАК Сотрудник,
		|	ВТПлановоеВремяВременно.Месяц КАК Месяц,
		|	ВТПлановоеВремяВременно.ДатаАктуальности КАК ДатаАктуальности,
		|	ВТПлановоеВремяВременно.ПериодРегистрации КАК ПериодРегистрации,
		|	ВТПлановоеВремяВременно.План КАК План,
		|	ВТПлановоеВремяВременно.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
		|	ВТПлановоеВремяВременно.Дата КАК Дата,
		|	ВТПлановоеВремяВременно.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ВТПлановоеВремяВременно.Территория КАК Территория,
		|	ВТПлановоеВремяВременно.УсловияТруда КАК УсловияТруда,
		|	ВТПлановоеВремяВременно.Дни КАК Дни,
		|	ВТПлановоеВремяВременно.Часы КАК Часы,
		|	ВТПлановоеВремяВременно.ДниПлан КАК ДниПлан,
		|	ВТПлановоеВремяВременно.ЧасыПлан КАК ЧасыПлан,
		|	ВТПлановоеВремяВременно.ДниНорма КАК ДниНорма,
		|	ВТПлановоеВремяВременно.ЧасыНорма КАК ЧасыНорма,
		|	ВТПлановоеВремяВременно.Смена КАК Смена,
		|	ВТПлановоеВремяВременно.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
		|	ВТПлановоеВремяВременно.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены
		|ПОМЕСТИТЬ ВТПлановоеВремя
		|ИЗ
		|	ВТПлановоеВремяВременно КАК ВТПлановоеВремяВременно";
		
		Запрос.Выполнить();
		
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическоеВремя.Сотрудник КАК Сотрудник,
	|	ОписаниеФактическихВидовВремени.Ссылка КАК ВидВремениФактический,
	|	ОписаниеФактическихВидовВремени.Наименование КАК ВидВремениФактическийНаименование,
	|	ОписаниеПлановыхВидовВремени.Ссылка КАК ВидВремениПлановый,
	|	ОписаниеПлановыхВидовВремени.Наименование КАК ВидВремениПлановыйНаименование,
	|	ФактическоеВремя.Дата КАК Дата,
	|	Сотрудники.Наименование КАК СотрудникНаименование
	|ИЗ
	|	ВТДанныеОВремени КАК ФактическоеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановоеВремя КАК ПлановоеВремя
	|		ПО ФактическоеВремя.Сотрудник = ПлановоеВремя.Сотрудник
	|			И ФактическоеВремя.Дата = ПлановоеВремя.Дата
	|			И (НЕ ФактическоеВремя.План)
	|			И (ПлановоеВремя.ДниПлан > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСостоянийСотрудников КАК ПериодыСостоянийСотрудников
	|		ПО ФактическоеВремя.Сотрудник = ПериодыСостоянийСотрудников.Сотрудник
	|			И (ФактическоеВремя.Дата МЕЖДУ ПериодыСостоянийСотрудников.Начало И ПериодыСостоянийСотрудников.Окончание)
	|			И (ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускОсновной)
	|				ИЛИ ПериодыСостоянийСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныйОтпуск))
	|			И (ФактическоеВремя.ВидВремени = &ВидВремениВыходной)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеПлановыхВидовВремени
	|		ПО (ПлановоеВремя.ВидУчетаВремени = ОписаниеПлановыхВидовВремени.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеФактическихВидовВремени
	|		ПО ФактическоеВремя.ВидВремени = ОписаниеФактическихВидовВремени.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФактическоеВремя.Сотрудник = Сотрудники.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДопустимыеСочетанияПлановогоИФактическогоВремени КАК ДопустимыеСочетанияПлановогоИФактическогоВремени
	|		ПО (ОписаниеФактическихВидовВремени.ОсновноеВремя = ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениФактический)
	|			И (ОписаниеПлановыхВидовВремени.ОсновноеВремя = ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениПлановый)
	|ГДЕ
	|	ДопустимыеСочетанияПлановогоИФактическогоВремени.ВидВремениПлановый ЕСТЬ NULL
	|	И ПериодыСостоянийСотрудников.Сотрудник ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстОшибкиШаблон = НСтр("ru = '%1: за %2 вид времени %3 не совпадает с плановыми данными %4';
							|en = '%1: for %2 time kind %3 does not match the planned data %4'");
	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
		ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремениФактический;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																			  Выборка.ВидВремениФактическийНаименование,  Выборка.ВидВремениПлановыйНаименование);
		
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
		
		ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
		
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	

КонецПроцедуры	

Процедура ПроверитьРегистрациюЦелосменногоВремени(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОВремениЦелосменное.Дата КАК Дата,
	|	ДанныеОВремениЦелосменное.Сотрудник КАК Сотрудник,
	|	ДанныеОВремениЦелосменное.ВидВремени КАК ВидВремени,
	|	ВидыИспользованияРабочегоВремени.Наименование КАК ВидВремениНаименование,
	|	Сотрудники.Наименование КАК СотрудникНаименование
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремениЦелосменное
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО ДанныеОВремениЦелосменное.ВидВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|			И (ВидыИспользованияРабочегоВремени.Целосменное)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОВремени КАК ДанныеОВремениДополнительно
	|		ПО ДанныеОВремениЦелосменное.Дата = ДанныеОВремениДополнительно.Дата
	|			И ДанныеОВремениЦелосменное.Сотрудник = ДанныеОВремениДополнительно.Сотрудник
	|			И ДанныеОВремениЦелосменное.ВидВремени <> ДанныеОВремениДополнительно.ВидВремени
	|			И (НЕ ДанныеОВремениДополнительно.ПереходящаяЧастьСмены
	|				ИЛИ ДанныеОВремениДополнительно.ОтражатьЧасыВДеньНачалаСмены)
	|			И ДанныеОВремениЦелосменное.ВидВремени <> ДанныеОВремениДополнительно.ВидВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ДанныеОВремениЦелосменное.Сотрудник = Сотрудники.Ссылка
	|ГДЕ
	|	НЕ Сотрудники.Ссылка ЕСТЬ NULL";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстОшибкиШаблон = НСтр("ru = '%1: за %2 вместе с целосменным видом времени %3 не может быть введен другой вид времени.';
							|en = '%1: another time kind cannot be entered for %2 along with %3 full-shift time kind.'");
	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
		ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремени;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																			  Выборка.ВидВремениНаименование);
		
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
		
		ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
		
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	
КонецПроцедуры	

Процедура ПроверитьЗаполненияЧасов(МенеджерВТ, ОписанияОшибокВводаВремени, Отказ = Ложь) Экспорт
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремени.Дата,
	|	ДанныеОВремени.Сотрудник,
	|	ДанныеОВремени.ВидВремени,
	|	ДанныеОВремени.Часов,
	|	ВидыИспользованияРабочегоВремени.Наименование КАК ВидВремениНаименование,
	|	ДанныеОВремени.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО ДанныеОВремени.ВидВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|ГДЕ
	|	ДанныеОВремени.Часов = 0
	|	И ВидыИспользованияРабочегоВремени.РабочееВремя
	|	И НЕ ВидыИспользованияРабочегоВремени.Ссылка В (&ВидыВремениПраздники)";
	
	ВидыВремениПраздники = Новый Массив;
	ВидыВремениПраздники.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	ВидыВремениПраздники.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты"));
	
	Запрос.УстановитьПараметр("ВидыВремениПраздники", ВидыВремениПраздники);
	Запрос.УстановитьПараметр("ВидыВремениСплошнойРегистрации", ВидыВремениСплошнойРегистрации());

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстОшибкиШаблон = НСтр("ru = '%1: за %2 по виду времени %3 не указано количество часов.';
							|en = '%1: number of hours is not specified by %3 time kind for %2.'");
	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
		ОписаниеОшибкиВводаВремени.ВидВремени = Выборка.ВидВремени;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"),
																			  Выборка.ВидВремениНаименование);
		
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
		
		ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
		
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	

КонецПроцедуры	

Процедура ПроверитьУникальностьВводаИтоговыхДанных(МенеджерВТ, Регистратор, ПериодРегистрации, ОписанияОшибокВводаВремени, ПлановыеДанные = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("План", ПлановыеДанные);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочееВремяСотрудников.Период КАК Период,
	|	РабочееВремяСотрудников.Регистратор КАК Регистратор,
	|	РабочееВремяСотрудников.Сотрудник КАК Сотрудник,
	|	РабочееВремяСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	РабочееВремяСотрудников.Территория КАК Территория,
	|	РабочееВремяСотрудников.УсловияТруда КАК УсловияТруда,
	|	РабочееВремяСотрудников.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	РабочееВремяСотрудников.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	РабочееВремяСотрудников.Смена КАК Смена,
	|	РабочееВремяСотрудников.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДанныеТабельногоУчетаБезОткрытыхСторноЗаписей
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК РабочееВремяСотрудников
	|ГДЕ
	|	РабочееВремяСотрудников.ПериодРегистрации = &ПериодРегистрации
	|	И РабочееВремяСотрудников.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремяСотрудников.ПереходящаяЧастьТекущейСмены,
	|	РабочееВремяСотрудников.Территория,
	|	РабочееВремяСотрудников.ВидУчетаВремени,
	|	РабочееВремяСотрудников.ПереходящаяЧастьПредыдущейСмены,
	|	РабочееВремяСотрудников.УсловияТруда,
	|	РабочееВремяСотрудников.Смена,
	|	РабочееВремяСотрудников.Организация,
	|	РабочееВремяСотрудников.Период,
	|	РабочееВремяСотрудников.Регистратор,
	|	РабочееВремяСотрудников.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	СУММА(РабочееВремяСотрудников.Дни) >= 0 И
	|	СУММА(РабочееВремяСотрудников.Часы) >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочееВремяСотрудников.Сотрудник КАК Сотрудник,
	|	РабочееВремяСотрудников.Сотрудник.Наименование КАК СотрудникНаименование,
	|	РабочееВремяСотрудников.Регистратор КАК Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(РабочееВремяСотрудников.Регистратор) КАК РегистраторПредставление
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеИндивидуальныхГрафиковСотрудников КАК РабочееВремяСотрудников
	|		ПО ДанныеОВремени.Сотрудник = РабочееВремяСотрудников.Сотрудник
	|			И ДанныеОВремени.Дата = РабочееВремяСотрудников.Период
	|			И (НЕ ДанныеОВремени.ПереходящаяЧастьСмены)
	|			И (НЕ РабочееВремяСотрудников.ПереходящаяЧастьПредыдущейСмены)
	|			И (&План)
	|			И (РабочееВремяСотрудников.ПериодРегистрации = &ПериодРегистрации)
	|			И (РабочееВремяСотрудников.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РабочееВремяСотрудников.Сотрудник,
	|	РабочееВремяСотрудников.Сотрудник.Наименование,
	|	РабочееВремяСотрудников.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(РабочееВремяСотрудников.Регистратор)
	|ИЗ
	|	ВТДанныеОВремени КАК ДанныеОВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеТабельногоУчетаБезОткрытыхСторноЗаписей КАК РабочееВремяСотрудников
	|		ПО ДанныеОВремени.Сотрудник = РабочееВремяСотрудников.Сотрудник
	|			И ДанныеОВремени.Дата = РабочееВремяСотрудников.Период
	|			И (НЕ ДанныеОВремени.ПереходящаяЧастьСмены)
	|			И (НЕ РабочееВремяСотрудников.ПереходящаяЧастьПредыдущейСмены)
	|			И (НЕ &План)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПлановыеДанные Тогда
		ТекстОшибкиШаблон = НСтр("ru = 'Для сотрудника %1 уже введен документ  ""Индивидуальный график"": %2.';
								|en = 'The ""Individual schedule"" document is already entered for the %1 employee: %2.'");
	Иначе
		ТекстОшибкиШаблон = НСтр("ru = 'Для сотрудника %1 уже введен документ ""Табель учета рабочего времени"": %2.';
								|en = 'The ""Timesheet"" document is already entered for the %1 employee: %2.'");
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
	
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Выборка.РегистраторПредставление);
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;
		ОписаниеОшибкиВводаВремени.Документ = Выборка.Регистратор;
			
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ТабельПроверитьЦелостностьЗаполненияПериода(МенеджерВТ, Организация, Подразделение, ДатаНачала, ДатаОкончания, ИмяВТЗарегистрированныеРанееПериоды, ОписанияОшибокВводаВремени, Отказ = Ложь) Экспорт 
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВТ, ДатаНачала, ДатаОкончания, "ДЕНЬ", "Дата", "ВТПериоды");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаНачала);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТСотрудникиПериоды.Сотрудник,
	|	ВТСотрудникиПериоды.Сотрудник.Наименование КАК СотрудникНаименование
	|ПОМЕСТИТЬ ВТСотрудникиТабеля
	|ИЗ
	|	ВТСотрудникиПериоды КАК ВТСотрудникиПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Дата,
	|	ДанныеОВремени.Сотрудник,
	|	ДанныеОВремени.Сотрудник.Наименование КАК СотрудникНаименование
	|ПОМЕСТИТЬ ВТНезаполненныеДни
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВремени КАК ДанныеОВремени
	|		ПО Периоды.Дата = ДанныеОВремени.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Дата,
	|	ДанныеОВремени.Сотрудник,
	|	ДанныеОВремени.Сотрудник.Наименование
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеОВремени.ВидВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Периоды.Дата,
	|	Сотрудники.Сотрудник,
	|	Сотрудники.СотрудникНаименование
	|ИЗ
	|	ВТСотрудникиТабеля КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВремени КАК ДанныеОВремени
	|		ПО Сотрудники.Сотрудник = ДанныеОВремени.Сотрудник
	|			И (Периоды.Дата = ДанныеОВремени.Дата)
	|ГДЕ
	|	ДанныеОВремени.Дата ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТНезаполненныеДни.Сотрудник
	|ИЗ
	|	ВТНезаполненныеДни КАК ВТНезаполненныеДни";	
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Сотрудники = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Сотрудники.Добавить(Выборка.Сотрудник);		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		УсловиеПодразделение = "ПериодыРаботы.Подразделение = &Подразделение";
	Иначе
		Подразделение = Неопределено;
		УсловиеПодразделение = "ИСТИНА";	
	КонецЕсли;
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.Организация  		= Организация;
	ПараметрыПолученияРабочихМест.НачалоПериода		= ДатаНачала;
	ПараметрыПолученияРабочихМест.ОкончаниеПериода  = ДатаОкончания;
	ПараметрыПолученияРабочихМест.СписокСотрудников = Сотрудники;
		
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);
	
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПериодыРаботы.Сотрудник КАК Сотрудник,
	|	ПериодыРаботы.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПериодыРаботыСлед.Период ЕСТЬ NULL
	|				ТОГДА &ДатаОкончания
	|			КОГДА ПериодыРаботыСлед.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ПериодыРаботыСлед.Период, ДЕНЬ), ДЕНЬ, -1)
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыРаботыСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыРаботыСотрудников
	|ИЗ
	|	ВТРабочиеМестаСотрудников КАК ПериодыРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК ПериодыРаботыСлед
	|		ПО ПериодыРаботы.Сотрудник = ПериодыРаботыСлед.Сотрудник
	|			И ПериодыРаботы.Период < ПериодыРаботыСлед.Период
	|ГДЕ
	|	ПериодыРаботы.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|	И &УсловиеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыРаботы.Сотрудник,
	|	ПериодыРаботы.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НезаполненныеДни.Сотрудник КАК Сотрудник,
	|	НезаполненныеДни.СотрудникНаименование КАК СотрудникНаименование,
	|	НезаполненныеДни.Дата КАК Дата
	|ИЗ
	|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненныеДни КАК НезаполненныеДни
	|		ПО ПериодыРаботыСотрудников.Сотрудник = НезаполненныеДни.Сотрудник
	|			И ПериодыРаботыСотрудников.ДатаНачала <= НезаполненныеДни.Дата
	|			И ПериодыРаботыСотрудников.ДатаОкончания >= НезаполненныеДни.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеРанееПериоды КАК ЗарегистрированныеРанееПериоды
	|		ПО ПериодыРаботыСотрудников.Сотрудник = ЗарегистрированныеРанееПериоды.Сотрудник
	|			И (ЗарегистрированныеРанееПериоды.ДатаНачала <= НезаполненныеДни.Дата)
	|			И (ЗарегистрированныеРанееПериоды.ДатаОкончания >= НезаполненныеДни.Дата)
	|ГДЕ
	|	ЗарегистрированныеРанееПериоды.Сотрудник ЕСТЬ NULL";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗарегистрированныеРанееПериоды", ИмяВТЗарегистрированныеРанееПериоды);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПодразделение", УсловиеПодразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстОшибкиШаблон = НСтр("ru = '%1: за %2 не введено данных о времени.';
							|en = '%1: time data is not entered for %2.'");
	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;		
		
		ОписаниеОшибкиВводаВремени = НовыйОписаниеОшибкиВводаВремени();
		
		ОписаниеОшибкиВводаВремени.Сотрудник = Выборка.Сотрудник;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиШаблон, Выборка.СотрудникНаименование,
		                                                                      Формат(Выборка.Дата, "ДФ='dd.MM.yyyy ""г.""'"));
		
		ОписаниеОшибкиВводаВремени.ТекстОшибки = ТекстОшибки;	
		
		ОписаниеОшибкиВводаВремени.Дата = Выборка.Дата;
		
		ОписанияОшибокВводаВремени.Добавить(ОписаниеОшибкиВводаВремени);
	КонецЦикла;	

КонецПроцедуры	

Функция ПараметрыДляПроверкиЗаполненияСверхурочныхДокументов() Экспорт

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ДанныеОРаботе");
	ПараметрыПроверки.Вставить("ДокументОбъект");
	ПараметрыПроверки.Вставить("ВремяУчтено", Истина);
	ПараметрыПроверки.Вставить("СогласиеТребуется", Истина);
	ПараметрыПроверки.Вставить("СогласиеПолучено", Истина);
	ПараметрыПроверки.Вставить("Организация");
	ПараметрыПроверки.Вставить("ПериодРегистрации");
	ПараметрыПроверки.Вставить("ИмяПоляСпискаДат");
	
	Возврат ПараметрыПроверки;

КонецФункции

Процедура ПриПроверкеЗаполненияСверхурочныхДокументов(ПараметрыПроверки, Отказ, ПроверяемыеРеквизиты) Экспорт

	Ошибки = Неопределено;
	
	ДанныеОРаботе = ПараметрыПроверки.ДанныеОРаботе;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	СоздатьВТДанныеОСверхурочнойРаботе(МенеджерВТ, ДанныеОРаботе);
	
	ПроверитьПустыеДатыСверхурочныхДокументов(МенеджерВТ, ПараметрыПроверки.ИмяПоляСпискаДат, Ошибки);
	ПроверитьДублиСтрокСверхурочныхДокументов(МенеджерВТ, Ошибки);
	ПроверитьДублиДнейСверхурочныхДокументов(МенеджерВТ, Ошибки);
	Если ПараметрыПроверки.ВремяУчтено Тогда
		ПроверитьЗаполнениеРабочегоВремениСверхурочныхДокументов(МенеджерВТ, Ошибки);
	КонецЕсли;
	ПроверитьЗаполнениеРеквизитовТЧСверхурочныхДокументов(МенеджерВТ, Ошибки, ПроверяемыеРеквизиты);
	
	// Проверка согласий работников
	Если ПараметрыПроверки.СогласиеТребуется И Не ПараметрыПроверки.СогласиеПолучено Тогда
		ТекстСообщения = НСтр("ru = 'Не получено согласие работников.';
								|en = 'Employees'' consent is not received.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.СогласиеПолучено", ТекстСообщения, "");
	КонецЕсли;
	
	// Проверка работающих сотрудников
	КадровыйУчет.ПроверитьРаботающихСотрудниковТабличнойЧастиДокумента(ПараметрыПроверки.ДокументОбъект, "Сотрудники", "Дата", "Дата", Отказ);
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);

КонецПроцедуры

Процедура СоздатьВТДанныеОВремени(МенеджерВТ, ДанныеОВремени) Экспорт
	Если ДанныеОВремени.Колонки.Найти("ВидВремени") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
		ДанныеОВремени.ЗаполнитьЗначения(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"), "ВидВремени");
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("ВидВремениВытесняемый") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("ВидВремениВытесняемый", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("Дней") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число"));
		ДанныеОВремени.ЗаполнитьЗначения(1, "Дней");
	КонецЕсли;	
	Если ДанныеОВремени.Колонки.Найти("Часов") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	КонецЕсли;	
	Если ДанныеОВремени.Колонки.Найти("План") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("План", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("ВЦеломЗаПериод") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("ВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("Смена") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("Смена", Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников"));
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("ПереходящаяЧастьСмены") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("ПереходящаяЧастьСмены", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ДанныеОВремени.Колонки.Найти("ОтражатьЧасыВДеньНачалаСмены") = Неопределено Тогда
		ДанныеОВремени.Колонки.Добавить("ОтражатьЧасыВДеньНачалаСмены", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДанныеОВремени", ДанныеОВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремени.Дата КАК Дата,
	|	ДанныеОВремени.Сотрудник КАК Сотрудник,
	|	ДанныеОВремени.ВидВремени КАК ВидВремени,
	|	ДанныеОВремени.Дней КАК Дней,
	|	ДанныеОВремени.Часов КАК Часов,
	|	ДанныеОВремени.ВидВремениВытесняемый КАК ВидВремениВытесняемый,
	|	ДанныеОВремени.План КАК План,
	|	ДанныеОВремени.Смена КАК Смена,
	|	ДанныеОВремени.ПереходящаяЧастьСмены КАК ПереходящаяЧастьСмены,
	|	ДанныеОВремени.ОтражатьЧасыВДеньНачалаСмены КАК ОтражатьЧасыВДеньНачалаСмены
	|ПОМЕСТИТЬ ВТДанныеОВремениТаблица
	|ИЗ
	|	&ДанныеОВремени КАК ДанныеОВремени
	|ГДЕ
	|	НЕ ДанныеОВремени.ВЦеломЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОВремениТаблица.Дата КАК Дата,
	|	ДанныеОВремениТаблица.Сотрудник КАК Сотрудник,
	|	ДанныеОВремениТаблица.ВидВремени КАК ВидВремени,
	|	МАКСИМУМ(ДанныеОВремениТаблица.Дней) КАК Дней,
	|	СУММА(ДанныеОВремениТаблица.Часов) КАК Часов,
	|	ДанныеОВремениТаблица.ВидВремениВытесняемый КАК ВидВремениВытесняемый,
	|	ДанныеОВремениТаблица.План КАК План,
	|	ДанныеОВремениТаблица.Смена КАК Смена,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьСмены КАК ПереходящаяЧастьСмены,
	|	ДанныеОВремениТаблица.ОтражатьЧасыВДеньНачалаСмены КАК ОтражатьЧасыВДеньНачалаСмены
	|ПОМЕСТИТЬ ВТДанныеОВремени
	|ИЗ
	|	ВТДанныеОВремениТаблица КАК ДанныеОВремениТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремениТаблица.Дата,
	|	ДанныеОВремениТаблица.Сотрудник,
	|	ДанныеОВремениТаблица.ВидВремени,
	|	ДанныеОВремениТаблица.ВидВремениВытесняемый,
	|	ДанныеОВремениТаблица.План,
	|	ДанныеОВремениТаблица.Смена,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьСмены,
	|	ДанныеОВремениТаблица.ОтражатьЧасыВДеньНачалаСмены";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СоздатьВТДанныеОВремениВнутрисменныхОтклонений(МенеджерВТ, ДанныеОВремени) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДанныеОВремени", ДанныеОВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВремени.Дата КАК Дата,
	|	ДанныеОВремени.Сотрудник КАК Сотрудник,
	|	ДанныеОВремени.Часов КАК Часов,
	|	ДанныеОВремени.ВидВремени КАК ВидВремени,
	|	ДанныеОВремени.ВидВремениВытесняемый КАК ВидВремениВытесняемый,
	|	ДанныеОВремени.Смена КАК Смена,
	|	ДанныеОВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДанныеОВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены
	|ПОМЕСТИТЬ ВТДанныеОВремениТаблица
	|ИЗ
	|	&ДанныеОВремени КАК ДанныеОВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОВремениТаблица.Дата КАК Дата,
	|	ДанныеОВремениТаблица.Сотрудник КАК Сотрудник,
	|	СУММА(ДанныеОВремениТаблица.Часов) КАК Часов,
	|	ДанныеОВремениТаблица.ВидВремени КАК ВидВремени,
	|	ДанныеОВремениТаблица.ВидВремениВытесняемый КАК ВидВремениВытесняемый,
	|	ДанныеОВремениТаблица.Смена КАК Смена,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьТекущейСмены
	|		ИЛИ ДанныеОВремениТаблица.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьСмены
	|ПОМЕСТИТЬ ВТДанныеОВремени
	|ИЗ
	|	ВТДанныеОВремениТаблица КАК ДанныеОВремениТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВремениТаблица.Дата,
	|	ДанныеОВремениТаблица.Сотрудник,
	|	ДанныеОВремениТаблица.ВидВремени,
	|	ДанныеОВремениТаблица.ВидВремениВытесняемый,
	|	ДанныеОВремениТаблица.Смена,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьТекущейСмены,
	|	ДанныеОВремениТаблица.ПереходящаяЧастьПредыдущейСмены";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НовыйОписаниеОшибкиВводаВремени() Экспорт
	Возврат Новый Структура("Сотрудник, ВидВремени, Документ, ТекстОшибки, Дата");	
КонецФункции	

Процедура ДобавитьОшибкуПоСотруднику(Ошибки, Сотрудник, ТекстОшибки, Поле = "", КлючДанных = Неопределено) Экспорт
	ОшибкиПоСотруднику = Ошибки.Получить(Сотрудник);
	
	Если ОшибкиПоСотруднику = Неопределено Тогда
		ОшибкиПоСотруднику = Новый Массив;
		Ошибки.Вставить(Сотрудник, ОшибкиПоСотруднику);
	КонецЕсли;
	
	Ошибка = Новый Структура("ТекстОшибки, Поле, КлючДанных", ТекстОшибки, Поле, КлючДанных);
	ОшибкиПоСотруднику.Добавить(Ошибка);
КонецПроцедуры	

Процедура ВывестиОшибкиПоСотрудникам(Ошибки, Отказ = Ложь) Экспорт
	Для Каждого КлючЗначение Из Ошибки Цикл
		Для Каждого Ошибка Из КлючЗначение.Значение Цикл 
			ОбщегоНазначения.СообщитьПользователю(Ошибка.ТекстОшибки, Ошибка.КлючДанных, Ошибка.Поле, , Отказ);	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

Функция ВыделятьНерабочиеДниОтдельнымВидомВремени() Экспорт
	Возврат Константы.ВыделятьНерабочиеДниОтдельнымВидомВремени.Получить();
КонецФункции

Функция ОплачиваемыеНерабочиеПериоды(ПроизводственныйКалендарь) Экспорт
	
	ПериодыНерабочихДней = КалендарныеГрафики.ПериодыНерабочихДней(ПроизводственныйКалендарь, Новый СтандартныйПериод);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыОплатыНерабочихДней.НомерПериода КАК НомерПериода
		|ИЗ
		|	РегистрСведений.ПериодыОплатыНерабочихДней КАК ПериодыОплатыНерабочихДней
		|ГДЕ
		|	ПериодыОплатыНерабочихДней.Оплачивать";
	
	НомераПериодов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НомерПериода");
	
	ОплачиваемыеПериоды = Новый Массив;
	Для Каждого НерабочийПериод Из ПериодыНерабочихДней Цикл
		Если НомераПериодов.Найти(НерабочийПериод.Номер) <> Неопределено Тогда
			ОплачиваемыеПериоды.Добавить(НерабочийПериод);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОплачиваемыеПериоды;
	
КонецФункции

// Возвращает таблицу значений с периодами нерабочих оплачиваемых дней связанных с коронавирусом .
//	
// Параметры:
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - обязательно содержащий в себе таблицы:
//     * ВТСотрудники (имя временной таблицы определяется в параметре ПараметрыПолученияДанныхОВремени) - временная
//     таблица - обязательно содержит поля.
//        ** Сотрудник         - СправочникСсылка.Сотрудники - сотрудник, по которому нужно получить данные.
//        ** Месяц 	           - Дата - месяц, за который нужно получить данные.
//        ** ДатаАктуальности  - Дата - Будут учитываться только те данные о времени, 
//										которые зарегистрированы не позже переданного значения.
//        ** ДатаНачала 	   - Дата - ограничивает период получения данных внутри месяца.
//        ** ДатаОкончания 	   - Дата - ограничивает период получения данных внутри месяца.
//
// Возвращаемое значение
// 	ТаблицаЗначений
//     * Сотрудник         - СправочникСсылка.Сотрудники - сотрудник.
//     * ДатаНачала        - Дата - дата начала периода
//     * ДатаОкончания     - Дата - дата окончания периода
//     * Месяц 	           - Дата - месяц, за который нужно получить данные.
//     * ДатаАктуальности  - Дата - Будут учитываться только те данные о времени, которые зарегистрированы не позже
//                                  переданного значения.
//
Функция ОплачиваемыеКоронавирусныеПериоды(МенеджерВременныхТаблиц) Экспорт
	ОплачиваемыеКоронавирусныеПериоды = Новый ТаблицаЗначений;
	ОплачиваемыеКоронавирусныеПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ОплачиваемыеКоронавирусныеПериоды.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ОплачиваемыеКоронавирусныеПериоды.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	ОплачиваемыеКоронавирусныеПериоды.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ОплачиваемыеКоронавирусныеПериоды.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), ДЕНЬ, -1) КАК ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), ДЕНЬ, 1) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТФильтрГрафиков
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Месяц КАК Месяц,
	|	Сотрудники.ДатаАктуальности КАК ДатаАктуальности,
	|	Сотрудники.ДатаНачала КАК ДатаНачала,
	|	Сотрудники.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТФильтрУчетаВремени
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	ДОБАВИТЬКДАТЕ(Сотрудники.Месяц, МЕСЯЦ, -1),
	|	Сотрудники.ДатаАктуальности,
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), ДЕНЬ, -1),
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), СЕКУНДА, -1)
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	ДОБАВИТЬКДАТЕ(Сотрудники.Месяц, МЕСЯЦ, 1),
	|	Сотрудники.ДатаАктуальности,
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), СЕКУНДА, 1),
	|	ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(Сотрудники.Месяц, МЕСЯЦ), ДЕНЬ, 1)
	|ИЗ
	|	ВТСотрудники КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ОписаниеФильтраГрафики = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоВременнойТаблице("ВТФильтрГрафиков", "Сотрудник");
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистраПериоды(
		Метаданные.РегистрыСведений.ГрафикРаботыСотрудников.Имя,
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтраГрафики,,
		"ВТПериодыКалендарей");
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанных.ИмяВТСотрудники = "ВТФильтрУчетаВремени";
	СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	ОплачиваемыеНерабочиеДни =  ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни");
	ВыходныеДни =  ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОплачиваемыеНерабочиеДни", ОплачиваемыеНерабочиеДни);
	Запрос.УстановитьПараметр("ВыходныеДни", ВыходныеДни);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаРабочегоВремениСотрудников.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дата КАК Дата,
	|	ДанныеУчетаРабочегоВремениСотрудников.Месяц КАК Месяц,
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени
	|ИЗ
	|	ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыКалендарей КАК ПериодыКалендарей
	|		ПО ДанныеУчетаРабочегоВремениСотрудников.Сотрудник = ПериодыКалендарей.Сотрудник
	|			И (ДанныеУчетаРабочегоВремениСотрудников.Дата МЕЖДУ ПериодыКалендарей.НачалоПериода И ПериодыКалендарей.КонецПериода)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ПериодыКалендарей.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыОплатыНерабочихДней КАК ПериодыОплатыНерабочихДней
	|		ПО (ПериодыОплатыНерабочихДней.Оплачивать)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыНерабочихДнейКалендаря КАК ПериодыНерабочихДнейКалендаря
	|		ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ПериодыНерабочихДнейКалендаря.ПроизводственныйКалендарь)
	|			И (ПериодыОплатыНерабочихДней.НомерПериода = ПериодыНерабочихДнейКалендаря.НомерПериода)
	|			И (ДанныеУчетаРабочегоВремениСотрудников.Дата МЕЖДУ ПериодыНерабочихДнейКалендаря.ДатаНачала И ПериодыНерабочихДнейКалендаря.ДатаОкончания)
	|ГДЕ
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени В (&ОплачиваемыеНерабочиеДни, &ВыходныеДни)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ДатаАктуальности,
	|	Месяц,
	|	Дата,
	|	ВидУчетаВремени";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		Пока Выборка.СледующийПоЗначениюПоля("ДатаАктуальности") Цикл
			СтрокаПериода = Неопределено;
			ПервыеНерабочиеВыходные = Неопределено;
			Пока Выборка.Следующий() Цикл
				Если СтрокаПериода = Неопределено 
					Или СтрокаПериода.ДатаОкончания + 1 <> НачалоДня(Выборка.Дата) Тогда
					
					Если Выборка.ВидУчетаВремени = ОплачиваемыеНерабочиеДни Тогда
						НоваяСтрока = ОплачиваемыеКоронавирусныеПериоды.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
						Если ПервыеНерабочиеВыходные <> Неопределено
							И ПервыеНерабочиеВыходные.ДатаОкончания + 1 = НачалоДня(Выборка.Дата) Тогда
							
							НоваяСтрока.ДатаНачала = ПервыеНерабочиеВыходные.ДатаНачала;
						Иначе
							НоваяСтрока.ДатаНачала = НачалоДня(Выборка.Дата);
						КонецЕсли;
						НоваяСтрока.ДатаОкончания = КонецДня(Выборка.Дата);
						
						СтрокаПериода = НоваяСтрока;
						ПервыеНерабочиеВыходные = Неопределено;
					Иначе
						СтрокаПериода = Неопределено;
						Если ПервыеНерабочиеВыходные = Неопределено
							Или ПервыеНерабочиеВыходные.ДатаОкончания + 1 <> НачалоДня(Выборка.Дата) Тогда
							
							ПервыеНерабочиеВыходные = Новый Структура("ДатаНачала, ДатаОкончания");
							ПервыеНерабочиеВыходные.ДатаНачала = НачалоДня(Выборка.Дата);
						КонецЕсли;
						ПервыеНерабочиеВыходные.ДатаОкончания = КонецДня(Выборка.Дата);
					КонецЕсли;	
				Иначе 
					СтрокаПериода.ДатаОкончания = КонецДня(Выборка.Дата);	
				КонецЕсли;		
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат ОплачиваемыеКоронавирусныеПериоды;
КонецФункции

Функция ДлительностьИнтервала(Знач Сотрудник, Знач ДатаНачала, Знач ДатаОкончания, Знач ПоКалендарнымДням = Истина, Знач БезУчетаПраздников = Истина) Экспорт
	
	ДлительностьИнтервала = 0;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Сотрудник КАК ГрафикРаботы,
	|	&ДатаНачала КАК НачалоПериода,
	|	&ДатаОкончания КАК ОкончаниеПериода
	|ПОМЕСТИТЬ ВТПериодыГрафиков";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Выполнить();
	
	СоздатьВТДанныеПроизводственногоКалендаряПоГрафикам(МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПоКалендарнымДням
	|			ТОГДА ВЫБОР
	|					КОГДА &БезУчетаПраздников
	|						ТОГДА ДанныеКалендаря.ДнейКалендарныхБезУчетаПраздников
	|					ИНАЧЕ ДанныеКалендаря.ДнейКалендарных
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеКалендаря.ДнейПоШестидневке
	|	КОНЕЦ КАК ДлительностьИнтервала
	|ИЗ
	|	ВТДанныеПроизводственногоКалендаряПоГрафикам КАК ДанныеКалендаря";
	
	Запрос.УстановитьПараметр("ПоКалендарнымДням", ПоКалендарнымДням);
	Запрос.УстановитьПараметр("БезУчетаПраздников", БезУчетаПраздников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДлительностьИнтервала = Выборка.ДлительностьИнтервала;
	КонецЕсли;
	
	Возврат ДлительностьИнтервала;
КонецФункции

// Составляет виды отсутствия, для регистрации которых предназначены специализированные документы.
//
// Возвращаемое значение - таблица значений.
//
Функция ВидыВремениРегистрируемыеОтдельнымиДокументами() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	Результат.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДокументовНачисления"));
	
	БольничныйЛист = Перечисления.ВидыДокументовНачисления.БольничныйЛист;
	ДобавитьВидДокумента(Результат, "Болезнь", БольничныйЛист);
	ДобавитьВидДокумента(Результат, "БолезньБезОплаты", БольничныйЛист);
	ДобавитьВидДокумента(Результат, "ОтпускПоБеременностиИРодам", БольничныйЛист);
	
	ПрогулНеявка = Перечисления.ВидыДокументовНачисления.ПрогулНеявка;
	ДобавитьВидДокумента(Результат, "Болезнь", ПрогулНеявка);
	ДобавитьВидДокумента(Результат, "БолезньБезОплаты", ПрогулНеявка);
	ДобавитьВидДокумента(Результат, "НеявкиПоНевыясненнымПричинам", ПрогулНеявка);
	ДобавитьВидДокумента(Результат, "ОтстранениеОтРаботыБезОплаты", ПрогулНеявка);
	ДобавитьВидДокумента(Результат, "Прогулы", ПрогулНеявка);
	
	ОплатаПоСреднемуЗаработку = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку;
	ДобавитьВидДокумента(Результат, "ВынужденныйПрогул", ОплатаПоСреднемуЗаработку);
	ДобавитьВидДокумента(Результат, "ГосударственныеОбязанности", ОплатаПоСреднемуЗаработку);
	ДобавитьВидДокумента(Результат, "ОтстранениеОтРаботыСОплатой", ОплатаПоСреднемуЗаработку);
	
	Отпуск = Перечисления.ВидыДокументовНачисления.Отпуск;
	ДобавитьВидДокумента(Результат, "ДополнительныйОтпуск", Отпуск);
	ДобавитьВидДокумента(Результат, "НеоплачиваемыйДополнительныйОтпуск", Отпуск);
	ДобавитьВидДокумента(Результат, "ОсновнойОтпуск", Отпуск);
	ДобавитьВидДокумента(Результат, "ОтпускНаОбучение", Отпуск);
	ДобавитьВидДокумента(Результат, "ОтпускНаОбучениеНеоплачиваемый", Отпуск);
	ДобавитьВидДокумента(Результат, "ОтпускПоУходуЗаРебенком", Отпуск);
	
	Командировка = Перечисления.ВидыДокументовНачисления.Командировка;
	ДобавитьВидДокумента(Результат, "Командировка", Командировка);
	
	ОтпускБезСохраненияОплаты = Перечисления.ВидыДокументовНачисления.ОтпускБезСохраненияОплаты;
	ДобавитьВидДокумента(Результат, "НеоплачиваемыйОтпускПоЗаконодательству", ОтпускБезСохраненияОплаты);
	ДобавитьВидДокумента(Результат, "НеоплачиваемыйОтпускПоРазрешениюРаботодателя", ОтпускБезСохраненияОплаты);
	ДобавитьВидДокумента(Результат, "ОтпускНаОбучениеНеоплачиваемый", ОтпускБезСохраненияОплаты);
	
	ПростойСотрудников = Перечисления.ВидыДокументовНачисления.ПростойСотрудников;
	ДобавитьВидДокумента(Результат, "ОтстранениеОтРаботыБезОплаты", ПростойСотрудников);
	ДобавитьВидДокумента(Результат, "ОтстранениеОтРаботыСОплатой", ПростойСотрудников);
	ДобавитьВидДокумента(Результат, "Простой", ПростойСотрудников);
	ДобавитьВидДокумента(Результат, "ПростойПоВинеРаботника", ПростойСотрудников);
	ДобавитьВидДокумента(Результат, "ПростойПоВинеРаботодателя", ПростойСотрудников);
	
	Возврат Результат;
	
КонецФункции

// Массив видов рабочего времени, отражающих работу в выходные и нерабочие праздничные дни.
//
Функция ВидыВремениРаботаВыходныеПраздничные() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты"));
	
	Возврат Массив;
	
КонецФункции

// Массив видов рабочего времени, отражающих отработанное время.
//
Функция ВидыВремениОтработанноеВремяДляСуммированногоУчета() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Вахта"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы"));
	
	Если ВыделятьНерабочиеДниОтдельнымВидомВремени() Тогда
		ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни");
		Если ЗначениеЗаполнено(ВидВремени) Тогда
			Массив.Добавить(ВидВремени);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Массив;
	
КонецФункции

// Массив видов рабочего времени, отражающих норму времени для суммированного учета рабочего времени.
// Это рабочее время + выходные + время, когда сотрудник отсутствовал по своей вине.
Функция ВидыВремениВЗачетНормыСуммированногоУчета() Экспорт
	
	// Безусловно в норму входит отработанное время.
	Массив = ВидыВремениОтработанноеВремяДляСуммированногоУчета();
	
	// Плюс работа, которая не учитывается как отработанное время для сумм.учета, но которая маркирует норму.
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));
	
	// Плюс выходные...
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	
	// Плюс отсутствие по собственной вине.
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы"));
	Массив.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника"));
	
	Возврат Массив;
	
КонецФункции

Функция ВидыВремениСПризнакомРабочееВремя() Экспорт
	ВидыВремениСПризнакомРабочееВремя = Новый Соответствие;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыИспользованияРабочегоВремени.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|ГДЕ
	|	ВидыИспользованияРабочегоВремени.РабочееВремя";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыВремениСПризнакомРабочееВремя.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;	
	
	Возврат ВидыВремениСПризнакомРабочееВремя;
КонецФункции

Функция ВидыВремениСПризнакомВахтовоеВремя() Экспорт
	
	ВидыВремени = Новый Соответствие;
	ВидыВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Вахта"),Истина);
	ВидыВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.МеждувахтовыйОтдых"),Истина);
	ВидыВремени.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДниВПутиВахта"),Истина);
	Возврат ВидыВремени;
	
КонецФункции

Процедура ЗаписатьНастройкиВыделятьНерабочиеДниОтдельнымВидомВремени(Параметры) Экспорт
	
	Периоды = Параметры.НерабочиеПериоды.Скопировать();
	Периоды.Колонки.Добавить("Флаг");
	Периоды.ЗаполнитьЗначения(1, "Флаг");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПериодыОплатыНерабочихДней.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ПериодыОплатыНерабочихДней.НомерПериода КАК НомерПериода,
		|	ПериодыОплатыНерабочихДней.Оплачивать КАК Оплачивать,
		|	1 КАК Флаг
		|ИЗ
		|	РегистрСведений.ПериодыОплатыНерабочихДней КАК ПериодыОплатыНерабочихДней";
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), Периоды);
	Периоды.Свернуть("ПроизводственныйКалендарь, НомерПериода, Оплачивать", "Флаг");
	ПроизводственныеКалендари = ОбщегоНазначения.ВыгрузитьКолонку(Периоды, "ПроизводственныйКалендарь", Истина);
	
	Константы.ВыделятьНерабочиеДниОтдельнымВидомВремени.Установить(Параметры.ВыделятьНерабочиеДниОтдельнымВидомВремени);
		
	НаборЗаписей = РегистрыСведений.ПериодыОплатыНерабочихДней.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Параметры.НерабочиеПериоды);
	НаборЗаписей.Записать();
	
	УчетРабочегоВремениРасширенный.СоздатьОтключитьВидВремениОплачиваемыеНерабочиеДни(
		Параметры.ВыделятьНерабочиеДниОтдельнымВидомВремени);
		
	ОбновитьПовторноИспользуемыеЗначения();
	
	СтруктураПоиска = Новый Структура("ПроизводственныйКалендарь, Флаг");
	СтруктураПоиска.Флаг = 1;
	
	Для Каждого ПроизводственныйКалендарь Из ПроизводственныеКалендари Цикл
		СтруктураПоиска.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
		НайденныеСтроки = Периоды.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НомераПериодов = ОбщегоНазначения.ВыгрузитьКолонку(НайденныеСтроки, "НомерПериода");
		НерабочиеПериоды = КалендарныеГрафики.ПериодыНерабочихДней(ПроизводственныйКалендарь, Новый СтандартныйПериод);
		ГодаОбновления = Новый Соответствие;
		Для Каждого НерабочийПериод Из НерабочиеПериоды Цикл
			Если НомераПериодов.Найти(НерабочийПериод.Номер) <> Неопределено Тогда
				ГодаОбновления.Вставить(Год(НерабочийПериод.Период.ДатаНачала));
				ГодаОбновления.Вставить(Год(НерабочийПериод.Период.ДатаОкончания));
			КонецЕсли;
		КонецЦикла;
		Для Каждого Год Из ГодаОбновления Цикл
			УчетРабочегоВремениРасширенный.ЗаполнитьГрафикиСотрудниковЗаГод(Дата(Год.Ключ, 1, 1), ПроизводственныйКалендарь);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив рабочих дней по графику сотрудника.
Функция РабочиеДниПоГрафикуСотрудника(Сотрудник, ДатаНачала, ДатаОкончания) Экспорт
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	// Подготовка таблицы по месяцам.
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ТекущаяДатаНачала = ДатаНачала;
	
	Пока НачалоМесяца(ТекущаяДатаНачала) <= НачалоМесяца(ДатаОкончания) Цикл
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Месяц = НачалоМесяца(ТекущаяДатаНачала);
		НоваяСтрока.ДатаАктуальности = НачалоМесяца(ДатаОкончания);
		НоваяСтрока.ДатаНачала = ТекущаяДатаНачала;
		НоваяСтрока.ДатаОкончания = Мин(ДатаОкончания, КонецМесяца(ТекущаяДатаНачала));
		
		ТекущаяДатаНачала = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаНачала), 1);
	КонецЦикла;
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанных.ИмяВТСотрудники = "ВТСотрудники";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Получение данных по месяцам.
	СоздатьВТСотрудники(Запрос.МенеджерВременныхТаблиц, ТаблицаСотрудников);
	СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияДанных);
	
	// Выборка результатов.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТПлановоеВремя.Дата КАК Дата
	|ИЗ
	|	ВТПлановоеВремя КАК ВТПлановоеВремя
	|ГДЕ
	|	ВТПлановоеВремя.ЧасыНорма > 0
	|	И ВТПлановоеВремя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица.ВыгрузитьКолонку("Дата");
КонецФункции

// Возвращает ближайший рабочий день по общему графику
//
// Параметры:
// 	ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников
//  ТекущаяДата - дата, относительно которой нужно вычислять рабочий день. 
//  Предыдущий - булево - по-умолчанию истина, если ложь, то нужно вычислить следующий рабочий день
//
// Возвращаемое значение
// 	Дата, на которую запланировано рабочее время по графику.
//
Функция БлижайшийРабочийДеньПоГрафику(ГрафикРаботы, ТекущаяДата, Предыдущий = Истина) Экспорт 	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата <= &Дата
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.РабочееВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Если Не Предыдущий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ГрафикиРаботыПоВидамВремени.Дата <= &Дата", "И ГрафикиРаботыПоВидамВремени.Дата >= &Дата"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Дата УБЫВ", "Дата ВОЗР");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхУчетаВремениСотрудников

Функция ПараметрыПолученияДанныхОВремениСлужебный() Экспорт
	ПараметрыПолученияДанныхОВремени = Новый Структура;
	
	ПараметрыПолученияДанныхОВремени.Вставить("УчитыватьТолькоИндивидуальныеСведения", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("РассчитыватьПлановоеВремя", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("НеучитываемыеРегистраторы", Неопределено);
	ПараметрыПолученияДанныхОВремени.Вставить("ВыделятьСводноеВремя", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ИмяВТСотрудники", "ВТСотрудники");
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьПлановоеВремяЗаПолныйМесяц", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьУжеРассчитанныеДанные", Истина);
	ПараметрыПолученияДанныхОВремени.Вставить("ПересчитыватьФактическоеВремя", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ИмяВТРезультат", Неопределено);
	ПараметрыПолученияДанныхОВремени.Вставить("ПолучатьУсловияТрудаИТерритории", Ложь);
	ПараметрыПолученияДанныхОВремени.Вставить("ДатаНачала", '00010101');
	ПараметрыПолученияДанныхОВремени.Вставить("ДатаДатаОкончания", '00010101');

	
	Возврат ПараметрыПолученияДанныхОВремени;
КонецФункции

Функция ЗапросВТДанныеУчетаРабочегоВремениСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанныхОВремени, ДляСКД = Ложь) Экспорт	
	ПараметрыПолученияДанныхРасширенный = ПараметрыПолученияДанныхУчетаВремени();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанныхРасширенный, ПараметрыПолученияДанныхОВремени); 
	
	ПараметрыПостроенияЗапроса = ПараметрыПостроенияЗапросаКДаннымУчетаВремени();
	ПараметрыПостроенияЗапроса.ИмяВТИсточникДанных = ПараметрыПолученияДанныхРасширенный.ИмяВТСотрудники;
	ПараметрыПостроенияЗапроса.ИмяВТРезультат = ПараметрыПолученияДанныхРасширенный.ИмяВТРезультат;
	ПараметрыПостроенияЗапроса.ДляСКД = ДляСКД;
	ПараметрыПостроенияЗапроса.Индексировать = ПараметрыПолученияДанныхРасширенный.Индексировать;
	
	Возврат СоздатьЗапросПолученияДанныхУчетаВремени(ПараметрыПолученияДанныхРасширенный, ПараметрыПостроенияЗапроса);
	
КонецФункции

Функция СформироватьЗапросПоНормеВремени(ТаблицаСотрудников, НеучитываемыеДокументы = Неопределено) Экспорт 	
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));	
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		СтрокаТаблицыСотрудников.Месяц = СтрокаТаблицыСотрудников.ПериодДействия; 
		СтрокаТаблицыСотрудников.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.Месяц);
		СтрокаТаблицыСотрудников.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.Месяц);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.Месяц,
	|	ТаблицаСотрудников.ДатаНачала,
	|	ТаблицаСотрудников.ДатаОкончания,
	|	ТаблицаСотрудников.ПериодРегистрации КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	ПараметрыПолученияДанных.НеучитываемыеРегистраторы = НеучитываемыеДокументы;
	
	СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановоеВремя.Сотрудник,
	|	ПлановоеВремя.Дата,
	|	МАКСИМУМ(ПлановоеВремя.ЧасыПлан) КАК Часов
	|ПОМЕСТИТЬ ВТМаксимальноеВремяПоДням
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановоеВремя.Сотрудник,
	|	ПлановоеВремя.Дата,
	|	ПлановоеВремя.ВидУчетаВремени,
	|	ПлановоеВремя.ДатаАктуальности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановоеВремя.Сотрудник,
	|	ПлановоеВремя.Дата,
	|	МАКСИМУМ(ПлановоеВремя.ВидУчетаВремени) КАК ВидУчетаВремени
	|ПОМЕСТИТЬ ВТВидыВремениПоУмолчанию
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксимальноеВремяПоДням КАК МаксимальноеВремяПоДням
	|		ПО ПлановоеВремя.Дата = МаксимальноеВремяПоДням.Дата
	|			И ПлановоеВремя.Сотрудник = МаксимальноеВремяПоДням.Сотрудник
	|			И ПлановоеВремя.ЧасыПлан = МаксимальноеВремяПоДням.Часов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановоеВремя.Сотрудник,
	|	ПлановоеВремя.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановоеВремя.Сотрудник КАК Сотрудник,
	|	ПлановоеВремя.Дата КАК Период,
	|	СУММА(ПлановоеВремя.ЧасыПлан) КАК НормаЧасов,
	|	МАКСИМУМ(ВидыИспользованияРабочегоВремени.БуквенныйКод) КАК ВидВремениПоУмолчаниюОбозначение
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыВремениПоУмолчанию КАК ВидыВремениПоУмолчанию
	|		ПО ПлановоеВремя.Сотрудник = ВидыВремениПоУмолчанию.Сотрудник
	|			И ПлановоеВремя.Дата = ВидыВремениПоУмолчанию.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО (ВидыВремениПоУмолчанию.ВидУчетаВремени = ВидыИспользованияРабочегоВремени.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановоеВремя.Сотрудник,
	|	ПлановоеВремя.ДатаАктуальности,
	|	ПлановоеВремя.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Период";

	Возврат Запрос.Выполнить();
	
КонецФункции	

Функция ЗапросВТСоответствиеСостоянийВидамУчетаВремени(ИмяВТРезультат = "") Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускОсновной) КАК Состояние,
	|	&ОсновнойОтпуск КАК ВидВремени
	|ПОМЕСТИТЬ ВТСоответствиеСостоянийВидамУчетаВремени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныйОтпуск),
	|	&ДополнительныйОтпуск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныйОтпускНеоплачиваемый),
	|	&НеоплачиваемыйДополнительныйОтпуск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускУчебныйОплачиваемый),
	|	&ОтпускНаОбучение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускУчебныйНеоплачиваемый),
	|	&ОтпускНаОбучениеНеоплачиваемый
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоРазрешениюРаботодателя),
	|	&НеоплачиваемыйОтпускПоРазрешениюРаботодателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНеоплачиваемыйПоЗаконодательству),
	|	&НеоплачиваемыйОтпускПоЗаконодательству
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоУходуЗаРебенком),
	|	&ОтпускПоУходуЗаРебенком
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка),
	|	&Командировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ВыполнениеГосударственныхОбязанностей),
	|	&ГосударственныеОбязанности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеССохранениемОплаты),
	|	&ГосударственныеОбязанности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниОплачиваемые),
	|	&ДополнительныеВыходныеДниОплачиваемые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ВынужденныйПрогул),
	|	&ВынужденныйПрогул
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтсутствиеПоНевыясненнымПричинам),
	|	&НеявкиПоНевыясненнымПричинам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускПоБеременностиИРодам),
	|	&ОтпускПоБеременностиИРодам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Болезнь),
	|	&Болезнь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.БолезньБезОплаты),
	|	&БолезньБезОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Прогул),
	|	&Прогулы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойНеЗависящийОтРаботодателяИРаботника),
	|	&Простой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботника),
	|	&ПростойПоВинеРаботника
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ДополнительныеВыходныеДниНеОплачиваемые),
	|	&ДополнительныеВыходныеДниНеОплачиваемые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ПростойПоВинеРаботодателя),
	|	&ПростойПоВинеРаботодателя
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ОтпускНаСанаторноКурортноеЛечение),
	|	&ДополнительныйОтпуск
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.ТрудовойДоговорПриостановлен),
	|	&ПриостановлениеТрудовогоДоговора";
		
	Если НЕ ПустаяСтрока(ИмяВТРезультат) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСоответствиеСостоянийВидамУчетаВремени", ИмяВТРезультат);
	ИначеЕсли ИмяВТРезультат = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТСоответствиеСостоянийВидамУчетаВремени", "");
	КонецЕсли;	
	
	ВидыВремениПараметры = Запрос.НайтиПараметры();
	
	Для Каждого ОписаниеПараметра Из ВидыВремениПараметры Цикл
		ПолноеИмяПредопределенногоЭлемента = "Справочник.ВидыИспользованияРабочегоВремени." + ОписаниеПараметра.Имя;
		
		Запрос.УстановитьПараметр(ОписаниеПараметра.Имя, ОбщегоНазначения.ПредопределенныйЭлемент(ПолноеИмяПредопределенногоЭлемента));
	КонецЦикла;	
		
	Возврат Запрос;
КонецФункции	

Функция ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяВТСотрудники", "ВТСотрудники");
	Параметры.Вставить("ИмяВТРезультат",  "ВТДанныеУчетаВремениИСостоянийСотрудников");
	Параметры.Вставить("РассчитыватьПлановоеВремя", Ложь);
	Параметры.Вставить("НеучитываемыеРегистраторы", Новый Массив);
	Параметры.Вставить("ПолучатьУжеРассчитанныеДанные", Истина);
	Параметры.Вставить("ПересчитыватьФактическоеВремя", Ложь);
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	Параметры.Вставить("МесяцДатаНачала");
	Параметры.Вставить("МесяцДатаОкончания");
	Параметры.Вставить("ДатаАктуальности");
	Параметры.Вставить("Организация");
	Параметры.Вставить("Подразделение");
	Параметры.Вставить("ПолучатьУсловияТрудаИТерритории", Ложь);
	Параметры.Вставить("ВыделятьВыходныеВПериодыОтклонений", Истина);
	Параметры.Вставить("УчитыватьТабельныеДанныеОТерриториях", Истина);
	Параметры.Вставить("ОтноситьПереходящуюЧастьСменыКДнюНачала", Ложь);

	Возврат Параметры;

КонецФункции	

Функция ЗапросВТПериодыРаботыСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных)
	
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТПериодыРаботыСотрудников = Новый Запрос;
	
	ЗапросВТПериодыРаботыСотрудников.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыРаботы.Сотрудник,
	|	ВЫБОР
	|		КОГДА ПериодыРаботы.Начало < Сотрудники.ДатаНачала
	|			ТОГДА Сотрудники.ДатаНачала
	|		ИНАЧЕ ПериодыРаботы.Начало
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ПериодыРаботы.Окончание > Сотрудники.ДатаОкончания
	|				ИЛИ ПериодыРаботы.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Сотрудники.ДатаОкончания
	|		ИНАЧЕ ПериодыРаботы.Окончание
	|	КОНЕЦ КАК ДатаОкончания,
	|	ПериодыРаботы.Филиал КАК Организация,
	|	ПериодыРаботы.Подразделение,
	|	ПериодыРаботы.Должность КАК Должность,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|			КОГДА ПериодыРаботы.Начало < Сотрудники.ДатаНачала
	|				ТОГДА Сотрудники.ДатаНачала
	|			ИНАЧЕ ПериодыРаботы.Начало
	|		КОНЕЦ, МЕСЯЦ) КАК ДатаНачалаМесяц,
	|	КОНЕЦПЕРИОДА(ВЫБОР
	|			КОГДА ПериодыРаботы.Окончание > Сотрудники.ДатаОкончания
	|					ИЛИ ПериодыРаботы.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Сотрудники.ДатаОкончания
	|			ИНАЧЕ ПериодыРаботы.Окончание
	|		КОНЕЦ, МЕСЯЦ) КАК ДатаОкончанияМесяц
	|ПОМЕСТИТЬ ВТПериодыРаботыСотрудников
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДляПодбораСотрудников КАК ПериодыРаботы
	|		ПО Сотрудники.Сотрудник = ПериодыРаботы.Сотрудник
	|			И (Сотрудники.ДатаНачала >= ПериодыРаботы.Начало
	|					И (Сотрудники.ДатаНачала <= ПериодыРаботы.Окончание
	|						ИЛИ ПериодыРаботы.Окончание = ДАТАВРЕМЯ(1, 1, 1))
	|				ИЛИ ПериодыРаботы.Начало МЕЖДУ Сотрудники.ДатаНачала И Сотрудники.ДатаОкончания)
	|ГДЕ
	|	ПериодыРаботы.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|	И НЕ ПериодыРаботы.ПоДоговоруГПХ
	|	И &УсловиеОрганизация
	|	И &УсловиеПодразделение
	|{ГДЕ
	|	ПериодыРаботы.Филиал КАК ОрганизацияОтбор,
	|	ПериодыРаботы.Подразделение КАК ПодразделениеОтбор}";
	
	ЗапросВТПериодыРаботыСотрудников.Текст = СтрЗаменить(ЗапросВТПериодыРаботыСотрудников.Текст, "ВТСотрудники",  ПараметрыПолученияДанных.ИмяВТСотрудники);
	
	Если ЗначениеЗаполнено(ПараметрыПолученияДанных.Организация) Тогда
		ТекстУсловияОрганизация = "ПериодыРаботы.Филиал = &Организация";
		ЗапросРезультат.УстановитьПараметр("Организация", ПараметрыПолученияДанных.Организация);
	Иначе
		ТекстУсловияОрганизация = "ИСТИНА";
	КонецЕсли;
	
	ЗапросВТПериодыРаботыСотрудников.Текст = СтрЗаменить(ЗапросВТПериодыРаботыСотрудников.Текст, "&УсловиеОрганизация", ТекстУсловияОрганизация);
	
	Если ЗначениеЗаполнено(ПараметрыПолученияДанных.Подразделение) Тогда
		ТекстУсловияПодразделение = "ПериодыРаботы.Подразделение В ИЕРАРХИИ (&Подразделение)";
		ЗапросРезультат.УстановитьПараметр("Подразделение", ПараметрыПолученияДанных.Подразделение);
	Иначе
		ТекстУсловияПодразделение = "ИСТИНА";
	КонецЕсли;
	
	ЗапросВТПериодыРаботыСотрудников.Текст = СтрЗаменить(ЗапросВТПериодыРаботыСотрудников.Текст, "&УсловиеПодразделение", ТекстУсловияПодразделение);
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьШтатноеРасписание") Тогда
		ТекстПоляДолжность = "ПериодыРаботы.Должность КАК Должность";	
	Иначе
		ТекстПоляДолжность = "ПериодыРаботы.ДолжностьПоШтатномуРасписанию.Должность КАК Должность";	
	КонецЕсли;
	
	ЗапросВТПериодыРаботыСотрудников.Текст = СтрЗаменить(ЗапросВТПериодыРаботыСотрудников.Текст, "ПериодыРаботы.Должность КАК Должность", ТекстПоляДолжность);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыРаботыСотрудников);
	
	Возврат ЗапросРезультат;
	
КонецФункции

Функция ОписаниеИсточникаДанныхОВремениДляЗапросВТПериоды() Экспорт
	ОписаниеИсточникаДанных = Новый	Структура;
	ОписаниеИсточникаДанных.Вставить("ИмяТаблицы");
	ОписаниеИсточникаДанных.Вставить("ИмяПоляСотрудник", "Сотрудник");
	
	Возврат ОписаниеИсточникаДанных;	
КонецФункции	

Функция ОписаниеТаблицыОтбораДляЗапросВТПериодыДействияТерриторий() Экспорт
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ИмяТаблицы", "");
	ОписаниеТаблицы.Вставить("ИмяПоляПериодРегистрации", "");
	
	Возврат ОписаниеТаблицы;
КонецФункции	

Функция ЗапросВТПериодыТерриторий(ТолькоРазрешенные, ОписаниеТаблицыОтбора, ОписаниеИсточникаДанныхОВремени, ИмяВТРезультат = "ВТПериодыТерриторий")
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТСотрудникБезПодатногоУчета = ЗапросВТСотрудникиБезПодатногоУчетаТерриторий(ОписаниеТаблицыОтбора, ОписаниеИсточникаДанныхОВремени);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТСотрудникБезПодатногоУчета); 
	
	ПараметрыПолученияДанныхРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПолученияДанныхРегистра.ВключатьЗаписиНаНачалоПериода = Истина;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиБезПодатногоУчетаТерриторий", "Сотрудник");
		
	ЗапросВТТерриторииСотрудников = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТПериодыИмяРегистра(
										"ТерриторииСотрудников", 
										ТолькоРазрешенные,
										ОписаниеФильтра,
										ПараметрыПолученияДанныхРегистра,
										"ВТТерриторииСотрудников");
									
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТТерриторииСотрудников);
	
	ЗапросВТПериодыДействияТерриторий = Новый Запрос;
	ЗапросВТПериодыДействияТерриторий.Текст = 
	"ВЫБРАТЬ
	|	ТерриторииСотрудников.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ТерриторииСотрудников.НачалоПериода, МЕСЯЦ) КАК Месяц,
	|	ТерриторииСотрудников.НачалоПериода КАК ДатаНачала,
	|	ТерриторииСотрудников.КонецПериода КАК ДатаОкончания,
	|	ТерриторииСотрудников.Территория
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТТерриторииСотрудников КАК ТерриторииСотрудников
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТерриторииСотрудников.Сотрудник,
	|	НАЧАЛОПЕРИОДА(ТерриторииСотрудников.ДатаНачала, МЕСЯЦ),
	|	ТерриторииСотрудников.ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ТерриторииСотрудников.НачалоПериода, СЕКУНДА, -1),
	|	NULL
	|ИЗ
	|	ВТТерриторииСотрудников КАК ТерриторииСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриторииСотрудников КАК ТерриторииСотрудниковСлед
	|		ПО ТерриторииСотрудников.Сотрудник = ТерриторииСотрудниковСлед.Сотрудник
	|			И ТерриторииСотрудников.ДатаНачала = ТерриторииСотрудниковСлед.ДатаНачала
	|			И ТерриторииСотрудников.ДатаОкончания = ТерриторииСотрудниковСлед.ДатаОкончания
	|			И ТерриторииСотрудников.НачалоПериода > ТерриторииСотрудниковСлед.НачалоПериода
	|ГДЕ
	|	ТерриторииСотрудниковСлед.НачалоПериода ЕСТЬ NULL
	|	И ТерриторииСотрудников.НачалоПериода > ТерриторииСотрудников.ДатаНачала
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиБезПодатногоУчетаТерриторий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТерриторииСотрудников";
	
	ЗапросВТПериодыДействияТерриторий.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	ЗапросВТПериодыДействияТерриторий.Текст = СтрЗаменить(ЗапросВТПериодыДействияТерриторий.Текст, "ВТРезультат", ИмяВТРезультат);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыДействияТерриторий);	
	
	Возврат ЗапросРезультат;
КонецФункции	

Процедура СоздатьВТПериодыТерриторий(ТолькоРазрешенные, МенеджерВременныхТаблиц, ОписаниеТаблицыОтбора, ОписаниеИсточникаДанныхОВремени, ИмяВТРезультат = "ВТПериодыТерриторий") Экспорт
	Запрос = ЗапросВТПериодыТерриторий(ТолькоРазрешенные, ОписаниеТаблицыОтбора, ОписаниеИсточникаДанныхОВремени, ИмяВТРезультат);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
КонецПроцедуры	

Функция ЗапросВТСотрудникиБезПодатногоУчетаТерриторий(ОписаниеТаблицыОтбора, ОписаниеИсточникаДанныхОВремени)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыСотрудников.Сотрудник,
	|	ПериодыРаботыСотрудников.Месяц,
	|	ПериодыРаботыСотрудников.ДатаНачала КАК ДатаНачала,
	|	ПериодыРаботыСотрудников.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСотрудникиБезПодатногоУчетаТерриторий
	|ИЗ
	|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
	|ГДЕ
	|	НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|				ГДЕ
	|					ДанныеУчетаРабочегоВремениСотрудников.Сотрудник = ПериодыРаботыСотрудников.Сотрудник
	|					И ДанныеУчетаРабочегоВремениСотрудников.Месяц = ПериодыРаботыСотрудников.Месяц
	|					И ДанныеУчетаРабочегоВремениСотрудников.ПериодРегистрации = ПериодыРаботыСотрудников.ПериодРегистрации
	|					И ДанныеУчетаРабочегоВремениСотрудников.Территория <> ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеУчетаРабочегоВремениСотрудников", ОписаниеИсточникаДанныхОВремени.ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеУчетаРабочегоВремениСотрудников.Сотрудник", "ДанныеУчетаРабочегоВремениСотрудников." + ОписаниеИсточникаДанныхОВремени.ИмяПоляСотрудник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПериодыРаботыСотрудников", ОписаниеТаблицыОтбора.ИмяТаблицы);
	
	Если Не ЗначениеЗаполнено(ОписаниеТаблицыОтбора.ИмяПоляПериодРегистрации) Тогда
		ЗаменяемыйТекст = "И ДанныеУчетаРабочегоВремениСотрудников.ПериодРегистрации = ПериодыРаботыСотрудников.ПериодРегистрации";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ЗаменяемыйТекст, "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПериодыРаботыСотрудников.ПериодРегистрации", "ПериодыРаботыСотрудников." + ОписаниеТаблицыОтбора.ИмяПоляПериодРегистрации);	
	КонецЕсли;	
	
	Возврат Запрос;	
КонецФункции

Функция ЗапросВТДанныеУчетаВремениИСостоянийСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных, ДляСКД = Ложь) 	
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТПериодыРаботыСотрудников = ЗапросВТПериодыРаботыСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыРаботыСотрудников);	
		
	ЗапросВТМесяцы = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВтПериоды(
						ПараметрыПолученияДанных.МесяцДатаНачала, 
						ПараметрыПолученияДанных.МесяцДатаОкончания, 
						"МЕСЯЦ", 
						"Месяц", 
						"ВТМесяцы");
						
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТМесяцы);	
	
	ЗапросВТСотрудникиМесяцы = Новый Запрос;
	ЗапросВТСотрудникиМесяцы.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыСотрудников.Сотрудник,
	|	ПериодыРаботыСотрудников.Сотрудник.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	Месяцы.Месяц,
	|	ВЫБОР
	|		КОГДА &ДатаНачала > Месяцы.Месяц
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ Месяцы.Месяц
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА &ДатаОкончания < КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаОкончания,
	|	&ДатаАктуальности КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТМесяцы КАК Месяцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
	|		ПО (ИСТИНА)";

	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТСотрудникиМесяцы);
	
	ФильтрПолученияГрафиков = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПериодыРаботыСотрудников", "Сотрудник");
	ЗапросВТПериодыГрафиков = ЗарплатаКадрыПериодическиеРегистры.ЗапросВТПериодыИмяРегистра("ГрафикРаботыСотрудников", Истина, ФильтрПолученияГрафиков, ,"ВТПериодыДействияГрафиковДляКалендарей");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыГрафиков);
	
	ЗапросВТСоответствиеСостоянийВидамУчетаВремени = ЗапросВТСоответствиеСостоянийВидамУчетаВремени();
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТСоответствиеСостоянийВидамУчетаВремени);
	
	ЗапросВТДатыСостояний = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВтПериоды(ПараметрыПолученияДанных.ДатаНачала, ПараметрыПолученияДанных.ДатаОкончания, "ДЕНЬ", "Дата", "ВТДатыСостояний");
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДатыСостояний);

	ПараметрыПолученияДанныхОВремени = ПараметрыПолученияДанныхУчетаВремени();
	
	ПараметрыПолученияДанныхОВремени.ДатаНачала = ПараметрыПолученияДанных.ДатаНачала;
	ПараметрыПолученияДанныхОВремени.ДатаОкончания = ПараметрыПолученияДанных.ДатаОкончания;
	ПараметрыПолученияДанныхОВремени.УчитыватьТолькоИндивидуальныеСведения = Ложь;
	ПараметрыПолученияДанныхОВремени.ПолучатьДанныеФакт = Истина;	
	ПараметрыПолученияДанныхОВремени.ПолучатьДанныеПлан = ПараметрыПолученияДанных.РассчитыватьПлановоеВремя;
	ПараметрыПолученияДанныхОВремени.ПолучатьДанныеНорма = Истина;
	ПараметрыПолученияДанныхОВремени.ИспользоватьУжеРассчитанныеДанные = ПараметрыПолученияДанных.ПолучатьУжеРассчитанныеДанные;
	ПараметрыПолученияДанныхОВремени.ФормироватьПриНаличииРассчитанныхДанных = Истина;
	ПараметрыПолученияДанныхОВремени.ПолучатьУсловияТрудаИТерритории = ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории;
	ПараметрыПолученияДанныхОВремени.УчитыватьТабельныеДанныеОТерриториях = ПараметрыПолученияДанных.УчитыватьТабельныеДанныеОТерриториях;
	ПараметрыПолученияДанныхОВремени.ПолучатьНормуВремениЗаПолныйМесяц = Ложь;
	ПараметрыПолученияДанныхОВремени.НеучитываемыеРегистраторы = ПараметрыПолученияДанных.НеучитываемыеРегистраторы;
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиМесяцы";
	ПараметрыПолученияДанныхОВремени.ОтноситьПереходящуюЧастьСменыКДнюНачала = ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала;

	ЗапросВТДанныеУчетаРабочегоВремениСотрудников = ЗапросВТДанныеУчетаРабочегоВремениСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанныхОВремени, ДляСКД);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеУчетаРабочегоВремениСотрудников);
	
	Если ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории Тогда
		ОписаниеОтбора = ОписаниеТаблицыОтбораДляЗапросВТПериодыДействияТерриторий();
		ОписаниеОтбора.ИмяТаблицы = "ВТСотрудникиМесяцы";
		
		ОписаниеИсточникаДанныхОВремени = ОписаниеИсточникаДанныхОВремениДляЗапросВТПериоды();
		ОписаниеИсточникаДанныхОВремени.ИмяТаблицы = "ВТДанныеУчетаРабочегоВремениСотрудников";
		
		ЗапросПериодыТерриторий = ЗапросВТПериодыТерриторий(ТолькоРазрешенные, ОписаниеОтбора, ОписаниеИсточникаДанныхОВремени);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросПериодыТерриторий);
	КонецЕсли;	
	
	
	ТекстЗапросаВТДанныеУчетаВремениПоСостояниям = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиМесяцы.Сотрудник КАК Сотрудник,
	|	СостоянияСотрудниковСрезПоследних.Состояние КАК Состояние,
	|	СотрудникиМесяцы.ДатаНачала КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СостоянияСотрудниковСрезПоследних.ДействуетДо > СотрудникиМесяцы.ДатаОкончания
	|			ТОГДА ВЫБОР
	|					КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						ТОГДА ДОБАВИТЬКДАТЕ(СотрудникиМесяцы.ДатаОкончания, ДЕНЬ, 1)
	|					ИНАЧЕ СотрудникиМесяцы.ДатаОкончания
	|				КОНЕЦ
	|		ИНАЧЕ СостоянияСотрудниковСрезПоследних.ДействуетДо
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	СостоянияСотрудниковСрезПоследних.ВидВремени КАК ВидВремени
	|ПОМЕСТИТЬ ВТСостоянияСотрудников
	|ИЗ
	|	РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудниковСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиМесяцы КАК СотрудникиМесяцы
	|		ПО СостоянияСотрудниковСрезПоследних.Сотрудник = СотрудникиМесяцы.ГоловнойСотрудник
	|			И (СостоянияСотрудниковСрезПоследних.Период <= СотрудникиМесяцы.ДатаНачала)
	|			И (СостоянияСотрудниковСрезПоследних.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СостоянияСотрудниковСрезПоследних.ДействуетДо >= СотрудникиМесяцы.ДатаНачала)
	|			И (СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
	|			И (СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
	|			И (СостоянияСотрудниковСрезПоследних.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	СостоянияСотрудников.Состояние,
	|	СостоянияСотрудников.Период,
	|	ВЫБОР
	|		КОГДА СостоянияСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ СостоянияСотрудников.ДействуетДо > Сотрудники.ДатаОкончания
	|			ТОГДА ВЫБОР
	|					КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						ТОГДА ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1)
	|					ИНАЧЕ Сотрудники.ДатаОкончания
	|				КОНЕЦ
	|		ИНАЧЕ СостоянияСотрудников.ДействуетДо
	|	КОНЕЦ,
	|	СостоянияСотрудников.ВидВремени
	|ИЗ
	|	ВТСотрудникиМесяцы КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСотрудников КАК СостоянияСотрудников
	|		ПО Сотрудники.ГоловнойСотрудник = СостоянияСотрудников.Сотрудник
	|			И (СостоянияСотрудников.Период > Сотрудники.ДатаНачала)
	|			И Сотрудники.ДатаНачала <= СостоянияСотрудников.Период
	|			И (ДОБАВИТЬКДАТЕ(Сотрудники.ДатаОкончания, ДЕНЬ, 1) >= СостоянияСотрудников.Период)
	|			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Увольнение))
	|			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Работа))
	|			И (СостоянияСотрудников.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.РаботаВОтпускеПоУходуЗаРебенком))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НормаВремени.сотрудник КАК сотрудник,
	|	НормаВремени.Дата КАК Дата,
	|	СУММА(НормаВремени.ДниПлан) КАК ДниПлан,
	|	СУММА(НормаВремени.ЧасыПлан) КАК ЧасыПлан,
	|	СУММА(НормаВремени.ЧасыНорма) КАК ЧасыНорма
	|ПОМЕСТИТЬ ВТНормаИтоги
	|ИЗ
	|	ВТНормаВремени КАК НормаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	НормаВремени.сотрудник,
	|	НормаВремени.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияСотрудников.Сотрудник КАК Сотрудник,
	|	ДатыСостояний.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени ЕСТЬ NULL
	|				И НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Выходной
	|				И НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Праздники
	|			ТОГДА ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени
	|		КОГДА (ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Выходной
	|					И ЕСТЬNULL(НормаВремениСотрудников.ДниПлан, 0) = 0
	|				ИЛИ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Праздники)
	|				И (НЕ СоответствиеСостоянийСотрудниковДаннымУчетаВремени.ВидВремени В (&ВидыВремениСплошнойРегистрации)
	|					И &ВыделятьВыходныеВПериодыОтклонений)
	|			ТОГДА ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени
	|		КОГДА СостоянияСотрудников.ВидВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|			ТОГДА СостоянияСотрудников.ВидВремени
	|		ИНАЧЕ СоответствиеСостоянийСотрудниковДаннымУчетаВремени.ВидВремени
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени ЕСТЬ NULL
	|				И НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Выходной
	|				И НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Праздники
	|			ТОГДА ДанныеУчетаОтклоненийСотрудников.Дней
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Дни,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени ЕСТЬ NULL
	|				И ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени <> &Выходной
	|			ТОГДА ДанныеУчетаОтклоненийСотрудников.Часов
	|		ИНАЧЕ ЕСТЬNULL(НормаВремениСотрудников.ЧасыПлан, 0)
	|	КОНЕЦ КАК Часы,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени ЕСТЬ NULL
	|			ТОГДА ДанныеУчетаОтклоненийСотрудников.НормаЧасов
	|		ИНАЧЕ ЕСТЬNULL(НормаВремениСотрудников.ЧасыНорма, 0)
	|	КОНЕЦ КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОписаниеВидовВремени.Целосменное
	|			ТОГДА ИСТИНА
	|		КОГДА ДанныеУчетаОтклоненийСотрудников.ВидУчетаВремени = &Выходной
	|				И ДанныеУчетаОтклоненийСотрудников.ДнейПлан <> 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Отклонение,
	|	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка) КАК Территория,
	|	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка) КАК УсловияТруда,
	|	ЗНАЧЕНИЕ(Справочник.СменыРаботыСотрудников.ПустаяСсылка) КАК Смена,
	|	ЛОЖЬ КАК ПереходящаяЧастьПредыдущейСмены,
	|	ЛОЖЬ КАК ПереходящаяЧастьТекущейСмены
	|ПОМЕСТИТЬ ВТДанныеУчетаВремениПоСостояниям
	|ИЗ
	|	ВТСостоянияСотрудников КАК СостоянияСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеСостоянийВидамУчетаВремени КАК СоответствиеСостоянийСотрудниковДаннымУчетаВремени
	|		ПО СостоянияСотрудников.Состояние = СоответствиеСостоянийСотрудниковДаннымУчетаВремени.Состояние
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОписаниеВидовВремени
	|		ПО (СоответствиеСостоянийСотрудниковДаннымУчетаВремени.ВидВремени = ОписаниеВидовВремени.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыСостояний КАК ДатыСостояний
	|		ПО СостоянияСотрудников.НачалоПериода <= ДатыСостояний.Дата
	|			И СостоянияСотрудников.ОкончаниеПериода >= ДатыСостояний.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаОтклоненийСотрудников
	|		ПО СостоянияСотрудников.Сотрудник = ДанныеУчетаОтклоненийСотрудников.Сотрудник
	|			И (ДатыСостояний.Дата = ДанныеУчетаОтклоненийСотрудников.Дата)
	|			И (СоответствиеСостоянийСотрудниковДаннымУчетаВремени.ВидВремени = ДанныеУчетаОтклоненийСотрудников.ОсновноеВремя
	|				ИЛИ ДанныеУчетаОтклоненийСотрудников.ОсновноеВремя = &Выходной
	|				ИЛИ ДанныеУчетаОтклоненийСотрудников.ОсновноеВремя = &Праздники
	|					И СостоянияСотрудников.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСотрудника.Командировка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаИтоги КАК НормаВремениСотрудников
	|		ПО СостоянияСотрудников.Сотрудник = НормаВремениСотрудников.сотрудник
	|			И (ДатыСостояний.Дата = НормаВремениСотрудников.Дата)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дата,
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дней,
	|	ДанныеУчетаРабочегоВремениСотрудников.Часов,
	|	ДанныеУчетаРабочегоВремениСотрудников.НормаЧасов,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаРабочегоВремениСотрудников.ДнейПлан = 0
	|				И ДанныеУчетаРабочегоВремениСотрудников.ЧасовПлан = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеУчетаРабочегоВремениСотрудников.Территория,
	|	ДанныеУчетаРабочегоВремениСотрудников.УсловияТруда,
	|	ДанныеУчетаРабочегоВремениСотрудников.Смена,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьТекущейСмены
	|ИЗ
	|	ВТДанныеУчетаРабочегоВремениСотрудников КАК ДанныеУчетаРабочегоВремениСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияСотрудников КАК СостоянияСотрудников
	|		ПО (СостоянияСотрудников.Сотрудник = ДанныеУчетаРабочегоВремениСотрудников.Сотрудник)
	|			И (СостоянияСотрудников.НачалоПериода <= ВЫБОР
	|				КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						И ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДанныеУчетаРабочегоВремениСотрудников.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ДанныеУчетаРабочегоВремениСотрудников.Дата
	|			КОНЕЦ)
	|			И (СостоянияСотрудников.ОкончаниеПериода >= ВЫБОР
	|				КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						И ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДанныеУчетаРабочегоВремениСотрудников.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ДанныеУчетаРабочегоВремениСотрудников.Дата
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияСотрудников КАК СостояниеГоловныхСотрудников
	|		ПО (СостояниеГоловныхСотрудников.Сотрудник = ДанныеУчетаРабочегоВремениСотрудников.Сотрудник.ГоловнойСотрудник)
	|			И (СостояниеГоловныхСотрудников.НачалоПериода <= ВЫБОР
	|				КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						И ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДанныеУчетаРабочегоВремениСотрудников.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ДанныеУчетаРабочегоВремениСотрудников.Дата
	|			КОНЕЦ)
	|			И (СостояниеГоловныхСотрудников.ОкончаниеПериода >= ВЫБОР
	|				КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|						И ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены
	|					ТОГДА ДОБАВИТЬКДАТЕ(ДанныеУчетаРабочегоВремениСотрудников.Дата, ДЕНЬ, 1)
	|				ИНАЧЕ ДанныеУчетаРабочегоВремениСотрудников.Дата
	|			КОНЕЦ)
	|ГДЕ
	|	СостоянияСотрудников.Сотрудник ЕСТЬ NULL
	|	И СостояниеГоловныхСотрудников.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПоСостояниям.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремениПоСостояниям.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ОсновнойОтпуск, &ДополнительныйОтпуск)
	|				И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			ТОГДА &Выходной
	|		ИНАЧЕ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	СУММА(ДанныеУчетаВремениПоСостояниям.Дни) КАК Дни,
	|	СУММА(ДанныеУчетаВремениПоСостояниям.Часы) КАК Часы,
	|	МИНИМУМ(ДанныеУчетаВремениПоСостояниям.Отклонение) КАК Отклонение,
	|	ПериодыРаботыСотрудников.Организация КАК Организация,
	|	ПериодыРаботыСотрудников.Подразделение КАК Подразделение,
	|	ПериодыРаботыСотрудников.Должность КАК Должность,
	|	МАКСИМУМ(ДанныеУчетаВремениПоСостояниям.НормаЧасов) КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ПериодыДействияТерриторий.Сотрудник ЕСТЬ NULL
	|			ТОГДА ДанныеУчетаВремениПоСостояниям.Территория
	|		ИНАЧЕ ПериодыДействияТерриторий.Территория
	|	КОНЕЦ КАК Территория,
	|	ДанныеУчетаВремениПоСостояниям.УсловияТруда КАК УсловияТруда,
	|	ДанныеУчетаВремениПоСостояниям.Смена КАК Смена,
	|	ДанныеУчетаВремениПоСостояниям.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремениПоСостояниям.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены
	|ПОМЕСТИТЬ ВТДанныеУчетаВремениИСостоянийСотрудников
	|ИЗ
	|	ВТПериодыРаботыСотрудников КАК ПериодыРаботыСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаВремениПоСостояниям КАК ДанныеУчетаВремениПоСостояниям
	|		ПО ПериодыРаботыСотрудников.Сотрудник = ДанныеУчетаВремениПоСостояниям.Сотрудник
	|			И ПериодыРаботыСотрудников.ДатаНачала <= ДанныеУчетаВремениПоСостояниям.Дата
	|			И ПериодыРаботыСотрудников.ДатаОкончания >= ДанныеУчетаВремениПоСостояниям.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыТерриторий КАК ПериодыДействияТерриторий
	|		ПО (ДанныеУчетаВремениПоСостояниям.Сотрудник = ПериодыДействияТерриторий.Сотрудник)
	|			И (ДанныеУчетаВремениПоСостояниям.Дата >= ПериодыДействияТерриторий.ДатаНачала)
	|			И (ДанныеУчетаВремениПоСостояниям.Дата <= ПериодыДействияТерриторий.ДатаОкончания
	|				ИЛИ ПериодыДействияТерриторий.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияГрафиковДляКалендарей КАК ПериодыДействияГрафиковДляКалендарей
	|		ПО (ДанныеУчетаВремениПоСостояниям.Сотрудник = ПериодыДействияГрафиковДляКалендарей.Сотрудник)
	|			И (ДанныеУчетаВремениПоСостояниям.Дата МЕЖДУ ПериодыДействияГрафиковДляКалендарей.НачалоПериода И ПериодыДействияГрафиковДляКалендарей.КонецПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ПериодыДействияГрафиковДляКалендарей.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|			И (ДанныеУчетаВремениПоСостояниям.Дата = ДанныеПроизводственногоКалендаря.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремениПоСостояниям.Сотрудник,
	|	ДанныеУчетаВремениПоСостояниям.Дата,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ОсновнойОтпуск, &ДополнительныйОтпуск)
	|				И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			ТОГДА &Выходной
	|		ИНАЧЕ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени
	|	КОНЕЦ,
	|	ПериодыРаботыСотрудников.Организация,
	|	ПериодыРаботыСотрудников.Подразделение,
	|	ПериодыРаботыСотрудников.Должность,
	|	ДанныеУчетаВремениПоСостояниям.УсловияТруда,
	|	ДанныеУчетаВремениПоСостояниям.Смена,
	|	ДанныеУчетаВремениПоСостояниям.ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремениПоСостояниям.ПереходящаяЧастьТекущейСмены,
	|	ВЫБОР
	|		КОГДА ПериодыДействияТерриторий.Сотрудник ЕСТЬ NULL
	|			ТОГДА ДанныеУчетаВремениПоСостояниям.Территория
	|		ИНАЧЕ ПериодыДействияТерриторий.Территория
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени В (&ОсновнойОтпуск, &ДополнительныйОтпуск)
	|				И ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|			ТОГДА &Выходной
	|		ИНАЧЕ ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени
	|	КОНЕЦ";
	
	Если Не ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории Тогда
		ЗаменяемыйТекст = "ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыТерриторий КАК ПериодыДействияТерриторий
							|		ПО (ДанныеУчетаВремениПоСостояниям.Сотрудник = ПериодыДействияТерриторий.Сотрудник)
							|			И (ДанныеУчетаВремениПоСостояниям.Дата >= ПериодыДействияТерриторий.ДатаНачала)
							|			И (ДанныеУчетаВремениПоСостояниям.Дата <= ПериодыДействияТерриторий.ДатаОкончания
							|				ИЛИ ПериодыДействияТерриторий.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))";	
					  
		ТекстЗапросаВТДанныеУчетаВремениПоСостояниям = СтрЗаменить(ТекстЗапросаВТДанныеУчетаВремениПоСостояниям, ЗаменяемыйТекст, "");			  
		
		ЗаменяемыйТекст = "ДанныеУчетаВремениПоСостояниям.УсловияТруда";
						  
		ТекстЗамены = "	ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)";	
		
		ТекстЗапросаВТДанныеУчетаВремениПоСостояниям = СтрЗаменить(ТекстЗапросаВТДанныеУчетаВремениПоСостояниям, ЗаменяемыйТекст, ТекстЗамены);	
		
		ЗаменяемыйТекст = "ВЫБОР
						|		КОГДА ПериодыДействияТерриторий.Сотрудник ЕСТЬ NULL
						|			ТОГДА ДанныеУчетаВремениПоСостояниям.Территория
						|		ИНАЧЕ ПериодыДействияТерриторий.Территория
						|	КОНЕЦ";
						  
		ТекстЗамены = "	ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";	
		
		ТекстЗапросаВТДанныеУчетаВремениПоСостояниям = СтрЗаменить(ТекстЗапросаВТДанныеУчетаВремениПоСостояниям, ЗаменяемыйТекст, ТекстЗамены);						  
	КонецЕсли;	
	
		
	Если Не ТолькоРазрешенные Тогда
		ТекстЗапросаВТДанныеУчетаВремениПоСостояниям = СтрЗаменить(ТекстЗапросаВТДанныеУчетаВремениПоСостояниям, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли;	

	ЗапросРезультат.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	ЗапросРезультат.УстановитьПараметр("Праздники", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	ЗапросРезультат.УстановитьПараметр("Выходной", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни"));
	ЗапросРезультат.УстановитьПараметр("ОсновнойОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск"));
	ЗапросРезультат.УстановитьПараметр("ДополнительныйОтпуск", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск"));
	ЗапросРезультат.УстановитьПараметр("ВидыВремениСплошнойРегистрации", ВидыВремениСплошнойРегистрации());
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросРезультат.Текст, ТекстЗапросаВТДанныеУчетаВремениПоСостояниям);
		
	Если ТипЗнч(ПараметрыПолученияДанных.ДатаНачала) = Тип("Строка") Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&ДатаНачала", ПараметрыПолученияДанных.ДатаНачала);
	Иначе
		ЗапросРезультат.УстановитьПараметр("ДатаНачала", ПараметрыПолученияДанных.ДатаНачала);
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПолученияДанных.ДатаОкончания) = Тип("Строка") Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&ДатаОкончания", ПараметрыПолученияДанных.ДатаОкончания);
	Иначе
		ЗапросРезультат.УстановитьПараметр("ДатаОкончания", ПараметрыПолученияДанных.ДатаОкончания);
	КонецЕсли;	

	Если ТипЗнч(ПараметрыПолученияДанных.ДатаАктуальности) = Тип("Строка") Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&ДатаАктуальности", ПараметрыПолученияДанных.ДатаАктуальности);
	Иначе
		ЗапросРезультат.УстановитьПараметр("ДатаАктуальности", ПараметрыПолученияДанных.ДатаАктуальности);
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПолученияДанных.ВыделятьВыходныеВПериодыОтклонений) = Тип("Строка") Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&ВыделятьВыходныеВПериодыОтклонений", ПараметрыПолученияДанных.ВыделятьВыходныеВПериодыОтклонений);
	Иначе
		ЗапросРезультат.УстановитьПараметр("ВыделятьВыходныеВПериодыОтклонений", ПараметрыПолученияДанных.ВыделятьВыходныеВПериодыОтклонений);
	КонецЕсли;
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТДанныеУчетаВремениИСостоянийСотрудников", ПараметрыПолученияДанных.ИмяВТРезультат);
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыПолученияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	Возврат ЗапросРезультат;
	
КонецФункции	

Процедура СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияДанных) Экспорт 
	Запрос = ЗапросВТДанныеУчетаВремениИСостоянийСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
КонецПроцедуры	

Функция ПараметрыДляЗапросВТПлановоеВремяПолный() Экспорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаНачала");
	Параметры.Вставить("ДатаОкончания");
	Параметры.Вставить("ДатаАктуальности");
	Параметры.Вставить("ИмяВТСотрудники");
	Параметры.Вставить("ИмяВТРезультат");
	
	Возврат Параметры;
КонецФункции	

Функция ЗапросВТПлановоеВремяПолный(ТолькоРазрешенные, ПараметрыПолученияПлановогоВремени, ДляСКД = Ложь) Экспорт
	ЗапросВТРезультат = Новый Запрос;
	
	Если ТипЗнч(ПараметрыПолученияПлановогоВремени.ДатаНачала) = Тип("Строка") Тогда
		ПараметрМесяцДатаНачала = "НАЧАЛОПЕРИОДА(" + ПараметрыПолученияПлановогоВремени.ДатаНачала + ", МЕСЯЦ)";
	Иначе
		ПараметрМесяцДатаНачала = НачалоМесяца(ПараметрыПолученияПлановогоВремени.ДатаНачала);
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПолученияПлановогоВремени.ДатаНачала) = Тип("Строка") Тогда
		ПараметрМесяцДатаОкончания = "КОНЕЦПЕРИОДА(" + ПараметрыПолученияПлановогоВремени.ДатаОкончания + ", МЕСЯЦ)";
	Иначе
		ПараметрМесяцДатаОкончания = КонецМесяца(ПараметрыПолученияПлановогоВремени.ДатаОкончания);
	КонецЕсли;	

	ЗапросВТМесяцы = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВтПериоды(
						ПараметрМесяцДатаНачала, 
						ПараметрМесяцДатаОкончания, 
						"МЕСЯЦ", 
						"Месяц", 
						"ВТМесяцы");
						
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТРезультат, ЗапросВТМесяцы);	
		
	ЗапросВТСотрудникиМесяцы = Новый Запрос; 
	ЗапросВТСотрудникиМесяцы.Текст = 	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыРаботыСотрудников.Сотрудник,
	|	Месяцы.Месяц,
	|	ВЫБОР
	|		КОГДА &ДатаНачала > Месяцы.Месяц
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ Месяцы.Месяц
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА &ДатаОкончания < КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	|			ТОГДА &ДатаОкончания
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаОкончания,
	|	&ДатаАктуальности КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудникиМесяцы
	|ИЗ
	|	ВТМесяцы КАК Месяцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ПериодыРаботыСотрудников
	|		ПО (ИСТИНА)";
	
	Если ТипЗнч(ПараметрыПолученияПлановогоВремени.ДатаНачала) = Тип("Строка") Тогда
		ЗапросВТСотрудникиМесяцы.Текст = СтрЗаменить(ЗапросВТСотрудникиМесяцы.Текст, "&ДатаНачала", ПараметрыПолученияПлановогоВремени.ДатаНачала);
	Иначе
		ЗапросВТРезультат.УстановитьПараметр("ДатаНачала", ПараметрыПолученияПлановогоВремени.ДатаНачала);	
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПолученияПлановогоВремени.ДатаОкончания) = Тип("Строка") Тогда
		ЗапросВТСотрудникиМесяцы.Текст = СтрЗаменить(ЗапросВТСотрудникиМесяцы.Текст, "&ДатаОкончания", ПараметрыПолученияПлановогоВремени.ДатаОкончания);
	Иначе
		ЗапросВТРезультат.УстановитьПараметр("ДатаОкончания", ПараметрыПолученияПлановогоВремени.ДатаОкончания);	
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПолученияПлановогоВремени.ДатаАктуальности) = Тип("Строка") Тогда
		ЗапросВТСотрудникиМесяцы.Текст = СтрЗаменить(ЗапросВТСотрудникиМесяцы.Текст, "&ДатаАктуальности", ПараметрыПолученияПлановогоВремени.ДатаАктуальности);
	Иначе
		ЗапросВТРезультат.УстановитьПараметр("ДатаАктуальности", ПараметрыПолученияПлановогоВремени.ДатаАктуальности);	
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТРезультат, ЗапросВТСотрудникиМесяцы);

	ПараметрыПолученияДанныхУчетаВремени = ПараметрыПолученияПлановыхДанныхУчетаВремени();
	
	ПараметрыПолученияДанныхУчетаВремени.ДатаНачала = ПараметрыПолученияПлановогоВремени.ДатаНачала;
	ПараметрыПолученияДанныхУчетаВремени.ДатаОкончания = ПараметрыПолученияПлановогоВремени.ДатаОкончания;
	
	ПараметрыПостроения = ПараметрыПостроенияЗапросаКДаннымУчетаВремени();
	ПараметрыПостроения.ДляСКД = ДляСКД;
	
	ПараметрыПостроения.ИмяВТИсточникДанных = "ВТСотрудникиМесяцы";
	ПараметрыПостроения.ИмяВТРезультат = ПараметрыПолученияПлановогоВремени.ИмяВТРезультат;
		
	ЗапросПолученияДанныхУчетаВремени = СоздатьЗапросПолученияПлановыхДанныхУчетаВремени(ПараметрыПолученияДанныхУчетаВремени, ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТРезультат, ЗапросПолученияДанныхУчетаВремени);	
	
	Возврат ЗапросВТРезультат;
КонецФункции	

#КонецОбласти

#Область РегистрацияДанныхОВремени

// Формирует записи в регистре сведений "ГрафикиРаботыПоВидамВремени" на
//  для переданного графика работы.
//
// Параметры:
//		ГрафикРаботы - календарь, по которому необходимо сформировать записи о времени.
//		ДанныеГрафика - таблица (типизированная) значений со следующими колонками:
//          Дата - тип "Дата",
//			ВидУчетаВремени - вид учета времени (тип - "СправочникСсылка.ВидыИспользованияРабочегоВремени").
//			Часы - количество часов.
//			
Процедура ЗаписатьДанныеГрафика(ГрафикРаботы, ДанныеГрафика, НомерТекущегоГода, СохранитьСреднемесячныеНормыВремени = Истина, СохранитьАвтоОбновлениеГрафика = Истина, РежимЗагрузки = Ложь) Экспорт
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// запоминаем текущее состояние общего графика
	ПоместитьТекущиеДанныеГрафикаВВТПередЗаписью(МенеджерВременныхТаблиц, ГрафикРаботы, Дата(НомерТекущегоГода, 1, 1));
	ЭтоНовый = Не ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТТекущиеДанныеОбщегоГрафика");
	ДанныеГрафикаПодневно = ТаблицаДанныхГрафикаПодневно(ДанныеГрафика, НомерТекущегоГода);
	
	// Дополнительно учтем, переходящую часть смены пришедшуюся на начало текущего года
	// а так же в случае, если в записываемых данных есть.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеГрафика", ДанныеГрафикаПодневно);
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("ДатаНачалаГода", Дата(НомерТекущегоГода, 1, 1));
	Запрос.УстановитьПараметр("ДатаНачалаСледующегоГода", КонецГода(Дата(НомерТекущегоГода, 1, 1)) + 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеГрафика.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеГрафика.Смена КАК Смена,
	|	ДанныеГрафика.ПереходящаяЧастьСмены КАК ПереходящаяЧастьСмены,
	|	ДанныеГрафика.Дата КАК Дата,
	|	ДанныеГрафика.Часы КАК Часы,
	|	ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены КАК ОтражатьЧасыВДеньНачалаСмены
	|ПОМЕСТИТЬ ВТДанныеГрафика
	|ИЗ
	|	&ДанныеГрафика КАК ДанныеГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеГрафика.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА ДанныеГрафика.ПереходящаяЧастьСмены
	|				И НЕ ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДанныеГрафика.Дата, ДЕНЬ, 1)
	|		ИНАЧЕ ДанныеГрафика.Дата
	|	КОНЕЦ КАК Дата,
	|	ДанныеГрафика.Смена КАК Смена,
	|	ДанныеГрафика.ПереходящаяЧастьСмены КАК ПереходящаяЧастьСмены,
	|	ВЫБОР
	|		КОГДА ДанныеГрафика.ПереходящаяЧастьСмены
	|				И ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПереходящаяЧастьТекущейСмены,
	|	ВЫБОР
	|		КОГДА ДанныеГрафика.ПереходящаяЧастьСмены
	|				И НЕ ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены КАК ОтражатьЧасыВДеньНачалаСмены,
	|	СУММА(ДанныеГрафика.Часы) КАК Часы,
	|	ВЫБОР
	|		КОГДА ДанныеГрафика.ПереходящаяЧастьСмены
	|				И НЕ ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ДанныеГрафика.Дата, ДЕНЬ, 1), МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеГрафика.Дата, МЕСЯЦ)
	|	КОНЕЦ КАК Месяц,
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя
	|ИЗ
	|	ВТДанныеГрафика КАК ДанныеГрафика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО ДанныеГрафика.ВидУчетаВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеГрафика.ВидУчетаВремени,
	|	ДанныеГрафика.Дата,
	|	ДанныеГрафика.Смена,
	|	ДанныеГрафика.ОтражатьЧасыВДеньНачалаСмены,
	|	ДанныеГрафика.ПереходящаяЧастьСмены,
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.Смена,
	|	ИСТИНА,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены,
	|	ЛОЖЬ,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.Месяц,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц = &ДатаНачалаГода
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Дата = &ДатаНачалаГода
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя)
	|	И ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Дата,
	|	ПереходящаяЧастьТекущейСмены,
	|	ПереходящаяЧастьПредыдущейСмены";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеРасчетаСреднемесячныхЗначенийТекущегоГода = ДанныеРасчетаСреднемесячныхЗначенийГрафика();
	ДанныеРасчетаСреднемесячныхЗначенийСледующегоГода = ДанныеРасчетаСреднемесячныхЗначенийГрафика();
	
	ЕстьПереходящаяЧастьСледующегоГода = Ложь;
	Пока Выборка.СледующийПоЗначениюПоля("Месяц") Цикл 
		НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		
		ЗаполнитьНаборЗаписейГрафикаЗаМесяц(НаборЗаписей, ГрафикРаботы, Выборка);	
		
		// учтем особенности переходящих на следующий год записей
		Если ДатаГрафикаСледующегоГода(Выборка.Дата, НомерТекущегоГода) Тогда
			УстановитьОтборНабораГрафикаСледующегоГода(НаборЗаписей, НомерТекущегоГода);	
			ЕстьПереходящаяЧастьСледующегоГода = Истина;
			ЗаполнитьДанныеРасчетаСреднемесячныхЗначенийГрафика(ДанныеРасчетаСреднемесячныхЗначенийСледующегоГода, НаборЗаписей);
		Иначе
			ЗаполнитьДанныеРасчетаСреднемесячныхЗначенийГрафика(ДанныеРасчетаСреднемесячныхЗначенийТекущегоГода, НаборЗаписей);	
		КонецЕсли;	
		
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
		НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
		Если ЭтоНовый Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;                                 
	
	// Если нет переходящий на следующий год части смены
	// очистим набор с отбором для этой смены.
	Если Не ЕстьПереходящаяЧастьСледующегоГода Тогда
		НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
		УстановитьОтборНабораГрафикаСледующегоГода(НаборЗаписей, НомерТекущегоГода);
		НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
		НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
		Если ЭтоНовый Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЕсли;	
	
	// Запись среднемесячных норм времени.
	Если СохранитьСреднемесячныеНормыВремени Тогда
		ЗаписатьСреднемесячныеДанныеГрафикаТекущегоГода(ГрафикРаботы, ДанныеРасчетаСреднемесячныхЗначенийТекущегоГода, НомерТекущегоГода); 
	КонецЕсли;
	
	Если СохранитьАвтоОбновлениеГрафика Тогда
		Запись = РегистрыСведений.АвтоматическиОбновляемыеГрафикиРаботыСотрудников.СоздатьМенеджерЗаписи();
		Запись.ГрафикРаботы = ГрафикРаботы;
		Запись.Год = НомерТекущегоГода;
		Запись.Записать();
	КонецЕсли;
	
	ОбновитьСреднемесячныеДанныеГрафикаСледующегоГода(ГрафикРаботы, ДанныеРасчетаСреднемесячныхЗначенийТекущегоГода, НомерТекущегоГода);
	
	ОбработатьИзмененияОбщегоГрафикаПослеЗаписи(МенеджерВременныхТаблиц, ГрафикРаботы, Дата(НомерТекущегоГода, 1, 1));
	ИнтеграцияУправлениеПерсоналомСобытияРасширенный.ГрафикиРаботыПоВидамВремениПриЗаписи(ГрафикРаботы, НомерТекущегоГода);
	
КонецПроцедуры

Функция ДатаГрафикаСледующегоГода(Дата, НомерТекущегоГода)
	Возврат Дата >= Дата(НомерТекущегоГода + 1, 1, 1);	
КонецФункции

Процедура УстановитьОтборНабораГрафикаСледующегоГода(НаборЗаписей, НомерТекущегоГода)
	НаборЗаписей.Отбор.Месяц.Установить(Дата(НомерТекущегоГода + 1, 1, 1));
	НаборЗаписей.Отбор.Дата.Установить(Дата(НомерТекущегоГода + 1, 1, 1));
	НаборЗаписей.Отбор.ПереходящаяЧастьПредыдущейСмены.Установить(Истина);	
КонецПроцедуры	

Функция ЗаполнитьНаборЗаписейГрафикаЗаМесяц(НаборЗаписейГрафика, ГрафикРаботы, ВыборкаДанныхГрафикаЗаМесяц)
	ВидыВремениВключаемыеВНорму = ВидыВремениВключаемыеВНорму();
	ВидыВремениВключаемыеВНормуСоответствие = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВидыВремениВключаемыеВНорму);	
		
	ВидВремениВыходные = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	ВидВремениРабочееВремя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	Пока ВыборкаДанныхГрафикаЗаМесяц.СледующийПоЗначениюПоля("Дата") Цикл
		Пока ВыборкаДанныхГрафикаЗаМесяц.СледующийПоЗначениюПоля("ПереходящаяЧастьТекущейСмены") Цикл
			Пока ВыборкаДанныхГрафикаЗаМесяц.СледующийПоЗначениюПоля("ПереходящаяЧастьПредыдущейСмены") Цикл
				РабочееВремяЧасы = 0;
				НеРабочееВремяЧасы = 0;
				ТекущаяСмена = Справочники.СменыРаботыСотрудников.ПустаяСсылка();
				Пока ВыборкаДанныхГрафикаЗаМесяц.Следующий() Цикл                           
					Если ВыборкаДанныхГрафикаЗаМесяц.Часы <> 0 Тогда
						Если ЗначениеЗаполнено(ВыборкаДанныхГрафикаЗаМесяц.Смена) Тогда
							ТекущаяСмена = ВыборкаДанныхГрафикаЗаМесяц.Смена;
						КонецЕсли;	
						
						Если ВидыВремениВключаемыеВНормуСоответствие.Получить(ВыборкаДанныхГрафикаЗаМесяц.ОсновноеВремя) = Истина Тогда
							РабочееВремяЧасы = РабочееВремяЧасы + ВыборкаДанныхГрафикаЗаМесяц.Часы;
						ИначеЕсли ВыборкаДанныхГрафикаЗаМесяц.ОсновноеВремя <> ВидВремениВыходные Тогда
							НеРабочееВремяЧасы = НеРабочееВремяЧасы + ВыборкаДанныхГрафикаЗаМесяц.Часы;	
						КонецЕсли;
						
						Запись = НаборЗаписейГрафика.Добавить();					
						Запись.Дата = ВыборкаДанныхГрафикаЗаМесяц.Дата;
						Запись.ГрафикРаботы = ГрафикРаботы;
						Запись.Месяц = ВыборкаДанныхГрафикаЗаМесяц.Месяц;
						Запись.Смена = ВыборкаДанныхГрафикаЗаМесяц.Смена;
						Запись.ПереходящаяЧастьПредыдущейСмены = ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьПредыдущейСмены;
						Запись.ПереходящаяЧастьТекущейСмены = ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьТекущейСмены;
						Запись.ВидУчетаВремени = ВыборкаДанныхГрафикаЗаМесяц.ВидУчетаВремени;
						Запись.ОсновноеЗначение = ?(ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьСмены, 0, 1);
						Запись.ДополнительноеЗначение = ВыборкаДанныхГрафикаЗаМесяц.Часы;
						Запись.ОсновноеЗначениеНорма = ?(ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьСмены, 0, 1);
						Запись.ДополнительноеЗначениеНорма = ВыборкаДанныхГрафикаЗаМесяц.Часы;
										
					КонецЕсли;
				КонецЦикла;					
				Если РабочееВремяЧасы > 0 
					Или НеРабочееВремяЧасы > 0 Тогда
					ИтоговыйВидВремени = ВидВремениРабочееВремя;
				Иначе 
					ИтоговыйВидВремени = ВидВремениВыходные;
				КонецЕсли;			
				Если Не ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьСмены Или ИтоговыйВидВремени = ВидВремениРабочееВремя Тогда 
					Запись = НаборЗаписейГрафика.Добавить();
					Запись.Дата = ВыборкаДанныхГрафикаЗаМесяц.Дата;
					Запись.ГрафикРаботы = ГрафикРаботы;
					Запись.Месяц = ВыборкаДанныхГрафикаЗаМесяц.Месяц;
					Запись.ВидУчетаВремени = ИтоговыйВидВремени;
					Запись.Смена = ТекущаяСмена;
					Запись.ПереходящаяЧастьПредыдущейСмены = ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьПредыдущейСмены;
					Запись.ПереходящаяЧастьТекущейСмены = ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьТекущейСмены;
					
					Если ИтоговыйВидВремени = ВидВремениВыходные Тогда
						Запись.ОсновноеЗначение = 1;
						Запись.ОсновноеЗначениеНорма = 1;
					Иначе
						Запись.ОсновноеЗначение = ?(РабочееВремяЧасы > 0 И Не ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьСмены, 1, 0);
						Запись.ОсновноеЗначениеНорма = ?(РабочееВремяЧасы > 0 И Не ВыборкаДанныхГрафикаЗаМесяц.ПереходящаяЧастьСмены, 1, 0);
					КонецЕсли;
					
					Запись.ДополнительноеЗначение = РабочееВремяЧасы;
					Запись.ДополнительноеЗначениеНорма = РабочееВремяЧасы;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;
	КонецЦикла;	
	
КонецФункции	

Функция ТаблицаДанныхГрафикаПодневно(ДанныеГрафика, НомерТекущегоГода)
	ТаблицаДанныхГрафикаПодневно = Новый ТаблицаЗначений;
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени")); 
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("Смена", Новый ОписаниеТипов("СправочникСсылка.СменыРаботыСотрудников")); 
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("ПереходящаяЧастьСмены", Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхГрафикаПодневно.Колонки.Добавить("ОтражатьЧасыВДеньНачалаСмены", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ДанныеГрафикаЗаМесяц Из ДанныеГрафика Цикл 
		Месяц = Дата(НомерТекущегоГода, ДанныеГрафикаЗаМесяц.НомерМесяца, 1);
		КоличествоДнейВМесяце = ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц);
		Для НомерДня = 1 По КоличествоДнейВМесяце Цикл
			ТекущийДень = Месяц + (НомерДня - 1) * 86400;
			
			ДанныеГрафикаЗаДату = ТаблицаДанныхГрафикаПодневно.Добавить();
			ДанныеГрафикаЗаДату.Дата = ТекущийДень;
			ДанныеГрафикаЗаДату.ПереходящаяЧастьСмены = ДанныеГрафикаЗаМесяц.ПереходящаяЧастьСмены;
			ДанныеГрафикаЗаДату.ВидУчетаВремени = ДанныеГрафикаЗаМесяц.ВидВремени;
			ДанныеГрафикаЗаДату.Смена =  ДанныеГрафикаЗаМесяц["Смена" + НомерДня];
			ДанныеГрафикаЗаДату.Часы = ДанныеГрафикаЗаМесяц["День" + НомерДня];
			ДанныеГрафикаЗаДату.ОтражатьЧасыВДеньНачалаСмены = ДанныеГрафикаЗаМесяц["ОтражатьЧасыВДеньНачалаСмены" + НомерДня];	
		КонецЦикла;
	КонецЦикла;
	
	Возврат  ТаблицаДанныхГрафикаПодневно;
КонецФункции	

Функция ДанныеРасчетаСреднемесячныхЗначенийГрафика()
	ДанныеРасчетаСреднемесячныхЗначенийГрафика = Новый Структура("ЧислоДнейЗаГод, ЧислоЧасовЗаГод, ЧасыПереходящейСменыПредыдущегоГода");
	ДанныеРасчетаСреднемесячныхЗначенийГрафика.ЧислоДнейЗаГод = 0;
	ДанныеРасчетаСреднемесячныхЗначенийГрафика.ЧислоЧасовЗаГод = 0;
	ДанныеРасчетаСреднемесячныхЗначенийГрафика.ЧасыПереходящейСменыПредыдущегоГода = 0;
		
	Возврат ДанныеРасчетаСреднемесячныхЗначенийГрафика;
КонецФункции	

Процедура ЗаполнитьДанныеРасчетаСреднемесячныхЗначенийГрафика(ДанныеРасчетаСреднемесячныхЗначений, НаборЗаписейГрафика)
	ВидВремениРабочееВремя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	Для Каждого СтрокаНабора Из НаборЗаписейГрафика Цикл
		Если СтрокаНабора.ВидУчетаВремени = ВидВремениРабочееВремя Тогда
			ДанныеРасчетаСреднемесячныхЗначений.ЧислоДнейЗаГод = ДанныеРасчетаСреднемесячныхЗначений.ЧислоДнейЗаГод + СтрокаНабора.ОсновноеЗначение;
			ДанныеРасчетаСреднемесячныхЗначений.ЧислоЧасовЗаГод = ДанныеРасчетаСреднемесячныхЗначений.ЧислоЧасовЗаГод + СтрокаНабора.ДополнительноеЗначение;
			
			Если Месяц(СтрокаНабора.Дата) = 1 И День(СтрокаНабора.Дата) = 1 И СтрокаНабора.ПереходящаяЧастьПредыдущейСмены Тогда
				ДанныеРасчетаСреднемесячныхЗначений.ЧасыПереходящейСменыПредыдущегоГода = ДанныеРасчетаСреднемесячныхЗначений.ЧасыПереходящейСменыПредыдущегоГода + СтрокаНабора.ДополнительноеЗначение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаписатьСреднемесячныеДанныеГрафикаТекущегоГода(ГрафикРаботы, ДанныеРасчетаСреднемесячныхЗначений, НомерТекущегоГода)
	НаборСреднемесячныеНормы = РегистрыСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СоздатьНаборЗаписей();
	НаборСреднемесячныеНормы.Отбор.Год.Установить(НомерТекущегоГода);
	НаборСреднемесячныеНормы.Отбор.ГрафикРаботыСотрудников.Установить(ГрафикРаботы);
	
	НаборСреднемесячныеНормы.Прочитать();
	
	Если НаборСреднемесячныеНормы.Количество() = 0 Тогда
		СтрокаНабораСреднемесячныеНормы = НаборСреднемесячныеНормы.Добавить();
	Иначе
		СтрокаНабораСреднемесячныеНормы = НаборСреднемесячныеНормы[0];
	КонецЕсли;	
	
	// Если нормы установлены
	Если НЕ СтрокаНабораСреднемесячныеНормы.УстановленыВРучную Тогда
		
		СтрокаНабораСреднемесячныеНормы.Год = НомерТекущегоГода;
		СтрокаНабораСреднемесячныеНормы.ГрафикРаботыСотрудников = ГрафикРаботы;
		СтрокаНабораСреднемесячныеНормы.СреднемесячноеЧислоДней = ДанныеРасчетаСреднемесячныхЗначений.ЧислоДнейЗаГод / 12;
		СтрокаНабораСреднемесячныеНормы.СреднемесячноеЧислоЧасов = ДанныеРасчетаСреднемесячныхЗначений.ЧислоЧасовЗаГод / 12;
		СтрокаНабораСреднемесячныеНормы.ЧислоЧасовЗаГод = ДанныеРасчетаСреднемесячныхЗначений.ЧислоЧасовЗаГод; 
		СтрокаНабораСреднемесячныеНормы.ЧасыПереходящейСменыПредыдущегоГода = ДанныеРасчетаСреднемесячныхЗначений.ЧасыПереходящейСменыПредыдущегоГода;
		
		НаборСреднемесячныеНормы.Записать();
		
	КонецЕсли;	
КонецПроцедуры	

Процедура ОбновитьСреднемесячныеДанныеГрафикаСледующегоГода(ГрафикРаботы, ДанныеРасчетаСреднемесячныхЗначений, НомерТекущегоГода)
	НаборСреднемесячныеНормы = РегистрыСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СоздатьНаборЗаписей();
	НаборСреднемесячныеНормы.Отбор.Год.Установить(НомерТекущегоГода + 1);
	НаборСреднемесячныеНормы.Отбор.ГрафикРаботыСотрудников.Установить(ГрафикРаботы);
	
	НаборСреднемесячныеНормы.Прочитать();
	
	Если НаборСреднемесячныеНормы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаНабораСреднемесячныеНормы = НаборСреднемесячныеНормы[0];
	КонецЕсли;	
	
	// Если нормы установлены
	Если НЕ СтрокаНабораСреднемесячныеНормы.УстановленыВРучную Тогда
		ЧислоЧасовЗаГод = СтрокаНабораСреднемесячныеНормы.ЧислоЧасовЗаГод - СтрокаНабораСреднемесячныеНормы.ЧасыПереходящейСменыПредыдущегоГода + ДанныеРасчетаСреднемесячныхЗначений.ЧасыПереходящейСменыПредыдущегоГода;
		
		СтрокаНабораСреднемесячныеНормы.СреднемесячноеЧислоЧасов = ЧислоЧасовЗаГод / 12;
		СтрокаНабораСреднемесячныеНормы.ЧасыПереходящейСменыПредыдущегоГода = ДанныеРасчетаСреднемесячныхЗначений.ЧасыПереходящейСменыПредыдущегоГода;
		СтрокаНабораСреднемесячныеНормы.ЧислоЧасовЗаГод = ЧислоЧасовЗаГод;
		
		НаборСреднемесячныеНормы.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПоместитьТекущиеДанныеГрафикаВВТПередЗаписью(МенеджерВременныхТаблиц, ГрафикРаботы, Год)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Год));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Год));
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода(Год) + 1);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
	|	ГрафикиРаботыПоВидамВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.ВремяВЧасах КАК ВремяВЧасах,
	|	ГрафикиРаботыПоВидамВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ГрафикиРаботыПоВидамВремени.Территория КАК Территория,
	|	ГрафикиРаботыПоВидамВремени.УсловияТруда КАК УсловияТруда,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение КАК ОсновноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение КАК ДополнительноеЗначение,
	|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма КАК ОсновноеЗначениеНорма,
	|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма КАК ДополнительноеЗначениеНорма,
	|	ГрафикиРаботыПоВидамВремени.План КАК План,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ГрафикиРаботыПоВидамВремени.Смена КАК Смена
	|ПОМЕСТИТЬ ВТТекущиеДанныеОбщегоГрафика
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
	|	И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &НачалоСледующегоГода
	|	И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоГода И &КонецГода
	|			ИЛИ ГрафикиРаботыПоВидамВремени.Дата = &НачалоСледующегоГода
	|				И ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены)
	|	И НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ОбработатьИзмененияОбщегоГрафикаПослеЗаписи(МенеджерВременныхТаблиц, ГрафикРаботы, Год)
	
	Запрос = ЗапросСоздатьВТИзменившиесяДанныеОбщихГрафиков();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Год));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(Год));
	Запрос.УстановитьПараметр("НачалоСледующегоГода", КонецГода(Год) + 1);
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменившиесяДанныеОбщихГрафиков.ГрафикРаботы КАК ГрафикРаботы,
		|	ИзменившиесяДанныеОбщихГрафиков.Месяц КАК Месяц
		|ПОМЕСТИТЬ ВТМесяцыИзмененияОбщегоГрафика
		|ИЗ
		|	ВТИзменившиесяДанныеОбщихГрафиков КАК ИзменившиесяДанныеОбщихГрафиков
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГрафикиРаботыСотрудников.Ссылка,
		|	ИзменившиесяДанныеОбщихГрафиков.Месяц
		|ИЗ
		|	ВТИзменившиесяДанныеОбщихГрафиков КАК ИзменившиесяДанныеОбщихГрафиков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ПО ИзменившиесяДанныеОбщихГрафиков.ГрафикРаботы = ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
		|			И (ГрафикиРаботыСотрудников.НеполноеРабочееВремя)";
	
	Запрос.Выполнить();
	
	Если ЗарплатаКадры.ВТСодержитСтроки(МенеджерВременныхТаблиц, "ВТМесяцыИзмененияОбщегоГрафика") Тогда
		ПриИзмененииДанныхОбщегоГрафика(МенеджерВременныхТаблиц, ГрафикРаботы);	
	КонецЕсли;	

КонецПроцедуры	

Функция ПустаяТаблицаДанныхОВремени() Экспорт
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник");
	ТаблицаДанных.Колонки.Добавить("Дата");
	ТаблицаДанных.Колонки.Добавить("Внутрисменное");
	ТаблицаДанных.Колонки.Добавить("ВЦеломЗаПериод");
	ТаблицаДанных.Колонки.Добавить("ВидВремениВытесняемый");
	ТаблицаДанных.Колонки.Добавить("Дней");
	ТаблицаДанных.Колонки.Добавить("Часов");
	ТаблицаДанных.Колонки.Добавить("НормаДней");
	ТаблицаДанных.Колонки.Добавить("НормаЧасов");
	ТаблицаДанных.Колонки.Добавить("ВидУчетаВремени");
	ТаблицаДанных.Колонки.Добавить("План");
	ТаблицаДанных.Колонки.Добавить("Месяц");
	ТаблицаДанных.Колонки.Добавить("Территория");
	ТаблицаДанных.Колонки.Добавить("УсловияТруда");

	
	Возврат ТаблицаДанных;
КонецФункции	

Функция ПустаяТаблицаДляРегистрацииВремени() Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	Таблица.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("План", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВЦеломЗаПериод", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Внутрисменное", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));

	Возврат Таблица;
КонецФункции	

Функция ИсправляемыеДвиженияПоРегистру(МетаданныеРегистра, ИсправляемыеДокументыПоСотрудникам)
	Запрос = ЗапросВыбораИсправляемыхДанныхПоРегистратору(МетаданныеРегистра, ИсправляемыеДокументыПоСотрудникам);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЗапросВыбораИсправляемыхДанныхПоРегистратору(МетаданныеРегистра, ИсправляемыеДокументыПоСотрудникам)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыеДокументыПоСотрудникам", ИсправляемыеДокументыПоСотрудникам);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсправляемыеДокументыПоСотрудникам.Сотрудник,
	|	ИсправляемыеДокументыПоСотрудникам.ИсправленныйДокумент
	|ПОМЕСТИТЬ ВТИсправляемыеДокументыПоСотрудникам
	|ИЗ
	|	&ИсправляемыеДокументыПоСотрудникам КАК ИсправляемыеДокументыПоСотрудникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистраУчетаВремени.*
	|ИЗ
	|	ВТИсправляемыеДокументыПоСотрудникам КАК ИсправляемыеДокументыПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРегистраУчетаВремени КАК ДанныеРегистраУчетаВремени
	|		ПО ИсправляемыеДокументыПоСотрудникам.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|			И ИсправляемыеДокументыПоСотрудникам.ИсправленныйДокумент = ДанныеРегистраУчетаВремени.Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДанныеРегистраУчетаВремени", МетаданныеРегистра.ПолноеИмя());
	
	Возврат Запрос;
КонецФункции

Функция ИсправляемыеДокументыПоСотрудникам(ИсправленныйДокумент, Сотрудники)	
	Типы = Новый Массив;
	Типы.Добавить(ТипЗнч(ИсправленныйДокумент));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));	
	Результат.Колонки.Добавить("ИсправленныйДокумент", Новый ОписаниеТипов(Типы));
	
	ЦепочкаИсправленныхДокументов = ИсправлениеДокументовЗарплатаКадры.ПолучитьДокументыЦепочкиИсправлений(ИсправленныйДокумент);
	ЦепочкаИсправленныхДокументов.Вставить(0, ИсправленныйДокумент);
	
	ЦепочкаИсправленныхДокументовПоСотрудникам = Результат.СкопироватьКолонки();
	ЦепочкаИсправленныхДокументовПоСотрудникам.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	ПоВсемСотрудникам = Сотрудники = Неопределено;
	Если ПоВсемСотрудникам Тогда
		Порядок = 1;
		Для Каждого ДокументЦепочки Из ЦепочкаИсправленныхДокументов Цикл
			СтрокаТаблицы = ЦепочкаИсправленныхДокументовПоСотрудникам.Добавить();
			СтрокаТаблицы.Порядок = Порядок;
			СтрокаТаблицы.ИсправленныйДокумент = ДокументЦепочки;
			Порядок = Порядок + 1;
		КонецЦикла;
	Иначе
		Для Каждого Сотрудник Из Сотрудники Цикл
			Порядок = 1;
			Для Каждого ДокументЦепочки Из ЦепочкаИсправленныхДокументов Цикл
				СтрокаТаблицы = ЦепочкаИсправленныхДокументовПоСотрудникам.Добавить();
				СтрокаТаблицы.Порядок = Порядок;
				СтрокаТаблицы.Сотрудник = Сотрудник;
				СтрокаТаблицы.ИсправленныйДокумент = ДокументЦепочки;
				Порядок = Порядок + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЦепочкаИсправленныхДокументов.Порядок КАК Порядок,
		|	ЦепочкаИсправленныхДокументов.Сотрудник КАК Сотрудник,
		|	ЦепочкаИсправленныхДокументов.ИсправленныйДокумент КАК ИсправленныйДокумент
		|ПОМЕСТИТЬ ЦепочкаИсправленныхДокументовПоСотрудникам
		|ИЗ
		|	&ЦепочкаИсправленныхДокументовПоСотрудникам КАК ЦепочкаИсправленныхДокументов";
	
	Если ПоВсемСотрудникам Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Сотрудник КАК Сотрудник,
			|	ЦепочкаИсправленныхДокументовПоСотрудникам.ИсправленныйДокумент КАК ИсправленныйДокумент
			|ИЗ
			|	ЦепочкаИсправленныхДокументовПоСотрудникам КАК ЦепочкаИсправленныхДокументовПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников
			|		ПО (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ДокументОснование = ЦепочкаИсправленныхДокументовПоСотрудникам.ИсправленныйДокумент)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник";
	Иначе
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
			"ВЫБРАТЬ
			|	ЦепочкаИсправленныхДокументовПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ЦепочкаИсправленныхДокументовПоСотрудникам.ИсправленныйДокумент КАК ИсправленныйДокумент
			|ИЗ
			|	ЦепочкаИсправленныхДокументовПоСотрудникам КАК ЦепочкаИсправленныхДокументовПоСотрудникам
			|ГДЕ
			|	1 В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				1 КАК Поле1
			|			ИЗ
			|				РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников
			|			ГДЕ
			|				ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ДокументОснование = ЦепочкаИсправленныхДокументовПоСотрудникам.ИсправленныйДокумент
			|				И ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Сотрудник = ЦепочкаИсправленныхДокументовПоСотрудникам.Сотрудник)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	ЦепочкаИсправленныхДокументовПоСотрудникам.Порядок";
	КонецЕсли;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЦепочкаИсправленныхДокументовПоСотрудникам", ЦепочкаИсправленныхДокументовПоСотрудникам);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция ПериодСтрокиРегистрируемыхДанных(СтрокаРегистрируемыхДанных)
	Если ЭтоПереходящаяЧастьПредыдущейСмены(СтрокаРегистрируемыхДанных) Тогда	
		Возврат СтрокаРегистрируемыхДанных.Дата + 86400;
	Иначе
		Возврат СтрокаРегистрируемыхДанных.Дата;
	КонецЕсли;	
КонецФункции

Функция ЭтоПереходящаяЧастьПредыдущейСмены(СтрокаРегистрируемыхДанных)
	Возврат СтрокаРегистрируемыхДанных.ПереходящаяЧастьСмены И Не СтрокаРегистрируемыхДанных.ОтражатьЧасыВДеньНачалаСмены; 	
КонецФункции

Функция ЭтоПереходящаяЧастьТекущейСмены(СтрокаРегистрируемыхДанных)
	Возврат СтрокаРегистрируемыхДанных.ПереходящаяЧастьСмены И СтрокаРегистрируемыхДанных.ОтражатьЧасыВДеньНачалаСмены;	
КонецФункции

Функция ЗапросСоздатьВТИзменившиесяДанныеОбщихГрафиков(ИмяВТНовыеДанные = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ГрафикРаботы КАК ГрафикРаботы,
	|	ВложенныйЗапрос.Месяц КАК Месяц
	|ПОМЕСТИТЬ ВТИзменившиесяДанныеОбщихГрафиков
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДанныеГрафика.ГрафикРаботы КАК ГрафикРаботы,
	|		ТекущиеДанныеГрафика.Месяц КАК Месяц,
	|		ТекущиеДанныеГрафика.ПериодРегистрации КАК ПериодРегистрации,
	|		ТекущиеДанныеГрафика.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ТекущиеДанныеГрафика.Дата КАК Дата,
	|		ТекущиеДанныеГрафика.ВремяВЧасах КАК ВремяВЧасах,
	|		ТекущиеДанныеГрафика.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|		ТекущиеДанныеГрафика.Территория КАК Территория,
	|		ТекущиеДанныеГрафика.УсловияТруда КАК УсловияТруда,
	|		ТекущиеДанныеГрафика.ОсновноеЗначение КАК ОсновноеЗначение,
	|		ТекущиеДанныеГрафика.ДополнительноеЗначение КАК ДополнительноеЗначение,
	|		ТекущиеДанныеГрафика.ОсновноеЗначениеНорма КАК ОсновноеЗначениеНорма,
	|		ТекущиеДанныеГрафика.ДополнительноеЗначениеНорма КАК ДополнительноеЗначениеНорма,
	|		ТекущиеДанныеГрафика.План КАК План,
	|		ТекущиеДанныеГрафика.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|		ТекущиеДанныеГрафика.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|		ТекущиеДанныеГрафика.Смена КАК Смена,
	|		1 КАК ФлагИзменений
	|	ИЗ
	|		ВТТекущиеДанныеОбщегоГрафика КАК ТекущиеДанныеГрафика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|		ГрафикиРаботыПоВидамВремени.Месяц,
	|		ГрафикиРаботыПоВидамВремени.ПериодРегистрации,
	|		ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|		ГрафикиРаботыПоВидамВремени.Дата,
	|		ГрафикиРаботыПоВидамВремени.ВремяВЧасах,
	|		ГрафикиРаботыПоВидамВремени.ВЦеломЗаПериод,
	|		ГрафикиРаботыПоВидамВремени.Территория,
	|		ГрафикиРаботыПоВидамВремени.УсловияТруда,
	|		ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|		ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|		ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма,
	|		ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма,
	|		ГрафикиРаботыПоВидамВремени.План,
	|		ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены,
	|		ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены,
	|		ГрафикиРаботыПоВидамВремени.Смена,
	|		-1
	|	ИЗ
	|		&ТаблицаНовыеДанные КАК ГрафикиРаботыПоВидамВремени
	|	ГДЕ
	|		&УсловиеТаблицыНовыеДанные) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ГрафикРаботы,
	|	ВложенныйЗапрос.Месяц,
	|	ВложенныйЗапрос.ПериодРегистрации,
	|	ВложенныйЗапрос.ВидУчетаВремени,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.ВремяВЧасах,
	|	ВложенныйЗапрос.ВЦеломЗаПериод,
	|	ВложенныйЗапрос.Территория,
	|	ВложенныйЗапрос.УсловияТруда,
	|	ВложенныйЗапрос.ОсновноеЗначение,
	|	ВложенныйЗапрос.ДополнительноеЗначение,
	|	ВложенныйЗапрос.ОсновноеЗначениеНорма,
	|	ВложенныйЗапрос.ДополнительноеЗначениеНорма,
	|	ВложенныйЗапрос.ПереходящаяЧастьПредыдущейСмены,
	|	ВложенныйЗапрос.ПереходящаяЧастьТекущейСмены,
	|	ВложенныйЗапрос.Смена
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.ФлагИзменений) <> 0";
	
	Если ИмяВТНовыеДанные = Неопределено Тогда
		Условия = "ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &ГрафикРаботы
			|		И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &НачалоСледующегоГода
			|		И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоГода И &КонецГода
			|				ИЛИ ГрафикиРаботыПоВидамВремени.Дата = &НачалоСледующегоГода
			|					И ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены)
			|		И НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТаблицыНовыеДанные", Условия);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаНовыеДанные", "РегистрСведений.ГрафикиРаботыПоВидамВремени");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТаблицыНовыеДанные", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаНовыеДанные", ИмяВТНовыеДанные);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРегистрируемыхДанныхОВремениСотрудников

Процедура ПроверитьПустыеДатыСверхурочныхДокументов(МенеджерВТ, ИмяПоляСпискаДат, Ошибки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПустаяДата
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|ГДЕ
	|	ДанныеОРаботе.Дата = ДАТАВРЕМЯ(1, 1, 1)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, ИмяПоляСпискаДат, НСтр("ru = 'Не заполнены дни работы.';
																							|en = 'Workdays are not filled in.'"), "");
	
КонецПроцедуры

Процедура ПроверитьДублиСтрокСверхурочныхДокументов(МенеджерВТ, Ошибки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОРаботе.НомерСтроки) КАК Строк,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки
	|ПОМЕСТИТЬ ВТДублиСтрок
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОРаботе.НомерСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДублиСтрок.Сотрудник,
	|	ВТДублиСтрок.СпособКомпенсацииПереработки,
	|	МИНИМУМ(ВТДублиСтрок.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТДублиСвернутые
	|ИЗ
	|	ВТДублиСтрок КАК ВТДублиСтрок
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДублиСтрок.СпособКомпенсацииПереработки,
	|	ВТДублиСтрок.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОРаботе.НомерСтроки КАК НомерСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ПОМЕСТИТЬ ВТДубли
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДублиСвернутые КАК ВТДублиСвернутые
	|		ПО ДанныеОРаботе.Сотрудник = ВТДублиСвернутые.Сотрудник
	|			И ДанныеОРаботе.СпособКомпенсацииПереработки = ВТДублиСвернутые.СпособКомпенсацииПереработки
	|			И ДанныеОРаботе.Дата = ВТДублиСвернутые.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДубли.Сотрудник,
	|	ВТДубли.СпособКомпенсацииПереработки,
	|	МИНИМУМ(ВТДубли.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТПервыеСтроки
	|ИЗ
	|	ВТДубли КАК ВТДубли
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДубли.Сотрудник,
	|	ВТДубли.СпособКомпенсацииПереработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДубли.НомерСтроки,
	|	ВТДубли.НомерСтроки - 1 КАК ИндексСтроки,
	|	ВТДубли.Сотрудник,
	|	ВТДубли.Дата,
	|	ВТДубли.ОтработаноЧасов,
	|	ВТДубли.СпособКомпенсацииПереработки,
	|	ВТДубли.ВремяВЧасах,
	|	ВТДубли.НеРаботал
	|ИЗ
	|	ВТДубли КАК ВТДубли
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПервыеСтроки КАК ВТПервыеСтроки
	|		ПО ВТДубли.Сотрудник = ВТПервыеСтроки.Сотрудник
	|			И ВТДубли.СпособКомпенсацииПереработки = ВТПервыеСтроки.СпособКомпенсацииПереработки
	|ГДЕ
	|	ВТПервыеСтроки.НомерСтроки <> ВТДубли.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДублиСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДублиСвернутые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДубли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПервыеСтроки";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Информация по сотруднику %1 уже введена.';
				|en = 'Information on employee %1 has already been entered.'"),
			Выборка.Сотрудник);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Сотрудники[%1].Сотрудник",
			ТекстСообщения,
			"",
			Выборка.ИндексСтроки);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьДублиДнейСверхурочныхДокументов(МенеджерВТ, Ошибки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОРаботе.НомерСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ПОМЕСТИТЬ ВТОтработанныеДни
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ДанныеОРаботе.ВремяВЧасах
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеОРаботе.ОтработаноЧасов > 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ НЕ ДанныеОРаботе.НеРаботал
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтработанныеДни.Сотрудник,
	|	ВТОтработанныеДни.Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТОтработанныеДни.НомерСтроки) КАК Строк
	|ПОМЕСТИТЬ ВТДублиДней
	|ИЗ
	|	ВТОтработанныеДни КАК ВТОтработанныеДни
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТОтработанныеДни.Сотрудник,
	|	ВТОтработанныеДни.Дата
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТОтработанныеДни.НомерСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДублиДней.Сотрудник,
	|	ВТДублиДней.Дата,
	|	МИНИМУМ(ВТОтработанныеДни.НомерСтроки) КАК ПерваяСтрока
	|ПОМЕСТИТЬ ВТДублиСвернутые
	|ИЗ
	|	ВТДублиДней КАК ВТДублиДней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанныеДни КАК ВТОтработанныеДни
	|		ПО ВТДублиДней.Сотрудник = ВТОтработанныеДни.Сотрудник
	|			И ВТДублиДней.Дата = ВТОтработанныеДни.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДублиДней.Сотрудник,
	|	ВТДублиДней.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОтработанныеДни.НомерСтроки,
	|	ВТОтработанныеДни.НомерСтроки - 1 КАК ИндексСтроки,
	|	ВТОтработанныеДни.Сотрудник,
	|	ВТОтработанныеДни.Дата,
	|	ВТОтработанныеДни.ОтработаноЧасов,
	|	ВТОтработанныеДни.СпособКомпенсацииПереработки,
	|	ВТОтработанныеДни.ВремяВЧасах,
	|	ВТОтработанныеДни.НеРаботал
	|ИЗ
	|	ВТОтработанныеДни КАК ВТОтработанныеДни
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДублиСвернутые КАК ВТДублиСвернутые
	|		ПО ВТОтработанныеДни.Сотрудник = ВТДублиСвернутые.Сотрудник
	|			И ВТОтработанныеДни.Дата = ВТДублиСвернутые.Дата
	|ГДЕ
	|	ВТОтработанныеДни.НомерСтроки <> ВТДублиСвернутые.ПерваяСтрока
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОтработанныеДни
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДублиДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДублиСвернутые";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Информация о сотруднике %1 по дню %2 уже введена.';
				|en = 'Information on employee %1 for day %2 has already been entered.'"),
			Выборка.Сотрудник,
			Формат(Выборка.Дата,"ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Сотрудники[%1].Дата",
			ТекстСообщения,
			"",
			Выборка.ИндексСтроки);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРабочегоВремениСверхурочныхДокументов(МенеджерВТ, Ошибки)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеОРаботе.ВремяВЧасах
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеОРаботе.ОтработаноЧасов > 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ НЕ ДанныеОРаботе.НеРаботал
	|		КОНЕЦ) КАК Заполнено
	|ПОМЕСТИТЬ ВТНезаполненные
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеОРаботе.ВремяВЧасах
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеОРаботе.ОтработаноЧасов > 0
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ НЕ ДанныеОРаботе.НеРаботал
	|		КОНЕЦ) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	МИНИМУМ(ДанныеОРаботе.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТНезаполненныеПервыеДаты
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненные КАК ВТНезаполненные
	|		ПО ДанныеОРаботе.Сотрудник = ВТНезаполненные.Сотрудник
	|			И ДанныеОРаботе.СпособКомпенсацииПереработки = ВТНезаполненные.СпособКомпенсацииПереработки
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРаботе.НомерСтроки,
	|	ДанныеОРаботе.НомерСтроки - 1 КАК ИндексСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНезаполненныеПервыеДаты КАК ВТНезаполненныеПервыеДаты
	|		ПО ДанныеОРаботе.Сотрудник = ВТНезаполненныеПервыеДаты.Сотрудник
	|			И ДанныеОРаботе.СпособКомпенсацииПереработки = ВТНезаполненныеПервыеДаты.СпособКомпенсацииПереработки
	|			И ДанныеОРаботе.Дата = ВТНезаполненныеПервыеДаты.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНезаполненные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНезаполненныеПервыеДаты";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВремяВЧасах Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для сотрудника %1 не заполнено количество отработанных часов';
					|en = 'Number of hours worked by employee %1 is not filled in '"), Выборка.Сотрудник);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для сотрудника %1 не указаны отработанные дни';
					|en = 'Days worked are not specified for employee %1'"), Выборка.Сотрудник);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Сотрудники[%1].Сотрудник",
			ТекстСообщения,
			"",
			Выборка.ИндексСтроки);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовТЧСверхурочныхДокументов(МенеджерВТ, Ошибки, ПроверяемыеРеквизиты)

	Если ПроверяемыеРеквизиты.Найти("Сотрудники.Сотрудник") <> Неопределено Тогда
		ПроверитьЗаполнениеСотрудниковТЧСверхурочныхДокументов(МенеджерВТ, Ошибки);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.Сотрудник");
	КонецЕсли;
	
	ПроверятьСпособКомпенсацииПереработки = ПолучитьФункциональнуюОпцию("ИспользоватьОтгулы");
	Если ПроверяемыеРеквизиты.Найти("Сотрудники.СпособКомпенсацииПереработки") <> Неопределено И ПроверятьСпособКомпенсацииПереработки Тогда
		ПроверитьЗаполнениеСпособаКомпенсацииПереработкиТЧСверхурочныхДокументов(МенеджерВТ, Ошибки);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Сотрудники.СпособКомпенсацииПереработки");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСотрудниковТЧСверхурочныхДокументов(МенеджерВТ, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустойСотрудник", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.Сотрудники.ПустаяСсылка")); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОРаботе.Сотрудник,
	|	МИНИМУМ(ДанныеОРаботе.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТПустыеСотрудники
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|ГДЕ
	|	ДанныеОРаботе.Сотрудник = &ПустойСотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОРаботе.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРаботе.НомерСтроки,
	|	ДанныеОРаботе.НомерСтроки - 1 КАК ИндексСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПустыеСотрудники КАК ВТПустыеСотрудники
	|		ПО ДанныеОРаботе.Сотрудник = ВТПустыеСотрудники.Сотрудник
	|			И ДанныеОРаботе.Дата = ВТПустыеСотрудники.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПустыеСотрудники";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Сотрудники[%1].Сотрудник",
			НСтр("ru = 'Не заполнен сотрудник';
				|en = 'Employee is not filled'"),
			"",
			Выборка.ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСпособаКомпенсацииПереработкиТЧСверхурочныхДокументов(МенеджерВТ, Ошибки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ПустойСпособКомпенсации", ПредопределенноеЗначение("Перечисление.СпособыКомпенсацииПереработки.ПустаяСсылка")); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	МИНИМУМ(ДанныеОРаботе.Дата) КАК Дата
	|ПОМЕСТИТЬ ВТПустыеСпособы
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|ГДЕ
	|	ДанныеОРаботе.СпособКомпенсацииПереработки = &ПустойСпособКомпенсации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОРаботе.СпособКомпенсацииПереработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОРаботе.НомерСтроки,
	|	ДанныеОРаботе.НомерСтроки - 1 КАК ИндексСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ИЗ
	|	ВТДанныеОСверхурочнойРаботе КАК ДанныеОРаботе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПустыеСпособы КАК ВТПустыеСпособы
	|		ПО ДанныеОРаботе.СпособКомпенсацииПереработки = ВТПустыеСпособы.СпособКомпенсацииПереработки
	|			И ДанныеОРаботе.Дата = ВТПустыеСпособы.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПустыеСпособы";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Сотрудники[%1].СпособКомпенсацииПереработки",
			НСтр("ru = 'Не заполнен способ компенсации';
				|en = 'Compensation method is not filled '"),
			"",
			Выборка.ИндексСтроки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДанныеОСверхурочнойРаботе(МенеджерВТ, ДанныеОРаботе)

	Если ДанныеОРаботе.Колонки.Найти("НеРаботал") = Неопределено Тогда
		ДанныеОРаботе.Колонки.Добавить("НеРаботал", Новый ОписаниеТипов("Булево"));
		ДанныеОРаботе.ЗаполнитьЗначения(Истина, "НеРаботал");
	КонецЕсли;
	
	Если ДанныеОРаботе.Колонки.Найти("ВремяВЧасах") = Неопределено Тогда
		ДанныеОРаботе.Колонки.Добавить("ВремяВЧасах", Новый ОписаниеТипов("Булево"));
		ДанныеОРаботе.ЗаполнитьЗначения(Истина, "ВремяВЧасах");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ДанныеОРаботе", ДанныеОРаботе);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОРаботе.НомерСтроки,
	|	ДанныеОРаботе.Сотрудник,
	|	ДанныеОРаботе.Дата,
	|	ДанныеОРаботе.ОтработаноЧасов,
	|	ДанныеОРаботе.СпособКомпенсацииПереработки,
	|	ДанныеОРаботе.ВремяВЧасах,
	|	ДанныеОРаботе.НеРаботал
	|ПОМЕСТИТЬ ВТДанныеОСверхурочнойРаботе
	|ИЗ
	|	&ДанныеОРаботе КАК ДанныеОРаботе";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура СоздатьВТДопустимыеСочетанияПлановогоИФактическогоВремени(МенеджерВТ)
	ВидВремениЯвка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка");
	ВидВремениВыходной = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни");
	ВидВремениНерабочиеДни = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОплачиваемыеНерабочиеДни");
	ВидВремениНочные = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы");
	ВидВремениВечерние = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы");
	ВидВремениСверхурочные = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные");
	ВидВремениКормление = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.КормлениеРебенка");
	ВидВремениРабочееВремя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	ВидВремениСокращенноеВремяОбучающихся = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеВремяОбучающихся");
	ВидВремениСокращенноеРабочееВремя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя");
	ВидВремениРаботаВРежимеНеполногоВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РаботаВРежимеНеполногоВремени");
	ВидВремениВахта = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Вахта");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|ГДЕ
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаСоответствия = Новый ТаблицаЗначений;
	ТаблицаСоответствия.Колонки.Добавить("ВидВремениПлановый", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	ТаблицаСоответствия.Колонки.Добавить("ВидВремениФактический", Новый ОписаниеТипов("СправочникСсылка.ВидыИспользованияРабочегоВремени"));
	
	Пока Выборка.Следующий() Цикл
		// Если плановое время и фактическое время совпадают это в любом случае допустимо.
		СтрокаТаблицы = ТаблицаСоответствия.Добавить();
		СтрокаТаблицы.ВидВремениПлановый = Выборка.ОсновноеВремя;
		СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
	
		Если Выборка.ОсновноеВремя <> ВидВремениВыходной Тогда
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениЯвка;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениНочные;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениВечерние;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениКормление;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениСокращенноеВремяОбучающихся;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениСокращенноеРабочееВремя;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениРаботаВРежимеНеполногоВремени;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениВахта;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
		КонецЕсли;	
			
		Если Выборка.ОсновноеВремя <> ВидВремениЯвка 
			И Выборка.ОсновноеВремя <> ВидВремениСверхурочные 
			И Выборка.ОсновноеВремя <> ВидВремениНочные
			И Выборка.ОсновноеВремя <> ВидВремениВечерние
			И Выборка.ОсновноеВремя <> ВидВремениВечерние 
			И Выборка.ОсновноеВремя <> ВидВремениРабочееВремя Тогда 
			
			СтрокаТаблицы = ТаблицаСоответствия.Добавить();
			СтрокаТаблицы.ВидВремениПлановый = ВидВремениВыходной;
			СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;
			
			Если ВыделятьНерабочиеДниОтдельнымВидомВремени() Тогда
				СтрокаТаблицы = ТаблицаСоответствия.Добавить();
				СтрокаТаблицы.ВидВремениПлановый = ВидВремениНерабочиеДни;
				СтрокаТаблицы.ВидВремениФактический = Выборка.ОсновноеВремя;	
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	СтрокаТаблицы = ТаблицаСоответствия.Добавить();
	СтрокаТаблицы.ВидВремениПлановый = ВидВремениЯвка;
	СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
	
	СтрокаТаблицы = ТаблицаСоответствия.Добавить();
	СтрокаТаблицы.ВидВремениПлановый = ВидВремениНочные;
	СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
	
	СтрокаТаблицы = ТаблицаСоответствия.Добавить();
	СтрокаТаблицы.ВидВремениПлановый = ВидВремениВечерние;
	СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
	
	СтрокаТаблицы = ТаблицаСоответствия.Добавить();
	СтрокаТаблицы.ВидВремениПлановый = ВидВремениКормление;
	СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
	
	СтрокаТаблицы = ТаблицаСоответствия.Добавить();
	СтрокаТаблицы.ВидВремениПлановый = ВидВремениВыходной;
	СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();
	
	Если ВыделятьНерабочиеДниОтдельнымВидомВремени() Тогда
		СтрокаТаблицы = ТаблицаСоответствия.Добавить();
		СтрокаТаблицы.ВидВремениПлановый = ВидВремениНерабочиеДни;
		СтрокаТаблицы.ВидВремениФактический = Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка();	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СоответствиеПлановогоВремениФактическому", ТаблицаСоответствия);
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	СоответствиеПлановогоВремениФактическому.ВидВремениПлановый,
	|	СоответствиеПлановогоВремениФактическому.ВидВремениФактический
	|ПОМЕСТИТЬ ВТДопустимыеСочетанияПлановогоИФактическогоВремени
	|ИЗ
	|	&СоответствиеПлановогоВремениФактическому КАК СоответствиеПлановогоВремениФактическому";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ВыборкаДанныхДляДляПроверкиНормыВремени(МенеджерВременныхТаблиц, ПараметрыПроверки)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормаВремени.ПоляНормыВремени,
	|	НормаВремени.ПоляИсточниковДанных,
	|	НормаВремени.Месяц КАК Месяц
	|ИЗ
	|	&НормаВремени КАК НормаВремени
	|ГДЕ
	|	&УсловияНезаполненностиНормы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц";
	
	
	РазделительПолейЗапроса = 
	",
	|	";
	
	РазделительУсловийЗапроса = 
	"
	|	ИЛИ ";	
	
	ТекстПолейНормыВремени = "";
	ТекстПолейИсточниковДанныхНормы = "";
	ТексУсловийНезаполненностиНормы = "";
	Для Каждого ОписаниеПоляНормы Из ПараметрыПроверки.ОписаниеПолейНормыВремени Цикл
		ТекстПолейНормыВремени = ТекстПолейНормыВремени + ?(ТекстПолейНормыВремени = "", "", РазделительПолейЗапроса) + "НормаВремени." +  ОписаниеПоляНормы.ИмяПоляНорма;
		
		ТекстПолейИсточниковДанныхНормы = ТекстПолейИсточниковДанныхНормы + ?(ТекстПолейИсточниковДанныхНормы = "", "", РазделительПолейЗапроса) + "НормаВремени." +  ОписаниеПоляНормы.ИмяПоляИсточникаДанныхНормы;
		
		ТексУсловийНезаполненностиНормы = ТексУсловийНезаполненностиНормы + ?(ТексУсловийНезаполненностиНормы = "", "", РазделительУсловийЗапроса) + "НормаВремени." +  ОписаниеПоляНормы.ИмяПоляНорма + " ЕСТЬ NULL";
	КонецЦикла;	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НормаВремени", ПараметрыПроверки.ИмяВТНормаВремени);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НормаВремени.Месяц", "НормаВремени." + ПараметрыПроверки.ИмяПоляПериод);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НормаВремени.ПоляНормыВремени", ТекстПолейНормыВремени);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НормаВремени.ПоляИсточниковДанных", ТекстПолейИсточниковДанныхНормы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияНезаполненностиНормы", ТексУсловийНезаполненностиНормы);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

#КонецОбласти

#Область ПолучениеДанныхОВидахИспользованияРабочегоВремени

Функция СформироватьЗапросПоВидамВремени() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыИспользованияРабочегоВремени.Ссылка КАК ВидВремени,
	|	ВидыИспользованияРабочегоВремени.БуквенныйКод КАК БуквенныйКод,
	|	ВидыИспользованияРабочегоВремени.БуквенныйКодБюджетный КАК БуквенныйКодБюджетный,
	|	ВидыИспользованияРабочегоВремени.БуквенныйКодБюджетный2009 КАК БуквенныйКодБюджетный2009,
	|	ВидыИспользованияРабочегоВремени.Целосменное КАК Целосменное,
	|	ВЫБОР
	|		КОГДА ВидыИспользованияРабочегоВремени.Ссылка В (&ВидыВремениСплошнойРегистрации)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВидВремениСплошнойРегистрации,
	|	ВидыИспользованияРабочегоВремени.Наименование КАК Наименование,
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя КАК ОсновноеВремя
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени";
	
	Запрос.УстановитьПараметр("ВидыВремениСплошнойРегистрации", ВидыВремениСплошнойРегистрации());
	
	Возврат Запрос.Выполнить();
КонецФункции

Функция КодыВидовВремени(Месяц = Неопределено) Экспорт  
	Выборка = СформироватьЗапросПоВидамВремени().Выбрать();
	
	КодыВидовВремени = Новый Соответствие;
	
	БуквенныйКодИмяРеквизита = БуквенныйКодИмяРеквизита(Месяц);
	
	Пока Выборка.Следующий() Цикл 
		КодыВидовВремени.Вставить(Выборка.ВидВремени, Выборка[БуквенныйКодИмяРеквизита]);
	КонецЦикла;	
	
	КодыВидовВремени.Вставить(Справочники.ВидыИспользованияРабочегоВремени.ПустаяСсылка(), "");
	
	Возврат КодыВидовВремени;
КонецФункции

Функция ОписаниеПлановыхВидовВремениСотрудников(Сотрудники, ПериодРегистрации, Дата) Экспорт
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	
	Для Каждого ДобавляемыйСотрудник Из Сотрудники Цикл
		СтрокаТаблицы = ТаблицаСотрудников.Добавить();
		СтрокаТаблицы.Сотрудник = ДобавляемыйСотрудник;
		СтрокаТаблицы.ПериодРегистрации = ПериодРегистрации;
		СтрокаТаблицы.Месяц = НачалоМесяца(Дата);
		СтрокаТаблицы.ДатаНачала = Дата;
		СтрокаТаблицы.ДатаОкончания = Дата;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.Месяц,
	|	ТаблицаСотрудников.ДатаНачала,
	|	ТаблицаСотрудников.ДатаОкончания,
	|	ТаблицаСотрудников.ПериодРегистрации КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТПлановоеВремяСотрудников();
	
	СоздатьВТПлановоеВремя(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);
	
	Запрос.УстановитьПараметр("ВидВремениЯвка", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлановоеВремя.ВидУчетаВремени КАК ВидВремени,
	|	ПлановоеВремя.Смена КАК Смена,
	|	ПлановоеВремя.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ПлановоеВремя.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ВидыИспользованияРабочегоВремени.Наименование,
	|	ВидыИспользованияРабочегоВремени.Целосменное,
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя,
	|	ВидыИспользованияРабочегоВремени.БуквенныйКод,
	|	ВидыИспользованияРабочегоВремени.ЦифровойКод,
	|	ВЫБОР
	|		КОГДА ВидыИспользованияРабочегоВремени.ОсновноеВремя = &ВидВремениЯвка
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ВТПлановоеВремя КАК ПлановоеВремя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|		ПО ПлановоеВремя.ВидУчетаВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|ГДЕ
	|	ПлановоеВремя.ЧасыПлан > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	ДанныеОВидахПлановогоВремени = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаВремени = СтруктураОписанияПлановогоВидаВремени();
		ЗаполнитьЗначенияСвойств(ОписаниеВидаВремени, Выборка);
		
		ДанныеОВидахПлановогоВремени.Добавить(ОписаниеВидаВремени);
	КонецЦикла;	

	Возврат ДанныеОВидахПлановогоВремени;
КонецФункции	

Функция СтруктураОписанияПлановогоВидаВремени() Экспорт
	ОписаниеВидаВремени = Новый Структура("ВидВремени, Наименование, Целосменное, ОсновноеВремя, БуквенныйКод, ЦифровойКод, Смена, ПереходящаяЧастьПредыдущейСмены, ПереходящаяЧастьТекущейСмены");
	ОписаниеВидаВремени.Целосменное = Ложь;
	ОписаниеВидаВремени.ПереходящаяЧастьПредыдущейСмены = Ложь;
	ОписаниеВидаВремени.ПереходящаяЧастьТекущейСмены = Ложь;
	
	Возврат ОписаниеВидаВремени;	
КонецФункции	

Функция ОписаниеВидовВремени(МассивВидовВремени) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивВидовВремени", МассивВидовВремени);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыИспользованияРабочегоВремени.Ссылка КАК ВидВремени,
	|	ВидыИспользованияРабочегоВремени.Наименование,
	|	ВидыИспользованияРабочегоВремени.БуквенныйКод,
	|	ВидыИспользованияРабочегоВремени.ОсновноеВремя
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|ГДЕ
	|	ВидыИспользованияРабочегоВремени.Ссылка В(&МассивВидовВремени)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеВидовВремени = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаВремени = Новый Структура("Наименование, БуквенныйКод, ВидВремени, ОсновноеВремя");
		ЗаполнитьЗначенияСвойств(ОписаниеВидаВремени, Выборка);
		ОписаниеВидовВремени.Вставить(Выборка.ВидВремени, ОписаниеВидаВремени);
	КонецЦикла;	

	Возврат ОписаниеВидовВремени;
	
КонецФункции	

Функция БуквенныйКодИмяРеквизита(Месяц) Экспорт 
	
	Возврат ?(ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"), БуквенныйКодБюджетныйИмяРеквизита(Месяц), "БуквенныйКод");
	
КонецФункции

Функция БуквенныйКодБюджетныйИмяРеквизита(Месяц) Экспорт 
	
	Возврат ?(Не ЗначениеЗаполнено(Месяц) Или Месяц >= '20100101', "БуквенныйКодБюджетный", "БуквенныйКодБюджетный2009");
	
КонецФункции	

// Составляет коллекцию видов использования рабочего времени, 
// применяемых для обозначения неоплачиваемых отсутствий.
//
// Возвращаемое значение - массив видов использования рабочего времени.
//
Функция НеоплачиваемыеВидыОтсутствий() Экспорт
	
	ИменаПредопределенныхЭлементов = Новый Массив;
	ИменаПредопределенныхЭлементов.Добавить("Прогулы"); 
	ИменаПредопределенныхЭлементов.Добавить("ДополнительныеВыходныеДниНеОплачиваемые"); 
	ИменаПредопределенныхЭлементов.Добавить("НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	ИменаПредопределенныхЭлементов.Добавить("НеоплачиваемыйОтпускПоЗаконодательству");
	ИменаПредопределенныхЭлементов.Добавить("НеоплачиваемыйДополнительныйОтпуск");
	ИменаПредопределенныхЭлементов.Добавить("ОтпускНаОбучениеНеоплачиваемый");
	ИменаПредопределенныхЭлементов.Добавить("ОтстранениеОтРаботыБезОплаты");
	
	ВидыОтсутствий = Новый Массив;
	Для Каждого ИмяПредопределенныхДанных Из ИменаПредопределенныхЭлементов Цикл
		ВидОтсутствия = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + ИмяПредопределенныхДанных);
		Если ЗначениеЗаполнено(ВидОтсутствия) Тогда
			ВидыОтсутствий.Добавить(ВидОтсутствия);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыОтсутствий;
	
КонецФункции

#КонецОбласти

// Получает значение свойства объекта, проверяя его наличие.
// Параметры:
//		Объект - агрегатный объект.
//		Свойство - имя свойства объекта, значение которого нужно получить.
//		ЗначениеПоУмолчанию - значение по умолчанию, возвращаемое, если 
//			объект не содержит заданного свойства (не обязательный).
//
Функция ПолучитьЗначениеСвойства(Объект, Свойство, ЗначениеПоУмолчанию = НеОпределено)
	Если ТипЗнч(Объект) = Тип("СтрокаТаблицыЗначений") Тогда
		Колонки = Объект.Владелец().Колонки;
		Колонка = Колонки.Найти(Свойство);
		Если Колонка = НеОпределено Тогда
			Возврат ЗначениеПоУмолчанию;
		Иначе
			Возврат Объект[Колонки.Индекс(Колонка)];
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ЗапросПоПредставлению(ТолькоРазрешенные, ИмяПредставления, МассивИменВТИсточниковПараметров, ПараметрыЗапроса, ИмяИсточникаДанных) Экспорт
	Если ВРег(ИмяПредставления) = "ДАННЫЕУЧЕТАРАБОЧЕГОВРЕМЕНИСОТРУДНИКОВ" Тогда
		ПараметрыПолученияДанных = ПараметрыПолученияДанныхУчетаВремени();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, ПараметрыЗапроса);
		
		ПараметрыПолученияДанных.ИмяВТРезультат = ИмяИсточникаДанных;

		ПараметрыПолученияДанных.ИмяВТСотрудники = МассивИменВТИсточниковПараметров[0];
		
		Возврат ЗапросВТДанныеУчетаРабочегоВремениСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных);
	ИначеЕсли ВРег(ИмяПредставления) = "ДАННЫЕУЧЕТАВРЕМЕНИИСОСТОЯНИЙСОТРУДНИКОВ" Тогда
		ПараметрыПолученияДанных = ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, ПараметрыЗапроса);
		
		ПараметрыПолученияДанных.ИмяВТРезультат = ИмяИсточникаДанных;

		ПараметрыПолученияДанных.ИмяВТСотрудники = МассивИменВТИсточниковПараметров[0];
		
		Возврат ЗапросВТДанныеУчетаВремениИСостоянийСотрудников(ТолькоРазрешенные, ПараметрыПолученияДанных, Истина);
	ИначеЕсли ВРег(ИмяПредставления) = ВРег("ПлановоеВремя") Тогда
		ПараметрыПолученияДанных = ПараметрыДляЗапросВТПлановоеВремяПолный();
		ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных, ПараметрыЗапроса);
		
		ПараметрыПолученияДанных.ИмяВТРезультат = ИмяИсточникаДанных;
		
		Возврат ЗапросВТПлановоеВремяПолный(ТолькоРазрешенные, ПараметрыПолученияДанных, Истина);
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	

Функция ВидыВремениСплошнойРегистрации() Экспорт
	ВидыВремени = Новый Массив;
	
	Болезнь = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Если ЗначениеЗаполнено(Болезнь) Тогда
		ВидыВремени.Добавить(Болезнь);
	КонецЕсли;	
	
	БолезньБезОплаты = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	Если ЗначениеЗаполнено(БолезньБезОплаты) Тогда
		ВидыВремени.Добавить(БолезньБезОплаты);
	КонецЕсли;	
	
	ОтпускПоБеременностиИРодам = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Если ЗначениеЗаполнено(ОтпускПоБеременностиИРодам) Тогда
		ВидыВремени.Добавить(ОтпускПоБеременностиИРодам);
	КонецЕсли;	
	
	ОтпускПоУходуЗаРебенком = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Если ЗначениеЗаполнено(ОтпускПоУходуЗаРебенком) Тогда
		ВидыВремени.Добавить(ОтпускПоУходуЗаРебенком);
	КонецЕсли;	
	
	НеоплачиваемыйДополнительныйОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск");
	Если ЗначениеЗаполнено(НеоплачиваемыйДополнительныйОтпуск) Тогда
		ВидыВремени.Добавить(НеоплачиваемыйДополнительныйОтпуск);
	КонецЕсли;	
	
	НеоплачиваемыйОтпускПоЗаконодательству = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Если ЗначениеЗаполнено(НеоплачиваемыйОтпускПоЗаконодательству) Тогда
		ВидыВремени.Добавить(НеоплачиваемыйОтпускПоЗаконодательству);
	КонецЕсли;	

	НеоплачиваемыйОтпускПоРазрешениюРаботодателя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Если ЗначениеЗаполнено(НеоплачиваемыйОтпускПоРазрешениюРаботодателя) Тогда
		ВидыВремени.Добавить(НеоплачиваемыйОтпускПоРазрешениюРаботодателя);
	КонецЕсли;	
	
	ОсновнойОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	Если ЗначениеЗаполнено(ОсновнойОтпуск) Тогда
		ВидыВремени.Добавить(ОсновнойОтпуск);
	КонецЕсли;	

	ДополнительныйОтпуск = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Если ЗначениеЗаполнено(ДополнительныйОтпуск) Тогда
		ВидыВремени.Добавить(ДополнительныйОтпуск);
	КонецЕсли;	
	
	ОтпускНаОбучение = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	Если ЗначениеЗаполнено(ОтпускНаОбучение) Тогда
		ВидыВремени.Добавить(ОтпускНаОбучение);
	КонецЕсли;	
	
	ОтпускНаОбучениеНеоплачиваемый = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Если ЗначениеЗаполнено(ОтпускНаОбучениеНеоплачиваемый) Тогда
		ВидыВремени.Добавить(ОтпускНаОбучениеНеоплачиваемый);
	КонецЕсли;	
	
	ОтпускНаОбучениеНеоплачиваемый = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Если ЗначениеЗаполнено(ОтпускНаОбучениеНеоплачиваемый) Тогда
		ВидыВремени.Добавить(ОтпускНаОбучениеНеоплачиваемый);
	КонецЕсли;
	
	ПриостановлениеТрудовогоДоговора = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПриостановлениеТрудовогоДоговора");
	Если ЗначениеЗаполнено(ПриостановлениеТрудовогоДоговора) Тогда
		ВидыВремени.Добавить(ПриостановлениеТрудовогоДоговора);
	КонецЕсли;
	
	Возврат ВидыВремени;
КонецФункции

Функция ВидыВремениОтсутствий() Экспорт 
	ВидыВремениОтсутствий = Новый Массив;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Болезнь");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;	
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.БолезньБезОплаты");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;	
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ВынужденныйПрогул");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;	
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ГосударственныеОбязанности");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниНеОплачиваемые");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ДополнительныйОтпуск");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Забастовка");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Командировка");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОсновнойОтпуск");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучение");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПовышениеКвалификации");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Прогулы");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Простой");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботодателя");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПростойПоВинеРаботодателя");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПриостановлениеТрудовогоДоговора");
	Если ЗначениеЗаполнено(ВидВремени) Тогда
		ВидыВремениОтсутствий.Добавить(ВидВремени);
	КонецЕсли;
		
	Возврат ВидыВремениОтсутствий;
КонецФункции

Процедура СоздатьВТСотрудники(МенеджерВременныхТаблиц, ТаблицаСотрудников)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник,
		|	ТаблицаСотрудников.Месяц,
		|	ТаблицаСотрудников.ДатаАктуальности,
		|	ТаблицаСотрудников.ДатаНачала,
		|	ТаблицаСотрудников.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ОбновитьСреднемесячныеНормыПоРежимуРаботы(РежимРаботы, Год = Неопределено, ИгнорироватьРучныеИзменения = Ложь) Экспорт	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Справочники.РежимыРаботыСотрудников.СоздатьВТСреднемесячныеНормыВремени(Запрос.МенеджерВременныхТаблиц, РежимРаботы, Год);
	
	Запрос.УстановитьПараметр("РежимРаботы", РежимРаботы);
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("ИгнорироватьРучныеИзменения", ИгнорироватьРучныеИзменения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СреднемесячныеНормы.Год КАК Год,
	|	СреднемесячныеНормы.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СреднемесячныеНормы.УстановленыВРучную) = ИСТИНА
	|			ТОГДА МАКСИМУМ(СреднемесячныеНормы.СреднемесячноеЧислоЧасовПоРежимуРаботы)
	|		ИНАЧЕ МАКСИМУМ(СреднемесячныеНормы.СреднемесячноеЧислоЧасовПоГрафикам)
	|	КОНЕЦ КАК СреднемесячноеЧислоЧасов,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СреднемесячныеНормы.УстановленыВРучную) = ИСТИНА
	|			ТОГДА МАКСИМУМ(СреднемесячныеНормы.СреднемесячноеЧислоДнейПоРежимуРаботы)
	|		ИНАЧЕ МАКСИМУМ(СреднемесячныеНормы.СреднемесячноеЧислоДнейПоГрафикам)
	|	КОНЕЦ КАК СреднемесячноеЧислоДней,
	|	МАКСИМУМ(СреднемесячныеНормы.УстановленыВРучную) КАК УстановленыВРучную
	|ИЗ
	|	(ВЫБРАТЬ
	|		СреднемесячныеНормыВремени.Год КАК Год,
	|		СреднемесячныеНормыВремени.РежимРаботы КАК ГрафикРаботыСотрудников,
	|		СреднемесячныеНормыВремени.СреднемесячноеЧислоЧасов КАК СреднемесячноеЧислоЧасовПоГрафикам,
	|		СреднемесячныеНормыВремени.СреднемесячноеЧислоДней КАК СреднемесячноеЧислоДнейПоГрафикам,
	|		ЛОЖЬ КАК УстановленыВРучную,
	|		0 КАК СреднемесячноеЧислоЧасовПоРежимуРаботы,
	|		0 КАК СреднемесячноеЧислоДнейПоРежимуРаботы
	|	ИЗ
	|		ВТСреднемесячныеНормыВремени КАК СреднемесячныеНормыВремени
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год,
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников,
	|		0,
	|		0,
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.УстановленыВРучную,
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоЧасов,
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СреднемесячноеЧислоДней
	|	ИЗ
	|		РегистрСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников КАК СреднемесячныеНормыВремениГрафиковРаботыСотрудников
	|	ГДЕ
	|		СреднемесячныеНормыВремениГрафиковРаботыСотрудников.ГрафикРаботыСотрудников = &РежимРаботы
	|		И &УсловиеГод
	|		И НЕ &ИгнорироватьРучныеИзменения) КАК СреднемесячныеНормы
	|
	|СГРУППИРОВАТЬ ПО
	|	СреднемесячныеНормы.ГрафикРаботыСотрудников,
	|	СреднемесячныеНормы.Год";
	
	Если Год = Неопределено Тогда
		ТекстУсловияГод = "ИСТИНА";
	Иначе
		ТекстУсловияГод = "СреднемесячныеНормыВремениГрафиковРаботыСотрудников.Год = &Год";
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГод", ТекстУсловияГод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.СреднемесячныеНормыВремениГрафиковРаботыСотрудников.СоздатьНаборЗаписей();
		Набор.Отбор.ГрафикРаботыСотрудников.Установить(Выборка.ГрафикРаботыСотрудников);
		Набор.Отбор.Год.Установить(Выборка.Год);
		
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
		Набор.Записать();	
	КонецЦикла;		
КонецПроцедуры	

Процедура ЗаполнитьГрафикиСотрудниковПоПроизводственномуКалендарю(УсловияОбновления) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Условия.КодПроизводственногоКалендаря КАК КодПроизводственногоКалендаря,
		|	Условия.Год КАК Год,
		|	ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, Условия.Год - 1) КАК НачалоГода,
		|	КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(ДАТАВРЕМЯ(1, 1, 1), ГОД, Условия.Год - 1), ГОД) КАК КонецГода
		|ПОМЕСТИТЬ ВТУсловияОбновления
		|ИЗ
		|	&УсловияОбновления КАК Условия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка,
		|	ГрафикиРаботыСотрудников.СпособЗаполнения КАК СпособЗаполнения,
		|	ГрафикиРаботыСотрудников.ДатаОтсчета КАК ДатаОтсчета,
		|	ГрафикиРаботыСотрудников.УчитыватьПраздники КАК УчитыватьПраздники,
		|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	УсловияОбновления.Год КАК Год
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияОбновления КАК УсловияОбновления
		|		ПО (УсловияОбновления.КодПроизводственногоКалендаря = ГрафикиРаботыСотрудников.ПроизводственныйКалендарь.Код)
		|ГДЕ
		|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвтоматическиОбновляемыеГрафикиРаботыСотрудников КАК АвтоматическиОбновляемыеГрафикиРаботыСотрудников
		|						ПО
		|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы = АвтоматическиОбновляемыеГрафикиРаботыСотрудников.ГрафикРаботы
		|								И АвтоматическиОбновляемыеГрафикиРаботыСотрудников.Год = УсловияОбновления.Год
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|					И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ УсловияОбновления.НачалоГода И УсловияОбновления.КонецГода
		|					И АвтоматическиОбновляемыеГрафикиРаботыСотрудников.ГрафикРаботы ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";
	
	Запрос.УстановитьПараметр("УсловияОбновления", УсловияОбновления);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаГрафиков = Результат.Выбрать();
		
	Пока ВыборкаГрафиков.СледующийПоЗначениюПоля("Год") Цикл
		Пока ВыборкаГрафиков.Следующий() Цикл
			ГрафикОбъект = ВыборкаГрафиков.Ссылка.ПолучитьОбъект();
			ДанныеГрафика = ГрафикОбъект.НовыйДанныеГрафика();
			ГрафикОбъект.ЗаполнитьДанныеГрафика(ДанныеГрафика, ВыборкаГрафиков.Год);
			ЗаписатьДанныеГрафика(ВыборкаГрафиков.Ссылка, ДанныеГрафика, ВыборкаГрафиков.Год,,,Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьГрафикиСотрудниковЗаГод(ДатаОбновления, ПроизводственныйКалендарь = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка,
		|	ГрафикиРаботыСотрудников.СпособЗаполнения КАК СпособЗаполнения,
		|	ГрафикиРаботыСотрудников.ДатаОтсчета КАК ДатаОтсчета,
		|	ГрафикиРаботыСотрудников.УчитыватьПраздники КАК УчитыватьПраздники,
		|	ГрафикиРаботыСотрудников.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|ГДЕ
		|	НЕ ГрафикиРаботыСотрудников.ПометкаУдаления
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АвтоматическиОбновляемыеГрафикиРаботыСотрудников КАК АвтоматическиОбновляемыеГрафикиРаботыСотрудников
		|						ПО
		|							ГрафикиРаботыПоВидамВремени.ГрафикРаботы = АвтоматическиОбновляемыеГрафикиРаботыСотрудников.ГрафикРаботы
		|								И АвтоматическиОбновляемыеГрафикиРаботыСотрудников.Год = &Год
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|					И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоГода И &КонецГода
		|					И АвтоматическиОбновляемыеГрафикиРаботыСотрудников.ГрафикРаботы ЕСТЬ NULL)
		|	И &УсловиеПоПроизводственномуКалендарю";
	
	Запрос.УстановитьПараметр("Год", Год(ДатаОбновления));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ДатаОбновления));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ДатаОбновления));
	Если ПроизводственныйКалендарь = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПроизводственномуКалендарю", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПроизводственномуКалендарю", "ГрафикиРаботыСотрудников.ПроизводственныйКалендарь = &ПроизводственныйКалендарь");
		Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаГрафиков = Результат.Выбрать();
		
	Пока ВыборкаГрафиков.Следующий() Цикл
		Попытка
			ГрафикОбъект = ВыборкаГрафиков.Ссылка.ПолучитьОбъект();
			ДанныеГрафика = ГрафикОбъект.НовыйДанныеГрафика();
			ГрафикОбъект.ЗаполнитьДанныеГрафика(ДанныеГрафика, Год(ДатаОбновления));
			ЗаписатьДанныеГрафика(ВыборкаГрафиков.Ссылка, ДанныеГрафика, Год(ДатаОбновления),,,Истина);
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При обновлении графика «%1» возникла ошибка: %2
					  |Возможно, неправильная настройка графика';
					  |en = 'Error occurred when updating schedule ""%1"": %2
					  |Schedule may be configured incorrectly'"),
				ВыборкаГрафиков.Ссылка, 
				ИнформацияОбОшибке().Описание);
				
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				ВыборкаГрафиков.Ссылка.Метаданные(),
				ВыборкаГрафиков.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#Область ПостроениеЗапросовКДаннымУчетаВремени

Функция ПараметрыПостроенияЗапросаКДаннымУчетаВремени() Экспорт 
	ПараметрыПостроения = Новый Структура;
	
	ПараметрыПостроения.Вставить("ИмяВТИсточникДанных", "ВТСотрудники");
	ПараметрыПостроения.Вставить("ИмяВТРезультат", "ВТДанныеУчетаРабочегоВремениСотрудников");
	ПараметрыПостроения.Вставить("Индексировать", Ложь);
	ПараметрыПостроения.Вставить("ДляСКД", Ложь);

	
	Возврат ПараметрыПостроения;
КонецФункции	

Функция ПараметрыПолученияДанныхУчетаВремени() Экспорт
	ПараметрыПолученияДанных = Новый Структура;
	
	ПараметрыПолученияДанных.Вставить("ДатаНачала", '00010101');
	ПараметрыПолученияДанных.Вставить("ДатаОкончания", '00010101');
	ПараметрыПолученияДанных.Вставить("УчитыватьТолькоИндивидуальныеСведения", Ложь);
	ПараметрыПолученияДанных.Вставить("ПолучатьДанныеФакт", Истина);	
	ПараметрыПолученияДанных.Вставить("ПолучатьДанныеПлан", Ложь);
	ПараметрыПолученияДанных.Вставить("ПолучатьДанныеНорма", Истина);
	ПараметрыПолученияДанных.Вставить("ИспользоватьУжеРассчитанныеДанные", Истина);
	ПараметрыПолученияДанных.Вставить("ФормироватьПриНаличииРассчитанныхДанных", Истина);
	ПараметрыПолученияДанных.Вставить("НеучитываемыеРегистраторы", Новый Массив);
	ПараметрыПолученияДанных.Вставить("ПолучатьУсловияТрудаИТерритории", Ложь);
	ПараметрыПолученияДанных.Вставить("УчитыватьТабельныеДанныеОТерриториях", Истина);
	ПараметрыПолученияДанных.Вставить("ПолучатьНормуВремениЗаПолныйМесяц", Ложь);
	ПараметрыПолученияДанных.Вставить("ИспользуемыеВидыДанных", Новый Массив);	
	ПараметрыПолученияДанных.Вставить("ИмяВТСотрудники", "ВТСотрудники");
	ПараметрыПолученияДанных.Вставить("ИмяВТРезультат", "ВТДанныеУчетаРабочегоВремениСотрудников");
	ПараметрыПолученияДанных.Вставить("Индексировать", Ложь);
	ПараметрыПолученияДанных.Вставить("ОтноситьПереходящуюЧастьСменыКДнюНачала", Ложь);
		
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыДанныхУчетаВремениСотрудников Цикл
		ПараметрыПолученияДанных.ИспользуемыеВидыДанных.Добавить(ЗначениеПеречисления);
	КонецЦикла;		
	Возврат ПараметрыПолученияДанных;
		
КонецФункции	

Функция ПараметрыПолученияПлановыхДанныхУчетаВремени() Экспорт
	ПараметрыПолученияДанных = ПараметрыПолученияДанныхУчетаВремени();
	
	ПараметрыПолученияДанных.УчитыватьТолькоИндивидуальныеСведения = Ложь;
	ПараметрыПолученияДанных.ПолучатьДанныеФакт = Ложь;	
	ПараметрыПолученияДанных.ПолучатьДанныеПлан = Истина;
	ПараметрыПолученияДанных.ПолучатьДанныеНорма = Ложь;
	ПараметрыПолученияДанных.ИспользоватьУжеРассчитанныеДанные = Ложь;
	ПараметрыПолученияДанных.ФормироватьПриНаличииРассчитанныхДанных = Истина;
	ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории = Ложь;
	ПараметрыПолученияДанных.ПолучатьНормуВремениЗаПолныйМесяц = Ложь;
	
	ПараметрыПолученияДанных.ИспользуемыеВидыДанных.Очистить();
	ПараметрыПолученияДанных.ИспользуемыеВидыДанных.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков);  
	ПараметрыПолученияДанных.ИспользуемыеВидыДанных.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков);
	
	Возврат ПараметрыПолученияДанных;
		
КонецФункции	

Функция СоздатьЗапросПолученияДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса) Экспорт 
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТПараметрыРасчетаВремениСотрудников = ЗапросВТПараметрыЗарегистрированныхДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПараметрыРасчетаВремениСотрудников);	
	
	Если ПараметрыПостроенияЗапроса.ДляСКД Тогда
		ЗапросВТИсточникиПолученияДанныхУчетаВремени = ЗапросВТИсточникиПолученияДанныхУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТИсточникиПолученияДанныхУчетаВремени);
		
		ПараметрыПостроенияЗапросаКДаннымРегистров = ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени();
		ЗапросВТДанныеРегистровУчетаВремени = ЗапросВТДанныеРегистровУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрыПостроенияЗапросаКДаннымРегистров);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремени);

	Иначе	
		ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени = ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени(ПараметрыФормированияДанных);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени);
		
		ЗапросВТИсточникиПолученияДанныхУчетаВремени = ЗапросВТИсточникиПолученияДанныхУчетаВремени(ПараметрыФормированияДанных);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТИсточникиПолученияДанныхУчетаВремени);
		
		ПараметрыПостроенияЗапросаКДаннымРегистров = ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени();
		ЗапросВТДанныеРегистровУчетаВремени = ЗапросВТДанныеРегистровУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапросаКДаннымРегистров);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремени);

	КонецЕсли;
	
	Если ТребуетсяПолучениеТерриторий(ПараметрыФормированияДанных) Тогда	
		ДополнитьЗапросРегистровУчетаВремениТерриториями(ЗапросРезультат, ПараметрыПостроенияЗапросаКДаннымРегистров);	
	КонецЕсли;
		
	ЗапросВТРассчитанныеДанныеУчетаВремени = ЗапросВТРассчитанныеДанныеУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТРассчитанныеДанныеУчетаВремени);

	Возврат ЗапросРезультат;	
КонецФункции	

Функция СоздатьЗапросПолученияПлановыхДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса) Экспорт
	
	ЗапросРезультат = Новый Запрос;
	УдаляемыеВТ = Новый Массив;
	
	ЗапросВТПараметрыЗарегистрированныхПлановыхДанныхУчетаВремени = ЗапросВТПараметрыЗарегистрированныхПлановыхДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса);
	УдаляемыеВТ.Добавить("ВТПараметрыПолученияДанныхПоСотрудникам");
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПараметрыЗарегистрированныхПлановыхДанныхУчетаВремени);
	
	Если ПараметрыПостроенияЗапроса.ДляСКД Тогда
		ЗапросВТИсточникиПолученияДанныхУчетаВремени = ЗапросВТИсточникиПолученияДанныхУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса);
		УдаляемыеВТ.Добавить("ВТИсточникиПолученияДанныхУчетаВремени");
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТИсточникиПолученияДанныхУчетаВремени);
		
		ПараметрыПостроенияЗапросаКДаннымРегистров = ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени();
		ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат = ПараметрыПостроенияЗапроса.ИмяВТРезультат;
		ЗапросВТДанныеРегистровУчетаВремени = ЗапросВТДанныеРегистровУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрыПостроенияЗапросаКДаннымРегистров);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремени);
	Иначе
		ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени = ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени(ПараметрыФормированияДанных);
		УдаляемыеВТ.Добавить("ВТЗарегистрированныеВидыДанныхУчетаВремени");
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени);
		
		ЗапросВТИсточникиПолученияДанныхУчетаВремени = ЗапросВТИсточникиПолученияДанныхУчетаВремени(ПараметрыФормированияДанных);
		УдаляемыеВТ.Добавить("ВТИсточникиПолученияДанныхУчетаВремени");
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТИсточникиПолученияДанныхУчетаВремени);
		
		ПараметрыПостроенияЗапросаКДаннымРегистров = ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени();
		ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат = ПараметрыПостроенияЗапроса.ИмяВТРезультат;
		ЗапросВТДанныеРегистровУчетаВремени = ЗапросВТДанныеРегистровУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапросаКДаннымРегистров);
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремени);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(ЗапросРезультат.Текст, УдаляемыеВТ);
	
	Возврат ЗапросРезультат;
	
КонецФункции	

Функция ЗапросВТРассчитанныеДанныеУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроенияЗапроса)
	ЗапросРезультат = Новый Запрос;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеРегистровУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеРегистровУчетаВремени.Месяц КАК Месяц,
	|	ДанныеРегистровУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеРегистровУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеРегистровУчетаВремени.Дата КАК Дата,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	МАКСИМУМ(ДанныеРегистровУчетаВремени.ДниНорма) КАК ДниНорма,
	|	СУММА(ДанныеРегистровУчетаВремени.ЧасыНорма) КАК ЧасыНорма,
	|	МАКСИМУМ(ДанныеРегистровУчетаВремени.ДниПлан) КАК ДниПлан,
	|	СУММА(ДанныеРегистровУчетаВремени.ЧасыПлан) КАК ЧасыПлан
	|ПОМЕСТИТЬ ВТНормаВремени
	|ИЗ
	|	ВТДанныеРегистровУчетаВремени КАК ДанныеРегистровУчетаВремени
	|ГДЕ
	|	ДанныеРегистровУчетаВремени.ВидУчетаВремени.ОсновноеВремя В(&ВидыВремениВключаемыеВНорму)
	|	И &ПолучатьДанныеНорма
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистровУчетаВремени.Сотрудник,
	|	ДанныеРегистровУчетаВремени.Месяц,
	|	ДанныеРегистровУчетаВремени.ДатаАктуальности,
	|	ДанныеРегистровУчетаВремени.ПериодРегистрации,
	|	ДанныеРегистровУчетаВремени.Дата,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьТекущейСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистровУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеРегистровУчетаВремени.Месяц КАК Месяц,
	|	ДанныеРегистровУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеРегистровУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеРегистровУчетаВремени.План КАК План,
	|	ДанныеРегистровУчетаВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ДанныеРегистровУчетаВремени.Дата КАК Дата,
	|	ДанныеРегистровУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеРегистровУчетаВремени.ВидУчетаВремени.ОсновноеВремя КАК ОсновноеВремя,
	|	ДанныеРегистровУчетаВремени.Территория КАК Территория,
	|	ДанныеРегистровУчетаВремени.УсловияТруда КАК УсловияТруда,
	|	ДанныеРегистровУчетаВремени.ЗарегистрированнаяТерритория КАК ЗарегистрированнаяТерритория,
	|	ДанныеРегистровУчетаВремени.Смена КАК Смена,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеРегистровУчетаВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДанныеРегистровУчетаВремени.Дни КАК Дней,
	|	ДанныеРегистровУчетаВремени.Часы КАК Часов,
	|	ДанныеРегистровУчетаВремени.ДниПлан КАК ДнейПлан,
	|	ДанныеРегистровУчетаВремени.ЧасыПлан КАК ЧасовПлан,
	|	0 КАК НормаДней,
	|	0 КАК НормаЧасов
	|ПОМЕСТИТЬ ВТРассчитанныеДанныеУчетаВремени
	|ИЗ
	|	ВТДанныеРегистровУчетаВремени КАК ДанныеРегистровУчетаВремени
	|ГДЕ
	|	(ДанныеРегистровУчетаВремени.Часы <> 0
	|			ИЛИ ДанныеРегистровУчетаВремени.Дни <> 0
	|				И (НЕ ДанныеРегистровУчетаВремени.ВидУчетаВремени.РабочееВремя
	|					ИЛИ ДанныеРегистровУчетаВремени.ВидУчетаВремени В (&ВидыВремениПраздники)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормаВремени.Сотрудник,
	|	НормаВремени.Месяц,
	|	НормаВремени.ДатаАктуальности,
	|	НормаВремени.ПериодРегистрации,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеРегистровУчетаВремени.План, ЛОЖЬ)),
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеРегистровУчетаВремени.ВЦеломЗаПериод, ЛОЖЬ)),
	|	НормаВремени.Дата,
	|	&РабочееВремя,
	|	&РабочееВремя,
	|	ЕСТЬNULL(ДанныеРегистровУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)),
	|	ЕСТЬNULL(ДанныеРегистровУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)),
	|	МАКСИМУМ(ДанныеРегистровУчетаВремени.ЗарегистрированнаяТерритория),
	|	МАКСИМУМ(ДанныеРегистровУчетаВремени.Смена),
	|	НормаВремени.ПереходящаяЧастьПредыдущейСмены,
	|	НормаВремени.ПереходящаяЧастьТекущейСмены,
	|	МАКСИМУМ(ДанныеРегистровУчетаВремени.Дни),
	|	СУММА(ДанныеРегистровУчетаВремени.Часы),
	|	0,
	|	0,
	|	МАКСИМУМ(НормаВремени.ДниНорма),
	|	МАКСИМУМ(НормаВремени.ЧасыНорма)
	|ИЗ
	|	ВТНормаВремени КАК НормаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистровУчетаВремени КАК ДанныеРегистровУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени
	|			ПО ДанныеРегистровУчетаВремени.ВидУчетаВремени = ВидыИспользованияРабочегоВремени.Ссылка
	|				И (ВидыИспользованияРабочегоВремени.ОсновноеВремя В (&ВидыВремениВключаемыеВНорму))
	|		ПО НормаВремени.Сотрудник = ДанныеРегистровУчетаВремени.Сотрудник
	|			И НормаВремени.Месяц = ДанныеРегистровУчетаВремени.Месяц
	|			И НормаВремени.ДатаАктуальности = ДанныеРегистровУчетаВремени.ДатаАктуальности
	|			И НормаВремени.ПериодРегистрации = ДанныеРегистровУчетаВремени.ПериодРегистрации
	|			И НормаВремени.Дата = ДанныеРегистровУчетаВремени.Дата
	|			И НормаВремени.ПереходящаяЧастьПредыдущейСмены = ДанныеРегистровУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|			И НормаВремени.ПереходящаяЧастьТекущейСмены = ДанныеРегистровУчетаВремени.ПереходящаяЧастьТекущейСмены
	|			И (ДанныеРегистровУчетаВремени.Часы <> 0
	|				ИЛИ ДанныеРегистровУчетаВремени.Дни <> 0
	|					И (НЕ ВидыИспользованияРабочегоВремени.РабочееВремя
	|						ИЛИ ДанныеРегистровУчетаВремени.ВидУчетаВремени В (&ВидыВремениПраздники)))
	|
	|СГРУППИРОВАТЬ ПО
	|	НормаВремени.Сотрудник,
	|	НормаВремени.Месяц,
	|	НормаВремени.ДатаАктуальности,
	|	НормаВремени.ПериодРегистрации,
	|	НормаВремени.Дата,
	|	ЕСТЬNULL(ДанныеРегистровУчетаВремени.Территория, ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)),
	|	ЕСТЬNULL(ДанныеРегистровУчетаВремени.УсловияТруда, ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)),
	|	НормаВремени.ПереходящаяЧастьПредыдущейСмены,
	|	НормаВремени.ПереходящаяЧастьТекущейСмены
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(НормаВремени.ДниНорма) <> 0
	|		ИЛИ МАКСИМУМ(НормаВремени.ЧасыНорма) <> 0
	|		ИЛИ МАКСИМУМ(ДанныеРегистровУчетаВремени.Дни) <> 0
	|		ИЛИ СУММА(ДанныеРегистровУчетаВремени.Часы) <> 0)";
	
	Если ПараметрыПостроенияЗапроса.Индексировать Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Месяц,
		|	ПериодРегистрации,
		|	Дата,
		|	ВидУчетаВремени";
	КонецЕсли;	
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросРезультат.Текст, ТекстЗапроса);
		
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ПолучатьДанныеФакт", ПараметрыФормированияДанных.ПолучатьДанныеФакт);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ПолучатьДанныеПлан", ПараметрыФормированияДанных.ПолучатьДанныеПлан);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ПолучатьДанныеНорма", ПараметрыФормированияДанных.ПолучатьДанныеНорма);
	
	ВидыВремениПраздники = Новый Массив;
	ВидыВремениПраздники.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"));
	ВидыВремениПраздники.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты"));
	
	ЗапросРезультат.УстановитьПараметр("ВидыВремениПраздники", ВидыВремениПраздники);
	ЗапросРезультат.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	ЗапросРезультат.УстановитьПараметр("ВидыВремениВключаемыеВНорму", ВидыВремениВключаемыеВНорму());
	
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТРассчитанныеДанныеУчетаВремени", ПараметрыПостроенияЗапроса.ИмяВТРезультат);
	
	Возврат ЗапросРезультат;
КонецФункции	

Процедура ПолученияДанныхУчетаВремениПослеКомпоновкиМакета(НаборДанныхМакета, ПараметрыФормированияДанных) Экспорт 
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(НаборДанныхМакета.Запрос);
	
	Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗапросПакета.ТаблицаДляПомещения = "ВТИсточникиПолученияДанныхУчетаВремени" Тогда
			УстановитьЗапросВТИсточникиПолученияДанныхУчетаВремениВЗапросСКД(СхемаЗапроса, ЗапросПакета, ПараметрыФормированияДанных);	
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗапросПакета.ТаблицаДляПомещения = "ВТДанныеРегистровУчетаВремени" Тогда 		
			УстановитьЗапросВТДанныеРегистровУчетаВремениВЗапросСКД(СхемаЗапроса, ЗапросПакета, ПараметрыФормированияДанных, "ВТДанныеРегистровУчетаВремени");	
			Прервать;
		КонецЕсли;
		
		Если ЗапросПакета.ТаблицаДляПомещения = "ПредставленияПлановоеВремя" Тогда 
			УстановитьЗапросВТДанныеРегистровУчетаВремениВЗапросСКД(СхемаЗапроса, ЗапросПакета, ПараметрыФормированияДанных, "ПредставленияПлановоеВремя");	
			Прервать;	
		КонецЕсли;			
	КонецЦикла;	
	
	НаборДанныхМакета.Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
КонецПроцедуры	

Процедура УстановитьЗапросВТИсточникиПолученияДанныхУчетаВремениВЗапросСКД(СхемаЗапроса, ЗамещаемыйЗапрос, ПараметрыФормированияДанных)	
	ТекстЗапросаРезультат = "";
	ИндексЗамещаемогоЗапроса = СхемаЗапроса.ПакетЗапросов.Индекс(ЗамещаемыйЗапрос);
	
	Для Индекс = 0 По ИндексЗамещаемогоЗапроса - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Иначе 
			ТекстЗапроса = "УНИЧТОЖИТЬ " + ЗапросПакета.ИмяТаблицы;
		КонецЕсли;	
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;	
	
	ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени = ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени(ПараметрыФормированияДанных);	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени.Текст);
	ЗапросВТИсточникиПолученияДанныхУчетаВремени = ЗапросВТИсточникиПолученияДанныхУчетаВремени(ПараметрыФормированияДанных);	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ЗапросВТИсточникиПолученияДанныхУчетаВремени.Текст);

	Для Индекс = ИндексЗамещаемогоЗапроса + 1 По СхемаЗапроса.ПакетЗапросов.Количество() - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Иначе 
			ТекстЗапроса = "УНИЧТОЖИТЬ " + ЗапросПакета.ИмяТаблицы;
		КонецЕсли;	
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;	
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаРезультат);
КонецПроцедуры	

Процедура УстановитьЗапросВТДанныеРегистровУчетаВремениВЗапросСКД(СхемаЗапроса, ЗамещаемыйЗапрос, ПараметрыПолученияДанных, ИмяВТРезультат)	
	ПараметрыПостроения = ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени();
	ПараметрыПостроения.ИмяВТРезультат = ИмяВТРезультат;
	
	ТекстЗапросаРезультат = "";
	ИндексЗамещаемогоЗапроса = СхемаЗапроса.ПакетЗапросов.Индекс(ЗамещаемыйЗапрос);
	
	Для Индекс = 0 По ИндексЗамещаемогоЗапроса - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Иначе 
			ТекстЗапроса = "УНИЧТОЖИТЬ " + ЗапросПакета.ИмяТаблицы;
		КонецЕсли;	
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;	
		
	ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени = ЗапросВТДанныеРегистровУчетаВремени(ПараметрыПолученияДанных, ПараметрыПостроения);	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени.Текст);
	
	Для Индекс = ИндексЗамещаемогоЗапроса + 1 По СхемаЗапроса.ПакетЗапросов.Количество() - 1 Цикл
		ЗапросПакета = СхемаЗапроса.ПакетЗапросов[Индекс];
		
		Если ТипЗнч(ЗапросПакета) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		Иначе 
			ТекстЗапроса = "УНИЧТОЖИТЬ " + ЗапросПакета.ИмяТаблицы;
		КонецЕсли;	
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ТекстЗапросаРезультат, ТекстЗапроса);	
	КонецЦикла;	
	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаРезультат);
КонецПроцедуры	

Процедура ДополнитьЗапросРегистровУчетаВремениТерриториями(ЗапросРезультат, ПараметрыПостроенияЗапросаКДаннымРегистров)

	ОписаниеФильтраПолученияПериодовТерриторий = ОписаниеТаблицыОтбораДляЗапросВТПериодыДействияТерриторий();
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяТаблицы = "ВТПараметрыЗарегистрированныхДанныхУчетаВремени";
	ОписаниеФильтраПолученияПериодовТерриторий.ИмяПоляПериодРегистрации = "ДатаАктуальности";
	
	ОписаниеИсточникаДанныхОВремени = ОписаниеИсточникаДанныхОВремениДляЗапросВТПериоды();
	ОписаниеИсточникаДанныхОВремени.ИмяТаблицы = "РегистрСведений.ГрафикиРаботыПоВидамВремени"; 
	ОписаниеИсточникаДанныхОВремени.ИмяПоляСотрудник = "ГрафикРаботы";
	
	ЗапросВТПериодыКадровыеТерритории = ЗапросВТПериодыТерриторий(Ложь, ОписаниеФильтраПолученияПериодовТерриторий, ОписаниеИсточникаДанныхОВремени, "ВТПериодыКадровыеТерритории");		
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыКадровыеТерритории);
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат, ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат + "Предварительно");
	
	ЗапросВТДанныеРегистровУчетаВремениСТерриториями = Новый Запрос;
	ЗапросВТДанныеРегистровУчетаВремениСТерриториями.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремени.Месяц КАК Месяц,
	|	ДанныеУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеУчетаВремени.План КАК План,
	|	ДанныеУчетаВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ДанныеУчетаВремени.Дата КАК Дата,
	|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаВремени.ЗарегистрированнаяТерритория
	|			ТОГДА ДанныеУчетаВремени.Территория
	|		ИНАЧЕ ВТПериодыКадровыеТерритории.Территория
	|	КОНЕЦ КАК Территория,
	|	ДанныеУчетаВремени.УсловияТруда КАК УсловияТруда,
	|	ДанныеУчетаВремени.Дни КАК Дни,
	|	ДанныеУчетаВремени.Часы КАК Часы,
	|	ДанныеУчетаВремени.ЗарегистрированнаяТерритория КАК ЗарегистрированнаяТерритория,
	|	ДанныеУчетаВремени.ДниПлан КАК ДниПлан,
	|	ДанныеУчетаВремени.ЧасыПлан КАК ЧасыПлан,
	|	ДанныеУчетаВремени.ДниНорма КАК ДниНорма,
	|	ДанныеУчетаВремени.ЧасыНорма КАК ЧасыНорма,
	|	ДанныеУчетаВремени.Смена КАК Смена,
	|	ДанныеУчетаВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены
	|ПОМЕСТИТЬ ВТДанныеУчетаВремениСКадровымиТерриториями
	|ИЗ
	|	#ИмяТаблицыРегистровУчетаВремениПредварительно КАК ДанныеУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыКадровыеТерритории КАК ВТПериодыКадровыеТерритории
	|		ПО ДанныеУчетаВремени.Сотрудник = ВТПериодыКадровыеТерритории.Сотрудник
	|			И (ДанныеУчетаВремени.Дата МЕЖДУ ВТПериодыКадровыеТерритории.ДатаНачала И ВТПериодыКадровыеТерритории.ДатаОкончания)";
	
	ЗапросВТДанныеРегистровУчетаВремениСТерриториями.Текст = СтрЗаменить(ЗапросВТДанныеРегистровУчетаВремениСТерриториями.Текст, "#ИмяТаблицыРегистровУчетаВремениПредварительно", ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат + "Предварительно");
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремениСТерриториями);
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТДанныеУчетаВремениСКадровымиТерриториями", ПараметрыПостроенияЗапросаКДаннымРегистров.ИмяВТРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьЧтениеПараметровЗарегистрированныхДанныхУчетаВремени

Функция ПериодыЗарегистрированныхДанныхУчетаВремени(МенеджерВременныхТаблиц, ИмяВТСотрудникиМесяцы, ПериодРегистрации, ВидДанных, ИсключаемыеРегистраторы = Неопределено) Экспорт 
	ПериодыЗарегистрированныхДанныхУчетаВремени = Новый ТаблицаЗначений;
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("ДатаНачалаИсходная", Новый ОписаниеТипов("Дата"));
	ПериодыЗарегистрированныхДанныхУчетаВремени.Колонки.Добавить("ДатаОкончанияИсходная", Новый ОписаниеТипов("Дата"));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ВидДанных", Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Месяц КАК Месяц,
	|	Сотрудники.ДатаНачала КАК ДатаНачалаИсходная,
	|	Сотрудники.ДатаОкончания КАК ДатаОкончанияИсходная,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень1) КАК УстановленДень1,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень2) КАК УстановленДень2,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень3) КАК УстановленДень3,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень4) КАК УстановленДень4,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень5) КАК УстановленДень5,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень6) КАК УстановленДень6,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень7) КАК УстановленДень7,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень8) КАК УстановленДень8,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень9) КАК УстановленДень9,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень10) КАК УстановленДень10,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень11) КАК УстановленДень11,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень12) КАК УстановленДень12,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень13) КАК УстановленДень13,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень14) КАК УстановленДень14,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень15) КАК УстановленДень15,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень16) КАК УстановленДень16,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень17) КАК УстановленДень17,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень18) КАК УстановленДень18,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень19) КАК УстановленДень19,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень20) КАК УстановленДень20,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень21) КАК УстановленДень21,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень22) КАК УстановленДень22,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень23) КАК УстановленДень23,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень24) КАК УстановленДень24,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень25) КАК УстановленДень25,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень26) КАК УстановленДень26,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень27) КАК УстановленДень27,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень28) КАК УстановленДень28,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень29) КАК УстановленДень29,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень30) КАК УстановленДень30,
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.УстановленДень31) КАК УстановленДень31
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников
	|		ПО Сотрудники.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Сотрудник
	|			И Сотрудники.Месяц = ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.Месяц
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ПериодРегистрации <= &ПериодРегистрации)
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ВидДанных = &ВидДанных)
	|			И &УсловиеИсключаемыеРегистраторы
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Месяц,
	|	Сотрудники.ДатаНачала,
	|	Сотрудники.ДатаОкончания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудники", ИмяВТСотрудникиМесяцы);
	
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		ТекстУсловияУсловиеИсключаемыеРегистраторы = "ИСТИНА";
	Иначе
		ТекстУсловияУсловиеИсключаемыеРегистраторы = "НЕ ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.ДокументОснование В (&ИсключаемыеРегистраторы)";
		Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИсключаемыеРегистраторы", ТекстУсловияУсловиеИсключаемыеРегистраторы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущаяСтрокаПериода = Неопределено;
		Для НомерДня = День(Выборка.ДатаНачалаИсходная) По День(Выборка.ДатаОкончанияИсходная) Цикл
			Если Выборка["УстановленДень" + НомерДня] > 0 Тогда 
				Если ТекущаяСтрокаПериода = Неопределено Тогда
					ТекущаяСтрокаПериода = ПериодыЗарегистрированныхДанныхУчетаВремени.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрокаПериода, Выборка, "Сотрудник, Месяц, ДатаНачалаИсходная, ДатаОкончанияИсходная");
					ТекущаяСтрокаПериода.ДатаНачала = Дата(Год(Выборка.ДатаНачалаИсходная), Месяц(Выборка.ДатаНачалаИсходная), НомерДня);
				КонецЕсли;	
			ИначеЕсли ТекущаяСтрокаПериода <> Неопределено Тогда
				ТекущаяСтрокаПериода.ДатаОкончания = Дата(Год(Выборка.ДатаНачалаИсходная), Месяц(Выборка.ДатаНачалаИсходная), НомерДня - 1);
				ТекущаяСтрокаПериода = Неопределено;
			КонецЕсли;	
			
			Если ТекущаяСтрокаПериода <> Неопределено Тогда
				ТекущаяСтрокаПериода.ДатаОкончания = Дата(Год(Выборка.ДатаНачалаИсходная), Месяц(Выборка.ДатаНачалаИсходная), НомерДня);
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат ПериодыЗарегистрированныхДанныхУчетаВремени;
КонецФункции	

Процедура СоздатьВТПериодыЗарегистрированныхДанныхУчетаВремени(МенеджерВременныхТаблиц, ИмяВТСотрудникиМесяцы, ПериодРегистрации, ВидДанных, ИсключаемыеРегистраторы = Неопределено, ИмяВТРезультат = "ВТПериодыЗарегистрированныхДанныхУчетаВремени") Экспорт
	ПериодыЗарегистрированныхДанныхУчетаВремени = ПериодыЗарегистрированныхДанныхУчетаВремени(МенеджерВременныхТаблиц, ИмяВТСотрудникиМесяцы, ПериодРегистрации, ВидДанных, ИсключаемыеРегистраторы);
	ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ПериодыЗарегистрированныхДанныхУчетаВремени, ИмяВТРезультат);
КонецПроцедуры	
	
Функция ОписаниеРегистраДанныхУчетаВремени() Экспорт
	ОписаниеРегистра = Новый Структура();
	
	ОписаниеРегистра.Вставить("МетаданныеРегистра");
	ОписаниеРегистра.Вставить("ИмяПоляСотрудник", "Сотрудник");
	ОписаниеРегистра.Вставить("ИмяПоляПериод", "Период");
	ОписаниеРегистра.Вставить("ИмяПоляДни", "Дни");
	ОписаниеРегистра.Вставить("ИмяПоляЧасы", "Часы");
	ОписаниеРегистра.Вставить("ИмяПоляПериодРегистрации", "ПериодРегистрации");
	ОписаниеРегистра.Вставить("ИмяПоляВидДанных", "ВидДанных");
	ОписаниеРегистра.Вставить("ВидДанных", "ВидДанных");
	ОписаниеРегистра.Вставить("ИмяПоляВидУчетаВремени", "ВидУчетаВремени");
	ОписаниеРегистра.Вставить("ИмяПоляПереходящаяЧастьПредыдущейСмены", "ПереходящаяЧастьПредыдущейСмены");

	
	Возврат ОписаниеРегистра;
КонецФункции	

Процедура ЗаписатьПараметрыРегистрируемыхДанных(НаборЗаписейУчетаВремени, ОписаниеРегистраДанныхУчетаВремени, Загрузка = Ложь) Экспорт
	ТипИсточникаДанных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеРегистраДанныхУчетаВремени.МетаданныеРегистра);
	Регистратор = НаборЗаписейУчетаВремени.Отбор.Регистратор.Значение;
	
	Набор = РегистрыСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.ДокументОснование.Установить(Регистратор);
	Набор.Отбор.ТипИсточникаДанных.Установить(ТипИсточникаДанных);
	
	ЗаполнитьПараметрыРегистрируемыхДанныхУчетаВремени(НаборЗаписейУчетаВремени, ОписаниеРегистраДанныхУчетаВремени, Набор);
		
	Если Загрузка Тогда
		Набор.ОбменДанными.Загрузка = Истина;
	КонецЕсли;	
	
	Набор.Записать();
КонецПроцедуры

Процедура ЗаполнитьПараметрыРегистрируемыхДанныхУчетаВремени(НаборЗаписейУчетаВремени, ОписаниеРегистра,  ПараметрыРегистрируемыхДанных)
	ИспользоватьСмены = ПолучитьФункциональнуюОпцию("ИспользоватьСменыРаботыСотрудников");
	
	ВидыВремениДополнительноеВремя = Новый Соответствие;
	ВидыВремениДополнительноеВремя.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"), Истина);
	ВидыВремениДополнительноеВремя.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"), Истина);	
	ВидыВремениДополнительноеВремя.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Праздники"), Истина);
	ВидыВремениДополнительноеВремя.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты"), Истина);
	
	СтрокиПараметровПоИзмерениям = Новый ТаблицаЗначений;
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("Месяц");
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("Сотрудник");
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("ПериодРегистрации");
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("ВидДанных");
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("СтрокаПараметров");
	СтрокиПараметровПоИзмерениям.Колонки.Добавить("Сторно");
	
	СтрокиПараметровПоИзмерениям.Индексы.Добавить("Месяц, Сотрудник, ПериодРегистрации, ВидДанных, Сторно");
	Отбор = Новый Структура("Месяц, Сотрудник, ПериодРегистрации, ВидДанных, Сторно");	
			
	ИмяПоляДни = ОписаниеРегистра.ИмяПоляДни;
	ИмяПоляЧасы = ОписаниеРегистра.ИмяПоляЧасы;
	ИмяПоляВидДанных = ОписаниеРегистра.ИмяПоляВидДанных;
	ИмяПоляПереходящаяЧастьПредыдущейСмены = ОписаниеРегистра.ИмяПоляПереходящаяЧастьПредыдущейСмены;
	
	ВидДанныхВСтрокеНабора = ИмяПоляВидДанных <> Неопределено;
	ВидДанных = ОписаниеРегистра.ВидДанных;
	
	ФормироватьПолностью = Перечисления.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.ФормироватьПолностью; 
	СводныеДанные = Перечисления.ВидыДанныхУчетаВремениСотрудников.СводныеДанные;
	
	ТипИсточникаДанных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеРегистра.МетаданныеРегистра);
	ДокументОснование = НаборЗаписейУчетаВремени.Отбор.Регистратор.Значение;
	Количество = НаборЗаписейУчетаВремени.Количество() - 1;
	СледующийМесяц = Дата(1, 1, 1);
	Для Сч = 0 По Количество Цикл
		СтрокаНабора = НаборЗаписейУчетаВремени[Сч];
		Если ВидДанныхВСтрокеНабора Тогда
			ВидДанных = СтрокаНабора[ИмяПоляВидДанных];
		КонецЕсли;
		
		Дни = ?(ИмяПоляДни = Неопределено, 0, СтрокаНабора[ИмяПоляДни]);
		Часы = ?(ИмяПоляЧасы = Неопределено, 0, СтрокаНабора[ИмяПоляЧасы]);
		ПереходящаяЧастьПредыдущейСмены = ?(ИмяПоляПереходящаяЧастьПредыдущейСмены = Неопределено, Ложь, СтрокаНабора[ИмяПоляПереходящаяЧастьПредыдущейСмены]);
		НомерДня = День(СтрокаНабора.Период);
		Месяц = НачалоМесяца(СтрокаНабора.Период);
		
		УстанавливатьПереходящуюЧастьПредыдущегоМесяца = Ложь;
		Если СледующийМесяц > Месяц Тогда
			Если НаборЗаписейУчетаВремени[Сч - 1].ПереходящаяЧастьПредыдущейСмены И НаборЗаписейУчетаВремени[Сч - 1].Сотрудник = НаборЗаписейУчетаВремени[Сч].Сотрудник Тогда
				УстанавливатьПереходящуюЧастьПредыдущегоМесяца = Истина;
			КонецЕсли;	
		КонецЕсли;			
		СледующийМесяц = Месяц;
		
		ИмяУстанавливаемогоПараметра = "УстановленДень" + Строка(НомерДня);
		
		Если ПереходящаяЧастьПредыдущейСмены Тогда 
			Если НомерДня = 1 Тогда
				Продолжить;
			Иначе
				НомерДня = НомерДня - 1;
				ИмяУстанавливаемогоПараметра = "УстановленДень" + Строка(НомерДня);
			КонецЕсли;
		КонецЕсли;
				
		Отбор.Сотрудник = СтрокаНабора.Сотрудник;
		Отбор.Месяц = Месяц;
		Отбор.ПериодРегистрации = СтрокаНабора.ПериодРегистрации;
		Отбор.ВидДанных = ВидДанных;
		Отбор.Сторно = Дни < 0 Или Часы < 0;
		
		СтрокаПараметров = СтрокаПараметровРегистрируемыхДанных(
			ПараметрыРегистрируемыхДанных, 
			СтрокиПараметровПоИзмерениям, 
			Отбор, 
			ТипИсточникаДанных, 
			ДокументОснование);
							
		УстановитьПараметрРегистрируемыхДанных(СтрокаПараметров, ИмяУстанавливаемогоПараметра, Дни, Часы);
		
		Если ВидДанных = СводныеДанные Тогда
			ДополнитьПараметрыРегистрируемыхСводныхДанных(СтрокаПараметров, ИмяУстанавливаемогоПараметра);
		КонецЕсли;	
		
		Если ВидыВремениДополнительноеВремя[СтрокаНабора.ВидУчетаВремени] = Неопределено Тогда
			СтрокаПараметров.ПорядокФормированияИндивидуальныхСведений = ФормироватьПолностью;
		КонецЕсли;	
		
		Если УстанавливатьПереходящуюЧастьПредыдущегоМесяца Тогда
			Отбор.Месяц = ДобавитьМесяц(СтрокаПараметров.Месяц, 1);		
			СтрокаПараметров =  СтрокаПараметровРегистрируемыхДанных(
				ПараметрыРегистрируемыхДанных, 
				СтрокиПараметровПоИзмерениям, 
				Отбор, 
				ТипИсточникаДанных, 
				ДокументОснование);
				
			УстановитьПараметрРегистрируемыхДанных(СтрокаПараметров, "УстановленаПереходящаяЧастьСменыПредыдущегоМесяца", Дни, Часы)
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

Процедура УстановитьПараметрРегистрируемыхДанных(СтрокаПараметров, ИмяПараметра, Дни, Часы)
	Если Дни > 0 Или Часы > 0 Тогда
		СтрокаПараметров[ИмяПараметра] = 1;
	ИначеЕсли Дни < 0 Или Часы < 0 Тогда
		СтрокаПараметров[ИмяПараметра] = -1;
	КонецЕсли;	
КонецПроцедуры	

Функция СтрокаПараметровРегистрируемыхДанных(ПараметрыРегистрируемыхДанных, СтрокиПараметровПоИзмерениям, Отбор, ТипИсточникаДанных, ДокументОснование)
	НайденныеСтроки = СтрокиПараметровПоИзмерениям.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		СтрокаПараметров = НайденныеСтроки[0].СтрокаПараметров;
	Иначе
		СтрокаПараметров = ПараметрыРегистрируемыхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметров, Отбор, "Месяц, Сотрудник, ПериодРегистрации, ВидДанных, Сторно");
		СтрокаПараметров.ПорядокФормированияИндивидуальныхСведений = Перечисления.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.ФормироватьПоЗарегистрированнымВидамВремени;
		СтрокаПараметров.ТипИсточникаДанных = ТипИсточникаДанных;
		СтрокаПараметров.ДокументОснование = ДокументОснование;
		
		СтрокаИндекса = СтрокиПараметровПоИзмерениям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИндекса, Отбор);
		СтрокаИндекса.СтрокаПараметров = СтрокаПараметров;
	КонецЕсли;	
	
	Возврат СтрокаПараметров;
КонецФункции	

Процедура ДополнитьПараметрыРегистрируемыхСводныхДанных(СтрокаПараметров, ИмяУстановленногоПараметра)
	ЗначениеПараметра = СтрокаПараметров[ИмяУстановленногоПараметра];
	
	Для Сч = 1 По 31 Цикл
		СтрокаПараметров["УстановленДень" + Строка(Сч)] = ЗначениеПараметра;
	КонецЦикла;	
КонецПроцедуры	

Функция ЗапросВТВспомогательнаяТаблицаФильтрацииВидовДанныхУчетаВремени(ПараметрыФормированияДанных)
	ШаблонЗапрос = 
	"ВЫБРАТЬ
	|	0 КАК НомерДня,
	|	ЛОЖЬ КАК ПереходящаяЧастьСмены,
	|	0 КАК УстановленДень1,
	|	0 КАК УстановленДень2,
	|	0 КАК УстановленДень3,
	|	0 КАК УстановленДень4,
	|	0 КАК УстановленДень5,
	|	0 КАК УстановленДень6,
	|	0 КАК УстановленДень7,
	|	0 КАК УстановленДень8,
	|	0 КАК УстановленДень9,
	|	0 КАК УстановленДень10,
	|	0 КАК УстановленДень11,
	|	0 КАК УстановленДень12,
	|	0 КАК УстановленДень13,
	|	0 КАК УстановленДень14,
	|	0 КАК УстановленДень15,
	|	0 КАК УстановленДень16,
	|	0 КАК УстановленДень17,
	|	0 КАК УстановленДень18,
	|	0 КАК УстановленДень19,
	|	0 КАК УстановленДень20,
	|	0 КАК УстановленДень21,
	|	0 КАК УстановленДень22,
	|	0 КАК УстановленДень23,
	|	0 КАК УстановленДень24,
	|	0 КАК УстановленДень25,
	|	0 КАК УстановленДень26,
	|	0 КАК УстановленДень27,
	|	0 КАК УстановленДень28,
	|	0 КАК УстановленДень29,
	|	0 КАК УстановленДень30,
	|	0 КАК УстановленДень31";
	
	ШаблонЗапросПереходящаяЧастьСмены = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА &НомерДня
	|		ИНАЧЕ &НомерДня + 1
	|	КОНЕЦ КАК НомерДня,
	|	ИСТИНА КАК ПереходящаяЧастьСмены,
	|	0 КАК УстановленДень1,
	|	0 КАК УстановленДень2,
	|	0 КАК УстановленДень3,
	|	0 КАК УстановленДень4,
	|	0 КАК УстановленДень5,
	|	0 КАК УстановленДень6,
	|	0 КАК УстановленДень7,
	|	0 КАК УстановленДень8,
	|	0 КАК УстановленДень9,
	|	0 КАК УстановленДень10,
	|	0 КАК УстановленДень11,
	|	0 КАК УстановленДень12,
	|	0 КАК УстановленДень13,
	|	0 КАК УстановленДень14,
	|	0 КАК УстановленДень15,
	|	0 КАК УстановленДень16,
	|	0 КАК УстановленДень17,
	|	0 КАК УстановленДень18,
	|	0 КАК УстановленДень19,
	|	0 КАК УстановленДень20,
	|	0 КАК УстановленДень21,
	|	0 КАК УстановленДень22,
	|	0 КАК УстановленДень23,
	|	0 КАК УстановленДень24,
	|	0 КАК УстановленДень25,
	|	0 КАК УстановленДень26,
	|	0 КАК УстановленДень27,
	|	0 КАК УстановленДень28,
	|	0 КАК УстановленДень29,
	|	0 КАК УстановленДень30,
	|	0 КАК УстановленДень31";

	
	ЧастиЗапроса = Новый Массив;
	
	Для НомерДня = 1 По 31 Цикл		
				
		Если НомерДня = 31 Тогда
			ТекстОбъединяемогоЗапроса = СтрЗаменить(ШаблонЗапрос, "0 КАК УстановленДень31", "1 КАК УстановленДень31");
		Иначе
			ТекстОбъединяемогоЗапроса = СтрЗаменить(ШаблонЗапрос, "0 КАК УстановленДень" + Строка(НомерДня) + ",", "1 КАК УстановленДень" + Строка(НомерДня) + ",");
		КонецЕсли;	
		
		ТекстОбъединяемогоЗапроса = СтрЗаменить(ТекстОбъединяемогоЗапроса, "0 КАК НомерДня", Строка(НомерДня) + " КАК НомерДня");
		
		Если НомерДня = 1 Тогда
			ЧастиЗапроса.Добавить(ТекстОбъединяемогоЗапроса + Символы.ПС + "ПОМЕСТИТЬ ВТВспомогательнаяТаблицаОпределенияУстановленныхДнейПериода");
		Иначе
			ЧастиЗапроса.Добавить(ТекстОбъединяемогоЗапроса);	
		КонецЕсли;			
	КонецЦикла;	
	

	Для НомерДня = 0 По 31 Цикл						
		Если НомерДня = 31 Тогда
			ТекстОбъединяемогоЗапроса = СтрЗаменить(ШаблонЗапросПереходящаяЧастьСмены, "0 КАК УстановленДень31", "1 КАК УстановленДень31");
		Иначе	
			ТекстОбъединяемогоЗапроса = СтрЗаменить(ШаблонЗапросПереходящаяЧастьСмены, "0 КАК УстановленДень" + Строка(НомерДня) + ",", "1 КАК УстановленДень" + Строка(НомерДня) + ",");
		КонецЕсли;	
		ТекстОбъединяемогоЗапроса = СтрЗаменить(ТекстОбъединяемогоЗапроса, "&НомерДня", Строка(НомерДня));
		
		ЧастиЗапроса.Добавить(ТекстОбъединяемогоЗапроса);
	КонецЦикла;	

	ТекстЗапроса = СтрСоединить(ЧастиЗапроса, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	Возврат Запрос;
КонецФункции

Функция ЗапросВТПараметрыЗарегистрированныхДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрПостроенияЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.Месяц КАК Месяц,
	|	Сотрудники.ДатаНачала КАК ДатаНачала,
	|	Сотрудники.ДатаОкончания КАК ДатаОкончания,
	|	Сотрудники.ДатаАктуальности КАК ДатаАктуальности,
	|	МАКСИМУМ(ЕСТЬNULL(ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации, ДАТАВРЕМЯ(1, 1, 1))) КАК ПериодРегистрации,
	|	МАКСИМУМ(ЕСТЬNULL(ПараметрыЗарегистрированныхДанныхУчетаВремени.ПорядокФормированияИндивидуальныхСведений, ЗНАЧЕНИЕ(Перечисление.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.НеФормировать))) КАК ПорядокФормированияИндивидуальныхСведений
	|ПОМЕСТИТЬ ВТПараметрыЗарегистрированныхДанныхУчетаВремени
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|		ПО Сотрудники.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|			И Сотрудники.Месяц = ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц
	|			И Сотрудники.ДатаАктуальности >= ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации
	|			И (&УсловиеОграничениеПериода)
	|			И (&УсловиеРегистратор)
	|ГДЕ
	|	(ЕСТЬNULL(ПараметрыЗарегистрированныхДанныхУчетаВремени.ПорядокФормированияИндивидуальныхСведений, ЗНАЧЕНИЕ(Перечисление.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.НеФормировать)) <> ЗНАЧЕНИЕ(Перечисление.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.НеФормировать)
	|			ИЛИ НЕ &УчитыватьТолькоИндивидуальныеСведения)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Месяц,
	|	Сотрудники.ДатаАктуальности,
	|	Сотрудники.ДатаНачала,
	|	Сотрудники.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц КАК Месяц,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаНачала КАК ДатаНачала,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТСотрудникСРассчитаннымиДанными
	|ИЗ
	|	ВТПараметрыЗарегистрированныхДанныхУчетаВремени КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|ГДЕ
	|	&ИспользоватьУжеРассчитанныеДанные
	|	И НЕ &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|	И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Флаг
	|			ИЗ
	|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|			ГДЕ
	|				ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|				И ГрафикиРаботыПоВидамВремени.Месяц = ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц
	|				И ГрафикиРаботыПоВидамВремени.ПериодРегистрации = ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц КАК Месяц,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаНачала КАК ДатаНачала,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ПорядокФормированияИндивидуальныхСведений КАК ПорядокФормированияИндивидуальныхСведений,
	|	ВЫБОР
	|		КОГДА &ИспользоватьУжеРассчитанныеДанные
	|				И &ПолучатьДанныеФакт
	|				И НЕ СотрудникСРассчитаннымиДанными.Сотрудник ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолучатьРассчитанныеДанныеФакт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьУжеРассчитанныеДанные
	|				И &ПолучатьДанныеФакт
	|				И НЕ СотрудникСРассчитаннымиДанными.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ &ПолучатьДанныеФакт
	|	КОНЕЦ КАК ВыполнятьРасчетИсточниковДанныхФакт,
	|	ВЫБОР
	|		КОГДА &ПолучатьДанныеПлан
	|			ТОГДА ИСТИНА
	|		КОГДА &ИспользоватьУжеРассчитанныеДанные
	|				И &ПолучатьДанныеНорма
	|				И НЕ СотрудникСРассчитаннымиДанными.Сотрудник ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ &ПолучатьДанныеНорма
	|	КОНЕЦ КАК ВыполнятьРасчетИсточниковДанныхПлан
	|ПОМЕСТИТЬ ВТПараметрыПолученияДанныхПоСотрудникам
	|ИЗ
	|	ВТПараметрыЗарегистрированныхДанныхУчетаВремени КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникСРассчитаннымиДанными КАК СотрудникСРассчитаннымиДанными
	|		ПО ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник = СотрудникСРассчитаннымиДанными.Сотрудник
	|			И ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц = СотрудникСРассчитаннымиДанными.Месяц
	|			И ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаАктуальности = СотрудникСРассчитаннымиДанными.ДатаАктуальности
	|			И ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации = СотрудникСРассчитаннымиДанными.ПериодРегистрации
	|			И ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаНачала = СотрудникСРассчитаннымиДанными.ДатаНачала
	|			И ПараметрыЗарегистрированныхДанныхУчетаВремени.ДатаОкончания = СотрудникСРассчитаннымиДанными.ДатаОкончания
	|ГДЕ
	|	(СотрудникСРассчитаннымиДанными.Сотрудник ЕСТЬ NULL
	|			ИЛИ &ПолучатьДанныеПлан
	|			ИЛИ &ФормироватьПриНаличииРассчитанныхДанных)";
	
	УстановитьУсловиеОграниченияПериода(Запрос, ПараметрыФормированияДанных, "ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц", Истина);
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ПолучатьДанныеПлан", ПараметрыФормированияДанных.ПолучатьДанныеПлан);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "УчитыватьТолькоИндивидуальныеСведения", ПараметрыФормированияДанных.УчитыватьТолькоИндивидуальныеСведения);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ИспользоватьУжеРассчитанныеДанные", ПараметрыФормированияДанных.ИспользоватьУжеРассчитанныеДанные);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ФормироватьПриНаличииРассчитанныхДанных", ПараметрыФормированияДанных.ФормироватьПриНаличииРассчитанныхДанных);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	УстановитьУсловиеНеучитываемыеРегистраторы(Запрос, ПараметрыФормированияДанных, "ПараметрыЗарегистрированныхДанныхУчетаВремени.ДокументОснование");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудники", ПараметрПостроенияЗапроса.ИмяВТИсточникДанных);
	
	Возврат Запрос;	
КонецФункции	

Функция ЗапросВТПараметрыЗарегистрированныхПлановыхДанныхУчетаВремени(ПараметрыФормированияДанных, ПараметрПостроенияЗапроса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Месяц,
	|	Сотрудники.ДатаНачала,
	|	Сотрудники.ДатаОкончания,
	|	Сотрудники.ДатаАктуальности,
	|	Сотрудники.ДатаАктуальности КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокФормированияИндивидуальныхСведенийУчетаВремени.ФормироватьПолностью) КАК ПорядокФормированияИндивидуальныхСведений,
	|	ЛОЖЬ КАК ПолучатьРассчитанныеДанныеФакт,
	|	ЛОЖЬ КАК ВыполнятьРасчетИсточниковДанныхФакт,
	|	ИСТИНА КАК ВыполнятьРасчетИсточниковДанныхПлан,
	|	&ОтноситьПереходящуюЧастьСменыКДнюНачала КАК ОтноситьПереходящуюЧастьСменыКДнюНачала 
	|ПОМЕСТИТЬ ВТПараметрыПолученияДанныхПоСотрудникам
	|ИЗ
	|	ВТСотрудники КАК Сотрудники";
	
	УстановитьУсловиеОграниченияПериода(Запрос, ПараметрыФормированияДанных, "ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц", Истина);
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ПолучатьДанныеПлан", Истина);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "УчитыватьТолькоИндивидуальныеСведения", Ложь);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ИспользоватьУжеРассчитанныеДанные", Ложь);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ФормироватьПриНаличииРассчитанныхДанных", Истина);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудники", ПараметрПостроенияЗапроса.ИмяВТИсточникДанных);
	
	Возврат Запрос;	
КонецФункции	

Функция ЗапросВТЗарегистрированныеВидыДанныхУчетаВремени(ПараметрыФормированияДанных)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПолученияДанныхПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ПараметрыПолученияДанныхПоСотрудникам.Месяц КАК Месяц,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаНачала КАК ДатаНачала,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности КАК ДатаАктуальности,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации КАК ПериодРегистрации,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт КАК ВыполнятьРасчетИсточниковДанныхФакт,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан КАК ВыполнятьРасчетИсточниковДанныхПлан,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ВидДанных КАК ВидДанных,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень1) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень1,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень2) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень2,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень3) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень3,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень4) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень4,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень5) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень5,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень6) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень6,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень7) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень7,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень8) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень8,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень9) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень9,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень10) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень10,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень11) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень11,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень12) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень12,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень13) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень13,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень14) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень14,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень15) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень15,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень16) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень16,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень17) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень17,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень18) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень18,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень19) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень19,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень20) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень20,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень21) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень21,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень22) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень22,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень23) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень23,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень24) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень24,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень25) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень25,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень26) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень26,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень27) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень27,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень28) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень28,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень29) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень29,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень30) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень30,
	|	ВЫБОР
	|		КОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень31) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленДень31,
	|	ВЫБОР
	|		КОГДА НЕ &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|				И СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УстановленаПереходящаяЧастьСменыПредыдущегоМесяца,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт КАК ПолучатьРассчитанныеДанныеФакт
	|ПОМЕСТИТЬ ВТЗарегистрированныеВидыДанныхУчетаВремени
	|ИЗ
	|	ВТПараметрыПолученияДанныхПоСотрудникам КАК ПараметрыПолученияДанныхПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЗарегистрированныхДанныхУчетаВремениСотрудников КАК ПараметрыЗарегистрированныхДанныхУчетаВремени
	|		ПО ПараметрыПолученияДанныхПоСотрудникам.Сотрудник = ПараметрыЗарегистрированныхДанныхУчетаВремени.Сотрудник
	|			И ПараметрыПолученияДанныхПоСотрудникам.Месяц = ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц
	|			И ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности >= ПараметрыЗарегистрированныхДанныхУчетаВремени.ПериодРегистрации
	|			И (ПараметрыЗарегистрированныхДанныхУчетаВремени.ВидДанных <> ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков))
	|			И (&УсловиеОграничениеПериода)
	|			И (ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт
	|				ИЛИ ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан
	|					И ПараметрыЗарегистрированныхДанныхУчетаВремени.ВидДанных В (&ВидыДанныхПлановогоВремени))
	|			И (&УсловиеРегистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыПолученияДанныхПоСотрудникам.Сотрудник,
	|	ПараметрыПолученияДанныхПоСотрудникам.Месяц,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаНачала,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаОкончания,
	|	ПараметрыЗарегистрированныхДанныхУчетаВремени.ВидДанных,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень1) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень2) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень3) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень4) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень5) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень6) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень7) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень8) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень9) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень10) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень11) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень12) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень13) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень14) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень15) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень16) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень17) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень18) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень19) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень20) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень21) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень22) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень23) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень24) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень25) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень26) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень27) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень28) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень29) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень30) + СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленДень31) + ВЫБОР
	|		КОГДА НЕ &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА СУММА(ПараметрыЗарегистрированныхДанныхУчетаВремени.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца)
	|		ИНАЧЕ 0
	|	КОНЕЦ > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыПолученияДанныхПоСотрудникам.Сотрудник,
	|	ПараметрыПолученияДанныхПоСотрудникам.Месяц,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаНачала,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаОкончания,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт,
	|	ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан,
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	1,
	|	ВЫБОР
	|		КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ПараметрыПолученияДанныхПоСотрудникам.Месяц, МЕСЯЦ)) >= 29
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ПараметрыПолученияДанныхПоСотрудникам.Месяц, МЕСЯЦ)) >= 30
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДЕНЬ(КОНЕЦПЕРИОДА(ПараметрыПолученияДанныхПоСотрудникам.Месяц, МЕСЯЦ)) >= 31
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	1,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт
	|ИЗ
	|	ВТПараметрыПолученияДанныхПоСотрудникам КАК ПараметрыПолученияДанныхПоСотрудникам
	|ГДЕ
	|	(ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт
	|			ИЛИ ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан)";
	 
	
	УстановитьУсловиеОграниченияПериода(Запрос, ПараметрыФормированияДанных, "ПараметрыЗарегистрированныхДанныхУчетаВремени.Месяц", Истина);
	УстановитьУсловиеНеучитываемыеРегистраторы(Запрос, ПараметрыФормированияДанных, "ПараметрыЗарегистрированныхДанныхУчетаВремени.ДокументОснование");
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	ВидыДанныхПлановогоВремени = Новый Массив;
	ВидыДанныхПлановогоВремени.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков);
	ВидыДанныхПлановогоВремени.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков);
	
	Запрос.УстановитьПараметр("ВидыДанныхПлановогоВремени", ВидыДанныхПлановогоВремени);
	
	Возврат Запрос;
КонецФункции	

Функция ЗапросВТИсточникиПолученияДанныхУчетаВремени(ПараметрыФормированияДанных)
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТИспользуемыеВидыДанных = ЗапросВТИспользуемыеВидыДанных(ПараметрыФормированияДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТИспользуемыеВидыДанных); 
	
	ЗапросВТВытесняющиеВидыДанных = ЗапросВТВытесняющиеВидыДанных(ПараметрыФормированияДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТВытесняющиеВидыДанных); 
	
	ЗапросВТВспомогательнаяТаблицаОпределенияУстановленныхДнейПериода = ЗапросВТВспомогательнаяТаблицаФильтрацииВидовДанныхУчетаВремени(ПараметрыФормированияДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТВспомогательнаяТаблицаОпределенияУстановленныхДнейПериода); 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИспользуемыеИсточникиДанныхНесгруппированные.Сотрудник КАК Сотрудник,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.Месяц КАК Месяц,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаНачала КАК ДатаНачала,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаОкончания КАК ДатаОкончания,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ВидДанных КАК ВидДанных,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаАктуальности КАК ДатаАктуальности,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ПериодРегистрации КАК ПериодРегистрации,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИспользуемыеИсточникиДанныхНесгруппированные.Факт
	|				ТОГДА ИспользуемыеИсточникиДанныхНесгруппированные.Вытеснен
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВыполнятьФильтрациюДанныхФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ИспользуемыеИсточникиДанныхНесгруппированные.Факт
	|				ТОГДА ИспользуемыеИсточникиДанныхНесгруппированные.Вытеснен
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ВыполнятьФильтрациюДанныхПлан,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИспользуемыеИсточникиДанныхНесгруппированные.Факт
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьДанныеИсточникаФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ИспользуемыеИсточникиДанныхНесгруппированные.Факт
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ИспользоватьДанныеИсточникаПлан,
	|	МАКСИМУМ(ИспользуемыеИсточникиДанныхНесгруппированные.Вытеснен) КАК ВыполнятьФильтрациюДанных,
	|	МАКСИМУМ(ИспользуемыеИсточникиДанныхНесгруппированные.ПолучатьРассчитанныеДанныеФакт) КАК ПолучатьРассчитанныеДанныеФакт,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень1) КАК УстановленДень1,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень2) КАК УстановленДень2,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень3) КАК УстановленДень3,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень4) КАК УстановленДень4,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень5) КАК УстановленДень5,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень6) КАК УстановленДень6,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень7) КАК УстановленДень7,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень8) КАК УстановленДень8,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень9) КАК УстановленДень9,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень10) КАК УстановленДень10,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень11) КАК УстановленДень11,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень12) КАК УстановленДень12,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень13) КАК УстановленДень13,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень14) КАК УстановленДень14,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень15) КАК УстановленДень15,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень16) КАК УстановленДень16,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень17) КАК УстановленДень17,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень18) КАК УстановленДень18,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень19) КАК УстановленДень19,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень20) КАК УстановленДень20,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень21) КАК УстановленДень21,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень22) КАК УстановленДень22,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень23) КАК УстановленДень23,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень24) КАК УстановленДень24,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень25) КАК УстановленДень25,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень26) КАК УстановленДень26,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень27) КАК УстановленДень27,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень28) КАК УстановленДень28,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень29) КАК УстановленДень29,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень30) КАК УстановленДень30,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень31) КАК УстановленДень31,
	|	СУММА(ИспользуемыеИсточникиДанныхНесгруппированные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца) КАК УстановленаПереходящаяЧастьСменыПредыдущегоМесяца
	|ПОМЕСТИТЬ ВТИспользуемыеИсточникиДанныхНеотфильтрованные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Сотрудник КАК Сотрудник,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Месяц КАК Месяц,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаНачала КАК ДатаНачала,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаОкончания КАК ДатаОкончания,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Факт КАК Факт,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ВидДанных КАК ВидДанных,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаАктуальности КАК ДатаАктуальности,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ПериодРегистрации КАК ПериодРегистрации,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень1) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень1,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень2) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень2,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень3) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень3,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень4) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень4,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень5) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень5,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень6) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень6,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень7) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень7,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень8) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень8,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень9) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень9,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень10) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень10,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень11) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень11,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень12) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень12,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень13) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень13,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень14) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень14,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень15) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень15,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень16) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень16,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень17) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень17,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень18) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень18,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень19) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень19,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень20) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень20,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень21) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень21,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень22) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень22,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень23) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень23,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень24) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень24,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень25) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень25,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень26) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень26,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень27) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень27,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень28) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень28,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень29) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень29,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень30) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень30,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленДень31) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленДень31,
	|		МИНИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца) * ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК УстановленаПереходящаяЧастьСменыПредыдущегоМесяца,
	|		МАКСИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.Вытеснен) КАК Вытеснен,
	|		МАКСИМУМ(ИспользуемыеВидыДанныхУчетомВытеснения.ПолучатьРассчитанныеДанныеФакт) КАК ПолучатьРассчитанныеДанныеФакт,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт КАК МножительПризнакФакт
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗарегистрированныеВидыДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.Месяц КАК Месяц,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаНачала КАК ДатаНачала,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаОкончания КАК ДатаОкончания,
	|			ИспользуемыеВидыДанных.Факт КАК Факт,
	|			ВЫБОР
	|				КОГДА ИспользуемыеВидыДанных.Факт
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ КАК МножительПризнакФакт,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ВидДанных КАК ВидДанных,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень1 КАК УстановленДень1,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень2 КАК УстановленДень2,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень3 КАК УстановленДень3,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень4 КАК УстановленДень4,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень5 КАК УстановленДень5,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень6 КАК УстановленДень6,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень7 КАК УстановленДень7,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень8 КАК УстановленДень8,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень9 КАК УстановленДень9,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень10 КАК УстановленДень10,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень11 КАК УстановленДень11,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень12 КАК УстановленДень12,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень13 КАК УстановленДень13,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень14 КАК УстановленДень14,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень15 КАК УстановленДень15,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень16 КАК УстановленДень16,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень17 КАК УстановленДень17,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень18 КАК УстановленДень18,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень19 КАК УстановленДень19,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень20 КАК УстановленДень20,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень21 КАК УстановленДень21,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень22 КАК УстановленДень22,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень23 КАК УстановленДень23,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень24 КАК УстановленДень24,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень25 КАК УстановленДень25,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень26 КАК УстановленДень26,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень27 КАК УстановленДень27,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень28 КАК УстановленДень28,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень29 КАК УстановленДень29,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень30 КАК УстановленДень30,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень31 КАК УстановленДень31,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца КАК УстановленаПереходящаяЧастьСменыПредыдущегоМесяца,
	|			1 КАК ДанныеЗарегистрированы,
	|			ЛОЖЬ КАК Вытеснен,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ПолучатьРассчитанныеДанныеФакт КАК ПолучатьРассчитанныеДанныеФакт
	|		ИЗ
	|			ВТЗарегистрированныеВидыДанныхУчетаВремени КАК ЗарегистрированныеВидыДанныхУчетаВремени
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИспользуемыеВидыДанных КАК ИспользуемыеВидыДанных
	|				ПО ЗарегистрированныеВидыДанныхУчетаВремени.ВидДанных = ИспользуемыеВидыДанных.ВидДанных
	|					И (ИспользуемыеВидыДанных.Факт
	|							И ЗарегистрированныеВидыДанныхУчетаВремени.ВыполнятьРасчетИсточниковДанныхФакт
	|						ИЛИ НЕ ИспользуемыеВидыДанных.Факт
	|							И ЗарегистрированныеВидыДанныхУчетаВремени.ВыполнятьРасчетИсточниковДанныхПлан)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЗарегистрированныеВидыДанныхУчетаВремени.Сотрудник,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.Месяц,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаНачала,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаОкончания,
	|			ВытесняющиеВидыДанных.Факт,
	|			ВЫБОР
	|				КОГДА ВытесняющиеВидыДанных.Факт
	|					ТОГДА 2
	|				ИНАЧЕ 1
	|			КОНЕЦ,
	|			ВытесняющиеВидыДанных.ВидДанных,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ДатаАктуальности,
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ПериодРегистрации,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень1,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень2,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень3,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень4,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень5,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень6,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень7,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень8,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень9,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень10,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень11,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень12,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень13,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень14,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень15,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень16,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень17,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень18,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень19,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень20,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень21,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень22,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень23,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень24,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень25,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень26,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень27,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень28,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень29,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень30,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленДень31,
	|			1 - ЗарегистрированныеВидыДанныхУчетаВремени.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца,
	|			0,
	|			ВытесняющиеВидыДанных.ВидДанных <> ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|			ЗарегистрированныеВидыДанныхУчетаВремени.ПолучатьРассчитанныеДанныеФакт
	|		ИЗ
	|			ВТЗарегистрированныеВидыДанныхУчетаВремени КАК ЗарегистрированныеВидыДанныхУчетаВремени
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВытесняющиеВидыДанных КАК ВытесняющиеВидыДанных
	|				ПО ЗарегистрированныеВидыДанныхУчетаВремени.ВидДанных = ВытесняющиеВидыДанных.ВидДанныхВытесняющий
	|					И (ВытесняющиеВидыДанных.Факт
	|							И ЗарегистрированныеВидыДанныхУчетаВремени.ВыполнятьРасчетИсточниковДанныхФакт
	|						ИЛИ НЕ ВытесняющиеВидыДанных.Факт
	|							И ЗарегистрированныеВидыДанныхУчетаВремени.ВыполнятьРасчетИсточниковДанныхПлан)) КАК ИспользуемыеВидыДанныхУчетомВытеснения
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Сотрудник,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Месяц,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ВидДанных,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаАктуальности,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ПериодРегистрации,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.Факт,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаНачала,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.ДатаОкончания,
	|		ИспользуемыеВидыДанныхУчетомВытеснения.МножительПризнакФакт
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ИспользуемыеВидыДанныхУчетомВытеснения.ДанныеЗарегистрированы) > 0) КАК ИспользуемыеИсточникиДанныхНесгруппированные
	|ГДЕ
	|	&УсловиеЕстьНевытесненныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИспользуемыеИсточникиДанныхНесгруппированные.Сотрудник,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.Месяц,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ВидДанных,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаАктуальности,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ПериодРегистрации,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаНачала,
	|	ИспользуемыеИсточникиДанныхНесгруппированные.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.Сотрудник КАК Сотрудник,
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|				ИЛИ НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|	КОНЕЦ КАК ПолучатьПереходящуюЧастьСмены,
	|	ВЫБОР
	|		КОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|				ИЛИ НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ НЕ ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|	КОНЕЦ КАК ПолучатьОсновнуюЧастьСмены,
	|	ВЫБОР
	|		КОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|			ТОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц
	|		КОГДА НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|			ТОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаНачала
	|		КОГДА ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|				И &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц, ДЕНЬ, ЕСТЬNULL(ВспомогательнаяТаблицаФильтрации.НомерДня, 1))
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц, ДЕНЬ, ЕСТЬNULL(ВспомогательнаяТаблицаФильтрации.НомерДня, 1) - 1)
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|				И &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаОкончания, ДЕНЬ, 1)
	|		КОГДА НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|			ТОГДА ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаОкончания
	|		КОГДА ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|				И &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ДОБАВИТЬКДАТЕ(ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц, ДЕНЬ, ЕСТЬNULL(ВспомогательнаяТаблицаФильтрации.НомерДня, 1))
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ИспользуемыеИсточникиДанныхНеотфильтрованные.Месяц, ДЕНЬ, ЕСТЬNULL(ВспомогательнаяТаблицаФильтрации.НомерДня, 1) - 1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.ВидДанных КАК ВидДанных,
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаАктуальности КАК ДатаАктуальности,
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.ПериодРегистрации КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|				И &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПолучатьПереходящуюЧастьСменыНаНачалоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|				И &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПолучатьОсновнуюЧастьСменыНаКонецПериода,
	|	ВЫБОР
	|		КОГДА &УсловиеПолученияДанныхОВремениЗаДеньФакт
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолучатьДанныеФакт,
	|	ВЫБОР
	|		КОГДА &УсловиеПолученияДанныхОВремениЗаДеньПлан
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолучатьДанныеПлан,
	|	ИспользуемыеИсточникиДанныхНеотфильтрованные.ПолучатьРассчитанныеДанныеФакт КАК ПолучатьРассчитанныеДанныеФакт
	|ПОМЕСТИТЬ ВТИсточникиПолученияДанныхУчетаВремени
	|ИЗ
	|	ВТИспользуемыеИсточникиДанныхНеотфильтрованные КАК ИспользуемыеИсточникиДанныхНеотфильтрованные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВспомогательнаяТаблицаОпределенияУстановленныхДнейПериода КАК ВспомогательнаяТаблицаФильтрации
	|		ПО (ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных)
	|			И (ВспомогательнаяТаблицаФильтрации.НомерДня МЕЖДУ ДЕНЬ(ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаНачала) И ДЕНЬ(ИспользуемыеИсточникиДанныхНеотфильтрованные.ДатаОкончания))
	|ГДЕ
	|	(НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных
	|			ИЛИ ВспомогательнаяТаблицаФильтрации.НомерДня = 1
	|				И ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|				И ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца > 0
	|			ИЛИ &УсловиеПолученияДанныхОВремениЗаДеньПоИсточнику)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеВидыДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВытесняющиеВидыДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВспомогательнаяТаблицаОпределенияУстановленныхДнейПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеИсточникиДанныхНеотфильтрованные";
		
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросРезультат.Текст, ТекстЗапроса);
	
	ТекстУсловиеЕстьНевытесненныеДанные = ТекстУсловияЕстьНевытесненныеДанные();
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеЕстьНевытесненныеДанные", ТекстУсловиеЕстьНевытесненныеДанные); 
	
	УсловиеПолученияДанныхОВремениЗаДеньПоИсточнику = ТекстУсловияПолученияВремениЗаДень();
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПолученияДанныхОВремениЗаДеньПоИсточнику", УсловиеПолученияДанныхОВремениЗаДеньПоИсточнику); 
	
	ТекстУсловиеПолученияДанныхОВремениЗаДеньФакт = ТекстУсловияПолученияВремениЗаДеньФакт();
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПолученияДанныхОВремениЗаДеньФакт", ТекстУсловиеПолученияДанныхОВремениЗаДеньФакт); 
	
	ТекстУсловиеПолученияДанныхОВремениЗаДеньПлан = ТекстУсловияПолученияВремениЗаДеньПлан();
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&УсловиеПолученияДанныхОВремениЗаДеньПлан", ТекстУсловиеПолученияДанныхОВремениЗаДеньПлан);  
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	Возврат ЗапросРезультат;	
КонецФункции	

Функция ЗапросВТИсточникиПолученияДанныхУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрПостроенияЗапроса)
	ЗапросРезультат = Новый Запрос;
	ЗапросРезультат.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыПолученияДанныхПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ПараметрыПолученияДанныхПоСотрудникам.Месяц КАК Месяц,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаНачала КАК ДатаНачала,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ПустаяСсылка) КАК ВидДанных,
	|	ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности КАК ДатаАктуальности,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации КАК ПериодРегистрации,
	|	ЛОЖЬ КАК ВыполнятьФильтрациюДанных,
	|	ИСТИНА КАК ПолучатьДанныеФакт,
	|	ИСТИНА КАК ПолучатьДанныеПлан,
	|	ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт
	|ПОМЕСТИТЬ ВТИсточникиПолученияДанныхУчетаВремени
	|ИЗ
	|	ВТПараметрыПолученияДанныхПоСотрудникам КАК ПараметрыПолученияДанныхПоСотрудникам
	|ГДЕ
	|	(ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт
	|			ИЛИ ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхФакт
	|			ИЛИ ПараметрыПолученияДанныхПоСотрудникам.ВыполнятьРасчетИсточниковДанныхПлан
	|				И ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ПустаяСсылка) В (&ВидыДанныхПлановогоВремени))";
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "&ИсточникДанных", ПараметрПостроенияЗапроса.ИмяВТИсточникДанных);
	
	ВидыДанныхПлановогоВремени = Новый Массив;
	ВидыДанныхПлановогоВремени.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков);
	ВидыДанныхПлановогоВремени.Добавить(Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков);

	ЗапросРезультат.УстановитьПараметр("ВидыДанныхПлановогоВремени", ВидыДанныхПлановогоВремени);
	
	Возврат ЗапросРезультат;	
	
КонецФункции	

Функция ЗапросВТИспользуемыеВидыДанных(ПараметрыФормированияДанных)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков) КАК ВидДанных,
	|	ИСТИНА КАК Факт
	|ПОМЕСТИТЬ ВТИспользуемыеВидыДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеВнутрисменныхНеявок),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДополнительноеВнутрисменноеВремя),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ЛОЖЬ";		
	
	Возврат Запрос;
КонецФункции	

Функция ЗапросВТВытесняющиеВидыДанных(ПараметрыФормированияДанных)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков) КАК ВидДанных,
	|	ЗНАЧЕНИЕ(перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков) КАК ВидДанныхВытесняющий,
	|	ИСТИНА КАК Факт
	|ПОМЕСТИТЬ ВТВытесняющиеВидыДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеВнутрисменныхНеявок),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДополнительноеВнутрисменноеВремя),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета),
	|	ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков),
	|	ЛОЖЬ";	
	
	Возврат Запрос;
КонецФункции	

Функция ТекстУсловияЕстьНевытесненныеДанные()
	ТекстУсловияШаблон = 
	"ВЫБОР
	|	КОГДА ИспользуемыеИсточникиДанныхНесгруппированные.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)
	|		ТОГДА &УсловиеВытесненыСводныеДанные
	|	ИНАЧЕ &УсловиеВытесненыПодневныеДанные
	|КОНЕЦ";
	
	ТекстСуммированиеПолей = "";
	
	ЧастиУсловия = Новый Массив;
		
	Для Сч = 1 По 31 Цикл
		ЧастиУсловия.Добавить("ИспользуемыеИсточникиДанныхНесгруппированные.УстановленДень" + Формат(Сч, "ЧГ="));
	КонецЦикла;	
	
	ТекстСуммированиеПолей = СтрСоединить(ЧастиУсловия, " + ");
	ТекстУсловияУсловиеВытесненыДанные = ТекстСуммированиеПолей + " = 31 * ИспользуемыеИсточникиДанныхНесгруппированные.МножительПризнакФакт";
	
	ТекстУсловия = СтрЗаменить(ТекстУсловияШаблон, "&УсловиеВытесненыСводныеДанные", ТекстУсловияУсловиеВытесненыДанные); 
		
	ЧастиУсловия.Добавить("ИспользуемыеИсточникиДанныхНесгруппированные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца");
	ТекстСуммированиеПолей = СтрСоединить(ЧастиУсловия, " + ");
	ТекстУсловияУсловиеВытесненыДанные = ТекстСуммированиеПолей + " > 0";
	
	ТекстУсловия = СтрЗаменить(ТекстУсловия, "&УсловиеВытесненыПодневныеДанные", ТекстУсловияУсловиеВытесненыДанные);
	
	Возврат ТекстУсловия;	
КонецФункции	

Функция ТекстУсловияПолученияВремениЗаДень()
	ЧастиУсловия = Новый Массив;
	
	Для Сч = 1 По 31 Цикл
		ЧастиУсловия.Добавить("ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленДень" + Формат(Сч, "ЧГ=") + " * ВспомогательнаяТаблицаФильтрации.УстановленДень" +  Формат(Сч, "ЧГ="));
	КонецЦикла;	
	
	ТекстУсловия = СтрСоединить(ЧастиУсловия, " + ") + " > 0";
	
	ТекстУсловия = ТекстУсловия + "ИЛИ 
	|	(НЕ &ОтноситьПереходящуюЧастьСменыКДнюНачала И ВспомогательнаяТаблицаФильтрации.НомерДня = 1
	|				И ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены
	|				И ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца > 0)";
	
	Возврат СтрСоединить(ЧастиУсловия, " + ") + " > 0";	
КонецФункции	

Функция ТекстУсловияПолученияВремениЗаДеньПлан()
	ЧастиУсловия = Новый Массив;
	
	Для Сч = 1 По 31 Цикл
		ЧастиУсловия.Добавить("ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленДень" + Формат(Сч, "ЧГ=") + " * ВспомогательнаяТаблицаФильтрации.УстановленДень" +  Формат(Сч, "ЧГ="));
	КонецЦикла;	
	
	ТекстСуммированиеПолей = СтрСоединить(ЧастиУсловия, " + ");
	
	ТекстУсловия =  "(НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных И ИспользуемыеИсточникиДанныхНеотфильтрованные.ИспользоватьДанныеИсточникаПлан)  
					|ИЛИ (ВспомогательнаяТаблицаФильтрации.НомерДня = 1 И ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены И ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца В (1, 3)) ИЛИ " + ТекстСуммированиеПолей + " В (1, 3)";
	
	Возврат ТекстУсловия;	
КонецФункции	

Функция ТекстУсловияПолученияВремениЗаДеньФакт()
	ЧастиУсловия = Новый Массив;
	
	Для Сч = 1 По 31 Цикл
		ЧастиУсловия.Добавить("ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленДень" + Формат(Сч, "ЧГ=") + " * ВспомогательнаяТаблицаФильтрации.УстановленДень" +  Формат(Сч, "ЧГ="));
	КонецЦикла;	
	
	ТекстСуммированиеПолей = СтрСоединить(ЧастиУсловия, " + ");
	
	ТекстУсловия =  "(НЕ ИспользуемыеИсточникиДанныхНеотфильтрованные.ВыполнятьФильтрациюДанных И ИспользуемыеИсточникиДанныхНеотфильтрованные.ИспользоватьДанныеИсточникаФакт)  
					|ИЛИ (НЕ &ОтноситьПереходящуюЧастьСменыКДнюНачала И ВспомогательнаяТаблицаФильтрации.НомерДня = 1 И ВспомогательнаяТаблицаФильтрации.ПереходящаяЧастьСмены И ИспользуемыеИсточникиДанныхНеотфильтрованные.УстановленаПереходящаяЧастьСменыПредыдущегоМесяца >= 2) ИЛИ " + ТекстСуммированиеПолей + " >=2";
	
	Возврат ТекстУсловия;	

КонецФункции

#КонецОбласти

#Область ЗаписьЧтениеРегистровХраненияЗарегистрированныхДанныхУчетаВремени

Функция ПараметрыПостроенияЗапросаВТДанныеРегистровУчетаВремени()
	ПараметрыПостроения = Новый Структура();
	
	ПараметрыПостроения.Вставить("ИмяВТРезультат", "ВТДанныеРегистровУчетаВремени");
	
	Возврат ПараметрыПостроения;
КонецФункции	

Функция ЗапросВТДанныеРегистровУчетаВремени(ПараметрыФормированияДанных, ПараметрыПостроения)
	ЗапросРезультат = Новый Запрос;
	
	ЗапросВТПериодыДействияОбщихГрафиковСотрудников = ЗапросВТПериодыДействияОбщихГрафиковСотрудников(ПараметрыФормированияДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТПериодыДействияОбщихГрафиковСотрудников);
	
	ЗапросВТДанныеОбщихГрафиков = ЗапросВТДанныеОбщихГрафиков(ПараметрыФормированияДанных);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеОбщихГрафиков);
	
	ЗапросВТДанныеРегистровУчетаВремени = Новый Запрос;
	ЗапросВТДанныеРегистровУчетаВремени.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремени.Месяц КАК Месяц,
	|	ДанныеУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	МИНИМУМ(ДанныеУчетаВремени.План) КАК План,
	|	ДанныеУчетаВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ВЫБОР
	|		КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|				И ДанныеУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|			ТОГДА ДОБАВИТЬКДАТЕ(ДанныеУчетаВремени.Период, ДЕНЬ, -1)
	|		ИНАЧЕ ДанныеУчетаВремени.Период
	|	КОНЕЦ КАК Дата,
	|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеУчетаВремени.Территория КАК Территория,
	|	ДанныеУчетаВремени.УсловияТруда КАК УсловияТруда,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаВремени.ВЦеломЗаПериод
	|			ТОГДА СУММА(ДанныеУчетаВремени.Дни)
	|		КОГДА СУММА(ДанныеУчетаВремени.Дни) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Дни,
	|	СУММА(ДанныеУчетаВремени.Часы) КАК Часы,
	|	МАКСИМУМ(ДанныеУчетаВремени.ЗарегистрированнаяТерритория) КАК ЗарегистрированнаяТерритория,
	|	МАКСИМУМ(ДанныеУчетаВремени.ДниПлан) КАК ДниПлан,
	|	СУММА(ДанныеУчетаВремени.ЧасыПлан) КАК ЧасыПлан,
	|	МАКСИМУМ(ДанныеУчетаВремени.ДниНорма) КАК ДниНорма,
	|	СУММА(ДанныеУчетаВремени.ЧасыНорма) КАК ЧасыНорма,
	|	МАКСИМУМ(ДанныеУчетаВремени.Смена) КАК Смена,
	|	ДанныеУчетаВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены
	|ПОМЕСТИТЬ ВТДанныеРегистровУчетаВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц КАК Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|		ЛОЖЬ КАК План,
	|		ЛОЖЬ КАК ВЦеломЗаПериод,
	|		ДанныеРегистраУчетаВремени.Период КАК Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ДанныеРегистраУчетаВремени.Смена КАК Смена,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|		ДанныеРегистраУчетаВремени.Территория КАК Территория,
	|		ДанныеРегистраУчетаВремени.УсловияТруда КАК УсловияТруда,
	|		ДанныеРегистраУчетаВремени.Дни КАК Дни,
	|		ДанныеРегистраУчетаВремени.Часы КАК Часы,
	|		ИСТИНА КАК ЗарегистрированнаяТерритория,
	|		0 КАК ДниПлан,
	|		0 КАК ЧасыПлан,
	|		0 КАК ДниНорма,
	|		0 КАК ЧасыНорма
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСменыНаНачалоПериода)
	|					ИЛИ НЕ ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСменыНаКонецПериода)
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСмены)
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета))
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ДанныеРегистраУчетаВремени.Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени,
	|		ДанныеРегистраУчетаВремени.Смена,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьТекущейСмены,
	|		ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка),
	|		ДанныеРегистраУчетаВремени.Дни,
	|		ДанныеРегистраУчетаВремени.Часы,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСменыНаНачалоПериода)
	|					ИЛИ НЕ ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСменыНаКонецПериода)
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСмены)
	|				И ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ДанныеРегистраУчетаВремени.ВидДанных
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ДанныеРегистраУчетаВремени.Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени,
	|		ДанныеРегистраУчетаВремени.Смена,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьТекущейСмены,
	|		ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка),
	|		0,
	|		-ДанныеРегистраУчетаВремени.Часы,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВытесняемоеПлановоеВремяСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСменыНаНачалоПериода)
	|					ИЛИ НЕ ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСменыНаКонецПериода)
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСмены)
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ВытесняемоеПлановоеВремя))
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ДанныеРегистраУчетаВремени.Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени,
	|		ЗНАЧЕНИЕ(Справочник.СменыРаботыСотрудников.ПустаяСсылка),
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка),
	|		СУММА(ДанныеРегистраУчетаВремени.Дни),
	|		СУММА(ДанныеРегистраУчетаВремени.Часы),
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные))
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ДанныеРегистраУчетаВремени.Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ДанныеРегистраУчетаВремени.Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени,
	|		ДанныеРегистраУчетаВремени.Смена,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены,
	|		ДанныеРегистраУчетаВремени.ПереходящаяЧастьТекущейСмены,
	|		ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка),
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ДанныеРегистраУчетаВремени.Дни
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ДанныеРегистраУчетаВремени.Часы
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеРегистраУчетаВремени.Дни
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеРегистраУчетаВремени.Часы
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеРегистраУчетаВремени.Дни
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеРегистраУчетаВремени.Часы
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеИндивидуальныхГрафиковСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСменыНаНачалоПериода)
	|					ИЛИ НЕ ДанныеРегистраУчетаВремени.ПереходящаяЧастьПредыдущейСмены
	|						И (ДанныеРегистраУчетаВремени.Период <> ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСменыНаКонецПериода)
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСмены)
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеИндивидуальныхГрафиков))
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ДанныеОбщихГрафиков.Дата,
	|		ДанныеОбщихГрафиков.ВидУчетаВремени,
	|		ДанныеОбщихГрафиков.Смена,
	|		ДанныеОбщихГрафиков.ПереходящаяЧастьПредыдущейСмены,
	|		ДанныеОбщихГрафиков.ПереходящаяЧастьТекущейСмены,
	|		ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка),
	|		ВЫБОР
	|			КОГДА НЕ ПериодыДействияОбщихГрафиковСотрудников.ТолькоПлановоеВремя
	|					И ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ДанныеОбщихГрафиков.Дней
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НЕ ПериодыДействияОбщихГрафиковСотрудников.ТолькоПлановоеВремя
	|					И ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеФакт
	|				ТОГДА ДанныеОбщихГрафиков.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеОбщихГрафиков.Дней
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеОбщихГрафиков.Часов
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеОбщихГрафиков.ДнейНорма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсточникиПолученияДанныхУчетаВремени.ПолучатьДанныеПлан
	|				ТОГДА ДанныеОбщихГрафиков.ЧасовНорма
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыДействияОбщихГрафиковСотрудников КАК ПериодыДействияОбщихГрафиковСотрудников
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ПериодыДействияОбщихГрафиковСотрудников.Сотрудник
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков))
	|				И ИсточникиПолученияДанныхУчетаВремени.Месяц = ПериодыДействияОбщихГрафиковСотрудников.Месяц
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОбщихГрафиков КАК ДанныеОбщихГрафиков
	|			ПО (ПериодыДействияОбщихГрафиковСотрудников.ГрафикРаботы = ДанныеОбщихГрафиков.ГрафикРаботы)
	|				И (ДанныеОбщихГрафиков.Дата МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ДанныеОбщихГрафиков.ПереходящаяЧастьПредыдущейСмены
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСмены
	|						И (ДанныеОбщихГрафиков.Дата <> ИсточникиПолученияДанныхУчетаВремени.ДатаНачала
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьПереходящуюЧастьСменыНаНачалоПериода)
	|					ИЛИ НЕ ДанныеОбщихГрафиков.ПереходящаяЧастьПредыдущейСмены
	|						И (ДанныеОбщихГрафиков.Дата <> ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания
	|							ИЛИ ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСменыНаКонецПериода)
	|						И ИсточникиПолученияДанныхУчетаВремени.ПолучатьОсновнуюЧастьСмены)
	|				И (ПериодыДействияОбщихГрафиковСотрудников.ДатаНачала <= ДанныеОбщихГрафиков.Дата)
	|				И (ПериодыДействияОбщихГрафиковСотрудников.ДатаОкончания >= ДанныеОбщихГрафиков.Дата
	|					ИЛИ ДанныеОбщихГрафиков.Дата = ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПериодыДействияОбщихГрафиковСотрудников.ДатаОкончания, ДЕНЬ), ДЕНЬ, 1)
	|						И ДанныеОбщихГрафиков.ПереходящаяЧастьПредыдущейСмены)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПараметрыПолученияДанныхПоСотрудникам.Сотрудник,
	|		ПараметрыПолученияДанныхПоСотрудникам.Месяц,
	|		ПараметрыПолученияДанныхПоСотрудникам.ДатаАктуальности,
	|		ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации,
	|		ГрафикиРаботыПоВидамВремени.План,
	|		ГрафикиРаботыПоВидамВремени.ВЦеломЗаПериод,
	|		ГрафикиРаботыПоВидамВремени.Дата,
	|		ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|		ГрафикиРаботыПоВидамВремени.Смена,
	|		ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены,
	|		ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены,
	|		ГрафикиРаботыПоВидамВремени.Территория,
	|		ГрафикиРаботыПоВидамВремени.УсловияТруда,
	|		ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
	|		ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма,
	|		ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма
	|	ИЗ
	|		ВТПараметрыПолученияДанныхПоСотрудникам КАК ПараметрыПолученияДанныхПоСотрудникам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|			ПО ПараметрыПолученияДанныхПоСотрудникам.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|				И ПараметрыПолученияДанныхПоСотрудникам.Месяц = ГрафикиРаботыПоВидамВремени.Месяц
	|				И ПараметрыПолученияДанныхПоСотрудникам.ПериодРегистрации = ГрафикиРаботыПоВидамВремени.ПериодРегистрации
	|				И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ПараметрыПолученияДанныхПоСотрудникам.ДатаНачала И ПараметрыПолученияДанныхПоСотрудникам.ДатаОкончания)
	|				И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> &РабочееВремя)
	|				И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|				И (ПараметрыПолученияДанныхПоСотрудникам.ПолучатьРассчитанныеДанныеФакт)) КАК ДанныеУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Сотрудник,
	|	ДанныеУчетаВремени.Месяц,
	|	ДанныеУчетаВремени.ДатаАктуальности,
	|	ДанныеУчетаВремени.ПериодРегистрации,
	|	ДанныеУчетаВремени.ВЦеломЗаПериод,
	|	ДанныеУчетаВремени.Период,
	|	ДанныеУчетаВремени.ВидУчетаВремени,
	|	ДанныеУчетаВремени.Территория,
	|	ДанныеУчетаВремени.УсловияТруда,
	|	ДанныеУчетаВремени.ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаВремени.ПереходящаяЧастьТекущейСмены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыДействияОбщихГрафиковСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОбщиеГрафики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОбщихГрафиков";
		
	// удалим лишние запросы
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросВТДанныеРегистровУчетаВремени.Текст);	
	ЗапросПолученияДанных = СхемаЗапроса.ПакетЗапросов[0];
		
	Если Не ПараметрыФормированияДанных.ПолучатьДанныеФакт Тогда
		ЗапросПолученияДанных.Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(6);
		ЗапросПолученияДанных.Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(3);
		ЗапросПолученияДанных.Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(2);
		ЗапросПолученияДанных.Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(1);
		ЗапросПолученияДанных.Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(0);
	КонецЕсли;
	
	ЗапросВТДанныеРегистровУчетаВремени.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();		
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросРезультат, ЗапросВТДанныеРегистровУчетаВремени);
	
	УстановитьУсловиеНеучитываемыеРегистраторы(ЗапросРезультат, ПараметрыФормированияДанных, "ДанныеРегистраУчетаВремени.Регистратор");
	УстановитьУсловиеОграниченияПериода(ЗапросРезультат, ПараметрыФормированияДанных, "ДанныеРегистраУчетаВремени.Период");
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);
	
	Если Не ПараметрыФормированияДанных.ПолучатьУсловияТрудаИТерритории Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ДанныеРегистраУчетаВремени.Территория", "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)");		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ГрафикиРаботыПоВидамВремени.Территория", "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)");
		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ДанныеРегистраУчетаВремени.УсловияТруда", "ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)");		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ГрафикиРаботыПоВидамВремени.УсловияТруда", "ЗНАЧЕНИЕ(Справочник.УсловияТруда.ПустаяСсылка)");
	ИначеЕсли Не ПараметрыФормированияДанных.УчитыватьТабельныеДанныеОТерриториях Тогда
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ДанныеРегистраУчетаВремени.Территория", "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)");		
		ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ГрафикиРаботыПоВидамВремени.Территория", "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)");	
	КонецЕсли;	
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТДанныеРегистровУчетаВремени", ПараметрыПостроения.ИмяВТРезультат);
	
	ЗапросРезультат.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Возврат ЗапросРезультат;	
КонецФункции	

Функция ЗапросВТДанныеРегистровУчетаВремениДляСКД(ПараметрыФормированияДанных, ПараметрыПостроения)
	ЗапросРезультат = Новый Запрос;
	
	ЗапросРезультат.Текст = 
	"ВЫБРАТЬ
	|	ДанныеУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеУчетаВремени.Месяц КАК Месяц,
	|	ДанныеУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|	ДанныеУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеУчетаВремени.План КАК План,
	|	ДанныеУчетаВремени.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ДанныеУчетаВремени.Период КАК Дата,
	|	ДанныеУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеУчетаВремени.Территория КАК Территория,
	|	ДанныеУчетаВремени.УсловияТруда КАК УсловияТруда,
	|	ИСТИНА КАК ЗарегистрированнаяТерритория,
	|	ЗНАЧЕНИЕ(Справочник.СменыРаботыСотрудников.ПустаяСсылка) КАК Смена,
	|	ЛОЖЬ КАК ПереходящаяЧастьПредыдущейСмены,
	|	ЛОЖЬ КАК ПереходящаяЧастьТекущейСмены,
	|	СУММА(ДанныеУчетаВремени.Дни) КАК Дни,
	|	СУММА(ДанныеУчетаВремени.Часы) КАК Часы,
	|	СУММА(ДанныеУчетаВремени.ДниПлан) КАК ДниПлан,
	|	СУММА(ДанныеУчетаВремени.ЧасыПлан) КАК ЧасыПлан,
	|	СУММА(ДанныеУчетаВремени.ДниНорма) КАК ДниНорма,
	|	СУММА(ДанныеУчетаВремени.ЧасыНорма) КАК ЧасыНорма
	|ПОМЕСТИТЬ ВТДанныеРегистровУчетаВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсточникиПолученияДанныхУчетаВремени.Сотрудник КАК Сотрудник,
	|		ИсточникиПолученияДанныхУчетаВремени.Месяц КАК Месяц,
	|		ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности КАК ДатаАктуальности,
	|		ИсточникиПолученияДанныхУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|		ЛОЖЬ КАК План,
	|		ЛОЖЬ КАК ВЦеломЗаПериод,
	|		ДанныеРегистраУчетаВремени.Период КАК Период,
	|		ДанныеРегистраУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ДанныеРегистраУчетаВремени.Территория КАК Территория,
	|		ДанныеРегистраУчетаВремени.УсловияТруда КАК УсловияТруда,
	|		ДанныеРегистраУчетаВремени.Дни КАК Дни,
	|		ДанныеРегистраУчетаВремени.Часы КАК Часы,
	|		0 КАК ДниПлан,
	|		0 КАК ЧасыПлан,
	|		0 КАК ДниНорма,
	|		0 КАК ЧасыНорма
	|	ИЗ
	|		ВТИсточникиПолученияДанныхУчетаВремени КАК ИсточникиПолученияДанныхУчетаВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеРегистраУчетаВремени
	|			ПО ИсточникиПолученияДанныхУчетаВремени.Сотрудник = ДанныеРегистраУчетаВремени.Сотрудник
	|				И (ДанныеРегистраУчетаВремени.Период МЕЖДУ ИсточникиПолученияДанныхУчетаВремени.ДатаНачала И ИсточникиПолученияДанныхУчетаВремени.ДатаОкончания)
	|				И (ИсточникиПолученияДанныхУчетаВремени.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеТабельногоУчета))
	|				И ИсточникиПолученияДанныхУчетаВремени.ДатаАктуальности >= ДанныеРегистраУчетаВремени.ПериодРегистрации
	|				И (&УсловиеОграничениеПериода)
	|				И (&УсловиеРегистратор)
	|				И (НЕ ИсточникиПолученияДанныхУчетаВремени.ПолучатьРассчитанныеДанныеФакт)
	|				И (&ПолучатьНормуВремениЗаПолныйМесяц)) КАК ДанныеУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремени.Сотрудник,
	|	ДанныеУчетаВремени.Месяц,
	|	ДанныеУчетаВремени.ДатаАктуальности,
	|	ДанныеУчетаВремени.ПериодРегистрации,
	|	ДанныеУчетаВремени.План,
	|	ДанныеУчетаВремени.ВЦеломЗаПериод,
	|	ДанныеУчетаВремени.Период,
	|	ДанныеУчетаВремени.ВидУчетаВремени,
	|	ДанныеУчетаВремени.Территория,
	|	ДанныеУчетаВремени.УсловияТруда";
		
	// удалим лишние запросы
	
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТДанныеРегистровУчетаВремени", ПараметрыПостроения.ИмяВТРезультат);
	
	УстановитьУсловиеОграниченияПериода(ЗапросРезультат, ПараметрыФормированияДанных, "ДанныеРегистраУчетаВремени.Период");
	УстановитьУсловиеНеучитываемыеРегистраторы(ЗапросРезультат, ПараметрыФормированияДанных, "ДанныеРегистраУчетаВремени.Регистратор");
	
	ЗапросРезультат.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросРезультат, "ПолучатьНормуВремениЗаПолныйМесяц", ПараметрыФормированияДанных.ПолучатьНормуВремениЗаПолныйМесяц);

	Возврат ЗапросРезультат;	
КонецФункции	

Функция ЗапросВТПериодыДействияОбщихГрафиковСотрудников(ПараметрыФормированияДанных)
	ЗапросВТПериодыДействияОбщихГрафиковСотрудников = Новый Запрос;

	ЗапросВТПериодыДействияОбщихГрафиковСотрудников.Текст =				   
 	"ВЫБРАТЬ РАЗЛИЧНЫЕ
 	|	ПараметрыПолученияДанныхОВремениПоДатам.Сотрудник,
 	|	ПараметрыПолученияДанныхОВремениПоДатам.Месяц КАК Месяц,
 	|	ПараметрыПолученияДанныхОВремениПоДатам.Месяц КАК Период,
 	|	ДОБАВИТЬКДАТЕ(ПараметрыПолученияДанныхОВремениПоДатам.Месяц, ДЕНЬ, 1) КАК ДатаНачала,
 	|	КОНЕЦПЕРИОДА(ПараметрыПолученияДанныхОВремениПоДатам.Месяц, МЕСЯЦ) КАК ДатаОкончания
 	|ПОМЕСТИТЬ ВТИзмеренияДатыДляСрезаГрафиков
 	|ИЗ
 	|	ВТИсточникиПолученияДанныхУчетаВремени КАК ПараметрыПолученияДанныхОВремениПоДатам
 	|ГДЕ
 	|	ПараметрыПолученияДанныхОВремениПоДатам.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОбщихГрафиков)";
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДатыДляСрезаГрафиков", "Сотрудник");
	
	ЗапросВТГрафикРаботыСотрудниковСрезПоследних = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрафикРаботыСотрудников", 
		Ложь,                         
		ОписаниеФильтра,
		,
		Истина);
																											
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТПериодыДействияОбщихГрафиковСотрудников, ЗапросВТГрафикРаботыСотрудниковСрезПоследних);													
	
	ЗапросВТГрафикРаботыСотрудниковСрезПервых = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГрафикРаботыСотрудников", 
		Ложь, 
		ОписаниеФильтра,
		,
		Ложь);
														
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТПериодыДействияОбщихГрафиковСотрудников, ЗапросВТГрафикРаботыСотрудниковСрезПервых);	
	
	ЗапросВТГрафикРаботыСотрудников = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ГрафикРаботыСотрудников", 
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТИзмеренияДатыДляСрезаГрафиков", "Сотрудник"));
											
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(ЗапросВТПериодыДействияОбщихГрафиковСотрудников, ЗапросВТГрафикРаботыСотрудников);													
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПервых.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПервых.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикРаботыСотрудниковСрезПервых.Период КАК Период,
	|	ИСТИНА КАК ТолькоПлановоеВремя
	|ПОМЕСТИТЬ ВТГрафикРаботыСотрудниковСрезПоследнихДополненный
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПервых КАК ГрафикРаботыСотрудниковСрезПервых
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	|		ПО ГрафикРаботыСотрудниковСрезПервых.Сотрудник = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
	|			И ГрафикРаботыСотрудниковСрезПервых.Период = ГрафикРаботыСотрудниковСрезПоследних.Период
	|ГДЕ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник ЕСТЬ NULL
	|	И &ПолучатьНормуВремениЗаПолныйМесяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы,
	|	ГрафикРаботыСотрудниковСрезПоследних.Период,
	|	ЛОЖЬ
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследних КАК ГрафикРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикРаботыСотрудниковСрезПоследних.Период КАК Период,
	|	ГрафикРаботыСотрудниковСрезПоследних.ТолькоПлановоеВремя КАК ТолькоПлановоеВремя
	|ПОМЕСТИТЬ ВТГрафикиСотрудниковСрезИДвижения
	|ИЗ
	|	ВТГрафикРаботыСотрудниковСрезПоследнихДополненный КАК ГрафикРаботыСотрудниковСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы,
	|	ГрафикРаботыСотрудников.Период,
	|	ЛОЖЬ
	|ИЗ
	|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыРасчетаВремениСотрудников.Сотрудник КАК Сотрудник,
	|	ПараметрыРасчетаВремениСотрудников.Месяц КАК Месяц,
	|	ПериодыГрафиков.Период КАК ДатаНачала,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПериодыГрафиковСлед.Период ЕСТЬ NULL
	|				ТОГДА ПараметрыРасчетаВремениСотрудников.ДатаОкончания
	|			ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыГрафиковСлед.Период, СЕКУНДА, -1)
	|		КОНЕЦ) КАК ДатаОкончания,
	|	ПериодыГрафиков.ТолькоПлановоеВремя КАК ТолькоПлановоеВремя
	|ПОМЕСТИТЬ ВТИнтервалыГрафиков
	|ИЗ
	|	ВТИзмеренияДатыДляСрезаГрафиков КАК ПараметрыРасчетаВремениСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиков
	|		ПО ПараметрыРасчетаВремениСотрудников.Сотрудник = ПериодыГрафиков.Сотрудник
	|			И ПараметрыРасчетаВремениСотрудников.Месяц <= ПериодыГрафиков.Период
	|			И ПараметрыРасчетаВремениСотрудников.ДатаОкончания >= ПериодыГрафиков.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ПериодыГрафиковСлед
	|		ПО ПараметрыРасчетаВремениСотрудников.Сотрудник = ПериодыГрафиковСлед.Сотрудник
	|			И (ПериодыГрафиков.Период < ПериодыГрафиковСлед.Период)
	|			И ПараметрыРасчетаВремениСотрудников.ДатаОкончания >= ПериодыГрафиковСлед.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыРасчетаВремениСотрудников.Сотрудник,
	|	ПараметрыРасчетаВремениСотрудников.Месяц,
	|	ПериодыГрафиков.ТолькоПлановоеВремя,
	|	ПериодыГрафиков.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнтервалыГрафиков.Сотрудник КАК Сотрудник,
	|	ИнтервалыГрафиков.Месяц КАК Месяц,
	|	ИнтервалыГрафиков.ДатаНачала КАК ДатаНачала,
	|	ИнтервалыГрафиков.ДатаОкончания КАК ДатаОкончания,
	|	ГрафикиСотрудниковСрезИДвижения.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ГрафикиРаботыСотрудников.Ссылка
	|		ИНАЧЕ ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма,
	|	ИнтервалыГрафиков.ТолькоПлановоеВремя КАК ТолькоПлановоеВремя
	|ПОМЕСТИТЬ ВТПериодыДействияОбщихГрафиковСотрудников
	|ИЗ
	|	ВТИнтервалыГрафиков КАК ИнтервалыГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиСотрудниковСрезИДвижения КАК ГрафикиСотрудниковСрезИДвижения
	|		ПО ИнтервалыГрафиков.Сотрудник = ГрафикиСотрудниковСрезИДвижения.Сотрудник
	|			И ИнтервалыГрафиков.ДатаНачала = ГрафикиСотрудниковСрезИДвижения.Период
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО (ГрафикиСотрудниковСрезИДвижения.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействияОбщихГрафиковСотрудников.Месяц КАК Месяц,
	|	ВЫБОР
	|		КОГДА &ОтноситьПереходящуюЧастьСменыКДнюНачала
	|			ТОГДА ДОБАВИТЬКДАТЕ(ПериодыДействияОбщихГрафиковСотрудников.Месяц, МЕСЯЦ, 1)
	|		ИНАЧЕ ПериодыДействияОбщихГрафиковСотрудников.Месяц
	|	КОНЕЦ КАК МесяцОкончание,
	|	ПериодыДействияОбщихГрафиковСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботыСотрудников.ПустаяСсылка)
	|			ТОГДА ПериодыДействияОбщихГрафиковСотрудников.ГрафикРаботы
	|		ИНАЧЕ ГрафикиРаботыСотрудников.ГрафикПолногоРабочегоВремени
	|	КОНЕЦ КАК ГрафикРаботыНорма
	|ПОМЕСТИТЬ ВТОбщиеГрафики
	|ИЗ
	|	ВТПериодыДействияОбщихГрафиковСотрудников КАК ПериодыДействияОбщихГрафиковСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыДействияОбщихГрафиковСотрудников.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИзмеренияДатыДляСрезаГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикРаботыСотрудниковСрезПервых
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикРаботыСотрудниковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикРаботыСотрудниковСрезПоследнихДополненный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГрафикиСотрудниковСрезИДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИнтервалыГрафиков";
	
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросВТПериодыДействияОбщихГрафиковСотрудников, "ПолучатьНормуВремениЗаПолныйМесяц", ПараметрыФормированияДанных.ПолучатьНормуВремениЗаПолныйМесяц);
	УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(ЗапросВТПериодыДействияОбщихГрафиковСотрудников, "ОтноситьПереходящуюЧастьСменыКДнюНачала", ПараметрыФормированияДанных.ОтноситьПереходящуюЧастьСменыКДнюНачала);

	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(ЗапросВТПериодыДействияОбщихГрафиковСотрудников.Текст, ТекстЗапроса); 
	
	Возврат ЗапросВТПериодыДействияОбщихГрафиковСотрудников;	
КонецФункции	

Функция ЗапросВТДанныеОбщихГрафиков(ПараметрыФормированияДанных)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбщиеГрафики.ГрафикРаботы КАК ГрафикРаботы,
	|	ОбщиеГрафики.Месяц КАК Месяц,
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0) КАК Дней,
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0) КАК Часов,
	|	ВЫБОР
	|		КОГДА ОбщиеГрафики.ГрафикРаботы = ОбщиеГрафики.ГрафикРаботыНорма
	|			ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейНорма,
	|	ВЫБОР
	|		КОГДА ОбщиеГрафики.ГрафикРаботы = ОбщиеГрафики.ГрафикРаботыНорма
	|			ТОГДА ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовНорма,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ГрафикиРаботыПоВидамВремени.Смена КАК Смена,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя КАК ОсновноеВремя
	|ПОМЕСТИТЬ ВТДанныеОбщихГрафиков
	|ИЗ
	|	ВТОбщиеГрафики КАК ОбщиеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ОбщиеГрафики.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ ОбщиеГрафики.Месяц И ОбщиеГрафики.МесяцОкончание)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ОбщиеГрафики.Месяц И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОбщиеГрафики.Месяц, МЕСЯЦ), ДЕНЬ, 1))
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (&УсловиеОграничениеПериода)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> &РабочееВремя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщиеГрафики.ГрафикРаботы,
	|	ОбщиеГрафики.Месяц,
	|	0,
	|	0,
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ОсновноеЗначениеНорма, 0),
	|	ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначениеНорма, 0),
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
	|	ЗНАЧЕНИЕ(Справочник.СменыРаботыСотрудников.ПустаяСсылка),
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьПредыдущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ПереходящаяЧастьТекущейСмены,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени.ОсновноеВремя
	|ИЗ
	|	ВТОбщиеГрафики КАК ОбщиеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ОбщиеГрафики.ГрафикРаботыНорма = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ ОбщиеГрафики.Месяц И ОбщиеГрафики.МесяцОкончание)
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ОбщиеГрафики.Месяц И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОбщиеГрафики.Месяц, МЕСЯЦ), ДЕНЬ, 1))
	|			И (НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
	|			И (&УсловиеОграничениеПериода)
	|			И (ОбщиеГрафики.ГрафикРаботыНорма <> ОбщиеГрафики.ГрафикРаботы)
	|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> &РабочееВремя)";

	УстановитьУсловиеОграниченияПериода(Запрос, ПараметрыФормированияДанных, "ГрафикиРаботыПоВидамВремени.Дата");	
	Возврат Запрос;
КонецФункции

Процедура УстановитьУсловиеОграниченияПериода(Запрос, ПараметрыФормированияДанных, ИмяПоляПериод, ОграничиватьПоМесяцу = Ложь)
	Если Не ЗначениеЗаполнено(ПараметрыФормированияДанных.ДатаНачала)
		Или Не ЗначениеЗаполнено(ПараметрыФормированияДанных.ДатаОкончания) Тогда 

		ТекстУсловия = "ИСТИНА";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграничениеПериода", ТекстУсловия);
	Иначе
		Если ОграничиватьПоМесяцу Тогда
			ТекстУсловия = ИмяПоляПериод + " МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ДатаОкончания, МЕСЯЦ)";
		Иначе
			ТекстУсловия = ИмяПоляПериод + " МЕЖДУ &ДатаНачала И ДОБАВИТЬКДАТЕ(&ДатаОкончания, ДЕНЬ, 1)";
		КонецЕсли;		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОграничениеПериода", ТекстУсловия);
		
		УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ДатаНачала", ПараметрыФормированияДанных.ДатаНачала);
		УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, "ДатаОкончания", ПараметрыФормированияДанных.ДатаОкончания);

	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьУсловиеНеучитываемыеРегистраторы(Запрос, ПараметрыФормированияДанных, ИмяПоляРегистратор)
	Если ПараметрыФормированияДанных.НеучитываемыеРегистраторы = Неопределено
		Или ПараметрыФормированияДанных.НеучитываемыеРегистраторы.Количество() = 0 Тогда 
		
		ТекстУсловия = "ИСТИНА";
	ИначеЕсли ТипЗнч(ПараметрыФормированияДанных.НеучитываемыеРегистраторы) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("НеучитываемыеРегистраторы", ПараметрыФормированияДанных.НеучитываемыеРегистраторы);
		
		ТекстУсловия = ИмяПоляРегистратор + " НЕ В (&НеучитываемыеРегистраторы)";
	Иначе
		ТекстУсловия = ИмяПоляРегистратор + " НЕ В (&" + ПараметрыФормированияДанных.НеучитываемыеРегистраторы + ")";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", ТекстУсловия);	
КонецПроцедуры	

Функция УстановитьПараметрВЗапросПолученияДанныхУчетаВремени(Запрос, ИмяПараметра, Знач ЗначениеПараметра)
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, "&", "");
	КонецЕсли;	
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&" + ИмяПараметра, "&" + ЗначениеПараметра); 	
	Иначе
		Запрос.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);	
	КонецЕсли;		
КонецФункции	

Функция ДобавитьЗаписьСводныхДанныхУчетаВремени(Движения, СтрокаДанных, ПериодРегистрации)
	ЗаписьНабора = Движения.ДанныеСводногоУчетаРабочегоВремениСотрудников.Добавить();
	ЗаписьНабора.Период = СтрокаДанных.Дата;                                                                                                                 
	ЗаписьНабора.Сотрудник = СтрокаДанных.Сотрудник;
	ЗаписьНабора.Организация = СтрокаДанных.Организация;
	ЗаписьНабора.ВидУчетаВремени = ПолучитьЗначениеСвойства(СтрокаДанных, "ВидВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	ЗаписьНабора.Дни = ПолучитьЗначениеСвойства(СтрокаДанных, "Дней", 1);
	ЗаписьНабора.Часы = ПолучитьЗначениеСвойства(СтрокаДанных, "Часов", 0);
	Если ЗаписьНабора.Дни = 0 И ЗаписьНабора.Часы > 0 Тогда 
		ЗаписьНабора.Дни = 1;
	КонецЕсли;	
	ЗаписьНабора.ПериодРегистрации = ?(ПериодРегистрации = '00010101', НачалоМесяца(ЗаписьНабора.Период), ПериодРегистрации);
	
	Движения.ДанныеСводногоУчетаРабочегоВремениСотрудников.Записывать = Истина;	
	
	Возврат ЗаписьНабора;
КонецФункции

Функция ДобавитьЗаписьОперативныхДанныхУчетаВремени(Движения, СтрокаДанных, ПериодРегистрации, ВидыДанныхДляВидовВремени)	
	ЗаписьНабора = Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Добавить();
	ЗаписьНабора.Период = СтрокаДанных.Дата;                                                                                                                 
	ЗаписьНабора.Сотрудник = СтрокаДанных.Сотрудник;
	ЗаписьНабора.Организация = СтрокаДанных.Организация;
	ЗаписьНабора.ВидУчетаВремени = ПолучитьЗначениеСвойства(СтрокаДанных, "ВидВремени", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Явка"));
	ЗаписьНабора.ВидДанных = ВидыДанныхДляВидовВремени[ЗаписьНабора.ВидУчетаВремени];
	
	Если ЗаписьНабора.ВидДанных.Пустая() Тогда
		ЗаписьНабора.ВидДанных = Перечисления.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета;
	КонецЕсли;	
	
	ЗаписьНабора.Дни = ПолучитьЗначениеСвойства(СтрокаДанных, "Дней", 1);
	ЗаписьНабора.Часы = ПолучитьЗначениеСвойства(СтрокаДанных, "Часов", 0);
	Если ЗаписьНабора.Дни = 0 И ЗаписьНабора.Часы > 0 Тогда 
		ЗаписьНабора.Дни = 1;
	КонецЕсли;	
	ЗаписьНабора.ПериодРегистрации = ?(ПериодРегистрации = '00010101', НачалоМесяца(ЗаписьНабора.Период), ПериодРегистрации);
	
	Движения.ДанныеОперативногоУчетаРабочегоВремениСотрудников.Записывать = Истина;	
	
	Возврат ЗаписьНабора;
КонецФункции

Функция ВидыДанныхДляВидовВремени()
	ВидыДанныхДляВидовВремени = Новый Соответствие;
	
	Сверхурочные = Новый Массив;
	Сверхурочные.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Сверхурочные.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сверхурочные", Сверхурочные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыИспользованияРабочегоВремени.Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыИспользованияРабочегоВремени.ОсновноеВремя В (&Сверхурочные)
	|			ТОГДА значение(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДополнительноеВнутрисменноеВремя)
	|		ИНАЧЕ значение(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета)
	|	КОНЕЦ КАК ВидДанных
	|ИЗ
	|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыИспользованияРабочегоВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыДанныхДляВидовВремени.Вставить(Выборка.Ссылка, Выборка.ВидДанных); 	
	КонецЦикла;	
	
	Возврат ВидыДанныхДляВидовВремени;
КонецФункции	

Процедура КонтрольИзмененияДанныхРегистровПередЗаписью(НаборЗаписей) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицИзмененияРегистра", МенеджерВременныхТаблиц);
	
	Запрос = ЗапросВыбораДанныхРегистраПоРегистратору(НаборЗаписей.Метаданные(), "ВТСтарыйНабор");
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура КонтрольИзмененияДанныхРегистровПриЗаписи(НаборЗаписей, ДанныеИзменены) Экспорт
	Запрос = ЗапросКонтроляИзмененияДанныхРегистра(НаборЗаписей.Метаданные());	
	
	Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение);
	Запрос.МенеджерВременныхТаблиц = НаборЗаписей.ДополнительныеСвойства.МенеджерВременныхТаблицИзмененияРегистра;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ДанныеИзменены = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеИзменены = Истина;
	КэшТаблицаИзменившихсяДанных = Результат.Выгрузить();
	НаборЗаписей.ДополнительныеСвойства.Вставить("КэшТаблицаИзменившихсяДанных", КэшТаблицаИзменившихсяДанных);
	
КонецПроцедуры

// Возвращает признак сформированности таблицы изменений
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Функция ТаблицаИзменившихсяДанныхНабораСформирована(НаборЗаписейРегистра) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(НаборЗаписейРегистра) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НаборЗаписейРегистра.ДополнительныеСвойства.Свойство("КэшТаблицаИзменившихсяДанных");
	
КонецФункции

// Возвращает таблицу изменений регистра
//
// Параметры:
//	НаборЗаписейРегистра - Набор записей регистра
Функция ТаблицаИзменившихсяДанныхНабора(НаборЗаписейРегистра) Экспорт
	КэшТаблицаИзменившихсяДанных = Неопределено;	
	
	Если НаборЗаписейРегистра.ДополнительныеСвойства.Свойство("КэшТаблицаИзменившихсяДанных", КэшТаблицаИзменившихсяДанных) Тогда
		Возврат КэшТаблицаИзменившихсяДанных.Скопировать();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗапросВыбораДанныхРегистраПоРегистратору(МетаданныеРегистра, ИмяВТРезультат = Неопределено, Сотрудники = Неопределено)
		
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	
	ДобавитьОператорВыбораДанныхРегистраПоРегистратору(ЗапросСхемы, МетаданныеРегистра, Сотрудники);
		
	Если ИмяВТРезультат <> Неопределено Тогда
		ЗапросСхемы.ТаблицаДляПомещения = ИмяВТРезультат;			
	КонецЕсли;	
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	
	Если Сотрудники <> Неопределено Тогда
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли;	
	
	Возврат Запрос;
КонецФункции

Функция ЗапросКонтроляИзмененияДанныхРегистра(МетаданныеРегистра)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ПоляРегистра КАК ПоляРегистра,
	|	НАЧАЛОПЕРИОДА(ВложенныйЗапрос.Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Набор.Период КАК Период,
	|		Набор.ПоляРегистра КАК ПоляРегистра,
	|		Набор.РесурсыРегистра КАК РесурсыРегистра
	|	ИЗ
	|		ВТСтарыйНабор КАК Набор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Набор.Период,
	|		Набор.ПоляРегистра,
	|		Набор.РесурсыРегистра
	|	ИЗ
	|		&НовыйНабор КАК Набор
	|	ГДЕ
	|		Набор.Регистратор = &Регистратор) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.ПоляРегистра
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.РесурсыРегистра) <> 0";
	
	ПоряВложенногоЗапроса = "";
	ПоляРесурсыВложенногоЗапроса = "";
	ПоляРесурсыВложенногоЗапросаВычитаемые = "";
	ПоляВнешнегоЗапроса = "";
	ТекстУсловияИмеющие = "";
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ПоряВложенногоЗапроса = ПоряВложенногоЗапроса + "Набор." + Измерение.Имя + "," + Символы.ПС;
		ПоляВнешнегоЗапроса = ПоляВнешнегоЗапроса + "ВложенныйЗапрос." + Измерение.Имя + "," + Символы.ПС;
	КонецЦикла;	
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ПоряВложенногоЗапроса = ПоряВложенногоЗапроса + "Набор." + Реквизит.Имя + "," + Символы.ПС;
		ПоляВнешнегоЗапроса = ПоляВнешнегоЗапроса + "ВложенныйЗапрос." + Реквизит.Имя + "," + Символы.ПС;
	КонецЦикла;	
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ПоляРесурсыВложенногоЗапроса = ПоляРесурсыВложенногоЗапроса + "Набор." + Ресурс.Имя + "," + Символы.ПС;
		ПоляРесурсыВложенногоЗапросаВычитаемые = ПоляРесурсыВложенногоЗапросаВычитаемые + "-Набор." + Ресурс.Имя + "," + Символы.ПС;
		ТекстУсловияИмеющие = ТекстУсловияИмеющие + "СУММА(ВложенныйЗапрос." + Ресурс.Имя + ") <> 0 ИЛИ" + Символы.ПС;
	КонецЦикла;	
	
	ПоряВложенногоЗапроса = Сред(ПоряВложенногоЗапроса, 1, СтрДлина(ПоряВложенногоЗапроса) - 1);
	ПоляРесурсыВложенногоЗапроса = Сред(ПоляРесурсыВложенногоЗапроса, 1, СтрДлина(ПоляРесурсыВложенногоЗапроса) - 2);
	ПоляРесурсыВложенногоЗапросаВычитаемые = Сред(ПоляРесурсыВложенногоЗапросаВычитаемые, 1, СтрДлина(ПоляРесурсыВложенногоЗапросаВычитаемые) - 2);

	ПоляВнешнегоЗапроса = Сред(ПоляВнешнегоЗапроса, 1, СтрДлина(ПоляВнешнегоЗапроса) - 2);
	ТекстУсловияИмеющие = Сред(ТекстУсловияИмеющие, 1, СтрДлина(ТекстУсловияИмеющие) - 4);

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НовыйНабор", МетаданныеРегистра.ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Набор.ПоляРегистра КАК ПоляРегистра,", ПоряВложенногоЗапроса); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Набор.РесурсыРегистра КАК РесурсыРегистра", ПоляРесурсыВложенногоЗапроса); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Набор.ПоляРегистра,", ПоряВложенногоЗапроса); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Набор.РесурсыРегистра", ПоляРесурсыВложенногоЗапросаВычитаемые); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапрос.ПоляРегистра", ПоляВнешнегоЗапроса); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(ВложенныйЗапрос.РесурсыРегистра) <> 0", ТекстУсловияИмеющие); 
	
	Возврат Новый Запрос(ТекстЗапроса);
КонецФункции

Функция ДобавитьОператорВыбораДанныхРегистраПоРегистратору(ЗапросСхемы, МетаданныеРегистра, Сотрудники = Неопределено)
	ОператорВыбрать = ЗапросСхемы.Операторы[0];
	
	ОператорВыбрать.Источники.Добавить(МетаданныеРегистра.ПолноеИмя(), МетаданныеРегистра.Имя);
	
	ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + ".Регистратор");
	ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + ".Период");
	ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + ".Активность");
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + "." + Измерение.Имя);
	КонецЦикла;	
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + "." + Ресурс.Имя);
	КонецЦикла;	
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ОператорВыбрать.ВыбираемыеПоля.Добавить(МетаданныеРегистра.Имя + "." + Реквизит.Имя);
	КонецЦикла;	
	
	ОператорВыбрать.Отбор.Добавить(МетаданныеРегистра.Имя + ".Регистратор = &Регистратор");
	
	Если Сотрудники <> Неопределено Тогда
		ОператорВыбрать.Отбор.Добавить(МетаданныеРегистра.Имя + ".Сотрудник В (&Сотрудники)");
	КонецЕсли;	
	
	Возврат ОператорВыбрать;	
КонецФункции

Функция МетаданныеРегистровИсточниковДанныхУчетаВремени()
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.ВытесняемоеПлановоеВремяСотрудников);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ДанныеИндивидуальныхГрафиковСотрудников);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников);
	Регистры.Добавить(Метаданные.РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников);
	
	Возврат Регистры;
КонецФункции	

#КонецОбласти

#Область РаботаСРегистромГрафикиРаботыПоВидамВремени

// Формирует записи в регистре сведений "ГрафикиРаботыПоВидамВремени" 
// на основе данных регистров учета рабочего времени и данных общих графиков сотрудников.
//
// Параметры:
//		ТаблицаСотрудников - таблица значений со следующими колонками:
//			Сотрудник - сотрудник, по которому необходимо рассчитать время.
//			ПериодДействия - начало месяца, за который необходимо рассчитывать отработанное время.
//			ПериодРегистрации - период регистрации времени (период до которого включительно будут учитываться записи о
//			                    времени).
//
Процедура СформироватьЗаписиРабочегоВремениСотрудников(ТаблицаСотрудников, Знач ДатаНачала = Неопределено, Знач ДатаОкончания = Неопределено) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоМесяца(ДатаНачала);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ДатаОкончания);
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ВыборкаДляЗаполнения = ВыборкаДляЗаполненияРегистраРассчитанныхДанных(МенеджерВременныхТаблиц, ТаблицаСотрудников, ДатаНачала, ДатаОкончания);
	ЗаполнитьРегистрРассчитанныхДанных(ВыборкаДляЗаполнения);		
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Функция ВыборкаДляЗаполненияРегистраРассчитанныхДанных(МенеджерВременныхТаблиц, ТаблицаСотрудников, ДатаНачала = Неопределено, ДатаОкончания = Неопределено)
	ТаблицаСотрудников.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));	
	
	Для Каждого СтрокаТаблицыСотрудников Из ТаблицаСотрудников Цикл
		СтрокаТаблицыСотрудников.Месяц = СтрокаТаблицыСотрудников.ПериодДействия; 
		СтрокаТаблицыСотрудников.ДатаНачала = НачалоМесяца(СтрокаТаблицыСотрудников.Месяц);
		СтрокаТаблицыСотрудников.ДатаОкончания = КонецМесяца(СтрокаТаблицыСотрудников.Месяц);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.Сотрудник,
	|	ТаблицаСотрудников.Месяц,
	|	ТаблицаСотрудников.ДатаНачала,
	|	ТаблицаСотрудников.ДатаОкончания,
	|	ТаблицаСотрудников.ПериодРегистрации КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияДанных = ПараметрыПолученияДанныхУчетаВремени();
	
	ПараметрыПолученияДанных.ДатаНачала = ДатаНачала;
	ПараметрыПолученияДанных.ДатаОкончания = ДатаОкончания;
	ПараметрыПолученияДанных.УчитыватьТолькоИндивидуальныеСведения = Истина;
	ПараметрыПолученияДанных.ПолучатьДанныеФакт = Истина;	
	ПараметрыПолученияДанных.ПолучатьДанныеПлан = Ложь;
	ПараметрыПолученияДанных.ПолучатьДанныеНорма = Истина;
	ПараметрыПолученияДанных.ИспользоватьУжеРассчитанныеДанные = Истина;
	ПараметрыПолученияДанных.ФормироватьПриНаличииРассчитанныхДанных = Ложь;
	ПараметрыПолученияДанных.ПолучатьУсловияТрудаИТерритории = Истина;
	ПараметрыПолученияДанных.ПолучатьНормуВремениЗаПолныйМесяц = Истина;
	ПараметрыПолученияДанных.ИмяВТРезультат = "ВТДанныеДляЗаполненияРегистраРассчитанныхДанных";
			
	СоздатьВТДанныеУчетаРабочегоВремениСотрудников(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанных);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник КАК ГрафикРаботы,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дата КАК Дата,
	|	ДанныеУчетаРабочегоВремениСотрудников.ВЦеломЗаПериод КАК ВЦеломЗаПериод,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дней КАК ОсновноеЗначение,
	|	ДанныеУчетаРабочегоВремениСотрудников.Часов КАК ДополнительноеЗначение,
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеУчетаРабочегоВремениСотрудников.Месяц КАК Месяц,
	|	ДанныеУчетаРабочегоВремениСотрудников.НормаЧасов КАК ДополнительноеЗначениеНорма,
	|	ВЫБОР
	|		КОГДА ДанныеУчетаРабочегоВремениСотрудников.НормаЧасов > 0
	|				И ДанныеУчетаРабочегоВремениСотрудников.НормаДней > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновноеЗначениеНорма,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеУчетаРабочегоВремениСотрудников.План КАК План,
	|	ДанныеУчетаРабочегоВремениСотрудников.Территория КАК Территория,
	|	ДанныеУчетаРабочегоВремениСотрудников.УсловияТруда КАК УсловияТруда,
	|	ДанныеУчетаРабочегоВремениСотрудников.ЗарегистрированнаяТерритория КАК ЗарегистрированнаяТерритория,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены КАК ПереходящаяЧастьПредыдущейСмены,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьТекущейСмены КАК ПереходящаяЧастьТекущейСмены,
	|	ДанныеУчетаРабочегоВремениСотрудников.Смена КАК Смена,
	|	ЛОЖЬ КАК ВремяВЧасах
	|ИЗ
	|	ВТДанныеДляЗаполненияРегистраРассчитанныхДанных КАК ДанныеУчетаРабочегоВремениСотрудников
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеУчетаРабочегоВремениСотрудников.Сотрудник,
	|	ДанныеУчетаРабочегоВремениСотрудников.Месяц,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПериодРегистрации,
	|	ДанныеУчетаРабочегоВремениСотрудников.Дата,
	|	ДанныеУчетаРабочегоВремениСотрудников.ВидУчетаВремени,
	|	ДанныеУчетаРабочегоВремениСотрудников.ПереходящаяЧастьПредыдущейСмены УБЫВ";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

Функция ЗаполнитьРегистрРассчитанныхДанных(ВыборкаДляЗаполнения) Экспорт 	
	Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("ГрафикРаботы") Цикл
		Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("Месяц") Цикл
			Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				Набор = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				Набор.Отбор.ГрафикРаботы.Установить(ВыборкаДляЗаполнения.ГрафикРаботы);
				Набор.Отбор.Месяц.Установить(ВыборкаДляЗаполнения.Месяц);
				Набор.Отбор.ПериодРегистрации.Установить(ВыборкаДляЗаполнения.ПериодРегистрации);

		    	Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("Дата") Цикл
		        	Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("ВидУчетаВремени") Цикл
		            	Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("ПереходящаяЧастьПредыдущейСмены") Цикл
		                	Пока ВыборкаДляЗаполнения.СледующийПоЗначениюПоля("ПереходящаяЧастьТекущейСмены") Цикл
		                    	ЭтоПерваяСтрока = Истина;
								Пока ВыборкаДляЗаполнения.Следующий() Цикл
									СтрокаНабора = Набор.Добавить();
									ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаДляЗаполнения);
									Если Не ЭтоПерваяСтрока Тогда
										СтрокаНабора.ОсновноеЗначение = 0;
										СтрокаНабора.ОсновноеЗначениеНорма = 0;
										СтрокаНабора.ДополнительноеЗначениеНорма = 0;
									КонецЕсли;
									ЭтоПерваяСтрока = Ложь;
								КонецЦикла;									
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				Набор.Записать();
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;	
КонецФункции

Процедура РегистрРассчитанныхДанныхПриИзмененииИсточниковДанных(НаборЗаписей) Экспорт
	
	ТаблицаИзменившихсяДанных = НаборЗаписей.ТаблицаИзменившихсяДанныхНабора();
	Если ТаблицаИзменившихсяДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияИзмерений.Сотрудник,
	|	ЗначенияИзмерений.Месяц,
	|	ГрафикиРаботыПоВидамВремени.ПериодРегистрации
	|ИЗ
	|	ВТКлючиИзменившихсяДанных КАК ЗначенияИзмерений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО &ШаблонУсловияСвязиПоСотрудникуИМесяцу
	|			И ЗначенияИзмерений.ПериодРегистрации <= ГрафикиРаботыПоВидамВремени.ПериодРегистрации";
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ГрафикиРаботыПоВидамВремени");
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеПериода = ЗарплатаКадрыПериодическиеРегистры.ОписаниеПериодаДляСоздатьВТИмяРегистра();
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		ТаблицаИзменившихсяДанных,
		"ГрафикРаботы, Месяц");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ГрафикРаботы", "Сотрудник");
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ЗначенияИзмерений", "ГрафикиРаботыПоВидамВремени");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ПериодРегистрации",
		ОператорЗапроса);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакетаЗапросов, 
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
		
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов, Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		Набор.Отбор.ГрафикРаботы.Установить(Выборка.Сотрудник);
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		Набор.Отбор.ПериодРегистрации.Установить(Выборка.ПериодРегистрации);
		
		Набор.Записать();
	КонецЦикла;		
КонецПроцедуры

Процедура ПриИзмененииГрафиковСотрудников(ИзмененияГрафиковСотрудников) Экспорт
	Если ИзмененияГрафиковСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИзменений", ИзмененияГрафиковСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Сотрудник,
	|	ТаблицаИзменений.Период
	|ПОМЕСТИТЬ ВТТаблицаИзменений
	|ИЗ
	|	&ТаблицаИзменений КАК ТаблицаИзменений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзменений.Сотрудник,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ТаблицаИзменений.Период, МЕСЯЦ)) КАК МесяцИзменения
	|ПОМЕСТИТЬ ВТМинимальныеПериодыИзменений
	|ИЗ
	|	ВТТаблицаИзменений КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Месяц
	|ИЗ
	|	ВТМинимальныеПериодыИзменений КАК МинимальныеПериодыИзменений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО МинимальныеПериодыИзменений.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|			И МинимальныеПериодыИзменений.МесяцИзменения <= ГрафикиРаботыПоВидамВремени.Месяц";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		Набор.Отбор.ГрафикРаботы.Установить(Выборка.ГрафикРаботы);
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		
		Набор.Записать();	
	КонецЦикла;	
КонецПроцедуры	

Процедура ПриИзмененииДанныхОбщегоГрафика(МенеджерВременныхТаблиц, ГрафикРаботы) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(МесяцыИзмененияОбщегоГрафика.Месяц, МЕСЯЦ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(МесяцыИзмененияОбщегоГрафика.Месяц, МЕСЯЦ) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыПолученияГрафиков
	|ИЗ
	|	ВТМесяцыИзмененияОбщегоГрафика КАК МесяцыИзмененияОбщегоГрафика";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПериодыПолученияГрафиков");
	
	ПараметрыПолученияГрафиков = ЗарплатаКадрыПериодическиеРегистры.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПолученияГрафиков.ВключатьЗаписиНаНачалоПериода = Истина;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПолученияГрафиков.Отборы, "ГрафикРаботы", "=", ГрафикРаботы);
	
	ЗарплатаКадрыПериодическиеРегистры.СоздатьВТИмяРегистра("ГрафикРаботыСотрудников", МенеджерВременныхТаблиц, Ложь, ОписаниеФильтра, ПараметрыПолученияГрафиков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	НАЧАЛОПЕРИОДА(ГрафикРаботыСотрудников.Период, МЕСЯЦ) КАК Месяц
	|ПОМЕСТИТЬ ВТСотрудникиСИзменившимсяГрафиком
	|ИЗ
	|	ВТГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиСИзменившимсяГрафиком.Сотрудник КАК Сотрудник,
	|	СотрудникиСИзменившимсяГрафиком.Месяц КАК Месяц
	|ИЗ
	|	ВТСотрудникиСИзменившимсяГрафиком КАК СотрудникиСИзменившимсяГрафиком
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|			ГДЕ
	|				ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СотрудникиСИзменившимсяГрафиком.Сотрудник
	|				И ГрафикиРаботыПоВидамВремени.Месяц = СотрудникиСИзменившимсяГрафиком.Месяц)";
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
		Набор.Отбор.ГрафикРаботы.Установить(Выборка.Сотрудник);
		Набор.Отбор.Месяц.Установить(Выборка.Месяц);
		
		Набор.Записать();	
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ПерерасчетЗарплаты.ЗарегистрироватьПредварительныеПерерасчетыПриИзмененииОбщихГрафиков(Результат[0].Выгрузить(), ГрафикРаботы);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСправочникаВидыИспользованияРабочегоВремени

Процедура ВидыИспользованияРабочегоВремениОбработкаПроверкиЗаполнения(ПроверяемыйОбъект, Отказ, ПроверяемыеРеквизиты, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыИспользованияРабочегоВремениОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ИсключатьРегистрируемыеОтдельнымиДокументами") 
		И Параметры.ИсключатьРегистрируемыеОтдельнымиДокументами = Истина Тогда
		// Необходимо исключить из формируемого списка виды отсутствий, для регистрации которых предназначены
		// специализированные документы.
		ЗаполнитьДанныеВыбора(ДанныеВыбора, Параметры);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидыИспользованияРабочегоВремениУстановитьДоступностьЭлементов(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОсновноеВремя",
		"Видимость",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ОсновноеВремя",
		"Доступность",
		Не Форма.Объект.Предопределенный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БуквенныйКод",
		"Видимость",
		ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БуквКодБюджетный",
		"Видимость",
		ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	
КонецПроцедуры

Процедура СоздатьВидыИспользованияРабочегоВремениПоНастройкам(НастройкиРасчетаЗарплаты) Экспорт
	
	НастройкиУчетаВремени = НастройкиУчетаВремени();
	
	Если НастройкиРасчетаЗарплаты = Неопределено Тогда
		НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	КонецЕсли;
	
	ВыделятьНерабочиеДниОтдельнымВидомВремени = Константы.ВыделятьНерабочиеДниОтдельнымВидомВремени.Получить();

	ОбновитьПовторноИспользуемыеЗначения();
	
	// Установка реквизитов предопределенных элементов.
	
	// АПК:1297-выкл Коды и наименования не локализуются, т.к. являются частью регламентированных форм, применяемых в РФ.
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "РабочееВремя";
	ОписаниеВидаВремени.Наименование = "Рабочее время";
	ОписаниеВидаВремени.БуквенныйКод = "";
	ОписаниеВидаВремени.ЦифровойКод = "";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Рабочее время';
													|en = 'Working hours'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Явка";
	ОписаниеВидаВремени.Наименование = "Явка";
	ОписаниеВидаВремени.БуквенныйКод = "Я";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Я";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "";
	ОписаниеВидаВремени.ЦифровойКод = "01";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Продолжительность работы в дневное время';
													|en = 'Duration of day work '");
	ОписаниеВидаВремени.РабочееВремя = Истина;
	ОписаниеВидаВремени.Целосменное = Ложь;

	ВидВремениЯвка = УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени); 

	Если НастройкиУчетаВремени.УчитыватьНочныеЧасы Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "РаботаНочныеЧасы";
		ОписаниеВидаВремени.Наименование = "Ночные часы";
		ОписаниеВидаВремени.БуквенныйКод = "Н";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "Н";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "Н";
		ОписаниеВидаВремени.ЦифровойКод = "02";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Ночные часы';
														|en = 'Night hours'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("РаботаНочныеЧасы");
	КонецЕсли;

	ВидВремениПраздники = Неопределено;
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Праздники";
		ОписаниеВидаВремени.Наименование = "Праздники";
		ОписаниеВидаВремени.БуквенныйКод = "РВ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "РП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "РП";
		ОписаниеВидаВремени.ЦифровойКод = "03";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Праздники';
														|en = 'Holidays'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;

		ВидВремениПраздники = УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("Праздники");
	КонецЕсли;	

	// Виды расчета, связанные с использованием отгулов.
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуПраздничныхИВыходных Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПраздникиБезПовышеннойОплаты";
		ОписаниеВидаВремени.Наименование = "Праздники без повышенной оплаты";
		ОписаниеВидаВремени.БуквенныйКод = "ПН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПН";
		ОписаниеВидаВремени.ЦифровойКод = "42";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Праздники без повышенной оплаты';
														|en = 'Holidays without increased payment'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;
		Если НЕ ВидВремениПраздники = Неопределено Тогда
			ОписаниеВидаВремени.ОсновноеВремя = ВидВремениПраздники.Ссылка;
		КонецЕсли;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("ПраздникиБезПовышеннойОплаты");
	КонецЕсли;	
	
	ВидВремениСверхурочные = Неопределено;
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Сверхурочные";
		ОписаниеВидаВремени.Наименование = "Сверхурочно";
		ОписаниеВидаВремени.БуквенныйКод = "С";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "С";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "С";
		ОписаниеВидаВремени.ЦифровойКод = "04";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Продолжительность сверхурочной работы';
														|en = 'Overtime duration'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;

		ВидВремениСверхурочные = УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("Сверхурочные");
	КонецЕсли;	
	
	Если НастройкиРасчетаЗарплаты.ИспользоватьОтгулы И НастройкиРасчетаЗарплаты.ИспользоватьОплатуСверхурочных Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "СверхурочныеБезПовышеннойОплаты";
		ОписаниеВидаВремени.Наименование = "Сверхурочные без повышенной оплаты";
		ОписаниеВидаВремени.БуквенныйКод = "СН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "СН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "СН";
		ОписаниеВидаВремени.ЦифровойКод = "43";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Сверхурочные без повышенной оплаты';
														|en = 'Overtime without increased payment'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;
		Если НЕ ВидВремениСверхурочные = Неопределено Тогда
			ОписаниеВидаВремени.ОсновноеВремя = ВидВремениСверхурочные.Ссылка;
		КонецЕсли;
		
		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("СверхурочныеБезПовышеннойОплаты");
	КонецЕсли;	
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Вахта";
	ОписаниеВидаВремени.Наименование = "Вахта";
	ОписаниеВидаВремени.БуквенныйКод = "ВМ";
	ОписаниеВидаВремени.ЦифровойКод = "05";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ВМ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ВМ";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Продолжительность работы вахтовым методом';
													|en = 'Duration of work on a rotational basis '");
	ОписаниеВидаВремени.РабочееВремя = Истина;
	ОписаниеВидаВремени.Целосменное = Ложь;
	ОписаниеВидаВремени.ОсновноеВремя = ВидВремениЯвка.Ссылка;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Командировка";
	ОписаниеВидаВремени.Наименование = "Командировка";
	ОписаниеВидаВремени.БуквенныйКод = "К";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "К";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "К";
	ОписаниеВидаВремени.ЦифровойКод = "06";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Служебная командировка';
													|en = 'Business trip'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПовышениеКвалификации";
	ОписаниеВидаВремени.Наименование = "Повышение квалификации";
	ОписаниеВидаВремени.БуквенныйКод = "ПК";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПК";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПК";
	ОписаниеВидаВремени.ЦифровойКод = "07";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Повышение квалификации';
													|en = 'Further training'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПовышениеКвалификацииВДругойМестности";
	ОписаниеВидаВремени.Наименование = "Повышение квалификации в другой местности";
	ОписаниеВидаВремени.БуквенныйКод = "ПМ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПМ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПМ";
	ОписаниеВидаВремени.ЦифровойКод = "08";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Повышение квалификации в другой местности';
													|en = 'Further training in another location'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОсновнойОтпуск";
	ОписаниеВидаВремени.Наименование = "Отпуск";
	ОписаниеВидаВремени.БуквенныйКод = "ОТ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "О";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "О";
	ОписаниеВидаВремени.ЦифровойКод = "09";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск';
													|en = 'Leave'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ДополнительныйОтпуск";
	ОписаниеВидаВремени.Наименование = "Дополнительный отпуск";
	ОписаниеВидаВремени.БуквенныйКод = "ОД";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "О";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "О";
	ОписаниеВидаВремени.ЦифровойКод = "10";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Дополнительный отпуск';
													|en = 'Excess leave'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтпускНаОбучение";
	ОписаниеВидаВремени.Наименование = "Отпуск дополнительный (оплачиваемый учебный)";
	ОписаниеВидаВремени.БуквенныйКод = "У";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ОУ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ОУ";
	ОписаниеВидаВремени.ЦифровойКод = "11";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск дополнительный (оплачиваемый учебный)';
													|en = 'Excess leave (paid study leave)'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "СокращенноеВремяОбучающихся";
	ОписаниеВидаВремени.Наименование = "Сокр.время обучающихся без отрыва от производства";
	ОписаниеВидаВремени.БуквенныйКод = "УВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ВУ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ВУ";
	ОписаниеВидаВремени.ЦифровойКод = "12";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Сокр.время обучающихся без отрыва от производства';
													|en = 'Shorter time of emp. attending on-the-job training'");
	ОписаниеВидаВремени.РабочееВремя = Истина;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	Если НастройкиРасчетаЗарплаты.ИспользоватьОтпускаБезОплаты Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтпускНаОбучениеНеоплачиваемый";
		ОписаниеВидаВремени.Наименование = "Отпуск дополнительный (неоплачиваемый учебный)";
		ОписаниеВидаВремени.БуквенныйКод = "УД";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "УД";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "УД";
		ОписаниеВидаВремени.ЦифровойКод = "13";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск дополнительный (неоплачиваемый учебный)';
														|en = 'Excess leave (unpaid study)'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;
		
		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "НеоплачиваемыйОтпускПоРазрешениюРаботодателя";
		ОписаниеВидаВремени.Наименование = "Отпуск неоплачиваемый с разрешения работодателя";
		ОписаниеВидаВремени.БуквенныйКод = "ДО";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ДО";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ДО";
		ОписаниеВидаВремени.ЦифровойКод = "16";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск неоплачиваемый с разрешения работодателя';
														|en = 'Unpaid leave with employer''s permission'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "НеоплачиваемыйОтпускПоЗаконодательству";
		ОписаниеВидаВремени.Наименование = "Отпуск неоплачиваемый в соответствии с законом";
		ОписаниеВидаВремени.БуквенныйКод = "ОЗ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ОЗ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ОЗ";
		ОписаниеВидаВремени.ЦифровойКод = "17";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск неоплачиваемый в соответствии с законом';
														|en = 'Unpaid leave according to the law'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "НеоплачиваемыйДополнительныйОтпуск";
		ОписаниеВидаВремени.Наименование = "Доп. отпуск без сохранения заработной платы";
		ОписаниеВидаВремени.БуквенныйКод = "ДБ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ДБ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ДБ";
		ОписаниеВидаВремени.ЦифровойКод = "18";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Доп. отпуск без сохранения заработной платы';
														|en = 'Unpaid excess leave'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);


	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("ОтпускНаОбучениеНеоплачиваемый");	
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("НеоплачиваемыйОтпускПоРазрешениюРаботодателя");
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("НеоплачиваемыйОтпускПоЗаконодательству");	
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("НеоплачиваемыйДополнительныйОтпуск");
	КонецЕсли;	

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтпускПоБеременностиИРодам";
	ОписаниеВидаВремени.Наименование = "Отпуск по беременности и родам";
	ОписаниеВидаВремени.БуквенныйКод = "Р";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Б";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "Р";
	ОписаниеВидаВремени.ЦифровойКод = "14";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск по беременности и родам';
													|en = 'Maternity leave'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтпускПоУходуЗаРебенком";
	ОписаниеВидаВремени.Наименование = "Отпуск по уходу за ребенком";
	ОписаниеВидаВремени.БуквенныйКод = "ОЖ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Р";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ОЖ";
	ОписаниеВидаВремени.ЦифровойКод = "15";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отпуск по уходу за ребенком';
													|en = 'Child care leave'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Болезнь";
	ОписаниеВидаВремени.Наименование = "Больничный";
	ОписаниеВидаВремени.БуквенныйКод = "Б";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Б";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "Б";
	ОписаниеВидаВремени.ЦифровойКод = "19";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Временная нетрудоспособность с назначением пособия согласно законодательству';
													|en = 'Temporary incapacity for work with provision of allowance in accordance with the law'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "БолезньБезОплаты";
	ОписаниеВидаВремени.Наименование = "Больничный неоплачиваемый";
	ОписаниеВидаВремени.БуквенныйКод = "Т";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Т";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "Т";
	ОписаниеВидаВремени.ЦифровойКод = "20";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Больничный неоплачиваемый';
													|en = 'Unpaid sick leave'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "СокращенноеРабочееВремя";
	ОписаниеВидаВремени.Наименование = "Сокращенное рабочее время в соответствии с законом";
	ОписаниеВидаВремени.БуквенныйКод = "ЛЧ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ЛЧ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ЛЧ";
	ОписаниеВидаВремени.ЦифровойКод = "21";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Сокращенное рабочее время в соответствии с законом';
													|en = 'Shorter working time in accordance with the law'");
	ОписаниеВидаВремени.РабочееВремя = Истина;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ВынужденныйПрогул";
	ОписаниеВидаВремени.Наименование = "Время вынужденного прогула";
	ОписаниеВидаВремени.БуквенныйКод = "ПВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПВ";
	ОписаниеВидаВремени.ЦифровойКод = "22";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Время вынужденного прогула';
													|en = 'Forced absenteeism time'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ГосударственныеОбязанности";
	ОписаниеВидаВремени.Наименование = "Выполнение государственных обязанностей";
	ОписаниеВидаВремени.БуквенныйКод = "Г";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "Г";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "Г";
	ОписаниеВидаВремени.ЦифровойКод = "23";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Выполнение государственных обязанностей';
													|en = 'Performing public duties'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	
	Если НастройкиРасчетаЗарплаты.ИспользоватьУчетПрочихНевыходов Тогда 
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Прогулы";
		ОписаниеВидаВремени.Наименование = "Прогул";
		ОписаниеВидаВремени.БуквенныйКод = "ПР";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "П";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "П";
		ОписаниеВидаВремени.ЦифровойКод = "24";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Прогул';
														|en = 'Absenteeism'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "НеявкиПоНевыясненнымПричинам";
		ОписаниеВидаВремени.Наименование = "Неявки по невыясненным причинам";
		ОписаниеВидаВремени.БуквенныйКод = "НН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "НН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НН";
		ОписаниеВидаВремени.ЦифровойКод = "30";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Неявки по невыясненным причинам';
														|en = 'Non-attendances for unknown reasons'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("Прогулы");		
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("НеявкиПоНевыясненнымПричинам");
	КонецЕсли;	
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "РаботаВРежимеНеполногоВремени";
	ОписаниеВидаВремени.Наименование = "Работа в режиме неполного рабочего времени";
	ОписаниеВидаВремени.БуквенныйКод = "НС";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "НС";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НС";
	ОписаниеВидаВремени.ЦифровойКод = "25";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Работа в режиме неполного рабочего времени';
													|en = 'Part-time work'");
	ОписаниеВидаВремени.РабочееВремя = Истина;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ВыходныеДни";
	ОписаниеВидаВремени.Наименование = "Выходные дни";
	ОписаниеВидаВремени.БуквенныйКод = "В";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "В";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "В";
	ОписаниеВидаВремени.ЦифровойКод = "26";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Выходные дни (еженедельный отпуск) и  нерабочие праздничные дни';
													|en = 'Weekends (weekly leave) and public holidays '");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ДополнительныеВыходныеДниОплачиваемые";
	ОписаниеВидаВремени.Наименование = "Дополнительные выходные дни (оплачиваемые)";
	ОписаниеВидаВремени.БуквенныйКод = "ОВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ОВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ОВ";
	ОписаниеВидаВремени.ЦифровойКод = "27";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Дополнительные выходные дни (оплачиваемые)';
													|en = 'Extra days off (paid)'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Истина;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ДополнительныеВыходныеДниНеОплачиваемые";
	ОписаниеВидаВремени.Наименование = "Дополнительные выходные дни (неоплачиваемые)";
	ОписаниеВидаВремени.БуквенныйКод = "НВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "НВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НВ";
	ОписаниеВидаВремени.ЦифровойКод = "28";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Дополнительные выходные дни (неоплачиваемые)';
													|en = 'Extra days off (unpaid)'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Забастовка";
	ОписаниеВидаВремени.Наименование = "Забастовка";
	ОписаниеВидаВремени.БуквенныйКод = "ЗБ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ЗБ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ЗБ";
	ОписаниеВидаВремени.ЦифровойКод = "29";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Забастовка';
													|en = 'Strike'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
 
	Если НастройкиРасчетаЗарплаты.ИспользоватьОплатуПростоев Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПростойПоВинеРаботодателя";
		ОписаниеВидаВремени.Наименование = "Время простоя по вине работодателя";
		ОписаниеВидаВремени.БуквенныйКод = "РП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПР";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПР";
		ОписаниеВидаВремени.ЦифровойКод = "31";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Время простоя по вине работодателя';
														|en = 'Downtime due to the employer fault'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "Простой";
		ОписаниеВидаВремени.Наименование = "Простой, не зависящий от работодателя и работника";
		ОписаниеВидаВремени.БуквенныйКод = "НП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "НП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НП";
		ОписаниеВидаВремени.ЦифровойКод = "32";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Простой, не зависящий от работодателя и работника';
														|en = 'Downtime beyond control of employer and employee'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПростойПоВинеРаботника";
		ОписаниеВидаВремени.Наименование = "Простой по вине работника";
		ОписаниеВидаВремени.БуквенныйКод = "ВП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ВП";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ВП";
		ОписаниеВидаВремени.ЦифровойКод = "33";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Простой по вине работника';
														|en = 'Downtime due to the employee fault'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;
		
		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
		
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("ПростойПоВинеРаботодателя");
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("Простой");
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("ПростойПоВинеРаботника");
	КонецЕсли;
	

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтстранениеОтРаботыСОплатой";
	ОписаниеВидаВремени.Наименование = "Отстранение от работы с оплатой";
	ОписаниеВидаВремени.БуквенныйКод = "НО";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "НО";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НО";
	ОписаниеВидаВремени.ЦифровойКод = "34";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отстранение от работы с оплатой';
													|en = 'Suspension with pay'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОтстранениеОтРаботыБезОплаты";
	ОписаниеВидаВремени.Наименование = "Отстранение от работы без оплаты";
	ОписаниеВидаВремени.БуквенныйКод = "НБ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "НБ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НБ";
	ОписаниеВидаВремени.ЦифровойКод = "35";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Отстранение от работы без оплаты';
													|en = 'Suspension without pay'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ЗадержкаВыплатыЗаработнойПлаты";
	ОписаниеВидаВремени.Наименование = "Приостановка работы в случае задержки выплаты з/п";
	ОписаниеВидаВремени.БуквенныйКод = "НЗ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "НЗ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "НЗ";
	ОписаниеВидаВремени.ЦифровойКод = "36";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Приостановка работы в случае задержки выплаты з/п';
													|en = 'Work suspension in case salary is delayed'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	Если НастройкиУчетаВремени.УчитыватьВремяНаКормлениеРебенка Тогда
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "КормлениеРебенка";
		ОписаниеВидаВремени.Наименование = "Перерывы для кормления ребенка";
		ОписаниеВидаВремени.БуквенныйКод = "КР";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "КР";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "КР";
		ОписаниеВидаВремени.ЦифровойКод = "37";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Перерывы для кормления ребенка, предоставляемые работающим женщинам, имеющим детей в возрасте до полутора лет';
														|en = 'Breaks for breastfeeding provided for female employees with children under one and a half years old'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("КормлениеРебенка");	
	КонецЕсли;	

	Если НастройкиУчетаВремени.УчитыватьВечерниеЧасы Тогда	
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "РаботаВечерниеЧасы";
		ОписаниеВидаВремени.Наименование = "Вечерние часы";
		ОписаниеВидаВремени.БуквенныйКод = "ВЧ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ВЧ";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ВЧ";
		ОписаниеВидаВремени.ЦифровойКод = "41";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Вечерние часы';
														|en = 'Evening hours'");
		ОписаниеВидаВремени.РабочееВремя = Истина;
		ОписаниеВидаВремени.Целосменное = Ложь;

		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("РаботаВечерниеЧасы");	
	КонецЕсли;	
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ПриостановлениеТрудовогоДоговора";
	ОписаниеВидаВремени.Наименование = "Приостановление трудового договора";
	ОписаниеВидаВремени.БуквенныйКод = "ПТД";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ПТД";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ПТД";
	ОписаниеВидаВремени.ЦифровойКод = "45";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Приостановление трудового договора';
													|en = 'Suspension of the employment contract'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	СоздатьОтключитьВидВремениОплачиваемыеНерабочиеДни(ВыделятьНерабочиеДниОтдельнымВидомВремени);
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "МеждувахтовыйОтдых";
	ОписаниеВидаВремени.Наименование = "Междувахтовый отдых";
	ОписаниеВидаВремени.БуквенныйКод = "МО";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "МО";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "МО";
	ОписаниеВидаВремени.ЦифровойКод = "46";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Междувахтовый отдых';
													|en = 'Rotational rest'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	
	ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
	ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ДниВПутиВахта";
	ОписаниеВидаВремени.Наименование = "Дни в пути (вахта)";
	ОписаниеВидаВремени.БуквенныйКод = "ДВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный = "ДВ";
	ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ДВ";
	ОписаниеВидаВремени.ЦифровойКод = "47";
	ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Дни в пути (вахта)';
													|en = 'Travel days (rotation)'");
	ОписаниеВидаВремени.РабочееВремя = Ложь;
	ОписаниеВидаВремени.Целосменное = Ложь;

	УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);

	// АПК:1297-вкл
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура СоздатьОтключитьВидВремениОплачиваемыеНерабочиеДни(ВыделятьНерабочиеДниОтдельнымВидомВремени) Экспорт
	
	// АПК:1297-выкл Коды и наименования не локализуются, т.к. являются частью регламентированных форм, применяемых в РФ.
	
	Если ВыделятьНерабочиеДниОтдельнымВидомВремени Тогда	
		ОписаниеВидаВремени = УчетРабочегоВремени.СоздатьОписаниеВидаВремени();
		ОписаниеВидаВремени.ИмяПредопределенныхДанных = "ОплачиваемыеНерабочиеДни";
		ОписаниеВидаВремени.Наименование = "Оплачиваемые нерабочие дни";
		ОписаниеВидаВремени.БуквенныйКод = "ОН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный = "ОН";
		ОписаниеВидаВремени.БуквенныйКодБюджетный2009 = "ОН";
		ОписаниеВидаВремени.ЦифровойКод = "44";
		ОписаниеВидаВремени.ПолноеНаименование = НСтр("ru = 'Оплачиваемые нерабочие дни';
														|en = 'Paid non-workdays'");
		ОписаниеВидаВремени.РабочееВремя = Ложь;
		ОписаниеВидаВремени.Целосменное = Ложь;
		УчетРабочегоВремени.НовыйВидИспользованияРабочегоВремени(ОписаниеВидаВремени);
	Иначе
		УчетРабочегоВремени.ОтключитьИспользованиеПредопределенногоЭлемента("ОплачиваемыеНерабочиеДни");
	КонецЕсли;
	
	// АПК:1297-вкл
	
КонецПроцедуры

Функция ВидыДокументовРегистрацииОтсутствий() Экспорт
	
КонецФункции

Процедура ДобавитьВидДокумента(Таблица, ИмяВидаВремени, ВидДокумента)
	
	ВидВремени = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени." + ИмяВидаВремени);
	Если ВидВремени = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ВидВремени = ВидВремени;
	НоваяСтрока.ВидДокумента = ВидДокумента;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВыбора(ДанныеВыбора, Параметры)
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаУсловий = "";
	
	// Исключение регистрируемых отдельными документами.
	Если Параметры.Свойство("ИсключатьРегистрируемыеОтдельнымиДокументами")
		И Параметры.ИсключатьРегистрируемыеОтдельнымиДокументами = Истина Тогда
		ВидыДокументов = ВидыВремениРегистрируемыеОтдельнымиДокументами();
		ВидыВремени = Новый Массив;
		Для Каждого СтрокаТаблицы Из ВидыДокументов Цикл
			Если СтрокаТаблицы.ВидДокумента = Перечисления.ВидыДокументовНачисления.ОплатаПоСреднемуЗаработку Тогда
				Продолжить;
			КонецЕсли;
			ВидыВремени.Добавить(СтрокаТаблицы.ВидВремени);
		КонецЦикла;
		ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + "
			|	И ") + "(Не ВидыВремени.Ссылка В (&РегистрируемыеОтдельнымиДокументами))";
		Запрос.УстановитьПараметр("РегистрируемыеОтдельнымиДокументами", ВидыВремени);
	КонецЕсли;
	
	// Условия подбора по строке и коду.
	Если Параметры.Свойство("СтрокаПоиска") И Не ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
		
		УсловияПодбора = "";
		МетаданныеОбъекта = Метаданные.Справочники.ВидыИспользованияРабочегоВремени;
		
		Для Каждого Поле Из МетаданныеОбъекта.ВводПоСтроке Цикл
			УсловияПодбора = УсловияПодбора + ?(ПустаяСтрока(УсловияПодбора), "", Символы.ПС + "ИЛИ ") + "(ВидыВремени." + Поле.Имя + " ПОДОБНО &СтрокаПоиска)";
		КонецЦикла;
		
		Если Не ПустаяСтрока(УсловияПодбора) Тогда
			ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + "
				|	И ") + "(" + УсловияПодбора + ")";
		КонецЕсли; 
			
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
	КонецЕсли; 
	
	// Добавление отборов, переданных в параметре.
	Если Параметры.Отбор.Количество() > 0 Тогда
		
		Для Каждого ЭлементОтбора Из Параметры.Отбор Цикл
			
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("ФиксированныйМассив") Тогда				
				УсловиеСПравымЗначением = " В (&Отбор" + ЭлементОтбора.Ключ + ")";				
			Иначе				
				УсловиеСПравымЗначением = " = (&Отбор" + ЭлементОтбора.Ключ + ")";				
			КонецЕсли; 
			
			ТекстЗапросаУсловий = ?(ПустаяСтрока(ТекстЗапросаУсловий), "", ТекстЗапросаУсловий + Символы.ПС + " И ")
				+ "ВидыВремени." + ЭлементОтбора.Ключ + УсловиеСПравымЗначением;
				
			Запрос.УстановитьПараметр("Отбор" + ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	ВидыВремени.Ссылка КАК Ссылка,
		|	ВидыВремени.ПометкаУдаления,
		|	"""" КАК Предупреждение,
		|	ВидыВремени.Наименование,
		|	ВидыВремени.БуквенныйКод
		|ИЗ
		|	Справочник.ВидыИспользованияРабочегоВремени КАК ВидыВремени";
		
	Если Не ПустаяСтрока(ТекстЗапросаУсловий) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	" + ТекстЗапросаУсловий;
	КонецЕсли; 
		
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ВидыВремени.Наименование";
		
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонПредставления = "%1";
		Если ЗначениеЗаполнено(Выборка.БуквенныйКод) Тогда
			ШаблонПредставления = "%1 (%2)";
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, Выборка.Наименование, СокрЛП(Выборка.БуквенныйКод));
		ДанныеВыбора.Добавить(Выборка.Ссылка, Представление);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

Процедура УстановитьНастройкуКонтроляПлановогоИФактическогоВремени() Экспорт 
	НаборЗаписей = РегистрыСведений.НастройкиУчетаВремени.СоздатьНаборЗаписей();
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	Запись.ПроверятьСоответствиеФактическогоВремениПлановому = Истина;
	
	НаборЗаписей.Записать();
КонецПроцедуры	

Процедура ОбновитьГрафикиРаботыСотрудников2020(ПараметрыОбновления = Неопределено) Экспорт
	
	ЗаполнитьГрафикиСотрудниковЗаГод(Дата(2020,1,1));
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьНомераОплачиваемыхНерабочихПериодов(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыОплатыНерабочихДней.НомерПериода КАК НомерПериода
		|ИЗ
		|	РегистрСведений.ПериодыОплатыНерабочихДней КАК ПериодыОплатыНерабочихДней";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОсновнойПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	НерабочиеПериоды = КалендарныеГрафики.ПериодыНерабочихДней(ОсновнойПроизводственныйКалендарь, Новый СтандартныйПериод);
	
	ВыделятьНерабочиеДниОтдельнымВидомВремени = ВыделятьНерабочиеДниОтдельнымВидомВремени();
	НаборЗаписей = РегистрыСведений.ПериодыОплатыНерабочихДней.СоздатьНаборЗаписей();
	Для Каждого НерабочийПериод Из НерабочиеПериоды Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.НомерПериода = НерабочийПериод.Номер;
		НоваяСтрока.ПроизводственныйКалендарь = ОсновнойПроизводственныйКалендарь;
		НоваяСтрока.Оплачивать = ?(НерабочийПериод.Номер = 4, Истина, ВыделятьНерабочиеДниОтдельнымВидомВремени);
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	Если НерабочиеПериоды.Количество() > 3 Тогда
		Константы.ВыделятьНерабочиеДниОтдельнымВидомВремени.Установить(Истина);
	КонецЕсли;
	
	СоздатьОтключитьВидВремениОплачиваемыеНерабочиеДни(Истина);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Процедура ИсправитьДанныеПроизводственныхКалендарейПомесячно() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", 2020);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Данные.ПроизводственныйКалендарь.Код КАК КодПроизводственногоКалендаря,
		|	Данные.Год КАК Год
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаряПомесячно КАК Данные
		|ГДЕ
		|	Данные.Год = &Год";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеПроизводственныхКалендарейПомесячно(РезультатЗапроса.Выгрузить(), Истина);

КонецПроцедуры

Процедура ОбновитьГрафикиРаботыСотрудников2021(ПараметрыОбновления = Неопределено) Экспорт
	
	ЗаполнитьГрафикиСотрудниковЗаГод(Дата(2021,1,1));
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПеренестиДанныеУчетаВремениВНовыеРегистры

Процедура ЗаписатьДанныеВНовыеРегистры(Регистратор, ДанныеДляЗаписи)
	НачатьТранзакцию();
	Для Каждого ДанныеРегистра Из ДанныеДляЗаписи Цикл
		Если ДанныеРегистра.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДанныеРегистра.Ключ.ПолноеИмя());
		
		Набор = Менеджер.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(Регистратор);
		Набор.ОбменДанными.Загрузка = Истина;
		
		Набор.Загрузить(ДанныеРегистра.Значение);
		
		Набор.Записать();
		
		ОписаниеРегистра = Менеджер.ОписаниеРегистра();
		
		ЗаписатьПараметрыРегистрируемыхДанных(Набор, ОписаниеРегистра, Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеДляЗаписиВНовыеРегистры(Регистратор)
	Запрос = Новый Запрос;
	
	Сверхурочные = Новый Массив;
	Сверхурочные.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.Сверхурочные"));
	Сверхурочные.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты"));
	
	Запрос.УстановитьПараметр("Сверхурочные", Сверхурочные);	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТабельногоУчетаВремени.Регистратор КАК Регистратор,
	|	ДанныеТабельногоУчетаВремени.Период КАК Период,
	|	ДанныеТабельногоУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаВремени.Организация КАК Организация,
	|	ДанныеТабельногоУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеТабельногоУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаВремени.Дни КАК Дни,
	|	ДанныеТабельногоУчетаВремени.Часы КАК Часы
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|ГДЕ
	|	ДанныеТабельногоУчетаВремени.УдалитьПлан
	|	И ДанныеТабельногоУчетаВремени.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТабельногоУчетаВремени.Регистратор КАК Регистратор,
	|	ДанныеТабельногоУчетаВремени.Период КАК Период,
	|	ДанныеТабельногоУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаВремени.Организация КАК Организация,
	|	ДанныеТабельногоУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеТабельногоУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаВремени.Дни КАК Дни,
	|	ДанныеТабельногоУчетаВремени.Часы КАК Часы,
	|	ВЫБОР
	|		КОГДА ДанныеТабельногоУчетаВремени.УдалитьВнутрисменное
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеВнутрисменныхНеявок)
	|		КОГДА ДанныеТабельногоУчетаВремени.ВидУчетаВремени.ОсновноеВремя В (&Сверхурочные)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДополнительноеВнутрисменноеВремя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.ДанныеОперативногоУчета)
	|	КОНЕЦ КАК ВидДанных
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|ГДЕ
	|	НЕ ДанныеТабельногоУчетаВремени.УдалитьПлан
	|	И НЕ ДанныеТабельногоУчетаВремени.УдалитьИтоговыеДанные
	|	И НЕ ДанныеТабельногоУчетаВремени.УдалитьВЦеломЗаПериод
	|	И ДанныеТабельногоУчетаВремени.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТабельногоУчетаВремени.Регистратор КАК Регистратор,
	|	ДанныеТабельногоУчетаВремени.Период КАК Период,
	|	ДанныеТабельногоУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаВремени.Организация КАК Организация,
	|	ДанныеТабельногоУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеТабельногоУчетаВремени.УдалитьВидВремениВытесняемый КАК ВидУчетаВремени,
	|	ДанныеТабельногоУчетаВремени.Часы КАК Часы
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|ГДЕ
	|	ДанныеТабельногоУчетаВремени.Регистратор = &Регистратор
	|	И ДанныеТабельногоУчетаВремени.УдалитьВнутрисменное
	|	И ДанныеТабельногоУчетаВремени.УдалитьВидВремениВытесняемый <> ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеТабельногоУчетаВремени.Период, МЕСЯЦ) КАК Период,
	|	ДанныеТабельногоУчетаВремени.Регистратор КАК Регистратор,
	|	ДанныеТабельногоУчетаВремени.Сотрудник КАК Сотрудник,
	|	ДанныеТабельногоУчетаВремени.Организация КАК Организация,
	|	СУММА(ДанныеТабельногоУчетаВремени.Часы) КАК Часы,
	|	ДанныеТабельногоУчетаВремени.ПериодРегистрации КАК ПериодРегистрации,
	|	ДанныеТабельногоУчетаВремени.ВидУчетаВремени КАК ВидУчетаВремени,
	|	СУММА(ДанныеТабельногоУчетаВремени.Дни) КАК Дни
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|ГДЕ
	|	ДанныеТабельногоУчетаВремени.Регистратор = &Регистратор
	|	И ДанныеТабельногоУчетаВремени.УдалитьВЦеломЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеТабельногоУчетаВремени.Период, МЕСЯЦ),
	|	ДанныеТабельногоУчетаВремени.Регистратор,
	|	ДанныеТабельногоУчетаВремени.Сотрудник,
	|	ДанныеТабельногоУчетаВремени.ПериодРегистрации,
	|	ДанныеТабельногоУчетаВремени.ВидУчетаВремени,
	|	ДанныеТабельногоУчетаВремени.Организация";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеДляЗаписиВНовыеРегистры = Новый Соответствие;
	ДанныеДляЗаписиВНовыеРегистры.Вставить(Метаданные.РегистрыНакопления.ДанныеИндивидуальныхГрафиковСотрудников, Результаты[0].Выгрузить());
	ДанныеДляЗаписиВНовыеРегистры.Вставить(Метаданные.РегистрыНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников, Результаты[1].Выгрузить());
	ДанныеДляЗаписиВНовыеРегистры.Вставить(Метаданные.РегистрыНакопления.ВытесняемоеПлановоеВремяСотрудников, Результаты[2].Выгрузить());
	ДанныеДляЗаписиВНовыеРегистры.Вставить(Метаданные.РегистрыНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников, Результаты[3].Выгрузить());
	
	Возврат ДанныеДляЗаписиВНовыеРегистры;	
КонецФункции	

Процедура УдалитьЛишниеЗаписиИзНабораДанныхТабеля(Регистратор)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТабельногоУчетаВремени.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|ГДЕ
	|	ДанныеТабельногоУчетаВремени.Регистратор = &Регистратор
	|	И (ДанныеТабельногоУчетаВремени.УдалитьПлан
	|			ИЛИ НЕ ДанныеТабельногоУчетаВремени.УдалитьИтоговыеДанные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	НомераУдаляемыхЗаписей = Запрос.Выполнить().Выбрать();
	
	Если НомераУдаляемыхЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Набор = РегистрыНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Регистратор);
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Прочитать();
	
	Пока НомераУдаляемыхЗаписей.Следующий() Цикл 
		Набор.Удалить(НомераУдаляемыхЗаписей.НомерСтроки - 1);			
	КонецЦикла;	
	
	Набор.Записать();
	
КонецПроцедуры	

Функция РегистраторыДляЗаполненияНовыхРегистров()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТабельногоУчетаВремени.Регистратор,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ДанныеТабельногоУчетаВремени.УдалитьПлан
	|					И ДанныеТабельногоУчетаВремени.УдалитьИтоговыеДанные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьДанныеТабеля,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ДанныеТабельногоУчетаВремени.УдалитьПлан
	|					ИЛИ НЕ  ДанныеТабельногоУчетаВремени.УдалитьИтоговыеДанные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОстальныеДанные
	|ИЗ
	|	РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников КАК ДанныеТабельногоУчетаВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТабельногоУчетаВремени.Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции	

#КонецОбласти

Функция ВидыДанныхВытесняющиеСводноеВремя() Экспорт
	ВидыДанныхВытесняющие = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВытесняющиеВидыДанных(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВытесняющиеВидыДанных.ВидДанныхВытесняющий
	|ИЗ
	|	ВТВытесняющиеВидыДанных КАК ВытесняющиеВидыДанных
	|ГДЕ
	|	ВытесняющиеВидыДанных.Факт
	|	И ВытесняющиеВидыДанных.ВидДанных = ЗНАЧЕНИЕ(Перечисление.ВидыДанныхУчетаВремениСотрудников.СводныеДанные)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыДанныхВытесняющие.Добавить(Выборка.ВидДанныхВытесняющий);
	КонецЦикла;
	
	Возврат ВидыДанныхВытесняющие;		
КонецФункции	

Процедура СоздатьВТВытесняющиеВидыДанных(МенеджерВременныхТаблиц)
	Запрос = ЗапросВТВытесняющиеВидыДанных(Неопределено);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
КонецПроцедуры	

Функция НезаполненныеОбщиеГрафики(ОбщиеГрафики, НачалоПериода, КонецПериода)
	
	Если ОбщиеГрафики.Количество() = 0 Тогда
		Возврат ОбщиеГрафики;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикиРаботыСотрудников.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
		|ГДЕ
		|	ГрафикиРаботыСотрудников.Ссылка В(&ОбщиеГрафики)
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|				ГДЕ
		|					ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботыСотрудников.Ссылка
		|					И ГрафикиРаботыПоВидамВремени.Месяц МЕЖДУ &НачалоПериода И &КонецПериода)";
	Запрос.УстановитьПараметр("ОбщиеГрафики", ОбщиеГрафики);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область ДатыЗапретаИзменения

Процедура ПроверитьИсключенияПроверкиЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Экспорт
	
	Если Не ПроверкаЗапретаИзменения Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Объект) = Тип("РегистрСведенийНаборЗаписей.ГрафикиРаботыПоВидамВремени") Тогда
		// Запрет изменения только данных общих графиков
		Если Не ТипЗнч(Объект.Отбор.ГрафикРаботы.Значение) = Тип("СправочникСсылка.ГрафикиРаботыСотрудников") Тогда
			ПроверкаЗапретаИзменения = Ложь;
			Возврат;
		КонецЕсли;
		
		МенеджерВременныхТаблиц = Неопределено;
		Если Не Объект.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц)
			Или Не Объект.Отбор.Месяц.Использование Тогда
			
			Возврат;
		КонецЕсли;
		
		ЗарплатаКадры.СоздатьВТПоНаборуЗаписей(МенеджерВременныхТаблиц, Объект, Истина, "ВТНовыеДанные");
		Запрос = ЗапросСоздатьВТИзменившиесяДанныеОбщихГрафиков("ВТНовыеДанные");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТИзменившиесяДанныеОбщихГрафиков", "");
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
		НайденныеИзменения = ТаблицаИзменений.НайтиСтроки(Новый Структура("Месяц", Объект.Отбор.Месяц.Значение));
		Если НайденныеИзменения.Количество() = 0 Тогда
			ПроверкаЗапретаИзменения = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	Раздел = Разделы.Добавить();
	Раздел.Имя           = "ГрафикиРаботы";
	Раздел.Идентификатор = Новый УникальныйИдентификатор("fccb147b-179f-474a-9b0b-71ace943aa46");
	Раздел.Представление = НСтр("ru = 'Графики работы';
								|en = 'Work schedules'");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбслуживаниеСервсиа1СКабинетСотрудника

// Формирует данные графиков для публикации в сервисе 1С:Кабинет сотрудника.
// 
// Параметры;
// 		МенеджерВТ - МенеджерВременныхТаблиц - содержит поля
// 			* ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников
// 			* ДатаНачала - Дата
// 			* ДатаОкончания - Дата
// 			* Год - Число
//
// Возвращаемое значение:
// 		ТаблицаЗначений - содержит колонки
// 			* ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников
// 			* Дата - Дата
// 			* Выходной - Булево
// 			* Год - Число
//
Функция ДанныеГрафиковДляСервисаКабинетСотрудника(МенеджерВТ) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выходной,
	|	ГрафикиОтбор.Год КАК Год
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГрафикиОтбор КАК ГрафикиОтбор
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиОтбор.ГрафикРаботы
	|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ ГрафикиОтбор.ДатаНачала И ГрафикиОтбор.ДатаОкончания)
	|ГДЕ
	|	НЕ ГрафикиРаботыПоВидамВремени.ВремяВЧасах
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиОтбор.Год,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.ВыходныеДни)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует данные о праздничных днях графиков работы для публикации в сервисе 1С:Кабинет сотрудника.
// 
// Параметры;
// 		ГрафикиРаботыДляОбработки - Массив
//
// Возвращаемое значение:
// 		ТаблицаЗначений - содержит колонки
// 			* ГрафикРаботы - СправочникСсылка.ГрафикиРаботыСотрудников
// 			* Дата - Дата
// 			* Год - Число
//
Функция ДанныеПраздничныеДниГрафикаРаботы(ГрафикиРаботыДляОбработки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ГрафикиРаботыДляОбработки);
	Запрос.УстановитьПараметр("НачальныйГод", Год(ТекущаяДатаСеанса()) - 1);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикиРаботы.Ссылка КАК Ссылка,
	|	ГрафикиРаботы.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТДанныеГрафиков
	|ИЗ
	|	Справочник.ГрафикиРаботыСотрудников КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка В(&Ссылки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеГрафиков.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ПОМЕСТИТЬ ВТКалендари
	|ИЗ
	|	ВТДанныеГрафиков КАК ДанныеГрафиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	ДанныеКалендаря.Дата КАК Дата,
	|	ДанныеКалендаря.Год КАК Год
	|ПОМЕСТИТЬ ВТДанныеКалендарей
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКалендари КАК Календари
	|		ПО ДанныеКалендаря.ПроизводственныйКалендарь = Календари.ПроизводственныйКалендарь
	|			И (ДанныеКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник))
	|			И (ДанныеКалендаря.Год >= &НачальныйГод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеГрафиков.Ссылка КАК ГрафикРаботы,
	|	ДанныеКалендарей.Дата КАК Дата,
	|	ДанныеКалендарей.Год КАК Год
	|ИЗ
	|	ВТДанныеГрафиков КАК ДанныеГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКалендарей КАК ДанныеКалендарей
	|		ПО ДанныеГрафиков.ПроизводственныйКалендарь = ДанныеКалендарей.ПроизводственныйКалендарь"; 
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

