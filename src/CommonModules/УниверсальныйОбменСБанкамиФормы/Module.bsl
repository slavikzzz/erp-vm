#Область СлужебныйПрограммныйИнтерфейс

Процедура УдалитьПодписиФайла(ПрисоединенныйФайл) Экспорт
	
	НомераПодписей = Новый Массив;

	Если ТипЗнч(ПрисоединенныйФайл) = Тип("ВыборкаИзРезультатаЗапроса") Тогда // запрос к информационной базе уже сделан
		
		Выборка = ПрисоединенныйФайл.Выбрать();
		Пока Выборка.Следующий() Цикл
			НомераПодписей.Добавить(Выборка.ПорядковыйНомер);
		КонецЦикла;
		ЭлектроннаяПодпись.УдалитьПодпись(ПрисоединенныйФайл.ФайлОтчета, НомераПодписей);
		
	Иначе // делаем запрос к информационной базе
		
		ИнформацияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
		Для каждого Подпись Из ИнформацияПодписей Цикл
			НомераПодписей.Добавить(Подпись.ПорядковыйНомер);
		КонецЦикла;
		ЭлектроннаяПодпись.УдалитьПодпись(ПрисоединенныйФайл, НомераПодписей);		
		
	КонецЕсли;
	
КонецПроцедуры

// Неиспользуемые присоединенные файлы помечаем на удаление и очищаем, а для используемых снимаем пометку удаления.
//
// Параметры:
//  ДокументОснование - ДокументСсылка.ЗаявкаНаКредит, ДокументСсылка.ФинОтчетВБанк - владелец файлов.
//  СвойстваФайлов - Соответствие - список файлов, которые прикладываются к пакету отчетности:
//                   * Ключ - ОпределяемыйТип.ПрисоединенныйФайл - файл отчета из пакета.
//                   * Значение - Булево - текущее состояние пометки удаления файла.
//
Процедура СинхронизироватьПрисоединенныеФайлы(Знач ДокументОснование, Знач СвойстваФайлов, Знач СервисОбменаСБанками) Экспорт
	Перем ПустоеХранилище, МетаданныеДокументаОснования;

	НеиспользуемыеФайлы = Новый Массив;
	
	// Список файлов, которые когда-либо использовались в пакете.
	ИмеющиесяФайлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ДокументОснование, ИмеющиесяФайлы);
	
	// Снимаем пометки удаления с используемых файлов.
	Для каждого ДопФайл Из ИмеющиесяФайлы Цикл
		
		ПометкаУдаления = СвойстваФайлов[ДопФайл];
		Если ПометкаУдаления = Неопределено Тогда
			НеиспользуемыеФайлы.Добавить(ДопФайл);
			Продолжить;
		ИначеЕсли ПометкаУдаления <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДопФайл.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
		Исключение
		
			ОписаниеОшибки = НСтр("ru = 'Ошибка при снятии пометки удаления с файла ""%1"".
                                  |%2';
                                  |en = 'An error occurred upon clearing the deletion mark of the ""%1"" file.
                                  |%2'");
			Если МетаданныеДокументаОснования = Неопределено Тогда
				
				МетаданныеДокументаОснования = ДокументОснование.Метаданные();
				
			КонецЕсли;
			
			ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
				СервисОбменаСБанками,
				НСтр("ru = 'Синхронизация присоединенных файлов';
					|en = 'Attachment synchronization'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокументаОснования, ДокументОснование,
				СтрШаблон(ОписаниеОшибки, Строка(ДопФайл), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;	

	КонецЦикла;
	
	// Очищаем неиспользуемые файлы.
	СвойстваФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НеиспользуемыеФайлы, "ПометкаУдаления, ПодписанЭП", Истина);
	Для каждого ИспользованиеФайла Из СвойстваФайлов Цикл
		
		// Исключаем файлы, которые ранее уже были помечены на удаление.
		Если ИспользованиеФайла.Значение.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		ДопФайл = ИспользованиеФайла.Ключ;
		
		// Удаляем подписи файла.
		Если ИспользованиеФайла.Значение.ПодписанЭП = Истина Тогда

			Попытка
				УдалитьПодписиФайла(ДопФайл);
			Исключение
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка при удалении подписи у файла ""%1"".
	                                  |%2';
	                                  |en = 'An error occurred upon deleting the ""%1"" file signature.
	                                  |%2'");
				Если МетаданныеДокументаОснования = Неопределено Тогда
					
					МетаданныеДокументаОснования = ДокументОснование.Метаданные();
					
				КонецЕсли;
				
				ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
					СервисОбменаСБанками,
					НСтр("ru = 'Синхронизация присоединенных файлов';
						|en = 'Attachment synchronization'", ОбщегоНазначения.КодОсновногоЯзыка()));
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
					МетаданныеДокументаОснования, ДокументОснование,
					СтрШаблон(ОписаниеОшибки, Строка(ДопФайл), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

			КонецПопытки;
			
		КонецЕсли;
		
		Если ПустоеХранилище = Неопределено Тогда
			// Инициализируем, только когда нашелся хотя бы один удаляемый файл.
			ПустойПоток = Новый ПотокВПамяти;
			ТекстДокумента = СтрШаблон(НСтр("ru = 'Этот файл был удален %1 %2';
											|en = 'This file was deleted %1 %2'"),
				Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT"), Пользователи.АвторизованныйПользователь());
			ПустойДокумент = Новый ЗаписьТекста(ПустойПоток, КодировкаТекста.UTF8);
			ПустойДокумент.Записать(ТекстДокумента);
			ПустойДокумент.Закрыть();
			ПустыеДвоичныеДанные = ПустойПоток.ЗакрытьИПолучитьДвоичныеДанные();
			ПустоеХранилище = ПоместитьВоВременноеХранилище(ПустыеДвоичныеДанные);
			ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
			
		КонецЕсли;
		
		// Записываем пустое значение вместо данных файла.
		ИнформацияОФайле = Новый Структура;
		ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПустоеХранилище);
		ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
		ИнформацияОФайле.Вставить("ИмяБезРасширения",               СтрШаблон(НСтр("ru = '(удален) %1';
																					|en = '(deleted) %1'"), Строка(ДопФайл)));
		ИнформацияОФайле.Вставить("Расширение",                     "txt");
		ИнформацияОФайле.Вставить("Редактирует",                    ПустойПользователь);
		ИнформацияОФайле.Вставить("Кодировка",                      КодировкаТекста.UTF8);
		
		Попытка
			РаботаСФайлами.ОбновитьФайл(ДопФайл, ИнформацияОФайле);
		Исключение
			
			ОписаниеОшибки = НСтр("ru = 'Не удалось очистить данные файла ""%1"".
                                  |%2';
                                  |en = 'Failed to clear the ""%1"" file data.
                                  |%2'");
			Если МетаданныеДокументаОснования = Неопределено Тогда
					
				МетаданныеДокументаОснования = ДокументОснование.Метаданные();
				
			КонецЕсли;
			
			ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
				СервисОбменаСБанками,
				НСтр("ru = 'Синхронизация присоединенных файлов';
					|en = 'Attachment synchronization'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокументаОснования, ДокументОснование,
				СтрШаблон(ОписаниеОшибки, Строка(ДопФайл), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;
		
		// Помечаем файл как разрешенный для физического удаления.
		Попытка
			ДопФайл.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Исключение
			
			ОписаниеОшибки = НСтр("ru = 'Не удалось пометить на удаление файл ""%1"".
                                  |%2';
                                  |en = 'Failed to mark the ""%1"" file for deletion.
                                  |%2'");
			Если МетаданныеДокументаОснования = Неопределено Тогда
					
				МетаданныеДокументаОснования = ДокументОснование.Метаданные();
				
			КонецЕсли;
			
			ИмяСобытия = УниверсальныйОбменСБанкамиОбщегоНазначения.СобытиеЖурналаРегистрации(
				СервисОбменаСБанками,
				НСтр("ru = 'Синхронизация присоединенных файлов';
					|en = 'Attachment synchronization'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокументаОснования, ДокументОснование,
				СтрШаблон(ОписаниеОшибки, Строка(ДопФайл), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Выполняет формирование архива с файлами заявки на основании данных транзации, ранее помещенных в регистр сведений.
//
// Параметры:
//	ИдентификаторХранилищаТранзакций - Строка - см. ИдентификаторВременногоХранилищаТранзакций в ПодготовитьЗаявкуДляОтправки() у документа.
//	АдресАрхива   - Строка - адрес временного хранилища, куда поместить данные zip-архива.
//	КомментарийАрхива - Строка - текст, который будет записан как комментарий к zip-архиву.
//
Процедура СоздатьАрхивПоДаннымТранзакций(ИдентификаторХранилищаТранзакций, АдресАрхива, КомментарийАрхива) Экспорт
	
	УниверсальныйОбменСБанками.ПодготовитьАрхивыВЖурналеОперацийСФайлами(ИдентификаторХранилищаТранзакций, "", Новый Структура);
	
	ПутьКВременномуКаталогу = ФайловаяСистема.СоздатьВременныйКаталог();
	
	Выборка = УниверсальныйОбменСБанками.ВыбратьЗаписиЖурналаОперацийСФайламиПоИдентификатору(
				ИдентификаторХранилищаТранзакций, Истина);
	Пока Выборка.Следующий() Цикл

		ДанныеДляЗаписи = Выборка.ИсходныеДанные.Получить();
		Если ДанныеДляЗаписи <> Неопределено Тогда
			ДанныеДляЗаписи.Записать(ПутьКВременномуКаталогу + Выборка.ИсходноеИмяФайла);
		КонецЕсли;

	КонецЦикла;

	СоздаваемыйАрхив = Новый ЗаписьZipФайла;
	СоздаваемыйАрхив.Добавить(ПутьКВременномуКаталогу + "*");
	ПоместитьВоВременноеХранилище(СоздаваемыйАрхив.ПолучитьДвоичныеДанные( , КомментарийАрхива), АдресАрхива);
	
	ФайловаяСистема.УдалитьВременныйКаталог(ПутьКВременномуКаталогу);
	
	УстановитьПривилегированныйРежим(Истина);
	УниверсальныйОбменСБанками.УдалитьЗаписиЖурналаОперацийСФайламиПоИдентификатору(ИдентификаторХранилищаТранзакций);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ДополнительныеПоказатели

Функция НовыйТаблицаДополнительныеПоказатели() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор",                    ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Результат.Колонки.Добавить("КраткоеПредставление",             ОбщегоНазначения.ОписаниеТипаСтрока(50));
	Результат.Колонки.Добавить("ПодробноеПредставление",           ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ТипПоказателя",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("Разрядность",                      ОбщегоНазначения.ОписаниеТипаЧисло(3));
	Результат.Колонки.Добавить("РазрядностьДробнойЧасти",          ОбщегоНазначения.ОписаниеТипаЧисло(2));
	Результат.Колонки.Добавить("НеОтрицательный",                  Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПодсказкаВвода",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("Маска",                            ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ФорматРедактирования",             ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("МинимальноеЗначение",              ОбщегоНазначения.ОписаниеТипаЧисло(20, 6));
	Результат.Колонки.Добавить("МаксимальноеЗначение",             ОбщегоНазначения.ОписаниеТипаЧисло(20, 6));
	Результат.Колонки.Добавить("Обязательный",                     Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ЗначенияПеречисления",             Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("Банки",                            Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("КоличествоБанков",                 ОбщегоНазначения.ОписаниеТипаЧисло(15));
	Результат.Колонки.Добавить("ИдентификаторыКредитныхПродуктов", Новый ОписаниеТипов("Массив"));
	
	Результат.Индексы.Добавить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоРазличныхБанковТребующихПоказатели(Показатели) Экспорт
	
	Банки = Новый Массив;
	
	Для каждого Показатель Из Показатели Цикл
		Для каждого Банк Из Показатель.Банки Цикл
			Если Банки.Найти(Банк) = Неопределено Тогда
				Банки.Добавить(Банк);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Банки.Количество();
	
КонецФункции

Функция ПолучитьДобавляемыеРеквизитыФормы(Описание) Экспорт
	
	Результат = Новый Массив;
	
	Если Описание.ТипПоказателя = "Строка" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Число" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаЧисло(
				Описание.Разрядность,
				Описание.РазрядностьДробнойЧасти,
				?(Описание.Неотрицательный, ДопустимыйЗнак.Неотрицательный, ДопустимыйЗнак.Любой)
			),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Дата" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Булево" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
	ИначеЕсли Описание.ТипПоказателя = "Перечисление" Тогда
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор),
			ОбщегоНазначения.ОписаниеТипаСтрока(0),,
			Описание.КраткоеПредставление,
			Истина
		));
		Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
			// Реквизит для хранения адреса значений перечисления.
			Результат.Добавить(Новый РеквизитФормы(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(
					УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
				ОбщегоНазначения.ОписаниеТипаСтрока(0),,
				Описание.КраткоеПредставление,
				Истина
			));
			// Реквизит для хранения представления выбранного значения перечисления.
			Результат.Добавить(Новый РеквизитФормы(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(
					УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
				ОбщегоНазначения.ОписаниеТипаСтрока(0),,
				Описание.КраткоеПредставление,
				Истина
			));
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		// Переключатель показателя.
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
			Новый ОписаниеТипов("Булево"),,
			Описание.КраткоеПредставление,
			Истина
		));
		// Заглушка.
		Результат.Добавить(Новый РеквизитФормы(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(
				УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)),
			ОбщегоНазначения.ОписаниеТипаСтрока(0)
		));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУдаляемыеРеквизитыФормы(Описание) Экспорт
	
	Результат = Новый Массив;
	
	// Значение показателя.
	Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор));
	
	Если НЕ Описание.Обязательный Тогда
		// Переключатель показателя.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
		// Заглушка.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
	КонецЕсли;
	
	Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
		// Представление показателя.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
		// Значения перечисления.
		Результат.Добавить(УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(
			УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор)));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДобавляемыеРеквизитыФормы(Форма, ДобавляемыеПоказатели) Экспорт
	
	Для каждого Показатель Из ДобавляемыеПоказатели Цикл
		
		ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Показатель.Идентификатор);
		
		Если НЕ Показатель.Обязательный Тогда
			ИмяРеквизитаПереключателя = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяРеквизита);
			Форма[ИмяРеквизитаПереключателя] = Истина;
		КонецЕсли;
		
		Если ИспользоватьФормуВыбораПеречисления(Показатель) Тогда
			ИмяРеквизитаАдресаЗначений = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяАдресаЗначений(ИмяРеквизита);
			ИмяРеквизитаПредставления = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяРеквизита);
		
			ЗначенияПеречисления = Новый Массив;
			Для каждого Значение Из Показатель.ЗначенияПеречисления Цикл
				ЗначениеПеречисления = Новый Структура;
				ЗначениеПеречисления.Вставить("Идентификатор",          Значение.Идентификатор);
				ЗначениеПеречисления.Вставить("КраткоеПредставление",   Значение.КраткоеПредставление);
				ЗначениеПеречисления.Вставить("ПодробноеПредставление", Значение.ПодробноеПредставление);
				ЗначенияПеречисления.Добавить(ЗначениеПеречисления);
			КонецЦикла;
			
			Форма[ИмяРеквизитаАдресаЗначений] = ПоместитьВоВременноеХранилище(ЗначенияПеречисления, Форма.УникальныйИдентификатор);
			Форма[ИмяРеквизитаПредставления] = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПодчиненныеЭлементы(Форма, КоллекцияЭлементов) Экспорт
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			УдалитьПодчиненныеЭлементы(Форма, Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла;
	
	Для каждого Элемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьГруппуНеобязательныхДополнительныхПоказателей(Форма, Родитель) Экспорт
	
	ИмяГруппы = СтрШаблон("Группа_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок = Истина;
	Группа.Заголовок = НСтр("ru = 'Снимите флажок, если показатель неприменим для Вашего бизнеса';
							|en = 'Clear the check box if the indicator is not applicable for your business'");
	Группа.ЦветТекстаЗаголовка = ЦветаСтиля.ПоясняющийТекст;
	Группа.Ширина = 60;
	
	Возврат Группа;
	
КонецФункции

Функция ДобавитьПоле(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено) Экспорт
	
	Если Описание.ТипПоказателя = "Строка" Тогда
		Возврат ДобавитьПолеСтрока(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Число" Тогда
		Возврат ДобавитьПолеЧисло(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Дата" Тогда
		Возврат ДобавитьПолеДата(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Булево" Тогда
		Возврат ДобавитьПолеБулево(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	ИначеЕсли Описание.ТипПоказателя = "Перечисление" Тогда
		Возврат ДобавитьПолеПеречисление(Форма, Родитель, Описание, ДополнениеТекстаПодсказки);
	КонецЕсли;
	
КонецФункции

Функция НовыйТаблицаЗначенияПеречисления() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",                ОбщегоНазначения.ОписаниеТипаЧисло(15));
	Результат.Колонки.Добавить("Идентификатор",          ОбщегоНазначения.ОписаниеТипаСтрока(100));
	Результат.Колонки.Добавить("КраткоеПредставление",   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ПодробноеПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат Результат;
	
КонецФункции

Функция ИспользоватьФормуВыбораПеречисления(Описание) Экспорт
	
	Если Описание.ТипПоказателя <> "Перечисление" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Ложь;
	
	КолонкаПодробноеПредставлениеЗаполнена = Ложь;
	Для каждого ЗначениеПеречисления Из Описание.ЗначенияПеречисления Цикл
		Если ЗначениеЗаполнено(ЗначениеПеречисления.ПодробноеПредставление) Тогда
			КолонкаПодробноеПредставлениеЗаполнена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	МаксимальноеЧислоЭлементовСпискаВыбора = 10;
	
	Результат = КолонкаПодробноеПредставлениеЗаполнена
		ИЛИ Описание.ЗначенияПеречисления.Количество() > МаксимальноеЧислоЭлементовСпискаВыбора;
	
	Возврат Результат;
	
КонецФункции

// Добавляет в xml-файл тег ДополнительныеПоказатели и заполняет его.
//
// Параметры:
//  Компоновщик  - ЗаписьXML - объект для формирования xml-файла.
//  ПараметрыПредставления - Структура - см. ЗаявкиНаОткрытиеСчета.НовыеСведенияЗаявкиНаОткрытиеСчета()
//                                       или ЗаявкиНаКредит.НовыеСведенияЗаявкиНаКредит()
//
Процедура ВывестиУзел_ДополнительныеПоказатели(Компоновщик, ПараметрыПредставления) Экспорт
	
	Если ПараметрыПредставления.ДополнительныеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДополнительныеПоказатели");
	
	Для каждого Показатель Из ПараметрыПредставления.ДополнительныеПоказатели Цикл
		Компоновщик.ЗаписатьНачалоЭлемента(Показатель.Идентификатор);
		Если Показатель.ДанныеОтсутствуют Тогда
			УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ДанныеОтсутствуют", Число(Показатель.ДанныеОтсутствуют), "Ч,1");
		ИначеЕсли ЗначениеЗаполнено(Показатель.Значение) Тогда
			УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиТекст(Компоновщик, Показатель.Значение);
		КонецЕсли;
		Компоновщик.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // ДополнительныеПоказатели
	
КонецПроцедуры

// Добавляет в xml-файл тег ДополнительныеФайлы и заполняет его.
//
// Параметры:
//  Компоновщик  - ЗаписьXML - объект для формирования xml-файла.
//  ПараметрыПредставления - Структура - см. ЗаявкиНаОткрытиеСчета.НовыеСведенияЗаявкиНаОткрытиеСчета()
//                                       или ЗаявкиНаКредит.НовыеСведенияЗаявкиНаКредит()
//  ПараметрыУпорядочения - Структура - по каким разделам упорядочен список. Содержит: ГруппаАнкета, ГруппаПоУмолчанию, ПорядокВывода. 
//
Процедура ВывестиУзел_ДополнительныеФайлы(Компоновщик, ПараметрыПредставления, ПараметрыУпорядочения) Экспорт
	
	ДополнительныеФайлы = ПараметрыПредставления.ДополнительныеФайлы;
	
	ГруппаАнкета = ПараметрыУпорядочения.ГруппаАнкета;
	ГруппаПоУмолчанию = ПараметрыУпорядочения.ГруппаПоУмолчанию;
	
	Компоновщик.ЗаписатьНачалоЭлемента("ДополнительныеФайлы");
	Для Каждого Идентификатор Из ПараметрыУпорядочения.ПорядокВывода Цикл
		
		Если Идентификатор = ГруппаАнкета Тогда
			Продолжить;
		ИначеЕсли Идентификатор = ГруппаПоУмолчанию Тогда
			ЭтоВнешниеФайлы = Истина;
		Иначе
			ЭтоВнешниеФайлы = Ложь;
		КонецЕсли;
		ГруппаФайлов = ДополнительныеФайлы[Идентификатор];
		
		Если ЭтоВнешниеФайлы Тогда
			
			ПредыдущийИдентификатор = "";
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				Если ПредыдущийИдентификатор <> ДопФайл.Идентификатор Тогда
					
					Если Не ПустаяСтрока(ПредыдущийИдентификатор) Тогда
						Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области с именем идентификатора доп.файла
					КонецЕсли;
					
					ПредыдущийИдентификатор = ДопФайл.Идентификатор;
					Компоновщик.ЗаписатьНачалоЭлемента(ДопФайл.Идентификатор);
					
				КонецЕсли;
				Если ДопФайл.ДанныеОтсутствуют Тогда
					
					УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ДанныеОтсутствуют", Число(ДопФайл.ДанныеОтсутствуют), "Ч,1");
					Продолжить;
					
				КонецЕсли;
					
				Компоновщик.ЗаписатьНачалоЭлемента("Файл");
				УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ИсходноеИмяФайла", ДопФайл.ИмяФайла);
				Если Не ПустаяСтрока(ДопФайл.ИмяФайлаXML)
				   И Прав(ДопФайл.ИмяФайла, 4) <> Прав(ДопФайл.ИмяФайлаXML, 4) Тогда
					УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ИсходноеИмяФайлаXML", ДопФайл.ИмяФайлаXML);
				КонецЕсли;
				УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиТекст(Компоновщик, ДопФайл.КраткоеПредставление);
				Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области Файл
				
			КонецЦикла;
			Если Не ПустаяСтрока(ПредыдущийИдентификатор) Тогда
				Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области с именем идентификатора доп.файла
			КонецЕсли;
			
		Иначе
			
			Компоновщик.ЗаписатьНачалоЭлемента(Идентификатор);
			Для каждого ДопФайл Из ГруппаФайлов Цикл
				
				Компоновщик.ЗаписатьНачалоЭлемента("Файл");
				УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ИсходноеИмяФайла", ДопФайл.ИмяФайла);
				Если Не ПустаяСтрока(ДопФайл.ИмяФайлаXML)
				   И Прав(ДопФайл.ИмяФайла, 4) <> Прав(ДопФайл.ИмяФайлаXML, 4) Тогда
					УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиАтрибут(Компоновщик, "ИсходноеИмяФайлаXML", ДопФайл.ИмяФайлаXML);
				КонецЕсли;
				УниверсальныйОбменСБанкамиОбщегоНазначения.ВывестиТекст(Компоновщик, ДопФайл.КраткоеПредставление);
				Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области Файл
				
			КонецЦикла;
			Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области с именем идентификатора доп.файла
			
		КонецЕсли;
		
	КонецЦикла;
	
	Компоновщик.ЗаписатьКонецЭлемента(); // закрывающий тег для области ДополнительныеФайлы
	
КонецПроцедуры

#КонецОбласти

#Область СогласиеНаОбработкуДанных

// Запускает фоновое задание, которое формирует html-текст согласия на обработку данных.
//
// Параметры:
//  ПараметрыСогласия - Структура - см. УниверсальныйОбменСБанкамиФормыВызовСервера.ПараметрыСогласия()
//  ОбъектыСогласия - Массив из Структура - список получателей согласия:
//                             * Банк - СправочникСсылка.БанкиУниверсальногоОбмена - получатель.
//                             * ИдентификаторПродукта - Строка - вариант заявки.
//  УникальныйИдентификатор - УникальныйИдентификатор - форма, с которой будет связано фоновое задание.
//
// Возвращаемое значение:
//   Структура   - описание запущенного фонового задания. См. ДлительныеОперации.ВыполнитьВФоне()
//
Функция ЗаполнитьТекстСогласияВФоне(ПараметрыСогласия, ОбъектыСогласия, УникальныйИдентификатор) Экспорт
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыСогласия.СервисОбменаСБанками);
	Если Не УниверсальныйОбменСБанками.СервисСуществует(ИмяСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПараметрыСогласия", ПараметрыСогласия);
	ПараметрыЗаполнения.Вставить("ОбъектыСогласия",  ОбъектыСогласия);
	
	Если ИмяСервиса = "ЗаявкиНаОткрытиеСчета" Тогда
		ИмяСущности = НСтр("ru = 'заявки на открытие счета';
							|en = 'requests for opening an account'");
		МодульЗаполнения = "ЗаявкиНаОткрытиеСчета";
	Иначе
		ИмяСущности = НСтр("ru = 'заявки на кредит';
							|en = 'loan requests'");
		МодульЗаполнения = "ЗаявкиНаКредит";
	КонецЕсли;
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = СтрШаблон(
		НСтр("ru = 'Заполнение согласия на обработку данных из %1';
			|en = 'Fill the agreement for data processing from %1'"), ИмяСущности);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		СтрШаблон("%1.ЗаполнитьТекстСогласияВФоне", МодульЗаполнения),
		ПараметрыЗаполнения,
		ПараметрыВыполненияВФоне);
		
	Возврат ДлительнаяОперация;
	
КонецФункции

// Получает из специального сервиса информацию о банках-получателях согласия на обработку персональных данных.
//
// Параметры:
//  Банки         - ОпределяемыйТип.БанкиУниверсальногоОбмена, Массив - о чем собирается информация.
//
// Возвращаемое значение:
//   ТаблицаЗначений - информация о кредиторах.
//
Функция ПодготовитьИнформациюОБанкахДляСогласий(Банки) Экспорт
	
	ЭтоСписок = (ТипЗнч(Банки) <> Тип("СправочникСсылка.БанкиУниверсальногоОбмена"));

	РеквизитыБанков = УниверсальныйОбменСБанками.РеквизитыБанков(
		?(ЭтоСписок, Банки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Банки)),
		"Наименование, НаименованиеСокращенное, НаименованиеПолное, ИНН, ОГРН, Адрес");
	РеквизитыБанков.Колонки.НаименованиеПолное.Имя = "ПолноеНаименованиеБанка";
	РеквизитыБанков.Колонки.ИНН.Имя                = "ИННБанка";
	РеквизитыБанков.Колонки.ОГРН.Имя               = "ОГРНБанка";
	РеквизитыБанков.Колонки.Адрес.Имя              = "ЮридическийАдресБанка";
	
	РеквизитыБанков.Колонки.Добавить("ТекстМакета", Новый ОписаниеТипов("Строка"));
	РеквизитыБанков.Колонки.Добавить("ПараметрыМакета", Новый ОписаниеТипов("ТаблицаЗначений"));

	Для каждого РеквизитыБанка Из РеквизитыБанков Цикл

		РеквизитыБанка.ЮридическийАдресБанка =
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(РеквизитыБанка.ЮридическийАдресБанка);
	
	КонецЦикла;
	
	Возврат РеквизитыБанков;
	
КонецФункции

// HTML-код для списка банков.
//
// Параметры:
//  РеквизитыОбъектов - ТаблицаЗначений - см. ПодготовитьИнформациюОБанкахДляСогласий() в модулях ЗаявкиНаКредит/ЗаявкиНаОткрытиеСчета.
//  ОдинБезHTML  - Булево - если всего один банк, то не обрамлять его HTML-тегами.
//
// Возвращаемое значение:
//   Строка      - представление списка банков для вывода в согласие на обработку персональных данных.
//
Функция ПредставлениеСпискаБанков(РеквизитыОбъектов, ОдинБезHTML = Истина) Экспорт
	
	ШаблонОписанияБанка = НСтр("ru = '<li>%1, расположенному по адресу : %2,</li>';
								|en = '<li>%1, from : %2,</li>'");
	
	Если РеквизитыОбъектов.Количество() > 1 Тогда
		
		БанкиРеквизиты = Новый Массив;
		Для Каждого Банк Из РеквизитыОбъектов Цикл
			
			БанкиРеквизиты.Добавить(СтрШаблон(ШаблонОписанияБанка, Банк.Наименование, Банк.ЮридическийАдресБанка));
			
		КонецЦикла;
		БанкиПредставление = СтрСоединить(БанкиРеквизиты, Символы.ПС);
		
	Иначе
		
		Банк = РеквизитыОбъектов[0];
		БанкиПредставление = СтрШаблон(ШаблонОписанияБанка, Банк.Наименование, Банк.ЮридическийАдресБанка);
		
	КонецЕсли;
	
	Возврат БанкиПредставление;
	
КонецФункции

// Определяет особенности заполнения текста согласия на обработку персональных данных.
//
Функция ПараметрыФорматированияСогласия() Экспорт
	
	ПараметрыФорматирования = Новый Структура;
	
	// Формировать один текстовый документ (Истина) или массив текстов (Ложь).
	ПараметрыФорматирования.Вставить("ОбъединитьТексты", Истина);
	
	// Имя реквизита объектов-получателей согласия (банков), задающее их представление.
	ПараметрыФорматирования.Вставить("ИмяРеквизитаПредставленияБанка", "Наименование");
	
	// Выделять вставленные значения параметров тегом "<B>" (Истина) или нет (Ложь).
	ПараметрыФорматирования.Вставить("ВыделятьЗначенияПараметров", Истина);
			
	Возврат ПараметрыФорматирования;
	
КонецФункции

// Анализирует, какие параметры есть в переданном тексте.
//
// Параметры:
//  ТекстМакета  - HTML-текст - текст, содержащий параметры в фигурных скобках. Для использования "{" в тексте, а не в
//                              параметре нужно ее указать два раза.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//                    * ИмяПараметра - Строка - заменяемый идентификатор.
//                    * ПозицияНачала - Число - номер символа начала.
//                    * ПозицияКонца - Число - номер символа конца.
//                    * ЗначениеПараметра - Произвольный - что подставлять вместо имени параметра.
//
Функция РазметкаТекста(ТекстМакета) Экспорт
	
	ПараметрыМакета = Новый ТаблицаЗначений;
	ПараметрыМакета.Колонки.Добавить("ИмяПараметра",  ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ПараметрыМакета.Колонки.Добавить("ПозицияНачала", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ПараметрыМакета.Колонки.Добавить("ПозицияКонца",  ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ПараметрыМакета.Колонки.Добавить("ЗначениеПараметра");

	ПозицияПараметра = СтрНайти(ТекстМакета, "{");
	Пока ПозицияПараметра <> 0 Цикл
		
		Если Сред(ТекстМакета, ПозицияПараметра + 1, 1) = "{" Тогда
			// это не параметр, а экранированный символ
			ПозицияПараметра = ПозицияПараметра + 1;

		Иначе
			
			ПараметрМакета = ПараметрыМакета.Добавить();
			ПараметрМакета.ПозицияНачала = ПозицияПараметра;
			ПараметрМакета.ПозицияКонца  = СтрНайти(ТекстМакета, "}", , ПозицияПараметра);
			Если ПараметрМакета.ПозицияКонца = 0 Тогда // ошибочный формат текста макета
				
				ПараметрыМакета.Удалить(ПараметрМакета);
				ПозицияПараметра = СтрДлина(ТекстМакета);

			Иначе

				ПараметрМакета.ИмяПараметра = Сред(ТекстМакета,
					ПараметрМакета.ПозицияНачала + 1,
					ПараметрМакета.ПозицияКонца - ПараметрМакета.ПозицияНачала - 1);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияПараметра = ПозицияПараметра + 1;
		ПозицияПараметра = СтрНайти(ТекстМакета, "{", , ПозицияПараметра);
	
	КонецЦикла;
	
	Возврат ПараметрыМакета;
	
КонецФункции

// Формирует текст согласия на обработку персональных данных.
//
// Параметры:
//  ПараметрыСогласия - Структура - см. УниверсальныйОбменСБанкамиФормыВызовСервера.ПараметрыСогласия()
//  РеквизитыОбъектов - ТаблицаЗначений - см. ПодготовитьИнформациюОБанкахДляСогласий() из модулей ЗаявкиНаКредит/ЗаявкиНаОткрытиеСчета.
//  ПараметрыФорматирования - Структура - см. ПараметрыФорматированияСогласия()
//
// Возвращаемое значение:
//   Строка, ТаблицаЗначений - текст для веб-страницы или набор текстов по каждому банку. Колонки таблицы значений:
//   * Банк - СправочникСсылка.БанкиУниверсальногоОбмена - Банк
//   * ИдентификаторПродукта - Строка - Идентификатор кредитного продукта
//   * Текст - Строка - Текст согласия
//
Функция ТекстСогласия(ПараметрыСогласия, РеквизитыОбъектов, ПараметрыФорматирования) Экспорт
	
	Если РеквизитыОбъектов.Количество() = 0 Тогда
		Возврат ?(ПараметрыФорматирования.ОбъединитьТексты, "", Новый Массив);
	КонецЕсли;
	
	// Заполним автозаполняемые параметры.
	ПараметрыСогласия.Вставить("ДатаДокумента", Формат(ПараметрыСогласия.ДатаСогласия, "ДЛФ=DD"));
	Если ПараметрыСогласия.Свойство("ДатаРожденияФЛ") Тогда
		ПараметрыСогласия.ДатаРожденияФЛ = Формат(ПараметрыСогласия.ДатаРожденияФЛ, "ДЛФ=DD");
	КонецЕсли;

	ПараметрыСогласия.Вставить("НаименованиеДоРеорганизации", "");
	Если ПараметрыСогласия.Свойство("ПолноеНаименованиеДоРеорганизации")
		И ПараметрыСогласия.Свойство("СокращенноеНаименованиеДоРеорганизации") Тогда
		Если ЗначениеЗаполнено(ПараметрыСогласия.ПолноеНаименованиеДоРеорганизации)
			ИЛИ ЗначениеЗаполнено(ПараметрыСогласия.СокращенноеНаименованиеДоРеорганизации) Тогда

			ПараметрыСогласия.НаименованиеДоРеорганизации = СтрШаблон(
				НСтр("ru = ',</B> сведения о реорганизации: <B>%1 (%2)';
					|en = ',</B> information records on reorganization: <B>%1 (%2)'"),
				ПараметрыСогласия.ПолноеНаименованиеДоРеорганизации,
				ПараметрыСогласия.СокращенноеНаименованиеДоРеорганизации);
		КонецЕсли;
	КонецЕсли;
	
	Ключ = "Банк";
	Если РеквизитыОбъектов.Колонки.Найти("Учредитель") <> Неопределено Тогда
		Ключ = "Учредитель";
	КонецЕсли;

	// Заполняем параметры в макетах.
	ТекстыСогласий = Новый ТаблицаЗначений;
	ТекстыСогласий.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.БанкиУниверсальногоОбмена"));
	ТекстыСогласий.Колонки.Добавить("ИдентификаторПродукта", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТекстыСогласий.Колонки.Добавить("Текст", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТекстыСогласий.Индексы.Добавить("Банк, ИдентификаторПродукта");
	
	Для каждого ИнформацияОбОбъекте Из РеквизитыОбъектов Цикл
	
		ТекстыРезультата = Новый Массив;
		ПозицияКурсора = 1;
		Для каждого ПараметрМакета Из ИнформацияОбОбъекте.ПараметрыМакета Цикл
			
			ЗначениеПараметра = Неопределено;
			Если ПараметрыСогласия.Свойство(ПараметрМакета.ИмяПараметра, ЗначениеПараметра)
			   И ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			   
				ПараметрМакета.ЗначениеПараметра = ЗначениеПараметра;

			ИначеЕсли РеквизитыОбъектов.Колонки.Найти(ПараметрМакета.ИмяПараметра) <> Неопределено Тогда

				ПараметрМакета.ЗначениеПараметра = ИнформацияОбОбъекте[ПараметрМакета.ИмяПараметра];

			ИначеЕсли ПараметрМакета.ИмяПараметра = "НаименованиеДоРеорганизации" Тогда // необязательные параметры
				
				ПараметрМакета.ЗначениеПараметра = "";
				
			Иначе // обязательный параметр

				ПараметрМакета.ЗначениеПараметра = "_______";

			КонецЕсли;
			
			ТекстыРезультата.Добавить(Сред(ИнформацияОбОбъекте.ТекстМакета, ПозицияКурсора, ПараметрМакета.ПозицияНачала - ПозицияКурсора));
			Если ПараметрыФорматирования.ВыделятьЗначенияПараметров Тогда
				ТекстыРезультата.Добавить("<B>");
			КонецЕсли;
			ТекстыРезультата.Добавить(ПараметрМакета.ЗначениеПараметра);
			Если ПараметрыФорматирования.ВыделятьЗначенияПараметров Тогда
				ТекстыРезультата.Добавить("</B>");
			КонецЕсли;
			ПозицияКурсора = ПараметрМакета.ПозицияКонца + 1;
		
		КонецЦикла; 
		Если ПозицияКурсора <= СтрДлина(ИнформацияОбОбъекте.ТекстМакета) Тогда
			ТекстыРезультата.Добавить(Сред(ИнформацияОбОбъекте.ТекстМакета, ПозицияКурсора));
		КонецЕсли;
		
		НоваяСтрока = ТекстыСогласий.Добавить();
		Если РеквизитыОбъектов.Колонки.Найти("Банк") <> Неопределено Тогда
			НоваяСтрока.Банк = ИнформацияОбОбъекте.Банк;
		КонецЕсли;
		Если РеквизитыОбъектов.Колонки.Найти("ИдентификаторПродукта") <> Неопределено Тогда
			НоваяСтрока.ИдентификаторПродукта = ИнформацияОбОбъекте.ИдентификаторПродукта;
		КонецЕсли;
		НоваяСтрока.Текст = СтрСоединить(ТекстыРезультата);
	
	КонецЦикла;
	
	// Объединяем согласия нескольких объектов в один html-текст.
	Если ТекстыСогласий.Количество() = 1 Тогда
		
		Если ПараметрыФорматирования.ОбъединитьТексты Тогда
			Для каждого СтрокаТаблицы Из ТекстыСогласий Цикл
				Возврат СтрокаТаблицы.Текст;
			КонецЦикла;
		Иначе
			Возврат ТекстыСогласий;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыФорматирования.ОбъединитьТексты Тогда
			
			МассивТекстовСогласий = Новый Массив;
			Для каждого СтрокаТаблицы Из ТекстыСогласий Цикл
				МассивТекстовСогласий.Добавить(СтрокаТаблицы.Текст);
			КонецЦикла;
			
			АнализируемыйТекст = НРег(МассивТекстовСогласий[0]);
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, "<body");
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, ">", НаправлениеПоиска.СНачала, ПозицияКурсора);
			ТекстДоТела = Лев(МассивТекстовСогласий[0], ПозицияКурсора);
			ПозицияКурсора = СтрНайти(АнализируемыйТекст, "</body>", НаправлениеПоиска.СКонца);
			ТекстПослеТела = Сред(МассивТекстовСогласий[0], ПозицияКурсора);
			
			// Оставляем только тела html-документов.
			РазделительнаяЛиния = "<P align=center ALIGN=""center""><FONT size=14><EM><U>%1</U></EM></FONT></P>
			|<P align=center ALIGN=""center"">";
			Для ИндексСогласия = 0 По МассивТекстовСогласий.ВГраница() Цикл
				// Добавляем разделительные линии между согласиями для разных кредиторов.
				// Текущая позиция линии в списке фрагментов текста сдвигается пропорционально числу элементов.
				ИндексРазделительнойЛинии = ИндексСогласия * 2;
				АнализируемыйТекст = НРег(МассивТекстовСогласий[ИндексРазделительнойЛинии]);
				ПозицияКурсора = СтрНайти(АнализируемыйТекст, "<body");
				ПозицияКурсора = СтрНайти(АнализируемыйТекст, ">", НаправлениеПоиска.СНачала, ПозицияКурсора);
				МассивТекстовСогласий[ИндексРазделительнойЛинии] = Сред(МассивТекстовСогласий[ИндексРазделительнойЛинии],
					ПозицияКурсора + 1,
					СтрНайти(АнализируемыйТекст, "</body>", НаправлениеПоиска.СКонца) - ПозицияКурсора - 1);
					
				МассивТекстовСогласий.Вставить(ИндексРазделительнойЛинии,
					СтрШаблон(РазделительнаяЛиния, РеквизитыОбъектов[ИндексСогласия][ПараметрыФорматирования.ИмяРеквизитаПредставленияБанка]));
				
			КонецЦикла;

			МассивТекстовСогласий.Вставить(0, ТекстДоТела);
			МассивТекстовСогласий.Добавить(ТекстПослеТела);
			ТекстыРезультата = СтрСоединить(МассивТекстовСогласий);
			
		Иначе
			
			ТекстыРезультата = ТекстыСогласий;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат ТекстыРезультата;

КонецФункции

#КонецОбласти

#Область ПоказателиДеятельности

// Возвращает структуру с ключевым показателями деятельности заемщика.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой оформляется заявка.
//	Дата - Дата - Дата расчета показателей.
//
// Возвращаемое значение:
//	Структура - см. переменную Результат.
//
Функция ПоказателиДеятельности(Организация, Дата) Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("СреднемесячноеПоступлениеНаСчет",                 0);
	Результат.Вставить("МинимальноеЕжемесячноеПоступлениеНаСчет",         0);
	Результат.Вставить("ДатаНачалаУчетаВПрограмме",            '0001-01-01');
	Результат.Вставить("ДатаФактическогоНачалаВеденияБизнеса", '0001-01-01');
	Результат.Вставить("СуммаВыручки",                                    0);
	
	ДоступныеОрганизации = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		// Нет доступа к организации, нечего возвращать.
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаПоступленияНаСчет = ПоступлениеНаСчет(Дата, , Организация);
	ВыручкаОрганизации = ВыручкаОрганизации(Дата, Организация, 12);
	
	Результат.СреднемесячноеПоступлениеНаСчет = ТаблицаПоступленияНаСчет.Итог("Среднее");
	Результат.МинимальноеЕжемесячноеПоступлениеНаСчет = ТаблицаПоступленияНаСчет.Итог("Минимум");
	Результат.ДатаНачалаУчетаВПрограмме = ДатаНачалаУчетаВПрограмме(Организация);
	Результат.ДатаФактическогоНачалаВеденияБизнеса = ДатаФактическогоНачалаВеденияБизнеса(Организация, Дата);
	
	Если ВыручкаОрганизации.Количество() > 0 Тогда
		Результат.СуммаВыручки = ВыручкаОрганизации.Итог("Выручка");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает таблицу значений с суммами поступлений на расчетные счета по организациям информационной базы:
// - среднемесячное поступление
// - минимальное ежемесячное поступление
// Допускается установка отбора по одной организации или массиву организаций.
// В этом случае в таблице будут выведены строки только по указанным организациям.
//
// Параметры:
//	Дата - Дата - Дата расчета.
//	КоличествоМесяцев - Число - Количество месяцев, за которые выполняется расчет.
//	Организация - СправочникСсылка.Организации - Организация, для которой выполняется расчет.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* Организация - СправочникСсылка.Организации - Организация
//		* Среднее - Число - Среднемесячное поступление
//		* Минимум - Число - Максимальное месячное поступление
//
Функция ПоступлениеНаСчет(Дата, Знач КоличествоМесяцев = 0, Организация = Неопределено) Экспорт
	
	ГлубинаРасчетаПоказателей = 6; 
	
	Если Не ЗначениеЗаполнено(КоличествоМесяцев) Тогда
		КоличествоМесяцев = ГлубинаРасчетаПоказателей;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаОборотДт), 0) КАК Среднее,
	|	ЕСТЬNULL(МИНИМУМ(ХозрасчетныйОбороты.СуммаОборотДт), 0) КАК Минимум,
	|	КОЛИЧЕСТВО(ХозрасчетныйОбороты.Период) КАК КолПериодов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)), , &ОтборПоОрганизации, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "Организация В (&Организация)");
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(Дата, -КоличествоМесяцев)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДобавитьМесяц(Дата, -1)));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПоступленияНаСчет = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоступленияНаСчет Цикл
		СтрокаТаблицы.Среднее = Окр(СтрокаТаблицы.Среднее / КоличествоМесяцев, 0); // в руб.
		Если СтрокаТаблицы.КолПериодов < КоличествоМесяцев Тогда
			СтрокаТаблицы.Минимум = 0;
		Иначе
			СтрокаТаблицы.Минимум = Окр(СтрокаТаблицы.Минимум, 0); // в руб.
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПоступленияНаСчет;
	
КонецФункции

// Возвращает таблицу значений с суммами оборотов по счетам 66 "Расчеты по краткосрочным кредитам и займам"
// и 67 "Расчеты по долгосрочным кредитам и займам".
// Допускается установка отбора по одной организации или массиву организаций.
// В этом случае в таблице будут выведены строки только по указанным организациям.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//	Дата - Дата - Дата расчета.
//	КоличествоМесяцев - Число - Количество месяцев, за которые выполняется расчет.
//	Организация - СправочникСсылка.Организации - Организация, для которой выполняется расчет.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* Организация - СправочникСсылка.Организации - Организация
//		* ОборотДт - Число - Дебетовый оборот по счетам расчетов по кредитам и займам
//		* ОборотКт - Число - Кредитовый оборот по счетам расчетов по кредитам и займам
//
Функция ОборотыПоСчетамРасчетов(СервисОбменаСБанками, Дата, Знач КоличествоМесяцев = 0, Организация = Неопределено) Экспорт

	ГлубинаРасчетаПоказателей = 6; 
	
	Если Не ЗначениеЗаполнено(КоличествоМесяцев) Тогда
		КоличествоМесяцев = ГлубинаРасчетаПоказателей;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК ОборотДт,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК ОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В ИЕРАРХИИ (&СчетаРасчетов), , &ОтборПоОрганизации, , ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация");
	
	СчетаРасчетов = Новый Массив;
	
	ИмяСервиса = ОбщегоНазначения.ИмяЗначенияПеречисления(СервисОбменаСБанками);
	
	Если ИмяСервиса <> "ЗаявкиНаЛизинг" Тогда
		СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам); // 66
		СчетаРасчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);  // 67
	КонецЕсли;

	Запрос.УстановитьПараметр("СчетаРасчетов", СчетаРасчетов);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "Организация В (&Организация)");
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(Дата, -КоличествоМесяцев)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДобавитьМесяц(Дата, -1)));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаОбороты = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбороты Цикл
		СтрокаТаблицы.ОборотДт = Окр(СтрокаТаблицы.ОборотДт, 0); // в руб.
		СтрокаТаблицы.ОборотКт = Окр(СтрокаТаблицы.ОборотКт, 0); // в руб.
	КонецЦикла;
	
	Возврат ТаблицаОбороты;
	
КонецФункции

Функция ДатаНачалаУчетаВПрограмме(Организация) Экспорт

	ДатаНачалаУчета = Неопределено;
	
	УниверсальныйОбменСБанкамиПереопределяемый.ДатаНачалаУчетаВПрограмме(Организация, ДатаНачалаУчета);
	
	Возврат ДатаНачалаУчета;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Поля

Функция ДобавитьПолеСтрока(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ПодсказкаВвода = Описание.ПодсказкаВвода;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.Маска = Описание.Маска;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина = 37;
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеЧисло(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.МинимальноеЗначение = Описание.МинимальноеЗначение;
	Элемент.МаксимальноеЗначение = Описание.МаксимальноеЗначение;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеДата(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ФорматРедактирования = Описание.ФорматРедактирования;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеБулево(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.СписокВыбора.Добавить("1", НСтр("ru = 'Да';
											|en = 'Yes'"));
	Элемент.СписокВыбора.Добавить("0", НСтр("ru = 'Нет';
											|en = 'No'"));
	Элемент.Ширина = 14;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеПеречисление(Форма, Родитель, Описание, ДополнениеТекстаПодсказки = Неопределено)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор);
	
	Группа = ДобавитьГруппуГоризонтальную(Форма, Родитель);
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьПолеПереключателяПоказателя(Форма, Группа, Описание);
	КонецЕсли;
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПодсказкаВвода = Описание.ПодсказкаВвода;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Элемент.РасширеннаяПодсказка.Заголовок = СформироватьТекстПодсказки(
		СтроковыеФункции.ФорматированнаяСтрока(Описание.ПодробноеПредставление),
		ДополнениеТекстаПодсказки
	);
	Элемент.РасширеннаяПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылкиДополнительногоПоказателя");
	Элемент.АвтоОтметкаНезаполненного = Истина;
	Если Описание.Обязательный Тогда
		Элемент.Заголовок = Описание.КраткоеПредставление;
		Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Иначе
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоПоказателя");
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.МаксимальнаяШирина = 37;
		Элемент.Видимость = Форма[УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(ИмяЭлемента)];
	КонецЕсли;
	Если ИспользоватьФормуВыбораПеречисления(Описание) Тогда
		Элемент.ПутьКДанным = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПредставления(ИмяЭлемента);
		Элемент.КнопкаВыбора = Истина;
		Элемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСпискеИВПолеВвода;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПеречисления");
		Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПеречисления");
		Элемент.УстановитьДействие("Очистка", "Подключаемый_ОчисткаПеречисления");
		Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПеречисления");
		Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ОкончаниеВводаТекстаПеречисления");
	Иначе
		Элемент.ПутьКДанным = ИмяЭлемента;
		Элемент.РежимВыбораИзСписка = Истина;
		Для каждого ЗначениеПеречисления Из Описание.ЗначенияПеречисления Цикл
			Элемент.СписокВыбора.Добавить(ЗначениеПеречисления.Идентификатор, ЗначениеПеречисления.КраткоеПредставление);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ Описание.Обязательный Тогда
		ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Группа, ИмяЭлемента);
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьПолеПереключателяПоказателя(Форма, Родитель, Описание)
	
	ИмяЭлемента = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяПереключателя(
		УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяРеквизита(Описание.Идентификатор));
	
	Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Родитель);
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	Элемент.ПутьКДанным = ИмяЭлемента;
	Элемент.Заголовок = Описание.КраткоеПредставление;
	Элемент.ВысотаЗаголовка = ВысотаЗаголовка(Описание.КраткоеПредставление);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПереключателяДополнительногоПоказателя");
	
	Возврат Элемент;
	
КонецФункции

#КонецОбласти

#Область ПоказателиДеятельности

Функция ДатаФактическогоНачалаВеденияБизнеса(Организация, Дата)

	// Определим дату первой проводки по поступлению на расчетный счет оплаты от покупателей
	// или даты первой розничной продажи.
	Результат = '3999-12-31';

	Запрос = Новый Запрос;
	
	// Заемщиком выступает юр.лицо "целиком" со всеми его обособленными подразделениями.
	Запрос.УстановитьПараметр("Организация",   ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Дата",          КонецДня(Дата));
	
	СчетаУчетаДС = Новый Массив;
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.Касса); // 50
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета); // 51
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);  // 52
	СчетаУчетаДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);  // 55
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаДС);
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам); // 57.03
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками); // 62
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.Выручка); // 90.01
	СчетаРасчетовСПокупателями = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("СчетаРасчетовСПокупателями", СчетаРасчетовСПокупателями);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация В (&Организация)
	|	И Хозрасчетный.Период <= &Дата
	|	И Хозрасчетный.СчетДт В(&СчетаУчетаДС)
	|	И Хозрасчетный.СчетКт В(&СчетаРасчетовСПокупателями)
	|	И Хозрасчетный.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация В (&Организация)
	|	И ОтчетОРозничныхПродажах.Проведен
	|	И ОтчетОРозничныхПродажах.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРозничныхПродажах.Дата";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаХозрасчетный = РезультатЗапроса[0].Выбрать();
	ВыборкаОтчетОРозничныхПродажах = РезультатЗапроса[1].Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаХозрасчетный.Следующий() Тогда
		Результат = Мин(ВыборкаХозрасчетный.Период, Результат);
	КонецЕсли;
	
	Если ВыборкаОтчетОРозничныхПродажах.Следующий() Тогда
		Результат = Мин(ВыборкаОтчетОРозничныхПродажах.Дата, Результат);
	КонецЕсли;
	
	Если Результат = '3999-12-31' Тогда
		Результат = '0001-01-01';
	КонецЕсли;
	
	Возврат НачалоДня(Результат);

КонецФункции

Функция ВыручкаОрганизации(Дата, Организация, КоличествоМесяцев)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаВыручка.Организация КАК Организация,
	|	СУММА(ТаблицаВыручка.Выручка) - СУММА(ТаблицаВыручка.НДС) КАК Выручка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация,
	|		ХозрасчетныйОбороты.СуммаОборотКт КАК Выручка,
	|		0 КАК НДС
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В (&СчетаВыручка), , &ОтборПоОрганизации, , ) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В (&СчетаПродажиНДС), , &ОтборПоОрганизации, , ) КАК ХозрасчетныйОбороты) КАК ТаблицаВыручка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыручка.Организация");
	
	
 	Запрос.УстановитьПараметр("СчетаВыручка", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
 	Запрос.УстановитьПараметр("СчетаПродажиНДС", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Продажи_НДС));
 
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "Организация В (&Организация)");
		Запрос.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", "");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДобавитьМесяц(Дата, -КоличествоМесяцев)));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ДобавитьМесяц(Дата, -1)));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВыручка = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаВыручка;
	
КонецФункции

#КонецОбласти

Функция ДобавитьЗаглушкуДополнительногоПоказателя(Форма, Родитель, ИмяЭлемента)
	
	ИмяРеквизита = УниверсальныйОбменСБанкамиФормыКлиентСервер.ИмяЗаглушки(ИмяЭлемента);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.Ширина = 1;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = Элемент.Ширина;
	Элемент.Доступность = Ложь;
	Элемент.ЦветРамки = ЦветаСтиля.ЦветФонаФормы;
	
	Возврат Элемент;
	
КонецФункции

Функция ДобавитьГруппуГоризонтальную(Форма, Родитель)
	
	ИмяГруппы = СтрШаблон("Группа_%1", СтрЗаменить(Новый УникальныйИдентификатор, "-", ""));
	
	Группа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа.ОтображатьЗаголовок = Ложь;
	
	Возврат Группа;
	
КонецФункции

Функция СформироватьТекстПодсказки(Знач ТекстПодсказки, Знач ДополнениеТекстаПодсказки)
	
	Если ЗначениеЗаполнено(ТекстПодсказки) И ЗначениеЗаполнено(ДополнениеТекстаПодсказки) Тогда
		ЗнакиПрепинания = ".;!?";
		Если СтрНайти(ЗнакиПрепинания, Прав(ТекстПодсказки, 1)) = 0 Тогда
			ТекстПодсказки = Новый ФорматированнаяСтрока(ТекстПодсказки, ".");
		КонецЕсли;
		Если СтрНайти(ЗнакиПрепинания, Прав(ДополнениеТекстаПодсказки, 1)) = 0 Тогда
			ДополнениеТекстаПодсказки = Новый ФорматированнаяСтрока(ДополнениеТекстаПодсказки, ".");
		КонецЕсли;
		Возврат Новый ФорматированнаяСтрока(
			ТекстПодсказки,
			Символы.ПС,
			ДополнениеТекстаПодсказки
		);
	ИначеЕсли ЗначениеЗаполнено(ТекстПодсказки) Тогда
		Возврат ТекстПодсказки;
	ИначеЕсли ЗначениеЗаполнено(ДополнениеТекстаПодсказки) Тогда
		Возврат ДополнениеТекстаПодсказки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВысотаЗаголовка(ТекстЗаголовка)
	
	МаксимальнаяДлинаЗаголовка = 25;
	
	Возврат ?(СтрДлина(ТекстЗаголовка) > МаксимальнаяДлинаЗаголовка, 2, 0);
	
КонецФункции

#КонецОбласти
