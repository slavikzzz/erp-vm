//////////////////////////////////////////////////////////////////////////////////////////////
// Проверка документов: методы, работающие на стороне сервера.
//
//////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытияФорм

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры;
//  Отказ					- Булево - признак отказа от создания формы;
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события;
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ПриСозданииФормыНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НаФормуДокументаДобавляетсяКомандаПроверки(Форма) Тогда
		
		ДобавитьРеквизитыПроверкиНаФорму(Форма);
		
		КомандаФормы = ДобавитьКомандуПроверкиНаФорму(Форма);
		
		Если КомандаФормы <> Неопределено Тогда
			ОбновитьДанныеПроверкиДокументаНаФорме(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменятьКартинкуПроверкиНаФормеСписка(Форма, ДополнительныеПараметры) Тогда
		// По умолчанию на форме списка отображается замок, в случае проверки документа, но если список смотрит с правами
		// изменения статуса проверки, то для него целесообразнее установить зеленую галочку (как сделано в форме документа).
		
		УстановитьСвойстваКартинкиПроверкиНаФормеСписка(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры;
//	ТекущийОбъект			- ДокументОбъект - обрабатываемый объект, который будет прочитан.
//
Процедура ПриЧтенииФормыНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
		// Форма является проверяемой, значит на ней присутствуют все необходимые реквизиты и команды.
		
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(ТекущийОбъект.Ссылка);
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//	ТекущийОбъект			- ДокументОбъект - записываемый объект.
//	ПараметрыЗаписи			- Структура - дополнительные параметры записи.
//
Процедура ПослеЗаписиНаСервере(Форма,  ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НаФормуДокументаДобавляетсяКомандаПроверки(Форма) Тогда
		
		Если НЕ ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
			// Свойства проверки не были проинициализированы на форме ранее, инициализируем их сейчас.
			ДобавитьРеквизитыПроверкиНаФорму(Форма);
			ДобавитьКомандуПроверкиНаФорму(Форма);
		КонецЕсли;
			
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// В случае использования проверки документов по регл. учету, добавляет в запрос динамического списка журнала документов,
//	условное соединение с регистром сведений "СтатусыПроверкиДокументов" и параметры-шаблоны заменяет на выражения.
//
//	Параметры:
//		ТекстЗапроса - Строка - обрабатываемый текст запроса динамического списка;
//		ИмяОсновнойТаблицы - Строка - служит для определения подстановки условного соединения и для определения условия соединения.
//
Процедура ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(ТекстЗапроса, ИмяОсновнойТаблицы) Экспорт
	
	ТекстПодстановкиСвязи = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверки
		|	ПО ";
	
	Если СтрНайти(ТекстЗапроса, ТекстПодстановкиСвязи) = 0 Тогда // Проверка, что ранее запрос не дорабатывался
		
		ТекстУсловийСвязи = Новый Массив;
		ТекстУсловийСвязи.Добавить(ИмяОсновнойТаблицы + ".Организация = СтатусыПроверки.Организация");
		ТекстУсловийСвязи.Добавить(ИмяОсновнойТаблицы + ".Ссылка = СтатусыПроверки.Документ");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") Тогда
			Для каждого ИсключаемыйТип Из ИсключаемыеТипыДляПроверки() Цикл
				ТекстУсловийСвязи.Добавить("ТИПЗНАЧЕНИЯ(СтатусыПроверки.Документ) <> ТИП(Документ." + Метаданные.НайтиПоТипу(ИсключаемыйТип).Имя + ")");
			КонецЦикла;
		КонецЕсли;
		ТекстПодстановкиСвязи = ТекстПодстановкиСвязи + СтрСоединить(ТекстУсловийСвязи, Символы.ПС + Символы.Таб + Символы.Таб + "И ");
			
		Если СтрНайти(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ") = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК " + ИмяОсновнойТаблицы,
				"КАК " + ИмяОсновнойТаблицы + Символы.ПС + Символы.Таб + "{" + ТекстПодстановкиСвязи + "}" + Символы.ПС);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ", "{" + ТекстПодстановкиСвязи + Символы.ПС + Символы.Таб + "ЛЕВОЕ СОЕДИНЕНИЕ");
		КонецЕсли;
		
		ТекстОпределенияСтатусаПроверки = "ЕСТЬNULL(СтатусыПроверки.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.ПустаяСсылка))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусПроверки", ТекстОпределенияСтатусаПроверки);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндикаторПроверки",
				ТекстОпределенияСтатусаПроверки + " = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиФинансовыхДокументов.Проверен)");
		Иначе
			// Удаляем строку определения поля "ИндикаторПроверки" из запроса:
			ОпределениеПоляИндикатора = "КАК ИндикаторПроверки";
			ОпределениеПоляСтатуса = "КАК СтатусПроверки";
			ПозицияПоляИндикатора = СтрНайти(ТекстЗапроса, ОпределениеПоляИндикатора);
			ПозицияПоляСтатуса = СтрНайти(ТекстЗапроса, ОпределениеПоляСтатуса);
			НачалоУдаления = ПозицияПоляСтатуса + СтрДлина(ОпределениеПоляСтатуса);
			Если ПозицияПоляИндикатора > ПозицияПоляСтатуса Тогда
				УдаляемыйТекст = Сред(ТекстЗапроса, НачалоУдаления, ПозицияПоляИндикатора - НачалоУдаления + СтрДлина(ОпределениеПоляИндикатора));
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, УдаляемыйТекст, "");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПодписокНаСобытия

// Процедура, вызываемая при срабатывании подписки на событие "ПередЗаписью" (см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента").
// Проверяет, можно ли записывать документ (отказывает в записи, в случае если документ был проверен и стоит жесткая
// блокировка объекта при проверке).
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента";
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		РежимЗаписи - Булево - режим записи документа;
//		РежимПроведения - Булево - режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередИзменениемДокумента(Источник, Отказ);
	
КонецПроцедуры

// Определяет необходимость в отказе изменения объекта (отказ будет срабатывать если документ был проверен и стоит
// запрет на редактирование проверенных).
//	
//	Параметры:
//		Источник - ДокументОбъект - документ, который изменяется;
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		Удаление - Булево - признак того, что документ удаляется.
//
Процедура ПередИзменениемДокумента(Источник, Отказ, Удаление = Ложь) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка
		ИЛИ (Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") И Не Удаление)
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	НеПроверятьДокумент = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_Отключить", НеПроверятьДокумент);
	Если НеПроверятьДокумент = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	ИзменениеПроверенных = ДанныеПроверки.УведомительнаяПроверка;
	
	Источник.ДополнительныеСвойства.Вставить("ПроверкаДокументов_ДанныеПроверки", ДанныеПроверки);
	
	Если ДанныеПроверки.Проверен И Не ИзменениеПроверенных Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Документ %Документ% проверен. Нельзя изменять проверенные документы.';
								|en = 'Document %Документ% is checked. Cannot change checked documents.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена.';
										|en = 'Operation failed.'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли ДанныеПроверки.Проверен И Источник.ПометкаУдаления Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Документ %Документ% проверен. Перед пометкой на удаление, необходимо отменить проверку документа.';
								|en = 'Document %Документ% is checked. Cancel the document check before marking it for deletion.  '");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена.';
										|en = 'Operation failed.'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли Удаление И Не ДанныеПроверки.СтатусПроверки.Пустая() Тогда
		// Очищаем ссылки для непроведенных документов, помечаемых на удаление:
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(Источник.Ссылка, Источник.Дата, Новый Массив, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая при срабатывании подписки на событие "ОбработкаПроведения" (см. подписку на событие "ПроверкаДокументовОбработкаПроведенияДокумента").
// Устанавливает статус проверки документа на "НеПроверен".
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовОбработкаПроведенияДокумента";
//		Отказ - Булево - параметр, определяющий будет ли проводиться объект;
//		РежимПроведения - Булево - режим проведения документа.
//
Процедура ПриПроведенииДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

// Процедура, вызываемая при срабатывании подписки на событие "ОбработкаУдаленияПроведения" (см. подписку на событие "ПроверкаДокументовОбработкаУдаленияПроведенияДокумента").
// Устанавливает статус проверки документа на "НеПроверен".
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовОбработкаУдаленияПроведенияДокумента";
//		Отказ - Булево - параметр, определяющий будет ли распроводиться объект;
//
Процедура ПриОтменеПроведенияДокумента(Источник, Отказ) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

// Изменяет статус проверки документа на "НеПроверен", при условии что данный тип документа проверяется и ФО проверки
// документов включена.
//	
//	Параметры:
//		Источник - ДокументОбъект - документ, который изменяется;
//		Отказ - Булево - параметр, определяющий будет ли проводиться (распроводиться) объект.
//
Процедура ПриИзмененииДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ
		ИЛИ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ПроверкаДокументов_Отключить", Ложь)
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов")
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Если ПроведениеДокументов.СвойстваДокумента(Источник).РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(Источник.Ссылка, Источник.Дата, Новый Массив, Новый Структура);
		Возврат;
		
	КонецЕсли;

	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ХозяйственнаяОперация", Источник.ХозяйственнаяОперация);
	Иначе
		ДополнительныеПараметрыПроверки = Неопределено;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_ДанныеПроверки") Тогда
		ДанныеПроверки = Источник.ДополнительныеСвойства.ПроверкаДокументов_ДанныеПроверки;
	Иначе
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	КонецЕсли;
	
	Если ДанныеПроверки.УведомительнаяПроверка И ДанныеПроверки.Проверен ИЛИ Не ДанныеПроверки.Проверен Тогда
		
		МассивОрганизаций = МассивОрганизацийДокумента(Источник);
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(
			Источник.Ссылка, Источник.Дата, МассивОрганизаций, ДанныеПроверки, ДополнительныеПараметрыПроверки);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Другое

//	Обновляет форму в зависимости от данных проверки документа.
//
//	Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, которая должна обновляться:
//			* Объект - ДанныеФормыКоллекция - Объект:
//				** Ссылка - ДокументСсылка -
//		ДанныеПроверки - см. РегистрыСведений.СтатусыПроверкиДокументов.ИнициализироватьДанныеПроверкиДокумента.
//
Процедура ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки = Неопределено) Экспорт
	
	Если ДанныеПроверки = Неопределено Тогда
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Форма.ПроверкаДокументов_ДокументПроверен = ДанныеПроверки.Проверен;

	ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеПроверки);
	
	Если ДанныеПроверки.УведомительнаяПроверка Тогда
		Форма.ПроверкаДокументов_ПодтверждениеЗаписи = Истина;
	Иначе
		БлокировкаФормы(Форма, ДанныеПроверки.Проверен);
	КонецЕсли;
	
КонецПроцедуры

//	Определяет, проверяется ли документ данного типа,
//	определяется на основании наличия данного документа в измерении регистра "СтатусыПроверкиДокументов").
//
//	Параметры:
//		ТипДокумента - Тип - проверяемый тип.
//
//	Возвращаемое значение:
//		Булево - Истина, если документ должен проверяться.
//
Функция ЭтотТипДокументаДолженПроверяться(ТипДокумента) Экспорт
	
	Возврат ПроверяемыеТипыДокументов().Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

// Возвращает массив типов документов, которые участвуют в проверке.
//
// Возвращаемое значение:
//	Массив Из Тип - Типы значения, которые должны проверяться
Функция ПроверяемыеТипыДокументов() Экспорт
	
	СписокПроверяемыхТипов = Метаданные.РегистрыСведений["СтатусыПроверкиДокументов"].Измерения.Документ.Тип.Типы();
	СписокПроверяемыхТипов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПроверяемыхТипов, ИсключаемыеТипыДляПроверки());
	Возврат СписокПроверяемыхТипов;
	
КонецФункции

// Получает документы, которые не должны учитываться как проверяемые. По ним данные могут храниться в инф. базе, но
// более они не учитываются.
//
// Возвращаемое значение:
//	Массив Из Тип - Типы значения, которые не должны проверяться.
//
Функция ИсключаемыеТипыДляПроверки() Экспорт
	
	Возврат РегистрыСведений.НастройкиИсключенийПроверкиДокументов.ИсключаемыеТипыДокументовДляПроверки();
	
КонецФункции

#КонецОбласти

#Область ПереопределениеТекстовЗапросов

// Возвращает перечисление типов, непроверяемых документов строкой
//
//	Параметры:
// 		ТолькоБезВозможностиИзменения - Булево - принак того, что необходимо вернуть только те документы,
// 			настройки по которым не задаются вручную пользователем (нужно, когда результат функции используется в запросе
// 			с отдельным получением данных по таблице исключений). Значение по умолчанию - Ложь.
//		Разделитель - Строка - разделитель, который будет использоваться для разделения типов.
//			Значение по умолчанию: "," + Символы.ПС + Символы.Таб + Символы.Таб.
//			
//	Возвращаемое значение:
//		Строка - строка вида Тип(ПервыйДокумент)<Разделитель>...<Разделитель>Тип(ПоследнийДокумент).
//
Функция ТипыНеПроверяемыхДокументовСтрокой(ТолькоБезВозможностиИзменения = Ложь, Разделитель = Неопределено) Экспорт
	
	МассивСтрокИсключаемыхТипов = Новый Массив;
	
	ИсключаемыеДокументы = РегистрыСведений.НастройкиИсключенийПроверкиДокументов.ИсключаемыеДокументыДляПроверки(ТолькоБезВозможностиИзменения);
	Для каждого ИмяИсключаемогоДокумента Из ИсключаемыеДокументы Цикл
		МассивСтрокИсключаемыхТипов.Добавить("ТИП(Документ." + ИмяИсключаемогоДокумента + ")");
	КонецЦикла;
	
	Разделитель = ?(Разделитель = Неопределено, "," + Символы.ПС + Символы.Таб + Символы.Таб, Разделитель);
	
	СтрокаВозврата = СтрСоединить(МассивСтрокИсключаемыхТипов, Разделитель);
	
	Возврат СтрокаВозврата;
	
КонецФункции

// Переопределяет обращение к временной таблице "ПроверкаДокументовПереопределяемый" на обращение к регистрам сведений проверки
// (СтатусыПроверкиДокументов и НастройкиИсключенийПроверкиДокументов) с отбором только по тем документам, которые должны
// проверяться (на основании предопределенных типов непроверяемых документов и документов добавленных в исключения пользователем).
//
//	Параметры:
//		ТекстЗапроса - Строка - текст запроса, в котором встречается обращение к таблице которую необходимо переопределить.
//			Условия:
//			-	в тексте запроса должно быть только одно обращение к таблице "ПроверкаДокументовПереопределяемый", в противном случае текст необходимо разделить;
//			-	в тексте запроса должны быть перечислены все измерения регистра сведений статусов проверки документа, обращения к измерениям должно находиться справа, например:
//					"И ПроверкаДокументовПереопределяемый.Документ = ПсевдонимТаблицыСвязи.ИмяДокументаСвязи".
//		ПутьКРегистратору - Строка - текст обращения к регистратору вида "ПсевдонимТаблицыСвязи.ИмяДокументаСвязи" для связи с настройкой исключений.
//
Процедура ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомИсключений(ТекстЗапроса, ПутьКРегистратору) Экспорт
	
	//Ищем обращение к переопределяемой таблице:
	СтрокаПоиска = "ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый";
	ПозицияОпределенияТаблицыВЗапросе = СтрНайти(ТекстЗапроса, СтрокаПоиска);
	Если ПозицияОпределенияТаблицыВЗапросе = 0 Тогда
		// В тексте запроса нет обращений к статусам проверки документов, не переопределяем текст запроса.
		Возврат;
	КонецЕсли;
	
	ПозицияПодстановки = СтрНайти(Лев(ТекстЗапроса, ПозицияОпределенияТаблицыВЗапросе), Символы.ПС, НаправлениеПоиска.СКонца);
	
	ТекстПодстановки = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК ИсключенияСлужебный
	|		ПО ТИПЗНАЧЕНИЯ(&ПереопределениеРегистратора) = ТИПЗНАЧЕНИЯ(ИсключенияСлужебный.ВидДокумента.ЗначениеПустойСсылки)
	|			И НЕ ИсключенияСлужебный.Проверяется";
	ТекстПодстановки = СтрЗаменить(ТекстПодстановки, "&ПереопределениеРегистратора", ПутьКРегистратору);
	
	//Делим на половины: до подстановки соединения с регистром исключений и после.
	ЧастьДо = Лев(ТекстЗапроса, ПозицияПодстановки-1);
	ЧастьПосле = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияПодстановки + 1);
	
	СтрокаПоиска = "ПроверкаДокументовПереопределяемый.Документ";
	ПозицияПодстановки = СтрНайти(ЧастьПосле, СтрокаПоиска); //Ищем позицию. где происходит обращение к документу
	ПозицияПодстановки = СтрНайти(ЧастьПосле, Символы.ПС,, ПозицияПодстановки);
	
	ТекстПодстановкиУсловия = "
	|		И ИсключенияСлужебный.ВидДокумента ЕСТЬ NULL И НЕ ТИПЗНАЧЕНИЯ(ПроверкаДокументовПереопределяемый.Документ) В (&ТипыНеПроверяемыхРеквизитов)";
	ТекстПодстановкиУсловия = СтрЗаменить(ТекстПодстановкиУсловия, "&ТипыНеПроверяемыхРеквизитов", ТипыНеПроверяемыхДокументовСтрокой(Истина));
	
	ЧастьПосле = Лев(ЧастьПосле, ПозицияПодстановки-1) + ТекстПодстановкиУсловия + Прав(ЧастьПосле, СтрДлина(ЧастьПосле) - ПозицияПодстановки + 1);
	
	ТекстЗапроса = ЧастьДо + ТекстПодстановки + ЧастьПосле;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПроверкаДокументовПереопределяемый КАК", "РегистрСведений.СтатусыПроверкиДокументов КАК");
	
КонецПроцедуры

// Переопределяет обращение к временной таблице "ПроверкаДокументовПереопределяемый" на обращение к регистрам сведений проверки
// (СтатусыПроверкиДокументов и НастройкиИсключенийПроверкиДокументов) с отбором только по тем документам, которые должны
// проверяться (на основании предопределенных типов непроверяемых документов и документов добавленных в исключения пользователем),
// а так же по тем документов, для которых стоит условие блокировки проверенных (на основании общей ФО и документов добавленных в исключения пользователем).
//
//	Параметры:
//		ТекстЗапроса - Строка - текст запроса, в котором встречается обращение к таблице которую необходимо переопределить.
//			Условия:
//			-	в тексте запроса должно быть только одно обращение к таблице "ПроверкаДокументовПереопределяемый", в противном случае текст необходимо разделить;
//			-	в тексте запроса должны быть перечислены все измерения регистра сведений статусов проверки документа, обращения к измерениям должно находиться справа, например:
//					"И ПроверкаДокументовПереопределяемый.Документ = ПсевдонимТаблицыСвязи.ИмяДокументаСвязи".
//		ПутьКРегистратору - Строка - текст обращения к регистратору вида "ПсевдонимТаблицыСвязи.ИмяДокументаСвязи" для связи с настройкой исключений.
//
Процедура ПереопределитьВТекстеЗапросаСтатусыПроверкиСУчетомБлокировок(ТекстЗапроса, ПутьКРегистратору) Экспорт
	
	//Ищем обращение к переопределяемой таблице:
	СтрокаПоиска = "ПроверкаДокументовПереопределяемый КАК ПроверкаДокументовПереопределяемый";
	ПозицияОпределенияТаблицыВЗапросе = СтрНайти(ТекстЗапроса, СтрокаПоиска);
	Если ПозицияОпределенияТаблицыВЗапросе = 0 Тогда
		// В тексте запроса нет обращений к статусам проверки документов, не переопределяем текст запроса.
		Возврат;
	КонецЕсли;
	
	ПозицияПодстановки = СтрНайти(Лев(ТекстЗапроса, ПозицияОпределенияТаблицыВЗапросе), Символы.ПС, НаправлениеПоиска.СКонца);
	
	ТекстПодстановки = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|			ПО Константы.РазрешатьИзменятьПроверенныеФинансовыеДокументы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИсключенийПроверкиДокументов КАК ИсключенияСлужебный
	|			ПО ТИПЗНАЧЕНИЯ(&ПереопределениеРегистратора) = ТИПЗНАЧЕНИЯ(ИсключенияСлужебный.ВидДокумента.ЗначениеПустойСсылки)
	|				И ИсключенияСлужебный.Проверяется";
	ТекстПодстановки = СтрЗаменить(ТекстПодстановки, "&ПереопределениеРегистратора", ПутьКРегистратору);
	
	//Делим на половины: до подстановки соединения с регистром исключений и после.
	ЧастьДо = Лев(ТекстЗапроса, ПозицияПодстановки-1);
	ЧастьПосле = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияПодстановки + 1);
	
	СтрокаПоиска = "ПроверкаДокументовПереопределяемый.Документ";
	ПозицияПодстановки = СтрНайти(ЧастьПосле, СтрокаПоиска); //Ищем позицию. где происходит обращение к документу
	ПозицияПодстановки = СтрНайти(ЧастьПосле, Символы.ПС,, ПозицияПодстановки);
	
	ТекстПодстановкиУсловия = "
	|		И НЕ ИсключенияСлужебный.ВидДокумента ЕСТЬ NULL И НЕ ТИПЗНАЧЕНИЯ(ПроверкаДокументовПереопределяемый.Документ) В (&ТипыНеПроверяемыхРеквизитов)
	|		И НЕ ЕСТЬNULL(ИсключенияСлужебный.УведомительнаяПроверка, ЕСТЬNULL(Константы.РазрешатьИзменятьПроверенныеФинансовыеДокументы, ЛОЖЬ))";
	ТекстПодстановкиУсловия = СтрЗаменить(ТекстПодстановкиУсловия, "&ТипыНеПроверяемыхРеквизитов", ТипыНеПроверяемыхДокументовСтрокой(Истина));
	
	ЧастьПосле = Лев(ЧастьПосле, ПозицияПодстановки-1) + ТекстПодстановкиУсловия + Прав(ЧастьПосле, СтрДлина(ЧастьПосле) - ПозицияПодстановки + 1);
	
	ТекстЗапроса = ЧастьДо + ТекстПодстановки + ЧастьПосле;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПроверкаДокументовПереопределяемый КАК", "РегистрСведений.СтатусыПроверкиДокументов КАК");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыПроверкиНаФорму(Форма)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ДокументПроверен", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_БлокировкаФормы", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ПодтверждениеЗаписи", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Функция НаФормуДокументаДобавляетсяКомандаПроверки(Форма)
	
	// Управляем проверкой только тогда, когда включена соответствующая функциональная опция.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда есть реквизит "Объект".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда форма является формой документа и для этого документа возможно установить
	// статусы проверки.
	Если Не ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда по документу есть записи в РС "Статусы проверки документов".
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка)
		И НЕ ЕстьЗаписьВРегистреСтатусыПроверки(Форма.Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Форма)
	
	РезультатПроверки = Ложь;
	ПолноеИмяФормы = Форма.ИмяФормы;
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяФормы, ".");
	
	Если МассивИмениФормы.Получить(0) = "Документ" Тогда
		ТипДокументаФормы = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1));
		
		ЭтоФормаДокумента = Ложь;
		РеквизитыФормы = Форма.ПолучитьРеквизиты();
		
		Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
			Если РеквизитФормы.Имя = "Объект"
				И ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1)) Тогда
					ЭтоФормаДокумента = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтотТипДокументаДолженПроверяться(ТипДокументаФормы) И ЭтоФормаДокумента Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ДобавитьКомандуПроверкиНаФорму(Форма)
	
	РазмещениеКоманды = ОпределитьРазмещениеКомандыПроверки(Форма);
	
	Если РазмещениеКоманды.ГруппаФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяКоманды = "ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента";
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду"; // универсальный обработчик
	КомандаФормы.Заголовок = НСтр("ru = 'Проверено';
									|en = 'Checked'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	ЭлементКомандыФормы = Форма.Элементы.Вставить(ИмяКоманды, Тип("КнопкаФормы"), РазмещениеКоманды.ГруппаФормы, РазмещениеКоманды.Элемент);
	ЭлементКомандыФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементКомандыФормы.ИмяКоманды = ИмяКоманды;
	
	Возврат КомандаФормы;
	
КонецФункции

Функция ОпределитьРазмещениеКомандыПроверки(Форма)
	
	РазмещениеКоманды = Новый Структура("ГруппаФормы, Элемент");
	
	КнопкаПроводкиРеглУчета =
		Форма.Элементы.Найти("ФормаОбработкаОтражениеДокументовВРеглУчетеПроводкиРеглУчета");
	КнопкаПроводкиМеждународногоУчета =
		Форма.Элементы.Найти("ФормаОбработкаОтражениеДокументовВМеждународномУчетеПроводкиДокументаОперативногоУчета");
	
	Если КнопкаПроводкиРеглУчета <> Неопределено Тогда
		РазмещениеКоманды.ГруппаФормы = КнопкаПроводкиРеглУчета.Родитель;
	ИначеЕсли КнопкаПроводкиМеждународногоУчета <> Неопределено Тогда
		РазмещениеКоманды.ГруппаФормы = КнопкаПроводкиМеждународногоУчета.Родитель;
	Иначе
		Для каждого ЭлементФормы Из Форма.Элементы Цикл
			Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы")
				ИЛИ СтрНайти(ВРег(ЭлементФормы.Имя), "СПРАВКА") = 0
				ИЛИ ЭлементФормы.Родитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			РазмещениеКоманды.ГруппаФормы = ЭлементФормы.Родитель;
		КонецЦикла;
	КонецЕсли;
	
	Если РазмещениеКоманды.ГруппаФормы = Неопределено Тогда
		Возврат РазмещениеКоманды;
	КонецЕсли;
	
	ИндексКнопки = 0;
	ПодчиненныеЭлементы = РазмещениеКоманды.ГруппаФормы.ПодчиненныеЭлементы; // ЭлементыФормы - коллекция подчиненных элементов
	
	Если КнопкаПроводкиРеглУчета <> Неопределено Тогда
		ИндексКнопки = Макс(ПодчиненныеЭлементы.Индекс(КнопкаПроводкиРеглУчета), ИндексКнопки);
	КонецЕсли;
	
	Если КнопкаПроводкиМеждународногоУчета <> Неопределено Тогда
		ИндексКнопки = Макс(ПодчиненныеЭлементы.Индекс(КнопкаПроводкиМеждународногоУчета), ИндексКнопки);
	КонецЕсли;
	
	Если ИндексКнопки > 0 Тогда
		РазмещениеКоманды.Элемент = ПодчиненныеЭлементы.Получить(ИндексКнопки + 1);
	КонецЕсли;
	
	Возврат РазмещениеКоманды;
	
КонецФункции

// Определить свойства кнопки проверки по данным.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма:
// 		* Объект - ДанныеФормыКоллекция -:
// 			** Ссылка - ДокументСсылка -
//  ДанныеПроверки - см. РегистрыСведений.СтатусыПроверкиДокументов.ИнициализироватьДанныеПроверкиДокумента
Процедура ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеПроверки)
	
	КомандаПроверки = Форма.Команды.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	Если КомандаПроверки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КартинкаКнопки = БиблиотекаКартинок.СтатусДокументПроверен;
	
	ЕстьПравоИзмененияСтатусаПроверки = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов);
	
	Если ДанныеПроверки.СтатусПроверки.Пустая() И Форма.Объект.Ссылка.Пустая() Тогда
		ПодсказкаКнопки = НСтр("ru = 'Проверка документа возможна только после записи документа';
								|en = 'Document check is available only after you post the document'");
	Иначе
		Если ЕстьПравоИзмененияСтатусаПроверки Тогда
			ПодсказкаКнопки = НСтр("ru = 'Изменение статуса проверки документа.';
									|en = 'Change document check status.'");
		Иначе
			Если ДанныеПроверки.Проверен Тогда
				Если ДанныеПроверки.УведомительнаяПроверка Тогда
					Комментарий = НСтр("ru = 'изменения не рекомендуются.';
										|en = 'changes are not recommended.'");
				Иначе
					Комментарий = НСтр("ru = 'изменение невозможно.';
										|en = 'cannot change.'");
				КонецЕсли;
				ПодсказкаКнопки = НСтр("ru = 'Документ проверен';
										|en = 'Document checked'") + ", " + Комментарий;
				КартинкаКнопки = БиблиотекаКартинок.ИсключитьИзНастройкиФормированияПроводок;
			Иначе
				ПодсказкаКнопки = НСтр("ru = 'Документ не проверен.';
										|en = 'The document is not checked.'");
				КартинкаКнопки = БиблиотекаКартинок.ВключитьВНастройкуФормированияПроводок;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеПроверки.Проверен Тогда
		ПояснениеПроверки = Символы.ПС + НСтр("ru = 'Проверил: %Проверил%, Дата: %ДатаПроверки%';
												|en = 'Checked by: %Проверил%, Date: %ДатаПроверки%'");
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%Проверил%", ДанныеПроверки.Проверил);
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%ДатаПроверки%", ДанныеПроверки.ДатаПроверки);
		ПодсказкаКнопки = ПодсказкаКнопки + ПояснениеПроверки;
	КонецЕсли;
	
	КомандаПроверки.Подсказка = ПодсказкаКнопки;
	КомандаПроверки.Картинка = КартинкаКнопки;
	
	ЭлементКомандыФормы = Форма.Элементы.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	Если Не ЭлементКомандыФормы = Неопределено Тогда
		ЭлементКомандыФормы.Пометка = Форма.ПроверкаДокументов_ДокументПроверен;
	КонецЕсли;
	
КонецПроцедуры

Процедура БлокировкаФормы(Форма, ДокументПроверен)
	
	Если ДокументПроверен Тогда
		// Форма должна быть заблокирована, так как документ проверен и запрещено изменение проверенных документов.
		
		Если Форма.ТолькоПросмотр Тогда
			// Форма уже заблокирована, но не в результате проверки документа, сделаем соответствующую пометку.
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		Иначе
			// Форма не заблокирована, заблокируем ее и сделаем соответствующую пометку.
			Форма.ТолькоПросмотр = Истина;
			Форма.ПроверкаДокументов_БлокировкаФормы = Истина;
		КонецЕсли;
		
	Иначе
		// Форма не нуждается в блокировке, так как документ не проверен или разрешено изменение проверенных документов.
		
		Если Форма.ПроверкаДокументов_БлокировкаФормы Тогда
			// Форма ранее была заблокирована в результате предыдущей проверке документов - разблокируем форму и снимем пометку о блокировке.
			Форма.ТолькоПросмотр = Ложь;
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменятьКартинкуПроверкиНаФормеСписка(Форма, ДополнительныеПараметры)
	
	// Управляем проверкой только тогда, когда включена соответствующая функциональная опция.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуФинансовыхДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда в дополнительных параметрах установлено свойство "МестоРазмещенияДанныхПроверкиРегл":
	//	это означает, что в соответствующий список уже были добавлены необходимые поля, а на форму добавлен элемент "ИндикаторПроверки".
	Если ДополнительныеПараметры = Неопределено Или Не ДополнительныеПараметры.Свойство("МестоРазмещенияДанныхПроверкиРегл") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьСвойстваКартинкиПроверкиНаФормеСписка(Форма, ДополнительныеПараметры)
	
	ЭлементГруппаПроверки = ДополнительныеПараметры.МестоРазмещенияДанныхПроверкиРегл; // ГруппаФормы -
	Для каждого ЭлементПроверки Из ЭлементГруппаПроверки.ПодчиненныеЭлементы Цикл
		Если Не СтрНайти(ЭлементПроверки.Имя, "ИндикаторПроверки", НаправлениеПоиска.СКонца) = 0 Тогда
			ЭлементПроверки.КартинкаЗначений = БиблиотекаКартинок.СтатусДокументПроверен;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Получает из переданного объекта (ссылки) массив реквизитов с типом "Организация".
//
//	Параметры:
//		ДокументИсточник - ДокументСсылка, ДокументОбъект - объект, реквизиты которого надо проанализировать на соответствие типу "Организация".
//			Если передан объект - реквизиты считывается непосредственно из него.
//			Если передана ссылка - происходит обращение к данным базы запросом.
//		УчитыватьУправленческуюОрганизацию - Булево - признак, определяющий, должна ли среди возвращаемого массива быть управленческая организация.
// 			Значение по умолчанию - истина.
//
//	Возвращаемое значение:
//	 Массив Из СправочникСсылка.Организации - массив найденных Организаций в документе. 
//	            Если в документе не найдено ни одного реквизита с типом значения "Организация" - будет возвращен массив с ссылкой на пустую организацию.
//
Функция МассивОрганизацийДокумента(ДокументИсточник, УчитыватьУправленческуюОрганизацию = Ложь) Экспорт
	
	МассивОрганизаций = Новый Массив;
	ЭтоОбъект = НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИсточник));
	
	МетаданныеДокумента = ДокументИсточник.Метаданные();
	
	ИменаРеквизитовОрганизаций = ИменаРеквизитовОрганизаций(МетаданныеДокумента);
	ИменаРеквизитовОрганизацийТабличныйЧастей = ИменаРеквизитовОрганизацийТабличныйЧастей(МетаданныеДокумента);
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		Если ЭтоОбъект Тогда
			
			Для каждого ИмяРеквизита Из ИменаРеквизитовОрганизаций Цикл
					
				ТекущаяОрганизация = ДокументИсточник[ИмяРеквизита];
				Если ЗначениеЗаполнено(ТекущаяОрганизация) 
					И ТипЗнч(ТекущаяОрганизация) = Тип("СправочникСсылка.Организации")
					И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
					
					Если ИмяРеквизита = "Организация" Тогда
						МассивОрганизаций.Вставить(0, ТекущаяОрганизация);
					Иначе
						МассивОрганизаций.Добавить(ТекущаяОрганизация);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого КлючИЗначение Из ИменаРеквизитовОрганизацийТабличныйЧастей Цикл
				
				ИмяТабличнойЧасти = КлючИЗначение.Ключ;
				ИменаРеквизитовОрганизаций = КлючИЗначение.Значение;
				
				Для каждого СтрокаТабличнойЧасти Из ДокументИсточник[ИмяТабличнойЧасти] Цикл
					
					Для каждого ИмяРеквизита Из ИменаРеквизитовОрганизаций Цикл
							
						ТекущаяОрганизация = СтрокаТабличнойЧасти[ИмяРеквизита];
						Если ЗначениеЗаполнено(ТекущаяОрганизация)
							И ТипЗнч(ТекущаяОрганизация) = Тип("СправочникСсылка.Организации")
							И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
							МассивОрганизаций.Добавить(ТекущаяОрганизация);
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если МассивОрганизаций.Количество() = 0 Тогда
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
			
		Иначе
			
			ШаблонЗапросаРеквизита =
			"ВЫБРАТЬ
			|	&Реквизит КАК Организация
			|ИЗ
			|	&ПолноеИмяОбъекта КАК ИмяТаблицы
			|ГДЕ
			|	ИмяТаблицы.Ссылка = &Ссылка
			|	И &УсловиеТипаРеквизита";
			
			ТекстыЗапросов = Новый Массив;
			
			Для каждого ИмяРеквизита Из ИменаРеквизитовОрганизаций Цикл
				
				ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизита, "&ПолноеИмяОбъекта", МетаданныеДокумента.ПолноеИмя());
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТипаРеквизита", "ТИПЗНАЧЕНИЯ(ИмяТаблицы.&Реквизит) = Тип(Справочник.Организации)");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизит", ИмяРеквизита);
				
				ТекстыЗапросов.Добавить(ТекстЗапроса);
				
			КонецЦикла;
			
			Для каждого КлючИЗначение Из ИменаРеквизитовОрганизацийТабличныйЧастей Цикл
				ИмяТабличнойЧасти = КлючИЗначение.Ключ;
				ИменаРеквизитовОрганизаций = КлючИЗначение.Значение;
				Для каждого ИмяРеквизита Из ИменаРеквизитовОрганизаций Цикл
					
					ТекстЗапроса = СтрЗаменить(ШаблонЗапросаРеквизита, "&ПолноеИмяОбъекта", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТабличнойЧасти);
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеТипаРеквизита", "ТИПЗНАЧЕНИЯ(ИмяТаблицы.&Реквизит) = Тип(Справочник.Организации)");
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизит", ИмяРеквизита);
					
					ТекстыЗапросов.Добавить(ТекстЗапроса);
					
				КонецЦикла;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
			Запрос.УстановитьПараметр("Ссылка", ДокументИсточник);
			
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
			
		КонецЕсли;
		
		ПроверкаДокументовЛокализация.ДополнитьМассивОрганизацийДокумента(МассивОрганизаций, ДокументИсточник, УчитыватьУправленческуюОрганизацию);
		
	Иначе
		
		Если ЭтоОбъект И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументИсточник, "Организация") Тогда
			МассивОрганизаций.Добавить(ДокументИсточник["Организация"]);
		ИначеЕсли Не ЭтоОбъект И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента) Тогда
			МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "Организация"));
		Иначе
			МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УчитыватьУправленческуюОрганизацию Тогда
		ИндексУправленческойОрганизацииВМассиве = МассивОрганизаций.Найти(Справочники.Организации.УправленческаяОрганизация);
		Если НЕ ИндексУправленческойОрганизацииВМассиве = Неопределено Тогда
			МассивОрганизаций.Удалить(ИндексУправленческойОрганизацииВМассиве);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

Функция ИменаРеквизитовОрганизаций(ОбъектМетаданных)
	
	Результат = Новый Массив;
	
	ТипОрганизация = Тип("СправочникСсылка.Организации");
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(ТипОрганизация) Тогда
			Результат.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИменаРеквизитовОрганизацийТабличныйЧастей(ОбъектМетаданных)
	
	Результат = Новый Структура;
	
	ТипОрганизация = Тип("СправочникСсылка.Организации");
	Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		МассивРеквизитов = Новый Массив;
		Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипОрганизация) Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивРеквизитов.Количество() > 0 Тогда
			Результат.Вставить(ТабличнаяЧасть.Имя, МассивРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции 

Функция ЕстьЗаписьВРегистреСтатусыПроверки(Ссылка)
	
	НаборЗаписейРС = РегистрыСведений.СтатусыПроверкиДокументов.СоздатьНаборЗаписей();
	НаборЗаписейРС.Отбор.Документ.Установить(Ссылка);
	НаборЗаписейРС.Прочитать();
	
	Возврат НаборЗаписейРС.Количество() > 0;
	
КонецФункции

#КонецОбласти