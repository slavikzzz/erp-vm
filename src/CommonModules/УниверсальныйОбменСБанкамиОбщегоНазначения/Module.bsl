#Область ПрограммныйИнтерфейс

#Область ФорматИменованияФайлов

// Конструктор параметров формирования имени файла отчетности.
//
// Возвращаемое значение:
//	Структура     - параметры для открытия формы на клиенте.
//
Функция НовыеПараметрыИмениФайлаОтчета() Экспорт
	
	ПараметрыИмениФайлаОтчета = Новый Структура;
	ПараметрыИмениФайлаОтчета.Вставить("ФорматИменованияФайлов", ""); // Строка - см. СокращенныйПериодБезУИД(), СтандартФНС()
	ПараметрыИмениФайлаОтчета.Вставить("ПрефиксФайла", "");           // Строка - префикс файла
	ПараметрыИмениФайлаОтчета.Вставить("ИНН", "");                    // Строка - ИНН отправителя
	ПараметрыИмениФайлаОтчета.Вставить("КПП", "");                    // Строка - КПП отправителя
	ПараметрыИмениФайлаОтчета.Вставить("ШаблонИмениФайла", "");       // Строка - шаблон имени файла, пример "TRN_%1_%2_%3"
	ПараметрыИмениФайлаОтчета.Вставить("УточнениеНаименования", "");  // Строка - подставляется в параметр %1 шаблона, может быть пустым
	ПараметрыИмениФайлаОтчета.Вставить("ДатаНачала", '00010101');     // Дата  
	ПараметрыИмениФайлаОтчета.Вставить("ДатаОкончания", '00010101');  // Дата - ДатаНачала и ДатаНачала подставляются в модифицированном виде в 
	                                                                  //        параметры %2_%3 шаблона, могут быть пустыми
	ПараметрыИмениФайлаОтчета.Вставить("СданВНалоговую", Ложь);  	  // Булево - Регламентированный отчет сдан в налоговую
	ПараметрыИмениФайлаОтчета.Вставить("ШаблонИмениФайла", "");       // Строка - шаблон имени файла, пример "TRN_%1_%2_%3"
	
	ПараметрыИмениФайлаОтчета.Вставить("ИмяФайлаИзНСИ", Ложь);        // Булево - шаблон имени файла задан в НСИ
	Возврат ПараметрыИмениФайлаОтчета;
	
КонецФункции

// Возвращает имя файла отчета, сформированное по шаблону.
//
// Параметры:
//	ПараметрыФайлаОтчета - Структура - параметры для формирования имени файла отчета. См. НовыеПараметрыИмениФайлаОтчета().
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ПолучитьИмяФайлаОтчета(ПараметрыФайлаОтчета) Экспорт
	
	Если ПараметрыФайлаОтчета.СданВНалоговую Тогда
		ПараметрыФайлаОтчета.ШаблонИмениФайла = СтрЗаменить(ПараметрыФайлаОтчета.ШаблонИмениФайла, "BANK_", "NO_");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФайлаОтчета.ФорматИменованияФайлов) Тогда
		ФорматИменованияФайлов = СтандартФНС();
	ИначеЕсли ПараметрыФайлаОтчета.ФорматИменованияФайлов = СтандартФНС()
	 Или ПараметрыФайлаОтчета.ФорматИменованияФайлов = СокращенныйПериодБезУИД() Тогда
		ФорматИменованияФайлов = ПараметрыФайлаОтчета.ФорматИменованияФайлов;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неподдерживаемый формат именования файлов:%1';
										|en = 'Unsupported file naming format:%1'"), ПараметрыФайлаОтчета.ФорматИменованияФайлов);
	КонецЕсли;
	
	Если ФорматИменованияФайлов = СтандартФНС() Тогда
		
		ИмяФайлаФинОтчетности = ПолучитьИмяФайлаСтандартФНС(
			ПараметрыФайлаОтчета.ИНН,
			ПараметрыФайлаОтчета.КПП,
			ПараметрыФайлаОтчета.ШаблонИмениФайла,
			ПараметрыФайлаОтчета.УточнениеНаименования,
			ПараметрыФайлаОтчета.ДатаНачала,
			ПараметрыФайлаОтчета.ДатаОкончания);
		
	Иначе // СокращенныйПериодБезУИД()
		
		ИмяФайлаФинОтчетности = ПолучитьИмяФайлаСокращенныйПериодБезУИД(
			ПараметрыФайлаОтчета.ИНН,
			ПараметрыФайлаОтчета.КПП,
			ПараметрыФайлаОтчета.ШаблонИмениФайла,
			ПараметрыФайлаОтчета.УточнениеНаименования,
			ПараметрыФайлаОтчета.ДатаНачала,
			ПараметрыФайлаОтчета.ДатаОкончания);
			
	КонецЕсли;
	
	ИмяФайлаФинОтчетности = ДобавитьПрефиксФайла(
		ИмяФайлаФинОтчетности,
		ПараметрыФайлаОтчета.ПрефиксФайла);
		
	Возврат ИмяФайлаФинОтчетности;
	
КонецФункции

// Униифицирует имя файла перед сохранением или отправкой - добавляет префикс и уникализирующий суффикс. 
//
// Параметры:
//  ИмяФайла     - Строка - исходное имя файла.
//  ФорматИменованияФайлов - Строка - предопределенное значение формата именования файлов -
//                           см. СокращенныйПериодБезУИД(), СтандартФНС().
//  Префикс - Строка - префикс файла.
//  УникальныеИменаФайловВПакете - Соответствие - ключи - имена файлов в текущем пакете, 
//                                 значения - количество файлов с таким именем в пакете.
//
// Возвращаемое значение:
//   Строка      - имя файла с новым расширением.
//
Функция УнифицироватьИмяФайлаКВыгрузке(Знач ИмяФайла, ФорматИменованияФайлов, Префикс, УникальныеИменаФайловВПакете) Экспорт
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	
	ИнформацияОФайле = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	
	ИмяБезРасширения = ДобавитьПрефиксФайла(
		ИнформацияОФайле.ИмяБезРасширения, 
		Префикс);
		
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ИнформацияОФайле.Расширение);
		
	Если Не ФорматИменованияФайлов = СокращенныйПериодБезУИД() Тогда
		ИмяБезРасширения = ДобавитьУникальныйИдентификатор(ИмяБезРасширения);
	КонецЕсли;

	ИмяБезРасширения = ДобавитьУникальныйНомер(ИмяБезРасширения, РасширениеБезТочки, УникальныеИменаФайловВПакете);
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяБезРасширения, РасширениеБезТочки);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ДобавитьПрефиксФайла(Знач ИмяФайла, Знач ПрефиксФайла) Экспорт
	
	Если ЗначениеЗаполнено(ПрефиксФайла) Тогда
		
		ПрефиксФайла = СокрЛП(ПрефиксФайла) + "_";
		
		Если Не СтрНачинаетсяС(ИмяФайла, ПрефиксФайла) Тогда
			ИмяФайла = ПрефиксФайла + СокрЛ(ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции

// Возвращает предопределенное значение формата именования файлов с сокращенным периодом и без УИД в конце.
//
// Параметры:
//
// Возвращаемое значение:
//  Строка 
//
Функция СокращенныйПериодБезУИД() Экспорт
	Возврат "СокращенныйПериодБезУИД";
КонецФункции

// Возвращает предопределенное значение формата именования файлов в стандартном виде для ФНС.
//
// Параметры:
//
// Возвращаемое значение:
//  Строка 
//
Функция СтандартФНС() Экспорт
	Возврат "СтандартФНС";
КонецФункции

#КонецОбласти

#Область КомпоновщикXML

// Создает и инициализирует объект для генерации xml-текста.
//
// Параметры:
//  ИмяФайла     - Строка - куда будет записан xml. См. описание параметра ИмяФайлаXML у метода ОткрытьФайл() для ЗаписьXML.
//  Кодировка    - Строка - как будет записан xml. См. описание параметра ТипКодировки у метода ОткрытьФайл() для ЗаписьXML.
//
// Возвращаемое значение:
//   ЗаписьXML - объект для генерации xml-текста.
//
Функция НовыйКомпоновщикXML(ИмяФайла, Кодировка = "windows-1251") Экспорт
	
	КомпоновщикXML = Новый ЗаписьXML;
	КомпоновщикXML.ОткрытьФайл(ИмяФайла, Кодировка);
	КомпоновщикXML.ЗаписатьОбъявлениеXML();
	
	Возврат КомпоновщикXML;
	
КонецФункции

// Выводит атрибут для текущего тега. Нужно вызывать до вызова ВывестиТекст().
//
// Параметры:
//  КомпоновщикXML - ЗаписьXML - объект, генерирующий xml-текст.
//  ИмяАтрибута  - Строка - см. описание параметра ПолноеИмя у метода ЗаписатьАтрибут() для ЗаписьXML.
//  ЗначениеАтрибута - Произвольный - значение, которое будет приведено к строковому представлению.
//  ТипАтрибута  - Строка - может принимать значения "Д"-дата, "Т"-строка (например "Т,33"), "Ч"-число (например "Ч,12,3").
//  Обязательный - Булево - если Ложь и ЗначениеАтрибута равно значению по-умолчанию для его типа, то атрибут не будет записан.
//
Процедура ВывестиАтрибут(КомпоновщикXML, ИмяАтрибута, ЗначениеАтрибута, ТипАтрибута = "Т", Обязательный = Истина) Экспорт
	
	Если Не Обязательный И Не ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаАтрибута = СтрРазделить(ТипАтрибута, ",");
	
	Если ОписаниеТипаАтрибута[0] = "Д" Тогда
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, "ДФ=dd.MM.yyyy");
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Т" Тогда
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			МаксимальнаяДлина = Число(ОписаниеТипаАтрибута[1]);
			ПредставлениеЗначения = Лев(ПредставлениеЗначения, МаксимальнаяДлина);
		КонецЕсли;
		
	ИначеЕсли ОписаниеТипаАтрибута[0] = "Ч" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		
		Если ОписаниеТипаАтрибута.Количество() >= 2 Тогда
			РазмерностьПолная = Число(ОписаниеТипаАтрибута[1]);
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(РазмерностьПолная, "ЧГ=") + ";";
		КонецЕсли;
		
		Если ОписаниеТипаАтрибута.Количество() >= 3 Тогда
			РазмерностьДробнойЧасти = Число(ОписаниеТипаАтрибута[2]);
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(РазмерностьДробнойЧасти, "ЧГ=") + ";";
		КонецЕсли;
		
		ПредставлениеЗначения = Формат(ЗначениеАтрибута, СтрокаФормата);
		
	Иначе
		ПредставлениеЗначения = СокрЛП(ЗначениеАтрибута);
		
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьАтрибут(ИмяАтрибута, ПредставлениеЗначения);
	
КонецПроцедуры

// Выводит текст внутри текущего тега.
//
// Параметры:
//  КомпоновщикXML - ЗаписьXML - объект, генерирующий xml-текст.
//  Значение       - Произвольный - значение, которое будет приведено к строковому представлению.
//
Процедура ВывестиТекст(КомпоновщикXML, Значение) Экспорт
	
	Текст = Значение;
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Текст = Формат(Значение, "ДФ=dd.MM.yyyy");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Текст = Формат(Значение, "ЧРД=; ЧРГ=; ЧГ=");
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		Текст = Формат(Значение, "БЛ=0; БИ=1");
	КонецЕсли;
	
	КомпоновщикXML.ЗаписатьТекст(Текст);
	
КонецПроцедуры

// Выводит элемент, только если внутри него будет содержимое (текст).
//
// Параметры:
//  КомпоновщикXML - ЗаписьXML - объект, генерирующий xml-текст.
//  ИмяЭлемента  - Строка - имя тега. См. описание параметра ПолноеИмя у метода ЗаписатьНачалоЭлемента() для ЗаписьXML.
//  ЗначениеЭлемента - Произвольный - содержимое тега. См. описание параметра Значение у ВывестиТекст().
//
Процедура ВывестиНеобязательныйЭлемент(КомпоновщикXML, ИмяЭлемента, ЗначениеЭлемента) Экспорт

	Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента) Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
	ВывестиТекст(КомпоновщикXML, ЗначениеЭлемента);
	КомпоновщикXML.ЗаписатьКонецЭлемента();

КонецПроцедуры

// Получает xml-текст из переданного объекта через запись на диск. Закрывает объект и удаляет файл.
//
// Параметры:
//  КомпоновщикXML - ЗаписьXML - объект, генерирующий xml-текст. См. НовыйКомпоновщикXML() 
//  ИмяФайла     - Строка - файл, куда записывался xml-текст. См. описание параметра ИмяФайла в НовыйКомпоновщикXML().
//
// Возвращаемое значение:
//   ДвоичныеДанные - xml-текст из переданного объекта.
//
Функция ДвоичныеДанныеКомпоновщикаXML(КомпоновщикXML, ИмяФайла) Экспорт
	
	КомпоновщикXML.Закрыть();
	КомпоновщикXML = Неопределено;
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	УниверсальныйОбменСБанками.УдалитьВременныйФайл(ИмяФайла);
	
	Возврат ДвоичныеДанныеФайла;
	
КонецФункции

// Проверяет переданную коллекцию на заполненность.
//
// Параметры:
//  ПроверяемыеСведения - Структура - см. ЗаявкиНаКредит.НовыеСведенияЗаявкиНаКредит()
//
// Возвращаемое значение:
//   Булево      - Истина, если хотя бы один из ключей заполнен; иначе Ложь.
//
Функция СведенияУказаны(ПроверяемыеСведения) Экспорт
	
	Результат = Ложь;
	
	Для Каждого ЭлементСведений Из ПроверяемыеСведения Цикл
		
		Если ТипЗнч(ЭлементСведений.Значение) = Тип("Булево") Тогда
			// Для булево нет значения, которое соответствует "не заполнено",
			// поэтому булевы поля не учитываем при анализе заполненности всей структуры.
			Продолжить;

		ИначеЕсли ТипЗнч(ЭлементСведений.Значение) = Тип("Структура") Тогда
			Результат = СведенияУказаны(ЭлементСведений.Значение);
		Иначе
			Результат = ЗначениеЗаполнено(ЭлементСведений.Значение);
		КонецЕсли;
		
		Если Результат Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
 
#Область Прочее

// Возвращает объект XDTO из корневого элемента XML по схеме пакетаXDTO ЗаявкиНаОткрытиеСчета или ЗаявкиНаКредит.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//	ДанныеXML     - Строка, ХранилищеЗначения - Данные XML из характеристик сервиса.
//  УсловияОбслуживания - ТипОбъектаXDTO - какой объект читаем из xml.
//
// Возвращаемое значение:
//	ОбъектXDTO, Неопределено - Объект XDTO, прочитанный из XML, или Неопределено в случае ошибок или отсутствия данных.
//
Функция ОбъектXDTOХарактеристики(СервисОбменаСБанками, ДанныеXML, УсловияОбслуживания) Экспорт
	Перем Результат;
	
	Если ТипЗнч(ДанныеXML) = Тип("Строка") Тогда
		ТекстXML = ДанныеXML;
	ИначеЕсли ТипЗнч(ДанныеXML) = Тип("ХранилищеЗначения") Тогда
		ТекстXML = ДанныеXML.Получить();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, УсловияОбслуживания);
		
	Исключение
	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ИмяСобытия = СобытиеЖурналаРегистрации(СервисОбменаСБанками, НСтр("ru = 'Прочитать объект XDTO';
																			|en = 'Read XDTO object'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Формирует имя события журнала регистрации.
//
// Параметры:
//	СервисОбменаСБанками - ПеречислениеСсылка.СервисыОбменаСБанками - Сервис.
//
// Возвращаемое значение:
//	 Строка - имя события, соответветствующее сервису.
//
Функция СобытиеЖурналаРегистрации(СервисОбменаСБанками, ВариантСобытия = "") Экспорт

	ИмяСобытия = ОбщегоНазначения.ИмяЗначенияПеречисления(СервисОбменаСБанками);

	Если Не ПустаяСтрока(ВариантСобытия) Тогда
		ИмяСобытия = ИмяСобытия + "." + ВариантСобытия;
	КонецЕсли;

	Возврат ИмяСобытия;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФорматИменованияФайлов

Функция ДобавитьУникальныйНомер(Знач ИмяФайлаБезРасширения, РасширениеБезТочки, ИменаФайловВПакете)
	
	ИмяФайлаСРасширением = ВРег(ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяФайлаБезРасширения, РасширениеБезТочки));
		
	КоличествоИменФайлов = ИменаФайловВПакете[ИмяФайлаСРасширением];
		
	Если КоличествоИменФайлов = Неопределено Тогда
		КоличествоИменФайлов = 0;
	КонецЕсли;
		
	КоличествоИменФайлов = КоличествоИменФайлов + 1;
		
	ИменаФайловВПакете.Вставить(ИмяФайлаСРасширением, КоличествоИменФайлов);
		
	Если КоличествоИменФайлов > 1 Тогда
		
		ИмяФайлаБезРасширения = СтрШаблон("%1 (%2)", ИмяФайлаБезРасширения, КоличествоИменФайлов);
		
	КонецЕсли;
	
	Возврат ИмяФайлаБезРасширения;
	
КонецФункции

Функция ДобавитьУникальныйИдентификатор(Знач ИмяФайлаБезРасширения)
	
	Если Не СодержитУникальныйИдентификатор(ИмяФайлаБезРасширения) Тогда
		ИмяФайлаБезРасширения = ИмяФайлаБезРасширения + " " + Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ИмяФайлаБезРасширения;
	
КонецФункции

Функция СодержитУникальныйИдентификатор(Знач ИмяФайлаБезРасширения, УИД = "")
	
	// Проверим, что имя не содержит идентификатор уже сейчас.
	СодержитИдентификатор = Истина;
	Если СтрДлина(ИмяФайлаБезРасширения) < 36 Тогда // слишком маленькая длина, чтобы вместился идентификатор
		СодержитИдентификатор = Ложь;
	Иначе
		
		ЧастиИмени = СтрРазделить(Прав(ИмяФайлаБезРасширения, 36), "-", Истина);
		КоличествоЧастей = ЧастиИмени.Количество();
		Если КоличествоЧастей < 5
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 1]) <> 12
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 2]) <> 4
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 3]) <> 4
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 4]) <> 4 
		 Или СтрДлина(ЧастиИмени[КоличествоЧастей - 5]) <> 8 
		 Тогда // не совпадает с шаблоном идентификатора
			СодержитИдентификатор = Ложь;
		Иначе
			
			Для Сч = КоличествоЧастей - 5 По КоличествоЧастей - 1 Цикл
				
				ЧастьИмени = ЧастиИмени[Сч];
				
				Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(
							СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("abcdef", НРег(ЧастьИмени), "000000")) Тогда
					// Содержит не только шестнадцатиричные цифры.
					СодержитИдентификатор = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СодержитИдентификатор Тогда
		УИД = СтрШаблон("%1-%2-%3-%4-%5", 
			ЧастиИмени[КоличествоЧастей - 5], 
			ЧастиИмени[КоличествоЧастей - 4], 
			ЧастиИмени[КоличествоЧастей - 3], 
			ЧастиИмени[КоличествоЧастей - 2], 
			ЧастиИмени[КоличествоЧастей - 1]);
	Иначе	
		УИД = "";
	КонецЕсли;
	
	Возврат СодержитИдентификатор;
	
КонецФункции

// Возвращает имя файла отчета в стандарте ФНС, сформированное по шаблону.
//
// Параметры:
//	ИНН - Строка - ИНН экономического субъекта, представляющего отчетность.
//	КПП - Строка - КПП экономического субъекта, представляющего отчетность (для юридических лиц).
//	ШаблонИмениФайла - Строка - Содержит шаблон имени присоединенного файла, в который сохраняется отчет.
// 		Используемые параметры:
//			%1 - УточнениеНаименования;
//			%2 - ДатаНачала (ГГГГММДД);
//			%3 - ДатаОкончания (ГГГГММДД);
//	УточнениеНаименования - Строка - Уточнение наименования отчета.
//	ДатаНачала - Дата - Дата начала периода отчета.
//	ДатаОкончания - Дата - Дата окончания периода отчета.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ПолучитьИмяФайлаСтандартФНС(ИНН, КПП, ШаблонИмениФайла, УточнениеНаименования, ДатаНачала, ДатаОкончания)

	Если НЕ ЗначениеЗаполнено(ШаблонИмениФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачалаГГГГММДД = Формат(ДатаНачала, "ДФ='ггггММдд'");
	Иначе
		ДатаНачалаГГГГММДД = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончанияГГГГММДД = Формат(ДатаОкончания, "ДФ='ггггММдд'");
	Иначе
		ДатаОкончанияГГГГММДД = "";
	КонецЕсли;
	
	// Формируем имя файла вида OSV_62_20200101_20200331_ИННКПП_GUID.xls
	ЧастиИмениФайла = Новый Массив;
	ЧастиИмениФайла.Добавить(СтрШаблон(
		ШаблонИмениФайла, 
		СокрЛП(УточнениеНаименования), 
		ДатаНачалаГГГГММДД, 
		ДатаОкончанияГГГГММДД));
	
	ИННКПП = Новый Массив;
	Если ЗначениеЗаполнено(ИНН) Тогда
		ИННКПП.Добавить(СокрЛП(ИНН));
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
		ИННКПП.Добавить(СокрЛП(КПП));
	КонецЕсли;
	Если ИННКПП.Количество() > 0 Тогда
		ЧастиИмениФайла.Добавить(СтрСоединить(ИННКПП, ""));
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(Строка(Новый УникальныйИдентификатор));
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СтрСоединить(ЧастиИмениФайла, "_"), "");

КонецФункции

// Возвращает имя файла отчета в сокращенном виде, сформированное по шаблону.
//
// Параметры:
//	ИНН - Строка - ИНН экономического субъекта, представляющего отчетность.
//	КПП - Строка - КПП экономического субъекта, представляющего отчетность (для юридических лиц).
//	ШаблонИмениФайла - Строка - Содержит шаблон имени присоединенного файла, в который сохраняется отчет.
// 		Используемые параметры:
//			%1 - УточнениеНаименования;
//			%2 - ДатаНачала (ГГГГММДД);
//			%3 - ДатаОкончания (ГГГГММДД);
//	УточнениеНаименования - Строка - Уточнение наименования отчета.
//	ДатаНачала - Дата - Дата начала периода отчета.
//	ДатаОкончания - Дата - Дата окончания периода отчета.
//
// Возвращаемое значение:
//	Строка - имя файла.
//
Функция ПолучитьИмяФайлаСокращенныйПериодБезУИД(ИНН, КПП, Знач ШаблонИмениФайла, Знач УточнениеНаименования, ДатаНачала, ДатаОкончания)

	Если НЕ ЗначениеЗаполнено(ШаблонИмениФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмениФайла = Новый Массив;
	
	ПредставлениеПериода = СокращенноеПредставлениеПериодаДляИмениФайла(ДатаНачала, ДатаОкончания); 
		
	УточнениеНаименования = СокрЛП(УточнениеНаименования);
		
	Если ЗначениеЗаполнено(ПредставлениеПериода) Тогда
		ШаблонИмениФайла = СтрЗаменить(ШаблонИмениФайла, "_%3", "");
		ИмяФайлаПоШаблону = СтрШаблон(ШаблонИмениФайла, УточнениеНаименования, ПредставлениеПериода);
	ИначеЕсли СтрНайти(ШаблонИмениФайла, "%1") > 0 Тогда 
		ШаблонИмениФайла = СтрЗаменить(ШаблонИмениФайла, "_%2_%3", "");
		ИмяФайлаПоШаблону = СтрШаблон(ШаблонИмениФайла, УточнениеНаименования);
	Иначе
		ИмяФайлаПоШаблону = ШаблонИмениФайла;
	КонецЕсли;
	
	ЧастиИмениФайла.Добавить(ИмяФайлаПоШаблону);
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ЧастиИмениФайла.Добавить(СокрЛП(ИНН));
	КонецЕсли;
	Если ЗначениеЗаполнено(КПП) Тогда
		ЧастиИмениФайла.Добавить(СокрЛП(КПП));
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(СтрСоединить(ЧастиИмениФайла, "_"), "");

КонецФункции

Функция СокращенноеПредставлениеПериодаДляИмениФайла(ДатаНачала, ДатаОкончания)
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат Формат(ДатаНачала, "ДФ=ггггММдд");
	КонецЕсли;
	
	ПериодКратенГоду = (ДатаНачала = НачалоГода(ДатаНачала))
		И (КонецДня(ДатаОкончания) = КонецГода(ДатаОкончания));
	ПериодГод = ПериодКратенГоду И (Год(ДатаНачала) = Год(ДатаОкончания));
	
	ПредставлениеОкончанияПериода = "";
	
	Если ПериодГод Тогда
		ПредставлениеНачалаПериода = Формат(ДатаНачала, "ДФ=гггг");
		
	ИначеЕсли ПериодКратенГоду Тогда
		ПредставлениеНачалаПериода = Формат(ДатаНачала, "ДФ=гггг");
		ПредставлениеОкончанияПериода = Формат(ДатаОкончания, "ДФ=гггг");
		
	Иначе
		ПериодКратенМесяцу = (ДатаНачала = НачалоМесяца(ДатаНачала))
			И (КонецДня(ДатаОкончания) = КонецМесяца(ДатаОкончания));
		ПериодМесяц = ПериодКратенМесяцу И (НачалоМесяца(ДатаНачала) = НачалоМесяца(ДатаОкончания));
		
		Если ПериодМесяц Тогда
			ПредставлениеНачалаПериода = Формат(ДатаНачала, "ДФ=ггггММ");
		ИначеЕсли ПериодКратенМесяцу Тогда
			ПредставлениеНачалаПериода = Формат(ДатаНачала, "ДФ=ггггММ");
			ПредставлениеОкончанияПериода = Формат(ДатаОкончания, "ДФ=ггггММ");
		Иначе
			ПредставлениеНачалаПериода = Формат(ДатаНачала, "ДФ=ггггММдд");
			ПредставлениеОкончанияПериода = Формат(ДатаОкончания, "ДФ=ггггММдд");
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПредставлениеОкончанияПериода) ИЛИ ПредставлениеНачалаПериода = ПредставлениеОкончанияПериода Тогда
		ПредставлениеПериода = ПредставлениеНачалаПериода;
	Иначе
		ПредставлениеПериода = ПредставлениеНачалаПериода + "_" + ПредставлениеОкончанияПериода;
	КонецЕсли;
	
	Возврат ПредставлениеПериода;

КонецФункции 

#КонецОбласти

#КонецОбласти
