
#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при изменении вида расчета в таблице, редактирующей начисления.
// Параметры:
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. ОписаниеТаблицыРасчета().
//		РежимРаботы - число. 0 - режим штатного расписания, 1 - режим плановых начислений, 2 - режим начислений в расчетном
//		              документе.
//		Сотрудник - СправочникСсылка.Сотрудники, используется для режима работы = 1 при получении сведений о стаже.
//		ДатаСведений - Дата, используется для режима работы = 1 при получении сведений о стаже.
//
Процедура ВводНачисленийНачислениеПриИзменении(Форма, ОписаниеТаблицы, РежимРаботы, Сотрудник = Неопределено, ДатаСведений = Неопределено) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы;
	СтрокаНачислений = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если СтрокаНачислений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиНачислений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаНачислений);
	РезервыПоОплатеТрудаКлиентСерверБазовый.ВводНачисленийИнициализироватьСтрокиНачислений(Форма, СтрокиНачислений, ОписаниеТаблицы, РежимРаботы, Сотрудник, ДатаСведений);
	
КонецПроцедуры

Процедура СтрокаРасчетаПриАктивацииСтроки(Форма, ИмяТаблицы) Экспорт 
	
	ДанныеСтроки = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РеквизитКонтроляПолей = "КонтролируемыеПоля" + ИмяТаблицы;
		КонтролируемыеПоля = Форма[РеквизитКонтроляПолей];
		УстановитьЗначенияКонтролируемыхПолей(ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей());
	КонецЕсли;
	
КонецПроцедуры	

Процедура СтрокаРасчетаПриНачалеРедактирования(Форма, ИмяТаблицы, ДанныеСтроки, НоваяСтрока, Копирование) Экспорт
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ФиксСтрока") Тогда
		ДанныеСтроки.ФиксСтрока = Истина;
	КонецЕсли;
	Если ДанныеСтроки.Свойство("ФиксЗаполнение") Тогда
		ДанныеСтроки.ФиксЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СтрокаРасчетаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудникаБезусловно = Неопределено, ПроводитьПерерасчет = Истина, ОписаниеДокумента = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитКонтроляПолей = "КонтролируемыеПоля" + ОписаниеТаблицы.ИмяТаблицы;
	СтарыеЗначенияКонтролируемыхПолей = Форма.ПолучитьСтарыеЗначенияКонтролируемыхПолей();
	КонтролируемыеПоля = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(Форма[РеквизитКонтроляПолей]);
	
	ПересчитатьСотрудника = Ложь;
	
	// Проверка контролируемых полей, т.е. наличия исправлений.
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		ИмяГруппыПолей = ЭлементСтруктуры.Ключ;
		ГруппаПолей = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаПолей, ЭлементСтруктуры.Значение);
		Для Каждого ИмяПоля Из ГруппаПолей Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) И СтарыеЗначенияКонтролируемыхПолей[ОписаниеТаблицы.ИмяТаблицы + ИмяПоля] <> ДанныеСтроки[ИмяПоля] Тогда
				ПересчитатьСотрудника = Истина;
				ДанныеСтроки.ФиксСтрока = Истина;
				Если ИмяГруппыПолей = "ФиксЗаполнение" Тогда
					ДанныеСтроки[ИмяГруппыПолей] = Истина;
				КонецЕсли;
				Если ИмяГруппыПолей = "ФиксРасчет" Тогда
					ДанныеСтроки[ИмяГруппыПолей] = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Рассчитать данные документа по сотруднику.
	Если ПроводитьПерерасчет И (ПересчитатьСотрудника Или ПересчитыватьСотрудникаБезусловно = Истина) Тогда
		РассчитатьЗапись = ЗначениеЗаполнено(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
		Если РассчитатьЗапись Тогда
			Форма.РассчитатьСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], ОписаниеТаблицы);
		КонецЕсли;
	КонецЕсли;
	
	// Уже после расчета заполняем значения контролируемых полей.
	УстановитьЗначенияКонтролируемыхПолей(ОписаниеТаблицы.ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей);
	
КонецПроцедуры

Процедура СтрокаДокументаПриОкончанииРедактирования(Форма, ОписаниеТаблицы, ПересчитыватьСотрудникаБезусловно = Неопределено, ПроводитьПерерасчет = Истина, ОписаниеДокумента = Неопределено) Экспорт
	
	ДанныеСтроки = Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы].ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.Свойство("ФиксСтрока") Тогда
		ДанныеСтроки.ФиксСтрока = Истина;
	КонецЕсли;
	Если ДанныеСтроки.Свойство("ФиксЗаполнение") Тогда
		ДанныеСтроки.ФиксЗаполнение = Истина;
	КонецЕсли;
	
	Форма.РассчитатьРасчетРезервовСотрудника(ДанныеСтроки[ОписаниеТаблицы.ИмяРеквизитаСотрудник], ОписаниеТаблицы);
	
КонецПроцедуры

Процедура УстановитьЗначенияКонтролируемыхПолей(ИмяТаблицы, ДанныеСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей) Экспорт
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из КонтролируемыеПоля Цикл
		Для Каждого ИмяПоля Из ЭлементСтруктуры.Значение Цикл
			Если ДанныеСтроки.Свойство(ИмяПоля) Тогда
				СтарыеЗначенияКонтролируемыхПолей[ИмяТаблицы + ИмяПоля] = ДанныеСтроки[ИмяПоля];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо = Неопределено, Сотрудник = Неопределено, ВидРасчета = Неопределено, ВидРасчетаРезерва = Неопределено) Экспорт
	
	РезервыПоОплатеТрудаКлиент.ДобавитьИзмененныеДанные(ИзмененныеДанные, ИмяТаблицы, ФизическоеЛицо, Сотрудник, ВидРасчета, ВидРасчетаРезерва);
	
КонецПроцедуры

#КонецОбласти

