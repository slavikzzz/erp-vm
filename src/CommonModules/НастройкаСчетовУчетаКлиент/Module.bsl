
#Область ПрограммныйИнтерфейс

// Выполняет обработку закрытия формы настройки счетов учета.
// Вызывается в обработчике ОбработкаОповещения() формы объекта.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	ИмяСобытия - Строка - Имя события оповещения
// 	Параметр - Произвольный - Параметр оповещения 
//
Процедура ЗаконченаНастройкаСчетовУчета(Форма, ИмяСобытия, Параметр) Экспорт
	//++ Локализация

	//++ НЕ УТ
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ИмяСобытия = "ЗаконченаНастройкаСчетовУчета" И Параметр = Форма.Объект.Ссылка
		И ДанныеНастройкиСчетовУчета <> Неопределено И ДанныеНастройкиСчетовУчета.ИспользуетсяНастройкаИсключений Тогда
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(ДанныеНастройкиСчетовУчета);
		Форма.НастройкаСчетовУчета_Ссылка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНастройкаСчетовУчета(Параметр, РазделУчета);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Выполняет обработку навигационной ссылки открытия формы настройки счетов.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	НавигационнаяСсылка - Строка - Навигационная ссылка
// 	СтандартнаяОбработка - Булево - флаг СтандартнаяОбработка события
//
Процедура ОбработкаНавигационнойСсылкиНастройкаСчетовУчета(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	//++ Локализация

	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	ИмяОткрываемойФормы = ?(НавигационнаяСсылка = "ОткрытьНастройкуСчетовУчета",
		"РегистрСведений.ПорядокОтраженияНаСчетахУчета.Форма.ФормаНастройкиДинамически",
		"Обработка.НастройкаОтраженияДокументовВРеглУчете.Форма.ФормаНастройки");
	ОткрытьФормуНастройкиСПроверкойЗаписи(ИмяОткрываемойФормы, Форма);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Выполняет обработку изменения счетов учета аналитики учета.
// 
// Параметры:
// 	Элемент - ПолеФормы - Элемент (поле ввода) настройки счета учета
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
//
Процедура ПриИзмененииСчетаУчета(Элемент, Форма) Экспорт
	//++ Локализация
	Настройка = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(Элемент.Имя);
	Если НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяРеквизита) Тогда
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма);
	КонецЕсли;
	Если Настройка.СворачиваемыеГруппы.Количество() Тогда
		Если ИмяРеквизита = "НастройкаСворачиваемостиГрупп" Тогда
			ГруппаНастройкиСчетовУчета = Элемент.Родитель;
			ИмяРеквизитаСворачиваемости = Настройка.ПрефиксПутиКДанным + ИмяРеквизита;
			Для каждого ПодчиненнаяГруппа Из ГруппаНастройкиСчетовУчета.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ПодчиненнаяГруппа) = Тип("ГруппаФормы") И ПодчиненнаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая Тогда
					Если ПодчиненнаяГруппа.Скрыта() И Форма[ИмяРеквизитаСворачиваемости] = "ПоказатьВсе" Тогда
						ПодчиненнаяГруппа.Показать();
					ИначеЕсли Не ПодчиненнаяГруппа.Скрыта() И Форма[ИмяРеквизитаСворачиваемости] = "СвернутьВсе" Тогда
						ПодчиненнаяГруппа.Скрыть();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// Возможно это счет, проверим, входит ли он в сворачиваемую группу:
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяРеквизита);
		Если РазделУчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ГруппаСчетаУчета = НастройкаСчетовУчетаКлиентСервер.ГруппаСчетаУчета(ИмяРеквизита, РазделУчета, Настройка.РедактированиеВСписке, "СчетУчета");
		Если ГруппаСчетаУчета <> Неопределено И Настройка.СворачиваемыеГруппы.Найти(ГруппаСчетаУчета.ИмяГруппы) <> Неопределено Тогда
			ГруппаНаФорме = Форма.Элементы.Найти(НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка,, ГруппаСчетаУчета.ИмяГруппы, "Группа"));
			Если ГруппаНаФорме <> Неопределено Тогда
				ГруппаНаФорме.ЗаголовокСвернутогоОтображения = ГруппаНаФорме.Заголовок + НастройкаСчетовУчетаКлиентСервер.ДопПредставлениеГруппы(Форма, ГруппаСчетаУчета.ИмяГруппы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Выполняет обработку начала выбора настройки счетов учета.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	Элемент - ПолеФормы - Элемент (поле ввода) настройки счета учета
// 	Элемент - ПолеФормы - Элемент (поле ввода) настройки счета учета
// 	ДанныеВыбора - Массив - то что выбирается
// 	СтандартнаяОбработка - Булево - признак необходимости выполнения стандартной обработки
//
Процедура НачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Если Не Форма.КэшДанныхМеханизмов.Свойство("НастройкаСчетовУчета") Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	СтандартнаяОбработка = Ложь;
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Раздел = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Настройка);
	ИмяЭлементаНастройки = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(Элемент.Имя);
	ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
	ПараметрыФормы = Новый Структура;
	Статья = ?(Настройка.Свойство("НастройкаПоОдному"), Форма.Запись[ИмяРеквизита], Форма[ИмяРеквизита]);
	Статья = ?(ЗначениеЗаполнено(Статья), Статья, ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиДоходов.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Статья", Статья);
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиДоходов", Истина));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидПрочихДоходовИРасходов",
		Настройка.ОбщиеРеквизиты.ВидыПрочихДоходовРасходов));
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	ПараметрыФормы.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, Элемент);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Выполняет команду вывода / скрытия элементов настройки долгосрочных счетов учета на форме.
//
// Параметры:
//  Форма	- ФормаКлиентскогоПриложения - Форма в которой расположена команда;
//  Команда	- КомандаФормы - Команда, которую нужно выполнить.
//
Процедура ВыполнитьПереопределяемуюКоманду(Форма, Команда) Экспорт
	
	//++ Локализация
	Настройка = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Настройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	ИмяКоманды = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(Команда.Имя);
	
	Если ИмяКоманды = "ПоказыватьДолгосрочныеСчета" Тогда
		
		Настройка.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета = Не Настройка.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета;
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма);
		
	КонецЕсли;
	
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#Область НастройкаСчетовУчетаПрочихОпераций

// Вызывается в обработчике "Нажатие" гиперссылки элемента настройки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	Элемент - ПолеФормы - Элемент настройки.
// 	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
// 	Оповещение - ОписаниеОповещения - Описание оповещения, которое необходимо выполнить после окончания настройки.
//
Процедура ПриНажатии(Форма, Элемент, СтандартнаяОбработка, Оповещение = Неопределено) Экспорт
	
	//++ НЕ УТ
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	ИндексПараметров = Неопределено;
	Если НЕ ДанныеНастройкиСчетовУчета.СоответствиеПараметровНастройкиЭлементамФормы.Свойство(Элемент.Имя, ИндексПараметров) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыНастройки = ДанныеНастройкиСчетовУчета.МассивПараметровНастройки.Получить(ИндексПараметров);
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	Если ТаблицаФормы <> Неопределено Тогда
		ИдентификаторСтроки = ТаблицаФормы.ТекущаяСтрока;
	КонецЕсли;
	
	КонтекстНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным, ИдентификаторСтроки);
	Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		// Редактируем таблицу в режиме "Без разбиения"
		КонтекстНастройки = КонтекстНастройки[0];
		СлужебныйКонтекст = КонтекстНастройки;
		ИдентификаторСтроки = КонтекстНастройки.ПолучитьИдентификатор();
	ИначеЕсли ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыСтруктура")
		ИЛИ ТипЗнч(КонтекстНастройки) = Тип("ФормаКлиентскогоПриложения") Тогда
		СлужебныйКонтекст = Форма;
	Иначе
		СлужебныйКонтекст = КонтекстНастройки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыНастройки.Представление)
		И СлужебныйКонтекст[ПараметрыНастройки.Представление] = НастройкаСчетовУчетаКлиентСервер.ТекстГиперссылкиНастройкаСчетовНеТребуется() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаУникальна = Истина;
	
	ДанныеПоПути = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
	Если ТипЗнч(ДанныеПоПути) = Тип("ДанныеФормыКоллекция")
		И ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
		Для Каждого ЭлементКоллекции Из ДанныеПоПути Цикл
			Если ЭлементКоллекции[ПараметрыНастройки.НастройкаСчетовУчета] = КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]
				И ЭлементКоллекции.ПолучитьИдентификатор() <> КонтекстНастройки.ПолучитьИдентификатор() Тогда
				НастройкаУникальна = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]];
	Если ДанныеНастройки = Неопределено Тогда
		ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
	КонецЕсли;
	
	Если СтрНачинаетсяС(ПараметрыНастройки.ПутьКДанным, "Объект")
	И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма["Объект"], "Дата") Тогда
		Период = Форма["Объект"]["Дата"];
	Иначе
		Период = ОбщегоНазначенияКлиент.ДатаСеанса();
	КонецЕсли;
	
	ПараметрыФормыНастройки = Новый Структура;
	ПараметрыФормыНастройки.Вставить("Период", Период);
	ПараметрыФормыНастройки.Вставить("ДанныеНастройки", ДанныеНастройки);
	ПараметрыФормыНастройки.Вставить("НастройкаСчетовУчета", ?(НастройкаУникальна, КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета], Неопределено));
	ПараметрыФормыНастройки.Вставить("ТолькоПросмотр",  Форма.ТолькоПросмотр);
	ПараметрыФормыНастройки.Вставить("КонтекстНастройки", НастройкаСчетовУчетаКлиентСервер.КонтекстНастройки(Форма, ПараметрыНастройки, ИдентификаторСтроки));
	ПараметрыФормыНастройки.Вставить("ИсточникиПодбораСубконто", ПараметрыНастройки.ИсточникиПодбораСубконто);
	ПараметрыФормыНастройки.Вставить("СтатьиСНастройкамиПоОбъектам", ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ИмяЭлементаНастройки", Элемент.Имя);
	ДополнительныеПараметры.Вставить("ПараметрыНастройки", ПараметрыНастройки);
	ДополнительныеПараметры.Вставить("ОповещениеПослеЗавершения", Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаОтраженияОперацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСчетовУчетаОперации", ПараметрыФормыНастройки, Форма, , , , ОписаниеОповещения); 
	
	//-- НЕ УТ
	
КонецПроцедуры

// Вызывается в обработчике "ПриНачалеРедактирования" таблицы формы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки.
// 	ТаблицаФормы - ТаблицаФормы - Редактируемая таблица формы.
// 	НоваяСтрока - ДанныеФормыЭлементКоллекции - Новая строка в редактируемой таблице формы. Используется при программном копировании и несовпадении с текущими данными таблицы
// 	ПутьКДанным - Строка - Путь к данным настройки счетов. Используется, когда настройка не выведена на форму и в параметрах настройки отсутствуют элементы формы.
//
Процедура ПриКопированииСтроки(Форма, ТаблицаФормы, НоваяСтрока = Неопределено, ПутьКДанным = Неопределено) Экспорт

	//++ НЕ УТ
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета"); // см. НастройкаСчетовУчетаКлиентСервер.НовыеДанныеНастройкиСчетовУчета
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если ПутьКДанным <> Неопределено И ПутьКДанным = ПараметрыНастройки.ПутьКДанным Тогда
			СкопироватьНастройкуСчетовУчета(ДанныеНастройкиСчетовУчета, ПараметрыНастройки, ТаблицаФормы, НоваяСтрока);
		Иначе
			Для Каждого ЭлементФормы Из ПараметрыНастройки.ЭлементыФормы Цикл
				Если ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Форма.Элементы[ЭлементФормы]) Тогда
					СкопироватьНастройкуСчетовУчета(ДанныеНастройкиСчетовУчета, ПараметрыНастройки, ТаблицаФормы, НоваяСтрока);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	//-- НЕ УТ
	
КонецПроцедуры

//Предназначена для обработки таблицы формы, не связанной с табличной частью объекта.
// Вызывается в обработчике формы ПередЗаписью().
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура ПередЗаписьюНаКлиенте(Форма) Экспорт
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ОчиститьНеактуальныеНастройкиОтраженияВДанныхФормы(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыбораСубконто

// Обработка проводок при изменении организации.
// 
// Параметры:
//  Проводка - РегистрБухгалтерииЗапись - Проводка
//  ТипыСвязанныеСОрганизацией - ОписаниеТипов - Описание типов
//  ДтКт - Строка - Дт или Кт
Процедура ОбработкаПроводокПриИзмененииОрганизации(Проводка, ТипыСвязанныеСОрганизацией, ДтКт = "")  Экспорт
	
	Для Инд = 1 По 3 Цикл
		ЗначениеСубконто = Проводка["Субконто" + ДтКт + Инд];
		Если ЗначениеЗаполнено(ЗначениеСубконто)
			И ТипыСвязанныеСОрганизацией.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ЗначениеСубконто));
			ОписаниеТипаСубконто = Новый ОписаниеТипов(МассивТипов);
			Проводка["СубконтоДт" + Инд] = ОписаниеТипаСубконто.ПривестиЗначение(Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	
	Если ЗначениеЗаполнено(Проводка["Подразделение" + ДтКт]) Тогда
		Проводка["Подразделение" + ДтКт] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, Организация, ДтКт = "")  Экспорт
	
	ШаблонПоля = "Субконто" + ДтКт + "%Индекс%";
	ПараметрыДокумента = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСубконто(Организация, СтрокаТаблицы, ШаблонПоля, "Счет" + ДтКт);
	НастройкаСчетовУчетаКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(Форма, СтрокаТаблицы, ШаблонПоля, ШаблонПоля, ПараметрыДокумента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

//++ Локализация

Процедура ОткрытьФормуНастройкиСПроверкойЗаписи(ИмяФормы, ФормаВладелец) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФормаВладелец.Объект.Ссылка) ИЛИ ФормаВладелец.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Открытие формы настройки возможно только после записи объекта. Записать?';
							|en = 'The setting form can be opened only when the item is recorded. Record?'");
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИмяФормы", ИмяФормы);
		ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуСПроверкойЗаписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АналитикаУчета", ФормаВладелец.Объект.Ссылка);
	Если ФормаВладелец.ИмяФормы = "Справочник.ВидыПодарочныхСертификатов.Форма.ФормаЭлемента" 
		И ЗначениеЗаполнено(ФормаВладелец.Объект.Организация) Тогда
		ПараметрыФормы.Вставить("Организация", ФормаВладелец.Объект.Организация);
	КонецЕсли;
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ФормаВладелец);
	
КонецПроцедуры

Процедура ОткрытьФормуСПроверкойЗаписиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОткрыватьФорму = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Попытка
			ФормаВладелец = ДополнительныеПараметры.ФормаВладелец;
			ОткрыватьФорму = ФормаВладелец.Записать();
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить запись объекта';
										|en = 'Cannot record the item'"));
		КонецПопытки;
	КонецЕсли;
	
	Если ОткрыватьФорму Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АналитикаУчета", ФормаВладелец.Объект.Ссылка);
		ОткрытьФорму(ДополнительныеПараметры.ИмяФормы, ПараметрыФормы, ДополнительныеПараметры.ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

//-- Локализация

Процедура НастройкаОтраженияОперацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыНастройки = ДополнительныеПараметры.ПараметрыНастройки;
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(Результат.НастройкаСчетовУчета, Результат.ДанныеНастройки);
	
	КонтекстНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным, ИдентификаторСтроки);
	Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		Для каждого СтрокаТаблицы Из КонтекстНастройки Цикл
			Если ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов) Тогда
				СтрокаТаблицы[ПараметрыНастройки.СтатьяАктивовПассивов] = Результат.СтатьяАктивовПассивов;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПараметрыНастройки.АналитикаАктивовПассивов) Тогда
				СтрокаТаблицы[ПараметрыНастройки.АналитикаАктивовПассивов] = Результат.АналитикаАктивовПассивов;
			КонецЕсли;
			СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета] = Результат.НастройкаСчетовУчета;
			Представление = НастройкаСчетовУчетаКлиентСервер.ПредставлениеНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
			СтрокаТаблицы[ПараметрыНастройки.Представление] = Представление;
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов) Тогда
			КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов] = Результат.СтатьяАктивовПассивов;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыНастройки.АналитикаАктивовПассивов) Тогда
			КонтекстНастройки[ПараметрыНастройки.АналитикаАктивовПассивов] = Результат.АналитикаАктивовПассивов;
		КонецЕсли;
		КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета] = Результат.НастройкаСчетовУчета;
		Представление = НастройкаСчетовУчетаКлиентСервер.ПредставлениеНастройкиОтражения(КонтекстНастройки, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
		Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			КонтекстНастройки[ПараметрыНастройки.Представление] = Представление;
		Иначе
			Форма[ПараметрыНастройки.Представление] = Представление;
		КонецЕсли;
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.СтатьяАналитикаДоходовРасходовПриИзменении(Форма, ПараметрыНастройки.ПутьКДанным);
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();
	
	Если ДополнительныеПараметры.ОповещениеПослеЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьНастройкуСчетовУчета(ДанныеНастройкиСчетовУчета, ПараметрыНастройки, ТаблицаФормы, НоваяСтрока)
	
	Если НоваяСтрока = Неопределено Тогда
		ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	Иначе
		ТекущиеДанные = НоваяСтрока;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
		ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[ТекущиеДанные[ПараметрыНастройки.НастройкаСчетовУчета]];
		НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
		ТекущиеДанные[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройка;
		ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(НоваяНастройка, ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ДанныеНастройки));
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти
