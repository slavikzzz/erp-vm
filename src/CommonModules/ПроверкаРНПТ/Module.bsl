
#Область ПрограммныйИнтерфейс

// Определяем наличие права на использование проверки РНПТ.
//
// Возвращаемое значение:
//  Булево - наличие права на использование проверки РНПТ.
//
Функция ЕстьПравоНаИспользованиеПроверки() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьПроверкуРНПТ);
	
КонецФункции

// Показывает, включена ли проверка РНПТ.
// 
// Возвращаемое значение:
//  Булево - Значение константы ИспользоватьПроверкуРНПТ - включена ли проверка РНПТ в базе.
//
Функция ПроверкаРНПТВключена() Экспорт
	
	Возврат ЗначениеКонстантыИспользоватьПроверкуРНПТ();
	
КонецФункции

// Проверяет, что проверка включена и есть необходимые права.
// Возвращаемое значение:
//  Булево - Истина, если есть нужные права на проверку и проверка включена.
//
Функция ИспользованиеПроверкиВозможно() Экспорт
	
	Возврат ЕстьПравоНаИспользованиеПроверки() И ПроверкаРНПТВключена() И ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

// Записывает в регистр СведенияОРНПТИзФНС сведения о РНПТ.
// Параметры:
//  РНПТСсылка - СправочникСсылка - ссылка на элемент справочника РНПТ
//  СведенияОРНПТ - Структура - см. НовыйСведенияОРНПТ()
//  УдалитьЗапись - Булево - признак того, что запись по РНПТ в регистре нужно удалить
//  ПолучитьСведенияИзСервиса - Булево - признак того, что перед записью в регистр нужно получить сведения из сервиса по РНПТ
//  ТолькоАктуализация - Булево - признак того, что не не нужно добавлять запись в регистр, а нужно только актуализировать текущую, если есть
//
Процедура ЗаписатьСведенияОРНПТИзФНС(РНПТСсылка, СведенияОРНПТ, УдалитьЗапись = Ложь, ПолучитьСведенияИзСервиса = Ложь, ТолькоАктуализация = Ложь) Экспорт
	
	Если Не ИспользованиеПроверкиВозможно()
		ИЛИ НЕ ЗначениеЗаполнено(РНПТСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РНПТСсылка, "ПометкаУдаления");
		Если ПометкаУдаления Тогда
			УдалитьЗапись = Истина;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		// Объектная блокировка.
		СтруктураКлюча = Новый Структура("РНПТ", РНПТСсылка);
		Ключ = РегистрыСведений.СтатусыПроверокРНПТДокументов.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Транзакционная блокировка.
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СведенияОРНПТИзФНС");
		ЭлементБлокировки.УстановитьЗначение("РНПТ", РНПТСсылка);
		
		Блокировка.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.СведенияОРНПТИзФНС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РНПТ.Установить(РНПТСсылка);
		НаборЗаписей.Прочитать();
		Если УдалитьЗапись Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			Возврат;
		ИначеЕсли НаборЗаписей.Количество() > 1 Тогда
			НаборЗаписей.Очистить();
			Запись = НаборЗаписей.Добавить();
		ИначеЕсли НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
		Иначе
			Если ТолькоАктуализация Тогда
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
		КонецЕсли;
		Если ПолучитьСведенияИзСервиса Тогда
			СведенияОРНПТ = ПолучитьСведенияОРНПТИзФНС(РНПТСсылка);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Запись, СведенияОРНПТ);
		Запись.РНПТ = РНПТСсылка;
		Если Не ЗначениеЗаполнено(Запись.ДатаПолученияСведений) Тогда
			// Значит сведения не получены, запустим регзадание проверки РНПТ.
			ОпределитьНеобходимостьРегЗаданияПроверкиРНПТ(Истина);
		КонецЕсли;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись сведений о РНПТ из ФНС в регистр';
										|en = 'Save the information about RNPT from the Federal Tax Service to the register'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура регламентного задания, которая получает сведения по РНПТ из сервиса ФНС
// и проверяет документы с РНПТ к проверке.
//
Процедура ПроверитьРНПТРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаРНПТ);
	
	ПолучитьСведенияОбИмеющихсяРНПТ();
	
	ПроверитьРНПТВДокументах();
	
	ОпределитьНеобходимостьРегЗаданияПроверкиРНПТ();
	
КонецПроцедуры

#Область ПроверкаРНПТВДокументах

// Инициализирует реквивизиты проверки РНПТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  Параметры - Структура - параметры из процедуры ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервереДокумент(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыДокумент(Форма);
	
	Если Форма.РеквизитыПроверкиРНПТ.ПроверкаИспользуется Тогда 
		Если НЕ Параметры.Ключ.Пустая() Тогда
			Форма.РеквизитыПроверкиРНПТ.ЭтоОткрытиеСуществующегоДокумента = Истина;
			Форма.РеквизитыПроверкиРНПТ.ЕстьПрослеживаемыеТовары = ПроверкаРНПТПереопределяемый.ЕстьПрослеживаемыеТовары(Форма.Объект);
		Иначе
			Форма.РеквизитыПроверкиРНПТ.ЭтоНовыйДокумент         = Истина;
			Форма.РеквизитыПроверкиРНПТ.ЕстьПрослеживаемыеТовары = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отображает на форме документа результат проверки РНПТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ОтобразитьРезультатПроверкиРНПТВДокументе(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью Тогда
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				
				// Фоновое задание отработало
				ДанныеРНПТ = РезультатРаботыФоновогоЗадания.ДанныеРНПТ;
				ЗаполнитьРезультатПроверкиРНПТВФормеДокумента(Форма, ДанныеРНПТ);
				
				Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе = РезультатРаботыФоновогоЗадания.СостояниеПроверкиРНПТВДокументе;
				Форма.РеквизитыПроверкиРНПТ.ОписаниеОшибкиРНПТВДокументе    = РезультатРаботыФоновогоЗадания.ОписаниеОшибкиРНПТВДокументе;
				Форма.РеквизитыПроверкиРНПТ.ОшибкаДоступаКСерверу           = РезультатРаботыФоновогоЗадания.ОшибкаДоступаКСерверу;
				ПрорисоватьИтоговоеСостоянияПроверкиРНПТВДокументе(Форма);
					
				// Очищаем свойства фонового задания.
				Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
				Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Истина;
				
			Иначе
				Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе = Неопределено;
				Форма.РеквизитыПроверкиРНПТ.ОписаниеОшибкиРНПТВДокументе    = "";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Фоновое задание проверки РНПТ в документе на соответствие сведениям ФНС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ПроверитьРНПТВДокументеФоновоеЗадание(Форма) Экспорт
	
	Если НЕ ПроверкаРНПТВызовСервера.ПроверкаРНПТЗавершилась(Форма.РеквизитыПроверкиРНПТ) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьРезультатПослеПроверки = Ложь;
	Если Форма.РеквизитыПроверкиРНПТ.ЭтоОткрытиеСуществующегоДокумента Тогда
		Форма.РеквизитыПроверкиРНПТ.ЭтоОткрытиеСуществующегоДокумента = Ложь;
		СохранитьРезультатПослеПроверки = Истина;
		Если ДокументПроверен(Форма.Объект.Ссылка) Тогда
			// Если документ уже был успешно проверен, то проверку не запускаем.
			Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.Проверено;
			ЗаполнитьРезультатПроверкиРНПТВФормеДокумента(Форма, Неопределено, Истина);
			ПрорисоватьИтоговоеСостоянияПроверкиРНПТВДокументе(Форма);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРНПТ = ДанныеРНПТВДокументеДляПроверкиФоновымЗаданием(Форма);
	Если Не ЗначениеЗаполнено(ДанныеРНПТ) Тогда
		Форма.РеквизитыПроверкиРНПТ.ЕстьПрослеживаемыеТовары = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДанныеРНПТ.Количество() > 0 Тогда
		
		Форма.РеквизитыПроверкиРНПТ.ЕстьПрослеживаемыеТовары = Истина;
		
		// Инициализируем параметры фонового задания.
		Форма.РеквизитыПроверкиРНПТ.АдресХранилища       = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Ложь;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ДанныеРНПТ", ДанныеРНПТ);
		ПараметрыЗапуска.Вставить("АдресХранилища", Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
		ПараметрыЗапуска.Вставить("ДокументСсылка", Форма.Объект.Ссылка);
		ПараметрыЗапуска.Вставить("ОшибкаДоступаКСерверу", Форма.РеквизитыПроверкиРНПТ.ОшибкаДоступаКСерверу);
		ПараметрыЗапуска.Вставить("СохранитьРезультатПослеПроверки", СохранитьРезультатПослеПроверки);
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(, "ПроверкаРНПТ.ПроверитьРНПТВДокументе", ПараметрыЗапуска);
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = ФоновоеЗадание.ИдентификаторЗадания;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = ФоновоеЗадание.Статус = "Выполнено";
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, запускаемая в фоне, которая проверяет РНПТ на соответствие сведениям ФНС.
//
// Параметры:
//  Параметры - структура с полями:
//  * ДанныеРНПТ - структура - см. НовыйТаблицаДанныхРНПТ() 
//  * АдресХранилища - строка - адрес хранилища, куда будет помещен результат проверки РНПТ
//  * ДокументСсылка - ДокументСсылка - ссылка на проверяемый документ, необязательный, при наличии процедура сохранит результат проверки
//
Процедура ПроверитьРНПТВДокументе(Параметры) Экспорт
	
	ДанныеРНПТ     = Параметры.ДанныеРНПТ;
	АдресХранилища = Параметры.АдресХранилища;
	ПроверитьРНПТ(ДанныеРНПТ, Параметры.ОшибкаДоступаКСерверу);
	
	ИтоговыйСтатусПроверкиРНПТВДокументе = ИтоговыйСтатусПроверкиРНПТВДокументе(ДанныеРНПТ);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеРНПТ", ДанныеРНПТ);
	Результат.Вставить("СостояниеПроверкиРНПТВДокументе", ИтоговыйСтатусПроверкиРНПТВДокументе.СостояниеПроверкиРНПТВДокументе);
	Результат.Вставить("ОписаниеОшибкиРНПТВДокументе",    ИтоговыйСтатусПроверкиРНПТВДокументе.ОписаниеОшибкиРНПТВДокументе);
	Результат.Вставить("ОшибкаДоступаКСерверу",           Параметры.ОшибкаДоступаКСерверу);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если Параметры.Свойство("СохранитьРезультатПослеПроверки")
		И Параметры.СохранитьРезультатПослеПроверки Тогда
		СохранитьРезультатПроверкиРНПТ(
			Параметры.ДокументСсылка,
			ИтоговыйСтатусПроверкиРНПТВДокументе.СостояниеПроверкиРНПТВДокументе,
			ИтоговыйСтатусПроверкиРНПТВДокументе.ОписаниеОшибкиРНПТВДокументе);
	КонецЕсли;
	
КонецПроцедуры

// Показывает в форме списка баннер с документами в которых есть ошибки проверки РНПТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка документа.
//
Процедура ОтобразитьРезультатПолученияДокументовСОшибками(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью Тогда
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				// Фоновое задание отработало
				Форма.КоличествоДокументовСОшибками = РезультатРаботыФоновогоЗадания.КоличествоДокументовСОшибками;
			КонецЕсли;
		КонецЕсли;
		
		// Очищаем свойства фонового задания.
		Форма.РеквизитыПроверкиРНПТ.АдресХранилища       = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Истина;
		
		ОтобразитьРезультатПроверкиВСписке(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает фоновое задание поиска документов с ошибками для отображения в форме списка.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ПараметрыПоиска - Структура с полями:
//    * Организация - СправочникСсылка - ссылка на организацию, по которой происходит поиск
//    * НачалоПериода - Дата - дата начала поиска
//    * КонецПериода - Дата - дата окончания поиска
//    * Контрагент - СправочникСсылка - контрагент по которому происходит поиск (может быть пустой)
//    * НастройкаОтображенияДокументов - Число (0 - все, 1 - с ошибками, 2 - без ошибок)
//    * РежимРасшифровки - Булево - признак, необходимый для получения сведений из отчета "снаружи"
//    * ЭтоВходящийДокумент - Булево - признак того, что нужно отбирать входящие документы
//
Процедура ПроверитьДокументыВСпискеФоновоеЗадание(Форма, ПараметрыПоиска) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ = Неопределено Тогда
		ИнициализироватьРеквизитыФормыДокумент(Форма);
	КонецЕсли;
	
	// Инициализируем параметры фонового задания.
	Форма.РеквизитыПроверкиРНПТ.АдресХранилища       = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
	Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Ложь;
	
	ПараметрыПоиска.Вставить("АдресХранилища", Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(, "ПроверкаРНПТ.ПолучитьСписокДокументовСОшибками", ПараметрыПоиска);
	Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = ФоновоеЗадание.ИдентификаторЗадания;
	Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = ФоновоеЗадание.Статус = "Выполнено";
	
КонецПроцедуры

// Перезаполняет результат проверки РНПТ после зписи документа
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ПослеЗаписиНаСервереДокумент(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью Тогда
		
		ДанныеРНПТ = Неопределено;
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				// Фоновое задание отработало.
				ДанныеРНПТ = РезультатРаботыФоновогоЗадания.ДанныеРНПТ;
				ЗаполнитьРезультатПроверкиРНПТВФормеДокумента(Форма, ДанныеРНПТ);
			КонецЕсли;
		ИначеЕсли Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.Проверено Тогда
			// Это повторная запись уже проверенного документа.
			ЗаполнитьРезультатПроверкиРНПТВФормеДокумента(Форма, Неопределено, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит поиск документов с ошибками для отображения в форме списка.
//
// Параметры:
//  ПараметрыПоиска - Структура с полями:
//    * Организация - СправочникСсылка - ссылка на организацию, по которой происходит поиск
//    * НачалоПериода - Дата - дата начала поиска
//    * КонецПериода - Дата - дата окончания поиска
//    * Контрагент - СправочникСсылка - контрагент по которому происходит поиск (может быть пустой)
//    * НастройкаОтображенияДокументов - Число (0 - все, 1 - с ошибками, 2 - без ошибок)
//    * РежимРасшифровки - Булево - признак, необходимый для получения сведений из отчета "снаружи"
//    * ЭтоВходящийДокумент - Булево - признак того, что нужно отбирать входящие документы
//
Процедура ПолучитьСписокДокументовСОшибками(Параметры) Экспорт
	
	СписокДокументовСОшибками = Новый ТаблицаЗначений;
	СписокДокументовСОшибками = ПроверкаРНПТПереопределяемый.ДокументыСоСтатусомПроверкиРНПТ(Параметры);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоДокументовСОшибками", СписокДокументовСОшибками.Количество());
	
	ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРНПТВПодборе

// Инициализирует реквивизиты проверки РНПТ и запускает фоновое задание проверки РНПТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  Параметры - Структура - параметры из процедуры ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервереПодборРНПТ(Форма, Параметры) Экспорт
	
	ИнициализироватьРеквизитыФормыДокумент(Форма);
	
КонецПроцедуры

// Фоновое задание проверки РНПТ в документе на соответствие сведениям ФНС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  Параметры - Структура с полями:
//    *Номенклатура - СправочникСсылка - ссылка на справочник с проверяемой номенклатурой.
//
Процедура ПроверитьРНПТВФормеПодбораФоновоеЗадание(Форма, Параметры) Экспорт
	
	ДанныеРНПТ = НовыйТаблицаДанныхРНПТ();
	
	Если Форма.ПрослеживаемыйКомплект ИЛИ Форма.НесколькоРНПТ Тогда
		ТаблицаПодбор = Форма.Подбор.Выгрузить();
		Номенклатура = ПроверкаРНПТПереопределяемый.УдалитьПовторяющиесяЭлементыМассива(ТаблицаПодбор.ВыгрузитьКолонку("Номенклатура"));
		КодыТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Номенклатура, "КодТНВЭД");
	КонецЕсли;
		
	Для Каждого СтрокаСРНПТ Из Форма.Подбор Цикл
		Если Не ЗначениеЗаполнено(СтрокаСРНПТ.РНПТ) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаДанныеРНПТ = ДанныеРНПТ.Добавить();
		НоваяСтрокаДанныеРНПТ.РНПТ       = СтрокаСРНПТ.РНПТ;
		НоваяСтрокаДанныеРНПТ.ИдентификаторСтроки = СтрокаСРНПТ.ПолучитьИдентификатор();
		НоваяСтрокаДанныеРНПТ.Количество = СтрокаСРНПТ.КоличествоПрослеживаемости;
		Если Форма.ПрослеживаемыйКомплект ИЛИ Форма.НесколькоРНПТ Тогда
			НоваяСтрокаДанныеРНПТ.КодТНВЭД = КодыТНВЭД[СтрокаСРНПТ.Номенклатура];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ (Форма.ПрослеживаемыйКомплект ИЛИ Форма.НесколькоРНПТ) Тогда
		ПроверкаРНПТПереопределяемый.ЗаполнитьДополнительныеКолонкиДляПроверки(ДанныеРНПТ, Параметры);
	КонецЕсли;
	
	Если ДанныеРНПТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеРНПТ.Количество() > 0 Тогда
		
		// Инициализируем параметры фонового задания.
		Форма.РеквизитыПроверкиРНПТ.АдресХранилища       = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Ложь;
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ДанныеРНПТ", ДанныеРНПТ);
		ПараметрыЗапуска.Вставить("АдресХранилища", Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
		ПараметрыЗапуска.Вставить("ОшибкаДоступаКСерверу", Форма.РеквизитыПроверкиРНПТ.ОшибкаДоступаКСерверу);
		
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьПроцедуру(, "ПроверкаРНПТ.ПроверитьРНПТВДокументе", ПараметрыЗапуска);
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = ФоновоеЗадание.ИдентификаторЗадания;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = ФоновоеЗадание.Статус = "Выполнено";
		
	КонецЕсли;
	
КонецПроцедуры

// Отображает в форме подбора РНПТ результат проверки РНПТ.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//
Процедура ОтобразитьРезультатПроверкиРНПТВФормеПодбора(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью Тогда
		
		Если ЗначениеЗаполнено(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) 
			И ЭтоАдресВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища) Тогда
			
			РезультатРаботыФоновогоЗадания = ПолучитьИзВременногоХранилища(Форма.РеквизитыПроверкиРНПТ.АдресХранилища);
			
			Если РезультатРаботыФоновогоЗадания <> Неопределено Тогда
				// Фоновое задание отработало
				ДанныеРНПТ = РезультатРаботыФоновогоЗадания.ДанныеРНПТ;
				
				Для Каждого СтрокаТабличнойЧасти Из Форма.Подбор Цикл
					НайденныеРНПТ = ДанныеРНПТ.НайтиСтроки(
						Новый Структура("ИдентификаторСтроки", Строка(СтрокаТабличнойЧасти.ПолучитьИдентификатор())));
					Если НайденныеРНПТ.Количество() > 0 Тогда
						СтрокаТабличнойЧасти.СписокОшибок      = НайденныеРНПТ[0].СписокОшибок;
						СтрокаТабличнойЧасти.ОписаниеСостояния = НайденныеРНПТ[0].ОписаниеСостояния;
						СтрокаТабличнойЧасти.Пояснение         = НайденныеРНПТ[0].Пояснение;
						Если НайденныеРНПТ[0].Ошибка Тогда
							СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 1;
						ИначеЕсли НайденныеРНПТ[0].СведенияПолучены Тогда
							СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 0;
						Иначе
							СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 2;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
							СтрокаТабличнойЧасти.СписокОшибок          = "";
							СтрокаТабличнойЧасти.ОписаниеСостояния     = ТекстПроверяется();
							СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 2;
						Иначе
							СтрокаТабличнойЧасти.СписокОшибок          = "";
							СтрокаТабличнойЧасти.ОписаниеСостояния     = "";
							СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 4;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Форма.РеквизитыПроверкиРНПТ.ОшибкаДоступаКСерверу = РезультатРаботыФоновогоЗадания.ОшибкаДоступаКСерверу;
			КонецЕсли;
		КонецЕсли;
		
		// Очищаем свойства фонового задания.
		Форма.РеквизитыПроверкиРНПТ.АдресХранилища       = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ИдентификаторЗадания = Неопределено;
		Форма.РеквизитыПроверкиРНПТ.ЗаданиеВыполнено     = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаРНПВСправочнике

// Получает и выводит на форму сведения о РНПТ из ФНС.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Карточка РНПТ.
//
Процедура ПриСозданииНаСервереРНПТ(Форма) Экспорт
	
	Если Не ИспользованиеПроверкиВозможно() Тогда
		Возврат;
	КонецЕсли;
	
	РНПТОбъект = Форма.Объект;
	РНПТСсылка = РНПТОбъект.Ссылка;
	
	Если Не ЗначениеЗаполнено(РНПТОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОРНПТИзФНС.ОшибкаПроверкиРНПТ КАК Ошибка,
	|	СведенияОРНПТИзФНС.ОписаниеОшибки КАК ОписаниеОшибки,
	|	СведенияОРНПТИзФНС.КодТНВЭД КАК КодТНВЭД,
	|	СведенияОРНПТИзФНС.НаименованиеТовара КАК НаименованиеТовара,
	|	СведенияОРНПТИзФНС.СтранаПроисхожденияКод КАК СтранаПроисхожденияКод,
	|	СведенияОРНПТИзФНС.СтранаПроисхожденияНаименование КАК СтранаПроисхожденияНаименование,
	|	СведенияОРНПТИзФНС.ДатаВыпускаРегистрацииТовара КАК ДатаВыпускаРегистрацииТовара,
	|	СведенияОРНПТИзФНС.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	СведенияОРНПТИзФНС.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	СведенияОРНПТИзФНС.КоличествоТовараВвезенного КАК КоличествоТовараВвезенного,
	|	СведенияОРНПТИзФНС.КоличествоТовараВыбывшего КАК КоличествоТовараВыбывшего,
	|	СведенияОРНПТИзФНС.КоличествоТовараВОбороте КАК КоличествоТовараВОбороте,
	|	СведенияОРНПТИзФНС.ДатаПолученияСведений КАК ДатаПолученияСведений,
	|	СведенияОРНПТИзФНС.КодРНПТ КАК КодРНПТ
	|ИЗ
	|	РегистрСведений.СведенияОРНПТИзФНС КАК СведенияОРНПТИзФНС
	|ГДЕ
	|	СведенияОРНПТИзФНС.РНПТ = &РНПТ
	|	И СведенияОРНПТИзФНС.ДатаПолученияСведений <> ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("РНПТ", РНПТСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	// Определяем состояние из регистра.
	Если РезультатЗапроса.Следующий() Тогда
		Форма.Ошибка         = РезультатЗапроса.Ошибка;
		Форма.ОписаниеОшибки = РезультатЗапроса.ОписаниеОшибки;
		Форма.НаименованиеТовара  = РезультатЗапроса.НаименованиеТовара;
		Форма.СтранаПроисхождения = РезультатЗапроса.СтранаПроисхожденияНаименование;
		Форма.КодТНВЭД            = РезультатЗапроса.КодТНВЭД;
		Форма.ДатаВыпускаРегистрацииТовара = РезультатЗапроса.ДатаВыпускаРегистрацииТовара;
		Форма.КоличествоВвезено  = Строка(Формат(РезультатЗапроса.КоличествоТовараВвезенного, "ЧДЦ=2; ЧН=0,00")) + " " + СокрЛП(РезультатЗапроса.ЕдиницаИзмеренияНаименование);
		Форма.КоличествоВыбыло   = Строка(Формат(РезультатЗапроса.КоличествоТовараВыбывшего, "ЧДЦ=2; ЧН=0,00")) + " " + СокрЛП(РезультатЗапроса.ЕдиницаИзмеренияНаименование);
		Форма.КоличествоВОбороте = Строка(Формат(РезультатЗапроса.КоличествоТовараВОбороте, "ЧДЦ=2; ЧН=0,00")) + " " + СокрЛП(РезультатЗапроса.ЕдиницаИзмеренияНаименование);
		Форма.ДатаПолученияСведений = РезультатЗапроса.ДатаПолученияСведений;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеКонстантыИспользоватьПроверкуРНПТ()
	
	Возврат Константы.ИспользоватьПроверкуРНПТ.Получить();
	
КонецФункции

Процедура ДобавитьРеквизитПроверкиРНПТ(Форма, НовыйРеквизит, ЗначениеНовогоРеквизита)
	
	Если Не Форма.РеквизитыПроверкиРНПТ.Свойство(НовыйРеквизит) Тогда
		Форма.РеквизитыПроверкиРНПТ.Вставить(НовыйРеквизит, ЗначениеНовогоРеквизита);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьРНПТ(ДанныеРНПТ, ОшибкаДоступаКСерверу)
	
	// Будет выполняется поиск данных по таблице.
	Если ДанныеРНПТ.Количество() > 100 Тогда
		ДанныеРНПТ.Индексы.Добавить("РНПТ");
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРНПТ.РНПТ КАК РНПТ
	|ПОМЕСТИТЬ ДанныеРНПТ
	|ИЗ
	|	&ДанныеРНПТ КАК ДанныеРНПТ";
	Запрос.УстановитьПараметр("ДанныеРНПТ", ДанныеРНПТ);
	
	Если Не ОшибкаДоступаКСерверу Тогда
		
		// Сначала получим сведения по РНПТ, сведения о которых не получены из ФНС.
		Запрос.Текст = Запрос.Текст +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРНПТ.РНПТ КАК РНПТ,
		|	ВЫРАЗИТЬ(ДанныеРНПТ.РНПТ КАК Справочник.НомераГТД).Код КАК КодРНПТ,
		|	СведенияОРНПТИзФНС.РНПТ ЕСТЬ NULL КАК ЗаписыватьШаблон
		|ИЗ
		|	ДанныеРНПТ КАК ДанныеРНПТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОРНПТИзФНС КАК СведенияОРНПТИзФНС
		|		ПО (СведенияОРНПТИзФНС.РНПТ = ДанныеРНПТ.РНПТ)
		|ГДЕ
		|	ЕСТЬNULL(СведенияОРНПТИзФНС.ДатаПолученияСведений, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)";
		
		// Заменим обращение к реквизитам РНПТ через переопределение.
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ВЫРАЗИТЬ(ДанныеРНПТ.РНПТ КАК Справочник.НомераГТД).Код",
		ПроверкаРНПТПереопределяемый.ТекстПолученияКодаРНПТВЗапросе());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		РазмерПорции          = 100;
		КоличествоРНПТВПорции = 0;
		Счетчик               = 0;
		ВсегоРНПТ = Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			Счетчик = Счетчик + 1;
			Если НЕ РНПТСоответствуетФормату(Выборка.КодРНПТ) Тогда
				СведенияОРНПТ = НовыйСведенияОРНПТ();
				СведенияОРНПТ.КодРНПТ               = Выборка.КодРНПТ;
				СведенияОРНПТ.ОшибкаПроверкиРНПТ    = Истина;
				СведенияОРНПТ.ОписаниеОшибки        = ТекстРНПТНеНайден();
				СведенияОРНПТ.ДатаПолученияСведений = ТекущаяДатаСеанса();
				ЗаписатьСведенияОРНПТИзФНС(Выборка.РНПТ, СведенияОРНПТ, Ложь);
				Продолжить;
			ИначеЕсли Выборка.ЗаписыватьШаблон Тогда
				СведенияОРНПТ         = НовыйСведенияОРНПТ();
				СведенияОРНПТ.КодРНПТ = Выборка.КодРНПТ;
				ЗаписатьСведенияОРНПТИзФНС(Выборка.РНПТ, СведенияОРНПТ, Ложь);
			КонецЕсли;
			Если КоличествоРНПТВПорции = 0 Тогда
				ЗаписьДанных = Новый ЗаписьJSON;
				ЗаписьДанных.УстановитьСтроку();
				ЗаписьДанных.ЗаписатьНачалоОбъекта();
				ЗаписьДанных.ЗаписатьИмяСвойства("rnpts");
				ЗаписьДанных.ЗаписатьНачалоМассива();
			КонецЕсли;
			ЗаписьДанных.ЗаписатьЗначение(Выборка.КодРНПТ);
			КоличествоРНПТВПорции = КоличествоРНПТВПорции + 1;
			Если КоличествоРНПТВПорции = РазмерПорции 
				ИЛИ Счетчик = ВсегоРНПТ Тогда
				КоличествоРНПТВПорции = 0;
				ЗаписьДанных.ЗаписатьКонецМассива();
				ЗаписьДанных.ЗаписатьКонецОбъекта();
				ДанныеJSON = ЗаписьДанных.Закрыть();
				ПолучитьСведенияОСпискеРНПТИзФНС(ДанныеJSON, Неопределено, Ложь, ОшибкаДоступаКСерверу);
				Если ОшибкаДоступаКСерверу Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Запрос.Выполнить();
	КонецЕсли;
	
	// Проверим соответсвие переданных РНПТ сведениям из ФНС.
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеРНПТ.РНПТ КАК РНПТ,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.ОшибкаПроверкиРНПТ, ЛОЖЬ) КАК Ошибка,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.ОписаниеОшибки, """") КАК ОписаниеОшибки,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.КоличествоТовараВвезенного, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОРНПТИзФНС.ДатаПолученияСведений, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СведенияПолучены,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.КодТНВЭД, """") КАК КодТНВЭД,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.СтранаПроисхожденияКод, """") КАК СтранаПроисхожденияКод,
	|	ЕСТЬNULL(КлассификаторЕдиницИзмерения.Наименование, СведенияОРНПТИзФНС.ЕдиницаИзмеренияНаименование) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(СведенияОРНПТИзФНС.СтранаПроисхожденияНаименование, """") КАК СтранаПроисхожденияНаименование
	|ИЗ
	|	ДанныеРНПТ КАК ДанныеРНПТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОРНПТИзФНС КАК СведенияОРНПТИзФНС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|			ПО СведенияОРНПТИзФНС.ЕдиницаИзмеренияКод = КлассификаторЕдиницИзмерения.Код
	|		ПО (СведенияОРНПТИзФНС.РНПТ = ДанныеРНПТ.РНПТ)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("РНПТ", Выборка.РНПТ);
		
		НайденныеСтроки = ДанныеРНПТ.НайтиСтроки(ОтборСтрок);
		Для Каждого СтрокаСРНПТ Из НайденныеСтроки Цикл
			Если НЕ Выборка.СведенияПолучены Тогда
				СтрокаСРНПТ.СведенияПолучены = Ложь;
				СтрокаСРНПТ.ОписаниеСостояния = ТекстПроверяется();
			ИначеЕсли Выборка.Ошибка Тогда
				СтрокаСРНПТ.СведенияПолучены = Истина;
				СтрокаСРНПТ.Ошибка = Истина;
				СтрокаСРНПТ.СписокОшибок.Добавить("Валидность");
				СтрокаСРНПТ.ОписаниеСостояния = Выборка.ОписаниеОшибки;
			Иначе
				СтрокаСРНПТ.СведенияПолучены = Истина;
				Если Выборка.Количество < СтрокаСРНПТ.Количество Тогда
					СтрокаСРНПТ.Ошибка = Истина;
					СтрокаСРНПТ.СписокОшибок.Добавить("Количество");
					СтрокаСРНПТ.ОписаниеСостояния = ТекстОшибкиКоличество(Выборка.Количество, Выборка.ЕдиницаИзмерения);
					СтрокаСРНПТ.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = ' %1 - по данным ФНС %2 %3';
							|en = ' %1 - by the Federal Tax Service data %2 %3'"),
						Выборка.ЕдиницаИзмерения, Выборка.Количество, Выборка.ЕдиницаИзмерения);
				КонецЕсли;
				ПроверкаРНПТПереопределяемый.ПроверитьДополнительныеКолонки(СтрокаСРНПТ, Выборка);
				Если Не СтрокаСРНПТ.Ошибка Тогда
					СтрокаСРНПТ.ОписаниеСостояния = НСтр("ru = 'Соответствует данным ФНС';
														|en = 'Corresponds to the Federal Tax Service data'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРНПТВДокументах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПроверкаРНПТПереопределяемый.ТекстЗапросаПроверкиРНПТРегЗаданием();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ОписаниеОшибкиПоДокументу = "";
		ВыборкаРНПТ = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРНПТ.Следующий() Цикл
			ОписаниеОшибкиПоРНПТ = "";
			КодРНПТ = СокрЛП(Строка(ВыборкаРНПТ.РНПТ));
			Если ВыборкаРНПТ.ОшибкаПроверкиРНПТ Тогда
				ОписаниеОшибкиПоРНПТ = КодРНПТ + "-" + ВыборкаРНПТ.ОписаниеОшибки;
			Иначе
				Если ВыборкаРНПТ.КоличествоФНС < ВыборкаРНПТ.КоличествоДокумент Тогда
					ОписаниеОшибкиПоРНПТ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1-%2';
																										|en = '%1-%2'"),
					КодРНПТ,
					ТекстОшибкиКоличество(ВыборкаРНПТ.КоличествоФНС, ВыборкаРНПТ.ЕдиницаИзмерения));
				КонецЕсли;
				ПроверяемаяСтрока = Новый Структура("КодТНВЭД, ОписаниеСостояния", ВыборкаРНПТ.ТНВЭДДокумент, "");
				ЭталоннаяСтрока = Новый Структура("КодТНВЭД", ВыборкаРНПТ.ТНВЭДФНС);
				ПроверкаРНПТПереопределяемый.ПроверитьДополнительныеКолонки(ПроверяемаяСтрока, ЭталоннаяСтрока, Истина);
				Если ЗначениеЗаполнено(ПроверяемаяСтрока.ОписаниеСостояния) Тогда
					ОписаниеОшибкиПоРНПТ = ОписаниеОшибкиПоРНПТ + 
					?(ЗначениеЗаполнено(ОписаниеОшибкиПоРНПТ), ";", КодРНПТ + "-")
					+ ПроверяемаяСтрока.ОписаниеСостояния;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОписаниеОшибкиПоРНПТ) Тогда
				ОписаниеОшибкиПоДокументу = ОписаниеОшибкиПоДокументу
					+ ?(ЗначениеЗаполнено(ОписаниеОшибкиПоДокументу), "; ", "")
					+ ОписаниеОшибкиПоРНПТ;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОписаниеОшибкиПоДокументу) Тогда
			СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.НекорректныйРНПТ;
		Иначе
			СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.Проверено;
		КонецЕсли;
		
		СохранитьРезультатПроверкиРНПТ(
			ВыборкаПоДокументам.Ссылка, СостояниеПроверкиРНПТВДокументе, ОписаниеОшибкиПоДокументу);
			
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйТаблицаДанныхРНПТ()
	
	ДанныеРНПТ = Новый ТаблицаЗначений;
	ДанныеРНПТ.Колонки.Добавить("РНПТ",       Метаданные.ОпределяемыеТипы.РНПТ.Тип);
	ДанныеРНПТ.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(23,11));
	ДанныеРНПТ.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36)));
	ДанныеРНПТ.Колонки.Добавить("Ошибка",              Новый ОписаниеТипов("Булево"));
	ДанныеРНПТ.Колонки.Добавить("СписокОшибок",        Новый ОписаниеТипов("СписокЗначений"));
	ДанныеРНПТ.Колонки.Добавить("СведенияПолучены",    Новый ОписаниеТипов("Булево"));
	ДанныеРНПТ.Колонки.Добавить("ОписаниеСостояния",   Новый ОписаниеТипов("Строка"));
	ДанныеРНПТ.Колонки.Добавить("Пояснение",           Новый ОписаниеТипов("Строка"));
	
	ПроверкаРНПТПереопределяемый.ДобавитьДополнительныеКолонкиДляПроверки(ДанныеРНПТ);
	
	Возврат ДанныеРНПТ;
	
КонецФункции

Процедура ПолучитьСведенияОбИмеющихсяРНПТ()
	
	// Обрабатываем порциями по 500 штук (5 запросов по 100), чтобы снизить нагрузку на сервис.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	СведенияОРНПТИзФНС.РНПТ КАК РНПТ,
	|	СведенияОРНПТИзФНС.КодРНПТ КАК КодРНПТ,
	|	СведенияОРНПТИзФНС.ДатаПолученияСведений КАК ДатаПолученияСведений
	|ИЗ
	|	РегистрСведений.СведенияОРНПТИзФНС КАК СведенияОРНПТИзФНС
	|ГДЕ
	|	СведенияОРНПТИзФНС.ДатаПолученияСведений = ДАТАВРЕМЯ(1, 1, 1)";
	
	ПроверкаРНПТПереопределяемый.ПереопределитьТекстЗапросаДляПолученияСведенийОРНПТ(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСведений = РезультатЗапроса.Выгрузить();
	РазмерПорции          = 100;
	КоличествоРНПТВПорции = 0;
	Счетчик               = 0;
	ВсегоРНПТ = ТаблицаСведений.Количество();
	Для Каждого СтрокаСведений Из ТаблицаСведений Цикл
		Счетчик = Счетчик + 1;
		Если НЕ РНПТСоответствуетФормату(СтрокаСведений.КодРНПТ) Тогда
			СведенияОРНПТ = НовыйСведенияОРНПТ();
			СведенияОРНПТ.КодРНПТ               = СтрокаСведений.КодРНПТ;
			СведенияОРНПТ.ОшибкаПроверкиРНПТ    = Истина;
			СведенияОРНПТ.ОписаниеОшибки        = ТекстРНПТНеНайден();
			СведенияОРНПТ.ДатаПолученияСведений = ТекущаяДатаСеанса();
			ЗаписатьСведенияОРНПТИзФНС(СтрокаСведений.РНПТ, СведенияОРНПТ, Ложь);
			Продолжить;
		КонецЕсли;
		Если КоличествоРНПТВПорции = 0 Тогда
			ЗаписьДанных = Новый ЗаписьJSON;
			ЗаписьДанных.УстановитьСтроку();
			ЗаписьДанных.ЗаписатьНачалоОбъекта();
			ЗаписьДанных.ЗаписатьИмяСвойства("rnpts");
			ЗаписьДанных.ЗаписатьНачалоМассива();
		КонецЕсли;
		ЗаписьДанных.ЗаписатьЗначение(СокрЛП(СтрокаСведений.КодРНПТ));
		КоличествоРНПТВПорции = КоличествоРНПТВПорции + 1;
		Если КоличествоРНПТВПорции = РазмерПорции 
			ИЛИ Счетчик = ВсегоРНПТ Тогда
			КоличествоРНПТВПорции = 0;
			ЗаписьДанных.ЗаписатьКонецМассива();
			ЗаписьДанных.ЗаписатьКонецОбъекта();
			ДанныеJSON = ЗаписьДанных.Закрыть();
			Ошибка = Ложь;
			ПолучитьСведенияОСпискеРНПТИзФНС(ДанныеJSON, ТаблицаСведений, Истина, Ошибка);
			Если Ошибка Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РНПТСоответствуетФормату(КодРНПТ)
	
	Возврат ПроверкаРНПТПереопределяемый.РНПТСоответствуетФормату(КодРНПТ);
	
КонецФункции

Функция ПолучитьСведенияОРНПТИзФНС(РНПТ)
	
	СведенияОРНПТ = НовыйСведенияОРНПТ();
	
	Если ТипЗнч(РНПТ) <> ПроверкаРНПТПереопределяемый.ТипСправочникаРНПТ() Тогда
		Возврат СведенияОРНПТ;
	Иначе
		СведенияОРНПТ.КодРНПТ = РНПТ.Код;
		Если НЕ РНПТСоответствуетФормату(РНПТ.Код) Тогда
			СведенияОРНПТ.ОшибкаПроверкиРНПТ    = Истина;
			СведенияОРНПТ.ОписаниеОшибки        = ТекстРНПТНеНайден();
			СведенияОРНПТ.ДатаПолученияСведений = ТекущаяДатаСеанса();
			ЗаписатьСведенияОРНПТИзФНС(РНПТ, СведенияОРНПТ, Ложь);
			Возврат СведенияОРНПТ;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСервера = ИмяСервера();
	АутентификацияПоТикету = Ложь;
	ПараметрыАутентификации = ПараметрыАутентификации();
	Если ЗначениеЗаполнено(ПараметрыАутентификации.ticket) Тогда
		АутентификацияПоТикету = Истина;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	Если АутентификацияПоТикету Тогда
		Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ПараметрыАутентификации.ticket));
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/api/rnpt", Заголовки);
	Запрос.УстановитьТелоИзСтроки(ПолучитьJSONПоРНПТ(СокрЛП(РНПТ.Код)));
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	
	ТекстОшибки = "";
	Таймаут     = 1;
	Попытка
		
		Если АутентификацияПоТикету Тогда
			Соединение = Новый HTTPСоединение(
				ИмяСервера,,,,
				Новый ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		Иначе
			Соединение = Новый HTTPСоединение(
				ИмяСервера,,
				ПараметрыАутентификации.login,
				ПараметрыАутентификации.password, 
				Новый ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		КонецЕсли;
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		
	Исключение
		
		HTTPОтвет = Неопределено;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РНПТ';
				|en = 'RNPT'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Ошибка отправки POST-запроса к серверу проверки РНПТ';
				|en = 'An error occurred when sending the POST request to the RNPT check server'") 
			+ Символы.ПС 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат СведенияОРНПТ;
		
	КонецПопытки;
		
	Если Ответ.КодСостояния = 200 Тогда
		
		СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если Не ПустаяСтрока(СтрокаОтвет) Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
			Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Если Данные.Получить("status") = "PROCESSING" Тогда
				Возврат СведенияОРНПТ;
			КонецЕсли;
			
			ДанныеПоРНПТ = Данные.Получить("data");
			СведенияОРНПТ.КодРНПТ                          = ДанныеПоРНПТ.Получить("rnpt");
			СведенияОРНПТ.ОшибкаПроверкиРНПТ               = ЗначениеЗаполнено(ДанныеПоРНПТ.Получить("errorCode"));
			ОписаниеОшибки                                 = СокрЛП(ДанныеПоРНПТ.Получить("errorName"));
			// Переопределим описание ошибки для показа пользователю.
			Если ОписаниеОшибки = "Введенный регистрационный номер партии товара не найден" Тогда
				ОписаниеОшибки = ТекстРНПТНеНайден();
			КонецЕсли;
			СведенияОРНПТ.ОписаниеОшибки                   = ОписаниеОшибки;
			СведенияОРНПТ.КодТНВЭД                         = ДанныеПоРНПТ.Получить("codeTnved");
			СведенияОРНПТ.НаименованиеТовара               = ДанныеПоРНПТ.Получить("nameGoods");
			СведенияОРНПТ.СтранаПроисхожденияНаименование  = ДанныеПоРНПТ.Получить("nameCoProd");
			СведенияОРНПТ.СтранаПроисхожденияКод           = ДанныеПоРНПТ.Получить("codeCoProd");
			СведенияОРНПТ.ДатаВыпускаРегистрацииТовара     = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеПоРНПТ.Получить("dateProd"));
			СведенияОРНПТ.ЕдиницаИзмеренияКод              = ДанныеПоРНПТ.Получить("unitCode");
			СведенияОРНПТ.ЕдиницаИзмеренияНаименование     = ДанныеПоРНПТ.Получить("nameUnitCode");
			СведенияОРНПТ.КоличествоТовараВвезенного       = ДанныеПоРНПТ.Получить("quantInputGoods");
			СведенияОРНПТ.КоличествоТовараВыбывшего        = ДанныеПоРНПТ.Получить("quantOutputGoods");
			СведенияОРНПТ.КоличествоТовараВОбороте         = ДанныеПоРНПТ.Получить("quantCirculGoods");
			СведенияОРНПТ.ДатаПолученияСведений            = ТекущаяДатаСеанса();
			
		КонецЕсли;
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка РНПТ. Отправка запроса.';
				|en = 'RNPT check. Send the request.'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.';
							|en = 'HTTP status code: %1.'"), Ответ.КодСостояния));
	КонецЕсли;
	
	Возврат СведенияОРНПТ;
	
КонецФункции

Процедура ПолучитьСведенияОСпискеРНПТИзФНС(JSONРНПТ, ТаблицаСведений = Неопределено, ЭтоРегЗадание = Ложь, Ошибка = Ложь)
	
	ИмяСервера = ИмяСервера();
	ПараметрыАутентификации = ПараметрыАутентификации();
	АутентификацияПоТикету = ложь;
	Если ЗначениеЗаполнено(ПараметрыАутентификации.ticket) Тогда
		АутентификацияПоТикету = Истина;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("accept", "application/json");
	Заголовки.Вставить("Content-Type", "application/json");
	Если АутентификацияПоТикету Тогда
		Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ПараметрыАутентификации.ticket));
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/api/rnpt/list", Заголовки);
	Запрос.УстановитьТелоИзСтроки(JSONРНПТ);
	ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	
	ТекстОшибки = "";
	Таймаут = ?(ЭтоРегЗадание, 30, 1);
	Попытка
		Если АутентификацияПоТикету Тогда
			Соединение = Новый HTTPСоединение(
				ИмяСервера,,,,
				Новый ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		Иначе
			Соединение = Новый HTTPСоединение(
				ИмяСервера,,
				ПараметрыАутентификации.login,
				ПараметрыАутентификации.password,
				Новый ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		КонецЕсли;
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	Исключение
		HTTPОтвет = Неопределено;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'РНПТ';
				|en = 'RNPT'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Ошибка отправки POST-запроса к серверу проверки РНПТ';
				|en = 'An error occurred when sending the POST request to the RNPT check server'") 
			+ Символы.ПС 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		
		СтрокаОтвет = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если Не ПустаяСтрока(СтрокаОтвет) Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
			Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Для Каждого СтрокаСДанными Из Данные Цикл
				Если СтрокаСДанными.Получить("status") = "PROCESSING" Тогда
					Продолжить;
				КонецЕсли;
				ДанныеПоРНПТ = СтрокаСДанными.Получить("data");
				КодРНПТ = ДанныеПоРНПТ.Получить("rnpt");
				РНПТСсылка = ПроверкаРНПТПереопределяемый.РНПТПоКоду(КодРНПТ);
				Если ЗначениеЗаполнено(РНПТСсылка) Тогда
					СведенияОРНПТ = НовыйСведенияОРНПТ();
					
					СведенияОРНПТ.КодРНПТ                         = КодРНПТ;
					СведенияОРНПТ.ОшибкаПроверкиРНПТ              = ЗначениеЗаполнено(ДанныеПоРНПТ.Получить("errorCode"));
					ОписаниеОшибки                         = СокрЛП(ДанныеПоРНПТ.Получить("errorName"));
					// Переопределим описание ошибки для показа пользователю.
					Если ОписаниеОшибки = "Введенный регистрационный номер партии товара не найден" Тогда
						ОписаниеОшибки = ТекстРНПТНеНайден();
					КонецЕсли;
					СведенияОРНПТ.ОписаниеОшибки                  = ОписаниеОшибки;
					СведенияОРНПТ.КодТНВЭД                        = ДанныеПоРНПТ.Получить("codeTnved");
					СведенияОРНПТ.НаименованиеТовара              = ДанныеПоРНПТ.Получить("nameGoods");
					СведенияОРНПТ.СтранаПроисхожденияНаименование = ДанныеПоРНПТ.Получить("nameCoProd");
					СведенияОРНПТ.СтранаПроисхожденияКод          = ДанныеПоРНПТ.Получить("codeCoProd");
					СведенияОРНПТ.ДатаВыпускаРегистрацииТовара    = СтроковыеФункцииКлиентСервер.СтрокаВДату(ДанныеПоРНПТ.Получить("dateProd"));
					СведенияОРНПТ.ЕдиницаИзмеренияКод             = ДанныеПоРНПТ.Получить("unitCode");
					СведенияОРНПТ.ЕдиницаИзмеренияНаименование    = ДанныеПоРНПТ.Получить("nameUnitCode");
					СведенияОРНПТ.КоличествоТовараВвезенного      = ДанныеПоРНПТ.Получить("quantInputGoods");
					СведенияОРНПТ.КоличествоТовараВыбывшего       = ДанныеПоРНПТ.Получить("quantOutputGoods");
					СведенияОРНПТ.КоличествоТовараВОбороте        = ДанныеПоРНПТ.Получить("quantCirculGoods");
					СведенияОРНПТ.ДатаПолученияСведений           = ТекущаяДатаСеанса();
					
					ЗаписатьСведенияОРНПТИзФНС(РНПТСсылка, СведенияОРНПТ);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка РНПТ. Отправка запроса.';
				|en = 'RNPT check. Send the request.'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.';
							|en = 'HTTP status code: %1.'"), Ответ.КодСостояния));
		Ошибка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыАутентификации()
	
	ПараметрыАутентификации = Новый Структура("login,password,ticket", "", "","");
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Тикет = ТикетАутентификацииНаПорталеПоддержки();
		Если ЗначениеЗаполнено(Тикет) Тогда
			ПараметрыАутентификации.ticket = Тикет;
		КонецЕсли;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации <> Неопределено Тогда
			ПараметрыАутентификации.login    = ДанныеАутентификации.Логин;
			ПараметрыАутентификации.password = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

Функция ТикетАутентификацииНаПорталеПоддержки()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ИмяСервисаНаПорталеИТС());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(ДанныеАутентификации.Тикет) Тогда
		Возврат ДанныеАутентификации.Тикет;
	Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка РНПТ.Аутентификация на портале поддержки';
										|en = 'RNPT check.Authentication on the online support portal'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ДанныеАутентификации.СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИмяСервисаНаПорталеИТС()

	Возврат "rnptFns";
	
КонецФункции

Функция ИмяСервера()
	
	Возврат "rnpt-fns.1c.ru";
	
КонецФункции
	
Функция ПолучитьJSONПоРНПТ(РНПТ = "")
	
	ЗаписьДанных = Новый ЗаписьJSON;
	ЗаписьДанных.УстановитьСтроку();
	
	ЗаписьДанных.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанных.ЗаписатьИмяСвойства("rnpt");
	ЗаписьДанных.ЗаписатьЗначение(РНПТ);
	
	ЗаписьДанных.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанных.Закрыть();
	
КонецФункции

Функция НовыйСведенияОРНПТ() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодРНПТ",                         "");
	Результат.Вставить("ОшибкаПроверкиРНПТ",              Ложь);
	Результат.Вставить("ОписаниеОшибки",                  "");
	Результат.Вставить("КодТНВЭД",                        "");
	Результат.Вставить("НаименованиеТовара",              "");
	Результат.Вставить("СтранаПроисхожденияНаименование", "");
	Результат.Вставить("СтранаПроисхожденияКод",          "");
	Результат.Вставить("ДатаВыпускаРегистрацииТовара",    '00010101');
	Результат.Вставить("ЕдиницаИзмеренияКод",             "");
	Результат.Вставить("ЕдиницаИзмеренияНаименование",    "");
	Результат.Вставить("КоличествоТовараВвезенного",      0);
	Результат.Вставить("КоличествоТовараВыбывшего",       0);
	Результат.Вставить("КоличествоТовараВОбороте",        0);
	Результат.Вставить("ДатаПолученияСведений",           '00010101');
	
	Возврат Результат;
	
КонецФункции

Функция ТекстРНПТНеНайден() Экспорт
	
	// При ошибке в формате и отсутствии на сервисе показываем одинаковое сообщение.
	Возврат НСтр("ru = 'Не найден в данных ФНС';
				|en = 'Not found in the Federal Tax Service data'");
	
КонецФункции

Функция ТекстОшибкиКоличество(Количество, ЕдиницаИзмерения)
	
	ШаблонСообщения = НСтр("ru = 'По данным ФНС количество ввезенного товара %1 %2';
							|en = 'By the Federal Tax Service data, the number of imported items %1 %2'");
	ТекстОшибкиКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Количество, ЕдиницаИзмерения);
	
	Возврат ТекстОшибкиКоличество;
	
КонецФункции

Функция ТекстПроверяется()
	
	Возврат НСтр("ru = 'Отправлено на проверку';
				|en = 'Sent for check'");
	
КонецФункции

// Определяет, нужно ли получать сведения о РНПТ и проверять документы, и исходя из этого 
// отключает или планирует регламентное задание.
//
// Параметры:
//  ИспользоватьРегЗадание - Булево - признак того, что нужно запустить рег задание если оно не запущено.
//
Процедура ОпределитьНеобходимостьРегЗаданияПроверкиРНПТ(ИспользоватьРегЗадание = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИспользоватьРегЗадание = Неопределено Тогда
		ИспользованиеРегЗадания = ИспользованиеПроверкиВозможно() И ЕстьЗадачиКОбработкеРегЗаданием();
	Иначе
		ИспользованиеРегЗадания = ИспользоватьРегЗадание;
	КонецЕсли;
	
	Расписание = РасписаниеРегЗаданияПроверкиРНПТ();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ПроверкаРНПТ);

	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	
	Для Каждого РегЗадание Из СписокЗаданий Цикл
		
		ПараметрыЗадания = Новый Структура("Использование, Расписание", ИспользованиеРегЗадания, Расписание);

		Если ИспользованиеРегЗадания Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыЗадания);
			ИспользованиеРегЗадания = Ложь;
		Иначе
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	
	КонецЦикла;
	
	// Не было найдено регламентных заданий.
	Если ИспользованиеРегЗадания Тогда // добавим новое рег.задание
		
		ПараметрыЗадания.Вставить("Наименование", НСтр("ru = 'Проверка РНПТ.';
														|en = 'RNPT check.'"));
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    60);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		ПараметрыЗадания.Вставить("Использование",                            Истина);
		ПараметрыЗадания.Вставить("Расписание",                               Расписание);

		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегЗаданияПроверкиРНПТ()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 1800; // 30 минут
	ШаблонДат = Новый Массив(12);
	Для инд = 0 По 11 Цикл
		ШаблонДат[инд] = инд + 1;
	КонецЦикла;
	Расписание.Месяцы = ШаблонДат;
	ШаблонДат = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ШаблонДат);
	Для инд = 7 По 11 Цикл
		ШаблонДат.Удалить(7);
	КонецЦикла;
	Расписание.ДниНедели = ШаблонДат;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ГраницаВремени = ТекущаяДата() + Расписание.ПериодПовтораВТечениеДня;
		Расписание.ВремяНачала = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');
		ГраницаВремени = ГраницаВремени - (Расписание.ПериодПовтораВТечениеДня + 1);
		Расписание.ВремяКонца = ГраницаВремени - (НачалоДня(ГраницаВремени) - '00010101');
	Иначе // в режиме сервиса действует механизм очереди заданий
		Расписание.ВремяНачала = Неопределено;
		Расписание.ВремяКонца = Неопределено;
	КонецЕсли;
	
	Возврат Расписание;

КонецФункции

Функция ЕстьЗадачиКОбработкеРегЗаданием()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗадачиКОбработке
	|ИЗ
	|	РегистрСведений.СведенияОРНПТИзФНС КАК СведенияОРНПТИзФНС
	|ГДЕ
	|	СведенияОРНПТИзФНС.ДатаПолученияСведений = ДАТАВРЕМЯ(1, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.СтатусыПроверокРНПТДокументов КАК СтатусыПроверокРНПТДокументов
	|ГДЕ
	|	(СтатусыПроверокРНПТДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиРНПТ.ПустаяСсылка)
	|			ИЛИ СтатусыПроверокРНПТДокументов.СтатусПроверки = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиРНПТ.Выполняется))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

#Область ПроверкаРНПТВДокументах

Функция ДокументПроверен(ДокументСсылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусыПроверокРНПТДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СтатусыПроверокРНПТДокументов КАК СтатусыПроверокРНПТДокументов
	|ГДЕ
	|	СтатусыПроверокРНПТДокументов.Документ = &ДокументСсылка
	|	И СтатусыПроверокРНПТДокументов.СтатусПроверки = &СтатусПроверки";
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СтатусПроверки", Перечисления.СтатусыПроверкиРНПТ.Проверено);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

Процедура ИнициализироватьРеквизитыФормыДокумент(Форма)
	
	Если Форма.РеквизитыПроверкиРНПТ = Неопределено Тогда
		Форма.РеквизитыПроверкиРНПТ = Новый Структура;
	КонецЕсли;
	
	Если НЕ Форма.РеквизитыПроверкиРНПТ.Свойство("ПроверкаИспользуется") Тогда
		Форма.РеквизитыПроверкиРНПТ.Вставить("ПроверкаИспользуется", ИспользованиеПроверкиВозможно());
	КонецЕсли;
	
	ДобавитьРеквизитПроверкиРНПТ(Форма, "АдресХранилища",                        Неопределено);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ИдентификаторЗадания",                  Неопределено);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ЗаданиеВыполнено",                      Истина);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "СостояниеПроверкиРНПТВДокументе",       Неопределено);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ОписаниеОшибкиРНПТВДокументе",          "");
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ИнициализацияВыполненаПолностью",       Форма.РеквизитыПроверкиРНПТ.ПроверкаИспользуется);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ЭтоОткрытиеСуществующегоДокумента",     Ложь);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ОшибкаДоступаКСерверу",                 Ложь);
	// Позволяет не прорисовывать результат проверки РНПТ, 
	// если начато редактирование табличной части документа.
	// Позволяет избежать ошибки сброса редактируемого значения при выводе результатов проверки.
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ОтложитьПрорисовкуРезультатаПроверкиРНПТ", Ложь);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ЭтоНовыйДокумент",                         Ложь);
	ДобавитьРеквизитПроверкиРНПТ(Форма, "ЕстьПрослеживаемыеТовары",                 Ложь);
	
КонецПроцедуры

Функция ДанныеРНПТВДокументе(Форма)
	
	ДанныеРНПТ = НовыйТаблицаДанныхРНПТ();
	
	ДокументОбъект = Форма.Объект;
	
	НоменклатураКомплектов = ДокументОбъект.СведенияПрослеживаемости.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	НоменклатураКомплектов = ПроверкаРНПТПереопределяемый.УдалитьПовторяющиесяЭлементыМассива(НоменклатураКомплектов);
	КодыТНВЭДКомплектов    = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НоменклатураКомплектов, "КодТНВЭД");
	Для Каждого СтрокаСРНПТ Из ДокументОбъект.СведенияПрослеживаемости Цикл
		НоваяСтрокаДанныеРНПТ = ДанныеРНПТ.Добавить();
		НоваяСтрокаДанныеРНПТ.РНПТ                = СтрокаСРНПТ.РНПТ;
		НоваяСтрокаДанныеРНПТ.ИдентификаторСтроки = СтрокаСРНПТ.ИдентификаторСтроки;
		НоваяСтрокаДанныеРНПТ.Количество          = СтрокаСРНПТ.КоличествоПрослеживаемости;
		Если ЗначениеЗаполнено(СтрокаСРНПТ.Номенклатура)
			И КодыТНВЭДКомплектов[СтрокаСРНПТ.Номенклатура] <> Неопределено Тогда
			НоваяСтрокаДанныеРНПТ.КодТНВЭД = КодыТНВЭДКомплектов[СтрокаСРНПТ.Номенклатура];
		КонецЕсли;
	КонецЦикла;
	
	ПроверкаРНПТПереопределяемый.ЗаполнитьДополнительныеКолонкиДляПроверки(ДанныеРНПТ, Форма);
	
	Возврат ДанныеРНПТ;
	
КонецФункции

Процедура ЗаполнитьРезультатПроверкиРНПТВФормеДокумента(Форма, ДанныеРНПТ = Неопределено, ПриОткрытии = Ложь)
	
	ДокументОбъект = Форма.Объект;
	
	ТабличныеЧастиДокументаСПрослеживаемостью = ПроверкаРНПТПереопределяемый.ТабличныеЧастиДокументаСПрослеживаемостью(
		Форма.РеквизитФормыВЗначение("Объект"));
	Для Каждого ТабличнаяЧастьНаименование Из ТабличныеЧастиДокументаСПрослеживаемостью Цикл 
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ТабличнаяЧастьНаименование] Цикл
			Если НЕ СтрокаТабличнойЧасти.ПрослеживаемыйТовар ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.РНПТ) Тогда
				СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 4;
				Продолжить;
			ИначеЕсли ПриОткрытии Тогда // при открытии проверенного документа состояние проверки установим в "Проверено"
				СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 0;
				Продолжить;
			КонецЕсли;
			НайденныеРНПТПоИдентификатору = ДанныеРНПТ.Скопировать(
				Новый Структура("ИдентификаторСтроки", СтрокаТабличнойЧасти.ИдентификаторСтроки));
			НайденныеРНПТ = НайденныеРНПТПоИдентификатору.НайтиСтроки(Новый Структура("Ошибка", Истина));
			Если НайденныеРНПТ.Количество() > 0 Тогда
				СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 1;
			Иначе
				НайденныеРНПТ = НайденныеРНПТПоИдентификатору.НайтиСтроки(Новый Структура("СведенияПолучены", Ложь));
				Если НайденныеРНПТ.Количество() > 0 Тогда
					СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 2;
				Иначе
					Если НайденныеРНПТПоИдентификатору.Количество() > 0 Тогда
						СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 0;
					Иначе
						СтрокаТабличнойЧасти.СостояниеПроверкиРНПТ = 2;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСостояниеПроверкиРНПТПоУмолчанию(Форма, СтрокаТаблицы) Экспорт
	
	Если НЕ СтрокаТаблицы.Свойство("СостояниеПроверкиРНПТ") 
		ИЛИ НЕ СтрокаТаблицы.Свойство("РНПТ") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.РНПТ) Тогда
		Если Форма.РеквизитыПроверкиРНПТ = Неопределено Тогда
			СтрокаТаблицы.СостояниеПроверкиРНПТ = 2; // обрабатывается
		КонецЕсли;
	Иначе
		СтрокаТаблицы.СостояниеПроверкиРНПТ = 4; // нет картинки
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрорисоватьИтоговоеСостоянияПроверкиРНПТВДокументе(Форма)
	
	ИтоговоеСостояниеПроверки = Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе;
	Форма.НадписьПроверкаРНПТ = Перечисления.СтатусыПроверкиРНПТ.НадписьПоСтатусу(ИтоговоеСостояниеПроверки);
	
	Если ИтоговоеСостояниеПроверки = Перечисления.СтатусыПроверкиРНПТ.Проверено 
		ИЛИ ИтоговоеСостояниеПроверки = Перечисления.СтатусыПроверкиРНПТ.Выполняется Тогда
		
		Форма.Элементы.НадписьПроверкаРНПТ.Видимость = Ложь;
		
	ИначеЕсли ИтоговоеСостояниеПроверки = Перечисления.СтатусыПроверкиРНПТ.НекорректныйРНПТ Тогда
		
		Форма.Элементы.ГруппаПроверкаРНПТ.ЦветФона   = ЦветаСтиля.ЦветФонаНекорректногоРНПТ;
		Форма.Элементы.НадписьПроверкаРНПТ.Видимость = Истина;
		
		ТекстПодсказки = Новый Массив;
		ТекстПодсказки.Добавить(НСтр("ru = 'РНПТ документа не сответствуют данным ФНС. ';
									|en = 'Document RNPT does not correspond to the Federal Tax Service data.'"));
		ТекстПодсказки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настройка проверки';
																|en = 'Check settings'"),,,,"e1cib/app/ОбщаяФорма.ВключениеПроверкиРНПТ"));
		Форма.Элементы.НадписьПроверкаРНПТ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ТекстПодсказки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИтоговыйСтатусПроверкиРНПТВДокументе(ДанныеРНПТ)
	
	ИтоговоеСостояние = Новый Структура();
	ИтоговоеСостояние.Вставить("СостояниеПроверкиРНПТВДокументе", Неопределено);
	ИтоговоеСостояние.Вставить("ОписаниеОшибкиРНПТВДокументе", "");
	
	Отбор = Новый Структура("СведенияПолучены", Ложь);
	ЕстьНеполученныеСведения = ДанныеРНПТ.НайтиСтроки(Отбор).Количество() > 0;
	Если ЕстьНеполученныеСведения Тогда
		ИтоговоеСостояние.СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.Выполняется;
		Возврат ИтоговоеСостояние;
	КонецЕсли;
	
	Отбор = Новый Структура("Ошибка", Истина);
	ЕстьОшибки = ДанныеРНПТ.НайтиСтроки(Отбор).Количество() > 0;
	Если ЕстьОшибки Тогда
		ОписаниеОшибкиРНПТВДокументе = "";
		Для Каждого СтрокаСРНПТ Из ДанныеРНПТ Цикл
			Если СтрокаСРНПТ.Ошибка И ЗначениеЗаполнено(СтрокаСРНПТ.ОписаниеСостояния) Тогда
				ОписаниеОшибкиРНПТВДокументе = ОписаниеОшибкиРНПТВДокументе
					+ ?(ЗначениеЗаполнено(ОписаниеОшибкиРНПТВДокументе), "; ", "")
					+ Строка(СтрокаСРНПТ.РНПТ)
					+ "-"
					+ СтрокаСРНПТ.ОписаниеСостояния;
			КонецЕсли;
		КонецЦикла;
		ИтоговоеСостояние.СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.НекорректныйРНПТ;
		ИтоговоеСостояние.ОписаниеОшибкиРНПТВДокументе = ОписаниеОшибкиРНПТВДокументе;
		Возврат ИтоговоеСостояние;
	КонецЕсли;
	
	ИтоговоеСостояние.СостояниеПроверкиРНПТВДокументе = Перечисления.СтатусыПроверкиРНПТ.Проверено;
	
	Возврат ИтоговоеСостояние;
	
КонецФункции

Процедура СохранитьРезультатПроверкиРНПТПослеЗаписиДокумента(Форма) Экспорт
	
	Если Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью 
		И ПроверкаРНПТВызовСервера.ПроверкаРНПТЗавершилась(Форма.РеквизитыПроверкиРНПТ) Тогда
		СохранитьРезультатПроверкиРНПТ(
			Форма.Объект.Ссылка,
			Форма.РеквизитыПроверкиРНПТ.СостояниеПроверкиРНПТВДокументе,
			Форма.РеквизитыПроверкиРНПТ.ОписаниеОшибкиРНПТВДокументе,,
			НЕ Форма.РеквизитыПроверкиРНПТ.ЕстьПрослеживаемыеТовары)
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатПроверкиРНПТ(ДокументСсылка, СостояниеПроверкиРНПТВДокументе = Неопределено, ОписаниеОшибкиРНПТВДокументе = "", ЭтоШаблон = Ложь, УдалитьЗапись = Ложь ) Экспорт
	
	Если НЕ ИспользованиеПроверкиВозможно() 
		ИЛИ НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация, Контрагент, ПометкаУдаления");
		Если РеквизитыДокумента.ПометкаУдаления Тогда
			УдалитьЗапись = Истина;
		КонецЕсли;
		
		// Устанавливаем блокировку сразу на все документы.
		Блокировка = Новый БлокировкаДанных;
		
		// Объектная блокировка.
		СтруктураКлюча = Новый Структура("Организация, Документ, Контрагент", 
			РеквизитыДокумента.Организация, ДокументСсылка, РеквизитыДокумента.Контрагент);
		Ключ = РегистрыСведений.СтатусыПроверокРНПТДокументов.СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		// Транзакционная блокировка.
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыПроверокРНПТДокументов");
		ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СтатусыПроверокРНПТДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		Если УдалитьЗапись Тогда
			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					НаборЗаписей.Удалить(Запись);
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			Возврат;
		ИначеЕсли НаборЗаписей.Количество() > 1 Тогда
			Для Каждого Запись Из НаборЗаписей Цикл
				НаборЗаписей.Удалить(Запись);
			КонецЦикла;
			Запись = НаборЗаписей.Добавить();
		ИначеЕсли НаборЗаписей.Количество() > 0 Тогда
			Запись = НаборЗаписей[0];
			Если Запись.СтатусПроверки = Перечисления.СтатусыПроверкиРНПТ.Проверено
				И (ЭтоШаблон ИЛИ Запись.СтатусПроверки = СостояниеПроверкиРНПТВДокументе)
				И Запись.Организация = РеквизитыДокумента.Организация
				И Запись.Контрагент  = РеквизитыДокумента.Контрагент Тогда
				// Актуализировать статус не нужно.
				ЗафиксироватьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Запись = НаборЗаписей.Добавить();
		КонецЕсли;
		Запись.Организация    = РеквизитыДокумента.Организация;
		Запись.Документ       = ДокументСсылка;
		Запись.Контрагент     = РеквизитыДокумента.Контрагент;
		Если Не ЭтоШаблон Тогда
			Запись.СтатусПроверки = СостояниеПроверкиРНПТВДокументе;
			Запись.ОписаниеОшибки = ОписаниеОшибкиРНПТВДокументе;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.СтатусПроверки)
			ИЛИ Запись.СтатусПроверки = Перечисления.СтатусыПроверкиРНПТ.Выполняется Тогда
			ОпределитьНеобходимостьРегЗаданияПроверкиРНПТ(Истина);
		КонецЕсли;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись результатов проверки РНПТ в регистр';
										|en = 'Save RNPT check results to the register'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеРНПТВДокументеДляПроверкиФоновымЗаданием(Форма)
	
	Если НЕ Форма.РеквизитыПроверкиРНПТ.ИнициализацияВыполненаПолностью Тогда
		// Принудительная инициализация.
		ИнициализироватьРеквизитыФормыДокумент(Форма);
	КонецЕсли;
	
	ДанныеРНПТ = ДанныеРНПТВДокументе(Форма);
	
	Возврат ДанныеРНПТ;

КонецФункции

Процедура ОтобразитьРезультатПроверкиВСписке(Форма)
	
	КоличествоПредметов = Форма.КоличествоДокументовСОшибками;
	Если КоличествоПредметов > 0 Тогда
		Предмет = "документ,документа,документов,м,,,,0";
		ФорматнаяСтрока  = "Л = ru_RU";
		ПрописьЧисла   = ЧислоПрописью(КоличествоПредметов, ФорматнаяСтрока, Предмет);
		ИндексПредмета = СтрНайти(ПрописьЧисла, "док");
		ТекстПредметы = Строка(КоличествоПредметов) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
		ПоследняяЦифра = Прав(Строка(КоличествоПредметов),1); 
		ТекстОбнаружено = ?(ПоследняяЦифра = "1", НСтр("ru = 'Обнаружен ';
														|en = 'Found'"),  НСтр("ru = 'Обнаружено ';
																					|en = 'Found'")); 
		
		ГиперссылкаОшибки = Новый ФорматированнаяСтрока(ТекстПредметы,,,,"ДокументыСОшибкамиРНПТ");
		ТекстОшибки = НСтр("ru = ' с ошибками РНПТ при проверке сервисом ФНС';
							|en = ' with RNPT errors when checking with the Federal Tax Service'");
		
		СообщениеОбОшибкахРНПТ = Новый Массив;
		
		СообщениеОбОшибкахРНПТ.Добавить(ТекстОбнаружено);
		СообщениеОбОшибкахРНПТ.Добавить(ГиперссылкаОшибки);
		СообщениеОбОшибкахРНПТ.Добавить(ТекстОшибки);
		
		Форма.ТекстОшибкаРНПТ = Новый ФорматированнаяСтрока(СообщениеОбОшибкахРНПТ);
		Смещение = 17;
		Форма.Элементы.ТекстОшибкаРНПТ.Ширина = СтрДлина(Форма.ТекстОшибкаРНПТ) - Смещение;
		
		ТекстПодсказки = Новый Массив;
		ТекстПодсказки.Добавить(НСтр("ru = 'РНПТ в документах не сответствуют данным ФНС. ';
									|en = 'RNPT in the documents does not correspond to the Federal Tax Service data.'"));
		ТекстПодсказки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Настройка проверки';
																|en = 'Check settings'"),,,,"e1cib/app/ОбщаяФорма.ВключениеПроверкиРНПТ"));
		Форма.Элементы.ТекстОшибкаРНПТ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ТекстПодсказки);
	КонецЕсли;
	Форма.Элементы.ГруппаПроверкаРНПТ.Видимость = КоличествоПредметов > 0;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


















