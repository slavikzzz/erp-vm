
#Область ПрограммныйИнтерфейс

// Процедура выполняет запись настроек программы и формирование плана видов расчета по настройкам,
// переданным в параметре Параметры.
//
// Параметры:
//  Параметры - структура, описание см ОписаниеПараметровНастройкиЗарплатаКадры.
//
Процедура ЗаписатьНастройкиЗарплатаКадры(Параметры) Экспорт
	
	Если Параметры.НастройкиШтатногоРасписания <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиШтатногоРасписания.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиШтатногоРасписания);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиКадровогоУчета <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиКадровогоУчета);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиВоинскогоУчета <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиВоинскогоУчета.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиВоинскогоУчета);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиРасчетаЗарплаты <> Неопределено Тогда
		
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплатыРасширенный.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиРасчетаЗарплаты);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если Параметры.НастройкиРасчетаЗарплатыБазовые <> Неопределено Тогда
		
		Настройки = РегистрыСведений.НастройкиРасчетаЗарплаты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиРасчетаЗарплатыБазовые);
		Настройки.Записать();
		
	КонецЕсли;
	
	Если Параметры.НастройкиУчетаВремени <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиУчетаВремени.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиУчетаВремени);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиЗаймовСотрудникам <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиЗаймовСотрудникам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиЗаймовСотрудникам);
		Настройки.Записать();
	КонецЕсли;
	
	Если Параметры.НастройкиСтатистикиПерсонала <> Неопределено Тогда
		Настройки = РегистрыСведений.НастройкиСтатистикиПерсонала.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Настройки, Параметры.НастройкиСтатистикиПерсонала);
		Настройки.Записать();
	КонецЕсли;
	
	РасчетЗарплатыРасширенный.СформироватьПланВидовРасчетаПоНастройкам(Параметры.ПараметрыПланВидовРасчета);
	
КонецПроцедуры

// Функция возвращает структуру с описанием параметров для настройки подсистемы ЗарплатаКадры.
//
// Возвращаемое значение:
//   Структура со свойствами, имеющими значение Неопределено:
// 	* НастройкиРасчетаЗарплаты
// 	* НастройкиКадровогоУчета
// 	* НастройкиШтатногоРасписания.
// 	* НастройкиВоинскогоУчета.
// 	* НастройкиУчетаВремени
// 	* НастройкиЗаймовСотрудникам.
// 	* НастройкиСтатистикиПерсонала.
// 	* ПараметрыПланВидовРасчета.
//
Функция ОписаниеПараметровНастройкиЗарплатаКадры() Экспорт

	Параметры = Новый Структура("
	|НастройкиРасчетаЗарплаты,
	|НастройкиРасчетаЗарплатыБазовые,
	|НастройкиКадровогоУчета,
	|НастройкиШтатногоРасписания,
	|НастройкиВоинскогоУчета,
	|НастройкиУчетаВремени,
	|НастройкиЗаймовСотрудникам,
	|НастройкиСтатистикиПерсонала,
	|ПараметрыПланВидовРасчета");
		
	Возврат Параметры;
	
КонецФункции

// Функция возвращает структуру с параметрами настройки подсистемы ЗарплатаКадры,
// которые можно использовать по умолчанию для максимального использования функционала подсистемы.
//
// Возвращаемое значение:
//   Структура см описание ОписаниеПараметровНастройкиЗарплатаКадры, со свойствами:
// 	* НастройкиРасчетаЗарплаты - структура, состав свойств соответствует ресурсам регистра сведений
//	                             НастройкиРасчетаЗарплатыРасширенный, может содержать не все ресурсы регистра.
// 	* НастройкиКадровогоУчета  - структура, состав свойств соответствует ресурсам регистра сведений
//	                             НастройкиКадровогоУчета, может содержать не все ресурсы регистра.
// 	* НастройкиШтатногоРасписания - структура, состав свойств соответствует ресурсам регистра сведений
//	                                НастройкиШтатногоРасписания, может содержать не все ресурсы регистра.
// 	* НастройкиВоинскогоУчета - структура, состав свойств соответствует ресурсам регистра сведений
//	                            НастройкиВоинскогоУчета, может содержать не все ресурсы регистра.
// 	* НастройкиУчетаВремени - структура, состав свойств соответствует ресурсам регистра сведений НастройкиУчетаВремени,
//								 может содержать не все ресурсы регистра.
// 	* НастройкиЗаймовСотрудникам - структура, состав свойств соответствует ресурсам регистра сведений
//	                               НастройкиЗаймовСотрудникам, может содержать не все ресурсы регистра.
// 	* НастройкиСтатистикиПерсонала - структура, состав свойств соответствует ресурсам регистра сведений
//	                                 НастройкиСтатистикиПерсонала, может содержать не все ресурсы регистра.
// 	* ПараметрыПланВидовРасчет - структура, состав свойств см в описании
//	                             РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета.
//
Функция ПараметрыНастройкиЗарплатаКадрыПоУмолчанию() Экспорт

	Параметры = ОписаниеПараметровНастройкиЗарплатаКадры();
	
	НастройкиСтатистикиПерсонала = Новый Структура;
	НастройкиСтатистикиПерсонала.Вставить("НастройкиСтатистикиПерсонала", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПЗдрав", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПКультура", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПНаука", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПОбразование", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПСоц", Ложь);
	НастройкиСтатистикиПерсонала.Вставить("ФормаЗПФизическаяКультураИСпорт", Ложь);
	
	НастройкиЗаймовСотрудникам = Новый Структура;
	НастройкиЗаймовСотрудникам.Вставить("ИспользоватьЗаймыСотрудникам", Истина);
	
	НастройкиУчетаВремени = Новый Структура;
	НастройкиУчетаВремени.Вставить("УчитыватьНочныеЧасы", Истина);
	НастройкиУчетаВремени.Вставить("УчитыватьВечерниеЧасы", Истина);
	НастройкиУчетаВремени.Вставить("ИспользоватьНесколькоВидовПлановогоВремени", Ложь);
	НастройкиУчетаВремени.Вставить("УчитыватьВремяНаКормлениеРебенка", Истина);
	
	НастройкиВоинскогоУчета = Новый Структура;
	НастройкиВоинскогоУчета.Вставить("ИспользоватьВоинскийУчет", Ложь);
	НастройкиВоинскогоУчета.Вставить("ИспользоватьБронированиеГраждан", Ложь);
	НастройкиВоинскогоУчета.Вставить("ИспользуетсяТрудЛетноПодъемногоСостава", Ложь);
	НастройкиВоинскогоУчета.Вставить("ИспользуетсяТрудПлавсостава", Ложь);
	
	НастройкиШтатногоРасписания = Новый Структура;
	НастройкиШтатногоРасписания.Вставить("ИспользоватьШтатноеРасписание", Истина); 
	НастройкиШтатногоРасписания.Вставить("ИспользоватьВилкуСтавокВШтатномРасписании", Ложь);
	НастройкиШтатногоРасписания.Вставить("ИспользоватьИсториюИзмененияШтатногоРасписания", Ложь);
	НастройкиШтатногоРасписания.Вставить("ИспользоватьРазрядыКатегорииКлассыДолжностейИПрофессийВШтатномРасписании", Ложь);
	НастройкиШтатногоРасписания.Вставить("ПроверятьНаСоответствиеШтатномуРасписаниюАвтоматически", Ложь);
	
	НастройкиКадровогоУчета = Новый Структура;
	НастройкиКадровогоУчета.Вставить("ИспользоватьРаботуНаНеполнуюСтавку", Истина);
	НастройкиКадровогоУчета.Вставить("ИспользоватьПереносОстатковОтпускаПриУвольненииПереводом", Истина);
	НастройкиКадровогоУчета.Вставить("КонтролироватьУникальностьТабельныхНомеров", Истина);
	НастройкиКадровогоУчета.Вставить("ВПоляхВводаСотрудниковУчитыватьИзмененияФамилии", Истина);
	НастройкиКадровогоУчета.Вставить("ИспользуетсяРаботаСКоронавирусом", Ложь);
	НастройкиКадровогоУчета.Вставить("ПолучательСтимулирующихВыплатФСС", Перечисления.ПолучательСтимулирующихВыплатФСС.ПустаяСсылка());
	НастройкиКадровогоУчета.Вставить("СоциальныеВыплатыОтдельнымКатегориямМедРаботников", Ложь);
	НастройкиКадровогоУчета.Вставить("ПриемНаРаботуБезПриказаОПриеме", Ложь);
	
	НастройкиРасчетаЗарплаты = Новый Структура;
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьВыплатыБывшимСотрудникам", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьДоходыВНатуральнойФорме", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьДоплатуЗаДниБолезни", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьИндексациюЗаработка", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьИсполнительныеЛисты", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьМатериальнуюПомощь", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуКомандировок", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуПраздничныхИВыходных", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуПростоев", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуСверхурочных", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаБезОплаты", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаДляПострадавшихВАварииЧАЭС", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОтпускаУчебные", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьРегистрациюПрочихДоходов", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьСдельныйЗаработок", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьСовмещениеПрофессийДолжностей", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьПрочиеУдержанияВПользуТретьихЛиц", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУдержанияВСчетРасчетовПоПрочимОперациям", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУчетВремениСотрудниковВЧасах", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьУчетПрочихНевыходов", Истина);
	НастройкиРасчетаЗарплаты.Вставить("ПорядокРасчетаСтоимостиЕдиницыВремени", Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению);
	НастройкиРасчетаЗарплаты.Вставить("ИспользоватьОплатуДнейСдачиКрови", Истина);
	
	НастройкиРасчетаЗарплатыБазовые = Новый Структура;
	НастройкиРасчетаЗарплатыБазовые.Вставить("ИспользоватьНачисленияПоДоговорам", Истина);
	
	// Описание начислений
	ПараметрыПланаВидовРасчета = РасчетЗарплатыРасширенный.ОписаниеПараметровПланаВидовРасчета();
	
	Параметры.НастройкиСтатистикиПерсонала = НастройкиСтатистикиПерсонала;
	Параметры.НастройкиЗаймовСотрудникам   = НастройкиЗаймовСотрудникам;
	Параметры.НастройкиУчетаВремени   	   = НастройкиУчетаВремени;
	Параметры.НастройкиВоинскогоУчета      = НастройкиВоинскогоУчета;
	Параметры.НастройкиШтатногоРасписания  = НастройкиШтатногоРасписания;
	Параметры.НастройкиКадровогоУчета      = НастройкиКадровогоУчета;
	Параметры.ПараметрыПланВидовРасчета    = ПараметрыПланаВидовРасчета;
	Параметры.НастройкиРасчетаЗарплаты     = НастройкиРасчетаЗарплаты;
	Параметры.НастройкиРасчетаЗарплатыБазовые = НастройкиРасчетаЗарплатыБазовые;
	
	Возврат Параметры;
	
КонецФункции

// Выполняет формирование сводных (помесячно) сведений о производственном календаре.
//
// Параметры:
//	- УсловияОбновления - таблица значений с колонками.
//		- КодПроизводственногоКалендаря - код производственного календаря, данные которого изменились,
//		- Год - год, за который изменились данные.
//
Процедура ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления) Экспорт
	УчетРабочегоВремениРасширенный.ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления);
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность.Состав

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	ЗарплатаКадрыБазовый.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	
	Обработчики.Вставить("ПравилоФормированияПредставленияЭлементовСправочникаСотрудники", "ЗарплатаКадрыРасширенный.УстановитьПараметрыСеанса");
	Обработчики.Вставить("АльтернативныйПодборСпискаСотрудников", "ЗарплатаКадрыРасширенный.УстановитьПараметрыСеанса");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой.
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
// 
// Параметры:
//  ИмяПараметра           - Строка - имя параметра сеанса, который требуется установить.
//  УстановленныеПараметры - Массив из Строка - имена параметров, которые уже установлены.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПравилоФормированияПредставленияЭлементовСправочникаСотрудники" Тогда
		
		КадровыйУчетРасширенный.УстановитьПараметрСеансаПравилоФормированияПредставленияЭлементовСправочникаСотрудники();
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПравилоФормированияПредставленияЭлементовСправочникаСотрудники");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "АльтернативныйПодборСпискаСотрудников" Тогда
		
		Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая(СтрокаСоединенияИнформационнойБазы()) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	1 КАК Номер
				|ПОМЕСТИТЬ ВТТестируемаяТаблица
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТестируемаяТаблица.Номер КАК Номер
				|ИЗ
				|	ВТТестируемаяТаблица КАК ТестируемаяТаблица
				|ГДЕ
				|	ТестируемаяТаблица.Номер В
				|			(ВЫБРАТЬ ПЕРВЫЕ 1
				|				ТестируемаяТаблицаОтбор.Номер
				|			ИЗ
				|				ВТТестируемаяТаблица КАК ТестируемаяТаблицаОтбор
				|			ГДЕ
				|				ТестируемаяТаблицаОтбор.Номер = ТестируемаяТаблица.Номер
				|			УПОРЯДОЧИТЬ ПО
				|				ТестируемаяТаблицаОтбор.Номер)";
				
			Попытка
				
				Запрос.Выполнить();
				АльтернативныйПодбор = Ложь;
				
			Исключение
				АльтернативныйПодбор = Истина;
			КонецПопытки;
			
		Иначе
			АльтернативныйПодбор = Ложь;
		КонецЕсли;
		
		ПараметрыСеанса.АльтернативныйПодборСпискаСотрудников = АльтернативныйПодбор;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("АльтернативныйПодборСпискаСотрудников");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность.Состав

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

// См. БизнесПроцессыИЗадачиПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаБизнесПроцессовИЗадач(Объект, Таблица) Экспорт
	
	// Логика ограничения для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Если предмет не задан (т.е. бизнес-процесс без основания),
	// тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор № 1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Объект.Автор;
	
	// Чтение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадач;
	
	// Чтение: набор № 3.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 3;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = Объект.ГруппаИсполнителейЗадачПроверяющий;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи

// СтандартныеПодсистемы.Взаимодействия

// См. ВзаимодействияПереопределяемый.ПриЗаполненииНаборовЗначенийДоступа.
Процедура ПриЗаполненииНаборовЗначенийДоступаВзаимодействий(Объект, Таблица) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриЗаполненииНаборовЗначенийДоступаВзаимодействий(Объект, Таблица);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Взаимодействия

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами
Процедура ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты) Экспорт
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами(Объекты);
	Объекты.Вставить(Метаданные.Справочники.ШтатноеРасписание.ПолноеИмя(), "");
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов.
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ЗаполнитьПоставляемыеПрофилиГруппДоступа.
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ЕстьИнтерфейс = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	
	ОписаниеПрофиля = ОписаниеПрофиляАудитор(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
		
	ОписаниеПрофиля = ОписаниеПрофиляКадровикБезДоступаКЗарплате(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляКадровик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляСтаршийКадровик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляРасчетчик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляСтаршийРасчетчик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляТабельщик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляКадровикРасчетчик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = ОписаниеПрофиляСтаршийКадровикРасчетчик(ЕстьИнтерфейс);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнструментыРуководителя") Тогда
		МодульИнструментыРуководителя = ОбщегоНазначения.ОбщийМодуль("ИнструментыРуководителя");
		МодульИнструментыРуководителя.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала") Тогда
		МодульМотивацияПерсонала = ОбщегоНазначения.ОбщийМодуль("МотивацияПерсонала");
		МодульМотивацияПерсонала.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыМотивацияПерсонала(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОбучениеРазвитие(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
		МодульОтсутствияСотрудников.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыОхранаТруда(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ЗаполнитьПоставляемыеПрофилиГруппДоступаПодсистемыСамообслуживание(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов") Тогда
		МодульЭлектронноеТестированиеКандидатов = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеТестированиеКандидатов");
		МодульЭлектронноеТестированиеКандидатов.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// ТехнологияСервиса.БазоваяФункциональность

// См. РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	Справочники.ЯзыкиНародовМира.ЗаполнитьСправочникПоКлассификатору(Истина);
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию.
Процедура УстановитьПраваПоУмолчанию(Пользователь) Экспорт
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Пользователь);
	
	ПрофильПоУмолчанию = Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(ИдентификаторПрофиляСтаршийКадровикРасчетчик());
	Если ПрофильПоУмолчанию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеПрофилиГруппДоступа = Метаданные.Справочники.ПрофилиГруппДоступа;
	
	Профили = Новый ТаблицаЗначений();
	Профили.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Профили.Колонки.Добавить("Профиль", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	
	Профиль = Профили.Добавить();
	Профиль.Пометка = Истина;
	Профиль.Профиль = ПрофильПоУмолчанию;
	
	ВидыДоступа = Новый ТаблицаЗначений();
	ВидыДоступа.Колонки.Добавить("ГруппаДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	ВидыДоступа.Колонки.Добавить("ВидДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ВидыДоступа.Реквизиты.ВидДоступа.Тип);
	ВидыДоступа.Колонки.Добавить("ВсеРазрешены", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ВидыДоступа.Реквизиты.ВсеРазрешены.Тип);
	
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.ГруппаДоступа = ПрофильПоУмолчанию;
	ВидДоступа.ВидДоступа = Справочники.Организации.ПустаяСсылка();
	ВидДоступа.ВсеРазрешены = Истина;
	
	ЗначенияДоступа = Новый ТаблицаЗначений();
	ЗначенияДоступа.Колонки.Добавить("ГруппаДоступа", Новый ОписаниеТипов("СправочникСсылка.ПрофилиГруппДоступа"));
	ЗначенияДоступа.Колонки.Добавить("ВидДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ЗначенияДоступа.Реквизиты.ВидДоступа.Тип);
	ЗначенияДоступа.Колонки.Добавить("ЗначениеДоступа", МетаданныеПрофилиГруппДоступа.ТабличныеЧасти.ЗначенияДоступа.Реквизиты.ЗначениеДоступа.Тип);
	
	ПрофильАдминистратор = УправлениеДоступом.ПрофильАдминистратор();
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ПрофильАдминистратор", ПрофильАдминистратор);
	
	Запрос.УстановитьПараметр(
		"Профили", Профили);
	
	Запрос.УстановитьПараметр(
		"ВидыДоступа", ВидыДоступа);
	
	Запрос.УстановитьПараметр(
		"ЗначенияДоступа", ЗначенияДоступа);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.ГруппаДоступа КАК Профиль,
	|	ВидыДоступа.ВидДоступа,
	|	ВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ВидыДоступа
	|ИЗ
	|	&ВидыДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ГруппаДоступа КАК Профиль,
	|	ЗначенияДоступа.ВидДоступа,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияДоступа
	|ИЗ
	|	&ЗначенияДоступа КАК ЗначенияДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка = &ПрофильАдминистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ТекущиеВидыДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыДоступа.Профиль
	|	ИЗ
	|		ВидыДоступа КАК ВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ПО ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль
	|				И ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа
	|				И ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены
	|	ГДЕ
	|		ТекущиеВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеВидыДоступа.Профиль
	|	ИЗ
	|		ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыДоступа КАК ВидыДоступа
	|			ПО (ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль)
	|				И (ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа)
	|				И (ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены)
	|	ГДЕ
	|		ВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияДоступа.Профиль
	|	ИЗ
	|		ЗначенияДоступа КАК ЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ПО ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль
	|				И ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа
	|				И ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа
	|	ГДЕ
	|		ТекущиеЗначенияДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗначенияДоступа.Профиль
	|	ИЗ
	|		ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДоступа КАК ЗначенияДоступа
	|			ПО (ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль)
	|				И (ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа)
	|				И (ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа)
	|	ГДЕ
	|		ЗначенияДоступа.ВидДоступа ЕСТЬ NULL ) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
			ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
		Иначе
			// Создание персональной группы доступа.
			ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
			ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
			ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
			ГруппаДоступаОбъект.Пользователь = Пользователь;
			ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
		КонецЕсли;
		
		Если Выборка.Профиль = ПрофильАдминистратор Тогда
			
			Если Выборка.Пометка Тогда
				Если ГруппаДоступаОбъект.Пользователи.Найти(
						Пользователь, "Пользователь") = Неопределено Тогда
					
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
				КонецЕсли;
			Иначе
				ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
					Пользователь, "Пользователь");
				
				Если ОписаниеПользователя <> Неопределено Тогда
					ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
					
					Если Не ОбщегоНазначения.РазделениеВключено() Тогда
						// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
						ОписаниеОшибки = "";
						УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
							ГруппаДоступаОбъект.Пользователи, ОписаниеОшибки);
						
						Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
							ВызватьИсключение
								НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
								           |которому разрешен вход в программу.';
								           |en = 'At least one user that can sign in to the application
								           |must have the Administrator profile.'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ГруппаДоступаОбъект.Пользователи.Очистить();
			Если Выборка.Пометка Тогда
				ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Пользователь;
			КонецЕсли;
			
			Отбор = Новый Структура("ГруппаДоступа", Выборка.Профиль);
			СтрокиВидыДоступа = ВидыДоступа.НайтиСтроки(Отбор);
			СтрокиЗначенияДоступа = ЗначенияДоступа.НайтиСтроки(Отбор);
			
			ГруппаДоступаОбъект.ВидыДоступа.Загрузить(
				ВидыДоступа.Скопировать(СтрокиВидыДоступа, "ВидДоступа, ВсеРазрешены"));
			
			ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(
				ЗначенияДоступа.Скопировать(СтрокиЗначенияДоступа, "ВидДоступа, ЗначениеДоступа"));
		КонецЕсли;
		
		Попытка
			ГруппаДоступаОбъект.Записать();
		Исключение
			ПарольПользователяСервиса = Неопределено;
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
			РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Конец ТехнологияСервиса.БазоваяФункциональность

// ТехнологияСервиса.ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных().
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	#Область ФедеральныйРегистрМедицинскихРаботников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ВидДанных = "КлассификаторыМедРегистра";
		Обработчик.КодОбработчика = "КлассификаторыМедРегистра";
		Обработчик.Обработчик = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.КлассификаторыМедРегистра");
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Конец ТехнологияСервиса.Подсистема.ПоставляемыеДанные

// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение.ЭлектронныеКурсы

// См. ИзучениеЭлектронныхКурсовПереопределяемый.ПослеИзученияЭлектронногоКурса.
Процедура ПослеИзученияЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, Данные) Экспорт	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		Модуль.ПослеИзученияЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, Данные);
	КонецЕсли;
	
КонецПроцедуры

// См. ИзучениеЭлектронныхКурсовПереопределяемый.ПриЗакрытииФормыЭлектронногоКурса.
Процедура ПриЗакрытииФормыЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, Данные) Экспорт	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		Модуль.ПриЗакрытииФормыЭлектронногоКурса(ЭлектронныйКурс, Контекст, Учащийся, Данные);
	КонецЕсли;
	
КонецПроцедуры

// См. ИзучениеЭлектронныхКурсовПереопределяемый.ПриСозданииФормыЭлектронногоКурса.
Процедура ПриСозданииФормыЭлектронногоКурса(ПараметрыФормы, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		МодульЭлектронноеОбучениеЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		МодульЭлектронноеОбучениеЗарплатаКадрыРасширенный.ПриСозданииФормыЭлектронногоКурса(ПараметрыФормы, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов") Тогда
		МодульЭлектронноТестированиеКандидатов = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеТестированиеКандидатов");
		МодульЭлектронноТестированиеКандидатов.ПриСозданииФормыЭлектронногоКурса(ПараметрыФормы, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// См. ИзучениеЭлектронныхКурсовПереопределяемый.ПриОпределенииСоответствияВерсийОбработчиковОбновлений.
Процедура ПриОпределенииСоответствияВерсийОбработчиковОбновлений(СоответствиеВерсий) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		МодульЭлектронноеОбучениеЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		МодульЭлектронноеОбучениеЗарплатаКадрыРасширенный.ПриОпределенииСоответствияВерсийОбработчиковОбновлений(СоответствиеВерсий);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение.ЭлектронныеКурсы

// ЗарплатаКадрыКорпоративнаяПодсистемы.Подсистема.Уведомления

// См. УведомленияПереопределяемый.ПриЗаполненииСпискаВидовУведомлений
Процедура ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления") Тогда
		МодульКонтрольСамочувствияУведомления = ОбщегоНазначения.ОбщийМодуль("КонтрольСамочувствияУведомления");
		МодульКонтрольСамочувствияУведомления.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.Уведомления") Тогда
		МодульПодборПерсоналаУведомления = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаУведомления");
		МодульПодборПерсоналаУведомления.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриЗаполненииСпискаВидовУведомлений(СтруктураДоступныхВидовУведомлений);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПриОпределенииИмениТипаШаблонаСообщений
Процедура ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления)
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления)
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриОпределенииИмениТипаШаблонаСообщений(ИмяТипаШаблонаСообщений, ВидУведомления);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПриПодготовкеШаблонаСообщенияПоУведомлению
Процедура ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления") Тогда
		МодульКонтрольСамочувствияУведомления = ОбщегоНазначения.ОбщийМодуль("КонтрольСамочувствияУведомления");
		МодульКонтрольСамочувствияУведомления.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.Уведомления") Тогда
		МодульПодборПерсоналаУведомления = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаУведомления");
		МодульПодборПерсоналаУведомления.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриПодготовкеШаблонаСообщенияПоУведомлению(ВидУведомления, Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПриОпределенииПредметаШаблонаСообщения
Процедура ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнкетированиеУведомления") Тогда
		МодульАнкетированиеУведомления = ОбщегоНазначения.ОбщийМодуль("АнкетированиеУведомления");
		МодульАнкетированиеУведомления.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульКадровыйУчетОтпуска = ОбщегоНазначения.ОбщийМодуль("ОтпускаУведомления");
		МодульКадровыйУчетОтпуска.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриОпределенииПредметаШаблонаСообщения(СтрокаСообщения, Предмет);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПередЗаписьюПредметаУведомленияОбИзменениях
Процедура ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПередЗаписьюПредметаУведомленияОбИзменениях(Объект, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПриЗаписиПредметаУведомленияОбИзменениях
Процедура ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре = Ложь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриЗаписиПредметаУведомленияОбИзменениях(Объект, ЕстьРассылки, ДополнительныеСвойства, СтандартнаяОбработка, ВыполнятьПерезаписьПриНаличииВРегистре);
	КонецЕсли;
	
КонецПроцедуры

// См. УведомленияПереопределяемый.ПриСозданииУведомленийПоИзменениямОбъектов
Процедура ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Уведомления") Тогда
		МодульКадровыйУчетУведомления = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетУведомления");
		МодульКадровыйУчетУведомления.ПриСозданииУведомленийПоИзменениямОбъектов(РассылкаУведомлений, ВидУведомления, Предмет, ДатаИзменения, ДополнительныеСвойства, ТаблицаРезультата);
	КонецЕсли;
	
КонецПроцедуры

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Подсистема.Уведомления

// РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент
Функция ВыгрузитьДокумент(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам") Тогда
		
		Возврат Документы.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам.ВыгрузитьДокумент(Ссылка);
		
	КонецЕсли;
	
	Возврат ЗарплатаКадрыБазовый.ВыгрузитьДокумент(Ссылка, УникальныйИдентификатор);
	
КонецФункции

// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.Подсистема.Уведомления

// СтандартныеПодсистемы.Печать

// См. УправлениеПечатьюПереопределяемый.ПриПолученииКомандПечати.
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта) Экспорт
	
	ЗарплатаКадрыБазовый.ПриПолученииКомандПечати(КомандыПечати, ИмяОбъекта);
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовПечатнойФормы.
Процедура ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовПечатнойФормы(ОбъектыПечатнойФормы, ИдентификаторПечатнойФормы, ИмяМенеджераПечати, ПараметрыПечати);
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПечати.
Процедура ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗарплатаКадрыБазовый.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриПечати(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	КонецЕсли;		
	// Конец ПроцессыОбработкиДокументов

КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ПриОпределенииОбъектовСКомандамиУчетаОригиналов.
Процедура ПриОпределенииОбъектовСКомандамиУчетаОригиналов(СписокОбъектов) Экспорт
	
	КадровыйУчетРасширенный.ПриОпределенииОбъектовСКомандамиУчетаОригиналов(СписокОбъектов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ПриОпределенииОбъектовСКомандамиУчетаОригиналов(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ПриОпределенииМногосотрудниковыхДокументов.
Процедура ПриОпределенииМногосотрудниковыхДокументов(СписокОбъектов) Экспорт
	
	КадровыйУчетРасширенный.ПриОпределенииМногосотрудниковыхДокументов(СписокОбъектов);
	
КонецПроцедуры

// См. УчетОригиналовПервичныхДокументовПереопределяемый.ЗаполнитьТаблицуУчетаОригиналов.
Процедура ЗаполнитьТаблицуУчетаОригиналов(ТаблицаУчетаОригиналов) Экспорт
	
	КадровыйУчетРасширенный.ЗаполнитьТаблицуУчетаОригиналов(ТаблицаУчетаОригиналов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗаполнитьТаблицуУчетаОригиналов(ТаблицаУчетаОригиналов);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОбработкеОбластиДанных.
Процедура ПриОбработкеОбластиДанных(Идентификатор, Версия, ДополнительныеПараметры) Экспорт
	Если Идентификатор = "MinMonthlyWage" Тогда
		ОбновитьЗависимыеДанныеМинимальнойОплатыТрудаРФ();
	КонецЕсли;
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
Процедура ПриДобавленииНеразделенныхПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЗарплатаКадрыБазовый.ПриДобавленииНеразделенныхПараметровРаботыКлиентаПриЗапуске(Параметры);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске 
Процедура ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт 
	
	ЗарплатаКадрыБазовый.ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры);
	
	КадровыйУчетРасширенный.ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПриДобавленииРазделенныхПараметровРаботыКлиентаПриЗапуске(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

// СтандартныеПодсистемы.ИнформацияПриЗапуске

// См. ИнформацияПриЗапускеПереопределяемый.ОпределитьНастройки.
Процедура ОпределитьНастройки(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ОпределитьНастройки(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ИнформацияПриЗапуске

// ИнтеграцияС1СДокументооборот

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ДополнитьСоответствиеТипов.
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	ЗарплатаКадрыБазовый.ДополнитьСоответствиеТипов(Таблица);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная") Тогда
		МодульБанковскиеСчетаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("Справочники.БанковскиеСчетаКонтрагентов");
		МодульБанковскиеСчетаКонтрагентов.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		МодульКонтрагенты = ОбщегоНазначения.ОбщийМодуль("Справочники.Контрагенты");
		МодульКонтрагенты.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульСтруктураПредприятия = ОбщегоНазначения.ОбщийМодуль("Справочники.СтруктураПредприятия");
		МодульСтруктураПредприятия.ДополнитьСоответствиеТипов(Таблица);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя.
Процедура ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если СсылкаНаПотребитель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарплатаКадрыБазовый.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная") Тогда
		МодульБанковскиеСчетаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("Справочники.БанковскиеСчетаКонтрагентов");
		МодульБанковскиеСчетаКонтрагентов.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		МодульКонтрагенты = ОбщегоНазначения.ОбщийМодуль("Справочники.Контрагенты");
		МодульКонтрагенты.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульСтруктураПредприятия = ОбщегоНазначения.ОбщийМодуль("Справочники.СтруктураПредприятия");
		МодульСтруктураПредприятия.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриЗаполненииСвойстваОбъектаXDTOПоЗначению.
Процедура ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение, Свойства, ТипОбъекта, ИмяСвойства, ТипСвойства, СтандартнаяОбработка) Экспорт
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера = ОбщегоНазначения.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера");
	
	Настройки = МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Не Настройки.ИспользоватьИнтеграциюДО2
			Или Не (ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование") Тогда
		Возврат;
	КонецЕсли;
	
	Перечисления.СостоянияСогласования.ПриЗаполненииСтатусаСогласованияПоЗначению(Значение, Свойства, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриЗаполненииСтатусаСогласованияПоЗначению(Значение, Свойства, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриИзмененииСостоянияСогласования.
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта) Экспорт
	
	Если ВызовИзФормыОбъекта Тогда
		Возврат;
	КонецЕсли;
	
	ТипыОбъектов = Новый Массив();
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.КадровыйПереводСписком"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.Увольнение"));
	ТипыОбъектов.Добавить(Тип("ДокументСсылка.УвольнениеСписком"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ПриОпределенииТиповСВозможностьюСогласованияВДО(ТипыОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриОпределенииТиповСВозможностьюСогласованияВДО(ТипыОбъектов);
	КонецЕсли;
	
	Если ТипыОбъектов.Найти(ТипЗнч(ПредметСогласования)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правила = Новый Массив;
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера = ОбщегоНазначения.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера");
	Настройки = МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяТаблицы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовИС";
		МодульИнтеграцияС1СДокументооборотВызовСервера = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборотВызовСервера");
		ПодходящиеПравила = МодульИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(ПредметСогласования);
		Для Каждого Строка Из ПодходящиеПравила Цикл
			Правила.Добавить(Строка.Ссылка);
		КонецЦикла;
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяТаблицы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС";
		МодульИнтеграцияС1СДокументооборот3ВызовСервера = ОбщегоНазначения.ОбщийМодуль(
			"ИнтеграцияС1СДокументооборот3ВызовСервера");
		Правила = МодульИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграцииОбъекта(
			ПредметСогласования,
			Истина);
	КонецЕсли;
	
	Если Правила.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаЗаполненияРеквизитовИС.ИмяРеквизитаОбъектаИС КАК ИмяРеквизитаОбъектаИС,
		|	ПравилаЗаполненияРеквизитовИС.РежимИзмененияДанныхПроведенногоДокумента КАК РежимИзмененияДанныхПроведенногоДокумента
		|ИЗ
		|	&ИмяТаблицы КАК ПравилаЗаполненияРеквизитовИС
		|ГДЕ
		|	ПравилаЗаполненияРеквизитовИС.Ссылка В(&Правила)
		|	И ПравилаЗаполненияРеквизитовИС.ИмяРеквизитаОбъектаДО = ""statusApproval""
		|	И ПравилаЗаполненияРеквизитовИС.Обновлять = ИСТИНА");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("Правила", Правила);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектИС = ПредметСогласования.ПолучитьОбъект();
	ОбъектИС.Заблокировать();
	
	ЕстьИзменения = Ложь;
	ТребуетсяПерепроведение = Ложь;
	ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(ОбъектИС.Метаданные());
	
	ИмяПеречисленияДО = "РежимИзмененияПроведенногоДокументаДанными1СДокументооборота";
	Запрещено = Перечисления[ИмяПеречисленияДО]["Запрещено"];
	РазрешеноСПерепроведением = Перечисления[ИмяПеречисленияДО]["РазрешеноСПерепроведением"];
	
	МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый = ОбщегоНазначения.ОбщийМодуль(
		"ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый");
	
	Для Каждого РеквизитОбъектаИС Из Результат.Выгрузить() Цикл
		
		Если ЭтоДокумент И ОбъектИС.Проведен
				И РеквизитОбъектаИС.РежимИзмененияДанныхПроведенногоДокумента = Запрещено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееЗначение = ОбъектИС[РеквизитОбъектаИС.ИмяРеквизитаОбъектаИС];
		ТипРеквизита = ТипЗнч(ТекущееЗначение);
		НовоеЗначение = ИнтеграцияС1СДокументооборотБЗК.СостояниеСогласованияБЗК(ТипРеквизита, Состояние);
		Если ЗначениеЗаполнено(НовоеЗначение) И ТекущееЗначение <> НовоеЗначение Тогда
			ОбъектИС[РеквизитОбъектаИС.ИмяРеквизитаОбъектаИС] = НовоеЗначение;
			ЕстьИзменения = Истина;
			Если РеквизитОбъектаИС.РежимИзмененияДанныхПроведенногоДокумента = РазрешеноСПерепроведением Тогда
				ТребуетсяПерепроведение = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		Если ТребуетсяПерепроведение Тогда
			
			Отказ = Ложь;
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			РежимПроведения = РежимПроведенияДокумента.Неоперативный;
			МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПередЗаписьюОбъектаИС(
				ОбъектИС,
				Отказ,
				РежимЗаписи,
				РежимПроведения);
			Если Не Отказ Тогда
				ОбъектИС.Записать(РежимЗаписи, РежимПроведения);
			КонецЕсли;
			
		Иначе
			
			ОбъектИС.ОбменДанными.Загрузка = Истина;
			
			Отказ = Ложь;
			МодульИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПередЗаписьюОбъектаИС(
				ОбъектИС,
				Отказ);
			Если Не Отказ Тогда
				ОбъектИС.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектИС.Разблокировать();
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO.
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ЗначениеЗаполнения, ТипРеквизита, ИмяРеквизита,
		ТипОбъекта, Объект, ЭтоДополнительноеСвойство, Свойство, ПараметрыВыбора) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
		Результат,
		ЗначениеЗаполнения,
		ТипРеквизита,
		ИмяРеквизита,
		ТипОбъекта,
		Объект,
		ЭтоДополнительноеСвойство,
		Свойство,
		ПараметрыВыбора);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		МодульКонтрагенты = ОбщегоНазначения.ОбщийМодуль("Справочники.Контрагенты");
		МодульКонтрагенты.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
			Результат,
			ЗначениеЗаполнения,
			ТипРеквизита,
			ИмяРеквизита,
			ТипОбъекта,
			Объект,
			ЭтоДополнительноеСвойство,
			Свойство,
			ПараметрыВыбора);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная") Тогда
		МодульБанковскиеСчетаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("Справочники.БанковскиеСчетаКонтрагентов");
		МодульБанковскиеСчетаКонтрагентов.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
			Результат,
			ЗначениеЗаполнения,
			ТипРеквизита,
			ИмяРеквизита,
			ТипОбъекта,
			Объект,
			ЭтоДополнительноеСвойство,
			Свойство,
			ПараметрыВыбора);
	КонецЕсли;
	
	СостояниеСогласованияДО = ИнтеграцияС1СДокументооборотБЗК.СостояниеСогласованияДО(ЗначениеЗаполнения);
	Если ЗначениеЗаполнено(СостояниеСогласованияДО) Тогда
		СостояниеСогласованияБЗК = ИнтеграцияС1СДокументооборотБЗК.СостояниеСогласованияБЗК(
			ТипРеквизита,
			СостояниеСогласованияДО);
		
		Если ЗначениеЗаполнено(СостояниеСогласованияБЗК) Тогда
			Результат = СостояниеСогласованияБЗК;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО.
Процедура ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(Форма, Результат,
		СтандартнаяОбработка) Экспорт
	
	Если Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлыБЗК") <> Неопределено Тогда
		Результат = Ложь;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента.
Процедура ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(ПолноеИмя, ОбновляемыеРеквизиты) Экспорт
	
	ОбновляемыеРеквизиты.Добавить("Комментарий");
	ОбновляемыеРеквизиты.Добавить("Статус");
	ОбновляемыеРеквизиты.Добавить("Согласован");
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииСокращенногоНаименованияКонфигурации.
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадры") Тогда
		МодульКонфигурацииЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадры");
		КраткоеНазваниеПрограммы = МодульКонфигурацииЗарплатаКадры.КраткоеНазваниеПрограммы();
		МассивСтрок = СтрРазделить(Метаданные.Версия, ".");
		СокращенноеНаименование = СтрШаблон("%1 %2.%3", КраткоеНазваниеПрограммы, МассивСтрок[0], МассивСтрок[1]);
	КонецЕсли;
	
КонецПроцедуры

// См. ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке.
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС) Экспорт
	
	ЗарплатаКадрыБазовый.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		МодульКонтрагенты = ОбщегоНазначения.ОбщийМодуль("Справочники.Контрагенты");
		МодульКонтрагенты.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная") Тогда
		МодульБанковскиеСчетаКонтрагентов = ОбщегоНазначения.ОбщийМодуль("Справочники.БанковскиеСчетаКонтрагентов");
		МодульБанковскиеСчетаКонтрагентов.ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС);
	КонецЕсли;
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборот

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИдентификацияПриложения

// Заполняет данные клиентского приложения, используемые для авторизации в Google.
//
Функция ИдентификацияПриложенияДляGoogle() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляGoogle(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляGoogle(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("redirect_uri",	"http://127.0.0.1:23451");
	ИдентификаторПриложения.Вставить("auth_uri",		"https://accounts.google.com/o/oauth2/auth");
	ИдентификаторПриложения.Вставить("token_uri",		"https://accounts.google.com/o/oauth2/token");

	Возврат ИдентификаторПриложения;

КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации на сайте hh.ru.
//
// Возвращаемое значение:
//  Структура:
// * client_id - Строка -
// * client_secret - Строка -
// * redirect_uri - Строка -
// * auth_uri - Строка -
// * token_uri - Строка -
Функция ИдентификацияПриложенияДляHeadHunter() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	ИдентификаторПриложения.Вставить("redirect_uri",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляHeadHunter(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляHeadHunter(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("auth_uri",	"https://hh.ru/oauth/authorize");
	ИдентификаторПриложения.Вставить("token_uri",	"https://hh.ru/oauth/token");
	
	Возврат ИдентификаторПриложения;

КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации на сайте zarplata.ru.
//
// Возвращаемое значение:
//  Структура:
// * client_id - Строка -
// * client_secret - Строка -
// * redirect_uri - Строка -
// * auth_uri - Строка -
// * token_uri - Строка -
Функция ИдентификацияПриложенияДляЗарплатаРу() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	ИдентификаторПриложения.Вставить("redirect_uri",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляЗарплатаРу(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляЗарплатаРу(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("auth_uri",	"https://hr.zarplata.ru/oauth/authorize");
	ИдентификаторПриложения.Вставить("token_uri",	"https://hr.zarplata.ru/oauth/token");
	
	Возврат ИдентификаторПриложения;

КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации на сайте avito.ru.
// 
// Возвращаемое значение:
//  Структура:
// * client_id - Строка -
// * client_secret - Строка -
// * redirect_uri - Строка -
// * auth_uri - Строка -
// * token_uri - Строка -
Функция ИдентификацияПриложенияДляАвитоРабота() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	ИдентификаторПриложения.Вставить("redirect_uri",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляАвитоРабота(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляАвитоРабота(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("auth_uri",	"https://avito.ru/oauth");
	ИдентификаторПриложения.Вставить("token_uri",	"https://api.avito.ru/token/");
	
	Возврат ИдентификаторПриложения;

КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации на сайте career.habr.com.
//
// Возвращаемое значение:
//  Структура:
// * client_id - Строка -
// * client_secret - Строка -
// * redirect_uri - Строка -
// * auth_uri - Строка -
// * token_uri - Строка -
Функция ИдентификацияПриложенияДляХабрКарьера() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	ИдентификаторПриложения.Вставить("redirect_uri",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляХабрКарьера(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляХабрКарьера(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("auth_uri",	"https://career.habr.com/integrations/oauth/authorize");
	ИдентификаторПриложения.Вставить("token_uri",	"https://career.habr.com/integrations/oauth/token");
	
	Возврат ИдентификаторПриложения;

КонецФункции

// Заполняет данные клиентского приложения, используемые для авторизации на сайте zoom.us.
Функция ИдентификацияПриложенияДляZoom() Экспорт
	
	ИдентификаторПриложения = Новый Структура;
	ИдентификаторПриложения.Вставить("client_id",		"");
	ИдентификаторПриложения.Вставить("client_secret",	"");
	ИдентификаторПриложения.Вставить("redirect_uri",	"");
	ИдентификаторПриложения.Вставить("Authorization",	"");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриОпределенииИдентификацииПриложенияДляZoom(ИдентификаторПриложения);
	КонецЕсли;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ПриОпределенииИдентификацииПриложенияДляZoom(ИдентификаторПриложения);
	
	ИдентификаторПриложения.Вставить("auth_uri",	"https://zoom.us/oauth/authorize");
	ИдентификаторПриложения.Вставить("token_uri",	"https://zoom.us/oauth/token");
	
	Возврат ИдентификаторПриложения;

КонецФункции

#КонецОбласти

#Область ПрофилиПользователей

// Возвращает описание профиля "Кадровик (без доступа к зарплате)".
//
Функция ОписаниеПрофиляКадровикБезДоступаКЗарплате(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровикБезДоступаКЗарплате();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кадровик (без доступа к зарплате)';
										|en = 'HR officer (no access to payroll)'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников",						"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБольничныхЛистов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаУведомлениеОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУведомленийОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовПредоставляемыхСотрудникамСправок", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОТрудовойДеятельности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоступаКНаркотическимСредствам",				"ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаМедрегистраОбщиеДанные",								"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаФедеральныхМедрегистров",								"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийДляМедрегистра", 						"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийДляФедеральныхМедрегистров", 			"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовСправок2НДФЛСотрудником", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовСправокСотрудником", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаКомандировку", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиЗагрузкаКомандировокИзСистемыБронирования", "ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтправкиСотрудниковБронированияКомандировок", "ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИспытательногоСрокаСотрудников", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаОтпуск", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗначенийСтроковыхРеквизитов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМедицинскихОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоговоровСтрахования", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМедицинскогоСтрахования", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтгулов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыПоСреднему");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПереводовНаОплатуПоСреднемуЗаработку");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПолисовОМС", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ПолисыОМС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрогуловНеявок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСЗВ_КОРР");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСовмещения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОбОтсутствии", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСообщенийОНеправильныхДанныхСотрудника", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеДополнительныхСведений",								"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеГрупповоеСозданиеЗаявокСотрудников", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРаботаСКадрами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаМотивация", 											"ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗапросовСправокСотрудником", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаКомандировку", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаОтпуск", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеСообщенийОНеправильныхДанныхСотрудника", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраЗначенийТарифов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраИсторииНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхАвансов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБронированияКомандировок",									"ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрейдов", 													"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСтатистикиПерсоналаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 										"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 								"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМероприятийАдаптацииУвольнения", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийПоКадровымИзменениям", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОбОтпускеПоУходуЗаРебенком", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОПриемеНаРаботу", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОВосстановленииВДолжности", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОВозвратеИзОтпускаПоУходуЗаРебенком", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОКадровомПереводе", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОбУвольнении", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДокументовПоРешениям", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовМедицинскихОсмотров", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыдачиСИЗ", 												"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНоменклатурыСИЗ", 											"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОхраныТрудаСотрудников", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРабочихМестСотрудников", 						"ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОхранаТруда", 											"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийДляРеестраГосслужащих",				"ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАрхиваФизическихЛиц",							"ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрафиковУчетаСамочувствия",								"ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУведомлений",												"ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиНастройкиКонтроляСамочувствияСотрудников",	"ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДистанционнойРаботыСотрудников", 							"ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ГрупповоеЗаполнениеПоказателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеКадровыхДанныхВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатПоДоговорамОпеки",									"ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиДиаграммаОтпусков", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрДокументовИзДиаграммыОтпусков", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийОбАккредитацииСпециалистов",			"ЗарплатаКадрыПриложения.АккредитацияСпециалистов");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументКадровогоЭДО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаПрисоединениеККЭДО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЛичныхДанныхКандидатов",									"ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСтепенейЗнанияЯзыкаКандидата",								"ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхДанныхКандидатов",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРешенийОКомандировании", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОНормативахКомандировок",				"ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРешенийОКомпенсацииРасходовДляКрайнегоСевера", "ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСборГрафиковОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДисциплинарныхВзысканий",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКвотДляТрудоустройства",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПрофессийФизическихЛиц",			"ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСводныхДанныхФизическихЛиц",		"ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСемейныхПоложенийФизическихЛиц",	"ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаРегламентированныеОтчетыОбОбразованииСотрудников", "ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	
	ДобавитьПраваНаПодготовкуИОтправкуРегламентированнойОтчетности(ОписаниеПрофиля);
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ДополнитьПрофильВидомДоступаПоГруппамКандидатов(ОписаниеПрофиля);
	КонецЕсли;
	
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраСправочниковПодчиненныхСправочникуФизическиеЛица");
	
	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("УчетОригиналовПервичныхДокументов");
		МодульУчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаКадровик", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",            "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Кадровик".
//
Функция ОписаниеПрофиляКадровик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кадровик';
										|en = 'HR officer'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ДобавитьЧтениеЭД(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыПриложения",	"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПодбораВидовРасчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПВРНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеТарификационнойОтчетностиУчрежденийФМБА",		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников", 					"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМатериальнойПомощи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПремийПоощрений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаКонтрольГрейдов", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДанныхВоеннослужащих", 						"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПроизвольныхКадровыхПриказов", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИзвещенийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРеестровСтимулирующихВыплат");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаУведомлениеОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУведомленийОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСреднегоЗаработкаСЭДО");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ГрупповоеЗаполнениеПоказателей");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыСотрудников");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЛицевыхСчетовПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанковскихКарт");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеПлановыхНачисленийВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаПрисоединениеККЭДО");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКвотДляТрудоустройства",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");

	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровикБезДоступаКЗарплате(ПраваНаИнтерфейс));
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший кадровик".
//
Функция ОписаниеПрофиляСтаршийКадровик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийКадровик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший кадровик';
										|en = 'Senior HR officer'");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБазовыхСправочныхДанных",			"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовКонтактнойИнформации",		"СтандартныеПодсистемы.КонтактнаяИнформация");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеГрейдов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхТарификацииВМедицине", 		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеГрафиковУчетаСамочувствия",		"ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУведомлений",						"ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДолжностей",						"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАдресныхСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКалендарныхГрафиков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОснованийПолномочийОтветственныхЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОснованийПолномочийОтветственныхЛицРасширенная", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодписиДокументовОснованияПолномочий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОрганизационнойСтруктуры", 		"ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМестаСотрудникаВСтруктуреПредприятия", "ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПодразделенийОрганизации",		"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРуководителейПодразделений",		"ЗарплатаКадрыПриложения.РуководителиПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРуководителейПодразделенийОрганизации");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийОбОтветственныхЛицах",	"ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМакетовПечатныхФорм",						"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРаботаСГрейдами", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеСозданиеГрейдов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиНастройкаОтправкиСотрудниковБронированияКомандировок", "ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаГруппСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанных");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанныхРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанныхОбщиеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКлассовУсловийТрудаПоДолжностям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаМедицинскогоСтрахования", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПечатныхФормЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСтатистикиПерсоналаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПолучениеОбновленийКлассификаторов",					"ИнтернетПоддержкаПользователей.РаботаСКлассификаторами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеРеквизитовОбъектов",					"СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхЗадвоенныхФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",								"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВоинскихСпециальныхЗваний", 		"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПроизвольныхКадровыхПриказов", 	"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПроизвольныхКадровыхПриказов", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКлассныхЧиновРангов", 			"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляРасчетаТарификацийПреподавателей", 	"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСервисаКабинетСотрудника");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПравилОбработкиЗаявокСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоПлана", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСценариевПланирования", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСвязейПозицийШтатногоРасписанияПоКадровомуПлану", "ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиУничтожениеПерсональныхДанных", "ЗарплатаКадрыПодсистемы.ЗащитаПерсональныхДанных");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаИнтеграцияУправлениеПерсоналом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПриложения1СПерсонал");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаШаблоновДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКадровыхДанныхОбразованийФизическихЛиц", "ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКвотДляТрудоустройства",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРегистрацийВОрганеСтатистики",	"ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМашиночитаемыхДоверенностей", "СтандартныеПодсистемы.МашиночитаемыеДоверенности");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровик(ПраваНаИнтерфейс));
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("УчетОригиналовПервичныхДокументов");
		МодульУчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляНастройкиСостоянийОригиналовДокументов(ОписаниеПрофиля);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройкаИАдминистрирование", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Расчетчик".
//
Функция ОписаниеПрофиляРасчетчик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Расчетчик';
										|en = 'Payroll & benefits officer'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ДобавитьВыполнениеОбменаЭД(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовЗаявокНаЕдиновременнуюКомпенсациюСотрудникам", 	"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовПредоставляемыхСотрудникамСправок", 	"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовССотрудниками",	"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовПоВзносам",		"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыдачиПогашенияЗаймовСотрудникам",		"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплатыДепонированнойЗарплаты",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВнешнихОперацийРасчетовПоНДФЛ",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПодтвержденияВыплатыДоходов",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплаченнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплатПрочихДоходов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыПриложения",	"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПодбораВидовРасчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПВРНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДепонированнойЗарплаты", 					"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДепонированнойЗарплатыРасширенная",		"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДивидендов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоговоровРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовСправок2НДФЛСотрудником", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовСправокСотрудником", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаймовСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗапросовВПФРФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокНаЕдиновременнуюКомпенсацию", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИсходящейСправкиОЗаработке");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛицевыхСчетовПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМестВыплатыЗарплатыСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНалоговИВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументовУчетаНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхОНормативахКомандировок",	"ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтраженияЗарплатыВБухучетеХозрасчетныхОрганизаций", 	"ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтраженияЗарплатыВБухучетеБюджетныхУчреждений", 		"ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОценочныхОбязательствЗарплатаКадры", 					"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОценочныхОбязательствЗарплатаКадры", 						"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОценочныхОбязательствЗарплатаКадрыРасширенная", 					"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОценочныхОбязательствЗарплатаКадрыРасширенная", 			"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтраженияРасчетовЗарплатыВБухучете", 								"ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтраженияСтатистикиПерсоналаВБухучете", 				"ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтраженияРасчетовЗарплатыВБухучете", 					"ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыполнениеОбменаСБанкамиПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОбменаСБанкамиПоЛицевымСчетамЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОбменаСБанкамиПоЗачислениюЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаДокументовОбменаСБанкамиПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиОбменСБанкамиПоЗарплатнымПроектам");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрБанковскихКарт");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПубликацияРасчетныхЛистков");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ГрупповоеЗаполнениеПоказателей");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПерсУчетаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПризовПодарков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМедицинскихОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеИзвещенийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРеестровЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРеестровСтимулирующихВыплат");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаУведомлениеОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУведомленийОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСреднегоЗаработкаСЭДО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПостоянныхУдержаний");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПриказовНаДоплату");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПродолжительностиДоговоров");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРабочегоВремениНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСЗВ_КОРР");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСторнирования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийВСчетРасчетовПоПрочимОперациям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийДобровольныхСтраховыхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийДобровольныхВзносовВНПФ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУдержанийПрофсоюзныхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеДополнительныхСведений",							"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМестаСотрудникаВСтруктуреПредприятия", 				"ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеГрупповоеСозданиеЗаявокСотрудников", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРасчетЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРегламентированнойОтчетности",					"ЗарплатаКадрыПриложения.РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеТарификационнойОтчетностиУчрежденийФМБА", 		"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ОтражениеЗарплатыВФинансовомУчете", 							"ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтраженияРасходовНаПерсонал", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаМотивация", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаКонтрольГрейдов", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПлатежейПоРезультатамРасчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаВедомостьДополнительныхДоходов0504094", 		"ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаВедомостьДоходовФизическихЛиц0509095", 		"ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗапросовСправокСотрудником", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СогласованиеЗаявокНаЕдиновременнуюКомпенсацию", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОбменаЗарплата3Бухгалтерия3", 					"ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВидовЗаявокНаЕдиновременнуюКомпенсациюСотрудникам", 	"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрейдов", 												"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрантов", 												"ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОТрудовойДеятельности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДанныхВоеннослужащих", 						"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПодбораВидовРасчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыПриложения",				"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаЕдиновременнуюКомпенсацию", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачальнойЗадолженностиПоЗарплате");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНесчастныхСлучаев", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтгулов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПлановыхЗначенийПоказателейЭффективности", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеФактическихЗначенийПоказателейЭффективности", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПоказателейЭффективности", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАналитикаФинансовогоУчета", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДистанционнойРаботыСотрудников", 						"ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовМедицинскихОсмотров", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыдачиСИЗ", 											"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНоменклатурыСИЗ", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОхраныТрудаСотрудников", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочихМестСотрудников", 								"ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСведенийДляФедеральныхМедрегистров",					"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСпециальнойОценкиУсловийТруда", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСтатистикиПерсоналаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАттестацийСотрудников", 					"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 									"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 							"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПроизвольныхКадровыхПриказов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРасчетовСБюджетомПоНДФЛ", 								"ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиРедактированиеЗаконодательныхЗначений");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхДляРасчетаТарификацийПреподавателей", 	"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеТарификацийПреподавателей", 					"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУчебныхПланов", 											"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСоставаТарифныхСтавокПреподавателей", 						"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовТарификацииПреподавателей", 					"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплатБывшимВоеннослужащим", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВыплатПоДоговорамОпеки",					"ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки");	
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеПлановыхНачисленийВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеКадровыхДанныхВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеНачисленнойЗарплатыВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПлановыхНачисленийВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДокументКадровогоЭДО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСогласийНаПрисоединениеККЭДО");

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрофессийФизическихЛиц",			"ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСводныхДанныхФизическихЛиц",		"ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСемейныхПоложенийФизическихЛиц",	"ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДисциплинарныхВзысканий","ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКвотДляТрудоустройства",								"ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаРегламентированныеОтчетыОбОбразованииСотрудников", "ЗарплатаКадрыПриложения.ГосударственнаяСлужба");
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляТабельщик());
	
	ДобавитьПраваНаПодготовкуИОтправкуРегламентированнойОтчетности(ОписаниеПрофиля);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульПрофиля.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	// КонфигурацииЗарплатаКадрыРасширенный
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	// Конец КонфигурацииЗарплатаКадрыРасширенный
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов") Тогда
		МодульУчетОригиналовПервичныхДокументов = ОбщегоНазначения.ОбщийМодуль("УчетОригиналовПервичныхДокументов");
		МодульУчетОригиналовПервичныхДокументов.ДополнитьПрофильРольюДляИзмененияСостоянийОригиналовДокументов(ОписаниеПрофиля);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУчетныхЗаписейСерверовDSS");
		ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхСервисаDSS");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись
	
	// СтандартныеПодсистемы.ЭлектроннаяПодпись
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрограммЭлектроннойПодписиИШифрования");
		ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСертификатовКлючейЭлектроннойПодписиИШифрования");
		ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЭлектронныхПодписей");
		ОписаниеПрофиля.Роли.Добавить("ШифрованиеИРасшифровкаДанных");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЭлектроннаяПодпись
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаРасчетчик", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                 "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаЗарплата",              "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаВыплатыПеречисления",   "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОтчетность",            "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНалогиИВзносы",         "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",             "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший расчетчик".
//
Функция ОписаниеПрофиляСтаршийРасчетчик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший расчетчик';
										|en = 'Senior payroll & benefits officer'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ДобавитьНастройкуПараметровЭД(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАдресныхСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеАналитикаБухучета", 						"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБазовыхСправочныхДанных",					"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБанкКасса",								"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовКонтактнойИнформации",				"СтандартныеПодсистемы.КонтактнаяИнформация");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВидовРабот",								"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеГрейдов", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеГрантов", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДанныхТарификацииВМедицине", 				"ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДолжностей",								"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеДополнительныхРеквизитовИСведений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКалендарныхГрафиков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМестВыплатыЗарплатыОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМестВыплатыЗарплатыПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачальнойЗадолженностиПоЗарплате");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНастроекПолученияУведомленийОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОснованийПолномочийОтветственныхЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОснованийПолномочийОтветственныхЛицРасширенная", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодписиДокументовОснованияПолномочий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПодразделенийОрганизации",				"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРуководителейПодразделений",				"ЗарплатаКадрыПриложения.РуководителиПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРуководителейПодразделенийОрганизации");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеСведенийОбОтветственныхЛицах",			"ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеРаботаСГрейдами", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеСозданиеГрейдов", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеМакетовПечатныхФорм",								"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВыплатПрочихДоходов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВыплаченнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаОперацийРасчетаЗарплаты",							"ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаКлассовУсловийТрудаПоДолжностям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалогиИВзносы");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалогиИВзносыОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПВРНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПодбораВидовРасчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаНачисленияЗарплатыОбщиеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПерсУчетаОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПечатныхФормЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаПособийФССОбщиеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСтатистикиПерсоналаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСистемыНалогообложения",							"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПолучениеОбновленийКлассификаторов",							"ИнтернетПоддержкаПользователей.РаботаСКлассификаторами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаМотивация", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОписанияИзмененийПрограммы",							"СтандартныеПодсистемы.ОбновлениеВерсииИБ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеРеквизитовОбъектов",							"СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОбменаЗарплата3Бухгалтерия3", 					"ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",										"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКлассныхЧиновРангов", 					"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеВоинскихСпециальныхЗваний", 				"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРасчетовСБюджетомПоНДФЛ",					"ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУчебныхПланов", 								"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаСоставаТарифныхСтавокПреподавателей", 			"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаВыплатПоДоговорамОпеки",						"ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКвотДляТрудоустройства",						"ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОценочныхОбязательствЗарплатаКадры", 					"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНастроекОценочныхОбязательствЗарплатаКадры", 			"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНастроекОценочныхОбязательствЗарплатаКадрыРасширенная","ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОценочныхОбязательствЗарплатаКадрыРасширенная", 					"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "НастройкаШаблоновДокументов");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеМашиночитаемыхДоверенностей", "СтандартныеПодсистемы.МашиночитаемыеДоверенности");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляРасчетчик(ПраваНаИнтерфейс));
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульПрофиля = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульПрофиля.ДополнитьОписаниеПрофиляПравиламиПредоставленияЛьгот(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройкаИАдминистрирование", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Табельщик".
//
Функция ОписаниеПрофиляТабельщик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляТабельщик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Табельщик';
										|en = 'Timesheet owner'");
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ВыводНаПринтерФайлБуферОбмена");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраНачисленияУдержанияПоказатели");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраПлановыхНачислений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБезПросмотраРегистраРасчетаНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДистанционнойРаботыСотрудников", 					"ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОхраныТрудаСотрудников", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочихМестСотрудников",							"ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов", 								"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 						"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ГрупповоеЗаполнениеПоказателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрофессийФизическихЛиц",							"ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСводныхДанныхФизическихЛиц",						"ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСемейныхПоложенийФизическихЛиц",					"ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц");
	
	
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ПодразделенияОрганизаций");
	ОписаниеПрофиля.ВидыДоступа.Добавить("ГруппыФизическихЛиц");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "УтверждениеДокументовУчетаВремени");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОсновногоРабочегоСтола", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаТабельщик",     "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                     "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаЗарплата",                  "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",                 "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Аудитор".
//
Функция ОписаниеПрофиляАудитор(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляАудитор();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Аудитор';
										|en = 'Auditor'");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ДобавитьЧтениеЭД(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля);
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаМотивация", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаКонтрольГрейдов", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаОтчетыПоСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаСтатистикаПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАттестацийСотрудников",						"ЗарплатаКадрыПриложения.АттестацииСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБухгалтерскогоУчетаЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОбменаЗарплата3Бухгалтерия3", 			"ЗарплатаКадрыПриложения.ОбменЗарплата3Бухгалтерия3");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВидовПредоставляемыхСотрудникамСправок", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВерсийОбъектов",								"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовССотрудниками",			"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовПоВзносам",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВнешнихОперацийРасчетовПоНДФЛ",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПодтвержденияВыплатыДоходов",					"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскогоУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыдачиПогашенияЗаймовСотрудникам",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплаченнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплаченнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатПрочихДоходов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатыДепонированнойЗарплаты",				"ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрейдов", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеГрантов", 										"ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыПриложения",		"ЗарплатаКадрыПриложения.ВнешниеДанные");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПодбораВидовРасчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПВРНачисления");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОТрудовойДеятельности");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхРегламентированнойОтчетности",			"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПротоколовОтправкиВКонтролирующиеОрганы",	"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАрхиваФизическихЛиц", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИспытательногоСрокаСотрудников", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхСотрудниковРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхФизическихЛицЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОбОбразованииФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДепонированнойЗарплаты",						"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДепонированнойЗарплатыРасширенная",			"ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДивидендов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоговоровРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДополнительныхСведений",						"СтандартныеПодсистемы.Свойства");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоходовСтороннихФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокСотрудников", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаКадровыхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаОтсутствий");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаймовСотрудникам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗапросовСправок2НДФЛСотрудником", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗапросовСправокСотрудником", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаЕдиновременнуюКомпенсацию", 			"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаКомандировку", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБронированияКомандировок", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтправкиСотрудниковБронированияКомандировок", "ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаявокНаОтпуск", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИнформацииОВерсияхОбъектов",					"СтандартныеПодсистемы.ВерсионированиеОбъектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсполнительныхДокументов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИсходящейСправкиОЗаработке");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровогоСостоянияРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКадровыхДанныхВоеннослужащих",					"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКлассныхЧиновРангов",							"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВоинскихСпециальныхЗвание", 					"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЛицевыхСчетовПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЛьготСотрудников", 							"ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМатериальнойПомощи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДоговоровСтрахования", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМедицинскогоСтрахования", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыПодразделений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМестВыплатыЗарплатыСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНалоговИВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНалоговИВзносовРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДокументовУчетаНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачальнойЗадолженностиПоЗарплате");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленнойЗарплатыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРасчетовСБюджетомПоНДФЛ", 						"ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрофессийФизическихЛиц",						"ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСводныхДанныхФизическихЛиц",					"ЗарплатаКадрыПриложения.КадровыйУчет.СводныеДанныеФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСемейныхПоложенийФизическихЛиц",				"ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОКомандировании", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхОНормативахКомандировок", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРешенийОКомпенсацииРасходовДляКрайнегоСевера", "ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОбменаСБанкамиПоЛицевымСчетамЗарплатныхПроектов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОбменаСБанкамиПоЗачислениюЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаДокументовОбменаСБанкамиПоЗарплатнымПроектам");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиОбменСБанкамиПоЗарплатнымПроектам");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБанковскихКарт");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОплатыДнейУходаЗаДетьмиИнвалидами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОплатыПоСреднему");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПереводовНаОплатуПоСреднемуЗаработку");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАнкетПерсУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПерсУчетаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПоказателейЭффективности", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПолисовОМС", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ПолисыОМС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПособийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПостоянныхУдержаний");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПремийПоощрений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПризовПодарков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПриказовНаДоплату");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПрогуловНеявок");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПродолжительностиДоговоров");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПростоев");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРаботыСверхурочноИВПраздники");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремени");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочегоВремениНачисленнойЗарплаты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеАналитикаФинансовогоУчета", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДистанционнойРаботыСотрудников", 				"ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовМедицинскихОсмотров", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыдачиСИЗ", 									"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНоменклатурыСИЗ", 								"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОхраныТрудаСотрудников", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРабочихМестСотрудников", 						"ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСведенийДляМедРегистра",						"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСведенийДляФедеральныхМедрегистров",			"ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеТарификационнойОтчетностиУчрежденийФМБА", "ЗарплатаКадрыПриложения.Медицина.ТарификационнаяОтчетностьУчрежденийФМБА");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСЗВ_КОРР");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСовмещения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОбОтсутствии", 						"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСообщенийОНеправильныхДанныхСотрудника", 		"ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСостоянийСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСтатистикиПерсоналаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСторнирования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийВСчетРасчетовПоПрочимОперациям");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийДобровольныхВзносовВНПФ");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийДобровольныхСтраховыхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУдержанийПрофсоюзныхВзносов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНачисленийШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеШтатногоРасписания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМероприятийАдаптацииУвольнения", 				"ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗаписейРабочегоКалендаряСотрудников",			"ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЗабронированныхПомещений",						"ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиРедактированиеЗаконодательныхЗначений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДокументКадровогоЭДО");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСогласийНаПрисоединениеККЭДО");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеБольничныхЛистов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМедицинскихОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеИзвещенийФСС");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРеестровЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРеестровСтимулирующихВыплат");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСогласийНаУведомлениеОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУведомленийОбЭЛН");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСреднегоЗаработкаСЭДО");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСведенийДляРеестраГосслужащих",				"ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих");	
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДанныхДляРасчетаТарификацийПреподавателей", 	"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеТарификацийПреподавателей", 					"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеУчебныхПланов", 								"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСоставаТарифныхСтавокПреподавателей", 			"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовТарификацииПреподавателей", 		"ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтраженияЗарплатыВБухучетеХозрасчетныхОрганизаций", 	"ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтраженияЗарплатыВБухучетеБюджетныхУчреждений", 		"ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОценочныхОбязательствЗарплатаКадры", 					"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОценочныхОбязательствЗарплатаКадры", 			"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОценочныхОбязательствЗарплатаКадрыРасширенная", 		"ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекОценочныхОбязательствЗарплатаКадрыРасширенная", "ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтраженияСтатистикиПерсоналаВБухучете", 				"ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатБывшимВоеннослужащим", 					"ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтраженияРасчетовЗарплатыВБухучете", 			"ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеВыплатПоДоговорамОпеки",						"ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки");	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСведенийОбАккредитацииСпециалистов",			"ЗарплатаКадрыПриложения.АккредитацияСпециалистов");	
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаВедомостьДополнительныхДоходов0504094", "ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаВедомостьДоходовФизическихЛиц0509095",  "ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрНачисленнойЗарплатыВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрПлановыхНачисленийВДокументах");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ГрупповоеЗаполнениеПоказателей");

	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЛичныхДанныхКандидатов", "ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеСборГрафиковОтпусков");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДисциплинарныхВзысканий","ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКвотДляТрудоустройства", "ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрОтчетаРегламентированныеОтчетыОбОбразованииСотрудников", "ЗарплатаКадрыПриложения.ГосударственнаяСлужба");

	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ДополнитьОписаниеПрофиля(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОсновногоРабочегоСтола", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаАудитор",       "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                     "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаЗарплата",                  "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаВыплатыПеречисления",       "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОтчетность",                "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНалогиИВзносы",             "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",                 "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Кадровик-расчетчик".
//
Функция ОписаниеПрофиляКадровикРасчетчик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляКадровикРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Кадровик-расчетчик';
										|en = 'HR officer (payroll & benefits)'");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляКадровик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляРасчетчик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляТабельщик());
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровыхДанныхВоеннослужащих",	"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих");
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаКадровикРасчетчик", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                         "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаЗарплата",                      "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаВыплатыПеречисления",           "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОтчетность",                    "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНалогиИВзносы",                 "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",                     "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

// Возвращает описание профиля "Старший кадровик-расчетчик".
//
Функция ОписаниеПрофиляСтаршийКадровикРасчетчик(ПраваНаИнтерфейс = Ложь) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = ИдентификаторПрофиляСтаршийКадровикРасчетчик();
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Старший кадровик-расчетчик';
										|en = 'Senior HR officer (payroll & benefits)'");
	
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляСтаршийКадровик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляСтаршийРасчетчик());
	ДополнитьПрофиль(ОписаниеПрофиля, ОписаниеПрофиляТабельщик());
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеКадровыхДанныхВоеннослужащих",	"ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиОбъединениеДублейПерсональныхДанных");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ОбъединениеДублейФизическихЛиц");
	
	Если ПраваНаИнтерфейс Тогда
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИнтерфейсРабочегоСтолаКадровикРасчетчик", "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаКадры",                         "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаЗарплата",                      "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаВыплатыПеречисления",           "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаОтчетность",                    "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНалогиИВзносы",                 "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройка",                     "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
		ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПодсистемаНастройкаИАдминистрирование",   "ЗарплатаКадрыПриложения.ЗарплатаКадрыКомандныйИнтерфейс");
	КонецЕсли;
	
	Возврат ОписаниеПрофиля;
	
КонецФункции

Функция ИдентификаторПрофиляКадровикБезДоступаКЗарплате() Экспорт
	Возврат "cb6d7def-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляКадровик() Экспорт
	Возврат "f4d8b5f1-d671-11e3-a364-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийКадровик() Экспорт
	Возврат "cb6d7df1-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляРасчетчик() Экспорт
	Возврат "cb6d7df0-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийРасчетчик() Экспорт
	Возврат "cb6d7df2-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляТабельщик() Экспорт
	Возврат "cb6d7df3-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляАудитор() Экспорт
	Возврат "cb6d7df5-c9f9-11e2-88b6-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляКадровикРасчетчик() Экспорт
	Возврат "9deb4891-e255-11e2-880c-e0cb4ed5f6a2";
КонецФункции

Функция ИдентификаторПрофиляСтаршийКадровикРасчетчик() Экспорт
	Возврат "9deb4892-e255-11e2-880c-e0cb4ed5f6a2";
КонецФункции

Процедура ДополнитьПрофиль(ПрофильПриемник, ПрофильИсточник) Экспорт 
	
	ДополнитьРоли(ПрофильПриемник.Роли, ПрофильИсточник.Роли);
	ДополнитьВидыДоступа(ПрофильПриемник.ВидыДоступа, ПрофильИсточник.ВидыДоступа);
	
КонецПроцедуры

Процедура ДополнитьВидыДоступа(КоллекцияВидовДоступаПриемник, КоллекцияВидовДоступаИсточник)

	Для Каждого ВидДоступа Из КоллекцияВидовДоступаИсточник Цикл
		
		Если КоллекцияВидовДоступаПриемник.НайтиПоЗначению(ВидДоступа.Значение) = Неопределено Тогда
			КоллекцияВидовДоступаПриемник.Добавить(ВидДоступа.Значение);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьРоли(КоллекцияРолейПриемник, КоллекцияРолейИсточник)
	
	Для Каждого ИмяРоли Из КоллекцияРолейИсточник Цикл
		
		// Проверка того, что такая роль уже есть в списке.
		Если КоллекцияРолейПриемник.Найти(ИмяРоли) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияРолейПриемник.Добавить(ИмяРоли);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, ИмяРоли, ПолноеИмяПодсистемы = "") Экспорт
	
	Если Не ПустаяСтрока(ПолноеИмяПодсистемы) И Не ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПрофиля.Роли.Добавить(ИмяРоли);
	
КонецПроцедуры

// Добавляет в описание профиля обязательные роли.
//
Процедура ДобавитьВОписаниеПрофиляОбязательныеРоли(ОписаниеПрофиля) Экспорт 
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБСП");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБИД" , 											"ИнтеграцияС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБРО" , 											"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваБТС" , 											"ТехнологияСервиса");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваИПП" , 											"ИнтернетПоддержкаПользователей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭД" , 											"ЭлектронноеВзаимодействие");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЭлектронногоОбучения",							"ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадры");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадрыПриложения", 						"ЗарплатаКадрыПриложения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваКонфигурацииЗарплатаКадрыРасширенная",			"ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ПросмотрСпискаСотрудников",									"ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.СпискиСотрудников");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДолжностей",											"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеПодразделенийОрганизации",								"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРегистрацийВНалоговыхОрганах",							"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРегистрацийВОрганеСтатистики",							"ЗарплатаКадрыПодсистемы.РегистрацииВОрганеСтатистики");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускВебКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТолстогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЗапускТонкогоКлиента");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеИнтеграцииС1СДокументооборотом");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиТекущиеДела",							"СтандартныеПодсистемы.ТекущиеДела");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "РедактированиеПечатныхФорм", 								"СтандартныеПодсистемы.Печать");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхВариантовОтчетов", 					"СтандартныеПодсистемы.ВариантыОтчетов");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеДополнительныхОтчетовИОбработок", 						"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеДополнительныхОтчетовИОбработокЗарплатаКадры",	"СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеПапокИФайлов", 							"СтандартныеПодсистемы.РаботаСФайлами");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "СохранениеДанныхПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеНапоминаний",								"СтандартныеПодсистемы.НапоминанияПользователя");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеКурсовВалют");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеУчетныхЗаписейЭлектроннойПочты",			"СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеОтветовНаВопросыАнкет",					"СтандартныеПодсистемы.Анкетирование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеОтветовНаВопросыАнкет",								"СтандартныеПодсистемы.Анкетирование");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаданий", 								"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИзменениеВыполнениеЗадач",									"СтандартныеПодсистемы.БизнесПроцессыИЗадачи");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЛичныхШаблоновСообщений", 				"СтандартныеПодсистемы.ШаблоныСообщений");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеРезультатовПроверкиУчета",								"СтандартныеПодсистемы.КонтрольВеденияУчета");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНовостей" , 											"ИнтернетПоддержкаПользователей.Новости");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекСистемыНалогообложения", 						"ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокСотрудника");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокСотрудникаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваОбразованийФизическихЛиц", "ЗарплатаКадрыПриложения.КадровыйУчет.ОбразованияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "БазовыеПраваСемейныхПоложенийФизическихЛиц", "ЗарплатаКадрыПриложения.КадровыйУчет.СемейныеПоложенияФизическихЛиц");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокКабинетСотрудника");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеМашиночитаемыхДоверенностей");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ДобавлениеИзменениеЗаявокКабинетСотрудникаРасширенная");
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеЖурналаЗаявокКабинетСотрудника");
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ЧтениеНастроекПолученияУведомленийОбЭЛН");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие.ЭлектронноеОбучениеВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучениеЗарплатаКадрыРасширенный");
		Модуль.ДобавитьРольИзучениеЭлектронныхКурсов(ОписаниеПрофиля);
	КонецЕсли;
	
	ДобавитьВОписаниеПрофиляРоль(ОписаниеПрофиля, "ИспользованиеОбработкиРассылкаПечатныхФорм");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРезультатыРассылкиДокументов = ОбщегоНазначения.ОбщийМодуль("РезультатыРассылкиДокументов");
		МодульРезультатыРассылкиДокументов.ДобавитьРолиЧтенияРезультатовРассылкиДокументов(ОписаниеПрофиля);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных") Тогда
		МодульАналитикаДанных = ОбщегоНазначения.ОбщийМодуль("АналитикаДанных");
		МодульАналитикаДанных.ДобавитьРольБазовыеПраваАналитикаДанных(ОписаниеПрофиля);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлючевыеРеквизитыЗаполненияФормы

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для предупреждения об очистке таблиц формы при редактировании "ключевых" реквизитов.
//
// Для работы механизма в форме должны быть определены экспортные процедуры: 
// 		КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении()
// 		КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов().
// Пример можно посмотреть в форме документа НачислениеЗарплаты.
//

// Процедура заполняет текст предупреждения при редактировании для ключевых реквизитов.
Процедура КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(Форма, МассивОписанийРеквизитов = Неопределено, ДействиеПриИзмененииОчистка = Истина) Экспорт
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
	     Возврат;
	КонецЕсли;

	Если МассивОписанийРеквизитов = Неопределено Тогда 
		МассивОписанийРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	КонецЕсли;	
	Для Каждого Описание Из МассивОписанийРеквизитов Цикл
		Если Описание.Свойство("ПредупреждениеПриРедактировании") Тогда
			ПредупреждениеПриРедактировании = Описание.ПредупреждениеПриРедактировании;
		Иначе
			ПредупреждениеПриРедактировании = КлючевыеРеквизитыПредставлениеПредупреждения(Описание.Представление, ДействиеПриИзмененииОчистка)
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Описание.ЭлементФормы,
			"ПредупреждениеПриРедактировании",
			ПредупреждениеПриРедактировании);
	КонецЦикла;
КонецПроцедуры

Функция КлючевыеРеквизитыЗаполненияФормыТекстПредупрежденияДокументовСАвтоматическимРасчетом() Экспорт
	Возврат НСтр("ru = 'Ручные исправления таблиц документа будут потеряны';
				|en = 'Manual changes made to the document tables will be lost'");
КонецФункции

// Процедура очищает таблицы формы подключенные к механизму.
//
// Параметры:
//  Форма				 - Форма в которой должны быть очищены таблицы 
//  ПутиОчищаемыхТаблиц  - Массив строк - пути к таблицам, которые надо очистить. Например "Объект.Сотрудники".
//
Процедура КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(Форма, ПутиОчищаемыхТаблиц) Экспорт
	Для каждого ПутьКТаблице Из ПутиОчищаемыхТаблиц Цикл
		Таблица  = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКТаблице);
		Таблица.Очистить();
	КонецЦикла; 
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, ОтображениеПредупрежденияПриРедактировании.НеОтображать);
КонецПроцедуры

#КонецОбласти

#Область ОбменДанными

Процедура ПриЗаполненииТаблицыЗависимыхДанныхДляОбмена(ЗависимыеДанные) Экспорт
	
	// Метаданные.РегистрыСведений.ТерриторииСотрудников
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ТерриторииСотрудников;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ТерриторииСотрудниковИнтервальный;
	
	// Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписания;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный;
	
	// Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОрганеВторичный;
	
	// Метаданные.РегистрыСведений.ПриостановленияТрудовыхДоговоровКонтрактов
	НоваяСтрока = ЗависимыеДанные.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.РегистрыСведений.ПриостановленияТрудовыхДоговоровКонтрактов;
	НоваяСтрока.ЗависимыеМетаданные = Метаданные.РегистрыСведений.ПриостановленияТрудовыхДоговоровКонтрактовИнтервальный;
	
КонецПроцедуры

Процедура ПриЗаполненииТаблицыОбъектовРегистрирующихЗависимыеОбъекты(ДанныеРегистрации) Экспорт
	
	// Метаданные.Документы.ДоговорРаботыУслуги
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ДоговорРаботыУслуги;
	
	// Метаданные.Документы.ИсполнительныйЛист
	НоваяСтрока = ДанныеРегистрации.Добавить();
	НоваяСтрока.ВедущиеМетаданные = Метаданные.Документы.ИсполнительныйЛист;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедуры

#Область УправлениеОтображениемГруппыФормы

// Устанавливает свойство ИмяСвойства группы или таблицы формы с именем ИмяГруппы в значение Значение, а также
// устанавливает значение этого свойства у всех подчиненных элементов (рекурсивно). Поддерживается установка 
// свойств Видимость, Доступность, ТолькоПросмотр.
//
// Параметры:
//  ЭлементыФормы - свойство ЭлементыФормы управляемой формы.
//  ИмяГруппы     - Строка       - имя группы или таблицы формы.
//  ИмяСвойства   - Строка       - имя устанавливаемого свойства элемента формы (Видимость, Доступность,
//                                 ТолькоПросмотр).
//  Значение      - Произвольный - новое значение элемента.
// 
Процедура УстановитьОтображениеГруппыФормы(ЭлементыФормы, ИмяГруппы, ИмяСвойства, Значение) Экспорт 

	Группа = ЭлементыФормы.Найти(ИмяГруппы);
	
	Если Группа = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СвойстваЭлементовФормы = Новый Соответствие;
	
	СписокСвойств = Новый Структура("Видимость, Доступность, ТолькоПросмотр");
	СвойстваЭлементовФормы.Вставить(Тип("ГруппаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ТаблицаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ПолеФормы"), СписокСвойств);
	
	СписокСвойств = Новый Структура("Видимость, Доступность");
	СвойстваЭлементовФормы.Вставить(Тип("КнопкаФормы"), СписокСвойств);
	СвойстваЭлементовФормы.Вставить(Тип("ДекорацияФормы"), СписокСвойств);
	
	Группа[ИмяСвойства] = Значение;
	
	УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Группа, ИмяСвойства, Значение, СвойстваЭлементовФормы);
	
КонецПроцедуры

Процедура УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Группа, ИмяСвойства, Значение, СвойстваЭлементовФормы)
	
	Для Каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл 
		
		ТипЭлемента = ТипЗнч(Элемент);
		СвойстваЭлемента = СвойстваЭлементовФормы[ТипЭлемента];
		
		Если СвойстваЭлемента.Свойство(ИмяСвойства) Тогда 
			Элемент[ИмяСвойства] = Значение;
		КонецЕсли;
		
		Если ТипЭлемента = Тип("ГруппаФормы") Или ТипЭлемента = Тип("ТаблицаФормы") Тогда 
			УстановитьОтображениеПодчиненныхЭлементовГруппыФормы(Элемент, ИмяСвойства, Значение, СвойстваЭлементовФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Изменить реквизиты формы по пакету реквизитов, накопленных при инициализации формы
// Вызывается в формах документов, реквизиты которых дорабатываются теми или иными механизмами
// Вызов выполняется между процедурами сбора реквизитов для добавления (например, НачатьИнициализациюФормы)
// и процедурой формирования дерева элементов формы для добавленных реквизитов (например, ЗавершитьИнициализациюФормы).
Процедура ИзменитьРеквизитыФормы(ЭтаФорма) Экспорт
	
	// Достаем их формы заботливо подготовленные списки.
	МассивРеквизитыКДобавлению = ЭтаФорма.РеквизитыКДобавлению.ВыгрузитьЗначения();
	МассивРеквизитыКУдалению = ЭтаФорма.РеквизитыКУдалению.ВыгрузитьЗначения();
	
	Если МассивРеквизитыКДобавлению.Количество() = 0 И МассивРеквизитыКУдалению.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	// Заполняем массив существующих реквизитов формы.
	// Определяем пути, содержащиеся в МассивРеквизитыКДобавлению.
	СписокПутей	= Новый Массив;
	Для каждого РеквизитКДобавлению Из МассивРеквизитыКДобавлению Цикл
		Если СписокПутей.Найти(РеквизитКДобавлению.Путь) = Неопределено Тогда
			СписокПутей.Добавить(РеквизитКДобавлению.Путь);
		КонецЕсли;
	КонецЦикла; 
	// Заполняем все реквизиты с учетом табличных частей.
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы);
	Для каждого ПутьКДанным Из СписокПутей Цикл
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, МассивИменРеквизитовФормы, ПутьКДанным);
		КонецЕсли;
	КонецЦикла; 
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(ЭтаФорма, МассивРеквизитыКДобавлению, МассивИменРеквизитовФормы, МассивРеквизитыКУдалению);
	
КонецПроцедуры

// Заполняет объект документа или справочника данными этого же объекта, но в форме объекта.
//
//	Параметры:
//		ТекущийОбъект	- ДокументОбъект, СправочникОбъект
//		Объект			- ДанныеФормыСтруктура
//
Процедура ЗаполнитьТекущийОбъектОбъектомФормы(ТекущийОбъект, Объект) Экспорт
	
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, Объект);
	ТабличныеЧасти = ТекущийОбъект.Метаданные().ТабличныеЧасти;
	
	Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		ТекущийОбъект[ИмяТабличнойЧасти].Очистить();
		Для каждого СтрокаТабличнойЧасти Из Объект[ИмяТабличнойЧасти] Цикл
			ЗаполнитьЗначенияСвойств(ТекущийОбъект[ИмяТабличнойЧасти].Добавить(), СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМодифицирующимиПараметрамиДинамическихСписков

Процедура НастроитьДинамическийСписокПоОписаниюМодификации(Форма, ОписаниеМодификации) Экспорт
	
	Если ОписаниеМодификации.ИмяМодификации = "ОтборПоПодразделению" Тогда
		
		Строки = Форма.ПараметрыКритерияОтбора.НайтиСтроки(Новый Структура("ИмяПараметра", ОписаниеМодификации.ИмяПараметра));
		Если Строки.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Не найдены параметры модификации списка';
									|en = 'List modification parameters are not found'");
		КонецЕсли;
		ПараметрыМодификации = Строки[0].ПараметрыМодификации;
		
		Список = Форма[Форма.НаименованиеРеквизитаФормыДинамическийСписок];
		
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		
		СвойстваСписка.ТекстЗапроса = Список.ТекстЗапроса;
		
		ИзменитьЗапросПриОтбореПоПодразделению(
			СвойстваСписка,
			ОписаниеМодификации.Модифицировать,
			ПараметрыМодификации.ИменаТиповДокументов.Значение,
			ПараметрыМодификации.Иерархия.Значение);
		
		Если ОписаниеМодификации.Модифицировать Тогда
			ПараметрыМодификации.ДинамическоеСчитываниеДанных.Значение = Список.ДинамическоеСчитываниеДанных;
			СвойстваСписка.ДинамическоеСчитываниеДанных = Ложь;
		Иначе
			СвойстваСписка.ДинамическоеСчитываниеДанных = ПараметрыМодификации.ДинамическоеСчитываниеДанных.Значение;
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(
			Форма.Элементы[Форма.НаименованиеРеквизитаФормыДинамическийСписок],
			СвойстваСписка);
		
		Если ОписаниеМодификации.Модифицировать Тогда
			ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(
				Новый ПараметрКомпоновкиДанных(ОписаниеМодификации.ИмяПараметра));
			ЗначениеПараметра.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОформлениеНесколькихДокументовНаОднуДату

Функция ЗначениеСдвигаПериодаЗаписиРегистра(Документ) Экспорт 
	
	ТипДокумента = ТипЗнч(Документ);
	
	Сдвиг = Неопределено;
	
	Если ТипДокумента = Тип("ДокументСсылка.ПереносДанных") Тогда 
		Сдвиг = 0;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачальнаяШтатнаяРасстановка") Тогда
		Сдвиг = 10;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботу")
		Или ТипДокумента = Тип("ДокументСсылка.ПриемНаРаботуСписком")
		Или ТипДокумента = Тип("ДокументСсылка.ВосстановлениеВДолжности") Тогда
		Сдвиг = 20;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратИзОтпускаПоУходуЗаРебенком") Тогда
		Сдвиг = 30;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВводНачальныхОстатковОтпусков") Тогда
		Сдвиг = 40;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Командировка") Тогда
		Сдвиг = 50;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПрогулНеявка")
		Или ТипДокумента = Тип("ДокументСсылка.ПрогулНеявкаСписком") Тогда
		Сдвиг = 60;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.УтверждениеТарифнойСетки") Тогда
		Сдвиг = 86340;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком")
		Или ТипДокумента = Тип("ДокументСсылка.Отгул")
		Или ТипДокумента = Тип("ДокументСсылка.Отпуск")
		Или ТипДокумента = Тип("ДокументСсылка.ОтпускБезСохраненияОплаты")
		Или ТипДокумента = Тип("ДокументСсылка.ПриостановлениеТрудовыхДоговоровКонтрактов") Тогда
		Сдвиг = 86350;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.БольничныйЛист") Тогда
		Сдвиг = 86360;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.Увольнение")
		Или  ТипДокумента = Тип("ДокументСсылка.УвольнениеСписком") Тогда
		Сдвиг = 5;
	КонецЕсли;
	
	Если Сдвиг = Неопределено
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Сдвиг = Модуль.ЗначениеСдвигаПериодаЗаписиРегистра(Документ);
	КонецЕсли;
		
	Возврат Сдвиг;
	
КонецФункции

Функция КонкурирующиеПоПериодуРегистраторыНачислений() Экспорт 
	
	КонкурирующиеРегистраторы = Новый Массив;
	
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеАванса"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеГрафикаРаботыСписком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеКвалификационногоРазряда"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеМестРаботы"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеОплатыТруда"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеПлановыхНачислений"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ИндексацияЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.КадровыйПеревод"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.КадровыйПереводСписком"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.НазначениеПлановогоНачисления"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ОтменаДоплатыДоСреднегоЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ОтменаСовмещения"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПереводНаОплатуПоСреднемуЗаработку"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПеремещениеВДругоеПодразделение"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПрекращениеПлановогоНачисления"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПриказНаДоплатуДоСреднегоЗаработка"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.Совмещение"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.ПеремещениеМеждуТерриториями"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.БухучетЗарплатыСотрудников"));
	КонкурирующиеРегистраторы.Добавить(Тип("ДокументСсылка.БухучетНачисленийСотрудников"));
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения.РасчетОкладовПреподавателей") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетОкладовПреподавателей");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ДополнитьСписокКонкурирующихПоПериодуРегистраторовНачислений(КонкурирующиеРегистраторы);
	КонецЕсли;
	
	Возврат КонкурирующиеРегистраторы;
	
КонецФункции

Процедура УстановитьВремяРегистрацииДокумента(Движения, СотрудникиДаты, Регистратор, ИмяКолонкиПериод = "ДатаСобытия") Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СдвигПериода = ЗначениеСдвигаПериодаЗаписиРегистра(Регистратор);
	
	Если СдвигПериода <> Неопределено Тогда 
		
		// Документ с фиксированным временем.
		СотрудникиДаты.Свернуть(ИмяКолонкиПериод + ", Сотрудник");
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		
		Для Каждого ДанныеСотрудника Из СотрудникиДаты Цикл 
			
			ДатаСобытия = НачалоДня(ДанныеСотрудника[ИмяКолонкиПериод]);
			ВремяРегистрации = ДатаСобытия + СдвигПериода;
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Дата = ДатаСобытия;
			ЗаписьРегистра.Сотрудник = ДанныеСотрудника.Сотрудник;
			ЗаписьРегистра.Документ = Регистратор;
			ЗаписьРегистра.ВремяРегистрации = ВремяРегистрации;
			ЗаписьРегистра.Проведен = Истина;
			
		КонецЦикла;
	
		НаборЗаписей.Записать();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&ИмяКолонкиПериод КАК Дата,
	               |	СотрудникиДаты.Сотрудник КАК Сотрудник
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	&СотрудникиДаты КАК СотрудникиДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(СотрудникиДаты.Дата, ДЕНЬ) КАК Дата,
	               |	СотрудникиДаты.Сотрудник
	               |ПОМЕСТИТЬ ВТИзмеренияДаты
	               |ИЗ
	               |	ВТСотрудникиДаты КАК СотрудникиДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИзмеренияДаты.Дата
	               |ПОМЕСТИТЬ ВТИсходныеДаты
	               |ИЗ
	               |	ВТИзмеренияДаты КАК ИзмеренияДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяРегистрацииДокументов.Дата КАК Дата,
	               |	ВремяРегистрацииДокументов.Сотрудник КАК Сотрудник,
	               |	ВремяРегистрацииДокументов.Документ КАК Документ,
	               |	ВремяРегистрацииДокументов.ВремяРегистрации КАК ВремяРегистрации
	               |ПОМЕСТИТЬ ВТЗаписиРегистра
	               |ИЗ
	               |	ВТИсходныеДаты КАК ИсходныеДаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументов
	               |		ПО ИсходныеДаты.Дата = ВремяРегистрацииДокументов.Дата
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Документ,
	               |	Дата,
	               |	Сотрудник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИзмеренияДаты.Дата,
	               |	ИзмеренияДаты.Сотрудник,
	               |	ЗаписиРегистра.ВремяРегистрации КАК ВремяРегистрации
	               |ПОМЕСТИТЬ ВТВремяРегистрацииДокументов
	               |ИЗ
	               |	ВТИзмеренияДаты КАК ИзмеренияДаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
	               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистра.Дата
	               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистра.Сотрудник
	               |			И (ЗаписиРегистра.Документ = &Регистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ИСТИНА КАК ЗначениеИстина
	               |ИЗ
	               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов
	               |ГДЕ
	               |	ВремяРегистрацииДокументов.ВремяРегистрации ЕСТЬ NULL ";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиПериод", "СотрудникиДаты." + ИмяКолонкиПериод);
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	ВремяРегистрацииДокумента = Новый Соответствие;
	
	ТребуетсяНовоеВремяРегистрации = Не РезультатЗапроса.Пустой();
	
	Если Не ТребуетсяНовоеВремяРегистрации Тогда
		
		// Проверим, что по набору сотрудников нет конфликтов с другими регистраторами.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Сотрудник
		               |ИЗ
		               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
		               |		ПО ВремяРегистрацииДокументов.Дата = ЗаписиРегистра.Дата
		               |			И ВремяРегистрацииДокументов.Сотрудник = ЗаписиРегистра.Сотрудник
		               |			И ВремяРегистрацииДокументов.ВремяРегистрации = ЗаписиРегистра.ВремяРегистрации
		               |			И (ЗаписиРегистра.Документ <> &Регистратор)";
					   
		РезультатЗапроса = Запрос.Выполнить();
					   
		ТребуетсяНовоеВремяРегистрации = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Если Не ТребуетсяНовоеВремяРегистрации Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Дата,
		               |	ВремяРегистрацииДокументов.Сотрудник,
		               |	ВремяРегистрацииДокументов.ВремяРегистрации
		               |ИЗ
		               |	ВТВремяРегистрацииДокументов КАК ВремяРегистрацииДокументов";
					   
		Выборка = Запрос.Выполнить().Выбрать();			   
		
		Пока Выборка.Следующий() Цикл 
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента[Выборка.Дата];
			Если ВремяРегистрацииСотрудников = Неопределено Тогда 
				ВремяРегистрацииСотрудников = Новый Соответствие;
				ВремяРегистрацииДокумента.Вставить(Выборка.Дата, ВремяРегистрацииСотрудников);
			КонецЕсли;
			ВремяРегистрацииСотрудников.Вставить(Выборка.Сотрудник, Выборка.ВремяРегистрации);
		КонецЦикла;
		
		// Если список сотрудников и дат в переданной таблице и в регистре не совпадает - нужно перезаписать набор.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВремяРегистрацииДокументов.Дата КАК Дата,
		               |	ВремяРегистрацииДокументов.Сотрудник КАК Сотрудник
		               |ПОМЕСТИТЬ ВТЗаписиРегистратора
		               |ИЗ
		               |	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументов
		               |ГДЕ
		               |	ВремяРегистрацииДокументов.Документ = &Регистратор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИзмеренияДаты.Сотрудник
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиРегистратора КАК ЗаписиРегистратора
		               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистратора.Дата
		               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистратора.Сотрудник
		               |ГДЕ
		               |	ЗаписиРегистратора.Сотрудник ЕСТЬ NULL 
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗаписиРегистратора.Сотрудник
		               |ИЗ
		               |	ВТЗаписиРегистратора КАК ЗаписиРегистратора
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ПО ЗаписиРегистратора.Дата = ИзмеренияДаты.Дата
		               |			И ЗаписиРегистратора.Сотрудник = ИзмеренияДаты.Сотрудник
		               |ГДЕ
		               |	ИзмеренияДаты.Сотрудник ЕСТЬ NULL ";
					   
		РезультатЗапроса = Запрос.Выполнить();
					   
		ЗаписатьНабор = Не РезультатЗапроса.Пустой();
		
	Иначе 
		
		// Определим свободное время для регистрации движений документа.
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаписиРегистра.Дата КАК Дата,
		               |	ЗаписиРегистра.Сотрудник КАК Сотрудник,
		               |	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ЗаписиРегистра.ВремяРегистрации, СЕКУНДА, 1)) КАК ВремяРегистрации
		               |ПОМЕСТИТЬ ВТСвободноеВремяРегистрации
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиРегистра КАК ЗаписиРегистра
		               |		ПО ИзмеренияДаты.Дата = ЗаписиРегистра.Дата
		               |			И ИзмеренияДаты.Сотрудник = ЗаписиРегистра.Сотрудник
		               |			И (ЗаписиРегистра.Документ <> &Регистратор)
		               |			И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРегистра.ВремяРегистрации, ДЕНЬ), ЗаписиРегистра.ВремяРегистрации, СЕКУНДА) МЕЖДУ 60 И 86339)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЗаписиРегистра.Дата,
		               |	ЗаписиРегистра.Сотрудник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИзмеренияДаты.Дата КАК Дата,
		               |	ИзмеренияДаты.Сотрудник КАК Сотрудник,
		               |	ЕСТЬNULL(СвободноеВремяРегистрации.ВремяРегистрации, ДАТАВРЕМЯ(1, 1, 1)) КАК ВремяРегистрации
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвободноеВремяРегистрации КАК СвободноеВремяРегистрации
		               |		ПО ИзмеренияДаты.Дата = СвободноеВремяРегистрации.Дата
		               |			И ИзмеренияДаты.Сотрудник = СвободноеВремяРегистрации.Сотрудник";
					   
		Выборка = Запрос.Выполнить().Выбрать();			   
		
		СдвигПериода = 60;
		
		Пока Выборка.Следующий() Цикл
			ВремяРегистрации = ?(ЗначениеЗаполнено(Выборка.ВремяРегистрации), Выборка.ВремяРегистрации, Выборка.Дата + СдвигПериода);
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента[Выборка.Дата];
			Если ВремяРегистрацииСотрудников = Неопределено Тогда 
				ВремяРегистрацииСотрудников = Новый Соответствие;
				ВремяРегистрацииДокумента.Вставить(Выборка.Дата, ВремяРегистрацииСотрудников);
			КонецЕсли;
			ВремяРегистрацииСотрудников.Вставить(Выборка.Сотрудник, ВремяРегистрации);
		КонецЦикла;
		
		ЗаписатьНабор = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьНабор Тогда 
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИзмеренияДаты.Дата КАК Дата,
		               |	ИзмеренияДаты.Сотрудник КАК Сотрудник
		               |ИЗ
		               |	ВТИзмеренияДаты КАК ИзмеренияДаты";
					  
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
			
		Пока Выборка.Следующий() Цикл 
			
			ДатаСобытия = Выборка.Дата;
			
			ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(ДатаСобытия);
			ВремяРегистрации = ВремяРегистрацииСотрудников.Получить(Выборка.Сотрудник);
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Дата = ДатаСобытия;
			ЗаписьРегистра.Сотрудник = Выборка.Сотрудник;
			ЗаписьРегистра.Документ = Регистратор;
			ЗаписьРегистра.ВремяРегистрации = ВремяРегистрации;
			ЗаписьРегистра.Проведен = Истина;
			
		КонецЦикла;
	
		НаборЗаписей.Записать();
		
	Иначе 
		
		НаборЗаписей = РегистрыСведений.ВремяРегистрацииДокументовПлановыхНачислений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл 
			ЗаписьРегистра.Проведен = Истина;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Для Каждого НаборЗаписейРегистра Из Движения Цикл 
		НаборЗаписейРегистра.ДополнительныеСвойства.Вставить("ВремяРегистрацииДокумента", ВремяРегистрацииДокумента);
	КонецЦикла;
	
КонецПроцедуры

Функция ВремяРегистрацииДокумента(Регистратор, Знач ДатаСобытия) Экспорт 
	
	Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
	Возврат ВремяРегистрацииСотрудникаДокумента(Регистратор, Сотрудник, ДатаСобытия);
	
КонецФункции

Функция ЗначенияВремениРегистрацииДокумента(Регистратор, СотрудникиДаты) Экспорт
	
	СдвигПериода = ЗначениеСдвигаПериодаЗаписиРегистра(Регистратор);
	
	Если СдвигПериода = Неопределено Тогда 
		
		КонкурирующиеРегистраторы = КонкурирующиеПоПериодуРегистраторыНачислений();
		Если КонкурирующиеРегистраторы.Найти(ТипЗнч(Регистратор)) = Неопределено Тогда 
			СдвигПериода = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнитьДаннымиРегистра = Ложь;
	
	Если СдвигПериода = Неопределено Тогда 
		СдвигПериода = 86339;
		ДополнитьДаннымиРегистра = Истина;
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	ЗначенияВремениРегистрации = Новый Соответствие;
	
	Для Каждого СтрокаСотрудника Из СотрудникиДаты Цикл 
		
		ДатаСобытия = НачалоДня(СтрокаСотрудника.ДатаСобытия);
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.ДатаСобытия = ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаСотрудника.Сотрудник;
		
		ВремяРегистрацииСотрудников = ЗначенияВремениРегистрации.Получить(ДатаСобытия);
		Если ВремяРегистрацииСотрудников = Неопределено Тогда 
			ВремяРегистрацииСотрудников = Новый Соответствие;
		    ЗначенияВремениРегистрации.Вставить(ДатаСобытия, ВремяРегистрацииСотрудников);
		КонецЕсли;
		ВремяРегистрацииСотрудников.Вставить(СтрокаСотрудника.Сотрудник, ДатаСобытия + СдвигПериода);
		
	КонецЦикла;
	
	// Если регистратор относится к конкурирующим по периоду - проверяем наличие записей в регистре.
	Если ДополнитьДаннымиРегистра Тогда 
	
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
		Запрос.УстановитьПараметр("Документ", Регистратор);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ИсходныеДанные.ДатаСобытия,
		               |	ИсходныеДанные.Сотрудник
		               |ПОМЕСТИТЬ ВТСотрудникиДаты
		               |ИЗ
		               |	&ИсходныеДанные КАК ИсходныеДанные
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВремяРегистрацииДокументовПлановыхНачислений.Дата КАК ДатаСобытия,
		               |	ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник,
		               |	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации
		               |ИЗ
		               |	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
		               |		ПО ВремяРегистрацииДокументовПлановыхНачислений.Дата = СотрудникиДаты.ДатаСобытия
		               |			И ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник = СотрудникиДаты.Сотрудник
		               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ = &Документ)";
					   
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ВремяРегистрацииСотрудников = ЗначенияВремениРегистрации.Получить(Выборка.ДатаСобытия);
			ВремяРегистрацииСотрудников.Вставить(Выборка.Сотрудник, Выборка.ВремяРегистрации);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияВремениРегистрации;	
		
КонецФункции

Функция ВремяРегистрацииСотрудникаДокумента(Регистратор, Сотрудник, Знач ДатаСобытия) Экспорт 
	
	Если Не ЗначениеЗаполнено(ДатаСобытия) Тогда 
		ДатаСобытия = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	НоваяСтрока = СотрудникиДаты.Добавить();
	НоваяСтрока.ДатаСобытия = ДатаСобытия;
	НоваяСтрока.Сотрудник = Сотрудник;
	
	ЗначенияВремениРегистрации = ЗначенияВремениРегистрацииДокумента(Регистратор, СотрудникиДаты);
	ВремяРегистрации = ЗначенияВремениРегистрации.Получить(НоваяСтрока.ДатаСобытия).Получить(НоваяСтрока.Сотрудник);
	
	Возврат ВремяРегистрации;
	
КонецФункции

Функция ВремяРегистрацииСотрудниковДокумента(Ссылка, СписокСотрудников, Знач ДатаСобытия) Экспорт 
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	
	ДатаСобытия = НачалоДня(ДатаСобытия);
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.ДатаСобытия = ДатаСобытия;
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ВремяРегистрацииДокумента = ЗначенияВремениРегистрацииДокумента(Ссылка, СотрудникиДаты);
	ВремяРегистрацииСотрудников = ВремяРегистрацииДокумента.Получить(ДатаСобытия);
	
	Возврат ВремяРегистрацииСотрудников;
	
КонецФункции

Процедура ОформлениеНесколькихДокументовНаОднуДатуДополнитьФорму(Форма, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт 
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РанееВведенныеДокументы", Новый ОписаниеТипов("СписокЗначений")));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДокументыВведенныеПозже", Новый ОписаниеТипов("СписокЗначений")));
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда
		
		Элементы = Форма.Элементы;
		ВведенныеНаДатуДокументыГруппа = Элементы.ВведенныеНаДатуДокументыГруппа;
		
		Если Элементы.Найти("РанееВведенныеДокументыГруппа") = Неопределено Тогда
			РанееВведенныеДокументыГруппа = Элементы.Добавить("РанееВведенныеДокументыГруппа", Тип("ГруппаФормы"), ВведенныеНаДатуДокументыГруппа);
			РанееВведенныеДокументыГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			РанееВведенныеДокументыГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			РанееВведенныеДокументыГруппа.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("НадписьРанееВведенныеДокументы") = Неопределено Тогда
			Элемент = Элементы.Добавить("НадписьРанееВведенныеДокументы", Тип("ДекорацияФормы"), РанееВведенныеДокументыГруппа);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Элемент.Заголовок = Новый ФорматированнаяСтрока("");
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьРанееВведенныеДокументы");
			Элемент.АвтоМаксимальнаяШирина = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("ДокументыВведенныеПозжеГруппа") = Неопределено Тогда
			ДокументыВведенныеПозжеГруппа = Элементы.Добавить("ДокументыВведенныеПозжеГруппа", Тип("ГруппаФормы"), ВведенныеНаДатуДокументыГруппа);
			ДокументыВведенныеПозжеГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ДокументыВведенныеПозжеГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ДокументыВведенныеПозжеГруппа.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("НадписьДокументыВведенныеПозже") = Неопределено Тогда
			Элемент = Элементы.Добавить("НадписьДокументыВведенныеПозже", Тип("ДекорацияФормы"), ДокументыВведенныеПозжеГруппа);
			Элемент.Вид = ВидДекорацииФормы.Надпись;
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
			Элемент.Заголовок = Новый ФорматированнаяСтрока("");
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОткрытьДокументыВведенныеПозже");
			Элемент.АвтоМаксимальнаяШирина = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстНадписиОДокументахВведенныхНаДату(Форма, ВремяРегистрации, МассивСотрудников, Регистратор, ЧтениеБезОграничений = Истина, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Если Не ЧтениеБезОграничений Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ДокументыНаДату = ВведенныеНаДатуДокументыПлановыхНачислений(ВремяРегистрации, МассивСотрудников, Регистратор, ИсправленныйДокумент);
	Форма.РанееВведенныеДокументы.ЗагрузитьЗначения(ДокументыНаДату.РанееВведенныеДокументы);
	Форма.ДокументыВведенныеПозже.ЗагрузитьЗначения(ДокументыНаДату.ДокументыВведенныеПозже);
	
	Если Форма.РанееВведенныеДокументы.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = '%1 уже проведены';
									|en = '%1 are already posted'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'другие документы';
																	|en = 'other documents'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'При заполнении необходимо учитывать эти проведенные ранее документы.';
									|en = 'It is required to consider these previously posted documents during population.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", НСтр("ru = 'Открыть документы';
																																		|en = 'Open documents'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	ИначеЕсли Форма.РанееВведенныеДокументы.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = '%1 уже проведен документ';
									|en = '%1 document is already posted'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.РанееВведенныеДокументы[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'При заполнении необходимо учитывать проведенный ранее документ.';
									|en = 'It is required to consider a previously posted document during population.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", Форма.РанееВведенныеДокументы[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
	КонецЕсли;
	
	Если Форма.ДокументыВведенныеПозже.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'После этого документа %1 проведены';
									|en = 'Posted after this document %1'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'другие документы';
																	|en = 'other documents'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'Зарплата будет считаться на основании более поздних документов.';
									|en = 'Salary will be calculated based on the later documents.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", НСтр("ru = 'Открыть документы';
																																		|en = 'Open documents'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	ИначеЕсли Форма.ДокументыВведенныеПозже.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'После этого документа %1 проведен документ';
									|en = 'Document was posted after this document %1'") + " ";
		ТекстНадписиНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиНачало, Формат(ВремяРегистрации, "ДЛФ=ДД"));
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.ДокументыВведенныеПозже[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'Зарплата будет считаться на основании более позднего документа.';
									|en = 'Salary will be calculated based on the later document.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", Форма.ДокументыВведенныеПозже[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ВведенныеНаДатуДокументыПлановыхНачислений(ВремяРегистрации, МассивСотрудников, Регистратор = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("ВремяРегистрации", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.ВремяРегистрации = ВремяРегистрации;
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ДокументыНаДату = КонкурирующиеДокументыПлановыхНачислений(СотрудникиДаты, Регистратор, ИсправленныйДокумент);
	
	Возврат ДокументыНаДату;
	
КонецФункции

Процедура УстановитьТекстНадписиОКонкурирующихДокументахПлановыхНачислений(Форма, СотрудникиДаты, Регистратор, ЧтениеБезОграничений = Истина, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Если Не ЧтениеБезОграничений Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	ДокументыПлановыхНачислений = КонкурирующиеДокументыПлановыхНачислений(СотрудникиДаты, Регистратор, ИсправленныйДокумент);
	Форма.РанееВведенныеДокументы.ЗагрузитьЗначения(ДокументыПлановыхНачислений.РанееВведенныеДокументы);
	Форма.ДокументыВведенныеПозже.ЗагрузитьЗначения(ДокументыПлановыхНачислений.ДокументыВведенныеПозже);
	
	Если Форма.РанееВведенныеДокументы.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'На выбранные даты уже проведены';
									|en = 'Already posted on the selected dates'") + " ";
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'другие документы';
																	|en = 'other documents'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'При заполнении необходимо учитывать эти проведенные ранее документы.';
									|en = 'It is required to consider these previously posted documents during population.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", НСтр("ru = 'Открыть документы';
																																		|en = 'Open documents'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	ИначеЕсли Форма.РанееВведенныеДокументы.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'Ранее уже проведен документ';
									|en = 'Document is already posted'") + " ";
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.РанееВведенныеДокументы[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'При заполнении необходимо учитывать проведенный ранее документ.';
									|en = 'It is required to consider a previously posted document during population.'");
		ТекстНадписиОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНадписиОкончание, Регистратор.Метаданные().Синоним);  
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьРанееВведенныеДокументы", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьРанееВведенныеДокументы", "Заголовок", Форма.РанееВведенныеДокументы[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РанееВведенныеДокументыГруппа", "Видимость", Ложь);
	КонецЕсли;
	
	Если Форма.ДокументыВведенныеПозже.Количество() > 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'После этого документа проведены';
									|en = 'Posted after this document'") + " ";
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(НСтр("ru = 'другие документы';
																	|en = 'other documents'"), , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'Зарплата будет считаться на основании более поздних документов.';
									|en = 'Salary will be calculated based on the later documents.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", НСтр("ru = 'Открыть документы';
																																		|en = 'Open documents'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	ИначеЕсли Форма.ДокументыВведенныеПозже.Количество() = 1 Тогда 
		ТекстНадписиНачало = НСтр("ru = 'После этого документа проведен документ';
									|en = 'After this document a document is posted'") + " ";
		ТекстНадписиГиперссылка = Новый ФорматированнаяСтрока(Форма.ДокументыВведенныеПозже[0].Значение.Метаданные().Синоним, , , , "ссылка");
		ТекстНадписиОкончание = НСтр("ru = 'Зарплата будет считаться на основании более позднего документа.';
									|en = 'Salary will be calculated based on the later document.'");
		ТекстНадписи = Новый ФорматированнаяСтрока(ТекстНадписиНачало, ТекстНадписиГиперссылка, ". ", ТекстНадписиОкончание);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НадписьДокументыВведенныеПозже", "Заголовок", ТекстНадписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ОткрытьДокументыВведенныеПозже", "Заголовок", Форма.ДокументыВведенныеПозже[0].Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Истина);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ДокументыВведенныеПозжеГруппа", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция КонкурирующиеДокументыПлановыхНачислений(СотрудникиДаты, Регистратор = Неопределено, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", СотрудникиДаты);


	Запрос.УстановитьПараметр("Документ", Регистратор);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходныеДанные.Сотрудник,
	               |	ИсходныеДанные.ВремяРегистрации КАК ВремяРегистрации,
	               |	НАЧАЛОПЕРИОДА(ИсходныеДанные.ВремяРегистрации, ДЕНЬ) КАК Дата
	               |ПОМЕСТИТЬ ВТСотрудникиДаты
	               |ИЗ
	               |	&ИсходныеДанные КАК ИсходныеДанные
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Дата,
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Документ,
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник,
	               |	ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации
	               |ПОМЕСТИТЬ ВТДокументыПлановыхНачислений
	               |ИЗ
	               |	РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
	               |		ПО ВремяРегистрацииДокументовПлановыхНачислений.Дата = СотрудникиДаты.Дата
	               |			И ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник = СотрудникиДаты.Сотрудник
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &Документ)
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &ИсправленныйДокумент)
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Проведен)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыПлановыхНачислений.Документ,
	               |	МИНИМУМ(ДокументыПлановыхНачислений.ВремяРегистрации) КАК ВремяРегистрации
	               |ИЗ
	               |	ВТДокументыПлановыхНачислений КАК ДокументыПлановыхНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
	               |		ПО ДокументыПлановыхНачислений.Дата = СотрудникиДаты.Дата
	               |			И ДокументыПлановыхНачислений.Сотрудник = СотрудникиДаты.Сотрудник
	               |			И ДокументыПлановыхНачислений.ВремяРегистрации < СотрудникиДаты.ВремяРегистрации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокументыПлановыхНачислений.Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремяРегистрации
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыПлановыхНачислений.Документ,
	               |	МИНИМУМ(ДокументыПлановыхНачислений.ВремяРегистрации) КАК ВремяРегистрации
	               |ИЗ
	               |	ВТДокументыПлановыхНачислений КАК ДокументыПлановыхНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
	               |		ПО ДокументыПлановыхНачислений.Дата = СотрудникиДаты.Дата
	               |			И ДокументыПлановыхНачислений.Сотрудник = СотрудникиДаты.Сотрудник
	               |			И ДокументыПлановыхНачислений.ВремяРегистрации > СотрудникиДаты.ВремяРегистрации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокументыПлановыхНачислений.Документ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВремяРегистрации";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДокументыПлановыхНачислений = Новый Структура;
	ДокументыПлановыхНачислений.Вставить("РанееВведенныеДокументы", РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("Документ"));
	ДокументыПлановыхНачислений.Вставить("ДокументыВведенныеПозже", РезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("Документ"));
	
	Возврат ДокументыПлановыхНачислений;
	
КонецФункции

Процедура ПроверитьНаличиеДокументовСФиксированнымСдвигомНаДату(СотрудникиДаты, Документ, Отказ = Ложь, ИсправленныйДокумент = Неопределено) Экспорт 
	
	Сдвиг = ЗначениеСдвигаПериодаЗаписиРегистра(Документ);
	
	Если Сдвиг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.УстановитьПараметр("Сдвиг", Сдвиг);
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиДаты.Сотрудник КАК Сотрудник,
	               |	СотрудникиДаты.Период КАК Период
	               |ПОМЕСТИТЬ ВТДанныеДокумента
	               |ИЗ
	               |	&СотрудникиДаты КАК СотрудникиДаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеДокумента.Сотрудник,
	               |	НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, ДЕНЬ) КАК Дата,
	               |	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеДокумента.Период, ДЕНЬ), СЕКУНДА, &Сдвиг) КАК ВремяРегистрации
	               |ПОМЕСТИТЬ ВТВремяРегистрацииДокумента
	               |ИЗ
	               |	ВТДанныеДокумента КАК ДанныеДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Дата,
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Документ,
	               |	ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник
	               |ИЗ
	               |	ВТВремяРегистрацииДокумента КАК ВремяРегистрацииДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВремяРегистрацииДокументовПлановыхНачислений КАК ВремяРегистрацииДокументовПлановыхНачислений
	               |		ПО ВремяРегистрацииДокумента.Дата = ВремяРегистрацииДокументовПлановыхНачислений.Дата
	               |			И ВремяРегистрацииДокумента.Сотрудник = ВремяРегистрацииДокументовПлановыхНачислений.Сотрудник
	               |			И ВремяРегистрацииДокумента.ВремяРегистрации = ВремяРегистрацииДокументовПлановыхНачислений.ВремяРегистрации
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &Документ)
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Документ <> &ИсправленныйДокумент)
	               |			И (ВремяРегистрацииДокументовПлановыхНачислений.Проведен)";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);			   
	
	ШаблонСообщения = НСтр("ru = 'Сотрудник %1: на дату %2 уже проведен документ %3';
							|en = 'The %1 employee: the %3 document is already posted as of %2'");
	
	Пока Выборка.Следующий() Цикл 
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Сотрудник, Формат(Выборка.Дата, "ДЛФ=Д"), Выборка.Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗафиксироватьПериодВСтрокеНабора(НаборЗаписей, СтрокаНабора) Экспорт
	СтрокиСФиксированнымПериодом = Неопределено;
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("СтрокиСФиксированнымПериодом", СтрокиСФиксированнымПериодом) Тогда
		СтрокиСФиксированнымПериодом = Новый Соответствие;
		НаборЗаписей.ДополнительныеСвойства.Вставить("СтрокиСФиксированнымПериодом", СтрокиСФиксированнымПериодом);
	КонецЕсли;
	
	СтрокиСФиксированнымПериодом.Вставить(СтрокаНабора, Истина);	
КонецПроцедуры

Функция ПериодВСтрокеНабораЗафиксирован(НаборЗаписей, СтрокаНабора) Экспорт 
	СтрокиСФиксированнымПериодом = Неопределено;
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("СтрокиСФиксированнымПериодом", СтрокиСФиксированнымПериодом) Тогда
		Возврат Ложь;
	Иначе 
		Возврат СтрокиСФиксированнымПериодом[СтрокаНабора] = Истина;	
	КонецЕсли;	
КонецФункции	

#КонецОбласти

#Область МногофункциональныеДокументы

// Добавляет на форму многофункционального документа признак обработки вторым ответственным и второго ответственного.
//
Процедура МногофункциональныеДокументыДобавитьЭлементыФормы(Форма, Заголовок, 
				ИмяГруппы = "РасчетчикГруппа", 
				ОбработанВторымОтветственнымИмя = "ДокументРассчитан", 
				ВторойОтветственныйИмя = Неопределено, 
				ПолныеПраваНаДокументИмя = "РегистрацияНачисленийДоступна") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда 
		Возврат;
	КонецЕсли;	
	
	ГруппаВторойОтветственный = Форма.Элементы.Найти(ИмяГруппы);
	
	ВторойОтветственныйСтраницы = Форма.Элементы.Найти("ВторойОтветственныйСтраницы");
	
	Если ВторойОтветственныйСтраницы = Неопределено Тогда 
		
		Если Форма.Элементы.Найти(ОбработанВторымОтветственнымИмя) = Неопределено Тогда 
			ОбработанВторымОтветственным = Форма.Элементы.Добавить(ОбработанВторымОтветственнымИмя, Тип("ПолеФормы"), ГруппаВторойОтветственный);
			ОбработанВторымОтветственным.Вид = ВидПоляФормы.ПолеФлажка;
			ОбработанВторымОтветственным.ПутьКДанным = "Объект." + ОбработанВторымОтветственнымИмя;
			ОбработанВторымОтветственным.Заголовок = Заголовок;
			ОбработанВторымОтветственным.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ОбработанВторымОтветственным.Подсказка = НСтр("ru = 'Документ будет принят к учету только после установки этого флажка';
															|en = 'Document will be entered into accounting only after this check box is selected'");
			ОбработанВторымОтветственным.УстановитьДействие("ПриИзменении", "Подключаемый_" + ОбработанВторымОтветственнымИмя + "ПриИзменении");
		КонецЕсли;
		
		Если ВторойОтветственныйИмя <> Неопределено И Форма.Элементы.Найти(ВторойОтветственныйИмя) = Неопределено Тогда 
			ВторойОтветственный = Форма.Элементы.Добавить(ВторойОтветственныйИмя, Тип("ПолеФормы"), ГруппаВторойОтветственный);
			ВторойОтветственный.Вид = ВидПоляФормы.ПолеВвода;
			ВторойОтветственный.ПутьКДанным = "Объект." + ВторойОтветственныйИмя;
			ВторойОтветственный.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ВторойОтветственный.РастягиватьПоГоризонтали = Ложь;
			ВторойОтветственный.Ширина = 20;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значение функциональной опции ИспользоватьМногофункциональностьДокументовЗарплатаКадры.
//
Процедура УстановитьИспользованиеМногофункциональностиВДокументах() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьМногофункциональность = Ложь;
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда 
		
		Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда 
			ИспользоватьМногофункциональность = Истина;
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
		
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПособийФСС");
			РолиКадровика.Добавить("Роль.ЧтениеПособийФСС");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеКомандировок");
			РолиКадровика.Добавить("Роль.ЧтениеКомандировок");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеМатериальнойПомощи");
			РолиКадровика.Добавить("Роль.ЧтениеМатериальнойПомощи");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОтгулов");
			РолиКадровика.Добавить("Роль.ЧтениеОтгулов");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыДнейУходаЗаДетьмиИнвалидами");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыДнейУходаЗаДетьмиИнвалидами");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОтпусков");
			РолиКадровика.Добавить("Роль.ЧтениеОтпусков");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПремийПоощрений");
			РолиКадровика.Добавить("Роль.ЧтениеПремийПоощрений");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПрогуловНеявок");
			РолиКадровика.Добавить("Роль.ЧтениеПрогуловНеявок");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеПростоев");
			РолиКадровика.Добавить("Роль.ЧтениеПростоев");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеНачисленнойЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.ЧтениеНачисленнойЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.РедактированиеНачисленнойЗарплатыВДокументах");
			РолиРасчетчика.Добавить("Роль.ПросмотрНачисленнойЗарплатыВДокументах");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
			
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеКадровогоСостоянияРасширенная");
			РолиКадровика.Добавить("Роль.ЧтениеКадровогоСостоянияРасширенная");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ЧтениеОплатыПоСреднему");
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеСовмещения");
			РолиКадровика.Добавить("Роль.ЧтениеСовмещения");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.ЧтениеДанныхДляНачисленияЗарплатыРасширенная");
			РолиРасчетчика.Добавить("Роль.РедактированиеПлановыхНачисленийВДокументах");
			РолиРасчетчика.Добавить("Роль.ПросмотрПлановыхНачисленийВДокументах");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ИспользоватьМногофункциональность Тогда 
			
			РолиКадровика = Новый Массив;			   
			РолиКадровика.Добавить("Роль.ДобавлениеИзменениеРаботыСверхурочноИВПраздники");
			РолиКадровика.Добавить("Роль.ЧтениеРаботыСверхурочноИВПраздники");
			
			РолиРасчетчика = Новый Массив;			   
			РолиРасчетчика.Добавить("Роль.ДобавлениеИзменениеРабочегоВремени");
			РолиРасчетчика.Добавить("Роль.ЧтениеРабочегоВремени");
			РолиРасчетчика.Добавить("Роль.УтверждениеДокументовУчетаВремени");
			
			Если ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Тогда 
				ИспользоватьМногофункциональность = Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ИспользоватьМногофункциональность <> Константы.ИспользоватьМногофункциональностьДокументов.Получить() Тогда 
		Константы.ИспользоватьМногофункциональностьДокументов.Установить(ИспользоватьМногофункциональность);
	КонецЕсли;	
	
КонецПроцедуры

// Функция проверяет, существуют ли пользователи с правами кадровика, но без прав расчетчика.
//
// Параметры:
//   РолиКадровика - массив полных имен ролей кадровика.
//   РолиРасчетчика - массив полных имен ролей расчетчика.
//
Функция ЕстьКадровикиБезПравРасчетчика(РолиКадровика, РолиРасчетчика) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РолиКадровика", РолиКадровика);
	Запрос.УстановитьПараметр("РолиРасчетчика", РолиРасчетчика);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрофилиГруппДоступаРоли.Ссылка КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиПраваКадровика
	               |ИЗ
	               |	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	               |ГДЕ
	               |	ПрофилиГруппДоступаРоли.Роль.ПолноеИмя В(&РолиКадровика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПрофилиГруппДоступаРоли.Ссылка КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиПраваРасчетчика
	               |ИЗ
	               |	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	               |ГДЕ
	               |	ПрофилиГруппДоступаРоли.Роль.ПолноеИмя В(&РолиРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрофилиПраваКадровика.ПрофильДоступа КАК ПрофильДоступа
	               |ПОМЕСТИТЬ ВТПрофилиКадровикаБезПравРасчетчика
	               |ИЗ
	               |	ВТПрофилиПраваКадровика КАК ВТПрофилиПраваКадровика
	               |ГДЕ
	               |	НЕ ВТПрофилиПраваКадровика.ПрофильДоступа В
	               |				(ВЫБРАТЬ
	               |					ВТПрофилиПраваРасчетчика.ПрофильДоступа
	               |				ИЗ
	               |					ВТПрофилиПраваРасчетчика КАК ВТПрофилиПраваРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПрофилиКадровикаБезПравРасчетчика.ПрофильДоступа
	               |ИЗ
	               |	ВТПрофилиКадровикаБезПравРасчетчика КАК ВТПрофилиКадровикаБезПравРасчетчика";

	РезультатЗапроса = Запрос.Выполнить();			   
	
	Если РезультатЗапроса.Пустой() Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ПрофильАдминистратор", УправлениеДоступом.ПрофильАдминистратор());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаКадровика
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль В
	               |			(ВЫБРАТЬ
	               |				ВТПрофилиКадровикаБезПравРасчетчика.ПрофильДоступа
	               |			ИЗ
	               |				ВТПрофилиКадровикаБезПравРасчетчика КАК ВТПрофилиКадровикаБезПравРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка КАК ГруппаДоступа
	               |ПОМЕСТИТЬ ВТГруппыДоступаРасчетчика
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль В
	               |			(ВЫБРАТЬ
	               |				ВТПрофилиПраваРасчетчика.ПрофильДоступа
	               |			ИЗ
	               |				ВТПрофилиПраваРасчетчика КАК ВТПрофилиПраваРасчетчика)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыДоступа.Ссылка
	               |ИЗ
	               |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	               |ГДЕ
	               |	ГруппыДоступа.Профиль = &ПрофильАдминистратор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК ПользовательГруппа
	               |ПОМЕСТИТЬ ВТПользователиИГруппыКадровики
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТГруппыДоступаКадровика.ГруппаДоступа
	               |			ИЗ
	               |				ВТГруппыДоступаКадровика КАК ВТГруппыДоступаКадровика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ГруппыДоступаПользователи.Пользователь КАК ПользовательГруппа
	               |ПОМЕСТИТЬ ВТПользователиИГруппыРасчетчики
	               |ИЗ
	               |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	               |ГДЕ
	               |	ГруппыДоступаПользователи.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТГруппыДоступаРасчетчика.ГруппаДоступа
	               |			ИЗ
	               |				ВТГруппыДоступаРасчетчика КАК ВТГруппыДоступаРасчетчика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа КАК Пользователь
	               |ПОМЕСТИТЬ ВТКадровики
	               |ИЗ
	               |	ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики
	               |ГДЕ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа ССЫЛКА Справочник.Пользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |ИЗ
	               |	ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики
	               |ГДЕ
	               |	ВТПользователиИГруппыКадровики.ПользовательГруппа ССЫЛКА Справочник.ВнешниеПользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыВнешнихПользователейСостав.ВнешнийПользователь
	               |ИЗ
	               |	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
	               |ГДЕ
	               |	ГруппыВнешнихПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыКадровики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыКадровики КАК ВТПользователиИГруппыКадровики)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа КАК Пользователь
	               |ПОМЕСТИТЬ ВТРасчетчики
	               |ИЗ
	               |	ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики
	               |ГДЕ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа ССЫЛКА Справочник.Пользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |ИЗ
	               |	ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики
	               |ГДЕ
	               |	ВТПользователиИГруппыРасчетчики.ПользовательГруппа ССЫЛКА Справочник.ВнешниеПользователи
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыПользователейСостав.Пользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	               |ГДЕ
	               |	ГруппыПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ГруппыВнешнихПользователейСостав.ВнешнийПользователь
	               |ИЗ
	               |	Справочник.ГруппыВнешнихПользователей.Состав КАК ГруппыВнешнихПользователейСостав
	               |ГДЕ
	               |	ГруппыВнешнихПользователейСостав.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТПользователиИГруппыРасчетчики.ПользовательГруппа
	               |			ИЗ
	               |				ВТПользователиИГруппыРасчетчики КАК ВТПользователиИГруппыРасчетчики)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТКадровики.Пользователь
	               |ИЗ
	               |	ВТКадровики КАК ВТКадровики
	               |ГДЕ
	               |	НЕ ВТКадровики.Пользователь В
	               |				(ВЫБРАТЬ
	               |					ВТРасчетчики.Пользователь
	               |				ИЗ
	               |					ВТРасчетчики КАК ВТРасчетчики)";
				   
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Возврат Не РезультатЗапроса.Пустой();			   
	
КонецФункции	

// Адаптер для метода см. МногофункциональныеДокументыБЗК.ПраваНаДокумент. Сохранен для совместимости.
// для новых документов необходимо использовать см. МногофункциональныеДокументыБЗК.ПраваНаДокумент
// Проверяет права текущего пользователя на документ. Возвращает структуру со свойствами:
// ПолныеПраваПоРолям - булево, полный доступ ко всем реквизитам документа (без учета RLS).
// ОграниченияНаУровнеЗаписей - структура со свойствами:
// 			ЧтениеБезОграничений - булево, отсутствие ограничений на чтение на уровне записей.
// 			ИзменениеБезОграничений - булево, отсутствие ограничений на изменение на уровне записей.
// Если ПолныеПраваПоРолям - Ложь, то ЧтениеБезОграничений и ИзменениеБезОграничений всегда тоже Ложь.
//
Функция ПраваНаМногофункциональныйДокумент(Объект, ДанныеЗаполнения = Неопределено) Экспорт 
	ВсеРазделы = МногофункциональныеДокументыБЗККлиентСервер.РазделыДанных();
	ВсеВидыПрав = МногофункциональныеДокументыБЗККлиентСервер.ВидыПравНаРазделыДанных(); 
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);	
	ОписаниеРазделов = МенеджерДокумента.ОписаниеРазделовДанных();
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ОписаниеРазделов.Количество() = 2,
		Нстр("ru = 'Использование метода ПраваНаМногофункциональныйДокумент возможно 
									  |только для документов содержащих данные двух разделов.';
									  |en = 'Using the ПраваНаМногофункциональныйДокумент method is only available
									  | for the documents containing data from two sections.'"));								  
			
	ОбщегоНазначенияКлиентСервер.Проверить(
		ОписаниеРазделов[ВсеРазделы.КадровыеДанные] <> Неопределено,
		Нстр("ru = 'Описание разделов документа должно содержать описание раздела КадровыеДанные.';
			|en = 'The document sections details should contain the КадровыеДанные section details.'"));
	
	ПраваНаДокумент = МногофункциональныеДокументыБЗК.ПраваНаДокумент(Объект);

	ПолныеПраваНаДокумент = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	ПраваНаВторойРаздел = Неопределено;
	ВторойРаздел = Неопределено;
	Для Каждого ПраваНаРаздел Из ПраваНаДокумент Цикл
		Если ПраваНаРаздел.Ключ <> ВсеРазделы.КадровыеДанные Тогда
			ПраваНаВторойРаздел = ПраваНаРаздел.Значение;
			ВторойРаздел = ПраваНаРаздел.Ключ;
			
			ПолныеПраваНаДокумент = ПолныеПраваНаДокумент 
				И (МногофункциональныеДокументыБЗК.ЕстьПравоНаРаздел(
					ВсеВидыПрав.Редактирование,
					ПраваНаРаздел.Ключ)
				Или МногофункциональныеДокументыБЗК.ЕстьПравоНаРаздел(
						ВсеВидыПрав.Просмотр,
						ПраваНаРаздел.Ключ));
		КонецЕсли;	
	КонецЦикла;		
	
	ЧтениеБезОграничений = Ложь;
	ИзменениеБезОграничений = Ложь;
	
	Если ПолныеПраваНаДокумент Тогда 
		ИзменениеБезОграничений = ПраваНаВторойРаздел.Редактирование;
		ЧтениеБезОграничений = ИзменениеБезОграничений;
		Если Не ЧтениеБезОграничений Тогда
			ЧтениеБезОграничений = ПраваНаВторойРаздел.Просмотр;
		КонецЕсли;
	КонецЕсли;	
		
	ИзменениеКадровыхДанных = ИзменениеБезОграничений;
	Если Не ИзменениеКадровыхДанных Тогда
		ИзменениеКадровыхДанных = ПраваНаДокумент[ВсеРазделы.КадровыеДанные].Редактирование;
	КонецЕсли;
	
	ПраваНаДокумент = Новый Структура(
		"ПолныеПраваПоРолям, 
		|ОграниченияНаУровнеЗаписей"); 
	ПраваНаДокумент.ПолныеПраваПоРолям = ПолныеПраваНаДокумент;
	
	ОграниченияНаУровнеЗаписей = Новый Структура(
		"ЧтениеБезОграничений, 
		|ИзменениеБезОграничений, 
		|ИзменениеКадровыхДанных");
		
	ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений = ЧтениеБезОграничений;
	ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений = ИзменениеБезОграничений;
	ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных = ИзменениеКадровыхДанных;
	
	ПраваНаДокумент.ОграниченияНаУровнеЗаписей = ОграниченияНаУровнеЗаписей;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.ПриПолученииПравНаМногоФункциональныйДокумент(Объект, ПраваНаДокумент, ВторойРаздел);
	КонецЕсли;
	
	Возврат ПраваНаДокумент;									
										
КонецФункции

Процедура УстановитьОтображениеПолейМногофункциональныхДокументов(Форма, ИменаЭлементов, ИмяГруппыСтраницы = Неопределено) Экспорт 
	
	Элементы = Форма.Элементы;
	
	ИзменениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений;
	ЧтениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений;
	ИзменениеКадровыхДанных = Форма.ОграниченияНаУровнеЗаписей.ИзменениеКадровыхДанных;
	
	ОписаниеДокумента = МногофункциональныеДокументыБЗК.ОписаниеМногофункциональногоДокументаПредыдущийФормат(Форма.Объект.Ссылка);
	
	Если Не Форма.РегистрацияНачисленийДоступна Тогда 
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда 
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "Видимость", Ложь);
			Иначе 
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Ложь);
			КонецЕсли;
		КонецЦикла;

		Если ОписаниеДокумента.ВторойОтветственный = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Ложь);
		КонецЕсли;
		
		Если ИмяГруппыСтраницы <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыСтраницы, "ОтображениеСтраниц", ОтображениеСтраницФормы.Нет);
		КонецЕсли;
		
	Иначе 
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл 
			ЭлементФормы = Элементы.Найти(ИмяЭлемента);
			Если ЭлементФормы = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
			Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда 
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "Видимость", ЧтениеБезОграничений);
				УстановитьОтображениеГруппыФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не ИзменениеБезОграничений);
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЧтениеБезОграничений);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Доступность", ИзменениеБезОграничений);
			Иначе 	
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", ЧтениеБезОграничений);
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "ТолькоПросмотр", Не ИзменениеБезОграничений);
			КонецЕсли;	
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументУтвержденСтраницы", "Видимость", ЧтениеБезОграничений);
		
		Если ОписаниеДокумента.ВторойОтветственный = Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", ИзменениеБезОграничений);
		КонецЕсли;
		
		Если ОписаниеДокумента.ВидУчета = "НачисленнаяЗарплата" Тогда
			УстановитьОтображениеГруппыФормы(Элементы, "ВыплатаГруппа", "Видимость", ЧтениеБезОграничений);
		КонецЕсли;
		
		Если ИмяГруппыСтраницы <> Неопределено Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяГруппыСтраницы, "ОтображениеСтраниц", 
								?(ЧтениеБезОграничений, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет));
		КонецЕсли;
							
	КонецЕсли;
	
	Если Не ИзменениеКадровыхДанных Тогда 
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандПечатиМногофункциональногоДокумента(Форма, МестоРазмещенияКомандПоУмолчанию = Неопределено) Экспорт 
	
	ЧтениеБезОграничений = Форма.ОграниченияНаУровнеЗаписей.ЧтениеБезОграничений;
	
	ИспользуетсяРасчетЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная");
	
	КомандыПечати = УправлениеПечатью.КомандыПечатиФормы(Форма);
	
	ТаблицаКоманд = КомандыПечати.Скопировать(,"МестоРазмещения");
	ТаблицаКоманд.Свернуть("МестоРазмещения");
	МестаРазмещения = ТаблицаКоманд.ВыгрузитьКолонку("МестоРазмещения");
	
	Для Каждого МестоРазмещения Из МестаРазмещения Цикл
		
		НайденныеКоманды = КомандыПечати.НайтиСтроки(Новый Структура("МестоРазмещения,СкрытаФункциональнымиОпциями", МестоРазмещения, Ложь));
		
		МестоРазмещенияКоманд = Форма.Элементы.Найти(МестоРазмещения);
		Если МестоРазмещенияКоманд = Неопределено Тогда
			МестоРазмещенияКоманд = МестоРазмещенияКомандПоУмолчанию;
		КонецЕсли;
		
		Если НайденныеКоманды.Количество() > 0 Тогда
			
			Если МестоРазмещенияКоманд = Неопределено Тогда
				МестоРазмещенияКоманд = Форма.КоманднаяПанель;
			КонецЕсли;
			
			КоличествоВидимыхКоманд = 0;
			МестоРазмещенияКомандИмя = МестоРазмещенияКоманд.Имя;
			
			ОднаКомандаПечати = КомандыПечати.Количество() = 1;
			Если Не ОднаКомандаПечати Тогда
				МестоРазмещенияКомандИмя = МестоРазмещенияКомандИмя + "ПодменюПечать";
			КонецЕсли;
			
			Для Каждого ОписаниеКомандыПечати Из НайденныеКоманды Цикл
				
				Видимость = Истина;
				
				Если ОписаниеКомандыПечати.ДополнительныеПараметры.Свойство("ТребуетсяЧтениеБезОграничений") Тогда
					
					Видимость = Не ИспользуетсяРасчетЗарплаты Или ЧтениеБезОграничений;
					
					НомерКоманды = ОписаниеКомандыПечати.Владелец().Индекс(ОписаниеКомандыПечати);
					ИмяКоманды = МестоРазмещенияКомандИмя + "КомандаПечати" + НомерКоманды;
					ИмяЭлемента = МестоРазмещенияКомандИмя + ИмяКоманды;
					
					ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", Видимость);
					
				КонецЕсли;
				
				Если Видимость Тогда 
					КоличествоВидимыхКоманд = КоличествоВидимыхКоманд + 1;
				КонецЕсли;
				
			КонецЦикла;

			Если Не ОднаКомандаПечати Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, МестоРазмещенияКомандИмя, "Видимость", КоличествоВидимыхКоманд <> 0);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеСпискаМногофункциональныхДокументов(Форма, ИмяТаблицы = "Список", ИмяРеквизита = "ТребуетОбработки") Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Или Не ПолучитьФункциональнуюОпцию("ИспользоватьМногофункциональностьДокументовЗарплатаКадры") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
	ЖирныйШрифт = Новый Шрифт(ТекущийШрифт, , , Истина);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ЖирныйШрифт);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяРеквизита);
	ЭлементОтбора.ПравоеЗначение = Истина;
	
КонецПроцедуры

Процедура УстановитьВторогоОтветственногоВМногофункциональныхДокументах(Форма, ПолныеПраваНаДокумент) Экспорт 
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДокумента = МногофункциональныеДокументыБЗК.ОписаниеМногофункциональногоДокументаПредыдущийФормат(Форма.Объект.Ссылка);
	
	Если ПолныеПраваНаДокумент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Истина);
		Если Форма.Объект[ОписаниеДокумента.РеквизитСостояние] Тогда 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Истина);
			Если Не ЗначениеЗаполнено(Форма.Объект[ОписаниеДокумента.ВторойОтветственный]) Тогда 
				Форма.Объект[ОписаниеДокумента.ВторойОтветственный] = Пользователи.ТекущийПользователь();
			КонецЕсли;	
		Иначе 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Ложь);
			Если ЗначениеЗаполнено(Форма.Объект[ОписаниеДокумента.ВторойОтветственный]) Тогда 
				Форма.Объект[ОписаниеДокумента.ВторойОтветственный] = Неопределено;
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.РеквизитСостояние, "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеДокумента.ВторойОтветственный, "Доступность", Ложь);
	КонецЕсли;
	
	УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(Форма, ОписаниеДокумента.РеквизитСостояние);
	
КонецПроцедуры	

Процедура УстановитьПредупреждающуюНадписьВМногофункциональныхДокументах(Форма, ОбработанВторымОтветственнымИмяРеквизита) Экспорт 
	
	Флажок = Форма.Элементы.Найти(ОбработанВторымОтветственнымИмяРеквизита);
	Если Флажок = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Группа = Форма.Элементы[ОбработанВторымОтветственнымИмяРеквизита].Родитель;
	Если ТипЗнч(Группа) = Тип("ГруппаФормы") И Группа.ОтображатьЗаголовок Тогда
		Если Форма.Объект[ОбработанВторымОтветственнымИмяРеквизита] Тогда
			Группа.ЦветТекстаЗаголовка = Новый Цвет;
			Группа.Заголовок = НСтр("ru = 'Расчетчик';
									|en = 'Payroll & benefits officer'");
		Иначе
			Группа.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветОсобогоТекста;
			Группа.Заголовок = НСтр("ru = 'Расчет не утвержден';
									|en = 'Calculation is not confirmed'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РабочиеМестаУдержаний

Процедура УстановитьВидимостьПредставленияРабочегоМеста(Форма, ИмяПоля = "ПредставлениеРабочегоМеста") Экспорт 
	
	Форма.ВыбиратьРабочиеМестаУдержаний = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяПоля, "Видимость", Истина);
	
КонецПроцедуры

Процедура УстановитьПредставленияРабочихМест(Форма) Экспорт 
	
	Если Форма.ВыбиратьРабочиеМестаУдержаний Тогда 
		
		Объект = Форма.Объект;
		
		ДатаНачала = Объект.ДатаНачала;
		ДатаОкончания = ?(ЗначениеЗаполнено(Объект.ДатаОкончания), Мин(Объект.ДатаОкончания, КонецМесяца(ДатаНачала)), КонецМесяца(ДатаНачала));
	
		МассивРабочихМест = Объект.Удержания.Выгрузить(,"РабочееМесто").ВыгрузитьКолонку("РабочееМесто");
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивРабочихМест, Справочники.Сотрудники.ПустаяСсылка());
		
		ТаблицаОписанийРабочихМест = КадровыйУчетРасширенный.ОписаниеРабочихМестСотрудников(МассивРабочихМест, ДатаОкончания, Истина, Истина);
		РабочиеМестаОпределены = ТаблицаОписанийРабочихМест.Количество() > 0;
		
		Для Каждого Строка Из Объект.Удержания Цикл			

			Если РабочиеМестаОпределены И ЗначениеЗаполнено(Строка.РабочееМесто) Тогда
				ОписаниеРабочегоМеста = ТаблицаОписанийРабочихМест.Найти(Строка.РабочееМесто, "Сотрудник");
				Если ОписаниеРабочегоМеста <> Неопределено Тогда
					Строка.ПредставлениеРабочегоМеста = ОписаниеРабочегоМеста.ПредставлениеРабочегоМеста;
				КонецЕсли;
			Иначе
				Строка.ПредставлениеРабочегоМеста = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста();
			КонецЕсли;
			
			Строка.ДоступенВыборРабочегоМеста = Истина;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПредставлениеРабочихМест(Форма) Экспорт
	
	Если Форма.ВыбиратьРабочиеМестаУдержаний Тогда 
		
		Объект = Форма.Объект;
		
		ДатаНачала = Объект.ДатаНачала;
		ДатаОкончания = ?(ЗначениеЗаполнено(Объект.ДатаОкончания), Мин(Объект.ДатаОкончания, КонецМесяца(ДатаНачала)), КонецМесяца(ДатаНачала));
	
		Если ЗначениеЗаполнено(Объект.РабочееМесто) Тогда
			
			ТаблицаОписанийРабочихМест = КадровыйУчетРасширенный.ОписаниеРабочихМестСотрудников(Объект.РабочееМесто, ДатаОкончания, Истина, Истина);
			
			Если ТаблицаОписанийРабочихМест.Количество() > 0 Тогда
				Форма.ПредставлениеРабочегоМеста = ТаблицаОписанийРабочихМест[0].ПредставлениеРабочегоМеста;
			КонецЕсли;
			
		Иначе
			Форма.ПредставлениеРабочегоМеста = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВыбораРабочегоМеста(Форма, ФизическоеЛицо, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОтбиратьПоГоловнойОрганизации = Ложь;
	
	Объект = Форма.Объект;
	Организация = Объект.Организация;
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Если Не Форма.ВыбиратьРабочиеМестаУдержаний
		ИЛИ Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
	Если Не ОбособленноеПодразделение Тогда
		ОтбиратьПоГоловнойОрганизации = Истина;
	КонецЕсли;

	ДатаОкончания = ?(ЗначениеЗаполнено(Объект.ДатаОкончания), МИН(Объект.ДатаОкончания, КонецМесяца(Объект.ДатаНачала)), КонецМесяца(Объект.ДатаНачала));

	РабочиеМестаФизическогоЛица = КадровыйУчетРасширенный.РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, ДатаОкончания, Истина, Истина, , ОтбиратьПоГоловнойОрганизации);
	
	Если РабочиеМестаФизическогоЛица.Количество() > 0 Тогда
		
		Для Каждого ДанныеСотрудника Из РабочиеМестаФизическогоЛица Цикл
			ДанныеВыбора.Добавить(ДанныеСотрудника.Сотрудник, ДанныеСотрудника.ПредставлениеРабочегоМеста);
		КонецЦикла;
		
		ДанныеВыбора.Добавить(Справочники.Сотрудники.ПустаяСсылка(), ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеПодменюСоздатьСписковДокументов

Функция ОписаниеКомандыСозданияДокумента(ПолноеИмя, Представление, Знач Порядок = Неопределено, ИмяФормы = "") Экспорт
	
	Если Порядок = Неопределено Тогда
		Порядок = Представление;
	КонецЕсли; 
	
	Если ИмяФормы = "" Тогда 
		ИмяФормы = "ФормаОбъекта";
	КонецЕсли;
	
	ОписаниеКоманды = Новый Структура("Параметры");
	ОписаниеКоманды.Вставить("ПолноеИмя",		ПолноеИмя);
	ОписаниеКоманды.Вставить("Представление",	Представление);
	ОписаниеКоманды.Вставить("Порядок",			Порядок);
	ОписаниеКоманды.Вставить("ИмяФормы",		ИмяФормы);
	
	Возврат ОписаниеКоманды;
	
КонецФункции

Процедура ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды) Экспорт
	
	Если КомандыСозданияДокументов = Неопределено Тогда
		КомандыСозданияДокументов = Новый Соответствие;
	КонецЕсли; 
	
	ИмяКоманды = "СоздатьДокумент" + Формат(КомандыСозданияДокументов.Количество(), "ЧГ=");
	КомандыСозданияДокументов.Вставить(ИмяКоманды, ОписаниеКоманды);
	
КонецПроцедуры

Процедура ДобавитьВКоллекциюКомандуСозданияДокументаПоМетаданнымДокумента(КомандыСозданияДокументов, МетаданныеДокумента) Экспорт
	
	ОписаниеКоманды = ОписаниеКомандыСозданияДокумента(МетаданныеДокумента.ПолноеИмя(), МетаданныеДокумента.Представление());
	ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды)
	
КонецПроцедуры

Процедура СформироватьПодменюСоздатьФормыСпискаДокументов(Форма, ПолноеИмяМетаданных, ЭлементПодменюСоздать = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных);
	Если ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных) Тогда
		КоллекцияОбъектов = ОбъектМетаданных.РегистрируемыеДокументы;
	Иначе
		КоллекцияОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданных);
	КонецЕсли; 
	
	КомандыСозданияДокументов = Неопределено;
	Для каждого МетаданныеДокумента Из КоллекцияОбъектов Цикл
		
		Если ДоступноСозданиеОбъекта(МетаданныеДокумента) Тогда
			
			ПолноеИмяОбъектаМетаданных = МетаданныеДокумента.ПолноеИмя();
			Попытка
				
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
				МенеджерОбъекта.ДобавитьКомандыСозданияДокументов(КомандыСозданияДокументов, ДополнительныеПараметры);
				
			Исключение
				
				ОписаниеКоманды = ОписаниеКомандыСозданияДокумента(ПолноеИмяОбъектаМетаданных, МетаданныеДокумента.Представление());
				ДобавитьВКоллекциюКомандуСозданияДокумента(КомандыСозданияДокументов, ОписаниеКоманды)
				
			КонецПопытки;
		
		КонецЕсли; 
		
	КонецЦикла;
	
	Если КомандыСозданияДокументов <> Неопределено Тогда
		
		Форма.КомандыСозданияДокументов = Новый ФиксированноеСоответствие(КомандыСозданияДокументов);
		Если Форма.КомандыСозданияДокументов.Количество() > 0 Тогда
			
			Если ЭлементПодменюСоздать = Неопределено Тогда
				ЭлементПодменюСоздать = Форма.Элементы.Найти("ПодменюСоздать");
			КонецЕсли; 
			
			Если ЭлементПодменюСоздать <> Неопределено Тогда
				
				ТаблицаПорядка = Новый ТаблицаЗначений;
				ТаблицаПорядка.Колонки.Добавить("ИмяКоманды");
				ТаблицаПорядка.Колонки.Добавить("Представление");
				ТаблицаПорядка.Колонки.Добавить("Порядок");
				
				Для каждого ОписаниеКоманды Из Форма.КомандыСозданияДокументов Цикл
					НоваяСтрокаПорядка = ТаблицаПорядка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПорядка, ОписаниеКоманды.Значение);
					НоваяСтрокаПорядка.ИмяКоманды = ОписаниеКоманды.Ключ;
				КонецЦикла;
				
				ТаблицаПорядка.Сортировать("Порядок,Представление");
				
				Для каждого СтрокаПорядка Из ТаблицаПорядка Цикл
					
					ИмяКоманды = СтрокаПорядка.ИмяКоманды;
					ОписаниеКоманды = Форма.КомандыСозданияДокументов.Получить(ИмяКоманды);
					
					// Добавляем команду
					НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
					НоваяКоманда.Заголовок	= ОписаниеКоманды.Представление;
					
					НоваяКоманда.Действие	= "Подключаемый_СоздатьДокумент";
					
					// Добавляем кнопку
					Кнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменюСоздать); 
					Кнопка.ИмяКоманды	= НоваяКоманда.Имя;
					
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписочныеДокументы

Функция ПараметрыОткрытияФормыРедактированияСтрокиДокумента(Объект, ТекущиеДанные, ПолноеИмяОбъектаМетаданных, ПараметрыОткрытия = Неопределено) Экспорт
	
	ОписаниеСтроки = ЗарплатаКадрыРасширенныйВызовСервера.СтруктураПоМетаданным(ПолноеИмяОбъектаМетаданных);
	ЗаполнитьОбъектПоОбразцу(ОписаниеСтроки, Объект, ТекущиеДанные, "ИдентификаторСтрокиСотрудника");
	ОписаниеСтроки.Вставить("СсылкаНаОбъект", Объект.Ссылка);
	
	Если ПараметрыОткрытия = Неопределено Тогда
		ПараметрыОткрытия = Новый Структура;
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("СтрокаСписочногоДокумента", ОписаниеСтроки);
	ПараметрыОткрытия.Вставить("КлючНазначенияИспользования", "РедактированиеСтрокиСписочногоДокумента");
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ЗаполнитьОбъектПоОбразцу(ОписаниеОбъекта, Объект, Строка = Неопределено, ИмяКлючевогоРеквизита = Неопределено) Экспорт
	
	ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, Объект);
	
	Если Строка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, Строка);
	КонецЕсли; 
	
	Если ИмяКлючевогоРеквизита <> Неопределено Тогда
		СтруктураОтбора = Новый Структура(ИмяКлючевогоРеквизита, Строка[ИмяКлючевогоРеквизита]);
	Иначе
		СтруктураОтбора = Неопределено;
	КонецЕсли;
	
	ТабличныеЧастиОбъекта = ОписаниеОбъекта.ТабличныеЧасти;
	
	Для каждого ОписаниеТабличнойЧасти Из ТабличныеЧастиОбъекта Цикл
		
		Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
			Продолжить;
		КонецЕсли; 
		
		ИменаРеквизитов = ТабличныеЧастиОбъекта.ОписаниеТабличныхЧастей[ОписаниеТабличнойЧасти.Ключ];
		
		Если СтруктураОтбора = Неопределено Тогда
			СтрокиТабличнойЧасти = Объект[ОписаниеТабличнойЧасти.Ключ];
		Иначе
			СтрокиТабличнойЧасти = Объект[ОписаниеТабличнойЧасти.Ключ].НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		
		Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
				
				СтруктураСтроки = Новый Структура(ИменаРеквизитов);
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТабличнойЧасти);
				
				ТабличныеЧастиОбъекта[ОписаниеТабличнойЧасти.Ключ].Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуМногосотрудниковогоДокумента(Результат, ТекущиеДанные, Объект, ОписанияТаблиц) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УдалитьДанныеСотрудниковСписочногоДокумента(Объект, Результат, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		
		ЗависимыеТабличныеЧасти = Новый Соответствие;
		ЗависимыеТабличныеЧасти.Вставить("ПримененныеВычетыНаДетейИИмущественные", "НДФЛ");
		ЗависимыеТабличныеЧасти.Вставить("УчтенныеПриРасчетеНДФЛДокументы", "НДФЛ");
		ЗависимыеТабличныеЧасти.Вставить("Показатели", "Начисления,НачисленияПерерасчет,НачисленияДоЗачисленияВСпискиЧасти,Пособия,ПособияПерерасчет,Удержания,ДенежноеСодержание,Льготы,РаспределениеПоТерриториямУсловиямТруда");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеРезультатовНачислений", "Начисления,НачисленияПерерасчет,ОплатаТруда,Пособия,Льготы");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеРезультатовУдержаний", "Удержания,НДФЛ,ПогашениеЗаймов,КорректировкиВыплаты");
		ЗависимыеТабличныеЧасти.Вставить("РаспределениеПоТерриториямУсловиямТруда", "Начисления,НачисленияПерерасчет,Пособия,ПособияПерерасчет,Льготы");
		ЗависимыеТабличныеЧасти.Вставить("БухучетНачислений", "Начисления,Льготы");
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
			Модуль.УточнитьСписокЗависимыхТабличныхЧастей(ЗависимыеТабличныеЧасти);
		КонецЕсли;
		
		СоответствияИдентификаторов = Новый Соответствие;
		Для каждого ОписаниеТабличнойЧасти Из Результат.ТабличныеЧасти Цикл
			
			Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗависимыеТабличныеЧасти.Получить(ОписаниеТабличнойЧасти.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбновитьИдентификаторыСтрок = Ложь;
			ИмяРеквизитаИдентификаторСтроки = ИмяРеквизитаИдентификаторСтроки(Результат, ОписаниеТабличнойЧасти.Ключ);
			Если Не ПустаяСтрока(ИмяРеквизитаИдентификаторСтроки) Тогда
				ОбновитьИдентификаторыСтрок = Истина;
				МаксимальныйИдентификатор = МаксимальныйИдентификаторСтроки(Объект[ОписаниеТабличнойЧасти.Ключ], ИмяРеквизитаИдентификаторСтроки);
				Если МаксимальныйИдентификатор = 0 И ОписанияТаблиц.Свойство(ОписаниеТабличнойЧасти.Ключ) Тогда
					МаксимальныйИдентификатор = ОписанияТаблиц[ОписаниеТабличнойЧасти.Ключ].НомерТаблицы * 1000000;
				КонецЕсли;
			КонецЕсли;
			
			СоответствиеИдентификаторовТабличнойЧасти = Неопределено;
			Для каждого ОписаниеСтроки Из ОписаниеТабличнойЧасти.Значение Цикл
				
				НоваяСтрока = Объект[ОписаниеТабличнойЧасти.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
				
				НоваяСтрока.ИдентификаторСтрокиСотрудника = ТекущиеДанные.ИдентификаторСтрокиСотрудника;
				
				// Обновление идентификаторов строк
				Если ОбновитьИдентификаторыСтрок Тогда
					
					// Подготовка соответствия для хранения новых идентификаторов строк
					Если СоответствиеИдентификаторовТабличнойЧасти = Неопределено Тогда
						СоответствиеИдентификаторовТабличнойЧасти = Новый Соответствие;
					КонецЕсли;
					
					МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
					СоответствиеИдентификаторовТабличнойЧасти.Вставить(НоваяСтрока[ИмяРеквизитаИдентификаторСтроки], МаксимальныйИдентификатор);
					НоваяСтрока[ИмяРеквизитаИдентификаторСтроки] = МаксимальныйИдентификатор;
				
				КонецЕсли;
				
			КонецЦикла;
			
			// Сохранение измененных идентификаторов строк
			Если ОбновитьИдентификаторыСтрок Тогда
				СоответствияИдентификаторов.Вставить(ОписаниеТабличнойЧасти.Ключ, СоответствиеИдентификаторовТабличнойЧасти);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗагружатьТабличнуюЧастьПоказатели = Ложь;
		// Обновление зависимых табличных частей
		Для каждого ОписаниеТабличнойЧасти Из Результат.ТабличныеЧасти Цикл
			
			Если ОписаниеТабличнойЧасти.Ключ = "ОписаниеТабличныхЧастей" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОписаниеТабличнойЧасти.Ключ = "Показатели" Тогда
				ЗагружатьТабличнуюЧастьПоказатели = Истина;
				Продолжить;
			КонецЕсли;
			
			ВедущиеТабличныеЧасти = ЗависимыеТабличныеЧасти.Получить(ОписаниеТабличнойЧасти.Ключ);
			Если ВедущиеТабличныеЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Обновление идентификаторов строк для связи с табличной частью показатели
			Если ОписаниеТабличнойЧасти.Ключ = "РаспределениеПоТерриториямУсловиямТруда" Тогда
				
				СоответствиеИдентификаторовТабличнойЧасти = Новый Соответствие;
				
				МаксимальныйИдентификатор = МаксимальныйИдентификаторСтроки(Объект.РаспределениеПоТерриториямУсловиямТруда, "ИдентификаторСтрокиПоказателей");
				Если МаксимальныйИдентификатор = 0 Тогда
					МаксимальныйИдентификатор = РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаНомерТаблицы() * 1000000;
				КонецЕсли;
				
				Для каждого ОписаниеСтроки Из Результат.ТабличныеЧасти.РаспределениеПоТерриториямУсловиямТруда Цикл
					
					МаксимальныйИдентификатор = МаксимальныйИдентификатор + 1;
					СоответствиеИдентификаторовТабличнойЧасти.Вставить(ОписаниеСтроки.ИдентификаторСтрокиПоказателей, МаксимальныйИдентификатор);
					ОписаниеСтроки.ИдентификаторСтрокиПоказателей = МаксимальныйИдентификатор;
					
				КонецЦикла;
				
				СоответствияИдентификаторов.Вставить("РаспределениеПоТерриториямУсловиямТруда", СоответствиеИдентификаторовТабличнойЧасти);
				
			КонецЕсли;
			
			ЗагрузитьТабличнуюЧасть(Объект, Результат, ОписаниеТабличнойЧасти.Ключ, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
			
		КонецЦикла;
		
		Если ЗагружатьТабличнуюЧастьПоказатели Тогда
			ИмяТабличнойЧасти = "Показатели";
			ВедущиеТабличныеЧасти = ЗависимыеТабличныеЧасти.Получить(ИмяТабличнойЧасти);
			ЗагрузитьТабличнуюЧасть(Объект, Результат, ИмяТабличнойЧасти, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, ТекущиеДанные.ИдентификаторСтрокиСотрудника);
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			Объект.Сотрудники.Удалить(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МаксимальныйИдентификаторСтроки(КоллекцияСтрок, ИмяРеквизитаИдентификаторСтроки) Экспорт
	
	МаксимальныйИдентификатор = 0;
	Для каждого СтрокаДокумента Из КоллекцияСтрок Цикл
		Если МаксимальныйИдентификатор < СтрокаДокумента[ИмяРеквизитаИдентификаторСтроки] Тогда
			МаксимальныйИдентификатор = СтрокаДокумента[ИмяРеквизитаИдентификаторСтроки];
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МаксимальныйИдентификатор;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьЗначенияМинимальнойОплатыТрудаРФ(ТекстXML, ПолучатьДанныеИзСервиса) Экспорт
	ЗарплатаКадры.ОбновитьКлассификатор(ТекстXML, ПолучатьДанныеИзСервиса);
КонецПроцедуры

// Выполняет формирование таблицы с набором значений доступа объекта (документа), 
// содержащего ссылки на организацию и сотрудника (сотрудников).
// Вызывается из процедуры ЗаполнитьНаборыЗначенийДоступа, реализованной в модуле таких 
// документов, доступ к которым выполняется через наборы значений доступа.
// Параметры:
//		Объект
//		Таблица - переданная таблица значений.
//		ПутьФизическоеЛицо - строка с именем реквизита, содержащего физическое лицо.
//			Может быть идентификатором реквизита объекта (например, "ФизическоеЛицо") или
//			путем к реквизиту табличной части в 
//			формате <ИмяТабличнойЧасти>.<ИмяРеквизита> 
//			(например, "ФизическиеЛица.ФизическоеЛицо").
//
Процедура ЗаполнитьНаборыПоФизическимЛицам(Объект, Таблица, ПутьФизическоеЛицо, НомерНабора = 0) Экспорт
	
	СтрокиПутиФизическогоЛица = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьФизическоеЛицо, ".");
	
	Если СтрокиПутиФизическогоЛица.Количество() = 1 Тогда
		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ЗначениеДоступа = Объект[ПутьФизическоеЛицо];
		СтрокаТаб.НомерНабора = НомерНабора;
	Иначе
		Для Каждого СтрокаТаблицы Из Объект[СтрокиПутиФизическогоЛица[0]] Цикл
			СтрокаТаб = Таблица.Добавить();
			СтрокаТаб.ЗначениеДоступа = СтрокаТаблицы[СтрокиПутиФизическогоЛица[1]];
			СтрокаТаб.НомерНабора = НомерНабора;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция УОрганизацииЕстьФилиалы(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И Организации.Ссылка <> &ГоловнаяОрганизация";
		
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ШтатноеРасписаниеВсегдаИспользуется() Экспорт 
	
	ШтатноеРасписаниеВсегдаИспользуется = Ложь;
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьОбязательностьИспользованияШтатногоРасписания(ШтатноеРасписаниеВсегдаИспользуется);
	
	Возврат ШтатноеРасписаниеВсегдаИспользуется
		Или ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении")
		Или ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	
КонецФункции

// Возвращает значение РаботаВХозрасчетнойОрганизации.
// Используется для начального заполнения ФО и при попытке изменения значений ФО.
Функция ЗначениеРаботаВХозрасчетнойОрганизации() Экспорт
	ЕстьУчетБюджетныхУчреждений = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ЕстьУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций");
	Если ЕстьУчетБюджетныхУчреждений И ЕстьУчетХозрасчетныхОрганизаций Тогда
		Возврат Неопределено;
	ИначеЕсли ЕстьУчетБюджетныхУчреждений Тогда
		Возврат Ложь;
	ИначеЕсли ЕстьУчетХозрасчетныхОрганизаций Тогда
		Возврат Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НастройкиПрограммыБюджетногоУчреждения() Экспорт

	НастройкиПриложения = Новый Структура;
	НастройкиПриложения.Вставить("РаботаВБюджетномУчреждении", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьГосударственнуюСлужбу", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьМуниципальнуюСлужбу", Ложь);
	НастройкиПриложения.Вставить("НачислятьОкладЗаКлассныйЧинМуниципальнымСлужащим", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьУчетКлассныхЧинов", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьРасчетСохраняемогоДенежногоСодержания", Ложь);  
	НастройкиПриложения.Вставить("РаботаВОбразовательномУчреждении", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьВоеннуюСлужбу", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьРасчетДенежногоДовольствияВоеннослужащих", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьРасчетДенежногоДовольствияСотрудниковОргановИсполнительнойВласти", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьРасчетДенежногоДовольствияВоеннослужащихПоПризыву", Ложь);
	НастройкиПриложения.Вставить("РазрешеноСовместительствоВоеннослужащимПоКонтракту", Ложь); 
	НастройкиПриложения.Вставить("ВыплачиватьАвансыВоеннослужащимПоКонтракту", Ложь);	
	НастройкиПриложения.Вставить("ИспользоватьРасчетДенежногоСодержанияПрокуроров", Ложь);
	НастройкиПриложения.Вставить("ПремияЗаДВСОРассчитываетсяПоОкладуНаНачалоМесяца", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьГосударственныеМуниципальныеДолжности", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьРасчетДенежногоСодержанияСудей", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГосударственнойСлужбы", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьСохраняемоеДенежноеСодержаниеДолжностейГражданскойСлужбы", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьСохраняемоеДенежноеСодержаниеСудей", Ложь);
	НастройкиПриложения.Вставить("ИспользоватьВыплатыБывшимВоеннослужащим", Ложь);
	НастройкиПриложения.Вставить("ОграничениеПособияВоеннослужащимВключаетРК", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаКонстант = "РаботаВБюджетномУчреждении,ИспользоватьГосударственнуюСлужбу,ИспользоватьМуниципальнуюСлужбу,
	|ИспользоватьУчетКлассныхЧинов";
	Настройка = Константы.СоздатьНабор(СтрокаКонстант);
	Настройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НастройкиПриложения, Настройка, СтрокаКонстант);
	
	ВыплатыПоДоговорамОпеки.НастройкиПрограммыБюджетногоУчреждения(НастройкиПриложения);

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПриложения);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПриложения);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		Модуль.НастройкиПрограммыБюджетногоУчреждения(НастройкиПриложения);
		
	КонецЕсли;
	
	Возврат НастройкиПриложения;

КонецФункции

Процедура ЗаполнитьРолиСотрудников() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник) КАК РольСотрудника
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО КадроваяИсторияСотрудников.Сотрудник = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
	|ГДЕ
	|	РолиСотрудников.Сотрудник ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорАвторскогоЗаказа.Сотрудник КАК Сотрудник
	|	ИЗ
	|		Документ.ДоговорАвторскогоЗаказа КАК ДоговорАвторскогоЗаказа
	|	ГДЕ
	|		ДоговорАвторскогоЗаказа.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорРаботыУслуги.Сотрудник
	|	ИЗ
	|		Документ.ДоговорРаботыУслуги КАК ДоговорРаботыУслуги
	|	ГДЕ
	|		ДоговорРаботыУслуги.Проведен) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиСотрудников КАК РолиСотрудников
	|		ПО ВложенныйЗапрос.Сотрудник = РолиСотрудников.Сотрудник
	|			И (РолиСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
	|ГДЕ
	|	РолиСотрудников.Сотрудник ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Набор = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		Набор.Прочитать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
		КонецЦикла;
		
		Набор.Записать();
		
	КонецЕсли; 
	
КонецПроцедуры

Функция КоличествоМесяцевПериодичности(Периодичность) Экспорт

	КоличествоМесяцев = СоответствиеКоличестваМесяцевПериодичности();
	Возврат КоличествоМесяцев.Получить(Периодичность);

КонецФункции

Функция СоответствиеКоличестваМесяцевПериодичности() Экспорт

	КоличествоМесяцев = Новый Соответствие;
	
	КоличествоМесяцев.Вставить(Перечисления.Периодичность.Год, 12);
	КоличествоМесяцев.Вставить(Перечисления.Периодичность.Полугодие, 6);
	КоличествоМесяцев.Вставить(Перечисления.Периодичность.Квартал, 3);
	КоличествоМесяцев.Вставить(Перечисления.Периодичность.Месяц, 1);
	
	Возврат КоличествоМесяцев;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций получения значений по умолчанию.
//

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений) Экспорт
	
	ЗарплатаКадрыБазовый.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения, ДатаЗначений);
	
	Если ЗаполняемыеЗначения.Свойство("ГрафикРаботы") Тогда
		
		// Значение позиции известно - получим зависящие от нее значения.
		ДолжностьПоШтатномуРасписаниюСсылка = Неопределено;
		Если (ЗаполняемыеЗначения.Свойство("ДолжностьПоШтатномуРасписанию", ДолжностьПоШтатномуРасписаниюСсылка) И ДолжностьПоШтатномуРасписаниюСсылка <> Неопределено) Тогда
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДолжностьПоШтатномуРасписаниюСсылка, "ГрафикРаботыСотрудников,Подразделение,Владелец");
			
			Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрафикРаботыСотрудников) Тогда
				ЗаполняемыеЗначения.ГрафикРаботы = ЗначенияРеквизитов.ГрафикРаботыСотрудников;
			Иначе
				
				Если Не ЗаполняемыеЗначения.Свойство("Подразделение") Тогда
					ЗаполняемыеЗначения.Вставить("Подразделение", ЗначенияРеквизитов.Подразделение);
				КонецЕсли;
				
				Если Не ЗаполняемыеЗначения.Свойство("Организация") Тогда
					ЗаполняемыеЗначения.Вставить("Организация", ЗначенияРеквизитов.Владелец);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗаполняемыеЗначения.ГрафикРаботы) Тогда
			
			// Значение подразделения известно - получим зависящие от нее значения.
			ПодразделениеСсылка = Неопределено;
			Если (ЗаполняемыеЗначения.Свойство("Подразделение", ПодразделениеСсылка) И ПодразделениеСсылка <> Неопределено) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодразделениеСсылка, "ГрафикРаботыСотрудников,Владелец");
				Если ЗначениеЗаполнено(ЗначенияРеквизитов.ГрафикРаботыСотрудников) Тогда
					ЗаполняемыеЗначения.ГрафикРаботы = ЗначенияРеквизитов.ГрафикРаботыСотрудников;
				Иначе
				
					Если Не ЗаполняемыеЗначения.Свойство("Организация") Тогда
						ЗаполняемыеЗначения.Вставить("Организация", ЗначенияРеквизитов.Владелец);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗаполняемыеЗначения.ГрафикРаботы) Тогда
			// Значение организации известно - получим зависящие от нее значения.
			ОрганизацияСсылка = Неопределено;
			Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ОрганизацияСсылка <> Неопределено) Тогда
				ЗаполняемыеЗначения.ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияСсылка, "ГрафикРаботыСотрудников");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("Организация") И Не ЗначениеЗаполнено(ЗаполняемыеЗначения.Организация) И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоОрганизаций") Тогда
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(Организация) Тогда 
			ЗаполняемыеЗначения.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняемыеЗначения.Свойство("МесяцРасчета") Тогда
		ОрганизацияСсылка = Неопределено;
		Если (ЗаполняемыеЗначения.Свойство("Организация", ОрганизацияСсылка) И ЗначениеЗаполнено(ОрганизацияСсылка)) Тогда
			ЗаполняемыеЗначения.МесяцРасчета = НачалоМесяца(ДатаЗначений);
			НастройкиДатаВыплатыЗарплаты = РасчетЗарплатыРасширенныйВызовСервера.СведенияОНастройкахЗарплатаКадрыРасширенная(ОрганизацияСсылка);
			Если Не НастройкиДатаВыплатыЗарплаты.ВыплачиватьЗарплатуВПоследнийДеньМесяца
				И День(ДатаЗначений) <= Мин(НастройкиДатаВыплатыЗарплаты.ДатаВыплатыЗарплатыНеПозжеЧем, ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(ДатаЗначений)) Тогда
				ЗаполняемыеЗначения.МесяцРасчета = ДобавитьМесяц(ЗаполняемыеЗначения.МесяцРасчета, -1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПодписиДокументов.ЗаполнитьСведенияОПодписяхДокументовПоОрганизации(ЗаполняемыеЗначения, ДатаЗначений);
	
КонецПроцедуры

// Массив поддерживаемых идентификаторов значений по умолчанию.
Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	
	ПоддерживаемыеИдентификаторы = ЗарплатаКадрыБазовый.СписокДоступныхЗначенийПоУмолчанию();
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПоШтатномуРасписанию");
	ПоддерживаемыеИдентификаторы.Добавить("ГрафикРаботы");
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассираСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("ОтветственныйЗаВУР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьОтветственногоЗаВУРСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("ПредставительСФР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПредставителяСФР");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьПредставителяСФРСтрокой");
	
	ПоддерживаемыеИдентификаторы.Добавить("РуководительКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбы");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителяКадровойСлужбыСтрокой");
	
	ПодписиДокументов.ДобавитьИдентификаторыОтветственныхРаботниковОрганизаций(ПоддерживаемыеИдентификаторы);
	
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих состав 
// начислений (начисления в строках таблицы).

// Дополнение формы, которая выполняет редактирование состава начислений (таких как документ Кадровый перевод).
// Дополняет данные формы реквизитами и элементами формы, предназначенными для отображения текущих 
// значений показателей редактируемого состава начислений.
// Параметры: 
//		Форма
//
//		ОписаниеТаблицыВидовРасчета - 	структура, описывающая таблицу с видами расчета. 
//										См. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета()
//
//		ИмяПВР - имя плана видов расчета.
//
//		РежимРаботы - 	0 - режим "штатного расписания"
//						1 - режим "изменения плановых начислений сотрудника".
//						2 - 
//						3 - режим "первого назначения плановых начислений сотрудника" (прием на работу).
//
//		ДобавлятьЭлементыФормы - 	позволяет сформировать только реквизиты формы не создавая элементы 
//									формы для их отображения по умолчанию Истина.
Процедура РедактированиеСоставаНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, РежимРаботы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	СоздаватьКомментарий = (РежимРаботы = 0 ИЛИ ДобавлятьЭлементыФормы);
	
	//	Обработаем специальные режимы работы:
	//	3 - документ "Прием на работу": поле комментарий, в таблице редактирования начислений, не нужно, в остальном
	//	    механизм работает также.
	Если РежимРаботы  = 3 Тогда
		СоздаватьКомментарий = Ложь;
		РежимРаботы  = 1;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	// Дополняем таблицу формы как любую форму ввода начислений.
	ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);

	Если ДобавлятьРеквизитыФормы Тогда
		
		ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
		ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
		Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
			ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
		КонецЕсли;
		
		УстановитьСвойстваТаблицыВводаДополнительныхТарифныхСтавок(Форма, РежимРаботы);
		
		// Дополняем таблицу формы реквизитами для текущих значений и комментарием.
		// Элементы формы для отображения этих реквизитов вводить не будем, так 
		// как они не выводятся в форме, а используются только при условном оформлении.
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, РежимРаботы);
		
		ДобавляемыеРеквизиты = Новый Массив;
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМаксимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМинимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
				Иначе
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
				КонецЕсли;
			Иначе 	
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗначениеПоОкончании" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным));
			КонецЕсли;
						
		КонецЦикла;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействующийВидРасчета", Новый ОписаниеТипов("Булево"), ПутьКДанным));
		
		Если СоздаватьКомментарий Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ПутьКДанным));
		КонецЕсли;
		
		// Если таблица с показателями еще не расширена полем ТекущееЗначение - добавляем его.
		Если РежимРаботы = 0 Тогда
			РеквизитыМинПоказателейДополнены = Ложь;
			РеквизитыМаксПоказателейДополнены = Ложь;
		Иначе 
			РеквизитыПоказателейДополнены = Ложь;
		КонецЕсли;
				
		ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		
		РеквизитыПоказателей = Форма.ПолучитьРеквизиты(ПутьКДаннымПоказателей);
		
		Если МассивИменРеквизитовФормы.Найти("РеквизитыКДобавлению") <> Неопределено Тогда
			// В том случае когда форма содержит "отложенные" для добавления реквизиты - проверим и их.
			Для каждого ДобавляемыйРеквизит Из Форма.РеквизитыКДобавлению.ВыгрузитьЗначения() Цикл
				Если ВРег(ДобавляемыйРеквизит.Путь) = ВРег(ПутьКДаннымПоказателей) Тогда
					РеквизитыПоказателей.Добавить(ДобавляемыйРеквизит);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Реквизит Из РеквизитыПоказателей Цикл
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					Если Реквизит.Имя = "ТекущееМинимальноеЗначение" Тогда
						РеквизитыМинПоказателейДополнены = Истина;
					КонецЕсли;
					Если Реквизит.Имя = "ТекущееМаксимальноеЗначение" Тогда
						РеквизитыМаксПоказателейДополнены = Истина;
					КонецЕсли;
				Иначе
					Если Реквизит.Имя = "ТекущееЗначение" Тогда
						РеквизитыМаксПоказателейДополнены = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Если Реквизит.Имя = "ТекущееЗначение" Тогда
					РеквизитыПоказателейДополнены = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимРаботы = 0 Тогда
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				Если Не РеквизитыМинПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМинимальноеЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
				Если Не РеквизитыМаксПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееМаксимальноеЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
			Иначе
				Если Не РеквизитыМаксПоказателейДополнены Тогда
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не РеквизитыПоказателейДополнены Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", ТипЗначенияПоказателя, ПутьКДаннымПоказателей));
			КонецЕсли;
		КонецЕсли;
			
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	// Дополняем форму элементом для отображения комментария.
	Если СоздаватьКомментарий И ДобавлятьЭлементыФормы Тогда
		ПолеКомментарий = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Комментарий");
		Если ПолеКомментарий = Неопределено Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы);
			
			ПолеКомментарий = Форма.Элементы.Добавить(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "Комментарий", Тип("ПолеФормы"), Таблица);
			ПолеКомментарий.ПутьКДанным = ПутьКДанным + ".Комментарий";
			ПолеКомментарий.Доступность = Истина;
			ПолеКомментарий.ОтображатьВШапке = Истина;
			ПолеКомментарий.ТолькоПросмотр = Истина;
			ПолеКомментарий.РастягиватьПоГоризонтали = Ложь;
			ПолеКомментарий.Ширина = 30;
		КонецЕсли;	
	КонецЕсли;
	
	РедактированиеСоставаНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы);
	
КонецПроцедуры

// Заполнение действующих видов расчета в реквизит формы документа, редактирующего 
// состав начислений (например, Кадровый перевод).
// Выполняется при вводе нового документа или при смене переводимого сотрудника (по сути - ввод 
// нового документа на другого сотрудника).
//
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
//		Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//			хранения значений показателей редактируемых начислений.
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//		СотрудникиДаты - список сотрудников, начисления которых редактируются. 
//			Представляет собой табличную часть с колонками.
//				Сотрудник
//				Период - дата, на которую получаются действующие начисления.
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//
Процедура РедактированиеСоставаНачисленийДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено, ИсключатьВременноОтмененные = Ложь) Экспорт
	
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		Если РежимРаботы = 0 Тогда
			РедактированиеСоставаНачисленийШтатногоРасписанияДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета)
		Иначе 
			РедактированиеСоставаНачисленийСотрудниковДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, Ложь, , ИсключатьВременноОтмененные)
		КонецЕсли;
		
		ВводНачисленийДанныеВРеквизит(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, Истина);
		УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДействующиеНачисленияСотрудников(СотрудникиДаты, ДокументСсылка, ОписаниеТаблицыВидовРасчета = Неопределено, ФормироватьСПериодичностьДень = Истина, ИсключатьПособия = Ложь, ДанныеДолжностей = Неопределено) Экспорт
	
	Если ОписаниеТаблицыВидовРасчета = Неопределено Тогда
		
		ИмяТаблицы = "Начисления";
		ИмяРеквизитаВидРасчета = "Начисление";
		СодержитПолеХарактерНачисления = Ложь;
		
		ПолучениеНачислений = Истина;
		
	Иначе
		
		Если ОписаниеТаблицыВидовРасчета <> Неопределено
			И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаКлиентСервер");
			ИмяТаблицы = Модуль.ИмяТаблицыПоОписанию(ОписаниеТаблицыВидовРасчета);
			
		Иначе
			ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
		КонецЕсли;
		
		ИмяРеквизитаВидРасчета = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета;
		
		ПолучениеНачислений = (ИмяТаблицы = "Начисления");
		
		Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеХарактерНачисления") Тогда
			СодержитПолеХарактерНачисления = ОписаниеТаблицыВидовРасчета.СодержитПолеХарактерНачисления;
		Иначе
			СодержитПолеХарактерНачисления = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	Если ПолучениеНачислений Тогда
		КолонкиСотрудникиДаты = "Сотрудник";
	Иначе
		КолонкиСотрудникиДаты = "ФизическоеЛицо";
	КонецЕсли;
	
	Если СотрудникиДаты.Колонки.Найти("Организация") = Неопределено Тогда
		КолонкиСотрудникиДатыЗначенийПоказателей = КолонкиСотрудникиДаты;
	Иначе
		КолонкиСотрудникиДатыЗначенийПоказателей = КолонкиСотрудникиДаты + ",Организация";
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"Плановые" + ИмяТаблицы,
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДаты),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДатыЗначенийПоказателей),
		ПараметрыПостроения);
	
	Если ПолучениеНачислений Тогда
		
		ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Регистратор", "<>", ДокументСсылка);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, КолонкиСотрудникиДаты),
			ПараметрыПостроенияФОТ);
		
		Если СодержитПолеХарактерНачисления Тогда
			
			Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
			ИмяВТОтборовПозицийШтатногоРасписания = "ВТОтборовПозицийШтатногоРасписания";
			
			Если СотрудникиДаты.Колонки.Найти("ДолжностьПоШтатномуРасписанию") = Неопределено Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СотрудникиДаты.Период,
					|	СотрудникиДаты.Сотрудник
					|ПОМЕСТИТЬ ВТСотрудникиДатыДляОтбораПозицийШтатногоРасписания
					|ИЗ
					|	&СотрудникиДаты КАК СотрудникиДаты";
				
				Запрос.Выполнить();
				
				Описатель = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
					Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиДатыДляОтбораПозицийШтатногоРасписания");
				
				Описатель.ИмяВТКадровыеДанныеСотрудников = ИмяВТОтборовПозицийШтатногоРасписания;
				
				КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
					Описатель, Истина, "ДолжностьПоШтатномуРасписанию");
				
			Иначе
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	СотрудникиДаты.Период,
					|	СотрудникиДаты.Сотрудник,
					|	СотрудникиДаты.ДолжностьПоШтатномуРасписанию
					|ПОМЕСТИТЬ ВТОтборовПозицийШтатногоРасписания
					|ИЗ
					|	&СотрудникиДаты КАК СотрудникиДаты";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовПозицийШтатногоРасписания", ИмяВТОтборовПозицийШтатногоРасписания);
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Если ДанныеДолжностей = Неопределено Тогда
				СоздаватьВТНачисленияПозиций = Истина;
			Иначе
				
				СоздаватьВТНачисленияПозиций = Ложь;
				Если СотрудникиДаты.Колонки.Найти("ДолжностьПоШтатномуРасписанию") = Неопределено Тогда
					
					Запрос.Текст =
						"ВЫБРАТЬ
						|	СотрудникиДаты.Период,
						|	СотрудникиДаты.Сотрудник,
						|	СотрудникиДаты.ДолжностьПоШтатномуРасписанию
						|ИЗ
						|	ВТОтборовПозицийШтатногоРасписания КАК СотрудникиДаты";
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовПозицийШтатногоРасписания", ИмяВТОтборовПозицийШтатногоРасписания);
					
					ТаблицаСПозициями = Запрос.Выполнить().Выгрузить();
				Иначе
					ТаблицаСПозициями = СотрудникиДаты.Скопировать();
				КонецЕсли;
				
				НачисленияПозиций = Новый ТаблицаЗначений;
				НачисленияПозиций.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
				НачисленияПозиций.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				НачисленияПозиций.Колонки.Добавить("ПозицияШтатногоРасписания", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
				НачисленияПозиций.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
				
				Для Каждого СтрокаТаблицыСПозициями Из ТаблицаСПозициями Цикл
					
					ДанныеПозиции = ДанныеДолжностей.Получить(СтрокаТаблицыСПозициями.ДолжностьПоШтатномуРасписанию);
					Если ДанныеПозиции = Неопределено Тогда
						
						СоздаватьВТНачисленияПозиций = Истина;
						Прервать;
						
					КонецЕсли;
					
					Для Каждого ОписаниеНачисления Из ДанныеПозиции.Начисления Цикл
						
						НоваяСтрокаНачисленияПозиций = НачисленияПозиций.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияПозиций, СтрокаТаблицыСПозициями);
						НоваяСтрокаНачисленияПозиций.ПозицияШтатногоРасписания = СтрокаТаблицыСПозициями.ДолжностьПоШтатномуРасписанию;
						НоваяСтрокаНачисленияПозиций.Начисление = ОписаниеНачисления.Начисление;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если Не СоздаватьВТНачисленияПозиций Тогда
					
					Запрос.УстановитьПараметр("НачисленияПозиций", НачисленияПозиций);
					Запрос.Текст =
						"ВЫБРАТЬ
						|	НачисленияПозиций.Период КАК Период,
						|	НачисленияПозиций.Сотрудник КАК Сотрудник,
						|	НачисленияПозиций.ПозицияШтатногоРасписания КАК ПозицияШтатногоРасписания,
						|	НачисленияПозиций.Начисление КАК Начисление
						|ПОМЕСТИТЬ ВТНачисленияПозиций
						|ИЗ
						|	&НачисленияПозиций КАК НачисленияПозиций";
					
					Запрос.Выполнить();
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СоздаватьВТНачисленияПозиций Тогда
				
				ПараметрыПостроенияВТПозицииШтатногоРасписания = УправлениеШтатнымРасписанием.ПараметрыПостроенияВТШтатноеРасписаниеПоТаблицеФильтра(ИмяВТОтборовПозицийШтатногоРасписания);
				ПараметрыПостроенияВТПозицииШтатногоРасписания.ИмяПоляПозицияШтатногоРасписания = "ДолжностьПоШтатномуРасписанию";
				ПараметрыПостроенияВТПозицииШтатногоРасписания.ДополнитьОписаниемНачислений = Истина;
				ПараметрыПостроенияВТПозицииШтатногоРасписания.ПолноеОписаниеНачислений = Истина;
				
				УправлениеШтатнымРасписанием.СоздатьВТПозицииШтатногоРасписанияПоВременнойТаблице(
					Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПостроенияВТПозицииШтатногоРасписания, "", "ВТНачисленияПозиций");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяПоляСотрудник = "Сотрудник";
		ИмяПоляПорядка = ИмяРеквизитаВидРасчета;
		ИмяДополнительногоПоляПорядка = "";
		
		Если Не ИсключатьПособия Тогда
			
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
				"ПрименениеПлановыхНачислений",
				Запрос.МенеджерВременныхТаблиц,
				Истина,
				ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
				ПараметрыПостроения);
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление,
			|	ПлановыеНачисления.ДокументОснование
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос.Выполнить();
		
		ОписаниеФильтраНачислений = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление, ДокументОснование");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтраНачислений,
			ПараметрыПостроения,
			"ВТПлановыеНачисленияВозвратные");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ОписаниеФильтраНачислений,
			ПараметрыПостроенияФОТ,
			"ВТПлановыйФОТВозвратные");
		
	Иначе
		ИмяПоляСотрудник = "ФизическоеЛицо";
		ИмяПоляПорядка = "Регистратор";
		ИмяДополнительногоПоляПорядка = ИмяРеквизитаВидРасчета;
	КонецЕсли;
	
	КлючиОписанияНачисления =
		"ПериодЗаписи,
		|Период,
		|Регистратор,
		|Сотрудник,
		|ДокументОснование,
		|Размер,
		|Используется";
	
	КлючиОписанияНачисления = КлючиОписанияНачисления + ","+ ИмяРеквизитаВидРасчета;
	
	ЧастиТекстаЗапроса = Новый Массив;
	
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДействующиеПлановыеРасчеты.ПериодЗаписи,
		|	ДействующиеПлановыеРасчеты.Период,
		|	ДействующиеПлановыеРасчеты.Регистратор,
		|	ДействующиеПлановыеРасчеты." + ИмяПоляСотрудник + " КАК Сотрудник,
		|	ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК " + ИмяРеквизитаВидРасчета + ",
		|	ДействующиеПлановыеРасчеты.ДокументОснование КАК ДокументОснование,
		|	ДействующиеПлановыеРасчеты.Используется,");
	
	Если ПолучениеНачислений Тогда
		
		КлючиОписанияНачисления = КлючиОписанияНачисления + ",
			|Рассчитывается,
			|ПоказательЗависящийОтСтажа,
			|ДатаОкончанияНачисления,
			|РазмерПоОкончании,
			|ИспользуетсяПоОкончании";
		
		ЧастиТекстаЗапроса.Добавить(
			"	ДействующиеПлановыеРасчеты.ГоловнаяОрганизация,
			|	ВЫБОР
			|		КОГДА ПлановыйФОТ.ВкладВФОТ ЕСТЬ NULL ИЛИ НЕ ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + ".Рассчитывается
			|			ТОГДА ДействующиеПлановыеРасчеты.Размер
			|			ИНАЧЕ ПлановыйФОТ.ВкладВФОТ
			|	КОНЕЦ КАК Размер,
			|	ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + ".Рассчитывается КАК Рассчитывается,
			|	ВЫБОР КОГДА РасчетыПоказатели.Показатель.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПоказательЗависящийОтСтажа,
			|	ДействующиеПлановыеРасчеты.ПериодВозвратногоСобытия КАК ДатаОкончанияНачисления,
			|	ЕСТЬNULL(ПлановыйФОТВозвратные.ВкладВФОТ, ПлановыеНачисленияВозвратные.Размер) КАК РазмерПоОкончании,
			|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании,");
		
		Если СодержитПолеХарактерНачисления Тогда
			
			КлючиОписанияНачисления = КлючиОписанияНачисления + ",ВидПлановогоНачисления";
			
			ЧастиТекстаЗапроса.Добавить(
				"	ВЫБОР
				|		КОГДА НачисленияПозиций.ПозицияШтатногоРасписания ЕСТЬ NULL
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерПлановогоНачисления.Индивидуальное)
				|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХарактерПлановогоНачисления.Штатное)
				|	КОНЕЦ КАК ХарактерНачисления,");
		
		КонецЕсли;
		
		Если Не ИсключатьПособия Тогда
			
			КлючиОписанияНачисления = КлючиОписанияНачисления + ",Применение";
			
			ЧастиТекстаЗапроса.Добавить(
				"	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
				|			ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЭтоПособие,
				|	ВЫБОР
				|		КОГДА ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))
				|			ТОГДА ИСТИНА
				|			ИНАЧЕ ЕСТЬNULL(ПрименениеПлановыхНачислений.Применение, Истина)
				|	КОНЕЦ КАК Применение,");
			
		КонецЕсли;
		
	Иначе
		
		ЧастиТекстаЗапроса.Добавить("	ДействующиеПлановыеРасчеты.Размер КАК Размер,");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса.Добавить(
		"	ЕСТЬNULL(РасчетыПоказатели.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель,
		|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение
		|ПОМЕСТИТЬ ВТНачисленияСотрудников
		|ИЗ
		|	ВТПлановые" + ИмяТаблицы + "СрезПоследних КАК ДействующиеПлановыеРасчеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяТаблицы + ".Показатели КАК РасчетыПоказатели
		|			ПО ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " = РасчетыПоказатели.Ссылка
		|				И (РасчетыПоказатели.ЗапрашиватьПриВводе)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|		ПО (ЗначенияПериодическихПоказателей.Показатель = РасчетыПоказатели.Показатель)
		|			И (ЗначенияПериодическихПоказателей.Значение <> 0)
		|			И (ЗначенияПериодическихПоказателей.ДокументОснование = ДействующиеПлановыеРасчеты.ДокументОснование)
		|			И (ЗначенияПериодическихПоказателей." + ИмяПоляСотрудник + " = ДействующиеПлановыеРасчеты." + ИмяПоляСотрудник + ")");
	
	Если ПолучениеНачислений  Тогда
		
		ЧастиТекстаЗапроса.Добавить(
			"			И ДействующиеПлановыеРасчеты.ГоловнаяОрганизация = ЗначенияПериодическихПоказателей.Организация.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТ
			|		ПО ДействующиеПлановыеРасчеты.Период = ПлановыйФОТ.Период
			|			И ДействующиеПлановыеРасчеты.Сотрудник = ПлановыйФОТ.Сотрудник
			|			И ДействующиеПлановыеРасчеты.Начисление = ПлановыйФОТ.Начисление
			|			И ДействующиеПлановыеРасчеты.ДокументОснование = ПлановыйФОТ.ДокументОснование
			|			И ДействующиеПлановыеРасчеты.ГоловнаяОрганизация = ПлановыйФОТ.ГоловнаяОрганизация
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТВозвратные КАК ПлановыйФОТВозвратные
			|			ПО ПлановыеНачисленияВозвратные.Период = ПлановыйФОТВозвратные.Период
			|				И ПлановыеНачисленияВозвратные.Начисление = ПлановыйФОТВозвратные.Начисление
			|				И ПлановыеНачисленияВозвратные.Сотрудник = ПлановыйФОТВозвратные.Сотрудник
			|				И ПлановыеНачисленияВозвратные.ДокументОснование = ПлановыйФОТВозвратные.ДокументОснование
			|				И ПлановыеНачисленияВозвратные.ГоловнаяОрганизация = ПлановыйФОТВозвратные.ГоловнаяОрганизация
			|		ПО ДействующиеПлановыеРасчеты.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ДействующиеПлановыеРасчеты.ГоловнаяОрганизация = ПлановыеНачисленияВозвратные.ГоловнаяОрганизация
			|			И ДействующиеПлановыеРасчеты.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ДействующиеПлановыеРасчеты.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ДействующиеПлановыеРасчеты.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование");
		
		Если СодержитПолеХарактерНачисления Тогда
			
			ЧастиТекстаЗапроса.Добавить(
				"		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОтборовПозицийШтатногоРасписания + " КАК КадровыеДанныеСотрудников
				|			ПО ДействующиеПлановыеРасчеты.Период = КадровыеДанныеСотрудников.Период
				|				И ДействующиеПлановыеРасчеты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПозиций КАК НачисленияПозиций
				|			ПО НАЧАЛОПЕРИОДА(ДействующиеПлановыеРасчеты.Период, ДЕНЬ) = НачисленияПозиций.Период
				|				И КадровыеДанныеСотрудников.ДолжностьПоШтатномуРасписанию = НачисленияПозиций.ПозицияШтатногоРасписания
				|				И ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " = НачисленияПозиций.Начисление");
			
		КонецЕсли;
		
		Если Не ИсключатьПособия Тогда
			
			ЧастиТекстаЗапроса.Добавить(
				"		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
				|			ПО ДействующиеПлановыеРасчеты.Период = ПрименениеПлановыхНачислений.Период
				|				И ДействующиеПлановыеРасчеты.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник");
			
		КонецЕсли;
		
	Иначе
		
		ЧастиТекстаЗапроса.Добавить(
			"			И ДействующиеПлановыеРасчеты.Организация = ЗначенияПериодическихПоказателей.Организация");
		
	КонецЕсли;
	
	Если ПолучениеНачислений Тогда
		
		ЧастиТекстаЗапроса.Добавить(
			"ГДЕ
			|	(ДействующиеПлановыеРасчеты.Используется
			|		Или ПлановыеНачисленияВозвратные.Используется)");
		
		Если ИсключатьПособия Тогда
			
			ЧастиТекстаЗапроса.Добавить(
				"	И НЕ ВЫРАЗИТЬ(ДействующиеПлановыеРасчеты." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛетВоеннослужащим), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет))");
			
		КонецЕсли;
		
	Иначе
		
		ЧастиТекстаЗапроса.Добавить(
			"ГДЕ
			|	ДействующиеПлановыеРасчеты.Используется");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиТекстаЗапроса.Добавить("ВЫБРАТЬ * ИЗ ВТНачисленияСотрудников КАК НачисленияСотрудников");
	
	Если ПолучениеНачислений Тогда
		
		ЧастиТекстаЗапроса.Добавить(
			"ГДЕ
			|	ВЫРАЗИТЬ(НачисленияСотрудников." + ИмяРеквизитаВидРасчета + " КАК ПланВидовРасчета.Начисления).ЯвляетсяЛьготой = ЛОЖЬ");
		
	КонецЕсли;
	
	Если ОписаниеТаблицыВидовРасчета <> Неопределено
		И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплатаФормы");
		Модуль.УстановитьУсловияОтбораПоОписаниюТаблицы(Запрос, ЧастиТекстаЗапроса, ОписаниеТаблицыВидовРасчета);
		
	КонецЕсли;
	
	// Упорядочивание таблицы
	ЧастиТекстаЗапроса.Добавить(
		"УПОРЯДОЧИТЬ ПО
		|	Сотрудник,");
		
	Если ПолучениеНачислений И Не ИсключатьПособия Тогда
		ЧастиТекстаЗапроса.Добавить("	ЭтоПособие УБЫВ,");
	КонецЕсли;
		
	Если ПустаяСтрока(ИмяДополнительногоПоляПорядка) Тогда
		
		ЧастиТекстаЗапроса.Добавить(
			"	" + ИмяПоляПорядка + ".РеквизитДопУпорядочивания,
			|	" + ИмяПоляПорядка + ",
			|	ДокументОснование,
			|	Показатель");
		
	Иначе
		
		ЧастиТекстаЗапроса.Добавить(
			"	" + ИмяПоляПорядка + ",
			|	" + ИмяДополнительногоПоляПорядка + ".РеквизитДопУпорядочивания,
			|	" + ИмяДополнительногоПоляПорядка + ",
			|	ДокументОснование,
			|	Показатель");
		
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
	
	ДанныеСотрудников = Новый Соответствие;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		Начисления = Новый Массив;
		Пока Выборка.СледующийПоЗначениюПоля(ИмяПоляПорядка) Цикл
			
			Если ПустаяСтрока(ИмяДополнительногоПоляПорядка) Тогда
				
				Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
					
					СтруктураНачисления = Новый Структура(КлючиОписанияНачисления);
					ЗаполнитьЗначенияСвойств(СтруктураНачисления, Выборка);
					
					Показатели = СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета);
					
					СтруктураНачисления.Вставить("Показатели", Показатели);
					Начисления.Добавить(СтруктураНачисления);
					
				КонецЦикла;
				
			Иначе
				
				Пока Выборка.СледующийПоЗначениюПоля(ИмяДополнительногоПоляПорядка) Цикл
					
					Пока Выборка.СледующийПоЗначениюПоля("ДокументОснование") Цикл
						
						СтруктураНачисления = Новый Структура(КлючиОписанияНачисления);
						ЗаполнитьЗначенияСвойств(СтруктураНачисления, Выборка);
						
						Показатели = СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета);
						
						СтруктураНачисления.Вставить("Показатели", Показатели);
						Начисления.Добавить(СтруктураНачисления);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСотрудников.Вставить(Выборка.Сотрудник, Новый Структура("Начисления", Начисления));
		
	КонецЦикла;
	
	Если ПолучениеНачислений И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		
		// Дополнительные тарифные ставки, коэффициенты.
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, ИмяПоляСотрудник),
			ПараметрыПостроения);
		
		КлючиОписанияПоказателей = "РабочееМесто,Показатель,Значение,ТекущееЗначение,ДействующийПоказатель,ИдентификаторСтрокиВидаРасчета";
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДействующиеДополнительныеПоказатели.Сотрудник КАК РабочееМесто,
			|	ДействующиеДополнительныеПоказатели.Показатель КАК Показатель,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК Значение,
			|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК ТекущееЗначение,
			|	ИСТИНА КАК ДействующийПоказатель,
			|	0 КАК ИдентификаторСтрокиВидаРасчета
			|ИЗ
			|	ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ДействующиеДополнительныеПоказатели
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
			|		ПО (ЗначенияПериодическихПоказателей.Показатель = ДействующиеДополнительныеПоказатели.Показатель)
			|			И (ЗначенияПериодическихПоказателей.Сотрудник = ДействующиеДополнительныеПоказатели.Сотрудник)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСотрудников КАК НачисленияСотрудников
			|		ПО ДействующиеДополнительныеПоказатели.Показатель = НачисленияСотрудников.Показатель
			|			И ДействующиеДополнительныеПоказатели.Сотрудник = НачисленияСотрудников.Сотрудник
			|ГДЕ
			|	ДействующиеДополнительныеПоказатели.Применение
			|	И НачисленияСотрудников.Показатель ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	РабочееМесто";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.СледующийПоЗначениюПоля("РабочееМесто") Цикл 
			
			ДополнительныеПоказатели = Новый Массив;
			
			Пока Выборка.Следующий() Цикл
				
				ОписаниеПоказателя = Новый Структура(КлючиОписанияПоказателей);
				ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
				ДополнительныеПоказатели.Добавить(ОписаниеПоказателя);
				
			КонецЦикла;
			
			ДанныеСотрудника = ДанныеСотрудников.Получить(Выборка.РабочееМесто);
			Если ДанныеСотрудника = Неопределено Тогда
				ДанныеСотрудника = Новый Структура;
			КонецЕсли;
			
			ДанныеСотрудника.Вставить("ДополнительныеПоказатели", ДополнительныеПоказатели);
			ДанныеСотрудников.Вставить(Выборка.РабочееМесто, ДанныеСотрудника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

Функция ЕстьРеквизитФормы(Форма, Знач ПолныйПутьКРеквизиту) Экспорт
	
	МассивИмен = СтрРазделить(ПолныйПутьКРеквизиту, ".");
	Если МассивИмен.Количество() = 1 Тогда
		
		ИмяРеквизита = ПолныйПутьКРеквизиту;
		ПутьКРеквизиту = "";
		
	Иначе
		
		ИмяРеквизита = МассивИмен[МассивИмен.Количество() - 1];
		
		МассивИмен.Удалить(МассивИмен.Количество() - 1);
		ПутьКРеквизиту = СтрСоединить(МассивИмен, ".");
		
	КонецЕсли;
	
	ИменаРеквизитов = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, ИменаРеквизитов, ПутьКРеквизиту);
	Если ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗначениеРеквизитаФормы(Форма, Знач ПолныйПутьКРеквизиту, Знач ПроверятьСуществованиеРеквизита = Ложь) Экспорт
	
	Если Не ПроверятьСуществованиеРеквизита
		Или ЕстьРеквизитФормы(Форма, ПолныйПутьКРеквизиту) Тогда
		
		Возврат ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПолныйПутьКРеквизиту);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура РедактированиеСоставаНачисленийСотрудниковДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень = Истина, ИсключатьПособия = Истина, ИсключатьВременноОтмененные = Ложь) Экспорт
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ПутьКДаннымПоказатели = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	ДанныеПлановыхРасчетов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказатели);
	
	ДанныеДолжностей = ЗначениеРеквизитаФормы(Форма, "ДанныеДолжности", Истина);
	
	ДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень, ИсключатьПособия, ИсключатьВременноОтмененные, ДанныеДолжностей);
	
КонецПроцедуры

Процедура ДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, ДанныеПлановыхРасчетов, ДанныеПоказателей, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень = Истина, ИсключатьПособия = Истина, ИсключатьВременноОтмененные = Ложь, ДанныеДолжностей = Неопределено) Экспорт
	
	ДанныеСотрудников = ДействующиеНачисленияСотрудников(
		СотрудникиДаты, ДокументСсылка, ОписаниеТаблицыВидовРасчета, ФормироватьСПериодичностьДень, ИсключатьПособия, ДанныеДолжностей);
	
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыВидовРасчета.НомерТаблицы * 1000000 + 1;
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		ЕстьКолонкаДействующийВидРасчета = Неопределено;
		ЕстьКолонкаРазмер = Неопределено;
		ЕстьКолонкаРегистратор = Неопределено;
		Если ДанныеСотрудника.Значение.Свойство("Начисления") Тогда
			
			Для каждого ДанныеНачисления Из ДанныеСотрудника.Значение.Начисления Цикл
				
				Если ИсключатьВременноОтмененные
					И Не ДанныеНачисления.Используется Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПлановыхРасчетов = ДанныеПлановыхРасчетов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлановыхРасчетов, ДанныеНачисления);
				
				Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
					СтрокаПлановыхРасчетов[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник] = ДанныеНачисления.Сотрудник;
				КонецЕсли;
				
				Если ЕстьКолонкаРегистратор = Неопределено Тогда
					ЕстьКолонкаРегистратор = ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "Регистратор");
				КонецЕсли;
				
				Если ЕстьКолонкаРегистратор Тогда
					СтрокаПлановыхРасчетов.Регистратор = ДанныеНачисления.Регистратор;
				КонецЕсли;
				
				СтрокаПлановыхРасчетов[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета] = ДанныеНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета];
				СтрокаПлановыхРасчетов.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
				
				Если ЕстьКолонкаДействующийВидРасчета = Неопределено Тогда
					ЕстьКолонкаДействующийВидРасчета = ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "ДействующийВидРасчета");
				КонецЕсли;
				
				Если ЕстьКолонкаДействующийВидРасчета Тогда
					СтрокаПлановыхРасчетов.ДействующийВидРасчета = ДанныеНачисления.Используется;
				КонецЕсли;
				
				Если ЕстьКолонкаРазмер = Неопределено Тогда
					
					ЕстьКолонкаРазмер = ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "Размер");
					
					Если ЕстьКолонкаРазмер = Ложь
						И ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеРазмер") Тогда
						
						ЕстьКолонкаРазмер = ОписаниеТаблицыВидовРасчета.СодержитПолеРазмер;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЕстьКолонкаРазмер Тогда
					
					СтрокаПлановыхРасчетов.Размер = ДанныеНачисления.Размер;
					Если Не ДанныеНачисления.Свойство("Рассчитывается") ИЛИ Не ДанныеНачисления.Рассчитывается Тогда
						
						ЕстьКолонкаТекущееЗначение1 = ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "ТекущееЗначение1");
						
						Если ЕстьКолонкаТекущееЗначение1 Тогда
							СтрокаПлановыхРасчетов.ТекущееЗначение1 = ДанныеНачисления.Размер;
						КонецЕсли;
						
						ЕстьКолонкаЗначениеПоОкончании1 = ЕстьКолонкаВСтрокеКоллекции(СтрокаПлановыхРасчетов, "ЗначениеПоОкончании1");
						
						Если ЕстьКолонкаЗначениеПоОкончании1 
							И ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Начисления" Тогда
							
							СтрокаПлановыхРасчетов.ЗначениеПоОкончании1 = ДанныеНачисления.РазмерПоОкончании;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЕстьКолонкаТекущееЗначение = Неопределено;
				Для Каждого ОписаниеДанныхПоказателя Из ДанныеНачисления.Показатели Цикл
					
					ДанныеПоказателя = ДанныеПоказателей.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеПоказателя, ОписаниеДанныхПоказателя);
					
					ДанныеПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Если ЕстьКолонкаТекущееЗначение = Неопределено Тогда
						ЕстьКолонкаТекущееЗначение = ЕстьКолонкаВСтрокеКоллекции(ДанныеПоказателя, "ТекущееЗначение");
					КонецЕсли;
					
					Если ЕстьКолонкаТекущееЗначение Тогда
						ДанныеПоказателя.ТекущееЗначение = ОписаниеДанныхПоказателя.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеСотрудника Из ДанныеСотрудников Цикл
		
		Если Не ДанныеСотрудника.Значение.Свойство("ДополнительныеПоказатели") Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ДанныеПоказателя Из ДанныеСотрудника.Значение.ДополнительныеПоказатели Цикл
			
			СтрокиПоказателя = ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель,ИдентификаторСтрокиВидаРасчета", ДанныеПоказателя.Показатель, 0));
			Если СтрокиПоказателя.Количество() = 0 Тогда
				СтрокаПоказателя = ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ДанныеПоказателя);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьКолонкаВСтрокеКоллекции(СтрокаКоллекции, ИмяКолонки) Экспорт
	
	ЕстьКолонка = Ложь;
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		ЕстьКолонка = (СтрокаКоллекции.Владелец().Колонки.Найти(ИмяКолонки) <> Неопределено);
	ИначеЕсли ТипЗнч(СтрокаКоллекции) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ЕстьКолонка = СтрокаКоллекции.Свойство(ИмяКолонки);
	КонецЕсли;
	
	Возврат ЕстьКолонка;
	
КонецФункции

Функция СобратьИнформациюОПоказателях(Выборка, СтруктураНачисления, ИмяТаблицы, ИмяРеквизитаВидРасчета)
	
	Показатели = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Показатель) Тогда
			
			ОписаниеПоказателя = Новый Структура("Показатель,Значение");
			
			ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, Выборка);
			Показатели.Добавить(ОписаниеПоказателя);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Перенос данных документа в реквизит формы для форм документов, которые редактируют состав начислений.
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
Процедура РедактированиеСоставаНачисленийДанныеВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписанияТаблицВидовРасчета, РежимРаботы, ФормироватьСПериодичностьДень = Ложь, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если СотрудникиДаты.Количество() > 0 Тогда
		
		Если ТипЗнч(ОписанияТаблицВидовРасчета) = Тип("Массив") Тогда
			ОписанияТаблиц = ОписанияТаблицВидовРасчета;
		Иначе
			ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицВидовРасчета);
		КонецЕсли;
		
		ВводНачисленийДанныеВРеквизит(Форма, ОписанияТаблиц, РежимРаботы, , , Ложь);
		РедактированиеСоставаНачисленийПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписанияТаблиц, РежимРаботы, , ДатаСобытия, ДатаОкончания);
		УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписанияТаблиц, РежимРаботы);
		
		Для Каждого ОписаниеТаблицыВидовРасчета Из ОписанияТаблиц Цикл
			
			ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
			ДанныеФормыНачисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
			
			СтрокиНачисленийРедактируемыхВОтдельныхПолях = Новый Массив;
			МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
			
			Для Каждого ДанныеСтрокиНачисление Из ДанныеФормыНачисления Цикл
				
				ВидРасчета = ?(ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета,
					ДанныеСтрокиНачисление[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета],
					Форма.Объект[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета]);
				
				ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
				
				Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета)
					И (ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
						ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
						ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
					
					Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется", ДанныеСтрокиНачисление.ДействующийВидРасчета);
					ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется", ДанныеСтрокиНачисление.ДействующийВидРасчета);
					ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
						ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется", ДанныеСтрокиНачисление.ДействующийВидРасчета);
					КонецЕсли;
					
					СтрокиНачисленийРедактируемыхВОтдельныхПолях.Добавить(ДанныеСтрокиНачисление);
					
				Иначе
					ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(ДанныеСтрокиНачисление, МаксимальноеКоличествоПоказателей, 1, ОписаниеТаблицыВидовРасчета, ДатаСобытия, ДатаОкончания);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрокиНачисленийРедактируемыхВОтдельныхПолях.Количество() > 0 Тогда
				
				Для Каждого СтрокаНачисленийРедактируемыхВОтдельныхПолях Из СтрокиНачисленийРедактируемыхВОтдельныхПолях Цикл
					ДанныеФормыНачисления.Удалить(СтрокаНачисленийРедактируемыхВОтдельныхПолях);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Перечитывает значения показателей, действующие до даты изменения начисления в форме документа.
// Выполняется, например, при смене даты перевода сотрудника для обновления данных о "прежних" показателях.
// 
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
//		Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//			хранения значений показателей редактируемых начислений.
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//		СотрудникиДаты - список сотрудников, начисления которых редактируются. 
//			Представляет собой табличную часть с колонками.
//				Сотрудник
//				Период - дата, на которую получаются действующие начисления.
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//
Процедура РедактированиеСоставаНачисленийПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписанияТаблицВидовРасчета, РежимРаботы, ФормироватьСПериодичностьДень = Ложь, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если СотрудникиДаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблицВидовРасчета) = Тип("Массив") Тогда
		ОписанияТаблиц = ОписанияТаблицВидовРасчета;
	Иначе
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицВидовРасчета);
	КонецЕсли;
	
	ПоказыватьВременноОтмененныеНачисления = Ложь;
	
	ДанныеНачислений = Неопределено;
	ДанныеПоказателей = Неопределено;
	Для каждого ОписаниеТаблицыВидовРасчета Из ОписанияТаблиц Цикл
		
		ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
		
		ДанныеФормыНачисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		Если ДанныеНачислений = Неопределено Тогда
			
			ДанныеНачислений = ДанныеФормыНачисления.Выгрузить();
			ДанныеНачислений.Колонки[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета].Имя = "Начисление";
			Если ДанныеНачислений.Колонки.Найти("ДокументОснование") = Неопределено Тогда 
				ДанныеНачислений.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
			КонецЕсли;
			
			ДанныеПоказателей = Новый ТаблицаЗначений;
			ДанныеПоказателей.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
			ДанныеПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
			ДанныеПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ДанныеПоказателей.Колонки.Добавить("НомерПоказателя", Новый ОписаниеТипов("Число"));
			ДанныеПоказателей.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
			
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеФормыНачисления.Выгрузить(), ДанныеНачислений);
		КонецЕсли;
		
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
		
		Для Каждого СтрокаНачисления Из ДанныеФормыНачисления Цикл
			
			Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
				
				Если ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя]) Тогда
					
					ОписаниеПоказателя = ДанныеПоказателей.Добавить();
					ОписаниеПоказателя.НомерПоказателя = НомерПоказателя;
					
					Если СтрокаНачисления.Свойство("ДокументОснование") Тогда
						ОписаниеПоказателя.ДокументОснование = СтрокаНачисления.ДокументОснование;
					КонецЕсли;
					
					ОписаниеПоказателя.ИдентификаторСтрокиВидаРасчета = СтрокаНачисления.ИдентификаторСтрокиВидаРасчета;
					ОписаниеПоказателя.Показатель = СтрокаНачисления["Показатель" + НомерПоказателя];
					ОписаниеПоказателя.Значение = СтрокаНачисления["Значение" + НомерПоказателя];
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник
			И ДанныеНачислений.Колонки.Найти(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник) <> Неопределено Тогда
			
			ДанныеНачислений.Колонки[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник].Имя = "Сотрудник";
			
		Иначе
			
			Если ДанныеНачислений.Колонки.Найти("Сотрудник") = Неопределено Тогда
				ДанныеНачислений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
				
				Если СотрудникиДаты.Количество() > 0 Тогда
					ДанныеНачислений.ЗаполнитьЗначения(СотрудникиДаты[0].Сотрудник, "Сотрудник");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицыВидовРасчета) Тогда
			ПоказыватьВременноОтмененныеНачисления = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияПоказателейДокумента", ДанныеПоказателей);
	Запрос.УстановитьПараметр("НачисленияДокумента", ДанныеНачислений);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДаты);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	ПараметрыПостроенияФОТ = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроенияФОТ.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроенияФОТ.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТ",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроенияФОТ);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты, "Сотрудник"),
		ПараметрыПостроения);
	
	ЕстьКолонкиСведенийПоОкончании = ДанныеНачислений.Колонки.Найти("ДатаОкончанияНачисления") <> Неопределено;
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия КАК Период,
			|	ПлановыеНачисления.Сотрудник,
			|	ПлановыеНачисления.Начисление
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеНачисления
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|ГДЕ
			|	ПлановыеНачисления.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПлановыеПоказатели.ПериодВозвратногоСобытия КАК Период,
			|	ПлановыеПоказатели.Сотрудник,
			|	ПлановыеПоказатели.Показатель
			|ПОМЕСТИТЬ ВТОтборВозвратныхСобытийПлановыеПоказатели
			|ИЗ
			|	ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПлановыеПоказатели
			|ГДЕ
			|	ПлановыеПоказатели.ПериодВозвратногоСобытия <> ДАТАВРЕМЯ(1, 1, 1)";
		
		Запрос.Выполнить();
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
			ПараметрыПостроения,
			"ВТПлановыеНачисленияВозвратные");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыйФОТ",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТОтборВозвратныхСобытийПлановыеНачисления", "Сотрудник,Начисление"),
			ПараметрыПостроенияФОТ,
			"ВТПлановыйФОТВозвратные");
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборВозвратныхСобытийПлановыеПоказатели", "Сотрудник,Показатель"),
			ПараметрыПостроения,
			"ВТЗначенияПоказателейВозвратные");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса = Новый Массив;
	
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
		|	ЗначенияПоказателейДокумента.Значение,
		|	ЗначенияПоказателейДокумента.Показатель,
		|	ЗначенияПоказателейДокумента.ДокументОснование,
		|	ЗначенияПоказателейДокумента.НомерПоказателя
		|ПОМЕСТИТЬ ВТЗначенияПоказателейДокумента
		|ИЗ
		|	&ЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НачисленияДокумента.Начисление КАК ПланВидовРасчета.Начисления) КАК Начисление,
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.ДокументОснование,
		|	НачисленияДокумента.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияДокумента КАК НачисленияДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&Сотрудники КАК Сотрудники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Начисление,
		|	Начисления.ИдентификаторСтрокиВидаРасчета,
		|	Начисления.Сотрудник,
		|	Начисления.ДокументОснование,
		|	Начисления.НомерСтроки
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК Сотрудники
		|		ПО Начисления.Сотрудник = Сотрудники.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияДокумента.Начисление,
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета,
		|	НачисленияДокумента.Сотрудник,
		|	НачисленияДокумента.ДокументОснование,
		|	НачисленияДокумента.НомерСтроки,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТНачисленияДокументаСПоказателями
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО НачисленияДокумента.Начисление = НачисленияПоказатели.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.Период,
		|	ПлановыеНачисления.Сотрудник,
		|	ПлановыеНачисления.Начисление,
		|	ПлановыеНачисления.ДокументОснование,
		|	ПлановыеНачисления.ГоловнаяОрганизация,
		|	ПлановыеНачисления.Используется,
		|	ПлановыеНачисления.Размер,
		|	НачисленияПоказатели.Показатель
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСрезПоследнихСПоказателями
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка");
		
	ЧастиТекстаЗапроса.Добавить(ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
	ЧастиТекстаЗапроса.Добавить(
		"ВЫБРАТЬ
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета КАК ИдентификаторСтрокиВидаРасчета,
		|	НачисленияДокумента.Показатель,
		|	ЗначенияПериодическихПоказателей.Сотрудник,
		|	ЗначенияПоказателейДокумента.Значение,
		|	ЗначенияПериодическихПоказателей.Значение КАК ТекущееЗначение,
		|	НачисленияДокумента.НомерСтроки КАК НомерСтроки,
		|	ЗначенияПоказателейДокумента.НомерПоказателя КАК НомерПоказателя");
	
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		ЧастиТекстаЗапроса.Добавить(",
			|	ЗначенияПериодическихПоказателейВозвратные.Значение КАК ЗначениеПоОкончании");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса.Добавить(
		"ИЗ
		|	ВТНачисленияДокументаСПоказателями КАК НачисленияДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
		|		ПО НачисленияДокумента.ИдентификаторСтрокиВидаРасчета = ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета
		|			И (НачисленияДокумента.Показатель = ЗначенияПоказателейДокумента.Показатель)
		|			И НачисленияДокумента.ДокументОснование = ЗначенияПоказателейДокумента.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследнихСПоказателями КАК ПлановыеНачисленияСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
		|			ПО (ПлановыеНачисленияСрезПоследних.Показатель = ЗначенияПериодическихПоказателей.Показатель)
		|				И ПлановыеНачисленияСрезПоследних.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
		|				И ПлановыеНачисленияСрезПоследних.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
		|				И ПлановыеНачисленияСрезПоследних.ГоловнаяОрганизация = ЗначенияПериодическихПоказателей.Организация.ГоловнаяОрганизация
		|		ПО НачисленияДокумента.Начисление = ПлановыеНачисленияСрезПоследних.Начисление
		|			И НачисленияДокумента.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
		|			И НачисленияДокумента.ДокументОснование = ПлановыеНачисленияСрезПоследних.ДокументОснование
		|			И НачисленияДокумента.Показатель = ПлановыеНачисленияСрезПоследних.Показатель");
	
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		ЧастиТекстаЗапроса.Добавить("
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателейВозвратные КАК ЗначенияПериодическихПоказателейВозвратные
			|	ПО ЗначенияПериодическихПоказателей.ПериодВозвратногоСобытия = ЗначенияПериодическихПоказателейВозвратные.Период
			|		И ЗначенияПериодическихПоказателей.Сотрудник = ЗначенияПериодическихПоказателейВозвратные.Сотрудник
			|		И ЗначенияПериодическихПоказателей.Показатель = ЗначенияПериодическихПоказателейВозвратные.Показатель
			|		И ЗначенияПериодическихПоказателей.ДокументОснование = ЗначенияПериодическихПоказателейВозвратные.ДокументОснование");
		
	КонецЕсли;
	
	ЧастиТекстаЗапроса.Добавить(
		"УПОРЯДОЧИТЬ ПО
		|	ИдентификаторСтрокиВидаРасчета,
		|	НомерПоказателя");
	
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоказателей = РезультатЗапроса.Выбрать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(НачисленияДокумента.Начисление, ПлановыеНачисленияСрезПоследних.Начисление) КАК Начисление,
		|	НачисленияДокумента.ИдентификаторСтрокиВидаРасчета,
		|	ЕСТЬNULL(ПлановыеНачисленияСрезПоследних.Используется, ЛОЖЬ) КАК ДействующийВидРасчета,
		|	НачисленияДокумента.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА НЕ НачисленияДокумента.Начисление ЕСТЬ NULL
		|			ТОГДА НачисленияДокумента.Начисление.Рассчитывается
		|		КОГДА НЕ ПлановыеНачисленияСрезПоследних.Начисление ЕСТЬ NULL
		|			ТОГДА ПлановыеНачисленияСрезПоследних.Начисление.Рассчитывается
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НачислениеРассчитывается,
		|	ЕСТЬNULL(ПлановыйФОТСрезПоследних.ВкладВФОТ, ПлановыеНачисленияСрезПоследних.Размер) КАК Размер,
		|	ПлановыеНачисленияСрезПоследних.ПериодВозвратногоСобытия КАК ДатаОкончанияНачисления";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|,
			|	ЕСТЬNULL(ПлановыйФОТВозвратные.ВкладВФОТ, ПлановыеНачисленияВозвратные.Размер) КАК РазмерПоОкончании,
			|	ЕСТЬNULL(ПлановыеНачисленияВозвратные.Используется, ПлановыеНачисленияСрезПоследних.Используется) КАК ИспользуетсяПоОкончании";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
		|			ПО ПлановыеНачисленияСрезПоследних.Начисление = ПлановыйФОТСрезПоследних.Начисление
		|				И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
		|				И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
		|				И ПлановыеНачисленияСрезПоследних.ГоловнаяОрганизация = ПлановыйФОТСрезПоследних.ГоловнаяОрганизация
		|		ПО НачисленияДокумента.Начисление = ПлановыеНачисленияСрезПоследних.Начисление
		|			И НачисленияДокумента.Сотрудник = ПлановыеНачисленияСрезПоследних.Сотрудник
		|			И НачисленияДокумента.ДокументОснование = ПлановыеНачисленияСрезПоследних.ДокументОснование";
		
	Если ЕстьКолонкиСведенийПоОкончании Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТВозвратные КАК ПлановыйФОТВозвратные
			|			ПО ПлановыеНачисленияВозвратные.Начисление = ПлановыйФОТВозвратные.Начисление
			|				И ПлановыеНачисленияВозвратные.Сотрудник = ПлановыйФОТВозвратные.Сотрудник
			|				И ПлановыеНачисленияВозвратные.ДокументОснование = ПлановыйФОТВозвратные.ДокументОснование
			|				И ПлановыеНачисленияВозвратные.ГоловнаяОрганизация = ПлановыйФОТВозвратные.ГоловнаяОрганизация
			|		ПО ПлановыеНачисленияСрезПоследних.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ПлановыеНачисленияСрезПоследних.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ПлановыеНачисленияСрезПоследних.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ПлановыеНачисленияСрезПоследних.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНачислений = РезультатЗапроса.Выбрать();
	
	Если ПоказыватьВременноОтмененныеНачисления Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПлановыеНачисления.Начисление КАК Начисление,
			|	ЛОЖЬ КАК ДействующийВидРасчета,
			|	ПлановыеНачисления.Начисление.Рассчитывается КАК НачислениеРассчитывается,
			|	ПлановыеНачисления.ДокументОснование,
			|	ЕСТЬNULL(ПлановыйФОТСрезПоследних.ВкладВФОТ, ПлановыеНачисления.Размер) КАК Размер,
			|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ПлановыеНачисленияВозвратные.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияНачисления,
			|	ПлановыеНачисленияВозвратные.Используется КАК ИспользуетсяПоОкончании,
			|	НачисленияПоказатели.НомерСтроки КАК НомерПоказателя,
			|	НачисленияПоказатели.Показатель,
			|	ЗначенияПериодическихПоказателей.Значение,
			|	ЗначенияПериодическихПоказателей.Значение КАК ТекущееЗначение,
			|	НачисленияПоказатели.Показатель.КраткоеНаименование КАК ПредставлениеПоказателя,
			|	НачисленияПоказатели.Показатель.Точность КАК Точность
			|ИЗ
			|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК НачисленияДокумента
			|		ПО ПлановыеНачисления.Начисление = НачисленияДокумента.Начисление
			|			И ПлановыеНачисления.Сотрудник = НачисленияДокумента.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = НачисленияДокумента.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыйФОТСрезПоследних КАК ПлановыйФОТСрезПоследних
			|		ПО ПлановыеНачисления.Начисление = ПлановыйФОТСрезПоследних.Начисление
			|			И ПлановыеНачисления.Сотрудник = ПлановыйФОТСрезПоследних.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = ПлановыйФОТСрезПоследних.ДокументОснование
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияВозвратные КАК ПлановыеНачисленияВозвратные
			|		ПО ПлановыеНачисления.ПериодВозвратногоСобытия = ПлановыеНачисленияВозвратные.Период
			|			И ПлановыеНачисления.Сотрудник = ПлановыеНачисленияВозвратные.Сотрудник
			|			И ПлановыеНачисления.Начисление = ПлановыеНачисленияВозвратные.Начисление
			|			И ПлановыеНачисления.ДокументОснование = ПлановыеНачисленияВозвратные.ДокументОснование
			|			И ПлановыеНачисления.Период < ПлановыеНачисленияВозвратные.Период
			|			И (ПлановыеНачисленияВозвратные.ЭтоВозвратноеСобытие)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО ПлановыеНачисления.Начисление = НачисленияПоказатели.Ссылка
			|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
			|		ПО (НачисленияПоказатели.Показатель = ЗначенияПериодическихПоказателей.Показатель)
			|			И ПлановыеНачисления.Сотрудник = ЗначенияПериодическихПоказателей.Сотрудник
			|			И ПлановыеНачисления.ДокументОснование = ЗначенияПериодическихПоказателей.ДокументОснование
			|ГДЕ
			|	НЕ ПлановыеНачисления.Используется
			|	И ПлановыеНачисленияВозвратные.Используется
			|	И НачисленияДокумента.Начисление ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	Начисление,
			|	НомерПоказателя";
		
		НачислениеРайонныйКоэффициент = ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент();
		НачислениеСевернаяНадбавка    = ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка();
		НачислениеНадбавкаЗаВредность = ПланыВидовРасчета.Начисления.НачислениеНадбавкаЗаВредность();
		
		УпорядочитьСписокНачислений = Ложь;
		ВыборкаВременноОтмененныхНачислений = Запрос.Выполнить().Выбрать();
		
	КонецЕсли;
	
	СоответствиеСтрокИдентификаторам = Новый Соответствие;
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого ОписаниеТаблицыВидовРасчета Из ОписанияТаблиц Цикл
		
		ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
		
		ДанныеФормыНачисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета);
		
		Для Каждого СтрокаНачислений Из ДанныеФормыНачисления Цикл
			
			СтруктураПоиска.НомерСтроки = СтрокаНачислений.НомерСтроки;
			
			ВыборкаНачислений.Сбросить();
			Если ВыборкаНачислений.НайтиСледующий(СтруктураПоиска) Тогда
				
				Если Не ЗначениеЗаполнено(ВыборкаНачислений.Начисление) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаНачислений.Свойство("ДатаОкончанияНачисления") Тогда
					СтрокаНачислений.ДатаОкончанияНачисления = ВыборкаНачислений.ДатаОкончанияНачисления;
					СтрокаНачислений.ИспользуетсяПоОкончании = ВыборкаНачислений.ИспользуетсяПоОкончании;
				КонецЕсли; 
				
				СтрокаНачислений.ДействующийВидРасчета = ВыборкаНачислений.ДействующийВидРасчета;
				Если Не ВыборкаНачислений.НачислениеРассчитывается Тогда 
					СтрокаНачислений.ТекущееЗначение1 = ВыборкаНачислений.Размер;
					Если ЕстьКолонкиСведенийПоОкончании Тогда
						СтрокаНачислений.ЗначениеПоОкончании1 = ВыборкаНачислений.РазмерПоОкончании;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СоответствиеСтрокИдентификаторам.Вставить(СтрокаНачислений.ИдентификаторСтрокиВидаРасчета, СтрокаНачислений);
			
		КонецЦикла;
		
		Пока ВыборкаПоказателей.СледующийПоЗначениюПоля("ИдентификаторСтрокиВидаРасчета") Цикл
			
			ДанныеСтрокиНачисления = СоответствиеСтрокИдентификаторам.Получить(ВыборкаПоказателей.ИдентификаторСтрокиВидаРасчета);
			Если ДанныеСтрокиНачисления <> Неопределено Тогда
				Пока ВыборкаПоказателей.Следующий() Цикл
					ДанныеСтрокиНачисления["ТекущееЗначение" + ВыборкаПоказателей.НомерПоказателя] = ВыборкаПоказателей.ТекущееЗначение;
					Если ЕстьКолонкиСведенийПоОкончании Тогда
						ДанныеСтрокиНачисления["ЗначениеПоОкончании" + ВыборкаПоказателей.НомерПоказателя] = ВыборкаПоказателей.ЗначениеПоОкончании;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицыВидовРасчета) Тогда
			
			Пока ВыборкаВременноОтмененныхНачислений.СледующийПоЗначениюПоля("Начисление") Цикл
				
				Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(1, ОписаниеТаблицыВидовРасчета)
					И (ВыборкаВременноОтмененныхНачислений.Начисление = НачислениеРайонныйКоэффициент
						Или ВыборкаВременноОтмененныхНачислений.Начисление = НачислениеСевернаяНадбавка
						Или ВыборкаВременноОтмененныхНачислений.Начисление = НачислениеНадбавкаЗаВредность) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаНачислений = ДанныеФормыНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаВременноОтмененныхНачислений);
				Пока ВыборкаВременноОтмененныхНачислений.СледующийПоЗначениюПоля("НомерПоказателя") Цикл
					Если Не ЗначениеЗаполнено(ВыборкаВременноОтмененныхНачислений.НомерПоказателя) Тогда 
						Продолжить;
					КонецЕсли;
					
					СтрокаНачислений["Показатель" + ВыборкаВременноОтмененныхНачислений.НомерПоказателя] = ВыборкаВременноОтмененныхНачислений.Показатель;
					СтрокаНачислений["Значение" + ВыборкаВременноОтмененныхНачислений.НомерПоказателя] = ВыборкаВременноОтмененныхНачислений.Значение;
					СтрокаНачислений["ТекущееЗначение" + ВыборкаВременноОтмененныхНачислений.НомерПоказателя] = ВыборкаВременноОтмененныхНачислений.ТекущееЗначение;
					СтрокаНачислений["ПредставлениеПоказателя" + ВыборкаВременноОтмененныхНачислений.НомерПоказателя] = ВыборкаВременноОтмененныхНачислений.ПредставлениеПоказателя;
					СтрокаНачислений["ТочностьПоказателя" + ВыборкаВременноОтмененныхНачислений.НомерПоказателя] = "ЧДЦ=" + ВыборкаВременноОтмененныхНачислений.Точность;
					
					УпорядочитьСписокНачислений = Истина;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если УпорядочитьСписокНачислений Тогда
				
				ТаблицаНачислений = ДанныеФормыНачисления.Выгрузить();
				ТаблицаНачислений.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
				
				Для каждого СтрокаТаблицыНачислений Из ТаблицаНачислений Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицыНачислений.Начисление) Тогда
						СтрокаТаблицыНачислений.Порядок = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаТаблицыНачислений.Начисление).РеквизитДопУпорядочивания;
					Иначе
						СтрокаТаблицыНачислений.Порядок = 99999;
					КонецЕсли;
					
				КонецЦикла;
				
				ТаблицаНачислений.Сортировать("Порядок,Начисление");
				ДанныеФормыНачисления.Загрузить(ТаблицаНачислений);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКомментарииДействийСНачислениями(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДатаСобытия = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСНачислением(СтрокаНачисления,
			ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, , РежимРаботы),
			РежимРаботы, ОписаниеТаблицыВидовРасчета, ДатаСобытия, ДатаОкончания);
		
	КонецЦикла;
	
КонецПроцедуры

// Дополнение формы, которая выполняет редактирование состава дополнительных показателей (таких как документ Кадровый
// перевод).
// Дополняет данные формы реквизитами и элементами формы, предназначенными для отображения текущих значений
// дополнительных показателей.
//  
Процедура РедактированиеСоставаДополнительныхПоказателейДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		// Дополняем таблицу формы реквизитами для текущих значений и комментарием.
		// Элементы формы для отображения этих реквизитов вводить не будем, так 
		// как они не выводятся в форме, а используются только при условном оформлении.
		ДобавляемыеРеквизиты = Новый Массив;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТекущееЗначение", Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты(), ПутьКДаннымПоказателей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДействующийПоказатель", Новый ОписаниеТипов("Булево"), ПутьКДаннымПоказателей));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ПутьКДаннымПоказателей));										
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДаннымПоказателей);
		ЗарплатаКадры.ДополнитьМассивИменРеквизитовФормыИзРеквизитовКДобавлению(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ДополнитьМассивИменРеквизитовФормыИзРеквизитовКДобавлению(Форма, МассивИменРеквизитовФормы, ПутьКДаннымПоказателей);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
	
	КонецЕсли;
	
	// Дополняем форму элементом для отображения комментария.
	Если ДобавлятьЭлементыФормы Тогда
		ПолеКомментарий = Форма.Элементы.Найти("ПоказателиКомментарий");
		Если ПолеКомментарий = Неопределено Тогда
			Таблица = Форма.Элементы.Найти("Показатели");
			ПолеКомментарий = Форма.Элементы.Добавить("ПоказателиКомментарий", Тип("ПолеФормы"), Таблица);
			ПолеКомментарий.ПутьКДанным = ПутьКДаннымПоказателей + ".Комментарий";
			ПолеКомментарий.Доступность = Истина;
			ПолеКомментарий.ОтображатьВШапке = Истина;
			ПолеКомментарий.ТолькоПросмотр = Истина;
			ПолеКомментарий.РастягиватьПоГоризонтали = Ложь;
			ПолеКомментарий.Ширина = 30;
		КонецЕсли;
	КонецЕсли;
	
	РедактированиеСоставаДополнительныхПоказателейУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета);
	
КонецПроцедуры

// Перенос данных документа в реквизит формы для форм документов, которые редактируют состав дополнительных показателей.
//
// Параметры:
//		ДокументСсылка - ссылка на документ, редактируемый в форме.
//
Процедура РедактированиеСоставаДополнительныхПоказателейДанныеВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком = Ложь, ФормироватьСПериодичностьДень = Ложь) Экспорт 
	
	УстановитьКомментарииДействийСДополнительнымиПоказателями(Форма, ОписаниеТаблицыВидовРасчета);
	РедактированиеСоставаДополнительныхПоказателейСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком, ФормироватьСПериодичностьДень);
	
КонецПроцедуры

Процедура УстановитьКомментарииДействийСДополнительнымиПоказателями(Форма, ОписаниеТаблицыВидовРасчета) Экспорт

	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;

	Показатели = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказателей);
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = 0 Тогда 
			ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(СтрокаПоказателя);
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры	

// Осуществляет проверку заполнения состава плановых начислений объекта в форме. Проверяется наличие начисления,
// определяющего оклад (тариф) и заполненность показателя оклад (тариф).
//
// Параметры:
//		Форма 						- ФормаКлиентскогоПриложения
//		ОписаниеТаблицыВидовРасчета - Структура см. функцию РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//		Отказ						- Булево
//		РежимРаботы					- Число, (0 - штатное расписание, 1 - кадровые приказы).
//
Процедура РедактированиеСоставаНачисленийПроверкаЗаполненияВФорме(Форма, ОписаниеТаблицыВидовРасчета, Отказ, РежимРаботы) Экспорт
	
	Если РежимРаботы <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
	
	МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы);
	
	РабочееМесто = Неопределено;
	Для каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Свойство("Действие")
			И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
			РабочееМесто = СтрокаНачисления[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник];
		КонецЕсли;
		
		Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаНачисления["Показатель" + НомерПоказателя]) Тогда
				Прервать;
			КонецЕсли;
			
			ИмяПоля = "Значение" + НомерПоказателя;
			ЗаданоЗначениеПоказателя = СтрокаНачисления[ИмяПоля];
			Если Не ЗаданоЗначениеПоказателя И Не СтрокаНачисления["ДопускаетсяНулевоеЗначение" + НомерПоказателя] Тогда
				
				ИмяПоказателя = ?(ЗначениеЗаполнено(СтрокаНачисления["ПредставлениеПоказателя" + НомерПоказателя]),
					СтрокаНачисления["ПредставлениеПоказателя" + НомерПоказателя], СтрокаНачисления["Показатель" + НомерПоказателя]);
				
				Если ЗначениеЗаполнено(РабочееМесто) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для %1 не задано значение ""%2""';
							|en = 'The ""%2"" value is not specified for %1'"),
						РабочееМесто,
						ИмяПоказателя);
						
				Иначе
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не задано значение ""%1""';
							|en = 'The ""%1"" value is not specified'"),
						ИмяПоказателя);
						
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , ПутьКДанным + "[" + ДанныеНачислений.Индекс(СтрокаНачисления) + "]." + ИмяПоля, , Отказ);
			
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих начисления
// (начисления в строках таблицы).

// Выполняет дополнение формы, предназначенной для ввода постоянных начислений.
// Требования:
//		Объект, редактируемый в форме имеет имя "Объект".
//		Имя таблицы формы и имя поля реквизита формы (параметр ИмяТаблицы) совпадают по именам (например, "Начисления").
// Параметры:
//		Форма
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//		РежимРаботы - число. 0 - режим штатного расписания, 1 - режим плановых начислений, 2 - режим начислений в расчетном
//		              документе.
//		ИмяПВР - имя плана видов расчета.
//
Процедура ВводНачисленийДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ДобавлятьЭлементыФормы = Истина,  ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь, ДокументСсылка = Неопределено) Экспорт
	
	Если ОписаниеТаблицыВидовРасчета.Свойство("КоличествоОтображаемыхПоказателей") Тогда
		КоличествоОтображаемыхПоказателей = ОписаниеТаблицыВидовРасчета.КоличествоОтображаемыхПоказателей;
	Иначе
		КоличествоОтображаемыхПоказателей = ЗарплатаКадрыРасширенныйПовтИсп.КоличествоОтображаемыхПоказателей(РежимРаботы, ИмяПВР, ДокументСсылка);
	КонецЕсли;
	
	Если ОписаниеТаблицыВидовРасчета.Свойство("КоличествоПоказателейРасчета") Тогда
		КоличествоПоказателейРасчета = ОписаниеТаблицыВидовРасчета.КоличествоПоказателейРасчета;
	Иначе
		КоличествоПоказателейРасчета = ЗарплатаКадрыРасширенныйПовтИсп.КоличествоПоказателейРасчета(РежимРаботы, ИмяПВР, ДокументСсылка);
	КонецЕсли;
	
	ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, Ложь, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Перенос данных табличной части со значениями показателей в реквизит формы документов, 
// предназначенных для ввода начислений.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписаниеТаблицыВидовРасчета - описание табличной части объекта, содержащей редактируемые начисления
//			см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета().
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ОтображатьТекущиеЗначения - признак того, что в форме отображаются действующие на настоящий 
//			момент показатели начислений. Применяется, например, в документах кадровых переводов.
//			По умолчанию - Ложь.
// 
Процедура ВводНачисленийДанныеВРеквизит(Форма, ОписанияТаблицВидовРасчета, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, ФормаДополнена = Истина, УдалитьСтрокиНачисленийРедактируемыхВОтдельныхПолях = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблицВидовРасчета) = Тип("Массив") Тогда
		ОписанияТаблиц = ОписанияТаблицВидовРасчета;
	Иначе
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицВидовРасчета);
	КонецЕсли;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Для каждого ОписаниеТаблицыВидовРасчета Из ОписанияТаблиц Цикл
		
		Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
			ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
		КонецЕсли;
		
		ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
		ДанныеПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей).Выгрузить();
		
		СтрокиНачисленийРедактируемыхВОтдельныхПолях = Новый Массив;
		
		ДанныеПоказателей.Индексы.Добавить("ИдентификаторСтрокиВидаРасчета,Показатель");
		Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
			
			ВидРасчета = ?(ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета,
				СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета],
				Форма.Объект[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета]);
			
			Если ВидРасчета.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетныйДокументСсылка = Неопределено;
			Если РежимРаботы = 2 Тогда
				// В других режимах расчетный документ не требуется уточнять.
				РасчетныйДокументСсылка = Форма.Объект.Ссылка;
			КонецЕсли;
			
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			
			Если ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета)
				И (ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент
					ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка
					ИЛИ ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность) Тогда
				
				Если ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент Тогда
					
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется", СтрокаНачислений.ДействующийВидРасчета);
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент", СтрокаНачислений.Размер);
					
					ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
					ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
					ОтборСтрокПоказателей.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
					
					СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
					Если СтрокиПоказателей.Количество() > 0 Тогда
						РайонныйКоэффициент = СтрокиПоказателей[0].Значение;
					Иначе
						РайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РайонныйКоэффициентСтруктурнойЕдиницы");
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", РайонныйКоэффициент);
					
				ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка Тогда
					
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется", СтрокаНачислений.ДействующийВидРасчета);
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка", СтрокаНачислений.Размер);
					
				ИначеЕсли ВидРасчетаИнфо.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НадбавкаЗаВредность Тогда
					
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется", СтрокаНачислений.ДействующийВидРасчета);
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность", СтрокаНачислений.Размер);
					
					ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
					ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
					ОтборСтрокПоказателей.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
					
					СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
					Если СтрокиПоказателей.Количество() > 0 Тогда
						ПроцентНадбавкиЗаВредность = СтрокиПоказателей[0].Значение;
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ПроцентНадбавкиЗаВредность);
					
				КонецЕсли;
				
				СтрокиНачисленийРедактируемыхВОтдельныхПолях.Добавить(СтрокаНачислений);
				
			Иначе
				ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения, РасчетныйДокументСсылка, ФормаДополнена, , , ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений);
			КонецЕсли;
			
			Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И Не ВидРасчетаИнфо.Рассчитывается Тогда 
				СтрокаНачислений.ФиксированнаяСумма = Истина;
				Если СтрокаНачислений.Свойство("ТочностьПоказателя1") Тогда 
					СтрокаНачислений["ТочностьПоказателя1"] = "ЧДЦ=2";
					Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
						СтрокаНачислений["МинимальноеЗначение1"] = СтрокаНачислений.РазмерМин;
						СтрокаНачислений["МаксимальноеЗначение1"] = СтрокаНачислений.РазмерМакс;
						Если Не ВидРасчетаИнфо.ВключатьВФОТ Тогда
							СтрокаНачислений.РазмерМин = 0;
							СтрокаНачислений.РазмерМакс = 0;
						КонецЕсли; 
					Иначе
						Если СтрокаНачислений.Свойство("Значение1") Тогда
							СтрокаНачислений["Значение1"] = СтрокаНачислений.Размер;
							Если Не ВидРасчетаИнфо.ВключатьВФОТ Тогда
								СтрокаНачислений.Размер = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда 
				СтрокаНачислений["ДоступенВыборОснования"] = ВидРасчетаИнфо.ПоддерживаетНесколькоПлановыхНачислений;
			КонецЕсли;
			
		КонецЦикла;
		
		Если УдалитьСтрокиНачисленийРедактируемыхВОтдельныхПолях
			И СтрокиНачисленийРедактируемыхВОтдельныхПолях.Количество() > 0 Тогда
			
			Для Каждого СтрокаНачисленийРедактируемыхВОтдельныхПолях Из СтрокиНачисленийРедактируемыхВОтдельныхПолях Цикл
				ДанныеНачислений.Удалить(СтрокаНачисленийРедактируемыхВОтдельныхПолях);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПредставленияКомандВводаСтажей(Форма, СотрудникиДаты, ОписанияТаблицВидовРасчета, РежимРаботы) Экспорт
	
	Если ТипЗнч(ОписанияТаблицВидовРасчета) = Тип("Массив") Тогда
		ОписанияТаблиц = ОписанияТаблицВидовРасчета;
	Иначе
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицВидовРасчета);
	КонецЕсли;
	
	СтажиСотрудников = Неопределено;
	СведенияОСтажахПолучались = Ложь;
	Для каждого ОписаниеТаблицыВидовРасчета Из ОписанияТаблиц Цикл
		
		Если РежимРаботы = 1 И СотрудникиДаты.Количество() > 0 Тогда
			
			ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыВидовРасчета.ПутьКДанным);
			Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
				
				Если СтрокаНачислений.ВидыСтажаПоказателей <> Неопределено Тогда
					
					Если ОписаниеТаблицыВидовРасчета.СодержитПолеСотрудник Тогда
						Сотрудник = СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаСотрудник]
					Иначе
						Сотрудник = СотрудникиДаты[0].Сотрудник;
					КонецЕсли;
					
					Если Не СведенияОСтажахПолучались Тогда
						
						СведенияОСтажахПолучались = Истина;
						СтажиСотрудников = КадровыйУчетРасширенный.СведенияОСтажахСотрудников(СотрудникиДаты);
						
						// Прекратить обработку если сведений о стажах не оказалось
						Если СтажиСотрудников = Неопределено Тогда
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
					СтажиСотрудника = СтажиСотрудников.Получить(Сотрудник);
					Если СтажиСотрудника <> Неопределено Тогда
						
						СтрокаНачислений.ОписаниеСтажевыхПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставленияКомандыВводаСтажейСотрудника(
							СтажиСотрудника, СтрокаНачислений.ВидыСтажаПоказателей);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Прекратить обработку если сведения о стажах были прочитаны и самих сведений не оказалось.
		Если СведенияОСтажахПолучались И СтажиСотрудников = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВводРаспределенияРезультатовРасчетаДанныеВРеквизит(Форма, ОписанияТаблиц) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблиц) <> Тип("Массив") Тогда
		ОписанияТаблиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблиц);
	КонецЕсли;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		
		ИменаКолонокТаблицы = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
		
		ДанныеОсновнаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		ДанныеРаспределения   = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымРаспределениеРезультатов).Выгрузить();
		ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
		
		ОтражениеЗарплатыВБухучетеРасширенный.ДополнитьТаблицуРаспределенияКодомСтатьиФинансирования(ДанныеРаспределения);
		
		ДанныеРаспределения.Индексы.Добавить("ИдентификаторСтроки");
		ОтборСтрок = Новый Структура("ИдентификаторСтроки");
		
		Для Каждого СтрокаОсновнойТаблицы Из ДанныеОсновнаяТаблица Цикл
			
			ОтборСтрок.ИдентификаторСтроки = СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки];
			ТаблицаРаспределения = ДанныеРаспределения.Скопировать(ОтборСтрок, ИменаКолонокТаблицы);
			СтруктураРаспределения = ТаблицаЗначенийВСтруктуру(ТаблицаРаспределения);
			СтрокаОсновнойТаблицы.РезультатРаспределения = СтруктураРаспределения;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Перенос данных из реквизита формы в табличную часть с показателями.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть "Показатели", предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Форма
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписанияТаблицРасчета - описание табличной части объекта или массив таких описаний, если таблиц несколько, 
//			содержащей редактируемые начисления см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//		РежимРаботы - режим работы таблицы с видами расчетов
//			0 - режим ввода штатного расписания - вводятся максимальные 
//				и минимальные значения ("вилка") условно-постоянных показателей
//			1 - режим ввода плановых начислений - вводятся значения 
//				условно-постоянных показателей
//			2 - режим ввода начислений в документе-начислятеле - вводятся значения всех 
//				показателей, отображаемых при виде расчета.
//		ПодготавливатьТабличнуюЧастьПоказатели - Булево, если истина, перед переносом данных подготавливается
//				табличная часть показатели.
//
Процедура ВводНачисленийРеквизитВДанные(Форма, Объект, ОписанияТаблицРасчета, РежимРаботы, ПодготавливатьТабличнуюЧастьПоказатели = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблицРасчета) <> Тип("Массив") Тогда
		ОписанияТаблицРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицРасчета);
	КонецЕсли;
	
	Если ПодготавливатьТабличнуюЧастьПоказатели Тогда
		
		ТаблицыПоказателей = Новый Соответствие;
		Для каждого ОписаниеТаблицы Из ОписанияТаблицРасчета Цикл
			
			ЧастиИмениТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДаннымПоказателей, ".");
			ИмяТаблицыПоказатели = ЧастиИмениТаблицы[ЧастиИмениТаблицы.ВГраница()];
			
			ТаблицыПоказателей.Вставить(ИмяТаблицыПоказатели);
			
		КонецЦикла;
		
		Для каждого ИмяТаблицыПоказатели Из ТаблицыПоказателей Цикл
			ПодготовитьТабличнуюЧастьПоказатели(Объект, ИмяТаблицыПоказатели.Ключ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблицРасчета Цикл
		ВводНачисленийРеквизитВДанныеТаблицыРасчета(Форма, Объект, ОписаниеТаблицы, РежимРаботы);
	КонецЦикла;
	
КонецПроцедуры

// Перенос данных из реквизита формы в табличную часть с распределение результатов начислений или удержаний.
// Требования:
//		- Имя таблицы формы и имя поля реквизита формы (см. параметр ОписаниеТаблицыВидовРасчета) 
//		  совпадают по именам (например, "Начисления").
//		- Объект, редактируемый в форме имеет табличную часть , предназначенную для 
//		  хранения значений показателей редактируемых начислений.
// Параметры:
//		Форма
//		Объект - объект, содержащий коллекции данных, соответствующие табличным частям 
//			с видами расчетов документа и со значениями показателей.
//			Имя табличной части с начислениями передается как ОписаниеТаблицыВидовРасчета.ИмяТаблицы,
//			а имя табличной части с показателями всегда "Показатели".
//		ОписанияТаблицРасчета - описание табличной части объекта или массив таких описаний, если таблиц несколько, 
//			содержащей редактируемые начисления см. РасчетЗарплатыРасширенныйКлиентСервер.ОписаниеТаблицыРасчета.
//
Процедура ВводРаспределенияРезультатовРасчетаРеквизитВДанные(Форма, Объект, ОписанияТаблицРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписанияТаблицРасчета) <> Тип("Массив") Тогда
		ОписанияТаблицРасчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписанияТаблицРасчета);
	КонецЕсли;
	
	ОчищенныеТаблицыРаспределения = Новый Массив;

	Для Каждого ОписаниеТаблицы Из ОписанияТаблицРасчета Цикл
		
		ПутьКДанным  = ОписаниеТаблицы.ПутьКДанным;
		ИмяТаблицыРаспределения = ЗарплатаКадрыРасширенныйКлиентСервер.ИмяТаблицыРаспределениеРезультатовРасчета(ОписаниеТаблицы);
		ИмяРеквизитаИдентификаторСтроки = ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки;
		НомерТаблицы = ОписаниеТаблицы.НомерТаблицы;
		УстанавливатьИдентификаторСтроки = ОписаниеТаблицы.УстанавливатьИдентификаторСтрокиРаспределенияРезультата;
		
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
		ИмяТабличнойЧасти = Подстроки[Подстроки.ВГраница()];
	
		Если ОчищенныеТаблицыРаспределения.Найти(ИмяТаблицыРаспределения) = Неопределено Тогда
			ОчищенныеТаблицыРаспределения.Добавить(ИмяТаблицыРаспределения);
			Объект[ИмяТаблицыРаспределения].Очистить();
		КонецЕсли;
		
		ДанныеОсновнаяТаблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		Если УстанавливатьИдентификаторСтроки Тогда
			ИдентификаторСтроки = НомерТаблицы*1000000;
		КонецЕсли;
		
		РаспределениеРезультатов = Неопределено;
		Если ЗначениеЗаполнено(ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище) Тогда
			АдресРаспределенияРезультатовВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияРезультатовВХранилище);
			РаспределениеРезультатов = ПолучитьИзВременногоХранилища(АдресРаспределенияРезультатовВХранилище);
		КонецЕсли;
		
		Для Каждого СтрокаОсновнойТаблицы Из ДанныеОсновнаяТаблица Цикл
			
			Если УстанавливатьИдентификаторСтроки Тогда
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
				Объект[ИмяТабличнойЧасти][ДанныеОсновнаяТаблица.Индекс(СтрокаОсновнойТаблицы)][ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
				СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки] = ИдентификаторСтроки;
			Иначе
				ИдентификаторСтроки    = СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки];
			КонецЕсли;
			
			РезультатРаспределения = СтрокаОсновнойТаблицы.РезультатРаспределения;
			
			Если РезультатРаспределения = Неопределено И РаспределениеРезультатов <> Неопределено Тогда
				ИсходныйИдентификаторСтроки = ?(ОписаниеТаблицы.ИмяТаблицы = "НДФЛ", 
					СтрокаОсновнойТаблицы[ИмяРеквизитаИдентификаторСтроки], 
					НомерТаблицы * 1000000 + СтрокаОсновнойТаблицы.ИсходныйНомерСтроки);
				Отбор = Новый Структура("ИдентификаторСтроки", ИсходныйИдентификаторСтроки);
				РезультатРаспределения = РаспределениеРезультатов.НайтиСтроки(Отбор);
			КонецЕсли;
			
			Если РезультатРаспределения <> Неопределено Тогда
				
				Для Каждого СтрокаРаспределения Из РезультатРаспределения Цикл
					
					НоваяСтрока = Объект[ИмяТаблицыРаспределения].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРаспределения);
					НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет в таблице формы поля точности показателей.
Процедура ВводНачисленийЗаполнитьВторичныеДанныеПоказателей(Форма, МассивОписанийТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	Для Каждого ОписаниеТаблицы Из МассивОписанийТаблицФормы Цикл
		ИмяТаблицы = ОписаниеТаблицы.Ключ;
		ПутьКДанным = ОписаниеТаблицы.Значение.ПутьКДанным;
		СодержитПолеСотрудник = ОписаниеТаблицы.Значение.СодержитПолеСотрудник;
		ИмяРеквизитаСотрудник = ОписаниеТаблицы.Значение.ИмяРеквизитаСотрудник;
		
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		
		ИмяПВР = ЗарплатаКадрыРасширенныйКлиентСервер.ИмяПВРПоИмениТаблицы(ИмяТаблицы);
		МаксимальноеКоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателей(Форма, ИмяТаблицы, ИмяПВР);
		
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		
		ВидыРасчета = ?(ОписаниеТаблицы.Значение.СодержитПолеВидРасчета,
			ОбщегоНазначения.ВыгрузитьКолонку(Начисления, ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета, Истина),
		    ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета]));
		ВидыРасчетаИнфо = ИнформацияОВидахРасчета(ВидыРасчета);	
		
		Для Каждого СтрокаНачислений Из Начисления Цикл
			
			Если СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для НомерПоказателя = 1 По МаксимальноеКоличествоПоказателей Цикл
				Показатель = СтрокаНачислений["Показатель" + НомерПоказателя];
				Если Не ЗначениеЗаполнено(Показатель) Тогда
					Продолжить;
				КонецЕсли;
				ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(Показатель);
				СтрокаНачислений["ТочностьПоказателя" + НомерПоказателя] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо.Точность);
				СтрокаНачислений["ПредставлениеПоказателя" + НомерПоказателя] 	= ?(ЗначениеЗаполнено(ПоказательИнфо.КраткоеНаименование), ПоказательИнфо.КраткоеНаименование, ПоказательИнфо.Наименование);
			КонецЦикла;
			
			ВидРасчета = ?(ОписаниеТаблицы.Значение.СодержитПолеВидРасчета,
				СтрокаНачислений[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета],
				Форма.Объект[ОписаниеТаблицы.Значение.ИмяРеквизитаВидРасчета]);
			
			Если ВидРасчета.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ВидРасчетаИнфо = ВидыРасчетаИнфо[ВидРасчета];  
			
			УчетСреднегоЗаработка.ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2, , Форма.Объект.Ссылка);
			ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
				Модуль.ЗаполнитьДанныеПоказателейДенежногоДовольствия(ВидРасчетаИнфо, СтрокаНачислений, 2, Форма.Объект.Ссылка);
			КонецЕсли;
			РасчетЗарплатыРасширенныйПереопределяемый.ПоместитьДанныеДополнительныхПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, Неопределено, 2);
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТабличнуюЧастьПоказатели(Объект, ИмяТаблицыПоказатели)
	
	// Удаляем только показатели, «привязанные» к начислениям, 
	// независимые показатели редактируются непосредственно в табличной части.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из Объект[ИмяТаблицыПоказатели] Цикл
		Если СтрокаПоказателей.ИдентификаторСтрокиВидаРасчета <> 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Объект[ИмяТаблицыПоказатели].Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Преобразует таблицу значений в структуру.
// Параметры:
//		Таблица - таблица значений
//		ИмяКлючаСтрок, строка с именем ключа для строк таблицы, к ключу будет добавлен номер строки.
//
Функция ТаблицаЗначенийВСтруктуру(Таблица, ИмяКлючаСтрок = "Поле") Экспорт

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Таблица Цикл
		СтруктураСтрока = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		МассивСтрок.Добавить(Новый ФиксированнаяСтруктура(СтруктураСтрока));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивСтрок);

КонецФункции

// Определяет необходимость дополнительных действий по обслуживанию распределения по территориям и условиям труда.
//
Функция ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Знач Организация = Неопределено) Экспорт
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ИспользоватьРаспределениеПоТерриториямУсловиямТруда(Организация);
КонецФункции

// Определяет необходимость дополнительных действий по обслуживанию распределения по территориям.
Функция ИспользоватьРаспределениеПоТерриториям(Знач Организация = Неопределено) Экспорт
	Если Организация = Неопределено Тогда
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории");
	Иначе
		Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеТерритории", Новый Структура("Организация", Организация));
	КонецЕсли;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, рассчитывающих начисления.

// Процедура заполняет в таблице формы поле - признак использования периода.
Процедура ПериодНачисленияЗаполнитьИспользованиеПериода(Форма, МассивОписанийТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из МассивОписанийТаблицФормы Цикл
		Описание = КлючИЗначение.Значение;
		ПутьКДанным = Описание.ПутьКДанным;
		ИмяРеквизитаВидРасчета = Описание.ИмяРеквизитаВидРасчета;
		ИмяРеквизитаДатаНачала  = Описание.ИмяРеквизитаДатаНачала;
		ИмяРеквизитаДатаОкончания  = Описание.ИмяРеквизитаДатаОкончания;
		ИмяРеквизитаСотрудник  = Описание.ИмяРеквизитаСотрудник;
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = Описание.СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		Для Каждого СтрокаНачислений Из Начисления Цикл
			Если Описание.СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачислений[ИмяРеквизитаВидРасчета]);
			Если ИнфоОВидеРасчета.ЭтоНачисление Тогда
				СтрокаНачислений.ИспользованиеПериода = ИнфоОВидеРасчета.ИспользованиеПериода;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаНачислений, "ПериодДействияСтрокой") Тогда
					ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(СтрокаНачислений, "ПериодДействия", "ПериодДействияСтрокой");
				КонецЕсли;
			Иначе
				СтрокаНачислений.ИспользуетсяПериод = ИнфоОВидеРасчета.СпособВыполненияУдержания <> ПредопределенноеЗначение("Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в документах, редактирующих начисления
// (начисления в шапке).

Процедура ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы = Истина) Экспорт 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ВидРасчета = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Объект." + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивИменРеквизитовФормы = Новый Массив;
	ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
	
	ТаблицаПоказатели = Новый РеквизитФормы("Показатели", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(ТаблицаПоказатели);
	
	ОписательПоказателя = Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты");
	РеквизитПоказательТаблицыПоказатели = Новый РеквизитФормы("Показатель", ОписательПоказателя, "Показатели");
	
	ДобавляемыеРеквизиты.Добавить(РеквизитПоказательТаблицыПоказатели);
	
	ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы); 
	
	Форма.Показатели.Очистить();
	
	МассивОписанийПоказателей = Новый Массив;
	
	Если ВидРасчета.Пустая() Тогда
		КоличествоОтображаемыхПоказателей = 0;
		КоличествоПоказателейРасчета = 0;
	Иначе
		КоличествоОтображаемыхПоказателей = 0;
		ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
		Для Каждого ОписаниеПоказателя Из ВидРасчетаИнфо.Показатели Цикл
			Если (РежимРаботы = 1 И ОписаниеПоказателя.ЗапрашиватьПриВводе)
				ИЛИ (РежимРаботы = 2 И ОписаниеПоказателя.ИспользоватьПриРасчете)Тогда
				
				ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(ОписаниеПоказателя.Показатель);
				Если (РежимРаботы = 1 
					И ПоказательИнфо.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное
					И Не ПоказательИнфо.ЗначениеРассчитываетсяАвтоматически)
					ИЛИ (РежимРаботы = 2 И ПоказательИнфо.ОтображатьВДокументахНачисления) Тогда
					
					ПоказательИнфо.Вставить("Показатель", ОписаниеПоказателя.Показатель);
					МассивОписанийПоказателей.Добавить(ПоказательИнфо);
					
					КоличествоОтображаемыхПоказателей = КоличествоОтображаемыхПоказателей + 1;
					
					СтрокаПоказатель = Форма["Показатели"].Добавить();
					СтрокаПоказатель.Показатель = ОписаниеПоказателя.Показатель;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если РежимРаботы = 1 Тогда
			КоличествоПоказателейРасчета = ВидРасчетаИнфо.КоличествоПостоянныхПоказателей;
		Иначе
			КоличествоПоказателейРасчета = ВидРасчетаИнфо.КоличествоПоказателейИспользуемыхПриРасчете;
			КоличествоОтображаемыхПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
		КонецЕсли;
	КонецЕсли;
	
	ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ВидРасчета.Метаданные().Имя, ДобавлятьЭлементыФормы);
	
	Если ДобавлятьЭлементыФормы Тогда 
		Для СчетчикПоказателей = 1 По КоличествоОтображаемыхПоказателей Цикл
			ОписаниеПоказателя = МассивОписанийПоказателей[СчетчикПоказателей - 1];
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].Заголовок = ?(ЗначениеЗаполнено(ОписаниеПоказателя.КраткоеНаименование), ОписаниеПоказателя.КраткоеНаименование, ОписаниеПоказателя.Наименование);
			Форма.Элементы[ИмяТаблицы + "Значение" + СчетчикПоказателей].ОграничениеТипа = 
				?(РежимРаботы = 2, ОписаниеПоказателя.ТипПоказателяПриРасчете, ОписаниеПоказателя.ТипПоказателя);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНачисленийВШапкеВидРасчетаПриИзменении(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы = Истина) Экспорт
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
	Если ГруппаПоказатели <> Неопределено Тогда  
		ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(Форма, ГруппаПоказатели);
		Форма.Элементы.Удалить(ГруппаПоказатели);		
	КонецЕсли;	
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		МассивУдаляемыхРеквизитов.Добавить(ПутьКДанным + ".Показатель" + НомерПоказателя);
		МассивУдаляемыхРеквизитов.Добавить(ПутьКДанным + ".Значение" + НомерПоказателя);
	КонецЦикла;
	
	Если ОписаниеТаблицыВидовРасчета.СодержитПолеКодВычета Тогда
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		Для Каждого СтрокаНачислений Из Начисления Цикл
			СтрокаНачислений[ОписаниеТаблицыВидовРасчета.ИмяРеквизитаКодВычета] = Неопределено;
			СтрокаНачислений.СуммаВычета = 0;
		КонецЦикла;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
				
	ВводНачисленийВШапкеДополнитьФорму(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы);
	
КонецПроцедуры	

Процедура ВводНачисленийВШапкеДанныеВРеквизит(Объект, ОписаниеТаблицыВидовРасчета, РежимРаботы = 1) Экспорт
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	ИмяРеквизитаВидРасчета = ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета;
	
	ВидРасчета = Объект[ИмяРеквизитаВидРасчета];
	Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПоказателей = Объект.Показатели;
	
	ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
	
	РасчетныйДокументСсылка = Неопределено;
	Если РежимРаботы = 2 Тогда
		// В других режимах расчетный документ не требуется уточнять.
		РасчетныйДокументСсылка = Объект.Ссылка;
	КонецЕсли;
	
	ДанныеНачислений = Объект[ИмяТаблицы];
	Для Каждого СтрокаНачислений Из ДанныеНачислений Цикл
		ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, , РасчетныйДокументСсылка, , , , ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений);
	КонецЦикла;	
	
КонецПроцедуры

Функция МассивПоказателейВремени() Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВДнях"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ВремяВЧасах"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ДоляНеполногоРабочегоВремени"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВДнях"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаДней"));
	МассивПоказателей.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.НормаВремениВЧасах"));
	
	Возврат МассивПоказателей;
	
КонецФункции

Функция ИнформацияОВидахРасчета(ВидыРасчета) Экспорт
	Возврат ЗарплатаКадры.ИнформацияОВидахРасчета(ВидыРасчета);
КонецФункции

Процедура ПриОпределенииИнформацииОНачислениях(Кэш, Результат, ВидыРасчета) Экспорт
	ПриОпределенииИнформацииОВидахРасчета(Кэш, Результат, ВидыРасчета, Истина);
КонецПроцедуры

Процедура ПриОпределенииИнформацииОбУдержаниях(Кэш, Результат, ВидыРасчета) Экспорт
	ПриОпределенииИнформацииОВидахРасчета(Кэш, Результат, ВидыРасчета, Ложь);
КонецПроцедуры

Процедура ПриОпределенииИнформацииОВидахРасчета(Кэш, Результат, ВидыРасчета, ЭтоНачисления)
	
	ИмяТаблицы = ВидыРасчета[0].Метаданные().ПолноеИмя();
	
	// Получим сведения о показателях.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВидыРасчета", ВидыРасчета);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	Показатели.Показатель
	               |ИЗ
	               |	#ИмяТаблицы.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Ссылка В(&ВидыРасчета)";
			  
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПоказателей = Новый Массив;
	Пока Выборка.Следующий() Цикл 
		МассивПоказателей.Добавить(Выборка.Показатель);
	КонецЦикла;
	
	СведенияОПоказателях = СведенияОПоказателяхРасчетаЗарплаты(МассивПоказателей);
	
	// Получим значения кодов вычета НДФЛ для начислений.
	КодыВычетов = Новый Соответствие;
	
	Если ЭтоНачисления Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Начисления.КодДоходаНДФЛ
		               |ПОМЕСТИТЬ ВТКодыДохода
		               |ИЗ
		               |	ПланВидовРасчета.Начисления КАК Начисления
		               |ГДЕ
		               |	Начисления.Ссылка В(&ВидыРасчета)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КодыДохода.КодДоходаНДФЛ КАК КодДохода,
		               |	ВЫБОР
		               |		КОГДА ЕСТЬNULL(ВидыДоходовНДФЛ.ИмеетЕдинственныйВычет, ЛОЖЬ)
		               |			ТОГДА ВидыДоходовНДФЛ.ВычетПоУмолчанию
		               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		               |	КОНЕЦ КАК КодВычета
		               |ИЗ
		               |	ВТКодыДохода КАК КодыДохода
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
		               |		ПО КодыДохода.КодДоходаНДФЛ = ВидыДоходовНДФЛ.Ссылка";
					   
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			КодыВычетов.Вставить(Выборка.КодДохода, Выборка.КодВычета);
		КонецЦикла;
		
	КонецЕсли;
	
	// Получим реквизиты видов расчета
	ЗапрашиваемыеДанныеСтрока = ?(ЭтоНачисления, ЗапрашиваемыеДанныеНачисления(), ЗапрашиваемыеДанныеУдержания());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка,
	|	#ЗапрашиваемыеДанные,
	|	Показатели
	|ИЗ
	|	#ИмяТаблицы
	|ГДЕ
	|	Ссылка В (&ВидыРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Показатели.НомерСтроки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ЗапрашиваемыеДанные", ЗапрашиваемыеДанныеСтрока);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТаблицы", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		// Создаем структуру с необходимым набором полей.
		ЗначенияРеквизитов = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		ЗначенияРеквизитов.Вставить("ЭтоНачисление", ЭтоНачисления);
		
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		
		Если ЭтоНачисления Тогда 
			ЗначенияРеквизитов.Вставить("КодВычетаНДФЛ", КодыВычетов[ЗначенияРеквизитов.КодДоходаНДФЛ]);
		КонецЕсли;
		
		// Заполним также и сведения о самих показателях.
		МассивОписаний = Новый Массив;
		
		ИменаПолей = 
		"Показатель,
		|ЗапрашиватьПриВводе,
		|ОтменяемыйПоказатель,
		|ИспользоватьПриРасчете,
		|ОсновнойПоказатель";
		
		Если Выборка.Показатели <> Неопределено Тогда
			ВыборкаПоказателей = Выборка.Показатели.Выбрать();
			Пока ВыборкаПоказателей.Следующий() Цикл
				Описание = Новый Структура(ИменаПолей);
				ЗаполнитьЗначенияСвойств(Описание, ВыборкаПоказателей);
				СведенияОПоказателе = СведенияОПоказателях[Описание.Показатель];
				Для Каждого КлючИЗначение Из СведенияОПоказателе Цикл
					Описание.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
				МассивОписаний.Добавить(Описание);
			КонецЦикла;
		КонецЕсли;
		
		ЗначенияРеквизитов.Вставить("Показатели", МассивОписаний);
		
		Кэш.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		Результат.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
		
	КонецЦикла;
	
	ПустаяСсылка = ?(ЭтоНачисления, ПланыВидовРасчета.Начисления.ПустаяСсылка(), ПланыВидовРасчета.Удержания.ПустаяСсылка());
	Если ВидыРасчета.Найти(ПустаяСсылка) <> Неопределено И Результат[ПустаяСсылка] = Неопределено Тогда
		ПустаяСтруктура = Новый Структура(ЗапрашиваемыеДанныеСтрока);
		ПустаяСтруктура.Вставить("ЭтоНачисление", ЭтоНачисления);
		Если ЭтоНачисления Тогда
			ПустаяСтруктура.Вставить("КодВычетаНДФЛ", Справочники.ВидыДоходовНДФЛ.ПустаяСсылка());
		КонецЕсли;
		ПустаяСтруктура.Вставить("Показатели", Новый Массив);
		
		Кэш.Вставить(ПустаяСсылка, ПустаяСтруктура);
		Результат.Вставить(ПустаяСсылка, ПустаяСтруктура);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции показателей расчета.

// Получает информацию о показателях расчета зарплаты.
//
// Параметры:
//	- Показатели - массив показателей расчета зарплаты.
//
// Возвращаемое значение - соответствие, ключ - показатель, 
//	значение - структура сведений о показателе с полями:
//	- СпособВвода - способ ввода показателя (Перечисление СпособыВводаЗначенийПоказателейРасчетаЗарплаты).
//	- ТипПоказателя - Описание типов. "Настоящий" тип показателя, используемый при вводе 
//							значений показателя в кадровых документах, штатном расписании и других 
//							документах ввода значений.
//	- ТипПоказателяПриРасчете - Описание типов. Тип при вводе/редактировании числовых 
//								значения показателя в документах начисления.
//	- Валюта
//	- ЗначениеРассчитываетсяАвтоматически
//	- СпособПримененияЗначений
//	- СпособВводаЗначений
//	- Наименование
//	- ОтображатьВДокументахНачисления.
//
Функция СведенияОПоказателяхРасчетаЗарплаты(Показатели) Экспорт
	
	ИменаРеквизитов = 
	"ЗначениеРассчитываетсяАвтоматически,
	|Идентификатор,
	|НазначениеПоказателя,
	|СпособПримененияЗначений,
	|СпособВводаЗначений,
	|Предопределенный,
	|ТипПоказателя,
	|Точность,
	|Наименование,
	|КраткоеНаименование,
	|ОтображатьВДокументахНачисления,
	|ВидТарифнойСтавки,
	|ДопускаетсяНулевоеЗначение,
	|НеИспользуется";
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Показатели, ИменаРеквизитов);
	
	СведенияОПоказателях = Новый Соответствие;
	
	СтажевыеПоказатели = Новый Массив;
	
	ПоказательСевернаяНадбавка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СевернаяНадбавка");
	Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
		
		СведенияОПоказателе = КлючИЗначение.Значение;
		СведенияОПоказателе.Вставить("ЭтоШкалаОценки", СведенияОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтДругогоПоказателя);
		
		Если КлючИЗначение.Ключ = ПоказательСевернаяНадбавка Тогда
			СведенияОПоказателе.Вставить("ЭтоПоказательЗависящийОтСтажа", Истина);
		Иначе
			СведенияОПоказателе.Вставить("ЭтоПоказательЗависящийОтСтажа", СведенияОПоказателе.ТипПоказателя = Перечисления.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа);
		КонецЕсли;
		
		СведенияОПоказателе.ТипПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, СведенияОПоказателе.Точность));
		СведенияОПоказателе.Вставить("ЗначениеПоУмолчанию", 0);
		СведенияОПоказателе.Вставить("ТипПоказателяПриРасчете", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, СведенияОПоказателе.Точность)));
		СведенияОПоказателе.Вставить("ВводитсяНепосредственноПриРасчете", СведенияОПоказателе.СпособВводаЗначений = Перечисления.СпособыВводаЗначенийПоказателейРасчетаЗарплаты.ВводитсяПриРасчете);
		Если СведенияОПоказателе.ЭтоПоказательЗависящийОтСтажа Тогда
			СтажевыеПоказатели.Добавить(КлючИЗначение.Ключ);
			СведенияОПоказателе.Вставить("МаксимальноеЗначение");
		КонецЕсли; 
		СведенияОПоказателях.Вставить(КлючИЗначение.Ключ, СведенияОПоказателе);
		
	КонецЦикла;
	
	Если СтажевыеПоказатели.Количество() > 0 Тогда
		
		ЗначенияСтажевыхПоказателей = ДанныеСтажевыхПоказателей(СтажевыеПоказатели);
		Для Каждого ОписаниеПоказателя Из ЗначенияСтажевыхПоказателей Цикл
			СведенияОПоказателе = СведенияОПоказателях.Получить(ОписаниеПоказателя.Показатель);
			Если ОписаниеПоказателя.Показатель = ПоказательСевернаяНадбавка Тогда
				СведенияОПоказателе.Вставить("ВидСтажа", Справочники.ВидыСтажа.СтажРаботыНаСевере());
			Иначе
				СведенияОПоказателе.Вставить("ВидСтажа", ОписаниеПоказателя.ВидСтажа);
				СведенияОПоказателе.Вставить("МаксимальноеЗначение", ОписаниеПоказателя.Значение);
			КонецЕсли;
			
			СведенияОПоказателях.Вставить(ОписаниеПоказателя.Показатель, СведенияОПоказателе);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СведенияОПоказателях;
	
КонецФункции

Функция ДанныеСтажевыхПоказателей(Показатели)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Показатели", Показатели);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка КАК Показатель,
		|	ПоказателиРасчетаЗарплаты.ВидСтажа КАК ВидСтажа,
		|	МАКСИМУМ(ЕСТЬNULL(ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя, 0)) КАК Значение
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиРасчетаЗарплаты.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
		|		ПО ПоказателиРасчетаЗарплаты.Ссылка = ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка
		|ГДЕ
		|	ПоказателиРасчетаЗарплаты.Ссылка В(&Показатели)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоказателиРасчетаЗарплаты.Ссылка,
		|	ПоказателиРасчетаЗарплаты.ВидСтажа";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает информацию об одном показателе расчета зарплаты
// с использованием метода 
// ЗарплатаКадрыРасширенный.СведенияОПоказателяхРасчетаЗарплаты.
//
// Параметры:
//	- Показатель - показатель расчета зарплаты.
//
Функция СведенияОПоказателеРасчетаЗарплаты(Показатель) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.СведенияОПоказателеРасчетаЗарплаты(Показатель);
	
КонецФункции

// Составляет массив элементов справочника Показатели расчета зарплаты 
// по строке с формулой расчета.
//
// Параметры:
//	- Формула - строка с текстом формулы расчета.
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиФормулы(Формула, Отказ = Неопределено) Экспорт
	
	Показатели = Новый Массив;
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула);
	Для Каждого Слово Из Слова Цикл
		Показатель = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(Слово);
		Если Показатель <> Неопределено Тогда
			Показатели.Добавить(Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Показатели;
	
КонецФункции

// Процедура заполняет табличную часть Показатели вида расчета.
//
Процедура ОбновитьПоказателиФормулыРасчета(ВидРасчетаОбъект, Отказ, НедопустимыеПоказатели = Неопределено) Экспорт
	
	ЭтоНачисление = ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Начисления");
	ВидРасчетаОбъект.ИспользуетФормулу = РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(ВидРасчетаОбъект.СпособРасчета);
	Если ВидРасчетаОбъект.ИспользуетФормулу Тогда
		ПроверятьФормулуРасчета = Истина;
		Если ТипЗнч(ВидРасчетаОбъект) = Тип("ПланВидовРасчетаОбъект.Начисления") Тогда
			Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			    Модуль.ПриПроверкеЗаполненияФормулыРасчетаНачисления(ВидРасчетаОбъект, ПроверятьФормулуРасчета);
			КонецЕсли;
		КонецЕсли;
		Если ПроверятьФормулуРасчета Тогда
			Если ВидРасчетаОбъект.Рассчитывается Тогда 
				ПараметрыВыполненияФормулы = РасчетЗарплатыРасширенный.ПараметрыВыполненияФормулы(ВидРасчетаОбъект.ФормулаРасчета, Истина, НедопустимыеПоказатели);
				Если ПараметрыВыполненияФормулы = Неопределено Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				СведенияОПоказателях = СведенияОПоказателяхРасчетаЗарплаты(ПараметрыВыполненияФормулы.ПоказателиФормулы);
				ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПоказателиПоФормуле(СведенияОПоказателях, ВидРасчетаОбъект.Показатели);
				// Если формула прошла проверку - запишем ее в вид расчета.
				ВидРасчетаОбъект.ФормулаРасчетаДляВыполнения = ПараметрыВыполненияФормулы.ФормулаДляВыполнения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Удаляем строки с незаполненными показателями.
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.Показатель) Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ВидРасчетаОбъект.Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет какие из показателей для заданного начисления 
// могут запрашиваться при вводе.
// Предполагается, что по умолчанию при вводе запрашиваются постоянные показатели, 
// которые пока не запрашиваются в других начислениях (удержаниях).
//
// Параметры:
//	- ВидРасчета - ссылка на начисление или удержание.
//	- Показатели - массив показателей для выявления запрашиваемых.
//	- КоллекторВидовРасчета - Соответствие, набор еще не записанных видов расчета.
//
// Возвращаемое значение - массив запрашиваемых показателей.
//	
Функция ЗапрашиваемыеПоказателиВидаРасчетаПоУмолчанию(ВидРасчета, Показатели, КоллекторВидовРасчета = Неопределено) Экспорт
	
	ЗапрашиваемыеПоказатели = Новый Массив;
	
	Если КоллекторВидовРасчета <> Неопределено Тогда
		Для Каждого КлючИЗначение Из КоллекторВидовРасчета Цикл
			Если КлючИЗначение.Ключ = ВидРасчета Тогда
				Продолжить;
			КонецЕсли;
			ВидРасчетаОбъект = КлючИЗначение.Значение;
			Для Каждого СтрокаПоказателя Из ВидРасчетаОбъект.Показатели Цикл
				Если СтрокаПоказателя.ЗапрашиватьПриВводе Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Показатели, СтрокаПоказателя.Показатель);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Показатели.Количество() = 0 Тогда
		Возврат ЗапрашиваемыеПоказатели;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("Показатели", Показатели);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПоказателиРасчета.Ссылка
		|ИЗ
		|	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
		|		ПО (ПоказателиНачислений.Показатель = ПоказателиРасчета.Ссылка)
		|			И (ПоказателиНачислений.Ссылка <> &ВидРасчета)
		|			И (ПоказателиНачислений.ЗапрашиватьПриВводе)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК ПоказателиУдержаний
		|		ПО (ПоказателиУдержаний.Показатель = ПоказателиРасчета.Ссылка)
		|			И (ПоказателиУдержаний.Ссылка <> &ВидРасчета)
		|			И (ПоказателиУдержаний.ЗапрашиватьПриВводе)
		|ГДЕ
		|	ПоказателиРасчета.Ссылка В(&Показатели)
		|	И ПоказателиРасчета.НазначениеПоказателя = ЗНАЧЕНИЕ(Перечисление.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника)
		|	И ПоказателиРасчета.СпособПримененияЗначений = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное)
		|	И ПоказателиРасчета.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейРасчетаЗарплаты.ЧисловойЗависящийОтСтажа)
		|	И НЕ ПоказателиРасчета.ЗначениеРассчитываетсяАвтоматически
		|	И ПоказателиНачислений.Ссылка ЕСТЬ NULL 
		|	И ПоказателиУдержаний.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеПоказатели.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ЗапрашиваемыеПоказатели;
	
КонецФункции

// Возвращает идентификатор показателя.
//
// Параметры:
//	- Показатель - СправочникСсылка.ПоказателиРасчетаЗарплаты.
//	
// Возвращаемое значение - строка с значением реквизита Идентификатор.
//
Функция ИдентификаторПоказателя(Показатель) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ИдентификаторПоказателя(Показатель);
	
КонецФункции

// В табличной части вида расчета находит показатели в соответствии с указанными идентификаторами 
//	и отмечает их как определяющие.
//
// Параметры:
//	ВидРасчетаОбъект - ПланВидовРасчетаОбъект.Начисления, ПланВидовРасчетаОбъект.Удержания
//	ИдентификаторыПоказателей - массив идентификаторов показателей.
//
Процедура ОтметитьОпределяющиеПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей) Экспорт
	ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, "ОпределяющийПоказатель");
КонецПроцедуры

// В табличной части вида расчета находит показатели в соответствии с указанными идентификаторами 
//	и отмечает их как запрашиваемые при вводе.
//
// Параметры:
//	ВидРасчетаОбъект - ПланВидовРасчетаОбъект.Начисления, ПланВидовРасчетаОбъект.Удержания
//	ИдентификаторыПоказателей - массив идентификаторов показателей.
//
Процедура ОтметитьЗапрашиваемыеПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей) Экспорт
	ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, "ЗапрашиватьПриВводе");
КонецПроцедуры

Процедура ЗаполнитьПоказателиПредопределенногоСпособаРасчета(СпособРасчета, ТаблицаПоказателей) Экспорт
	
	Если РасчетЗарплатыРасширенныйКлиентСервер.СпособРасчетаИспользуетФормулу(СпособРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоказателей.Очистить();
	
	Показатели = РасчетЗарплатыРасширенный.ПоказателиПредопределенногоСпособаРасчета(СпособРасчета);
	
	Для Каждого Показатель Из Показатели Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.Показатель = Показатель;
		НоваяСтрока.ИспользоватьПриРасчете = Истина;
	КонецЦикла;

КонецПроцедуры

// Находит элемент справочника «Показатели расчета зарплаты» по значению реквизита Идентификатор.
//
// Параметры:
//	- Идентификатор - строка с указанием идентификатора показателя.
//	- УчитыватьРегистр - булево, по умолчанию Ложь, если Истина, то соответствие будет регистрозависимым.
//
// Возвращаемое значение - ссылка на показатель или Неопределено, если показатель не найден.
//
Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	Возврат ЗарплатаКадрыРасширенныйПовтИсп.ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Выгрузка/загрузка данных

// Заполняет массив типов неразделенных данных, для которых поддерживается сопоставление ссылок
// при загрузке данных в другую информационную базу.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, имеющие непредопределенные элементы.
	// В модуле менеджера таких объектов должна быть определена функция ПоляЕстественногоКлюча, 
	// составляющая массив полей для однозначной идентификации элемента.
	
	ЗарплатаКадрыБазовый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	
	Типы.Добавить(Метаданные.Справочники.УдалитьВидыДоходовНДФЛ);
	Типы.Добавить(Метаданные.Справочники.УдалитьВидыОбщественноПолезнойДеятельностиСЗВК);
	Типы.Добавить(Метаданные.Справочники.УдалитьОснованияДосрочногоНазначенияПенсии);
	Типы.Добавить(Метаданные.Справочники.УдалитьОснованияИсчисляемогоСтраховогоСтажа);
	Типы.Добавить(Метаданные.Справочники.УдалитьОснованияУвольнения);
	Типы.Добавить(Метаданные.Справочники.УдалитьТерриториальныеУсловияПФР);
	
	Типы.Добавить(Метаданные.Справочники.ОтраслиНауки);
	Типы.Добавить(Метаданные.Справочники.СтрокиОтчетностиМониторингаРаботниковСоциальнойСферы);
	Типы.Добавить(Метаданные.Справочники.УченыеЗвания);
	Типы.Добавить(Метаданные.Справочники.УченыеСтепени);
	Типы.Добавить(Метаданные.Справочники.ОснованияЗаключенияСрочныхТрудовыхДоговоров);
	Типы.Добавить(Метаданные.Справочники.СтрокиОтчетностиРасходовИЧисленностиРаботниковГосударственныхОрганов);
	Типы.Добавить(Метаданные.Справочники.ОснованияПриостановленияТрудовыхДоговоровКонтрактов);
	
	СтимулирующиеВыплатыФСС.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	
	#Область ФедеральныйРегистрМедицинскихРаботников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	#КонецОбласти
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		Модуль.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, для которых не требуется сопоставление ссылок
// при загрузке данных в другую информационную базу, т.к. корректное сопоставление ссылок
// гарантируется с помощью других механизмов.
//
// Параметры:
//  Типы - Массив(ОбъектМетаданных).
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт
	
	// Здесь перечисляются неразделенные объекты метаданных ссылочного типа, состоящие полностью из предопределенных
	// элементов.
	ЗарплатаКадрыБазовый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы);
	
	Типы.Добавить(Метаданные.Справочники.УдалитьВидыВычетовНДФЛ);
	Типы.Добавить(Метаданные.Справочники.УдалитьВидыДоходовПоСтраховымВзносам);
	Типы.Добавить(Метаданные.Справочники.УдалитьОснованияДосрочногоНазначенияПенсииДляСЗВК);
	Типы.Добавить(Метаданные.Справочники.УдалитьОсобыеУсловияТрудаПФР);
	Типы.Добавить(Метаданные.Справочники.УдалитьОсобыеУсловияТрудаДляСЗВКПФР);
	Типы.Добавить(Метаданные.Справочники.УдалитьПараметрыИсчисляемогоСтраховогоСтажа);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Процедура выполняет заполнение значений специализированных показателей.
//
Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплаты(МенеджерВременныхТаблиц, ТаблицаПоказателей) Экспорт
	
	ПоказательМРОТ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МРОТ", ПоказательМРОТ);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеПоказатели.ИдентификаторСтроки,
		|	ДополнительныеПоказатели.ДатаНачала
		|ИЗ
		|	ВТДополнительныеПоказатели КАК ДополнительныеПоказатели
		|ГДЕ
		|	ДополнительныеПоказатели.Показатель = &МРОТ";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = Выборка.ИдентификаторСтроки;
		НоваяСтрока.Показатель = ПоказательМРОТ;
		НоваяСтрока.Значение = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(Выборка.ДатаНачала);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейРасчетаЗарплатыПоТаблицеЗначений(ДополнительныеПоказатели, ЗначенияПоказателей) Экспорт
	
	ПоказательМРОТ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	
	Для Каждого СтрокаПоказателей Из ДополнительныеПоказатели Цикл
		Если СтрокаПоказателей.Показатель <> ПоказательМРОТ Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ЗначенияПоказателей.Добавить();
		НоваяСтрока.ИдентификаторСтроки = СтрокаПоказателей.ИдентификаторСтроки;
		НоваяСтрока.Показатель = ПоказательМРОТ;
		НоваяСтрока.Значение = ЗарплатаКадры.МинимальныйРазмерОплатыТрудаРФ(СтрокаПоказателей.ДатаНачала);
	КонецЦикла;	
КонецПроцедуры

Процедура ПриОпределенииДополнительныхПоказателей(ДополнительныеПоказатели) Экспорт
	ПоказательМРОТ = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.МРОТ");
	Если ПоказательМРОТ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПоказатели.Добавить(ПоказательМРОТ);	
КонецПроцедуры

Функция ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений) Экспорт
	
	// ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		Возврат Модуль.СведенияОбОтветственныхЛицах(Организация, Сведения, ДатаСведений);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	
	Возврат ЗарплатаКадрыБазовый.ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаСведений);
	
КонецФункции

// Возвращает налоговые параметры организаций (ИНН, КПП) 
// для подготовки печатных форм документов.
//
// Параметры:
// 	ОрганизацииИДаты  - ТаблицаЗначений - см. ПараметрОрганизацииИДатыДляПолучитьИННиКППОрганизаций
// 	ОрганизацииИДаты  - ТаблицаЗначений - таблица с колонками (имена колонок не важны):
// 	                                      * Первая - СправочникСсылка.Организации - Организация
//		                                  * Вторая - Дата - дата, на которую следует получить данные.
//
// Возвращаемое значение:
//   Соответствие - Соответствие организаций и параметров этих организаций вида:
//		* Ключ - СправочникСсылка.Организации - Организация,
//		* Значение - Структура - Структура значений параметров вида:
//			** ИНН - Строка - ИНН организации,
//			** КПП - Строка - КПП организации.
//
Функция ПолучитьИННиКППОрганизаций(ОрганизацииИДаты) Экспорт

	ОрганизацииИСведенияОНих = Новый Соответствие;
	
	ЗапрашиваемыеПоОрганизацииСведения = Новый СписокЗначений;
	ЗапрашиваемыеПоОрганизацииСведения.Добавить("", "ИННЮЛ");
	ЗапрашиваемыеПоОрганизацииСведения.Добавить("", "КППЮЛ");
	
	Для каждого ОрганизацияИДата Из ОрганизацииИДаты Цикл
	
		СведенияОбОрганизацииПолученные = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(ОрганизацияИДата[0], 
			ОрганизацияИДата[1],
			ЗапрашиваемыеПоОрганизацииСведения);
		СведенияОбОрганизации = Новый Структура("ИНН, КПП");
		СведенияОбОрганизацииПолученные.Свойство("ИННЮЛ", СведенияОбОрганизации.ИНН);
		СведенияОбОрганизацииПолученные.Свойство("КППЮЛ", СведенияОбОрганизации.КПП);
		ОрганизацииИСведенияОНих.Вставить(ОрганизацияИДата[0], СведенияОбОрганизации);
		
	КонецЦикла;

	Возврат ОрганизацииИСведенияОНих;
	
КонецФункции

// Формирует входной параметр "ОрганизацииИДаты" для функции ПолучитьИННиКППОрганизаций.
//
// Возвращаемое значение:
//  ОрганизацииИДаты  - ТаблицаЗначений - таблица с колонками:
//		* Организация - СправочникСсылка.Организации - организация,
//		* ДатаСведенийОрганизации - Дата - дата, на которую следует получить данные.
//
Функция ПараметрОрганизацииИДатыДляПолучитьИННиКППОрганизаций() Экспорт

	ОрганизацииИДаты = Новый ТаблицаЗначений;
	ОрганизацииИДаты.Колонки.Добавить("Организация");
	ОрганизацииИДаты.Колонки.Добавить("ДатаСведенийОрганизации");
	
	Возврат ОрганизацииИДаты;

КонецФункции

// Формирует временную таблицу ВТОтветственныеЛица, список организаций и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки Организация и Период.
//
// Параметры:
//   МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц с таблицей отборов.
//   ИмяТаблицыОтборов       - Строка - Имя таблицы, содержащей колонки Организация и Период.
//   Сведения                - Строка - Идентификаторы, разделенные запятыми.
//   ИмяСоздаваемойВТ        - Строка
//
Процедура СоздатьВТОтветственныеЛица(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, Сведения, ИмяСоздаваемойВТ = "ВТОтветственныеЛица") Экспорт
	
	// ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		Модуль.СоздатьВТСведенияОбОтветственныхЛицах(МенеджерВременныхТаблиц, ИмяТаблицыОтборов, Сведения, ИмяСоздаваемойВТ);
		Возврат
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	
	МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Сведения, " ",""), ",");
		
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	NULL КАК Период,
		|	NULL КАК ПериодЗаписи,
		|	NULL КАК Организация";
	
	Для Каждого ЭлементМассиваПолей Из МассивНеобходимыхДанных Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	NULL КАК " + ЭлементМассиваПолей;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ПОМЕСТИТЬ #ВТОтветственныеЛица";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВТОтветственныеЛица", ИмяСоздаваемойВТ);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Метод заполняет константу, определяющую использование внешних хозяйственных операций.
//
Процедура УстановитьИспользованиеВнешнихХозяйственныхОпераций(ИспользоватьНачислениеЗарплаты = Неопределено) Экспорт
	
	// Использование внешних хозяйственных операций доступно тогда, 
	// когда существует соответствующая подсистема и используется расчет зарплаты.
	
	ПодсистемаВнешнихОперацийСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации");
	Если ИспользоватьНачислениеЗарплаты = Неопределено Тогда
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;
	
	ТекущееИспользование = Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Получить();
	Если ТекущееИспользование <> ПодсистемаВнешнихОперацийСуществует И ИспользоватьНачислениеЗарплаты Тогда
		Константы.ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры.Установить(ПодсистемаВнешнихОперацийСуществует И ИспользоватьНачислениеЗарплаты);
	КонецЕсли	
	
КонецПроцедуры

// Обработчик подписки на событие "ПриЗаписи" констант ИспользоватьНачислениеЗарплаты и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Функция ИспользоватьНачислениеЗарплатыНесколькихОрганизаций() Экспорт
	
	Возврат Константы.ИспользоватьНачислениеЗарплаты.Получить() И Константы.ИспользоватьНесколькоОрганизаций.Получить(); 
	
КонецФункции

// Обработчик подписки на событие "ПриЗаписи" констант РаботаВХозрасчетнойОрганизации и
// ИспользоватьНесколькоОрганизаций.
// Заполняет значение константы ИспользоватьНачислениеЗарплатыНесколькихОрганизаций.
//
Функция РаботаВНесколькихХозрасчетныхОрганизациях() Экспорт
	
	Возврат Константы.РаботаВХозрасчетнойОрганизации.Получить()	И Константы.ИспользоватьНесколькоОрганизаций.Получить(); 

КонецФункции

Процедура ОбработкаПолученияДанныхВыбораСправочникаОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадрыБазовый.ОбработкаПолученияДанныхВыбораСправочникаОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ОбработкаПолученияДанныхВыбораСправочникаОрганизации(ДанныеВыбора, Параметры, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с несколькими сотрудниками в одном документе.
// Данный блок процедур и функций используется в документах "Отпуск по уходу за ребенком", 
// "Изменение отпуска по уходу за ребенком" и "Возврат из отпуска по уходу за ребенком".

Функция НесколькоРабочихМестСтруктураТаблицФормы() Экспорт 
	
	СтруктураТаблицФормы = Новый Структура;
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыРабочихМест");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыНачислений");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыАвансов");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыПрименениеПлановыхНачислений");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыПересчетТарифныхСтавок");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыОплатаТруда");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыЛьгот");
	СтруктураТаблицФормы.Вставить("ОписаниеТаблицыОплатаЛьгот");
	
	Возврат СтруктураТаблицФормы;
	
КонецФункции

// Процедура добавляет на форму реквизиты и элементы для работы с несколькими рабочими местами одного физического лица.
Процедура НесколькоРабочихМестДополнитьФорму(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь) Экспорт
	
	НесколькоРабочихМестДобавитьРеквизитыИЭлементы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы, ДобавлятьРеквизитыФормы, ОтложенноеИзменение);
	
КонецПроцедуры

// Процедура инициализирует форму для работы с конкретным физическим лицом: заполняет таблицу рабочих мест(сотрудников),
// устанавливает видимость элементов формы отображающих рабочие места (если рабочих мест несколько),
// обновляет представление рабочих мест в табличных частях документов.
Процедура НесколькоРабочихМестОбработкаФормы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ОчищатьТаблицы, УправлятьОтображениемПолей = Истина) Экспорт
	
	ОписаниеТаблицыРабочихМест = СтруктураТаблицФормы.ОписаниеТаблицыРабочихМест;
	ОписаниеТаблицыНачислений = СтруктураТаблицФормы.ОписаниеТаблицыНачислений;
	ОписаниеТаблицыАвансов = СтруктураТаблицФормы.ОписаниеТаблицыАвансов;
	ОписаниеТаблицыПрименениеПлановыхНачислений = СтруктураТаблицФормы.ОписаниеТаблицыПрименениеПлановыхНачислений;
	ОписаниеТаблицыПересчетТарифныхСтавок = СтруктураТаблицФормы.ОписаниеТаблицыПересчетТарифныхСтавок;
	ОписаниеТаблицыОплатаТруда = СтруктураТаблицФормы.ОписаниеТаблицыОплатаТруда;
	ОписаниеТаблицыЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыЛьгот;
	
	ДатаПолученияКадровыхДанных = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	
	Дата = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	Организация = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОрганизацияПутьКДанным);
	ФизическоеЛицо = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ФизическоеЛицоПутьКДанным);
	
	ТаблицаОписанийРабочихМест = КадровыйУчетРасширенный.РабочиеМестаФизическогоЛица(ФизическоеЛицо, Организация, Дата);
	
	НесколькоРабочихМестЗаполнитьРабочиеМестаФизическогоЛица(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыНачислений, ТаблицаОписанийРабочихМест);
	НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыНачислений, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест);
	
	Если УправлятьОтображениемПолей Тогда 
		НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыНачислений);
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьАвансы И Не ОписаниеТаблицыАвансов = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущиеАвансы(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыАвансов, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыАвансов, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений И Не ОписаниеТаблицыПрименениеПлановыхНачислений = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущееПрименениеПлановыхНачислений(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПрименениеПлановыхНачислений, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПрименениеПлановыхНачислений, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок И Не ОписаниеТаблицыПересчетТарифныхСтавок = Неопределено Тогда
		НесколькоРабочихМестЗаполнитьТекущиеЗначенияПересчетаТарифныхСтавок(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПересчетТарифныхСтавок, ОчищатьТаблицы);
		НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыПересчетТарифныхСтавок, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест)
	КонецЕсли;
	
	Если ОписаниеФормы.ЕстьОплатаТруда И Не ОписаниеТаблицыОплатаТруда = Неопределено Тогда
		Если УправлятьОтображениемПолей Тогда 
			НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыОплатаТруда);
		КонецЕсли;	
		НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыОплатаТруда, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест);
	КонецЕсли;
	
	Если ОписаниеТаблицыЛьгот <> Неопределено Тогда 
		Если УправлятьОтображениемПолей Тогда 
			НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицыЛьгот);
		КонецЕсли;	
		НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицыЛьгот, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет в табличной части авансов текущие данные для Каждого рабочего места сотрудника, т.е. те данные
// которые были до ввода текущего документа.
// Эти данные используются для выделения строк, которые изменяет текущий документ и вывода комментария.
Процедура НесколькоРабочихМестЗаполнитьТекущиеАвансы(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;
	
	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	
	Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОбъектПутьКДанным);
	Данные = РасчетЗарплатыРасширенный.АвансыСотрудников(ТаблицаСотрудников, Объект.Ссылка, Истина);

	Данные.Колонки["Сотрудник"].Имя = ОписаниеТаблицы.ИмяРеквизитаСотрудник;
	Данные.Колонки["Аванс"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий;
	Данные.Колонки["СпособРасчетаАванса"].Имя = ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий;
	
	Отбор = Новый Структура("РабочееМесто"); 
	
	Для Каждого РабочееМесто Из Данные Цикл
		
		Отбор.РабочееМесто = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
		ДанныеРабочегоМеста = Таблица.НайтиСтроки(Отбор);
		
		Если ДанныеРабочегоМеста.Количество() > 0 Тогда
			Для Каждого СтрокаДанныхРабочегоМеста Из ДанныеРабочегоМеста Цикл
				СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
				СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий]; 
			КонецЦикла;
		Иначе
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,РабочееМесто);
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателя] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАванса] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий]; 
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Таблица.Количество()  = 0 Тогда
		Форма[ОписаниеФормы.ИмяРеквизитаТекущийСпособРасчетаАванса] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАвансаТекущий];
		Форма[ОписаниеФормы.ИмяРеквизитаСпособРасчетаАванса] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСпособРасчетаАванса];
		Форма[ОписаниеФормы.ИмяРеквизитаТекущийАванс] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий];
		Форма[ОписаниеФормы.ИмяРеквизитаАванс] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
		Форма[ОписаниеФормы.ИмяРеквизитаАвансКомментарий] = 
			РасчетЗарплатыКлиентСервер.КомментарийИзмененияАванса(
				Форма[ОписаниеФормы.ИмяРеквизитаТекущийСпособРасчетаАванса], 
				Форма[ОписаниеФормы.ИмяРеквизитаТекущийАванс],
				Истина);				
	КонецЕсли;	
	
КонецПроцедуры

// Процедура заполняет в табличной части применения плановых начислений текущие данные для Каждого рабочего места
// сотрудника, т.е. те данные которые были до ввода текущего документа.
// Эти данные используются для выделения строк, которые изменяет текущий документ и вывода комментария.
Процедура НесколькоРабочихМестЗаполнитьТекущееПрименениеПлановыхНачислений(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
		
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;

	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ВсеЗаписи = Истина;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеПлановыхНачислений",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаСотрудников),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПрименениеПлановыхНачислений.Сотрудник,
	|	ПрименениеПлановыхНачислений.Применение,
	|	ПрименениеПлановыхНачислений.Применение КАК ПрименениеТекущий
	|ИЗ
	|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений";
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Данные = Результат.Выгрузить();
		Данные.Колонки["Сотрудник"].Имя = ОписаниеТаблицы.ИмяРеквизитаСотрудник;
		Данные.Колонки["Применение"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателя;
		Данные.Колонки["ПрименениеТекущий"].Имя = ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий;
		
		Отбор = Новый Структура("РабочееМесто"); 
		
		Для Каждого РабочееМесто Из Данные Цикл
			Отбор.РабочееМесто = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаСотрудник];
			ДанныеРабочегоМеста = Таблица.НайтиСтроки(Отбор);
			Если ДанныеРабочегоМеста.Количество() > 0 Тогда
				Для Каждого СтрокаДанныхРабочегоМеста Из ДанныеРабочегоМеста Цикл
					СтрокаДанныхРабочегоМеста[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = РабочееМесто[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий]; 
				КонецЦикла;
			Иначе	
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(),РабочееМесто);
			КонецЕсли;
		КонецЦикла;
		
		Если Не Таблица.Количество()  = 0 Тогда
			Форма[ОписаниеФормы.ИмяРеквизитаТекущееПрименениеПлановыхНачислений] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий];
			Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачислений] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
			Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачисленийКомментарий] = ЗарплатаКадрыРасширенныйКлиентСервер.ПолучитьКомментарийКДействиюСПрименениеПлановыхНачислений(Форма[ОписаниеФормы.ИмяРеквизитаПрименениеПлановыхНачислений], Форма[ОписаниеФормы.ИмяРеквизитаТекущееПрименениеПлановыхНачислений])
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура НесколькоРабочихМестЗаполнитьТекущиеЗначенияПересчетаТарифныхСтавок(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, ОчищатьТаблицы) Экспорт
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	
	Если ОчищатьТаблицы Тогда
		Таблица.Очистить();
	КонецЕсли;
	
	ТаблицаСотрудников = НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест);	
	
	Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ОбъектПутьКДанным);
	
	УстановитьПривилегированныйРежим(Истина);
	ЗначенияПорядкаПересчета = ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	ЗначенияСовокупнойТарифнойСтавки = ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(ТаблицаСотрудников, Объект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
	Отбор = Новый Структура(ОписаниеТаблицы.ИмяРеквизитаСотрудник); 
	
	Для Каждого РабочееМесто Из ТаблицаРабочихМест Цикл
		
		Сотрудник = РабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник];
		ПредставлениеРабочегоМеста = РабочееМесто[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста];
		
		ПорядокПересчета = ЗначенияПорядкаПересчета.Получить(Сотрудник);
		
		ДанныеСовокупнойТарифнойСтавки = ЗначенияСовокупнойТарифнойСтавки.Получить(Сотрудник);
		СовокупнаяТарифнаяСтавка = ?(ДанныеСовокупнойТарифнойСтавки = Неопределено, Неопределено, ДанныеСовокупнойТарифнойСтавки.Значение);
		ВидТарифнойСтавки = ?(ДанныеСовокупнойТарифнойСтавки = Неопределено, Неопределено, ДанныеСовокупнойТарифнойСтавки.ВидТарифнойСтавки);
		
		Отбор[ОписаниеТаблицы.ИмяРеквизитаСотрудник] = Сотрудник;
		МассивСтрокТаблицы = Таблица.НайтиСтроки(Отбор);
		
		Если МассивСтрокТаблицы.Количество() > 0 Тогда
			Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = ПорядокПересчета;
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий] = СовокупнаяТарифнаяСтавка;
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавкиТекущий] = ВидТарифнойСтавки;
			КонецЦикла;
		Иначе
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСотрудник] = Сотрудник;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ПредставлениеРабочегоМеста;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателя] = ПорядокПересчета;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий] = ПорядокПересчета;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавка] = СовокупнаяТарифнаяСтавка;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий] = СовокупнаяТарифнаяСтавка;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавки] = ВидТарифнойСтавки;
			НоваяСтрока[ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавкиТекущий] = ВидТарифнойСтавки;
			УстановитьКомментарийКПорядкуПересчетаВСтрокеТаблицы(НоваяСтрока, ОписаниеТаблицы.ИмяРеквизитаКомментарий, ВидТарифнойСтавки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Таблица.Количество() = 0 Тогда
		Форма[ОписаниеФормы.ИмяРеквизитаПорядокПересчета] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаПоказателя];
		Форма[ОписаниеФормы.ИмяРеквизитаСовокупнаяТарифнаяСтавка] = Таблица[0][ОписаниеТаблицы.ИмяРеквизитаСовокупнаяТарифнаяСтавка];
		УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, Таблица[0][ОписаниеТаблицы.ИмяРеквизитаВидТарифнойСтавки]);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с рабочими местами удержаний.

// Формирует список рабочих мест физического лица.
Процедура РабочиеМестаУдержанийНачалоВыбораРабочегоМеста(Форма, ФизическоеЛицо, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ПодготовитьДанныеВыбораРабочегоМеста(Форма, ФизическоеЛицо, ДанныеВыбора, СтандартнаяОбработка);
	Форма.СписокВыбораРабочихМест = ДанныеВыбора;

КонецПроцедуры

// Устанавливает для физического лица рабочее место по умолчанию (Все рабочие места) и 
// определяет возможность выбора рабочего места. 
Процедура РабочиеМестаУдержанийПриИзмененииФизическогоЛицаВШапке(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.РабочееМесто) Тогда 
		Объект.РабочееМесто = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;

	Форма.ПредставлениеРабочегоМеста = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста();
	
КонецПроцедуры

// Устанавливает для физического лица рабочее место по умолчанию (Все рабочие места) и 
// определяет возможность выбора рабочего места. 
Процедура РабочиеМестаУдержанийПриИзмененииФизическогоЛица(Форма, ТекущиеДанные) Экспорт
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РабочееМесто) Тогда 
		ТекущиеДанные.РабочееМесто = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;

	ТекущиеДанные.ДоступенВыборРабочегоМеста = Истина;
	ТекущиеДанные.ПредставлениеРабочегоМеста = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеВсеРабочиеМеста();
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ЗарплатаКадрыБазовый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	СтимулирующиеВыплатыФСС.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания);
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность.
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	ЗарплатаКадрыБазовый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	СтимулирующиеВыплатыФСС.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов);
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость применения универсального документа ввода данных для расчета зарплаты 
// для целей регистрации сдельно выполненных работ.
//
// Возвращаемое значение - булево.
//
Функция ИспользоватьДляРегистрацииВыполненныхРаботДокументВводаДанныхДляРасчетаЗарплаты() Экспорт
	
	Использование = Истина;
	
	ЗарплатаКадрыРасширенныйПереопределяемый.ОпределитьДоступностьРегистрацииВыполненныхРаботДокументомВводаДанныхДляРасчетаЗарплаты(Использование);
	
	Возврат Использование;
	
КонецФункции


// Возвращает массив прочих доходов, входящих в расчетную базу удержаний 
//
Функция НезарплатныеВидыДоходовДополненияРасчетнойБазыУдержаний() Экспорт
	
	ВидыДоходов = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДоходов, Справочники.ВидыВыплатБывшимСотрудникам.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДоходов, Справочники.ВидыПрочихДоходовФизическихЛиц.ВидыВыплатДополненияРасчетнойБазыУдержаний());
	
	ВидыДоходов.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.Дивиденды);
	ВидыДоходов.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ДивидендыСотрудников);
	
	Возврат ВидыДоходов;
	
КонецФункции

// Создает команду перехода из исходных регистров в обработку редактирования законодательных значений
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка регистра сведений
//	КоманднаяПанельФормы - КоманднаяПанель - командная панель, на которой будет отображаться создаваемая команда
//
Процедура ДобавитьКомандуПереходаКОбработкеРедактированиюЗаконодательныхЗначений(Форма, КоманднаяПанельФормы) Экспорт
	
	КомандаПерехода = Форма.Команды.Добавить("ОткрытьОбработкуРедактированиеЗаконодательныхЗначений");
	КомандаПерехода.Заголовок = "Редактирование законодательных значений";
	КомандаПерехода.Действие = "Подключаемый_ОткрытьОбработкуРедактированиеЗаконодательныхЗначений";
	
	КнопкаКнопкаПерехода = Форма.Элементы.Добавить("ФормаОбработкаРедактированиеЗаконодательныхЗначенийОткрыть", Тип("КнопкаФормы"), КоманднаяПанельФормы);
	КнопкаКнопкаПерехода.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаКнопкаПерехода.ТолькоВоВсехДействиях = Истина;
	КнопкаКнопкаПерехода.ИмяКоманды = "ОткрытьОбработкуРедактированиеЗаконодательныхЗначений";
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Настройки программы

// См. НастройкиПрограммыПереопределяемый.НастройкиПользователейИПравПриСозданииНаСервере.
Процедура НастройкиПользователейИПравПриСозданииНаСервере(Форма) Экспорт
	
	ЗарплатаКадрыБазовый.НастройкиПользователейИПравПриСозданииНаСервере(Форма);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.НастройкиПользователейИПравПриСозданииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормыСтатьиРасходовЗарплата(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		ИмяФормыОбъекта = "ФормаСпособаРасчетов";
		ИмяФормыСписка  = "ФормаСпискаСпособовРасчетов";
		ИмяФормыВыбора  = "ФормаВыбораСпособаРасчетов";
	Иначе
		ИмяФормыОбъекта = "ФормаЭлемента";
		ИмяФормыСписка  = "ФормаСписка";
		ИмяФормыВыбора  = "ФормаВыбора";
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ВыбраннаяФорма = ИмяФормыОбъекта;
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = ИмяФормыСписка;
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = ИмяФормыВыбора;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбраннаяФорма) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоступностьМестаПолученияДохода(Форма, ОписанияТаблицФормы, Сотрудники = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ОписанияТаблицФормы Цикл
		Описание = КлючИЗначение.Значение;
		
		СодержитПолеМестоПолученияДохода = Неопределено;
		Если Не Описание.Свойство("СодержитПолеМестоПолученияДохода", СодержитПолеМестоПолученияДохода) Тогда
			Продолжить;
		КонецЕсли;
		Если СодержитПолеМестоПолученияДохода <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = Описание.ПутьКДанным;
		Начисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
		Если Начисления.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаДатаНачала  = Описание.ИмяРеквизитаДатаНачала;
		ИмяРеквизитаСотрудник  = Описание.ИмяРеквизитаСотрудник;
		МесяцНачисления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма.Объект, Описание.ИмяРеквизитаПериод);
		
		Если Не (ЗначениеЗаполнено(ИмяРеквизитаДатаНачала) И ЗначениеЗаполнено(МесяцНачисления)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сотрудники <> Неопределено Тогда
			Если Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда 
				УстановитьПривилегированныйРежим(Истина);
				ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(
					ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо"), "Значение", Истина);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе 
				ФизическиеЛица = Сотрудники;
			КонецЕсли;
		КонецЕсли;
		ЭтоСотрудники = Описание.СодержитПолеСотрудник И ТипЗнч(Начисления[0][ИмяРеквизитаСотрудник]) = Тип("СправочникСсылка.Сотрудники");
		Для Каждого СтрокаНачислений Из Начисления Цикл
			Если Описание.СодержитПолеСотрудник И Сотрудники <> Неопределено Тогда
				ОбработатьСтроку = ЭтоСотрудники И Сотрудники.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено
					Или Не ЭтоСотрудники И ФизическиеЛица.Найти(СтрокаНачислений[ИмяРеквизитаСотрудник]) <> Неопределено;
				Если Не ОбработатьСтроку Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СтрокаНачислений.ДоступноМестоПолученияДохода = НачалоМесяца(СтрокаНачислений[ИмяРеквизитаДатаНачала]) <> НачалоМесяца(МесяцНачисления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// В табличной части вида расчета находит показатели в соответствии с указанными идентификаторами 
//	и отмечает их как определяющие бухучет.
//
// Параметры:
//	ВидРасчетаОбъект - ПланВидовРасчетаОбъект.Начисления, ПланВидовРасчетаОбъект.Удержания
//	ИдентификаторыПоказателей - массив идентификаторов показателей.
//
Процедура ОтметитьПоказателиЗадающиеБухучет(ВидРасчетаОбъект, ИдентификаторыПоказателей) Экспорт
	ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, "ЗадаетБухучет");
КонецПроцедуры

// Формирует таблицу результирующих периодов действия (РПД).
//
// Параметры:
//  РегистрРасчета - ОбъектМетаданных - Регистр расчета для выборки поддерживающий получение ФПД.
//  Отборы         - Структура, см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор - параметры и их значения для
//                                                                                           получения ФПД.
//  Реквизиты      - Строка, Массив   - Имена получаемых полей. Поддерживается значение "*".
//  ОтборыДляФПД   - Структура, см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор - параметры, формирующие
//                                                                                           условия для ФПД.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//
Функция РезультирующийПериодДействия(РегистрРасчета, Отборы, Знач Реквизиты = "", ОтборыДляФПД = Неопределено) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		
		Если СтрНайти(Реквизиты, ".") <> 0 Тогда 
			ВызватьИсключение НСтр("ru = 'Неверный второй параметр Реквизиты: 
			                             |- Обращение через точку не поддерживается';
			                             |en = 'Invalid second parameter Attributes:
			                             |- Cannot access via the point '");
		КонецЕсли;
		
		Реквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Реквизиты, ",");
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	СчетчикПараметров = 1;
	
	Предикат = "";
	ЗаполнитьУсловияИПараметрыПоОтбору(Отборы, Предикат, ПараметрыЗапроса, СчетчикПараметров);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	ОператорВыбрать = ЗапросВыбора.Операторы[0];
	
	НовыйИсточник = ОператорВыбрать.Источники.Добавить(РегистрРасчета.ПолноеИмя() + ".ФактическийПериодДействия", "ФПД");
	НовыйИсточник.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса(Предикат);
	
	Если ОтборыДляФПД <> Неопределено Тогда
		УсловиеДляФПД = "";
		ЗаполнитьУсловияИПараметрыПоОтбору(ОтборыДляФПД, УсловиеДляФПД, ПараметрыЗапроса, СчетчикПараметров);
		ОператорВыбрать.Отбор.Добавить("Сторно ИЛИ " + УсловиеДляФПД);
	КонецЕсли;
	
	ВыбираемыеПоля = ОператорВыбрать.ВыбираемыеПоля;
	ВыбираемыеПоля.Добавить("ПериодРегистрации");
	ВыбираемыеПоля.Добавить("Регистратор");
	ВыбираемыеПоля.Добавить("НомерСтроки");
	ВыбираемыеПоля.Добавить("ВидРасчета");
	ВыбираемыеПоля.Добавить("ПериодДействия");
	ВыбираемыеПоля.Добавить("ПериодДействияНачало");
	ВыбираемыеПоля.Добавить("ПериодДействияКонец");
	ВыбираемыеПоля.Добавить("Сторно");
	
	Измерения = Новый Массив;
	Измерения.Добавить("ВидРасчета");
	Измерения.Добавить("ПериодДействия");
	
	Для Каждого ИмяПоля Из РегистрРасчета.Измерения Цикл
		Измерения.Добавить(ИмяПоля.Имя);
		Если ЗапросВыбора.Колонки.Найти(ИмяПоля.Имя) = Неопределено Тогда
			ВыбираемыеПоля.Добавить(ИмяПоля.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.Найти("*") <> Неопределено Тогда
		
		Для Каждого Реквизит Из РегистрРасчета.СтандартныеРеквизиты Цикл
			Если ЗапросВыбора.Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
				ВыбираемыеПоля.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Реквизит Из РегистрРасчета.Реквизиты Цикл
			Если ЗапросВыбора.Колонки.Найти(Реквизит.Имя) = Неопределено Тогда
				ВыбираемыеПоля.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ресурс Из РегистрРасчета.Ресурсы Цикл
			Если ЗапросВыбора.Колонки.Найти(Ресурс.Имя) = Неопределено Тогда
				ВыбираемыеПоля.Добавить(Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИмяПоля Из Реквизиты Цикл
			Если ЗапросВыбора.Колонки.Найти(ИмяПоля) = Неопределено Тогда
				ВыбираемыеПоля.Добавить(ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(СхемаЗапроса.ПолучитьТекстЗапроса());
	
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

	УстановитьПривилегированныйРежим(Истина);

	ФПД = Запрос.Выполнить().Выгрузить();
	Результат = СкорректироватьПериодыСУчетомСторнирования(ФПД, Измерения);
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьНачальныеЗначенияПериодичности(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Периодичность) Тогда
		Возврат;
	КонецЕсли;
	
	Месяц = Месяц(Объект.Дата);
	Если Месяц > 9 Тогда // начало следующего года
		Объект.ПериодПланирования = КонецГода(Объект.Дата) + 1;
		Объект.Периодичность = Перечисления.Периодичность.Год;
	ИначеЕсли Месяц > 6 Тогда // начало IV квартала
		Объект.ПериодПланирования = ДобавитьМесяц(НачалоГода(Объект.Дата), 9);
		Объект.Периодичность = Перечисления.Периодичность.Квартал;
	ИначеЕсли Месяц > 3 Тогда // начало 2 полугодия
		Объект.ПериодПланирования = ДобавитьМесяц(НачалоГода(Объект.Дата), 6);
		Объект.Периодичность = Перечисления.Периодичность.Полугодие;
	Иначе // начало II квартала
		Объект.ПериодПланирования = ДобавитьМесяц(НачалоГода(Объект.Дата), 3);
		Объект.Периодичность = Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
КонецПроцедуры

#Область БлокировкаИзмененияОбъектов

Функция ДобавитьБлокировкуИзмененияОбъектаФормы(КоллекцияБлокировок, УправляемаяФорма) Экспорт
	
	Если Не УправляемаяФорма.ТолькоПросмотр
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(УправляемаяФорма, "ОграниченияНаУровнеЗаписей")
		И УправляемаяФорма.ОграниченияНаУровнеЗаписей <> Неопределено Тогда
		
		Если УправляемаяФорма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРасчетЗарплатыРасширенная")
			И Не УправляемаяФорма.ОграниченияНаУровнеЗаписей.ИзменениеБезОграничений Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(УправляемаяФорма.Объект, "ДокументРассчитан") Тогда
				Если УправляемаяФорма.Объект.ДокументРассчитан Тогда
					
					БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
						"МногофункциональныеДокументыБЗК",
						НСтр("ru = 'Документ рассчитан, редактирование запрещено.';
							|en = 'The document is calculated, editing is prohibited.'"),
						Ложь,
						НСтр("ru = 'Рассчитанный документ нельзя отредактировать, воспользуйтесь возможностью исправления документов.';
							|en = 'You cannot edit the calculated document but you can correct documents.'"));
					
					КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
					
				КонецЕсли;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(УправляемаяФорма.Объект, "НачисленияУтверждены") Тогда
				Если УправляемаяФорма.Объект.НачисленияУтверждены Тогда
					
					БлокировкаИзмененияОбъекта = БлокировкаИзмененияОбъектов.ОписаниеБлокировкиИзмененияОбъекта(
						"МногофункциональныеДокументыБЗК",
						НСтр("ru = 'Начисления утверждены, редактирование запрещено.';
							|en = 'Accruals are confirmed, editing is prohibited.'"),
						Ложь,
						НСтр("ru = 'Документ в котором начисления утверждены нельзя отредактировать, воспользуйтесь возможностью исправления документов.';
							|en = 'You cannot edit the document whose accruals are confirmed but you can correct documents.'"));
					
					КоллекцияБлокировок.Добавить(БлокировкаИзмененияОбъекта);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ОбновитьЗависимыеДанныеМинимальнойОплатыТрудаРФ()
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МинимальнаяОплатаТрудаРФСрезПоследних.Период КАК Период,
		|	МинимальнаяОплатаТрудаРФСрезПоследних.Размер КАК Размер
		|ПОМЕСТИТЬ ВТИзменившиесяДанные
		|ИЗ
		|	РегистрСведений.МинимальнаяОплатаТрудаРФ.СрезПоследних КАК МинимальнаяОплатаТрудаРФСрезПоследних";
	Результат = Запрос.Выполнить();
	Если ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТИзменившиесяДанные") Тогда
		ПлановыеНачисленияСотрудников.ЗарегистрироватьВторичныеДанныеПриИзмененииМинимальнойОплатыТруда(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
КонецПроцедуры

#Область РегистрацииВОрганеСтатистики

Функция СоздатьРегистрацииПодразделений(ПараметрыОбновления, ДатаНачалаСведений)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Владелец КАК Организация,
		|	ПодразделенияОрганизаций.КодОрганаФСГС КАК КодОрганаФСГС,
		|	ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата КАК ИдентификационныйНомер,
		|	ЕСТЬNULL(РегистрацииВОрганеСтатистики.Ссылка, НЕОПРЕДЕЛЕНО) КАК СуществующаяРегистрация,
		|	АВТОНОМЕРЗАПИСИ() КАК Идентификатор
		|ПОМЕСТИТЬ ВТРегистрации
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВОрганеСтатистики КАК РегистрацииВОрганеСтатистики
		|		ПО (РегистрацииВОрганеСтатистики.КодОрганаФСГС = ПодразделенияОрганизаций.КодОрганаФСГС)
		|			И (РегистрацииВОрганеСтатистики.ИдентификационныйНомер = ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата)
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.КодОрганаФСГС <> """"
		|	И ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодразделенияОрганизаций.Владелец,
		|	ПодразделенияОрганизаций.КодОрганаФСГС,
		|	ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата,
		|	РегистрацииВОрганеСтатистики.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Регистрации.Организация КАК Организация,
		|	Регистрации.КодОрганаФСГС КАК КодОрганаФСГС,
		|	Регистрации.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	Регистрации.СуществующаяРегистрация КАК СуществующаяРегистрация,
		|	Регистрации.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ ВТНовыеРегистрации
		|ИЗ
		|	ВТРегистрации КАК Регистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ПО (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница ССЫЛКА Справочник.ПодразделенияОрганизаций)
		|			И (ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация = Регистрации.СуществующаяРегистрация)
		|ГДЕ
		|	(Регистрации.СуществующаяРегистрация ЕСТЬ NULL
		|			ИЛИ ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеРегистрации.Организация КАК Организация,
		|	НовыеРегистрации.КодОрганаФСГС КАК КодОрганаФСГС,
		|	НовыеРегистрации.ИдентификационныйНомер КАК ИдентификационныйНомер,
		|	НовыеРегистрации.СуществующаяРегистрация КАК СуществующаяРегистрация,
		|	НовыеРегистрации.Идентификатор КАК Идентификатор
		|ИЗ
		|	ВТНовыеРегистрации КАК НовыеРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
		|	ПодразделенияОрганизаций.ИмеетНомерТерриториальногоОрганаРосстата КАК ИмеетРегистрацию,
		|	Регистрации.Идентификатор КАК ИдентификаторРегистрации
		|ИЗ
		|	ВТНовыеРегистрации КАК Регистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|		ПО (ПодразделенияОрганизаций.Владелец = Регистрации.Организация)
		|			И (ПодразделенияОрганизаций.КодОрганаФСГС = Регистрации.КодОрганаФСГС)
		|			И (ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата = Регистрации.ИдентификационныйНомер)
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.Ссылка ЕСТЬ NULL");
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	ОбновляемыеДанные = ОбновлениеИБ.ВыполнитьЗапросПолученияОбновляемыхДанных(Запрос, ПараметрыОбновления, "ВТНовыеРегистрации", 10);
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[3].Пустой() Тогда
		ПодразделенияОбработаны = Истина;
	Иначе
		ПодразделенияОбработаны = Ложь;
		
		// Выявляются используемые регистрации - это комбинации КодОрганаФСГС и НомерТерриториальногоОрганаРосстата.
		// Для каждой комбинации выбирается подразделение - респондент (хозяин регистрации), создаются регистрации.
		// Респондентом назначается подразделение имеющее самый малый уровень иерархии и признак ИмеетНомерТерриториальногоОрганаРосстата = Истина
		
		Регистрации = Результат[2].Выгрузить();
		Подразделения = Результат[3].Выгрузить();
		
		ИдентификаторыРегистраций = Подразделения.Скопировать(, "ИдентификаторРегистрации");
		ИдентификаторыРегистраций.Свернуть("ИдентификаторРегистрации");
		
		Отбор = Новый Структура("ИдентификаторРегистрации");
		
		Для Каждого СтрокаИдентификаторов Из ИдентификаторыРегистраций Цикл
			
			Отбор.ИдентификаторРегистрации = СтрокаИдентификаторов.ИдентификаторРегистрации;
			Строки = Подразделения.НайтиСтроки(Отбор);
			
			// Блокировка Подразделений использующих очередную регистрацию.
			ОписаниеБлокировки = Новый Массив;
			Для Каждого Строка Из Строки Цикл
				ЭлементОписания = ОбновлениеИБ.ОписаниеБлокируемыхДанных(Метаданные.Справочники.ПодразделенияОрганизаций);
				ЭлементОписания.ПоляБлокировки.Ссылка = Строка.Подразделение;
				ОписаниеБлокировки.Добавить(ЭлементОписания);
			КонецЦикла;
			Если Не ОбновлениеИБ.НачатьОбновлениеДанных(ОписаниеБлокировки, ПараметрыОбновления) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеРегистрации = Регистрации.Найти(Строка.ИдентификаторРегистрации, "Идентификатор");
			
			РегистрацияСсылка = ДанныеРегистрации.СуществующаяРегистрация;
			Если Не ЗначениеЗаполнено(РегистрацияСсылка) Тогда
				РегистрацияСсылка = Справочники.РегистрацииВОрганеСтатистики.ПолучитьСсылку();
				// Регистрацию запишем позже, после того как будет выбран респондент (хозяин регистрации).
			КонецЕсли;
			
			Респондент = Неопределено;
			РеспондентНайден = Ложь;
			УровеньРеспондента = 10;
			Для Каждого Строка Из Строки Цикл
				
				ТекУровень = Строка.Подразделение.Уровень();
				Если Не РеспондентНайден Тогда
					Если ТекУровень < УровеньРеспондента Тогда
						УровеньРеспондента = ТекУровень;
						Респондент = Строка.Подразделение;
						РеспондентНайден = Строка.ИмеетРегистрацию;
					КонецЕсли;
				ИначеЕсли Строка.ИмеетРегистрацию И ТекУровень < УровеньРеспондента Тогда
					УровеньРеспондента = ТекУровень;
					Респондент = Строка.Подразделение;
				КонецЕсли;
				
				НоваяЗапись = РегистрыСведений.ИспользованиеРегистрацийВОрганеСтатистики.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период = ДатаНачалаСведений;
				НоваяЗапись.СтруктурнаяЕдиница = Строка.Подразделение;
				НоваяЗапись.Регистрация = РегистрацияСсылка;
				НоваяЗапись.Записать();
				
				ПодразделениеОбъект = Строка.Подразделение.ПолучитьОбъект();
				ПодразделениеОбъект.КодОрганаФСГС = "";
				ПодразделениеОбъект.НомерТерриториальногоОрганаРосстата = "";
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПодразделениеОбъект);
				
			КонецЦикла;
			
			Если ДанныеРегистрации.СуществующаяРегистрация = Неопределено Тогда
				НоваяРегистрация = Справочники.РегистрацииВОрганеСтатистики.СоздатьЭлемент();
				НоваяРегистрация.УстановитьСсылкуНового(РегистрацияСсылка);
				НоваяРегистрация.Владелец = ДанныеРегистрации.Организация;
				НоваяРегистрация.СтруктурнаяЕдиница = Респондент;
				НоваяРегистрация.Наименование = Справочники.РегистрацииВОрганеСтатистики.СтандартноеНаименование(Респондент);
				НоваяРегистрация.КодОрганаФСГС = ДанныеРегистрации.КодОрганаФСГС;
				НоваяРегистрация.ИдентификационныйНомер = ДанныеРегистрации.ИдентификационныйНомер;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоваяРегистрация);
			КонецЕсли;
			
			ОбновлениеИБ.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПодразделенияОбработаны;
	
КонецФункции

Процедура ЗаполнитьРегистрацииВОрганеСтатистики(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбновлениеИБ = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый;
	
	ДатаНачалаСведений = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведенийСПериодомМесяц();
	
	ОрганизацииОбработаны = ЗарплатаКадрыБазовый.СоздатьРегистрацииОрганизаций(ПараметрыОбновления, ДатаНачалаСведений);
	ПодразделенияОбработаны = СоздатьРегистрацииПодразделений(ПараметрыОбновления, ДатаНачалаСведений);
	
	ОбновлениеИБ.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОрганизацииОбработаны И ПодразделенияОбработаны);
	
КонецПроцедуры

Процедура ЗаполнитьИспользованиеРегистрацииВОрганеСтатистики(Регистрация, ДатаАктуальности, МестаИспользования) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Территории.Ссылка КАК Ссылка,
		|	Территории.ПометкаУдаления КАК ПометкаУдаления,
		|	НЕ Территории.ВАрхиве КАК Использование
		|ИЗ
		|	РегистрСведений.ИспользованиеРегистрацийВОрганеСтатистики.СрезПоследних(&ДатаАктуальности, ) КАК ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТерриторииВыполненияРабот КАК Территории
		|		ПО (Территории.Ссылка = ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница)
		|ГДЕ
		|	ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.Регистрация = &Регистрация
		|	И ТИПЗНАЧЕНИЯ(ИспользованиеРегистрацийВОрганеСтатистикиСрезПоследних.СтруктурнаяЕдиница) = ТИП(Справочник.ТерриторииВыполненияРабот)");
	Запрос.УстановитьПараметр("Регистрация", Регистрация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Территории = Запрос.Выполнить().Выгрузить();
	
	Если Территории.Количество() Тогда
		МестаИспользования.Вставить(НСтр("ru = 'Территории';
										|en = 'Areas'"), Территории);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваОрганизацийСоставаРегистрацииРосстата(Организации, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК Использование
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", Организации);
	Организации = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваПодразделенийСоставаРегистрацииРосстата(Подразделения, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка,
		|	Подразделения.ПометкаУдаления КАК ПометкаУдаления,
		|	НЕ Подразделения.Расформировано КАК Использование
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка В(&Ссылки)";
	Запрос.УстановитьПараметр("Ссылки", Подразделения);
	Подразделения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДляВызоваИзЗарплатаКадры

#Область БазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ЗарплатаКадрыБазовый.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.3",
		"Роль.ДобавлениеИзменениеУдержанийПоИсполнительнымДокументам",
		"Роль.ДобавлениеИзменениеИсполнительныхДокументов",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.3",
		"Роль.ЧтениеУдержанийПоИсполнительнымДокументам",
		"Роль.ЧтениеИсполнительныхДокументов",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.16",
		"Роль.ЧтениеСтруктурыПредприятия",
		"Роль.БазовыеПраваЗарплатаКадрыПриложения",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.6.16",
		"Роль.ДобавлениеИзменениеСтруктурыПредприятия",
		"Роль.ДобавлениеИзменениеБазовыхСправочныхДанных",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.10.18",
		"Роль.ДобавлениеИзменениеВнешнихОпераций",
		"Роль.ДобавлениеИзменениеВнешнихОперацийРасчетовССотрудниками",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.10.18",
		"Роль.ЧтениеВнешнихОпераций",
		"Роль.ЧтениеВнешнихОперацийРасчетовССотрудниками",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильАудитор",
		"Роль.ИнтерфейсРабочегоСтолаАудитор",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильКадровик",
		"Роль.ИнтерфейсРабочегоСтолаКадровик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильКадровикРасчетчик",
		"Роль.ИнтерфейсРабочегоСтолаКадровикРасчетчик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильРасчетчик",
		"Роль.ИнтерфейсРабочегоСтолаРасчетчик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильРуководительПодразделения",
		"Роль.ИнтерфейсРабочегоСтолаРуководительПодразделения",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.28",
		"Роль.ПрофильТабельщик",
		"Роль.ИнтерфейсРабочегоСтолаТабельщик",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаВыплатыПеречисления",
		"Роль.ПодсистемаВыплатыПеречисления",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаЗарплата",
		"Роль.ПодсистемаЗарплата",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаКадры",
		"Роль.ПодсистемаКадры",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНалогиИВзносы",
		"Роль.ПодсистемаНалогиИВзносы",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНастройка",
		"Роль.ПодсистемаНастройка",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаНастройкаИАдминистрирование",
		"Роль.ПодсистемаНастройкаИАдминистрирование",
		"ЗарплатаКадрыРасширенная");
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.20.30",
		"Роль.ИспользованиеРазделаОтчетность",
		"Роль.ПодсистемаОтчетность",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.3.78",
		"Роль.НастройкаВзаиморасчетовССотрудниками",
		"Роль.НастройкаВыплаченнойЗарплатыРасширенная",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.4.90",
		"Подсистема.ЗарплатаКадрыРасширеннаяПодсистемы.Подсистема.УчетПособийСоциальногоСтрахованияРасширенная",
		"Подсистема.ЗарплатаКадрыРасширеннаяПодсистемы.Подсистема.ПособияСоциальногоСтрахования",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.4.90",
		"Подсистема.ЗарплатаКадрыРасширеннаяПодсистемы.Подсистема.ПособияСоциальногоСтрахования.Подсистема.ПрямыеВыплатыПособийСоциальногоСтрахованияРасширенная",
		"Подсистема.ЗарплатаКадрыРасширеннаяПодсистемы.Подсистема.ПособияСоциальногоСтрахования.Подсистема.ПрямыеВыплаты",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.13.50",
		"Роль.ИспользоватьНачисленияПоДоговорам",
		"Роль.ИспользоватьНачисленияПоДоговорамРасширенная",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.13.50",
		"Роль.ДобавлениеИзменениеДоговоров",
		"Роль.ДобавлениеИзменениеДоговоровРасширенная",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.13.50",
		"Роль.ЧтениеДоговоров",
		"Роль.ЧтениеДоговоровРасширенная",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.13.50",
		"Роль.НастройкаДанныхДляНачисленияЗарплаты",
		"Роль.НастройкаДанныхДляНачисленияЗарплатыРасширенная",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.15.6",
		"Роль.ИспользованиеРассылкаДокументов",
		"Роль.ИспользованиеОбработкиРассылкаПечатныхФорм",
		"ЗарплатаКадрыРасширенная");
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.1.20.63",
		"Роль.ПодборВидовРасчета",
		"Роль.ПросмотрПодбораВидовРасчета",
		"ЗарплатаКадрыРасширенная");
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.ДосрочноеУвольнение") Тогда 
		МодульДосрочноеУвольнение = ОбщегоНазначения.ОбщийМодуль("ДосрочноеУвольнение");
		МодульДосрочноеУвольнение.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения") Тогда 
		МодульНастройкиСистемыНалогообложения = ОбщегоНазначения.ОбщийМодуль("НастройкиСистемыНалогообложения");
		МодульНастройкиСистемыНалогообложения.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда 
		МодульОтражениеРасходовНаПерсонал = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасходовНаПерсонал");
		МодульОтражениеРасходовНаПерсонал.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда 
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда 
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
		МодульДистанционнаяРабота.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда 
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.РасчетПоложенныхПравНаОтпускаЗависящихОтСтажа.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.РасчетФОТНачисленийЗависящихОтСтажа.Имя);
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.РегистрацияПерерасчетов.Имя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		МодульОтражениеДокументовВУчетеСтраховыхВзносов = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		МодульОтражениеДокументовВУчетеСтраховыхВзносов.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных") Тогда
		МодульАналитикаДанных = ОбщегоНазначения.ОбщийМодуль("АналитикаДанных");
		МодульАналитикаДанных.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокРасширенный = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокРасширенный");
		МодульБронированиеКомандировокРасширенный.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульУведомления.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны);
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РасчетПоложенныхПравНаОтпускаЗависящихОтСтажа.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РасчетФОТНачисленийЗависящихОтСтажа.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.РегистрацияПерерасчетов.ИмяМетода);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда
		МодульОтражениеДокументовВУчетеСтраховыхВзносов = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		МодульОтражениеДокументовВУчетеСтраховыхВзносов.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АналитикаДанных") Тогда
		МодульАналитикаДанных = ОбщегоНазначения.ОбщийМодуль("АналитикаДанных");
		МодульАналитикаДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокРасширенный = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокРасширенный");
		МодульБронированиеКомандировокРасширенный.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульУведомления.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеРаботыПользователей

// См. СоединенияИБПереопределяемый.ПриОпределенииПараметровБлокировкиСеансов.
Процедура ПриОпределенииПараметровБлокировкиСеансов(ПараметрыБлокировкиСеансов) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПриОпределенииПараметровБлокировкиСеансов(ПараметрыБлокировкиСеансов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервью = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		МодульЭлектронноеИнтервью.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.РазборРезюме") Тогда
		МодульРазборРезюме = ОбщегоНазначения.ОбщийМодуль("РазборРезюме");
		МодульРазборРезюме.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульОтпускаСервер = ОбщегоНазначения.ОбщийМодуль("ОтпускаСервер");
		МодульОтпускаСервер.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	РассылкаДокументов.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов.
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервью = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		МодульЭлектронноеИнтервью.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервью = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервью");
		МодульЭлектронноеИнтервью.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.РазборРезюме") Тогда
		МодульРазборРезюме = ОбщегоНазначения.ОбщийМодуль("РазборРезюме");
		МодульРазборРезюме.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыйУчет.Отпуска") Тогда
		МодульОтпускаСервер = ОбщегоНазначения.ОбщийМодуль("ОтпускаСервер");
		МодульОтпускаСервер.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
	РассылкаДокументов.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	
КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокРасширенный = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокРасширенный");
		МодульБронированиеКомандировокРасширенный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы") Тогда
		МодульЧатботы = ОбщегоНазначения.ОбщийМодуль("Чатботы");
		МодульЧатботы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь.СинхронизацияКалендарей") Тогда
		МодульСинхронизацияКалендарей = ОбщегоНазначения.ОбщийМодуль("СинхронизацияКалендарей");
		МодульСинхронизацияКалендарей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СинхронизацияMSExchange") Тогда
		МодульСинхронизацияMSExchange = ОбщегоНазначения.ОбщийМодуль("СинхронизацияMSExchange");
		МодульСинхронизацияMSExchange.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников") Тогда
		МодульРегулярнаяОтправкаСотрудников = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		МодульРегулярнаяОтправкаСотрудников.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Видеоконференции") Тогда
		МодульВидеоконференции = ОбщегоНазначения.ОбщийМодуль("Видеоконференции");
		МодульВидеоконференции.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
		МодульАдаптацияУвольнение.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокРасширенный = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокРасширенный");
		МодульБронированиеКомандировокРасширенный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульСинхронизацияДанныхЗарплатаКадрыСервер = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		МодульСинхронизацияДанныхЗарплатаКадрыСервер.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы") Тогда
		МодульЧатботы = ОбщегоНазначения.ОбщийМодуль("Чатботы");
		МодульЧатботы.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь.СинхронизацияКалендарей") Тогда
		МодульСинхронизацияКалендарей = ОбщегоНазначения.ОбщийМодуль("СинхронизацияКалендарей");
		МодульСинхронизацияКалендарей.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.БронированиеКомандировок.РегулярнаяОтправкаСотрудников") Тогда
		МодульРегулярнаяОтправкаСотрудников = ОбщегоНазначения.ОбщийМодуль("РегулярнаяОтправкаСотрудников");
		МодульРегулярнаяОтправкаСотрудников.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// См. БлокировкаРаботыСВнешнимиРесурсамиПереопределяемый.ПриЗапретеРаботыСВнешнимиРесурсами
Процедура ПриЗапретеРаботыСВнешнимиРесурсами() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ОчиститьНастройкиИнтеграцииРекрутинговыхСайтов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// См. ШаблоныСообщенийПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекШаблоновСообщений(Настройки) Экспорт
	
	Настройки.ИспользоватьПроизвольныеПараметры = Истина;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		МодульОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		МодульОценкаПерсонала.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонам = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонам");
		МодульРассылкаПоШаблонам.ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, НазначениеШаблона, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения
Процедура ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		МодульОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		МодульОценкаПерсонала.ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РассылкаДокументов") Тогда
		МодульРассылкаПоШаблонам = ОбщегоНазначения.ОбщийМодуль("РассылкаПоШаблонам");
		МодульРассылкаПоШаблонам.ПриФормированииСообщения(Сообщение, НазначениеШаблона, ПредметСообщения, ПараметрыШаблона);
	КонецЕсли;
	
КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриЗаполненииПочтыПолучателейВСообщении
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		МодульОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		МодульОценкаПерсонала.ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ШаблоныСообщений") Тогда
		МодульШаблоныСообщенийБЗК = ОбщегоНазначения.ОбщийМодуль("ШаблоныСообщенийБЗК");
		МодульШаблоныСообщенийБЗК.ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, НазначениеШаблона, ПредметСообщения);
	КонецЕсли;

КонецПроцедуры

// См. ШаблоныСообщенийПереопределяемый.ПриЗаполненииТелефоновПолучателейВСообщении
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, НазначениеШаблона, ПредметСообщения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомления = ОбщегоНазначения.ОбщийМодуль("УведомленияСервер");
		МодульУведомления.ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, НазначениеШаблона, ПредметСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВариантыОтчетов

// См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	ЗарплатаКадрыБазовый.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	КонецЕсли;
	
	КадровыйУчетРасширенный.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
	ВоинскийУчет.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайты = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайты");
		МодульРекрутинговыеСайты.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СинхронизацияMSExchange") Тогда
		МодульСинхронизацияMSExchange = ОбщегоНазначения.ОбщийМодуль("СинхронизацияMSExchange");
		МодульСинхронизацияMSExchange.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииПроверок(ГруппыПроверок, Проверки);
	
	УчетРабочегоВремениРасширенный.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	РасчетЗарплатыРасширенный.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	УчетПособийСоциальногоСтрахованияРасширенный.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	ПлановыеНачисленияСотрудников.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	УправлениеШтатнымРасписанием.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	// ПроцессыОбработкиДокументовЗарплата
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	КонецЕсли;
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	Объекты.Добавить(Метаданные.Документы.ДоговорАвторскогоЗаказа);
	Объекты.Добавить(Метаданные.Документы.ПриемНаРаботуСписком);
	Объекты.Добавить(Метаданные.Документы.УвольнениеСписком);

КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	#Область ЗарплатаКадрыПодсистемы
	
	// ЗарплатаКадрыПодсистемы
	ЗарплатаКадрыБазовый.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыПодсистемы
	
	#КонецОбласти
	
	
	#Область ЗарплатаКадрыРасширеннаяПодсистемы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf06-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ТерриторииВыполненияРабот);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf72-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.УсловияТруда);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.Выплаты.ВзаиморасчетыПоПрочимДоходам
	ВзаиморасчетыПоПрочимДоходам.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.Выплаты.ВзаиморасчетыПоПрочимДоходам
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.Выплаты.ВзаиморасчетыССотрудникамиРасширенная
	ВзаиморасчетыССотрудникамиРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.Выплаты.ВзаиморасчетыССотрудникамиРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf7f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ДанныеДляРасчетаЗарплаты);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	ДоговорыГПХРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	ЗаймыСотрудникам.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	ИсправлениеДокументовЗарплатаКадры.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf0e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВосстановлениеВДолжности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеГрафикаРаботыСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf39-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеМестРаботы);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачальнаяШтатнаяРасстановка);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	КадровыйУчетРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ДоходВНатуральнойФорме);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПризПодарок);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf6f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НачислениеЗарплаты);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfaf-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПериодыОплаченныеДоНачалаЭксплуатации);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf51-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Командировка);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf5e-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.КомандировкиСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf91-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.КомпенсацияЗаЗадержкуЗарплаты);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfde-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.МатериальнаяПомощь);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfa5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОплатаПоСреднемуЗаработку);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "86509291-565a-4c63-a3f6-6f5ffd4ca9bf", Метаданные.Документы.ОплатаПоСреднемуЗаработкуСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf8d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Премия);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4da-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПрогулНеявка);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf82-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПрогулНеявкаСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПростойСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РазовоеНачисление);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	ОстаткиОтпусков.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf21-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ГрафикОтпусков);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Отгул);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc8-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтгулСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf4c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Отпуск);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf31-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтпускаСотрудников);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтпускБезСохраненияОплаты);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтпускБезСохраненияОплатыСписком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf7a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПереносОтпуска);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	ОтражениеЗарплатыВБухучетеРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВозвратИзОтпускаПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf4b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеАванса);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеОплатыТруда);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfae-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеПлановыхНачислений);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfd0-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfcb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИндексацияЗаработка);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf03-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.НазначениеПлановогоНачисления);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf8b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаДоплатыДоСреднегоЗаработка);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтменаСовмещения);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf5b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОтпускПоУходуЗаРебенком);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПереводНаОплатуПоСреднемуЗаработку);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbef4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПрекращениеПлановогоНачисления);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbff0-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПриказНаДоплатуДоСреднегоЗаработка);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf61-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.Совмещение);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахованияРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	СтимулирующиеВыплатыФСС.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	РасчетЗарплатыРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	ИсполнительныеЛисты.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	ОграничениеВзысканий.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	РазрядыКатегорииДолжностей.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	СборГрафиковОтпусков.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc0-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИзменениеУсловийИсполнительногоЛиста);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe4-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИсполнительныйЛист);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb6-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПостоянноеУдержаниеВПользуТретьихЛиц);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfac-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УдержаниеВСчетРасчетовПоПрочимОперациям);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f3-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УдержаниеДобровольныхВзносовВНПФ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbee9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УдержаниеДобровольныхСтраховыхВзносов);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf89-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.УдержаниеПрофсоюзныхВзносов);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	УправлениеШтатнымРасписанием.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf3b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ЗаявлениеИЗапросВПФРОЗаработке);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf2f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ИндивидуальныйГрафик);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf67-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РаботаВВыходныеИПраздничныеДни);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РаботаСверхурочно);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfcf-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РегистрацияПереработок);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf65-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ТабельУчетаРабочегоВремени);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	УчетПрочихДоходов.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная
	УчетРабочегоВремениРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетРабочегоВремениРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки
	ВыплатыПоДоговорамОпеки.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	ЗаявкиСотрудниковРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
		
	#КонецОбласти
	
	
	#Область ЗарплатаКадрыПриложения
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АккредитацияСпециалистов") Тогда
		МодульАккредитацияСпециалистов = ОбщегоНазначения.ОбщийМодуль("АккредитацияСпециалистов");
		МодульАккредитацияСпециалистов.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Контрагенты") Тогда
		МодульКонтрагентыСлужебный = ОбщегоНазначения.ОбщийМодуль("КонтрагентыСлужебный");
		МодульКонтрагентыСлужебный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная") Тогда
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf4f-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.БанковскиеСчетаКонтрагентов);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf25-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.ВидыРаботСотрудников);
		УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d5-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Кассы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		МодульБухучетХозрасчетныхОрганизаций = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		МодульБухучетХозрасчетныхОрганизаций.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		МодульВзаиморасчетыССотрудникамиВХОРасширенный = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		МодульВзаиморасчетыССотрудникамиВХОРасширенный.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		МодульЗаймыСотрудникамВХО = ОбщегоНазначения.ОбщийМодуль("ЗаймыСотрудникамВХО");
		МодульЗаймыСотрудникамВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО") Тогда
		МодульУчетДепонированнойЗарплатыВХО = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыВХО");
		МодульУчетДепонированнойЗарплатыВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		МодульУчетНДФЛВХО = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		МодульУчетНДФЛВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		МодульУчетСтраховыхВзносовВХО = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		МодульУчетСтраховыхВзносовВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов") Тогда
		МодульУчетФактическиПолученныхДоходовВХО = ОбщегоНазначения.ОбщийМодуль("УчетФактическиПолученныхДоходовВХО");
		МодульУчетФактическиПолученныхДоходовВХО.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		МодульВоинскиеСпециальныеЗвания = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		МодульВоинскиеСпециальныеЗвания.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		МодульКадровыйУчетВоеннослужащих = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетВоеннослужащих");
		МодульКадровыйУчетВоеннослужащих.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		МодульКлассныеЧиныРанги = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		МодульКлассныеЧиныРанги.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		МодульДивиденды = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		МодульДивиденды.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		МодульОтражениеРасчетовЗарплатыВБухучете = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		МодульОтражениеРасчетовЗарплатыВБухучете.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОперацииРасчетаЗарплаты") Тогда
		МодульОперацииРасчетаЗарплаты = ОбщегоНазначения.ОбщийМодуль("ОперацииРасчетаЗарплаты");
		МодульОперацииРасчетаЗарплаты.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
		МодульОрганизационнаяСтруктура.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		МодульОтражениеЗарплатыВФинансовомУчете = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		МодульОтражениеЗарплатыВФинансовомУчете.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанных") Тогда
		МодульПереносДанных = ОбщегоНазначения.ОбщийМодуль("ПереносДанных");
		МодульПереносДанных.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		МодульПлановыеПрочиеДоходы = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		МодульПлановыеПрочиеДоходы.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		МодульПодработки = ОбщегоНазначения.ОбщийМодуль("Подработки");
		МодульПодработки.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		МодульРасчетыСБюджетомПоНДФЛ = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		МодульРасчетыСБюджетомПоНДФЛ.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		МодульУчетБюджетныхУчреждений.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	КонецЕсли;
	
	#КонецОбласти
	
	
	#Область ЗарплатаКадрыКорпоративнаяПодсистемы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
			МодульАдаптацияУвольнение = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнение");
			МодульАдаптацияУвольнение.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений") Тогда
			МодульБронированиеПомещений = ОбщегоНазначения.ОбщийМодуль("БронированиеПомещений");
			МодульБронированиеПомещений.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
			МодульГрантыНеоблагаемыеНДФЛ = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
			МодульГрантыНеоблагаемыеНДФЛ.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
			МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
			МодульГрейды.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
			МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
			МодульИспытательныйСрокСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
			МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
			МодульКадровоеПланирование.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда
			МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
			МодульКадровыеРешения.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
			МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
			МодульКлючевыеПоказателиЭффективности.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
			МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
			МодульЛьготыСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
			МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
			МодульМедицинскоеСтрахование.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
			МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
			МодульОбучениеРазвитие.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
			МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
			МодульОтсутствияСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
			МодульОхранаТруда.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
			МодульОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
			МодульОценкаПерсонала.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
			МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
			МодульПодборПерсонала.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
			МодульПроизвольныеКадровыеПриказы = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
			МодульПроизвольныеКадровыеПриказы.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
			МодульРеестрГосслужащих = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
			МодульРеестрГосслужащих.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
			МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
			МодульСамообслуживаниеСотрудников.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок") Тогда
			МодульНормированиеКомандировок = ОбщегоНазначения.ОбщийМодуль("НормированиеКомандировок");
			МодульНормированиеКомандировок.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
			МодульХарактеристикиПерсонала = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсонала");
			МодульХарактеристикиПерсонала.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
			МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
			МодульФинансовыйУчет.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
			МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
			МодульЭкспертнаяОценкаПерсонала.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
			МодульВыплатыБывшимВоеннослужащим = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
			МодульВыплатыБывшимВоеннослужащим.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
			МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
			МодульВзыскания.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		
		// ПроцессыОбработкиДокументовЗарплата
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
			МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
			МодульПроцессыОбработкиДокументовЗарплата.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли;
		// Конец ПроцессыОбработкиДокументовЗарплата
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
			МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
			МодульТрудоустройствоПоКвотам.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
		КонецЕсли; 
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииНаименованийНаборовСвойств.
Процедура ПриПолученииНаименованийНаборовСвойств(Наименования, КодЯзыка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриПолученииНаименованийНаборовСвойств(Наименования, КодЯзыка);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта.
Процедура ЗаполнитьНаборыСвойствОбъекта(Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ЗаполнитьНаборыСвойствОбъекта(Объект, ТипСсылки, НаборыСвойств, СтандартнаяОбработка, КлючНазначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей.
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииНазначенияРолей(НазначениеРолей);
	
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаКадровыхДанныхОбщиеДанныеРасширенная.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаНачисленияЗарплатыОбщиеДанныеРасширенная.Имя);
	НазначениеРолей.ТолькоДляПользователейСистемы.Добавить(Метаданные.Роли.НастройкаПособийФССОбщиеДанные.Имя);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеТестированиеКандидатов") Тогда
		МодульЭлектронноеТестированиеКандидатов = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеТестированиеКандидатов");
		МодульЭлектронноеТестированиеКандидатов.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ПриЗаполненииРазделовДатЗапретаИзменения.
Процедура ПриЗаполненииРазделовДатЗапретаИзменения(Разделы) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	УчетРабочегоВремениРасширенный.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		МодульОтражениеЗарплатыВФинансовомУчете = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		МодульОтражениеЗарплатыВФинансовомУчете.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульОтражениеРасходовНаПерсонал = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасходовНаПерсонал");
		МодульОтражениеРасходовНаПерсонал.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала") Тогда
		МодульМотивацияПерсонала = ОбщегоНазначения.ОбщийМодуль("МотивацияПерсонала");
		МодульМотивацияПерсонала.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ПриЗаполненииРазделовДатЗапретаИзменения(Разделы);
	КонецЕсли;
	
КонецПроцедуры

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ЗарплатаКадрыБазовый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	УчетПособийСоциальногоСтрахованияРасширенный.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	СтимулирующиеВыплатыФСС.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	ДоговорыГПХРасширенный.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	// Раздел Зарплата
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенком",										"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыплатаБывшимСотрудникам",												"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДанныеДляРасчетаЗарплаты",												"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоговорЗаймаСотруднику",													"ДатаПредоставления",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДоходВНатуральнойФорме",													"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеИЗапросВПФРОЗаработке",											"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеАванса",														"МесяцИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеГрафикаРаботыСписком",											"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеОплатыТруда",													"ДатаИзменения",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком",							"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийДоговораЗаймаСотруднику",								"ДатаИзменений",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндексацияЗаработка",													"МесяцИндексации",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндивидуальныйГрафик",													"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Командировка", 															"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КомпенсацияЗаЗадержкуЗарплаты", 											"ПериодРегистрации", 	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.МатериальнаяПомощь",														"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачальнаяЗадолженностьПоЗарплате",										"Месяц",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеЗаПервуюПоловинуМесяца",										"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОграничениеВзысканий",													"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаСовмещения",														"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтменаДоплатыДоСреднегоЗаработка",										"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОплатаПоСреднемуЗаработку",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускПоУходуЗаРебенком",												"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Отгул",																	"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтгулСписком",															"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускБезСохраненияОплаты",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускБезСохраненияОплатыСписком",										"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереводНаОплатуПоСреднемуЗаработку",										"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереносДанных",															"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПогашениеЗадолженностиПоВзысканиям",										"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПостоянноеУдержаниеВПользуТретьихЛиц",									"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Премия",																	"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПризПодарок",															"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриказНаДоплатуДоСреднегоЗаработка",										"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрогулНеявка",															"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрогулНеявкаСписком",													"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПростойСотрудников",														"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РазовоеНачисление",														"МесяцНачисления",		"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегистрацияПрочихДоходов",												"Дата",					"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Совмещение",																"ДатаЗапрета",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СторнированиеНачислений",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ТабельУчетаРабочегоВремени",												"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеВСчетРасчетовПоПрочимОперациям",								"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеДобровольныхВзносовВНПФ",										"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеДобровольныхСтраховыхВзносов",									"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдержаниеПрофсоюзныхВзносов",											"ДатаНачала",			"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеТарифнойСетки",												"ДатаВступленияВСилу",	"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГрафикиРаботыПоВидамВремени",										"Месяц",				"ГрафикиРаботы", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ГрафикРаботыСотрудников",											"Период",				"Зарплата", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений",	"Период",				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КоэффициентИндексацииЗаработка",									"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КоэффициентыПовышенияЗаработкаУчитываемыеПриИндексации",			"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РабочиеМестаУдержаний",											"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПрименениеПлановыхНачислений",									"Период",				"Зарплата", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.РасценкиРаботСотрудников",										"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц",							"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтавкаКомпенсацииЗаЗадержкуЗарплаты",								"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтавкаРефинансированияЦБ",										"Период",				"Зарплата", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам",								"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц",						"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений",	"Период",				"Зарплата", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников",		"Период",				"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВытесняемоеПлановоеВремяСотрудников",							"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеИндивидуальныхГрафиковСотрудников",						"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеОперативногоУчетаРабочегоВремениСотрудников",				"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеСводногоУчетаРабочегоВремениСотрудников",					"ПериодРегистрации",	"Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ДанныеТабельногоУчетаРабочегоВремениСотрудников",				"ПериодРегистрации",	"Зарплата", "Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрРасчета.Начисления",														"ПериодРегистрации",	"Зарплата", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрРасчета.Удержания",														"ПериодРегистрации",	"Зарплата", "Организация");
	
	// Раздел ВыплатаЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыПеречислением",         "ПериодРегистрации", "ВыплатаЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком",           "ПериодРегистрации", "ВыплатаЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьПрочихДоходовВБанк",                     "ПериодРегистрации", "ВыплатаЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьПрочихДоходовВКассу",                    "ПериодРегистрации", "ВыплатаЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьПрочихДоходовПеречислением",             "ПериодРегистрации", "ВыплатаЗарплаты", "Организация");
	
	// Раздел КадровыйУчет
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВводНачальныхОстатковОтпусков",					"Дата",							"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратИзОтпускаПоУходуЗаРебенком",				"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВосстановлениеВДолжности", 						"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ГрафикОтпусков", 								"Дата",		 					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеКвалификационногоРазряда",				"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком",	"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеУсловийИсполнительногоЛиста",			"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеПлановыхНачислений", 					"ДатаИзменения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НазначениеПлановогоНачисления", 					"ДатаНазначения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПрекращениеПлановогоНачисления",					"ДатаПрекращения",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеШтатногоРасписания", 					"ДатаВступленияВСилу",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИндексацияШтатногоРасписания", 					"МесяцИндексации",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПереводСписком", 						"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КомандировкиСотрудников",						"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОплатаПоСреднемуЗаработкуСписком",				"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеМестРаботы",							"ДатаНачала",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачальнаяШтатнаяРасстановка",					"Месяц",						"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтпускаСотрудников",								"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереводНаРаботуСКоронавирусом", 					"НачалоПериода",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПеремещениеМеждуТерриториями", 					"НачалоПериода",				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПериодыОплаченныеДоНачалаЭксплуатации",			"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереводКДругомуРаботодателю", 					"ДатаУвольнения", 				"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПеремещениеВДругоеПодразделение", 				"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриемНаРаботуСписком",							"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаботаСверхурочно",								"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаботаВВыходныеИПраздничныеДни",					"ПериодРегистрации",			"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегистрацияПереработок",							"ПериодСуммированногоУчетаОкончание",	"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УвольнениеСписком",								"ДатаЗапрета",					"КадровыйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УтверждениеШтатногоРасписания", 					"МесяцВступленияВСилу", 		"КадровыйУчет", "Организация");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		МодульПроизвольныеКадровыеПриказы = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		МодульПроизвольныеКадровыеПриказы.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КадроваяИсторияСотрудников", 				"Период", 						"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ТерриторииСотрудников", 					"Период",						"КадровыйУчет", "ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЗанятостьПозицийШтатногоРасписания", 		"Период", 						"КадровыйУчет", "ГоловнаяОрганизация");
	
	КонтрактыДоговорыСотрудников.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	// Раздел БухгалтерскийУчетЗарплаты
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыПодразделений",			"Период", 			 "БухгалтерскийУчетЗарплаты", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетНачисленийСотрудников", 			"Период", 			 "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетРаспределениеОсновногоЗаработка", 	"ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетРабочегоВремениСотрудников",	 	"ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПереносЗатратНаПерсоналМеждуСтатьями",			"ПериодРегистрации", "Зарплата", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РаспределениеОсновногоЗаработка", 				"ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетПлановыхУдержаний", 				"Период", 			 "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БухучетНачисленийСотрудников", 					"ДатаНачала", 		 "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтатьяФинансированияДляЗаменыУстаревшейАналитикиВБухучете", 	"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СпособОтраженияДляЗаменыУстаревшейАналитикиВБухучете", 		"Период", "БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.БухучетЗарплатыСотрудников", 					"ДатаНачала", 		"БухгалтерскийУчетЗарплаты", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыСотрудников", 				"Период", 			"БухгалтерскийУчетЗарплаты", "Сотрудник.ГоловнаяОрганизация");
	
	// Раздел НДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПодтверждениеВыплатыДоходов", "Дата", "НДФЛ", "Организация");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		МодульРасчетыСБюджетомПоНДФЛ = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		МодульРасчетыСБюджетомПоНДФЛ.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя", "Период", "НДФЛ", "ГоловнаяОрганизация");
	
	// ВыплатыПоДоговорамОпеки 
	ВыплатыПоДоговорамОпеки.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
	
#Область ЗарплатаКадрыПриложения

	// ОтражениеВФинансовомУчете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		МодульОтражениеЗарплатыВФинансовомУчете = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		МодульОтражениеЗарплатыВФинансовомУчете.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	
	// ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозвратСотрудникомЗадолженности", "ПериодРегистрации", "Зарплата", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СведенияОНезачисленнойЗарплате",  "Дата",              "Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	
	// ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыдачаЗаймаСотруднику", 		"Дата", "Зарплата", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПогашениеЗаймаСотруднику", 	"Дата",	"Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	
	// ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВыплатаДепонированнойЗарплаты",	"Дата", "Зарплата", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО
	
	// ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		МодульУчетНДФЛВХО = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		МодульУчетНДФЛВХО.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УплатаСтраховыхВзносовВФонды", 					"Дата", "СтраховыеВзносы", "Организация");
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВозмещениеРасходовФондомСоциальногоСтрахования", "Дата", "СтраховыеВзносы", "Организация");
	КонецЕсли;
	// Конец ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	
	// Подработки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		МодульПодработки = ОбщегоНазначения.ОбщийМодуль("Подработки");
		МодульПодработки.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец Подработки
	
	// УчетБюджетныхУчреждений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений", "ПериодРегистрации", "БухгалтерскийУчетЗарплаты", "Организация");
	КонецЕсли;
	// Конец УчетБюджетныхУчреждений
	
	// УчетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		МодульУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		МодульУчетХозрасчетныхОрганизаций.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец УчетХозрасчетныхОрганизаций

	
	// ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ГосударственнаяСлужба
	
	// Медицина.ДоступКНаркотическимСредствам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам") Тогда
		МодульДоступКНаркотическимСредствам = ОбщегоНазначения.ОбщийМодуль("ДоступКНаркотическимСредствам");
		МодульДоступКНаркотическимСредствам.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец Медицина.ДоступКНаркотическимСредствам
	
	// Медицина.ФедеральныйРегистрМедицинскихРаботников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец Медицина.ФедеральныйРегистрМедицинскихРаботников
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// Дивиденды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДивидендыФизическимЛицам", "ДатаВыплаты", "Зарплата", "Организация");
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Дивиденды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	// ПлановыеПрочиеДоходы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		МодульПлановыеПрочиеДоходы = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		МодульПлановыеПрочиеДоходы.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	
	// ОтражениеРасчетовЗарплатыВБухучете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		МодульОтражениеВБухучете = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		МодульОтражениеВБухучете.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете
	
	// РабочиеМестаОхраныТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	
#КонецОбласти
	
#Область ЗарплатаКадрыКорпоративнаяПодсистемы
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда 
		МодульГрейды = ОбщегоНазначения.ОбщийМодуль("Грейды");
		МодульГрейды.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда 
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда 
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульОтражениеРасходовНаПерсонал = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасходовНаПерсонал");
		МодульОтражениеРасходовНаПерсонал.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда 
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда 
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда 
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда 
		МодульГрантыНеоблагаемыеНДФЛ = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		МодульГрантыНеоблагаемыеНДФЛ.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда 
		МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
		МодульКадровыеРешения.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МотивацияПерсонала") Тогда 
		МодульМотивацияПерсонала = ОбщегоНазначения.ОбщийМодуль("МотивацияПерсонала");
		МодульМотивацияПерсонала.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда 
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений") Тогда 
		МодульБронированиеПомещенийБЗК = ОбщегоНазначения.ОбщийМодуль("БронированиеПомещенийБЗК");
		МодульБронированиеПомещенийБЗК.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда 
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда 
		МодульРеестрГосслужащих = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		МодульРеестрГосслужащих.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
		МодульОтсутствияСотрудников.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда 
		МодульВыплатыБывшимВоеннослужащим = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		МодульВыплатыБывшимВоеннослужащим.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		МодульВзыскания.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область КалендарныеГрафики

Процедура ПриОбновленииПроизводственныхКалендарей(УсловияОбновления) Экспорт
	УчетРабочегоВремениРасширенный.ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления);
КонецПроцедуры

Процедура ПриОбновленииДанныхЗависимыхОтПроизводственныхКалендарей(УсловияОбновления) Экспорт
	УчетРабочегоВремениРасширенный.ЗаполнитьГрафикиСотрудниковПоПроизводственномуКалендарю(УсловияОбновления);
	ИнтеграцияУправлениеПерсоналомСобытияРасширенный.ОбработатьИзмененияПроизводственныхКалендарей(УсловияОбновления);
КонецПроцедуры

Процедура ПриЗаполненииИзменяемыхОбъектовЗависимыхОтПроизводственныхКалендарей(ИзменяемыеОбъекты) Экспорт
	ИзменяемыеОбъекты.Добавить("РегистрСведений.ГрафикиРаботыПоВидамВремени");
КонецПроцедуры

#КонецОбласти


#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	ЗарплатаКадрыБазовый.ПолучитьПрефиксообразующиеРеквизиты(Объекты);
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Справочники.ПодразделенияОрганизаций;
	СтрокаТаблицы.Реквизит = "Владелец";
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ПеремещениеВДругоеПодразделение;
	СтрокаТаблицы.Реквизит = "Организация";
	
	УчетПособийСоциальногоСтрахованияРасширенный.ПолучитьПрефиксообразующиеРеквизиты(Объекты);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.НастройкаАдминистрирование") Тогда
		МодульОбработкиПанельНастроекЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("Обработки.ПанельНастроекЗарплатаКадры");
		МодульОбработкиПанельНастроекЗарплатаКадры.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	// ЗарплатаКадрыРасширеннаяПодсистемы
	Списки.Вставить(Метаданные.Справочники.ТерриторииВыполненияРабот, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ИзменениеОплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПодчиненностьПодразделенийОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РолиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТерриторииСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТерриторииСотрудниковИнтервальный, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы
	
	ВзаиморасчетыПоПрочимДоходам.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	Списки.Вставить(Метаданные.Документы.ДанныеДляРасчетаЗарплаты, Истина);
	Списки.Вставить(Метаданные.Справочники.ДанныеДляРасчетаЗарплатыПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	ДоговорыГПХРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	Списки.Вставить(Метаданные.Документы.ДоговорЗаймаСотруднику, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеУсловийДоговораЗаймаСотруднику, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаймыСотрудникам, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ВзаиморасчетыПоЗаймамСотрудникам, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Списки.Вставить(Метаданные.Документы.СторнированиеНачислений, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	Списки.Вставить(Метаданные.Справочники.ВосстановлениеВДолжностиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ВосстановлениеВДолжности, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеГрафикаРаботыСписком, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеГрафикаРаботыСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеМестРаботы, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеМестРаботыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.НачальнаяШтатнаяРасстановка, Истина);
	Списки.Вставить(Метаданные.Справочники.НачальнаяШтатнаяРасстановкаПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	Списки.Вставить(Метаданные.Справочники.КадровыйПереводПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.КадровыйПереводСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПереводКДругомуРаботодателюПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПереводНаРаботуСКоронавирусомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПеремещениеВДругоеПодразделениеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриемНаРаботуПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриемНаРаботуСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СправкиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.Справочники.СправкиФизическихЛицПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.УвольнениеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.УвольнениеСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.КадровыйПеревод, Истина);
	Списки.Вставить(Метаданные.Документы.КадровыйПереводСписком, Истина);
	Списки.Вставить(Метаданные.Документы.ПереводКДругомуРаботодателю, Истина);
	Списки.Вставить(Метаданные.Документы.ПеремещениеВДругоеПодразделение, Истина);
	Списки.Вставить(Метаданные.Документы.ПереводНаРаботуСКоронавирусом, Истина);
	Списки.Вставить(Метаданные.Документы.ПеремещениеМеждуТерриториями, Истина);
	Списки.Вставить(Метаданные.Справочники.ПеремещениеМеждуТерриториямиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПриемНаРаботу, Истина);
	Списки.Вставить(Метаданные.Документы.ПриемНаРаботуСписком, Истина);
	Списки.Вставить(Метаданные.Документы.Увольнение, Истина);
	Списки.Вставить(Метаданные.Документы.УвольнениеСписком, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ДанныеНаНачалоЭксплуатации, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ГрафикиПереносыОтпусков, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.Отсутствия, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПриемыПереводыУвольнения, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ГрафикРаботыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеДляПодбораСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеОбОплатеТрудаДляПодбораСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТрудоваяДеятельностьФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.УченыеЗванияФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.УченыеСтепениФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ГрафикРаботыСотрудниковИнтервальный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НаградыФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.НакопленныеСтажиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПериодыРаботыСКоронавирусом, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеЕжегодныеОтпуска, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РеестрКадровыхПриказов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РеестрКадровыхПриказовИспр, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РеестрОтпусков, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтажиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ФотографииФизическихЛиц, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ГруппыСотрудников
	Списки.Вставить(Метаданные.РегистрыСведений.СоставГруппСотрудников, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ГруппыСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	КонтрактыДоговорыСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.СостоянияСотрудников
	Списки.Вставить(Метаданные.РегистрыСведений.СостоянияСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеСостоянийСотрудников, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.СостоянияСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	Списки.Вставить(Метаданные.Документы.ДоходВНатуральнойФорме, Истина);
	Списки.Вставить(Метаданные.Справочники.ДоходВНатуральнойФормеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПризПодарок, Истина);
	Списки.Вставить(Метаданные.Справочники.ПризПодарокПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	Списки.Вставить(Метаданные.Документы.НачислениеЗаПервуюПоловинуМесяца, Истина);
	Списки.Вставить(Метаданные.Справочники.НачислениеЗаПервуюПоловинуМесяцаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.НачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.Справочники.НачислениеЗарплатыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПериодыОплаченныеДоНачалаЭксплуатации, Истина);
	Списки.Вставить(Метаданные.Справочники.ПериодыОплаченныеДоНачалаЭксплуатацииПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	Списки.Вставить(Метаданные.Документы.Командировка, Истина);
	Списки.Вставить(Метаданные.Документы.КомандировкиСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.КомандировкиСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.КомпенсацияЗаЗадержкуЗарплаты, Истина);
	Списки.Вставить(Метаданные.Справочники.КомпенсацияЗаЗадержкуЗарплатыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.МатериальнаяПомощь, Истина);
	Списки.Вставить(Метаданные.Справочники.МатериальнаяПомощьПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОплатаПоСреднемуЗаработку, Истина);
	Списки.Вставить(Метаданные.Документы.ОплатаПоСреднемуЗаработкуСписком, Истина);
	Списки.Вставить(Метаданные.Справочники.ОплатаПоСреднемуЗаработкуСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.Премия, Истина);
	Списки.Вставить(Метаданные.Документы.ПрогулНеявка, Истина);
	Списки.Вставить(Метаданные.Справочники.ПрогулНеявкаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПрогулНеявкаСписком, Истина);
	Списки.Вставить(Метаданные.Справочники.ПрогулНеявкаСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПростойСотрудников, Истина);
	Списки.Вставить(Метаданные.Документы.РазовоеНачисление, Истина);
	Списки.Вставить(Метаданные.Справочники.РазовоеНачислениеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПрогулыНеявки, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	Списки.Вставить(Метаданные.Документы.ВводНачальныхОстатковОтпусков, Истина);
	Списки.Вставить(Метаданные.Справочники.ВводНачальныхОстатковОтпусковПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	Списки.Вставить(Метаданные.Документы.ГрафикОтпусков, Истина);
	Списки.Вставить(Метаданные.Справочники.ГрафикОтпусковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.Отгул, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтгулПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтгулСписком, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтгулСпискомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.Отпуск, Истина);
	Списки.Вставить(Метаданные.Документы.ОтпускаСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтпускаСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтпускБезСохраненияОплаты, Истина);
	Списки.Вставить(Метаданные.Документы.ОтпускБезСохраненияОплатыСписком, Истина);
	Списки.Вставить(Метаданные.Документы.ПереносОтпуска, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.Отгулы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	Списки.Вставить(Метаданные.Документы.ПереносЗатратНаПерсоналМеждуСтатьями, Истина);
	Списки.Вставить(Метаданные.Справочники.ПереносЗатратНаПерсоналМеждуСтатьямиПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РаспределениеОсновногоЗаработка, Истина);
	Списки.Вставить(Метаданные.Справочники.РаспределениеОсновногоЗаработкаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.БухучетНачисленийСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.БухучетНачисленийСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.БухучетЗарплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.Справочники.БухучетЗарплатыСотрудниковПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникам, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СпособОтраженияДляЗаменыУстаревшейАналитикиВБухучете, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтатьяФинансированияДляЗаменыУстаревшейАналитикиВБухучете, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПерерасчетЗарплаты
	Списки.Вставить(Метаданные.РегистрыСведений.ПерерасчетЗарплаты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПерерасчетУдержаний, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсходныеДанныеПерерасчетов, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПерерасчетЗарплаты
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	Списки.Вставить(Метаданные.Документы.ВозвратИзОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеАванса, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеАвансаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеОплатыТруда, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеОплатыТрудаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеПлановыхНачислений, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеПлановыхНачисленийПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Документы.ИндексацияЗаработка, Истина);
	Списки.Вставить(Метаданные.Справочники.ИндексацияЗаработкаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.НазначениеПлановогоНачисления, Истина);
	Списки.Вставить(Метаданные.Справочники.НазначениеПлановогоНачисленияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаДоплатыДоСреднегоЗаработка, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтменаДоплатыДоСреднегоЗаработкаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтменаСовмещения, Истина);
	Списки.Вставить(Метаданные.Документы.ОтпускПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Документы.ПереводНаОплатуПоСреднемуЗаработку, Истина);
	Списки.Вставить(Метаданные.Документы.ПрекращениеПлановогоНачисления, Истина);
	Списки.Вставить(Метаданные.Справочники.ПрекращениеПлановогоНачисленияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПриказНаДоплатуДоСреднегоЗаработка, Истина);
	Списки.Вставить(Метаданные.Справочники.ПриказНаДоплатуДоСреднегоЗаработкаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.Совмещение, Истина);
	Списки.Вставить(Метаданные.Справочники.СовмещениеПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахованияРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	СтимулирующиеВыплатыФСС.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.МногофункциональныеДокументыБЗК
	МногофункциональныеДокументыБЗК.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.МногофункциональныеДокументыБЗК
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	Списки.Вставить(Метаданные.ЖурналыДокументов.НачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыйФОТ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПроцентыСевернойНадбавкиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДниЧасыОтгулов, Истина);
	Списки.Вставить(Метаданные.РегистрыРасчета.Начисления, Истина);
	Списки.Вставить(Метаданные.РегистрыРасчета.Удержания, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.АлиментыИДругиеПостоянныеУдержания, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.Командировки, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.Отпуска, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.РаботаСверхурочно, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПредельныеСуммыУдержанийСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РолиСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДополнениеРасчетнойБазыУдержаний, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.УдержанияДоПределаПоСотрудникам, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.УдержанияПоИсполнительнымДокументам, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.УдержанияПоСотрудникамАвансом, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	Списки.Вставить(Метаданные.РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	Списки.Вставить(Метаданные.Документы.ОграничениеВзысканий, Истина);
	Списки.Вставить(Метаданные.Документы.ПогашениеЗадолженностиПоВзысканиям, Истина);
	Списки.Вставить(Метаданные.Справочники.ПогашениеЗадолженностиПоВзысканиямПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДанныеСохраняемогоЗаработкаПриВзысканиях, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СохраняемыйЗаработокПриВзысканиях, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ЗадолженностьПоУдержаниямФизическихЛиц, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ПлановыеНачисленияСотрудников
	Списки.Вставить(Метаданные.РегистрыСведений.ПлановыйФОТИтоги, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ПлановыеНачисленияСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	Списки.Вставить(Метаданные.Справочники.ИзменениеКвалификационногоРазрядаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеКвалификационногоРазряда, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	СборГрафиковОтпусков.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	Списки.Вставить(Метаданные.Документы.ИзменениеУсловийИсполнительногоЛиста, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеУсловийИсполнительногоЛистаПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИсполнительныйЛист, Истина);
	Списки.Вставить(Метаданные.Справочники.ИсполнительныйЛистПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ПостоянноеУдержаниеВПользуТретьихЛиц, Истина);
	Списки.Вставить(Метаданные.Справочники.ПостоянноеУдержаниеВПользуТретьихЛицПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УдержаниеВСчетРасчетовПоПрочимОперациям, Истина);
	Списки.Вставить(Метаданные.Справочники.УдержаниеВСчетРасчетовПоПрочимОперациямПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УдержаниеДобровольныхВзносовВНПФ, Истина);
	Списки.Вставить(Метаданные.Справочники.УдержаниеДобровольныхВзносовВНПФПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УдержаниеДобровольныхСтраховыхВзносов, Истина);
	Списки.Вставить(Метаданные.Справочники.УдержаниеДобровольныхСтраховыхВзносовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УдержаниеПрофсоюзныхВзносов, Истина);
	Списки.Вставить(Метаданные.Справочники.УдержаниеПрофсоюзныхВзносовПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	Списки.Вставить(Метаданные.Справочники.ШтатноеРасписание, Истина);
	Списки.Вставить(Метаданные.Справочники.ШтатноеРасписаниеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИзменениеШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзменениеШтатногоРасписанияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИндексацияШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.Справочники.ИндексацияШтатногоРасписанияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УтверждениеШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.Справочники.УтверждениеШтатногоРасписанияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияИспользованияШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписания, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ДокументыУправленияШтатнымРасписанием, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияНачисленийПоШтатномуРасписанию, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияПоказателейПоШтатномуРасписанию, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияСпециальностейПоШтатномуРасписанию, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	Списки.Вставить(Метаданные.Документы.ЗаявлениеИЗапросВПФРОЗаработке, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеИЗапросВПФРОЗаработкеПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	Списки.Вставить(Метаданные.Документы.ИндивидуальныйГрафик, Истина);
	Списки.Вставить(Метаданные.Справочники.ИндивидуальныйГрафикПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РаботаВВыходныеИПраздничныеДни, Истина);
	Списки.Вставить(Метаданные.Документы.РаботаСверхурочно, Истина);
	Списки.Вставить(Метаданные.Документы.РегистрацияПереработок, Истина);
	Списки.Вставить(Метаданные.Справочники.РегистрацияПереработокПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ТабельУчетаРабочегоВремени, Истина);
	Списки.Вставить(Метаданные.Справочники.ТабельУчетаРабочегоВремениПрисоединенныеФайлы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетНачисленнойЗарплатыРасширенная
	Списки.Вставить(Метаданные.РегистрыНакопления.ОтработанноеВремяПоСотрудникамКорректировка, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетНачисленнойЗарплатыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетНДФЛРасширенная
	Списки.Вставить(Метаданные.РегистрыСведений.ПредоставлениеСоциальныхВычетовУРаботодателя, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетНДФЛРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	Списки.Вставить(Метаданные.Документы.ВыплатаБывшимСотрудникам, Истина);
	Списки.Вставить(Метаданные.Справочники.ВыплатаБывшимСотрудникамПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РегистрацияПрочихДоходов, Истина);
	Списки.Вставить(Метаданные.Справочники.РегистрацияПрочихДоходовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПрочиеДоходы, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоКонтрагентамАкционерам, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетСреднегоЗаработка
	Списки.Вставить(Метаданные.РегистрыСведений.ПерерасчетСреднегоЗаработка, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.ДанныеДляРасчетаСреднегоЗаработкаПоНачислениям, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетСреднегоЗаработка
	
	// RLS на РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования
	//   (подсистема ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования)
	// поставляется в роли БазовыеПраваЗарплатаКадрыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы)
	// и в роли НастройкаНачисленияЗарплатыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная)
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования, Ложь);
	
	// RLS на РегистрСведений.УчетнаяПолитикаПоНДФЛ
	//   (подсистема ЗарплатаКадрыПодсистемы.УчетНДФЛ)
	// поставляется в роли ЧтениеНалоговИВзносовРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.УчетСтраховыхВзносовРасширенная).
	Списки.Вставить(Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ, Ложь);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.БизнесПроцессыЗаявокСотрудниковРасширенная
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаОтсутствие, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправкаОстаткиОтпусков, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаСправкаСМестаРаботы, Истина);
	Списки.Вставить(Метаданные.БизнесПроцессы.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы, Истина);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.БизнесПроцессыЗаявокСотрудниковРасширенная
	
	ВыплатыПоДоговорамОпеки.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	ЗаявкиСотрудниковРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	
	// ЗарплатаКадрыПриложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		МодульАттестацииСотрудников = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		МодульАттестацииСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения") Тогда
		МодульНастройкиСистемыНалогообложения = ОбщегоНазначения.ОбщийМодуль("НастройкиСистемыНалогообложения");
		МодульНастройкиСистемыНалогообложения.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		Модуль.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		МодульВзаиморасчетыССотрудникамиВХОРасширенный = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		МодульВзаиморасчетыССотрудникамиВХОРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		МодульЗаймыСотрудникамВХО = ОбщегоНазначения.ОбщийМодуль("ЗаймыСотрудникамВХО");
		МодульЗаймыСотрудникамВХО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО") Тогда
		МодульУчетДепонированнойЗарплатыВХО = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыВХО");
		МодульУчетДепонированнойЗарплатыВХО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		МодульУчетНДФЛВХО = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		МодульУчетНДФЛВХО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		МодульУчетСтраховыхВзносовВХО = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		МодульУчетСтраховыхВзносовВХО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов") Тогда
		МодульУчетФактическиПолученныхДоходовВХО = ОбщегоНазначения.ОбщийМодуль("УчетФактическиПолученныхДоходовВХО");
		МодульУчетФактическиПолученныхДоходовВХО.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		МодульДивиденды = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		МодульДивиденды.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		МодульКадровыйРезерв = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		МодульКадровыйРезерв.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		МодульОтражениеВБухучете = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		МодульОтражениеВБухучете.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		МодульМедицина = ОбщегоНазначения.ОбщийМодуль("Медицина");
		МодульМедицина.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		МодульОбразовательныеУчреждения = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		МодульОбразовательныеУчреждения.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		МодульОтражениеЗарплатыВФинансовомУчете = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		МодульОтражениеЗарплатыВФинансовомУчете.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		МодульПлановыеПрочиеДоходы = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		МодульПлановыеПрочиеДоходы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		МодульПодработки = ОбщегоНазначения.ОбщийМодуль("Подработки");
		МодульПодработки.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		МодульРасчетыСБюджетомПоНДФЛ = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		МодульРасчетыСБюджетомПоНДФЛ.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		МодульСведенияОбОтветственныхЛицах = ОбщегоНазначения.ОбщийМодуль("СведенияОбОтветственныхЛицах");
		МодульСведенияОбОтветственныхЛицах.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		МодульУчетБюджетныхУчреждений.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплатыРасширенная") Тогда
		МодульУчетДепонированнойЗарплатыРасширенный = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыРасширенный");
		МодульУчетДепонированнойЗарплатыРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	
	// Конец ЗарплатаКадрыПриложения
	
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		МодульАвтоматическийРасчетСтажейФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АвтоматическийРасчетСтажейФизическихЛиц");
		МодульАвтоматическийРасчетСтажейФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда
		МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
		МодульКадровыеРешения.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсонала = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсонала");
		МодульАнализТекучестиПерсонала.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц") Тогда
		МодульАрхивФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("АрхивФизическихЛиц");
		МодульАрхивФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокРасширенный = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокРасширенный");
		МодульБронированиеКомандировокРасширенный.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений") Тогда
		МодульБронированиеПомещений = ОбщегоНазначения.ОбщийМодуль("БронированиеПомещений");
		МодульБронированиеПомещений.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		МодульГрантыНеоблагаемыеНДФЛ = ОбщегоНазначения.ОбщийМодуль("ГрантыНеоблагаемыеНДФЛ");
		МодульГрантыНеоблагаемыеНДФЛ.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов.ЗагрузкаКандидатовИзИнтернета") Тогда
		МодульЗагрузкаКандидатовИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ЗагрузкаКандидатовИзИнтернета");
		МодульЗагрузкаКандидатовИзИнтернета.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		МодульИспытательныйСрокСотрудников = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		МодульИспытательныйСрокСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		МодульДистанционнаяРабота = ОбщегоНазначения.ОбщийМодуль("ДистанционнаяРабота");
		МодульДистанционнаяРабота.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		МодульКлючевыеПоказателиЭффективности = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		МодульКлючевыеПоказателиЭффективности.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудников = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		МодульЛьготыСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитие = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		МодульОбучениеРазвитие.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульОтражениеРасходовНаПерсонал = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасходовНаПерсонал");
		МодульОтражениеРасходовНаПерсонал.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсонала = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		МодульПодборПерсонала.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		МодульПроизвольныеКадровыеПриказы = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		МодульПроизвольныеКадровыеПриказы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь") Тогда
		МодульРаботаСРабочимКалендарем = ОбщегоНазначения.ОбщийМодуль("РаботаСРабочимКалендарем");
		МодульРаботаСРабочимКалендарем.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		МодульРеестрГосслужащих = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		МодульРеестрГосслужащих.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		МодульСамообслуживаниеСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок") Тогда
		МодульНормированиеКомандировок = ОбщегоНазначения.ОбщийМодуль("НормированиеКомандировок");
		МодульНормированиеКомандировок.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		МодульУправленческаяЗарплата = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		МодульУправленческаяЗарплата.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
		МодульОтсутствияСотрудников.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
		МодульВыплатыБывшимВоеннослужащим = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		МодульВыплатыБывшимВоеннослужащим.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		МодульПоискФизическихЛиц = ОбщегоНазначения.ОбщийМодуль("ПоискФизическихЛиц");
		МодульПоискФизическихЛиц.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		МодульВзыскания.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// ПроцессыОбработкиДокументовЗарплата
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументовЗарплата 
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииОграниченияДоступа(Список, Ограничение);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		МодульКонфигурацииЗарплатаКадрыРасширенный = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		МодульКонфигурацииЗарплатаКадрыРасширенный.ПриЗаполненииОграниченияДоступа(Список, Ограничение);
	КонецЕсли;
	
	// RLS на РегистрСведений.НастройкиУчетаПособийСоциальногоСтрахования
	//   (подсистема ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования)
	// поставляется в роли БазовыеПраваЗарплатаКадрыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы)
	// и в роли НастройкаНачисленияЗарплатыРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная)
	Если Список = Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
	КонецЕсли;
	
	// RLS на РегистрСведений.УчетнаяПолитикаПоНДФЛ
	//   (подсистема ЗарплатаКадрыПодсистемы.УчетНДФЛ)
	// поставляется в роли ЧтениеНалоговИВзносовРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.УчетСтраховыхВзносовРасширенная).
	Если Список = Метаданные.РегистрыСведений.УчетнаяПолитикаПоНДФЛ Тогда
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(ГоловнаяОрганизация)";
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура ПриЗаполненииВидовДоступа(ВидыДоступа) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииВидовДоступа(ВидыДоступа);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ПриЗаполненииВидовДоступа(ВидыДоступа);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КонфигурацииЗарплатаКадрыРасширенный");
		Модуль.ПриЗаполненииИспользованияВидаДоступа(ИмяВидаДоступа, Использование);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	ЗарплатаКадрыБазовый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	// RLS на РегистрСведений.УчетнаяПолитикаПоНДФЛ
	//   (подсистема ЗарплатаКадрыПодсистемы.УчетНДФЛ)
	// поставляется в роли ЧтениеНалоговИВзносовРасширенная
	//   (подсистема ЗарплатаКадрыРасширеннаяПодсистемы.УчетСтраховыхВзносовРасширенная).
	Описание = Описание + "
	|РегистрСведений.УчетнаяПолитикаПоНДФЛ.Чтение.Организации";
	
	// ЗарплатаКадрыРасширеннаяПодсистемы
	Описание = Описание + "
	|Справочник.ТерриторииВыполненияРабот.Чтение.Организации
	|Справочник.ТерриторииВыполненияРабот.Изменение.Организации
	|ЖурналДокументов.ИзменениеОплатыСотрудников.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ИзменениеОплатыСотрудников.Чтение.Организации
	|РегистрСведений.РолиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РолиФизическихЛиц.Чтение.Организации
	|РегистрСведений.РолиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.РолиФизическихЛиц.Изменение.Организации
	|РегистрСведений.ТерриторииСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ТерриторииСотрудников.Чтение.Организации
	|РегистрСведений.ТерриторииСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ТерриторииСотрудниковИнтервальный.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы
	
	ВзаиморасчетыПоПрочимДоходам.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	Описание = Описание + "
	|Документ.ДанныеДляРасчетаЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.ДанныеДляРасчетаЗарплаты.Чтение.Организации
	|Документ.ДанныеДляРасчетаЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.ДанныеДляРасчетаЗарплаты.Изменение.Организации
	|Справочник.ДанныеДляРасчетаЗарплатыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ДанныеДляРасчетаЗарплатыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ДанныеДляРасчетаЗарплатыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ДанныеДляРасчетаЗарплатыПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДанныеДляРасчетаЗарплаты
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	ДоговорыГПХРасширенный.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	Описание = Описание + "
	|Документ.ДоговорЗаймаСотруднику.Чтение.ГруппыФизическихЛиц
	|Документ.ДоговорЗаймаСотруднику.Чтение.Организации
	|Документ.ДоговорЗаймаСотруднику.Изменение.ГруппыФизическихЛиц
	|Документ.ДоговорЗаймаСотруднику.Изменение.Организации
	|Документ.ИзменениеУсловийДоговораЗаймаСотруднику.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийДоговораЗаймаСотруднику.Чтение.Организации
	|Документ.ИзменениеУсловийДоговораЗаймаСотруднику.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийДоговораЗаймаСотруднику.Изменение.Организации
	|ЖурналДокументов.ЗаймыСотрудникам.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ЗаймыСотрудникам.Чтение.Организации
	|РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ВзаиморасчетыПоЗаймамСотрудникам.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ЗаймыСотрудникам
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Описание = Описание + "
	|Документ.СторнированиеНачислений.Чтение.ГруппыФизическихЛиц
	|Документ.СторнированиеНачислений.Чтение.Организации
	|Документ.СторнированиеНачислений.Изменение.ГруппыФизическихЛиц
	|Документ.СторнированиеНачислений.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	Описание = Описание + "
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Изменение.Организации
	|Документ.ВосстановлениеВДолжности.Чтение.ГруппыФизическихЛиц
	|Документ.ВосстановлениеВДолжности.Чтение.Организации
	|Документ.ВосстановлениеВДолжности.Изменение.ГруппыФизическихЛиц
	|Документ.ВосстановлениеВДолжности.Изменение.Организации
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВосстановлениеВДолжностиПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеГрафикаРаботыСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеГрафикаРаботыСписком.Чтение.Организации
	|Документ.ИзменениеГрафикаРаботыСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеГрафикаРаботыСписком.Изменение.Организации
	|Справочник.ИзменениеГрафикаРаботыСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеГрафикаРаботыСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеГрафикаРаботыСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеГрафикаРаботыСпискомПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеМестРаботы.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеМестРаботы.Чтение.Организации
	|Документ.ИзменениеМестРаботы.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеМестРаботы.Изменение.Организации
	|Справочник.ИзменениеМестРаботыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеМестРаботыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеМестРаботыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеМестРаботыПрисоединенныеФайлы.Изменение.Организации
	|Документ.НачальнаяШтатнаяРасстановка.Чтение.ГруппыФизическихЛиц
	|Документ.НачальнаяШтатнаяРасстановка.Чтение.Организации
	|Документ.НачальнаяШтатнаяРасстановка.Изменение.ГруппыФизическихЛиц
	|Документ.НачальнаяШтатнаяРасстановка.Изменение.Организации
	|Справочник.НачальнаяШтатнаяРасстановкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачальнаяШтатнаяРасстановкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачальнаяШтатнаяРасстановкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачальнаяШтатнаяРасстановкаПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	Описание = Описание + "
	|Справочник.КадровыйПереводПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.КадровыйПереводПрисоединенныеФайлы.Чтение.Организации
	|Справочник.КадровыйПереводПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.КадровыйПереводПрисоединенныеФайлы.Изменение.Организации
	|Справочник.КадровыйПереводСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.КадровыйПереводСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.КадровыйПереводСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.КадровыйПереводСпискомПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПереводКДругомуРаботодателюПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПереводКДругомуРаботодателюПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПереводКДругомуРаботодателюПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПереводКДругомуРаботодателюПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПереводНаРаботуСКоронавирусомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПереводНаРаботуСКоронавирусомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПереводНаРаботуСКоронавирусомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПереводНаРаботуСКоронавирусомПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПеремещениеВДругоеПодразделениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПеремещениеВДругоеПодразделениеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПеремещениеВДругоеПодразделениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПеремещениеВДругоеПодразделениеПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриемНаРаботуПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ПриемНаРаботуСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриемНаРаботуСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриемНаРаботуСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриемНаРаботуСпискомПрисоединенныеФайлы.Изменение.Организации
	|Справочник.СправкиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|Справочник.СправкиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|Справочник.СправкиФизическихЛицПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СправкиФизическихЛицПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УвольнениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УвольнениеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УвольнениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УвольнениеПрисоединенныеФайлы.Изменение.Организации
	|Справочник.УвольнениеСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УвольнениеСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УвольнениеСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УвольнениеСпискомПрисоединенныеФайлы.Изменение.Организации
	|Документ.КадровыйПеревод.Чтение.ГруппыФизическихЛиц
	|Документ.КадровыйПеревод.Чтение.Организации
	|Документ.КадровыйПеревод.Изменение.ГруппыФизическихЛиц
	|Документ.КадровыйПеревод.Изменение.Организации
	|Документ.КадровыйПереводСписком.Чтение.ГруппыФизическихЛиц
	|Документ.КадровыйПереводСписком.Чтение.Организации
	|Документ.КадровыйПереводСписком.Изменение.ГруппыФизическихЛиц
	|Документ.КадровыйПереводСписком.Изменение.Организации
	|Документ.ПереводКДругомуРаботодателю.Чтение.ГруппыФизическихЛиц
	|Документ.ПереводКДругомуРаботодателю.Чтение.Организации
	|Документ.ПереводКДругомуРаботодателю.Изменение.ГруппыФизическихЛиц
	|Документ.ПереводКДругомуРаботодателю.Изменение.Организации
	|Документ.ПереводНаРаботуСКоронавирусом.Чтение.ГруппыФизическихЛиц
	|Документ.ПереводНаРаботуСКоронавирусом.Чтение.Организации
	|Документ.ПереводНаРаботуСКоронавирусом.Изменение.ГруппыФизическихЛиц
	|Документ.ПереводНаРаботуСКоронавирусом.Изменение.Организации
	|Документ.ПеремещениеВДругоеПодразделение.Чтение.ГруппыФизическихЛиц
	|Документ.ПеремещениеВДругоеПодразделение.Чтение.Организации
	|Документ.ПеремещениеВДругоеПодразделение.Изменение.ГруппыФизическихЛиц
	|Документ.ПеремещениеВДругоеПодразделение.Изменение.Организации
	|Документ.ПеремещениеМеждуТерриториями.Чтение.ГруппыФизическихЛиц
	|Документ.ПеремещениеМеждуТерриториями.Чтение.Организации
	|Документ.ПеремещениеМеждуТерриториями.Изменение.ГруппыФизическихЛиц
	|Документ.ПеремещениеМеждуТерриториями.Изменение.Организации
	|Справочник.ПеремещениеМеждуТерриториямиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПеремещениеМеждуТерриториямиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПеремещениеМеждуТерриториямиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПеремещениеМеждуТерриториямиПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПриемНаРаботу.Чтение.ГруппыФизическихЛиц
	|Документ.ПриемНаРаботу.Чтение.Организации
	|Документ.ПриемНаРаботу.Изменение.ГруппыФизическихЛиц
	|Документ.ПриемНаРаботу.Изменение.Организации
	|Документ.ПриемНаРаботуСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ПриемНаРаботуСписком.Чтение.Организации
	|Документ.ПриемНаРаботуСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ПриемНаРаботуСписком.Изменение.Организации
	|Документ.Увольнение.Чтение.ГруппыФизическихЛиц
	|Документ.Увольнение.Чтение.Организации
	|Документ.Увольнение.Изменение.ГруппыФизическихЛиц
	|Документ.Увольнение.Изменение.Организации
	|Документ.УвольнениеСписком.Чтение.ГруппыФизическихЛиц
	|Документ.УвольнениеСписком.Чтение.Организации
	|Документ.УвольнениеСписком.Изменение.ГруппыФизическихЛиц
	|Документ.УвольнениеСписком.Изменение.Организации
	|ЖурналДокументов.ДанныеНаНачалоЭксплуатации.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ДанныеНаНачалоЭксплуатации.Чтение.Организации
	|ЖурналДокументов.ОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ОтпускаПоУходуЗаРебенком.Чтение.Организации
	|ЖурналДокументов.Отсутствия.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.Отсутствия.Чтение.Организации
	|ЖурналДокументов.ПриемыПереводыУвольнения.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ПриемыПереводыУвольнения.Чтение.Организации
	|РегистрСведений.ДанныеДляПодбораСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ДанныеДляПодбораСотрудников.Чтение.Организации
	|РегистрСведений.ДанныеДляПодбораСотрудников.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ДанныеДляПодбораСотрудников.Изменение.Организации
	|РегистрСведений.ГрафикРаботыСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ГрафикРаботыСотрудников.Чтение.Организации
	|РегистрСведений.ГрафикРаботыСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ГрафикРаботыСотрудниковИнтервальный.Чтение.Организации
	|РегистрСведений.ДанныеОбОплатеТрудаДляПодбораСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ДанныеОбОплатеТрудаДляПодбораСотрудников.Чтение.Организации
	|РегистрСведений.НаградыФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.НаградыФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.НакопленныеСтажиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПериодыРаботыСКоронавирусом.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПериодыРаботыСКоронавирусом.Чтение.Организации
	|РегистрСведений.ПлановыеЕжегодныеОтпуска.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеЕжегодныеОтпуска.Чтение.Организации
	|РегистрСведений.ПлановыеЕжегодныеОтпуска.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеЕжегодныеОтпуска.Изменение.Организации
	|РегистрСведений.РеестрКадровыхПриказов.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РеестрКадровыхПриказов.Чтение.Организации
	|РегистрСведений.РеестрКадровыхПриказовИспр.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РеестрКадровыхПриказовИспр.Чтение.Организации
	|РегистрСведений.РеестрОтпусков.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтажиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СтажиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ТрудоваяДеятельностьФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ТрудоваяДеятельностьФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.УченыеЗванияФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.УченыеЗванияФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.УченыеСтепениФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.УченыеСтепениФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ФотографииФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ФотографииФизическихЛиц.Изменение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ГруппыСотрудников
	Описание = Описание + "
	|РегистрСведений.СоставГруппСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СоставГруппСотрудников.Изменение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.ГруппыСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	КонтрактыДоговорыСотрудников.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.КонтрактыДоговорыСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.СостоянияСотрудников
	Описание = Описание + "
	|РегистрСведений.ДанныеСостоянийСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СостоянияСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СостоянияСотрудников.Изменение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная.СостоянияСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НастройкаАдминистрирование
	Описание = Описание + "
	|РегистрСведений.НастройкиЗарплатаКадрыРасширенная.Чтение.Организации
	|РегистрСведений.НастройкиЗарплатаКадрыРасширенная.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НастройкаАдминистрирование
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	Описание = Описание + "
	|Справочник.ПризПодарокПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПризПодарокПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПризПодарокПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПризПодарокПрисоединенныеФайлы.Изменение.Организации
	|Документ.ДоходВНатуральнойФорме.Чтение.ГруппыФизическихЛиц
	|Документ.ДоходВНатуральнойФорме.Чтение.Организации
	|Документ.ДоходВНатуральнойФорме.Изменение.ГруппыФизическихЛиц
	|Документ.ДоходВНатуральнойФорме.Изменение.Организации
	|Справочник.ДоходВНатуральнойФормеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ДоходВНатуральнойФормеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ДоходВНатуральнойФормеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ДоходВНатуральнойФормеПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПризПодарок.Чтение.ГруппыФизическихЛиц
	|Документ.ПризПодарок.Чтение.Организации
	|Документ.ПризПодарок.Изменение.ГруппыФизическихЛиц
	|Документ.ПризПодарок.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НатуральныеДоходы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	Описание = Описание + "
	|Документ.НачислениеЗаПервуюПоловинуМесяца.Чтение.ГруппыФизическихЛиц
	|Документ.НачислениеЗаПервуюПоловинуМесяца.Чтение.Организации
	|Документ.НачислениеЗаПервуюПоловинуМесяца.Изменение.ГруппыФизическихЛиц
	|Документ.НачислениеЗаПервуюПоловинуМесяца.Изменение.Организации
	|Справочник.НачислениеЗаПервуюПоловинуМесяцаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗаПервуюПоловинуМесяцаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачислениеЗаПервуюПоловинуМесяцаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗаПервуюПоловинуМесяцаПрисоединенныеФайлы.Изменение.Организации
	|Документ.НачислениеЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.НачислениеЗарплаты.Чтение.Организации
	|Документ.НачислениеЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.НачислениеЗарплаты.Изменение.Организации
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НачислениеЗарплатыПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПериодыОплаченныеДоНачалаЭксплуатации.Чтение.ГруппыФизическихЛиц
	|Документ.ПериодыОплаченныеДоНачалаЭксплуатации.Чтение.Организации
	|Документ.ПериодыОплаченныеДоНачалаЭксплуатации.Изменение.ГруппыФизическихЛиц
	|Документ.ПериодыОплаченныеДоНачалаЭксплуатации.Изменение.Организации
	|Справочник.ПериодыОплаченныеДоНачалаЭксплуатацииПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПериодыОплаченныеДоНачалаЭксплуатацииПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПериодыОплаченныеДоНачалаЭксплуатацииПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПериодыОплаченныеДоНачалаЭксплуатацииПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачислениеЗарплатыДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	Описание = Описание + "
	|Документ.Командировка.Чтение.ГруппыФизическихЛиц
	|Документ.Командировка.Чтение.Организации
	|Документ.Командировка.Изменение.ГруппыФизическихЛиц
	|Документ.Командировка.Изменение.Организации
	|Документ.КомандировкиСотрудников.Чтение.ГруппыФизическихЛиц
	|Документ.КомандировкиСотрудников.Чтение.Организации
	|Документ.КомандировкиСотрудников.Изменение.ГруппыФизическихЛиц
	|Документ.КомандировкиСотрудников.Изменение.Организации
	|Справочник.КомандировкиСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.КомандировкиСотрудниковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.КомандировкиСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.КомандировкиСотрудниковПрисоединенныеФайлы.Изменение.Организации
	|Документ.КомпенсацияЗаЗадержкуЗарплаты.Чтение.ГруппыФизическихЛиц
	|Документ.КомпенсацияЗаЗадержкуЗарплаты.Чтение.Организации
	|Документ.КомпенсацияЗаЗадержкуЗарплаты.Изменение.ГруппыФизическихЛиц
	|Документ.КомпенсацияЗаЗадержкуЗарплаты.Изменение.Организации
	|Справочник.КомпенсацияЗаЗадержкуЗарплатыПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.КомпенсацияЗаЗадержкуЗарплатыПрисоединенныеФайлы.Чтение.Организации
	|Справочник.КомпенсацияЗаЗадержкуЗарплатыПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.КомпенсацияЗаЗадержкуЗарплатыПрисоединенныеФайлы.Изменение.Организации
	|Документ.МатериальнаяПомощь.Чтение.ГруппыФизическихЛиц
	|Документ.МатериальнаяПомощь.Чтение.Организации
	|Документ.МатериальнаяПомощь.Изменение.ГруппыФизическихЛиц
	|Документ.МатериальнаяПомощь.Изменение.Организации
	|Справочник.МатериальнаяПомощьПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.МатериальнаяПомощьПрисоединенныеФайлы.Чтение.Организации
	|Справочник.МатериальнаяПомощьПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.МатериальнаяПомощьПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОплатаПоСреднемуЗаработку.Чтение.ГруппыФизическихЛиц
	|Документ.ОплатаПоСреднемуЗаработку.Чтение.Организации
	|Документ.ОплатаПоСреднемуЗаработку.Изменение.ГруппыФизическихЛиц
	|Документ.ОплатаПоСреднемуЗаработку.Изменение.Организации
	|Документ.ОплатаПоСреднемуЗаработкуСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ОплатаПоСреднемуЗаработкуСписком.Чтение.Организации
	|Документ.ОплатаПоСреднемуЗаработкуСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ОплатаПоСреднемуЗаработкуСписком.Изменение.Организации
	|Справочник.ОплатаПоСреднемуЗаработкуСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОплатаПоСреднемуЗаработкуСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОплатаПоСреднемуЗаработкуСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОплатаПоСреднемуЗаработкуСпискомПрисоединенныеФайлы.Изменение.Организации
	|Документ.Премия.Чтение.ГруппыФизическихЛиц
	|Документ.Премия.Чтение.Организации
	|Документ.Премия.Изменение.ГруппыФизическихЛиц
	|Документ.Премия.Изменение.Организации
	|Документ.ПрогулНеявка.Чтение.ГруппыФизическихЛиц
	|Документ.ПрогулНеявка.Чтение.Организации
	|Документ.ПрогулНеявка.Изменение.ГруппыФизическихЛиц
	|Документ.ПрогулНеявка.Изменение.Организации
	|Справочник.ПрогулНеявкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПрогулНеявкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПрогулНеявкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПрогулНеявкаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПрогулНеявкаСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ПрогулНеявкаСписком.Чтение.Организации
	|Документ.ПрогулНеявкаСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ПрогулНеявкаСписком.Изменение.Организации
	|Справочник.ПрогулНеявкаСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПрогулНеявкаСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПрогулНеявкаСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПрогулНеявкаСпискомПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПростойСотрудников.Чтение.ГруппыФизическихЛиц
	|Документ.ПростойСотрудников.Чтение.Организации
	|Документ.ПростойСотрудников.Изменение.ГруппыФизическихЛиц
	|Документ.ПростойСотрудников.Изменение.Организации
	|Документ.РазовоеНачисление.Чтение.ГруппыФизическихЛиц
	|Документ.РазовоеНачисление.Чтение.Организации
	|Документ.РазовоеНачисление.Изменение.ГруппыФизическихЛиц
	|Документ.РазовоеНачисление.Изменение.Организации
	|Справочник.РазовоеНачислениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РазовоеНачислениеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РазовоеНачислениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РазовоеНачислениеПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.ПрогулыНеявки.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ПрогулыНеявки.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.НачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	Описание = Описание + "
	|Документ.ВводНачальныхОстатковОтпусков.Чтение.ГруппыФизическихЛиц
	|Документ.ВводНачальныхОстатковОтпусков.Чтение.Организации
	|Документ.ВводНачальныхОстатковОтпусков.Изменение.ГруппыФизическихЛиц
	|Документ.ВводНачальныхОстатковОтпусков.Изменение.Организации
	|Справочник.ВводНачальныхОстатковОтпусковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВводНачальныхОстатковОтпусковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВводНачальныхОстатковОтпусковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВводНачальныхОстатковОтпусковПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОстаткиОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	Описание = Описание + "
	|Документ.ГрафикОтпусков.Чтение.ГруппыФизическихЛиц
	|Документ.ГрафикОтпусков.Чтение.Организации
	|Документ.ГрафикОтпусков.Изменение.ГруппыФизическихЛиц
	|Документ.ГрафикОтпусков.Изменение.Организации
	|Справочник.ГрафикОтпусковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ГрафикОтпусковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ГрафикОтпусковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ГрафикОтпусковПрисоединенныеФайлы.Изменение.Организации
	|Документ.Отгул.Чтение.ГруппыФизическихЛиц
	|Документ.Отгул.Чтение.Организации
	|Документ.Отгул.Изменение.ГруппыФизическихЛиц
	|Документ.Отгул.Изменение.Организации
	|Справочник.ОтгулПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтгулПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтгулПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтгулПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОтгулСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ОтгулСписком.Чтение.Организации
	|Документ.ОтгулСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ОтгулСписком.Изменение.Организации
	|Справочник.ОтгулСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтгулСпискомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтгулСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтгулСпискомПрисоединенныеФайлы.Изменение.Организации
	|Документ.Отпуск.Чтение.ГруппыФизическихЛиц
	|Документ.Отпуск.Чтение.Организации
	|Документ.Отпуск.Изменение.ГруппыФизическихЛиц
	|Документ.Отпуск.Изменение.Организации
	|Документ.ОтпускаСотрудников.Чтение.ГруппыФизическихЛиц
	|Документ.ОтпускаСотрудников.Чтение.Организации
	|Документ.ОтпускаСотрудников.Изменение.ГруппыФизическихЛиц
	|Документ.ОтпускаСотрудников.Изменение.Организации
	|Справочник.ОтпускаСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтпускаСотрудниковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтпускаСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтпускаСотрудниковПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОтпускБезСохраненияОплаты.Чтение.ГруппыФизическихЛиц
	|Документ.ОтпускБезСохраненияОплаты.Чтение.Организации
	|Документ.ОтпускБезСохраненияОплаты.Изменение.ГруппыФизическихЛиц
	|Документ.ОтпускБезСохраненияОплаты.Изменение.Организации
	|Документ.ОтпускБезСохраненияОплатыСписком.Чтение.ГруппыФизическихЛиц
	|Документ.ОтпускБезСохраненияОплатыСписком.Чтение.Организации
	|Документ.ОтпускБезСохраненияОплатыСписком.Изменение.ГруппыФизическихЛиц
	|Документ.ОтпускБезСохраненияОплатыСписком.Изменение.Организации
	|Документ.ПереносОтпуска.Чтение.ГруппыФизическихЛиц
	|Документ.ПереносОтпуска.Чтение.Организации
	|Документ.ПереносОтпуска.Изменение.ГруппыФизическихЛиц
	|Документ.ПереносОтпуска.Изменение.Организации
	|ЖурналДокументов.ГрафикиПереносыОтпусков.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ГрафикиПереносыОтпусков.Чтение.Организации
	|ЖурналДокументов.Отгулы.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.Отгулы.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.Отпуска
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	Описание = Описание + "
	|Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Чтение.ГруппыФизическихЛиц
	|Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Чтение.Организации
	|Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Изменение.ГруппыФизическихЛиц
	|Документ.ПереносЗатратНаПерсоналМеждуСтатьями.Изменение.Организации
	|Справочник.ПереносЗатратНаПерсоналМеждуСтатьямиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПереносЗатратНаПерсоналМеждуСтатьямиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПереносЗатратНаПерсоналМеждуСтатьямиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПереносЗатратНаПерсоналМеждуСтатьямиПрисоединенныеФайлы.Изменение.Организации
	|Документ.РаспределениеОсновногоЗаработка.Чтение.ГруппыФизическихЛиц
	|Документ.РаспределениеОсновногоЗаработка.Чтение.Организации
	|Документ.РаспределениеОсновногоЗаработка.Изменение.ГруппыФизическихЛиц
	|Документ.РаспределениеОсновногоЗаработка.Изменение.Организации
	|Справочник.РаспределениеОсновногоЗаработкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РаспределениеОсновногоЗаработкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РаспределениеОсновногоЗаработкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РаспределениеОсновногоЗаработкаПрисоединенныеФайлы.Изменение.Организации
	|Документ.БухучетНачисленийСотрудников.Чтение.ГруппыФизическихЛиц
	|Документ.БухучетНачисленийСотрудников.Чтение.Организации
	|Документ.БухучетНачисленийСотрудников.Изменение.ГруппыФизическихЛиц
	|Документ.БухучетНачисленийСотрудников.Изменение.Организации
	|Справочник.БухучетНачисленийСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.БухучетНачисленийСотрудниковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.БухучетНачисленийСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.БухучетНачисленийСотрудниковПрисоединенныеФайлы.Изменение.Организации
	|Документ.БухучетЗарплатыСотрудников.Чтение.ГруппыФизическихЛиц
	|Документ.БухучетЗарплатыСотрудников.Чтение.Организации
	|Документ.БухучетЗарплатыСотрудников.Изменение.ГруппыФизическихЛиц
	|Документ.БухучетЗарплатыСотрудников.Изменение.Организации
	|Справочник.БухучетЗарплатыСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.БухучетЗарплатыСотрудниковПрисоединенныеФайлы.Чтение.Организации
	|Справочник.БухучетЗарплатыСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.БухучетЗарплатыСотрудниковПрисоединенныеФайлы.Изменение.Организации
	|РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.БухучетНачисленияУдержанияПоКонтрагентамАкционерам.Чтение.Организации
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам.Чтение.Организации
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникам.Изменение.Организации
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом.Чтение.Организации
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.БухучетНачисленияУдержанияПоСотрудникамАвансом.Изменение.Организации
	|РегистрСведений.СтатьяФинансированияДляЗаменыУстаревшейАналитикиВБухучете.Изменение.Организации
	|РегистрСведений.СтатьяФинансированияДляЗаменыУстаревшейАналитикиВБухучете.Чтение.Организации
	|РегистрСведений.СпособОтраженияДляЗаменыУстаревшейАналитикиВБухучете.Изменение.Организации
	|РегистрСведений.СпособОтраженияДляЗаменыУстаревшейАналитикиВБухучете.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчетеРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПерерасчетЗарплаты
	Описание = Описание + "
	|РегистрСведений.ПерерасчетЗарплаты.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетЗарплаты.Чтение.Организации
	|РегистрСведений.ПерерасчетЗарплаты.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетЗарплаты.Изменение.Организации
	|РегистрСведений.ПерерасчетУдержаний.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетУдержаний.Чтение.Организации
	|РегистрСведений.ПерерасчетУдержаний.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетУдержаний.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПерерасчетЗарплаты
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	Описание = Описание + "
	|Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Чтение.Организации
	|Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
	|Документ.ВозвратИзОтпускаПоУходуЗаРебенком.Изменение.Организации
	|Документ.ИзменениеАванса.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеАванса.Чтение.Организации
	|Документ.ИзменениеАванса.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеАванса.Изменение.Организации
	|Справочник.ИзменениеАвансаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеАвансаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеАвансаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеАвансаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеОплатыТруда.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеОплатыТруда.Чтение.Организации
	|Документ.ИзменениеОплатыТруда.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеОплатыТруда.Изменение.Организации
	|Справочник.ИзменениеОплатыТрудаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеОплатыТрудаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеОплатыТрудаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеОплатыТрудаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеПлановыхНачислений.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеПлановыхНачислений.Чтение.Организации
	|Документ.ИзменениеПлановыхНачислений.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеПлановыхНачислений.Изменение.Организации
	|Справочник.ИзменениеПлановыхНачисленийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеПлановыхНачисленийПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеПлановыхНачисленийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеПлановыхНачисленийПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Чтение.Организации
	|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком.Изменение.Организации
	|Документ.ИндексацияЗаработка.Чтение.ГруппыФизическихЛиц
	|Документ.ИндексацияЗаработка.Чтение.Организации
	|Документ.ИндексацияЗаработка.Изменение.ГруппыФизическихЛиц
	|Документ.ИндексацияЗаработка.Изменение.Организации
	|Справочник.ИндексацияЗаработкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИндексацияЗаработкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИндексацияЗаработкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИндексацияЗаработкаПрисоединенныеФайлы.Изменение.Организации
	|Документ.НазначениеПлановогоНачисления.Чтение.ГруппыФизическихЛиц
	|Документ.НазначениеПлановогоНачисления.Чтение.Организации
	|Документ.НазначениеПлановогоНачисления.Изменение.ГруппыФизическихЛиц
	|Документ.НазначениеПлановогоНачисления.Изменение.Организации
	|Справочник.НазначениеПлановогоНачисленияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.НазначениеПлановогоНачисленияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.НазначениеПлановогоНачисленияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.НазначениеПлановогоНачисленияПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОтменаДоплатыДоСреднегоЗаработка.Чтение.ГруппыФизическихЛиц
	|Документ.ОтменаДоплатыДоСреднегоЗаработка.Чтение.Организации
	|Документ.ОтменаДоплатыДоСреднегоЗаработка.Изменение.ГруппыФизическихЛиц
	|Документ.ОтменаДоплатыДоСреднегоЗаработка.Изменение.Организации
	|Справочник.ОтменаДоплатыДоСреднегоЗаработкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОтменаДоплатыДоСреднегоЗаработкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОтменаДоплатыДоСреднегоЗаработкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОтменаДоплатыДоСреднегоЗаработкаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОтменаСовмещения.Чтение.ГруппыФизическихЛиц
	|Документ.ОтменаСовмещения.Чтение.Организации
	|Документ.ОтменаСовмещения.Изменение.ГруппыФизическихЛиц
	|Документ.ОтменаСовмещения.Изменение.Организации
	|Документ.ОтпускПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|Документ.ОтпускПоУходуЗаРебенком.Чтение.Организации
	|Документ.ОтпускПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
	|Документ.ОтпускПоУходуЗаРебенком.Изменение.Организации
	|Документ.ПереводНаОплатуПоСреднемуЗаработку.Чтение.ГруппыФизическихЛиц
	|Документ.ПереводНаОплатуПоСреднемуЗаработку.Чтение.Организации
	|Документ.ПереводНаОплатуПоСреднемуЗаработку.Изменение.ГруппыФизическихЛиц
	|Документ.ПереводНаОплатуПоСреднемуЗаработку.Изменение.Организации
	|Документ.ПрекращениеПлановогоНачисления.Чтение.ГруппыФизическихЛиц
	|Документ.ПрекращениеПлановогоНачисления.Чтение.Организации
	|Документ.ПрекращениеПлановогоНачисления.Изменение.ГруппыФизическихЛиц
	|Документ.ПрекращениеПлановогоНачисления.Изменение.Организации
	|Справочник.ПрекращениеПлановогоНачисленияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПрекращениеПлановогоНачисленияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПрекращениеПлановогоНачисленияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПрекращениеПлановогоНачисленияПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПриказНаДоплатуДоСреднегоЗаработка.Чтение.ГруппыФизическихЛиц
	|Документ.ПриказНаДоплатуДоСреднегоЗаработка.Чтение.Организации
	|Документ.ПриказНаДоплатуДоСреднегоЗаработка.Изменение.ГруппыФизическихЛиц
	|Документ.ПриказНаДоплатуДоСреднегоЗаработка.Изменение.Организации
	|Справочник.ПриказНаДоплатуДоСреднегоЗаработкаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПриказНаДоплатуДоСреднегоЗаработкаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПриказНаДоплатуДоСреднегоЗаработкаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПриказНаДоплатуДоСреднегоЗаработкаПрисоединенныеФайлы.Изменение.Организации
	|Документ.Совмещение.Чтение.ГруппыФизическихЛиц
	|Документ.Совмещение.Чтение.Организации
	|Документ.Совмещение.Изменение.ГруппыФизическихЛиц
	|Документ.Совмещение.Изменение.Организации
	|Справочник.СовмещениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.СовмещениеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.СовмещениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.СовмещениеПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПлановыеНачисленияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахованияРасширенный.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	СтимулирующиеВыплатыФСС.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	Описание = Описание + "
	|ЖурналДокументов.АлиментыИДругиеПостоянныеУдержания.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.АлиментыИДругиеПостоянныеУдержания.Чтение.Организации
	|ЖурналДокументов.Командировки.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.Командировки.Чтение.Организации
	|ЖурналДокументов.НачислениеЗарплаты.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.НачислениеЗарплаты.Чтение.Организации
	|ЖурналДокументов.Отпуска.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.Отпуска.Чтение.Организации
	|ЖурналДокументов.РаботаСверхурочно.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.РаботаСверхурочно.Чтение.Организации
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыОрганизаций.Чтение.Организации
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыПодразделений.Чтение.Организации
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Чтение.Организации
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.Изменение.Организации
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковИнтервальный.Чтение.Организации
	|РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя.Чтение.Организации
	|РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремя.Изменение.Организации
	|РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыОрганизаций.Чтение.Организации
	|РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыПодразделений.Чтение.Организации
	|РегистрСведений.ЗначенияРазовыхПоказателейРасчетаЗарплатыСотрудников.Чтение.Организации
	|РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Чтение.Организации
	|РегистрСведений.ИсторияЕжегодныхОтпусковПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ИсходныеДанныеПерерасчетов.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ИсходныеДанныеПерерасчетов.Чтение.Организации
	|РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПараметрыИсчисленияПроцентаСевернойНадбавкиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыйФОТ.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыйФОТ.Чтение.Организации
	|РегистрСведений.ПредельныеСуммыУдержанийСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПредельныеСуммыУдержанийСотрудников.Чтение.Организации
	|РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников.Чтение.Организации
	|РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.РолиСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.РолиСотрудников.Чтение.Организации
	|РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОЛьготахФизическихЛицПострадавшихВАварииЧАЭС.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.ДниЧасыОтгулов.Чтение.Организации
	|РегистрНакопления.ДополнениеРасчетнойБазыУдержаний.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ДополнениеРасчетнойБазыУдержаний.Чтение.Организации
	|РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыОрганизаций.Чтение.Организации
	|РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыПодразделений.Чтение.Организации
	|РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников.Чтение.Организации
	|РегистрНакопления.УдержанияДоПределаПоСотрудникам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.УдержанияДоПределаПоСотрудникам.Чтение.Организации
	|РегистрНакопления.УдержанияПоИсполнительнымДокументам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.УдержанияПоИсполнительнымДокументам.Чтение.Организации
	|РегистрНакопления.УдержанияПоСотрудникамАвансом.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.УдержанияПоСотрудникамАвансом.Чтение.Организации
	|РегистрРасчета.Начисления.Чтение.ГруппыФизическихЛиц
	|РегистрРасчета.Начисления.Чтение.Организации
	|РегистрРасчета.Удержания.Чтение.ГруппыФизическихЛиц
	|РегистрРасчета.Удержания.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	Описание = Описание + "
	|РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.УсловияУдержанияПоИсполнительномуДокументу.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ИсполнительныеДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	Описание = Описание + "
	|Документ.ОграничениеВзысканий.Чтение.ГруппыФизическихЛиц
	|Документ.ОграничениеВзысканий.Чтение.Организации
	|Документ.ОграничениеВзысканий.Изменение.ГруппыФизическихЛиц
	|Документ.ОграничениеВзысканий.Изменение.Организации
	|Документ.ПогашениеЗадолженностиПоВзысканиям.Чтение.ГруппыФизическихЛиц
	|Документ.ПогашениеЗадолженностиПоВзысканиям.Чтение.Организации
	|Документ.ПогашениеЗадолженностиПоВзысканиям.Изменение.ГруппыФизическихЛиц
	|Документ.ПогашениеЗадолженностиПоВзысканиям.Изменение.Организации
	|Справочник.ПогашениеЗадолженностиПоВзысканиямПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПогашениеЗадолженностиПоВзысканиямПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПогашениеЗадолженностиПоВзысканиямПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПогашениеЗадолженностиПоВзысканиямПрисоединенныеФайлы.Изменение.Организации
	|РегистрСведений.ДанныеСохраняемогоЗаработкаПриВзысканиях.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ДанныеСохраняемогоЗаработкаПриВзысканиях.Чтение.Организации
	|РегистрСведений.СохраняемыйЗаработокПриВзысканиях.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СохраняемыйЗаработокПриВзысканиях.Чтение.Организации
	|РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Чтение.Организации
	|РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.ЗадолженностьПоУдержаниямФизическихЛиц.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ОграничениеВзысканий
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ПлановыеНачисленияСотрудников
	Описание = Описание + "
	|РегистрСведений.ПлановыйФОТИтоги.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыйФОТИтоги.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.ПлановыеНачисленияСотрудников
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	Описание = Описание + "
	|Справочник.ИзменениеКвалификационногоРазрядаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеКвалификационногоРазрядаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеКвалификационногоРазрядаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеКвалификационногоРазрядаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИзменениеКвалификационногоРазряда.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеКвалификационногоРазряда.Чтение.Организации
	|Документ.ИзменениеКвалификационногоРазряда.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеКвалификационногоРазряда.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.РасчетЗарплатыРасширенная.РазрядыКатегорииДолжностей
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	СборГрафиковОтпусков.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СборГрафиковОтпусков
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	Описание = Описание + "
	|Документ.ИзменениеУсловийИсполнительногоЛиста.Чтение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийИсполнительногоЛиста.Чтение.Организации
	|Документ.ИзменениеУсловийИсполнительногоЛиста.Изменение.ГруппыФизическихЛиц
	|Документ.ИзменениеУсловийИсполнительногоЛиста.Изменение.Организации
	|Справочник.ИзменениеУсловийИсполнительногоЛистаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзменениеУсловийИсполнительногоЛистаПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеУсловийИсполнительногоЛистаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзменениеУсловийИсполнительногоЛистаПрисоединенныеФайлы.Изменение.Организации
	|Документ.ИсполнительныйЛист.Чтение.ГруппыФизическихЛиц
	|Документ.ИсполнительныйЛист.Чтение.Организации
	|Документ.ИсполнительныйЛист.Изменение.ГруппыФизическихЛиц
	|Документ.ИсполнительныйЛист.Изменение.Организации
	|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИсполнительныйЛистПрисоединенныеФайлы.Изменение.Организации
	|Документ.ПостоянноеУдержаниеВПользуТретьихЛиц.Чтение.ГруппыФизическихЛиц
	|Документ.ПостоянноеУдержаниеВПользуТретьихЛиц.Чтение.Организации
	|Документ.ПостоянноеУдержаниеВПользуТретьихЛиц.Изменение.ГруппыФизическихЛиц
	|Документ.ПостоянноеУдержаниеВПользуТретьихЛиц.Изменение.Организации
	|Справочник.ПостоянноеУдержаниеВПользуТретьихЛицПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ПостоянноеУдержаниеВПользуТретьихЛицПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ПостоянноеУдержаниеВПользуТретьихЛицПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ПостоянноеУдержаниеВПользуТретьихЛицПрисоединенныеФайлы.Изменение.Организации
	|Документ.УдержаниеВСчетРасчетовПоПрочимОперациям.Чтение.ГруппыФизическихЛиц
	|Документ.УдержаниеВСчетРасчетовПоПрочимОперациям.Чтение.Организации
	|Документ.УдержаниеВСчетРасчетовПоПрочимОперациям.Изменение.ГруппыФизическихЛиц
	|Документ.УдержаниеВСчетРасчетовПоПрочимОперациям.Изменение.Организации
	|Справочник.УдержаниеВСчетРасчетовПоПрочимОперациямПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УдержаниеВСчетРасчетовПоПрочимОперациямПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УдержаниеВСчетРасчетовПоПрочимОперациямПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УдержаниеВСчетРасчетовПоПрочимОперациямПрисоединенныеФайлы.Изменение.Организации
	|Документ.УдержаниеДобровольныхВзносовВНПФ.Чтение.ГруппыФизическихЛиц
	|Документ.УдержаниеДобровольныхВзносовВНПФ.Чтение.Организации
	|Документ.УдержаниеДобровольныхВзносовВНПФ.Изменение.ГруппыФизическихЛиц
	|Документ.УдержаниеДобровольныхВзносовВНПФ.Изменение.Организации
	|Справочник.УдержаниеДобровольныхВзносовВНПФПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УдержаниеДобровольныхВзносовВНПФПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УдержаниеДобровольныхВзносовВНПФПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УдержаниеДобровольныхВзносовВНПФПрисоединенныеФайлы.Изменение.Организации
	|Документ.УдержаниеДобровольныхСтраховыхВзносов.Чтение.ГруппыФизическихЛиц
	|Документ.УдержаниеДобровольныхСтраховыхВзносов.Чтение.Организации
	|Документ.УдержаниеДобровольныхСтраховыхВзносов.Изменение.ГруппыФизическихЛиц
	|Документ.УдержаниеДобровольныхСтраховыхВзносов.Изменение.Организации
	|Справочник.УдержаниеДобровольныхСтраховыхВзносовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УдержаниеДобровольныхСтраховыхВзносовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УдержаниеДобровольныхСтраховыхВзносовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УдержаниеДобровольныхСтраховыхВзносовПрисоединенныеФайлы.Изменение.Организации
	|Документ.УдержаниеПрофсоюзныхВзносов.Чтение.ГруппыФизическихЛиц
	|Документ.УдержаниеПрофсоюзныхВзносов.Чтение.Организации
	|Документ.УдержаниеПрофсоюзныхВзносов.Изменение.ГруппыФизическихЛиц
	|Документ.УдержаниеПрофсоюзныхВзносов.Изменение.Организации
	|Справочник.УдержаниеПрофсоюзныхВзносовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УдержаниеПрофсоюзныхВзносовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УдержаниеПрофсоюзныхВзносовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УдержаниеПрофсоюзныхВзносовПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УдержанияДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	Описание = Описание + "
	|Справочник.ШтатноеРасписание.Чтение.Организации
	|Справочник.ШтатноеРасписание.Чтение.ПодразделенияОрганизаций
	|Справочник.ШтатноеРасписание.Изменение.Организации
	|Справочник.ШтатноеРасписание.Изменение.ПодразделенияОрганизаций
	|Справочник.ШтатноеРасписаниеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ШтатноеРасписаниеПрисоединенныеФайлы.Чтение.ПодразделенияОрганизаций
	|Справочник.ШтатноеРасписаниеПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ШтатноеРасписаниеПрисоединенныеФайлы.Изменение.ПодразделенияОрганизаций
	|Документ.ИзменениеШтатногоРасписания.Чтение.Организации
	|Документ.ИзменениеШтатногоРасписания.Чтение.ПодразделенияОрганизаций
	|Документ.ИзменениеШтатногоРасписания.Изменение.Организации
	|Документ.ИзменениеШтатногоРасписания.Изменение.ПодразделенияОрганизаций
	|Справочник.ИзменениеШтатногоРасписанияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзменениеШтатногоРасписанияПрисоединенныеФайлы.Чтение.ПодразделенияОрганизаций
	|Справочник.ИзменениеШтатногоРасписанияПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ИзменениеШтатногоРасписанияПрисоединенныеФайлы.Изменение.ПодразделенияОрганизаций
	|Документ.ИндексацияШтатногоРасписания.Чтение.Организации
	|Документ.ИндексацияШтатногоРасписания.Чтение.ПодразделенияОрганизаций
	|Документ.ИндексацияШтатногоРасписания.Изменение.Организации
	|Документ.ИндексацияШтатногоРасписания.Изменение.ПодразделенияОрганизаций
	|Справочник.ИндексацияШтатногоРасписанияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИндексацияШтатногоРасписанияПрисоединенныеФайлы.Чтение.ПодразделенияОрганизаций
	|Справочник.ИндексацияШтатногоРасписанияПрисоединенныеФайлы.Изменение.Организации
	|Справочник.ИндексацияШтатногоРасписанияПрисоединенныеФайлы.Изменение.ПодразделенияОрганизаций
	|Документ.УтверждениеШтатногоРасписания.Чтение.Организации
	|Документ.УтверждениеШтатногоРасписания.Чтение.ПодразделенияОрганизаций
	|Документ.УтверждениеШтатногоРасписания.Изменение.Организации
	|Документ.УтверждениеШтатногоРасписания.Изменение.ПодразделенияОрганизаций
	|Справочник.УтверждениеШтатногоРасписанияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УтверждениеШтатногоРасписанияПрисоединенныеФайлы.Чтение.ПодразделенияОрганизаций
	|Справочник.УтверждениеШтатногоРасписанияПрисоединенныеФайлы.Изменение.Организации
	|Справочник.УтверждениеШтатногоРасписанияПрисоединенныеФайлы.Изменение.ПодразделенияОрганизаций
	|ЖурналДокументов.ДокументыУправленияШтатнымРасписанием.Чтение.Организации
	|ЖурналДокументов.ДокументыУправленияШтатнымРасписанием.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ИсторияИспользованияШтатногоРасписания.Чтение.Организации
	|РегистрСведений.ИсторияИспользованияШтатногоРасписания.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ИсторияНачисленийПоШтатномуРасписанию.Чтение.Организации
	|РегистрСведений.ИсторияНачисленийПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию.Чтение.Организации
	|РегистрСведений.ИсторияПоказателейПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию.Чтение.Организации
	|РегистрСведений.ИсторияСпециальностейПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ЗанятостьПозицийШтатногоРасписания.Чтение.Организации
	|РегистрСведений.ЗанятостьПозицийШтатногоРасписания.Чтение.ПодразделенияОрганизаций
	|РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный.Чтение.Организации
	|РегистрСведений.ЗанятостьПозицийШтатногоРасписанияИнтервальный.Чтение.ПодразделенияОрганизаций";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УправлениеШтатнымРасписанием
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	Описание = Описание + "
	|Документ.ЗаявлениеИЗапросВПФРОЗаработке.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеИЗапросВПФРОЗаработке.Чтение.Организации
	|Документ.ЗаявлениеИЗапросВПФРОЗаработке.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеИЗапросВПФРОЗаработке.Изменение.Организации
	|Справочник.ЗаявлениеИЗапросВПФРОЗаработкеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеИЗапросВПФРОЗаработкеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеИЗапросВПФРОЗаработкеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеИЗапросВПФРОЗаработкеПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВзносовДокументыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	Описание = Описание + "
	|Документ.ИндивидуальныйГрафик.Чтение.ГруппыФизическихЛиц
	|Документ.ИндивидуальныйГрафик.Чтение.Организации
	|Документ.ИндивидуальныйГрафик.Изменение.ГруппыФизическихЛиц
	|Документ.ИндивидуальныйГрафик.Изменение.Организации
	|Справочник.ИндивидуальныйГрафикПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИндивидуальныйГрафикПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИндивидуальныйГрафикПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИндивидуальныйГрафикПрисоединенныеФайлы.Изменение.Организации
	|Документ.РаботаВВыходныеИПраздничныеДни.Чтение.ГруппыФизическихЛиц
	|Документ.РаботаВВыходныеИПраздничныеДни.Чтение.Организации
	|Документ.РаботаВВыходныеИПраздничныеДни.Изменение.ГруппыФизическихЛиц
	|Документ.РаботаВВыходныеИПраздничныеДни.Изменение.Организации
	|Документ.РаботаСверхурочно.Чтение.ГруппыФизическихЛиц
	|Документ.РаботаСверхурочно.Чтение.Организации
	|Документ.РаботаСверхурочно.Изменение.ГруппыФизическихЛиц
	|Документ.РаботаСверхурочно.Изменение.Организации
	|Документ.РегистрацияПереработок.Чтение.ГруппыФизическихЛиц
	|Документ.РегистрацияПереработок.Чтение.Организации
	|Документ.РегистрацияПереработок.Изменение.ГруппыФизическихЛиц
	|Документ.РегистрацияПереработок.Изменение.Организации
	|Справочник.РегистрацияПереработокПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РегистрацияПереработокПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РегистрацияПереработокПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РегистрацияПереработокПрисоединенныеФайлы.Изменение.Организации
	|Документ.ТабельУчетаРабочегоВремени.Чтение.ГруппыФизическихЛиц
	|Документ.ТабельУчетаРабочегоВремени.Чтение.Организации
	|Документ.ТабельУчетаРабочегоВремени.Изменение.ГруппыФизическихЛиц
	|Документ.ТабельУчетаРабочегоВремени.Изменение.Организации
	|Справочник.ТабельУчетаРабочегоВремениПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ТабельУчетаРабочегоВремениПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ТабельУчетаРабочегоВремениПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ТабельУчетаРабочегоВремениПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетВремениДокументы
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетНачисленнойЗарплатыРасширенная
	Описание = Описание + "
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.Чтение.Организации
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.Изменение.ГруппыФизическихЛиц
	|РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетНачисленнойЗарплатыРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетНДФЛРасширенная
	Описание = Описание + "
	|РегистрСведений.ПредоставлениеСоциальныхВычетовУРаботодателя.Чтение.ГруппыФизическихЛиц";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетНДФЛРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	Описание = Описание + "
	|Справочник.РегистрацияПрочихДоходовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РегистрацияПрочихДоходовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РегистрацияПрочихДоходовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РегистрацияПрочихДоходовПрисоединенныеФайлы.Изменение.Организации
	|Документ.ВыплатаБывшимСотрудникам.Чтение.ГруппыФизическихЛиц
	|Документ.ВыплатаБывшимСотрудникам.Чтение.Организации
	|Документ.ВыплатаБывшимСотрудникам.Изменение.ГруппыФизическихЛиц
	|Документ.ВыплатаБывшимСотрудникам.Изменение.Организации
	|Справочник.ВыплатаБывшимСотрудникамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВыплатаБывшимСотрудникамПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВыплатаБывшимСотрудникамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВыплатаБывшимСотрудникамПрисоединенныеФайлы.Изменение.Организации
	|Документ.РегистрацияПрочихДоходов.Чтение.ГруппыФизическихЛиц
	|Документ.РегистрацияПрочихДоходов.Чтение.Организации
	|Документ.РегистрацияПрочихДоходов.Изменение.ГруппыФизическихЛиц
	|Документ.РегистрацияПрочихДоходов.Изменение.Организации
	|ЖурналДокументов.ПрочиеДоходы.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ПрочиеДоходы.Чтение.Организации
	|РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетПрочихДоходов
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.УчетСреднегоЗаработка
	Описание = Описание + "
	|РегистрСведений.ПерерасчетСреднегоЗаработка.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетСреднегоЗаработка.Чтение.Организации
	|РегистрСведений.ПерерасчетСреднегоЗаработка.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.ПерерасчетСреднегоЗаработка.Изменение.Организации
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Чтение.Организации
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Изменение.ГруппыФизическихЛиц
	|РегистрСведений.СведенияОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Изменение.Организации
	|РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ДанныеОНачисленияхДляРасчетаСреднегоЗаработкаОбщий.Чтение.Организации
	|РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаПоНачислениям.Чтение.ГруппыФизическихЛиц
	|РегистрНакопления.ДанныеДляРасчетаСреднегоЗаработкаПоНачислениям.Чтение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.УчетСреднегоЗаработка
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки
	Описание = Описание + "
	|Документ.ВыплатыПоДоговорамОпеки.Чтение.ГруппыФизическихЛиц
	|Документ.ВыплатыПоДоговорамОпеки.Чтение.Организации
	|Документ.ВыплатыПоДоговорамОпеки.Изменение.ГруппыФизическихЛиц
	|Документ.ВыплатыПоДоговорамОпеки.Изменение.Организации
	|Справочник.ВыплатыПоДоговорамОпекиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ВыплатыПоДоговорамОпекиПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ВыплатыПоДоговорамОпекиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ВыплатыПоДоговорамОпекиПрисоединенныеФайлы.Изменение.Организации";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ.ВыплатыПоДоговорамОпеки

	// ЗарплатаКадрыРасширеннаяПодсистемы.МногофункциональныеДокументыБЗК
	Описание = Описание + "
	|РегистрСведений.НачисленнаяЗарплатаРедактированиеФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.НачисленнаяЗарплатаПросмотрФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеНачисленияРедактированиеФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.ПлановыеНачисленияПросмотрФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.КадровыеДанныеРедактированиеФизическиеЛица.Чтение.ГруппыФизическихЛиц
	|РегистрСведений.НачисленнаяЗарплатаРедактированиеОрганизации.Чтение.Организации
	|РегистрСведений.НачисленнаяЗарплатаПросмотрОрганизации.Чтение.Организации
	|РегистрСведений.ПлановыеНачисленияРедактированиеОрганизации.Чтение.Организации
	|РегистрСведений.ПлановыеНачисленияПросмотрОрганизации.Чтение.Организации
	|РегистрСведений.КадровыеДанныеРедактированиеОрганизации.Чтение.Организации
	|";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.МногофункциональныеДокументыБЗК
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.БизнесПроцессыЗаявокСотрудниковРасширенная
	Описание = Описание + "
	|БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтсутствие.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаОтсутствие.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправкаОстаткиОтпусков.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправкаОстаткиОтпусков.Изменение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы.Чтение.Пользователи
	|БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы.Изменение.Пользователи
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтсутствие
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправкаОстаткиОтпусков
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаДобровольныеСтраховыеВзносы
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаОтсутствие
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправкаОстаткиОтпусков
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаявкаСотрудникаСправкаСМестаРаботы";
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.БизнесПроцессыЗаявокСотрудниковРасширенная
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	ЗаявкиСотрудниковРасширенный.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная

	// ЗарплатаКадрыПриложения.АттестацииСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Описание = Описание + "
		|Справочник.НаправлениеНаВнешнююАттестациюПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НаправлениеНаВнешнююАттестациюПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НаправлениеНаВнешнююАттестациюПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НаправлениеНаВнешнююАттестациюПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ПриказОбАттестацииСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПриказОбАттестацииСотрудниковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПриказОбАттестацииСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПриказОбАттестацииСотрудниковПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РезультатыАттестацииСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РезультатыАттестацииСотрудниковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РезультатыАттестацииСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РезультатыАттестацииСотрудниковПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ФормированиеАттестационнойКомиссииСотрудниковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ФормированиеАттестационнойКомиссииСотрудниковПрисоединенныеФайлы.Изменение.Организации
		|Документ.НаправлениеНаВнешнююАттестацию.Чтение.ГруппыФизическихЛиц
		|Документ.НаправлениеНаВнешнююАттестацию.Чтение.Организации
		|Документ.НаправлениеНаВнешнююАттестацию.Изменение.ГруппыФизическихЛиц
		|Документ.НаправлениеНаВнешнююАттестацию.Изменение.Организации
		|Документ.ПриказОбАттестацииСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.ПриказОбАттестацииСотрудников.Чтение.Организации
		|Документ.ПриказОбАттестацииСотрудников.Изменение.ГруппыФизическихЛиц
		|Документ.ПриказОбАттестацииСотрудников.Изменение.Организации
		|Документ.РезультатыАттестацииСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.РезультатыАттестацииСотрудников.Чтение.Организации
		|Документ.РезультатыАттестацииСотрудников.Изменение.ГруппыФизическихЛиц
		|Документ.РезультатыАттестацииСотрудников.Изменение.Организации
		|Документ.ФормированиеАттестационнойКомиссииСотрудников.Чтение.Организации
		|Документ.ФормированиеАттестационнойКомиссииСотрудников.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.АттестацииСотрудников
	
	// ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НастройкиСистемыНалогообложения");
		Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.БазовыеСправочныеДанныеРасширенная.НастройкиСистемыНалогообложения
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		Описание = Описание + "
		|Документ.ВыдачаЗаймаСотруднику.Чтение.ГруппыФизическихЛиц
		|Документ.ВыдачаЗаймаСотруднику.Чтение.Организации
		|Документ.ВыдачаЗаймаСотруднику.Изменение.ГруппыФизическихЛиц
		|Документ.ВыдачаЗаймаСотруднику.Изменение.Организации
		|Справочник.ВыдачаЗаймаСотрудникуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВыдачаЗаймаСотрудникуПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВыдачаЗаймаСотрудникуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ВыдачаЗаймаСотрудникуПрисоединенныеФайлы.Изменение.Организации
		|Документ.ПогашениеЗаймаСотруднику.Чтение.ГруппыФизическихЛиц
		|Документ.ПогашениеЗаймаСотруднику.Чтение.Организации
		|Документ.ПогашениеЗаймаСотруднику.Изменение.ГруппыФизическихЛиц
		|Документ.ПогашениеЗаймаСотруднику.Изменение.Организации
		|Справочник.ПогашениеЗаймаСотрудникуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПогашениеЗаймаСотрудникуПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПогашениеЗаймаСотрудникуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПогашениеЗаймаСотрудникуПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыВХО");
		Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Описание = Описание + "
		|Документ.ПеречислениеНДФЛВБюджет.Чтение.Организации
		|Документ.ПеречислениеНДФЛВБюджет.Изменение.Организации
		|Справочник.ПеречислениеНДФЛВБюджетПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПеречислениеНДФЛВБюджетПрисоединенныеФайлы.Изменение.Организации
		|ЖурналДокументов.ПеречисленияНДФЛВБюджет.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.ПеречисленияНДФЛВБюджет.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		Описание = Описание + "
		|Документ.ВозмещениеРасходовФондомСоциальногоСтрахования.Чтение.Организации
		|Документ.ВозмещениеРасходовФондомСоциальногоСтрахования.Изменение.Организации
		|Справочник.ВозмещениеРасходовФондомСоциальногоСтрахованияПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВозмещениеРасходовФондомСоциальногоСтрахованияПрисоединенныеФайлы.Изменение.Организации
		|Документ.УплатаСтраховыхВзносовВФонды.Чтение.Организации
		|Документ.УплатаСтраховыхВзносовВФонды.Изменение.Организации
		|Справочник.УплатаСтраховыхВзносовВФондыПрисоединенныеФайлы.Чтение.Организации
		|Справочник.УплатаСтраховыхВзносовВФондыПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО
	
	// ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов") Тогда
		Описание = Описание + "
		|Документ.ПодтверждениеВыплатыДоходов.Чтение.Организации
		|Документ.ПодтверждениеВыплатыДоходов.Изменение.Организации
		|Справочник.ПодтверждениеВыплатыДоходовПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПодтверждениеВыплатыДоходовПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ДатыВыплатыДоходов.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Описание = Описание + "
		|РегистрСведений.СведенияОГосударственномСлужащем.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СведенияОГосударственномСлужащем.Изменение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Описание = Описание + "
		|Документ.ПрисвоениеВоинскогоСпециальногоЗвания.Чтение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеВоинскогоСпециальногоЗвания.Чтение.Организации
		|Документ.ПрисвоениеВоинскогоСпециальногоЗвания.Изменение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеВоинскогоСпециальногоЗвания.Изменение.Организации
		|Документ.ПрисвоениеВоинскогоСпециальногоЗванияСписком.Чтение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеВоинскогоСпециальногоЗванияСписком.Чтение.Организации
		|Документ.ПрисвоениеВоинскогоСпециальногоЗванияСписком.Изменение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеВоинскогоСпециальногоЗванияСписком.Изменение.Организации
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияСпискомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеВоинскогоСпециальногоЗванияСпискомПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ВоинскиеСпециальныеЗванияФизическихЛиц.Чтение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Описание = Описание + "
		|Справочник.ЗачислениеВСпискиЧастиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗачислениеВСпискиЧастиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗачислениеВСпискиЧастиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗачислениеВСпискиЧастиПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ЗачислениеВСпискиЧастиСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗачислениеВСпискиЧастиСпискомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗачислениеВСпискиЧастиСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗачислениеВСпискиЧастиСпискомПрисоединенныеФайлы.Изменение.Организации
		|Справочник.КадровыйПереводВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.КадровыйПереводВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации		
		|Справочник.КадровыйПереводВоеннослужащегоСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводВоеннослужащегоСпискомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.КадровыйПереводВоеннослужащегоСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.КадровыйПереводВоеннослужащегоСпискомПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ИсключениеИзСписковЧастиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИсключениеИзСписковЧастиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИсключениеИзСписковЧастиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИсключениеИзСписковЧастиПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ИсключениеИзСписковЧастиСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИсключениеИзСписковЧастиСпискомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИсключениеИзСписковЧастиСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИсключениеИзСписковЧастиСпискомПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ОплатаСверхурочныхВоеннослужащимПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОплатаСверхурочныхВоеннослужащимПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОплатаСверхурочныхВоеннослужащимПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОплатаСверхурочныхВоеннослужащимПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ОтпускВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации		
		|Справочник.ОтпускаВоеннослужащихПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускаВоеннослужащихПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускаВоеннослужащихПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускаВоеннослужащихПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ОтпускПоБеременностиИРодамВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускПоБеременностиИРодамВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускПоБеременностиИРодамВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускПоБеременностиИРодамВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ОтпускПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтпускПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтпускПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтпускПоУходуЗаРебенкомВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ВосстановлениеВДолжностиВоеннослужащегоПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВосстановлениеВДолжностиВоеннослужащегоПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВосстановлениеВДолжностиВоеннослужащегоПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ВосстановлениеВДолжностиВоеннослужащегоПрисоединенныеФайлы.Изменение.Организации
		|Справочник.СохраняемоеДенежноеДовольствиеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СохраняемоеДенежноеДовольствиеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СохраняемоеДенежноеДовольствиеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СохраняемоеДенежноеДовольствиеПрисоединенныеФайлы.Изменение.Организации
		|Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Чтение.Организации
		|Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ВозвратИзОтпускаПоУходуЗаРебенкомВоеннослужащего.Изменение.Организации
		|Документ.ВосстановлениеВДолжностиВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ВосстановлениеВДолжностиВоеннослужащего.Чтение.Организации
		|Документ.ВосстановлениеВДолжностиВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ВосстановлениеВДолжностиВоеннослужащего.Изменение.Организации
		|Документ.ЗачислениеВСпискиЧасти.Чтение.ГруппыФизическихЛиц
		|Документ.ЗачислениеВСпискиЧасти.Чтение.Организации
		|Документ.ЗачислениеВСпискиЧасти.Изменение.ГруппыФизическихЛиц
		|Документ.ЗачислениеВСпискиЧасти.Изменение.Организации
		|Документ.ЗачислениеВСпискиЧастиСписком.Чтение.ГруппыФизическихЛиц
		|Документ.ЗачислениеВСпискиЧастиСписком.Чтение.Организации
		|Документ.ЗачислениеВСпискиЧастиСписком.Изменение.ГруппыФизическихЛиц
		|Документ.ЗачислениеВСпискиЧастиСписком.Изменение.Организации
		|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего.Чтение.Организации
		|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенкомВоеннослужащего.Изменение.Организации
		|Документ.ИсключениеИзСписковЧасти.Чтение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзСписковЧасти.Чтение.Организации
		|Документ.ИсключениеИзСписковЧасти.Изменение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзСписковЧасти.Изменение.Организации
		|Документ.ИсключениеИзСписковЧастиСписком.Чтение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзСписковЧастиСписком.Чтение.Организации
		|Документ.ИсключениеИзСписковЧастиСписком.Изменение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзСписковЧастиСписком.Изменение.Организации
		|Документ.КадровыйПереводВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.КадровыйПереводВоеннослужащего.Чтение.Организации
		|Документ.КадровыйПереводВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.КадровыйПереводВоеннослужащего.Изменение.Организации
		|Документ.КадровыйПереводВоеннослужащегоСписком.Чтение.ГруппыФизическихЛиц
		|Документ.КадровыйПереводВоеннослужащегоСписком.Чтение.Организации
		|Документ.КадровыйПереводВоеннослужащегоСписком.Изменение.ГруппыФизическихЛиц
		|Документ.КадровыйПереводВоеннослужащегоСписком.Изменение.Организации
		|Документ.ОплатаСверхурочныхВоеннослужащим.Чтение.ГруппыФизическихЛиц
		|Документ.ОплатаСверхурочныхВоеннослужащим.Чтение.Организации
		|Документ.ОплатаСверхурочныхВоеннослужащим.Изменение.ГруппыФизическихЛиц
		|Документ.ОплатаСверхурочныхВоеннослужащим.Изменение.Организации
		|Документ.ОтпускВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ОтпускВоеннослужащего.Чтение.Организации
		|Документ.ОтпускВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ОтпускВоеннослужащего.Изменение.Организации
		|Документ.ОтпускаВоеннослужащих.Чтение.ГруппыФизическихЛиц
		|Документ.ОтпускаВоеннослужащих.Чтение.Организации
		|Документ.ОтпускаВоеннослужащих.Изменение.ГруппыФизическихЛиц
		|Документ.ОтпускаВоеннослужащих.Изменение.Организации
		|Документ.ОтпускПоБеременностиИРодамВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ОтпускПоБеременностиИРодамВоеннослужащего.Чтение.Организации
		|Документ.ОтпускПоБеременностиИРодамВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ОтпускПоБеременностиИРодамВоеннослужащего.Изменение.Организации
		|Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего.Чтение.ГруппыФизическихЛиц
		|Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего.Чтение.Организации
		|Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего.Изменение.ГруппыФизическихЛиц
		|Документ.ОтпускПоУходуЗаРебенкомВоеннослужащего.Изменение.Организации
		|Документ.СохраняемоеДенежноеДовольствие.Чтение.ГруппыФизическихЛиц
		|Документ.СохраняемоеДенежноеДовольствие.Чтение.Организации
		|Документ.СохраняемоеДенежноеДовольствие.Изменение.ГруппыФизическихЛиц
		|Документ.СохраняемоеДенежноеДовольствие.Изменение.Организации
		|ЖурналДокументов.КадровыеДокументыВоеннослужащих.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.КадровыеДокументыВоеннослужащих.Чтение.Организации
		|РегистрСведений.ДатыУдовлетворенияДенежнымДовольствием.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДатыУдовлетворенияДенежнымДовольствием.Чтение.Организации
		|РегистрСведений.СведенияОКонтрактахВоеннослужащих.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СведенияОКонтрактахВоеннослужащих.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремяВоеннослужащих.Чтение.Организации
		|РегистрСведений.ЗначенияПоказателейДоплатыЗаРаботуВНочноеВечернееВремяВоеннослужащих.Изменение.Организации
		|РегистрСведений.ПерерасчетДенежногоДовольствия.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПерерасчетДенежногоДовольствия.Чтение.Организации
		|РегистрСведений.ПерерасчетДенежногоДовольствия.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ПерерасчетДенежногоДовольствия.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		Описание = Описание + "
		|Документ.ПрисвоениеКлассногоЧинаРанга.Чтение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеКлассногоЧинаРанга.Чтение.Организации
		|Документ.ПрисвоениеКлассногоЧинаРанга.Изменение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеКлассногоЧинаРанга.Изменение.Организации
		|Документ.ПрисвоениеКлассногоЧинаРангаСписком.Чтение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеКлассногоЧинаРангаСписком.Чтение.Организации
		|Документ.ПрисвоениеКлассногоЧинаРангаСписком.Изменение.ГруппыФизическихЛиц
		|Документ.ПрисвоениеКлассногоЧинаРангаСписком.Изменение.Организации
		|Справочник.ПрисвоениеКлассногоЧинаРангаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеКлассногоЧинаРангаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПрисвоениеКлассногоЧинаРангаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеКлассногоЧинаРангаПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ПрисвоениеКлассногоЧинаРангаСпискомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеКлассногоЧинаРангаСпискомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПрисвоениеКлассногоЧинаРангаСпискомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПрисвоениеКлассногоЧинаРангаСпискомПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.КлассныеЧиныРангиФизическихЛиц.Чтение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания") Тогда
		Описание = Описание + "
		|РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания.Чтение.Организации
		|РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.СведенияОНачисленияхДляРасчетаСохраняемогоДенежногоСодержания.Изменение.Организации
		|РегистрНакопления.СоставСохраняемогоДенежногоСодержания.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.СоставСохраняемогоДенежногоСодержания.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба.РасчетДенежногоСодержания
	
	// ЗарплатаКадрыПриложения.Дивиденды
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		Описание = Описание + "
		|Документ.ДивидендыФизическимЛицам.Чтение.ГруппыФизическихЛиц
		|Документ.ДивидендыФизическимЛицам.Чтение.Организации
		|Документ.ДивидендыФизическимЛицам.Изменение.ГруппыФизическихЛиц
		|Документ.ДивидендыФизическимЛицам.Изменение.Организации
		|Справочник.ДивидендыФизическимЛицамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ДивидендыФизическимЛицамПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДивидендыФизическимЛицамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ДивидендыФизическимЛицамПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Дивиденды
	
	// ЗарплатаКадрыПриложения.КадровыйРезерв
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Описание = Описание + "
		|ЖурналДокументов.ДокументыКадровогоРезерва.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.ДокументыКадровогоРезерва.Чтение.Организации
		|ЖурналДокументов.ДокументыКадровогоРезерва.Чтение.Подразделения
		|Документ.ВключениеВКадровыйРезерв.Чтение.ГруппыФизическихЛиц
		|Документ.ВключениеВКадровыйРезерв.Изменение.ГруппыФизическихЛиц
		|Документ.ВключениеВКадровыйРезерв.Чтение.Подразделения
		|Документ.ВключениеВКадровыйРезерв.Изменение.Подразделения
		|Документ.ВключениеВКадровыйРезерв.Чтение.Организации
		|Документ.ВключениеВКадровыйРезерв.Изменение.Организации
		|Справочник.КадровыйРезерв.Чтение.Подразделения
		|Справочник.КадровыйРезерв.Изменение.Подразделения
		|Справочник.КадровыйРезерв.Чтение.Организации
		|Справочник.КадровыйРезерв.Изменение.Организации
		|РегистрСведений.ИсторияКадровогоРезерва.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ИсторияКадровогоРезерва.Чтение.Организации
		|РегистрСведений.ИсторияКадровогоРезерва.Чтение.Подразделения
		|РегистрСведений.КадровыйРезерв.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.КадровыйРезерв.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.КадровыйРезерв.Чтение.Организации
		|РегистрСведений.КадровыйРезерв.Чтение.Подразделения
		|РегистрСведений.КадровыйРезерв.Изменение.Организации
		|РегистрСведений.КадровыйРезерв.Изменение.Подразделения
		|РегистрСведений.СтатусыГотовностиРезервистов.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.КлючевыеДолжностиКадровогоРезерва.Чтение.Подразделения
		|РегистрСведений.КлючевыеДолжностиКадровогоРезерва.Изменение.Подразделения
		|Справочник.ВключениеВКадровыйРезервПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВключениеВКадровыйРезервПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Чтение.Подразделения
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Изменение.Подразделения
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Чтение.Организации
		|Документ.ЗаявкаНаВключениеВКадровыйРезерв.Изменение.Организации
		|Справочник.ЗаявкаНаВключениеВКадровыйРезервПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаВключениеВКадровыйРезервПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзКадровогоРезерва.Чтение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзКадровогоРезерва.Изменение.ГруппыФизическихЛиц
		|Документ.ИсключениеИзКадровогоРезерва.Чтение.Подразделения
		|Документ.ИсключениеИзКадровогоРезерва.Изменение.Подразделения
		|Документ.ИсключениеИзКадровогоРезерва.Чтение.Организации
		|Документ.ИсключениеИзКадровогоРезерва.Изменение.Организации
		|Справочник.ИсключениеИзКадровогоРезерваПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИсключениеИзКадровогоРезерваПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Чтение.ГруппыФизическихЛиц
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Чтение.Подразделения
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Изменение.ГруппыФизическихЛиц
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Изменение.Подразделения
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Чтение.Организации
		|Документ.ИзменениеСтатусаГотовностиРезервистов.Изменение.Организации
		|Справочник.ИзменениеСтатусаГотовностиРезервистовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИзменениеСтатусаГотовностиРезервистовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КадровыйРезерв
	
	// ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная") Тогда
		Описание = Описание + "
		|Справочник.ОрганизацииПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОрганизацииПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная
	
	// ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам") Тогда
		Описание = Описание + "
		|Справочник.ДопускКНаркотическимВеществамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ДопускКНаркотическимВеществамПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДопускКНаркотическимВеществамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ДопускКНаркотическимВеществамПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ЗапросВФСКНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗапросВФСКНПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗапросВФСКНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗапросВФСКНПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ОтветФСКНПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтветФСКНПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтветФСКНПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтветФСКНПрисоединенныеФайлы.Изменение.Организации
		|Документ.ДопускКНаркотическимВеществам.Чтение.ГруппыФизическихЛиц
		|Документ.ДопускКНаркотическимВеществам.Чтение.Организации
		|Документ.ДопускКНаркотическимВеществам.Изменение.ГруппыФизическихЛиц
		|Документ.ДопускКНаркотическимВеществам.Изменение.Организации
		|Документ.ЗапросВФСКН.Чтение.ГруппыФизическихЛиц
		|Документ.ЗапросВФСКН.Чтение.Организации
		|Документ.ЗапросВФСКН.Изменение.ГруппыФизическихЛиц
		|Документ.ЗапросВФСКН.Изменение.Организации
		|Документ.ОтветФСКН.Чтение.ГруппыФизическихЛиц
		|Документ.ОтветФСКН.Чтение.Организации
		|Документ.ОтветФСКН.Изменение.ГруппыФизическихЛиц
		|Документ.ОтветФСКН.Изменение.Организации
		|ЖурналДокументов.ДокументыДоступаКНаркотическимСредствам.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.ДокументыДоступаКНаркотическимСредствам.Чтение.Организации
		|РегистрСведений.ДопускиСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДопускиСотрудников.Чтение.Организации
		|РегистрСведений.СостоянияЗапросовВФСКН.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.СостоянияЗапросовВФСКН.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Медицина.ДоступКНаркотическимСредствам
	
	// ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников") Тогда
		Описание = Описание + "
		|Справочник.СведенияОРаботникахДляМедРегистраПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СведенияОРаботникахДляМедРегистраПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияОРаботникахДляМедРегистраПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СведенияОРаботникахДляМедРегистраПрисоединенныеФайлы.Изменение.Организации
		|Справочник.СведенияОШтатномРасписанииДляМедРегистраПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияОШтатномРасписанииДляМедРегистраПрисоединенныеФайлы.Изменение.Организации
		|Справочник.СведенияДляФРМОПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияДляФРМОПрисоединенныеФайлы.Изменение.Организации
		|Справочник.СведенияДляФРМРПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СведенияДляФРМРПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияДляФРМРПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СведенияДляФРМРПрисоединенныеФайлы.Изменение.Организации
		|Документ.СведенияОРаботникахДляМедРегистра.Чтение.ГруппыФизическихЛиц
		|Документ.СведенияОРаботникахДляМедРегистра.Чтение.Организации
		|Документ.СведенияОРаботникахДляМедРегистра.Изменение.ГруппыФизическихЛиц
		|Документ.СведенияОРаботникахДляМедРегистра.Изменение.Организации
		|Документ.СведенияОШтатномРасписанииДляМедРегистра.Чтение.Организации
		|Документ.СведенияОШтатномРасписанииДляМедРегистра.Изменение.Организации
		|Документ.СведенияДляФРМО.Чтение.Организации
		|Документ.СведенияДляФРМО.Изменение.Организации
		|Документ.СведенияДляФРМР.Чтение.ГруппыФизическихЛиц
		|Документ.СведенияДляФРМР.Чтение.Организации
		|Документ.СведенияДляФРМР.Изменение.ГруппыФизическихЛиц
		|Документ.СведенияДляФРМР.Изменение.Организации
		|ЖурналДокументов.СведенияДляФедеральногоРегистраМедицинскихРаботников.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.СведенияДляФедеральногоРегистраМедицинскихРаботников.Чтение.Организации
		|РегистрСведений.СведенияОбОрганизацииДляМедРегистра.Чтение.Организации
		|РегистрСведений.СведенияОбОрганизацииДляМедРегистра.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Медицина.ФедеральныйРегистрМедицинскихРаботников
	
	// ЗарплатаКадрыПриложения.ОбразовательныеУчреждения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Описание = Описание + "
		|Документ.РаспределениеНагрузки.Чтение.ГруппыФизическихЛиц
		|Документ.РаспределениеНагрузки.Чтение.Организации
		|Документ.РаспределениеНагрузки.Изменение.ГруппыФизическихЛиц
		|Документ.РаспределениеНагрузки.Изменение.Организации
		|Справочник.РаспределениеНагрузкиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РаспределениеНагрузкиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РаспределениеНагрузкиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РаспределениеНагрузкиПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОбразовательныеУчреждения
	
	// ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
		Описание = Описание + "
		|Справочник.СтруктураПредприятия.Чтение.Подразделения
		|Справочник.СтруктураПредприятия.Изменение.Подразделения";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура
	
	// ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		Описание = Описание + "
		|Документ.ОтражениеЗарплатыВФинансовомУчете.Чтение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВФинансовомУчете.Чтение.Организации
		|Документ.ОтражениеЗарплатыВФинансовомУчете.Изменение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВФинансовомУчете.Изменение.Организации
		|Справочник.ОтражениеЗарплатыВФинансовомУчетеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВФинансовомУчетеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтражениеЗарплатыВФинансовомУчетеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВФинансовомУчетеПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете
	
	// ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		Описание = Описание + "
		|Документ.ПлановоеНачислениеПрочихДоходов.Чтение.ГруппыФизическихЛиц
		|Документ.ПлановоеНачислениеПрочихДоходов.Чтение.Организации
		|Документ.ПлановоеНачислениеПрочихДоходов.Изменение.ГруппыФизическихЛиц
		|Документ.ПлановоеНачислениеПрочихДоходов.Изменение.Организации
		|Справочник.ПлановоеНачислениеПрочихДоходовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПлановоеНачислениеПрочихДоходовПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПлановоеНачислениеПрочихДоходовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПлановоеНачислениеПрочихДоходовПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ПлановыеПрочиеДоходы.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПлановыеПрочиеДоходы.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы
	
	// ЗарплатаКадрыПриложения.Подработки
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Описание = Описание + "
		|Документ.НазначениеПодработки.Чтение.ГруппыФизическихЛиц
		|Документ.НазначениеПодработки.Чтение.Организации
		|Документ.НазначениеПодработки.Изменение.ГруппыФизическихЛиц
		|Документ.НазначениеПодработки.Изменение.Организации
		|Справочник.НазначениеПодработкиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НазначениеПодработкиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НазначениеПодработкиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НазначениеПодработкиПрисоединенныеФайлы.Изменение.Организации
		|Документ.ПрекращениеПодработки.Чтение.ГруппыФизическихЛиц
		|Документ.ПрекращениеПодработки.Чтение.Организации
		|Документ.ПрекращениеПодработки.Изменение.ГруппыФизическихЛиц
		|Документ.ПрекращениеПодработки.Изменение.Организации
		|Справочник.ПрекращениеПодработкиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПрекращениеПодработкиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПрекращениеПодработкиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПрекращениеПодработкиПрисоединенныеФайлы.Изменение.Организации
		|ЖурналДокументов.Подработки.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.Подработки.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.Подработки
	
	// ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		Описание = Описание + "
		|Документ.НазначениеРабочихМестСотрудникам.Чтение.ГруппыФизическихЛиц
		|Документ.НазначениеРабочихМестСотрудникам.Чтение.Организации
		|Документ.НазначениеРабочихМестСотрудникам.Изменение.ГруппыФизическихЛиц
		|Документ.НазначениеРабочихМестСотрудникам.Изменение.Организации
		|Справочник.НазначениеРабочихМестСотрудникамПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НазначениеРабочихМестСотрудникамПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НазначениеРабочихМестСотрудникамПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НазначениеРабочихМестСотрудникамПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РабочиеМестаОхраныТруда.Чтение.ПодразделенияОрганизаций
		|Справочник.РабочиеМестаОхраныТруда.Чтение.Организации
		|Справочник.РабочиеМестаОхраныТруда.Изменение.ПодразделенияОрганизаций
		|Справочник.РабочиеМестаОхраныТруда.Изменение.Организации
		|РегистрСведений.РабочиеМестаСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.РабочиеМестаСотрудников.Чтение.Организации
		|РегистрСведений.РабочиеМестаСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.РабочиеМестаСотрудниковИнтервальный.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	
	// ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах") Тогда
		Описание = Описание + "
		|РегистрСведений.СведенияОбОтветственныхЛицах.Чтение.Организации
		|РегистрСведений.СведенияОбОтветственныхЛицах.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.СведенияОбОтветственныхЛицах
	
	// ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Описание = Описание + "
		|Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.Чтение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.Чтение.Организации
		|Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.Изменение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучетеБюджетныхУчреждений.Изменение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеБюджетныхУчрежденийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеБюджетныхУчрежденийПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеБюджетныхУчрежденийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеБюджетныхУчрежденийПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений
	
	// ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		Описание = Описание + "
		|Документ.ОтражениеЗарплатыВБухучете.Чтение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучете.Чтение.Организации
		|Документ.ОтражениеЗарплатыВБухучете.Изменение.ГруппыФизическихЛиц
		|Документ.ОтражениеЗарплатыВБухучете.Изменение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтражениеЗарплатыВБухучетеПрисоединенныеФайлы.Изменение.Организации
		|Документ.ОтражениеСтатистикиПерсоналаВБухучете.Чтение.Организации
		|Документ.ОтражениеСтатистикиПерсоналаВБухучете.Изменение.Организации
		|Справочник.ОтражениеСтатистикиПерсоналаВБухучетеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ОтражениеСтатистикиПерсоналаВБухучетеПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц") Тогда
		Описание = Описание + "
		|РегистрСведений.СтажиФизическихЛицКПересчету.Чтение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АвтоматическийРасчетСтажейФизическихЛиц
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		Описание = Описание + "
		|Справочник.РешенияПоКадровымИзменениямПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешенияПоКадровымИзменениямПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешенияПоКадровымИзменениямПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешенияПоКадровымИзменениямПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОбОтпускеПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОбОтпускеПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОбОтпускеПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОбОтпускеПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОПриемеНаРаботуПрисоединенныеФайлы.Чтение.ГруппыКандидатов
		|Справочник.РешениеОПриемеНаРаботуПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОПриемеНаРаботуПрисоединенныеФайлы.Изменение.ГруппыКандидатов
		|Справочник.РешениеОПриемеНаРаботуПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОВосстановленииВДолжностиПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОВосстановленииВДолжностиПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОВосстановленииВДолжностиПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОВосстановленииВДолжностиПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОВозвратеИзОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОВозвратеИзОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОВозвратеИзОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОВозвратеИзОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОКадровомПереводеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОКадровомПереводеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОКадровомПереводеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОКадровомПереводеПрисоединенныеФайлы.Изменение.Организации
		|Справочник.РешениеОбУвольненииПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОбУвольненииПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РешениеОбУвольненииПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОбУвольненииПрисоединенныеФайлы.Изменение.Организации
		|Документ.РешениеОбОтпускеПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОбОтпускеПоУходуЗаРебенком.Чтение.Организации
		|Документ.РешениеОбОтпускеПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОбОтпускеПоУходуЗаРебенком.Изменение.Организации
		|Документ.РешениеОбУвольнении.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОбУвольнении.Чтение.Организации
		|Документ.РешениеОбУвольнении.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОбУвольнении.Изменение.Организации
		|Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком.Чтение.Организации
		|Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОВозвратеИзОтпускаПоУходуЗаРебенком.Изменение.Организации
		|Документ.РешениеОВосстановленииВДолжности.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОВосстановленииВДолжности.Чтение.Организации
		|Документ.РешениеОВосстановленииВДолжности.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОВосстановленииВДолжности.Изменение.Организации
		|Документ.РешениеОКадровомПереводе.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОКадровомПереводе.Чтение.Организации
		|Документ.РешениеОКадровомПереводе.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОКадровомПереводе.Изменение.Организации
		|Документ.РешениеОПриемеНаРаботу.Чтение.ГруппыКандидатов
		|Документ.РешениеОПриемеНаРаботу.Чтение.Организации
		|Документ.РешениеОПриемеНаРаботу.Изменение.ГруппыКандидатов
		|Документ.РешениеОПриемеНаРаботу.Изменение.Организации
		|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.ЗаданиеАдаптацииУвольнения
		|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.ЗаданиеАдаптацииУвольнения";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		Описание = Описание + "
		|РегистрСведений.ПричиныУвольненияСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПричиныУвольненияСотрудников.Чтение.Организации
		|РегистрСведений.ПричиныУвольненияСотрудников.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ПричиныУвольненияСотрудников.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц") Тогда
		Описание = Описание + "
		|РегистрСведений.АрхивФизическихЛиц.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.АрхивФизическихЛиц.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.АрхивФизическихЛицДокументыУдостоверяющиеЛичность.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.АрхивФизическихЛицКонтактнаяИнформация.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.АрхивФизическихЛицКонтактнаяИнформация.Изменение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.АрхивФизическихЛиц
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		Описание = Описание + "
		|РегистрСведений.КомандировкиВСистемеБронирования.Чтение.Организации
		|РегистрСведений.КомандировкиВСистемеБронирования.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		Описание = Описание + "
		|Документ.СписокПолучателейГранта.Чтение.ГруппыФизическихЛиц
		|Документ.СписокПолучателейГранта.Чтение.Организации
		|Документ.СписокПолучателейГранта.Изменение.ГруппыФизическихЛиц
		|Документ.СписокПолучателейГранта.Изменение.Организации
		|Справочник.СписокПолучателейГрантаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СписокПолучателейГрантаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СписокПолучателейГрантаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СписокПолучателейГрантаПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Описание = Описание + "
		|Документ.ЗавершениеИспытательногоСрока.Чтение.ГруппыФизическихЛиц
		|Документ.ЗавершениеИспытательногоСрока.Чтение.Организации
		|Документ.ЗавершениеИспытательногоСрока.Изменение.ГруппыФизическихЛиц
		|Документ.ЗавершениеИспытательногоСрока.Изменение.Организации
		|Справочник.ЗавершениеИспытательногоСрокаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗавершениеИспытательногоСрокаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗавершениеИспытательногоСрокаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗавершениеИспытательногоСрокаПрисоединенныеФайлы.Изменение.Организации		
		|Документ.ПродлениеИспытательногоСрока.Чтение.ГруппыФизическихЛиц
		|Документ.ПродлениеИспытательногоСрока.Чтение.Организации
		|Документ.ПродлениеИспытательногоСрока.Изменение.ГруппыФизическихЛиц
		|Документ.ПродлениеИспытательногоСрока.Изменение.Организации
		|Справочник.ПродлениеИспытательногоСрокаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПродлениеИспытательногоСрокаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПродлениеИспытательногоСрокаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПродлениеИспытательногоСрокаПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ДанныеИспытательногоСрокаСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДанныеИспытательногоСрокаСотрудников.Чтение.Организации
		|РегистрСведений.ИспытательныйСрокСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ИспытательныйСрокСотрудников.Чтение.Организации
		|РегистрСведений.ИспытательныйСрокСотрудников.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ИспытательныйСрокСотрудников.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		Описание = Описание + "
		|Документ.КадровыйПлан.Чтение.Подразделения
		|Документ.КадровыйПлан.Изменение.Подразделения
		|Справочник.КадровыйПланПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.КадровыйПланПрисоединенныеФайлы.Изменение.Подразделения
		|Справочник.ПозицииКадровогоПлана.Чтение.Подразделения
		|Справочник.ПозицииКадровогоПлана.Изменение.Подразделения
		|РегистрНакопления.ПоказателиКадровогоПлана.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ПоказателиКадровогоПлана.Чтение.Подразделения";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование
	
	// ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота") Тогда
		Описание = Описание + "
		|РегистрСведений.ДистанционнаяРаботаСотрудников.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДистанционнаяРаботаСотрудников.Чтение.Организации
		|РегистрСведений.ДистанционнаяРаботаСотрудниковИнтервальный.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДистанционнаяРаботаСотрудниковИнтервальный.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КадровыйУчет.ДистанционнаяРабота
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Описание = Описание + "
		|Документ.НазначениеПоказателейЭффективности.Чтение.Подразделения
		|Документ.НазначениеПоказателейЭффективности.Изменение.Подразделения
		|Справочник.НазначениеПоказателейЭффективностиПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.НазначениеПоказателейЭффективностиПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ПланПоказателейЭффективностиПодразделения.Чтение.Подразделения
		|Документ.ПланПоказателейЭффективностиПодразделения.Изменение.Подразделения
		|Справочник.ПланПоказателейЭффективностиПодразделенияПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПланПоказателейЭффективностиПодразделенияПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ПланПоказателейЭффективностиПозиции.Чтение.Подразделения
		|Документ.ПланПоказателейЭффективностиПозиции.Изменение.Подразделения
		|Справочник.ПланПоказателейЭффективностиПозицииПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПланПоказателейЭффективностиПозицииПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ПланПоказателейЭффективностиСотрудника.Чтение.ГруппыФизическихЛиц
		|Документ.ПланПоказателейЭффективностиСотрудника.Изменение.ГруппыФизическихЛиц
		|Документ.ПланПоказателейЭффективностиСотрудника.Чтение.Подразделения
		|Документ.ПланПоказателейЭффективностиСотрудника.Изменение.Подразделения
		|Справочник.ПланПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПланПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПланПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПланПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ПланПоказателяЭффективностиПодразделений.Чтение.Подразделения
		|Документ.ПланПоказателяЭффективностиПодразделений.Изменение.Подразделения
		|Справочник.ПланПоказателяЭффективностиПодразделенийПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПланПоказателяЭффективностиПодразделенийПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ПланПоказателяЭффективностиПозиций.Чтение.Подразделения
		|Документ.ПланПоказателяЭффективностиПозиций.Изменение.Подразделения
		|Справочник.ПланПоказателяЭффективностиПозицийПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПланПоказателяЭффективностиПозицийПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ФактПоказателейЭффективностиПодразделения.Чтение.Подразделения
		|Документ.ФактПоказателейЭффективностиПодразделения.Изменение.Подразделения
		|Справочник.ФактПоказателейЭффективностиПодразделенияПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ФактПоказателейЭффективностиПодразделенияПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ФактПоказателейЭффективностиСотрудника.Чтение.Подразделения
		|Документ.ФактПоказателейЭффективностиСотрудника.Изменение.Подразделения
		|Документ.ФактПоказателейЭффективностиСотрудника.Чтение.ГруппыФизическихЛиц
		|Документ.ФактПоказателейЭффективностиСотрудника.Изменение.ГруппыФизическихЛиц
		|Справочник.ФактПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ФактПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ФактПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ФактПоказателейЭффективностиСотрудникаПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ФактПоказателяЭффективностиПодразделений.Чтение.Подразделения
		|Документ.ФактПоказателяЭффективностиПодразделений.Изменение.Подразделения
		|Справочник.ФактПоказателяЭффективностиПодразделенийПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ФактПоказателяЭффективностиПодразделенийПрисоединенныеФайлы.Изменение.Подразделения
		|Документ.ФактПоказателяЭффективностиСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.ФактПоказателяЭффективностиСотрудников.Изменение.ГруппыФизическихЛиц
		|Справочник.ФактПоказателяЭффективностиСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ФактПоказателяЭффективностиСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|ЖурналДокументов.ПланПоказателейЭффективности.Чтение.Объект.Документ.ПланПоказателейЭффективностиПодразделения
		|ЖурналДокументов.ПланПоказателейЭффективности.Чтение.Объект.Документ.ПланПоказателейЭффективностиПозиции
		|ЖурналДокументов.ПланПоказателейЭффективности.Чтение.Объект.Документ.ПланПоказателейЭффективностиСотрудника
		|ЖурналДокументов.ПланПоказателейЭффективности.Чтение.Объект.Документ.ПланПоказателяЭффективностиПодразделений
		|ЖурналДокументов.ПланПоказателейЭффективности.Чтение.Объект.Документ.ПланПоказателяЭффективностиПозиций
		|ЖурналДокументов.ФактПоказателейЭффективности.Чтение.Объект.Документ.ФактПоказателейЭффективностиПодразделения
		|ЖурналДокументов.ФактПоказателейЭффективности.Чтение.Объект.Документ.ФактПоказателейЭффективностиСотрудника
		|ЖурналДокументов.ФактПоказателейЭффективности.Чтение.Объект.Документ.ФактПоказателяЭффективностиПодразделений
		|ЖурналДокументов.ФактПоказателейЭффективности.Чтение.Объект.Документ.ФактПоказателяЭффективностиСотрудников";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Описание = Описание + "
		|Документ.ИзменениеЛьготСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.ИзменениеЛьготСотрудников.Чтение.Организации
		|Документ.ИзменениеЛьготСотрудников.Изменение.ГруппыФизическихЛиц
		|Документ.ИзменениеЛьготСотрудников.Изменение.Организации
		|Справочник.ИзменениеЛьготСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИзменениеЛьготСотрудниковПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИзменениеЛьготСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИзменениеЛьготСотрудниковПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ПерерасчетЛьгот.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПерерасчетЛьгот.Чтение.Организации
		|РегистрСведений.ПерерасчетЛьгот.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ПерерасчетЛьгот.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахование = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		МодульМедицинскоеСтрахование.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Описание = Описание + "
		|Справочник.ИндивидуальныйПланРазвития.Чтение.ГруппыФизическихЛиц
		|Справочник.ИндивидуальныйПланРазвития.Изменение.ГруппыФизическихЛиц
		|Справочник.УченическийДоговорПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.УченическийДоговорПрисоединенныеФайлы.Чтение.Организации
		|Справочник.УченическийДоговорПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.УченическийДоговорПрисоединенныеФайлы.Изменение.Организации
		|Документ.ЗаявкаНаВключениеВПланОбучения.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаВключениеВПланОбучения.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаВключениеВПланОбученияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаВключениеВПланОбученияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаОбучениеРазвитие.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаОбучениеРазвитие.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаОбучениеРазвитиеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаОбучениеРазвитиеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ОбучениеРазвитиеСотрудников.Чтение.ГруппыФизическихЛиц
		|Документ.ОбучениеРазвитиеСотрудников.Изменение.ГруппыФизическихЛиц
		|Справочник.ОбучениеРазвитиеСотрудниковПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОбучениеРазвитиеСотрудниковПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ПланОбученияРазвития.Чтение.ГруппыФизическихЛиц
		|Документ.ПланОбученияРазвития.Изменение.ГруппыФизическихЛиц
		|Справочник.ПланОбученияРазвитияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПланОбученияРазвитияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.УченическийДоговор.Чтение.ГруппыФизическихЛиц
		|Документ.УченическийДоговор.Чтение.Организации
		|Документ.УченическийДоговор.Изменение.ГруппыФизическихЛиц
		|Документ.УченическийДоговор.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Описание = Описание + "
		|РегистрСведений.ПлановыеДатыСпециальнойОценкиУсловийТруда.Чтение.Организации
		|РегистрСведений.НастройкиОхраныТруда.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи") Тогда
		Описание = Описание + "
		|Документ.ИнструктажПоОхранеТруда.Чтение.ГруппыФизическихЛиц
		|Документ.ИнструктажПоОхранеТруда.Чтение.Организации
		|Документ.ИнструктажПоОхранеТруда.Изменение.ГруппыФизическихЛиц
		|Документ.ИнструктажПоОхранеТруда.Изменение.Организации
		|Справочник.ИнструктажПоОхранеТрудаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ИнструктажПоОхранеТрудаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ИнструктажПоОхранеТрудаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ИнструктажПоОхранеТрудаПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ИнструктажиПоОхранеТруда.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		Описание = Описание + "
		|Справочник.ЗаключениеМедицинскогоОсмотраПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаключениеМедицинскогоОсмотраПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗаключениеМедицинскогоОсмотраПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаключениеМедицинскогоОсмотраПрисоединенныеФайлы.Изменение.Организации
		|Документ.ЗаключениеМедицинскогоОсмотра.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаключениеМедицинскогоОсмотра.Чтение.Организации
		|Документ.ЗаключениеМедицинскогоОсмотра.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаключениеМедицинскогоОсмотра.Изменение.Организации
		|Документ.НаправлениеНаМедицинскийОсмотр.Чтение.ГруппыФизическихЛиц
		|Документ.НаправлениеНаМедицинскийОсмотр.Чтение.Организации
		|Документ.НаправлениеНаМедицинскийОсмотр.Изменение.ГруппыФизическихЛиц
		|Документ.НаправлениеНаМедицинскийОсмотр.Изменение.Организации
		|Справочник.НаправлениеНаМедицинскийОсмотрПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НаправлениеНаМедицинскийОсмотрПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НаправлениеНаМедицинскийОсмотрПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НаправлениеНаМедицинскийОсмотрПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ВидыРаботМедицинскихОсмотровРабочегоМеста.Чтение.Организации
		|РегистрСведений.ВидыРаботМедицинскихОсмотровРабочегоМеста.Чтение.ПодразделенияОрганизаций
		|РегистрСведений.ВидыРаботМедицинскихОсмотровРабочегоМеста.Изменение.Организации
		|РегистрСведений.ВидыРаботМедицинскихОсмотровРабочегоМеста.Изменение.ПодразделенияОрганизаций
		|РегистрСведений.ВредныеФакторыРабочегоМеста.Чтение.Организации
		|РегистрСведений.ВредныеФакторыРабочегоМеста.Чтение.ПодразделенияОрганизаций
		|РегистрСведений.ВредныеФакторыРабочегоМеста.Изменение.Организации
		|РегистрСведений.ВредныеФакторыРабочегоМеста.Изменение.ПодразделенияОрганизаций
		|РегистрСведений.ВредныеФакторыИВидыРаботРабочегоМеста.Чтение.Организации
		|РегистрСведений.ВредныеФакторыИВидыРаботРабочегоМеста.Чтение.ПодразделенияОрганизаций
		|РегистрСведений.ВредныеФакторыИВидыРаботРабочегоМеста.Изменение.Организации
		|РегистрСведений.ВредныеФакторыИВидыРаботРабочегоМеста.Изменение.ПодразделенияОрганизаций
		|РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.Чтение.Организации
		|РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ВыданныеНаправленияНаМедицинскийОсмотр.Изменение.Организации
		|РегистрСведений.МедицинскиеОсмотры.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.МедицинскиеОсмотры.Чтение.Организации
		|РегистрСведений.МедицинскиеОсмотрыПоВидамРабот.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.МедицинскиеОсмотрыПоВидамРабот.Чтение.Организации
		|РегистрСведений.МедицинскиеОсмотрыПоВреднымФакторам.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.МедицинскиеОсмотрыПоВреднымФакторам.Чтение.Организации
		|РегистрСведений.ОтстранениеОтРаботыПоРезультатамМедицинскогоОсмотра.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ОтстранениеОтРаботыПоРезультатамМедицинскогоОсмотра.Чтение.Организации
		|РегистрСведений.ПериодическиеМедицинскиеОсмотры.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ПериодическиеМедицинскиеОсмотры.Чтение.Организации
		|РегистрСведений.ПериодичностьМедицинскихОсмотровРабочихМест.Чтение.Организации
		|РегистрСведений.ПериодичностьМедицинскихОсмотровРабочихМест.Чтение.ПодразделенияОрганизаций";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи") Тогда
		Описание = Описание + "
		|Справочник.НесчастныйСлучайНаПроизводствеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.НесчастныйСлучайНаПроизводствеПрисоединенныеФайлы.Чтение.Организации
		|Справочник.НесчастныйСлучайНаПроизводствеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.НесчастныйСлучайНаПроизводствеПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ПротоколОпросаУчастникаНесчастногоСлучаяПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПротоколОпросаУчастникаНесчастногоСлучаяПрисоединенныеФайлы.Изменение.Организации
		|Документ.НесчастныйСлучайНаПроизводстве.Чтение.ГруппыФизическихЛиц
		|Документ.НесчастныйСлучайНаПроизводстве.Чтение.Организации
		|Документ.НесчастныйСлучайНаПроизводстве.Изменение.ГруппыФизическихЛиц
		|Документ.НесчастныйСлучайНаПроизводстве.Изменение.Организации
		|Документ.ПоследствияНесчастногоСлучая.Чтение.ГруппыФизическихЛиц
		|Документ.ПоследствияНесчастногоСлучая.Чтение.Организации
		|Документ.ПоследствияНесчастногоСлучая.Изменение.ГруппыФизическихЛиц
		|Документ.ПоследствияНесчастногоСлучая.Изменение.Организации
		|Документ.ПротоколОпросаУчастникаНесчастногоСлучая.Чтение.Организации
		|Документ.ПротоколОпросаУчастникаНесчастногоСлучая.Изменение.Организации
		|Справочник.ПоследствияНесчастногоСлучаяПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПоследствияНесчастногоСлучаяПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПоследствияНесчастногоСлучаяПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПоследствияНесчастногоСлучаяПрисоединенныеФайлы.Изменение.Организации
		|ЖурналДокументов.НесчастныеСлучаи.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда") Тогда
		Описание = Описание + "
		|Документ.ДекларацияСоответствияУсловийТруда.Чтение.Организации
		|Документ.ДекларацияСоответствияУсловийТруда.Изменение.Организации
		|Справочник.ДекларацияСоответствияУсловийТрудаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ДекларацияСоответствияУсловийТрудаПрисоединенныеФайлы.Изменение.Организации
		|Документ.ПодготовкаСпецоценкиУсловийТруда.Чтение.ГруппыФизическихЛиц
		|Документ.ПодготовкаСпецоценкиУсловийТруда.Чтение.Организации
		|Документ.ПодготовкаСпецоценкиУсловийТруда.Изменение.ГруппыФизическихЛиц
		|Документ.ПодготовкаСпецоценкиУсловийТруда.Изменение.Организации
		|Справочник.ПодготовкаСпецоценкиУсловийТрудаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПодготовкаСпецоценкиУсловийТрудаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПодготовкаСпецоценкиУсловийТрудаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПодготовкаСпецоценкиУсловийТрудаПрисоединенныеФайлы.Изменение.Организации
		|Документ.РезультатыСпецоценкиУсловийТруда.Чтение.Организации
		|Документ.РезультатыСпецоценкиУсловийТруда.Изменение.Организации
		|Справочник.РезультатыСпецоценкиУсловийТрудаПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РезультатыСпецоценкиУсловийТрудаПрисоединенныеФайлы.Изменение.Организации
		|ЖурналДокументов.СпецоценкаУсловийТруда.Чтение.Организации
		|РегистрСведений.АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.Чтение.Организации
		|РегистрСведений.АналогичныеРабочиеМестаСпециальнойОценкиУсловийТруда.Изменение.Организации
		|РегистрСведений.РезультатыСпециальнойОценкиУсловийТруда.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		Описание = Описание + "
		|Документ.ВводНачальныхОстатковВыданныхСИЗ.Чтение.ГруппыФизическихЛиц
		|Документ.ВводНачальныхОстатковВыданныхСИЗ.Чтение.Организации
		|Документ.ВводНачальныхОстатковВыданныхСИЗ.Изменение.ГруппыФизическихЛиц
		|Документ.ВводНачальныхОстатковВыданныхСИЗ.Изменение.Организации
		|Документ.ВыдачаСИЗ.Чтение.ГруппыФизическихЛиц
		|Документ.ВыдачаСИЗ.Чтение.Организации
		|Документ.ВыдачаСИЗ.Изменение.ГруппыФизическихЛиц
		|Документ.ВыдачаСИЗ.Изменение.Организации
		|Документ.ЗаказНаВыдачуСИЗ.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаказНаВыдачуСИЗ.Чтение.Организации
		|Документ.ЗаказНаВыдачуСИЗ.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаказНаВыдачуСИЗ.Изменение.Организации
		|Документ.ПродлениеСроковНоскиСИЗ.Чтение.ГруппыФизическихЛиц
		|Документ.ПродлениеСроковНоскиСИЗ.Чтение.Организации
		|Документ.ПродлениеСроковНоскиСИЗ.Изменение.ГруппыФизическихЛиц
		|Документ.ПродлениеСроковНоскиСИЗ.Изменение.Организации
		|Документ.СписаниеСИЗИзЭксплуатации.Чтение.ГруппыФизическихЛиц
		|Документ.СписаниеСИЗИзЭксплуатации.Чтение.Организации
		|Документ.СписаниеСИЗИзЭксплуатации.Изменение.ГруппыФизическихЛиц
		|Документ.СписаниеСИЗИзЭксплуатации.Изменение.Организации
		|РегистрНакопления.ВыданныеСИЗ.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.ВыданныеСИЗ.Чтение.Организации
		|РегистрНакопления.СформированныеЗаказыНаВыдачуСИЗ.Чтение.ГруппыФизическихЛиц
		|РегистрНакопления.СформированныеЗаказыНаВыдачуСИЗ.Чтение.Организации
		|РегистрСведений.АктуальныеЗаказыНаВыдачуСИЗ.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.АктуальныеЗаказыНаВыдачуСИЗ.Чтение.Организации
		|РегистрСведений.АктуальныеЗаказыНаВыдачуСИЗ.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.АктуальныеЗаказыНаВыдачуСИЗ.Изменение.Организации
		|РегистрСведений.АнтропометрияФизическихЛиц.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ВыдачиСИЗ.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ВыдачиСИЗ.Чтение.Организации
		|РегистрСведений.ВыдачиСИЗПоНоменклатуре.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ВыдачиСИЗПоНоменклатуре.Чтение.Организации
		|Справочник.ВводНачальныхОстатковВыданныхСИЗПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВводНачальныхОстатковВыданныхСИЗПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВводНачальныхОстатковВыданныхСИЗПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ВводНачальныхОстатковВыданныхСИЗПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ВыдачаСИЗПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ВыдачаСИЗПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ВыдачаСИЗПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ВыдачаСИЗПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ЗаказНаВыдачуСИЗПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаказНаВыдачуСИЗПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ЗаказНаВыдачуСИЗПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаказНаВыдачуСИЗПрисоединенныеФайлы.Изменение.Организации
		|Справочник.ПродлениеСроковНоскиСИЗПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПродлениеСроковНоскиСИЗПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПродлениеСроковНоскиСИЗПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПродлениеСроковНоскиСИЗПрисоединенныеФайлы.Изменение.Организации
		|Справочник.СписаниеСИЗИзЭксплуатацииПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СписаниеСИЗИзЭксплуатацииПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СписаниеСИЗИзЭксплуатацииПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СписаниеСИЗИзЭксплуатацииПрисоединенныеФайлы.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Описание = Описание + "
		|Справочник.Вакансии.Чтение.Подразделения
		|Справочник.Вакансии.Изменение.Подразделения
		|Справочник.ВакансииПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ВакансииПрисоединенныеФайлы.Изменение.Подразделения
		|Справочник.ПрофилиДолжностей.Чтение.Подразделения
		|Справочник.ПрофилиДолжностей.Изменение.Подразделения
		|Справочник.ПрофилиДолжностейПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ПрофилиДолжностейПрисоединенныеФайлы.Изменение.Подразделения
		|Справочник.Кандидаты.Чтение.Подразделения
		|Справочник.Кандидаты.Изменение.Подразделения
		|Справочник.Кандидаты.Чтение.ГруппыКандидатов
		|Справочник.Кандидаты.Изменение.ГруппыКандидатов
		|Справочник.КандидатыПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.КандидатыПрисоединенныеФайлы.Изменение.Подразделения
		|Справочник.КандидатыПрисоединенныеФайлы.Чтение.ГруппыКандидатов
		|Справочник.КандидатыПрисоединенныеФайлы.Изменение.ГруппыКандидатов
		|Справочник.ЛичныеДанныеКандидатов.Чтение.ГруппыКандидатов
		|Справочник.ЛичныеДанныеКандидатов.Изменение.ГруппыКандидатов
		|Справочник.ЛичныеДанныеКандидатовПрисоединенныеФайлы.Чтение.ГруппыКандидатов
		|Справочник.ЛичныеДанныеКандидатовПрисоединенныеФайлы.Изменение.ГруппыКандидатов
		|Документ.ЗаявкаНаПодборПерсонала.Чтение.Подразделения
		|Документ.ЗаявкаНаПодборПерсонала.Изменение.Подразделения
		|Справочник.ЗаявкаНаПодборПерсоналаПрисоединенныеФайлы.Чтение.Подразделения
		|Справочник.ЗаявкаНаПодборПерсоналаПрисоединенныеФайлы.Изменение.Подразделения
		|РегистрСведений.ФизическиеЛицаКандидатов.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ФизическиеЛицаКандидатов.Чтение.ГруппыКандидатов
		|РегистрСведений.ФизическиеЛицаКандидатов.Изменение.ГруппыФизическихЛиц
		|РегистрСведений.ФизическиеЛицаКандидатов.Изменение.ГруппыКандидатов
		|РегистрСведений.ПротоколыОтправкиСообщенийКандидатам.Чтение.ГруппыКандидатов
		|РегистрСведений.ПротоколыОтправкиСообщенийКандидатам.Чтение.Подразделения";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц") Тогда
		Описание = Описание + "
		|РегистрСведений.ДанныеПоискаФизическихЛиц.Чтение.ГруппыФизическихЛиц
		|РегистрСведений.ДанныеПоискаФизическихЛиц.Чтение.ГруппыКандидатов";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПоискФизическихЛиц
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации") Тогда
		Описание = Описание + "
		|Документ.РасходыНаИсточникИнформацииОКандидатах.Чтение.Организации
		|Документ.РасходыНаИсточникИнформацииОКандидатах.Изменение.Организации
		|Справочник.РасходыНаИсточникИнформацииОКандидатахПрисоединенныеФайлы.Чтение.Организации
		|Справочник.РасходыНаИсточникИнформацииОКандидатахПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.ОплатаПубликацийВакансий.Чтение.Организации
		|РегистрНакопления.РасходыНаИсточникиИнформацииОКандидатах.Чтение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.ОценкаЭффективностиИсточниковИнформации
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		Описание = Описание + "
		|Справочник.ПроизвольныйКадровыйПриказПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ПроизвольныйКадровыйПриказПрисоединенныеФайлы.Чтение.Организации
		|Справочник.ПроизвольныйКадровыйПриказПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.ПроизвольныйКадровыйПриказПрисоединенныеФайлы.Изменение.Организации
		|Документ.ПроизвольныйКадровыйПриказ.Чтение.ГруппыФизическихЛиц
		|Документ.ПроизвольныйКадровыйПриказ.Чтение.Организации
		|Документ.ПроизвольныйКадровыйПриказ.Изменение.ГруппыФизическихЛиц
		|Документ.ПроизвольныйКадровыйПриказ.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		Описание = Описание + "
		|Документ.СведенияОбОрганизацииДляРеестраГосслужащих.Чтение.ГруппыФизическихЛиц
		|Документ.СведенияОбОрганизацииДляРеестраГосслужащих.Чтение.Организации
		|Документ.СведенияОбОрганизацииДляРеестраГосслужащих.Изменение.ГруппыФизическихЛиц
		|Документ.СведенияОбОрганизацииДляРеестраГосслужащих.Изменение.Организации
		|Справочник.СведенияОбОрганизацииДляРеестраГосслужащихПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СведенияОбОрганизацииДляРеестраГосслужащихПрисоединенныеФайлы.Чтение.Организации
		|Справочник.СведенияОбОрганизацииДляРеестраГосслужащихПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Справочник.СведенияОбОрганизацииДляРеестраГосслужащихПрисоединенныеФайлы.Изменение.Организации
		|РегистрСведений.СведенияОбОрганизацииДляРеестраГосслужащих.Чтение.Организации
		|РегистрСведений.СведенияОбОрганизацииДляРеестраГосслужащих.Изменение.Организации";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Описание = Описание + "
		|Справочник.ЗапросСправкиСотрудникомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗапросСправкиСотрудникомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ЗапросСправкиСотрудником.Чтение.ГруппыФизическихЛиц
		|Документ.ЗапросСправкиСотрудником.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаЕдиновременнуюКомпенсацию.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаЕдиновременнуюКомпенсацию.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаКомандировку.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаКомандировку.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаКомандировкуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаКомандировкуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаОтпуск.Чтение.ГруппыФизическихЛиц
		|Документ.ЗаявкаНаОтпуск.Изменение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаОтпускПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗаявкаНаОтпускПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаЕдиновременнуюКомпенсацию.Чтение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаЕдиновременнуюКомпенсацию.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаЕдиновременнуюКомпенсациюПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаКомандировку.Чтение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаКомандировку.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаКомандировкуПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаКомандировкуПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаОтпуск.Чтение.ГруппыФизическихЛиц
		|Документ.ОтменаЗаявкиНаОтпуск.Изменение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаОтпускПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ОтменаЗаявкиНаОтпускПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.СообщениеОбОтсутствии.Чтение.ГруппыФизическихЛиц
		|Документ.СообщениеОбОтсутствии.Изменение.ГруппыФизическихЛиц
		|Справочник.СообщениеОбОтсутствииПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СообщениеОбОтсутствииПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.СообщениеОНеправильныхДанныхСотрудника.Чтение.ГруппыФизическихЛиц
		|Документ.СообщениеОНеправильныхДанныхСотрудника.Изменение.ГруппыФизическихЛиц
		|Справочник.СообщениеОНеправильныхДанныхСотрудникаПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.СообщениеОНеправильныхДанныхСотрудникаПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|ЖурналДокументов.ЗаявкиСотрудников.Чтение.ГруппыФизическихЛиц
		|ЖурналДокументов.ЗапросыСправок.Чтение.ГруппыФизическихЛиц
		|Документ.ЗапросСправки2НДФЛСотрудником.Чтение.ГруппыФизическихЛиц
		|Документ.ЗапросСправки2НДФЛСотрудником.Чтение.Организации
		|Документ.ЗапросСправки2НДФЛСотрудником.Изменение.ГруппыФизическихЛиц
		|Документ.ЗапросСправки2НДФЛСотрудником.Изменение.Организации
		|Справочник.ЗапросСправки2НДФЛСотрудникомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.ЗапросСправки2НДФЛСотрудникомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок") Тогда
		Описание = Описание + "
		|Справочник.РешениеОКомандированииПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОКомандированииПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОКомандировании.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОКомандировании.Изменение.ГруппыФизическихЛиц
		|Справочник.РешениеОКомпенсацииРасходовДляКрайнегоСевераПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
		|Справочник.РешениеОКомпенсацииРасходовДляКрайнегоСевераПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
		|Документ.РешениеОКомпенсацииРасходовДляКрайнегоСевера.Чтение.ГруппыФизическихЛиц
		|Документ.РешениеОКомпенсацииРасходовДляКрайнегоСевера.Изменение.ГруппыФизическихЛиц";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Описание = Описание + "
		|РегистрСведений.ИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.Чтение.Организации
		|РегистрСведений.ИсторияНастроекРасчетаУправленческойЗарплатыПозицийШтатногоРасписания.Чтение.ПодразделенияОрганизаций
		|РегистрСведений.ИсторияУправленческихНачисленийПоШтатномуРасписанию.Чтение.Организации
		|РегистрСведений.ИсторияУправленческихНачисленийПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций
		|РегистрСведений.ИсторияУправленческихПоказателейПоШтатномуРасписанию.Чтение.Организации
		|РегистрСведений.ИсторияУправленческихПоказателейПоШтатномуРасписанию.Чтение.ПодразделенияОрганизаций";
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
		МодульОтсутствияСотрудников.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников
	
	// ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		МодульРасчетыСБюджетомПоНДФЛ = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		МодульРасчетыСБюджетомПоНДФЛ.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
		МодульВыплатыБывшимВоеннослужащим = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		МодульВыплатыБывшимВоеннослужащим.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала") Тогда
		МодульЭкспертнаяОценкаПерсонала = ОбщегоНазначения.ОбщийМодуль("ЭкспертнаяОценкаПерсонала");
		МодульЭкспертнаяОценкаПерсонала.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ЭкспертнаяОценкаПерсонала
	
	// ОтражениеРасчетовЗарплатыВБухучете
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		МодульОтражениеВБухучете = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		МодульОтражениеВБухучете.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		МодульВзыскания.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания
	
	// ПроцессыОбработкиДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда	
		МодульПроцессыОбработкиДокументовЗарплата = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументовЗарплата.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ПроцессыОбработкиДокументов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадрыРасширенная") Тогда
		Описание = Описание + "
		|РегистрСведений.НазначениеПоказателейРасчетаРезервов.Чтение.Организации
		|РегистрСведений.НазначениеПоказателейРасчетаРезервов.Изменение.Организации
		|РегистрСведений.ЗначенияПоказателейРасчетаРезервов.Чтение.Организации
		|РегистрСведений.ЗначенияПоказателейРасчетаРезервов.Изменение.Организации";
	КонецЕсли;
	
	// ТрудоустройствоПоКвотам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ТрудоустройствоПоКвотам

КонецПроцедуры

#КонецОбласти

#Область Печать

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати.
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
	СписокОбъектов.Добавить(Справочники.ГрафикиРаботыСотрудников);
	СписокОбъектов.Добавить(Справочники.ПодразделенияОрганизаций);
	СписокОбъектов.Добавить(Справочники.ПоказателиРасчетаЗарплаты);
	СписокОбъектов.Добавить(Справочники.ТарифыПлатежныхАгентов);
	СписокОбъектов.Добавить(Справочники.ШтатноеРасписание);
	СписокОбъектов.Добавить(Документы.АктПроверкиСтраховыхВзносов);
	СписокОбъектов.Добавить(Документы.БухучетНачисленийСотрудников);
	СписокОбъектов.Добавить(Документы.БухучетЗарплатыСотрудников);
	СписокОбъектов.Добавить(Документы.ВводНачальныхОстатковОтпусков);
	СписокОбъектов.Добавить(Документы.ВосстановлениеВДолжности);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыПеречислением);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыРаздатчиком);
	СписокОбъектов.Добавить(Документы.ВедомостьПрочихДоходовВКассу);
	СписокОбъектов.Добавить(Документы.ВедомостьПрочихДоходовВБанк);
	СписокОбъектов.Добавить(Документы.ВедомостьПрочихДоходовПеречислением);
	СписокОбъектов.Добавить(Документы.ВозвратИзОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ВыплатаБывшимСотрудникам);
	СписокОбъектов.Добавить(Документы.ВыплатыПоДоговорамОпеки);
	СписокОбъектов.Добавить(Документы.ГрафикОтпусков);
	СписокОбъектов.Добавить(Документы.ДанныеДляРасчетаЗарплаты);
	СписокОбъектов.Добавить(Документы.ДоговорЗаймаСотруднику);
	СписокОбъектов.Добавить(Документы.ДоходВНатуральнойФорме);
	СписокОбъектов.Добавить(Документы.ЗаявлениеИЗапросВПФРОЗаработке);
	СписокОбъектов.Добавить(Документы.ИзменениеАванса);
	СписокОбъектов.Добавить(Документы.ИзменениеГрафикаРаботыСписком);
	СписокОбъектов.Добавить(Документы.ИзменениеКвалификационногоРазряда);
	СписокОбъектов.Добавить(Документы.ИзменениеОплатыТруда);
	СписокОбъектов.Добавить(Документы.ИзменениеПлановыхНачислений);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийДоговораЗаймаСотруднику);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийИсполнительногоЛиста);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ИзменениеШтатногоРасписания);
	СписокОбъектов.Добавить(Документы.ИндексацияЗаработка);
	СписокОбъектов.Добавить(Документы.ИндексацияШтатногоРасписания);
	СписокОбъектов.Добавить(Документы.ИндивидуальныйГрафик);
	СписокОбъектов.Добавить(Документы.ИсполнительныйЛист);
	СписокОбъектов.Добавить(Документы.КадровыйПереводСписком);
	СписокОбъектов.Добавить(Документы.Командировка);
	СписокОбъектов.Добавить(Документы.КомандировкиСотрудников);
	СписокОбъектов.Добавить(Документы.КомпенсацияЗаЗадержкуЗарплаты);
	СписокОбъектов.Добавить(Документы.МатериальнаяПомощь);
	СписокОбъектов.Добавить(Документы.ИзменениеМестРаботы);
	СписокОбъектов.Добавить(Документы.НачальнаяЗадолженностьПоЗарплате);
	СписокОбъектов.Добавить(Документы.НачальнаяШтатнаяРасстановка);
	СписокОбъектов.Добавить(Документы.НачислениеЗаПервуюПоловинуМесяца);
	СписокОбъектов.Добавить(Документы.НазначениеПлановогоНачисления);
	СписокОбъектов.Добавить(Документы.ОграничениеВзысканий);
	СписокОбъектов.Добавить(Документы.ОплатаПоСреднемуЗаработку);
	СписокОбъектов.Добавить(Документы.ОплатаПоСреднемуЗаработкуСписком);
	СписокОбъектов.Добавить(Документы.Отгул);
	СписокОбъектов.Добавить(Документы.ОтгулСписком);
	СписокОбъектов.Добавить(Документы.ОтменаДоплатыДоСреднегоЗаработка);
	СписокОбъектов.Добавить(Документы.ОтменаСовмещения);
	СписокОбъектов.Добавить(Документы.ОтпускаСотрудников);
	СписокОбъектов.Добавить(Документы.ОтпускБезСохраненияОплаты);
	СписокОбъектов.Добавить(Документы.ОтпускБезСохраненияОплатыСписком);
	СписокОбъектов.Добавить(Документы.ОтпускПоУходуЗаРебенком);
	СписокОбъектов.Добавить(Документы.ПереводКДругомуРаботодателю);
	СписокОбъектов.Добавить(Документы.ПереводНаОплатуПоСреднемуЗаработку);
	СписокОбъектов.Добавить(Документы.ПереводНаРаботуСКоронавирусом);
	СписокОбъектов.Добавить(Документы.ПеремещениеВДругоеПодразделение);
	СписокОбъектов.Добавить(Документы.ПеремещениеМеждуТерриториями);
	СписокОбъектов.Добавить(Документы.ПереносОтпуска);
	СписокОбъектов.Добавить(Документы.ПереносЗатратНаПерсоналМеждуСтатьями);
	СписокОбъектов.Добавить(Документы.ПериодыОплаченныеДоНачалаЭксплуатации);
	СписокОбъектов.Добавить(Документы.ПогашениеЗадолженностиПоВзысканиям);
	СписокОбъектов.Добавить(Документы.ПостоянноеУдержаниеВПользуТретьихЛиц);
	СписокОбъектов.Добавить(Документы.Премия);
	СписокОбъектов.Добавить(Документы.ПрекращениеПлановогоНачисления);
	СписокОбъектов.Добавить(Документы.ПриемНаРаботуСписком);
	СписокОбъектов.Добавить(Документы.ПризПодарок);
	СписокОбъектов.Добавить(Документы.ПриказНаДоплатуДоСреднегоЗаработка);
	СписокОбъектов.Добавить(Документы.ПрогулНеявка);
	СписокОбъектов.Добавить(Документы.ПрогулНеявкаСписком);
	СписокОбъектов.Добавить(Документы.ПростойСотрудников);
	СписокОбъектов.Добавить(Документы.РаботаВВыходныеИПраздничныеДни);
	СписокОбъектов.Добавить(Документы.РаботаСверхурочно);
	СписокОбъектов.Добавить(Документы.РазовоеНачисление);
	СписокОбъектов.Добавить(Документы.РаспределениеОсновногоЗаработка);
	СписокОбъектов.Добавить(Документы.РегистрацияПереработок);
	СписокОбъектов.Добавить(Документы.РегистрацияПрочихДоходов);
	СписокОбъектов.Добавить(Документы.СборГрафиковОтпусков);
	СписокОбъектов.Добавить(Документы.Совмещение);
	СписокОбъектов.Добавить(Документы.СторнированиеНачислений);
	СписокОбъектов.Добавить(Документы.ТабельУчетаРабочегоВремени);
	СписокОбъектов.Добавить(Документы.УвольнениеСписком);
	СписокОбъектов.Добавить(Документы.УдержаниеВСчетРасчетовПоПрочимОперациям);
	СписокОбъектов.Добавить(Документы.УдержаниеДобровольныхВзносовВНПФ);
	СписокОбъектов.Добавить(Документы.УдержаниеДобровольныхСтраховыхВзносов);
	СписокОбъектов.Добавить(Документы.УдержаниеПрофсоюзныхВзносов);
	СписокОбъектов.Добавить(Документы.УтверждениеТарифнойСетки);
	СписокОбъектов.Добавить(Документы.УтверждениеШтатногоРасписания);
	
	КонтрактыДоговорыСотрудников.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	УчетПособийСоциальногоСтрахованияРасширенный.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	СтимулирующиеВыплатыФСС.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	ДоговорыГПХРасширенный.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ДоговорыГПХ
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	ЗаявкиСотрудниковРасширенный.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИнтеграцияУправлениеПерсоналомРасширенная.ЗаявкиСотрудниковРасширенная
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитие");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсонала");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПодборПерсонала");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.НормированиеКомандировок") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("НормированиеКомандировок");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровыеРешения") Тогда
		МодульКадровыеРешения = ОбщегоНазначения.ОбщийМодуль("КадровыеРешения");
		МодульКадровыеРешения.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахование");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективности");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	// ЭлектронноеОбучение
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеОбучение") Тогда
		МодульЭлектронноеОбучение = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеОбучение");
		МодульЭлектронноеОбучение.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	// Конец ЭлектронноеОбучение
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ВыплатыБывшимВоеннослужащим") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВыплатыБывшимВоеннослужащим");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КадровоеПланирование") Тогда
		МодульКадровоеПланирование = ОбщегоНазначения.ОбщийМодуль("КадровоеПланирование");
		МодульКадровоеПланирование.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ФинансовыйУчет") Тогда
		МодульФинансовыйУчет = ОбщегоНазначения.ОбщийМодуль("ФинансовыйУчет");
		МодульФинансовыйУчет.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы
	
	// ЗарплатаКадрыПриложения
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйРезерв") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КадровыйРезерв");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ЗаймыСотрудникамВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗаймыСотрудникамВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетСтраховыхВзносовВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетСтраховыхВзносовВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Медицина") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Медицина");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.АттестацииСотрудников") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("АттестацииСотрудников");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Подработки");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Дивиденды") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("Дивиденды");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("БухучетХозрасчетныхОрганизаций");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтражениеВФинансовомУчете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеЗарплатыВФинансовомУчете");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОбразовательныеУчреждения") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОбразовательныеУчреждения");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетДепонированнойЗарплатыВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплатыВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХОРасширенная") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХОРасширенный");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.ВоинскиеСпециальныеЗвания") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВоинскиеСпециальныеЗвания");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КадровыйУчетВоеннослужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба.КлассныеЧиныРанги") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("КлассныеЧиныРанги");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПлановыеПрочиеДоходы") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПлановыеПрочиеДоходы");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПереносДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПереносДанных");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетФактическиПолученныхДоходов") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетФактическиПолученныхДоходовВХО");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащих");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудников = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудников");
		МодульОтсутствияСотрудников.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхЗарплатаКадрыСервер");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КонфигурацииЗарплатаКадрыРасширенная.ОтражениеРасчетовЗарплатыВБухучете") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеРасчетовЗарплатыВБухучете");
		Модуль.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ДисциплинарныеВзыскания") Тогда
		МодульВзыскания = ОбщегоНазначения.ОбщийМодуль("ДисциплинарныеВзыскания");
		МодульВзыскания.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	// Конец ЗарплатаКадрыПриложения
	
	// ПроцессыОбработкиДокументовЗарплата
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПроцессыОбработкиДокументовЗарплата") Тогда
		МодульПроцессыОбработкиДокументов = ОбщегоНазначения.ОбщийМодуль("ПроцессыОбработкиДокументовЗарплата");
		МодульПроцессыОбработкиДокументов.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
	КонецЕсли;
	
	// Конец ПроцессыОбработкиДокументовЗарплата

КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриПолученииНастроекСпискаКомандПечати.
Процедура ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка) Экспорт
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииНастроекПечати.
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииНастроекПечати(Настройки);

	// ТрудоустройствоПоКвотам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ПриОпределенииНастроекПечати(Настройки);
	КонецЕсли;
	// Конец ТрудоустройствоПоКвотам
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриДобавленииКомандПечати.
Процедура ПриДобавленииКомандПечати(ИмяФормы, КомандыПечати) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		МодульПроизвольныеКадровыеПриказы = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказы");
		МодульПроизвольныеКадровыеПриказы.ПриДобавленииКомандПечати(ИмяФормы, КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействие

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьСоответствиеСправочников.
Процедура ЭлектронноеВзаимодействиеПриОпределенииСоответствияСправочников(СоответствиеСправочников) Экспорт
	
	ЗарплатаКадрыБазовый.ЭлектронноеВзаимодействиеПриОпределенииСоответствияСправочников(СоответствиеСправочников);
	
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", Метаданные.Справочники.БанковскиеСчетаКонтрагентов.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ПодписиДокументов

// См. ПодписиДокументовПереопределяемый.ПриОпределенииРолейПодписантов.
Процедура ПриОпределенииРолейПодписантов(РолиПодписантов) Экспорт
	РольРуководитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Руководитель", "ДолжностьРуководителя", "ОснованиеПодписиРуководителя");
	РолиПодписантов.Добавить(РольРуководитель);
	
	РольГлавныйБухгалтер = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ГлавныйБухгалтер", "ДолжностьГлавногоБухгалтера", "ОснованиеПодписиГлавногоБухгалтера");
	РолиПодписантов.Добавить(РольГлавныйБухгалтер);
	
	РольРуководительКадровойСлужбы = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("РуководительКадровойСлужбы", "ДолжностьРуководителяКадровойСлужбы", "ОснованиеПодписиРуководителяКадровойСлужбы");
	РолиПодписантов.Добавить(РольРуководительКадровойСлужбы);
	
	РольБухгалтер = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Бухгалтер", "ДолжностьБухгалтера", "ОснованиеПодписиБухгалтера");
	РолиПодписантов.Добавить(РольБухгалтер);
	
	РольРаботникКадровойСлужбы = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("РаботникКадровойСлужбы", "ДолжностьРаботникаКадровойСлужбы", "ОснованиеПодписиРаботникаКадровойСлужбы");
	РолиПодписантов.Добавить(РольРаботникКадровойСлужбы);
	
	РольКассир = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Кассир", "ДолжностьКассира", "ОснованиеПодписиКассира");
	РолиПодписантов.Добавить(РольКассир);
	
	РольРаздатчик = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Раздатчик", "ДолжностьРаздатчика", "ОснованиеПодписиРаздатчика");
	РолиПодписантов.Добавить(РольРаздатчик);
	
	РольОтветственныйЗаВУР = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ОтветственныйЗаВУР", "ДолжностьОтветственногоЗаВУР", "ОснованиеПодписиОтветственногоЗаВУР");
	РолиПодписантов.Добавить(РольОтветственныйЗаВУР);
	
	РольПредставительСФР = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ПредставительСФР", "ДолжностьПредставителяСФР", "ОснованиеПодписиПредставителяСФР");
	РолиПодписантов.Добавить(РольПредставительСФР);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		Модуль.ДобавитьРольОтветственногоЗаОхрануТруда(РолиПодписантов);
	КонецЕсли;
	
	РольПредставительНанимателя = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ПредставительНанимателя", "ДолжностьПредставителяНанимателя", "ОснованиеПодписиПредставителяНанимателя");
	РолиПодписантов.Добавить(РольПредставительНанимателя);
	
	РольИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Исполнитель", "ДолжностьИсполнителя", "ОснованиеПодписиИсполнителя");
	РолиПодписантов.Добавить(РольИсполнитель);
	
	РольОтветственныйИсполнитель = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ОтветственныйИсполнитель", "ДолжностьОтветственногоИсполнителя", "ОснованиеПодписиОтветственногоИсполнителя");
	РолиПодписантов.Добавить(РольОтветственныйИсполнитель);
	
    РольИсполнительОтБухгалтерии = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("ИсполнительОтБухгалтерии", "ДолжностьИсполнителяОтБухгалтерии", "ОснованиеПодписиИсполнителяОтБухгалтерии");
    РолиПодписантов.Добавить(РольИсполнительОтБухгалтерии );

	РольСоставил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Составил", "ДолжностьСоставившего", "ОснованиеПодписиСоставившего");
	РолиПодписантов.Добавить(РольСоставил);
	
	РольПроверил = ПодписиДокументов.ИменаРеквизитовРолиПодписанта("Проверил", "ДолжностьПроверившего", "ОснованиеПодписиПроверившего");
	РолиПодписантов.Добавить(РольПроверил);
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

// Возникает при регистрации классификаторов, обновляемых автоматически.
//
// Параметры:
//   ТаблицаКлассификаторов - ТаблицаЗначений - См. ЗарплатаКадры.АвтообновляемыеКлассификаторы.
//
Процедура ПриРегистрацииАвтоообновляемыхКлассификаторов(ТаблицаКлассификаторов) Экспорт
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "ChildAndDeathBenefits";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.РазмерыГосударственныхПособий";
	
	СтрокаТаблицы = ТаблицаКлассификаторов.Добавить();
	СтрокаТаблицы.Идентификатор = "CentralBankRefinancingRate";
	СтрокаТаблицы.ПолноеИмя = "РегистрСведений.СтавкаРефинансированияЦБ";
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМодифицирующимиПараметрамиДинамическихСписков

Процедура ДополнитьОписаниеМодифицирующегоПараметраОтбора(ИмяПараметра, ОписаниеПараметра, ИмяМодификации) Экспорт
	
	Если ИмяМодификации = Неопределено Тогда
		Если ИмяПараметра = "Подразделение" Тогда
			ОписаниеПараметра.Вставить("ИмяМодификации", "ОтборПоПодразделению");
		КонецЕсли;
	Иначе
		ОписаниеПараметра.Вставить("ИмяМодификации", ИмяМодификации);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьМодифицирующийПараметрОтбора(СтрокаПараметра, Список, МетаданныеОбъекта, Элементы) Экспорт
	
	Если Не ПустаяСтрока(СтрокаПараметра.ИмяМодификации) Тогда
		ЗаполнитьПараметрыВариантаМодификации(СтрокаПараметра, Список, МетаданныеОбъекта);
		ДобавитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов.
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;
	
	// Структура, в которой будут возвращаться найденные значения.
	ОргСведения = ЗарплатаКадрыБазовый.ПолучитьСведенияОбОрганизации(Организация, ДатаЗначения, СписокПоказателей);
	
	ИзвестныеПоказатели = Новый Массив;
	ИзвестныеПоказатели.Добавить("ВидПлательщикаСтраховыхВзносов");
	
	Если СписокПоказателей = Неопределено Тогда
		СписокПоказателей = ИзвестныеПоказатели
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл
		
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИзвестныеПоказатели.Найти(ИмяПоказателя) = Неопределено Тогда
			Продолжить
			
		ИначеЕсли ИмяПоказателя = "ВидПлательщикаСтраховыхВзносов" Тогда
			Если ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении") Тогда 
				Значение = "01";
			Иначе
				Значение = "00"
			КонецЕсли;
			
		Иначе
			Результат = "";
		КонецЕсли;

		Если Не ОргСведения.Свойство(ИмяПоказателя) Тогда
			ОргСведения.Вставить(ИмяПоказателя);
		КонецЕсли;	
		ОргСведения[ИмяПоказателя] = Значение;
		
	КонецЦикла;
	
	Возврат ОргСведения;
	
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСписокРегламентированныхОтчетов
Процедура ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	ЗарплатаКадрыБазовый.ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов);
	
	ЕстьУчетБюджетныхУчреждений = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений");
	ЕстьУчетХозрасчетныхОрганизаций = ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетХозрасчетныхОрганизаций");
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетОбученныеПоОхранеТрудаЛица");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСоответствиеУсловийТруда");
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов);
	КонецЕсли;
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма3Ф");
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПЗдрав");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПКультура");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПНаука");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПОбразование");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПСоц");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаЗПФизическаяКультураИСпорт");
	
	Если ЕстьУчетХозрасчетныхОрганизаций Тогда
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаМПм");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФормаПМ");
	КонецЕсли;
	
	Если ЕстьУчетБюджетныхУчреждений Тогда
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ГС");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1МС");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2ГСГЗ");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма2МС");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГМС");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТГС");
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1ТМС");
	КонецЕсли;
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма57Т");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Кадры");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Тпроф");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Тчзп");   
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма1Туст");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма7Травматизм");
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистикаФорма7ТравматизмПриложение");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетЕФС1СЗПГос");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетСтатистика1Квотирование");
	КонецЕсли;	
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета
Процедура ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета = Неопределено) Экспорт
	
	// Добавление показателей базовой реализации.
	ЗарплатаКадрыБазовый.ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	
	// Добавление показателей расширенной реализации.
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СтатистикаПерсоналаРасширенная
	СтатистикаПерсоналаРасширенный.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СтатистикаПерсоналаРасширенная
	
	// ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ПриПолученииСведенийОПоказателяхОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет
Процедура ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	// Для многих отчетов используется базовая реализация.
	ЗарплатаКадрыБазовый.ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	
	// ЗарплатаКадрыРасширеннаяПодсистемы.СтатистикаПерсоналаРасширенная
	СтатистикаПерсоналаРасширенный.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.СтатистикаПерсоналаРасширенная
	
	// ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда") Тогда
		МодульРабочиеМестаОхраныТруда = ОбщегоНазначения.ОбщийМодуль("РабочиеМестаОхраныТруда");
		МодульРабочиеМестаОхраныТруда.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.РабочиеМестаОхраныТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотры = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотры");
		МодульМедицинскиеОсмотры.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры
	
	// ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		МодульГосударственнаяСлужба = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		МодульГосударственнаяСлужба.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	КонецЕсли;
	// Конец ЗарплатаКадрыПриложения.ГосударственнаяСлужба
	
	// ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам") Тогда
		МодульТрудоустройствоПоКвотам = ОбщегоНазначения.ОбщийМодуль("ТрудоустройствоПоКвотам");
		МодульТрудоустройствоПоКвотам.ПриЗаполненииРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер);
	КонецЕсли;
	// Конец ЗарплатаКадрыКорпоративнаяПодсистемы.ТрудоустройствоПоКвотам
	
КонецПроцедуры

// См. РегламентированнаяОтчетностьПереопределяемый.ИмяСправочникаОбособленныхПодразделений
Функция ИмяСправочникаОбособленныхПодразделений() Экспорт
	Возврат "ПодразделенияОрганизаций";
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ИмяРеквизитаПризнакаОбособленногоПодразделения
Функция ИмяРеквизитаПризнакаОбособленногоПодразделения() Экспорт
	Возврат "ИмеетНомерТерриториальногоОрганаРосстата";
КонецФункции

// См. РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности).
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТруда = ОбщегоНазначения.ОбщийМодуль("ОхранаТруда");
		МодульОхранаТруда.ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	
	УчетПособийСоциальногоСтрахованияРасширенный.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(
		Страхователь,
		Уведомления,
		ОбработанныеУведомления);
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеПолученияОшибокЛогическогоКонтроляСЭДО.
Процедура ПослеПолученияОшибокЛогическогоКонтроляСЭДО(Страхователь, ИсходноеСообщение, ТекстОшибки, Результат) Экспорт
	
	УчетПособийСоциальногоСтрахованияРасширенный.ПослеПолученияОшибокЛогическогоКонтроляСЭДО(
		Страхователь,
		ИсходноеСообщение,
		ТекстОшибки,
		Результат);
	
КонецПроцедуры

// Для ЗарплатаКадры.ПолучитьНастройкиВидимостиЭлементовФормы возвращает характеристику показываемой формы регламентированного отчета.
//  
// Возвращаемое значение:
//  Булево, истина - если рассматриваемую форму заполнять автоматически мы еще не умеем.
//
Функция НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Экспорт
	
	Если ЗарплатаКадрыБазовый.НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
		Возврат	Истина
	КонецЕсли;
	Если СтатистикаПерсоналаРасширенный.НоваяФормаРегламентированногоОтчета(ИДОтчета, ИДРедакцииОтчета) Тогда
		Возврат	Истина
	КонецЕсли;
	
	Возврат	Ложь
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки.
Процедура ПриИзмененииДанныхАутентификацииИнтернетПоддержки(ДанныеПользователя) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала.РазборРезюме") Тогда
		МодульРазборРезюмеСемантическийАнализ = ОбщегоНазначения.ОбщийМодуль("РазборРезюмеСемантическийАнализ");
		МодульРазборРезюмеСемантическийАнализ.СброситьКлючиДоступаСервиса();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных) Экспорт
	
	ЭтоОбъектБиблиотеки = ЗарплатаКадрыБазовый.ЭтоОбъектЗарплатноКадровойБиблиотеки(ПолноеИмяОбъектаМетаданных);
	Если НЕ ЭтоОбъектБиблиотеки Тогда
		
		ПодсистемыЗарплатноКадровойБиблиотеки = "ЗарплатаКадрыРасширеннаяПодсистемы";
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы") Тогда
			ПодсистемыЗарплатноКадровойБиблиотеки = ПодсистемыЗарплатноКадровойБиблиотеки + ",ЗарплатаКадрыКорпоративнаяПодсистемы";
		КонецЕсли;
		
		ЭтоОбъектБиблиотеки = ЗарплатаКадры.ОбъектМетаданныхВключенВПодсистемы(ПолноеИмяОбъектаМетаданных, ПодсистемыЗарплатноКадровойБиблиотеки);
		
	КонецЕсли; 
	
	Возврат ЭтоОбъектБиблиотеки;
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеРаботаВХозрасчетнойОрганизации() = Неопределено И ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыБазоваяВерсия") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыБазоваяВерсия");
		Возврат Модуль.ЭтоБазоваяВерсияКонфигурации();
	КонецЕсли;
	
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

// См. ЗарплатаКадры.ИспользуютсяДокументыОплатыВедомостей.
Функция ИспользуютсяДокументыОплатыВедомостей() Экспорт
	Возврат (Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры"));
КонецФункции

// См. ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей.
Процедура ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица = Неопределено, Знач ДатаОперации = Неопределено, Отказ = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если Ведомости.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если ФизическиеЛица <> Неопределено И ФизическиеЛица.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОперации) Тогда
		ДатаОперации = ПлатежныйДокумент.Дата
	КонецЕсли;	
	
	ВедомостиНаВыплатуЗарплаты = Новый Массив; 
	ВедомостиПрочихДоходов     = Новый Массив; 
	
	МетаданныеВзаиморасчетыСКонтрагентами = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиАкционерами;
	МетаданныеВзаиморасчетыССотрудниками  = Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками;
	Для Каждого Ведомость Из Ведомости Цикл
		МетаданныеВедомости = Ведомость.Метаданные();
		Если МетаданныеВедомости.Движения.Содержит(МетаданныеВзаиморасчетыССотрудниками) Тогда
			ВедомостиНаВыплатуЗарплаты.Добавить(Ведомость);
		ИначеЕсли МетаданныеВедомости.Движения.Содержит(МетаданныеВзаиморасчетыСКонтрагентами) Тогда
			ВедомостиПрочихДоходов.Добавить(Ведомость);
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый тип ведомости';
									|en = 'Invalid paysheet type'");
		КонецЕсли;	
	КонецЦикла;	
	
	// установка признака выдачи денег получателю (для всех ведомостей одинаково)
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, Неопределено, Отказ);
	
	// регистрация выдачи начисленной зарплаты
	ВедомостьНаВыплатуЗарплаты.ЗарегистрироватьОплату(ПлатежныйДокумент, Организация, ВедомостиНаВыплатуЗарплаты, ФизическиеЛица, ДатаОперации, Отказ);
	
КонецПроцедуры

Процедура ПроверитьИсключенияПроверкиЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта) Экспорт
	
	УправлениеШтатнымРасписанием.ПроверитьИсключенияПроверкиЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта);
	УчетРабочегоВремениРасширенный.ПроверитьИсключенияПроверкиЗапретаИзменения(Объект, ПроверкаЗапретаИзменения, УзелПроверкиЗапретаЗагрузки, ВерсияОбъекта);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПодписанта(Объект, ПолеПодписанта, ПолеДолжностиПодписанта) Экспорт
	
	ЗапрашиваемыеЗначения = Новый Структура("Руководитель, ДолжностьРуководителя");
	ЗапрашиваемыеЗначения.Вставить("Организация", Объект.Организация);
	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗапрашиваемыеЗначения);
	
	ЗапрашиваемыеЗначения.Свойство("Руководитель", Объект[ПолеПодписанта]);
	ЗапрашиваемыеЗначения.Свойство("ДолжностьРуководителя", Объект[ПолеДолжностиПодписанта]);
	
КонецПроцедуры

Процедура УстановитьНачальныеЗначения(ИменаОбъектовМетаданных) Экспорт
	ЗарплатаКадрыБазовый.УстановитьНачальныеЗначения(ИменаОбъектовМетаданных);
	
	Если ПустаяСтрока(ИменаОбъектовМетаданных) Тогда
		ОбрабатываемыеИменаОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("");
	Иначе
		ОбрабатываемыеИменаОбъектов = СтрРазделить(ИменаОбъектовМетаданных, ",", Ложь);
	КонецЕсли;
	
	Для Каждого ОбрабатываемоеИмя Из ОбрабатываемыеИменаОбъектов Цикл
		ОбрабатываемоеИмя = ВРег(СокрЛП(ОбрабатываемоеИмя));
		
		Если ОбрабатываемоеИмя = "" Или ОбрабатываемоеИмя = ВРег("РегистрСведений.РазмерыГосударственныхПособий") Тогда
			РегистрыСведений.РазмерыГосударственныхПособий.НачальноеЗаполнение();
		КонецЕсли;
		
		Если ОбрабатываемоеИмя = "" Или ОбрабатываемоеИмя = ВРег("РегистрСведений.СтавкаРефинансированияЦБ") Тогда
			РегистрыСведений.СтавкаРефинансированияЦБ.НачальноеЗаполнение();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция РегистраторыПереносаДанных() Экспорт
	
	ТипыДокументовПереносаДанных = ЗарплатаКадрыБазовый.РегистраторыПереносаДанных();
	
	ТипыДокументовПереносаДанных.Добавить(Тип("ДокументСсылка.ПереносДанных"));
	
	Возврат ТипыДокументовПереносаДанных;
	
КонецФункции

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АдаптацияУвольнение") Тогда
		МодульАдаптацияУвольнениеСборСтатистики = ОбщегоНазначения.ОбщийМодуль("АдаптацияУвольнениеСборСтатистики");
		МодульАдаптацияУвольнениеСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.АнализТекучестиПерсонала") Тогда
		МодульАнализТекучестиПерсоналаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("АнализТекучестиПерсоналаСборСтатистики");
		МодульАнализТекучестиПерсоналаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеКомандировок") Тогда
		МодульБронированиеКомандировокСборСтатистики = ОбщегоНазначения.ОбщийМодуль("БронированиеКомандировокСборСтатистики");
		МодульБронированиеКомандировокСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.БронированиеПомещений") Тогда
		МодульБронированиеПомещенийСборСтатистики = ОбщегоНазначения.ОбщийМодуль("БронированиеПомещенийСборСтатистики");
		МодульБронированиеПомещенийСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ГрантыНеоблагаемыеНДФЛ") Тогда
		МодульГрантыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ГрантыСборСтатистики");
		МодульГрантыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Грейды") Тогда
		МодульГрейдыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ГрейдыСборСтатистики");
		МодульГрейдыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.Инструктажи") Тогда
		МодульИнструктажиСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ИнструктажиСборСтатистики");
		МодульИнструктажиСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИнтеграцияРекрутинговыхСайтов") Тогда
		МодульРекрутинговыеСайтыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("РекрутинговыеСайтыСборСтатистики");
		МодульРекрутинговыеСайтыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ИспытательныйСрокСотрудников") Тогда
		МодульИспытательныйСрокСотрудниковСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ИспытательныйСрокСотрудниковСборСтатистики");
		МодульИспытательныйСрокСотрудниковСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КлючевыеПоказателиЭффективности") Тогда
		МодульКлючевыеПоказателиЭффективностиСборСтатистики = ОбщегоНазначения.ОбщийМодуль("КлючевыеПоказателиЭффективностиСборСтатистики");
		МодульКлючевыеПоказателиЭффективностиСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.КонтрольСамочувствияУведомления") Тогда
		МодульКонтрольСамочувствияУведомленияСборСтатистики = ОбщегоНазначения.ОбщийМодуль("КонтрольСамочувствияУведомленияСборСтатистики");
		МодульКонтрольСамочувствияУведомленияСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЛьготыСотрудников") Тогда
		МодульЛьготыСотрудниковСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ЛьготыСотрудниковСборСтатистики");
		МодульЛьготыСотрудниковСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.МедицинскиеОсмотры") Тогда
		МодульМедицинскиеОсмотрыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("МедицинскиеОсмотрыСборСтатистики");
		МодульМедицинскиеОсмотрыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.МедицинскоеСтрахование") Тогда
		МодульМедицинскоеСтрахованиеСборСтатистики = ОбщегоНазначения.ОбщийМодуль("МедицинскоеСтрахованиеСборСтатистики");
		МодульМедицинскоеСтрахованиеСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.НесчастныеСлучаи") Тогда
		МодульНесчастныеСлучаиСборСтатистики = ОбщегоНазначения.ОбщийМодуль("НесчастныеСлучаиСборСтатистики");
		МодульНесчастныеСлучаиСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОбучениеРазвитие") Тогда
		МодульОбучениеРазвитиеСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ОбучениеРазвитиеСборСтатистики");
		МодульОбучениеРазвитиеСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОтсутствияСотрудников") Тогда
		МодульОтсутствияСотрудниковСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ОтсутствияСотрудниковСборСтатистики");
		МодульОтсутствияСотрудниковСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
		МодульОхранаТрудаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаСборСтатистики");
		МодульОхранаТрудаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОценкаПерсонала") Тогда
		МодульОценкаПерсоналаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ОценкаПерсоналаСборСтатистики");
		МодульОценкаПерсоналаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПодборПерсонала") Тогда
		МодульПодборПерсоналаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ПодборПерсоналаСборСтатистики");
		МодульПодборПерсоналаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ПроизвольныеКадровыеПриказы") Тогда
		МодульПроизвольныеКадровыеПриказыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ПроизвольныеКадровыеПриказыСборСтатистики");
		МодульПроизвольныеКадровыеПриказыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь") Тогда
		МодульРабочийКалендарьСборСтатистики = ОбщегоНазначения.ОбщийМодуль("РабочийКалендарьСборСтатистики");
		МодульРабочийКалендарьСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РеестрГосслужащих") Тогда
		МодульРеестрГосслужащихСборСтатистики = ОбщегоНазначения.ОбщийМодуль("РеестрГосслужащихСборСтатистики");
		МодульРеестрГосслужащихСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудниковСборСтатистики = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудниковСборСтатистики");
		МодульСамообслуживаниеСотрудниковСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.РабочийКалендарь.СинхронизацияКалендарей") Тогда
		МодульСинхронизацияКалендарейСборСтатистики = ОбщегоНазначения.ОбщийМодуль("СинхронизацияКалендарейСборСтатистики");
		МодульСинхронизацияКалендарейСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СпециальнаяОценкаУсловийТруда") Тогда
		МодульСпециальнаяОценкаУсловийТрудаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("СпециальнаяОценкаУсловийТрудаСборСтатистики");
		МодульСпециальнаяОценкаУсловийТрудаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Уведомления") Тогда
		МодульУведомленияСборСтатистики = ОбщегоНазначения.ОбщийМодуль("УведомленияСборСтатистики");
		МодульУведомленияСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ХарактеристикиПерсонала") Тогда
		МодульХарактеристикиПерсоналаСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ХарактеристикиПерсоналаСборСтатистики");
		МодульХарактеристикиПерсоналаСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.Чатботы") Тогда
		МодульЧатботыСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ЧатботыСборСтатистики");
		МодульЧатботыСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ЭлектронноеИнтервью") Тогда
		МодульЭлектронноеИнтервьюСборСтатистики = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеИнтервьюСборСтатистики");
		МодульЭлектронноеИнтервьюСборСтатистики.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПоискИУдалениеДублей

Процедура ПриОпределенииОбъектовСПоискомДублей(Объекты) Экспорт
	
	ЗарплатаКадрыБазовый.ПриОпределенииОбъектовСПоискомДублей(Объекты);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда.СредстваИндивидуальнойЗащиты") Тогда
		МодульСредстваИндивидуальнойЗащиты = ОбщегоНазначения.ОбщийМодуль("СредстваИндивидуальнойЗащиты");
		МодульСредстваИндивидуальнойЗащиты.ПриОпределенииОбъектовСПоискомДублей(Объекты);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПоискИУдалениеДублей

#КонецОбласти

Функция ЗапросПолученияРегистраторовДляОбработкиЗаполненияОрганизации(ИмяРегистра, ПоследнийОбработанныйРегистратор = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	РегистрНакопления.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	#РегистрНакопления КАК РегистрНакопления
	|ГДЕ
	|	РегистрНакопления.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И &УсловиеПоРегистратору
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТРегистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВТРегистраторы КАК ВТРегистраторы";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#РегистрНакопления", "РегистрНакопления." + ИмяРегистра);
	
	Если ПоследнийОбработанныйРегистратор = Неопределено Тогда
		ТекстУсловияРегистратор = "ИСТИНА";
	Иначе
		ТекстУсловияРегистратор = "РегистрНакопления.Регистратор > &ПоследнийОбработанныйРегистратор";
		Запрос.УстановитьПараметр("ПоследнийОбработанныйРегистратор", ПоследнийОбработанныйРегистратор);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоРегистратору", ТекстУсловияРегистратор);
	
	Возврат Запрос;
КонецФункции	

Функция УсловияЗапросаПроверкиНеобходимостиЗаполненияПодчиненныхПодразделений(Запрос, ИсточникДанных) Экспорт
	
	СписокУсловий =  ЗарплатаКадрыБазовый.УсловияЗапросаПроверкиНеобходимостиЗаполненияПодчиненныхПодразделений(Запрос, ИсточникДанных);

	СписокУсловий.Добавить("ПодразделенияОрганизаций.ПроцентСевернойНадбавки <> &ПроцентСевернойНадбавки");
	Запрос.УстановитьПараметр("ПроцентСевернойНадбавки", ИсточникДанных.ПроцентСевернойНадбавки);
	
	Возврат СписокУсловий;
	
КонецФункции

Процедура ЗаполнитьПодчиненноеПодразделение(ПодразделениеОбъект, ИсточникДанных) Экспорт
	
	ЗарплатаКадрыБазовый.ЗаполнитьПодчиненноеПодразделение(ПодразделениеОбъект, ИсточникДанных);
		
	ПодразделениеОбъект.ПроцентСевернойНадбавки = ИсточникДанных.ПроцентСевернойНадбавки;
	
КонецПроцедуры

Процедура ДобавитьПраваНаПодготовкуИОтправкуРегламентированнойОтчетности(ОписаниеПрофиля)
	
	ДобавитьВОписаниеПрофиляРоль(
		ОписаниеПрофиля,
		"ЧтениеДанныхРегламентированнойОтчетности",
		"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(
		ОписаниеПрофиля,
		"ДобавлениеИзменениеРазделяемыхДанныхРегламентированнойОтчетности",
		"РегламентированнаяОтчетность");
	ДобавитьВОписаниеПрофиляРоль(
		ОписаниеПрофиля,
		"ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами",
		"РегламентированнаяОтчетность.ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЭлектронныйДокументооборотС_ФНС_ПФР_ФСГС");
	ДобавитьВОписаниеПрофиляРоль(
		ОписаниеПрофиля,
		"ИспользованиеЭлектроннойПодписиВМоделиСервиса",
		"ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса");
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийШтатногоРасписанияДействующиеНачисленияВРеквизит(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета)
	
КонецПроцедуры

Процедура РедактированиеСоставаНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	ИмяТаблицы =  ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
	ГруппаОтбораИ =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДействующийВидРасчета" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ГруппаОтбораИЛИ =  ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
		
		Если РежимРаботы = 0 Тогда
			
			Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееМинимальноеЗначение" + НомерПоказателя);
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееМаксимальноеЗначение" + НомерПоказателя);
				
			Иначе
				
				ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
				ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееЗначение" + НомерПоказателя);
				
			КонецЕсли;
			
		Иначе
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТекущееЗначение" + НомерПоказателя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДействующийВидРасчета" );
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	
КонецПроцедуры

Процедура РедактированиеСоставаДополнительныхПоказателейСотрудниковПрочитатьТекущиеДанные(ДокументСсылка, СотрудникиДаты, Форма, ОписаниеТаблицыВидовРасчета, УходЗаРебенком = Ложь, ФормироватьСПериодичностьДень = Ложь)

	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	
	ДанныеФормыПоказатели = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымПоказателей);
	ДанныеПоказателей = ДанныеФормыПоказатели.Выгрузить();
	
	Если Не УходЗаРебенком Тогда  	
		Если ДанныеПоказателей.Колонки.Найти("РабочееМесто") = Неопределено Тогда
			ДанныеПоказателей.Колонки.Добавить("РабочееМесто", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			Если СотрудникиДаты.Количество() > 0 Тогда
				ДанныеПоказателей.ЗаполнитьЗначения(СотрудникиДаты[0].Сотрудник, "РабочееМесто");			
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначенияПоказателейДокумента", ДанныеПоказателей);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиДаты);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = ФормироватьСПериодичностьДень;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", ДокументСсылка);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПоказателейДокумента.НомерСтроки,
	|	ЗначенияПоказателейДокумента.РабочееМесто,
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
	|	ЗначенияПоказателейДокумента.Значение,
	|	ЗначенияПоказателейДокумента.Показатель
	|ПОМЕСТИТЬ ВТЗначенияПоказателейДокумента
	|ИЗ
	|	&ЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейДокумента.НомерСтроки,
	|	ЗначенияПоказателейДокумента.РабочееМесто КАК РабочееМесто,
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета,
	|	ЗначенияПоказателейДокумента.Показатель,
	|	ЗначенияПоказателейДокумента.Значение,
	|	ЕСТЬNULL(ЗначенияПериодическихПоказателей.Значение, 0) КАК ТекущееЗначение,
	|	ЕСТЬNULL(ПрименениеДополнительныхПоказателей.Применение, ЛОЖЬ) КАК ДействующийПоказатель
	|ИЗ
	|	ВТЗначенияПоказателейДокумента КАК ЗначенияПоказателейДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеДополнительныхПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ПрименениеДополнительныхПоказателей
	|		ПО ЗначенияПоказателейДокумента.Показатель = ПрименениеДополнительныхПоказателей.Показатель
	|			И ЗначенияПоказателейДокумента.РабочееМесто = ПрименениеДополнительныхПоказателей.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПериодическихПоказателей
	|		ПО ЗначенияПоказателейДокумента.Показатель = ЗначенияПериодическихПоказателей.Показатель
	|			И ЗначенияПоказателейДокумента.РабочееМесто = ЗначенияПериодическихПоказателей.Сотрудник
	|ГДЕ
	|	ЗначенияПоказателейДокумента.ИдентификаторСтрокиВидаРасчета = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого ДанныеСтроки Из ДанныеФормыПоказатели Цикл
		СтруктураПоиска.НомерСтроки = ДанныеСтроки.НомерСтроки;
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ДанныеСтроки.ДействующийПоказатель = Выборка.ДействующийПоказатель;
			ДанныеСтроки.ТекущееЗначение = Выборка.ТекущееЗначение;
		КонецЕсли;
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьКомментарииДействийСДополнительнымПоказателем(ДанныеСтроки);		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура РедактированиеСоставаДополнительныхПоказателейУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета)
	
	ИмяТаблицы = "Показатели"; 
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
 
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ГруппаОтбораИ =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ДействующийПоказатель" );
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Значение");
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ТекущееЗначение");
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Действие" );
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".ДействующийПоказатель" );
	ЭлементОтбора.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НовыеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказателей + ".Действие");
	ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);	
	
КонецПроцедуры	

// Настраивает таблицу ввода дополнительных тарифных ставок, коэффициентов и т.д. в документах-редакторах плановых
// начислений.
//
Процедура УстановитьСвойстваТаблицыВводаДополнительныхТарифныхСтавок(Форма, РежимРаботы) Экспорт 
	
	Если РежимРаботы <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоТарифныхСтавок") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПоказателиГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	// Устанавливаем свойства для ввода дополнительных тарифных ставок в кадровых документах.
	Если Форма.Элементы.Найти("Показатели") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Показатели с нулевым идентификатором строки - независимые.
	Форма.Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторСтрокиВидаРасчета", 0);
	
	// Настраиваем параметры выбора показателя.
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных
	               |ИЗ
	               |	Справочник.ПоказателиРасчетаЗарплаты КАК ПоказателиРасчетаЗарплаты
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплаты.ИмяПредопределенныхДанных <> ""РайонныйКоэффициент""";
				   
	МассивИменПредопределенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");
	
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.СпособПримененияЗначений", Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НазначениеПоказателя", Перечисления.НазначенияПоказателейРасчетаЗарплаты.ДляСотрудника));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЗначениеРассчитываетсяАвтоматически", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.НеИспользуется", Ложь));
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ИмяПредопределенныхДанных", МассивИменПредопределенных));
	
	Форма.Элементы.ПоказателиПоказатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Ограничение типа на значение.
	Форма.Элементы.ПоказателиЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
	
КонецПроцедуры

Процедура ВводНачисленийДобавитьЭлементыФормы(Форма, КоличествоПоказателейРасчета, КоличествоОтображаемыхПоказателей, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, ВидРасчетаВШапке, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь)
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	Если ДобавлятьРеквизитыФормы Тогда
	
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ПутьКДанным);
		
		ДобавляемыеРеквизиты = Новый Массив;
				
		// Добавляем реквизит для описания показателей, зависящих от стажа.
		Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
			Значение = Новый РеквизитФормы("ОписаниеСтажевыхПоказателей", Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(Значение);
			Если РежимРаботы = 1 Тогда
				Значение = Новый РеквизитФормы("ВидыСтажаПоказателей", Новый ОписаниеТипов(), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(Значение);
			КонецЕсли; 
		КонецЕсли; 
		
		// Реквизиты управления расчетом ФОТ.
		Если РежимРаботы <> 2 Тогда
			
			ФОТНеРедактируется = Новый РеквизитФормы("ФОТНеРедактируется", Новый ОписаниеТипов("Булево"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ФОТНеРедактируется);
				
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				РазмерМинДоРедактирования = Новый РеквизитФормы("РазмерМинДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерМинДоРедактирования);
				
				РазмерМаксДоРедактирования = Новый РеквизитФормы("РазмерМаксДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерМаксДоРедактирования);
			Иначе
				РазмерДоРедактирования = Новый РеквизитФормы("РазмерДоРедактирования", Новый ОписаниеТипов("Число"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(РазмерДоРедактирования);
			КонецЕсли;
			НачисленияФиксРасчет = Новый РеквизитФормы("НачисленияФиксРасчет", Новый ОписаниеТипов());
			ДобавляемыеРеквизиты.Добавить(НачисленияФиксРасчет);
		КонецЕсли; 
		
		// Добавим представление периода действия.
		ПредставлениеПериодаДействия = Новый РеквизитФормы("ПредставлениеПериодаДействия", Новый ОписаниеТипов("Строка"), ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(ПредставлениеПериодаДействия);
		
		МаксимальноеКоличествоПоказателейРеквизит = 
			Новый РеквизитФормы(ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаМаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ОписаниеТаблицыВидовРасчета), Новый ОписаниеТипов("Число"));
		ДобавляемыеРеквизиты.Добавить(МаксимальноеКоличествоПоказателейРеквизит);
		
		// Реквизиты формы.
		ЗаголовокВидаРасчета = Новый РеквизитФормы("ПустаяСтрокаЗаголовка", Новый ОписаниеТипов("Строка"), ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(ЗаголовокВидаРасчета);
		
		ТипЗначенияПоказателя = Справочники.ПоказателиРасчетаЗарплаты.ОписаниеТиповЗначенияПоказателяРасчетаЗарплаты();
		
		Для НомерПоказателя = 1 По КоличествоПоказателейРасчета Цикл
			Показатель = Новый РеквизитФормы("Показатель" + НомерПоказателя, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(Показатель);
			
			ПредставлениеПоказателя = Новый РеквизитФормы("ПредставлениеПоказателя" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ПредставлениеПоказателя);
			
			ТочностьПоказателя = Новый РеквизитФормы("ТочностьПоказателя" + НомерПоказателя, Новый ОписаниеТипов("Строка"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ТочностьПоказателя);
			
			ОтменяемыйПоказатель = Новый РеквизитФормы("ОтменяемыйПоказатель" + НомерПоказателя, Новый ОписаниеТипов("Булево"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ОтменяемыйПоказатель);
			
			Если РежимРаботы <> 2 Тогда
				ДопускаетсяНулевоеЗначениеПоказателя = Новый РеквизитФормы("ДопускаетсяНулевоеЗначение" + НомерПоказателя, Новый ОписаниеТипов("Булево"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(ДопускаетсяНулевоеЗначениеПоказателя);
			КонецЕсли;

			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					МинимальноеЗначение = Новый РеквизитФормы("МинимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(МинимальноеЗначение);
					МаксимальноеЗначение = Новый РеквизитФормы("МаксимальноеЗначение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(МаксимальноеЗначение);
				Иначе
					Значение = Новый РеквизитФормы("Значение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(Значение);
				КонецЕсли;
			Иначе
				Значение = Новый РеквизитФормы("Значение" + НомерПоказателя, ТипЗначенияПоказателя, ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(Значение);
				КомандаРасшифровки = Новый РеквизитФормы("КомандаРасшифровки" + НомерПоказателя, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(КомандаРасшифровки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если РежимРаботы = 2 Тогда
			Если ИмяПВР = "Удержания" Тогда
				ИспользованиеПериода = Новый РеквизитФормы("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"), ПутьКДанным);
				ДобавляемыеРеквизиты.Добавить(ИспользованиеПериода);
			Иначе
				Если ОписаниеТаблицыВидовРасчета.СодержитПолеВидРасчета = Истина Тогда
					ИспользованиеПериода = Новый РеквизитФормы("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"), ПутьКДанным);
					ДобавляемыеРеквизиты.Добавить(ИспользованиеПериода);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРаботы = 2 
			И ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеМестоПолученияДохода") 
			И ОписаниеТаблицыВидовРасчета.СодержитПолеМестоПолученияДохода Тогда
			ДоступноМестоПолученияДохода = Новый РеквизитФормы("ДоступноМестоПолученияДохода", Новый ОписаниеТипов("Булево"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(ДоступноМестоПолученияДохода);
		КонецЕсли;
		
		Если ИмяПВР = "Удержания" И РежимРаботы = 2 Тогда
			КатегорияУдержания = Новый РеквизитФормы("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"), ПутьКДанным);
			ДобавляемыеРеквизиты.Добавить(КатегорияУдержания);
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДобавитьРеквизитыОтображенияВремени(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета);
		
		// Добавление реквизитов редактирования РК и СН в кадровых документах.
		ДобавитьРеквизитыНачисленийРедактируемыхВОтдельныхПолях(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		
		// Признак не рассчитываемого вида расчета.
		ФиксированнаяСумма = Новый РеквизитФормы("ФиксированнаяСумма",  
												Новый ОписаниеТипов("Булево"),
												ПутьКДанным);
												
		ДобавляемыеРеквизиты.Добавить(ФиксированнаяСумма);
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда 
			РазрешеноРедактироватьСторно = Новый РеквизитФормы(
				ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаРазрешеноРедактироватьСторно(ОписаниеТаблицыВидовРасчета.ИмяТаблицы),
				Новый ОписаниеТипов("Булево"));
			ДобавляемыеРеквизиты.Добавить(РазрешеноРедактироватьСторно);
		КонецЕсли;
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		// Устанавливает ссылки на начисления РК и СН в форме с редактирование РК и СН в отдельных элементах.
		УстановитьНачисленияРедактируемыеВОтдельныхПоляхФормы(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы);
		
	КонецЕсли;
	
	Если НЕ ОтложенноеИзменение Тогда
	// Установка реквизитов формы "МаксимальноеЗначениеПоказателей...".
		Форма[ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаМаксимальноеКоличествоПоказателейПоОписаниюТаблицы(ОписаниеТаблицыВидовРасчета)] = КоличествоОтображаемыхПоказателей;
	КонецЕсли;
		
	Если ДобавлятьЭлементыФормы Тогда
		
		ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
		ИмяПоляДляВставкиПоказателей = ОписаниеТаблицыВидовРасчета.ИмяПоляДляВставкиПоказателей; 
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПерерасчеты Тогда
			ИмяКоманды = ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаРазрешеноРедактироватьСторно(ИмяТаблицы);
			Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
				КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
				КомандаФормы.Заголовок = НСтр("ru = 'Разрешить редактирование сторнирующих строк';
												|en = 'Allow editing reversing lines'");
				КомандаФормы.Действие = "Подключаемый_" + ИмяКоманды;
			КонецЕсли;
			
			Если Форма.Элементы.Найти(ИмяКоманды) = Неопределено Тогда
				КоманднаяПанельТаблицы = НайтиКоманднуюПанельТаблицы(Форма.Элементы[ИмяТаблицы]);
				Элемент = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КоманднаяПанельТаблицы);
				Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				Элемент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю; 
				Элемент.ИмяКоманды = ИмяКоманды;
			КонецЕсли;
		КонецЕсли;
		
		РасчетЗарплатыРасширенныйФормы.ДокументыВыполненияНачисленийДополнитьФормуПолямиОтображенияВремени(Форма, ОписаниеТаблицыВидовРасчета);
		
		ЗаголовокГруппыПоказатели = НСтр("ru = 'Показатели';
										|en = 'Indicators'");
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			ЗаголовокГруппыПоказатели = НСтр("ru = 'Показатели (мин/макс)';
											|en = 'Indicators (min/max)'");
		КонецЕсли; 
		
		// Описание показателей, зависящих от стажа размещаем вместе с начислением.
		Если РежимРаботы <> 2 Тогда
			ПолеНачисление = Форма.Элементы.Найти(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета);
			Если ПолеНачисление <> Неопределено Тогда
				ИмяГруппы = ПолеНачисление.Имя + "Группа";
				Группа = Форма.Элементы.Найти(ИмяГруппы);
				Если Группа = Неопределено Тогда
					Группа = Форма.Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), ПолеНачисление.Родитель, ПолеНачисление);
					Группа.Вид = ВидГруппыФормы.ГруппаКолонок;
					Группа.Группировка = ГруппировкаКолонок.Горизонтальная;
					Группа.ОтображатьВШапке = Истина;
					Группа.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
					
					Если ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Начисления"
						Или ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "НачисленияДоЗачисленияВСпискиЧасти"
						Или ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "УправленческиеНачисления" Тогда
						
						Группа.Заголовок = НСтр("ru = 'Начисление';
												|en = 'Accrual'");
						
					ИначеЕсли ОписаниеТаблицыВидовРасчета.ИмяТаблицы = "Льготы" Тогда 
						Группа.Заголовок = НСтр("ru = 'Льгота';
												|en = 'Benefit'");
					Иначе
						Группа.Заголовок = НСтр("ru = 'Удержание';
												|en = 'Deduction'");
					КонецЕсли;
					
					ПолеНачисление.ОтображатьВШапке = Ложь;
					ПолеНачисление.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
					ПолеНачисление.Ширина = 14;
					ПолеНачисление.РастягиватьПоГоризонтали = Истина;
					
					Форма.Элементы.Переместить(ПолеНачисление,Группа);
					
					ПолеОписаниеСтажевыхПоказателей = Форма.Элементы.Добавить(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "ОписаниеСтажевыхПоказателей", Тип("ПолеФормы"), Группа);
					ПолеОписаниеСтажевыхПоказателей.Вид = ВидПоляФормы.ПолеНадписи;
					ПолеОписаниеСтажевыхПоказателей.ТолькоПросмотр = Истина;
					ПолеОписаниеСтажевыхПоказателей.ОтображатьВШапке = Ложь;
					ПолеОписаниеСтажевыхПоказателей.Ширина = 11;
					ПолеОписаниеСтажевыхПоказателей.РастягиватьПоГоризонтали = Истина;
					ПолеОписаниеСтажевыхПоказателей.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
					ПолеОписаниеСтажевыхПоказателей.ПутьКДанным = ПутьКДанным + ".ОписаниеСтажевыхПоказателей";
					
					Если РежимРаботы = 1 Тогда
						ПолеОписаниеСтажевыхПоказателей.ГиперссылкаЯчейки = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		// поля формы
		Таблица = Форма.Элементы.Найти(ИмяТаблицы);
		
		ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "Показатели");
		Если ГруппаПоказатели = Неопределено Тогда
			
			ГруппаПоказатели = Форма.Элементы.Добавить(ИмяТаблицы + "Показатели", Тип("ГруппаФормы"), Таблица);
			ГруппаПоказатели.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаПоказатели.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаПоказатели.ОтображатьВШапке = Не ВидРасчетаВШапке;
			
			ПолеДляВставкиПоказателей = Неопределено;
			Если Не ПустаяСтрока(ИмяПоляДляВставкиПоказателей) Тогда
				Если СтрЗаканчиваетсяНа(ИмяПоляДляВставкиПоказателей, ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат)
					И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
					И Форма.Элементы.Найти(ИмяТаблицы + "РанееНачислено") <> Неопределено Тогда
					ПолеДляВставкиПоказателей = Форма.Элементы.Найти(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат + "Группа");
				КонецЕсли;
				Если ПолеДляВставкиПоказателей = Неопределено Тогда
					ПолеДляВставкиПоказателей = Форма.Элементы.Найти(ИмяПоляДляВставкиПоказателей);
				КонецЕсли;
			КонецЕсли;
			Форма.Элементы.Переместить(ГруппаПоказатели, Таблица, ПолеДляВставкиПоказателей);
		КонецЕсли;
		ГруппаПоказатели.Заголовок = ЗаголовокГруппыПоказатели;
		
		МассивНовыхПоказателей  = Новый Массив;
		Для НомерПоказателя = 1 По КоличествоОтображаемыхПоказателей Цикл
			МассивНовыхПоказателей.Добавить(НомерПоказателя);
			ГруппаПоказателя = Форма.Элементы.Найти(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя);
			Если ГруппаПоказателя = Неопределено Тогда
				
				ГруппаПоказателя = Форма.Элементы.Добавить(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя, Тип("ГруппаФормы"), ГруппаПоказатели);
				ГруппаПоказателя.Вид = ВидГруппыФормы.ГруппаКолонок;
				ГруппаПоказателя.Группировка = ГруппировкаКолонок.Горизонтальная;
				ГруппаПоказателя.ОтображатьВШапке = Ложь;
				
				Если Не ВидРасчетаВШапке Тогда
					Показатель = Форма.Элементы.Добавить(ИмяТаблицы + "Показатель" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
					Показатель.ПутьКДанным = ПутьКДанным + ".Показатель" + НомерПоказателя;
					Показатель.ТолькоПросмотр = Истина;
					Показатель.ОтображатьВШапке = Ложь;
					Показатель.Ширина = 20;
				КонецЕсли;	
				
				Если РежимРаботы = 0 Тогда
					Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
						
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					Иначе
						Значение = Форма.Элементы.Добавить(ИмяТаблицы + "Значение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаПоказателя);
						Значение.Вид = ВидПоляФормы.ПолеВвода;
						Значение.ПутьКДанным = ПутьКДанным + ".Значение" + НомерПоказателя;
						Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
						Значение.ОтображатьВШапке = Ложь;
						Значение.Ширина = 10;
						Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					КонецЕсли;
				Иначе
					ГруппаЗначения = Форма.Элементы.Добавить(ИмяТаблицы + "ГруппаЗначенияПоказателя" + НомерПоказателя, Тип("ГруппаФормы"), ГруппаПоказателя);
					ГруппаЗначения.Вид = ВидГруппыФормы.ГруппаКолонок;
					ГруппаЗначения.Группировка = ГруппировкаКолонок.Вертикальная;
					ГруппаЗначения.ОтображатьВШапке = Ложь;
					
					Значение = Форма.Элементы.Добавить(ИмяТаблицы + "Значение" + НомерПоказателя, Тип("ПолеФормы"), ГруппаЗначения);
					Значение.Вид = ВидПоляФормы.ПолеВвода;
					Значение.ПутьКДанным = ПутьКДанным + ".Значение" + НомерПоказателя;
					Значение.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
					Значение.ОтображатьВШапке = ВидРасчетаВШапке;
					Значение.Ширина = 10;
					Значение.УстановитьДействие("ПриИзменении", "Подключаемый_ЗначениеПоказателяПриИзменении" + ИмяТаблицы);
					
					КомандаРасшифровки = Форма.Элементы.Добавить(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя, Тип("ПолеФормы"), ГруппаЗначения);
					КомандаРасшифровки.Вид = ВидПоляФормы.ПолеНадписи;
					КомандаРасшифровки.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
					КомандаРасшифровки.ПутьКДанным = ПутьКДанным + ".КомандаРасшифровки" + НомерПоказателя;
					КомандаРасшифровки.ОтображатьВШапке = Ложь;
					КомандаРасшифровки.Ширина = 10;
					КомандаРасшифровки.ГиперссылкаЯчейки = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоОтображаемыхПоказателей < ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,ИмяПВР, РежимРаботы) Тогда
			Для НомерПоказателя = КоличествоОтображаемыхПоказателей + 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета,, РежимРаботы) Цикл
				ГруппаПоказатели = Форма.Элементы.Найти(ИмяТаблицы + "ГруппаПоказатель" + НомерПоказателя);
				Если Не ГруппаПоказатели = Неопределено Тогда
					ЗарплатаКадры.УдалитьПодчиненныеЭлементыГруппы(Форма, ГруппаПоказатели);
					Форма.Элементы.Удалить(ГруппаПоказатели);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Добавление элементов формы для редактирования РК и СН в кадровых документах.
		ДобавитьЭлементыФормыНачисленийРедактируемыхВОтдельныхПолях(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы);
		
		ЭлементРезультат = Форма.Элементы.Найти(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат);
		Если РежимРаботы = 2 
			И ИмяПВР = "Начисления"
			И Не СтрНачинаетсяС(ИмяТаблицы, "Пособия")
			И Не СтрНачинаетсяС(ИмяТаблицы, "ДенежноеСодержание")
			И Не СтрНачинаетсяС(ИмяТаблицы, "ДенежноеДовольствие")
			И Не ОписаниеТаблицыВидовРасчета.Свойство("ЭтоРасчетРезервов")
			И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых()
			И Форма.Элементы.Найти(ИмяТаблицы + "РанееНачислено") = Неопределено
			И ЭлементРезультат <> Неопределено Тогда
			
			ИмяГруппыНачисленияРезультат = ОписаниеТаблицыВидовРасчета.ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат + "Группа";
			ЭлементРезультат = Форма.Элементы.Найти(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат);
			ГруппаНачисленияРезультат = Форма.Элементы.Найти(ИмяГруппыНачисленияРезультат);
			Если ГруппаНачисленияРезультат = Неопределено Тогда
				ГруппаНачисленияРезультат = Форма.Элементы.Вставить(
					ИмяГруппыНачисленияРезультат,
					Тип("ГруппаФормы"),
					Таблица,
					ЭлементРезультат);
				ГруппаНачисленияРезультат.Группировка = ГруппировкаКолонок.Вертикальная;
				Форма.Элементы.Переместить(ЭлементРезультат, ГруппаНачисленияРезультат);
			КонецЕсли;
			
			ТекущийШрифт = Таблица.Шрифт;
			
			Значение = Форма.Элементы.Вставить(ИмяТаблицы + "РанееНачислено", Тип("ПолеФормы"), ГруппаНачисленияРезультат);
			Значение.Вид = ВидПоляФормы.ПолеВвода;
			Значение.ПутьКДанным = ПутьКДанным + ".РанееНачислено";
			Значение.ТолькоПросмотр = Истина;
			Значение.Шрифт = Новый Шрифт(Таблица.Шрифт, , , , Истина);
			Значение.Формат = "ЧДЦ=2; ЧФ='Ранее начислено: Ч'";
			Значение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Значение.ОтображатьВПодвале = Ложь;
			Значение.ОтображатьВШапке = Ложь;
			Значение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
			
			Если ОписаниеТаблицыВидовРасчета.СодержитРегистраторРазовогоНачисления
				И Форма.Элементы.Найти(ИмяТаблицы + "РегистраторРазовогоНачисления") = Неопределено Тогда
				Значение = Форма.Элементы.Вставить(ИмяТаблицы + "РегистраторРазовогоНачисления", Тип("ПолеФормы"), Таблица, ГруппаНачисленияРезультат);
				Значение.Вид = ВидПоляФормы.ПолеВвода;
				Значение.ПутьКДанным = ПутьКДанным + ".РегистраторРазовогоНачисления";
				Значение.ТолькоПросмотр = Истина;
				Значение.Заголовок = "Основание";
			КонецЕсли;
			
		КонецЕсли;
		
		ВводНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, МассивНовыхПоказателей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоместитьДанныеПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения = Ложь, РасчетныйДокументСсылка = Неопределено, ФормаДополнена = Истина, Сотрудник = Неопределено, ДатаСведений = '00010101', ИспользоватьВилкуЗначений = Ложь) Экспорт
	
	ОтборСтрокПоказателей = Новый Структура("ИдентификаторСтрокиВидаРасчета,Показатель");
	ОтборСтрокПоказателей.ИдентификаторСтрокиВидаРасчета = СтрокаНачислений.ИдентификаторСтрокиВидаРасчета;
	
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	Если РежимРаботы = 2 Тогда
		МаксимальноеЧислоПоказателей = ВидРасчетаИнфо.КоличествоОтображаемыхПоказателей;
	Иначе
		МаксимальноеЧислоПоказателей = ВидРасчетаИнфо.КоличествоПостоянныхПоказателей;
	КонецЕсли;
	Если МаксимальноеЧислоПоказателей > 0 И Не СтрокаНачислений.Свойство("Показатель" + МаксимальноеЧислоПоказателей) Тогда
		ТекстПредупреждения = ЗарплатаКадрыРасширенныйКлиентСервер.ТекстПредупрежденияОписаниеНачисленийИзменилось();
		ФормаДополнена = Ложь;
		ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	Если РежимРаботы = 2 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВидРасчетаИнфо);
	ИначеЕсли ВидРасчетаИнфо.Свойство("ФОТНеРедактируется") Тогда
		СтрокаНачислений.ФОТНеРедактируется = ВидРасчетаИнфо.ФОТНеРедактируется;
	КонецЕсли;
	
	СведенияСтрокиНачисленияЗависящегоОтСтажа = ЗарплатаКадрыРасширенныйКлиентСервер.СведенияСтрокиНачисленияЗависящегоОтСтажа();
	СведенияСтрокиНачисленияЗависящегоОтСтажа.Сотрудник = Сотрудник;
	СведенияСтрокиНачисленияЗависящегоОтСтажа.ДатаСведений = ДатаСведений;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		
		ПоказательИнфо = СведенияОПоказателеРасчетаЗарплаты(СтрокаПоказателя.Показатель);
		
		ЗарплатаКадрыРасширенныйКлиентСервер.ПодготовитьИнформациюОСтажевыхПоказателях(СведенияСтрокиНачисленияЗависящегоОтСтажа, ПоказательИнфо, РежимРаботы);
		
		// Принимается решение о том, отображаемый ли это показатель или нет.
		Если РежимРаботы = 2 Тогда
			ОтображатьПоказатель = СтрокаПоказателя.ИспользоватьПриРасчете И ПоказательИнфо.ОтображатьВДокументахНачисления;
		Иначе
			ОтображатьПоказатель = СтрокаПоказателя.ЗапрашиватьПриВводе И ПоказательИнфо.СпособПримененияЗначений = Перечисления.СпособыПримененияЗначенийПоказателейРасчетаЗарплаты.Постоянное;
		КонецЕсли;
		
		Если Не ОтображатьПоказатель Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНачислений["Показатель" + СчетчикПоказателей] 				= СтрокаПоказателя.Показатель;
		СтрокаНачислений["ТочностьПоказателя" + СчетчикПоказателей] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", ПоказательИнфо.Точность);
		СтрокаНачислений["ПредставлениеПоказателя" + СчетчикПоказателей] 	= ?(ЗначениеЗаполнено(ПоказательИнфо.КраткоеНаименование), ПоказательИнфо.КраткоеНаименование, ПоказательИнфо.Наименование);
		СтрокаНачислений["ОтменяемыйПоказатель" + СчетчикПоказателей]		= СтрокаПоказателя.ОтменяемыйПоказатель;
		
		ОтборСтрокПоказателей.Показатель = СтрокаПоказателя.Показатель;
		СтрокиПоказателей = ДанныеПоказателей.НайтиСтроки(ОтборСтрокПоказателей);
		Если СтрокиПоказателей.Количество() > 0 Тогда
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ЗначениеМин = СтрокиПоказателей[0].ЗначениеМин;
				ЗначениеМакс = СтрокиПоказателей[0].ЗначениеМакс;
			Иначе
				Значение = СтрокиПоказателей[0].Значение;
			КонецЕсли;
		Иначе
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ЗначениеМин = ПоказательИнфо.ЗначениеПоУмолчанию;
				ЗначениеМакс = ПоказательИнфо.ЗначениеПоУмолчанию;
			Иначе
				Значение = ПоказательИнфо.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
			СтрокаНачислений["МинимальноеЗначение" + СчетчикПоказателей] = ЗначениеМин;
			СтрокаНачислений["МаксимальноеЗначение" + СчетчикПоказателей] = ЗначениеМакс;
		Иначе
			СтрокаНачислений["Значение" + СчетчикПоказателей] = Значение;
		КонецЕсли;
		
		Если ОтображатьТекущиеЗначения Тогда
			Если РежимРаботы = 0 Тогда
				Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
					СтрокаНачислений["ТекущееМинимальноеЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееМинимальноеЗначение;
					СтрокаНачислений["ТекущееМаксимальноеЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееМаксимальноеЗначение;
				Иначе
					СтрокаНачислений["ТекущееЗначение" + СчетчикПоказателей] = СтрокиПоказателей[0].ТекущееЗначение;
				КонецЕсли;
			Иначе
				СтрокаНачислений["ТекущееЗначение" + СчетчикПоказателей] = Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если РежимРаботы <> 2 Тогда
			СтрокаНачислений["ДопускаетсяНулевоеЗначение" + СчетчикПоказателей] = СтрокаПоказателя.ДопускаетсяНулевоеЗначение;
		КонецЕсли;
		
		СчетчикПоказателей = СчетчикПоказателей + 1;
		
	КонецЦикла;
	
	ЗарплатаКадрыРасширенныйКлиентСервер.ПоместитьВСтрокуНачисленийИнформациюОСтажевыхПоказателях(СтрокаНачислений, СведенияСтрокиНачисленияЗависящегоОтСтажа, РежимРаботы);
	
	УчетСреднегоЗаработка.ЗаполнитьДанныеПоказателейРасчетаЗарплаты(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения, РасчетныйДокументСсылка);
	ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, РасчетныйДокументСсылка);
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетДенежногоДовольствия");
		Модуль.ЗаполнитьДанныеПоказателейДенежногоДовольствия(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, РасчетныйДокументСсылка);
	КонецЕсли;
	РасчетЗарплатыРасширенныйПереопределяемый.ПоместитьДанныеДополнительныхПоказателейВСтрокуТаблицыВидовРасчета(ВидРасчетаИнфо, СтрокаНачислений, ДанныеПоказателей, РежимРаботы, ОтображатьТекущиеЗначения);
	
КонецПроцедуры

Процедура ВводНачисленийРеквизитВДанныеТаблицыРасчета(Форма, Объект, ОписаниеТаблицы, РежимРаботы)
	
	// Коллекция в данных формы
	ДанныеФормыКоллекция = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	// В ряде случаев метод применяется для преобразования только данных формы (без данных объекта).
	ТолькоФорма = ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения");
	
	// Табличная часть объекта
	Если Не ТолькоФорма Тогда
		ЧастиИмениТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДанным, ".");
		ТаблицаОбъекта = Объект[ЧастиИмениТаблицы[ЧастиИмениТаблицы.ВГраница()]];
	КонецЕсли;
	
	ЧастиИмениТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеТаблицы.ПутьКДаннымПоказателей, ".");
	ИмяТаблицыПоказатели = ЧастиИмениТаблицы[ЧастиИмениТаблицы.ВГраница()];
	
	// Максимальное количество показателей в таблице.
	Если ОписаниеТаблицы.ИмяТаблицы = "Удержания"
		Или ОписаниеТаблицы.ИмяТаблицы = "УдержанияПерерасчет" Тогда
		
		ИмяПВР = "Удержания";
		
	Иначе
		ИмяПВР = "Начисления";
	КонецЕсли;
	КоличествоПоказателей = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы, ИмяПВР, РежимРаботы);
	
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
		ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
			Объект[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
	КонецЕсли;
	
	СодержитПолеДействие = ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицы);
	
	ИндексыУдаляемыхСтрок = Новый Массив;
	
	ИдентификаторСтроки = ОписаниеТаблицы.НомерТаблицы * 1000000 + 1;
	Индекс = 0;
	СтруктураДокументОснование = Новый Структура("ДокументОснование");
	Пока Индекс < ДанныеФормыКоллекция.Количество() Цикл
		
		// Устанавливаем номер-идентификатор строкам коллекций.
		Если Не ТолькоФорма Тогда
			ТаблицаОбъекта[Индекс].ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		КонецЕсли;
		
		СтрокаКоллекции = ДанныеФормыКоллекция[Индекс];
		СтрокаКоллекции.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		// Заполняем показатели в связанную табличную часть, устанавливаем идентификатор строки ведущей таблицы.
		Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			Если Не ОписаниеТаблицы.Свойство("ЭтоРасчетРезервов") Или ТолькоФорма Тогда
				ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
					СтрокаКоллекции[ОписаниеТаблицы.ИмяРеквизитаВидРасчета]);
			Иначе
				ИнфоОВидеРасчета = РезервыПоОплатеТрудаРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(
					Объект[ОписаниеТаблицы.ИмяРеквизитаВидОперации],
					Новый Структура(ОписаниеТаблицы.ИмяРеквизитаВидРасчета + "," + ОписаниеТаблицы.ИмяРеквизитаВидРасчетаРезерва,
						СтрокаКоллекции[ОписаниеТаблицы.ИмяРеквизитаВидРасчета], СтрокаКоллекции[ОписаниеТаблицы.ИмяРеквизитаВидРасчетаРезерва]),
					ОписаниеТаблицы);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнятьСтроку = Истина;
		Если ЗарплатаКадрыРасширенныйКлиентСервер.ПоказыватьВременноОтмененныеНачисления(ОписаниеТаблицы) Тогда
			Действие = ?(СодержитПолеДействие, СтрокаКоллекции.Действие, Неопределено);
			Если Не СтрокаКоллекции.ДействующийВидРасчета И Не ЗначениеЗаполнено(Действие) Тогда
				ИндексыУдаляемыхСтрок.Вставить(0, Индекс);
				ЗаполнятьСтроку = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаполнятьСтроку Тогда
			Если ИнфоОВидеРасчета.Рассчитывается = Ложь Тогда
				Если Не ТолькоФорма Тогда
					Если РежимРаботы <> 2 И ИнфоОВидеРасчета.Свойство("ВключатьВФОТ") И Не ИнфоОВидеРасчета.ВключатьВФОТ Тогда
						Если Не ПустаяСтрока(ОписаниеТаблицы.ИмяПоляРезультат)
							И СтрокаКоллекции.Свойство("Значение1") Тогда
							ТаблицаОбъекта[Индекс][ОписаниеТаблицы.ИмяПоляРезультат] = СтрокаКоллекции.Значение1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
					Если СтрокаКоллекции["Показатель" + НомерПоказателя].Пустая() Тогда
						// Нашли пустой показатель
						Прервать;
					КонецЕсли;
					
					ЭтоОтменяемыйПоказатель = СодержитПолеДействие
						И СтрокаКоллекции.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить
						И СтрокаКоллекции["ОтменяемыйПоказатель" + НомерПоказателя];
					
					Если РежимРаботы <> 0 И Не ЗначениеЗаполнено(СтрокаКоллекции["Значение" + НомерПоказателя])
						И Не ЭтоОтменяемыйПоказатель
						И ?(РежимРаботы = 2, Истина, Не СтрокаКоллекции["ДопускаетсяНулевоеЗначение" + НомерПоказателя]) Тогда
						// Значение показателя не заполнено - не переносим.
						Продолжить;
					КонецЕсли;
					НоваяСтрокаПоказателя = Объект[ИмяТаблицыПоказатели].Добавить();
					НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
					НоваяСтрокаПоказателя.Показатель = СтрокаКоллекции["Показатель" + НомерПоказателя];
					
					Если ЭтоОтменяемыйПоказатель Тогда
						НоваяСтрокаПоказателя.Действие = СтрокаКоллекции.Действие;
					КонецЕсли;
					
					Если СтрокаКоллекции.Свойство("ДокументОснование") Тогда
						СтруктураДокументОснование.ДокументОснование = СтрокаКоллекции.ДокументОснование;
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтруктураДокументОснование);
					КонецЕсли;
					Если РежимРаботы <> 0 Тогда
						НоваяСтрокаПоказателя.Значение = СтрокаКоллекции["Значение" + НомерПоказателя];
					Иначе
						Если СтрокаКоллекции.Свойство("ИдентификаторСтрокиПозиции") Тогда
							НоваяСтрокаПоказателя.ИдентификаторСтрокиПозиции = СтрокаКоллекции.ИдентификаторСтрокиПозиции;
						КонецЕсли;
						Если СтрокаКоллекции.Свойство("Значение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.Значение = СтрокаКоллекции["Значение" + НомерПоказателя];
						КонецЕсли;
						Если СтрокаКоллекции.Свойство("МинимальноеЗначение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.ЗначениеМин = СтрокаКоллекции["МинимальноеЗначение" + НомерПоказателя];
						КонецЕсли;
						Если СтрокаКоллекции.Свойство("МаксимальноеЗначение" + НомерПоказателя) Тогда
							НоваяСтрокаПоказателя.ЗначениеМакс = СтрокаКоллекции["МаксимальноеЗначение" + НомерПоказателя];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ИдентификаторСтроки = ИдентификаторСтроки + 1;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДобавитьСтрокиНачисленийРедактируемыхВОтдельныхПолях(Форма, Объект, ОписаниеТаблицы, РежимРаботы, ИдентификаторСтроки);
	
	// Удаление не действующих строк из таблицы объекта
	Если Не ТолькоФорма И ИндексыУдаляемыхСтрок.Количество() > 0 Тогда
		Для каждого Индекс Из ИндексыУдаляемыхСтрок Цикл
			ТаблицаОбъекта.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводНачисленийУстановитьУсловноеОформление(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИмяПВР, МассивНовыхПоказателей)
	
	ИмяТаблицы =  ОписаниеТаблицыВидовРасчета.ИмяТаблицы; 
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	
	ЭтоПерерасчеты = Ложь;
	ОписаниеТаблицыВидовРасчета.Свойство("ЭтоПерерасчеты", ЭтоПерерасчеты);	
	
	СодержитПолеДействие = ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета);
	
	Если ЭтоПерерасчеты Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
		ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСторно");
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяПоляРезультат);
	КонецЕсли;
	
	ДобавитьУсловноеОформлениеПолейПериода(Форма.УсловноеОформление, РежимРаботы, ОписаниеТаблицыВидовРасчета, ИмяПВР);
	
	// Условное оформление описания стажевых показателей.
	Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ОписаниеСтажевыхПоказателей" );
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицыВидовРасчета.ИмяТаблицы + "ОписаниеСтажевыхПоказателей");
		
	КонецЕсли; 
 
	ФОИспользоватьВилкуСтавокВШтатномРасписании = ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании");
	
	Если ОписаниеТаблицыВидовРасчета.ИспользоватьВилкуЗначений Тогда 
		ФОИспользоватьВилкуСтавокВШтатномРасписании = Истина;
	КонецЕсли;
	
	// Условное оформление полей ввода ФОТ.
	Если РежимРаботы = 0 ИЛИ РежимРаботы = 1 Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФОТНеРедактируется" );
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		Если РежимРаботы = 0 Тогда
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМин");
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМакс");
			Иначе
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
			КонецЕсли;
			
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
		КонецЕсли;
		
	КонецЕсли; 
	
	Для НомерПоказателя = 1 По ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицыВидовРасчета, ИмяПВР, РежимРаботы) Цикл
		
		Если МассивНовыхПоказателей.Найти(НомерПоказателя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТарифныеСеткиПриРасчетеЗарплаты")
			И ОписаниеТаблицыВидовРасчета.Свойство("ЗапретитьИзменениеПоказателяТарифнойСетки") Тогда 
			
			// Первый показатель используется также для ввода значения не рассчитываемого вида расчета.
			Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И НомерПоказателя = 1 Тогда 
				
				ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				ГруппаОтбораИЛИ = ГруппаОтбораИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				
			Иначе 
				
				ГруппаОтбораИЛИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				
			КонецЕсли;
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательТарифнойСетки");
			
			ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
		Иначе 
			
			// Первый показатель используется также для ввода значения не рассчитываемого вида расчета.
			Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания И НомерПоказателя = 1 Тогда 
				
				ГруппаОтбораИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
				ЭлементОтбора = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
			Иначе 
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		Если РежимРаботы = 0 Тогда
			
			Если ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
			Иначе
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
			КонецЕсли;
			
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
		Если ЭтоПерерасчеты Тогда
			// Показатель и значение не отображаются для сторно записей с ФиксСтрокой.
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			ГруппаОтбора =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСтрока");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(
				ЗарплатаКадрыРасширенныйКлиентСервер.ИмяРеквизитаРазрешеноРедактироватьСторно(ОписаниеТаблицыВидовРасчета.ИмяТаблицы));
			ЭлементОтбора.ПравоеЗначение = Ложь;
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
		// Наименования показателей выводятся курсивом.
		ТекущийШрифт = Форма.Элементы[ИмяТаблицы].Шрифт;
		НаклонныйШрифт = Новый Шрифт(ТекущийШрифт, , , , Истина);
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", НаклонныйШрифт);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
		
		Если ОписаниеТаблицыВидовРасчета.ЭтоПлановыеНачисленияУдержания Тогда 
		
			// Оформление размера не рассчитываемого вида расчета.
			Если НомерПоказателя = 1 Тогда
				
				ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
					НСтр("ru = 'Фиксированная сумма';
						|en = 'Fixed amount'"));
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
				ЭлементОтбора.ПравоеЗначение = Истина;
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
				
			КонецЕсли;
			
			// Для не рассчитываемых видов расчета размер ФОТ не редактируется.
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксированнаяСумма");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМин");
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РазмерМакс");
			Иначе 
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Размер");
			КонецЕсли;
			
		КонецЕсли;
		
		// Не заполненные значения показателей отображаются как "0".
		Если РежимРаботы = 0 И ФОИспользоватьВилкуСтавокВШтатномРасписании Тогда
				
			// Минимальные значения
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МинимальноеЗначение" + НомерПоказателя);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
			
			// Максимальные значения
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".МаксимальноеЗначение" + НомерПоказателя);
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
			
		Иначе
			
			ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "0");
			Если ИмяТаблицы <> "Удержания" И НЕ СодержитПолеДействие И РежимРаботы = 1 И  ОписаниеТаблицыВидовРасчета.Свойство("ОтмечатьНеЗаполненныеПоказатели") И ОписаниеТаблицыВидовРасчета.ОтмечатьНеЗаполненныеПоказатели Тогда
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			КонецЕсли; 
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДопускаетсяНулевоеЗначение" + НомерПоказателя);	
			ЭлементОтбора.ПравоеЗначение = Ложь;
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
			
			Если ИмяТаблицы <> "Удержания" И СодержитПолеДействие И РежимРаботы = 1 Тогда
				
				ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Значение" + НомерПоказателя);
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДопускаетсяНулевоеЗначение" + НомерПоказателя);	
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Действие");
				ЭлементОтбора.ПравоеЗначение = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Представление показателя - отображается краткое наименование.
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ПредставлениеПоказателя" + НомерПоказателя));
		
		ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора =	ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Показатель" + НомерПоказателя);
		
		Если ЭтоПерерасчеты Тогда
			
			ГруппаОтбораИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ФиксСтрока");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			ЭлементОтбора = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".Сторно");
			ЭлементОтбора.ПравоеЗначение = Истина;
			
		КонецЕсли;
	
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Показатель" + НомерПоказателя);
		
		// Оформление команды расшифровки:
		// - не видима, если не заполнена.
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КомандаРасшифровки" + НомерПоказателя);
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя);
		
		// - цвет текста
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "КомандаРасшифровки" + НомерПоказателя);
		
		// Добавим условное оформление формата в зависимости от точности показателя.
		ДобавитьУсловноеОформлениеФорматаЗначенияПоказателя(Форма, ПутьКДанным, ИмяТаблицы, НомерПоказателя, РежимРаботы, ОписаниеТаблицыВидовРасчета);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование) Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДоступенВыборОснования");
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ОписаниеТаблицыВидовРасчета.ИмяРеквизитаДокументОснование);
				
	КонецЕсли;
	
	Если ИмяПВР = "Удержания" И РежимРаботы = 2 Тогда
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		СписокРолей = Новый СписокЗначений;
		СписокРолей.Добавить(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
		СписокРолей.Добавить(Перечисления.КатегорииУдержаний.ВознаграждениеПлатежногоАгента);
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".КатегорияУдержания");
		ЭлементОтбора.ПравоеЗначение = СписокРолей;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Получатель");
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПлатежныйАгент");
	КонецЕсли;
	
	Если ОписаниеТаблицыВидовРасчета.Свойство("СодержитПолеМестоПолученияДохода") 
		И ОписаниеТаблицыВидовРасчета.СодержитПолеМестоПолученияДохода
		И РежимРаботы = 2 Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ДоступноМестоПолученияДохода");
		ЭлементОтбора.ПравоеЗначение = Ложь;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МестоПолученияДохода");
		
	КонецЕсли;
	
	Если РежимРаботы = 2 
		И ИмяПВР = "Начисления"
		И Не СтрНачинаетсяС(ИмяТаблицы, "Пособия")
		И ЗарплатаКадрыРасширенныйПовтИсп.ВыполнятьРасчетЗависимыхНачисленийПриРазовых() Тогда
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ЭлементУсловногоОформления.Отбор, 
			ПутьКДанным + ".НомерСтроки",
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
			0);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РанееНачислено");
		Если ОписаниеТаблицыВидовРасчета.СодержитРегистраторРазовогоНачисления Тогда
			ЭлементУсловногоОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "РегистраторРазовогоНачисления");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеФорматаЗначенияПоказателя(Форма, ПутьКДанным, ИмяТаблицы, НомерПоказателя, РежимРаботы, ОписаниеТаблицыВидовРасчета)
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", Новый ПолеКомпоновкиДанных(ПутьКДанным + ".ТочностьПоказателя" + НомерПоказателя));
	
	Если РежимРаботы = 0 Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВилкуСтавокВШтатномРасписании") Тогда
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МинимальноеЗначение" + НомерПоказателя);
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "МаксимальноеЗначение" + НомерПоказателя);
		Иначе
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
		КонецЕсли;
		
	Иначе
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "Значение" + НомерПоказателя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеПолейПериода(УсловноеОформление, РежимРаботы, ОписаниеТаблицы, ИмяПВР)
	
	Если РежимРаботы <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	// Условное оформление полей с датами и периодом.
	ИмяРеквизитаДатаНачала  = ОписаниеТаблицы.ИмяРеквизитаДатаНачала;
	ИмяРеквизитаДатаОкончания  = ОписаниеТаблицы.ИмяРеквизитаДатаОкончания;
	
	Если ИмяРеквизитаДатаНачала = Неопределено Или ИмяРеквизитаДатаОкончания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы =  ОписаниеТаблицы.ИмяТаблицы; 
	ПутьКДанным = ОписаниеТаблицы.ПутьКДанным;
	
	Если ИмяПВР = "Удержания" Тогда
		// Оформление для удержаний.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользуетсяПериод",
			ВидСравненияКомпоновкиДанных.Равно,
			Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаНачала);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаОкончания);
	Иначе
		// Скрываем даты для строк без периода действия.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользованиеПериода",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаНачала);
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяРеквизитаДатаОкончания);
		// Скрываем месяц для строк с периодом действия.
		Элемент = УсловноеОформление.Элементы.Добавить();
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Элемент.Отбор,
			ПутьКДанным + ".ИспользованиеПериода",
			ВидСравненияКомпоновкиДанных.Равно,
			Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
		Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПериодДействия");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьПоказатели(ВидРасчетаОбъект, ИдентификаторыПоказателей, ИмяСвойства)
	
	Если ИдентификаторыПоказателей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредопределенныеПоказатели = ЗарплатаКадрыРасширенныйПовтИсп.ИменаПредопределенныхПоказателей();
	
	Для Каждого ИдентификаторПоказателя Из ИдентификаторыПоказателей Цикл
		
		Если ПредопределенныеПоказатели.Найти(ИдентификаторПоказателя) <> Неопределено Тогда 
			ПоказательСсылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты." + ИдентификаторПоказателя);
		Иначе 
			ПоказательСсылка = РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(ИдентификаторПоказателя);
		КонецЕсли;
		
		НайденныеСтроки = ВидРасчетаОбъект.Показатели.НайтиСтроки(Новый Структура("Показатель", ПоказательСсылка));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока[ИмяСвойства] = Истина;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает таблицу  в одной колонке которой рабочие места физического лица, используемые в документе,
// а во второй колонке дата документа.
Функция НесколькоРабочихМестТаблицаСотрудниковДат(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест)
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	
	ТаблицаСотрудников = ТаблицаРабочихМест.Выгрузить(,ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник);
	ТаблицаСотрудников.Свернуть(ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник);
	ТаблицаСотрудников.Колонки[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник].Имя = "Сотрудник";
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ВремяРегистрации = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ДатаПутьКДанным);
	ТаблицаСотрудников.ЗаполнитьЗначения(ВремяРегистрации - 1, "Период");
	Возврат ТаблицаСотрудников
КонецФункции

// Процедура добавляет на форму служебные реквизиты для работы с несколькими рабочими местами одного физлица,
// а в таблицы начислений, авансов и плановых начислений реквизиты хранящие рабочее место, представление этого рабочего
// места и элементы для отображения этих реквизитов.
Процедура НесколькоРабочихМестДобавитьРеквизитыИЭлементы(Форма, ОписаниеФормы, СтруктураТаблицФормы, ДобавлятьЭлементыФормы = Истина, ДобавлятьРеквизитыФормы = Истина, ОтложенноеИзменение = Ложь)
	
	ОписаниеТаблицыРабочихМест = СтруктураТаблицФормы.ОписаниеТаблицыРабочихМест;
	ОписаниеТаблицыНачислений = СтруктураТаблицФормы.ОписаниеТаблицыНачислений;
	ОписаниеТаблицыАвансов = СтруктураТаблицФормы.ОписаниеТаблицыАвансов;
	ОписаниеТаблицыПрименениеПлановыхНачислений = СтруктураТаблицФормы.ОписаниеТаблицыПрименениеПлановыхНачислений;
	ОписаниеТаблицыПересчетТарифныхСтавок = СтруктураТаблицФормы.ОписаниеТаблицыПересчетТарифныхСтавок;
	ОписаниеТаблицыОплатаТруда = СтруктураТаблицФормы.ОписаниеТаблицыОплатаТруда;
	ОписаниеТаблицыЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыЛьгот;
	ОписаниеТаблицыОплатаЛьгот = СтруктураТаблицФормы.ОписаниеТаблицыОплатаЛьгот;
	
	Если ДобавлятьРеквизитыФормы Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		МассивИменРеквизитовФормы = Новый Массив;
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
		ДобавляемыеРеквизиты.Очистить();
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),	ОписаниеТаблицыРабочихМест.ПутьКДанным);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыРабочихМест.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыРабочихМест.ИмяРеквизитаПодразделение, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"), ОписаниеТаблицыРабочихМест.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест, Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			
			ОписаниеТипаСпособРасчетаАванса = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаАванса");
			
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТипаАванс = Новый ОписаниеТипов(Массив, , ,КЧ);
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаСпособРасчетаАвансаТекущий, ОписаниеТипаСпособРасчетаАванса, ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаПоказателяТекущий, ОписаниеТипаАванс, ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыАвансов.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПоказателяТекущий, Новый ОписаниеТипов("Булево"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			
			КЧ = Новый КвалификаторыЧисла(15,2);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Число"));
			ОписаниеТипаТарифнаяСтавка = Новый ОписаниеТипов(Массив, , ,КЧ);
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПоказателяТекущий, Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаСовокупнаяТарифнаяСтавкаТекущий, ОписаниеТипаТарифнаяСтавка, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаВидТарифнойСтавкиТекущий, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыТарифныхСтавок"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыОплатаТруда.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыЛьгот.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыОплатаЛьгот.ПутьКДанным);	
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
			
		КонецЕсли;
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыНачислений.ПутьКДанным);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		НовыйРеквизит = Новый РеквизитФормы(ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста, Новый ОписаниеТипов("Строка"), ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей);	
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);										
		
		МассивИменРеквизитовФормы.Очистить();
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыРабочихМест.ПутьКДанным);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыНачислений.ПутьКДанным);
		ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей);
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыАвансов.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);
		КонецЕсли;
		 	
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда		
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыОплатаТруда.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыЛьгот.ПутьКДанным);
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда		
			ЗарплатаКадры.ЗаполнитьМассивИменРеквизитовФормы(Форма, МассивИменРеквизитовФормы, ОписаниеТаблицыОплатаЛьгот.ПутьКДанным);
		КонецЕсли;
		
		ЗарплатаКадры.ИзменитьРеквизитыФормы(Форма, ДобавляемыеРеквизиты, МассивИменРеквизитовФормы,, ОтложенноеИзменение);
		
	КонецЕсли;
	
	Если ДобавлятьЭлементыФормы Тогда 
		
		// Дополняем форму элементом для отображения представления рабочего места таблицы начислений.
		ИмяПоля = ОписаниеТаблицыНачислений.ИмяТаблицы + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		ТипПоля = Тип("ПолеФормы");
		ПутьКДаннымПоля = ОписаниеТаблицыНачислений.ПутьКДанным + "." + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		
		Поле = Форма.Элементы.Найти(ИмяПоля);
		
		Если Поле = Неопределено Тогда
			Таблица = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяТаблицы);
			
			Если Таблица <> Неопределено Тогда 
				СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыНачислений.ИмяПоляДляВставкиПредставленияРабочегоМеста);
				Пока СледующееПоле <> Неопределено И СледующееПоле.Родитель <> Таблица Цикл
					СледующееПоле = СледующееПоле.Родитель;
				КонецЦикла;
				Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
				Поле.ПутьКДанным = ПутьКДаннымПоля;
				Поле.Заголовок = НСтр("ru = 'Рабочее место';
										|en = 'Workplace'");
				Поле.Доступность = Истина;
				Поле.ОтображатьВШапке = Истина;
				Поле.Вид = ВидПоляФормы.ПолеВвода;
				Поле.КнопкаВыбора = Истина;
				Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_НачисленияПредставлениеРабочегоМестаОбработкаВыбора");
				Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_НачисленияПредставлениеРабочегоМестаНачалоВыбора");
			КонецЕсли;
		КонецЕсли;	
		
		// Дополняем форму элементом для отображения представления рабочего места таблицы показателей.
		ИмяПоля = "Показатели" + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		ТипПоля = Тип("ПолеФормы");
		ПутьКДаннымПоля = ОписаниеТаблицыНачислений.ПутьКДаннымПоказателей + "." + ОписаниеТаблицыНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
		
		Поле = Форма.Элементы.Найти(ИмяПоля);
		
		Если Поле = Неопределено Тогда
			Таблица = Форма.Элементы.Найти("Показатели");
			Если Таблица <> Неопределено Тогда 
				СледующееПоле = Форма.Элементы.Найти("ПоказателиПоказатель");
				Если СледующееПоле <> Неопределено Тогда
					Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru = 'Рабочее место';
											|en = 'Workplace'");
					Поле.Доступность = Истина;
					Поле.ОтображатьВШапке = Истина;
					Поле.Вид = ВидПоляФормы.ПолеВвода;
					Поле.КнопкаВыбора = Истина;
					Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ПоказателиПредставлениеРабочегоМестаОбработкаВыбора");
					Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ПоказателиПредставлениеРабочегоМестаНачалоВыбора");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		Если ОписаниеФормы.ЕстьАвансы Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы авансов.
			ИмяПоля = ОписаниеТаблицыАвансов.ИмяТаблицы + ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыАвансов.ПутьКДанным + "." + ОписаниеТаблицыАвансов.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru = 'Рабочее место';
												|en = 'Workplace'");
						Поле.Доступность = Истина;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы авансов.
			ИмяПоля = ОписаниеТаблицыАвансов.ИмяТаблицы + ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыАвансов.ПутьКДанным + "." + ОписаниеТаблицыАвансов.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыАвансов.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru = 'Комментарий';
											|en = 'Comment'");
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПрименениеПлановыхНачислений Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным + "." + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru = 'Рабочее место';
												|en = 'Workplace'");
						Поле.Доступность = Истина;
						Поле.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПрименениеПлановыхНачислений.ПутьКДанным + "." + ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПрименениеПлановыхНачислений.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru = 'Комментарий';
											|en = 'Comment'");
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьПересчетТарифныхСтавок Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным + "." + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru = 'Рабочее место';
												|en = 'Workplace'");
						Поле.Доступность = Истина;
						Поле.ТолькоПросмотр = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			// Дополняем форму элементом для отображения комментария таблицы применение плановых начислений.
			ИмяПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным + "." + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					Поле = Форма.Элементы.Добавить(ИмяПоля, ТипПоля, Таблица);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru = 'Комментарий';
											|en = 'Comment'");
					Поле.Доступность = Истина;
					Поле.ТолькоПросмотр = Истина;
					Поле.ОтображатьВШапке = Истина;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеФормы.ЕстьОплатаТруда Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыОплатаТруда.ИмяТаблицы + ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыОплатаТруда.ПутьКДанным + "." + ОписаниеТаблицыОплатаТруда.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыОплатаТруда.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыОплатаТруда.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru = 'Рабочее место';
												|en = 'Workplace'");
						Поле.Доступность = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
						Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОплатаТрудаПредставлениеРабочегоМестаОбработкаВыбора");
						Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ОплатаТрудаПредставлениеРабочегоМестаНачалоВыбора");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		Если ОписаниеТаблицыЛьгот <> Неопределено Тогда 
			
			// Дополняем форму элементом для отображения представления рабочего места таблицы льгот.
			ИмяПоля = ОписаниеТаблицыЛьгот.ИмяТаблицы + ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыЛьгот.ПутьКДанным + "." + ОписаниеТаблицыЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыЛьгот.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыЛьгот.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Пока СледующееПоле <> Неопределено И СледующееПоле.Родитель <> Таблица Цикл
						СледующееПоле = СледующееПоле.Родитель;
					КонецЦикла;
					Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
					Поле.ПутьКДанным = ПутьКДаннымПоля;
					Поле.Заголовок = НСтр("ru = 'Рабочее место';
											|en = 'Workplace'");
					Поле.Доступность = Истина;
					Поле.ОтображатьВШапке = Истина;
					Поле.Вид = ВидПоляФормы.ПолеВвода;
					Поле.КнопкаВыбора = Истина;
					Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ЛьготыПредставлениеРабочегоМестаОбработкаВыбора");
					Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ЛьготыПредставлениеРабочегоМестаНачалоВыбора");
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ОписаниеТаблицыОплатаЛьгот <> Неопределено Тогда
			// Дополняем форму элементом для отображения представления рабочего места таблицы пересчета тарифных ставок.
			ИмяПоля = ОписаниеТаблицыОплатаЛьгот.ИмяТаблицы + ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			ТипПоля = Тип("ПолеФормы");
			ПутьКДаннымПоля = ОписаниеТаблицыОплатаЛьгот.ПутьКДанным + "." + ОписаниеТаблицыОплатаЛьгот.ИмяРеквизитаПредставлениеРабочегоМеста;
			
			Поле = Форма.Элементы.Найти(ИмяПоля);
			
			Если Поле = Неопределено Тогда
				Таблица = Форма.Элементы.Найти(ОписаниеТаблицыОплатаЛьгот.ИмяТаблицы);
				Если Таблица <> Неопределено Тогда 
					СледующееПоле = Форма.Элементы.Найти(ОписаниеТаблицыОплатаЛьгот.ИмяПоляДляВставкиПредставленияРабочегоМеста);
					Если СледующееПоле <> Неопределено Тогда 
						Поле = Форма.Элементы.Вставить(ИмяПоля, ТипПоля, Таблица, СледующееПоле);
						Поле.ПутьКДанным = ПутьКДаннымПоля;
						Поле.Заголовок = НСтр("ru = 'Рабочее место';
												|en = 'Workplace'");
						Поле.Доступность = Истина;
						Поле.ОтображатьВШапке = Истина;
						Поле.Вид = ВидПоляФормы.ПолеВвода;
						Поле.КнопкаВыбора = Истина;
						Поле.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОплатаЛьготПредставлениеРабочегоМестаОбработкаВыбора");
						Поле.УстановитьДействие("НачалоВыбора", "Подключаемый_ОплатаЛьготПредставлениеРабочегоМестаНачалоВыбора");
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Условное оформление используется для выделения строк в табличной части которые устанавливают новые значения для
// каких-либо данных.
Процедура НесколькоРабочихМестУстановитьУсловноеОформлениеТемноСиний(Форма, ОписаниеТаблицы)
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИзмененныеСтроки);
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
	
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ИмяТаблицы);	
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ПутьКДанным + "." + ОписаниеТаблицы.ИмяРеквизитаПоказателя);
	ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеТаблицы.ПутьКДанным + "." + ОписаниеТаблицы.ИмяРеквизитаПоказателяТекущий);
КонецПроцедуры

// Процедура заполняет таблицу формы содержащую перечисление рабочих мест (сотрудников) физического лица, а также
// устанавливает у формы признак использования нескольких рабочих мест.
Процедура НесколькоРабочихМестЗаполнитьРабочиеМестаФизическогоЛица(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицыНачислений, ТаблицаОписанийРабочихМест)
	
	ФизическоеЛицо = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеФормы.ФизическоеЛицоПутьКДанным);
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
	ТаблицаРабочихМест = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыРабочихМест.ПутьКДанным);
	ТаблицаРабочихМест.Очистить();
	
	Для Каждого РабочееМесто Из ТаблицаОписанийРабочихМест Цикл
		НоваяСтрока = ТаблицаРабочихМест.Добавить();
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаСотрудник] = РабочееМесто.Сотрудник;
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПредставлениеРабочегоМеста] = РабочееМесто.ПредставлениеРабочегоМеста;
		НоваяСтрока[ОписаниеТаблицыРабочихМест.ИмяРеквизитаПодразделение] = РабочееМесто.Подразделение;
	КонецЦикла;
	
	ТаблицаИспользованныхРабочихМест = ТаблицаНачислений.Выгрузить(,ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник);
	ТаблицаИспользованныхРабочихМест.Свернуть(ОписаниеТаблицыНачислений.ИмяРеквизитаСотрудник);
	ИспользованоСотрудников = ТаблицаИспользованныхРабочихМест.Количество();
	Форма[ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест] = (ТаблицаОписанийРабочихМест.Количество() > 1) Или (ИспользованоСотрудников > 1);
	
КонецПроцедуры

// Процедура обновляет представление рабочих мест в строках таблицы формы.
Процедура НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицы, Знач ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест)
	
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);

	МассивРабочихМест = Таблица.Выгрузить().ВыгрузитьКолонку(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления Тогда
		
		ТаблицаПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымПоказателей);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивРабочихМест,
			ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПоказателей, ОписаниеТаблицы.ИмяРеквизитаСотрудник, Истина),
			Истина);
			
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(МассивРабочихМест, Справочники.Сотрудники.ПустаяСсылка());
	
	Для Каждого Строка Из Таблица Цикл
		ОписаниеРабочегоМеста = ТаблицаОписанийРабочихМест.Найти(Строка[ОписаниеТаблицы.ИмяРеквизитаСотрудник], "Сотрудник");
		Если ОписаниеРабочегоМеста <> Неопределено Тогда
			Строка[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ОписаниеРабочегоМеста.ПредставлениеРабочегоМеста;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления Тогда 
	
		ТаблицаПоказателей = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымПоказателей);
		Для Каждого Строка Из ТаблицаПоказателей Цикл
			Если Строка[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки] <> 0 Тогда 
				Продолжить;
			КонецЕсли;	
			ОписаниеРабочегоМеста = ТаблицаОписанийРабочихМест.Найти(Строка[ОписаниеТаблицы.ИмяРеквизитаСотрудник], "Сотрудник");
			Если ОписаниеРабочегоМеста <> Неопределено Тогда
				Строка[ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста] = ОписаниеРабочегоМеста.ПредставлениеРабочегоМеста;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость реквизитов таблицы отображающих рабочие места физического лица, в зависимости от
// использования нескольких рабочих мест.
Процедура НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицы)
	Таблица = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	ТаблицаИспользованныхРабочихМест = Таблица.Выгрузить(,ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	ТаблицаИспользованныхРабочихМест.Свернуть(ОписаниеТаблицы.ИмяРеквизитаСотрудник);
	ИспользованоСотрудников = ТаблицаИспользованныхРабочихМест.Количество();
	
	НесколькоРабочихМест = Форма[ОписаниеФормы.ИмяРеквизитаПризнакаНесколькихРабочихМест] Или (ИспользованоСотрудников > 1);
	Если ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыНачисления 
		Или ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыОплатаТруда Тогда
		Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
		Форма.Элементы["Показатели" + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
	ИначеЕсли ОписаниеТаблицы.ИмяТаблицы = ОписаниеФормы.ИмяТаблицыЛьготы Тогда 
		Форма.Элементы[ОписаниеТаблицы.ИмяТаблицы + ОписаниеТаблицы.ИмяРеквизитаПредставлениеРабочегоМеста].Видимость = НесколькоРабочихМест;
	Иначе 
		Форма.Элементы[ОписаниеФормы["ИмяГруппыТаблицы" + ОписаниеТаблицы.ИмяТаблицы]].Видимость = НесколькоРабочихМест;
		Форма.Элементы[ОписаниеФормы["ИмяГруппыОдиночногоЭлемента" + ОписаниеТаблицы.ИмяТаблицы]].Видимость = Не НесколькоРабочихМест;
	КонецЕсли;
КонецПроцедуры

// Процедура формирует представление таблицы формы: устанавливает условное оформление, устанавливает видимость рабочего
// места (если у сотрудника их несколько), обновляет представление рабочих мест и комментарий в строках таблицы.
Процедура НесколькоРабочихМестДействияНадТаблицей(Форма, ОписаниеФормы, ОписаниеТаблицыРабочихМест, ОписаниеТаблицы, Знач ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест)
	НесколькоРабочихМестУстановитьУсловноеОформлениеТемноСиний(Форма, ОписаниеТаблицы); 
	НесколькоРабочихМестУстановитьВидимыеРеквизиты(Форма, ОписаниеФормы, ОписаниеТаблицы);
	НесколькоРабочихМестОбновитьПредставлениеВыбранныхРабочихМест(Форма, ОписаниеФормы, ОписаниеТаблицы, ДатаПолученияКадровыхДанных, ТаблицаОписанийРабочихМест);
	ЗарплатаКадрыРасширенныйКлиентСервер.НесколькоРабочихМестОбновитьКомментарии(Форма, ОписаниеФормы, ОписаниеТаблицы);
КонецПроцедуры

// Функция возвращает текст предупреждения для конкретного реквизита.
Функция КлючевыеРеквизитыПредставлениеПредупреждения(ПредставлениеРеквизита, ДействиеПриИзмененииОчистка)
	ПредставлениеПредупреждения = НСтр("ru = 'Редактирование %1 приведет к %2 табличных частей документа';
										|en = 'Editing of %1 will result in %2 of tabular sections of the document'");
	
	Если ДействиеПриИзмененииОчистка Тогда
		ПредставлениеДействияПриИзменении = НСтр("ru = 'очистке';
												|en = 'clearing'");
	Иначе 
		ПредставлениеДействияПриИзменении = НСтр("ru = 'перезаполнению';
												|en = 'repopulation'");
	КонецЕсли;
	
	ПредставлениеПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПредупреждения, ПредставлениеРеквизита, ПредставлениеДействияПриИзменении);
	
	Возврат	ПредставлениеПредупреждения
КонецФункции 

// Формирует представление периода для расчетных документов. Представление периода используется в обработке
// РасчетЗарплаты.
//
Функция ПредставлениеПериодаРасчетногоДокумента(ДатаНачала, ДатаОкончания = Неопределено) Экспорт 
	
	Если ДатаНачала = '00010101' Или ДатаОкончания = '00010101' Тогда 
		Возврат "";
	КонецЕсли;	
	
	Если ДатаОкончания = Неопределено Или НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда 
		Возврат Формат(ДатаНачала, "ДФ=""д ММММ""");
	КонецЕсли;
	
	Если Месяц(ДатаНачала) = Месяц(ДатаОкончания) Тогда 
		Возврат Формат(ДатаНачала, "ДФ=""д""") + " - " + Формат(ДатаОкончания, "ДФ=""д ММММ""");
	Иначе 
		Возврат Формат(ДатаНачала, "ДФ=""д МММ""") + " - " + Формат(ДатаОкончания, "ДФ=""д МММ""");
	КонецЕсли;
	
КонецФункции

// Объединяет строки коллекции с примыкающими интервалами. Предполагается, что строки уже упорядочены.
//
// Параметры:
//   КоллекцияСтрок - табличная часть, таблица значений, массив строк или данные формы коллекция строк.
//   ИмяПоляДатаНачала - имя колонки, содержащей дату начала интервала.
//   ИмяПоляДатаОкончания - имя колонки, содержащей дату окончания интервала.
//   ИменаКолонок - строка, разделенная запятыми - имена колонок, по которым производится сравнение. 
//					Не является обязательным для таблицы значений, если не указан - сравнение производится по всем колонкам. 
//					Для коллекций других типов является обязательным.
//   ИменаИгнорируемыхКолонок - имена колонок, которые игнорируются при сравнении, необязательный.
//   РазбиватьПоМесяцам - если Истина, строки, относящиеся к разным месяцам, не будут объединены. Необязательный.
//
Процедура ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(КоллекцияСтрок, ИмяПоляДатаНачала, ИмяПоляДатаОкончания, ИменаКолонок = "", ИменаИгнорируемыхКолонок = "", РазбиватьПоМесяцам = Истина) Экспорт 
	
	Если ПустаяСтрока(ИменаКолонок) Тогда
		СравниваемыеКолонки = Новый Массив;
		Если ТипЗнч(КоллекцияСтрок) = Тип("ТаблицаЗначений") Тогда 
			Для Каждого Колонка Из КоллекцияСтрок.Колонки Цикл
				СравниваемыеКолонки.Добавить(Колонка.Имя);
			КонецЦикла;
		Иначе
			МетаданныеТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(КоллекцияСтрок));
			Если МетаданныеТабличнойЧасти <> Неопределено Тогда 
				Для Каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл 
					СравниваемыеКолонки.Добавить(Реквизит.Имя);
				КонецЦикла;
				Для Каждого Реквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл 
					СравниваемыеКолонки.Добавить(Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;	
		КонецЕсли;
	Иначе 
		СравниваемыеКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаКолонок, " ", ""));
	КонецЕсли;			
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, ИмяПоляДатаНачала);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, ИмяПоляДатаОкончания);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СравниваемыеКолонки, "НомерСтроки");
	
	СравниваемыеКолонки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СравниваемыеКолонки, 
						СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(ИменаИгнорируемыхКолонок, " ", "")));
						
	ПредыдущаяСтрока = Неопределено;
	КоличествоСтрок = КоллекцияСтрок.Количество();
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		
		ИндексСтроки = КоличествоСтрок - Сч;
		ТекСтрока = КоллекцияСтрок[ИндексСтроки];
		
		Если ПредыдущаяСтрока = Неопределено Тогда 
			ПредыдущаяСтрока = ТекСтрока;
			Продолжить;
		КонецЕсли;
		
		Если НачалоДня(ТекСтрока[ИмяПоляДатаОкончания]) + 86400 = НачалоДня(ПредыдущаяСтрока[ИмяПоляДатаНачала]) Тогда
			Если Не РазбиватьПоМесяцам Или НачалоМесяца(ТекСтрока[ИмяПоляДатаОкончания]) = НачалоМесяца(ПредыдущаяСтрока[ИмяПоляДатаНачала]) Тогда 
				ОбъединитьСтроки = Истина;
				Для Каждого ИмяКолонки Из СравниваемыеКолонки Цикл
					Если СравнитьЗначения(ТекСтрока[ИмяКолонки], ПредыдущаяСтрока[ИмяКолонки]) <> 0 Тогда
						ОбъединитьСтроки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ОбъединитьСтроки Тогда 
					ТекСтрока[ИмяПоляДатаОкончания] = ПредыдущаяСтрока[ИмяПоляДатаОкончания];
					КоллекцияСтрок.Удалить(ИндексСтроки + 1);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекСтрока;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПериодРегистратораНачисленийУдержаний(ДатаНачала, ДатаОкончания, Объект, ИмяРеквизитаДатаОкончания, Отказ) Экспорт 
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ДатаОкончания < ДатаНачала Тогда 
		ТекстСообщения = НСтр("ru = 'Дата окончания периода не может быть меньше даты начала';
								|en = 'Period end date cannot be less than start date'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, ИмяРеквизитаДатаОкончания, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапрашиваемыеДанныеНачисления() Экспорт 
	
	ЗапрашиваемыеДанныеСтрока = 
		"КатегорияНачисленияИлиНеоплаченногоВремени,
		|ОсновнойВидРасчета,
		|КоличествоПостоянныхПоказателей,
		|КоличествоОтображаемыхПоказателей,
		|КоличествоПоказателейИспользуемыхПриРасчете,
		|ОчередностьРасчета,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|КоличествоМесяцевРасчетаСреднегоЗаработка,
		|СпособВыполненияНачисления,
		|ЗачетОтработанногоВремени,
		|ИспользованиеПериода,
		|ПериодРасчетаБазовыхНачислений,
		|КоличествоМесяцевБазовогоПериода,
		|СдвигБазовогоПериода,
		|ТребуетсяРасчетОтработаноЧасовВсего,
		|ВидВремени,
		|ТребуетсяРасчетБазы,
		|ТребуетсяРасчетВремени,
		|ТребуетсяРасчетНормыВремени,
		|ЗачетНормыВремени,
		|КодДоходаНДФЛ,
		|Рассчитывается,
		|ЯвляетсяЛьготой,
		|ЛьготаУчитываетсяПриРасчетеЗарплаты,   
		|ФормулаРасчетаДляВыполнения,
		|НачисляетсяВЦеломЗаМесяц,
		|ВидОтпуска,
		|ПоддерживаетНесколькоПлановыхНачислений,
		|ВключатьВФОТ,
		|ФОТНеРедактируется,
		|РеквизитДопУпорядочивания";
		
	Возврат ЗапрашиваемыеДанныеСтрока;	
	
КонецФункции

Функция ЗапрашиваемыеДанныеУдержания() Экспорт
	
	ЗапрашиваемыеДанныеСтрока = 
		"КоличествоПостоянныхПоказателей,
		|КоличествоПоказателейИспользуемыхПриРасчете,
		|КоличествоОтображаемыхПоказателей,
		|ОчередностьРасчета,
		|ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,
		|КоличествоМесяцевРасчетаСреднегоЗаработка, 
		|СпособВыполненияУдержания,
		|КатегорияУдержания,
		|ТребуетсяРасчетБазы,
		|ТребуетсяРасчетБазыИсполнительногоЛиста,
		|Рассчитывается,
		|ЯвляетсяВзысканием";
		
	Возврат ЗапрашиваемыеДанныеСтрока;	
	
КонецФункции

Функция СотрудникиТаблицДокумента(Объект, ОписанияТаблиц, ДополнительныеСотрудники = Неопределено, ИмяПоляСотрудник = "Сотрудник") Экспорт 
	
	УникальныеСотрудники = Новый Соответствие;
	
	Если ДополнительныеСотрудники <> Неопределено Тогда 
		Для Каждого ДополнительныйСотрудник Из ДополнительныеСотрудники Цикл 
			УникальныеСотрудники.Вставить(ДополнительныйСотрудник, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
		Для Каждого СтрокаТаблицы Из Объект[ОписаниеТаблицы.ИмяТаблицы] Цикл 
			УникальныеСотрудники.Вставить(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаСотрудник], Истина);
		КонецЦикла;
	КонецЦикла;
	
	Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(УникальныеСотрудники, "Ключ");
	
	Возврат Сотрудники;
	
КонецФункции

Процедура СоздатьВТПредставлениеРаспределенияНачисленийУдержаний(МенеджерВременныхТаблиц, Ссылка, ИмяВТРезультатыРаспределения, ИмяВТРезультат) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СимволПС", Символы.ПС); 
	Запрос.УстановитьПараметр("Многоточие", "…"); 	
	Запрос.УстановитьПараметр("ПроверятьЗаполнениеСтатьиРасходов", ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	РаспределениеРезультатов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	ПредставлениеРаспределенияРезультатовРасчета.РаспределениеНачислений КАК РаспределениеНачислений,
	               |	СУММА(РаспределениеРезультатов.Результат) КАК СуммаРаспределения,
	               |	МАКСИМУМ(ПредставлениеРаспределенияРезультатовРасчета.ЕстьОшибкиЗаполнения) КАК ЕстьОшибкиЗаполнения,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПредставлениеРаспределенияРезультатовРасчета.НомерЭлементаПредставления = 1
	               |				ТОГДА РаспределениеРезультатов.СтатьяФинансирования.Код + ВЫБОР
	               |						КОГДА &ПроверятьЗаполнениеСтатьиРасходов
	               |								И РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |							ТОГДА ""("" + РаспределениеРезультатов.СтатьяРасходов.Код + "")""
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 1
	               |							ТОГДА "" : ""
	               |						ИНАЧЕ """"
	               |					КОНЕЦ + ВЫБОР
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 1
	               |							ТОГДА "" "" + ПредставлениеРаспределенияРезультатовРасчета.ПредставлениеРезультата
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК СтрокаПредставления1,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПредставлениеРаспределенияРезультатовРасчета.НомерЭлементаПредставления = 2
	               |				ТОГДА &СимволПС + РаспределениеРезультатов.СтатьяФинансирования.Код + ВЫБОР
	               |						КОГДА &ПроверятьЗаполнениеСтатьиРасходов
	               |								И РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)
	               |							ТОГДА ""("" + РаспределениеРезультатов.СтатьяРасходов.Код + "")""
	               |						ИНАЧЕ "" : ""
	               |					КОНЕЦ + "" "" + ПредставлениеРаспределенияРезультатовРасчета.ПредставлениеРезультата + ВЫБОР
	               |						КОГДА ПредставлениеРаспределенияРезультатовРасчета.КоличествоЭлементовПредставления > 2
	               |							ТОГДА &Многоточие
	               |						ИНАЧЕ """"
	               |					КОНЕЦ
	               |			ИНАЧЕ """"
	               |		КОНЕЦ) КАК СтрокаПредставления2,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА РаспределениеРезультатов.СтатьяФинансирования <> ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)
	               |					И (НЕ &ПроверятьЗаполнениеСтатьиРасходов
	               |						ИЛИ РаспределениеРезультатов.СтатьяРасходов <> ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка))
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЗаполненыОсновныеПоляРаспределения
	               |ПОМЕСТИТЬ ВТПредставлениеРаспределенияНачисленийУдержаний
	               |ИЗ
	               |	ВТРаспределениеРезультатов КАК РаспределениеРезультатов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредставлениеРаспределенияРезультатовРасчета КАК ПредставлениеРаспределенияРезультатовРасчета
	               |		ПО РаспределениеРезультатов.НомерСтроки = ПредставлениеРаспределенияРезультатовРасчета.НомерСтрокиРаспределения
	               |			И РаспределениеРезультатов.ИдентификаторСтроки = ПредставлениеРаспределенияРезультатовРасчета.ИдентификаторСтроки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РаспределениеРезультатов.ИдентификаторСтроки,
	               |	ПредставлениеРаспределенияРезультатовРасчета.РаспределениеНачислений";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРаспределениеРезультатов", ИмяВТРезультатыРаспределения);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПредставлениеРаспределенияНачисленийУдержаний", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ЭтоВычетыКДоходам)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Таблица", ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы]);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.НомерСтроки,
	               |	Таблица.Сотрудник КАК Сотрудник,
	               |	Таблица.ВидРасчета КАК ВидРасчета,
				   |	Таблица.ИсходныйДокумент КАК ИсходныйДокумент,
				   |	Таблица.КодДохода КАК КодДохода,
	               |	Таблица.ПоляВычетовКДоходам КАК ПоляВычетовКДоходам,
	               |	Таблица.Результат КАК Результат,
	               |	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки
	               |ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	               |ИЗ
	               |	&Таблица КАК Таблица";
	
	ПодстрокаЗамены = ?(ОписаниеТаблицы.СодержитПолеВидРасчета, "Таблица." + ОписаниеТаблицы.ИмяРеквизитаВидРасчета, "ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)") + " КАК ВидРасчета,"; 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ВидРасчета КАК ВидРасчета,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = ?(ОписаниеТаблицы.СодержитПолеКодДохода, "Таблица.КодДохода", "ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)") + " КАК КодДохода,"; 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.КодДохода КАК КодДохода,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = ?(ОписаниеТаблицы.СодержитПолеСотрудник, "Таблица." + ОписаниеТаблицы.ИмяРеквизитаСотрудник + " КАК Сотрудник,", ""); 	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.Сотрудник КАК Сотрудник,", ПодстрокаЗамены);
	
	Если Не ОписаниеТаблицы.СодержитПолеИсходныйДокумент Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИсходныйДокумент КАК ИсходныйДокумент,", "");
	КонецЕсли;
	
	ПодстрокаЗамены = "Таблица." + ОписаниеТаблицы.ИмяПоляРезультат + " КАК Результат,"; 
	Если ОписаниеТаблицы.ИмяТаблицы = "ПогашениеЗаймов" Тогда 
		ПодстрокаЗамены = "Таблица.НачисленоПроцентов + Таблица.ПогашениеПроцентов + Таблица.ПогашениеЗайма + Таблица.МатериальнаяВыгода + Таблица.НалогНаМатериальнуюВыгоду КАК Результат,"; 
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.Результат КАК Результат,", ПодстрокаЗамены);
	
	ПодстрокаЗамены = "Таблица." + ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки + " КАК ИдентификаторСтроки"; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки", ПодстрокаЗамены);
	
	ПоляВычетовКДоходам = "
	               |	Таблица.Подразделение КАК Подразделение,
	               |	Таблица.КодВычета КАК КодВычета,
	               |	Таблица.СуммаВычета КАК СуммаВычета,";
				   
	ПодстрокаЗамены = ?(ЭтоВычетыКДоходам, ПоляВычетовКДоходам, "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.ПоляВычетовКДоходам КАК ПоляВычетовКДоходам,", ПодстрокаЗамены);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТДанныеОсновнойТаблицы";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВидовРасчетаПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	ОписаниеПанелиВычеты = ДополнительныеПараметры.ОписаниеПанелиВычеты;
	ВычетыКДоходам = ОписаниеПанелиВычеты.НастраиваемыеПанели.Получить("ВычетыКДоходам");
	
	ЭтоВычетыКДоходам = ВычетыКДоходам = ОписаниеТаблицы.ПутьКДанным; 
	
	СоздатьВТДанныеОсновнойТаблицы(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ЭтоВычетыКДоходам);	
	
	ВыборкаСвойствВидовРасчета = ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	ВыборкаВторичныхДанныхВычетовКДоходам = ВыборкаВторичныхДанныхВычетовКДоходам(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	ВыборкаПредставленийРаспределения = ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры);
	ВыборкаРаспределенияПоТерриториямУсловиямТруда = ВыборкаРаспределенияПоТерриториямУсловиямТруда(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	УничтожитьВТДанныеОсновнойТаблицы(МенеджерВременныхТаблиц);
	
	КоличествоПоказателейПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда().Количество();
	
	КонтролируемыеПоля = Неопределено;
	ДополнительныеПараметры.КонтролируемыеПоля.Свойство(ОписаниеТаблицы.ИмяТаблицы, КонтролируемыеПоля);
	
	РаспределениеПоТерриториямУсловиямТруда = Неопределено;
	Если ВыборкаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда 
		РаспределениеПоТерриториямУсловиямТруда = ТаблицаРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы);
	КонецЕсли;
	
	ФизическиеЛицаСотрудников = Неопределено;
	Если ОписаниеТаблицы.СодержитПолеСотрудник Тогда
		Сотрудники = ОбщегоНазначения.ВыгрузитьКолонку(ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы], ОписаниеТаблицы.ИмяРеквизитаСотрудник);
		Если Сотрудники.Количество() > 0
			И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники, "ФизическоеЛицо");
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДанным);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Если ВыборкаСвойствВидовРасчета <> Неопределено Тогда
			ВыборкаСвойствВидовРасчета.Следующий();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаСвойствВидовРасчета);
		КонецЕсли;
		
		Если ВыборкаВторичныхДанныхВычетовКДоходам <> Неопределено Тогда
			ВыборкаВторичныхДанныхВычетовКДоходам.Следующий();
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ВыборкаВторичныхДанныхВычетовКДоходам);
		КонецЕсли;
		
		Если ВыборкаПредставленийРаспределения <> Неопределено Тогда
			ВыборкаПредставленийРаспределения.Следующий();
			СтрокаДанных.КомандаРедактированияРаспределения = ВыборкаПредставленийРаспределения.ПредставлениеРаспределения;
		КонецЕсли;
		
		Если ВыборкаРаспределенияПоТерриториямУсловиямТруда <> Неопределено Тогда
			ВыборкаРаспределенияПоТерриториямУсловиямТруда.СледующийПоЗначениюПоля("НомерСтроки");
			ЗаполнитьПредставленияРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы, ВыборкаРаспределенияПоТерриториямУсловиямТруда, СтрокаДанных, РаспределениеПоТерриториямУсловиямТруда, КоличествоПоказателейПоТерриториямУсловиямТруда);
		КонецЕсли;
		
		Если ФизическиеЛицаСотрудников <> Неопределено
			И ЗначениеЗаполнено(СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]) Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаДанных, ФизическиеЛицаСотрудников[СтрокаДанных[ОписаниеТаблицы.ИмяРеквизитаСотрудник]]);
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РаспределениеПоТерриториямУсловиямТруда <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, 
			ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда,
			ПоместитьВоВременноеХранилище(РаспределениеПоТерриториямУсловиямТруда, Форма.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

Функция ВыборкаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц);
	
	Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоПоказателей = 0;
	ТаблицаСвойствВидовРасчета = ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ДоступенВыборОснования,
		|	СвойстваВидовРасчета.КатегорияУдержания
		|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
		|ИЗ
		|	&ТаблицаСвойствВидовРасчета КАК СвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	ДанныеОсновнойТаблицы.ИдентификаторСтроки,
		|	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,
		|	СвойстваВидовРасчета.ВидВремени,
		|	СвойстваВидовРасчета.ИспользуетсяПериод,
		|	СвойстваВидовРасчета.ИспользованиеПериода,
		|	СвойстваВидовРасчета.ДоступенВыборОснования,
		|	СвойстваВидовРасчета.КатегорияУдержания
		|ПОМЕСТИТЬ ВТОсновнаяТаблицаСПоказателями
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
		|		ПО ДанныеОсновнойТаблицы.ВидРасчета = СвойстваВидовРасчета.ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,
		|	&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,
		|	ДанныеОсновнойТаблицы.ВидВремени,
		|	ДанныеОсновнойТаблицы.ИспользуетсяПериод,
		|	ДанныеОсновнойТаблицы.ИспользованиеПериода,
		|	ДанныеОсновнойТаблицы.ДоступенВыборОснования,
		|	ДанныеОсновнойТаблицы.КатегорияУдержания
		|ИЗ
		|	ВТОсновнаяТаблицаСПоказателями КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТОсновнаяТаблицаСПоказателями";
	
	ШаблонПолейСвойствПоказателей = "
		|	СвойстваВидовРасчета.Показатель1 КАК Показатель1,
		|	СвойстваВидовРасчета.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	СвойстваВидовРасчета.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	СвойстваВидовРасчета.КомандаРасшифровки1 КАК КомандаРасшифровки1,";
	
	ШаблонПолейСвойствПоказателейОсновнойТаблицы = "
		|	ДанныеОсновнойТаблицы.Показатель1 КАК Показатель1,
		|	ДанныеОсновнойТаблицы.ПредставлениеПоказателя1 КАК ПредставлениеПоказателя1,
		|	ДанныеОсновнойТаблицы.ТочностьПоказателя1 КАК ТочностьПоказателя1,
		|	ДанныеОсновнойТаблицы.КомандаРасшифровки1 КАК КомандаРасшифровки1,";

	
	ШаблонПолейЗначенийПоказателей = "
		|	Показатели1.Значение КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
		|		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = Показатели1.ИдентификаторСтрокиВидаРасчета
		|			И (ДанныеОсновнойТаблицы.Показатель1 = Показатели1.Показатель)
		|			И ДанныеОсновнойТаблицы.Показатель1 <> ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)";
		
	ПоляСвойствПоказателей = "";
	ПоляСвойствПоказателейОсновнойТаблицы = "";
	ПоляЗначенийПоказателя = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));	
		ПоляСвойствПоказателейОсновнойТаблицы = ПоляСвойствПоказателейОсновнойТаблицы + СтрЗаменить(ШаблонПолейСвойствПоказателейОсновнойТаблицы, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
		ПоляЗначенийПоказателя = ПоляЗначенийПоказателя + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
	КонецЦикла;	
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателейОсновнойТаблицы КАК ПоляСвойствПоказателейОсновнойТаблицы,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателейОсновнойТаблицы); 
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателя); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
					  |		ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСвойствВидовРасчета", ТаблицаСвойствВидовРасчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ТаблицаСвойствВидовРасчета(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, КоличествоПоказателей)
	
	ДанныеТаблицы = ДокументОбъект[ОписаниеТаблицы.ИмяТаблицы];
	
	ЭтоНачисления = Истина;
	Если ДанныеТаблицы.Количество() > 0 Тогда 
		ЭтоНачисления = ТипЗнч(ДанныеТаблицы[0][ОписаниеТаблицы.ИмяРеквизитаВидРасчета]) = Тип("ПланВидовРасчетаСсылка.Начисления");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОсновнойТаблицы.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчетаОсновнойТаблицы
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы";
	Запрос.Выполнить();
	
	Если ЭтоНачисления Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Начисления.Ссылка КАК ВидРасчета,
			|	Начисления.ВидВремени КАК ВидВремени,
			|	ВЫБОР
			|		КОГДА Начисления.ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.НеИспользовать)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ИспользуетсяПериод,
			|	Начисления.ИспользованиеПериода,
			|	Начисления.КоличествоОтображаемыхПоказателей КАК КоличествоОтображаемыхПоказателей,
			|	Начисления.ПоддерживаетНесколькоПлановыхНачислений КАК ДоступенВыборОснования
			|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
			|ИЗ
			|	ПланВидовРасчета.Начисления КАК Начисления
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетаОсновнойТаблицы КАК ВидыРасчетаОсновнойТаблицы
			|		ПО Начисления.Ссылка = ВидыРасчетаОсновнойТаблицы.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(СвойстваВидовРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
			|	НачисленияПоказатели.НомерСтроки КАК НомерСтроки,
			|	СвойстваВидовРасчета.ВидВремени КАК ВидВремени,
			|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
			|	СвойстваВидовРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
			|	СвойстваВидовРасчета.ДоступенВыборОснования КАК ДоступенВыборОснования,
			|	НачисленияПоказатели.Показатель КАК Показатель,
			|	НачисленияПоказатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
			|	НачисленияПоказатели.Показатель.Наименование КАК Наименование,
			|	НачисленияПоказатели.Показатель.КраткоеНаименование КАК КраткоеНаименование,
			|	НачисленияПоказатели.Показатель.Точность КАК Точность,
			|	НачисленияПоказатели.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
			|		ПО СвойстваВидовРасчета.ВидРасчета = НачисленияПоказатели.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидРасчета,
			|	НомерСтроки";
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Удержания.Ссылка КАК ВидРасчета,
			|	ВЫБОР
			|		КОГДА Удержания.СпособВыполненияУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияУдержаний.ПоЗначениюПоказателяПриОкончательномРасчете)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ИспользуетсяПериод,
			|	Удержания.КоличествоОтображаемыхПоказателей КАК КоличествоОтображаемыхПоказателей,
			|	Удержания.КатегорияУдержания КАК КатегорияУдержания
			|ПОМЕСТИТЬ ВТСвойстваВидовРасчета
			|ИЗ
			|	ПланВидовРасчета.Удержания КАК Удержания
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыРасчетаОсновнойТаблицы КАК ВидыРасчетаОсновнойТаблицы
			|		ПО Удержания.Ссылка = ВидыРасчетаОсновнойТаблицы.ВидРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(СвойстваВидовРасчета.КоличествоОтображаемыхПоказателей) КАК КоличествоОтображаемыхПоказателей
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СвойстваВидовРасчета.ВидРасчета КАК ВидРасчета,
			|	УдержанияПоказатели.НомерСтроки КАК НомерСтроки,
			|	СвойстваВидовРасчета.ИспользуетсяПериод КАК ИспользуетсяПериод,
			|	СвойстваВидовРасчета.КатегорияУдержания КАК КатегорияУдержания,
			|	УдержанияПоказатели.Показатель КАК Показатель,
			|	УдержанияПоказатели.ИспользоватьПриРасчете КАК ИспользоватьПриРасчете,
			|	УдержанияПоказатели.Показатель.Наименование КАК Наименование,
			|	УдержанияПоказатели.Показатель.КраткоеНаименование КАК КраткоеНаименование,
			|	УдержанияПоказатели.Показатель.Точность КАК Точность,
			|	УдержанияПоказатели.Показатель.ОтображатьВДокументахНачисления КАК ОтображатьВДокументахНачисления
			|ИЗ
			|	ВТСвойстваВидовРасчета КАК СвойстваВидовРасчета
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
			|		ПО СвойстваВидовРасчета.ВидРасчета = УдержанияПоказатели.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидРасчета,
			|	НомерСтроки";
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Запрос.Текст = 
		"УНИЧТОЖИТЬ ВТВидыРасчетаОсновнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСвойстваВидовРасчета";
	Запрос.Выполнить();
	
	КвалификаторСтроки20 = Новый КвалификаторыСтроки(20);
	КвалификаторСтроки5 = Новый КвалификаторыСтроки(5);

	ТаблицаВидовРасчета = Новый ТаблицаЗначений;
	ТаблицаВидовРасчета.Колонки.Добавить("ВидРасчета", ?(ЭтоНачисления, Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"), Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания")));
	ТаблицаВидовРасчета.Колонки.Добавить("ВидВремени", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРабочегоВремениСотрудников"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользуетсяПериод", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовРасчета.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	ТаблицаВидовРасчета.Колонки.Добавить("КоличествоПоказателей", Новый ОписаниеТипов("Число"));
	ТаблицаВидовРасчета.Колонки.Добавить("ДоступенВыборОснования", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовРасчета.Колонки.Добавить("КатегорияУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииУдержаний"));
	
	Выборка = РезультатыЗапроса[1].Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.КоличествоОтображаемыхПоказателей) Тогда
		КоличествоПоказателей = Выборка.КоличествоОтображаемыхПоказателей;
		Для Сч = 1 По КоличествоПоказателей Цикл 
			ТаблицаВидовРасчета.Колонки.Добавить("Показатель" + Сч, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
			ТаблицаВидовРасчета.Колонки.Добавить("ПредставлениеПоказателя" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки20));
			ТаблицаВидовРасчета.Колонки.Добавить("ТочностьПоказателя" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки5));
			ТаблицаВидовРасчета.Колонки.Добавить("КомандаРасшифровки" + Сч, Новый ОписаниеТипов("Строка",, КвалификаторСтроки20));
		КонецЦикла;
	КонецЕсли;
	
	РасчетСреднегоЗаработка = Ложь;
	ТипыДокументовРасчетаПоСреднемуЗаработку = УчетСреднегоЗаработка.ТипыДокументовРасчетаПоСреднемуЗаработку();
	Если ТипыДокументовРасчетаПоСреднемуЗаработку.Найти(ТипЗнч(ДокументОбъект.Ссылка)) <> Неопределено Тогда
		РасчетСреднегоЗаработка = Истина;
	КонецЕсли;
	
	ПоказателиСреднегоЗаработка = Новый Соответствие;
	Если РасчетСреднегоЗаработка Тогда 
		ПоказателиСреднегоЗаработка.Вставить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СреднийЗаработокФСС"), Истина);
		ПоказателиОбщегоСреднегоЗаработка = УчетСреднегоЗаработкаКлиентСервер.ПоказателиОбщегоСреднегоЗаработка();
		Для Каждого ПоказательСреднегоЗаработка Из ПоказателиОбщегоСреднегоЗаработка Цикл
			ПоказателиСреднегоЗаработка.Вставить(ПоказательСреднегоЗаработка, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	Выборка = РезультатыЗапроса[2].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл	
		НоваяСтрока = ТаблицаВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Сч = 1;
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Показатель) Тогда
				Продолжить;
			КонецЕсли;	
			ОтображатьПоказатель = Выборка.ИспользоватьПриРасчете И Выборка.ОтображатьВДокументахНачисления;
			Если Не ОтображатьПоказатель Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока["Показатель" + Сч] 				= Выборка.Показатель;
			НоваяСтрока["ТочностьПоказателя" + Сч] 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ЧДЦ=%1", Выборка.Точность);
			НоваяСтрока["ПредставлениеПоказателя" + Сч] = ?(ЗначениеЗаполнено(Выборка.КраткоеНаименование), Выборка.КраткоеНаименование, Выборка.Наименование);
			Если РасчетСреднегоЗаработка И ПоказателиСреднегоЗаработка.Получить(Выборка.Показатель) <> Неопределено Тогда
				НоваяСтрока["КомандаРасшифровки" + Сч] = УчетСреднегоЗаработкаКлиентСервер.ПредставлениеКомандыРасшифровки();
			КонецЕсли;
			Если Выборка.Показатель = ПоказательСдельногоЗаработка Тогда
				НоваяСтрока["КомандаРасшифровки" + Сч] = НСтр("ru = 'Подробнее';
																|en = 'Details'");
			КонецЕсли;	
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаВидовРасчета;
	
КонецФункции

Функция ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") 
		Или ОписаниеТаблицы.ОтображатьПоляРаспределенияРезультатов = Ложь Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("РаспределениеНеЗадано", НСтр("ru = 'Не задано';
															|en = 'Not specified'"));
	Запрос.УстановитьПараметр("РаспределениеНачислений", ДополнительныеПараметры.ИмяВТРаспределение = "ВТРаспределениеРезультатовНачислений");
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА (НЕ ЕСТЬNULL(ПредставлениеРаспределения.ЕстьОшибкиЗаполнения, ЛОЖЬ)
	               |				ИЛИ &ДополнительноеУсловиеПроверкиРаспределенияПособий)
	               |				И ДанныеОсновнойТаблицы.Результат = ЕСТЬNULL(ПредставлениеРаспределения.СуммаРаспределения, 0)
	               |			ТОГДА ЕСТЬNULL(ПредставлениеРаспределения.СтрокаПредставления1, """") + ЕСТЬNULL(ПредставлениеРаспределения.СтрокаПредставления2, """")
	               |		ИНАЧЕ &РаспределениеНеЗадано
	               |	КОНЕЦ КАК ПредставлениеРаспределения
	               |ИЗ
	               |	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредставлениеРаспределенияНачисленийУдержаний КАК ПредставлениеРаспределения
	               |		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = ПредставлениеРаспределения.ИдентификаторСтроки
	               |			И (ПредставлениеРаспределения.РаспределениеНачислений = &РаспределениеНачислений)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДанныеОсновнойТаблицы.НомерСтроки"; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПредставлениеРаспределенияНачисленийУдержаний", ДополнительныеПараметры.ИмяВТПредставлениеРаспределения);
	
	Если ОписаниеТаблицы.ИмяТаблицы = "Пособия"
		Или ОписаниеТаблицы.ИмяТаблицы = "ПособияПерерасчет" Тогда
		
		ВидыОперацийПособия = Новый Массив;
		ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС);
		ВидыОперацийПособия.Добавить(Перечисления.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС);
		Запрос.УстановитьПараметр("ВидыОперацийПособия", ВидыОперацийПособия);
		
		ТекстДопУсловияПроверкиРаспределенияПособий = "(ДанныеОсновнойТаблицы.ВидРасчета.ВидОперацииПоЗарплате В (&ВидыОперацийПособия) И ЕСТЬNULL(ПредставлениеРаспределения.ЗаполненыОсновныеПоляРаспределения, ЛОЖЬ))";		
	Иначе
		ТекстДопУсловияПроверкиРаспределенияПособий = "ЛОЖЬ";	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловиеПроверкиРаспределенияПособий", ТекстДопУсловияПроверкиРаспределенияПособий);
	
			
	Возврат Запрос.Выполнить().Выбрать();
		
КонецФункции	

Функция ВыборкаВторичныхДанныхВычетовКДоходам(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры)
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Форма.СоответствиеКодовВычетовКодамДоходов = Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СоответствиеКодовВычетовКодамДоходов",
			Новый ФиксированноеСоответствие(УчетНДФЛ.ВычетыКДоходам(Год(ДополнительныеПараметры.Период))));
	КонецЕсли;
		
	ОписаниеПанелиВычеты = ДополнительныеПараметры.ОписаниеПанелиВычеты;
	ВычетыКДоходам = ОписаниеПанелиВычеты.НастраиваемыеПанели.Получить("ВычетыКДоходам");
	
	Если ВычетыКДоходам <> ОписаниеТаблицы.ПутьКДанным Тогда 
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КодыДоходаНДФЛ", ОбщегоНазначения.ВыгрузитьКолонку(Форма.СоответствиеКодовВычетовКодамДоходов, "Ключ"));
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	 	|	ВидыДоходовНДФЛ.Ссылка
		|ПОМЕСТИТЬ ВТВидыДоходовНДФЛ
		|ИЗ
		|	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
		|ГДЕ
		|	ВидыДоходовНДФЛ.Ссылка В(&КодыДоходаНДФЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
		|	ДанныеОсновнойТаблицы.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеОсновнойТаблицы.Подразделение КАК Подразделение,
		|	ДанныеОсновнойТаблицы.КодВычета КАК КодВычета,
		|	ДанныеОсновнойТаблицы.СуммаВычета КАК СуммаВычета,
		|	ВЫБОР
		|		КОГДА ДанныеОсновнойТаблицы.КодДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеОсновнойТаблицы.КодДохода В
		|							(ВЫБРАТЬ
		|								ВидыДоходовНДФЛ.Ссылка
		|							ИЗ
		|								ВТВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		КОГДА ДанныеОсновнойТаблицы.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) И Начисления.КодДоходаНДФЛ В
		|				(ВЫБРАТЬ
		|					ВидыДоходовНДФЛ.Ссылка
		|				ИЗ
		|					ВТВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВычетПримененныйКДоходам,
		|	ЕСТЬNULL(Начисления.КатегорияДохода, ЗНАЧЕНИЕ(Перечисление.КатегорииДоходовНДФЛ.ПустаяСсылка)) КАК КатегорияДохода
		|ПОМЕСТИТЬ ВТВычетыКДоходам
		|ИЗ
		|	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО ДанныеОсновнойТаблицы.ВидРасчета = Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВычетыКДоходам.НомерСтроки КАК НомерСтроки,
		|	ВычетыКДоходам.ФизическоеЛицо,
		|	ВычетыКДоходам.ВычетПримененныйКДоходам,
		|	ВычетыКДоходам.КатегорияДохода
		|ИЗ
		|	ВТВычетыКДоходам КАК ВычетыКДоходам
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВидыДоходовНДФЛ";
				   
	УстановитьПривилегированныйРежим(Истина);			   
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДополнительныеПараметры.ПодготовленаВТВычетыКДоходам = Истина;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Функция ТаблицаРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы) 
	
	АдресТаблицыРаспределения = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицы.ПутьКДаннымАдресРаспределенияПоТерриториямУсловиямТруда);
	Если ЗначениеЗаполнено(АдресТаблицыРаспределения) Тогда 
		Возврат ПолучитьИзВременногоХранилища(АдресТаблицыРаспределения);
	КонецЕсли;
	
	ОписаниеСтрокиРаспределения = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
	
	РаспределениеПоТерриториямУсловиямТруда = Новый ТаблицаЗначений;
	Для Каждого ОписаниеПоля Из ОписаниеСтрокиРаспределения Цикл
		ОписаниеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ОписаниеПоля.Значение)));
		РаспределениеПоТерриториямУсловиямТруда.Колонки.Добавить(ОписаниеПоля.Ключ, ОписаниеТипа);
	КонецЦикла;
	РаспределениеПоТерриториямУсловиямТруда.Индексы.Добавить("ИдентификаторСтроки");
	
	Возврат РаспределениеПоТерриториямУсловиямТруда;
	
КонецФункции

Функция ВыборкаРаспределенияПоТерриториямУсловиямТруда(ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры)
	
	Если Не ИспользоватьРаспределениеПоТерриториямУсловиямТруда(ДокументОбъект.Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РаспределятьПоТерриториямУсловиямТруда = Ложь;
	
	ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда = ДополнительныеПараметры.ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда;
	Для Каждого ОписаниеТаблицыСРаспределением Из ОписанияТаблицСРаспределениемПоТерриториямУсловиямТруда Цикл 
		Если ОписаниеТаблицыСРаспределением.ИмяТаблицы = ОписаниеТаблицы.ИмяТаблицы Тогда 
			РаспределятьПоТерриториямУсловиямТруда = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РаспределятьПоТерриториямУсловиямТруда Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиПоТерриториямУсловиямТруда = Справочники.ПоказателиРасчетаЗарплаты.ПоказателиПоТерриториямУсловиямТруда();
	КоличествоПоказателей = ПоказателиПоТерриториямУсловиямТруда.Количество();
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	Для Сч = 1 По КоличествоПоказателей Цикл 
		ТаблицаПоказателей.Колонки.Добавить("Показатель" + Сч, Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	Для Сч = 1 По КоличествоПоказателей Цикл
		НоваяСтрока["Показатель" + Сч] = ПоказателиПоТерриториямУсловиямТруда[Сч - 1];
	КонецЦикла;
	
	Если КоличествоПоказателей = 0 Тогда 
		ТаблицаПоказателей.Колонки.Добавить("Показатель1", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
		КоличествоПоказателей = 1;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей
	               |ПОМЕСТИТЬ ВТПоказателиПоТерриториямУсловиямТруда
	               |ИЗ
	               |	&ТаблицаПоказателей КАК ТаблицаПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеОсновнойТаблицы.НомерСтроки КАК НомерСтроки,
	               |	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	               |	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	               |	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	               |	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	               |	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
				   |	РаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено,
	               |	РаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
	               |	ВЫБОР
	               |		КОГДА РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК РаспределениеЗадано,
	               |	&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей
	               |ИЗ
	               |	ВТДанныеОсновнойТаблицы КАК ДанныеОсновнойТаблицы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоказателиПоТерриториямУсловиямТруда КАК ПоказателиПоТерриториямУсловиямТруда
	               |			ПО (ИСТИНА)
	               |			ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
	               |			ПО (ИСТИНА)
	               |		ПО ДанныеОсновнойТаблицы.ИдентификаторСтроки = РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТПоказателиПоТерриториямУсловиямТруда";
	
	ШаблонПолейСвойствПоказателей = "
	|	ТаблицаПоказателей.Показатель1 КАК Показатель1,";
	
	ШаблонПолейЗначенийПоказателей = "
	|	ЕСТЬNULL(Показатели1.Показатель, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка)) КАК Показатель1,
	|	ЕСТЬNULL(Показатели1.Значение, 0) КАК Значение1,";
	
	ШаблонИсточниковЗначенийПоказателей = "
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели1
	|		ПО РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей = Показатели1.ИдентификаторСтрокиВидаРасчета
	|			И (ПоказателиПоТерриториямУсловиямТруда.Показатель1 = Показатели1.Показатель)";
		
	ПоляСвойствПоказателей = "";
	ПоляЗначенийПоказателей = "";
	ИсточникиЗначенийПоказателей = "";
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ПоляСвойствПоказателей = ПоляСвойствПоказателей + СтрЗаменить(ШаблонПолейСвойствПоказателей, "1", Строка(Сч));		
		ПоляЗначенийПоказателей = ПоляЗначенийПоказателей + СтрЗаменить(ШаблонПолейЗначенийПоказателей, "1", Строка(Сч));	
		ИсточникиЗначенийПоказателей = ИсточникиЗначенийПоказателей + СтрЗаменить(ШаблонИсточниковЗначенийПоказателей, "1", Строка(Сч));
	КонецЦикла;	
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПоляСвойствПоказателей);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПоляЗначенийПоказателей);
	
	ПодстрокаПоиска = "&ПоляСвойствПоказателей КАК ПоляСвойствПоказателей";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляСвойствПоказателей); 
	
	ПодстрокаПоиска = "&ПоляЗначенийПоказателей КАК ПоляЗначенийПоказателей";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПоляЗначенийПоказателей); 
	
	ПодстрокаПоиска = "ЛЕВОЕ СОЕДИНЕНИЕ #ИсточникиЗначенийПоказателей КАК ИсточникиЗначенийПоказателей
	                  |			ПО (ИСТИНА)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ИсточникиЗначенийПоказателей); 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаПоказателей", ТаблицаПоказателей);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ЗаполнитьПредставленияРаспределенияПоТерриториямУсловиямТруда(Форма, ОписаниеТаблицы, Выборка, СтрокаДанных, РаспределениеПоТерриториямУсловиямТруда, КоличествоПоказателей)
	
	Если Не Выборка.РаспределениеЗадано Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыПредставления = Новый Соответствие;
	ЗначенияПоказателей = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		
		СтрокаРаспределения = РаспределениеПоТерриториямУсловиямТруда.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределения, Выборка);
		
		Если ЗначениеЗаполнено(СтрокаРаспределения.Территория) Тогда
			ЭлементыПредставления.Вставить(СтрокаРаспределения.Территория);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРаспределения.УсловияТруда) Тогда
			ЭлементыПредставления.Вставить(СтрокаРаспределения.УсловияТруда);
		КонецЕсли;
		// Если заполнен показатель, собираем его уникальные значения.
		Для НомерПоказателя = 1 По КоличествоПоказателей Цикл
			Показатель = СтрокаРаспределения["Показатель" + НомерПоказателя];
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				Продолжить;
			КонецЕсли;
			Значения = ЗначенияПоказателей[Показатель];
			Если Значения = Неопределено Тогда
				Значения = Новый Соответствие;
				ЗначенияПоказателей.Вставить(Показатель, Значения);
			КонецЕсли;
			Значения.Вставить(СтрокаРаспределения["Значение" + НомерПоказателя]);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполняем представление в строке.
	ПредставлениеРаспределения = "";
	Для Каждого КлючПредставления Из ЭлементыПредставления Цикл
		ПредставлениеРаспределения = ПредставлениеРаспределения + КлючПредставления.Ключ + ", ";
	КонецЦикла;
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеРаспределения, 2);
	СтрокаДанных.ПредставлениеРаспределенияПоТерриториямУсловиямТруда = ПредставлениеРаспределения;
	// Формируем представление показателей.
	Если ЗначенияПоказателей.Количество() > 0 Тогда
		КоличествоПоказателейНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.МаксимальноеКоличествоПоказателейПоОписаниюТаблицы(Форма, ОписаниеТаблицы);
		// Находим поле показателя.
		Для НомерПоказателя = 1 По КоличествоПоказателейНачислений Цикл
			Показатель = СтрокаДанных["Показатель" + НомерПоказателя];
			Если Не ЗначениеЗаполнено(Показатель) Тогда
				Продолжить;
			КонецЕсли;
			Значения = ЗначенияПоказателей[Показатель];
			Если Значения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Значения.Вставить(СтрокаДанных["Значение" + НомерПоказателя]);
			ПредставлениеЗначений = "";
			Для Каждого КлючИЗначение Из Значения Цикл
				ПредставлениеЗначений = ПредставлениеЗначений + Строка(КлючИЗначение.Ключ) + Символы.ПС;
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ПредставлениеЗначений);
			СтрокаДанных["ПредставлениеЗначенийПоТерриториямУсловиямТруда" + НомерПоказателя] = ПредставлениеЗначений;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВторичныеДанныеНДФЛПоДаннымОбъекта(Форма, ДокументОбъект, ОписаниеТаблицы, МенеджерВременныхТаблиц, ДополнительныеПараметры) Экспорт 
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ДополнительныеПараметры.ПодготовленаВТВычетыКДоходам Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеПанелиВычеты = ДополнительныеПараметры.ОписаниеПанелиВычеты;
	
	ПутьКДаннымНДФЛ = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ПутьКДаннымНДФЛ;
	МассивИмен = СтрРазделить(ПутьКДаннымНДФЛ, ".");
	ИмяТаблицыНДФЛ = МассивИмен[МассивИмен.Количество()-1];
	
	ПутьКДаннымКорректировкиВыплаты = ОписаниеПанелиВычеты.ТабличнаяЧастьКорректировкиВыплаты.ПутьКДаннымКорректировкиВыплаты;
	МассивИмен = СтрРазделить(ПутьКДаннымКорректировкиВыплаты, ".");
	ИмяТаблицыКорректировкиВыплаты = МассивИмен[МассивИмен.Количество()-1];
	
	ПутьКДаннымВычетыНаДетейИИмущественные = ОписаниеПанелиВычеты.НастраиваемыеПанели.Получить("ВычетыНаДетейИИмущественные");
	МассивИмен = СтрРазделить(ПутьКДаннымВычетыНаДетейИИмущественные, ".");
	ИмяТаблицыВычетыНаДетейИИмущественные = МассивИмен[МассивИмен.Количество()-1];
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("ТаблицаНДФЛ.Налог");
	ИменаРесурсовЗачета = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве("ТаблицаНДФЛ.ЗачтеноАвансовыхПлатежей");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ДокументОбъект[ИмяТаблицыНДФЛ]);
	Запрос.УстановитьПараметр("ТаблицаКорректировкиВыплаты", ДокументОбъект[ИмяТаблицыКорректировкиВыплаты]);
	Запрос.УстановитьПараметр("ТаблицаВычетыНаДетейИИмущественные", ДокументОбъект[ИмяТаблицыВычетыНаДетейИИмущественные]);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаКорректировкиВыплаты.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКорректировкиВыплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаКорректировкиВыплаты.КорректировкаВыплаты КАК КорректировкаВыплаты,
	|	ТаблицаКорректировкиВыплаты.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТТаблицаКорректировкиВыплаты
	|ИЗ
	|	&ТаблицаКорректировкиВыплаты КАК ТаблицаКорректировкиВыплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНДФЛ.Подразделение КАК Подразделение,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичный КАК ПримененныйВычетЛичный,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКодВычета КАК ПримененныйВычетЛичныйКодВычета,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату КАК ПримененныйВычетЛичныйКЗачетуВозврату,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета КАК ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
	|	0 КАК Результат,
	|	ТаблицаНДФЛ.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтроки,
	|	ТаблицаНДФЛ.КатегорияДохода
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаНДФЛ.Подразделение КАК Подразделение,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичный КАК ПримененныйВычетЛичный,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКодВычета КАК ПримененныйВычетЛичныйКодВычета,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату КАК ПримененныйВычетЛичныйКЗачетуВозврату,
	|	ТаблицаНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета КАК ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета,
	|	ТаблицаНДФЛ.Результат + ЕСТЬNULL(ТаблицаКорректировкиВыплаты.КорректировкаВыплаты, 0) КАК Результат,
	|	ТаблицаНДФЛ.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаНДФЛ.КатегорияДохода
	|ПОМЕСТИТЬ ВТДанныеОсновнойТаблицы
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаКорректировкиВыплаты КАК ТаблицаКорректировкиВыплаты
	|		ПО ТаблицаНДФЛ.ФизическоеЛицо = ТаблицаКорректировкиВыплаты.ФизическоеЛицо
	|			И ТаблицаНДФЛ.ИдентификаторСтроки = ТаблицаКорректировкиВыплаты.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВычетыНаДетейИИмущественные.КодВычета КАК КодВычета,
	|	ТаблицаВычетыНаДетейИИмущественные.РазмерВычета КАК РазмерВычета,
	|	ТаблицаВычетыНаДетейИИмущественные.ИдентификаторСтрокиНДФЛ КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТВычетыНаДетейИИмущественные
	|ИЗ
	|	&ТаблицаВычетыНаДетейИИмущественные КАК ТаблицаВычетыНаДетейИИмущественные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетыНаДетейИИмущественные.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	СУММА(ВычетыНаДетейИИмущественные.РазмерВычета) КАК РазмерВычета
	|ПОМЕСТИТЬ ВТВычетыНаДетейИИмущественныеПредставление
	|ИЗ
	|	ВТВычетыНаДетейИИмущественные КАК ВычетыНаДетейИИмущественные
	|ГДЕ
	|	ВычетыНаДетейИИмущественные.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыНаДетейИИмущественные.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВычетыКДоходам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВычетыКДоходам.Подразделение КАК Подразделение,
	|	СУММА(ВычетыКДоходам.СуммаВычета) КАК СуммаВычета,
	|	ВычетыКДоходам.КатегорияДохода КАК КатегорияДохода
	|ПОМЕСТИТЬ ВТВычетыКДоходамПредставление
	|ИЗ
	|	ВТВычетыКДоходам КАК ВычетыКДоходам
	|ГДЕ
	|	ВычетыКДоходам.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|	И ВычетыКДоходам.ВычетПримененныйКДоходам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыКДоходам.ФизическоеЛицо,
	|	ВычетыКДоходам.Подразделение,
	|	ВычетыКДоходам.КатегорияДохода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНДФЛ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|			ТОГДА ДанныеНДФЛ.ПримененныйВычетЛичный
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозвратуКодВычета <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
	|			ТОГДА ДанныеНДФЛ.ПримененныйВычетЛичныйКЗачетуВозврату
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПредставлениеВычетовЛичных,
	|	ЕСТЬNULL(ВычетыНаДетейИИмущественныеПредставление.РазмерВычета, 0) КАК ПредставлениеВычетовНаДетейИИмущественных,
	|	ЕСТЬNULL(ВычетыКДоходамПредставление.СуммаВычета, 0) КАК ПредставлениеВычетовКДоходам
	|ИЗ
	|	ВТДанныеОсновнойТаблицы КАК ДанныеНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыНаДетейИИмущественныеПредставление КАК ВычетыНаДетейИИмущественныеПредставление
	|		ПО ДанныеНДФЛ.ИдентификаторСтроки = ВычетыНаДетейИИмущественныеПредставление.ИдентификаторСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВычетыКДоходамПредставление КАК ВычетыКДоходамПредставление
	|		ПО ДанныеНДФЛ.ФизическоеЛицо = ВычетыКДоходамПредставление.ФизическоеЛицо
	|			И ДанныеНДФЛ.Подразделение = ВычетыКДоходамПредставление.Подразделение
	|			И ДанныеНДФЛ.КатегорияДохода = ВычетыКДоходамПредставление.КатегорияДохода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыНаДетейИИмущественные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыНаДетейИИмущественныеПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыКДоходам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВычетыКДоходамПредставление";
	
	ТекстНалогов = "";
	Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
		ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "+ ", "") + ИмяРесурса + " ";
	КонецЦикла;
	Для каждого ИмяРесурса Из ИменаРесурсовЗачета Цикл
		ТекстНалогов = ТекстНалогов + ?(ЗначениеЗаполнено(ТекстНалогов), "- ", "") + ИмяРесурса + " ";
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "0 КАК Результат,", ТекстНалогов + " КАК Результат,");
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ВыборкаПредставленийРаспределения = ВыборкаПредставленийРаспределения(ДокументОбъект, МенеджерВременныхТаблиц, ОписаниеТаблицы, ДополнительныеПараметры);
	
	УничтожитьВТДанныеОсновнойТаблицы(Запрос.МенеджерВременныхТаблиц);
	
	ПредставленияПериодов = Новый Соответствие;
	ДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымНДФЛ);
	
	КонтролируемыеПоля = Неопределено;
	ДополнительныеПараметры.КонтролируемыеПоля.Свойство(ИмяТаблицыНДФЛ, КонтролируемыеПоля);
	
	ИмяПоляПериод = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод;
	ИмяПоляПериодСтрокой = ОписаниеПанелиВычеты.ТабличнаяЧастьНДФЛ.ИмяПоляПериод + "Строкой";
	
	МаксимальныйИдентификаторСтрокиНДФЛ = 0;
	
	ИменаКолонокТаблицыРаспределенияРезультатовРасчета = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
	ОписаниеСтрокиРаспределенияРезультатовРасчета = Новый Структура(ИменаКолонокТаблицыРаспределенияРезультатовРасчета);
	
	Для Каждого СтрокаДанных Из ДанныеФормы Цикл
		
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
		
		Если ЗначениеЗаполнено(ИмяПоляПериод) Тогда
			ПериодСтрокой = ПредставленияПериодов.Получить(СтрокаДанных[ИмяПоляПериод]);
			Если ПериодСтрокой = Неопределено Тогда 
				ПериодСтрокой = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(СтрокаДанных[ИмяПоляПериод]);
				ПредставленияПериодов.Вставить(СтрокаДанных[ИмяПоляПериод], ПериодСтрокой);
			КонецЕсли;
			СтрокаДанных[ИмяПоляПериодСтрокой] = ПериодСтрокой;
		КонецЕсли;
		
		Если МаксимальныйИдентификаторСтрокиНДФЛ < СтрокаДанных.ИдентификаторСтрокиНДФЛ Тогда
			МаксимальныйИдентификаторСтрокиНДФЛ = СтрокаДанных.ИдентификаторСтрокиНДФЛ;
		КонецЕсли;
		
		Если ВыборкаПредставленийРаспределения <> Неопределено Тогда
			ВыборкаПредставленийРаспределения.Следующий();
			СтрокаДанных.КомандаРедактированияРаспределения = ВыборкаПредставленийРаспределения.ПредставлениеРаспределения;
		КонецЕсли;
		
		Если Не Форма.НайденыИсправленияПриОткрытии И КонтролируемыеПоля <> Неопределено Тогда 
			Для Каждого ОписаниеПоля Из КонтролируемыеПоля Цикл 
				ИмяПоля = ОписаниеПоля.Ключ;
				Если СтрокаДанных[ИмяПоля] = Истина Тогда
					Форма.НайденыИсправленияПриОткрытии = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ИмяКолонкиПримененныеВычеты = ОписаниеПанелиВычеты.ИмяКолонкиПримененныеВычеты;
		Если ЗначениеЗаполнено(ИмяКолонкиПримененныеВычеты) Тогда 
			СтрокаДанных[ИмяКолонкиПримененныеВычеты] = Выборка.ПредставлениеВычетовЛичных + 
				Выборка.ПредставлениеВычетовНаДетейИИмущественных + Выборка.ПредставлениеВычетовКДоходам;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма[ОписаниеПанелиВычеты.ИмяГруппыФормыПанелиВычеты + "МаксимальныйИдентификаторСтрокиНДФЛ"] = МаксимальныйИдентификаторСтрокиНДФЛ;
	
	ДополнительныеПараметры.ПодготовленаВТВычетыКДоходам = Ложь;
	
КонецПроцедуры

// Устанавливает дополнительное свойство всем наборам записей, входящим в состав движений документа.
//
Процедура УстановитьДополнительноеСвойствоДвижений(Движения, ИмяСвойства, ЗначениеСвойства = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Движения Цикл
		
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьОтложеннуюРегистрациюВторичныхДанныхПоДвижениямДокумента(Движения) Экспорт
	
	РасчетЗарплатыРасширенный.ИнициализироватьОтложеннуюРегистрациюПлановогоФОТ(Движения);
	КадровыйУчетРасширенный.ИнициализироватьОтложеннуюРегистрациюТекущихКадровыхДанных(Движения);
	
КонецПроцедуры

Процедура ПроверитьЗадвоениеФизическихЛицВТабличнойЧастиДокумента(Объект, ИмяТабличнойЧасти, Отказ, ИмяРеквизитаФизическоеЛицо = "ФизическоеЛицо") Экспорт
	
	ДанныеТабличнойЧасти = Объект[ИмяТабличнойЧасти];
	НомераСтрокДанныхФизическихЛиц = Новый Соответствие;
	
	Для каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		
		ФизическоеЛицо = СтрокаТабличнойЧасти[ИмяРеквизитаФизическоеЛицо];
		
		НомерСтрокиФизическогоЛица = НомераСтрокДанныхФизическихЛиц.Получить(ФизическоеЛицо);
		Если НомерСтрокиФизическогоЛица = Неопределено Тогда
			НомераСтрокДанныхФизическихЛиц.Вставить(ФизическоеЛицо, СтрокаТабличнойЧасти.НомерСтроки);
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Данные по %1 уже вводились в строке';
											|en = 'Data of %1 has already been entered into the line'") + " № %2",
				ФизическоеЛицо,
				НомерСтрокиФизическогоЛица);
			
			ИндексСтроки = СтрокаТабличнойЧасти.НомерСтроки - 1;
			
			Поле = "Объект." + ИмяТабличнойЧасти + "[" + ИндексСтроки + "]." + ИмяРеквизитаФизическоеЛицо;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияИПараметрыПоОтбору(Отборы, Условие, Параметры, СчетчикПараметров)
	
	Если Отборы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтборов = Новый Массив;
	
	Для Каждого Отбор Из Отборы Цикл
		ИмяПараметра = "Параметр" + СчетчикПараметров;
		МассивОтборов.Добавить(СтрШаблон("%1 %2 (&%3)", Отбор.ЛевоеЗначение, Отбор.ВидСравнения, ИмяПараметра));
		СчетчикПараметров = СчетчикПараметров + 1;
		Параметры.Вставить(ИмяПараметра, Отбор.ПравоеЗначение);
	КонецЦикла;
	
	Условие = СтрСоединить(МассивОтборов, Символы.ПС +"И ");
	
КонецПроцедуры

#Область СписочныеДокументы

Процедура ЗагрузитьТабличнуюЧасть(Объект, Результат, ИмяТабличнойЧасти, ВедущиеТабличныеЧасти, СоответствияИдентификаторов, ИдентификаторСтрокиСотрудника)
	
	СписокВедущихТабличныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВедущиеТабличныеЧасти);
	Для каждого ОписаниеСтроки Из Результат.ТабличныеЧасти[ИмяТабличнойЧасти] Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеСтроки);
		НоваяСтрока.ИдентификаторСтрокиСотрудника = ИдентификаторСтрокиСотрудника;
		
		Для каждого ИмяВедущейТабличнойЧасти Из СписокВедущихТабличныхЧастей Цикл
			
			СоответствияИдентификаторовТабличнойЧасти = СоответствияИдентификаторов.Получить(ИмяВедущейТабличнойЧасти);
			Если СоответствияИдентификаторовТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяИдентификатораСтроки = ИмяРеквизитаИдентификаторСтроки(Результат, ИмяТабличнойЧасти);
			
			Если Не ПустаяСтрока(ИмяИдентификатораСтроки) Тогда
				
				ИдентификаторСтроки = НоваяСтрока[ИмяИдентификатораСтроки];
				
				НовыйИдентификатор = СоответствияИдентификаторовТабличнойЧасти.Получить(ИдентификаторСтроки);
				Если НовыйИдентификатор <> Неопределено Тогда
					НоваяСтрока[ИмяИдентификатораСтроки] = НовыйИдентификатор;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяРеквизитаИдентификаторСтроки(Результат, ИмяТабличнойЧасти)
	
	ИмяРеквизита = "";
	
	Если СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтрокиВидаРасчета") Тогда
		ИмяРеквизита = "ИдентификаторСтрокиВидаРасчета";
	ИначеЕсли СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтрокиНДФЛ") Тогда
		ИмяРеквизита = "ИдентификаторСтрокиНДФЛ";
	ИначеЕсли СтрНайти(Результат.ТабличныеЧасти.ОписаниеТабличныхЧастей[ИмяТабличнойЧасти], "ИдентификаторСтроки") Тогда
		ИмяРеквизита = "ИдентификаторСтроки";
	КонецЕсли;
	
	Возврат ИмяРеквизита;
	
КонецФункции

Процедура ЗаблокироватьДокументДляРедактирования(Форма) Экспорт
	
	Попытка
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Форма.ТолькоПросмотр = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

Функция ДоступноСозданиеОбъекта(ОбъектМетаданных)
	
	ДоступноСоздание = Ложь;
	
	Если ОбъектМетаданных <> Неопределено Тогда
		
		Если ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			
			Если ПравоДоступа("Добавление", ОбъектМетаданных) Тогда
				ДоступноСоздание = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ДоступноСоздание;
	
КонецФункции

// Обслуживание плановых начислений, редактируемых в отдельных полях формы
// РК, СН, Надбавка за вредность.
//

#Область НачисленияРедактируемыеВОтдельныхПолях

Процедура УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(Форма, ИмяНачисленияВЭлементе, Видимость, ПредставлениеОтменяемогоНачисления, ФОТНеРедактируется, ФорматнаяСтрокаЗначенияПоказателя = "ЧЦ=5; ЧДЦ=2")
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Размер" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияРазмер" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияРазмер" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не Видимость);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Размер" + ИмяНачисленияВЭлементе],
		"ТолькоПросмотр",
		ФОТНеРедактируется);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ГруппаРасшифровка" + ИмяНачисленияВЭлементе],
		"Видимость",
		Видимость);
	
	МеняетсяСоставНачислений = НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "СоставНачисленийНеМеняется");
	
	ОтменитьНачисление = Ложь;
	Если МеняетсяСоставНачислений
		И НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачисление" + ИмяНачисленияВЭлементе) Тогда
		
		ОтменитьНачисление = Истина;
		ВидимостьПолейРедактирования = Ложь;
		ЦветТекстаПоля = ЦветаСтиля.ПоясняющийТекст;
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПредставлениеНачисление" + ИмяНачисленияВЭлементе, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеОтменяемогоНачисления,
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Начисление" + ИмяНачисленияВЭлементе),
				Формат(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателя" + ИмяНачисленияВЭлементе), ФорматнаяСтрокаЗначенияПоказателя)));
		
	Иначе
		
		ВидимостьПолейРедактирования = Видимость;
		ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы;
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПредставлениеНачисление" + ИмяНачисленияВЭлементе,
			ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Начисление" + ИмяНачисленияВЭлементе));
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"ЦветТекста",
		ЦветТекстаПоля);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["Начисление" + ИмяНачисленияВЭлементе],
		"РастягиватьПоГоризонтали",
		НЕ ВидимостьПолейРедактирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"Видимость",
		ВидимостьПолейРедактирования);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияЗначениеПоказателя" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияЗначениеПоказателя" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не ВидимостьПолейРедактирования И Видимость);
		
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ГруппаРасшифровка" + ИмяНачисленияВЭлементе],
		"Видимость",
		ВидимостьПолейРедактирования И Видимость);
	
	Если ИменаЭлементовРедактирования.Свойство("ДекорацияГруппаРасшифровка" + ИмяНачисленияВЭлементе) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования["ДекорацияГруппаРасшифровка" + ИмяНачисленияВЭлементе],
			"Видимость",
			Не ВидимостьПолейРедактирования И Видимость);
		
	КонецЕсли; 
	
	Если ВРег(ИмяНачисленияВЭлементе) = ВРег("СевернаяНадбавка") Тогда
		ТолькоПросмотрЗначенияПоказателя = Истина;
	Иначе
		ТолькоПросмотрЗначенияПоказателя = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		ИменаЭлементовРедактирования["ЗначениеПоказателя" + ИмяНачисленияВЭлементе],
		"ТолькоПросмотр",
		НЕ МеняетсяСоставНачислений Или Форма.ТолькоПросмотр Или ТолькоПросмотрЗначенияПоказателя);
		
	Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "Начисление" + ИмяНачисленияВЭлементе); 
	ОтражениеЗарплатыВБухучетеРасширенный.УстановитьБухучетНачисленийРедактируемыхВОтдельныхПолях(Форма, Начисление, Видимость, ОтменитьНачисление);

	
КонецПроцедуры

Процедура УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(Форма) Экспорт
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	Если ИменаЭлементовРедактирования <> Неопределено Тогда
		
		// Отображение полей надбавки за вредность
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ВидимостьНадбавкаЗаВредность = ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьВходитВСоставПлановыхНачислений(Форма);
		УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(
			Форма, "НадбавкаЗаВредность", ВидимостьНадбавкаЗаВредность, НСтр("ru = 'Отменено начисление';
																			|en = 'Accrual is canceled'") + " ""%1"" (%2)", ФОТНеРедактируется);
		
		// Отображение полей редактирования РК.
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ВидимостьРК = ЗарплатаКадрыРасширенныйКлиентСервер.РайонныйКоэффициентВходитВСоставПлановыхНачислений(Форма);
		УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(
			Форма, "РайонныйКоэффициент", ВидимостьРК, НСтр("ru = 'Отменено начисление';
															|en = 'Accrual is canceled'") + " ""%1"" (%2)", ФОТНеРедактируется, "ЧЦ=5; ЧДЦ=3");
		
		// Отображение полей редактирования СН.
		
		Начисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавка");
		Если ЗначениеЗаполнено(Начисление) Тогда
			ФОТНеРедактируется = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(Начисление).ФОТНеРедактируется;
		Иначе
			ФОТНеРедактируется = Истина;
		КонецЕсли;
		
		ВидимостьСН = ЗарплатаКадрыРасширенныйКлиентСервер.СевернаяНадбавкаВходитВСоставПлановыхНачислений(Форма);
		УстановитьОтображениеНачисленияРедактируемогоВОтдельныхПолях(
			Форма, "СевернаяНадбавка", ВидимостьСН, НСтр("ru = 'Отменено начисление';
														|en = 'Accrual is canceled'") + " ""%1""", ФОТНеРедактируется);
		
		ЗарплатаКадрыРасширенныйКлиентСервер.УстановитьВидимостьВкладаВФОТРНачисленийРедактируемыхВОтдельныхПолях(Форма);
		
		ВидимостьБухучета = ВидимостьНадбавкаЗаВредность Или ВидимостьРК Или ВидимостьСН;
		ОтражениеЗарплатыВБухучетеРасширенный.УстановитьВидимостьБухучетНачисленийРедактируемыхВОтдельныхПолях(Форма, ВидимостьБухучета);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВосстановитьОтображениеПроцентаСевернойНадбавки(Форма) Экспорт
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	Если ИменаЭлементовРедактирования <> Неопределено Тогда
		
		// Процент северной надбавки всегда в режиме просмотра
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования.ЗначениеПоказателяСевернаяНадбавка,
			"ТолькоПросмотр",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИзменениеСоставаПлановыхНачислений(Форма, СоставНачисленийМеняется, РазрешеноРедактироватьФОТ = Неопределено) Экспорт
	
	Если РазрешеноРедактироватьФОТ = Неопределено Тогда
		РазрешеноРедактироватьФОТ = СоставНачисленийМеняется;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "СоставНачисленийНеМеняется", НЕ СоставНачисленийМеняется);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НеРазрешеноРедактироватьФОТ", НЕ РазрешеноРедактироватьФОТ);
	УстановитьОтображениеНачисленийРедактируемыхВОтдельныхПолях(Форма);
	
КонецПроцедуры

Процедура УстановитьНастройкиРедактированияНачисленийВОтдельныхПолях(Форма, Знач Сотрудник, Знач ДатаСведений, Знач Подразделение = Неопределено, Знач Организация = Неопределено, Знач Территория = Неопределено, Знач Должность = Неопределено, УстановитьЗначенияПоказателей = Истина) Экспорт
	
	СтруктурнаяЕдиница = Неопределено;
	ИспользоватьШтатноеРасписание = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьШтатноеРасписание");
	Если Не ЗначениеЗаполнено(Должность) Тогда
		
		Если ИспользоватьШтатноеРасписание Тогда
			ИменаКадровыхДанных = "ДолжностьПоШтатномуРасписанию";
		Иначе
			ИменаКадровыхДанных = "Должность";
		КонецЕсли;
		
	Иначе
		ИменаКадровыхДанных = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Территория) Тогда
		СтруктурнаяЕдиница = Территория;
	ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
		СтруктурнаяЕдиница = Подразделение;
	Иначе
		ИменаКадровыхДанных = ?(ПустаяСтрока(ИменаКадровыхДанных), "", ИменаКадровыхДанных + ",") + "Подразделение,Территория";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИменаКадровыхДанных) Тогда
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, ИменаКадровыхДанных, ДатаСведений, , Ложь);
		Если КадровыеДанные.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(Должность) Тогда
				
				Если ИспользоватьШтатноеРасписание Тогда
					Должность = КадровыеДанные[0].ДолжностьПоШтатномуРасписанию;
				Иначе
					Должность = КадровыеДанные[0].Должность;
				КонецЕсли;
				
			КонецЕсли; 

			Если Не ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
				Если ЗначениеЗаполнено(КадровыеДанные[0].Территория) Тогда
					СтруктурнаяЕдиница = КадровыеДанные[0].Территория;
				Иначе
					СтруктурнаяЕдиница = КадровыеДанные[0].Подразделение;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		СтруктурнаяЕдиница = Организация;
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНадбавкуЗаВредность")
		И ЗначениеЗаполнено(Должность) Тогда
		
		ДанныеДолжности = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ДанныеДолжности");
		Если ДанныеДолжности <> Неопределено Тогда
			ДанныеУсловийТруда = ДанныеДолжности.Получить(Должность);
		КонецЕсли;
		
		Если ДанныеУсловийТруда = Неопределено Тогда
			
			Если ИспользоватьШтатноеРасписание Тогда
				ДанныеУсловийТруда = УправлениеШтатнымРасписанием.ДанныеПозицииШтатногоРасписания(Должность, ДатаСведений, Ложь, Ложь);
			Иначе
				ДанныеУсловийТруда = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Должность, "ВыплачиваетсяНадбавкаЗаВредность,ПроцентНадбавкиЗаВредность");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.ОхранаТруда") Тогда
			МодульОхранаТрудаФормы = ОбщегоНазначения.ОбщийМодуль("ОхранаТрудаФормы");
			МодульОхранаТрудаФормы.ПереопределитьДанныеНадбавкиЗаВредность(
				Форма, Организация, ДанныеУсловийТруда, Должность, Сотрудник, ДатаСведений);
		КонецЕсли;
		
		Если ДанныеУсловийТруда <> Неопределено Тогда
			
			ПрименятьНадбавкуЗаВредность = ДанныеУсловийТруда.ВыплачиваетсяНадбавкаЗаВредность;
			ПроцентНадбавкиЗаВредность = ДанныеУсловийТруда.ПроцентНадбавкиЗаВредность;
			
		КонецЕсли;
		
	Иначе
		ПрименятьНадбавкуЗаВредность = Ложь;
		ПроцентНадбавкиЗаВредность = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктурнаяЕдиница, "РайонныйКоэффициент");
		РайонныйКоэффициент = ЗначенияРеквизитов.РайонныйКоэффициент;
		ПрименятьСевернуюНадбавку = ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия(СтруктурнаяЕдиница, ДатаСведений);
	Иначе
		РайонныйКоэффициент = 1;
		ПрименятьСевернуюНадбавку = Ложь;
	КонецЕсли;
	
	ПрименятьРайонныйКоэффициент = РайонныйКоэффициент > 1;
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеРайонныйКоэффициент", ПрименятьРайонныйКоэффициент);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеСевернаяНадбавка", ПрименятьСевернуюНадбавку);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПрименяетсяНачислениеНадбавкаЗаВредность", ПрименятьНадбавкуЗаВредность);
	
	Если ПрименятьНадбавкуЗаВредность И УстановитьЗначенияПоказателей Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ПроцентНадбавкиЗаВредность);
	КонецЕсли; 
		
	СтароеЗначение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РайонныйКоэффициентСтруктурнойЕдиницы");
	Если СтароеЗначение <> РайонныйКоэффициент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "РайонныйКоэффициентСтруктурнойЕдиницы", РайонныйКоэффициент);
	КонецЕсли;
	
	Если УстановитьЗначенияПоказателей Тогда
		СтароеЗначение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент");
		Если СтароеЗначение <> РайонныйКоэффициент Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", РайонныйКоэффициент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущиеЗначенияНачисленийСотрудникаРедактируемыхВОтдельныхПолях(Форма, Сотрудник, ДатаСведений, ИсправленныйДокумент = Неопределено) Экспорт
	
	НачислениеНадбавкаЗаВредностьИспользуется = Ложь;
	ЗначениеПоказателяНадбавкаЗаВредность = Неопределено;
	
	НачислениеРайонныйКоэффициентИспользуется = Ложь;
	ЗначениеПоказателяРайонныйКоэффициент = Неопределено;
	
	НачислениеСевернаяНадбавкаИспользуется = Ложь;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Если ЗначениеЗаполнено(ИсправленныйДокумент) И НЕ Форма.Объект.Проведен Тогда
			ИсключаемыйРегистратор = ИсправленныйДокумент;
		Иначе
			ДанныеРеквизитов = Новый Структура("СсылкаНаОбъект", Null);
			ЗаполнитьЗначенияСвойств(ДанныеРеквизитов, Форма);
			Если ДанныеРеквизитов.СсылкаНаОбъект = Null Тогда
				ИсключаемыйРегистратор = Форма.Объект.Ссылка;
			Иначе
				ИсключаемыйРегистратор = ДанныеРеквизитов.СсылкаНаОбъект;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущиеНачисленияСотрудника = КадровыйУчетРасширенный.ТекущиеНачисленияСотрудника(Сотрудник, ДатаСведений, ИсключаемыйРегистратор, Ложь);
		
		Если ТекущиеНачисленияСотрудника <> Неопределено Тогда
			
			НачислениеНадбавкаЗаВредность = ТекущиеНачисленияСотрудника.Получить(
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность"));
			
			Если НачислениеНадбавкаЗаВредность <> Неопределено И НачислениеНадбавкаЗаВредность.Количество() > 0 Тогда
					
				НачислениеНадбавкаЗаВредностьИспользуется = Истина;
				
				ЗначениеПоказателя = НачислениеНадбавкаЗаВредность[0].Показатели.Получить(
					ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность"));
					
				Если ЗначениеПоказателя <> Неопределено И Не ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
					
					Если Не ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется")
						Или Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность")) Тогда
						
						ЗначениеПоказателяНадбавкаЗаВредность = ЗначениеПоказателя;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НачислениеРайонныйКоэффициент = ТекущиеНачисленияСотрудника.Получить(
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент"));
			
			Если НачислениеРайонныйКоэффициент <> Неопределено И НачислениеРайонныйКоэффициент.Количество() > 0 Тогда
				
				НачислениеРайонныйКоэффициентИспользуется = Истина;
				
				ЗначениеПоказателя = НачислениеРайонныйКоэффициент[0].Показатели.Получить(
					ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент"));
				
				Если ЗначениеПоказателя <> Неопределено Тогда
					
					Если Не ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется")
						Или Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент")) Тогда
						
						ЗначениеПоказателяРайонныйКоэффициент = ЗначениеПоказателя;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			НачислениеСевернаяНадбавка = ТекущиеНачисленияСотрудника.Получить(
				ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавка"));
				
			Если НачислениеСевернаяНадбавка <> Неопределено Тогда
				НачислениеСевернаяНадбавкаИспользуется = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется", НачислениеНадбавкаЗаВредностьИспользуется);
	Если ЗначениеПоказателяНадбавкаЗаВредность <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность", ЗначениеПоказателяНадбавкаЗаВредность)
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется", НачислениеРайонныйКоэффициентИспользуется);
	Если ЗначениеПоказателяРайонныйКоэффициент = Неопределено Тогда
		
		ЗначениеПоказателяРайонныйКоэффициентФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент");
		Если ЗначениеПоказателяРайонныйКоэффициентФормы < 1 Тогда
			ЗначениеПоказателяРайонныйКоэффициент = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется", НачислениеСевернаяНадбавкаИспользуется);
	Если ЗначениеПоказателяРайонныйКоэффициент <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент", ЗначениеПоказателяРайонныйКоэффициент);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеСевернойНадбавкиВФорме(Форма, Сотрудник, ДатаСобытия, ФизическоеЛицо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	ПроцентСевернойНадбавки = КадровыйУчетРасширенный.ПроцентСевернойНадбавки(ФизическоеЛицо, ДатаСобытия);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяСевернаяНадбавка", ПроцентСевернойНадбавки);
	
	ИменаЭлементовРедактирования = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях");
	
	Если ИменаЭлементовРедактирования <> Неопределено Тогда
		
		ДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, Сотрудник, "СеверныйСтажВид,СеверныйСтажЛет,СеверныйСтажМесяцев,СеверныйСтажДней", ДатаСобытия);
		Если ДанныеСотрудника.Количество() > 0
			И ЗначениеЗаполнено(ДанныеСотрудника[0].СеверныйСтажВид) Тогда
			
			СеверныйСтаж = ДанныеСотрудника[0].СеверныйСтажВид;
			Лет = ДанныеСотрудника[0].СеверныйСтажЛет;
			Месяцев = ДанныеСотрудника[0].СеверныйСтажМесяцев;
			Дней = ДанныеСотрудника[0].СеверныйСтажДней;
			НетСведенийОСтаже = Ложь;
			
		Иначе
			
			СеверныеСтажи = Справочники.ВидыСтажа.ВидыСтажаПоКатегории(Перечисления.КатегорииСтажа.Северный);
			Если СеверныеСтажи.Количество() > 0 Тогда
				СеверныйСтаж = СеверныеСтажи[0];
			Иначе
				СеверныйСтаж = "";
			КонецЕсли;
			
			Лет = 0;
			Месяцев = 0;
			Дней = 0;
			НетСведенийОСтаже = Истина;
			
		КонецЕсли;
		
		ПредставлениеКоманды = ЗарплатаКадрыРасширенныйКлиентСервер.ПредставлениеКомандыВводаСтажаСотрудника(
			СеверныйСтаж, Лет, Месяцев, Дней, НетСведенийОСтаже, Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования.КомандаИзменитьЗначениеПоказателяСевернаяНадбавка,
			"Доступность",
			ЗначениеЗаполнено(Сотрудник));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			ИменаЭлементовРедактирования.КомандаИзменитьЗначениеПоказателяСевернаяНадбавка,
			"Заголовок",
			ПредставлениеКоманды);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыНачисленийРедактируемыхВОтдельныхПолях(ДобавляемыеРеквизиты, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	Если НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	РеквизитИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях = Новый РеквизитФормы("ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях", Новый ОписаниеТипов());
	ДобавляемыеРеквизиты.Добавить(РеквизитИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях);
	
	РеквизитСоставНачисленийНеМеняется = Новый РеквизитФормы("СоставНачисленийНеМеняется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитСоставНачисленийНеМеняется);
	
	РеквизитНеРазрешеноРедактироватьФОТ = Новый РеквизитФормы("НеРазрешеноРедактироватьФОТ", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНеРазрешеноРедактироватьФОТ);
	
	// Районный коэффициент
	РеквизитПредставлениеНачислениеРайонныйКоэффициент = Новый РеквизитФормы("ПредставлениеНачислениеРайонныйКоэффициент", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПредставлениеНачислениеРайонныйКоэффициент);
	
	РеквизитНачислениеРайонныйКоэффициент = Новый РеквизитФормы("НачислениеРайонныйКоэффициент", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеРайонныйКоэффициент);
	
	РеквизитНачислениеРайонныйКоэффициентИспользуется = Новый РеквизитФормы("НачислениеРайонныйКоэффициентИспользуется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеРайонныйКоэффициентИспользуется);
	
	РеквизитПрименяетсяНачислениеРайонныйКоэффициент = Новый РеквизитФормы("ПрименяетсяНачислениеРайонныйКоэффициент", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПрименяетсяНачислениеРайонныйКоэффициент);
	
	РеквизитЗначениеПоказателяРайонныйКоэффициент = Новый РеквизитФормы(
		"ЗначениеПоказателяРайонныйКоэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 3)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитЗначениеПоказателяРайонныйКоэффициент);
	
	РеквизитЗначениеПоказателяРайонныйКоэффициент = Новый РеквизитФормы("РайонныйКоэффициентСтруктурнойЕдиницы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 3)));
	ДобавляемыеРеквизиты.Добавить(РеквизитЗначениеПоказателяРайонныйКоэффициент);
	
	РеквизитРазмерРайонныйКоэффициент = Новый РеквизитФормы(
		"РазмерРайонныйКоэффициент", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитРазмерРайонныйКоэффициент);
	
	РеквизитЗаглушкаИзменитьЗначениеПоказателяРайонныйКоэффициент = Новый РеквизитФормы("ЗаглушкаИзменитьЗначениеПоказателяРайонныйКоэффициент", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(РеквизитЗаглушкаИзменитьЗначениеПоказателяРайонныйКоэффициент);
	
	// СевернаяНадбавка
	РеквизитПредставлениеНачислениеСевернаяНадбавка = Новый РеквизитФормы("ПредставлениеНачислениеСевернаяНадбавка", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПредставлениеНачислениеСевернаяНадбавка);
	
	РеквизитНачислениеСевернаяНадбавка = Новый РеквизитФормы("НачислениеСевернаяНадбавка", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеСевернаяНадбавка);
	
	РеквизитНачислениеСевернаяНадбавкаИспользуется = Новый РеквизитФормы("НачислениеСевернаяНадбавкаИспользуется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеСевернаяНадбавкаИспользуется);
	
	РеквизитПрименяетсяНачислениеСевернаяНадбавка = Новый РеквизитФормы("ПрименяетсяНачислениеСевернаяНадбавка", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПрименяетсяНачислениеСевернаяНадбавка);
	
	РеквизитЗначениеПоказателяСевернаяНадбавка = Новый РеквизитФормы("ЗначениеПоказателяСевернаяНадбавка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	ДобавляемыеРеквизиты.Добавить(РеквизитЗначениеПоказателяСевернаяНадбавка);
	
	РеквизитРазмерСевернаяНадбавка = Новый РеквизитФормы(
		"РазмерСевернаяНадбавка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитРазмерСевернаяНадбавка);
	
	// НадбавкаЗаВредность
	РеквизитПредставлениеНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("ПредставлениеНачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПредставлениеНачислениеНадбавкаЗаВредность);
	
	РеквизитНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("НачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеНадбавкаЗаВредность);
	
	РеквизитНачислениеНадбавкаЗаВредностьИспользуется = Новый РеквизитФормы("НачислениеНадбавкаЗаВредностьИспользуется", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитНачислениеНадбавкаЗаВредностьИспользуется);
	
	РеквизитПрименяетсяНачислениеНадбавкаЗаВредность = Новый РеквизитФормы("ПрименяетсяНачислениеНадбавкаЗаВредность", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитПрименяетсяНачислениеНадбавкаЗаВредность);
	
	РеквизитЗначениеПоказателяНадбавкаЗаВредность = Новый РеквизитФормы(
		"ЗначениеПоказателяНадбавкаЗаВредность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитЗначениеПоказателяНадбавкаЗаВредность);
	
	РеквизитРазмерНадбавкаЗаВредность = Новый РеквизитФормы(
		"РазмерНадбавкаЗаВредность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), , , Истина);
	ДобавляемыеРеквизиты.Добавить(РеквизитРазмерНадбавкаЗаВредность);
	
КонецПроцедуры

Процедура ДобавитьЭлементыФормыНачисленийРедактируемыхВОтдельныхПолях(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы, ДобавлятьЭлементыФормы)
	
	Если НЕ ДобавлятьЭлементыФормы
		ИЛИ НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяТаблицы = ОписаниеТаблицыВидовРасчета.ИмяТаблицы;
	ЭлементТаблица = Форма.Элементы.Найти(ИмяТаблицы);
	
	Если ЭлементТаблица <> Неопределено Тогда
		
		ИмяГруппыРедактированияПлановыхНачислений = "Группа" + ИмяТаблицы + "РедактированияПлановыхНачислений";
		Если Форма.Элементы.найти(ИмяГруппыРедактированияПлановыхНачислений) = Неопределено Тогда
			
			ИменаЭлементовРедактирования = Новый Структура;
			
			ИменаЭлементовРедактирования.Вставить("ГруппаНачисленийРедактируемыхВОтдельныхПолях", "");
			
			ИменаЭлементовРедактирования.Вставить("НачислениеРайонныйКоэффициент", "");
			ИменаЭлементовРедактирования.Вставить("РазмерРайонныйКоэффициент", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерРайонныйКоэффициент", "");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяРайонныйКоэффициент", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяРайонныйКоэффициент", "");
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаРайонныйКоэффициент", "");
			
			ИменаЭлементовРедактирования.Вставить("НачислениеСевернаяНадбавка", "");
			ИменаЭлементовРедактирования.Вставить("РазмерСевернаяНадбавка", "");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяСевернаяНадбавка", "");
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаСевернаяНадбавка", "");
			ИменаЭлементовРедактирования.Вставить("КомандаИзменитьЗначениеПоказателяСевернаяНадбавка", "");
			
			ИменаЭлементовРедактирования.Вставить("НачислениеНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("РазмерНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаНадбавкаЗаВредность", "");
			ИменаЭлементовРедактирования.Вставить("ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", "");
			
			ГруппаТаблицыРедактированияПлановыхНачислений = Форма.Элементы.Вставить(ИмяГруппыРедактированияПлановыхНачислений, Тип("ГруппаФормы"), ЭлементТаблица.Родитель, ЭлементТаблица);
			ГруппаТаблицыРедактированияПлановыхНачислений.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаТаблицыРедактированияПлановыхНачислений.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаТаблицыРедактированияПлановыхНачислений.ОтображатьЗаголовок = Ложь;
			ГруппаТаблицыРедактированияПлановыхНачислений.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
			Форма.Элементы.Переместить(ЭлементТаблица, ГруппаТаблицыРедактированияПлановыхНачислений);
			
			ГруппаОтдельныеПоля = Форма.Элементы.Добавить(ГруппаТаблицыРедактированияПлановыхНачислений.Имя + "ОтдельныеПоля", Тип("ГруппаФормы"), ГруппаТаблицыРедактированияПлановыхНачислений);
			ГруппаОтдельныеПоля.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоля.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоля.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоля.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаНачисленийРедактируемыхВОтдельныхПолях", ГруппаОтдельныеПоля.Имя);
			
			ГруппаОтдельныеПоляНаименования = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Наименования", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляНаименования.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляНаименования.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляНаименования.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляНаименования.Объединенная = Ложь;
			ГруппаОтдельныеПоляНаименования.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляРазмеры = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Размеры", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляРазмеры.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРазмеры.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляРазмеры.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРазмеры.Объединенная = Ложь;
			ГруппаОтдельныеПоляРазмеры.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляЗначения = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Значения", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляЗначения.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляЗначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляЗначения.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляЗначения.Объединенная = Ложь;
			ГруппаОтдельныеПоляЗначения.ОтображатьЗаголовок = Ложь;
			
			ГруппаОтдельныеПоляРасшифровки = Форма.Элементы.Добавить(ГруппаОтдельныеПоля.Имя + "Расшифровки", Тип("ГруппаФормы"), ГруппаОтдельныеПоля);
			ГруппаОтдельныеПоляРасшифровки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаОтдельныеПоляРасшифровки.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровки.Объединенная = Ложь;
			ГруппаОтдельныеПоляРасшифровки.ОтображатьЗаголовок = Ложь;
			
			// НадбавкаЗаВредность
			ПолеНадписи = Форма.Элементы.Добавить(ГруппаОтдельныеПоляНаименования.Имя + "НаименованиеНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляНаименования);
			ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНадписи.РастягиватьПоГоризонтали = Ложь;
			ПолеНадписи.МаксимальнаяШирина = 43;
			ПолеНадписи.ПутьКДанным = "ПредставлениеНачислениеНадбавкаЗаВредность";
			ПолеНадписи.АвтоМаксимальнаяШирина = Ложь;
			ИменаЭлементовРедактирования.Вставить("НачислениеНадбавкаЗаВредность", ПолеНадписи.Имя);
			
			ПолеФОТ = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "РазмерНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеФОТ.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФОТ.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеФОТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФОТ.Ширина = 10;
			ПолеФОТ.ПутьКДанным = "РазмерНадбавкаЗаВредность";
			ПолеФОТ.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьИтогиФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("РазмерНадбавкаЗаВредность", ПолеФОТ.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "ДекорацияРазмерНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			ПолеПоказателя = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ЗначениеНадбавкаЗаВредность", Тип("ПолеФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеПоказателя.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПоказателя.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеПоказателя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПоказателя.Ширина = 4;
			ПолеПоказателя.КнопкаВыбора = Ложь;
			ПолеПоказателя.ФорматРедактирования = "ЧЦ=5; ЧДЦ=2";
			ПолеПоказателя.ПутьКДанным = "ЗначениеПоказателяНадбавкаЗаВредность";
			ПолеПоказателя.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяНадбавкаЗаВредность", ПолеПоказателя.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ДекорацияЗначениеПоказателяНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "РасшифровкиНадбавкаЗаВредность", Тип("ГруппаФормы"), ГруппаОтдельныеПоляРасшифровки);
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаНадбавкаЗаВредность", ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность.Имя + "ПроцентНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровкиНадбавкаЗаВредность);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ПолеДекорации.Заголовок = "%";
			ПолеДекорации.Высота = 1;
			ПолеДекорации.Ширина = 2;
			ПолеДекорации.РастягиватьПоВертикали = Ложь;
			ПолеДекорации.РастягиватьПоГоризонтали = Ложь;
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровки);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияГруппаРасшифровкаНадбавкаЗаВредность", ПолеДекорации.Имя);
			
			// Районный коэффициент
			ПолеНадписи = Форма.Элементы.Добавить(ГруппаОтдельныеПоляНаименования.Имя + "НаименованиеРайонныйКоэффициент", Тип("ПолеФормы"), ГруппаОтдельныеПоляНаименования);
			ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНадписи.РастягиватьПоГоризонтали = Ложь;
			ПолеНадписи.МаксимальнаяШирина = 43;
			ПолеНадписи.ПутьКДанным = "ПредставлениеНачислениеРайонныйКоэффициент";
			ПолеНадписи.АвтоМаксимальнаяШирина = Ложь;
			ИменаЭлементовРедактирования.Вставить("НачислениеРайонныйКоэффициент", ПолеНадписи.Имя);
			
			ПолеФОТ = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "РазмерРайонныйКоэффициент", Тип("ПолеФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеФОТ.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФОТ.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеФОТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФОТ.Ширина = 10;
			ПолеФОТ.ПутьКДанным = "РазмерРайонныйКоэффициент";
			ПолеФОТ.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьИтогиФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("РазмерРайонныйКоэффициент", ПолеФОТ.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "ДекорацияРазмерРайонныйКоэффициент", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияРазмерРайонныйКоэффициент", ПолеДекорации.Имя);
			
			ПолеПоказателя = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ЗначениеРайонныйКоэффициент", Тип("ПолеФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеПоказателя.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПоказателя.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеПоказателя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПоказателя.Ширина = 4;
			ПолеПоказателя.КнопкаВыбора = Ложь;
			ПолеПоказателя.МинимальноеЗначение = 1;
			ПолеПоказателя.МаксимальноеЗначение = 3;
			ПолеПоказателя.ФорматРедактирования = "ЧЦ=4; ЧДЦ=3";
			ПолеПоказателя.ПутьКДанным = "ЗначениеПоказателяРайонныйКоэффициент";
			ПолеПоказателя.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяРайонныйКоэффициент", ПолеПоказателя.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ДекорацияЗначениеПоказателяРайонныйКоэффициент", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ИменаЭлементовРедактирования.Вставить("ДекорацияЗначениеПоказателяРайонныйКоэффициент", ПолеДекорации.Имя);
			
			ГруппаОтдельныеПоляРасшифровкиРК = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "РасшифровкиРайонныйКоэффициент", Тип("ГруппаФормы"), ГруппаОтдельныеПоляРасшифровки);
			ГруппаОтдельныеПоляРасшифровкиРК.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровкиРК.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоляРасшифровкиРК.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровкиРК.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаРайонныйКоэффициент", ГруппаОтдельныеПоляРасшифровкиРК.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровкиРК.Имя + "ЗаглушкаРайонныйКоэффициент", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровкиРК);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			
			// Северная надбавка
			ПолеНадписи = Форма.Элементы.Добавить(ГруппаОтдельныеПоляНаименования.Имя + "НаименованиеСевернаяНадбавка", Тип("ПолеФормы"), ГруппаОтдельныеПоляНаименования);
			ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеНадписи.РастягиватьПоГоризонтали = Ложь;
			ПолеНадписи.МаксимальнаяШирина = 43;
			ПолеНадписи.ПутьКДанным = "ПредставлениеНачислениеСевернаяНадбавка";
			ПолеНадписи.АвтоМаксимальнаяШирина = Ложь;
			ИменаЭлементовРедактирования.Вставить("НачислениеСевернаяНадбавка", ПолеНадписи.Имя);
			
			ПолеФОТ = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРазмеры.Имя + "РазмерСевернаяНадбавка", Тип("ПолеФормы"), ГруппаОтдельныеПоляРазмеры);
			ПолеФОТ.Вид = ВидПоляФормы.ПолеВвода;
			ПолеФОТ.ТолькоПросмотр = Форма.ТолькоПросмотр;
			ПолеФОТ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеФОТ.Ширина = 10;
			ПолеФОТ.ПутьКДанным = "РазмерСевернаяНадбавка";
			ПолеФОТ.УстановитьДействие("ПриИзменении", "Подключаемый_ПересчитатьИтогиФОТДокумента");
			ИменаЭлементовРедактирования.Вставить("РазмерСевернаяНадбавка", ПолеФОТ.Имя);
			
			ПолеПоказателя = Форма.Элементы.Добавить(ГруппаОтдельныеПоляЗначения.Имя + "ЗначениеСевернаяНадбавка", Тип("ПолеФормы"), ГруппаОтдельныеПоляЗначения);
			ПолеПоказателя.Вид = ВидПоляФормы.ПолеВвода;
			ПолеПоказателя.ТолькоПросмотр = Истина;
			ПолеПоказателя.КнопкаВыбора = Ложь;
			ПолеПоказателя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ПолеПоказателя.Ширина = 4;
			ПолеПоказателя.РастягиватьПоГоризонтали = Ложь;
			ПолеПоказателя.ФорматРедактирования = "ЧЦ=5; ЧДЦ=2";
			ПолеПоказателя.ПутьКДанным = "ЗначениеПоказателяСевернаяНадбавка";
			ИменаЭлементовРедактирования.Вставить("ЗначениеПоказателяСевернаяНадбавка", ПолеПоказателя.Имя);
			
			ГруппаОтдельныеПоляРасшифровкиСН = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровки.Имя + "РасшифровкиСевернаяНадбавка", Тип("ГруппаФормы"), ГруппаОтдельныеПоляРасшифровки);
			ГруппаОтдельныеПоляРасшифровкиСН.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтдельныеПоляРасшифровкиСН.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтдельныеПоляРасшифровкиСН.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтдельныеПоляРасшифровкиСН.ОтображатьЗаголовок = Ложь;
			ИменаЭлементовРедактирования.Вставить("ГруппаРасшифровкаСевернаяНадбавка", ГруппаОтдельныеПоляРасшифровкиСН.Имя);
			
			ПолеДекорации = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровкиСН.Имя + "ПроцентСевернаяНадбавка", Тип("ДекорацияФормы"), ГруппаОтдельныеПоляРасшифровкиСН);
			ПолеДекорации.Вид = ВидДекорацииФормы.Надпись;
			ПолеДекорации.Заголовок = "%";
			ПолеДекорации.Высота = 1;
			ПолеДекорации.Ширина = 2;
			ПолеДекорации.РастягиватьПоВертикали = Ложь;
			ПолеДекорации.РастягиватьПоГоризонтали = Ложь;
			
			Если РольДоступна(Метаданные.Роли.ПолныеПрава) Или РольДоступна(Метаданные.Роли.ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадрыРасширенная) Тогда // АПК:336 Работа в привилегированном режиме.
				
				КомандаИзменитьЗначениеПоказателяСевернаяНадбавка = Форма.Команды.Найти("ИзменитьЗначениеПоказателяСевернаяНадбавка");
				Если КомандаИзменитьЗначениеПоказателяСевернаяНадбавка = Неопределено И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтажиФизическихЛиц) Тогда
					КомандаИзменитьЗначениеПоказателяСевернаяНадбавка = Форма.Команды.Добавить("ИзменитьЗначениеПоказателяСевернаяНадбавка");
					КомандаИзменитьЗначениеПоказателяСевернаяНадбавка.Заголовок = НСтр("ru = 'Изменить';
																						|en = 'Change'");
					КомандаИзменитьЗначениеПоказателяСевернаяНадбавка.ИзменяетСохраняемыеДанные = Истина;
					КомандаИзменитьЗначениеПоказателяСевернаяНадбавка.Действие = "Подключаемый_ИзменитьЗначениеПоказателяСевернаяНадбавка";
				КонецЕсли;
				
				КнопкаИзменить = Форма.Элементы.Добавить(ГруппаОтдельныеПоляРасшифровкиСН.Имя + КомандаИзменитьЗначениеПоказателяСевернаяНадбавка.Имя, Тип("КнопкаФормы"), ГруппаОтдельныеПоляРасшифровкиСН);
				КнопкаИзменить.Вид = ВидКнопкиФормы.Гиперссылка;
				КнопкаИзменить.Доступность  = НЕ Форма.ТолькоПросмотр;
				КнопкаИзменить.ИмяКоманды = КомандаИзменитьЗначениеПоказателяСевернаяНадбавка.Имя;
				ИменаЭлементовРедактирования.Вставить("КомандаИзменитьЗначениеПоказателяСевернаяНадбавка", КнопкаИзменить.Имя);
			
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ИменаЭлементовНачисленийРедактируемыхВОтдельныхПолях", Новый ФиксированнаяСтруктура(ИменаЭлементовРедактирования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНачисленияРедактируемыеВОтдельныхПоляхФормы(Форма, ОписаниеТаблицыВидовРасчета, РежимРаботы)
	
	Если НЕ ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент", ПланыВидовРасчета.Начисления.НачислениеРайонныйКоэффициент());
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавка", ПланыВидовРасчета.Начисления.НачислениеСевернаяНадбавка());
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность", ПланыВидовРасчета.Начисления.НачислениеНадбавкаЗаВредность());
	
КонецПроцедуры

Процедура ДобавитьСтрокиНачисленийРедактируемыхВОтдельныхПолях(Форма, Объект, ОписаниеТаблицыВидовРасчета, РежимРаботы, ИдентификаторСтрокиВидаРасчета)
	
	Если Не ЗарплатаКадрыРасширенныйКлиентСервер.РедактироватьНачисленияВОтдельныхПолях(РежимРаботы, ОписаниеТаблицыВидовРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = ОписаниеТаблицыВидовРасчета.ПутьКДанным;
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	ИмяТабличнойЧастиНачисления = Подстроки[Подстроки.ВГраница()];
	
	ПутьКДаннымПоказателей = ОписаниеТаблицыВидовРасчета.ПутьКДаннымПоказателей;
	Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДаннымПоказателей, ".");
	ИмяТабличнойЧастиПоказатели = Подстроки[Подстроки.ВГраница()];
	
	СодержитПолеДействие = ЗарплатаКадрыРасширенныйКлиентСервер.ТабличнаяЧастьСодержитПолеДействие(ОписаниеТаблицыВидовРасчета);
	
	// Надбавка за вредность
	НачислениеНадбавкаЗаВредность = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредность");
	Если ЗначениеЗаполнено(НачислениеНадбавкаЗаВредность) Тогда
		
		НачислениеНадбавкаЗаВредностьИспользуется = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеНадбавкаЗаВредностьИспользуется");
		
		ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Ложь;
		
		ОписаниеСтроки = Новый Структура("Действие");
		ОписаниеСтроки.Вставить(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, НачислениеНадбавкаЗаВредность);
		ОписаниеСтроки.Вставить("Размер", ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерНадбавкаЗаВредность"));
		ОписаниеСтроки.Вставить("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета);
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
			
			ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Истина;
			Если Не НачислениеНадбавкаЗаВредностьИспользуется Тогда
				ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
			КонецЕсли;
			
		ИначеЕсли НачислениеНадбавкаЗаВредностьИспользуется
			И Не ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма)
			И СодержитПолеДействие Тогда
			
			ДобавитьСтрокуНачисленияНадбавкаЗаВредность = Истина;
			ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
			
		КонецЕсли;
		
		Если ДобавитьСтрокуНачисленияНадбавкаЗаВредность Тогда
			
			СтрокаНачислений = Объект[ИмяТабличнойЧастиНачисления].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ОписаниеСтроки);
			
			НоваяСтрокаПоказателя = Объект[ИмяТабличнойЧастиПоказатели].Добавить();
			НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			НоваяСтрокаПоказателя.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.ПроцентНадбавкиЗаВредность");
			
			ОтменяемыйПоказатель = Ложь;
			Если ОписаниеСтроки.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				
				ИнфоОВидеРасчета = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ОписаниеСтроки.Начисление);
				Для Каждого ОписаниеПоказателя Из ИнфоОВидеРасчета.Показатели Цикл
					
					Если ОписаниеПоказателя.Показатель = НоваяСтрокаПоказателя.Показатель Тогда
						ОтменяемыйПоказатель = ОписаниеПоказателя.ОтменяемыйПоказатель;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОтменяемыйПоказатель И ОписаниеСтроки.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
				НоваяСтрокаПоказателя.Значение = 0;
			Иначе
				НоваяСтрокаПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяНадбавкаЗаВредность");
			КонецЕсли;
			
			Если СодержитПолеДействие Тогда
				
				Если ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма)
					И Не НачислениеНадбавкаЗаВредностьИспользуется Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
					
				ИначеЕсли НачислениеНадбавкаЗаВредностьИспользуется
					И Не ЗарплатаКадрыРасширенныйКлиентСервер.НадбавкаЗаВредностьПрименяется(Форма) Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОтражениеЗарплатыВБухучетеРасширенный.ВписатьИдентификаторНачисленийРедактируемыхВОтдельныхПолях(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета);
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Районный коэффициент
	НачислениеРайонныйКоэффициент = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициент");
	Если ЗначениеЗаполнено(НачислениеРайонныйКоэффициент) Тогда
		
		НачислениеРайонныйКоэффициентИспользуется = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеРайонныйКоэффициентИспользуется");
		
		ДобавитьСтрокуНачисленияРайонныйКоэффициент = Ложь;
		
		ОписаниеСтроки = Новый Структура("Действие");
		ОписаниеСтроки.Вставить(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, НачислениеРайонныйКоэффициент);
		ОписаниеСтроки.Вставить("Размер", ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерРайонныйКоэффициент"));
		ОписаниеСтроки.Вставить("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета);
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.РайонныйКоэффициентПрименяется(Форма) Тогда
			
			ДобавитьСтрокуНачисленияРайонныйКоэффициент = Истина;
			Если Не НачислениеРайонныйКоэффициентИспользуется Тогда
				ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
			КонецЕсли;
			
		ИначеЕсли НачислениеРайонныйКоэффициентИспользуется
			И Не ЗарплатаКадрыРасширенныйКлиентСервер.РайонныйКоэффициентПрименяется(Форма)
			И СодержитПолеДействие Тогда
			
			ДобавитьСтрокуНачисленияРайонныйКоэффициент = Истина;
			ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
			
		КонецЕсли;
		
		Если ДобавитьСтрокуНачисленияРайонныйКоэффициент Тогда
			
			СтрокаНачислений = Объект[ИмяТабличнойЧастиНачисления].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ОписаниеСтроки);
			
			НоваяСтрокаПоказателя = Объект[ИмяТабличнойЧастиПоказатели].Добавить();
			НоваяСтрокаПоказателя.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			НоваяСтрокаПоказателя.Показатель = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент");
			НоваяСтрокаПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "ЗначениеПоказателяРайонныйКоэффициент");
			
			Если СодержитПолеДействие Тогда
				
				Если ЗарплатаКадрыРасширенныйКлиентСервер.РайонныйКоэффициентПрименяется(Форма)
					И Не НачислениеРайонныйКоэффициентИспользуется Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить;
					
				ИначеЕсли НачислениеРайонныйКоэффициентИспользуется
					И Не ЗарплатаКадрыРасширенныйКлиентСервер.РайонныйКоэффициентПрименяется(Форма) Тогда
					
					НоваяСтрокаПоказателя.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОтражениеЗарплатыВБухучетеРасширенный.ВписатьИдентификаторНачисленийРедактируемыхВОтдельныхПолях(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета);
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Северная надбавка
	НачислениеСевернаяНадбавка = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавка");
	Если ЗначениеЗаполнено(НачислениеСевернаяНадбавка) Тогда
		
		НачислениеСевернаяНадбавкаИспользуется = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "НачислениеСевернаяНадбавкаИспользуется");
		
		ДобавитьСтрокуНачисленияСевернаяНадбавка = Ложь;
		
		ОписаниеСтроки = Новый Структура("Действие");
		ОписаниеСтроки.Вставить(ОписаниеТаблицыВидовРасчета.ИмяРеквизитаВидРасчета, НачислениеСевернаяНадбавка);
		ОписаниеСтроки.Вставить("Размер", ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, "РазмерСевернаяНадбавка"));
		ОписаниеСтроки.Вставить("ИдентификаторСтрокиВидаРасчета", ИдентификаторСтрокиВидаРасчета);
		
		Если ЗарплатаКадрыРасширенныйКлиентСервер.СевернаяНадбавкаПрименяется(Форма) Тогда
			
			ДобавитьСтрокуНачисленияСевернаяНадбавка = Истина;
			Если Не НачислениеСевернаяНадбавкаИспользуется Тогда
				ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Утвердить);
			КонецЕсли;
			
		ИначеЕсли НачислениеСевернаяНадбавкаИспользуется
			И Не ЗарплатаКадрыРасширенныйКлиентСервер.СевернаяНадбавкаПрименяется(Форма)
			И СодержитПолеДействие Тогда
			
			ДобавитьСтрокуНачисленияСевернаяНадбавка = Истина;
			ОписаниеСтроки.Вставить("Действие", Перечисления.ДействияСНачислениямиИУдержаниями.Отменить);
			
		КонецЕсли;
		
		Если ДобавитьСтрокуНачисленияСевернаяНадбавка Тогда
			
			СтрокаНачислений = Объект[ИмяТабличнойЧастиНачисления].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ОписаниеСтроки); 
			ОтражениеЗарплатыВБухучетеРасширенный.ВписатьИдентификаторНачисленийРедактируемыхВОтдельныхПолях(Форма, СтрокаНачислений, ОписаниеТаблицыВидовРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ИсключитьЗапрещенныеКПроведениюДокументыВДинамическомСпискеЖурналаДокументов(ДинамическийСписокЖурналаДокументов) Экспорт
	
	ИсключаемыеТипы = Новый Массив;
	
	МетаданныеЖурнала = Метаданные.НайтиПоПолномуИмени(ДинамическийСписокЖурналаДокументов.ОсновнаяТаблица);
	Для Каждого РегистрируемыйДокумент Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		
		Если РегистрируемыйДокумент.Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			ИсключаемыеТипы.Добавить(Тип("ДокументСсылка." + РегистрируемыйДокумент.Имя));
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсключаемыеТипы.Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписокЖурналаДокументов,
			"Тип", ИсключаемыеТипы, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименятьНадбавкуЗаОсобыеКлиматическиеУсловия(СтруктурнаяЕдиница, ДатаСведений) Экспорт
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаСведений КАК Период,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТИзмеренияДаты";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"СтруктурнаяЕдиница"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТерриториальныеУсловия.ПрименятьСевернуюНадбавку
		|ИЗ
		|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПрименятьСевернуюНадбавку;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТерриториальныеУсловияПФРСтруктурнойЕдиницы(СтруктурнаяЕдиница, ДатаСведений) Экспорт
	
	ТерриториальныеУсловия = Неопределено;
	
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ДатаСведений КАК Период,
		|	&СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТИзмеренияДаты";
		
	Запрос.Выполнить();
		
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТИзмеренияДаты",
			"СтруктурнаяЕдиница"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТерриториальныеУсловия.ТерриториальныеУсловияПФР
		|ИЗ
		|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТерриториальныеУсловия = Выборка.ТерриториальныеУсловияПФР;
		
	КонецЕсли; 
	
	Возврат ТерриториальныеУсловия;
	
КонецФункции

Процедура ОбновитьИспользованиеТерриториальныхУсловийПФРПоОрганизациям(ГоловнаяОрганизация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсеОрганизации", ГоловнаяОрганизация = Неопределено);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	ИспользованиеТерриториальныхУсловий.Организация КАК Организация,
	|	МАКСИМУМ(ИспользованиеТерриториальныхУсловий.ИспользоватьТерриториальныеУсловияПФР) КАК ИспользоватьТерриториальныеУсловияПФР,
	|	МАКСИМУМ(ИспользованиеТерриториальныхУсловий.ИспользуютсяТерриторииЗаПределамиРФ) КАК ИспользуютсяТерриторииЗаПределамиРФ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Организации.Ссылка КАК Организация,
	|		ВЫБОР
	|			КОГДА ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР ЕСТЬ NULL
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка)
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ)
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ЗАГР)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ИспользоватьТерриториальныеУсловияПФР,
	|		ВЫБОР
	|			КОГДА ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ЗАГР)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ИспользуютсяТерриторииЗаПределамиРФ
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПоОрганизациям
	|			ПО Организации.Ссылка = ТерриториальныеУсловияПоОрганизациям.СтруктурнаяЕдиница
	|	ГДЕ
	|		(&ВсеОрганизации
	|				ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПодразделенияОрганизаций.Владелец,
	|		ВЫБОР
	|			КОГДА ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР ЕСТЬ NULL
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка)
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ)
	|					ИЛИ ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ЗАГР)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТерриториальныеУсловияПоОрганизациям.ТерриториальныеУсловияПФР = ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ЗАГР)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПоОрганизациям
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|			ПО ТерриториальныеУсловияПоОрганизациям.СтруктурнаяЕдиница = ПодразделенияОрганизаций.Ссылка
	|	ГДЕ
	|		(&ВсеОрганизации
	|				ИЛИ ПодразделенияОрганизаций.ГоловнаяОрганизация = &ГоловнаяОрганизация)) КАК ИспользованиеТерриториальныхУсловий
	|
	|СГРУППИРОВАТЬ ПО
	|	ИспользованиеТерриториальныхУсловий.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
			Продолжить;
		КонецЕсли;	
		
		Набор = РегистрыСведений.НастройкиЗарплатаКадрыРасширенная.СоздатьНаборЗаписей();
		Набор.Отбор.Организация.Установить(Выборка.Организация);
		
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.Организация = Выборка.Организация;
		Иначе
			Запись = Набор[0];
		КонецЕсли;
		
		Запись.ИспользоватьТерриториальныеУсловияПФР = Выборка.ИспользоватьТерриториальныеУсловияПФР;
		Запись.ИспользуютсяТерриторииЗаПределамиРФ = Выборка.ИспользуютсяТерриторииЗаПределамиРФ;
		
		Набор.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Процедура устанавливает вариант расчета документа, по среднему заработку или по сохраняемому денежному содержанию
//	обновляются данные Объект.РасчетДенежногоСодержания, устанавливается Истина, если расчет необходимо выполнять исходя
//		из расчета сохраняемого денежного содержания
//	Параметры
//		Объект - ДокументОбъект или ДанныеФормы.
//	
Процедура УстановитьВариантРасчетаДокументаПоСреднемуЗаработку(Объект, ИмяРеквизитаДатаСобытия = "ДатаНачалаСобытия") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Модуль.УстановитьВариантРасчетаПоСреднемуЗаработку(Объект, ИмяРеквизитаДатаСобытия);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступноИзменениеВариантаРасчетаВДокументе(Сотрудник, ДатаСобытия) экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба");
		Возврат Модуль.ДоступноИзменениеВариантаРасчетаВДокументе(Сотрудник, ДатаСобытия);
	КонецЕсли;
	
	Возврат ложь;
	
КонецФункции

// Процедура устанавливает реквизит НаименованиеПервичногоДокумента
//	Параметры
//		Объект - ДокументОбъект или ДанныеФормы.
//	
Процедура УстановитьНаименованиеПервичногоДокумента(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НаименованиеПервичногоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументИсточник.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ДокументИсточник
	|ГДЕ
	|	ДокументИсточник.Дата <= &Дата
	|	И НЕ ДокументИсточник.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументИсточник.Дата УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.ВедомостьНаВыплатуЗарплатыВКассу", Объект.Ссылка.Метаданные().ПолноеИмя());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект.НаименованиеПервичногоДокумента = Выборка.НаименованиеПервичногоДокумента;
	КонецЕсли;
	
КонецПроцедуры

#Область ПересчетТарифныхСтавок

Процедура СформироватьСписокВыбораПорядкаПересчета(Элементы, ПолныеПраваНаДокумент = Истина, ИмяЭлемента = "ПорядокРасчетаСтоимостиЕдиницыВремени") Экспорт 
	
	Если Не ПолныеПраваНаДокумент Тогда 
		Возврат;
	КонецЕсли;
	
	ЭлементФормы = Элементы[ИмяЭлемента];
	ЭлементФормы.СписокВыбора.Очистить();
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	ПорядокПересчетаПоУмолчанию = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По умолчанию (%1)';
																								|en = 'Default (%1)'"),
															НРег(НастройкиРасчетаЗарплаты.ПорядокРасчетаСтоимостиЕдиницыВремени));
	
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоСреднегодовомуЗначению, НСтр("ru = 'По среднемесячному количеству часов (дней)';
																																	|en = 'By average monthly number of hours (days)'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениГрафикаСотрудника, НСтр("ru = 'По норме времени графика сотрудника';
																																			|en = 'By standard hours of the employee schedule'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПоНормеВремениПроизводственногоКалендаря, НСтр("ru = 'По норме времени производственного календаря';
																																					|en = 'By standard hours of the business calendar'"));
	ЭлементФормы.СписокВыбора.Добавить(Перечисления.ПорядокРасчетаСтоимостиЕдиницыВремениОплатыТруда.ПустаяСсылка(), ПорядокПересчетаПоУмолчанию);

КонецПроцедуры

Процедура УстановитьОтображениеПолейПересчетаТарифнойСтавки(Форма, ОписаниеТаблицыНачислений, ПолныеПраваНаДокумент = Истина, ОписаниеТаблицыПересчетТарифныхСтавок = Неопределено) Экспорт 

	Если Не ПолныеПраваНаДокумент Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТарифнаяСтавкаГруппа", "Видимость", Ложь);
		Возврат;
	КонецЕсли;
	
	НесколькоСотрудников = Ложь;
	Если ОписаниеТаблицыПересчетТарифныхСтавок <> Неопределено Тогда 
		ПересчетТарифныхСтавок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыПересчетТарифныхСтавок.ПутьКДанным);
	    НесколькоСотрудников = ПересчетТарифныхСтавок.Количество() > 1;
	КонецЕсли;
	
	ДанныеНачислений = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеТаблицыНачислений.ПутьКДанным);
	
	СотрудникПустаяСсылка = Справочники.Сотрудники.ПустаяСсылка();
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Свойство("Действие")
			И СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗарплатаКадрыРасширенныйКлиентСервер.СтрокаНачисленияСодержитВкладВФОТ(СтрокаНачисления, ОписаниеТаблицыНачислений) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = ?(НесколькоСотрудников, СтрокаНачисления.РабочееМесто, СотрудникПустаяСсылка);
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	НазначенаМесячнаяДневнаяТарифнаяСтавка = ПараметрыОтображенияПолейТарифнойСтавки.НазначенаМесячнаяДневнаяТарифнаяСтавка;
	НесколькоТарифныхСтавок = ПараметрыОтображенияПолейТарифнойСтавки.НесколькоТарифныхСтавок;
	НетТарифныхСтавок = ПараметрыОтображенияПолейТарифнойСтавки.НетТарифныхСтавок;
	
	Если НесколькоСотрудников Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаПоказателя, "Видимость", НазначенаМесячнаяДневнаяТарифнаяСтавка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаСовокупнаяТарифнаяСтавка, "Видимость", Не НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаВидТарифнойСтавки, "Видимость", НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ОписаниеТаблицыПересчетТарифныхСтавок.ИмяТаблицы + ОписаниеТаблицыПересчетТарифныхСтавок.ИмяРеквизитаКомментарий, "Видимость", Не НетТарифныхСтавок);
	Иначе 	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПорядокПересчетаТарифнойСтавкиГруппа", "Видимость", НазначенаМесячнаяДневнаяТарифнаяСтавка);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СовокупнаяТарифнаяСтавкаГруппа", "Видимость", Не НетТарифныхСтавок);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидТарифнойСтавки", "Видимость", НетТарифныхСтавок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходныеДанные.Сотрудник,
		|	ИсходныеДанные.Начисление
		|ПОМЕСТИТЬ ВТДействующиеНачисленияСотрудников
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействующиеНачисления.Сотрудник КАК Сотрудник,
		|	НачисленияПоказатели.Ссылка КАК Начисление,
		|	НачисленияПоказатели.Показатель КАК Показатель,
		|	НачисленияПоказатели.Показатель.ВидТарифнойСтавки КАК ВидТарифнойСтавки
		|ПОМЕСТИТЬ ВТСотрудникиНачисленияПоказатели
		|ИЗ
		|	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиСовокупнойТарифнойСтавкиСотрудников КАК ПоказателиСовокупнойТарифнойСтавкиСотрудников
		|			ПО НачисленияПоказатели.Показатель = ПоказателиСовокупнойТарифнойСтавкиСотрудников.Показатель
		|		ПО ДействующиеНачисления.Начисление = НачисленияПоказатели.Ссылка
		|			И (НачисленияПоказатели.ЗапрашиватьПриВводе)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействующиеНачисления.Сотрудник,
		|	НачисленияПоказатели.Ссылка,
		|	НачисленияПоказатели.Показатель,
		|	НачисленияПоказатели.Показатель.ВидТарифнойСтавки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
		|ГДЕ
		|	СотрудникиНачисленияПоказатели.ВидТарифнойСтавки В (ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка), ЗНАЧЕНИЕ(Перечисление.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиНачисленияПоказатели.Сотрудник КАК Сотрудник,
		|	СотрудникиНачисленияПоказатели.Начисление КАК Начисление
		|ПОМЕСТИТЬ ВТНачисленияСовокупнойСтавкиСотрудников
		|ИЗ
		|	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДействующиеНачисления.Сотрудник
		|ИЗ
		|	ВТДействующиеНачисленияСотрудников КАК ДействующиеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСовокупнойСтавкиСотрудников КАК НачисленияСовокупнойСтавки
		|		ПО ДействующиеНачисления.Сотрудник = НачисленияСовокупнойСтавки.Сотрудник
		|			И ДействующиеНачисления.Начисление = НачисленияСовокупнойСтавки.Начисление
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействующиеНачисления.Сотрудник
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(ДействующиеНачисления.Начисление) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиНачисленияПоказатели.Сотрудник,
		|	СотрудникиНачисленияПоказатели.Начисление
		|ИЗ
		|	ВТСотрудникиНачисленияПоказатели КАК СотрудникиНачисленияПоказатели";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	НазначенаМесячнаяДневнаяТарифнаяСтавка = Не РезультатыЗапроса[2].Пустой();
	НесколькоТарифныхСтавок = Не РезультатыЗапроса[4].Пустой();
	НетТарифныхСтавок = ИсходныеДанные.Количество() > 0 И РезультатыЗапроса[5].Пустой();
	
	Сотрудники = Новый Соответствие;
	Выборка = РезультатыЗапроса[4].Выбрать();
	Пока Выборка.Следующий() Цикл 
		Сотрудники.Вставить(Выборка.Сотрудник, Истина);
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = Новый Структура;
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НазначенаМесячнаяДневнаяТарифнаяСтавка", НазначенаМесячнаяДневнаяТарифнаяСтавка);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НесколькоТарифныхСтавок", НесколькоТарифныхСтавок);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("НетТарифныхСтавок", НетТарифныхСтавок);
	ПараметрыОтображенияПолейТарифнойСтавки.Вставить("Сотрудники", Сотрудники);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

Процедура УстановитьТекущееЗначениеПорядкаПересчетаТарифнойСтавки(Форма, Сотрудник, ДатаСобытия) Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = СотрудникиДаты.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаСобытия;
	
	ЗначенияПорядкаПересчета = ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(СотрудникиДаты, Форма.Объект.Ссылка);
	
	Форма.Объект.ПорядокРасчетаСтоимостиЕдиницыВремени = ЗначенияПорядкаПересчета.Получить(Сотрудник);
				   
КонецПроцедуры

Функция ТекущиеЗначенияПорядкаПересчетаТарифнойСтавкиСотрудников(СотрудникиДаты, Регистратор = Неопределено) Экспорт 
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	Если Регистратор <> Неопределено Тогда 
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПорядокРасчетаСтоимостиЕдиницыВремениСотрудников",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.Период КАК Период,
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.Сотрудник КАК Сотрудник,
	               |	ПорядокРасчетаСтоимостиЕдиницыВремени.ПорядокРасчета КАК ПорядокРасчета
	               |ИЗ
	               |	ВТПорядокРасчетаСтоимостиЕдиницыВремениСотрудниковСрезПоследних КАК ПорядокРасчетаСтоимостиЕдиницыВремени";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияПорядкаПересчета = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		ЗначенияПорядкаПересчета.Вставить(Выборка.Сотрудник, Выборка.ПорядокРасчета);
	КонецЦикла;
	
	Возврат ЗначенияПорядкаПересчета;
	
КонецФункции

Процедура УстановитьТекстПоясненияКПорядкуПересчетаТарифныхСтавок(Форма, ИмяРеквизита = "ПорядокПересчетаТарифнойСтавкиГруппа") Экспорт 
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизита, 
									ТекстПоясненияКПорядкуПересчетаТарифныхСтавок());
	
КонецПроцедуры

Функция ТекстПоясненияКПорядкуПересчетаТарифныхСтавок() Экспорт 
	
	Возврат НСтр("ru = 'Правила, по которым будет пересчитана тарифная ставка при оплате сверхурочных или выходных';
				|en = 'Rules according to which a tariff rate will be recalculated on overtime and weekend work compensation'");
	
КонецФункции

Процедура УстановитьКомментарийКПорядкуПересчетаВСтрокеТаблицы(ТекСтрока, ИмяРеквизитаКомментарий, ВидТарифнойСтавки);

	Если Не ЗначениеЗаполнено(ВидТарифнойСтавки) Тогда
		ТекСтрока[ИмяРеквизитаКомментарий] = "";
		Возврат;
	КонецЕсли;
	
	ТекСтрока[ИмяРеквизитаКомментарий] = КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки);
	
КонецПроцедуры

Процедура УстановитьТекущееЗначениеСовокупнойТарифнойСтавки(Форма, Сотрудник, ДатаСобытия) Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = СотрудникиДаты.Добавить();
	НоваяСтрока.Сотрудник = Сотрудник;
	НоваяСтрока.Период = ДатаСобытия;
	
	ЗначенияСовокупныхТарифныхСтавок = ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(СотрудникиДаты, Форма.Объект.Ссылка);
	
	ДанныеСотрудника = ЗначенияСовокупныхТарифныхСтавок.Получить(Сотрудник);
	
	ВидТарифнойСтавки = ?(ДанныеСотрудника = Неопределено, Неопределено, ДанныеСотрудника.ВидТарифнойСтавки);
	СовокупнаяТарифнаяСтавка = ?(ДанныеСотрудника = Неопределено, Неопределено, ДанныеСотрудника.Значение);
	
	Форма.Объект.СовокупнаяТарифнаяСтавка = СовокупнаяТарифнаяСтавка;
	Форма.Объект.ВидТарифнойСтавки = ВидТарифнойСтавки;
	
	УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, ВидТарифнойСтавки);	
	
КонецПроцедуры

Функция ТекущиеЗначенияСовокупнойТарифнойСтавкиСотрудников(СотрудникиДаты, Регистратор = Неопределено) Экспорт 
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);			   
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыйФОТИтоги",
		МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты),
		ПараметрыПостроения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗначенияСовокупныхТарифныхСтавок.Период КАК Период,
	               |	ЗначенияСовокупныхТарифныхСтавок.Сотрудник КАК Сотрудник,
	               |	ЗначенияСовокупныхТарифныхСтавок.СовокупнаяТарифнаяСтавка КАК Значение,
	               |	ЗначенияСовокупныхТарифныхСтавок.ВидТарифнойСтавки КАК ВидТарифнойСтавки
	               |ИЗ
	               |	ВТПлановыйФОТИтогиСрезПоследних КАК ЗначенияСовокупныхТарифныхСтавок";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗначенияСовокупныхТарифныхСтавок = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		ЗначенияСовокупныхТарифныхСтавок.Вставить(Выборка.Сотрудник, Новый Структура("Значение, ВидТарифнойСтавки", Выборка.Значение, Выборка.ВидТарифнойСтавки));
	КонецЦикла;
	
	Возврат ЗначенияСовокупныхТарифныхСтавок;
	
КонецФункции

Процедура УстановитьРазмерностьСовокупнойТарифнойСтавки(Форма, ИмяРеквизита = "СовокупнаяТарифнаяСтавкаРазмерность") Экспорт 

	Форма[ИмяРеквизита] = НСтр("ru = 'руб.';
								|en = 'rub.'");
	
КонецПроцедуры

Процедура УстановитьКомментарийКРазмеруСовокупнойТарифнойСтавки(Форма, ВидТарифнойСтавки, ИмяРеквизита = "СовокупнаяТарифнаяСтавкаГруппа") Экспорт 
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяРеквизита, 
									КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки));
	
КонецПроцедуры

Функция КомментарийКРазмеруСовокупнойТарифнойСтавки(ВидТарифнойСтавки) Экспорт 
	
	Комментарий = "";
	
	Если ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.МесячнаяТарифнаяСтавка Тогда 
		Комментарий = НСтр("ru = 'Месячная ставка, которая будет использоваться для расчета стоимости часа при работе сверхурочно и в выходные';
							|en = 'Monthly rate which will be used for hourly cost calculation when working overtime and at weekends'");
	ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ДневнаяТарифнаяСтавка Тогда
		Комментарий = НСтр("ru = 'Дневная ставка, которая будет использоваться для расчета стоимости часа при работе сверхурочно и в выходные';
							|en = 'Daily rate which will be used for hourly cost calculation when working overtime and at weekends'");
	ИначеЕсли ВидТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка Тогда
		Комментарий = НСтр("ru = 'Ставка, по которой будет оплачиваться сверхурочная работа и работа в выходные дни';
							|en = 'Rate for overtime and work at weekends'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Функция ИсходныеДанныеРасчетаСовокупныхТарифныхСтавок() Экспорт 

	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ИсходныеДанные.Колонки.Добавить("РазмерФОТ", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("СправочникСсылка.ГрафикиРаботыСотрудников"));
	ИсходныеДанные.Колонки.Добавить("КоличествоСтавок", Новый ОписаниеТипов("Число"));
	ИсходныеДанные.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат ИсходныеДанные;
	
КонецФункции

Функция ПоказателиРасчетаСовокупныхТарифныхСтавок() Экспорт 

	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ТаблицаПоказателей.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиРасчетаЗарплаты"));
	ТаблицаПоказателей.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ПоказателиДействующихНачисленийСотрудников(СписокСотрудников, ДатаСобытия, ИзвестныеПоказатели = Неопределено) Экспорт
	
	Если ИзвестныеПоказатели = Неопределено Тогда 
		ИзвестныеПоказатели = ПоказателиРасчетаСовокупныхТарифныхСтавок();
	КонецЕсли;
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого Сотрудник Из СписокСотрудников Цикл 
		НоваяСтрока = СотрудникиДаты.Добавить();
		НоваяСтрока.Период = ДатаСобытия;
		НоваяСтрока.Сотрудник = Сотрудник;
	КонецЦикла;
	
	ТаблицаПоказателей = ЗначенияПоказателейДействующихНачисленийСотрудников(СотрудникиДаты, ИзвестныеПоказатели);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Функция ЗначенияПоказателейДействующихНачисленийСотрудников(СотрудникиДаты, ИзвестныеПоказатели = Неопределено) Экспорт 
	
	Если ИзвестныеПоказатели = Неопределено Тогда 
		ИзвестныеПоказатели = ПоказателиРасчетаСовокупныхТарифныхСтавок();
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПлановыеНачисления",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты));
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(СотрудникиДаты));
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИзвестныеПоказатели", ИзвестныеПоказатели);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПлановыеНачисления.Период,
	               |	ПлановыеНачисления.Сотрудник,
	               |	ПлановыеНачисления.Начисление,
	               |	ПлановыеНачисления.ДокументОснование
	               |ПОМЕСТИТЬ ВТТаблицаСотрудниковПредварительно
	               |ИЗ
	               |	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
	               |ГДЕ
	               |	ПлановыеНачисления.Используется
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСотрудниковПредварительно.Период,
	               |	ТаблицаСотрудниковПредварительно.Сотрудник,
	               |	ТаблицаСотрудниковПредварительно.Начисление,
	               |	ТаблицаСотрудниковПредварительно.ДокументОснование,
	               |	НачисленияПоказатели.Показатель
	               |ПОМЕСТИТЬ ВТПоказателиНачислений
	               |ИЗ
	               |	ВТТаблицаСотрудниковПредварительно КАК ТаблицаСотрудниковПредварительно
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
	               |		ПО ТаблицаСотрудниковПредварительно.Начисление = НачисленияПоказатели.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиНачислений.Период,
	               |	ПоказателиНачислений.Сотрудник,
	               |	ПоказателиНачислений.Показатель,
	               |	ЗначенияПоказателейРасчетаЗарплаты.Значение
	               |ПОМЕСТИТЬ ВТПоказателиИнформационнойБазы
	               |ИЗ
	               |	ВТПоказателиНачислений КАК ПоказателиНачислений
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних КАК ЗначенияПоказателейРасчетаЗарплаты
	               |		ПО ПоказателиНачислений.Период = ЗначенияПоказателейРасчетаЗарплаты.Период
	               |			И ПоказателиНачислений.Сотрудник = ЗначенияПоказателейРасчетаЗарплаты.Сотрудник
	               |			И ПоказателиНачислений.Показатель = ЗначенияПоказателейРасчетаЗарплаты.Показатель
	               |			И ПоказателиНачислений.ДокументОснование = ЗначенияПоказателейРасчетаЗарплаты.ДокументОснование
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИзвестныеПоказатели.Период,
	               |	ИзвестныеПоказатели.Сотрудник,
	               |	ИзвестныеПоказатели.Показатель,
	               |	ИзвестныеПоказатели.Значение
	               |ПОМЕСТИТЬ ВТИзвестныеПоказателиСотрудников
	               |ИЗ
	               |	&ИзвестныеПоказатели КАК ИзвестныеПоказатели
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИзвестныеПоказателиСотрудников.Период,
	               |	ИзвестныеПоказателиСотрудников.Сотрудник,
	               |	ИзвестныеПоказателиСотрудников.Показатель,
	               |	ИзвестныеПоказателиСотрудников.Значение
	               |ИЗ
	               |	ВТИзвестныеПоказателиСотрудников КАК ИзвестныеПоказателиСотрудников
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПоказателиИнформационнойБазы.Период,
	               |	ПоказателиИнформационнойБазы.Сотрудник,
	               |	ПоказателиИнформационнойБазы.Показатель,
	               |	ПоказателиИнформационнойБазы.Значение
	               |ИЗ
	               |	ВТПоказателиИнформационнойБазы КАК ПоказателиИнформационнойБазы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзвестныеПоказателиСотрудников КАК ИзвестныеПоказателиСотрудников
	               |		ПО ПоказателиИнформационнойБазы.Период = ИзвестныеПоказателиСотрудников.Период
	               |			И ПоказателиИнформационнойБазы.Сотрудник = ИзвестныеПоказателиСотрудников.Сотрудник
	               |			И ПоказателиИнформационнойБазы.Показатель = ИзвестныеПоказателиСотрудников.Показатель
	               |ГДЕ
	               |	ИзвестныеПоказателиСотрудников.Показатель ЕСТЬ NULL ";
				   
	ТаблицаПоказателей = ПоказателиРасчетаСовокупныхТарифныхСтавок();			   
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	Пока Выборка.Следующий() Цикл 
		ЗаполнитьЗначенияСвойств(ТаблицаПоказателей.Добавить(), Выборка);
	КонецЦикла;
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура УстановитьИспользованиеИндивидуальныхПравилПересчетаТарифныхСтавок() Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользованиеИндивидуальныхПравилПересчета = Ложь;
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СтоимостьДня", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДня"));
		Запрос.УстановитьПараметр("СтоимостьЧаса", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьЧаса"));
		Запрос.УстановитьПараметр("СтоимостьДняЧаса", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СтоимостьДняЧаса"));
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НачисленияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Начисления.Показатели КАК НачисленияПоказатели
		               |ГДЕ
		               |	НачисленияПоказатели.Показатель В (&СтоимостьДня, &СтоимостьЧаса, &СтоимостьДняЧаса)
		               |	И НачисленияПоказатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |	И НачисленияПоказатели.Ссылка.ВАрхиве = ЛОЖЬ
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	УдержанияПоказатели.Ссылка
		               |ИЗ
		               |	ПланВидовРасчета.Удержания.Показатели КАК УдержанияПоказатели
		               |ГДЕ
		               |	УдержанияПоказатели.Показатель В (&СтоимостьДня, &СтоимостьЧаса, &СтоимостьДняЧаса)
		               |	И УдержанияПоказатели.Ссылка.ПометкаУдаления = ЛОЖЬ
		               |	И УдержанияПоказатели.Ссылка.ВАрхиве = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ИспользованиеИндивидуальныхПравилПересчета = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Если ИспользованиеИндивидуальныхПравилПересчета <> Константы.ИспользоватьИндивидуальныеПравилаПересчетаТарифныхСтавокСотрудников.Получить() Тогда
		Константы.ИспользоватьИндивидуальныеПравилаПересчетаТарифныхСтавокСотрудников.Установить(ИспользованиеИндивидуальныхПравилПересчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОтображенияТарифнойСтавкиСотрудникВШапке(Сотрудник, ДанныеНачислений, Действие = Неопределено) Экспорт 
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если ?(Действие = Неопределено, СтрокаНачисления.Действие, Действие) = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

Функция ПараметрыОтображенияТарифнойСтавкиУходЗаРебенком(ДанныеНачислений) Экспорт 
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИсходныеДанные.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	
	Для Каждого СтрокаНачисления Из ДанныеНачислений Цикл
		
		Если СтрокаНачисления.Действие = Перечисления.ДействияСНачислениямиИУдержаниями.Отменить Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Сотрудник = СтрокаНачисления.РабочееМесто;
		НоваяСтрока.Начисление = СтрокаНачисления.Начисление;
		
	КонецЦикла;
	
	ПараметрыОтображенияПолейТарифнойСтавки = ПараметрыОтображенияПолейПересчетаТарифнойСтавки(ИсходныеДанные);
	
	Возврат ПараметрыОтображенияПолейТарифнойСтавки;
	
КонецФункции

#КонецОбласти

#Область КорректировкаПериодаДействияНачислений

// Выполняет корректировку даты начала и окончания для начислений, не имеющих периода действия с учетом периода работы
// сотрудника.
//
Процедура СкорректироватьДатыНачисленийБезПериодаДействия(ТаблицаНачислений, ПериодРегистрации, ИмяПоляНачисления = "Начисление", РеквизитыНачислений = Неопределено, ПроверятьСторно = Ложь) Экспорт
	
	МассивНачислений = Новый Массив;
	МассивСотрудников = Новый Массив;
	УникальныеНачисления = Новый Соответствие;
	УникальныеСотрудники = Новый Соответствие;
	Для Каждого Строка Из ТаблицаНачислений Цикл
		Если ТипЗнч(Строка[ИмяПоляНачисления]) <> Тип("ПланВидовРасчетаСсылка.Начисления") Тогда
			Продолжить;
		КонецЕсли;
		Если УникальныеНачисления[Строка[ИмяПоляНачисления]] = Неопределено Тогда
			МассивНачислений.Добавить(Строка[ИмяПоляНачисления]);
			УникальныеНачисления.Вставить(Строка[ИмяПоляНачисления], Истина);
		КонецЕсли;
		Если УникальныеСотрудники[Строка.Сотрудник] = Неопределено Тогда
			МассивСотрудников.Добавить(Строка.Сотрудник);
			УникальныеСотрудники.Вставить(Строка.Сотрудник, Истина);
		КонецЕсли;
	КонецЦикла;
	
	НачисленияБезПериодаДействия = Новый Соответствие;
	
	Если РеквизитыНачислений = Неопределено Тогда
		РеквизитыНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			МассивНачислений, "КатегорияНачисленияИлиНеоплаченногоВремени,ИспользованиеПериода,НачисляетсяВЦеломЗаМесяц");
	КонецЕсли;
	НачисленияБезПериодаДействия = Новый Соответствие;
	Для Каждого КлючИЗначение Из РеквизитыНачислений Цикл
		РеквизитыНачисления = КлючИЗначение.Значение;
		Если РеквизитыНачисления.ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НачисленияБезПериодаДействия.Вставить(КлючИЗначение.Ключ, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если НачисленияБезПериодаДействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Получим дату приема, увольнения сотрудников.
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивСотрудников, "ДатаПриема,ДатаЗавершенияРаботы,ГрафикРаботы", КонецМесяца(ПериодРегистрации));
	КадровыеДанныеСотрудников.Индексы.Добавить("Сотрудник");
	
	// Если это не пособие, то его необходимо ограничить еще и датами изменения применения плановых начислений.
	ДатыИзмененияПримененияПлановыхНачислений = ДатыИзмененияПримененияПлановыхНачислений(МассивСотрудников, ПериодРегистрации);
	КатегорииПособий = ПланыВидовРасчета.Начисления.КатегорииПособийПоУходуЗаРебенком();
	
	ЗаполнениеДат = Новый Структура("ДатаНачала, ДатаОкончания, ПериодДействия");
	
	ВидУчетаРабочееВремя = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя");
	
	Для Каждого Строка Из ТаблицаНачислений Цикл
		// Корректируем период действия начисления датами приема/увольнения.
		Если НачисленияБезПериодаДействия[Строка[ИмяПоляНачисления]] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПроверятьСторно Тогда
			Если Строка.Сторно Тогда
				// Для сторно-записей не выполняем корректировку периода.
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЗаполнениеДат, Строка);
		ЗаполнятьДаты = Истина;
		ПериодЗаполнен = ЗаполнениеДат.ДатаНачала <> Дата(1, 1, 1) И ЗаполнениеДат.ДатаОкончания <> Дата(1, 1, 1);
		ИспользованиеПериода = РеквизитыНачислений[Строка[ИмяПоляНачисления]].ИспользованиеПериода;
		Если ПериодЗаполнен И ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать Тогда
			ЗаполнятьДаты = Ложь;
		КонецЕсли;
		// Разные строки могут относиться к разным месяцам.
		Месяц = НачалоМесяца(Строка.ДатаНачала);
		Если ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод
			И Не РеквизитыНачислений[Строка[ИмяПоляНачисления]].НачисляетсяВЦеломЗаМесяц Тогда
			
			Месяц = ЗаполнениеДат.ПериодДействия;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Месяц) Тогда
			Месяц = ПериодРегистрации;
		КонецЕсли;
		НачалоМесяца = НачалоМесяца(Месяц);
		КонецМесяца = КонецМесяца(Месяц);
		Если ЗаполнятьДаты Тогда
			ЗаполнениеДат.ДатаНачала = НачалоМесяца;
			ЗаполнениеДат.ДатаОкончания = КонецМесяца;
			ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
		КонецЕсли;
		Если КадровыеДанныеСотрудников = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанныеСотрудника = КадровыеДанныеСотрудников.Найти(Строка.Сотрудник, "Сотрудник");
		Если КадровыеДанныеСотрудника <> Неопределено Тогда
			// Если дата приема, попадает в текущий интервал.
			Если КадровыеДанныеСотрудника.ДатаПриема < КонецМесяца Тогда
				Строка.ДатаНачала = Макс(ЗаполнениеДат.ДатаНачала, КадровыеДанныеСотрудника.ДатаПриема);
			КонецЕсли;
			Если ЗаполнениеДат.ДатаОкончания <> Неопределено Тогда
				Если ЗначениеЗаполнено(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы) И КадровыеДанныеСотрудника.ДатаЗавершенияРаботы < КонецМесяца Тогда
					Если КадровыеДанныеСотрудника.ДатаЗавершенияРаботы > ЗаполнениеДат.ДатаНачала Тогда
						ЗаполнениеДат.ДатаОкончания = Мин(ЗаполнениеДат.ДатаОкончания, КонецДня(КадровыеДанныеСотрудника.ДатаЗавершенияРаботы));
						ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// Заполняем график работы и вид учета времени, только если они не заполнены.
			ЗаполнениеГрафика = Новый Структура("ГрафикРаботы, ВидУчетаВремени");
			ЗаполнитьЗначенияСвойств(ЗаполнениеГрафика, Строка);
			Если Не ЗначениеЗаполнено(ЗаполнениеГрафика.ГрафикРаботы) Тогда
				ЗаполнениеГрафика.ГрафикРаботы = КадровыеДанныеСотрудника.ГрафикРаботы;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ЗаполнениеГрафика.ВидУчетаВремени) Тогда
				ЗаполнениеГрафика.ВидУчетаВремени = ВидУчетаРабочееВремя;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеГрафика);
		КонецЕсли;
		// Если начисление не является пособием, то ограничиваем его еще и датами изменения применения плановых начислений.
		РеквизитыНачисления = РеквизитыНачислений[Строка[ИмяПоляНачисления]];
		ОписаниеДатИзменения = ДатыИзмененияПримененияПлановыхНачислений[Строка.Сотрудник];
		Если ОписаниеДатИзменения <> Неопределено 
			И КатегорииПособий.Найти(РеквизитыНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) = Неопределено Тогда
			Если ЗначениеЗаполнено(ОписаниеДатИзменения.ДатаНачала) Тогда
				Строка.ДатаНачала = Макс(ЗаполнениеДат.ДатаНачала, ОписаниеДатИзменения.ДатаНачала);
			КонецЕсли;
			Если ЗаполнениеДат.ДатаОкончания <> Неопределено Тогда
				Если ЗначениеЗаполнено(ОписаниеДатИзменения.ДатаОкончания) И ОписаниеДатИзменения.ДатаОкончания < КонецМесяца Тогда
					Если ОписаниеДатИзменения.ДатаОкончания > ЗаполнениеДат.ДатаНачала Тогда
						ЗаполнениеДат.ДатаОкончания = Мин(ЗаполнениеДат.ДатаОкончания, КонецДня(ОписаниеДатИзменения.ДатаОкончания));
						ЗаполнитьЗначенияСвойств(Строка, ЗаполнениеДат);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц, ИмяВТСотрудники = "ВТСотрудникиПериоды") Экспорт
	
	// Получаем записи изменения применения за месяц, а также состояние на начало месяца.
	// Отбрасываем записи, фактически не меняющие состояния (где применение равно предыдущей записи).
	// Оставшиеся записи группируем по сотруднику, выбирая самые поздние даты "включения" и "выключения" применения.
	// Если в месяце несколько интервалов "включения"/"выключения" выбираем таким образом последний.
	// Если дата "выключения" раньше, чем дата "включения", считаем, что это дата от предыдущего "включения" и игнорируем ее.
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяВТСотрудники, "Сотрудник");
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних("ПрименениеПлановыхНачислений", МенеджерВременныхТаблиц, Истина, ОписаниеФильтра);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.ПериодЗаписи КАК Период,
		|	ПрименениеПлановыхНачислений.Применение
		|ПОМЕСТИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезПоследних КАК ПрименениеПлановыхНачислений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение
		|ИЗ
		|	ВТПрименениеПлановыхНачислений КАК ПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение,
		|	МАКСИМУМ(ПредыдущееСостояние.Период) КАК ДатаПредыдущегоСостояния
		|ПОМЕСТИТЬ ВТДатыПредыдущихСостояний
		|ИЗ
		|	ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПредыдущееСостояние
		|		ПО (ПредыдущееСостояние.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|			И (ПредыдущееСостояние.Период < ПрименениеПлановыхНачислений.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрименениеПлановыхНачислений.Сотрудник,
		|	ПрименениеПлановыхНачислений.Период,
		|	ПрименениеПлановыхНачислений.Применение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыИзмененияПримененияПлановыхНачислений.Сотрудник,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания > ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала
		|			ТОГДА ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыИзмененияПримененияПлановыхНачислений
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПрименениеПлановыхНачислений.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ПрименениеПлановыхНачислений.Применение = ИСТИНА
		|					ТОГДА ПрименениеПлановыхНачислений.Период
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ) КАК ДатаНачала,
		|		МАКСИМУМ(ВЫБОР
		|				КОГДА ПрименениеПлановыхНачислений.Применение = ЛОЖЬ
		|					ТОГДА ДОБАВИТЬКДАТЕ(ПрименениеПлановыхНачислений.Период, СЕКУНДА, -1)
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ) КАК ДатаОкончания
		|	ИЗ
		|		ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПрименениеПлановыхНачислений
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПредыдущихСостояний КАК ДатыПредыдущихСостояний
		|			ПО (ДатыПредыдущихСостояний.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|				И (ДатыПредыдущихСостояний.Период = ПрименениеПлановыхНачислений.Период)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеПлановыхНачисленийСрезИДвижения КАК ПредыдущиеСостояния
		|			ПО (ПредыдущиеСостояния.Сотрудник = ПрименениеПлановыхНачислений.Сотрудник)
		|				И (ПредыдущиеСостояния.Период = ДатыПредыдущихСостояний.ДатаПредыдущегоСостояния)
		|	ГДЕ
		|		(ПредыдущиеСостояния.Применение ЕСТЬ NULL 
		|				ИЛИ ПредыдущиеСостояния.Применение <> ПрименениеПлановыхНачислений.Применение)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПрименениеПлановыхНачислений.Сотрудник) КАК ДатыИзмененияПримененияПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПрименениеПлановыхНачисленийСрезИДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТДатыПредыдущихСостояний";
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Определяет даты изменения применения плановых начислений для сотрудников в пределах месяца.
// Используется для ограничения периода начислений, выполняемых в целом за месяц.
//
// Параметры:
//	Сотрудники - массив сотрудников.
//	Месяц - месяц, в котором произошли изменения.
//
// Возвращаемое значение - соответствие, в котором ключом является сотрудник, 
//	а значением - структура описания дат с полями ДатаНачала и ДатаОкончания.
//
Функция ДатыИзмененияПримененияПлановыхНачислений(Сотрудники, Месяц)
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		НоваяСтрока = ИзмеренияДаты.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = НачалоМесяца(Месяц);
		НоваяСтрока.ДатаОкончания = КонецМесяца(Месяц);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Сотрудник,
		|	СотрудникиПериоды.ДатаНачала КАК Период,
		|	СотрудникиПериоды.ДатаНачала,
		|	СотрудникиПериоды.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", ИзмеренияДаты);
	Запрос.Выполнить();
	
	СоздатьВТДатыИзмененияПримененияПлановыхНачислений(МенеджерВременныхТаблиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыИзмененияПримененияПлановыхНачислений.Сотрудник КАК Сотрудник,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаНачала,
		|	ДатыИзмененияПримененияПлановыхНачислений.ДатаОкончания
		|ИЗ
		|	ВТДатыИзмененияПримененияПлановыхНачислений КАК ДатыИзмененияПримененияПлановыхНачислений
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатыИзменения = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеДат = Новый Структура("ДатаНачала, ДатаОкончания");
		ОписаниеДат.ДатаНачала = Выборка.ДатаНачала;
		ОписаниеДат.ДатаОкончания = Выборка.ДатаОкончания;
		ДатыИзменения.Вставить(Выборка.Сотрудник, ОписаниеДат);
	КонецЦикла;
	
	Возврат ДатыИзменения;
	
КонецФункции

#КонецОбласти

// Возвращает таблицу периодов в которой исходные периоды вытесняются или
// разбиваются на интервалы периодами сторнирования.
// 
// Параметры:
//  Периоды   - ТаблицаЗначений - Исходные периоды в виде таблицы с обязательными колонками:
//     * ПериодДействияНачало - Дата   - Дата начала периода.
//     * ПериодДействияКонец  - Дата   - Дата окончания периода.
//     * ПериодРегистрации    - Дата   - Период регистрации. Сторно действует только для записей прошлого периода.
//     * Сторно               - Булево - Периоды отмеченные признаком "Сторно" будут считаться вытесняющими,
//                                       остальные - вытесняемыми.
//  Измерения - Массив          - Имена колонок таблицы используемых в качестве "измерений"
//                                для компоновки вытесняемых и вытесняющих строк.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
// 
Функция СкорректироватьПериодыСУчетомСторнирования(Периоды, Измерения)
	
	ТочкиИнтервалов = Новый ТаблицаЗначений;
	ТочкиИнтервалов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТочкиИнтервалов.Колонки.Добавить("ЭтоНачало", Новый ОписаниеТипов("Булево"));
	ТочкиИнтервалов.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	ТочкиИнтервалов.Колонки.Добавить("СтрокаПериода", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	
	Для Каждого Измерение Из Измерения Цикл
		ТочкиИнтервалов.Колонки.Добавить(Измерение);
	КонецЦикла;
	
	Для Каждого Период Из Периоды Цикл
		
		Начало = ТочкиИнтервалов.Добавить();
		ЗаполнитьЗначенияСвойств(Начало, Период);
		Начало.Дата = Период.ПериодДействияНачало;
		Начало.СтрокаПериода = Период;
		Начало.ЭтоНачало = Истина;
		
		Конец = ТочкиИнтервалов.Добавить();
		ЗаполнитьЗначенияСвойств(Конец, Период);
		Конец.Дата = Период.ПериодДействияКонец;
		Конец.СтрокаПериода = Период;
		
	КонецЦикла;
	
	ИменаИзмерений = СтрСоединить(Измерения, ",");
	
	ТочкиИнтервалов.Индексы.Добавить(ИменаИзмерений);
	
	НаборыИзмерений = ТочкиИнтервалов.Скопировать(, ИменаИзмерений);
	НаборыИзмерений.Свернуть(ИменаИзмерений);
	
	ОтборПоИзмерениям = Новый Структура(ИменаИзмерений);
	
	Результат = Периоды.СкопироватьКолонки();
	Результат.Колонки.Добавить("ЭтоЧастьРПД", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("КоличествоДнейРПД", Новый ОписаниеТипов("Число"));
	
	ВытесняемыеИнтервалы = Новый Массив;
	Интервалы = Новый Массив;
	РазделенныеПериоды = Новый Массив;
	СвойстваИнтервала = "Начало,Конец,СтрокаПериода,ВытесняющийПериод";
	
	ПустаяДата = Дата('00010101');
	
	Для Каждого НаборИзмерений Из НаборыИзмерений Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборПоИзмерениям, НаборИзмерений);
		ТочкиНабора = ТочкиИнтервалов.Скопировать(ТочкиИнтервалов.НайтиСтроки(ОтборПоИзмерениям));
		ТочкиНабора.Сортировать("Дата Возр, ЭтоНачало Убыв, Сторно Возр");
		
		Для Каждого Точка Из ТочкиНабора Цикл
			
			Если Точка.Сторно Тогда
				
				Если Точка.ЭтоНачало Тогда
					НовыйИнтервал =
						Новый Структура(СвойстваИнтервала, Точка.Дата, Точка.СтрокаПериода.ПериодДействияКонец, Точка.СтрокаПериода);
					Интервалы.Добавить(НовыйИнтервал);
				КонецЕсли;
				
				Для Каждого Интервал Из ВытесняемыеИнтервалы Цикл
					
					// Сторно действует только для записей прошлого периода.
					Если Интервал.СтрокаПериода.ПериодРегистрации < Точка.СтрокаПериода.ПериодРегистрации Тогда
						
						Если Интервал.Конец > Точка.Дата Тогда
							Если Точка.ЭтоНачало Тогда
								
								РазделенныеПериоды.Добавить(Интервал.СтрокаПериода);
								
								Если Интервал.Начало < Точка.Дата Тогда
									НовыйИнтервал =
										Новый Структура(СвойстваИнтервала, Интервал.Начало, Точка.Дата - 1, Интервал.СтрокаПериода);
									Интервалы.Добавить(НовыйИнтервал);
								КонецЕсли;
								Интервал.Начало = ПустаяДата;
								Если Интервал.ВытесняющийПериод = Неопределено Тогда
									Интервал.ВытесняющийПериод = Точка.СтрокаПериода;
								КонецЕсли;
							ИначеЕсли Интервал.ВытесняющийПериод = Неопределено Или Интервал.ВытесняющийПериод = Точка.СтрокаПериода Тогда
								Интервал.Начало = Точка.Дата + 1;
								Интервал.ВытесняющийПериод = Неопределено;
							КонецЕсли;
						ИначеЕсли Интервал.Конец = Точка.Дата И Не Точка.ЭтоНачало Тогда
							Интервал.Начало = ПустаяДата;
							Если Интервал.ВытесняющийПериод = Неопределено Тогда
								Интервал.ВытесняющийПериод = Точка.СтрокаПериода;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Если Точка.ЭтоНачало Тогда
					НовыйИнтервал =
						Новый Структура(СвойстваИнтервала, Точка.Дата, Точка.СтрокаПериода.ПериодДействияКонец, Точка.СтрокаПериода);
					ВытесняемыеИнтервалы.Добавить(НовыйИнтервал);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Интервалы, ВытесняемыеИнтервалы);
		
		Для Каждого Интервал Из Интервалы Цикл
			
			Если Интервал.Начало = ПустаяДата Тогда
				Продолжить; // Период полностью вытеснен.
			КонецЕсли;
			
			НовыйПериод = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПериод, Интервал.СтрокаПериода,, "ПериодДействияНачало,ПериодДействияКонец");
			НовыйПериод.ПериодДействияНачало = Интервал.Начало;
			НовыйПериод.ПериодДействияКонец = Интервал.Конец;
			
			Если РазделенныеПериоды.Найти(Интервал.СтрокаПериода) <> Неопределено Тогда
				НовыйПериод.ЭтоЧастьРПД = Истина;
				НовыйПериод.КоличествоДнейРПД = ЗарплатаКадрыКлиентСервер.ДнейВПериоде(Интервал.Начало, Интервал.Конец);
			КонецЕсли;
			
		КонецЦикла;
		
		Интервалы.Очистить();
		ВытесняемыеИнтервалы.Очистить();
		РазделенныеПериоды.Очистить();
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает код ОКПО обособленного подразделения
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//   КодОКПО       - Строка(14) - код ОКПО обособленного подразделения.
Процедура ПолучитьКодОКПОПодразделения(Знач Подразделение, КодОКПО) Экспорт 
	
	Если ЗарплатаКадрыКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
		Сведения = РегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Подразделение,,"ИдентификационныйНомер");
		КодОКПО = Сведения.ДанныеРегистрации.ИдентификационныйНомер;
	Иначе
		КодОКПО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "НомерТерриториальногоОрганаРосстата");
	КонецЕсли;
	
КонецПроцедуры

// Получает код органа ФСГС обособленного подразделения
// 
// Параметры:
//   Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//   КодФСГС       - Строка(5) - код органа ФСГС для подразделения (например, "23-45").
//
Процедура ПолучитьКодОрганаФСГСПодразделения(Подразделение, КодФСГС) Экспорт 
	
	Если ЗарплатаКадрыКлиентСервер.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
		Сведения = РегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Подразделение,,"КодОрганаФСГС");
		КодФСГС = Сведения.ДанныеРегистрации.КодОрганаФСГС;
	Иначе
		КодФСГС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "КодОрганаФСГС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоказателейСдельногоЗаработка(ВидРасчетаИнфо, СтрокаНачислений, РежимРаботы, ДокументСсылка = Неопределено) Экспорт
	
	Если РежимРаботы = 0 Или РежимРаботы = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПоказательСдельногоЗаработка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ПоказателиРасчетаЗарплаты.СдельныйЗаработок");
	
	Если ПоказательСдельногоЗаработка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикПоказателей = 1;
	Для Каждого СтрокаПоказателя Из ВидРасчетаИнфо.Показатели Цикл
		Если СтрокаПоказателя.Показатель = ПоказательСдельногоЗаработка Тогда
			СтрокаНачислений["КомандаРасшифровки" + СчетчикПоказателей] = НСтр("ru = 'Подробнее';
																				|en = 'Details'");
		КонецЕсли;			
		СчетчикПоказателей = СчетчикПоказателей + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область РаботаСМодифицирующимиПараметрамиДинамическихСписков

Процедура ЗаполнитьПараметрыВариантаМодификации(СтрокаПараметра, Список, МетаданныеОбъекта)
	
	Если СтрокаПараметра.ИмяМодификации = "ОтборПоПодразделению" Тогда
		
		ИменаТиповДокументов = Новый Массив;
		
		Если ОбщегоНазначения.ЭтоЖурналДокументов(МетаданныеОбъекта) Тогда
			Для Каждого РегистрируемыйДокумент Из МетаданныеОбъекта.РегистрируемыеДокументы Цикл
				ИменаТиповДокументов.Добавить(РегистрируемыйДокумент.ПолноеИмя());
			КонецЦикла;
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
			ИменаТиповДокументов.Добавить(МетаданныеОбъекта.ПолноеИмя());
		КонецЕсли;
		
		Параметры = Новый Структура;
		
		ДобавитьПараметрМодификации(Параметры, "ИменаТиповДокументов", ИменаТиповДокументов);
		ДобавитьПараметрМодификации(Параметры, "ДинамическоеСчитываниеДанных", Список.ДинамическоеСчитываниеДанных);
		ДобавитьПараметрМодификации(Параметры, "Иерархия", Ложь);
		
		СтрокаПараметра.ПараметрыМодификации = Параметры;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрМодификации(Параметры, Имя, Значение, Представление = Неопределено, БыстрыйДоступ = Ложь)
	
	Параметры.Вставить(Имя,
		Новый Структура("Значение,Представление,БыстрыйДоступ", Значение, Представление, БыстрыйДоступ));
		
КонецПроцедуры

Процедура ИзменитьЗапросПриОтбореПоПодразделению(СвойстваСписка, Модифицировать, ИменаТиповДокументов, Иерархия)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СвойстваСписка.ТекстЗапроса);
	
	ИндексВТДокументыПодразделения = Неопределено;
	ИндексОсновногоЗапроса = Неопределено;
	Для Сч = 0 По СхемаЗапроса.ПакетЗапросов.Количество() - 1 Цикл
		ТаблицаДляПомещения = СхемаЗапроса.ПакетЗапросов[Сч].ТаблицаДляПомещения;
		Если ТаблицаДляПомещения = "ВТДокументыПодразделения" Тогда
			ИндексВТДокументыПодразделения = Сч;
		ИначеЕсли ТаблицаДляПомещения = "" Тогда
			ИндексОсновногоЗапроса = Сч;
		КонецЕсли;
	КонецЦикла;
	
	ОсновнойЗапрос = СхемаЗапроса.ПакетЗапросов[ИндексОсновногоЗапроса];
	
	Если Модифицировать Тогда

		// Для документов регистрирующих кадровые периоды, отбор не зависит от даты документа.
		ТипДокументовКадровойИстории = Метаданные.ОпределяемыеТипы.ДокументыКадровойИстории.Тип;
		
		Условия = Новый Массив;
		УсловияНеЗависитОтДаты = Новый Массив;
		Для Каждого ИмяТипа Из ИменаТиповДокументов Цикл
			ТекстУсловия = "СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ССЫЛКА " + ИмяТипа;
			Условия.Добавить(ТекстУсловия);
			
			Если ТипДокументовКадровойИстории.СодержитТип(Тип(СтрЗаменить(ИмяТипа, "Документ.", "ДокументСсылка."))) Тогда
				УсловияНеЗависитОтДаты.Добавить(ТекстУсловия);
			КонецЕсли;
		КонецЦикла;
		УсловиеПоТипамДокументов = Новый ВыражениеСхемыЗапроса(СтрСоединить(Условия, " ИЛИ "));
		
		ТекстУсловия = "СоставДокументовЗарплатаКадры.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ) И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания";
		Если УсловияНеЗависитОтДаты.Количество() > 0 Тогда
			УсловиеПоДатеДокумента = Новый ВыражениеСхемыЗапроса(
				"ВЫБОР
				|	КОГДА " + СтрСоединить(УсловияНеЗависитОтДаты, " ИЛИ ") + "
				|	ТОГДА КадроваяИсторияСотрудниковИнтервальный.РегистраторЗаписи = СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ИЛИ " + ТекстУсловия + "
				|	ИНАЧЕ " + ТекстУсловия + "
				|КОНЕЦ");
		Иначе
			УсловиеПоДатеДокумента = Новый ВыражениеСхемыЗапроса(ТекстУсловия);
		КонецЕсли;
		
		Если ИндексВТДокументыПодразделения <> Неопределено Тогда
			ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[ИндексВТДокументыПодразделения];
		Иначе
			ЗапросВыбора = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
			СхемаЗапроса.ПакетЗапросов.Переместить(ЗапросВыбора, ИндексОсновногоЗапроса);
		КонецЕсли;
		
		Если Иерархия Тогда
			
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставДокументовЗарплатаКадры.ДокументФизическогоЛица КАК Документ
				|ПОМЕСТИТЬ ВТДокументыПодразделения
				|ИЗ
				|	РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
				|		ПО (КадроваяИсторияСотрудниковИнтервальный.Сотрудник = СоставДокументовЗарплатаКадры.Сотрудник)
				|			И (СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ССЫЛКА Документ.Отпуск)
				|			И (СоставДокументовЗарплатаКадры.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ) И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
				|		ПО (ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение = &Подразделение)
				|			И (ПодчиненностьПодразделенийОрганизаций.Подразделение = КадроваяИсторияСотрудниковИнтервальный.Подразделение)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
				|ИЗ
				|	РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
				|		ПО (СоставДокументовЗарплатаКадры.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|			И (КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо = СоставДокументовЗарплатаКадры.ФизическоеЛицо)
				|			И (СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ССЫЛКА Документ.Отпуск)
				|			И (СоставДокументовЗарплатаКадры.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ) И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания)
				|			И (КадроваяИсторияСотрудниковИнтервальный.ПустойИнтервал = ЛОЖЬ)
				|			И (КадроваяИсторияСотрудниковИнтервальный.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделенийОрганизаций КАК ПодчиненностьПодразделенийОрганизаций
				|		ПО (ПодчиненностьПодразделенийОрганизаций.ВышестоящееПодразделение = &Подразделение)
				|			И (ПодчиненностьПодразделенийОрганизаций.Подразделение = КадроваяИсторияСотрудниковИнтервальный.Подразделение)";
			
			ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
			ЗапросВыбора.Операторы[0].Источники[0].Соединения[1].Условие = УсловиеПоТипамДокументов;
			ЗапросВыбора.Операторы[0].Источники[0].Соединения[2].Условие = УсловиеПоДатеДокумента;
			ЗапросВыбора.Операторы[1].Источники[0].Соединения[2].Условие = УсловиеПоТипамДокументов;
			ЗапросВыбора.Операторы[1].Источники[0].Соединения[3].Условие = УсловиеПоДатеДокумента;
			
		Иначе
			
			ТекстЗапроса =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставДокументовЗарплатаКадры.ДокументФизическогоЛица КАК Документ
				|ПОМЕСТИТЬ ВТДокументыПодразделения
				|ИЗ
				|	РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
				|		ПО СоставДокументовЗарплатаКадры.Сотрудник = КадроваяИсторияСотрудниковИнтервальный.Сотрудник
				|			И (КадроваяИсторияСотрудниковИнтервальный.Подразделение = &Подразделение)
				|			И (СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ССЫЛКА Документ.Отпуск)
				|			И (СоставДокументовЗарплатаКадры.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ) И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СоставДокументовЗарплатаКадры.ДокументФизическогоЛица
				|ИЗ
				|	РегистрСведений.СоставДокументовЗарплатаКадры КАК СоставДокументовЗарплатаКадры
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК КадроваяИсторияСотрудниковИнтервальный
				|		ПО (СоставДокументовЗарплатаКадры.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|			И СоставДокументовЗарплатаКадры.ФизическоеЛицо = КадроваяИсторияСотрудниковИнтервальный.ФизическоеЛицо
				|			И (КадроваяИсторияСотрудниковИнтервальный.Подразделение = &Подразделение)
				|			И (СоставДокументовЗарплатаКадры.ДокументФизическогоЛица ССЫЛКА Документ.Отпуск)
				|			И (СоставДокументовЗарплатаКадры.ДатаДокумента МЕЖДУ НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковИнтервальный.ДатаНачала, ДЕНЬ) И КадроваяИсторияСотрудниковИнтервальный.ДатаОкончания)
				|			И (КадроваяИсторияСотрудниковИнтервальный.ПустойИнтервал = ЛОЖЬ)
				|			И (КадроваяИсторияСотрудниковИнтервальный.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
			
			ЗапросВыбора.УстановитьТекстЗапроса(ТекстЗапроса);
			ЗапросВыбора.Операторы[0].Источники[0].Соединения[2].Условие = УсловиеПоТипамДокументов;
			ЗапросВыбора.Операторы[0].Источники[0].Соединения[3].Условие = УсловиеПоДатеДокумента;
			ЗапросВыбора.Операторы[1].Источники[0].Соединения[3].Условие = УсловиеПоТипамДокументов;
			ЗапросВыбора.Операторы[1].Источники[0].Соединения[4].Условие = УсловиеПоДатеДокумента;
			
		КонецЕсли;
		
		Если ИндексВТДокументыПодразделения = Неопределено Тогда
			
			ОператорВыбрать = ОсновнойЗапрос.Операторы[0];
			ОсновнойИсточник = ОператорВыбрать.Источники[0];
			
			ОператорВыбрать.Источники.Добавить("ВТДокументыПодразделения", "ДокументыПодразделения");
			Соединение = ОсновнойИсточник.Соединения.Добавить("ДокументыПодразделения",
				"(ДокументыПодразделения.Документ = " + ОсновнойИсточник.Источник.Псевдоним + ".Ссылка)");
			ОсновнойИсточник.Соединения[ОсновнойИсточник.Соединения.Количество()-1].ТипСоединения =
				ТипСоединенияСхемыЗапроса.Внутреннее;
			
		КонецЕсли;
		
	Иначе // Отменить модификацию.
		
		ОператорВыбрать = ОсновнойЗапрос.Операторы[0];
		
		Если ИндексВТДокументыПодразделения <> Неопределено Тогда
			СхемаЗапроса.ПакетЗапросов.Удалить(ИндексВТДокументыПодразделения);
		КонецЕсли;
		
		Источник = ОператорВыбрать.Источники.НайтиПоИмени("ВТДокументыПодразделения");
		Если Источник <> Неопределено Тогда
			ОператорВыбрать.Источники.Удалить(ОператорВыбрать.Источники.Индекс(Источник));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ИсправитьИнструкцииКомпоновки(ТекстЗапроса);
	
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

Процедура ИсправитьИнструкцииКомпоновки(ТекстЗапроса)
	
	// В версии платформы 8.3.14 у объекта СхемаЗапроса есть свойство РежимКомпоновкиДанных,
	// которое позволяет решить эту проблему на уровне платформы.
	
	Позиция = СтрНайти(ТекстЗапроса, "{ГДЕ");
	Если Позиция = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстНачала = Лев(ТекстЗапроса, Позиция - 1);
	ТекстОкончания = Сред(ТекстЗапроса, Позиция);
	
	Найдено = Истина;
	Пока Найдено Цикл
		Поз1 = СтрНайти(ТекстОкончания, "КАК Поле");
		Если Поз1 = 0 Тогда
			Найдено = Ложь;
		Иначе
			Поз2 = СтрНайти(ТекстОкончания, ",",, Поз1);
			Если Поз2 = 0 Тогда
				Поз2 = СтрНайти(ТекстОкончания, "}",, Поз1);
			КонецЕсли;
			Если Поз2 > Поз1 И Поз2 - Поз1 <= 10 Тогда
				ТекстОкончания = Лев(ТекстОкончания, Поз1 - 1) + Сред(ТекстОкончания, Поз2);
			Иначе
				Найдено = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = ТекстНачала + ТекстОкончания;
	
КонецПроцедуры

Процедура ДобавитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра)
	
	Если ЗарплатаКадрыРасширенныйКлиентСервер.ОбновитьПредставлениеПараметровМодификации(Элементы, СтрокаПараметра) Тогда
	
		Элемент = Элементы[СтрокаПараметра.ИмяЭлементаФормыПараметра];
		Элемент.РасширеннаяПодсказка.УстановитьДействие(
			"ОбработкаНавигационнойСсылки",
			"Подключаемый_ПараметрМодификацииВыбор");
		Элемент.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Элемент.РасширеннаяПодсказка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СравнитьЗначения(Значение1, Значение2)
	
	ТипЗначения1 = ТипЗнч(Значение1);
	
	Если ТипЗначения1 = ТипЗнч(Значение2) Тогда
			
		Если ТипЗначения1 = Тип("Массив") Или ТипЗначения1 = Тип("ФиксированныйМассив") Тогда
			Возврат ?(КоллекцииБЗК.ТаблицыИдентичны(
				КоллекцииБЗК.МассивВТаблицу(Значение1),
				КоллекцииБЗК.МассивВТаблицу(Значение2)), 0, 1);
		КонецЕсли;
		
		Если ТипЗначения1 = Тип("ТаблицаЗначений") Тогда
			Возврат ?(КоллекцииБЗК.ТаблицыИдентичны(Значение1, Значение2), 0, 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Сравнение = Новый СравнениеЗначений;
	Возврат Сравнение.Сравнить(Значение1, Значение2);
		
КонецФункции

Функция НайтиКоманднуюПанельТаблицы(ТаблицаФормы)
	
	Если ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда
		Для Каждого Элемент Из ТаблицаФормы.Родитель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
				Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") И ПодчиненныйЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
						Возврат ПодчиненныйЭлемент;
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаФормы.КоманднаяПанель;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайлами

// См. РаботаСФайламиПереопределяемый.ПриСозданииФормыСпискаФайлов.
Процедура ПриСозданииФормыСпискаФайлов(Форма) Экспорт
	
	ЗарплатаКадрыБазовый.ПриСозданииФормыСпискаФайлов(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область КадровыйЭДО

Процедура ЗаполнитьНастройкиПечатныхФормПоУмолчанию(ОписанияНастроек) Экспорт
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ДоговорАвторскогоЗаказа.Макеты.ПФ_MXL_ДоговорАвторскогоЗаказа,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.ДоговорРаботыУслуги.Макеты.ПФ_MXL_ДоговорПодряда,
		Перечисления.СодержимоеДокументов.СодержитТарифныеСтавки);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_АктПоэтапнойСдачиПриемаВыполненныхРаботУслуг,
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Обработки.ПечатьКадровыхПриказовРасширенная.Макеты.ПФ_MXL_АктСдачиПриемкиВыполненныхРаботУслуг,
		Перечисления.СодержимоеДокументов.СодержитЗарплату);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.РаботаВВыходныеИПраздничныеДни.Макеты.ПФ_MXL_ПриказОРаботеВВыходнойИПраздничныйДень,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Истина,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.Документы.РаботаСверхурочно.Макеты.ПФ_MXL_ПриказОСверхурочнойРаботе,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
	КадровыйЭДО.ДобавитьНастройкуПечатнойФормыПоМетаданным(
		ОписанияНастроек,
		Метаданные.ОбщиеМакеты.ПФ_MXL_УнифицированнаяФормаТ13,
		Перечисления.СодержимоеДокументов.НеСодержитЗарплаты,
		Ложь,
		Истина);
	
КонецПроцедуры

#КонецОбласти
