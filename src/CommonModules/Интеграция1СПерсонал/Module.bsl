
#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

// СтандартныеПодсистемы.РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСПриложением1СПерсонал;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользуетсяПриложение1СПерсонал;
	Настройка.ДоступноВАвтономномРабочемМесте 	= Ложь;
	Настройка.РаботаетСВнешнимиРесурсами 		= Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПодключениеПриложения1СПерсонал;
	Настройка.ДоступноВАвтономномРабочемМесте 			= Ложь;
	Настройка.РаботаетСВнешнимиРесурсами 				= Истина;
	Настройка.ВключатьПриВключенииФункциональнойОпции 	= Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблоновОчередиЗаданий(Шаблоны) Экспорт
	
	Шаблоны.Добавить(Метаданные.РегламентныеЗадания.ОбменСПриложением1СПерсонал.Имя);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСПриложением1СПерсонал.ИмяМетода);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

#КонецОбласти

#Область ОпределениеДоступностиДанных

Функция ДоступноЧтениеИспользованияИнтеграции() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.ИспользоватьИнтеграциюСПриложением1СПерсонал);

КонецФункции

Функция ДоступноИзменениеВариантаИспользованияПриложения() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Константы.Приложение1СПерсоналВЛокальнойСети);

КонецФункции

Функция ДоступноЧтениеВариантаИспользованияПриложения() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.Константы.Приложение1СПерсоналВЛокальнойСети);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтложенноеПодключение

// Процедура регламентного задания ПодключениеПриложения1СПерсонал
Процедура ОтложенноеПодключениеПриложения(ПараметрыПодключения) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПодключениеПриложения1СПерсонал);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ИнтеграцияУправлениеПерсоналомМенеджер.ОтложенноеПодключениеПриложения(Приложение, ПараметрыПодключения);
	
КонецПроцедуры

#КонецОбласти

#Область Обмен

// Обработчик регламентного задания ОбменСПриложением1СПерсонал
//
Процедура ОбменСПриложением1СПерсонал() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСПриложением1СПерсонал);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	БлокировкаУстановлена = Ложь;
	ИнтеграцияУправлениеПерсоналом.УстановитьБлокировкуДляВыполненияОбмена(Приложение, БлокировкаУстановлена, Ложь);
	Если Не БлокировкаУстановлена Тогда
		Возврат;
	КонецЕсли;
	
	БылиОшибки = ИнтеграцияУправлениеПерсоналомОбмен.ВыполнитьОбмен(Приложение, Ложь);
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен с приложением 1С:Персонал завершен с ошибками.';
								|en = 'Exchange with 1C:Human Resources is completed with errors.'");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик фонового задания обмена с приложением.
Процедура ВыполнитьОбменФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("БылиОшибки,ПодготовитьДанныеДляТехПоддержки,ДатаНачала,ДатаОкончания", Ложь);
	Результат.ПодготовитьДанныеДляТехПоддержки = Параметры.ПодготовитьДанныеДляТехПоддержки;
	Результат.ДатаНачала = ТекущаяДатаСеанса();
	
	// Привилегированный режим устанавливается для публикации всех данных,
	// не зависимо от ограничений доступа для пользователя, который инициировал обмен.
	УстановитьПривилегированныйРежим(Истина);
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ИнтеграцияУправлениеПерсоналом.УстановитьБлокировкуДляВыполненияОбмена(Приложение, Ложь, Истина);
	
	Результат.БылиОшибки = ИнтеграцияУправлениеПерсоналомОбмен.ВыполнитьОбмен(Приложение, Результат.ПодготовитьДанныеДляТехПоддержки);
	
	Результат.ДатаОкончания = ТекущаяДатаСеанса();
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ПравилаВыгрузки

Процедура ЗаписатьОбъектыПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации) Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БудущиеСобытияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
		Блокировка.Заблокировать(); 
		
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Загрузить(ОбъектыДляРегистрации.НовыеПравила);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ВыгружаемыеОбъекты Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьНаборЗаписей();
		Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.ИзмененияДляОбмена Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
		КонецЦикла;
		НаборЗаписей.Записать();
		
		Если ЗначениеЗаполнено(ОбъектыДляРегистрации.БудущиеСобытия) Тогда
			НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Приложение.Установить(Приложение);
			Для каждого СтрокаТЗ Из ОбъектыДляРегистрации.БудущиеСобытия Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),СтрокаТЗ);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка записи правил.
			|%1';
			|en = 'Rule saving error.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение).ПрочиеСобытия;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		// Исключение обрабатывает вызывающий метод.
		ВызватьИсключение
	КонецПопытки;
	
	ИнтеграцияУправлениеПерсоналом.ПроверитьЗаполнениеОбъектов(Приложение);

КонецПроцедуры

Функция ОбъектВыгружается(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область Версионирование

Процедура ЗаполнитьВерсииDTO(Версии) Экспорт

	Версии.Добавить("2.0");
	Версии.Добавить("3.0");

КонецПроцедуры

Процедура ЗаполнитьВерсииAPI(Версии) Экспорт

	Версии.Добавить("2.0");
	Версии.Добавить("2.2");

КонецПроцедуры

Процедура УстановитьНовуюВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO) Экспорт

	РегистрыСведений.НастройкиПодключения1СПерсонал.УстановитьВерсиюDTO(НоваяВерсияDTO);
	ВыполнитьДействияПриПереходеНаВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO);

КонецПроцедуры

Процедура УстановитьНовуюВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI) Экспорт

	РегистрыСведений.НастройкиПодключения1СПерсонал.УстановитьВерсиюAPI(НоваяВерсияAPI);
	ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСменыВерсииDTOИлиAPI

Процедура ВыполнитьДействияПриПереходеНаВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO)

	

КонецПроцедуры

Процедура ВыполнитьДействияПриПереходеНаВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI)

	

КонецПроцедуры

#КонецОбласти

#Область ИзменениеНастроекПодключения

Процедура СохранитьНовыеНастройкиПодключения(АдресПриложения) Экспорт

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПодключения1СПерсонал");
	Блокировка.Заблокировать();
	
	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Настройки.АдресПриложения = АдресПриложения;
	Настройки.АдресПриложенияПоИмени = "";
	Настройки.Идентификатор = "local";
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройки);
	МенеджерЗаписи.Записать();
	
	Если Не Константы.Приложение1СПерсоналВЛокальнойСети.Получить() Тогда
		МенеджерЗначенияКонстанты = Константы.Приложение1СПерсоналВЛокальнойСети.СоздатьМенеджерЗначения();
		МенеджерЗначенияКонстанты.ДополнительныеСвойства.Вставить("ИзменениеРазрешено");
		МенеджерЗначенияКонстанты.Значение = Истина;
		МенеджерЗначенияКонстанты.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеПодключенияОтключенияПриложения

Процедура ВключитьНастройкиПрограммыПослеПодключенияПриложения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИнтеграцияУправлениеПерсоналом.ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Попытка
			ИнтеграцияУправлениеПерсоналом.ОбновитьСтруктуруПредприятия();
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось обновить структуру предприятия';
								|en = 'Не удалось обновить структуру предприятия'");
			ИнформацияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2';
			|en = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий, ТекстОшибки, ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьНастройкиПриПодключенииПриложения(Ответственный, ОписаниеПриложения, ОписаниеИС) Экспорт
	
	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Настройки.АдресПриложения 			= ОписаниеПриложения.АдресПриложения;
	Настройки.АдресПриложенияПоИмени 	= ОписаниеПриложения.АдресПриложенияПоИмени;
	Настройки.ИдентификаторПриложения 	= ОписаниеПриложения.Идентификатор;
	Настройки.НаименованиеПриложения  	= ОписаниеПриложения.Наименование;
	
	Настройки.Идентификатор = ОписаниеИС.Идентификатор;
	Настройки.Ответственный = Ответственный;
	
	НаборЗаписей = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	КлючиПриложения = Новый Структура("ИдентификаторКлиента,СекретКлиента");
	КлючиПриложения.ИдентификаторКлиента 	= ОписаниеИС.ИдентификаторКлиента;
	КлючиПриложения.СекретКлиента 			= ОписаниеИС.СекретКлиента;
	ИнтеграцияУправлениеПерсоналом.СохранитьКлючиПриложения(Приложение, КлючиПриложения);
	
	ПолучитьВерсииФорматаПриложения();
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ЗарегистрироватьОпубликоватьОтветственного(Ответственный);
		УстановитьПривилегированныйРежим(Истина);
		МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Истина);
		Объект = Новый Структура("ФизическоеЛицо", Ответственный);
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВнешнееФизическоеЛицо;
		МенеджерОбмена.СоздатьАдминистратора(Объект, ТипОбъекта);
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииПриложения() Экспорт
	
	Константы.ИспользуетсяПриложение1СПерсонал.Установить(Ложь);
	Константы.АдресМенеджера1СПерсонал.Установить("");
	РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьНаборЗаписей().Записать();
	РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьНаборЗаписей().Записать();
	
	Если Константы.Приложение1СПерсоналВЛокальнойСети.Получить() Тогда
		МенеджерЗначенияКонстанты = Константы.Приложение1СПерсоналВЛокальнойСети.СоздатьМенеджерЗначения();
		МенеджерЗначенияКонстанты.ДополнительныеСвойства.Вставить("ИзменениеРазрешено");
		МенеджерЗначенияКонстанты.Значение = Ложь;
		МенеджерЗначенияКонстанты.Записать();
	КонецЕсли;

КонецПроцедуры

// Используется при подключении к новому приложению.
Процедура ПолучитьВерсииФорматаПриложения() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Истина);
	
	ВерсияAPI = "";
	ВерсияDTO = "";
	
	Ответ = МенеджерОбмена.ВерсииФорматаОбменаПриложения();
	Если Ответ.Использовать = Истина Тогда
		ВерсииФормата = Ответ.ОбъектВерсииФормата;
		Если ЗначениеЗаполнено(ВерсииФормата.ВерсияDTO) И ЗначениеЗаполнено(ВерсииФормата.ВерсияAPI) Тогда
			ВерсияAPI = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияAPI, ИнтеграцияУправлениеПерсоналом.ВерсииAPI(Приложение));
			ВерсияDTO = ИнтеграцияУправлениеПерсоналом.ПодобратьВерсию(ВерсииФормата.ВерсияDTO, ИнтеграцияУправлениеПерсоналом.ВерсииDTO(Приложение));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияAPI) И ЗначениеЗаполнено(ВерсияDTO) Тогда
		Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
		Настройки.ВерсияAPI = ВерсияAPI;
		Настройки.ВерсияDTO = ВерсияDTO;
		НаборЗаписей = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияПубликацияОтветственногоЛица

Функция ЗарегистрироватьОпубликоватьОтветственного(Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ответственный);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ответственный);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Ссылка = Ответственный;
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР().ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	Возврат ИнтеграцияУправлениеПерсоналомОбмен.РезультатВыгрузкиФизическогоЛица(Приложение, Ответственный);

КонецФункции

#КонецОбласти

#Область НастройкиПриложения

Функция НастройкиПриложения() Экспорт

	Возврат РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();

КонецФункции

Процедура ЗаписатьВерсииФормата(ВерсияAPI, ВерсияDTO) Экспорт

	Настройки = НастройкиПриложения();
	Настройки.ВерсияAPI = ВерсияAPI;
	Настройки.ВерсияDTO = ВерсияDTO;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройки);
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ЗаписатьАдресПриложения(АдресПриложения) Экспорт

	Настройки = НастройкиПриложения();
	Настройки.АдресПриложения = АдресПриложения;
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Настройки);
	МенеджерЗаписи.Записать();

КонецПроцедуры

Процедура ОчиститьНастройкиПодключения() Экспорт
	
	РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей().Записать();

КонецПроцедуры

Процедура ЗаписатьНастройкиПодключенияЛокальные(ИдентификаторПриложения, Ответственный) Экспорт

	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Настройки.ИдентификаторПриложения 					= ИдентификаторПриложения;
	Настройки.Идентификатор 							= "local";
	Настройки.Ответственный 							= Ответственный;
	НаборЗаписей = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#Область КонструкторыОбъектов

Функция НоваяТаблицаВыгружаемыеОбъекты() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ВыгружаемыеОбъекты1СПерсонал");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция НоваяТаблицаИзмененияДляОбмена() Экспорт

	Таблица = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ИзмененияДляОбмена1СПерсонал");
	Таблица.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Прочие

Процедура ЗаполнитьНастройкиПодключения(НастройкиПодключения) Экспорт
	
	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	АдресПриложения = Настройки.АдресПриложения;
	Если ЗначениеЗаполнено(Настройки.АдресПриложенияПоИмени) И Настройки.АдресПриложенияПоИмениДоступен Тогда
		АдресПриложения = Настройки.АдресПриложенияПоИмени;
	КонецЕсли;
	НастройкиПодключения.ВерсияDTO 				= СокрЛП(Настройки.ВерсияDTO);
	НастройкиПодключения.ВерсияAPI 				= СокрЛП(Настройки.ВерсияAPI); 
	НастройкиПодключения.АдресПриложения 		= СокрЛП(АдресПриложения);
	НастройкиПодключения.АдресПриложенияПоИмени = СокрЛП(Настройки.АдресПриложенияПоИмени);

КонецПроцедуры

Процедура ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрации) Экспорт
	
	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъекты;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
		ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбмена;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрации) Экспорт

	ВыгружаемыеОбъекты = Неопределено;
	ОбъектыДляРегистрации.Свойство("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
		Для каждого СтрокаТЗ Из ВыгружаемыеОбъекты Цикл 
			МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			Если СтрокаТЗ.Удалить Тогда
				МенеджерЗаписи.Удалить();
			Иначе
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИзмененияДляОбмена = Неопределено;
	ОбъектыДляРегистрации.Свойство("ИзмененияДляОбмена", ИзмененияДляОбмена);
	Если ЗначениеЗаполнено(ИзмененияДляОбмена) Тогда
		Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл 
			МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ИменаСобытийЖР() Экспорт
	
	Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	Возврат ИнтеграцияУправлениеПерсоналом.ИменаСобытийЖР(Приложение);

КонецФункции

Процедура ЗаписатьНовогоОтветственногоЗаПриложение(Ответственный) Экспорт

	Настройки = РегистрыСведений.НастройкиПодключения1СПерсонал.Настройки();
	Настройки.Ответственный = Ответственный;
	НаборЗаписей = РегистрыСведений.НастройкиПодключения1СПерсонал.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

#КонецОбласти