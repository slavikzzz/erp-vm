
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет регистрацию в учете удержаний и займов.
// Параметры:
// 	ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 	Отказ               - Булево
// 	ПогашениеЗаймов     - ТаблицаЗначений
// 	НДФЛМатВыгода       - ТаблицаЗначений
// 	ЗаписыватьДвижения  - Булево.
// 
Процедура ЗарегистрироватьЗаймы(ДанныеДляПроведения, Отказ, ПогашениеЗаймов, НДФЛМатВыгода, ЗаписыватьДвижения = Ложь) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
		НалогНаМатериальнуюВыгоду	= НДФЛМатВыгода;
		УдержанияЗаймов    			= ПогашениеЗаймов;
	Иначе
		РезультатыРаспределения 	= РезультатыРаспределенияЗаймов(ДанныеДляПроведения, ПогашениеЗаймов, НДФЛМатВыгода);
		НалогНаМатериальнуюВыгоду	= РезультатыРаспределения.НалогНаМатериальнуюВыгоду;
		УдержанияЗаймов    			= РезультатыРаспределения.УдержанияЗаймов;
	КонецЕсли;
	
	Если НалогНаМатериальнуюВыгоду <> Неопределено Тогда
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, НалогНаМатериальнуюВыгоду, ЗаписыватьДвижения);
	КонецЕсли;
	
	Если УдержанияЗаймов <> Неопределено Тогда
		ЗарегистрироватьПогашениеЗаймов(ДанныеДляПроведения, Отказ, УдержанияЗаймов, ЗаписыватьДвижения);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		ДанныеДляПроведения - структура, см ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения().
//		Отказ - Булево.
//		Удержания
//		ЗаписыватьДвижения - (необязательный), булево, по умолчанию Ложь, 
//			если Истина - наборы записей будут записаны после заполнения.
//
Процедура ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если Удержания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата") Тогда
		УдержанияПоСотрудникам = Удержания;
	Иначе
		УдержанияПоСотрудникам = РезультатыРаспределенияУдержаний(ДанныеДляПроведения, Удержания);
	КонецЕсли;
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, УдержанияПоСотрудникам);
	
КонецПроцедуры

// Формирует движения по регистрам подсистемы.
//
// Параметры:
//		Движения - коллекция движений регистратора.
//		Отказ - признак отказа от заполнения движений.
//		Организация
//		ПериодРегистрации
//		Начисления - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			Начисление
//			Сумма
//			ДокументОснование
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		Удержания - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			Контрагент, не обязательно
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		НДФЛ - таблица значений с колонками
//			ФизическоеЛицо
//			СтатьяФинансирования
//			СтатьяРасходов
//			НачислениеУдержание
//			Сумма
//			ДокументОснование
//			РегистрацияВНалоговомОргане
//			Сотрудник, не обязательно
//			Подразделение, не обязательно.
//
//		СпособРасчетов - ПеречисленияСсылка.СпособыРасчетовСФизическимиЛицами, необязательный.
//
//		Допустимо присутствие других колонок в передаваемых таблицах значений.
//
Процедура ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, НДФЛ = Неопределено, СпособРасчетов = Неопределено) Экспорт
	
	
	ТаблицаНачислений = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраНакопления("НачисленияУдержанияПоКонтрагентамАкционерам");
	ТаблицаУдержаний  = ТаблицаНачислений.СкопироватьКолонки();
	РегистрироватьВзаиморасчеты = (СпособРасчетов <> Неопределено);
	
	Если Начисления <> Неопределено Тогда
		
		Для Каждого Строка Из Начисления Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.НачислениеУдержание	= Строка.Начисление;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ТерриторияВыполненияРаботВОрганизации) Тогда
				НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = НоваяСтрока.Подразделение;
			КонецЕсли;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаНачислений.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если Удержания <> Неопределено Тогда
		
		Для Каждого Строка Из Удержания Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
	
	Если НДФЛ <> Неопределено Тогда
		
		Для Каждого Строка Из НДФЛ Цикл
			
			НоваяСтрока = Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Период				= ПериодРегистрации;
			НоваяСтрока.Организация			= Организация;
			НоваяСтрока.ТерриторияВыполненияРаботВОрганизации 	= Строка.Подразделение;
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты 		= Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
			НоваяСтрока.НачислениеУдержание 					= Строка.ВидУдержания;
			
			Если РегистрироватьВзаиморасчеты Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаУдержаний.Добавить(), НоваяСтрока);	
			КонецЕсли;
			
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоКонтрагентамАкционерам.Записывать = Истина;
		
	КонецЕсли;
		
	Если РегистрироватьВзаиморасчеты Тогда
		ВзаиморасчетыПоПрочимДоходам.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(Движения, Отказ, Организация, ПериодРегистрации, СпособРасчетов, ТаблицаНачислений, ТаблицаУдержаний);
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистру ОтработанноеВремяПоСотрудникамКорректировка, 
// предназначенный для корректного учета отработанных дней при наличии более одного вида рабочего времени за день.
//
Процедура ЗарегистрироватьКорректировкиОтработанногоВремени(Движения, ЗаписыватьДвижения = Ложь) Экспорт
	
	// Если к этому моменту не была выполнена запись необходимых для чтения наборов записей, выполним ее.
	Если Движения.ОтработанноеВремяПоСотрудникам.Записывать Тогда
		Движения.ОтработанноеВремяПоСотрудникам.Записать();
		Движения.ОтработанноеВремяПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	Если Движения.Начисления.Записывать Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Движения.ОтработанноеВремяПоСотрудникам.Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("РабочееВремя", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыИспользованияРабочегоВремени.РабочееВремя"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Период КАК ПериодРегистрации,
		|	ОтработанноеВремяПоСотрудникам.ПериодДействия КАК ПериодДействия,
		|	ОтработанноеВремяПоСотрудникам.ДатаНачала КАК ДатаНачала,
		|	ОтработанноеВремяПоСотрудникам.Организация КАК Организация,
		|	ОтработанноеВремяПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтработанноеВремяПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ОтработанноеВремяПоСотрудникам.Подразделение КАК Подразделение,
		|	ОтработанноеВремяПоСотрудникам.Начисление КАК Начисление,
		|	ОтработанноеВремяПоСотрудникам.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
		|ПОМЕСТИТЬ ВТОтработанноеВремяПоДокументу
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.Регистратор = &Регистратор
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетНормыВремени = ИСТИНА
		|	И ОтработанноеВремяПоСотрудникам.Начисление.ЗачетОтработанногоВремени = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтработанноеВремяПоСотрудникам.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФПДНачислений.Регистратор КАК Регистратор,
		|	ФПДНачислений.НомерСтроки КАК НомерСтроки,
		|	ФПДНачислений.Сторно КАК Сторно,
		|	ФПДНачислений.Сотрудник КАК Сотрудник,
		|	ФПДНачислений.ВидРасчета КАК ВидРасчета,
		|	ФПДНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	ФПДНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	ФПДНачислений.ПериодДействия КАК ПериодДействия,
		|	ФПДНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ФПДНачислений.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТФПДНачислений
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			ВидРасчета.ЗачетОтработанногоВремени = ИСТИНА
		|				И ВидРасчета.ЗачетНормыВремени = ИСТИНА
		|				И (ПериодРегистрации, ПериодДействия, Сотрудник) В
		|					(ВЫБРАТЬ
		|						ВТОтработанноеВремяПоДокументу.ПериодРегистрации,
		|						ВТОтработанноеВремяПоДокументу.ПериодДействия,
		|						ВТОтработанноеВремяПоДокументу.Сотрудник
		|					ИЗ
		|						ВТОтработанноеВремяПоДокументу)) КАК ФПДНачислений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФПДНачислений.Сотрудник КАК Сотрудник,
		|	ФПДНачислений.ВидРасчета КАК Начисление,
		|	ФПДНачислений.Сторно КАК Сторно,
		|	ФПДНачислений.ПериодРегистрации КАК ПериодРегистрации,
		|	ФПДНачислений.ПериодДействия КАК ПериодДействия,
		|	ФПДНачислений.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидУчетаВремени,
		|	ФПДНачислений.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ФПДНачислений.ПериодДействияНачало КАК НачалоИнтервала,
		|	ФПДНачислений.ПериодДействияКонец КАК ОкончаниеИнтервала
		|ПОМЕСТИТЬ ВТПересекающиесяНачисления
		|ИЗ
		|	ВТФПДНачислений КАК ФПДНачислений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО ФПДНачислений.Регистратор = Начисления.Регистратор
		|			И ФПДНачислений.НомерСтроки = Начисления.НомерСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПДНачислений КАК ФПДПересечения
		|		ПО (ФПДПересечения.Сотрудник = ФПДНачислений.Сотрудник)
		|			И (ФПДПересечения.Сторно = ФПДНачислений.Сторно)
		|			И (ФПДПересечения.ПериодРегистрации = ФПДНачислений.ПериодРегистрации)
		|			И (ФПДПересечения.ВидРасчета <> ФПДНачислений.ВидРасчета)
		|			И (ФПДПересечения.Регистратор <> ФПДНачислений.Регистратор
		|				ИЛИ ФПДПересечения.НомерСтроки <> ФПДНачислений.НомерСтроки)
		|			И (ФПДПересечения.ПериодДействияНачало <= ФПДНачислений.ПериодДействияКонец)
		|			И (ФПДПересечения.ПериодДействияКонец >= ФПДНачислений.ПериодДействияНачало)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Пересечения.Сотрудник КАК Сотрудник,
		|	Пересечения.ПериодРегистрации КАК ДатаАктуальности,
		|	Пересечения.ПериодДействия КАК Месяц,
		|	НАЧАЛОПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Пересечения.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДляРасчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК Пересечения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСотрудникиДляРасчетаВремени КАК Сотрудники";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанныхОВремени = УчетРабочегоВремениРасширенный.ПараметрыДляСоздатьВТДанныеУчетаРабочегоВремениСотрудников();
	ПараметрыПолученияДанныхОВремени.ИмяВТСотрудники = "ВТСотрудникиДляРасчетаВремени";
	
	// Для полученных пересечений периодов, нужно определить фактическое рабочее время (количество дней).
	УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаРабочегоВремениСотрудников(МенеджерВременныхТаблиц, Ложь, ПараметрыПолученияДанныхОВремени);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.НачалоИнтервала КАК НачалоИнтервала,
		|	ПересекающиесяНачисления.ВидУчетаВремени КАК ВидУчетаВремени
		|ПОМЕСТИТЬ ВТНетДанныхПоВидуУчетаВремени
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|ГДЕ
		|	ФактическоеВремя.ВидУчетаВремени ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.Начисление КАК Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания КАК ИндексНачисления,
		|	ПересекающиесяНачисления.Сторно КАК Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|	ПересекающиесяНачисления.ПериодДействияНачало КАК НачалоИнтервала,
		|	ФактическоеВремя.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДанныеПоДням
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.Начисление,
		|	ПересекающиесяНачисления.Начисление.РеквизитДопУпорядочивания,
		|	ПересекающиесяНачисления.Сторно,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.ПериодДействияНачало,
		|	ФактическоеВремя.Дата
		|ИЗ
		|	ВТПересекающиесяНачисления КАК ПересекающиесяНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеУчетаРабочегоВремениСотрудников КАК ФактическоеВремя
		|		ПО (ФактическоеВремя.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (ФактическоеВремя.ДатаАктуальности = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (ФактическоеВремя.ВидУчетаВремени = &РабочееВремя)
		|			И (ФактическоеВремя.Дата МЕЖДУ ПересекающиесяНачисления.НачалоИнтервала И ПересекающиесяНачисления.ОкончаниеИнтервала)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНетДанныхПоВидуУчетаВремени КАК НетДанныхПоВидуУчетаВремени
		|		ПО (НетДанныхПоВидуУчетаВремени.Сотрудник = ПересекающиесяНачисления.Сотрудник)
		|			И (НетДанныхПоВидуУчетаВремени.ПериодРегистрации = ПересекающиесяНачисления.ПериодРегистрации)
		|			И (НетДанныхПоВидуУчетаВремени.ВидУчетаВремени = ПересекающиесяНачисления.ВидУчетаВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|	ПересекающиесяНачисления.Дата КАК Дата,
		|	ПересекающиесяНачисления.Сторно КАК Сторно,
		|	МИНИМУМ(ПересекающиесяНачисления.ИндексНачисления) КАК ИндексНачисления
		|ПОМЕСТИТЬ ВТПриоритетыНачислений
		|ИЗ
		|	ВТДанныеПоДням КАК ПересекающиесяНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ПересекающиесяНачисления.Сотрудник,
		|	ПересекающиесяНачисления.ПериодРегистрации,
		|	ПересекающиесяНачисления.ПериодДействия,
		|	ПересекающиесяНачисления.Дата,
		|	ПересекающиесяНачисления.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	ВЫБОР
		|		КОГДА НеобходимыеКорректировки.Сторно
		|			ТОГДА -НеобходимыеКорректировки.КорректировкаДней
		|		ИНАЧЕ НеобходимыеКорректировки.КорректировкаДней
		|	КОНЕЦ КАК КорректировкаДней
		|ПОМЕСТИТЬ ВТНеобходимыеКорректировки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПересекающиесяНачисления.Сотрудник КАК Сотрудник,
		|		ПересекающиесяНачисления.Начисление КАК Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|		ПересекающиесяНачисления.ПериодДействия КАК ПериодДействия,
		|		ПересекающиесяНачисления.НачалоИнтервала КАК ДатаНачала,
		|		ПересекающиесяНачисления.Сторно КАК Сторно,
		|		КОЛИЧЕСТВО(ПересекающиесяНачисления.Дата) КАК КорректировкаДней
		|	ИЗ
		|		ВТДанныеПоДням КАК ПересекающиесяНачисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыНачислений КАК ПриоритетыНачислений
		|			ПО ПересекающиесяНачисления.Сотрудник = ПриоритетыНачислений.Сотрудник
		|				И ПересекающиесяНачисления.Сторно = ПриоритетыНачислений.Сторно
		|				И ПересекающиесяНачисления.ПериодРегистрации = ПриоритетыНачислений.ПериодРегистрации
		|				И ПересекающиесяНачисления.ПериодДействия = ПриоритетыНачислений.ПериодДействия
		|				И ПересекающиесяНачисления.Дата = ПриоритетыНачислений.Дата
		|				И ПересекающиесяНачисления.ИндексНачисления <> ПриоритетыНачислений.ИндексНачисления
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПересекающиесяНачисления.Сотрудник,
		|		ПересекающиесяНачисления.Начисление,
		|		ПересекающиесяНачисления.ПериодРегистрации,
		|		ПересекающиесяНачисления.НачалоИнтервала,
		|		ПересекающиесяНачисления.ПериодДействия,
		|		ПересекающиесяНачисления.Сторно) КАК НеобходимыеКорректировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыполненныеКорректировки.Период КАК ПериодРегистрации,
		|	ВыполненныеКорректировки.ПериодДействия КАК ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала КАК ДатаНачала,
		|	ВыполненныеКорректировки.Организация КАК Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник КАК Сотрудник,
		|	ВыполненныеКорректировки.Подразделение КАК Подразделение,
		|	ВыполненныеКорректировки.Начисление КАК Начисление,
		|	СУММА(ВыполненныеКорректировки.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(ВыполненныеКорректировки.ОплаченоДней) КАК ОплаченоДней
		|ПОМЕСТИТЬ ВТВыполненныеКорректировки
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ВыполненныеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтработанноеВремяПоДокументу КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = ВыполненныеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.ПериодРегистрации = ВыполненныеКорректировки.Период)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = ВыполненныеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = ВыполненныеКорректировки.ДатаНачала)
		|			И (ОтработанноеВремяПоДокументу.Начисление = ВыполненныеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыполненныеКорректировки.Период,
		|	ВыполненныеКорректировки.ПериодДействия,
		|	ВыполненныеКорректировки.ДатаНачала,
		|	ВыполненныеКорректировки.Организация,
		|	ВыполненныеКорректировки.ФизическоеЛицо,
		|	ВыполненныеКорректировки.Сотрудник,
		|	ВыполненныеКорректировки.Подразделение,
		|	ВыполненныеКорректировки.Начисление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней КАК КорректировкаДней
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НеобходимыеКорректировки.Сотрудник КАК Сотрудник,
		|	НеобходимыеКорректировки.Начисление КАК Начисление,
		|	НеобходимыеКорректировки.Сторно КАК Сторно,
		|	НеобходимыеКорректировки.ПериодРегистрации КАК ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия КАК ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала КАК ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней КАК КорректировкаДней,
		|	ОтработанноеВремяПоДокументу.Подразделение КАК Подразделение,
		|	ОтработанноеВремяПоДокументу.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтработанноеВремяПоДокументу.Организация КАК Организация,
		|	ОтработанноеВремяПоДокументу.ВремяВЧасах КАК ВремяВЧасах,
		|	ОтработанноеВремяПоДокументу.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ОтработанноеВремяПоДокументу.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
		|	ОтработанноеВремяПоДокументу.ОтработаноДней КАК ОтработаноДнейЗарегистрировано,
		|	ОтработанноеВремяПоДокументу.ОплаченоДней КАК ОплаченоДнейЗарегистрировано,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОтработаноДней, 0) КАК ОтработаноДнейКорректировка,
		|	ЕСТЬNULL(ВыполненныеКорректировки.ОплаченоДней, 0) КАК ОплаченоДнейКорректировка
		|ИЗ
		|	ВТНеобходимыеКорректировки КАК НеобходимыеКорректировки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоДокументу
		|		ПО (ОтработанноеВремяПоДокументу.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ОтработанноеВремяПоДокументу.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ОтработанноеВремяПоДокументу.Период = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ОтработанноеВремяПоДокументу.ПериодДействия = НеобходимыеКорректировки.ПериодДействия)
		|			И (ОтработанноеВремяПоДокументу.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыполненныеКорректировки КАК ВыполненныеКорректировки
		|		ПО (ВыполненныеКорректировки.Сотрудник = НеобходимыеКорректировки.Сотрудник)
		|			И (ВыполненныеКорректировки.Начисление = НеобходимыеКорректировки.Начисление)
		|			И (ВыполненныеКорректировки.Подразделение = ОтработанноеВремяПоДокументу.Подразделение)
		|			И (ВыполненныеКорректировки.ПериодРегистрации = НеобходимыеКорректировки.ПериодРегистрации)
		|			И (ВыполненныеКорректировки.ДатаНачала = НеобходимыеКорректировки.ДатаНачала)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НеобходимыеКорректировки.Сотрудник,
		|	НеобходимыеКорректировки.Начисление,
		|	НеобходимыеКорректировки.ПериодРегистрации,
		|	НеобходимыеКорректировки.ПериодДействия,
		|	НеобходимыеКорректировки.ДатаНачала,
		|	НеобходимыеКорректировки.КорректировкаДней";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Для обхода используем две выборки: 
	// - первая - это необходимые корректировки
	// - вторая - развернутые по подразделениям значения зарегистрированного времени и уже выполненные корректировки
	// нужна для уточненного заполнения подразделений, сведения о которых теряются в регистре расчета.
	
	ВыборкаКорректировок = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	Выборка = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	СтруктураПоиска = Новый Структура("Сотрудник, Начисление, ПериодРегистрации, ПериодДействия, ДатаНачала, Сторно");
	Пока ВыборкаКорректировок.Следующий() Цикл
		// Количество дней, которые нужно в целом по этому виду расчета скорректировать.
		КорректировкаПоНачислению = ВыборкаКорректировок.КорректировкаДней;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаКорректировок);
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			// Если строка с признаком сторно применяем обратные правила арифметики.
			// НеобходимаяКорректировка - значение, которое всего по этой строке предполагалось записать без учета уже ранее
			//                            выполненных корректировок.
			// КорректировкаПоСтроке - значение по этой строке с учетом ранее выполненных корректировок.
			Если ВыборкаКорректировок.Сторно Тогда
				НеобходимаяКорректировка = Макс(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Мин(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			Иначе
				НеобходимаяКорректировка = Мин(КорректировкаПоНачислению, Выборка.ОтработаноДнейЗарегистрировано);
				КорректировкаПоСтроке = Макс(НеобходимаяКорректировка - Выборка.ОтработаноДнейКорректировка, 0);
			КонецЕсли;
			
			// Уменьшаем остаток корректируемых дней.
			КорректировкаПоНачислению = КорректировкаПоНачислению - НеобходимаяКорректировка;
			
			Если КорректировкаПоСтроке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Движения.ОтработанноеВремяПоСотрудникамКорректировка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Период = Выборка.ПериодРегистрации;
			НоваяСтрока.ОтработаноДней = - КорректировкаПоСтроке;
			НоваяСтрока.ОплаченоДней = - КорректировкаПоСтроке;
			
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗаписыватьДвижения Тогда
		Если Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать Тогда
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записать();
			Движения.ОтработанноеВремяПоСотрудникамКорректировка.Записывать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует сторно записи отменяющие движения исправляемого документа по регистрам подсистемы.
//
// Параметры:
//  Движения                - КоллекцияДвижений, Структура - Коллекция движений в которую будут добавлены сторно записи.
//  ИсправленныйДокумент    - ДокументСсылка               - Документ, записи которого необходимо сторнировать.
//  ДополнительныеПараметры - Структура                    - Например период, которым будут зарегистрированы сторно-записи
//                                                           (первое число месяца периода регистрации). Если не указан,
//                                                           будут сохранены периоды регистрации сторнируемых движений.
//  Записывать              - Булево                       - Если Истина, то наборы будут записаны сразу, если Ложь, то
//                                                           наборам будет установлен признак Записывать = Истина.
//
Процедура СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ДополнительныеПараметры = Неопределено, Записывать = Ложь) Экспорт
	
	ИмяУчета = "УчетНачисленнойЗарплатыРасширенный";
	НаборыЗаписей = ОбщегоНазначенияБЗК.ДвиженияВСтруктуру(Движения);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПериодРегистрации = ДополнительныеПараметры.ПериодРегистрации;
	Иначе
		ПериодРегистрации = Неопределено;
	КонецЕсли;
	
	МетаданныеРегистров = МетаданныеРегистровПодсистемы();
	
	НаборЗаписей = Неопределено;
	
	Для Каждого МетаданныеРегистра Из МетаданныеРегистров Цикл
		
		Если Не(НаборыЗаписей.Свойство(МетаданныеРегистра.Имя, НаборЗаписей)
			И ИсправлениеДокументовЗарплатаКадры.ИзолироватьУчетом(НаборЗаписей, ИмяУчета)) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсправлениеДокументовЗарплатаКадры.СторнироватьДвиженияВРегистреНакопления(
			НаборЗаписей, ИсправленныйДокумент, МетаданныеРегистра, Записывать);
		
		ИсправлениеДокументовЗарплатаКадры.СкопироватьСторноДругогоНабора(НаборЗаписей, НаборыЗаписей, Записывать);
		
	КонецЦикла;
	
	ВзаиморасчетыССотрудникамиРасширенный.СторнироватьНачисленнуюЗарплату(
		Движения, ИсправленныйДокумент, ПериодРегистрации, Записывать);
	
КонецПроцедуры

Процедура ЗапланироватьКопированиеСторноВАванс(Движения) Экспорт
	
	ИмяНабора = "НачисленияУдержанияПоСотрудникам";
	ИсправлениеДокументовЗарплатаКадры.ЗапланироватьКопированиеСторноДругогоНабора(Движения, ИмяНабора + "Авансом", ИмяНабора);
	
	ВзаиморасчетыССотрудникамиРасширенный.ЗапланироватьКопированиеСторноВАванс(Движения);
	
КонецПроцедуры

Функция МетаданныеРегистровПодсистемы() Экспорт
	
	Регистры = Новый Массив;
	Регистры.Добавить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам);
	Регистры.Добавить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникамАвансом);
	
	Возврат Регистры;
	
КонецФункции

// Возвращает значение по умолчанию порядка учета договоров ГПХ, заданное в настройках.
//
//	Возвращаемое значение - тип ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами
//
Функция ПорядокУчетаДоговоровГПХ() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка();
	КонецЕсли;
	
	НастройкиРасчетаЗарплаты = РасчетЗарплатыРасширенный.НастройкиРасчетаЗарплаты();
	Если НастройкиРасчетаЗарплаты.ПорядокУчетаДоговоровГПХ = 1 Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами;
	ИначеЕсли НастройкиРасчетаЗарплаты.ПорядокУчетаДоговоровГПХ = 2 Тогда
		Возврат Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда;
	КонецЕсли;
	
КонецФункции

Функция НачисленныеОтпускаПоПериодамИВидам(Сотрудник, ВидыОтпусков, ИсключаемыеРегистраторы = Неопределено, РасчетДенежногоСодержания = Ложь) Экспорт
	
	Если ИсключаемыеРегистраторы = Неопределено Тогда
		ИсключаемыеРегистраторы = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КатегорииКомпенсаций = Новый Массив;
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеКомпенсацияОтпуска);
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеДовольствиеКомпенсацияОтпуска);
	
	ПриоритетныеКатегории = Новый Массив;
	Если РасчетДенежногоСодержания Тогда 
		ПриоритетныеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеНаПериодОтпуска);
	Иначе
		ПриоритетныеКатегории.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	КонецЕсли;	
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Сотрудник", "=" , Сотрудник);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "Регистратор", "НЕ В" , ИсключаемыеРегистраторы);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидРасчета.ВидОтпуска", "В", ВидыОтпусков);
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отборы, "ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени", 
		"НЕ В", КатегорииКомпенсаций);
	
	РегистрыРасчета.Начисления.СоздатьВТРезультирующийПериодДействия(Запрос.МенеджерВременныхТаблиц, Отборы, "*");
		
	Запрос.УстановитьПараметр("ПриоритетныеКатегории", ПриоритетныеКатегории);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	Начисления.Регистратор КАК СторнируемыйДокумент,
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА СвойстваНачисления.КатегорияНачисленияИлиНеоплаченногоВремени В (&ПриоритетныеКатегории)
	|	    	ТОГДА 1	
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|	Начисления.Активность КАК Активность,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
	|	Начисления.ГрафикРаботы КАК ГрафикРаботы,
	|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
	|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериод,
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФиксСтрока КАК ФиксСтрока,
	|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
	|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
	|	Начисления.ФиксРасчет КАК ФиксРасчет,
	|	Начисления.ФиксСторно КАК ФиксСторно,
	|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремени,
	|	Начисления.ДоляРезультата КАК ДоляРезультата,
	|	Начисления.Месяц КАК Месяц,
	|	Начисления.ДокументОснование КАК ДокументОснование,
	|	Начисления.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	ПоказателиНачислений.Показатель КАК Показатель,
	|	ВЫБОР
	|		КОГДА Начисления.ЭтоЧастьРПД
	|				И ПоказателиНачислений.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.КоличествоДнейОтпуска)
	|			ТОГДА Начисления.КоличествоДнейРПД
	|		ИНАЧЕ ЕСТЬNULL(ЗначенияПоказателейНачислений.Значение, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	ВТРезультирующийПериодДействия КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК СвойстваНачисления
	|		ПО Начисления.ВидРасчета = СвойстваНачисления.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК ПоказателиНачислений
	|		ПО Начисления.ВидРасчета = ПоказателиНачислений.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО Начисления.Регистратор = ЗначенияПоказателейНачислений.Регистратор
	|			И (ПоказателиНачислений.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтроки)
	|ГДЕ
	|	НЕ Начисления.Сторно
	|	И НЕ Начисления.Регистратор В (&ИсключаемыеРегистраторы)
	|	И НЕ Начисления.ФиксСторно
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.Регистратор,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействия УБЫВ,
	|	Начисления.ИдентификаторСтроки";
	
	РезультатыПоказателей = Запрос.Выполнить();
	
	ДанныеНачисленныхОтпусков = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаНачалаОтпуска", Новый ОписаниеТипов("Дата"));
	ДанныеНачисленныхОтпусков.Колонки.Добавить("ДатаОкончанияОтпуска", Новый ОписаниеТипов("Дата"));
	ДанныеНачисленныхОтпусков.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	НомерПоказателя = 0;
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	ТекущийПериодДействияНачало = Неопределено;
	
	Выборка = РезультатыПоказателей.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("СторнируемыйДокумент") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ВидРасчета") Цикл
			Пока Выборка.Следующий() Цикл
				Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтроки 
					Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент 
					Или ТекущийПериодДействияНачало <> Выборка.ПериодДействияНачало Тогда
					
					НомерПоказателя = 1;
					НоваяСтрокаОтпуска = ДанныеНачисленныхОтпусков.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОтпуска, Выборка);
					НоваяСтрокаОтпуска.ДатаНачала = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончания = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.ДатаНачалаОтпуска = Выборка.ПериодДействияНачало;
					НоваяСтрокаОтпуска.ДатаОкончанияОтпуска = Выборка.ПериодДействияКонец;
					НоваяСтрокаОтпуска.Начисление = Выборка.ВидРасчета;
					
				КонецЕсли;
				Если Выборка.Значение <> Неопределено Тогда
					НоваяСтрокаОтпуска["Показатель" + НомерПоказателя] = Выборка.Показатель;
					НоваяСтрокаОтпуска["Значение" + НомерПоказателя] = Выборка.Значение;
					НомерПоказателя = НомерПоказателя + 1;
				КонецЕсли;
				ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтроки;
				ТекущийРегистратор = Выборка.СторнируемыйДокумент;
				ТекущийПериодДействияНачало = Выборка.ПериодДействияНачало;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДанныеНачисленныхОтпусков.Сортировать("Приоритет, Начисление, ПериодДействия Убыв, ДатаНачалаОтпуска Убыв");
	Возврат ДанныеНачисленныхОтпусков;
	
КонецФункции

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоходВНатуральнойФорме)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Льгота)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Льготы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияМоральногоВреда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя))
	|			ТОГДА ИСТИНА
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее))
	|				И Начисления.СпособВыполненияНачисления = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноИзменениеСпособаРасчетов
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		ПравилаУчетаНачисления.Вставить("ДоступноИзменениеСпособаРасчетов", Выборка.ДоступноИзменениеСпособаРасчетов);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции

Функция ВидыДоходовИсполнительногоПроизводстваНачислений(Период) Экспорт
	
	ВидыДоходовНачислений = УчетНачисленнойЗарплатыБазовый.ВидыДоходовИсполнительногоПроизводстваНачислений(Период);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ВидыДоходовНачислений,
		Справочники.ВидыВыплатБывшимСотрудникам.ВидыДоходовИсполнительногоПроизводства(Период),
		Истина);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		ВидыДоходовНачислений,
		Справочники.ВидыПрочихДоходовФизическихЛиц.ВидыДоходовИсполнительногоПроизводства(Период),
		Истина);
		
	Возврат ВидыДоходовНачислений
	
КонецФункции

// Формирует временную таблицу ВТСтатьиРасходовНачисленийПоСпособамРасчетов с полями: 
// * Ссылка         - ПланВидовРасчетаСсылка.Начисления
// * СтатьяРасходов - тип СправочникСсылка.СтатьиРасходовЗарплата
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//
Процедура СоздатьВТСтатьиРасходовНачисленийПоСпособамРасчетов(МенеджерВременныхТаблиц) Экспорт

	Если ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТСтатьиРасходовНачисленийПоСпособамРасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ОписаниеСтатейРасходов = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
	Запрос.УстановитьПараметр("ОплатаТруда", ОписаниеСтатейРасходов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда]);
	
	СтатьиСпособыТаблица = Новый ТаблицаЗначений;
	СтатьиСпособыТаблица.Колонки.Добавить("СпособРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетовСФизическимиЛицами"));
	СтатьиСпособыТаблица.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Для каждого ЭлементКоллекции Из ОписаниеСтатейРасходов Цикл
		НоваяСтрока = СтатьиСпособыТаблица.Добавить();
		НоваяСтрока.СпособРасчетов = ЭлементКоллекции.Ключ;
		НоваяСтрока.СтатьяРасходов = ЭлементКоллекции.Значение;
	КонецЦикла;
	Запрос.УстановитьПараметр("СтатьиСпособыТаблица", СтатьиСпособыТаблица);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиСпособыТаблица.СпособРасчетов КАК СпособРасчетов,
	|	СтатьиСпособыТаблица.СтатьяРасходов КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиСпособыТаблица
	|ИЗ
	|	&СтатьиСпособыТаблица КАК СтатьиСпособыТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты)
	|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь)
	|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияМоральногоВреда)
	|				ИЛИ Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее))
	|				И Начисления.СпособРасчетовСФизическимиЛицами <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетовСФизическимиЛицами.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СтатьиСпособыТаблица.СтатьяРасходов, &ОплатаТруда)
	|		ИНАЧЕ &ОплатаТруда
	|	КОНЕЦ КАК СтатьяРасходов
	|ПОМЕСТИТЬ ВТСтатьиРасходовНачисленийПоСпособамРасчетов
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатьиСпособыТаблица КАК СтатьиСпособыТаблица
	|		ПО Начисления.СпособРасчетовСФизическимиЛицами = СтатьиСпособыТаблица.СпособРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтатьиСпособыТаблица";
	
	Запрос.Выполнить();

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.128";
	Обработчик.Процедура = "РегистрыНакопления.НачисленияУдержанияПоСотрудникамАвансом.ОчиститьВидыДоходовИсполнительногоПроизводства";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("092435b0-5cef-4445-8233-d11cd7f70abd"); 
	Обработчик.Комментарий = НСтр("ru = 'Очистка видов дохода исполнительного производства старых движений начислений и удержаний по сотрудникам авансом.';
									|en = 'Clearing of enforcement proceedings income kinds of the old records in employee accruals and deductions as advance.'");
	
КонецПроцедуры


Функция ДанныеДляРегистрацииНДФЛ(РезультатРасчетаНДФЛ) Экспорт

	НоваяКоллекцияРезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ.СкопироватьКолонки();
	НоваяКоллекцияРезультатРасчетаНДФЛ.Колонки.Добавить("ВидУдержания", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	ВидыУдержанийПоКолонкамДанных = Перечисления.ВидыОсобыхНачисленийИУдержаний.СоответствиеКолонкамДанных();
	Для каждого СтрокаТЗ Из РезультатРасчетаНДФЛ Цикл
		Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
			Если СтрокаТЗ[ИмяРесурса] <> 0 Тогда
				НоваяСтрока = НоваяКоллекцияРезультатРасчетаНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ВидУдержания = ВидыУдержанийПоКолонкамДанных[ИмяРесурса];
				НоваяСтрока.Сумма = СтрокаТЗ[ИмяРесурса];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат НоваяКоллекцияРезультатРасчетаНДФЛ;

КонецФункции


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Обслуживание обработки ПлатежиПоРезультатамРасчетаЗарплаты.

// Возвращает удержанные в заданном месяце добровольные взносы на накопительную часть пенсии.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по получаются данные.
//		МесяцНачисления - дата, месяц в котором выполнено удержание.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация 			- СправочникСсылка.Организации)
//			* ВидОперации 			- ПеречислениеСсылка.ВидыОперацийПоЗарплате, значение - ДСВ
//			* СтатьяФинансирования 	- СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов 		- СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма - Число.
//
Функция ДобровольныеСтраховыеВзносыДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДСВ) КАК ВидОперации,
	|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоСотрудникам.Организация В(&Организации)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Удержания)
	|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидОперацииПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ДСВ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает суммы расходов по страхованию в заданном месяце.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по получаются данные.
//		МесяцНачисления - дата, месяц в котором выполнена регистрация расходов.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация (СправочникСсылка.Организации)
//			* ВидОперации (ПеречислениеСсылка.ВидыОперацийПоЗарплате)
//			* СтатьяФинансирования (СправочникСсылка.СтатьиФинансированияЗарплата)
//			* СтатьяРасходов (СправочникСсылка.СтатьиРасходовЗарплата)
//			* Сумма.
//
Функция РасходыПоСтрахованиюДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления) Экспорт

	Пособия = Новый Массив;
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка);
	Пособия.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Пособия", Пособия);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидОперацииПоЗарплате
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (&Пособия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)
	|	КОНЕЦ КАК ВидОперации,
	|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоСотрудникам.Организация В(&Организации)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И (ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
	|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидОперацииПоЗарплате В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФССНС), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюБюджет))
	|			ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (&Пособия))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
	|			ТОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.ВидОперацииПоЗарплате
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (&Пособия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПустаяСсылка)
	|	КОНЕЦ,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоЗарплате.ПособиеНаПогребение),
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Организация,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.СтатьяФинансирования,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.СтатьяРасходов,
	|	СУММА(НачисленияУдержанияПоКонтрагентамАкционерам.Сумма)
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержанияПоКонтрагентамАкционерам
	|ГДЕ
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоКонтрагентамАкционерам.Организация В(&Организации)
	|	И НачисленияУдержанияПоКонтрагентамАкционерам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	И НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоКонтрагентамАкционерам.СтатьяФинансирования,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.СтатьяРасходов,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Организация";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает суммы удержаний в пользу третьих лиц из зарплаты в заданном месяце.
//
// Параметры:
//		Организации - Массив - содержит ссылки на организации(СправочникСсылка.Организации),
//								по получаются данные.
//		МесяцНачисления - дата, месяц в котором выполнено удержание.
//
// Возвращаемое значение:
//		ТаблицаЗначений:
//			* Организация (СправочникСсылка.Организации)
//			* Контрагент (СправочникСсылка.Контрагенты)
//			* СтатьяФинансирования (СправочникСсылка.СтатьиФинансированияЗарплата)
//			* СтатьяРасходов (СправочникСсылка.СтатьиРасходовЗарплата)
//			* Сумма.
//
Функция УдержанияВПользуТретьихЛицДляПлатежейПоРезультатамРасчета(Организации, МесяцНачисления) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержанияПоСотрудникам.Организация КАК Организация,
	|	ПолучателиУдержаний.Контрагент КАК Контрагент,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиУдержаний КАК ПолучателиУдержаний
	|		ПО НачисленияУдержанияПоСотрудникам.ДокументОснование = ПолучателиУдержаний.ДокументОснование
	|			И НачисленияУдержанияПоСотрудникам.Организация = ПолучателиУдержаний.Организация
	|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПолучателиУдержаний.ФизическоеЛицо
	|ГДЕ
	|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
	|	И НачисленияУдержанияПоСотрудникам.Организация В(&Организации)
	|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И ТИПЗНАЧЕНИЯ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание) = ТИП(ПланВидовРасчета.Удержания)
	|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияУдержания В (ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрофсоюзныеВзносы), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ВзносыНаДолгосрочныеСбережения), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПенсионныеВзносыВНПФ), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДобровольныеВзносыВНПФ), ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолучателиУдержаний.Контрагент,
	|	НачисленияУдержанияПоСотрудникам.Организация,
	|	НачисленияУдержанияПоСотрудникам.СтатьяФинансирования,
	|	НачисленияУдержанияПоСотрудникам.СтатьяРасходов";
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции


// Выполняет распределение прочих сумм удержаний с физических лиц (НДФЛ и прочие)
// по рабочим местам, т.е. по сотрудникам и подразделениям.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//  	Должна содержать колонки
//			- Сумма
//			- Подразделение
//		Может содержать для уточнения алгоритма распределения удержаний (не обязательно)
//			- КоэффициентУдержания
//			- ВычетПрименяемыйПриУдержании.
//
//	ПериодРегистрации
//	Организация
//	БазаРаспределения - таблица значений с колонками
//		- ФизическоеЛицо
//		- Подразделение
//		- Сотрудник
//		- Сумма.
//
//	УжеУдержано - таблица значений с уже удержанными суммами
//		Должна содержать колонки
//			- Сумма
//			- Подразделение
//  ВидУдержания
//  ТочностьРаспределения - по умолчанию - 2. Например, для НДФЛ следует использовать 0
//	Авансом - булево значение. Если истина, то распределение проводится при расчете первой половины месяца.
// 	УчитыватьПодразделение - булево значение. Позволяет учитывать при распределении колонку Подразделение 
//  						таблицы Удержания. Используется при распределении НДФЛ (других 
//							удержаний, "привязанных" к подразделениям нет)
// Возвращаемое значение:
//	Таблица значений с колонками, соответствующими регистру начислений и удержаний.
//    
//
Функция РаспределениеПрочихУдержанийПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = Неопределено, УжеУдержано = Неопределено, ВидУдержания = Неопределено, ТочностьРаспределения = 2, Авансом = Ложь, УчитыватьПодразделение = Ложь) Экспорт
	
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам(Авансом);
	
	// Если база не определена, получаем базу распределения по умолчанию.
	ИспользуетсяРаспределениеПоУмолчанию = Ложь;
	Если БазаРаспределения = Неопределено Тогда
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
		БазаРаспределения = РасчетЗарплаты.БазаУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ИспользуетсяРаспределениеПоУмолчанию = Истина;
	КонецЕсли;
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	Для Каждого СтрокаРаспределения Из БазаРаспределения Цикл
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаРаспределения.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазыПоФизическомуЛицу = Новый Массив;
		КонецЕсли;
		СтрокиБазыПоФизическомуЛицу.Добавить(СтрокаРаспределения);
		СтрокиБазыПоФизическимЛицам.Вставить(СтрокаРаспределения.ФизическоеЛицо, СтрокиБазыПоФизическомуЛицу);
	КонецЦикла;
	// Раскладываем строки выполненных удержаний по физическим лицам.
	СтрокиУжеУдержаноПоФизическимЛицам = Новый Соответствие;
	Если УжеУдержано <> НеОпределено Тогда
		Для Каждого Строка Из УжеУдержано Цикл
			СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиУжеУдержаноПоФизическомуЛицу = Неопределено Тогда
				СтрокиУжеУдержаноПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиУжеУдержаноПоФизическомуЛицу.Добавить(Строка);
			СтрокиУжеУдержаноПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиУжеУдержаноПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	КоэффициентУдержанияЗадан = Ложь;
	ВычетПрименяемыйПриУдержанииЗадан = Ложь;
	Если Удержания.Колонки.Найти("КоэффициентУдержания") <> НеОпределено Тогда
		КоэффициентУдержанияЗадан = Истина;
	КонецЕсли;
	Если Удержания.Колонки.Найти("ВычетПрименяемыйПриУдержании") <> НеОпределено Тогда
		ВычетПрименяемыйПриУдержанииЗадан = Истина;
	КонецЕсли;
	
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		// Находим строки распределения.
		СтрокиБазыПоФизическомуЛицу = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиБазыПоФизическомуЛицу = Неопределено Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		СтрокиРаспределения = Новый Массив;
		Если УчитыватьПодразделение Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				Если СтрокаБазыПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Тогда
					СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокиРаспределения.Количество() = 0 Тогда
			Для Каждого СтрокаБазыПоФизическомуЛицу Из СтрокиБазыПоФизическомуЛицу Цикл
				СтрокиРаспределения.Добавить(СтрокаБазыПоФизическомуЛицу);
			КонецЦикла;
		КонецЕсли;
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
			Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 						И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
						И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение Или Не ЗначениеЗаполнено(СтрокаУдержаний.Подразделение)) Тогда
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		КоэффициентУдержания = 1;
		ВычетПрименяемыйПриУдержании = 0;
		Если КоэффициентУдержанияЗадан И СтрокаУдержаний.КоэффициентУдержания <> 0 Тогда
			КоэффициентУдержания = СтрокаУдержаний.КоэффициентУдержания;
		КонецЕсли;
		Если ВычетПрименяемыйПриУдержанииЗадан Тогда
			ВычетПрименяемыйПриУдержании = СтрокаУдержаний.ВычетПрименяемыйПриУдержании;
		КонецЕсли;
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты, ТочностьРаспределения, КоэффициентУдержания, ВычетПрименяемыйПриУдержании);
		Если РаспределенныеСуммы <> НеОпределено Тогда
			// минусуем уже удержанные суммы
			Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
				Для Каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
					Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
 							И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование 
							И (СтрокаУжеУдержаноПоФизическомуЛицу.Подразделение = СтрокаУдержаний.Подразделение Или Не УчитыватьПодразделение Или Не ЗначениеЗаполнено(СтрокаУдержаний.Подразделение)) Тогда
						НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
						НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
						Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
							НоваяСтрока.ПериодДействия = ПериодРегистрации;
						КонецЕсли;
						НоваяСтрока.Период = ПериодРегистрации;
						НоваяСтрока.Сумма  = - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
				НоваяСтрока.Сумма 			= РаспределенныеСуммы[Индекс];
				Если ВидУдержания <> НеОпределено Тогда
					НоваяСтрока.НачислениеУдержание = ВидУдержания;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
			Если ВидУдержания <> НеОпределено Тогда
				НоваяСтрока.НачислениеУдержание = ВидУдержания;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Колонки = "";
	Для Каждого Колонка Из УдержанияПоРабочимМестам.Колонки Цикл
		Если Колонка.Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	УдержанияПоРабочимМестам.Свернуть(Колонки, "Сумма");
	
	Если СтрокиБазаНеопределена.Количество() > 0 И Не ИспользуетсяРаспределениеПоУмолчанию Тогда
		// Распределяем этим же методом по базе распределения "по умолчанию".
		УдержанияПоРабочимМестамПоУмолчанию = РаспределениеПрочихУдержанийПоРабочимМестам(
			Удержания.Скопировать(СтрокиБазаНеопределена), ПериодРегистрации, Организация, Неопределено, Неопределено, ВидУдержания, ТочностьРаспределения, Авансом, УчитыватьПодразделение);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестамПоУмолчанию, УдержанияПоРабочимМестам);
	КонецЕсли;
	
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

Процедура ЗаполнитьЗачетАвансаНДФЛВНаборахЗаписей(Движения, ПериодРегистрации) Экспорт

	Если ПериодРегистрации < УчетНДФЛ.ДатаЗакона263ФЗ() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНДФЛ = УчетНДФЛ.НДФЛЗарегистрированоПриНачисленииАванса(Движения);
	Если Не ЗначениеЗаполнено(ТаблицаНДФЛ) Тогда
		Возврат;
	КонецЕсли;
	
	НДФЛЗачетАванса = ТаблицаНДФЛ.СкопироватьКолонки();
	НДФЛЗачетАванса.Колонки.Добавить("НачислениеУдержание", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	ИменаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаВМассиве();
	СтрокаРесурсовНалога = УчетНДФЛ.РесурсыИсчисленногоНалогаСтрокой();
	ВидыУдержанийПоКолонкамДанных = Перечисления.ВидыОсобыхНачисленийИУдержаний.СоответствиеКолонкамДанных();
	Для каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		Для каждого ИмяРесурса Из ИменаРесурсовНалога Цикл
			Если СтрокаТЗ[ИмяРесурса] < 0 Тогда
				НоваяСтрока = НДФЛЗачетАванса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ,,СтрокаРесурсовНалога);
				НоваяСтрока.Сумма = СтрокаТЗ[ИмяРесурса]*-1;
				НоваяСтрока.НачислениеУдержание = ВидыУдержанийПоКолонкамДанных[ИмяРесурса];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НДФЛЗачетАванса.Колонки.МесяцНалоговогоПериода.Имя = "ДатаПолученияДохода";
	НДФЛЗачетАванса.Колонки.Подразделение.Имя = "ТерриторияВыполненияРаботВОрганизации";
	
	ПоляПоиска = "ФизическоеЛицо,ДатаПолученияДохода,КатегорияДохода,РегистрацияВНалоговомОргане,ТерриторияВыполненияРаботВОрганизации,НачислениеУдержание";
	
	Если ПроведениеСервер.ЕстьДвижения(Движения, "НачисленияУдержанияПоСотрудникам") Тогда
		НДФЛПоСотрудникам = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить();
		УчетНачисленнойЗарплаты.ОтметитьСтрокиНДФЛКакЗачетАванса(НДФЛЗачетАванса, НДФЛПоСотрудникам, ПоляПоиска);
		Движения.НачисленияУдержанияПоСотрудникам.Загрузить(НДФЛПоСотрудникам);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный")
		 И ПроведениеСервер.ЕстьДвижения(Движения, "БухучетНачисленияУдержанияПоСотрудникам") Тогда
		НДФЛПоСотрудникам = Движения.БухучетНачисленияУдержанияПоСотрудникам.Выгрузить();
		УчетНачисленнойЗарплаты.ОтметитьСтрокиНДФЛКакЗачетАванса(НДФЛЗачетАванса, НДФЛПоСотрудникам, ПоляПоиска);
		Движения.БухучетНачисленияУдержанияПоСотрудникам.Загрузить(НДФЛПоСотрудникам);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииРаботыСОтчетами

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНачисленнойЗарплатыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс)
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		УчетНачисленнойЗарплатыБазовый.ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс);
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования отчетов анализа начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтчетыПечатныеФормыБюджетныхУчреждений");
		Модуль.ПриКомпоновкеОтчетаУнифицированнаяФормаТ13(Объект, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, КлючВарианта, НастройкиОтчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременно';
								|en = 'Periodically'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НачисленоСдельно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоСдельно";
	НоваяСтрока.Заголовок = НСтр("ru = 'Сдельно';
								|en = 'By piece'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ЕСТЬNULL(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени, ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ЕСТЬNULL(ВидРасчета.СпособВыполненияНачисления, ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ " + НоваяСтрока.ПользовательскоеУсловие + ")";
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// ДругиеДоходы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощь);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДругиеДоходы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Другие доходы в виде различных социальных и материальных благ';
								|en = 'Other income as different social and material benefits'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 11;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	// АПК:1036-выкл часть регламентированной формы        
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспо- собности';
								|en = 'Temporary incapacity allowances'"); 
	// АПК:1036-вкл
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 12;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 13;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 10;
	НоваяСтрока.ПриоритетКолонки = 14;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 15);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы';
								|en = 'Income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов();
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	// АПК:1036-выкл часть регламентированной формы        
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период';
		|en = 'Issued in advance and outside
		|the payroll period'");
	// АПК:1036-вкл
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	// АПК:1036-выкл часть регламентированной формы        
	НоваяСтрока.Заголовок = НСтр("ru = 'Удержания по исполнитель-
		|ному листу';
		|en = 'Deductions based on enforcement
		|order'");
	// АПК:1036-вкл
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления';
								|en = 'Basic accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ЕСТЬNULL(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени, ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ЕСТЬNULL(ВидРасчета.СпособВыполненияНачисления, ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ " + НоваяСтрока.ПользовательскоеУсловие + ")";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности';
								|en = 'Temporary incapacity allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни';
								|en = 'sick days'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ЕСТЬNULL(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени, ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ЕСТЬNULL(ВидРасчета.СпособВыполненияНачисления, ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ " + НоваяСтрока.ПользовательскоеУсловие + ")";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11);
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийФорма0504401с2015() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОсновныеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Основные начисления';
								|en = 'Basic accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "(ЕСТЬNULL(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени, ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СдельнаяОплатаТруда)) И ЕСТЬNULL(ВидРасчета.СпособВыполненияНачисления, ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ " + НоваяСтрока.ПользовательскоеУсловие + ")";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Больничный
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработкаЗаДниБолезни);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодамБезОплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Больничный";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по временной нетрудоспособности';
								|en = 'Temporary incapacity allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДниБолезни
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДниБолезни";
	НоваяСтрока.Заголовок = НСтр("ru = 'дни болезни';
								|en = 'sick days'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.РезультатУсловия = "ОплаченоДней";
	НоваяСтрока.ПорядокКолонки = 7;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПособиеПоУходуЗаРебенком
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоПолутораЛет);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПособиеПоУходуЗаРебенкомДоТрехЛет);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПособиеПоУходуЗаРебенком";
	НоваяСтрока.Заголовок = НСтр("ru = 'Пособия по уходу за ребенком';
								|en = 'Child care allowances'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 9;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления';
								|en = 'Other accruals'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ОсновныеНачисления
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПовременнаяОплатаТруда";
	НоваяСтрока.Заголовок = НСтр("ru = 'Повременная оплата труда и надбавки';
								|en = 'Time-based payment and standard bonuses'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПользовательскоеУсловие = "((ЕСТЬNULL(ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени, ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда) И ЕСТЬNULL(ВидРасчета.СпособВыполненияНачисления, ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета)) И Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "(НЕ " + НоваяСтрока.ПользовательскоеУсловие + ")";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// РайонныйКоэффициент
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "РайонныйКоэффициент";
	НоваяСтрока.Заголовок = НСтр("ru = 'Районный коэффициент';
								|en = 'Regional factor'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 97;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	// СевернаяНадбавка
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "СевернаяНадбавка";
	НоваяСтрока.Заголовок = НСтр("ru = 'Северная надбавка';
								|en = 'Northern allowance'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 98;
	НоваяСтрока.ПриоритетКолонки = 5;
	
	// Премия
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Премия";
	НоваяСтрока.Заголовок = НСтр("ru = 'Премия';
								|en = 'Bonus'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 6;
	
	// ОплатаПоСреднему
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоСреднегоЗаработка);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ОплатаПоСреднему";
	НоваяСтрока.Заголовок = НСтр("ru = 'Оплата по среднему';
								|en = 'Payment by average'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 4;
	НоваяСтрока.ПриоритетКолонки = 7;
	
	// ДоплатаЗаСовмещение
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаЗаСовмещение);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ДоплатаЗаСовмещение";
	НоваяСтрока.Заголовок = НСтр("ru = 'Доплата за совмещение';
								|en = 'Extra pay for secondary employment'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 5;
	НоваяСтрока.ПриоритетКолонки = 8;
	
	// Простой
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоНезависящимОтРаботодателяПричинам);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПростойПоВинеРаботника);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Простой";
	НоваяСтрока.Заголовок = НСтр("ru = 'Простой';
								|en = 'Simple'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 9;
	
	// Отпуск
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсацияОтпуска);
	МассивКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.МатериальнаяПомощьПриОтпуске);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "Отпуск";
	НоваяСтрока.Заголовок = НСтр("ru = 'Отпуск';
								|en = 'Leave'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 8;
	НоваяСтрока.ПриоритетКолонки = 10;
	
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "КомпенсационныеВыплаты";
	НоваяСтрока.Заголовок = НСтр("ru = 'Компенсационные выплаты';
								|en = 'Compensatory payments'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 6;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	ДополнитьДополнительныеНачисления(ДополнительныеНачисления, 11,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КомпенсационныеВыплаты));
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// Аванс
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
	МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	// АПК:1036-выкл часть регламентированной формы        
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано в аванс и межрасчет-
		|ный период';
		|en = 'Issued in advance and outside
		|the payroll period'");
	// АПК:1036-вкл
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// НДФЛ
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц';
								|en = 'Personal income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов();
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос';
								|en = 'Insurance pension contribution'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 5);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийФорма0504401с2015(ПерваяПоловинаМесяца = Ложь) Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы физических лиц';
								|en = 'Personal income tax'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = Перечисления.ВидыОсобыхНачисленийИУдержаний.СтрокиИсчисленныхНалогов();
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ДобровольныеСтраховыеВзносы
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ДСВ);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ДобровольныеСтраховыеВзносы";
	НоваяСтрока.Заголовок = НСтр("ru = 'Страховой пенсионный взнос';
								|en = 'Insurance pension contribution'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Ложь;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания';
								|en = 'Other deductions'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	Если Не ПерваяПоловинаМесяца Тогда
		
		// Аванс (Выплачено / заработная плата)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВАванс";
		НоваяСтрока.Заголовок = НСтр("ru = 'заработная
			|плата';
			|en = 'salary
			|'");
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 4;
		НоваяСтрока.ПриоритетКолонки = 4;
		
		// Межрасчет (Выплачено / выплаты в межрасчетный период)
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод);
		МассивКатегорий.Добавить(Перечисления.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = "ВыплаченоВМежрасчет";
		// АПК:1036-выкл часть регламентированной формы        
		НоваяСтрока.Заголовок = НСтр("ru = 'в межрасчет-
			|ный период';
			|en = 'outside the 
			|payroll period '");
		// АПК:1036-вкл
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
		НоваяСтрока.ВыводитьКолонку = Ложь;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = 5;
		НоваяСтрока.ПриоритетКолонки = 5;
		
	КонецЕсли;
	
	ДополнитьДополнительныеУдержания(ДополнительныеУдержания, 6);
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

Процедура ДополнитьДополнительныеНачисления(ДополнительныеНачисления, ПорядокКолонки, ИсключаемыеКатегории = Неопределено)
	
	МассивВсехКатегорий = Новый Массив;
	Для каждого СтрокаНачисления Из ДополнительныеНачисления Цикл
		Для каждого КатегорияКолонки Из СтрокаНачисления.КатегорииКолонки Цикл
			МассивВсехКатегорий.Добавить(КатегорияКолонки);
		КонецЦикла;
	КонецЦикла;
	
	ДействующиеКатегории = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
		Если МассивВсехКатегорий.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		
		Если ИсключаемыеКатегории <> Неопределено Тогда
			ВыводитьКолонку = (ИсключаемыеКатегории.Найти(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[ЗначениеПеречисления.Имя]) = Неопределено);
		Иначе
			ВыводитьКолонку = Истина;
		КонецЕсли;
		
		НоваяСтрока.ВыводитьКолонку = ВыводитьКолонку;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если МассивВсехКатегорий.Найти(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДополнительныеУдержания(ДополнительныеУдержания, ПорядокКолонки)
	
	ДействующиеКатегории = Перечисления.КатегорииУдержаний.ДействующиеКатегории();
	Для каждого ЗначениеПеречисления Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено
			Или СтрНайти(ЗначениеПеречисления.Имя, "НДФЛ") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		Если ДействующиеКатегории.Найти(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = МетаданныеЗначения;
		Если ДополнительныеУдержания.Найти(ЗначениеПеречисления.Имя, "Имя") <> Неопределено
			Или СтрНайти(ЗначениеПеречисления.Имя, "НДФЛ") <> 0 Тогда
			Продолжить;
		КонецЕсли;
		МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОсобыхНачисленийИУдержаний[ЗначениеПеречисления.Имя]);
		НоваяСтрока = ДополнительныеУдержания.Добавить();
		НоваяСтрока.Имя = ЗначениеПеречисления.Имя;
		НоваяСтрока.Заголовок = ЗначениеПеречисления.Синоним;
		НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
		НоваяСтрока.ВыводитьНулевыеЗначения = Ложь;
		НоваяСтрока.ВыводитьКолонку = Истина;
		НоваяСтрока.КатегорииКолонки = МассивКатегорий;
		НоваяСтрока.ПорядокКолонки = ПорядокКолонки;
		НоваяСтрока.ПриоритетКолонки = ПорядокКолонки;
		ПорядокКолонки = ПорядокКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Начисления - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные начисления.
//
//	Возвращаемое значение:
//		ПорядокНачислений - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокНачислений = Начисления.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаНачисления Из Начисления Цикл
			Если (СтрокаНачисления.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаНачисления.Имя) <> Неопределено)
				И СтрокаНачисления.ВыводитьКолонку И ПорядокНачислений.Найти(СтрокаНачисления.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокНачислений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокНачислений.Сортировать("ПорядокКолонки");
	ПорядокНачислений.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из ПорядокНачислений Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокНачислений;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
//	Параметры:
//		Удержания - Таблица значений, полученная с помощью метода
//		            "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		ДанныеОтчета - дерево значений, полученное с помощью метода ПроцессорВывода.Вывести.
//		СоответствиеПользовательскихПолей - Соответствие, полученное с помощью метода
//		                                    ЗарплатаКадры.СоответствиеПользовательскихПолей.
//		НачальныйНомерКолонки - Первый номер колонки, начиная с которой будут выводиться дополнительные удержания.
//
//	Возвращаемое значение:
//		ПорядокУдержаний - Таблица значений с колонками:
//			Имя - Строка - Имя колонки.
//			Заголовок - Строка - Представление колонки в отчете.
//			НомерКолонки - Номер колонки в отчете.
//			КатегорииКолонки - Массив - Категории начислений, выводимые в колонку.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	ПорядокУдержаний = Удержания.СкопироватьКолонки("Имя, Заголовок, ПорядокКолонки, НомерКолонки, КатегорииКолонки");
	
	// Получим первые по приоритету колонки.
	Для каждого СтрокаОтчета Из ДанныеОтчета.Строки Цикл
		Для каждого СтрокаУдержания Из Удержания Цикл
			Если (СтрокаУдержания.ВыводитьНулевыеЗначения Или СоответствиеПользовательскихПолей.Получить(СтрокаУдержания.Имя) <> Неопределено)
				И СтрокаУдержания.ВыводитьКолонку И ПорядокУдержаний.Найти(СтрокаУдержания.Имя, "Имя") = Неопределено Тогда
				НоваяСтрока = ПорядокУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПорядокУдержаний.Сортировать("ПорядокКолонки");
	ПорядокУдержаний.Колонки.Удалить("ПорядокКолонки");
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из ПорядокУдержаний Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат ПорядокУдержаний;
	
КонецФункции

// Возвращает условие, сформированное с учетом категории начисления/удержания.
//
//	Параметры:
//		МассивКатегорий - Массив - Категории начислений/удержаний, входящие в условие.
//		МассивВсехКатегорий - Массив - Все используемые в условиях категории, формируется для правильного формирования
//		                               условия по "Прочим" начислениям/удержаниям.
//		ВыражениеУсловия - Строка - выражение выполнения условия, по умолчанию "=".
//		ОперацияУсловия - Строка - Операция соединения условий, по умолчанию "Или".
//
//	Возвращаемое значение:
//		Условие - Строка - Сформированное условие для пользовательского поля.
//
Функция УсловиеПользовательскогоПоля(МассивКатегорий, СоответствиеКатегорий, ВидПолей, ВыражениеУсловия = "=", ОперацияУсловия = "Или", Группа = Неопределено) Экспорт
	
	Условие = "";
	Для каждого Категория Из МассивКатегорий Цикл
		Если Не ПустаяСтрока(Условие) Тогда
			Условие = Условие + " " + ОперацияУсловия + " ";
		КонецЕсли;
		ИмяПеречисления = Категория.Метаданные().Имя;
		Если ИмяПеречисления = "ВидыОсобыхНачисленийИУдержаний" Или ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками" Тогда
			Параметр1 = "";
		ИначеЕсли ИмяПеречисления = "КатегорииНачисленийИНеоплаченногоВремени" Тогда
			Параметр1 = ".КатегорияНачисленияИлиНеоплаченногоВремени";
		Иначе
			Параметр1 = ".КатегорияУдержания";
		КонецЕсли;
		Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Условие + "ЕстьNULL(ВидРасчета%1, ЗНАЧЕНИЕ(Перечисление.%3.ПустаяСсылка)) %2 ЗНАЧЕНИЕ(Перечисление.%3.%4)",
			Параметр1, ВыражениеУсловия, ИмяПеречисления, СоответствиеКатегорий.Получить(Категория));
	КонецЦикла;
	
	ШаблонУсловия = "(" + ?(ПустаяСтрока(Условие), "", "(%1) И ") + "Группа = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.%2))";
	Если Группа = Неопределено Тогда
		Группа = ?(ИмяПеречисления = "ВидыВзаиморасчетовССотрудниками", "Выплачено", ?(ВидПолей = "Начисления", "Начислено", "Удержано"));
	КонецЕсли;
	Условие = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, Условие, Группа);
	
	Возврат Условие;
	
КонецФункции

// Устанавливает выражение детальных записей и итоговых записей для пользовательского поля варианта отчета.
//
//	Параметры:
//		ПользовательскоеПоле - Пользовательское поле, в которое требуется установить выражения.
//		Условие - Строка - условие выполнения выражения.
//		РезультатУсловия - Строка - Результат выполнения выражения.
//
Процедура ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, РезультатУсловия) Экспорт
	
	ПользовательскоеПоле.Использование = Истина;
	
	ВыражениеДетальныхЗаписей = 
	"Выбор
	|	Когда " + Условие + "
	|		Тогда " + РезультатУсловия + "
	|	Иначе 0
	|Конец";
	ПользовательскоеПоле.УстановитьВыражениеДетальныхЗаписей(ВыражениеДетальныхЗаписей);
	
	ВыражениеИтоговыхЗаписей = 
	"Сумма(Выбор
	|		Когда " + Условие + "
	|			Тогда " + РезультатУсловия + "
	|		Иначе 0
	|	Конец)";
	ПользовательскоеПоле.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей);
	
КонецПроцедуры

// Добавляет пользовательское поле в поля выбора отчета и группировки.
//
//	Параметры:
//		ВыбранныеПоля - Коллекция элементов полей выбора отчета.
//		ВыбранныеПоляГруппировки - Коллекция элементов полей выбора группировки.
//		ПользовательскоеПоле - Добавляемое пользовательское поле.
//
Процедура ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле) Экспорт
	
	НовоеПолеВыбора = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
	НовоеПолеВыбора = ВыбранныеПоляГруппировки.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
	
КонецПроцедуры

// Добавляет пользовательские поля в вариант отчета.
//
// Параметры:
//		ДополнительныеНачисленияИУдержания - Таблица значений, полученная с помощью метода "УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний".
//		НастройкиОтчета - Настройки варианта отчета.
//		КоличествоНачисленийУдержаний - Сколько всего будет дополнительных колонок. Нужно учитывать, что колонки "ПрочиеНачисления"/"ПрочиеУдержания" добавляются всегда.
//		ВидПолей - Вид добавляемых полей: "Начисления" или "Удержания".
//
Процедура ДобавитьПользовательскиеПоляДополнительныхНачисленийИУдержаний(ДополнительныеНачисленияИУдержания, НастройкиОтчета, КоличествоНачисленийУдержаний, ВидПолей, НаАванс) Экспорт
	
	ПриоритетыКатегорий = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииНачисленийИНеоплаченногоВремени"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.КатегорииУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыОсобыхНачисленийИУдержаний"));
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВидыВзаиморасчетовССотрудниками"));
	
	ПриоритетыКатегорий.Колонки.Добавить("КатегорияНачисленияУдержания", Новый ОписаниеТипов(МассивТипов));
	ПриоритетыКатегорий.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ПриоритетыКатегорий.Колонки.Добавить("ВыводитьНулевыеЗначения", Новый ОписаниеТипов("Булево"));
	Для Каждого ДопНачислениеУдержание Из ДополнительныеНачисленияИУдержания Цикл
		Для Каждого КатегорияНачисленияУдержания Из ДопНачислениеУдержание.КатегорииКолонки Цикл
			НоваяСтрокаПриоритетыКатегорий = ПриоритетыКатегорий.Добавить();
			НоваяСтрокаПриоритетыКатегорий.КатегорияНачисленияУдержания = КатегорияНачисленияУдержания;
			НоваяСтрокаПриоритетыКатегорий.Приоритет = ДопНачислениеУдержание.ПриоритетКолонки;
			НоваяСтрокаПриоритетыКатегорий.ВыводитьНулевыеЗначения = ДопНачислениеУдержание.ВыводитьНулевыеЗначения;
		КонецЦикла;
	КонецЦикла;
	
	ДатаНачала = ТекущаяДатаСеанса();
	ДатаОкончания = ТекущаяДатаСеанса();
	ПериодОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
	Если ПериодОтчета <> Неопределено Тогда
		ДатаНачала = ПериодОтчета.Значение.ДатаНачала;
		ДатаОкончания = ПериодОтчета.Значение.ДатаОкончания;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПриоритетыКатегорий", ПриоритетыКатегорий);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	ОрганизацияОтбора = Неопределено;
	ФизическиеЛицаОтбора = Неопределено;
	ПодразделениеОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из НастройкиОтчета.Отбор.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
			ОрганизацияОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
			ПодразделениеОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо") Тогда
			ФизическиеЛицаОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приоритеты.КатегорияНачисленияУдержания КАК Категория,
	|	Приоритеты.Приоритет КАК Приоритет,
	|	Приоритеты.ВыводитьНулевыеЗначения КАК ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыКатегорий
	|ИЗ
	|	&ПриоритетыКатегорий КАК Приоритеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Ссылка КАК НачислениеУдержание,
	|	ПриоритетыКатегорий.Приоритет КАК Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения КАК ВыводитьНулевыеЗначения
	|ПОМЕСТИТЬ ВТПриоритетыНачисленийУдержаний
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО ПриоритетыКатегорий.Категория = Начисления.КатегорияНачисленияИлиНеоплаченногоВремени
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержания
	|		ПО ПриоритетыКатегорий.Категория = Удержания.КатегорияУдержания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриоритетыКатегорий.Категория,
	|	ПриоритетыКатегорий.Приоритет,
	|	ПриоритетыКатегорий.ВыводитьНулевыеЗначения
	|ИЗ
	|	ВТПриоритетыКатегорий КАК ПриоритетыКатегорий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ПриоритетыНачисленийУдержаний.Приоритет КАК Приоритет
	|ИЗ
	|	ВТПриоритетыНачисленийУдержаний КАК ПриоритетыНачисленийУдержаний
	|ГДЕ
	|	(ПриоритетыНачисленийУдержаний.ВыводитьНулевыеЗначения
	|			ИЛИ ПриоритетыНачисленийУдержаний.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаВМежрасчетныйПериод), ЗНАЧЕНИЕ(Перечисление.ВидыВзаиморасчетовССотрудниками.ВозвратВМежрасчетныйПериод))
	|			ИЛИ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|				ГДЕ
	|					НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ПриоритетыНачисленийУдержаний.НачислениеУдержание
	|					И НачисленияУдержанияПоСотрудникам.Сумма <> 0
	|					И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)
	|					И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ (&Подразделение)
	|					И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)
	|					И &УсловиеГруппы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Если НаАванс Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК");
	КонецЕсли; 
	
	Если ОрганизацияОтбора = Неопределено Тогда
		
		РазрешенныеФилиалы = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.Организации", Тип("СправочникСсылка.Организации"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Организация В (&Организация)", "");
		Иначе
			Запрос.УстановитьПараметр("Организация", РазрешенныеФилиалы);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("Организация", ОрганизацияОтбора);
	КонецЕсли;
	
	Если ПодразделениеОтбора = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ (&Подразделение)", "");
	Иначе
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОтбора);
	КонецЕсли;
	
	Если ФизическиеЛицаОтбора = Неопределено Тогда
		
		РазрешенныеФизическиеЛица = УправлениеДоступом.РазрешенныеЗначенияДляДинамическогоСписка("Справочник.ФизическиеЛица", Тип("СправочникСсылка.ФизическиеЛица"));
		Если РазрешенныеФилиалы = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо В (&ФизическиеЛица)", "");
		Иначе
			Запрос.УстановитьПараметр("ФизическиеЛица", РазрешенныеФизическиеЛица);
		КонецЕсли;
		
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛицаОтбора);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "500", КоличествоНачисленийУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГруппы",
		?(ВидПолей = "Начисления", "НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)",
			"НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)"));
	УстановитьПривилегированныйРежим(Истина);
	ВыводимыеПриоритеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Приоритет");
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивВсехКатегорий = Новый Массив;
	КоллекцияПользовательскихПолей = НастройкиОтчета.ПользовательскиеПоля.Элементы;
	ВыбранныеПоля = НастройкиОтчета.Выбор.Элементы;
	ГруппировкаОтчета = ЗарплатаКадрыОтчеты.ПолучитьПоследнийЭлементСтруктуры(НастройкиОтчета);
	ВыбранныеПоляГруппировки = ГруппировкаОтчета.Выбор.Элементы;
	
	СоответствиеКатегорий = Новый Соответствие;
	Если ВидПолей = "Начисления" Тогда
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	Иначе
		Для каждого МетаданныеЗначения Из Метаданные.Перечисления.КатегорииУдержаний.ЗначенияПеречисления Цикл
			СоответствиеКатегорий.Вставить(Перечисления.КатегорииУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
		КонецЦикла;
	КонецЕсли;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыОсобыхНачисленийИУдержаний.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыОсобыхНачисленийИУдержаний[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления.ВидыВзаиморасчетовССотрудниками.ЗначенияПеречисления Цикл
		СоответствиеКатегорий.Вставить(Перечисления.ВидыВзаиморасчетовССотрудниками[МетаданныеЗначения.Имя], МетаданныеЗначения.Имя);
	КонецЦикла;
	
	ПользовательскоеУсловиеПрочие = "";
	СтрокаТаблицыПрочие = Неопределено;
	МассивСтрокДляУдаления = Новый Массив;;
	Для каждого СтрокаТаблицы Из ДополнительныеНачисленияИУдержания Цикл
		
		Если (ВидПолей = "Начисления" И СтрокаТаблицы.Имя = "ПрочиеНачисления") Или (ВидПолей = "Удержания" И СтрокаТаблицы.Имя = "ПрочиеУдержания") Тогда
			СтрокаТаблицыПрочие = ДополнительныеНачисленияИУдержания[ДополнительныеНачисленияИУдержания.Индекс(СтрокаТаблицы)];
			Продолжить;
		КонецЕсли;
		
		Если ВыводимыеПриоритеты.Найти(СтрокаТаблицы.ПриоритетКолонки) <> Неопределено Тогда
			// Сформируем условие по категориям
			Для каждого КатегорияКолонки Из СтрокаТаблицы.КатегорииКолонки Цикл
				Если МассивВсехКатегорий.Найти(КатегорияКолонки) = Неопределено Тогда
					МассивВсехКатегорий.Добавить(КатегорияКолонки);
				КонецЕсли;
			КонецЦикла;
			Условие = УсловиеПользовательскогоПоля(СтрокаТаблицы.КатегорииКолонки, СоответствиеКатегорий, ВидПолей);
			Если Не ПустаяСтрока(СтрокаТаблицы.ПользовательскоеУсловие) Тогда
				// Дополним пользовательским условием
				Условие = Условие + ?(Не ПустаяСтрока(Условие), " И ", "") + СтрокаТаблицы.ПользовательскоеУсловие;
				Поз = СтрНайти(ПользовательскоеУсловиеПрочие, СтрокаТаблицы.УсловиеИсключенияИзПрочих);
				Если Поз = 0 Тогда
					ПользовательскоеУсловиеЗаполнено = Не ПустаяСтрока(ПользовательскоеУсловиеПрочие);
					ПользовательскоеУсловиеПрочие = ПользовательскоеУсловиеПрочие + ?(ПользовательскоеУсловиеЗаполнено, " И ", "") + СтрокаТаблицы.УсловиеИсключенияИзПрочих;
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТаблицы.ДобавитьПользовательскоеПоле Тогда
				НовоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
				НовоеПоле.Заголовок = СтрокаТаблицы.Имя;
				ДополнитьПользовательскоеПоле(НовоеПоле, Условие, ?(ПустаяСтрока(СтрокаТаблицы.РезультатУсловия), "Сумма", СтрокаТаблицы.РезультатУсловия));
				ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, НовоеПоле);
			КонецЕсли;
		Иначе
			МассивСтрокДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим категории, которые не выводятся в колонки отчета.
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		ДополнительныеНачисленияИУдержания.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	// ПрочиеНачисления
	Если ВидПолей = "Начисления" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		
		ПользовательскоеПоле = ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, "ПрочиеНачисления");
		Если ПользовательскоеПоле = Неопределено Тогда
			
			ПользовательскоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			ПользовательскоеПоле.Заголовок = "ПрочиеНачисления";
			
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле);
			
		КонецЕсли;
		
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Начислено");
		ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, "Сумма");
		
	КонецЕсли;
	
	// ПрочиеУдержания
	Если ВидПолей = "Удержания" И СтрокаТаблицыПрочие <> Неопределено И СтрокаТаблицыПрочие.ДобавитьПользовательскоеПоле Тогда
		
		ПользовательскоеПоле = ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, "ПрочиеУдержания");
		Если ПользовательскоеПоле = Неопределено Тогда
			
			ПользовательскоеПоле = КоллекцияПользовательскихПолей.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
			ПользовательскоеПоле.Заголовок = "ПрочиеУдержания";
			
			ДополнитьВыбранныеПоля(ВыбранныеПоля, ВыбранныеПоляГруппировки, ПользовательскоеПоле);
			
		КонецЕсли;
		
		Условие = ?(ПустаяСтрока(ПользовательскоеУсловиеПрочие), "", ПользовательскоеУсловиеПрочие + " И ") + УсловиеПользовательскогоПоля(МассивВсехКатегорий, СоответствиеКатегорий, ВидПолей, "<>", "И", "Удержано");
		ДополнитьПользовательскоеПоле(ПользовательскоеПоле, Условие, "Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательскоеПолеПоЗаголовку(КоллекцияПользовательскихПолей, Заголовок)
	
	Для Каждого ПользовательскоеПоле Из КоллекцияПользовательскихПолей Цикл
		
		Если ПользовательскоеПоле.Заголовок = Заголовок Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НаборДанныхНачисленияУдержания(НаборыДанных)
	
	НаборНачисленияУдержания = Неопределено;
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если НаборДанных.Имя = "НачисленияУдержания" Тогда
			НаборНачисленияУдержания = НаборДанных;
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			НаборНачисленияУдержания = НаборДанныхНачисленияУдержания(НаборДанных.Элементы);
		КонецЕсли;
		
		Если НаборНачисленияУдержания <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборНачисленияУдержания;
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	УчетНачисленнойЗарплатыБазовый.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДополнительныеПоляКадровыхДанныхСотрудников = ДополнительныеПоля.Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний;
		
		// Должность по штатному расписанию
		ИмяПоля = "ДолжностьПоШтатномуРасписанию";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"ДолжностьПоШтатномуРасписанию",
			"Работа.ДолжностьПоШтатномуРасписанию",
			НСтр("ru = 'Работа.Должность по штатному расписанию';
				|en = 'Job.Position according to the headcount'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ДолжностьПоШтатномуРасписаниюНаКонецПериода",
			"Работа.ДолжностьПоШтатномуРасписаниюНаКонецПериода",
			НСтр("ru = 'Работа.Должность по штатному расписанию на конец периода';
				|en = 'Job.Position according to the headcount at the end of the period'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			"Работа.ДолжностьПоШтатномуРасписаниюГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Работа.Должность по штатному расписанию основного сотрудника на конец периода';
				|en = 'Job.Position according to the headcount of the principal employee at the end of the period'"));
		
		// Разряд категория
		ИмяПоля = "РазрядКатегория";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.РазрядыКатегорииДолжностей.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"РазрядКатегория",
			"РабочееМесто.РазрядКатегория");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"РазрядКатегорияНаКонецПериода",
			"РабочееМесто.РазрядКатегорияНаКонецПериода");
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			"РабочееМесто.РазрядКатегорияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Разряд категория основного сотрудника на конец периода';
				|en = 'Category of the main employee as of the end of the period'"));
		
		// Территория
		ИмяПоля = "Территория";
		
		СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Найти(ИмяПоля, "ИмяПоля");
		Если СтрокаДополнительногоПоля = Неопределено Тогда
			
			СтрокаДополнительногоПоля = ДополнительныеПоляКадровыхДанныхСотрудников.Добавить();
			СтрокаДополнительногоПоля.ИмяПоля = ИмяПоля;
			СтрокаДополнительногоПоля.ПустоеЗначениеНаЯзыкеЗапросов = "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудников",
			"Территория",
			"Работа.Территория",
			НСтр("ru = 'Работа.Территория';
				|en = 'Job.Territory'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеСотрудниковНаКонецПериода",
			"ТерриторияНаКонецПериода",
			"Работа.ТерриторияНаКонецПериода",
			НСтр("ru = 'Работа.Территория на конец периода';
				|en = 'Job.Territory at the end of the period'"));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
			СтрокаДополнительногоПоля,
			"КадровыеДанныеГоловныхСотрудников",
			"ТерриторияГоловногоСотрудникаНаКонецПериода",
			"Работа.ТерриторияГоловногоСотрудникаНаКонецПериода",
			НСтр("ru = 'Работа.Территория основного сотрудника на конец периода';
				|en = 'Job.Territory of the principal employee at the end of the period'"));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетБюджетныхУчреждений") Тогда
			МодульУчетБюджетныхУчреждений = ОбщегоНазначения.ОбщийМодуль("УчетБюджетныхУчреждений");
			МодульУчетБюджетныхУчреждений.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОрганизационнаяСтруктура") Тогда
			МодульОрганизационнаяСтруктура = ОбщегоНазначения.ОбщийМодуль("ОрганизационнаяСтруктура");
			МодульОрганизационнаяСтруктура.ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТНачисленныеДоходы(ИмяВТНачисленныеДоходы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникам.Период КАК МесяцНачисления,
	|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация КАК Организация,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК ДокументОснование,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	|	НачисленияУдержанияПоСотрудникам.Сумма КАК Начислено,
	|	НачисленияУдержанияПоСотрудникам.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|				И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание ССЫЛКА Перечисление.ВидыОсобыхНачисленийИУдержаний
	|				И (&КомпенсацияЗаЗадержкуЗарплатыСотрудникам
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|					ИЛИ НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОблагаетсяНДФЛ
	|ПОМЕСТИТЬ ВТНачисленныеДоходы
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачисленныхДоходов КАК ПериодыНачисленныхДоходов
	|		ПО (НачисленияУдержанияПоСотрудникам.Период МЕЖДУ ПериодыНачисленныхДоходов.НачалоПериода И ПериодыНачисленныхДоходов.ОкончаниеПериода)
	|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПериодыНачисленныхДоходов.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|			ИЛИ НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|				И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено)
	|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоСотрудникамАвансом.Период,
	|	НачисленияУдержанияПоСотрудникамАвансом.Организация.ГоловнаяОрганизация,
	|	НачисленияУдержанияПоСотрудникамАвансом.ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникамАвансом.Регистратор,
	|	НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание,
	|	0,
	|	НачисленияУдержанияПоСотрудникамАвансом.Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|				И НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание ССЫЛКА Перечисление.ВидыОсобыхНачисленийИУдержаний
	|				И (&КомпенсацияЗаЗадержкуЗарплатыАванс
	|					ИЛИ НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|					ИЛИ НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности)
	|					ИЛИ НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка)
	|					ИЛИ НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|					ИЛИ НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом КАК НачисленияУдержанияПоСотрудникамАвансом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачисленныхДоходов КАК ПериодыНачисленныхДоходов
	|		ПО (НачисленияУдержанияПоСотрудникамАвансом.Период МЕЖДУ ПериодыНачисленныхДоходов.НачалоПериода И ПериодыНачисленныхДоходов.ОкончаниеПериода)
	|			И НачисленияУдержанияПоСотрудникамАвансом.ФизическоеЛицо = ПериодыНачисленныхДоходов.ФизическоеЛицо
	|ГДЕ
	|	(НачисленияУдержанияПоСотрудникамАвансом.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|			ИЛИ НачисленияУдержанияПоСотрудникамАвансом.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|				И (НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено)
	|					И НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание <> ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Период,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Организация.ГоловнаяОрганизация,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.ФизическоеЛицо,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Регистратор,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Сумма,
	|	НачисленияУдержанияПоКонтрагентамАкционерам.Регистратор,
	|	ВЫБОР
	|		КОГДА НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание ССЫЛКА Справочник.ВидыВыплатБывшимСотрудникам
	|				И НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание ССЫЛКА Справочник.ВидыПрочихДоходовФизическихЛиц
	|				И НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание ССЫЛКА Перечисление.ВидыОсобыхНачисленийИУдержаний
	|				И (&КомпенсацияЗаЗадержкуЗарплатыПоКонтрагентамАкционерам
	|					ИЛИ НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму)
	|					ИЛИ НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриПостановкеНаУчетВРанниеСрокиБеременности)
	|					ИЛИ НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеПриРожденииРебенка)
	|					ИЛИ НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребение)
	|					ИЛИ НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ПособиеНаПогребениеСотруднику))
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоКонтрагентамАкционерам КАК НачисленияУдержанияПоКонтрагентамАкционерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыНачисленныхДоходов КАК ПериодыНачисленныхДоходов
	|		ПО (НачисленияУдержанияПоКонтрагентамАкционерам.Период МЕЖДУ ПериодыНачисленныхДоходов.НачалоПериода И ПериодыНачисленныхДоходов.ОкончаниеПериода)
	|			И НачисленияУдержанияПоКонтрагентамАкционерам.ФизическоеЛицо = ПериодыНачисленныхДоходов.ФизическоеЛицо
	|ГДЕ
	|	НачисленияУдержанияПоКонтрагентамАкционерам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)";
	
	Если ПолучитьФункциональнуюОпцию("СчитатьКомпенсациюЗаЗадержкуЗарплатыОблагаемымНДФЛДоходом") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыСотрудникам", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыАванс", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыПоКонтрагентамАкционерам", "ЛОЖЬ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыСотрудникам", 
			"НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыАванс", 
			"НачисленияУдержанияПоСотрудникамАвансом.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КомпенсацияЗаЗадержкуЗарплатыПоКонтрагентамАкционерам", 
			"НачисленияУдержанияПоКонтрагентамАкционерам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.КомпенсацияЗаЗадержкуЗарплаты)");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленныеДоходы", ИмяВТНачисленныеДоходы);
	
	Возврат Запрос;	
	
КонецФункции

#КонецОбласти

#Область ФормированияДвижений

Процедура ЗарегистрироватьПогашениеЗаймов(ДанныеДляПроведения, Отказ, ПогашениеЗаймов, ЗаписыватьДвижения) 
	
	Если ПогашениеЗаймов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	
	УдержанияДляВзаиморасчетов	= ВзаиморасчетыССотрудниками.НоваяТаблицаНачисленнойЗарплаты();
	
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам();
	Для Каждого Строка Из ПогашениеЗаймов Цикл
		
		НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Период				= ПериодРегистрации;
		НоваяСтрока.ПериодДействия		= ПериодРегистрации;
		НоваяСтрока.Организация			= Организация;
		НоваяСтрока.НачислениеУдержание = Строка.ВидУдержания;
		Если Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам
			Или Строка.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		Иначе
			НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполняем движения 
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УдержанияПоРабочимМестам, Движения.НачисленияУдержанияПоСотрудникам);
	Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
	
	// Данные для взаиморасчетов
	Для Каждого Строка Из УдержанияПоРабочимМестам Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано Тогда
			НоваяСтрока = УдержанияДляВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли	
	КонецЦикла;

	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
	// Взаиморасчеты
	ВзаиморасчетыССотрудниками.ЗарегистрироватьНачисленнуюЗарплату(
			Движения, Отказ, 
			Организация, ПериодРегистрации, ПорядокВыплаты,
			Неопределено, УдержанияДляВзаиморасчетов);
	
КонецПроцедуры

#КонецОбласти

Функция РезультатыРаспределенияУдержаний(ДанныеДляПроведения, УдержанияПоСотрудникам) Экспорт

	РаспределениеУдержаний 	= ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Движения 				= ДанныеДляПроведения.Движения;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	Авансом					= ДанныеДляПроведения.Авансом;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом;
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	КонецЕсли;
	
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаУдержаний = ОтражениеЗарплатыВУчете.НоваяТаблицаРезультатРасчетаУдержаний();
	
	СтрокиУдержаний = Новый Соответствие;
	НоваяКоллекцияРаспределениеУдержаний = Неопределено;
	Если УдержанияПоСотрудникам <> Неопределено Тогда
		НоваяКоллекцияРаспределениеУдержаний = УдержанияПоСотрудникам.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из УдержанияПоСотрудникам Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиУдержаний.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= СтрокаТЗ.Удержание;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ФизическоеЛицо", Истина);
	УдержанияМассив 	 = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУдержаний, "ВидУдержания", Истина);
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТРаспределениеНачислений = "ВТРаспределениеНачисленийТекущегоДокумента";
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТРаспределениеНачислений) Тогда
		УчетНачисленнойЗарплаты.СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить(ИмяВТРаспределениеНачислений);
	КонецЕсли;
	
	// Получение данных для распределения, ДанныеДляРаспределения - структура
	// БазаВсеНачисления - таблица значений с базовыми начислениями
	// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
	ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных , ДанныеДляПроведения, "МенеджерВременныхТаблиц,Организация,ПериодРегистрации,ОкончательныйРасчет");
	ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
	ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
	ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, УдержанияМассив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
	
	ДополнительныеПараметры = ОтражениеЗарплатыВУчетеРасширенный.ОписаниеИсходныхДанныхДляРаспределенияУдержаний();
	ДополнительныеПараметры.БазовыеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
	ДополнительныеПараметры.СтрокиУжеУдержаноПоФизическимЛицам = ДанныеДляРаспределения.СтрокиУжеУдержано;
	ДополнительныеПараметры.ТаблицаУдержаний = ТаблицаУдержаний;
	ДополнительныеПараметры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДополнительныеПараметры.Организация = Организация;
	ДополнительныеПараметры.ПериодРегистрации = ПериодРегистрации;
	ДополнительныеПараметры.ВидыНачисленийДополненияРасчетнойБазы = Обработки.МенеджерРасчетаЗарплаты.ВидыНачисленийДополненияРасчетнойБазыУдержаний();
	ДополнительныеПараметры.ОкончательныйРасчет = ОкончательныйРасчет;
	ОтражениеЗарплатыВУчетеРасширенный.ВыполнитьРаспределениеУдержаний(РаспределениеУдержаний, ДополнительныеПараметры);
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	Для каждого ЭлементКоллекции Из СтрокиУдержаний Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеУдержаний.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеУдержаний.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеУдержаний.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				НоваяСтрока.Сумма 			= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат НоваяКоллекцияРаспределениеУдержаний;
	
КонецФункции 

Функция РезультатыРаспределенияЗаймов(ДанныеДляПроведения, УдержанияЗаймов, НалогНаМатериальнуюВыгоду)

	РезультатРаспределения = Новый Структура("НалогНаМатериальнуюВыгоду,УдержанияЗаймов");
	
	РаспределениеНДФЛ 		= ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	РаспределениеЗаймов 	= ОтражениеЗарплатыВУчете.НоваяТаблицаРаспределениеРезультатовУдержаний();
	
	Движения 				= ДанныеДляПроведения.Движения;
	Организация 			= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ОкончательныйРасчет		= ДанныеДляПроведения.ОкончательныйРасчет;
	
	ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	ИсключаемыйРегистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	
	ТаблицаЗаймов = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	ТаблицаНФДЛ   = ОтражениеЗарплатыВУчетеРасширенный.НоваяТаблицаРезультатПогашениеЗаймов();
	
	СтрокиЗаймов = Новый Соответствие;
	НоваяКоллекцияРаспределениеЗаймов = Неопределено;
	Если УдержанияЗаймов <> Неопределено Тогда
		НоваяКоллекцияРаспределениеЗаймов = УдержанияЗаймов.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из УдержанияЗаймов Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиЗаймов.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= СтрокаТЗ.Удержание;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокиНДФЛ = Новый Соответствие;
	НоваяКоллекцияРаспределениеНДФЛ = Неопределено;
	Если НалогНаМатериальнуюВыгоду <> Неопределено Тогда
		НоваяКоллекцияРаспределениеНДФЛ = НалогНаМатериальнуюВыгоду.СкопироватьКолонки();
		ИдентификаторСтроки = 1;
		Для каждого СтрокаТЗ Из НалогНаМатериальнуюВыгоду Цикл
			Если СтрокаТЗ.Сумма <> 0 Тогда
				СтрокиНДФЛ.Вставить(ИдентификаторСтроки, СтрокаТЗ);
				НоваяСтрока = ТаблицаНФДЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
				НоваяСтрока.ВидУдержания 		= Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
				ИдентификаторСтроки = ИдентификаторСтроки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФизическиеЛицаМассив = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаймов, "ФизическоеЛицо", Истина), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛицаМассив, ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНФДЛ, "ФизическоеЛицо", Истина), Истина);
	
	УдалитьВТ = Новый Массив;
	
	ИмяВТРаспределениеНачислений = "ВТРаспределениеНачисленийТекущегоДокумента";
	Если Не ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, ИмяВТРаспределениеНачислений) Тогда
		УчетНачисленнойЗарплаты.СоздатьПустуюВТРаспределениеНачисленийТекущегоДокумента(МенеджерВременныхТаблиц);
		УдалитьВТ.Добавить(ИмяВТРаспределениеНачислений);
	КонецЕсли;
	
	// Получение данных для распределения, ДанныеДляРаспределения - структура
	// БазаВсеНачисления - таблица значений с базовыми начислениями
	// УжеУдержано - таблица значений, содержит данные об уже выполненных удержаниях по физическому лиц.
	ПараметрыПолученияДанных = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровПолученияДанныхДляРаспределенияУдержаний();
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияДанных , ДанныеДляПроведения, "МенеджерВременныхТаблиц,Организация,ПериодРегистрации,ОкончательныйРасчет");
	ПараметрыПолученияДанных.ИмяВТДанныеТекущегоДокумента = ИмяВТРаспределениеНачислений;
	ИсключаемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсключаемыйРегистратор);
	ДанныеДляРаспределения = ОтражениеЗарплатыВУчете.ДанныеДляРаспределенияУдержаний(ФизическиеЛицаМассив, Новый Массив, ИсключаемыеРегистраторы, ПараметрыПолученияДанных);
	БазовыеНачисления = ДанныеДляРаспределения.БазовыеНачисления;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВХозрасчетнойОрганизации") Тогда
		СтатьиРасходовПоСпособамРасчетов  = ЗарплатаКадры.СтатьиРасходовПоСпособамРасчетовСФизическимиЛицами();
		РасчетыПоОплатеТруда = СтатьиРасходовПоСпособамРасчетов[Перечисления.СпособыРасчетовСФизическимиЛицами.ОплатаТруда];
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТЗ Из БазовыеНачисления Цикл
			Если СтрокаТЗ.СтатьяРасходов <> РасчетыПоОплатеТруда Тогда
				СтрокиКУдалению.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЗ Из СтрокиКУдалению Цикл
			БазовыеНачисления.Удалить(СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРаспределения = ОтражениеЗарплатыВУчете.НовоеОписаниеПараметровРаспределенияУдержаний();
	ПараметрыРаспределения.Организация 		 = Организация;
	ПараметрыРаспределения.ПериодРегистрации = ПериодРегистрации;
	ПараметрыРаспределения.УчитыватьЗнакБазовыхЗначений = Не ОкончательныйРасчет;
	
	Отбор = Новый Структура("ИдентификаторСтроки");
	
	// ТаблицаЗаймов
	РаспределениеЗаймов = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(ТаблицаЗаймов, БазовыеНачисления, Новый Соответствие, ПараметрыРаспределения);
	
	Для каждого ЭлементКоллекции Из СтрокиЗаймов Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеЗаймов.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеЗаймов.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеЗаймов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 		= СтрокаТЗ.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаТЗ.Подразделение;
				НоваяСтрока.Сумма 			= СтрокаТЗ.Результат;
				Если СтрокаТЗ.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму Тогда
					НоваяСтрока.СтатьяРасходов = Справочники.СтатьиРасходовЗарплата.ПустаяСсылка();
				Иначе
					НоваяСтрока.СтатьяРасходов 	= СтрокаТЗ.СтатьяРасходов;
					НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатРаспределения.УдержанияЗаймов = НоваяКоллекцияРаспределениеЗаймов;
	
	// ТаблицаНФДЛ
	РаспределениеНДФЛ = ОтражениеЗарплатыВУчете.РаспределениеУдержанийПоРабочимМестамИСтатьям(ТаблицаНФДЛ, БазовыеНачисления, Новый Соответствие, ПараметрыРаспределения);
	
	Для каждого ЭлементКоллекции Из СтрокиНДФЛ Цикл
		Отбор.ИдентификаторСтроки = ЭлементКоллекции.Ключ;
		СтрокиРаспределения = РаспределениеНДФЛ.НайтиСтроки(Отбор);
		Если СтрокиРаспределения.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(НоваяКоллекцияРаспределениеНДФЛ.Добавить(),ЭлементКоллекции.Значение);
		Иначе
			Для каждого СтрокаТЗ Из СтрокиРаспределения Цикл
				НоваяСтрока = НоваяКоллекцияРаспределениеНДФЛ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКоллекции.Значение);
				НоваяСтрока.Сотрудник 				= СтрокаТЗ.Сотрудник;
				НоваяСтрока.ПодразделениеСотрудника	= СтрокаТЗ.Подразделение;
				НоваяСтрока.СтатьяРасходов 			= СтрокаТЗ.СтатьяРасходов;
				НоваяСтрока.ВидДоходаИсполнительногоПроизводства = СтрокаТЗ.ВидДоходаИсполнительногоПроизводства;
				НоваяСтрока.Сумма 					= СтрокаТЗ.Результат;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатРаспределения.НалогНаМатериальнуюВыгоду = НоваяКоллекцияРаспределениеНДФЛ;
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, УдалитьВТ);
	
	Возврат РезультатРаспределения;
	
КонецФункции 

Функция ПустоеЗначениеТерриторияНаЯзыкеЗапросов() Экспорт

	Возврат "ЗНАЧЕНИЕ(Справочник.ТерриторииВыполненияРабот.ПустаяСсылка)";

КонецФункции

Процедура ЗаполнитьИдентификаторыСтрокОтработанноеВремяПоСотрудникамКорректировка(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.ИдентификаторСтроки = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор,
			|	ОтработанноеВремяПоСотрудникамКорректировка.*
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|			ПО ОтработанноеВремяПоСотрудникамКорректировка.Период = ОтработанноеВремяПоСотрудникам.Период
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Организация = ОтработанноеВремяПоСотрудникам.Организация
			|				И ОтработанноеВремяПоСотрудникамКорректировка.ФизическоеЛицо = ОтработанноеВремяПоСотрудникам.ФизическоеЛицо
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Подразделение = ОтработанноеВремяПоСотрудникам.Подразделение
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Начисление = ОтработанноеВремяПоСотрудникам.Начисление
			|		ПО Регистраторы.Регистратор = ОтработанноеВремяПоСотрудникамКорректировка.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
		
			НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникамКорректировка.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

Процедура ЗаполнитьВремяВЧасахОтработанноеВремяПоСотрудникамКорректировка(ПараметрыОбновления = Неопределено) Экспорт
	
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|		ПО ОтработанноеВремяПоСотрудникамКорректировка.Период = ОтработанноеВремяПоСотрудникам.Период
		|			И ОтработанноеВремяПоСотрудникамКорректировка.Организация = ОтработанноеВремяПоСотрудникам.Организация
		|			И ОтработанноеВремяПоСотрудникамКорректировка.ФизическоеЛицо = ОтработанноеВремяПоСотрудникам.ФизическоеЛицо
		|			И ОтработанноеВремяПоСотрудникамКорректировка.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
		|			И ОтработанноеВремяПоСотрудникамКорректировка.Подразделение = ОтработанноеВремяПоСотрудникам.Подразделение
		|			И ОтработанноеВремяПоСотрудникамКорректировка.Начисление = ОтработанноеВремяПоСотрудникам.Начисление
		|			И ОтработанноеВремяПоСотрудникамКорректировка.ИдентификаторСтроки = ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникамКорректировка.ВремяВЧасах <> ОтработанноеВремяПоСотрудникам.ВремяВЧасах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТРегистраторы КАК Регистраторы";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ОбработкаЗавершена = Ложь;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтработанноеВремяПоСотрудникам.ВремяВЧасах КАК ВремяВЧасах,
			|	ОтработанноеВремяПоСотрудникамКорректировка.Регистратор КАК Регистратор,
			|	ОтработанноеВремяПоСотрудникамКорректировка.*
			|ИЗ
			|	ВТРегистраторы КАК Регистраторы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка КАК ОтработанноеВремяПоСотрудникамКорректировка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
			|			ПО ОтработанноеВремяПоСотрудникамКорректировка.Период = ОтработанноеВремяПоСотрудникам.Период
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Организация = ОтработанноеВремяПоСотрудникам.Организация
			|				И ОтработанноеВремяПоСотрудникамКорректировка.ФизическоеЛицо = ОтработанноеВремяПоСотрудникам.ФизическоеЛицо
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Сотрудник = ОтработанноеВремяПоСотрудникам.Сотрудник
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Подразделение = ОтработанноеВремяПоСотрудникам.Подразделение
			|				И ОтработанноеВремяПоСотрудникамКорректировка.Начисление = ОтработанноеВремяПоСотрудникам.Начисление
			|				И ОтработанноеВремяПоСотрудникамКорректировка.ИдентификаторСтроки = ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки
			|		ПО Регистраторы.Регистратор = ОтработанноеВремяПоСотрудникамКорректировка.Регистратор
			|
			|УПОРЯДОЧИТЬ ПО
			|	Регистратор";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрНакопления.ОтработанноеВремяПоСотрудникамКорректировка.НаборЗаписей", "Регистратор", Выборка.Регистратор) Тогда
				Продолжить;
			КонецЕсли;
		
			НаборЗаписей = РегистрыНакопления.ОтработанноеВремяПоСотрудникамКорректировка.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Пока Выборка.Следующий() Цикл
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", ОбработкаЗавершена);
	
КонецПроцедуры

#КонецОбласти







 


