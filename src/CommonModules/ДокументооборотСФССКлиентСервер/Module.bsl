
#Область ПрограммныйИнтерфейс

Процедура УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки) Экспорт
	
	Для Каждого Эл Из ПараметрыПрорисовкиКнопокОтправки Цикл
		ЭУ = Форма.Элементы.Найти(Эл.Ключ);
		Если ЭУ <> Неопределено Тогда
			ЭУ.Видимость = Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовкиПанели = Неопределено) Экспорт
	
	// если кнопка отправки отсутствует, то не будем регулировать
	КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ОтправитьВКонтролирующийОрган");
	Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
		КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ФормаОтправитьРеестрВФСС");
		Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияСсылка = ПолучитьОрганизациюПоФорме(Форма);
	
	// прорисовываем кнопки отправки
	ПараметрыПрорисовкиКнопокОтправки   = ПараметрыПрорисовкиКнопокОтправки(ОрганизацияСсылка);
	// прорисовываем панель отправки
	ПараметрыПрорисовкиПанели 			= ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	
	// регулируем видимость кнопки в зависимости от результата
	УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки);
	
КонецПроцедуры

Функция ПараметрыПрорисовкиКнопокОтправки(ОрганизацияСсылка) Экспорт
	
	ПараметрыПрорисовкиКнопокОтправки = Новый Структура;
	
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
	
	НастройкиОбмена = ДокументооборотСКОВызовСервера.ПолучитьНастройкиФСС(ОрганизацияСсылка);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;
	ОнлайнПроверкаДоступна = НастройкиОбмена.ОнлайнПроверкаДоступна;
	
	Если НЕ ИспользоватьОбмен Тогда
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ФормаИсторияОтправок", Ложь);
	КонецЕсли;
	
	УчетнаяЗапись = ДокументооборотСКОВызовСервера.УчетнаяЗаписьОрганизации(ОрганизацияСсылка);
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если НЕ ОнлайнПроверкаДоступна Тогда
			ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
		КонецЕсли;
	Иначе
		// Если нет учетной записи, то оставляем меню ПроверитьВИнтернете, чтобы по нему показывать предложение подключиться
		ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Истина);
	КонецЕсли;
	
	Возврат ПараметрыПрорисовкиКнопокОтправки;
	
КонецФункции

Процедура ПриИзмененииОрганизацииВРегламентированномОтчете(Форма) Экспорт
	
	// если кнопка отправки отсутствует, то не будем регулировать
	КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ОтправитьВКонтролирующийОрган");
	Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = ПолучитьОрганизациюПоФорме(Форма);
	ПараметрыПрорисовкиКнопокОтправки = Новый Структура;
	
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
	
	НастройкиОбмена = ДокументооборотСКОВызовСервера.ПолучитьНастройкиФСС(ОрганизацияСсылка);
	ИспользоватьОбмен = НастройкиОбмена.ИспользоватьОбмен;
	ОнлайнПроверкаДоступна = НастройкиОбмена.ОнлайнПроверкаДоступна;
	
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ФормаИсторияОтправок", ИспользоватьОбмен);
	
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", ОнлайнПроверкаДоступна);
	
	// прорисовываем панель отправки
	ПараметрыПрорисовкиПанели = ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	
	// регулируем видимость кнопки в зависимости от результата
	УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПрименитьПараметрыПрорисовкиПанелиОтправки(Форма, ПараметрыПрорисовкиПанели);
	
КонецПроцедуры

Функция ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма) Экспорт
	
	ОтчетСсылка 		= СсылкаНаОтчетПоФорме(Форма);
	ОрганизацияСсылка 	= ПолучитьОрганизациюПоФорме(Форма);
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(ОтчетСсылка, ОрганизацияСсылка, "ФСС");
		
	Возврат ПараметрыПрорисовкиПанелиОтправки;
	
КонецФункции

Функция СсылкаНаОтчетПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "мСохраненныйДок") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Ссылка") Тогда
		Возврат Форма.Объект.Ссылка;
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "ДлительнаяОперация") <> 0
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ОтчетСсылка") Тогда
		Возврат Форма.ОтчетСсылка;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОрганизациюПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "Организация") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.Организация;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Организация") Тогда
		СсылкаНаОрганизацию = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме(Форма);
		Возврат ?(ЗначениеЗаполнено(СсылкаНаОрганизацию), СсылкаНаОрганизацию, Форма.Объект.Организация);
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "ДлительнаяОперация") <> 0
		И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ТекущаяОрганизация") Тогда
		Возврат Форма.ТекущаяОрганизация;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОрганизациюОтправляемогоДокументаПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак того, является ли документ, ссылка на который 
// передается в параметре, реестром сведений ФСС на выплату пособий, 
// предназначенным для формирования и отправки файла выгрузки в ФСС
// 
// Параметры:
//	Ссылка на документ.
//
// Результат:
//	Булево.
//
Функция ЭтоРеестрСведенийНаВыплатуПособийФСС(ОбъектСсылка) Экспорт
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(ОбъектСсылка);
	ИмяДокументаРеестрСведенийНаВыплатуПособийФСС 	= ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных("РеестрСведенийНаВыплатуПособийФСС");
	Если ИмяДокументаРеестрСведенийНаВыплатуПособийФСС <> Неопределено И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаРеестрСведенийНаВыплатуПособийФСС) Тогда
		ЭтоРеестрСведений = Истина;
	Иначе
		ЭтоРеестрСведений = Ложь;
	КонецЕсли;
	
	Возврат ЭтоРеестрСведений;
	
КонецФункции

// Функция возвращает признак того, является ли документ, ссылка на который
// передается в параметре, реестром данных ЭЛН, заполняемых работодателем,
// предназначенным для формирования и отправки файла выгрузки в ФСС
//
// Параметры:
//	ОбъектСсылка 							- Ссылка на документ.
//	ОбъектМетаданныхПоУмолчаниюСуществует 	- Булево.
//
// Результат:
//	Булево.
//
Функция ЭтоРеестрДанныхЭЛНЗаполняемыхРаботодателем(ОбъектСсылка, ОбъектМетаданныхПоУмолчаниюСуществует = Ложь) Экспорт
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(ОбъектСсылка);
	ИмяДокументаРеестрДанныхЭЛНЗаполняемыхРаботодателем =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных(
		"РеестрДанныхЭЛНЗаполняемыхРаботодателем");
	Если ИмяДокументаРеестрДанныхЭЛНЗаполняемыхРаботодателем = Неопределено И ОбъектМетаданныхПоУмолчаниюСуществует Тогда
		ИмяДокументаРеестрДанныхЭЛНЗаполняемыхРаботодателем = "РеестрДанныхЭЛНЗаполняемыхРаботодателем";
	КонецЕсли;
	
	Возврат ИмяДокументаРеестрДанныхЭЛНЗаполняемыхРаботодателем <> Неопределено
		И ТипЗнчСсылкаНаОтчет = Тип("ДокументСсылка." + ИмяДокументаРеестрДанныхЭЛНЗаполняемыхРаботодателем);
	
КонецФункции

// Функция возвращает признак того, является ли документ, ссылка на который
// передается в параметре, реестром стимулирующих выплат медицинским и социальным работникам
// 
// Параметры:
//	ОбъектСсылка 							- Ссылка на документ.
//	ОбъектМетаданныхПоУмолчаниюСуществует 	- Булево.
//
// Результат:
//	Булево.
//
Функция ЭтоРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам(
		ОбъектСсылка,
		ОбъектМетаданныхПоУмолчаниюСуществует = Ложь) Экспорт
	
	ТипЗнчСсылкаНаОтчет = ТипЗнч(ОбъектСсылка);
	ИмяДокументаРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ИмяОбъектаМетаданных(
		"РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам");
	Если ИмяДокументаРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам = Неопределено
		И ОбъектМетаданныхПоУмолчаниюСуществует Тогда
		ИмяДокументаРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам =
			"РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам";
	КонецЕсли;
	
	Возврат ИмяДокументаРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам <> Неопределено
		И ТипЗнчСсылкаНаОтчет =
		Тип("ДокументСсылка." + ИмяДокументаРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам);
	
КонецФункции

Функция ТипыСообщенийСЭДО(ВозвращатьСтроковыеПредставленияКодов = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипСообщенийПодтвержденияОПолучении",											6);
	Результат.Вставить("ТипСообщенияРезультатПодпискиСнятияПодпискиАбонентовОперавтора", 				9);
	Результат.Вставить("ТипСообщенийОтветаНаПодтверждениеОПолучении",									11);
	Результат.Вставить("ТипСообщенийРезультПодпискиСтрахователя",										12);
	Результат.Вставить("ТипСообщенияНайденыОшибкиПриОбработкеСообщения", 								14);
	Результат.Вставить("ТипСообщенияЗаявлениеНаПодтверждениеВидаДеятельности", 							15);
	Результат.Вставить("ТипСообщенияУведомлениеОбИзмененииСтатусаПодтвержденияВидаДеятельности", 		16);
	Результат.Вставить("ТипСообщенияОтчет4ФСС", 														29);
	Результат.Вставить("ТипСообщенияРезультатОбработкиОтчета4ФСС", 										30);
	Результат.Вставить("ТипСообщенияРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам", 		42);
	Результат.Вставить("ТипСообщенияРезультатОбработкиРеестраСтимулирующихВыплатМедИСоцРаботникам", 	43);
	Результат.Вставить("ТипСообщенияСозданиеМашиночитаемойДоверенностиФСС", 							200);
	Результат.Вставить("ТипСообщенияРезультатСозданияМашиночитаемойДоверенностиФСС", 					206);
	Результат.Вставить("ТипСообщенияОтзывМашиночитаемойДоверенностиФСС", 								201);
	Результат.Вставить("ТипСообщенияРезультатОтзываМашиночитаемойДоверенностиФСС", 						207);
	Результат.Вставить("ТипСообщенияЗапросСпискаМашиночитаемыхДоверенностейФСС", 						202);
	Результат.Вставить("ТипСообщенияСписокМашиночитаемыхДоверенностейФСС", 								208);
	Результат.Вставить("ТипСообщенияЗапросМашиночитаемойДоверенностиФСС", 								203);
	Результат.Вставить("ТипСообщенияМашиночитаемаяДоверенностьФСС", 									209);
	Результат.Вставить("ТипСообщенияЗапросСправочникаПолномочийМашиночитаемыхДоверенностейФСС", 		205);
	Результат.Вставить("ТипСообщенияСправочникПолномочийМашиночитаемыхДоверенностейФСС", 				211);
	Результат.Вставить("ТипСообщенияЗапросПолномочийУполномоченногоМашиночитаемойДоверенностиФСС", 		204);
	Результат.Вставить("ТипСообщенияПолномочияУполномоченногоМашиночитаемойДоверенностиФСС", 			210);
	Результат.Вставить("ТипСообщенияЗапросИсторическихСообщенийЗаДатуАбонентом", 						330);
	Результат.Вставить("ТипСообщенияОтветНаЗапросИсторическихДанных", 									332);
	Результат.Вставить("ТипСообщенияПодтверждениеДоставкиОператоромВСФРАльтернативный", 				1000000);
	Результат.Вставить("ТипСообщенияРезультатПодпискиСнятияПодпискиАбонентовОтОперавтора", 				1000009);
	Результат.Вставить("ТипСообщенияПодтверждениеДоставкиОператоромВСФР", 								1000011);
	Результат.Вставить("ТипСообщенияНайденыОшибкиПриОбработкеСообщенияОператором", 						1000014);
	// Сообщения обращений к страхователю.
	Результат.Вставить("ТипСообщенияОбращениеСФРКСтрахователю", 										1001);
	Результат.Вставить("ТипСообщенияОтветНаОбращениеСФРКСтрахователю", 									1000);
	Результат.Вставить("ТипСообщенияРезультатПриемаОтветаНаОбращениеСФРКСтрахователю", 					1002);
	// Сообщения по доходной части.
	Результат.Вставить("АктКамеральнойПроверки", 														300);
	Результат.Вставить("РешениеОПривлеченииКОтветственностиПоРезультатамКамеральнойПроверки", 			301);
	Результат.Вставить("РешениеОбОтказеВПривлеченииКОтветственностиПоРезультатамКамеральнойПроверки", 	302);
	Результат.Вставить("ТребованиеОПредставленииДокументовПоКамеральнойПроверке", 						303);
	Результат.Вставить("РешениеОВозмещенииИзлишнеПонесенныхРасходовПоРезультатамКамеральнойПроверки", 	304);
	Результат.Вставить("АктВыезднойПроверки", 															305);
	Результат.Вставить("РешениеОПривлеченииКОтветственностиПоРезультатамВыезднойПроверки", 				306);
	Результат.Вставить("РешениеОбОтказеВПривлеченииКОтветственностиПоРезультатамВыезднойПроверки", 		307);
	Результат.Вставить("ТребованиеОПредставленииДокументовПоВыезднойПроверке", 							308);
	Результат.Вставить("РешениеОВозмещенииИзлишнеПонесенныхРасходовПоРезультатамВыезднойПроверки", 		309);
	Результат.Вставить("ТребованиеОбУплатеНедоимкиПоСтраховымВзносамПенейИШтрафов", 					310);
	Результат.Вставить("РешениеОВзыскании", 															311);
	Результат.Вставить("ТребованиеОВозмещенииИзлишнеПонесенныхРасходов", 								312);
	Результат.Вставить("ОтветСтрахователяНаЗапросДокументовПоКамеральнойПроверке", 						313);
	Результат.Вставить("ОтветСтрахователяНаЗапросДокументовПоВыезднойПроверке", 						314);
	Результат.Вставить("УведомлениеОПриемеДокументовПоКамеральнойПроверке", 							315);
	Результат.Вставить("УведомлениеОПриемеДокументовПоВыезднойПроверке", 								316);
	Результат.Вставить("РезультатРегистрацииЗаявленияНаФормированиеСправкиОрасчетах", 					318);
	Результат.Вставить("СправкаОРасчетах", 																319);
	Результат.Вставить("УведомлениеОФактеИзлишнейУплаты", 												333);
	Результат.Вставить("РешениеОЗачетеСуммыИзлишнеУплаченныхВзносовШтрафов", 							335);
	Результат.Вставить("РешениеОВозвратеСуммыИзлишнеУплаченныхВзносовШтрафов", 							336);
	// Выплаты и пособия.
	Результат.Вставить("ЗапросНедостающихСведенийДляПроактивнойВыплатыСтраховогоОбеспечения", 			100);
	Результат.Вставить("ТипСообщенияУведомлениеОтветНаВходящийЗапросНеПоступилВовремя", 				124);
	
	Если ВозвращатьСтроковыеПредставленияКодов Тогда
		Для каждого КлючИЗначение Из Результат Цикл
			Результат[КлючИЗначение.Ключ] = ЭлектронныйДокументооборотСФССКлиентСервер.ТипСообщенияСЭДОВСтроку(
				КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипВзаимодействияСтраховательСЭДО() Экспорт
	
	Возврат 2;
	
КонецФункции

Функция ТипВзаимодействияОрганизацияСЭДО() Экспорт
	
	Возврат 3;
	
КонецФункции

Функция НастройкиМЧДФСС() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДоверительФЛУдостоверениеИспользуется", 		Ложь);
	Результат.Вставить("ПредставительСотрудникСУказаниемОрганизации", 	Ложь);
	Результат.Вставить("ПредставительФЛУдостоверениеОбязательно", 		Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ТипВзаимодействияСЭДО(
		ТипСообщения,
		ТипВзаимодействияПоУмолчанию = Неопределено,
		ОтправкаЧерезСЭДО = Неопределено) Экспорт
	
	Результат = ТипВзаимодействияПоУмолчанию;
	Если Результат = Неопределено Тогда
		Результат = ТипВзаимодействияСтраховательСЭДО();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипСообщения) И (ТипЗнч(ТипСообщения) = Тип("Число")
		ИЛИ ТипЗнч(ТипСообщения) = Тип("Строка") И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ТипСообщения)) Тогда
		
		ТипыСообщений = ТипыСообщенийСЭДО(Ложь);
		ТипСообщенияЧислом = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ТипСообщенияСЭДОВЧисло(ТипСообщения);
		
		Если ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияСозданиеМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияРезультатСозданияМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияОтзывМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияРезультатОтзываМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияЗапросСпискаМашиночитаемыхДоверенностейФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияСписокМашиночитаемыхДоверенностейФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияЗапросМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияМашиночитаемаяДоверенностьФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияЗапросСправочникаПолномочийМашиночитаемыхДоверенностейФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияСправочникПолномочийМашиночитаемыхДоверенностейФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияЗапросПолномочийУполномоченногоМашиночитаемойДоверенностиФСС
			ИЛИ ТипСообщенияЧислом = ТипыСообщений.ТипСообщенияПолномочияУполномоченногоМашиночитаемойДоверенностиФСС Тогда
			
			Результат = ТипВзаимодействияОрганизацияСЭДО();
		КонецЕсли;
		
	ИначеЕсли ТипСообщения =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.МашиночитаемыеДоверенностиФСС")
		ИЛИ ТипСообщения = Тип("СправочникСсылка.МашиночитаемыеДоверенностиФСС")
		ИЛИ ТипСообщения =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ОтзывМашиночитаемойДоверенностиФСС")
		ИЛИ ТипСообщения =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗапросМашиночитаемойДоверенностиФСС")
		ИЛИ ТипСообщения =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ЗапросСправочникаПолномочийМашиночитаемойДоверенностиФСС") Тогда
		
		Результат = ТипВзаимодействияОрганизацияСЭДО();
		
	ИначеЕсли ТипЗнч(ТипСообщения) = Тип("СправочникСсылка.ВидыОтправляемыхДокументов")
		И (ОтправкаЧерезСЭДО = Истина ИЛИ ОтправкаЧерезСЭДО <> Ложь И ПараметрыОтправкиВидаДокументаЧерезСЭДО(
		ТипСообщения, Ложь, Ложь).ОтправкаЧерезСЭДО <> Ложь) Тогда
		
		Результат = ТипВзаимодействияСтраховательСЭДО();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиТекстовЗапросовСЭДОФСС() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипВзаимодействия", 			Неопределено);
	Результат.Вставить("ИНН", 							"");
	Результат.Вставить("КПП", 							"");
	Результат.Вставить("ОГРН", 							"");
	Результат.Вставить("СНИЛС", 						"");
	Результат.Вставить("ОбменПоСЭДОНапрямую", 			Ложь);
	Результат.Вставить("ИдентификаторАбонентаСЭДО", 	"");
	Результат.Вставить("ИдентификаторСообщенияСЭДО", 	"");
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПараметровТипаВзаимодействияСЭДО(РегистрационныйНомерФСС, Настройки) Экспорт
	
	Если Настройки.ТипВзаимодействия = ТипВзаимодействияОрганизацияСЭДО() Тогда
		Если ЗначениеЗаполнено(Настройки.ОГРН) Тогда
			Если ЗначениеЗаполнено(Настройки.КПП) Тогда
				Возврат СтрШаблон("
					|         <org>
					|            <ogrn>%1</ogrn>
					|            <inn>%2</inn>
					|            <kpp>%3</kpp>
					|         </org>",
					Настройки.ОГРН,
					Настройки.ИНН,
					Настройки.КПП);
				
			Иначе
				Возврат СтрШаблон("
					|         <org>
					|            <ogrnip>%1</ogrnip>
					|            <inn>%2</inn>
					|            <snils>%3</snils>
					|         </org>",
					Настройки.ОГРН,
					Настройки.ИНН,
					ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(Настройки.СНИЛС));
			КонецЕсли;
			
		Иначе
			Возврат СтрШаблон("
				|         <org>
				|            <snils>%1</snils>
				|            <inn>%2</inn>
				|            <regnum>%3</regnum>
				|         </org>",
				ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.СНИЛСБезРазделителей(Настройки.СНИЛС),
				Настройки.ИНН,
				РегистрационныйНомерФСС);
		КонецЕсли;
		
	Иначе
		Возврат СтрШаблон("
			|         <recipientId>%1</recipientId>",
			Строка(РегистрационныйНомерФСС));
	КонецЕсли;
	
КонецФункции

Функция ПараметрыОтправкиВидаДокументаЧерезСЭДО(
		ВидОтправляемогоДокумента,
		ПроверитьНаступлениеСобытия = Истина,
		ПроверитьВсеВидыЧерезТипВзаимодействия = Истина,
		ТекстВыгрузки = Неопределено,
		НастройкиВызова = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправкаЧерезСЭДО", Ложь);
	Результат.Вставить("ТипСообщения",		0);
	Результат.Вставить("ОписаниеОшибки", 	НСтр("ru = 'Не удалось отправить документ.';
													|en = 'Не удалось отправить документ.'") + Символы.ВК + Символы.ПС + "%1");
	Результат.Вставить("ТекстВыгрузки", 	ТекстВыгрузки);
	
	Если ВидОтправляемогоДокумента =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.ПодтверждениеВидаДеятельности") Тогда
		
		Результат.ОтправкаЧерезСЭДО = ?(ПроверитьНаступлениеСобытия,
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.ПОВЭД через СЭДО", Истина),
			Неопределено);
		Результат.ТипСообщения = ТипыСообщенийСЭДО().ТипСообщенияЗаявлениеНаПодтверждениеВидаДеятельности;
		Результат.ОписаниеОшибки =
			НСтр("ru = 'Не удалось отправить подтверждение основного вида деятельности.';
				|en = 'Не удалось отправить подтверждение основного вида деятельности.'") + Символы.ВК + Символы.ПС + "%1";
		Результат.ТекстВыгрузки = ВыгрузкаПодтвержденияВидаДеятельностиДляСЭДО(ТекстВыгрузки);
		
	ИначеЕсли ВидОтправляемогоДокумента =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.Отчет4ФСС") Тогда
		
		Результат.ОтправкаЧерезСЭДО = ?(ПроверитьНаступлениеСобытия,
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.4-ФСС через СЭДО"), Неопределено);
		Результат.ТипСообщения = ТипыСообщенийСЭДО().ТипСообщенияОтчет4ФСС;
		Результат.ОписаниеОшибки =
			НСтр("ru = 'Не удалось отправить 4-ФСС.';
				|en = 'Не удалось отправить 4-ФСС.'") + Символы.ВК + Символы.ПС + "%1";
		Результат.ТекстВыгрузки = Выгрузка4ФССДляСЭДО(ТекстВыгрузки);
		
	ИначеЕсли ВидОтправляемогоДокумента =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.РеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам") Тогда
		
		ЭтоРеестрСтимулирующихВыплат2023 = ?(НастройкиВызова <> Неопределено
			И НастройкиВызова.Свойство("ЭтоРеестрСтимулирующихВыплат2023"), НастройкиВызова.ЭтоРеестрСтимулирующихВыплат2023, Ложь);
		
		Результат.ОтправкаЧерезСЭДО = ?(ЭтоРеестрСтимулирующихВыплат2023, Ложь, ?(ПроверитьНаступлениеСобытия,
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Отпр.ССВ через СЭДО"), Неопределено));
		Результат.ТипСообщения = ТипыСообщенийСЭДО().ТипСообщенияРеестрСтимулирующихВыплатМедицинскимИСоциальнымРаботникам;
		Результат.ОписаниеОшибки =
			НСтр("ru = 'Не удалось отправить реестр стимулирующих выплат медицинским и социальным работникам.';
				|en = 'Не удалось отправить реестр стимулирующих выплат медицинским и социальным работникам.'")
			+ Символы.ВК + Символы.ПС + "%1";
		Результат.ТекстВыгрузки = ВыгрузкаРеестраСтимулирующихВыплатМедицинскимИСоциальнымРаботникамДляСЭДО(ТекстВыгрузки);
		
	ИначеЕсли ВидОтправляемогоДокумента =
		ПредопределенноеЗначение("Справочник.ВидыОтправляемыхДокументов.МашиночитаемыеДоверенностиФСС") Тогда
		
		Результат.ОтправкаЧерезСЭДО = Истина;
		Результат.ТипСообщения = ТипыСообщенийСЭДО().ТипСообщенияСозданиеМашиночитаемойДоверенностиФСС;
		Результат.ОписаниеОшибки =
			НСтр("ru = 'Не удалось отправить машиночитаемую доверенность (ФСС).';
				|en = 'Не удалось отправить машиночитаемую доверенность (ФСС).'") + Символы.ВК + Символы.ПС + "%1";
			
	Иначе
		Результат.ОтправкаЧерезСЭДО = ?(ПроверитьВсеВидыЧерезТипВзаимодействия,
			ТипВзаимодействияСЭДО(ВидОтправляемогоДокумента, -1) <> -1, Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузкаПодтвержденияВидаДеятельностиДляСЭДО(ТекстВыгрузки)
	
	Результат = ТекстВыгрузки;
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияПрефикса = СтрНайти(Результат, "<OKVEDConfirmationRequest");
	Если ПозицияПрефикса > 0 Тогда
		Результат = Сред(Результат, ПозицияПрефикса);
		
		ТекстПостфикса = "</OKVEDConfirmationRequest>";
		ПозицияПостфикса = СтрНайти(Результат, ТекстПостфикса);
		Если ПозицияПостфикса > 0 Тогда
			Пока ПозицияПостфикса > 1 Цикл
				СимволПередПостфиксом = Сред(Результат, ПозицияПостфикса - 1, 1);
				Если ЗначениеЗаполнено(СимволПередПостфиксом) ИЛИ СимволПередПостфиксом = Символы.ВК
					ИЛИ СимволПередПостфиксом = Символы.ПС Тогда
					
					Прервать;
				КонецЕсли;
				
				ПозицияПостфикса = ПозицияПостфикса - 1;
			КонецЦикла;
			
			Результат = Лев(Результат, ПозицияПостфикса - 1) + ТекстПостфикса;
		КонецЕсли;
	КонецЕсли;
	
	ПозицияПрефикса = СтрНайти(Результат, "<systemInfo");
	Если ПозицияПрефикса > 0 Тогда
		Пока ПозицияПрефикса > 1 Цикл
			СимволПередПрефиксом = Сред(Результат, ПозицияПрефикса - 1, 1);
			Если ЗначениеЗаполнено(СимволПередПрефиксом) ИЛИ СимволПередПрефиксом = Символы.ВК
				ИЛИ СимволПередПрефиксом = Символы.ПС Тогда
				
				Прервать;
			КонецЕсли;
			
			ПозицияПрефикса = ПозицияПрефикса - 1;
		КонецЦикла;
		
		ТекстПостфикса = "</systemInfo>";
		ПозицияПослеПостфикса = СтрНайти(Результат, ТекстПостфикса);
		Если ПозицияПослеПостфикса > 0 Тогда
			ПозицияПослеПостфикса = ПозицияПослеПостфикса + СтрДлина(ТекстПостфикса);
		Иначе
			ПозицияПослеПостфикса = СтрНайти(Результат, ">");
			Если ПозицияПослеПостфикса > 0 Тогда
				ПозицияПослеПостфикса = ПозицияПослеПостфикса + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если ПозицияПослеПостфикса > 0 Тогда
			Если Сред(Результат, ПозицияПослеПостфикса, 2) = Символы.ВК + Символы.ПС Тогда
				ПозицияПослеПостфикса = ПозицияПослеПостфикса + 2;
			Иначе
				СимволПослеПостфикса = Сред(Результат, ПозицияПослеПостфикса, 1);
				Если СимволПослеПостфикса = Символы.ВК ИЛИ СимволПослеПостфикса = Символы.ПС Тогда
					ПозицияПослеПостфикса = ПозицияПослеПостфикса + 1;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Лев(Результат, ПозицияПрефикса - 1) + Сред(Результат, ПозицияПослеПостфикса);
		КонецЕсли;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, " xmlns=""""", "");
	Результат = СтрЗаменить(Результат, "<insurerRegNumber>", "<regNum>");
	Результат = СтрЗаменить(Результат, "</insurerRegNumber>", "</regNum>");
	Результат = СтрЗаменить(Результат, "<INN>", "<inn>");
	Результат = СтрЗаменить(Результат, "</INN>", "</inn>");
	Результат = СтрЗаменить(Результат, "<OGRN>", "<ogrn>");
	Результат = СтрЗаменить(Результат, "</OGRN>", "</ogrn>");
	Результат = СтрЗаменить(Результат, "<KPP>", "<kpp>");
	Результат = СтрЗаменить(Результат, "</KPP>", "</kpp>");
	
	Результат = СтрЗаменить(Результат, "<OKVEDConfirmationRequest", "<ns2:statementPovedRequest");
	Результат = СтрЗаменить(Результат, "</OKVEDConfirmationRequest>", "</ns2:statementPovedRequest>");
	Результат = СтрЗаменить(Результат, "xmlns=""http://ws.fss.ru/services/okvedconfirm""",
		"xmlns:ns2=""http://ws.fss.ru/integration/types/rust/poved/v01""");
	Результат = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|" + Результат;
	
	Возврат Результат;
	
КонецФункции

Функция Выгрузка4ФССДляСЭДО(ТекстВыгрузки)
	
	Результат = ТекстВыгрузки;
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияПрефикса = СтрНайти(Результат, "<F4REPORT");
	Если ПозицияПрефикса > 0 Тогда
		Результат = Сред(Результат, ПозицияПрефикса);
		ПозицияПрефикса = СтрНайти(Результат, ">");
		Если ПозицияПрефикса > 0 Тогда
			Результат = Сред(Результат, ПозицияПрефикса + 1);
		
			ТекстПостфикса = "</F4REPORT>";
			ПозицияПостфикса = СтрНайти(Результат, ТекстПостфикса);
			Если ПозицияПостфикса > 0 Тогда
				Пока ПозицияПостфикса > 1 Цикл
					СимволПередПостфиксом = Сред(Результат, ПозицияПостфикса - 1, 1);
					Если ЗначениеЗаполнено(СимволПередПостфиксом) ИЛИ СимволПередПостфиксом = Символы.ВК
						ИЛИ СимволПередПостфиксом = Символы.ПС Тогда
						
						Прервать;
					КонецЕсли;
					
					ПозицияПостфикса = ПозицияПостфикса - 1;
				КонецЦикла;
				
				Результат = Лев(Результат, ПозицияПостфикса - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "<", "<ns2:");
	Результат = СтрЗаменить(Результат, "<ns2:/", "</ns2:");
	
	Результат = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|<ns3:F4REPORT xmlns:ns2=""http://fz122.fss.ru"" xmlns:ns3=""http://www.fss.ru/integration/types/sedo/v01"">"
		+ Результат + "</ns3:F4REPORT>";
	
	Возврат Результат;
	
КонецФункции

Функция ВыгрузкаРеестраСтимулирующихВыплатМедицинскимИСоциальнымРаботникамДляСЭДО(ТекстВыгрузки)
	
	Результат = ТекстВыгрузки;
	Если Результат = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИмяУзлаРеестра = "submitCovidWorkerRegistrRequest";
	ИмяСхемыРеестра = "CovidWorkerRegistr.xsd";
	ИмяУзлаРеестра2023 = "submit2023WorkerRegistrRequest";
	ИмяСхемыРеестра2023 = "2023WorkerRegistr.xsd";
	ПространствоИменРеестра = "http://www.fss.ru/integration/types/pvso/quarantine/covidworkerregistr/v01";
	
	Для НомерРеестра = 1 По 2 Цикл
		ПозицияПрефикса = СтрНайти(Результат, "<" + ИмяУзлаРеестра);
		Если ПозицияПрефикса > 0 Тогда
			Результат = Сред(Результат, ПозицияПрефикса);
			
			ТекстПостфикса = "</" + ИмяУзлаРеестра + ">";
			ПозицияПостфикса = СтрНайти(Результат, ТекстПостфикса);
			Если ПозицияПостфикса > 0 Тогда
				Пока ПозицияПостфикса > 1 Цикл
					СимволПередПостфиксом = Сред(Результат, ПозицияПостфикса - 1, 1);
					Если ЗначениеЗаполнено(СимволПередПостфиксом) ИЛИ СимволПередПостфиксом = Символы.ВК
						ИЛИ СимволПередПостфиксом = Символы.ПС Тогда
						
						Прервать;
					КонецЕсли;
					
					ПозицияПостфикса = ПозицияПостфикса - 1;
				КонецЦикла;
				
				Результат = Лев(Результат, ПозицияПостфикса - 1) + ТекстПостфикса;
			КонецЕсли;
			
			Прервать;
			
		ИначеЕсли НомерРеестра = 1 Тогда
			ИмяУзлаРеестра = ИмяУзлаРеестра2023;
			ИмяСхемыРеестра = ИмяСхемыРеестра2023;
		КонецЕсли;
	КонецЦикла;
	
	Результат = СтрЗаменить(Результат, " xmlns:xs=""http://www.w3.org/2001/XMLSchema""", "");
	
	Если СтрНайти(Результат, " xmlns=""" + ПространствоИменРеестра + """") = 0 Тогда
		Результат = СтрЗаменить(Результат, "<" + ИмяУзлаРеестра,
			"<" + ИмяУзлаРеестра + " xmlns:n1=""" + ПространствоИменРеестра + """");
		
	Иначе
		Результат = СтрЗаменить(Результат, " xmlns=""" + ПространствоИменРеестра + """",
			" xmlns:n1=""" + ПространствоИменРеестра + """");
	КонецЕсли;
	
	ПозицияКонца = СтрНайти(Результат, ">");
	Если ПозицияКонца > 0 Тогда
		Результат = Лев(Результат, ПозицияКонца - 1) +
			" xsi:schemaLocation=""" + ПространствоИменРеестра + " " + ИмяСхемыРеестра + """" + Сред(Результат, ПозицияКонца);
	КонецЕсли;
	
	Результат = СтрЗаменить(Результат, "<", "<n1:");
	Результат = СтрЗаменить(Результат, "<n1:/", "</n1:");
	
	Результат = "<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
		|" + Результат;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти