////////////////////////////////////////////////////////////////////////////////
// Отражение зарплаты в бухгалтерском учете.
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьСтраницуНастройкиБухучетаНачислений(Форма) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	КатегорияНачисления = Объект.КатегорияНачисленияИлиНеоплаченногоВремени;
	
	Если КатегорияНачисленийБезОплаты(КатегорияНачисления) Тогда 
		Элементы.НалоговыйИБухгалтерскийУчет.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.НалоговыйИБухгалтерскийУчет.Видимость = Истина;
	КонецЕсли;
	
	Если ЭтоКатегорияНачисленияОплатаДолиРКСН(КатегорияНачисления) Тогда
		КатегорияНачисления = КатегрияОсновногоВидаРасчета(Объект);
	КонецЕсли;
	
	Если КатегорияНачисленийПособияФСС(КатегорияНачисления) Тогда
		
		СписокВыбора = Элементы.СтратегияОтраженияВУчетеПособия.СписокВыбора;
		
		Если Форма.ИспользоватьСтатьиФинансирования Тогда
			
			Элементы.СтраницыОтражениеВБухучете.ТекущаяСтраница = Элементы.СтраницаОтражениеВБухучетеПособияФСС;
			
			ПоказыватьСтатьюРасходов = Ложь;
			
			Если КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами") Тогда
				СтрокаВыбора = "ПоДаннымОСотруднике,ПоБазеСреднегоЗаработка,КакЗаданоВидуРасчета";
				ПоказыватьСтатьюРасходов = Форма.РаботаВБюджетномУчреждении;
			ИначеЕсли КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами") Тогда
				СтрокаВыбора = "ПоДаннымОСотруднике,ПоБазовымРасчетам,КакЗаданоВидуРасчета";
				ПоказыватьСтатьюРасходов = Форма.РаботаВБюджетномУчреждении;
			Иначе
				СтрокаВыбора = "ПоФактическимНачислениям,ПоДаннымОСотруднике,ПоБазеСреднегоЗаработка,КакЗаданоВидуРасчета";
			КонецЕсли;
			
			ЗаполнитьСписокВыборкаСтратегии(СписокВыбора, СтрокаВыбора);
			Элементы.СтатьяРасходовДнейУходаЗаДетьмиИнвалидами.Видимость = ПоказыватьСтатьюРасходов;
			
		Иначе
			Элементы.СтраницыОтражениеВБухучете.ТекущаяСтраница = Элементы.СтраницаБухучетПособияФСС;
		КонецЕсли;
		
	Иначе
		
		СписокВыбора = Элементы.СтратегияОтраженияВУчете.СписокВыбора;
		Элементы.СтраницыОтражениеВБухучете.ТекущаяСтраница = Элементы.СтраницаОтражениеВБухучете;
		
		Если КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя") Тогда
			
			Если Форма.ИспользоватьСтатьиФинансирования Тогда
				СтрокаВыбора = "ПоФактическимНачислениям,ПоДаннымОСотруднике,ПоБазеСреднегоЗаработка,КакЗаданоВидуРасчета";
			Иначе
				СтрокаВыбора = "ПоДаннымОСотруднике,КакЗаданоВидуРасчета";
			КонецЕсли;
			
		ИначеЕсли НачислениеОплатаПоСреднемуОбщий(Объект) Тогда
			
			Если Форма.ИспользоватьСтатьиФинансирования Тогда
				СтрокаВыбора = "ПоДаннымОСотруднике,ПоБазеСреднегоЗаработка,КакЗаданоВидуРасчета";
			Иначе
				СтрокаВыбора = "ПоДаннымОСотруднике,КакЗаданоВидуРасчета";
			КонецЕсли;
			
		ИначеЕсли Объект.Рассчитывается И КатегорияНачисленийПоСохраняемомуДС(КатегорияНачисления) Тогда
			
			Если Форма.ИспользоватьСтатьиФинансирования Тогда
				СтрокаВыбора = "ПоДаннымОСотруднике,ПоБазовымРасчетам,КакЗаданоВидуРасчета";
			Иначе
				СтрокаВыбора = "ПоДаннымОСотруднике,КакЗаданоВидуРасчета";
			КонецЕсли;	
			
		Иначе
			
			БазаДоступна = Форма.ЕстьПоказательРасчетнаяБаза
			И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка")
			И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработкаФСС")
			И Форма.Объект.СпособРасчета <> ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ДоплатаДоСохраняемогоДенежногоСодержанияЗаДниБолезни")
			И Форма.Объект.ПериодРасчетаБазовыхНачислений = ПредопределенноеЗначение("Перечисление.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц");
			
			СтрокаВыбора = "ПоДаннымОСотруднике";
			Если БазаДоступна Тогда
				СтрокаВыбора = СтрокаВыбора + ",ПоБазовымРасчетам";
			КонецЕсли;
			Если Форма.ЕстьПоказательСдельныйЗаработок Тогда
				СтрокаВыбора = СтрокаВыбора + ",ПоСдельномуЗаработку";
			КонецЕсли;
			СтрокаВыбора = СтрокаВыбора + ",КакЗаданоВидуРасчета";
			
		КонецЕсли;
		
		ЗаполнитьСписокВыборкаСтратегии(СписокВыбора, СтрокаВыбора);
		
	КонецЕсли;
	
	Если СписокВыбора.НайтиПоЗначению(Объект.СтратегияОтраженияВУчете) = Неопределено Тогда
		Объект.СтратегияОтраженияВУчете = ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях")	
	КонецЕсли;
	ОбработатьИзменениеСтратегииОтраженияВБухучетеНачисления(Форма, Ложь);
	
КонецПроцедуры

Процедура ОбработатьИзменениеСтратегииОтраженияВБухучетеНачисления(Форма, ОбновитьНастройки = Истина) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	БухучетНастраиваетсяВНачислении = Объект.СтратегияОтраженияВУчете = ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета");
	ЭтоОплатаДнейУходаЗаДетьмиИнвалидами = Форма.РаботаВБюджетномУчреждении
					И Объект.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДнейУходаЗаДетьмиИнвалидами")
						Или Объект.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДенежноеСодержаниеОплатаДнейУходаЗаДетьмиИнвалидами");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СпособОтраженияЗарплатыВБухучете", "Доступность", БухучетНастраиваетсяВНачислении);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтношениеКЕНВД", "Доступность", БухучетНастраиваетсяВНачислении);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяФинансирования", "Доступность", БухучетНастраиваетсяВНачислении);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяРасходов", "Доступность", БухучетНастраиваетсяВНачислении);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтатьяФинансированияПособия", "Доступность", БухучетНастраиваетсяВНачислении);
	
	Если Не ОбновитьНастройки Тогда
		Возврат;
	КонецЕсли;
	
	Если БухучетНастраиваетсяВНачислении Тогда
		
		Объект.СтатьяФинансирования = Форма.БылаСтатьяФинансирования;
		Если Не ЭтоОплатаДнейУходаЗаДетьмиИнвалидами Тогда
			Объект.СтатьяРасходов = Форма.БылаСтатьяРасходов;
		КонецЕсли;
		Объект.СпособОтраженияЗарплатыВБухучете = Форма.БылСпособОтраженияЗарплатыВБухучете;
		Объект.ОтношениеКЕНВД = Форма.БылоОтношениеКЕНВД;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.СпособОтраженияЗарплатыВБухучете) Тогда
			Форма.БылСпособОтраженияЗарплатыВБухучете = Объект.СпособОтраженияЗарплатыВБухучете;
			Объект.СпособОтраженияЗарплатыВБухучете = ПредопределенноеЗначение("Справочник.СпособыОтраженияЗарплатыВБухУчете.ПустаяСсылка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ОтношениеКЕНВД) Тогда
			Форма.БылоОтношениеКЕНВД = Объект.ОтношениеКЕНВД;
			Объект.ОтношениеКЕНВД = ПредопределенноеЗначение("Перечисление.ОтношениеКЕНВДЗатратНаЗарплату.ПустаяСсылка");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.СтатьяФинансирования) Тогда
			Форма.БылаСтатьяФинансирования = Объект.СтатьяФинансирования;
			Объект.СтатьяФинансирования = ПредопределенноеЗначение("Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка");
		КонецЕсли;
		
		Если Не ЭтоОплатаДнейУходаЗаДетьмиИнвалидами И ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
			Форма.БылаСтатьяРасходов = Объект.СтатьяРасходов;
			Объект.СтатьяРасходов = ПредопределенноеЗначение("Справочник.СтатьиРасходовЗарплата.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеВидаНачисленияПоНКРФ(Форма) Экспорт
	
	Форма.ПредставлениеВидаНачисленияПоНКРФ = ЗарплатаКадрыКлиентСервер.ПредставлениеВидаНачисленияПоНКРФ(Форма.Объект.ВидНачисленияДляНУ);
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеРаспределенияВСтроке(СтрокаНачисленияУдержания, РаспределениеСодержитОшибки, ИмяТаблицы, РаботаВБюджетномУчреждении) Экспорт 
	
	Если ИмяТаблицы = "ПогашениеЗаймов" Или ИмяТаблицы = "НДФЛ" Или ИмяТаблицы = "СуммыВозврата" Тогда
		РезультатРаспределения = СвернутьРаспределениеРезультатовУдержаний(СтрокаНачисленияУдержания.РезультатРаспределения);
	Иначе
		РезультатРаспределения = СтрокаНачисленияУдержания.РезультатРаспределения;
	КонецЕсли;
	
	Если РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНачисленияУдержания.КомандаРедактированияРаспределения = ПредставлениеРаспределения(РезультатРаспределения, РаспределениеСодержитОшибки, РаботаВБюджетномУчреждении);
	
КонецПроцедуры

Функция ПредставлениеРаспределения(РезультатРаспределения, РаспределениеСодержитОшибки, ОбрабатыватьСтатьюРасходов) Экспорт

	ПредставлениеРаспределения = "";
	
	КоличествоСтрокРаспределения = РезультатРаспределения.Количество();
	НомерСтрокиРаспределения = 1;
	
	Если РаспределениеСодержитОшибки Тогда
		ПредставлениеРаспределения = НСтр("ru = 'Не задано';
											|en = 'Not specified'");
	Иначе
		
		Для Каждого СтрокаРаспределения Из РезультатРаспределения Цикл
			
			Если СтрокаРаспределения.СтатьяФинансирования = Неопределено Тогда
				КодСтатьиФинансирования = "  ";
			Иначе
				КодСтатьиФинансирования = СтрокаРаспределения.КодСтатьиФинансирования;
			КонецЕсли;
			
			Если ОбрабатыватьСтатьюРасходов Тогда
				СтрокаПодстановки = НСтр("ru = '(%1)';
										|en = '(%1)'");
				СтатьяРасхода = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаРаспределения.СтатьяРасходов, 3, " ");
				КодСтатьиРасходов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаПодстановки, СтатьяРасхода);
			ИначеЕсли КоличествоСтрокРаспределения > 1 Тогда
				КодСтатьиРасходов = ":";
			Иначе
				КодСтатьиРасходов = "";
			КонецЕсли;
			
			Если КоличествоСтрокРаспределения = 1 Тогда
				СуммаРаспределения = "";
				ПереводСтроки = "";
			Иначе
				СуммаРаспределения = Строка(Формат(СтрокаРаспределения.Результат, "ЧДЦ=2; ЧРГ="));
				Если КоличествоСтрокРаспределения = 1 Или НомерСтрокиРаспределения = 2 Тогда
					ПереводСтроки = "";
				Иначе
					ПереводСтроки = Символы.ПС;
				КонецЕсли;			
			КонецЕсли;
			
			Если НомерСтрокиРаспределения = 2 И КоличествоСтрокРаспределения > 2 Тогда
				БолееДвухСтрок = "…";
			Иначе
				БолееДвухСтрок = " ";
			КонецЕсли;
			
			СтрокаПодстановки = НСтр("ru = '%1%2%3 %4%5%6';
									|en = '%1%2%3 %4%5%6'");
			ПредставлениеРаспределения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СтрокаПодстановки, ПредставлениеРаспределения, КодСтатьиФинансирования,
					КодСтатьиРасходов, СуммаРаспределения, БолееДвухСтрок, ПереводСтроки);
			
			Если НомерСтрокиРаспределения = 2 Тогда
				Прервать;
			КонецЕсли;
			
			НомерСтрокиРаспределения = НомерСтрокиРаспределения + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПредставлениеРаспределения;

КонецФункции

Функция СвернутьРаспределениеРезультатовУдержаний(РаспределениеРезультатов)
	
	ИменаКолонок = "СтатьяФинансирования,СтатьяРасходов,КодСтатьиФинансирования,Результат,ВидУдержания,Сотрудник,Подразделение";
	
	СтруктураВозврата = Новый Массив;
	
	Для каждого СтрокаРаспределениеРезультатов Из РаспределениеРезультатов Цикл
		
		// Зачет излишне удержанного НДФЛ включен в сумму НДФЛ.
		Если СтрокаРаспределениеРезультатов.Свойство("ВидУдержания")
			И СтрокаРаспределениеРезультатов.ВидУдержания = ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено") Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(ОписаниеСтроки, СтрокаРаспределениеРезультатов);
		
		СтрокаНеНайдена = Истина;
		
		Для Каждого СтрокаСтруктурыВозврата Из СтруктураВозврата Цикл
			Если СтрокаСтруктурыВозврата.СтатьяФинансирования = ОписаниеСтроки.СтатьяФинансирования
				И СтрокаСтруктурыВозврата.КодСтатьиФинансирования = ОписаниеСтроки.КодСтатьиФинансирования
				И СтрокаСтруктурыВозврата.СтатьяРасходов = ОписаниеСтроки.СтатьяРасходов
				И СтрокаСтруктурыВозврата.Сотрудник = ОписаниеСтроки.Сотрудник
				И СтрокаСтруктурыВозврата.Подразделение = ОписаниеСтроки.Подразделение Тогда
				СтрокаСтруктурыВозврата.Результат = СтрокаСтруктурыВозврата.Результат + ОписаниеСтроки.Результат;
				СтрокаНеНайдена = Ложь;
			КонецЕсли;				
		КонецЦикла;
		
		Если СтрокаНеНайдена Тогда
			СтруктураВозврата.Добавить(ОписаниеСтроки);
		КонецЕсли;			
		
	КонецЦикла; 
	
	Возврат Новый ФиксированныйМассив(СтруктураВозврата);
	
КонецФункции

Процедура ПерераспределитьНДФЛ(СтрокаНДФЛ, РаботаВБюджетномУчреждении) Экспорт
	
	Если СтрокаНДФЛ.РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
	ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
	
	ИзмененийНет = Истина;
	НовоеРаспределение = Новый Массив;
	ЕстьОшибкиРаспределения = Ложь;
	ЕстьОшибкиЗаполнения = Ложь;
	ИменаРесурсовНалога = УчетНДФЛКлиентСервер.РесурсыИсчисленногоНалогаВМассиве("Налог", Ложь, Ложь);
	ИменаРесурсовЗачета = УчетНДФЛКлиентСервер.РесурсыИсчисленногоНалогаВМассиве("ЗачтеноАвансовыхПлатежей", Ложь, Ложь);
	КолонкиДанныхПоВидамУдержаний = УчетНДФЛКлиентСервер.СоответствиеКолонокНалогаЗначениямВидовОсобыхНачисленийИУдержаний("Налог");
	КоличествоКолонок = ИменаРесурсовНалога.Количество();
	Для СчКолонок = 1 По КоличествоКолонок Цикл
		
		ИмяРесурса = ИменаРесурсовНалога[СчКолонок - 1];
		
		НДФЛ = СтрокаНДФЛ[ИмяРесурса] - СтрокаНДФЛ[ИменаРесурсовЗачета[СчКолонок - 1]];
		НДФЛРаспределено = 0;
		РаспределениеНДФЛ = Новый Массив;
		Для каждого РезультатРаспределения Из СтрокаНДФЛ.РезультатРаспределения Цикл
			Если ИмяРесурса = КолонкиДанныхПоВидамУдержаний[РезультатРаспределения.ВидУдержания] Тогда
				НДФЛРаспределено = НДФЛРаспределено + РезультатРаспределения.Результат;
				РаспределениеНДФЛ.Добавить(РезультатРаспределения);
			КонецЕсли;
		КонецЦикла; 
		
		Если НДФЛ <> НДФЛРаспределено Тогда
			
			ИзмененийНет = Ложь;
			НовоеРаспределениеНДФЛ = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.РезультатРаспределенияСуммыПоБазе(НДФЛ, РаспределениеНДФЛ, "Результат", 0);
			НДФЛРаспределено = 0;
			Для каждого СтрокаРаспределения Из НовоеРаспределениеНДФЛ Цикл
				НДФЛРаспределено = НДФЛРаспределено + СтрокаРаспределения.Результат;
				Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
					Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
						ЕстьОшибкиЗаполнения = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если НДФЛ = 0 И НДФЛРаспределено = 0 Тогда
				ЕстьОшибкиРаспределения = ЕстьОшибкиРаспределения Или Ложь;
				ЕстьОшибкиЗаполнения = ЕстьОшибкиЗаполнения Или Ложь;
			Иначе
				ЕстьОшибкиРаспределения = ЕстьОшибкиРаспределения Или НДФЛ <> НДФЛРаспределено;
			КонецЕсли;
			
		Иначе
			НовоеРаспределениеНДФЛ = РаспределениеНДФЛ;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовоеРаспределение, НовоеРаспределениеНДФЛ);
		
	КонецЦикла;
	
	Если ИзмененийНет Тогда
		Возврат
	КонецЕсли;
	
	СтрокаНДФЛ.РезультатРаспределения = Новый ФиксированныйМассив(НовоеРаспределение);
	
	ЗаполнитьПредставлениеРаспределенияВСтроке(СтрокаНДФЛ, ЕстьОшибкиРаспределения Или ЕстьОшибкиЗаполнения, "НДФЛ", РаботаВБюджетномУчреждении);
	
КонецПроцедуры

Процедура ПерераспределитьПогашениеЗаймов(СтрокаТаблицы, РаботаВБюджетномУчреждении) Экспорт
	
	Если СтрокаТаблицы.РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаспределениеСтроки = Новый Соответствие;
	РаспределениеСтроки.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПогашениеЗаймаИзЗарплаты"),
									Новый Структура("ИмяКолонки,Результат,РаспределениеРезультата", "ПогашениеЗайма", 0, Новый Массив));
	РаспределениеСтроки.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ"),
									Новый Структура("ИмяКолонки,Результат,РаспределениеРезультата", "НалогНаМатериальнуюВыгоду", 0, Новый Массив));
	РаспределениеСтроки.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.ПроцентыПоЗайму"),
									Новый Структура("ИмяКолонки,Результат,РаспределениеРезультата", "ПогашениеПроцентов", 0, Новый Массив));
	РаспределениеСтроки.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.НачисленоПроцентовПоЗайму"),
									Новый Структура("ИмяКолонки,Результат,РаспределениеРезультата", "НачисленоПроцентов", 0, Новый Массив));
	РаспределениеСтроки.Вставить(ПредопределенноеЗначение("Перечисление.ВидыОсобыхНачисленийИУдержаний.МатериальнаяВыгодаПоЗаймам"),
									Новый Структура("ИмяКолонки,Результат,РаспределениеРезультата", "МатериальнаяВыгода", 0, Новый Массив));
	
	Для каждого РезультатРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
		ДанныеКолонки = РаспределениеСтроки[РезультатРаспределения.ВидУдержания];
		ДанныеКолонки.Результат = ДанныеКолонки.Результат + РезультатРаспределения.Результат;
		ДанныеКолонки.РаспределениеРезультата.Добавить(РезультатРаспределения);
	КонецЦикла;
	
	ИтогПоСтроке = 0;
	РаспределениеВыполнялось = Ложь;
	НовоеРаспределениеСтроки = Новый Массив;
	Для каждого ЭлементСоответствия Из РаспределениеСтроки Цикл
	
		ДанныеКолонки = ЭлементСоответствия.Значение;
		РезультатКолонки = СтрокаТаблицы[ДанныеКолонки.ИмяКолонки];
		ИтогПоСтроке = ИтогПоСтроке + РезультатКолонки;
		Если СтрокаТаблицы[ДанныеКолонки.ИмяКолонки] <> ДанныеКолонки.Результат Тогда
			ДанныеКолонки.РаспределениеРезультата = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.РезультатРаспределенияСуммыПоБазе(РезультатКолонки, ДанныеКолонки.РаспределениеРезультата, "Результат");
			РаспределениеВыполнялось = Истина;
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ДанныеКолонки.РаспределениеРезультата Цикл
			НовоеРаспределениеСтроки.Добавить(Новый ФиксированнаяСтруктура(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ЭлементКоллекции)));
		КонецЦикла;
	
	КонецЦикла;
	
	Если РаспределениеВыполнялось Тогда
		
		СтрокаТаблицы.РезультатРаспределения = Новый ФиксированныйМассив(НовоеРаспределениеСтроки);
		
		ЕстьОшибкиРаспределения = Ложь;
		ЕстьОшибкиЗаполнения = Ложь;
		ПроверяемыеПоля = Новый Структура;
		ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
		ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
		
		ВсегоРаспределено = 0;
		Для каждого СтрокаРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
			ВсегоРаспределено = ВсегоРаспределено + СтрокаРаспределения.Результат;
			Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ИтогПоСтроке = 0 И ВсегоРаспределено = 0 Тогда
			ЕстьОшибкиРаспределения = Ложь;
			ЕстьОшибкиЗаполнения = Ложь;
		Иначе
			ЕстьОшибкиРаспределения = ИтогПоСтроке <> ВсегоРаспределено;
		КонецЕсли;
		ЗаполнитьПредставлениеРаспределенияВСтроке(СтрокаТаблицы, ЕстьОшибкиРаспределения Или ЕстьОшибкиЗаполнения, "ПогашениеЗаймов", РаботаВБюджетномУчреждении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерераспределитьУдержания(СтрокаТаблицы, РаботаВБюджетномУчреждении) Экспорт

	Если СтрокаТаблицы.РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоРаспределено = 0;
	РаспределениеСтроки = Новый Массив;
	Для каждого РезультатРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
		ВсегоРаспределено = ВсегоРаспределено + РезультатРаспределения.Результат;
		РаспределениеСтроки.Добавить(РезультатРаспределения);
	КонецЦикла;
	
	Если СтрокаТаблицы.Результат <> ВсегоРаспределено Тогда
		
		ОкруглятьРезультатРаспределения = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.ОкруглятьРезультатРаспределенияУдержания(СтрокаТаблицы.Удержание);
		Точность = ?(ОкруглятьРезультатРаспределения,0,2);
		
		СтрокаТаблицы.РезультатРаспределения = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.РезультатРаспределенияСуммыПоБазе(СтрокаТаблицы.Результат, РаспределениеСтроки, "Результат", Точность);
		
		ЕстьОшибкиРаспределения = Ложь;
		ЕстьОшибкиЗаполнения = Ложь;
		ПроверяемыеПоля = Новый Структура;
		ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
		ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
		
		ВсегоРаспределено = 0;
		Для каждого СтрокаРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
			ВсегоРаспределено = ВсегоРаспределено + СтрокаРаспределения.Результат;
			Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если СтрокаТаблицы.Результат = 0 И ВсегоРаспределено = 0 Тогда
			ЕстьОшибкиРаспределения = Ложь;
			ЕстьОшибкиЗаполнения = Ложь;
		Иначе
			ЕстьОшибкиРаспределения = СтрокаТаблицы.Результат <> ВсегоРаспределено;
		КонецЕсли;
		ЗаполнитьПредставлениеРаспределенияВСтроке(СтрокаТаблицы, ЕстьОшибкиРаспределения Или ЕстьОшибкиЗаполнения, "Удержания", РаботаВБюджетномУчреждении);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПерераспределитьКорректировкиВыплаты(СтрокаТаблицы, РаботаВБюджетномУчреждении) Экспорт

	Если СтрокаТаблицы.РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсегоРаспределено = 0;
	РаспределениеСтроки = Новый Массив;
	Для каждого РезультатРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
		ВсегоРаспределено = ВсегоРаспределено + РезультатРаспределения.Результат;
		РаспределениеСтроки.Добавить(РезультатРаспределения);
	КонецЦикла;
	
	Если СтрокаТаблицы.КорректировкаВыплаты <> ВсегоРаспределено Тогда
		
		СтрокаТаблицы.РезультатРаспределения = ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.РезультатРаспределенияСуммыПоБазе(СтрокаТаблицы.КорректировкаВыплаты, РаспределениеСтроки, "Результат");
		
		ЕстьОшибкиРаспределения = Ложь;
		ЕстьОшибкиЗаполнения = Ложь;
		ПроверяемыеПоля = Новый Структура;
		ПроверяемыеПоля.Вставить("СтатьяФинансирования", Истина);
		ПроверяемыеПоля.Вставить("СтатьяРасходов", РаботаВБюджетномУчреждении);
		
		ВсегоРаспределено = 0;
		Для каждого СтрокаРаспределения Из СтрокаТаблицы.РезультатРаспределения Цикл
			ВсегоРаспределено = ВсегоРаспределено + СтрокаРаспределения.Результат;
			Для Каждого КлючИЗначение Из ПроверяемыеПоля Цикл
				Если КлючИЗначение.Значение И Не ЗначениеЗаполнено(СтрокаРаспределения[КлючИЗначение.Ключ]) Тогда
					ЕстьОшибкиЗаполнения = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если СтрокаТаблицы.КорректировкаВыплаты = 0 И ВсегоРаспределено = 0 Тогда
			ЕстьОшибкиРаспределения = Ложь;
			ЕстьОшибкиЗаполнения = Ложь;
		Иначе
			ЕстьОшибкиРаспределения = СтрокаТаблицы.КорректировкаВыплаты <> ВсегоРаспределено;
		КонецЕсли;
		ЗаполнитьПредставлениеРаспределенияВСтроке(СтрокаТаблицы, ЕстьОшибкиРаспределения Или ЕстьОшибкиЗаполнения, "КорректировкиВыплаты", РаботаВБюджетномУчреждении);
		
	КонецЕсли;

КонецПроцедуры

Функция ОписаниеИсходныхДанныхДляОбновленияЗависимыхТаблиц() Экспорт

	ИсходныеДанные = Новый Структура;
	ИсходныеДанные.Вставить("РаспределятьЗависимыеТаблицы", Ложь);
	ИсходныеДанные.Вставить("ИзмениласьДоляЕНВД", 			Ложь);
	ИсходныеДанные.Вставить("ТребуетсяПересчетНДФЛ", 			Ложь);
	ИсходныеДанные.Вставить("Сотрудник");
	ИсходныеДанные.Вставить("ВидРасчета");
	ИсходныеДанные.Вставить("ИменаТаблицДляОбновления","");
	ИсходныеДанные.Вставить("ИмяИсходнойТаблицы","");
	ИсходныеДанные.Вставить("НомерСтрокиИсходнойТаблицы", 0);
	
	Возврат ИсходныеДанные;

КонецФункции

Функция УдержаниеМожетЯвляетсяОснованиемОформленияКассовогоЧека(КатегорияУдержания, ВидОперацииПоЗарплате) Экспорт

	МожетЯвляетсяОснованием = КатегорияУдержания = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.ПрочееУдержаниеВПользуТретьихЛиц")
		Или (КатегорияУдержания = ПредопределенноеЗначение("Перечисление.КатегорииУдержаний.УдержаниеВСчетРасчетовПоПрочимОперациям")
		И ВидОперацииПоЗарплате = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.УдержаниеПоПрочимОперациямСРаботниками"));	

	Возврат МожетЯвляетсяОснованием;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КатегорияНачисленийБезОплаты(КатегорияНачисления) Экспорт

	КатегорииНачислений = ОтражениеЗарплатыВБухучетеКлиентСерверРасширенныйПовтИсп.КатегорииНачисленийБезОплаты();
	Возврат КатегорииНачислений.Найти(КатегорияНачисления)<>Неопределено;

КонецФункции
		
Функция КатегорияНачисленийПособияФСС(КатегорияНачисления)

	КатегорииНачислений = ОтражениеЗарплатыВБухучетеКлиентСерверРасширенныйПовтИсп.КатегорииНачисленийПособияФСС();
	Возврат КатегорииНачислений.Найти(КатегорияНачисления)<>Неопределено;

КонецФункции

Функция НачислениеОплатаПоСреднемуОбщий(ВидРасчетаОбъект) Экспорт

	Возврат ВидРасчетаОбъект.Рассчитывается И ВидРасчетаОбъект.ИспользуетСреднийЗаработокОбщий;
	
КонецФункции

Функция КатегорияНачисленийПоСохраняемомуДС(КатегорияНачисления) Экспорт

	КатегорииНачислений = ОтражениеЗарплатыВБухучетеКлиентСерверРасширенныйПовтИсп.КатегорияНачисленийПоСохраняемомуДС();
	Возврат КатегорииНачислений.Найти(КатегорияНачисления)<>Неопределено;

КонецФункции

Процедура ЗаполнитьСписокВыборкаСтратегии(СписокВыбора, СтрокаВыбора)
	
	СписокВыбора.Очистить();
	
	Для каждого ЗначениеВыбора Из СтрРазделить(СтрокаВыбора,",") Цикл
	
		Если ЗначениеВыбора = "ПоФактическимНачислениям" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоФактическимНачислениям"),НСтр("ru = 'По фактическим начислениям текущего года';
																																					|en = 'By actual accruals of the current year'"));	
		ИначеЕсли ЗначениеВыбора = "ПоДаннымОСотруднике" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях"), НСтр("ru = 'По настройкам сотрудника';
																																										|en = 'By employee settings'"));
		ИначеЕсли ЗначениеВыбора = "ПоБазеСреднегоЗаработка" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазеСреднегоЗаработка"), НСтр("ru = 'По базе среднего заработка';
																																					|en = 'By average earnings base'"));
		ИначеЕсли ЗначениеВыбора = "ПоБазовымРасчетам" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоБазовымРасчетам"), НСтр("ru = 'Как задано для базовых начислений';
																																				|en = 'As specified for basic accruals'"));	
		ИначеЕсли ЗначениеВыбора = "КакЗаданоВидуРасчета" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.КакЗаданоВидуРасчета"), НСтр("ru = 'Как задано для начисления';
																																					|en = 'As specified for the accrual'"));
		ИначеЕсли ЗначениеВыбора = "ПоСдельномуЗаработку" Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтратегииОтраженияВУчетеНачисленийУдержаний.ПоСдельномуЗаработку"), НСтр("ru = 'По данным сдельного заработка';
																																					|en = 'Based on piecework earnings data'"));	
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеБухучетаНачисления(БухучетНачисления, ИспользоватьСтатьиФинансирования, РаботаВБюджетномУчреждении) Экспорт
	
	ТекстПредставления = "";
	Если ЗначениеЗаполнено(БухучетНачисления) Тогда
		НомСтроки = 1;
		НесколькоСтрок = (БухучетНачисления.Количество() > 1);
		Для каждого СтрокаБухучета Из БухучетНачисления Цикл
			
			Если НомСтроки > 3 Тогда
				ТекстПредставления = СтрШаблон("%1%2", ТекстПредставления, "...");
				Прервать;
			КонецЕсли;
			
			ПредставлениеСтатьиФинансирования = "";
			ПредставлениеСтатьиРасходов = "";
			ПредставлениеСпособаОтражения = "";
			
			ПредставлениеСтроки = "";
			
			Если ИспользоватьСтатьиФинансирования Тогда
				ПредставлениеСтатьиФинансирования = СтрокаБухучета.КодСтатьиФинансирования;
				Если Не ЗначениеЗаполнено(ПредставлениеСтатьиФинансирования) Тогда
					ПредставлениеСтатьиФинансирования = "<...>";
				КонецЕсли;
				ПредставлениеСтроки = ПредставлениеСтатьиФинансирования;
			КонецЕсли;
			
			ПредставлениеСпособаОтражения = СОКРЛП(СтрокаБухучета.СпособОтраженияЗарплатыВБухучете);
			Если Не ЗначениеЗаполнено(ПредставлениеСпособаОтражения) Тогда
				ПредставлениеСпособаОтражения = "<...>";
			КонецЕсли;
			Если ПустаяСтрока(ПредставлениеСтроки) Тогда
				ПредставлениеСтроки = ПредставлениеСпособаОтражения;
			Иначе
				ПредставлениеСтроки = СтрШаблон("%1 / %2", ПредставлениеСтроки, ПредставлениеСпособаОтражения);
			КонецЕсли;
			
			Если РаботаВБюджетномУчреждении Тогда
				ПредставлениеСтатьиРасходов = СОКРЛП(СтрокаБухучета.СтатьяРасходов);
				Если ЗначениеЗаполнено(ПредставлениеСтатьиРасходов) Тогда
					ПредставлениеСтроки = СтрШаблон("%1 / %2", ПредставлениеСтроки, ПредставлениеСтатьиРасходов);
				КонецЕсли;
			КонецЕсли;
			
			Если НесколькоСтрок Тогда
				ПредставлениеДолиРаспределения = Формат(СтрокаБухучета.ДоляРаспределения, "ЧЦ=16; ЧДЦ=5");
				ПредставлениеСтроки = СтрШаблон("%1 / %2", ПредставлениеСтроки, ПредставлениеДолиРаспределения);
			КонецЕсли;
			
			Если ПустаяСтрока(ТекстПредставления) Тогда
				ТекстПредставления = ПредставлениеСтроки;
			Иначе
				ТекстПредставления = СтрШаблон("%1%2%3", ТекстПредставления, Символы.ПС, ПредставлениеСтроки);
			КонецЕсли;
			
			НомСтроки = НомСтроки + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

Функция КомментарийПредставлениеПрежнегоБухучетаЗарплаты(Форма, ПоказатьПрежнееЗначение, РегистрацияНачисленийДоступна) Экспорт

	Комментарий = "";
	
	Если Не РегистрацияНачисленийДоступна Тогда
		Возврат Комментарий;
	КонецЕсли;
	
	ПредставлениеСтатьиФинансирования = "";
	ПредставлениеСпособаОтражения = "";
	ПредставлениеЕНВД = "";
	
	Если ПоказатьПрежнееЗначение Тогда
		
		Шаблон = НСтр("ru = 'Прежнее значение: %1';
						|en = 'Previous value: %1'");
		ПредставлениеПустогоЗначения = НСтр("ru = '<подбирается автоматически>';
											|en = '<picked automatically>'");
		
		Если Форма.ИспользоватьСтатьиФинансирования Тогда
			ПредставлениеСтатьиФинансирования = ПредставлениеПустогоЗначения;
			Если ЗначениеЗаполнено(Форма.ТекущаяСтатьяФинансирования) Тогда
				ПредставлениеСтатьиФинансирования = Строка(Форма.ТекущаяСтатьяФинансирования);
			КонецЕсли;
			Комментарий = СтрШаблон(Шаблон, ПредставлениеСтатьиФинансирования);
		КонецЕсли;
		
		ПредставлениеСпособаОтражения = ПредставлениеПустогоЗначения;
		Если ЗначениеЗаполнено(Форма.ТекущийСпособОтраженияЗарплатыВБухучете) Тогда
			ПредставлениеСпособаОтражения = Строка(Форма.ТекущийСпособОтраженияЗарплатыВБухучете);
		КонецЕсли;
		
		Если ПустаяСтрока(Комментарий) Тогда
			Комментарий = СтрШаблон(Шаблон, ПредставлениеСпособаОтражения);
		Иначе
			Комментарий = СтрШаблон("%1 / %2", Комментарий, ПредставлениеСпособаОтражения);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Комментарий;
	

КонецФункции

Функция ЭтоКатегорияНачисленияОплатаДолиРКСН(КатегорияНачисления) Экспорт

	Возврат КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСреднемЗаработке")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСреднемЗаработке")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДС")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДС")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиРайонногоКоэффициентаВСДД")
		Или КатегорияНачисления = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаДолиСевернойНадбавкиВСДД");

КонецФункции

Функция КатегрияОсновногоВидаРасчета(ВидРасчетаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ВидРасчетаОбъект.ОсновнойВидРасчета) Тогда
		Возврат ОтражениеЗарплатыВБухучетеРасширенныйВызовСервера.КатегрияОсновногоВидаРасчета(ВидРасчетаОбъект.ОсновнойВидРасчета);
	Иначе
		Возврат ВидРасчетаОбъект.КатегорияНачисленияИлиНеоплаченногоВремени;
	КонецЕсли;

КонецФункции

#КонецОбласти

