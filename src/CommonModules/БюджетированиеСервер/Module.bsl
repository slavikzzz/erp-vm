#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не Документ.ДополнительныеСвойства.Свойство("ОтложенноеПроведение")
			Или Не Документ.ДополнительныеСвойства.ОтложенноеПроведение Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		КонецЕсли;
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам бюджетирования.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ОборотыБюджетов");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ЗначенияНефинансовыхПоказателей");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеТиповАналитики

// Возвращает признак, что измерение считается аналитикой по типу измерения
//
// Параметры:
// 	ТипЗначенияИзмерения - ОписаниеТипов - Описание типов аналитики
// 	ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Ссылка на ПВХ АналитикиСтатейБюджетов.
//
// Возвращаемое значение:
// 	Булево - Истина, если измерение является аналитикой.
//
Функция ЭтоИзмерениеАналитики(ТипЗначенияИзмерения, ВидАналитики = Неопределено) Экспорт
	
	ЭтоИзмерениеАналитики = Истина;
	
	Если ТипЗнч(ВидАналитики) = Тип("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов") Тогда
		ЭтоИзмерениеАналитики = Истина;
	ИначеЕсли ТипЗначенияИзмерения = ВсеТипыАналитик() Тогда
		ЭтоИзмерениеАналитики = Истина;
	Иначе
		ВсеТипыАналитик = ВсеТипыАналитик();
		Типы = ТипЗначенияИзмерения.Типы();
		Для каждого ТипАналитики Из Типы Цикл
			Если ТипАналитики = Тип("СправочникСсылка.Организации") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.Сценарии") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли ТипАналитики = Тип("СправочникСсылка.Валюты") Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			ИначеЕсли НЕ ВсеТипыАналитик.СодержитТип(ТипАналитики) Тогда
				ЭтоИзмерениеАналитики = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЭтоИзмерениеАналитики;
	
КонецФункции

// Возвращает выражение пустого значения аналитики
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для запроса.
//
Функция ВыражениеПустогоЗначенияАналитики() Экспорт
	Возврат "Неопределено";
КонецФункции

// Возвращает описание типов всех типов аналитик бюджетирования
//
// Возвращаемое значение:
// 	ОписаниеТипов - описание типов всех типов значений аналитик бюджетирования.
//
Функция ВсеТипыАналитик() Экспорт
	Возврат Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
КонецФункции

// Возвращает выражение значения аналитики с проверкой типа значения
//
// Параметры:
// 	ВыражениеИсточник - Строка - Выражение источника значения аналитики. Например, поле запроса / таблицы, из которого берется значение аналитики.
// 				Если выражение источника не заполнен, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
// 	ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - для генерации выражения для СКД требуется вид аналитики.
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для запроса, с проверкой типа значения.
//
Функция ВыражениеЗначенияАналитикиПоИсточникуИТипу(ВыражениеИсточник = "", ВидАналитики = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыражениеИсточник)
	 ИЛИ НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
		ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
	Иначе
		ИтоговоеВыражение = "
			|Выбор 
			// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
			|	Когда НЕ ЗначениеЗаполнено(&ЗначениеАналитики) Тогда &ПустаяАналитика
			// Проверка на соответствие значения ожидаемому типу
			|	Когда НЕ ТипЗначения(&ЗначениеАналитики) В (БюджетированиеПовтИсп.ТипыВидаАналитики(""&ГУИДВидаАналитики"")) Тогда &ПустаяАналитика
			// После всех проверок можно использовать значение поля
			|	Иначе &ЗначениеАналитики
			|Конец";
		ИтоговоеВыражение = СтрЗаменить(ИтоговоеВыражение, "&ЗначениеАналитики", ВыражениеИсточник);
		ИтоговоеВыражение = СтрЗаменить(ИтоговоеВыражение, "&ГУИДВидаАналитики",
				МониторингЦелевыхПоказателей.УникальныйИдентификаторВСтроку(ВидАналитики.УникальныйИдентификатор()));
		ИтоговоеВыражение = СтрЗаменить(ИтоговоеВыражение, "&ПустаяАналитика", ВыражениеПустогоЗначенияАналитики());
	КонецЕсли;
	
	Возврат ИтоговоеВыражение;
КонецФункции

// Возвращает выражение значения аналитики с проверкой типа значения
//
// Параметры:
// 	ВыражениеИсточник - Строка - Выражение источника значения аналитики. Например, поле запроса / таблицы, из которого берется значение аналитики.
// 				Если выражение источника не заполнен, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
// 	ВыражениеИсточникВидаАналитики - Строка - Выражение источника вида аналитики.
// 				Если выражение источника не заполнено, выражение аналитики вернет выражение пустой аналитики. По умолчанию не заполнено.
//
// Возвращаемое значение:
// 	Строка - Выражение значения аналитики для СКД, с проверкой типа значения.
//
Функция ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеИсточник = "", ВыражениеИсточникВидаАналитики = "") Экспорт
	
	ТребуетсяКонтрольТипа = ЗначениеЗаполнено(ВыражениеИсточникВидаАналитики) 
		И ЗначениеЗаполнено(ВыражениеИсточник) 
		И НЕ ВРег(ВыражениеИсточник) = "НЕОПРЕДЕЛЕНО";
	
	Если ТребуетсяКонтрольТипа Тогда
		ВыражениеСКонтролемТипа = "
			|Выбор 
			// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
			|	Когда НЕ ЗначениеЗаполнено(&ЗначениеАналитики) Тогда &ПустаяАналитика
			// Проверка на соответствие значения ожидаемому типу
			|	Когда НЕ ТипЗначения(&ЗначениеАналитики) В (БюджетированиеПовтИсп.ТипыВидаАналитики(ЕСТЬNULL(&ВидАналитики, НЕОПРЕДЕЛЕНО))) Тогда &ПустаяАналитика
			// После всех проверок можно использовать значение поля
			|	Иначе &ЗначениеАналитики
			|Конец";
		ВыражениеСКонтролемТипа = СтрЗаменить(ВыражениеСКонтролемТипа, "&ЗначениеАналитики", ВыражениеИсточник);
		ВыражениеСКонтролемТипа = СтрЗаменить(ВыражениеСКонтролемТипа, "&ВидАналитики", ВыражениеИсточникВидаАналитики);
		ВыражениеСКонтролемТипа = СтрЗаменить(ВыражениеСКонтролемТипа, "&ПустаяАналитика", ВыражениеПустогоЗначенияАналитики());
	Иначе
		ВыражениеСКонтролемТипа = ВыражениеИсточник;
	КонецЕсли;
	
	Возврат ВыражениеСКонтролемТипа;
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики.
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики.
//
Функция ШаблонПараметровПоляАналитикиСУсловиемПоКоличествуВидовАналитики() Экспорт
	
	Параметры = Новый Структура;
	
	// Для следующих выражений индекс аналитики не указывается!
	Параметры.Вставить("ВыражениеКоличествоИспользуемыхАналитик", ""); // выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик
	Параметры.Вставить("ВыражениеЗначенияАналитикиБезИндекса",    ""); // выражение - путь к полю, хранящему значение аналитики
	
	Параметры.Вставить("ПараметрыТрансляцииАналитики",            Новый Структура);
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВозможнаТрансляцияАналитики",       Ложь);
	
	// Для следующих выражений индекс аналитики не указывается!
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеТранслироватьАналитикуБезИндекса",   ""); // выражение типа СвязиПоказателей.ТранслироватьАналитику
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеАдресТрансляцииАналитикиБезИндекса", ""); // выражение типа СвязиПоказателей.АдресТрансляцииАналитики
	Параметры.ПараметрыТрансляцииАналитики.Вставить("ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает выражение для поля аналитики с условием по общему количеству используемых видов аналитики
// и другими условиями, задаваемыми опционально параметрами. В общем случае выражение выглядит следующим образом:
//          ВЫБОР
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [НомерТекущейАналитики]
//                   <И НЕ ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]>
//                         ТОГДА ВыражениеЗначенияАналитикиБезИндекса[НомерТекущейАналитики]
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [НомерТекущейАналитики]
//                   <И ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]
//                    И ВыражениеАдресТрансляцииАналитикиБезИндекса[НомерТекущейАналитики] = [АдресТрансляцииАналитики =
//                    1] ТОГДА ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса[АдресТрансляцииАналитики = 1]>
//                ...
//                ...
//                КОГДА ВыражениеКоличествоИспользуемыхАналитик >= [ТекущийНомерАналитики]
//                   <И ВыражениеТранслироватьАналитикуБезИндекса[НомерТекущейАналитики]
//                    И ВыражениеАдресТрансляцииАналитикиБезИндекса[НомерТекущейАналитики] = [АдресТрансляцииАналитики =
//                    6] ТОГДА ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса[АдресТрансляцииАналитики = 6]>
//                ИНАЧЕ НЕОПРЕДЕЛЕНО
//          КОНЕЦ
//
// Параметры:
// 	Параметры - Структура - Структура параметров:
// 	 *ВыражениеКоличествоИспользуемыхАналитик - Строка - Выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик.
// 						Например, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик" или "СвязиПоказателей.КоличествоИспользуемыхАналитик".
// 	 *ВыражениеЗначенияАналитикиБезИндекса - Строка - Выражение значения аналитики. Например, СвязиПоказателей.Аналитика%НомерТекущейАналитики%.
// 	 *ПараметрыТрансляцииАналитики - Структура - Структура параметров трансляции аналитики:
// 	    **ВозможнаТрансляцияАналитики - Булево - Если Истина, то возможна трансляция аналитики, тогда требуется заполнение параметров.
// 	    					ВыражениеТранслироватьАналитикуБезИндекса и ВыражениеАдресТрансляцииАналитикиБезИндекса.
// 	    **ВыражениеТранслироватьАналитикуБезИндекса - Строка - Выражение пути к полю, описывающему необходимость трансляции.
// 	    					Например, "СвязиПоказателей.ТранслироватьАналитику%НомерТекущейАналитики%".
// 	    **ВыражениеАдресТрансляцииАналитикиБезИндекса - Строка - Выражение пути к полу, описывающему из какого поля
// 	    					транслировать аналитику. Например, "АдресТрансляцииАналитики%НомерТекущейАналитики%".
// 	    **ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса - Строка - Выражение пути к полю, хранящему значение
// 	    					аналитики при трансляции. Таких полей значений аналитики может быть 6,
// 	    					в зависимости от адреса трансляции берется нужное поле.
// 	    					Например, "ОборотыБюджетов.Аналитика%АдресТрансляцииАналитики%".
// 	НомерТекущейАналитики - Число - Номер аналитики, для которой создается выражение.
//
// Возвращаемое значение:
// 	Строка - Выражение для поля запроса / СКД.
//
Функция ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики(Параметры, НомерТекущейАналитики) Экспорт
	
	ВыражениеКоличествоИспользуемыхАналитик = Параметры.ВыражениеКоличествоИспользуемыхАналитик;
	ВыражениеЗначенияАналитикиБезИндекса = Параметры.ВыражениеЗначенияАналитикиБезИндекса;
	ВозможнаТрансляцияАналитики = Параметры.ПараметрыТрансляцииАналитики.ВозможнаТрансляцияАналитики;
	ВыражениеТранслироватьАналитикуБезИндекса = Параметры.ПараметрыТрансляцииАналитики.ВыражениеТранслироватьАналитикуБезИндекса;
	ВыражениеАдресТрансляцииАналитикиБезИндекса = Параметры.ПараметрыТрансляцииАналитики.ВыражениеАдресТрансляцииАналитикиБезИндекса;
	ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса = Параметры.ПараметрыТрансляцииАналитики.ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса;
	
	ЕстьОшибкиВПараметрах = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ВыражениеКоличествоИспользуемыхАналитик) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВыражениеЗначенияАналитикиБезИндекса) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НомерТекущейАналитики) Тогда
		ЕстьОшибкиВПараметрах = Истина;
	КонецЕсли;
	Если ВозможнаТрансляцияАналитики Тогда
		Если НЕ ЗначениеЗаполнено(ВыражениеТранслироватьАналитикуБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыражениеАдресТрансляцииАналитикиБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса) Тогда
			ЕстьОшибкиВПараметрах = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиВПараметрах Тогда
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Есть ошибки в переданных параметрах';
							|en = 'There are errors in passed parameters.'", КодЯзыка);
		СобытиеЖР = НСтр("ru = 'Получение выражения значения аналитики бюджетирования';
						|en = 'Receive budgeting dimension expression value'", КодЯзыка);
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Выражение = "ВЫБОР"; //@Query-part
	
	Если НЕ ВозможнаТрансляцияАналитики Тогда
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|			ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
		
	Иначе
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|		И НЕ %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
		|			ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			
			ЧастьВыражения =
			"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
			|		И %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
			|		И %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = %АдресТрансляцииАналитики%
			|			ТОГДА %ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса%%АдресТрансляцииАналитики%";
			
			ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%АдресТрансляцииАналитики%", НомерАналитики);
			
			Выражение = Выражение + Символы.ПС + ЧастьВыражения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЧастьВыражения = 
	"  ИНАЧЕ %ВыражениеПустогоЗначенияАналитики% 
	| КОНЕЦ";
	
	Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеКоличествоИспользуемыхАналитик%", ВыражениеКоличествоИспользуемыхАналитик);
	Выражение = СтрЗаменить(Выражение, "%НомерТекущейАналитики%", НомерТекущейАналитики);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиБезИндекса%", ВыражениеЗначенияАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТранслироватьАналитикуБезИндекса%", ВыражениеТранслироватьАналитикуБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеАдресТрансляцииАналитикиБезИндекса%", ВыражениеАдресТрансляцииАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса%", ВыражениеЗначенияАналитикиПриТрансляцииБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеПустогоЗначенияАналитики%", ВыражениеПустогоЗначенияАналитики());
	
	Возврат Выражение;
	
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляСУсловиемПоВидуАналитики
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляСУсловиемПоВидуАналитики.
//
Функция ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ВыражениеКоличествоИспользуемыхАналитик", "");
	Параметры.Вставить("ВыражениеВидАналитикиБезИндекса", "");
	Параметры.Вставить("ВыражениеЗначенияАналитикиБезИндекса", "");
	Параметры.Вставить("ИмяПараметраВидАналитики", "");
	
	Параметры.Вставить("ВыражениеПустогоЗначенияАналитики", ""); // Только для вспомогательных выражений отбора по аналитике.
	
	Возврат Параметры;
КонецФункции

// Возвращает текст поля для определения аналитики по виду
//
// Параметры:
// 	Параметры  - Структура - Структура параметров:
// 	 *ВыражениеКоличествоИспользуемыхАналитик - Строка - Выражение типа ИмяТаблицы.СтатьяПоказательНФПИмяТаблицы.КоличествоИспользуемыхАналитик.
// 					Например, "Данные.СтатьяБюджетов.КоличествоИспользуемыхАналитик".
// 	 *ВыражениеВидАналитикиБезИндекса - Строка - Выражение путь к виду аналитики, задаваемый без индекса. Типа "Данные.СтатьяБюджетов.ВидАналитики".
// 	 *ВыражениеЗначенияАналитикиБезИндекса - Строка - Выражение значения аналитики. Например, СвязиПоказателей.Аналитика%НомерТекущейАналитики%.
// 	 *ИмяПараметраВидАналитики - Строка - Имя параметра, передаваемого в запрос или СКД, ссылка на ПВХ.АналитикиСтатейБюджетов.
//
// Возвращаемое значение:
// 	Строка - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики.
//
Функция ТекстПоляСУсловиемПоВидуАналитики(Параметры) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Выражение =
	"ВЫБОР"; //@Query-part
	
	Для НомерТекущейАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ЧастьВыражения =
		"  КОГДА %ВыражениеКоличествоИспользуемыхАналитик% >= %НомерТекущейАналитики%
		|		И %ВыражениеВидАналитикиБезИндекса%%НомерТекущейАналитики% = %ПараметрВидАналитики%
		|			ТОГДА %ВыражениеЗначенияАналитикиБезИндекса%%НомерТекущейАналитики%";
		
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%НомерТекущейАналитики%", НомерТекущейАналитики);
		Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	КонецЦикла;
	
	ЧастьВыражения =
	"  ИНАЧЕ %ВыражениеПустогоЗначенияАналитики% 
	| КОНЕЦ";
	
	ВыражениеПустогоЗначенияАналитики = Параметры.ВыражениеПустогоЗначенияАналитики;
	Если НЕ ЗначениеЗаполнено(ВыражениеПустогоЗначенияАналитики) Тогда
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%ВыражениеПустогоЗначенияАналитики%", ВыражениеПустогоЗначенияАналитики());
	Иначе
		// Только для вспомогательных выражений отбора по аналитике.
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%ВыражениеПустогоЗначенияАналитики%", ВыражениеПустогоЗначенияАналитики);
	КонецЕсли;
	
	Выражение = Выражение + Символы.ПС + ЧастьВыражения;
	
	ПараметрВидАналитики = "&" + Параметры.ИмяПараметраВидАналитики;
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеКоличествоИспользуемыхАналитик%", Параметры.ВыражениеКоличествоИспользуемыхАналитик);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеВидАналитикиБезИндекса%", Параметры.ВыражениеВидАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначенияАналитикиБезИндекса%", Параметры.ВыражениеЗначенияАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ПараметрВидАналитики%", ПараметрВидАналитики);
	
	Возврат Выражение;
	
КонецФункции

// Возвращает шаблон параметров для функции ТекстПоляАналитикиПоАдресамТрансляции
//
// Возвращаемое значение:
// 	Структура - структура параметров. Описание структуры см. ТекстПоляАналитикиПоАдресамТрансляции.
//
Функция ШаблонПараметровДляПолученияТекстаПоляАналитикиПоАдресамТрансляции() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ВыражениеТранслироватьАналитикуБезИндекса", "");
	Параметры.Вставить("ВыражениеАдресТрансляцииАналитикиБезИндекса", "");
	Параметры.Вставить("ВыражениеЗначениеАналитикиБезИндексаПриТрансляции", "");
	Параметры.Вставить("ВыражениеЗначениеАналитикиБезИндексаБезТрансляции", "");
	
	Возврат Параметры;
КонецФункции

// Возвращает текст поля для определения аналитики по адресам трансляции.
// В общем случае возвращаемое выражение выглядит следующим образом:
//          ВЫБОР
//             КОГДА %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
//                 ТОГДА ВЫБОР 
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 1
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%1
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 2
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%2
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 3
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%3
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 4
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%4
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 5
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%5
//                     КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = 6
//                         ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%6
//                     КОНЕЦ
//             ИНАЧЕ %ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%%НомерТекущейАналитики%
//          КОНЕЦ
//
// Параметры:
// 	Параметры - Структура - Структура параметров:
// 	 *ВыражениеТранслироватьАналитикуБезИндекса - Строка - Выражение-путь к полю Булево, признаку необходимости транслировать аналитику. Без индекса.
// 	 *ВыражениеАдресТрансляцииАналитикиБезИндекса - Строка - Выражение-путь к полю Число адресу трансляции аналитики. Без индекса.
// 	 *ВыражениеЗначениеАналитикиБезИндексаПриТрансляции - Строка - Выражение значения аналитики при трансляции (ТранслироватьАналитику = истина). Без индекса.
// 	 *ВыражениеЗначениеАналитикиБезИндексаБезТрансляции - Строка - Выражение значения аналитики без трансляции (ТранслироватьАналитику = ложь). Без индекса.
// 	НомерТекущейАналитики - Число - Номер аналитики.
//
// Возвращаемое значение:
// 	Строка - конструкция "ВЫБОР" для подстановки в СКД или запрос для поля вида аналитики.
//
Функция ТекстПоляАналитикиПоАдресамТрансляции(Параметры, НомерТекущейАналитики) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	ВыражениеТранслироватьАналитикуБезИндекса = Параметры.ВыражениеТранслироватьАналитикуБезИндекса;
	ВыражениеАдресТрансляцииАналитикиБезИндекса = Параметры.ВыражениеАдресТрансляцииАналитикиБезИндекса;
	ВыражениеЗначениеАналитикиБезИндексаПриТрансляции = Параметры.ВыражениеЗначениеАналитикиБезИндексаПриТрансляции;
	ВыражениеЗначениеАналитикиБезИндексаБезТрансляции = Параметры.ВыражениеЗначениеАналитикиБезИндексаБезТрансляции;
	
	Выражение =
	"ВЫБОР
	|		КОГДА %ВыражениеТранслироватьАналитикуБезИндекса%%НомерТекущейАналитики%
	|			ТОГДА %ВыражениеТрансляции%
	|		ИНАЧЕ %ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%%НомерТекущейАналитики%
	| КОНЕЦ";
	
	ВыражениеТрансляции = "ВЫБОР"; //@Query-part
	
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ЧастьВыражения = " 
		|			КОГДА %ВыражениеАдресТрансляцииАналитикиБезИндекса%%НомерТекущейАналитики% = %СчетчикАналитик%
		|				ТОГДА %ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%%СчетчикАналитик%";
		
		ЧастьВыражения = СтрЗаменить(ЧастьВыражения, "%СчетчикАналитик%", Сч);
		
		ВыражениеТрансляции = ВыражениеТрансляции + ЧастьВыражения;
		
	КонецЦикла;
	
	ВыражениеТрансляции = ВыражениеТрансляции + "
	|			КОНЕЦ";
	
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТрансляции%", ВыражениеТрансляции);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеТранслироватьАналитикуБезИндекса%", ВыражениеТранслироватьАналитикуБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеАдресТрансляцииАналитикиБезИндекса%", ВыражениеАдресТрансляцииАналитикиБезИндекса);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначениеАналитикиБезИндексаПриТрансляции%", ВыражениеЗначениеАналитикиБезИндексаПриТрансляции);
	Выражение = СтрЗаменить(Выражение, "%ВыражениеЗначениеАналитикиБезИндексаБезТрансляции%", ВыражениеЗначениеАналитикиБезИндексаБезТрансляции);
	Выражение = СтрЗаменить(Выражение, "%НомерТекущейАналитики%", НомерТекущейАналитики);
	
	Возврат Выражение;
	
КонецФункции

#КонецОбласти

// Возвращает параметры получения факта по умолчанию
//
// Возвращаемое значение:
//	Структура - Параметры получения факта по статьям и показателя бюджетов со свойствами:
//		*ВалютаОтчета - СправочникСсылка.Валюты - Валюта данных.
//		*ФункциональнаяВалюта - ПеречислениеСсылка.ВидыУчетаВФункциональнойВалюте - Закешированное значение функцилнальной валюты
//		*ВалютаМеждународ - СправочникСсылка.Валюты - Закешированное значение функциональной валюты международного учета (см. МеждународныйУчетОбщегоНазначения.УчетныеВалюты) 
//		*Период - СтандартныйПериод - Период выборки.
//		*Периодичность - ПеречислениеСсылка.Периодичность, Неопределено - Периодичность детализации данных за период. Неопределено - без детализации.
//		*ОстаткиТолькоНаНачалоПериода - Булево - Получать факт только на начало периода (для остатков),
//			в противном случае данные получаются на конец каждого из подпериодов.
//			Значение по умолчанию - Ложь.
//		*ВозвращатьУпрИРеглСуммы - Булево - Вернуть суммы из регистров упр. и регл.
//			Значение по умолчанию - Ложь.
//		*ПоПравиламПолученияДанных - Булево - добавлять в таблицу данных колонку с примененным правилом.
//			Значение по умолчанию - Ложь.
//		*Показатели - Структура - показатели, которые автоматически подбираются в выборку с учетом настроек набора данных источника:
//			**Количество - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение количества
//			**Сумма - Произвольный - присутствие свойства в структуре означает, что в выборку следует добавить получение суммы
//		*ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево - дополнять факт по статьям, влияющим на показатели хранимым фактом.
//				По умолчанию Истина. Ложь - если весь хранимый факт получается отдельно (с помощью кэшируемых скд).
//				Дополнение хранимым фактом непосредственно осуществляется в стандартных отчетах бюджетирования.
//		*ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Аналитика (Номенклатура, Контрагенты...), в разрезе которой необходимо получить факт.
//		*ПоОрганизациям - Булево - Развернуть по организациям. Значение по умолчанию - Ложь.
//		*ПоПодразделениям - Булево - Развернуть по подразделениям. Значение по умолчанию - Ложь.
//		*ПоРегистратору - Булево - Развернуть факт по регистратору (для оборотов). Значение по умолчанию - Ложь.
//		*ДополнительныйОтбор - Структура - Дополнительный (к основному отбору правила) отбор, который накладывается на данные источника:
//			**Ключ - Произвольный - имя поля, по которому требуется применить доп. отбор
//			**Значение - Произвольный - значение доп. отбора.
//							- НастройкиКомпоновкиДанных - 
//
Функция ШаблонПараметровПолученияФакта() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	Параметры.Вставить("ОстаткиТолькоНаНачалоПериода", Ложь);
	Параметры.Вставить("ВозвращатьУпрИРеглСуммы", Ложь);
	Параметры.Вставить("ПоПравиламПолученияДанных", Ложь);
	Параметры.Вставить("ВозвращатьСтатьюПоказательБюджета", Ложь);
	
	// Показатели данных
	Параметры.Вставить("Показатели", Новый Структура("Количество, Сумма"));
	Параметры.Вставить("ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом", Истина);
	
	// Разрезы данных
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	Параметры.Вставить("ПоРегистратору", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	// Валюты
	Параметры.Вставить("ВалютаОтчета");
	//++ НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПланаСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Справочники.ПланыСчетовМеждународногоУчета.Международный,
		"ВалютаПредставления, УчетВФункциональнойВалюте");
	Если РеквизитыПланаСчетов.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл Тогда
		ФункциональнаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		ФункциональнаяВалюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Параметры.Вставить("ВалютаМеждународ", ФункциональнаяВалюта);
	//-- НЕ УТКА
	Параметры.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ФункциональнаяВалюта", Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл);
	
	Параметры.Вставить("РежимПолученияДанных");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает пустую таблицу с типизированными колонками, в соответствии с заданными параметрами для статей.
//
// Параметры:
// 	Параметры - см. БюджетированиеСервер.ШаблонПараметровПолученияФакта.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - пустая таблица с типизированными колонками:
// 		*СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов - Статья бюджетов.
// 		*Сценарий - СправочникСсылка.Сценарии - сценарий фактических данных. Предопределенные элементы
// 						"ИсполнениеБюджета" или "ФактическиеДанные".
// 		*РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - оперативные,
// 						регламентированный, международный учет или произвольные данные.
// 		*ИсточникДанных - СправочникСсылка.НастройкиХозяйственныхОпераций - источник оперативных данных.
//						- ПланСчетовСсылка - источник данных бухгалтерского (регламентированного или международного) учета.
//						- Строка - источник произвольных данных.
// 		*КорСчет - ПланСчетовСсылка - кор. источник данных бухгалтерского (регламентированного или международного) учета.
// 		*ИсточникСуммыОперации - ПеречислениеСсылка.ПоказателиАналитическихРегистров - указатель на имя определенного
// 						ресурса регистра источника данных.
// 		*ТипИтога - ПеречислениеСсылка.ТипыИтогов - итог в виде сальдо или оборота (свернутого и развернутого по Дт и Кт).
// 		*Отбор - Строка - Описание
// 		*Правило - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов - правило, согласно которому извлекается факт
// 		*Период - Дата - дата факта, приведенная к началу стандартного периода.
// 						Возможные значения периодичности задаются значениями перечисления Периодичность.
// 		*Регистратор - ДокументСсылка - документ, движение которого в указанной строке. Только для оборотов.
//						При условии, что включена детализация по регистратору.
//						См. ШаблонПараметровПолученияФакта() свойство ПоРегистратору.
// 		*Организация - СправочникСсылка.Организации - Организация, к которой относится факт.
//						При условии, что включена детализация по организациям.
//						См. ШаблонПараметровПолученияФакта() свойство ПоОрганизациям.
// 		*Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, к которому относится факт.
//						При условии, что включена детализация по подразделениям.
//						См. ШаблонПараметровПолученияФакта() свойство ПоПодразделениям.
// 		*Аналитика1 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Аналитика2 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Аналитика3 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Аналитика4 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Аналитика5 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Аналитика6 - Произвольный - Тип из плана видов характеристик "АналитикаСтатейБюджетов" - значение аналитики.
// 		*Ключ_УникальныйИдентификаторВидаАналитики - ОписаниеТипов - тип аналитики.
// 		*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - ед. измерения количественного показателя "Количество".
// 		*Количество - Число - значение количественного показателя.
// 		*ВалютаХранения - СправочникСсылка.Валюты - валюта операции показателя "Сумма" (валюта факта).
// 		*ПериодКурса - Дата - ближайшая дата примененного для конвертации курса валют.
// 		*Сумма - Число - значение суммового показателя в валюте факта.
// 		*Валюта - СправочникСсылка.Валюты - валюта суммового показателя "СуммаВВалюте".
// 		*СуммаВВалюте - Число - суммовой показатель "Сумма", приведенный к заданной валюте.
// 		*СуммаУпр - Число - суммовой показатель в валюте управленческого учета.
// 		*СуммаРегл - Число - суммовой показатель в валюте регламентированного учета.
//
Функция ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры) Экспорт
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТипов));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоПравиламПолученияДанных Тогда
		
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.НастройкиХозяйственныхОпераций"));
		//++ НЕ УТКА
		ТипПланаСчетов = МеждународныйУчетКлиентСервер.ТипПланСчетов();
		Если НЕ ТипПланаСчетов = Неопределено Тогда
			МассивТипов.Добавить(ТипПланаСчетов);
		КонецЕсли;
		//-- НЕ УТКА
		ТипПланаСчетов = РеглУчетКлиентСервер.ТипПланСчетов();
		Если НЕ ТипПланаСчетов = Неопределено Тогда
			МассивТипов.Добавить(ТипПланаСчетов);
		КонецЕсли;
		МассивТипов.Добавить(Тип("Строка"));
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(МассивТипов);
		
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТипыКорСчетов = Новый Массив;
		ТипПланаСчетов = РеглУчетКлиентСервер.ТипПланСчетов();
		Если НЕ ТипПланаСчетов = Неопределено Тогда
			ТипыКорСчетов.Добавить(ТипПланаСчетов);
		КонецЕсли;
		//++ НЕ УТКА
		ТипПланаСчетов = МеждународныйУчетКлиентСервер.ТипПланСчетов();
		Если НЕ ТипПланаСчетов = Неопределено Тогда
			ТипыКорСчетов.Добавить(ТипПланаСчетов);
		КонецЕсли;
		//-- НЕ УТКА
		ОписаниеТиповКорСчет = Новый ОписаниеТипов(ТипыКорСчетов);
		
		ТаблицаФакта.Колонки.Добавить("КорСчет", ОписаниеТиповКорСчет);
		
		ТаблицаФакта.Колонки.Добавить("ИсточникСуммыОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ПоказателиАналитическихРегистров"));
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
		И Параметры.ЕстьПериодичностьСекунда Тогда
		ТаблицаФакта.Колонки.Добавить("ПериодСекунда",
			Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТипСумма = Новый ОписаниеТипов(ТипЧисло, "Null");
		
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", ТипЧисло);
		
		ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", ТипЧисло);	
		
		Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
			ТаблицаФакта.Колонки.Добавить("СуммаУпр", ТипЧисло);
			ТаблицаФакта.Колонки.Добавить("СуммаРегл", ТипЧисло);
			ТаблицаФакта.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВВалютеХранения", ТипЧисло);
		ТаблицаФакта.Колонки.Добавить("ВалютаФункциональная", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВФункциональнойВалюте", ТипЧисло);
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

// Возвращает параметры по умолчанию для пересчета валют
// 
// Возвращаемое значение:
//	Структура - параметры расчета, определяющие способ пересчета из одной в валюты в другую:
//	  *ИмяНабораДанныхИсточника - Строка - имя набора данных, который будет пересчитываться и содержит поля сумм.
//	  *ИсточникКурсовВалют - Строка - имя регистра сведений с курсами валют. Может принимать одно из двух значений
//	  				"КурсыВалют" или "ПрогнозныеКурсыСценариев". КурсыВалют (по умолчанию) - фактические курсы валют.
//	  				ПрогнозныеКурсыСценариев - прогнозные курсы валют бюджетирования. В этом случае требуется указать
//	  				по какому сценарию выбирать курсы.
//	  *ИсходнаяВалюта - СправочникСсылка.Валюты - валюта, из которой требуется пересчитать суммы в таблице.
//	  			- Строка - имя колонки с типом СправочникСсылка.Валюты, в которой содержатся значения исходной
//	  				валюты для каждой строки.
//	  			- Неопределено - (по умолчанию) - будет осуществлен поиск колонки с именем "ИсходнаяВалюта".
//	  				Если колонка отсутствует, пересчет не будет производится.
//	  *КолонкиПересчета - Массив из Строка - Массив имен колонок, содержащих исходные суммы.
//	  			- Строка - имя колонки для пересчета
//	  			- Неопределено - (по умолчанию) - будет осуществлен поиск колонок с именами "Сумма",
//	  				"СуммаПриход", "СуммаРасход", "СуммаВВалюте", "СуммаВалПриход", "СуммаВалРасход", "ЗначениеПоказателя".
//	  *НомерНабораДанныхКонвертации - Число - номер набора данных конвертации предназначен для многократной
//	  				конвертации в одной схеме. По умолчанию - 1.
//	  *ПериодКурса - Дата - дата, на которую требуется произвести пересчет.
//	  			- Строка - имя колонки с типом Дата, в которой содержатся значения дат курсов для каждой строки.
//	  			- Неопределено - (по умолчанию) -  будет осуществлен поиск колонки с именем "ПериодКурса".
//	  				Если колонка отсутствует, то дата курса будет приравнена к сегодняшнему дню.
//	  *СценарийПрогнозногоКурса - СправочникСсылка.Сценарии - сценарий, для которого заданные прогнозные курсы.
//	  			- Строка - имя поля с типом СправочникСсылка.Сценарии, в котором содержатся значения
//	  				сценария курсов для каждой строки.
//	  *СценарийПрогнозногоКурса - Неопределено - (по умолчанию) - будет осуществлен поиск колонки с именем "Сценарий".
//	  				Если колонка отсутствует, пересчет не будет производится.
//	  *ЦелеваяВалюта - СправочникСсылка.Валюты - валюта, в которую требуется пересчитать суммы в таблице.
//	  			- Строка - имя поля с типом СправочникСсылка.Валюты, в котором содержатся значения целевой валюты для каждой строки.
//	  			- Неопределено - (по умолчанию) - будет осуществлен поиск колонки с именем "ЦелеваяВалюта".
//	  				Если колонка отсутствует, пересчет не будет производится.
//
Функция ШаблонПараметровПересчетаВВалюту() Экспорт
	
	ШаблонПараметровПересчетаВВалюту = Новый Структура;
	
	ШаблонПараметровПересчетаВВалюту.Вставить("ИмяНабораДанныхИсточника", "");
	ШаблонПараметровПересчетаВВалюту.Вставить("ИсточникКурсовВалют", Метаданные.РегистрыСведений.ОтносительныеКурсыВалют.Имя);
	ШаблонПараметровПересчетаВВалюту.Вставить("ИсходнаяВалюта", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("КолонкиПересчета", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("НомерНабораДанныхКонвертации", 1);
	ШаблонПараметровПересчетаВВалюту.Вставить("ПериодКурса", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("СценарийПрогнозногоКурса", Неопределено);
	ШаблонПараметровПересчетаВВалюту.Вставить("ЦелеваяВалюта", Неопределено);
	
	Возврат ШаблонПараметровПересчетаВВалюту;
	
КонецФункции

// Возвращает пустую типизированную структуру настроек для последующего заполнения
// Используется для интерактивного и неинтерактивного заполнения полей-источников из схемы-источника 
// для каждого вида аналитики правила получения фактических данных.
//
// Возвращаемое значение:
//	Структура - параметры заполнения аналитик:
//		*АдресСхемыКомпоновкиДанных - Строка - адрес схемы-источника данных во временном хранилище.
//		*КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настройки на основе схемы-источника данных.
//		*УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы или элемента справочника,
//					для которого формируются настройки.
//		*НастройкиЗаполненияАналитики - ТаблицаЗначений - настройки каждой из 6 аналитик:
//			**ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//			**НомерАналитики - Число - Номер аналитики.
//			**ВыражениеЗаполненияАналитики - Строка - выражение заполнения.
//			**ЗаполнятьУказаннымЗначением - Булево - флаг заполнения указанным значением.
//			**ЗначениеАналитики - Произвольный - Значение аналитики.
//			**ПредставлениеВыраженияЗаполненияАналитики - Строка - Представление выражения заполнения.
//			**НетВДоступныхПолях - Булево - Флаг проверки.
//			**ДополнительноеСвойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - дополнительный реквизит.
//
Функция ШаблонПараметровЗаполненияАналитик() Экспорт
	ПараметрыЗаполненияАналитик = Новый Структура; 
	
	НастройкиЗаполненияАналитики = Новый ТаблицаЗначений;
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НомерАналитики", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ВыражениеЗаполненияАналитики", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗаполнятьУказаннымЗначением", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ЗначениеАналитики", ВсеТипыАналитик());
	НастройкиЗаполненияАналитики.Колонки.Добавить("ПредставлениеВыраженияЗаполненияАналитики", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	НастройкиЗаполненияАналитики.Колонки.Добавить("НетВДоступныхПолях", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	НастройкиЗаполненияАналитики.Колонки.Добавить("ДополнительноеСвойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	ПараметрыЗаполненияАналитик.Вставить("НастройкиЗаполненияАналитики", НастройкиЗаполненияАналитики);
	ПараметрыЗаполненияАналитик.Вставить("АдресСхемыКомпоновкиДанных", "");
	ПараметрыЗаполненияАналитик.Вставить("КомпоновщикНастроек", Новый КомпоновщикНастроекКомпоновкиДанных);
	ПараметрыЗаполненияАналитик.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Возврат ПараметрыЗаполненияАналитик;
КонецФункции


// Возвращает параметры получения значений нефинансовых показателей по умолчанию
//
// Возвращаемое значение:
// 	 Структура - Параметры получения значений нефинансовых показателей:
//    *РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - режим получения данных.
//    *ВалютаМеждународ - СправочникСсылка.Валюты - Валюта международного учета.
//    *ВалютаРегл - СправочникСсылка.Валюты - Валюта регламентированного учета.
//    *ВалютаУпр - СправочникСсылка.Валюты - Валюта управленческого учета.
//    *ДополнительныйОтбор - Произвольный - Дополнительный отбор.
//    *ПоПодразделениям - Булево - Флаг получения данных в разрезе подразделений.
//    *ПоОрганизациям - Булево - Флаг получения данных в разрезе организаций.
//    *ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Виды аналитик.
//    *Периодичность - ПеречислениеСсылка.Периодичность - Периодичность.
//    *Период - СтандартныйПериод - Период получения данных.
Функция ШаблонПараметровПолученияЗначенийНефинансовыхПоказателей() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Период");
	Параметры.Вставить("Периодичность");
	
	Параметры.Вставить("ВидыАналитик", Новый Массив);
	Параметры.Вставить("ПоОрганизациям", Ложь);
	Параметры.Вставить("ПоПодразделениям", Ложь);
	
	Параметры.Вставить("ДополнительныйОтбор");
	
	// Валюты
	Параметры.Вставить("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
	Параметры.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	//++ НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПланаСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Справочники.ПланыСчетовМеждународногоУчета.Международный,
								"ВалютаПредставления, УчетВФункциональнойВалюте");
	Если РеквизитыПланаСчетов.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл Тогда
		ФункциональнаяВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		ФункциональнаяВалюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	КонецЕсли;
	Параметры.Вставить("ВалютаМеждународ", ФункциональнаяВалюта);
	//-- НЕ УТКА
	
	Параметры.Вставить("РежимПолученияДанных", Перечисления.РежимПолученияДанныхБюджетирования.Разрешенные);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает настройки, созданные по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать.
//
// Возвращаемое значение:
// НастройкиКомпоновкиДанных - настройки по умолчанию.
//
Функция ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных);
	
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
	
КонецФункции

// Возвращает компоновщик настроек, созданный по переданной схеме
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема, настройки по которой требуется инициализировать.
//
// Возвращаемое значение:
// КомпоновщикНастроекКомпоновкиДанных - настройки по умолчанию.
//
Функция ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Возвращает пустое значение соответствующего измерению типа 
// 
// Параметры:
//	ИмяИзмерения - Строка - название измерения регистра РегистрНакопления.ОборотыБюджетов.
//
// Возвращаемое значение:
//	Произвольный - пустое значение соответствующего типа.
// 
Функция ЗначениеПоУмолчаниюДляИзмерения(ИмяИзмерения) Экспорт
	ЗначениеПоУмолчанию = Неопределено;
	
	Если ИмяИзмерения = "Организация" Тогда
		ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ИмяИзмерения = "Подразделение" Тогда
		ЗначениеПоУмолчанию = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Возвращает таблицу с фактическими данными
// Состав колонок определяется параметрами получения факта.
//
// Параметры:
//	ПараметрыПолученияФакта - см. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта.
//
// Возвращаемое значение:
//	ТаблицаЗначений - фактические данные.
//
Функция ФактСтатейПоПравилам(ПараметрыПолученияФакта) Экспорт
	
	#Область ИнициализацияПеременных
	
	// Параметры получения фактических данных
	ПоПравиламПолученияДанных = ПараметрыПолученияФакта.ПоПравиламПолученияДанных;
	ПоОрганизациям = ПараметрыПолученияФакта.ПоОрганизациям;
	ПоПодразделениям = ПараметрыПолученияФакта.ПоПодразделениям;
	ПоРегистратору = ПараметрыПолученияФакта.ПоРегистратору;
	ПоПериодам = ПараметрыПолученияФакта.Периодичность <> Неопределено;
	Периодичность = ПараметрыПолученияФакта.Периодичность;
	ВидыАналитик = ПараметрыПолученияФакта.ВидыАналитик;
	МаксимальныйНомерАналитики = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ТаблицаПравилСтатей  = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	
	// Дополнительные данные
	ДополнительныеДанные = ПараметрыПолученияФакта.ДополнительныеДанные;
	ВидДопДанных = ДополнительныеДанные.Вид;
	ТаблицаДопДанных = ДополнительныеДанные.ТаблицаДанных;
	ИмяПоляИдентификатора = ДополнительныеДанные.ИмяПоляИдентификатора;
	
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	ИспользуемыеКолонкиДопДанных = Новый Массив;
		
	// Таблица периодов
	ТаблицаПериодов = ПараметрыПолученияФакта.ТаблицаПериодов;
	КолонкиТаблицыПериодов = ТаблицаПериодов.Колонки;
	
	// Идентификация источников данных
	ПолученныеМакеты = Новый Соответствие;
	НаборыДанныхДляИдентификации = Новый Соответствие;
	
	ИмяПоляИдентификатора = "ИдентификаторИсточникаДанных";
	
	// Свертка данных
	КолонкиИдентификаторы = Новый Массив;
	КолонкиАгрегаты = Новый Массив;
	
	#КонецОбласти 
	
	#Область НастройкаНаборовДанных
	
	// Создать пустую схему
	СКДПолученияФакта = КомпоновкаДанныхСервер.ПустаяСхема();
	
	// Добавить НД таблицы периодов
	НДТаблицаПериодов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаПериодов");
		
	Для Каждого Колонка Из ТаблицаПериодов.Колонки Цикл
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДТаблицаПериодов, Колонка.Имя, Колонка.Имя,, Колонка.ТипЗначения);
	КонецЦикла;
	
	// Добавить НД объединения
	НДОбъединенныйФакт = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
		Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"), "ОбъединенныйФакт");
	
	// Для каждого уникального макета схемы добавить НД регистра и перенести настройки типов.
	Для Каждого ПрименяемоеПравилоФакта Из ТаблицаПравилСтатей Цикл
		ИмяМакета = ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных;
		
		Если ПолученныеМакеты.Получить(ИмяМакета) = Неопределено Тогда
			Макет = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПрименяемоеПравилоФакта.Правило,,, Истина);
			
			ПолученныеМакеты.Вставить(ИмяМакета, Макет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолученныйМакет Из ПолученныеМакеты Цикл 
		ИмяНабораДанных = ПолученныйМакет.Ключ;
		ИсходныйМакет = ПолученныйМакет.Значение;
		
		// Перенесем все наборы данных источников в объединенный набор
		СкопированныеНаборыДанных = КомпоновкаДанныхСервер.СкопироватьНаборыДанных(НДОбъединенныйФакт, ИсходныйМакет, ИмяНабораДанных);
		
		ИскомаяКоллекцияНаборов = НаборыДанныхДляИдентификации[ИмяНабораДанных];
		Если ИскомаяКоллекцияНаборов = Неопределено Тогда
			
			НаборыДанныхДляИдентификации.Вставить(ИмяНабораДанных, СкопированныеНаборыДанных);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИскомаяКоллекцияНаборов, СкопированныеНаборыДанных);
			
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим макеты ДО переноса - добавим в них поле "ИдентификаторИсточника"
	// Добавим в каждый набор поле "ИдентификаторНабора"
	// Для поставляемых схем - это имя макета и источник данных настройки хозяйственной операции
	// Для произвольных данных - это строка вида "Ключ_ХешСхемы". 
	// Хеш используется для минимизации количества произвольных наборов данных. 
	// Если СКД в разных правилах идентичны, тогда в исполняемой схеме будет всего один набор данных.
	Для Каждого НаборДанныхДляИдентификации Из НаборыДанныхДляИдентификации Цикл 
		ИдентификаторНабора    = НаборДанныхДляИдентификации.Ключ;
		НаборыПоИдентификатору = НаборДанныхДляИдентификации.Значение;
		
		Для Каждого НаборПоИдентификатору Из НаборыПоИдентификатору Цикл 
			ЗапросНабора = НаборПоИдентификатору.Запрос;
				
			Если ТипЗнч(НаборПоИдентификатору) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				// Добавим поле в расширенные поля запроса компоновки и поля выборки запроса
				ЗапросНабора = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ЗапросНабора, """" + ИдентификаторНабора + """", ИмяПоляИдентификатора, , Истина, Истина);
				
				ЗапросНабора = СтрЗаменить(ЗапросНабора, """ИдентификаторИсточникаДанных""", """" + ИдентификаторНабора + """");
				
				НаборПоИдентификатору.Запрос = ЗапросНабора;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
	#КонецОбласти 
	
	#Область НастройкаОсновныхПолейНаборовДанных
	
	// В текст запроса добавить поля-параметры для соединения с таблицей периодов
	НаборыФакта = НДОбъединенныйФакт.Элементы;
	
	Для Каждого КолонкаТаблицыПериодов Из КолонкиТаблицыПериодов Цикл 
		ИмяКолонки = КолонкаТаблицыПериодов.Имя;
		ТипКолонки = КолонкаТаблицыПериодов.ТипЗначения;
		
		Для Каждого НаборФакта Из НаборыФакта Цикл 
			Если ТипЗнч(НаборФакта) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				ВыражениеПоляВыборки = "&" + ИмяКолонки;
				
				НаборФакта.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(НаборФакта.Запрос,
					ВыражениеПоляВыборки, ИмяКолонки,, Истина, Истина);
			КонецЕсли;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборФакта, ИмяКолонки, ИмяКолонки,, ТипКолонки);
		КонецЦикла;
		
		// Добавим поля дочерних наборов в корневой, объединяющий факт
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДОбъединенныйФакт, ИмяКолонки, ИмяКолонки,, ТипКолонки);
		
		// Добавим связь НД периодов и НД объединения по параметрам периода
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта,
			НДТаблицаПериодов,
			НДОбъединенныйФакт,
			ИмяКолонки,
			ИмяКолонки,
			ИмяКолонки);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПодключениеИсточникаДополнительныхДанных
	
	// Добавим дополнительные данные в расчетные поля
	КолонкиДопДанных = ТаблицаДопДанных.Колонки;
	Если ДопДанныеВычисляемыеПоля Тогда
		
		// Соберем коллекцию вычисляемых колонок
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			Если ИмяПоля = "УникальныйИдентификатор"
				Или ПоПравиламПолученияДанных 
					И (ИмяПоля = "ПравилоФакта" Или ИмяПоля = "НачалоПериода" Или ИмяПоля = "КонецПериода") Тогда
				
				Продолжить;
			КонецЕсли;
			ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
		КонецЦикла;
		
		Для Каждого СтрокаДопДанных Из ТаблицаДопДанных Цикл
			УникальныйИдентификатор = СтрокаДопДанных.УникальныйИдентификатор;
			
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл
				ИмяПоля = КолонкаДопДанных.Имя;
				ТипПоля = КолонкаДопДанных.ТипЗначения;
				ЗначениеПоля = СтрокаДопДанных[ИмяПоля];
				
				ИмяПоляВСхеме = ИмяПоля + "_" + УникальныйИдентификатор;
				
				// Добавим параметр со значением
				КомпоновкаДанныхСервер.ДобавитьПараметр(СКДПолученияФакта, ИмяПоляВСхеме, ТипПоля, ЗначениеПоля);
			
				// Рассчитаем значение правила для группировок
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляВСхеме, "&" + ИмяПоляВСхеме);
				
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ДопДанныеДопНабор Тогда 
		НДДопДанныеДопНабор = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СКДПолученияФакта, 
			Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ТаблицаДопДанных");
			
		Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл
			ИмяПоля = КолонкаДопДанных.Имя;
			ТипПоля = КолонкаДопДанных.ТипЗначения;
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДДопДанныеДопНабор, ИмяПоля, ИмяПоля, , ТипПоля);
			
			// Основной режим присоединения слева доп. данных - по всем доступным колонкам
			Если НДОбъединенныйФакт.Поля.Найти(ИмяПоля) = Неопределено Тогда
				// "Истинные" колонки доп. данных. Те по которым возможно соединение, уже есть в наборах данных.
				ИспользуемыеКолонкиДопДанных.Добавить(КолонкаДопДанных);
				
				Продолжить;
			КонецЕсли;
			
			// Добавим связь НД периодов и НД объединения по параметрам периода
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СКДПолученияФакта, 
				НДОбъединенныйФакт, 
				НДДопДанныеДопНабор,
				ИмяПоля, 
				ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область НастройкаГруппировокИОтборов
	
	// Создадим и инициализируем компоновщик
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПолученияФакта);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	// Добавим общие для всех группировок поля в корень структуры
	КорневойЭлементСтруктуры = Настройки.Структура;
	
	// Установим общие параметры
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ПривилегированныйРежим", Ложь);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ПривилегированныйРежимИсточника", Ложь);
	
	// Добавим общие отборы
	Если ПараметрыПолученияФакта.ДополнительныйОтбор <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПараметрыПолученияФакта.ДополнительныйОтбор.Отбор, Настройки.Отбор, Истина);
	КонецЕсли;
	
	// Добавим отборы предварительной фильтрации данных для каждого правила
	ГруппаДопОтборовВсехПравил = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,
		Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаДопОтборовВсехПравил.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаДопОтборовВсехПравил.Использование = Истина;
	ГруппаДопОтборовВсехПравил.Представление = "ДопОтборВсехПравил";
	
	ПоляИтога = СКДПолученияФакта.ПоляИтога;
		
	Для Каждого ПериодИПравило Из ТаблицаПериодов Цикл 
		ПоискПравила = Новый Структура("Правило", ПериодИПравило.ПравилоФакта); 
		НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(ПоискПравила);
		ПрименяемоеПравило = НайденныеСтроки[0];
		
		Если ПоПравиламПолученияДанных Тогда
			ПоискПравилаИПериода = Новый Структура("ПравилоФакта, НачалоПериода, КонецПериода");
			ЗаполнитьЗначенияСвойств(ПоискПравилаИПериода, ПериодИПравило);

			НайденныеСтроки = ТаблицаДопДанных.НайтиСтроки(ПоискПравилаИПериода);
			ДопДанныеПравила = НайденныеСтроки[0];
		КонецЕсли;
		
		УникальныйИдентификатор = ПрименяемоеПравило.УникальныйИдентификатор;
		ИдентификаторМакета = ПрименяемоеПравило.ИмяМакетаИсточникаДанных;
		КомпоновщикНастроек = ПрименяемоеПравило.КомпоновщикНастроек; // ХранилищеЗначения
		НастройкиПравила = КомпоновщикНастроек.Получить();
		Коэффициент = ПрименяемоеПравило.Коэффициент;
		
		РазделИсточникаДанных = ПрименяемоеПравило.РазделИсточникаДанных;
		ИсточникДанных = ПрименяемоеПравило.ИсточникДанных;
		ХозяйственнаяОперация = ПрименяемоеПравило.ХозяйственнаяОперация;
		
		ГруппаДопОтбораПравила = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтборовВсехПравил,
			Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаДопОтбораПравила.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаДопОтбораПравила.Использование = Истина;
		ГруппаДопОтбораПравила.Представление = "ДопОтборПравила_" + УникальныйИдентификатор;
		
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтбораПравила, "ИдентификаторИсточникаДанных",
			ИдентификаторМакета,, ВидСравненияКомпоновкиДанных.Равно);
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппаДопОтбораПравила, Истина);
		
		// Для каждого правила (если требуется) добавить группировку, для формирования части таблицы факта
		// В группировке добавить отборы, нужные для получения порции данных правила
		// Добавить дополнительные отборы.
		ГруппировкаПравила = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "НачалоПериода");
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "КонецПериода");
		КонецЕсли;
		
		Если ДопДанныеВычисляемыеПоля Тогда
			Для Каждого КолонкаДопДанных Из КолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор"
					Или ПоПравиламПолученияДанных 
						И (ИмяКолонки = "ПравилоФакта" Или ИмяКолонки = "НачалоПериода" Или ИмяКолонки = "КонецПериода") Тогда
					Продолжить;
				КонецЕсли;
				
				КолонкиИдентификаторы.Добавить(ИмяКолонки);
		
				Если ПоПравиламПолученияДанных Тогда
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила,
						ИмяКолонки + "_" + ДопДанныеПравила.УникальныйИдентификатор);
				Иначе
					ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила,
						ИмяКолонки + "_" + УникальныйИдентификатор);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ДопДанныеДопНабор Тогда
			Для Каждого КолонкаДопДанных Из ИспользуемыеКолонкиДопДанных Цикл 
				ИмяКолонки = КолонкаДопДанных.Имя;
				
				Если ИмяКолонки = "УникальныйИдентификатор" Тогда
					Продолжить;
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяКолонки);
			КонецЦикла;
		КонецЕсли;
		
		Если ПоОрганизациям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Организация");
		КонецЕсли;
		
		Если ПоПодразделениям Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Подразделение");
		КонецЕсли;
		
		Если ПоРегистратору Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Регистратор");
		КонецЕсли;
		
		Если ПоПериодам Тогда
			ИмяПериода = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
			
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПериода);
		КонецЕсли;
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидАналитики = ПрименяемоеПравило["ВидАналитики" + НомерАналитики];
			
			Если ЗначениеЗаполнено(ВидАналитики) 
				И Не ВидыАналитик.Найти(ВидАналитики) = Неопределено Тогда
				ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				
				Если ПоПравиламПолученияДанных Тогда
					СуффиксПолей = ДопДанныеПравила.УникальныйИдентификатор;
				Иначе
					СуффиксПолей = УникальныйИдентификатор;
				КонецЕсли;
				
				ИмяПоляНумерованнойАналитики = "Аналитика" + НомерАналитики + "_" + СуффиксПолей;
				
				// Ожидается, что правила получения факта все выражения заполнены
				// Но бывают ситуации, когда аналитика используется, но выражение не заполнено. 
				// Например, после программного создания правил.
				ВыражениеЗаполненияАналитики = ПрименяемоеПравило["ВыражениеЗаполненияАналитики" + НомерАналитики];
				Если Не ЗначениеЗаполнено(ВыражениеЗаполненияАналитики) Тогда
					ВыражениеЗаполненияАналитики = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляАналитики);
				
				ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта, ИмяПоляНумерованнойАналитики, ВыражениеЗаполненияАналитики, , Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, ИмяПоляНумерованнойАналитики);
			КонецЕсли;
		КонецЦикла;
		
		ИсточникиСуммыПравила = ИсточникиДанныхСервер.ИсточникиСуммыПравила(СКДПолученияФакта, ПрименяемоеПравило);
		
		// Сумма в валюте операции
		ИмяПоляВВалютеОперации = "";
		Если ИсточникиСуммыПравила.Свойство("Валюта", ИмяПоляВВалютеОперации) Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПравила, "Валюта");
			
			Если ПоляИтога.Найти(ИмяПоляВВалютеОперации) = Неопределено Тогда
				ПрефиксКоэффициента = ?(Коэффициент = 1, "", "(" + Формат(Коэффициент, "ЧРД=.; ЧН=0; ЧГ=0") + ") * ");
				
				ФинансоваяОтчетностьСервер.НовыйРесурс(СКДПолученияФакта, ИмяПоляВВалютеОперации, ПрефиксКоэффициента + "Сумма");
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеПолеВыбора(ГруппировкаПравила, ИмяПоляВВалютеОперации);
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор, ИмяПоляВВалютеОперации,,, ВидСравненияКомпоновкиДанных.Заполнено);
			
			КолонкиАгрегаты.Добавить(ИмяПоляВВалютеОперации);
		КонецЕсли;
		
		// Отборы отдельного правила на уровне группировки, включающей его
		// По сути - это дополнительная фильтрация данных, которые относятся к отдельному правилу.
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
			"ИдентификаторИсточникаДанных", ИдентификаторМакета,, ВидСравненияКомпоновкиДанных.Равно);
		
		Если РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
				"ХозяйственнаяОперация", ХозяйственнаяОперация,, ВидСравненияКомпоновкиДанных.Равно);
		ИначеЕсли РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
			Или РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
				"Счет", ИсточникДанных,, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
		Если ПоПравиламПолученияДанных Тогда
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
				"НачалоПериода", ПериодИПравило.НачалоПериода,, ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
				"КонецПериода", ПериодИПравило.КонецПериода,, ВидСравненияКомпоновкиДанных.Равно);
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПравила.Отбор,
				"ПравилоФакта", ПериодИПравило.ПравилоФакта,, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиПравила.Отбор, ГруппировкаПравила.Отбор, Истина);
	
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеДанных
	
	// Инициализировать макет компоновки, который будет сохраняться в кэш и выполняться
	МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПолученияФакта, Настройки);
	
	// Выполнить процессор вывода в коллекцию значений
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	Если ДопДанныеДопНабор Тогда
		ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаДопДанных);
	КонецЕсли;
	ДанныеИсточниковПоПравилам = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	
	#КонецОбласти 
	
	#Область ПостобработкаДанных_СверткаПравилИСумм
	
	// "Свернуть" колонки-идентификаторы правила, в одну
	Если ПоПравиламПолученияДанных Тогда
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиИдентификаторы.Добавить("Аналитика" + НомерАналитики);
		КонецЦикла;
		
		КолонкиИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиИдентификаторы);
		
		СтрокаКолонкиИдентификаторы = СтрСоединить(КолонкиИдентификаторы, ", ");
		
		Идентификаторы = ТаблицаДопДанных.ВыгрузитьКолонку("УникальныйИдентификатор");
		КолонкиАгрегаты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиАгрегаты);
		ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(
			ДанныеИсточниковПоПравилам,
			СтрокаКолонкиИдентификаторы,
			Идентификаторы, "_",
			КолонкиАгрегаты,
			Истина);
		
		Идентификаторы.Очистить();
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
			КолонкиИдентификаторыСуммы = "Сумма";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Сумма", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам, КолонкиИдентификаторыСуммы, Идентификаторы);
		КонецЕсли;
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Количество") И Ложь Тогда
			КолонкиИдентификаторыКоличества = "Количество";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Количество", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам,
				КолонкиИдентификаторыКоличества, Идентификаторы);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	// Вернуть таблицу факта
	ИндексыТаблиц = ПараметрыПолученияФакта.ИндексыТаблиц; // Соответствие
	ИндексыТаблицы = ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	Возврат ДанныеИсточниковПоПравилам;
	
КонецФункции

// Возвращает факт по статьям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора статей бюджетов
// 	Параметры - Структура - Параметры получения фактических данных
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета из валюты хранения в валюту статьи
// 	ДополнятьХранимымФактом - Булево - Признак необходимости дополнения фактических данных хранимыми данными.
//
// Возвращаемое значение:
// ТаблицаЗначений - Фактические данные по статьям бюджетов.
//
Функция ФактПоСтатьямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина, ДополнятьХранимымФактом = Истина) Экспорт
	
	// Подготовим таблицу факта
	ФактПоСтатьямБюджетов = ШаблонТаблицыФактаПоСтатьямБюджетов(Параметры);
	
	// Подготовим таблицу правил, по которым планируется получить данные
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора,
		"Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Настройки, "ПромежуточноеКэшированиеРезультатовРаботыПравил", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
	// Дополним отбором, обеспечивающим выбор только статей для получения оборотов
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		Настройки, "ПоказательБюджетов",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ТаблицаПравилСтатей = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравилСтатей.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соответствии с правилами
	Для каждого Правило Из ТаблицаПравилСтатей Цикл
		ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ФактПоСтатьямБюджетов);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта);
	КонецЕсли;
	
	Если ДополнятьХранимымФактом Тогда
		ТаблицаХранимыйФакт = ФактСтатьиБюджетовХранимый(Параметры);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаХранимыйФакт, ФактПоСтатьямБюджетов);
	КонецЕсли;
	
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

// Возвращает факт по показателям бюджетов в соответствии с настроенными правилами
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил
// 	Параметры - Структура - Параметры получения фактических данных:
// 	* Период - СтандартныйПериод - 
// 	ПересчитыватьВВалюту - Булево - Признак необходимости пересчета факта в валюту отчета.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Фактические данные по показателям бюджетов.
//
Функция ФактПоПоказателямБюджетов(НастройкиОтбора, Знач Параметры, ПересчитыватьВВалюту = Истина) Экспорт
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Параметры.ОстаткиТолькоНаНачалоПериода Или Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, Параметры.Периодичность, Параметры.Период.ДатаНачала, Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	// Подготовим таблицу факта
	ФактПоПоказателямБюджетов = ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры);
	
	// Подготовим таблицу правил
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	КомпоновкаДанныхСервер.ПолучитьМакетКомпоновки(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравил.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравил.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Получим факт в соответствии с правилами
	Для каждого Правило Из ТаблицаПравил Цикл
		ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ФактПоПоказателямБюджетов);
	КонецЦикла;
	
	// Пересчитаем факт в валюту показателей бюджетов
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ФактПоПоказателямБюджетов, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта);
	КонецЕсли;
		
	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

// Возвращает факт по статьям и показателям бюджетов, а также значения нефинансовых показателей, входящих в структуру
// вида бюджета.
//
// Параметры:
// 	ПараметрыДанных - Структура - Отборы, определенные на уровне бюджетного отчета
// 	ИсточникиДанных - Массив из см. БюджетнаяОтчетностьРасчетКэшаСервер.НовыйИсточник - Источников данных вида бюджета
// 	ВалютаОтчета - СправочникСсылка.Валюты - Валюта, в которой необходимо вернуть факт.
// 	РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - режим получения данных.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Факт по виду бюджета.
//
Функция ФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных) Экспорт
	
	Если ИспользоватьАльтернативныйАлгоритм() Тогда
		ТаблицаДанныхПоВидуБюджета = РассчитатьФактПоВидуБюджетаАльтернативный(
			ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	Иначе
		ТаблицаДанныхПоВидуБюджета = РассчитатьФактПоВидуБюджета(
			ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

// Возвращает таблицу с фактическими данными
// Состав колонок определяется параметрами получения факта.
//
// Параметры:
//	ИмяСправочникаИсточника - Строка - например, "ПравилаПолученияФактаПоПоказателямБюджетов". См. подробнее ИсточникиДанныхПовтИсп.ПоддерживаемыеСправочникиИсточникиДанных()
//	ПараметрыПолученияФакта - См. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта
//
// Возвращаемое значение:
//	ТаблицаЗначений - фактические данные.
//
Функция ФактическиеДанныеИзИсточников(ИмяСправочникаИсточника, ПараметрыПолученияФакта)
	
	#Область ИнициализацияПеременных
	ЭтоОбороты = (ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов");
	ЭтоОстатки = (ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов");
	
	РегламентированныйУчет = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет;
	МеждународныйУчет = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
	
	// Параметры получения фактических данных
	ПоПравиламПолученияДанных = ПараметрыПолученияФакта.ПоПравиламПолученияДанных;
	ПоОрганизациям = ПараметрыПолученияФакта.ПоОрганизациям;
	ПоПодразделениям = ПараметрыПолученияФакта.ПоПодразделениям;
	ПоРегистратору = ПараметрыПолученияФакта.ПоРегистратору;
	ПоЕдиницамИзмерения = ПараметрыПолученияФакта.ПоЕдиницамИзмерения;
	ПоВалютам = ПараметрыПолученияФакта.ПоВалютам;
	РежимПолученияДанных = ПараметрыПолученияФакта.ОграниченияДоступа.РежимПолученияДанных;
	
	Если ЭтоОбороты Тогда
		ПоПериодам = ПараметрыПолученияФакта.Периодичность <> Неопределено;
		Периодичность = ПараметрыПолученияФакта.Периодичность;
		Если ПоПериодам Тогда
			ВыражениеПериодаПланирования = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
		Иначе
			ВыражениеПериодаПланирования = "ПериодДень";
		КонецЕсли;
		ВыражениеПериодаКурса = "ПериодДень";
	ИначеЕсли ЭтоОстатки Тогда
		ПоПериодам = Ложь;
		ВыражениеПериодаПланирования = "Период";
		ВыражениеПериодаКурса = "Период";
		
		//++ Локализация
		КоличествоСубконтоХозрасчетный = Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;
		//-- Локализация
		
		//++ НЕ УТКА
		КоличествоСубконтоМеждународный = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
		//-- НЕ УТКА
	КонецЕсли;
	
	ЗапрошенныеВидыАналитик = ПараметрыПолученияФакта.ВидыАналитик;
	МаксимальныйНомерАналитики = ПараметрыПолученияФакта.МаксимальныйНомерАналитики;
	ИспользуемыеНумерованныеАналитики = ПараметрыПолученияФакта.ИспользуемыеНумерованныеАналитики;
	
	ТаблицаПравилСтатей  = ПараметрыПолученияФакта.ТаблицаПравилСтатей;
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей);
	
	// Дополнительные данные
	ДополнительныеДанные = ПараметрыПолученияФакта.ДополнительныеДанные;
	ВидДопДанных = ДополнительныеДанные.Вид;
	ТаблицаДопДанных = ДополнительныеДанные.ТаблицаДанных;
	
	ДопДанныеВычисляемыеПоля = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.ВычисляемыеПоля;
	ДопДанныеДопНабор = ВидДопДанных = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
	
	// Таблица периодов
	ТаблицаОбластейДанных  = ПараметрыПолученияФакта.ОбластиДанных.ТаблицаДанных; // ТаблицаЗначений -
	КолонкиОбластейДанных  = ТаблицаОбластейДанных.Колонки;
	
	// Идентификация источников данных
	ПолученныеМакеты = Новый Соответствие;
	НаборыДанныхДляИдентификации = Новый Соответствие;
	
	ИмяПоляИдентификатора = "ИдентификаторИсточникаДанных";
	ВыражениеПараметраИдентификатора = """" + ИмяПоляИдентификатора
		+ """ = &" + ИмяПоляИдентификатора;  //@query-part
	ПрефиксУсловияВыражения = "УсловиеВыражения";
	
	УсловияВыражений = ПараметрыПолученияФакта.УсловияВыражений;
	
	// Свертка данных
	КолонкиИдентификаторы = Новый Массив;
	КолонкиАгрегаты = Новый Массив;
	
	ШаблонПолученияФакта = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(ИмяСправочникаИсточника, "ШаблонПолученияФакта");
	СКДПолученияФакта = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(ШаблонПолученияФакта);
	
	#КонецОбласти 
	
	#Область НаборыДанных
	
	#Область ОбъединенныйФакт
	
	НДОбъединенныйФакт = СКДПолученияФакта.НаборыДанных.ОбъединенныйФакт; // НаборДанныхОбъединениеСхемыКомпоновкиДанных -
	
	// Проверим есть ли источники регламентированного или международного учета
	Если ЭтоОбороты Тогда
		ОтборПоРазделуУчета = Новый Структура("РазделИсточникаДанных", РегламентированныйУчет);
		ЕстьИсточникСГруппойКорСчет = ТаблицаПравилСтатей.НайтиСтроки(ОтборПоРазделуУчета).Количество() > 0;
		//++ НЕ УТКА
		Если Не ЕстьИсточникСГруппойКорСчет Тогда
			ОтборПоРазделуУчета = Новый Структура("РазделИсточникаДанных", МеждународныйУчет);
			Для Каждого СтрокаПравила Из ТаблицаПравилСтатей.НайтиСтроки(ОтборПоРазделуУчета) Цикл
				Если МеждународныйУчетОбщегоНазначения.ВариантФормированияПроводокПоСчетУчета(
					СтрокаПравила.ИсточникДанных) = Перечисления.ВариантыФормированияПроводок.СКорреспонденцией Тогда
					ЕстьИсточникСГруппойКорСчет = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//-- НЕ УТКА
	КонецЕсли;
	
	ИдентификаторыДвиженийДенежныхСредствКВыплате = Новый Массив;
	ИдентификаторыДвиженийДенежныхСредствКВыплате.Добавить("ДвиженияДенежныхСредствКВыплатеДенежныеСредства");
	ИдентификаторыДвиженийДенежныхСредствКВыплате.Добавить("ДвиженияДенежныхСредствКВыплатеДоходыРасходы");
	ИдентификаторыДвиженийДенежныхСредствКВыплате.Добавить("ДвиженияДенежныхСредствКВыплатеПрочиеАктивыПассивы");
	ИдентификаторыДвиженийДенежныхСредствКВыплате.Добавить("ДвиженияДенежныхСредствКВыплатеКонтрагенты");
	
	// Для каждого уникального макета схемы добавить НД регистра и перенести настройки типов.
	Для Каждого ПрименяемоеПравилоФакта Из ТаблицаПравилСтатей Цикл
		ИдентификаторИсточникаДанных = ПрименяемоеПравилоФакта.ИдентификаторИсточникаДанных;
		
		Если ПолученныеМакеты.Получить(ИдентификаторИсточникаДанных) = Неопределено Тогда
			Если ИдентификаторыДвиженийДенежныхСредствКВыплате.Найти(ИдентификаторИсточникаДанных) <> Неопределено Тогда
				Макет = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(
					ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(ИмяСправочникаИсточника, ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных));
				ТипДанныхУчета = ОбщегоНазначения.ИмяЗначенияПеречисления(ПрименяемоеПравилоФакта.ТипДанныхУчетаПриход);
				Счетчик = 0;
				Пока Счетчик < Макет.НаборыДанных.Количество() Цикл
					МакетНабораДанных = Макет.НаборыДанных[Счетчик];
					Если МакетНабораДанных.Имя = ТипДанныхУчета Тогда
						Счетчик = Счетчик + 1;
					Иначе
						Макет.НаборыДанных.Удалить(МакетНабораДанных);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Макет = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ПрименяемоеПравилоФакта.ПравилоФакта,,
					РежимПолученияДанных, Истина);
			КонецЕсли;
			
			Если ЭтоОстатки Тогда
				//++ Локализация
				Если ПрименяемоеПравилоФакта.РазделИсточникаДанных = РегламентированныйУчет Тогда
					УменьшитьКоличествоСубконтоИсточникаПриНеобходимости(
						Макет,
						ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных,
						ПрименяемоеПравилоФакта.ОграничениеКоличестваСубконто,
						КоличествоСубконтоХозрасчетный);
				КонецЕсли;
				//-- Локализация
				
				//++ НЕ УТКА
				Если ПрименяемоеПравилоФакта.РазделИсточникаДанных = МеждународныйУчет Тогда
					УменьшитьКоличествоСубконтоИсточникаПриНеобходимости(
						Макет,
						ПрименяемоеПравилоФакта.ИмяМакетаИсточникаДанных,
						ПрименяемоеПравилоФакта.ОграничениеКоличестваСубконто,
						КоличествоСубконтоМеждународный);
				КонецЕсли;
				//-- НЕ УТКА
			КонецЕсли;
			
			ПолученныеМакеты.Вставить(ИдентификаторИсточникаДанных, Макет);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПолученныйМакет Из ПолученныеМакеты Цикл 
		ИдентификаторИсточникаДанных = ПолученныйМакет.Ключ;
		ИсходныйМакет = ПолученныйМакет.Значение; // СхемаКомпоновкиДанных -
		
		// Перенесем все наборы данных источников в объединенный набор
		СкопированныеНаборыДанных = КомпоновкаДанныхСервер.СкопироватьНаборыДанных(НДОбъединенныйФакт,
			ИсходныйМакет, ИдентификаторИсточникаДанных);
		
		ПроизвольныйНабор = Ложь;
		ПравилаМакета = ТаблицаПравилСтатей.НайтиСтроки(Новый Структура("ИдентификаторИсточникаДанных", ИдентификаторИсточникаДанных));
		Если ПравилаМакета.Количество() > 0 Тогда
			ПроизвольныйНабор = ПравилаМакета[0].РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные;
		КонецЕсли;
		
		НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
		
		// Т.к. в разных схемах параметры могут называться одинаково, но иметь разное значение,
		// то необходимо переименовать их, а также заменить их имена в тексте запроса.
		// Также необходимо учесть, что может быть параметр, имя которого частично повторяет имя другого
		// параметра. В этом случае, замену нужно производить начиная с самого длинного по названию параметра.
		ИменаПараметров = Новый ТаблицаЗначений;
		ИменаПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
		ИменаПараметров.Колонки.Добавить("НовоеИмя", Новый ОписаниеТипов("Строка"));
		ИменаПараметров.Колонки.Добавить("Заменять", Новый ОписаниеТипов("Булево"));
		ИменаПараметров.Колонки.Добавить("ДлинаИмени", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		Для каждого ПараметрСхемы Из ИсходныйМакет.Параметры Цикл
			СтрокаИмениПараметра = ИменаПараметров.Добавить();
			СтрокаИмениПараметра.Имя = ПараметрСхемы.Имя;
			СтрокаИмениПараметра.ДлинаИмени = СтрДлина(ПараметрСхемы.Имя);
			СтрокаИмениПараметра.Заменять = ПроизвольныйНабор И НеКопируемыеПараметры.Найти(ПараметрСхемы.Имя) = Неопределено;
			Если СтрокаИмениПараметра.Заменять Тогда
				СтрокаИмениПараметра.НовоеИмя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"П%1_%2",
					ИдентификаторИсточникаДанных,
					ПараметрСхемы.Имя);
			Иначе
				СтрокаИмениПараметра.НовоеИмя = СтрокаИмениПараметра.Имя;
			КонецЕсли;
		КонецЦикла;
		ИменаПараметров.Сортировать("ДлинаИмени УБЫВ");
		
		Для каждого СкопированныйНаборДанных Из СкопированныеНаборыДанных Цикл
			Если ТипЗнч(СкопированныйНаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				Для каждого СтрокаИмениПараметра Из ИменаПараметров Цикл
					Если СтрокаИмениПараметра.Заменять Тогда
						СкопированныйНаборДанных.Запрос = СтрЗаменить(СкопированныйНаборДанных.Запрос,
								"&" + СтрокаИмениПараметра.Имя,
								"&" + СтрокаИмениПараметра.НовоеИмя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ПараметрИсточника Из ИсходныйМакет.Параметры Цикл
			СтрокаИмениПараметра = ИменаПараметров.Найти(ПараметрИсточника.Имя, "Имя");
			ИскомоеИмяПараметра  = СтрокаИмениПараметра.НовоеИмя;
			
			НовыйПараметр = СКДПолученияФакта.Параметры.Найти(ИскомоеИмяПараметра);
			
			Если НовыйПараметр = Неопределено Тогда
				НовыйПараметр = СКДПолученияФакта.Параметры.Добавить();
				НовыйПараметр.Имя = ИскомоеИмяПараметра;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточника,, "Имя");
			Если СтрокаИмениПараметра.Заменять Тогда
				// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
				НовыйПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
		КонецЦикла;
		
		ИскомаяКоллекцияНаборов = НаборыДанныхДляИдентификации[ИдентификаторИсточникаДанных];
		Если ИскомаяКоллекцияНаборов = Неопределено Тогда
			НаборыДанныхДляИдентификации.Вставить(ИдентификаторИсточникаДанных, СкопированныеНаборыДанных);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИскомаяКоллекцияНаборов, СкопированныеНаборыДанных);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим макеты ДО переноса - добавим в них поле "ИдентификаторИсточникаДанных"
	// Для поставляемых схем - это имя макета и источник данных настройки хозяйственной операции
	// Для произвольных данных - это строка хеш-схемы 
	// Хеш используется для минимизации количества произвольных наборов данных. 
	// Если СКД в разных правилах идентичны, тогда в исполняемой схеме будет всего один набор данных.
	Для Каждого НаборДанныхДляИдентификации Из НаборыДанныхДляИдентификации Цикл 
		ИдентификаторНабора = НаборДанныхДляИдентификации.Ключ;
		НаборыПоИдентификатору = НаборДанныхДляИдентификации.Значение;
		
		Для Каждого НаборПоИдентификатору Из НаборыПоИдентификатору Цикл 
			Если ТипЗнч(НаборПоИдентификатору) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
				ЗапросНабора = НаборПоИдентификатору.Запрос;
				
				// Добавим поле в расширенные поля запроса компоновки и поля выборки запроса
				ЗапросНабора = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(ЗапросНабора, """" + ИдентификаторНабора + """", ИмяПоляИдентификатора, , Истина, Истина);
				
				ЗапросНабора = СхемыЗапросов.ДобавитьУсловиеВЗапрос(ЗапросНабора, ВыражениеПараметраИдентификатора);
				
				ЗапросНабора = СтрЗаменить(ЗапросНабора, """" + ИмяПоляИдентификатора + """", """" + ИдентификаторНабора + """");
				
				НаборПоИдентификатору.Запрос = ЗапросНабора;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// В тексты запросов добавим поля-параметры для соединения с таблицей областей данных.
	ЭлементыОбъединенногоФакта = НДОбъединенныйФакт.Элементы;
	
	ВыражениеИсточник = "";
	Для Каждого КолонкаОбластиДанных Из КолонкиОбластейДанных Цикл 
		ИмяКолонки = КолонкаОбластиДанных.Имя;
		
		Если Не ПараметрыПолученияФакта.Свойство(ПрефиксУсловияВыражения + ИмяКолонки, ВыражениеИсточник) Тогда
			ВыражениеИсточник = ИмяКолонки;
		КонецЕсли;
		
		Если ИмяКолонки = ИмяПоляИдентификатора Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = КолонкаОбластиДанных.ТипЗначения;
		
		Для Каждого ЭлементОбъединенногоФакта Из ЭлементыОбъединенногоФакта Цикл 
			ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, ЭлементОбъединенногоФакта);
			
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(ЭлементОбъединенногоФакта, ИмяКолонки, ИмяКолонки, , ТипКолонки);
		КонецЦикла;
		
		// Добавим поля дочерних наборов в корневой, объединяющий факт
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДОбъединенныйФакт, ИмяКолонки, ИмяКолонки, , ТипКолонки);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ТаблицаДопДанных
	
	НДТаблицаДопДанных = СКДПолученияФакта.НаборыДанных.ТаблицаДопДанных;
	
	// Добавим поля идентификаторов выражений именованных аналитик
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(
			НДТаблицаДопДанных, 
			"ИД_" + "ВыражениеИменованнойАналитики" + ИмяПоляАналитики, 
			"ИД_" + "ВыражениеИменованнойАналитики" + ИмяПоляАналитики);
	КонецЦикла;
	
	Для каждого ИмяКолонкиИВыражение Из УсловияВыражений Цикл
		ИмяВыражения = ИмяКолонкиИВыражение.Ключ;
		Если СтрНачинаетсяС(ИмяВыражения, "ВыражениеИменованнойАналитики") Тогда
			// Данные поля могут быть использованы в отборе без вывода аналитики
			ИмяПоляНабора = "ИД_" + ИмяВыражения;
			ПолеНабора = НДТаблицаДопДанных.Поля.Найти(ИмяПоляНабора);
			Если ПолеНабора = Неопределено
				И НЕ ТаблицаДопДанных.Колонки.Найти(ИмяПоляНабора) = Неопределено Тогда
				ФинансоваяОтчетностьСервер.НовоеПолеНабора(
				НДТаблицаДопДанных, 
				ИмяПоляНабора,
				ИмяПоляНабора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	#КонецОбласти 
		
	#КонецОбласти 
	
	#Область СвязиНаборовДанных
	
	// Уточним выражения связей по началу и окончанию периода
	Для Каждого СвязьНаборовДанных Из СКДПолученияФакта.СвязиНаборовДанных Цикл 
		Если СвязьНаборовДанных.НаборДанныхИсточник = "ТаблицаОбластейДанных"
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ТаблицаОбластейДанных" Тогда
			Префикс = "ТОД_";
		ИначеЕсли СвязьНаборовДанных.НаборДанныхИсточник = "ТаблицаДопДанных"
			Или СвязьНаборовДанных.НаборДанныхПриемник = "ТаблицаДопДанных" Тогда
			Префикс = "ТДД_";
		Иначе
			Префикс = "";
		КонецЕсли;
		
		Если НЕ ЭтоОбороты
			И СвязьНаборовДанных.ВыражениеИсточник = "ВыражениеПериодГраница"
			И СвязьНаборовДанных.Параметр = "ПериодГраница" Тогда
			// Необходимо преобразовать правую часть выражения.
			// Нельзя создавать поле ПериодГраница с типом граница периода, но в наборе "ОбъединенныйФакт" есть поле "Период".
			// "ПериодГраница" - это "Период", приведенная к границе периода или с прибавлением секунды (до 8.3.14).
			Если ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта() Тогда
				ВыражениеПриемник =
				"ВЫБОР
				|	КОГДА ПолучениеОстатковНаГраницуПериода
				|		ТОГДА КомпоновкаДанныхСервер.ГраницаПериода(Период, ""Включая"")
				|	ИНАЧЕ Период
				|КОНЕЦ";
			Иначе
				ВыражениеПриемник =
				"ВЫБОР
				|	КОГДА ПолучениеОстатковНаГраницуПериода
				|		ТОГДА ДОБАВИТЬКДАТЕ(Период, ""СЕКУНДА"", 1)
				|	ИНАЧЕ Период
				|КОНЕЦ";
			КонецЕсли;
			СвязьНаборовДанных.ВыражениеПриемник = ВыражениеПриемник;
		КонецЕсли;
		
		АдаптироватьВыражениеПоля(СвязьНаборовДанных.ВыражениеИсточник, Префикс, УсловияВыражений);
		АдаптироватьВыражениеПоля(СвязьНаборовДанных.ВыражениеПриемник, Префикс, УсловияВыражений);
		
		АдаптироватьВыражениеПериодаПланирования(СвязьНаборовДанных.ВыражениеИсточник, ВыражениеПериодаПланирования, ВыражениеПериодаКурса);
		АдаптироватьВыражениеПериодаПланирования(СвязьНаборовДанных.ВыражениеПриемник, ВыражениеПериодаПланирования, ВыражениеПериодаКурса);
	КонецЦикла;
		
	// Уточним состав связей
	Если ЭтоОбороты И Не ЕстьИсточникСГруппойКорСчет Тогда
		КоличествоСвязей = СКДПолученияФакта.СвязиНаборовДанных.Количество();
		Для НомерСвязи = 1 По КоличествоСвязей Цикл
			ОбратныйИндекс = КоличествоСвязей - НомерСвязи;
			СвязьНаборовДанных = СКДПолученияФакта.СвязиНаборовДанных[ОбратныйИндекс];
			Если СвязьНаборовДанных.УсловиеСвязи = "&ЕстьИсточникСГруппойКорСчет" Тогда
				СКДПолученияФакта.СвязиНаборовДанных.Удалить(СвязьНаборовДанных);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Уточним состав связей
	Если ЭтоОбороты
		И НЕ СКДПолученияФакта.Параметры.Найти("ОборотПоАналитикеРасхода") = Неопределено Тогда
		Связь = СКДПолученияФакта.СвязиНаборовДанных.Добавить();
		Связь.НаборДанныхИсточник = "ОбъединенныйФакт";
		Связь.ВыражениеИсточник = "ЕСТЬNULL(ОборотПоАналитикеРасхода, ЛОЖЬ)";
		Связь.НаборДанныхПриемник = "ТаблицаДопДанных";
		Связь.ВыражениеПриемник =
		"ВЫБОР КОГДА ТДД_ИдентификаторИсточникаДанных = ""ДвиженияНоменклатураНоменклатура""
		|	ТОГДА ТДД_ОборотПоАналитикеРасхода
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ";
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ВычисляемыеПоля
	
	// Добавим вычисляемые поля именованных аналитик
	ВсеТипыАналитикБюджетирования = ВсеТипыАналитик();
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики       = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ВыражениеПоляАналитики = УсловияВыражений["ВыражениеИменованнойАналитики" + ИмяПоляАналитики];
		
		ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта,
			ИмяПоляАналитики,
			ВыражениеПоляАналитики,,
			Истина,
			ВсеТипыАналитикБюджетирования);
	КонецЦикла;
	
	Для каждого УсловиеВыражения Из УсловияВыражений Цикл
		Если СтрНачинаетсяС(УсловиеВыражения.Ключ, "ВыражениеИменованнойАналитики") Тогда
			ИмяПоляАналитики = Сред(УсловиеВыражения.Ключ, СтрДлина("ВыражениеИменованнойАналитики") + 1);
			ВыражениеПоляАналитики = УсловиеВыражения.Значение;
			
			ВычисляемоеПоле = ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СКДПолученияФакта,
				ИмяПоляАналитики,
				ВыражениеПоляАналитики,,
				Истина,
				ВсеТипыАналитикБюджетирования);
		КонецЕсли;
	КонецЦикла;
	
	// Уточним выражения вычисляемых полей
	Для Каждого ВычисляемоеПоле Из СКДПолученияФакта.ВычисляемыеПоля Цикл 
		АдаптироватьВыражениеПоля(ВычисляемоеПоле.Выражение, , УсловияВыражений);
		АдаптироватьВыражениеПериодаПланирования(ВычисляемоеПоле.Выражение, ВыражениеПериодаПланирования, ВыражениеПериодаКурса);
	КонецЦикла;
	
	
	#Область ЗаменаХарактеристикВВыраженияхВычисляемыхПолей
	
	// Корректировка наборов запросов схемы получения факта, в случае использования характеристик
	// в выражениях заполнения аналитики (сами выражения модифицированы ранее). В случае использования характеристик
	// в наборы запросы будет добавлен текст на языке расширения запросов переопределения получения характеристик.
	ИсходныеВыраженияЗаполненияАналитик = Новый Массив;
	Для Каждого КлючИЗначение Из ПараметрыПолученияФакта.ИсходныеВыраженияЗаполненияАналитик Цикл
		ИсходныеВыраженияЗаполненияАналитик.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	РезультатПреобразований = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СКДПолученияФакта,
		ИсходныеВыраженияЗаполненияАналитик, Ложь, Истина);
	
	Если РезультатПреобразований.ЕстьОшибки Тогда
		СообщенияОшибок = РезультатПреобразований.СообщенияОшибокПреобразования; // Соответствие -
		Для Каждого КлючИЗначение Из СообщенияОшибок Цикл
			ИсходноеВыражение = КлючИЗначение.Ключ;
			ТекстОшибкиПреобразования = КлючИЗначение.Значение;
			СтатьяПоказатель = ПараметрыПолученияФакта.ИсходныеВыраженияЗаполненияАналитик.Получить(ИсходноеВыражение);
			Если ТипЗнч(СтатьяПоказатель) = Тип("СправочникСсылка.СтатьиБюджетов") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка в указании аналитики статьи бюджетов ""%1"": %2';
									|en = 'Error in specification of budget flow item dimension ""%1"": %2'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Ошибка в указании аналитики показателя бюджетов ""%1"": %2';
									|en = 'Error in specification of budget balance item dimension ""%1"": %2'");
			КонецЕсли;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				СтатьяПоказатель,
				ТекстОшибкиПреобразования);
			
			ВызватьИсключение ТекстОшибки;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаЗаменВыражений = Новый ТаблицаЗначений();
	ТаблицаЗаменВыражений.Колонки.Добавить("ИсходноеВыражение", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаменВыражений.Колонки.Добавить("ВыражениеЗамены", Новый ОписаниеТипов("Строка"));
	Для Каждого ИсходноеВыражениеИЗамена Из РезультатПреобразований.ПреобразованныеВыражения Цикл
		ИсходноеВыражение = ИсходноеВыражениеИЗамена.Ключ;
		Замена = ИсходноеВыражениеИЗамена.Значение;
		Если ИсходноеВыражение = Замена Тогда
			// Не было замен характеристик.
			Продолжить;
		КонецЕсли;
		СтрокаЗамен = ТаблицаЗаменВыражений.Добавить();
		СтрокаЗамен.ИсходноеВыражение = Врег(ИсходноеВыражение);
		СтрокаЗамен.ВыражениеЗамены = Врег(Замена);
	КонецЦикла;
	ТаблицаЗаменВыражений.Сортировать("ИсходноеВыражение УБЫВ");
	Для Каждого ВычисляемоеПоле Из СКДПолученияФакта.ВычисляемыеПоля Цикл
		ВыражениеИзменено = Ложь;
		ВыражениеВычисляемогоПоля = ВРег(ВычисляемоеПоле.Выражение);
		Для Каждого СтрокаЗамен Из ТаблицаЗаменВыражений Цикл
			НомерПозиции = СтрНайти(ВыражениеВычисляемогоПоля, СтрокаЗамен.ИсходноеВыражение);
			Пока НомерПозиции > 0 Цикл
				ВыражениеИзменено = Истина;
				ВыражениеВычисляемогоПоля = СтрЗаменить(ВыражениеВычисляемогоПоля, СтрокаЗамен.ИсходноеВыражение, СтрокаЗамен.ВыражениеЗамены);
				НомерПозиции = СтрНайти(ВыражениеВычисляемогоПоля, СтрокаЗамен.ИсходноеВыражение);
			КонецЦикла;
		КонецЦикла;
		Если ВыражениеИзменено Тогда
			ВычисляемоеПоле.Выражение = ВыражениеВычисляемогоПоля;
		КонецЕсли;
	КонецЦикла;
	
	#КонецОбласти
	
	#КонецОбласти 
	
	#Область ПоляИтога
		
	Для Каждого ПолеИтога Из СКДПолученияФакта.ПоляИтога Цикл 
		КолонкиАгрегаты.Добавить(ПолеИтога.ПутьКДанным);
	КонецЦикла;
	
	#КонецОбласти 
	
	Настройки = БюджетированиеСервер.ИнициализированныеНастройкиПоУмолчанию(СКДПолученияФакта);
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	КорневойЭлементСтруктуры = Настройки.Структура;
	
	#Область Параметры
	
	// Установим общие параметры
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ГраницаФактДанных", ПараметрыПолученияФакта.ГраницаФактДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВалютаОтчета", ПараметрыПолученияФакта.ВалютаОтчета);
	//++ НЕ УТКА
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ВалютаМеждународ", ПараметрыПолученияФакта.ВалютаМеждународ);
	//-- НЕ УТКА
	
	#КонецОбласти 
	
	#Область НастройкиПервичнойВыборкиДанных
	
	// Добавим поля-ресурсы
	Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, КолонкаАгрегат);
	КонецЦикла;
	
	// Добавим отборы предварительной фильтрации данных - уровень правила получения данных.
	ГруппаПредварительныйОтбор = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор,
		Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаПредварительныйОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаПредварительныйОтбор.Использование = Истина;
	ГруппаПредварительныйОтбор.Представление = "ПредварительныйОтбор";
	
	ЗадействованныеДопОтборы = Новый Соответствие; // Ключ - название справочника и хеш, Значение - компоновщик с отборами
	ГруппыОтборовИИД = Новый Соответствие; // Ключ - идентификатор источника данных, Значение - ссылка на группу отборов
	КлючДопОтбора = "";
	
	Для Каждого РеквизитыПравила Из ТаблицаПравилСтатей Цикл
		ИдентификаторИсточникаДанных = РеквизитыПравила.ИдентификаторИсточникаДанных;
		
		КлючДопОтбора = ИдентификаторИсточникаДанных + "_" + РеквизитыПравила.ХешНастроек;
		
		Если ГруппыОтборовИИД[ИдентификаторИсточникаДанных] = Неопределено Тогда
			ГруппаИдентификаторИсточникаДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаПредварительныйОтбор,
				Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИдентификаторИсточникаДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаИдентификаторИсточникаДанных.Использование = Истина;
			ГруппаИдентификаторИсточникаДанных.Представление = ИдентификаторИсточникаДанных;
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИдентификаторИсточникаДанных,
				"ИдентификаторИсточникаДанных", ИдентификаторИсточникаДанных);
			
			ГруппаВсеДопОтборыПравил = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаИдентификаторИсточникаДанных,
				Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаВсеДопОтборыПравил.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаВсеДопОтборыПравил.Использование = Истина;
			ГруппаВсеДопОтборыПравил.Представление = "ВсеДопОтборыПравил_" + ИдентификаторИсточникаДанных;
			
			ГруппыОтборовИИД.Вставить(ИдентификаторИсточникаДанных, ГруппаВсеДопОтборыПравил);
		Иначе
			ГруппаВсеДопОтборыПравил = ГруппыОтборовИИД[ИдентификаторИсточникаДанных];
		КонецЕсли;
		
		Если ЗадействованныеДопОтборы[КлючДопОтбора] = Неопределено Тогда
			НастройкиДопОтборовПравила = ИсточникиДанныхПовтИсп.ПолучитьХранимыеНастройкиСправочника(
				РеквизитыПравила.ИмяСправочникаИсточника,
				РеквизитыПравила.ХешНастроек);
			
			Если НастройкиДопОтборовПравила <> Неопределено Тогда
				ГруппаДопОтбораПравила = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаВсеДопОтборыПравил,
					Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаДопОтбораПравила.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ГруппаДопОтбораПравила.Использование = Истина;
				ГруппаДопОтбораПравила.Представление = "ДопОтборПравила_" + КлючДопОтбора;
				
				// Базовый отбор уровня правила - хозяйственная операция, счет или произвольное значение (произвольные правила)
				// Применим преобразованные иерархические источники правил
				// Например, счет 08, заданный в ППФД, будет представлен субсчетами в фактических данных.
				ФинансоваяОтчетностьСервер.НовыйОтбор(
					ГруппаДопОтбораПравила, 
					"ИсточникДанных",
					ПараметрыПолученияФакта.ИерархияИсточниковДанных.СопоставлениеДляОтборов[РеквизитыПравила.ИсточникДанных],,
					ВидСравненияКомпоновкиДанных.ВСписке);
				
				Если ЭтоОбороты
					И(РеквизитыПравила.РазделИсточникаДанных = РегламентированныйУчет 
						Или РеквизитыПравила.РазделИсточникаДанных = МеждународныйУчет)
					И ЗначениеЗаполнено(РеквизитыПравила.КорСчет) Тогда
					
					ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаДопОтбораПравила,
						"ГруппаКорСчет.КорСчет", РеквизитыПравила.КорСчет, , ВидСравненияКомпоновкиДанных.ВИерархии);
				КонецЕсли;
	
				// Отборы уровня правила, заданные пользователем
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиДопОтборовПравила.Отбор, ГруппаДопОтбораПравила, Истина);
				
				// Отметим, что уже добавляли, чтобы не усложнять работу оптимизатору запроса СКД
				ЗадействованныеДопОтборы.Вставить(КлючДопОтбора, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПолученияФакта.Свойство("ОтборПоРегистраторуДляВсегоФакта") Тогда
		// Отбор по регистратору для целей оптимизации получения оборотов по статьям, когда
		// известно, что отбор по регистратору должен применяться ко всем статьям всех источников данных.
		// Например, при проверке прохождения документа по лимитам ДС. Результативность зависит от количества правил получения факта.
		ЗначениеОтбора = ПараметрыПолученияФакта.ОтборПоРегистраторуДляВсегоФакта;
		Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйОтбор(
			Настройки.Отбор,
			"Регистратор",
			ЗначениеОтбора,,
			ВидСравненияОтбора);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ГруппировкаИМэппингДанных
	
	ГруппировкаПорцииДанных = ФинансоваяОтчетностьСервер.НоваяГруппировка(КорневойЭлементСтруктуры);
	
	// Добавим базовые поля, определяющие характер выбранных данных
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "СтатьяБюджетов");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПоказательБюджетов");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ИД_" + "Источника");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Период");
	Если ЭтоОбороты Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "НачалоПериода");
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "КонецПериода");
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Сценарий");
	
	Если ПоПериодам Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, ВыражениеПериодаПланирования);
	КонецЕсли;
	
	Если ПоРегистратору Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Регистратор");
	КонецЕсли;
	
	Если ПоВалютам Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Валюта");
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ВалютаХранения");
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПериодКурса");
	
	Если ПоЕдиницамИзмерения Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если ПоПравиламПолученияДанных Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "ПравилоФакта");
	КонецЕсли;
	
	// Добавим сквозные измерения
	Если ПоОрганизациям Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Организация");
	КонецЕсли;
	
	Если ПоПодразделениям Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Подразделение");
	КонецЕсли;
	
	// Добавим нумерованные аналитики
	Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, "Аналитика" + НомерАналитики);
	КонецЦикла;
	
	// Добавим именованные аналитики
	Для Каждого ВидАналитики Из ЗапрошенныеВидыАналитик Цикл
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(ГруппировкаПорцииДанных, ИмяПоляАналитики);
	КонецЦикла;
	
	// Добавим отборы окончательной фильтрации данных по источникам
	Если ПараметрыПолученияФакта.ДополнительныйОтбор <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ПараметрыПолученияФакта.ДополнительныйОтбор.Отбор,
			ГруппировкаПорцииДанных.Отбор, Истина);
	КонецЕсли;
	
	// Добавим отборы для точного получения данных в разрезе правил получения данных
	ГруппаМэппингДанныхППФД = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПорцииДанных.Отбор,
		Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаМэппингДанныхППФД.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаМэппингДанныхППФД.Использование = Истина;
	ГруппаМэппингДанныхППФД.Представление = "МэппингДанныхППФД";
	
	ЗадействованныеОтборыГруппировки = Новый Соответствие; // Ключ - ППФД, Значение - ссылка на группу отборов
	КлючДопОтбора = "";
	
	Для Каждого РеквизитыПравила Из ТаблицаПравилСтатей Цикл 
		ПравилоФакта = РеквизитыПравила.ПравилоФакта;
		
		Если ЗадействованныеОтборыГруппировки[ПравилоФакта] = Неопределено Тогда
			ГруппаППФД = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаМэппингДанныхППФД,
				Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаППФД.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаППФД.Использование = Истина;
			ГруппаППФД.Представление = "ППФД_" + РеквизитыПравила.УникальныйИдентификатор;
			
			ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаППФД, "ПравилоФакта", ПравилоФакта);
			
			ЗадействованныеОтборыГруппировки.Вставить(ПравилоФакта, ГруппаППФД);
			НастройкиДопОтборовПравила = ИсточникиДанныхПовтИсп.ПолучитьХранимыеНастройкиСправочника(
				РеквизитыПравила.ИмяСправочникаИсточника, 
				РеквизитыПравила.ХешНастроек); // НастройкиКомпоновкиДанных -
			
			Если НастройкиДопОтборовПравила <> Неопределено
				И НастройкиДопОтборовПравила.Отбор.Элементы.Количество() > 0 Тогда
				
				ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиДопОтборовПравила.Отбор, ГруппаППФД, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим отборы по ненулевым полям-ресурсам
	ГруппаОтборНенулевых = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппировкаПорцииДанных.Отбор,
		Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборНенулевых.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтборНенулевых.Использование = Истина;
	ГруппаОтборНенулевых.Представление = "ОтборНенулевых";
	
	Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборНенулевых, КолонкаАгрегат, 0,, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	
	#КонецОбласти 
	
	#Область ПолучениеДанных
	
	Попытка
		МакетПолученияДанных = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СКДПолученияФакта, Настройки);
	Исключение
		ТекстШаблона = НСтр("ru = 'Ошибка при получении правил расчета по сценарию %1. Проверьте %2';
							|en = 'An error occurred when getting calculation rules by the %1 scenario. Please check %2'");
		ВызватьИсключение(СтрШаблон(ТекстШаблона, ПараметрыПолученияФакта.Сценарий, НРег(Метаданные.Справочники[ИмяСправочникаИсточника].Синоним)));
	КонецПопытки;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаОбластейДанных", ТаблицаОбластейДанных);
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаДопДанных);
	ВнешниеНаборыДанных.Вставить("ИерархияИсточниковДанных", ПараметрыПолученияФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений);
	Если ЭтоОбороты Тогда
		ВнешниеНаборыДанных.Вставить("СопоставлениеКорСчетов", ПараметрыПолученияФакта.ИерархияИсточниковДанных.ТаблицаСопоставленийКорСчетов);
	КонецЕсли;
	
	ДанныеИсточниковПоПравилам = Неопределено;
	Если ПараметрыПолученияФакта.ОграниченияДоступа.ЕстьПривилегированныйРежим Тогда
		ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ДанныеИсточниковПоПравилам, МакетПолученияДанных, ВнешниеНаборыДанных, Истина);
	КонецЕсли;
	Если ПараметрыПолученияФакта.ОграниченияДоступа.ЕстьНеПривилегированныйРежим Тогда
		ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ДанныеИсточниковПоПравилам, МакетПолученияДанных, ВнешниеНаборыДанных, Ложь);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ПостобработкаДанных
	
	// "Свернуть" колонки-идентификаторы правила, в одну
	Если (ДопДанныеВычисляемыеПоля ИЛИ ДопДанныеДопНабор)
		И ПоПравиламПолученияДанных Тогда
		
		Для НомерАналитики = 1 По МаксимальныйНомерАналитики Цикл 
			Если Не ИспользуемыеНумерованныеАналитики.Свойство("Аналитика" + НомерАналитики) Тогда
				Продолжить;
			КонецЕсли;
			
			КолонкиИдентификаторы.Добавить("Аналитика" + НомерАналитики);
		КонецЦикла;
		
		КолонкиИдентификаторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкиИдентификаторы);
		
		СтрокаКолонкиИдентификаторы = СтрСоединить(КолонкиИдентификаторы, ", ");
		
		Идентификаторы = ТаблицаДопДанных.ВыгрузитьКолонку("УникальныйИдентификатор");
		ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(
			ДанныеИсточниковПоПравилам, 
			СтрокаКолонкиИдентификаторы, 
			Идентификаторы, "_", 
			КолонкиАгрегаты,
			Истина);
		
		Идентификаторы.Очистить();
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Сумма") Тогда
			КолонкиИдентификаторыСуммы = "Сумма";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Сумма", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам,
				КолонкиИдентификаторыСуммы, Идентификаторы);
		КонецЕсли;
		
		Если ПараметрыПолученияФакта.Показатели.Свойство("Количество") И Ложь Тогда
			КолонкиИдентификаторыКоличества = "Количество";
			
			Для Каждого КолонкаАгрегат Из КолонкиАгрегаты Цикл 
				Идентификаторы.Добавить(СтрЗаменить(КолонкаАгрегат, "Количество", ""));
			КонецЦикла;
			
			ИсточникиДанныхСервер.СвернутьПоКолонкамИдентификаторам(ДанныеИсточниковПоПравилам,
				КолонкиИдентификаторыКоличества, Идентификаторы);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти 
	
	// Вернуть таблицу факта
	ИндексыТаблицы = ПараметрыПолученияФакта.ИндексыТаблиц.Получить("ТаблицаПравилСтатей");
	ИсточникиДанныхСервер.УстановитьИндексыИзМассива(ТаблицаПравилСтатей, ИндексыТаблицы);
	
	Возврат ДанныеИсточниковПоПравилам;
	
КонецФункции

// Возвращает значения нефинансовых показателей в соответствии с их настройками
//
// Параметры:
// 	НастройкиОтбора - НастройкиКомпоновкиДанных - Настройки отбора правил.
// 	Параметры - Структура - Параметры получения фактических данных:
// 	 *Период - СтандартныйПериод - Период получения данных.
// 	 *Периодичность - ПеречислениеСсылка.Периодичность - Периодичность получаемых данных.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Значения нефинансовых показателей:
// 	* НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель.
// 	* ВидПоказателя - ПеречислениеСсылка.ВидыНефинансовыхПоказателей - вид показателя.
// 	* Организация - СправочникСсылка.Организации - организация (если получение данных в разрезе организаций).
// 	* Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение (если получение данных в разрезе подразделений).
// 	* Сценарий - СправочникСсылка.Сценарии - Сценарий.
// 	* Валюта - СправочникСсылка.Валюты - Валюта.
// 	* ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - Единица измерения количественных значений.
// 	* Регистратор - ДокументСсылка - регистратор.
// 	* Период - Дата - Период.
// 	* ПериодУстановки - Дата - Период установки значения.
// 	* НомерПодпериода - Число - Номер подпериода.
// 	* ЗначениеПоказателя - Число - Значение.
Функция ЗначенияНефинансовыхПоказателей(НастройкиОтбора, Знач Параметры) Экспорт
	
	ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
	
	Если Не ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		Период = ТаблицаПериодов.Добавить();
		Период.ДатаНачала = Параметры.Период.ДатаНачала;
		Период.ДатаОкончания = Параметры.Период.ДатаОкончания;
	Иначе
		Планирование.ЗаполнитьТаблицуПериодов(
			ТаблицаПериодов, 
			Параметры.Периодичность, 
			Параметры.Период.ДатаНачала, 
			Параметры.Период.ДатаОкончания);
	КонецЕсли;
	Параметры.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	ТаблицаЗначений = ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры);
	
	НефинансовыеПоказатели = Справочники.НефинансовыеПоказателиБюджетов.НефинансовыеПоказателиСУчетомОтбора(НастройкиОтбора);
	Для каждого СтрокаПоказатель Из НефинансовыеПоказатели Цикл
		Если СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			Если ЗначениеЗаполнено(СтрокаПоказатель.СхемаКомпоновкиДанных) Тогда
				СхемаПолученияДанных = Справочники.НефинансовыеПоказателиБюджетов.ПредопределеннаяСхемаПолученияДанных(
					СтрокаПоказатель.СхемаКомпоновкиДанных,
					?(Параметры.Свойство("РежимПолученияДанных"), Параметры.РежимПолученияДанных, Неопределено));
			Иначе
				ХранилищеСхемыКомпоновкиДанных = СтрокаПоказатель.ХранилищеСхемыКомпоновкиДанных; // ХранилищеЗначения
				СхемаПолученияДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
				Если ТипЗнч(СхемаПолученияДанных) = Тип("ХранилищеЗначения") Тогда
					СхемаПолученияДанных = СхемаПолученияДанных.Получить();
				КонецЕсли;
				Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
					Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
						Если ЗначениеЗаполнено(Набор.Запрос) Тогда
							Набор.Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(Набор.Запрос, Ложь);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ХранилищеНастроекКомпоновкиДанных = СтрокаПоказатель.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
			НастройкиСхемыПолученияДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
		Если СтрокаПоказатель.ПоСценариям Или Не СтрокаПоказатель.ЗагружатьИзДругихПодсистем Тогда
			СхемаПолученияДанных = РегистрыСведений.ЗначенияНефинансовыхПоказателей.ПолучитьМакет("СхемаКомпоновкиДанных");
			Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
				Для Каждого Набор Из СхемаПолученияДанных.НаборыДанных Цикл
					Если ЗначениеЗаполнено(Набор.Запрос) Тогда
						Набор.Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(Набор.Запрос, Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НастройкиСхемыПолученияДанных = СхемаПолученияДанных.НастройкиПоУмолчанию;
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				НастройкиСхемыПолученияДанных, 
				"НефинансовыйПоказатель", 
				СтрокаПоказатель.НефинансовыйПоказатель);
			Правило = ПравилоПолученияЗначенийНефинансовогоПоказателя(СтрокаПоказатель, СхемаПолученияДанных, НастройкиСхемыПолученияДанных);
			Правило.РасширенныйРежимНастройкиЗаполненияАналитики = Ложь;
			ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Добавляет алгоритмы конвертации в существующую схему
// 
// Параметры:
//	Схема - СхемаКомпоновкиДанных - изменяемая схема, в которой требуется конвертировать суммы.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - изменяемые настройки
//	ПараметрыПересчета - См. БюджетированиеСервер.ШаблонПараметровПересчетаВВалюту
//
Процедура ДобавитьПересчетДанныхВВалюту(Схема, КомпоновщикНастроек, Знач ПараметрыПересчета) Экспорт
	
	// Инициализация переменных
	ИмяНабораДанныхИсточника = ПараметрыПересчета.ИмяНабораДанныхИсточника;
	НомерНабораДанныхКонвертации = ПараметрыПересчета.НомерНабораДанныхКонвертации;
	ИсточникКурсовВалют = ПараметрыПересчета.ИсточникКурсовВалют;
	ИсходнаяВалюта = ПараметрыПересчета.ИсходнаяВалюта;
	КолонкиПересчета = ПараметрыПересчета.КолонкиПересчета;
	ПериодКурса = ПараметрыПересчета.ПериодКурса;
	СценарийПрогнозногоКурса = ПараметрыПересчета.СценарийПрогнозногоКурса;
	ЦелеваяВалюта = ПараметрыПересчета.ЦелеваяВалюта;
	
	ТребуетсяСценарийПрогнозногоКурса = (ИсточникКурсовВалют = "ПрогнозныеКурсыСценариев");
	
	ИмяНабораДанныхКонвертации = "КоэффициентыКурсовВалют" + ИмяНабораДанныхИсточника + НомерНабораДанныхКонвертации;
	НаборДанныхКонвертации = Схема.НаборыДанных.Найти(ИмяНабораДанныхКонвертации);
	
	НаборДанныхИсточник = Схема.НаборыДанных[ИмяНабораДанныхИсточника];
	ИмяНабораДанныхИсточникаСНомером = ИмяНабораДанныхИсточника + НомерНабораДанныхКонвертации;
	
	// Модификация схемы и настроек
	Если НаборДанныхКонвертации = Неопределено Тогда
		НаборДанныхКонвертации = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(Схема, , ИмяНабораДанныхКонвертации);
		
		ТекстЗапросаКонвертации = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК ВалютаКурсовВалют" + ИмяНабораДанныхИсточникаСНомером + ",
		|	&ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + " КАК ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + ",
		|	&ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + " КАК ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + ",
		|	КурсВалюты.КурсЧислитель * КурсВалютыОтчета.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыОтчета.КурсЧислитель) КАК КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером + "
		|ИЗ
		|	РегистрСведений." + ИсточникКурсовВалют + ".СрезПоследних(
		|			&ПериодКурса" + ИмяНабораДанныхИсточникаСНомером + ",
		|			Валюта = &ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером + "
		|			" + ?(ТребуетсяСценарийПрогнозногоКурса, "И Сценарий = &Сценарий" + ИмяНабораДанныхИсточникаСНомером, "") + " И БазоваяВалюта = &БазоваяВалюта
		|		) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИсточникКурсовВалют + ".СрезПоследних(
		|			&ПериодКурса" + ИмяНабораДанныхИсточникаСНомером + ", 
		|			Валюта = &ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером + "
		|			" + ?(ТребуетсяСценарийПрогнозногоКурса, "И Сценарий = &Сценарий" + ИмяНабораДанныхИсточникаСНомером, "") + " И БазоваяВалюта = &БазоваяВалюта
		|		) КАК КурсВалютыОтчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.КурсЗнаменатель <> 0
		|	И КурсВалютыОтчета.КурсЧислитель <> 0";

		НаборДанныхКонвертации.Запрос = ТекстЗапросаКонвертации;
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации,
			"ВалютаКурсовВалют" + ИмяНабораДанныхИсточникаСНомером,,, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером,,, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,,, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации,
			"КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером); // Не ограничиваем длину коэффициента
		Если ТребуетсяСценарийПрогнозногоКурса Тогда
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхКонвертации,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером, , , Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
		КонецЕсли;
		
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером,, ИсходнаяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,, ЦелеваяВалюта);
		КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером,, ПериодКурса);
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		Если ТребуетсяСценарийПрогнозногоКурса Тогда
			КомпоновкаДанныхСервер.ДобавитьПараметр(Схема, "Сценарий" + ИмяНабораДанныхИсточникаСНомером,, СценарийПрогнозногоКурса);
		КонецЕсли;
	КонецЕсли;
	
	// Уточним значения параметров данных для пересчета
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, ИсходнаяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, ЦелеваяВалюта);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, ПериодКурса);
	КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	Если ТребуетсяСценарийПрогнозногоКурса Тогда
		КомпоновкаДанныхСервер.УстановитьПараметрСКД(Схема, "Сценарий" + ИмяНабораДанныхИсточникаСНомером, СценарийПрогнозногоКурса);
	КонецЕсли;
		
	ТипПараметраИсходнаяВалюта = ТипЗнч(ИсходнаяВалюта);
	Если ТипПараметраИсходнаяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером, ИсходнаяВалюта);
	ИначеЕсли ТипПараметраИсходнаяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации,
			ИсходнаяВалюта, 
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраИсходнаяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ИсходнаяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	ТипПараметраЦелеваяВалюта = ТипЗнч(ЦелеваяВалюта);
	Если ТипПараметраЦелеваяВалюта = Тип("СправочникСсылка.Валюты") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером, ЦелеваяВалюта);
	ИначеЕсли ТипПараметраЦелеваяВалюта = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации,
			ЦелеваяВалюта,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраЦелеваяВалюта = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации, 
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером,
			"ЦелеваяВалюта" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	Если ТребуетсяСценарийПрогнозногоКурса Тогда
		ТипПараметраСценарий = ТипЗнч(СценарийПрогнозногоКурса);
		Если ТипПараметраСценарий = Тип("СправочникСсылка.Сценарии") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером, СценарийПрогнозногоКурса);
		ИначеЕсли ТипПараметраСценарий = Тип("Строка") Тогда
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
				ИмяНабораДанныхИсточника,
				ИмяНабораДанныхКонвертации,
				СценарийПрогнозногоКурса,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером);
		ИначеЕсли ТипПараметраСценарий = Неопределено Тогда
			КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
				ИмяНабораДанныхИсточника,
				ИмяНабораДанныхКонвертации,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером,
				"Сценарий" + ИмяНабораДанныхИсточникаСНомером);
		КонецЕсли;
	КонецЕсли;
	
	ТипПараметраПериодКурса = ТипЗнч(ПериодКурса);
	Если ТипПараметраПериодКурса = Тип("Дата") Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодКурса" + ИмяНабораДанныхИсточникаСНомером, ПериодКурса);
	ИначеЕсли ТипПараметраПериодКурса = Тип("Строка") Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации,
			ПериодКурса,
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером,
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером);
	ИначеЕсли ТипПараметраПериодКурса = Неопределено Тогда
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(Схема,
			ИмяНабораДанныхИсточника,
			ИмяНабораДанныхКонвертации,
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером,
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером,
			"ПериодКурса" + ИмяНабораДанныхИсточникаСНомером);
	КонецЕсли;
	
	ТипПараметраКолонкиПересчета = ТипЗнч(КолонкиПересчета);
	Если ТипПараметраКолонкиПересчета = Тип("Массив") Тогда
		ПоляСуммыВВалюте = КолонкиПересчета;

	ИначеЕсли ТипПараметраКолонкиПересчета = Тип("Строка") Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить(КолонкиПересчета);
		
	ИначеЕсли ТипПараметраКолонкиПересчета = Неопределено Тогда
		ПоляСуммыВВалюте = Новый Массив;
		ПоляСуммыВВалюте.Добавить("Сумма");
		ПоляСуммыВВалюте.Добавить("СуммаПриход");
		ПоляСуммыВВалюте.Добавить("СуммаРасход");
		ПоляСуммыВВалюте.Добавить("СуммаВВалюте");
		ПоляСуммыВВалюте.Добавить("СуммаВалПриход");
		ПоляСуммыВВалюте.Добавить("СуммаВалРасход");
		ПоляСуммыВВалюте.Добавить("ЗначениеПоказателя");
	КонецЕсли;
	
	Для Каждого Поле Из ПоляСуммыВВалюте Цикл
		ИскомоеИсходноеПоле = Схема.ВычисляемыеПоля.Найти(Поле);
		
		Если ИскомоеИсходноеПоле <> Неопределено Тогда
			ИскомоеИсходноеПоле.Выражение = "ОКР(" + ИскомоеИсходноеПоле.Выражение + " * КоэффициентПересчета"
				+ ИмяНабораДанныхИсточникаСНомером + ", 2)";
		Иначе
			ИскомоеИсходноеПоле = НаборДанныхИсточник.Поля.Найти(Поле);
			
			Если ИскомоеИсходноеПоле = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Выражение = "ОКР(" + Поле + " * КоэффициентПересчета" + ИмяНабораДанныхИсточникаСНомером + ", 2)";
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(Схема, Поле, Выражение, ИскомоеИсходноеПоле.Заголовок, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в тексте запроса выражения заполнения аналитики в зависимости от доступных типов объекта.
//
// Параметры:
// 	ДокументСсылка - ДокументСсылка.ПланСборкиРазборки - Документ оперативного планирования.
// 					- ДокументСсылка.ПланОстатков -
// 					- ДокументСсылка.ПланВнутреннихПотреблений -
// 					- ДокументСсылка.ПланПродажПоКатегориям -
// 					- ДокументСсылка.ПланЗакупок -
// 					- ДокументСсылка.ПланПродаж -
// 					- ДокументСсылка.ПланПроизводства -
// 	ТекстЗапроса - Строка - Текст запроса для обработки.
// 	СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов - Статья бюджетов, определяющая аналитику.
// 	МенеджерОбъекта - ДокументМенеджер - Источник заполнения аналитики.
// 	ИмяАналитики - Строка - имя заменяемого параметра аналитики в тексте запроса
// 	ИмяТаблицы - Строка - Имя таблицы источника.
//
Процедура УстановитьВЗапросеВыраженияЗаполненияАналитики(ДокументСсылка, ТекстЗапроса, СтатьяБюджетов, МенеджерОбъекта, ИмяАналитики, ИмяТаблицы = "") Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИмяАналитики + НомерАналитики, ВыражениеПустогоЗначенияАналитики());
		КонецЦикла; 
		
		Возврат;
		
	КонецЕсли;
	
	ДоступныеТипы = МенеджерОбъекта.ДоступныеТипыАналитикБюджетирования(ДокументСсылка, ИмяТаблицы);
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	ТекстыЗапроса = Новый Массив;
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	&НомерАналитики КАК НомерАналитики,
	|	&ВидАналитики КАК ВидАналитики
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка = &СтатьяБюджетов";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		НовыйТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "&НомерАналитики", НомерАналитики);
		НовыйТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса, "&ВидАналитики", "СтатьиБюджетов.ВидАналитики" + НомерАналитики);
		ТекстыЗапроса.Добавить(НовыйТекстЗапроса);
	КонецЦикла;
	НовыйТекстЗапроса = СтрСоединить(ТекстыЗапроса, Разделитель);
	НовыйТекстЗапроса = СхемыЗапросов.УстановитьПомещениеВоВременнуюТаблицу(НовыйТекстЗапроса, "ВидыАналитик");
	
	Запрос = Новый Запрос;
	Запрос.Текст = НовыйТекстЗапроса + ";
	|
	|////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыАналитик.НомерАналитики КАК НомерАналитики,
	|	ВидыАналитик.ВидАналитики КАК ВидАналитики,
	|	АналитикиСтатейБюджетов.ТипЗначения КАК ТипЗначения
	|ИЗ
	|	ВидыАналитик КАК ВидыАналитик
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.АналитикиСтатейБюджетов КАК АналитикиСтатейБюджетов
	|	ПО
	|		ВидыАналитик.ВидАналитики = АналитикиСтатейБюджетов.Ссылка";
	
	Если ТипЗнч(СтатьяБюджетов) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтатьиБюджетов", "ПоказателиБюджетов");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Выражение = ВыражениеПустогоЗначенияАналитики();
		Если ЗначениеЗаполнено(Выборка.ВидАналитики) Тогда
			Для каждого Тип Из Выборка.ТипЗначения.Типы() Цикл
				Если ДоступныеТипы[Тип] <> Неопределено Тогда
					Выражение = ДоступныеТипы[Тип];
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ИмяАналитики + Выборка.НомерАналитики, Выражение);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает в привилегированном режиме значение константы "Адрес публикации информационной базы в локальной сети".
//
// Возвращаемое значение:
//   Строка - значение константы.
//
Функция АдресПубликацииИнформационнойБазыВЛокальнойСети() Экспорт
	
	Значение = Неопределено; //Только для использования в УП
	
	//++ НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	Значение = Константы.АдресПубликацииИнформационнойБазыВЛокальнойСети.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	//-- НЕ УТКА
	
	Возврат Значение;
	
КонецФункции

// Получает в привилегированном режиме значение константы "Использовать международный финансовый учет".
// Только для ERP.
//
// Возвращаемое значение:
//   Булево - значение константы.
//
Функция ИспользуетсяМеждународныйУчет() Экспорт
	
	Значение = Ложь; //Только для использования в УП
	
	//++ НЕ УТКА
	УстановитьПривилегированныйРежим(Истина);
	Значение = Константы.ИспользоватьМеждународныйФинансовыйУчет.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	//-- НЕ УТКА
	
	Возврат Значение;
	
КонецФункции

// Удаляет макеты бюджетов, сохраненные в присоединенных файлах экземпляра бюджета
// 
// Параметры:
//	Отбор - СправочникСсылка.ВидыБюджетов, ДокументСсылка.ЭкземплярБюджета - отбор, по которому будет определен экземпляр
//				бюджета для удаления присоединенных файлов.
//
Процедура УдалитьСохраненныеМакетыБюджетов(Отбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = ЭкземплярБюджета.Ссылка
	|ГДЕ
	|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла <> ЗНАЧЕНИЕ(Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета.ПустаяСсылка)
	|	И &ТекстОтбораЭкземпляраБюджета";
	
	Если ТипЗнч(Отбор) = Тип("СправочникСсылка.ВидыБюджетов")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.ВидБюджета = &Отбор");
		
	ИначеЕсли ТипЗнч(Отбор) = Тип("ДокументСсылка.ЭкземплярБюджета")
		И ЗначениеЗаполнено(Отбор) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОтбораЭкземпляраБюджета", "ЭкземплярБюджета.Ссылка = &Отбор");
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Процедура ""%1"": Неверные параметры вызова';
									|en = 'Procedure ""%1"": Invalid call parameters'"), "УдалитьСохраненныеМакетыБюджетов");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект
		Объект.Удалить();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает виды аналитик для переданного поддерживаемого справочника-источника данных.
//
// Параметры:
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов - поддерживаемый справочник-источник данных.
//					- СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов -
//					- СправочникСсылка.НефинансовыеПоказателиБюджетов -
//
// Возвращаемое значение:
//	Структура - виды аналитик источника данных:
//		*ВидАналитики1 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//		*ВидАналитики2 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//		*ВидАналитики3 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//		*ВидАналитики4 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//		*ВидАналитики5 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//		*ВидАналитики6 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
//
Функция ВидыАналитик(ИсточникДанных) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Реквизиты = Новый Структура;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Реквизиты.Вставить("ВидАналитики" + НомерАналитики);
	КонецЦикла;
	
	Если ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.ПоказательБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникДанных.СтатьяБюджетов, Реквизиты);
		
	ИначеЕсли ТипЗнч(ИсточникДанных.Ссылка) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ИсточникДанных);
		ВидыАналитик = Реквизиты;
	КонецЕсли;
	
	Возврат ВидыАналитик;
	
КонецФункции

// Добавляет для аналитических срезов в схему вычисляемые поля, а в настройки поля группировок.
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных
//	ИсточникДанных - СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов - поддерживаемый справочник-источник данных.
//					- СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов -
//					- СправочникСсылка.НефинансовыеПоказателиБюджетов -
//	Параметры - См. БюджетированиеСервер.ШаблонПараметровПолученияФакта
//
Процедура ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, ИсточникДанных, Параметры)
	
	ВидыАналитик = Новый ТаблицаЗначений;
	ВидыАналитик.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВидыАналитик.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		НоваяСтрока = ВидыАналитик.Добавить();
		НоваяСтрока.НомерАналитики = НомерАналитики;
		НоваяСтрока.ВидАналитики = ИсточникДанных["ВидАналитики" + НомерАналитики];
	КонецЦикла;
	
	Если ИсточникДанных.РасширенныйРежимНастройкиЗаполненияАналитики Тогда
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоПравилу(ИсточникДанных, ВидыАналитик, СхемаКомпоновкиДанных);
	Иначе
		ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик, Истина);
	КонецЕсли;
	
	ВычисляемыеПоля = СхемаКомпоновкиДанных.ВычисляемыеПоля;
	
	// Добавим аналитику "по номеру"
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(НомерАналитики, "НомерАналитики");
		
		ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоНомеру;
		Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
			ТипЗначения = РезультатПоиска.ТипЗначения;
			Выражение = РезультатПоиска.Выражение;
		Иначе
			ТипЗначения = ВсеТипыАналитик();
			Выражение   = ВыражениеПустогоЗначенияАналитики();
		КонецЕсли;
		ВычисляемоеПоле.Выражение = Выражение;
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
		
	КонецЦикла;
	
	// Добавим аналитику "по виду"
	ТипыВидовВидыАналитик = БюджетированиеПовтИсп.ТипыВидовВидыАналитик();
	
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Аналитики = ТипыВидовВидыАналитик.ВыгрузитьКолонку("Ссылка");
		
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	Для Каждого СтрокаТипыВидовВидыАналитик Из ТипыВидовВидыАналитик Цикл
		ВидАналитики = СтрокаТипыВидовВидыАналитик.Ссылка;
		
		Если Аналитики.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоВиду = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		РезультатПоиска = ВыраженияЗаполненияАналитики.Найти(ВидАналитики, "ВидАналитики");
		Выражение = "";
		Если НЕ РезультатПоиска = Неопределено Тогда
			Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(РезультатПоиска.Выражение, ВидАналитики);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выражение) Тогда
			Выражение = ВыражениеПустогоЗначенияАналитики();
		КонецЕсли;
		
		Если ПолеАналитикиПоВиду <> Выражение Тогда
			ВычисляемоеПоле = ВычисляемыеПоля.Добавить();
			ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
			ВычисляемоеПоле.Выражение   = Выражение;
			ВычисляемоеПоле.ТипЗначения = СтрокаТипыВидовВидыАналитик.ТипЗначения;
		КонецЕсли;
		
		Если Параметры.ВидыАналитик.Найти(ВидАналитики) <> Неопределено Тогда
			ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоВиду);
		КонецЕсли;
		
	КонецЦикла;
	
	// Аналитика Валюта
	Если ИсточникДанных.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		
		ВВалютеОтчета = Ложь;
		ВычисляемоеПолеВалюта = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеВалюта.ПутьКДанным = "Валюта";
		ВычисляемоеПолеВалюта.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		
		Если ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			
			ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиВалюта);
			
			ВычисляемоеПолеВалюта.Выражение = 
			"ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
			|	&КэшЗначенийАналитик, 
			|	" + ВыражениеАналитики.Выражение + ", 
			|	""" + ИсточникДанных.ПолеВалютыАналитики + """,
			|	&Валюта), ""Справочник.Валюты"")";
			
			ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" Тогда 
			
			ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
			
			Если ИсточникДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
				И НЕ ИсточникДанных.ИсточникВалютный Тогда
				ВычисляемоеПолеВалюта.Выражение = "Организация.ВалютаРегламентированногоУчета";
			//++ НЕ УТКА
			ИначеЕсли ИсточникДанных.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
				И НЕ ИсточникДанных.ИсточникВалютный Тогда
				Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
					ВычисляемоеПолеВалюта.Выражение = "МеждународныйУчетСерверПовтИсп.ВалютаФункциональная(ПланСчетовМеждународногоУчета, Организация)";
				Иначе
					ВычисляемоеПолеВалюта.Выражение = "&ВалютаМеждународ";
				КонецЕсли;
			//-- НЕ УТКА
			Иначе
				Если ПоляНабора.Найти("Валюта") <> Неопределено Тогда
					ВычисляемоеПолеВалюта.Выражение = "Валюта";
				Иначе
					ВВалютеОтчета = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИсточникДанных.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда 
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВычисляемоеПолеВалюта.Выражение = "&Валюта";
			ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Валюта");
		
	КонецЕсли;
	
	// Аналитика ЕдиницаИзмерения
	Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Если ПоляНабора.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
			Выражение = "ЕдиницаИзмерения";
		Иначе
			Если ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
				ВыражениеАналитики = ВычисляемыеПоля.Найти("Аналитика" + ИсточникДанных.АдресАналитикиЕдиницаИзмерения);
				Выражение = 
					"ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
					|	&КэшЗначенийАналитик, " + ВыражениеАналитики.Выражение
						+ ", """ + ИсточникДанных.ПолеЕдиницыИзмеренияАналитики
						+ """), ""Справочник.УпаковкиЕдиницыИзмерения"")";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
			ИначеЕсли ИсточникДанных.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
				Выражение = "&ЕдиницаИзмерения";
				ДобавитьПараметр(СхемаКомпоновкиДанных, "ЕдиницаИзмерения", ИсточникДанных.ЕдиницаИзмерения);
			КонецЕсли;
		КонецЕсли;
		
		ВычисляемоеПолеЕдИзмерения = ВычисляемыеПоля.Добавить();
		ВычисляемоеПолеЕдИзмерения.ПутьКДанным = "ЕдиницаИзмерения";
		ВычисляемоеПолеЕдИзмерения.Выражение = Выражение;
		ВычисляемоеПолеЕдИзмерения.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
		ДобавитьПолеГруппировки(Настройки, "ЕдиницаИзмерения");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет выражения вычисляемых полей для полей, используемых в отборах компоновки.
// 
// Параметры:
//	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - динамически дополняемая схема источника данных
//	Настройки - НастройкиКомпоновкиДанных - динамически дополняемые настройки компоновки данных.
//
Процедура ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки) Экспорт
	
	ЭлементыОтборов = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(Настройки.Отбор);
	
	Для Каждого ЭлементОтбора Из ЭлементыОтборов Цикл
		Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных,
				Строка(ЭлементОтбора.ЛевоеЗначение),
				Строка(ЭлементОтбора.ЛевоеЗначение),,
				Неопределено);
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
				СхемаКомпоновкиДанных, 
				Строка(ЭлементОтбора.ПравоеЗначение),
				Строка(ЭлементОтбора.ПравоеЗначение),,
				Неопределено);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сопоставляет и заполняет имена полей наборов данных и требуемых показателей фактических данных.
// 
// Параметры:
//	ИсточникиСуммы - Структура - сопоставленные показатели факта и поля источника данных:
//		*Ключ - Строка - имя показателя фактических данных.
//		*Значение - Строка - имя поля в схеме-источнике данных.
//	НаборДанных - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных - 
//				набор данных, поля которого анализируются.
//	ВсегдаВалютаВИмениПоказателя - Булево - Истина - во всех именах будет первое слово "Валюта".
//
Процедура ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, НаборДанных, ВсегдаВалютаВИмениПоказателя = Ложь) Экспорт
	
	ПоляНабораСхемы = НаборДанных.Поля;
	
	ИменаПоказателей = Новый Соответствие;
	Если ВсегдаВалютаВИмениПоказателя Тогда
		ИменаПоказателей.Вставить("СуммаРегл",       "ВалютаРегл");
		ИменаПоказателей.Вставить("СуммаУпр",        "ВалютаУпр");
		ИменаПоказателей.Вставить("СуммаМеждународ", "ВалютаМеждународ");
	Иначе
		ИменаПоказателей.Вставить("СуммаРегл",       "Регл");
		ИменаПоказателей.Вставить("СуммаУпр",        "Упр");
		ИменаПоказателей.Вставить("СуммаМеждународ", "Международ");
	КонецЕсли;
	
	Если ПоляНабораСхемы.Найти("СуммаРегл") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(ИменаПоказателей.Получить("СуммаРегл"), "СуммаРегл");
	КонецЕсли;
	Если ПоляНабораСхемы.Найти("СуммаУпр") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(ИменаПоказателей.Получить("СуммаУпр"), "СуммаУпр");
	КонецЕсли;
	//++ НЕ УТКА
	Если ПоляНабораСхемы.Найти("СуммаМеждународ") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить(ИменаПоказателей.Получить("СуммаМеждународ"), "СуммаМеждународ");
	КонецЕсли;
	//-- НЕ УТКА
	Если ПоляНабораСхемы.Найти("СуммаВВалюте") <> Неопределено Тогда 
		ИсточникиСуммы.Вставить("Валюта", "СуммаВВалюте");
	КонецЕсли;
	
КонецПроцедуры

// Сопоставляет и заполняет имена полей наборов данных и требуемых показателей фактических данных.
// 
// Параметры:
//	ИсточникиКоличества - Структура - сопоставленные показатели факта и поля источника данных:
//		*Ключ - Строка - имя показателя фактических данных
//		*Значение - Строка - имя поля в схеме-источнике данных
//	НаборДанных - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных, НаборДанныхОбъединениеСхемыКомпоновкиДанных -
//			набор данных, поля которого анализируются.
//
Процедура ЗаполнитьИсточникиКоличестваПоСхеме(ИсточникиКоличества, НаборДанных) Экспорт
	
	ПоляНабораСхемы = НаборДанных.Поля;
	
	Если ПоляНабораСхемы.Найти("Количество") <> Неопределено Тогда 
		ИсточникиКоличества.Вставить("Количество", "Количество");
	Иначе
		ИсточникиКоличества.Вставить("Количество", "0");
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТКА

// Процедура формирует бюджетные задачи.
//
// Параметры:
// 	МодельБюджетирования - СправочникСсылка.МоделиБюджетирования - Модель бюджетирования.
// 	ПроцессПодготовкиБюджетов - СправочникСсылка.ЭтапыПодготовкиБюджетов - Этап подготовки бюджета.
//
Процедура ФормированиеБюджетныхЗадач(МодельБюджетирования = Неопределено, ПроцессПодготовкиБюджетов=Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеБюджетныхЗадач);
	
	Задачи.БюджетнаяЗадача.ФормированиеБюджетныхЗадач(МодельБюджетирования, ПроцессПодготовкиБюджетов);
	
КонецПроцедуры

// Регламентная процедура формирования оповещений по бюджетным задачам.
//
Процедура ФормированиеОповещенийПоБюджетнымЗадачам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеОповещенийПоБюджетнымЗадачам);
	
	Задачи.БюджетнаяЗадача.ФормированиеОповещенийПоБюджетнымЗадачам();
	
КонецПроцедуры

// Вызывает формирование документов для бюджетных задач с приоритетом по задачам первой очереди.
//
// Параметры:
// 	Процесс - ДокументСсылка.ПроцессПодготовкиБюджетов - Процесс подготовки бюджетов (реквизит задачи) 
//	ЗадачиПервойОчереди - Массив из ЗадачаСсылка.БюджетнаяЗадача, ЗадачаСсылка.БюджетнаяЗадача - Массив задач
//				или бюджетная задача, которые будут обрабатываться в первую очередь,
//				остальные задачи будут считаться "зависшими", и будут обрабатываться во 2ую очередь.
Процедура СозданиеДокументовДляБюджетныхЗадач(Процесс, ЗадачиПервойОчереди = Неопределено) Экспорт
	
	Задачи.БюджетнаяЗадача.СозданиеДокументовДляБюджетныхЗадач(Процесс, ЗадачиПервойОчереди);
	
КонецПроцедуры

//-- НЕ УТКА

#Область ИнтерактивнаяРаботаСПравиламиПолученияФактическихДанныхИзОбщейФормыУпрощеннаяНастройкаСхемыКомпоновкиДанных

// Помещает измененные значения пользовательских параметров в схему компоновки данных при начале редактирования
// схемы получения фактических данных в общей форме УпрощеннаяНастройкаСхемыКомпоновкиДанных.
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   КомпоновщикНастроек   - КомпоновщикНастроекКомпоновкиДанных - Компоновщик с настройками, содержащими отображаемые пользователю параметры.
//
Процедура ПоместитьНастройкиВСхемуПолученияФактическихДанных(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	КомпоновкаДанныхКлиентСервер.ОчиститьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
		КомпоновщикНастроек.Настройки);
	
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого СтрокаПараметраКомпоновки Из Параметры Цикл
		Если НЕ СтрокаПараметраКомпоновки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ИмяПараметра = Строка(СтрокаПараметраКомпоновки.Параметр);
		Если ЗарезервированныеИменаПараметров.Найти(ИмяПараметра) = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
			Если НЕ ПараметрСхемы = Неопределено Тогда
				ПараметрСхемы.Значение = СтрокаПараметраКомпоновки.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Позволяет проверить корректность схемы получения фактических данных, при необходимости исправить ошибки,
// а также заполнить список критических ошибок, которые необходимо будет исправить пользователю.
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   СхемаСодержитКритическиеОшибки - Булево - флаг наличия критических ошибок, который необходимо взвести,
//   				чтобы пользователь не смог применить схему, пока не будут исправлены ошибки.
//   СписокКритическихОшибок - СписокЗначений - Список, содержащий тексты сообщений о критических ошибках.
//   СписокПрочихСообщений - СписокЗначений - Список, содержащий тексты сообщений о исправленных ошибках и прочие замечания.
//   				Данный список сообщений выводится пользователю один раз.
//
Процедура ПроверкаКорректностиСхемыПолученияФактическихДанных(СхемаКомпоновкиДанных, СхемаСодержитКритическиеОшибки,
					СписокКритическихОшибок, СписокПрочихСообщений) Экспорт
	
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ЭлементПараметра Из СхемаКомпоновкиДанных.Параметры Цикл
		Если НЕ ЗарезервированныеИменаПараметров.Найти(ЭлементПараметра.Имя) = Неопределено Тогда
			Если ЭлементПараметра.ВключатьВДоступныеПоля
			 ИЛИ НЕ ЭлементПараметра.ОграничениеИспользования Тогда
				ЭлементПараметра.ВключатьВДоступныеПоля = Ложь;
				ЭлементПараметра.ОграничениеИспользования = Истина;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Параметр ""%1"" является зарезервированным, его редактирование пользователем не допускается. Параметр схемы компоновки будет исправлен.';
						|en = 'The parameter ""%1"" is reserved, its editing by the user is not allowed. The parameter of composition schema will be corrected.'"),
					ЭлементПараметра.Имя);
				
				СписокПрочихСообщений.Добавить(ТекстОшибки);
			КонецЕсли;
		Иначе
			ЭлементПараметра.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Помещает измененные значения параметров в схеме компоновки в настройки компоновщика настроек.
// Необходимость доопределения поведения вызвана возможностью указания параметра в настройках по умолчанию
// (тогда при стандартной инициализации настроек параметры будут взяты из настроек по умолчанию, а нужно
// чтобы брались из схемы компоновки).
//
// Параметры:
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик с настройками, содержащими отображаемые пользователю параметры.
//
Процедура ДозаполнениеНастроекПриИзмененииСхемыКомпоновки(СхемаКомпоновкиДанных, КомпоновщикНастроек) Экспорт
	
	// Если заполнены настройки по умолчанию, то значения параметров подставляются из настроек по умолчанию, а не схемы компоновки.
	ЗарезервированныеИменаПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Параметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	Для Каждого СтрокаПараметраКомпоновки Из Параметры Цикл
		ИмяПараметра = Строка(СтрокаПараметраКомпоновки.Параметр);
		Если ЗарезервированныеИменаПараметров.Найти(ИмяПараметра) = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
			Если НЕ ПараметрСхемы = Неопределено Тогда
				СтрокаПараметраКомпоновки.Значение = ПараметрСхемы.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен параметров, значение которых не будет скопировано в общую схему компоновки данных
// из схемы произвольного правила получения фактических данных, т.к. представляют из себя зарезервированные имена параметров.
// Параметры, не вошедшие в список, будут переименованы в формат "П" + Идентификатор произвольного ППФД в общей схеме получения факта + "_" + Имя параметра,
// т.к. в составе одной общей схемы получения факта может быть произвольное количество ППФД с параметрами, имеющими одинаковое имя, но разные значения.
//
// Возвращаемое значение:
// 	Массив из Строка - Массив имен параметров данных компоновки.
//
Функция ИменаОбщихПараметровПравилПолученияФакта()
	
	НеКопируемыеПараметры = Новый Массив;
	НеКопируемыеПараметры.Добавить("НачалоПериода");
	НеКопируемыеПараметры.Добавить("КонецПериода");
	НеКопируемыеПараметры.Добавить("Период");
	НеКопируемыеПараметры.Добавить("ПериодГраница");
	НеКопируемыеПараметры.Добавить("ГраницаФактДанных");
	НеКопируемыеПараметры.Добавить("Периодичность");
	//++ НЕ УТКА
	НеКопируемыеПараметры.Добавить("ВалютаМеждународ");
	//-- НЕ УТКА
	НеКопируемыеПараметры.Добавить("Валюта");
	НеКопируемыеПараметры.Добавить("ВалютаОтчета");
	НеКопируемыеПараметры.Добавить("ВалютаХранения");
	НеКопируемыеПараметры.Добавить("ИспользуетсяМеждународныйУчет");
	НеКопируемыеПараметры.Добавить("ИмяСправочникаИсточника");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежим");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежимИсточника");
	НеКопируемыеПараметры.Добавить("ИдентификаторИсточникаДанных");
	НеКопируемыеПараметры.Добавить("ТипПравилаФактическиеДанные");
	НеКопируемыеПараметры.Добавить("ТипПравилаИсполнениеБюджета");
	НеКопируемыеПараметры.Добавить("ИД_" + "ВыражениеНачалоПериода");
	НеКопируемыеПараметры.Добавить("ИД_" + "ВыражениеКонецПериода");
	НеКопируемыеПараметры.Добавить("ИД_" + "ВыражениеПериод");
	НеКопируемыеПараметры.Добавить("ИсточникДанных");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежим");
	НеКопируемыеПараметры.Добавить("ПривилегированныйРежимИсточника");
	НеКопируемыеПараметры.Добавить("КэшЗначенийАналитик");
	НеКопируемыеПараметры.Добавить("ОборотПоАналитикеРасхода");
	НеКопируемыеПараметры.Добавить("ПолучениеОстатковНаГраницуПериода");
	
	Возврат НеКопируемыеПараметры;
	
КонецФункции


// Заполняет некоторые реквизиты в статье бюджетов или показателе бюджетов.
// 
// Параметры:
// 	СтатьяИлиПоказатель - СправочникОбъект.СтатьиБюджетов, СправочникОбъект.ПоказателиБюджетов - Статья или показатель бюджетов.
//
Процедура ЗаполнитьВспомогательныеРеквизитыПередЗаписью(СтатьяИлиПоказатель) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ВидыАналитик = Новый Структура;
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ВидыАналитик.Вставить("ВидАналитики" + Сч);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ВидыАналитик, СтатьяИлиПоказатель);
	
	ТаблицаАналитик = Новый ТаблицаЗначений;
	ТаблицаАналитик.Колонки.Добавить("ИмяАналитики");
	ТаблицаАналитик.Колонки.Добавить("ЗначениеАналитики");
	Для Каждого КлючИЗначение Из ВидыАналитик Цикл
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаАналитик.Найти(КлючИЗначение.Значение, "ЗначениеАналитики") = Неопределено Тогда
			НоваяСтрока = ТаблицаАналитик.Добавить();
			НоваяСтрока.ИмяАналитики = КлючИЗначение.Ключ;
			НоваяСтрока.ЗначениеАналитики = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	ТаблицаАналитик.Сортировать("ИмяАналитики");
	
	Для Сч = 0 По ТаблицаАналитик.Количество() - 1 Цикл
		СтатьяИлиПоказатель["ВидАналитики" + (Сч + 1)] = ТаблицаАналитик[Сч].ЗначениеАналитики;
	КонецЦикла;
	
	Для ОставшиесяАналитики = ТаблицаАналитик.Количество() + 1 По МаксимальноеКоличествоАналитик Цикл
		СтатьяИлиПоказатель["ВидАналитики" + ОставшиесяАналитики] = Неопределено;
	КонецЦикла;
	
	СтатьяИлиПоказатель.КоличествоИспользуемыхАналитик = ТаблицаАналитик.Количество();
	
	АдресАналитикиВалюта = 0;
	Если СтатьяИлиПоказатель.ВалютаОпределяетсяАналитикой Тогда
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Если СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] Тогда
				АдресАналитикиВалюта = НомерАналитики;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиВалюта = АдресАналитикиВалюта;
	
	АдресАналитикиКоличество = 0;
	Если СтатьяИлиПоказатель.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Если СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] Тогда
				АдресАналитикиКоличество = НомерАналитики;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтатьяИлиПоказатель.АдресАналитикиКоличество = АдресАналитикиКоличество;
	
КонецПроцедуры

// Проверяет наличие аналитики валюты и аналитики единицы измерения статьи бюджетов,
// показателя бюджетов или нефинансового показателя в списке аналитик
//
// Параметры:
//  СтатьяИлиПоказатель - СправочникОбъект.СтатьиБюджетов, СправочникОбъект.ПоказателиБюджетов, СправочникОбъект.НефинансовыеПоказателиБюджетов
//    - Статья или показатель бюджетов.
//  Отказ - Булево - Флаг ошибки при проверке.
Процедура ПроверитьЗаполнениеАналитикиВалютыЕдиницыИзмерения(СтатьяИлиПоказатель, Отказ) Экспорт

	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если ТипЗнч(СтатьяИлиПоказатель) = Тип("СправочникОбъект.СтатьиБюджетов") Тогда
		ШаблонСообщения = НСтр("ru = '%1 не указана в качестве аналитики статьи';
								|en = '%1 is not specified as an item dimension'");
	Иначе
		ШаблонСообщения = НСтр("ru = '%1 не указана в качестве аналитики показателя';
								|en = '%1 is not specified as an indicator dimension'");
	КонецЕсли;
	
	Если ТипЗнч(СтатьяИлиПоказатель) = Тип("СправочникОбъект.НефинансовыеПоказателиБюджетов") Тогда
		УчитыватьПоВалюте = (СтатьяИлиПоказатель.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный);
		УчитыватьПоКоличеству = (СтатьяИлиПоказатель.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Количественный);
	Иначе
		УчитыватьПоВалюте = СтатьяИлиПоказатель.УчитыватьПоВалюте;
		УчитыватьПоКоличеству = СтатьяИлиПоказатель.УчитыватьПоКоличеству;
	КонецЕсли;
	
	Если УчитыватьПоВалюте
		И СтатьяИлиПоказатель.ВалютаОпределяетсяАналитикой
		И ЗначениеЗаполнено(СтатьяИлиПоказатель.АналитикаВалюты) Тогда
		ЕстьАналитикаВалюты = Ложь;
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Если СтатьяИлиПоказатель.АналитикаВалюты = СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] Тогда
				ЕстьАналитикаВалюты = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьАналитикаВалюты Тогда
			ПредставлениеАналитики = НСтр("ru = 'Аналитика валюты';
											|en = 'Currency dimension'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеАналитики);
			ОбщегоНазначения.СообщитьПользователю(Сообщение, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если УчитыватьПоКоличеству
		И СтатьяИлиПоказатель.ЕдиницаИзмеренияОпределяетсяАналитикой
		И ЗначениеЗаполнено(СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения) Тогда
		ЕстьАналитикаЕдиницыИзмерения = Ложь;
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			Если СтатьяИлиПоказатель.АналитикаЕдиницыИзмерения = СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] Тогда
				ЕстьАналитикаЕдиницыИзмерения = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьАналитикаЕдиницыИзмерения Тогда
			ПредставлениеАналитики = НСтр("ru = 'Аналитика единицы измерения';
											|en = 'Unit of measure dimension'");
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеАналитики);
			ОбщегоНазначения.СообщитьПользователю(Сообщение, , , , Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет наличие аналитики Номенклатура или ВидыНоменклатуры
// при наличии аналитики ХарактеристикиНоменклатуры, которая должна идти в паре с аналитикой-владельцем.
//
// Параметры:
//  СтатьяИлиПоказатель - СправочникОбъект.СтатьиБюджетов, СправочникОбъект.ПоказателиБюджетов, СправочникОбъект.НефинансовыеПоказателиБюджетов - Статья или показатель бюджетов.
//  Отказ - Булево - Флаг ошибки при проверке.
Процедура ПроверитьЗаполнениеАналитикиПоНоменклатуре(СтатьяИлиПоказатель, Отказ) Экспорт

	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Если ТипЗнч(СтатьяИлиПоказатель) = Тип("СправочникОбъект.СтатьиБюджетов") Тогда
		ШаблонСообщения = НСтр("ru = 'Аналитика %1 или %2 должна быть указана в качестве аналитики статьи';
								|en = 'The %1 or %2 dimension must be specified as the item dimension'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Аналитика %1 или %2 должна быть указана в качестве аналитики показателя';
								|en = 'The %1 or %2 dimension must be specified as the indicator dimension'");
	КонецЕсли;
	
	ЕстьАналитикаПоНоменклатуре = Ложь;
	ЕстьАналитикаПоХарактеристикеНоменклатуры = Ложь;
	АналитикаНоменклатура = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.НоменклатураБюджетирования;
	АналитикаВидыНоменклатуры = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыНоменклатуры;
	АналитикаХарактеристикиНоменклатуры = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ХарактеристикиНоменклатуры;
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Если СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] = АналитикаНоменклатура
			Или СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] = АналитикаВидыНоменклатуры Тогда
			ЕстьАналитикаПоНоменклатуре = Истина;
		ИначеЕсли СтатьяИлиПоказатель["ВидАналитики" + НомерАналитики] = АналитикаХарактеристикиНоменклатуры Тогда
			ЕстьАналитикаПоХарактеристикеНоменклатуры = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьАналитикаПоХарактеристикеНоменклатуры
		И Не ЕстьАналитикаПоНоменклатуре Тогда
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АналитикаНоменклатура, АналитикаВидыНоменклатуры);
		ОбщегоНазначения.СообщитьПользователю(Сообщение, , , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#Область АналитическиеОтчеты

// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
// 	ИсточникАналитики - Строка - Имя поля источника аналитики.
Процедура ДополнитьСКДАналитикойПоВиду(СхемаКомпоновкиДанных, ИсточникАналитики) Экспорт
	
	ВидыАналитик = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		
		ИмяПоляАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики.Ссылка);
		ИмяПараметраВидаАналитики = "ВидАналитики" + ИмяПоляАналитики;
		
		ПараметрыВыражения = ШаблонПараметровДляПолученияТекстаПоляСУсловиемПоВидуАналитики();
		ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = ИсточникАналитики + ".КоличествоИспользуемыхАналитик";
		ПараметрыВыражения.ВыражениеВидАналитикиБезИндекса = ИсточникАналитики + ".ВидАналитики";
		ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "Аналитика";
		ПараметрыВыражения.ИмяПараметраВидАналитики = ИмяПараметраВидаАналитики;
		
		ВыражениеАналитики = ТекстПоляСУсловиемПоВидуАналитики(ПараметрыВыражения);
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(
			СхемаКомпоновкиДанных,
			ИмяПоляАналитики,
			ВыражениеАналитики,
			ВидАналитики.Представление,
			Истина,
			БюджетированиеСервер.ВсеТипыАналитик());
		
		ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметраВидаАналитики);
		Если ПараметрСхемы = Неопределено Тогда
			ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрСхемы.Имя = ИмяПараметраВидаАналитики;
		КонецЕсли;
		ПараметрСхемы.Значение = ВидАналитики.Ссылка;
		ПараметрСхемы.ОграничениеИспользования = Истина;
		ПараметрСхемы.ТипЗначения = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов");
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет поля компоновки от "Аналитика1" до "Аналитика6" выражениями получения представления аналитики.
//
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки, в которой необходимо установить выражения получения представления
// 	ПутьКПолямКомпоновки - Строка - Путь к полям компоновки, например, "НаборыДанных.ЗначенияНефинансовыхПоказателей.Поля"
// 	ИсточникАналитики - Строка - Имя поля компоновки, содержащее настройки видов аналитики ,т.е. "ВидАналитики1", "ВидАналитики2".
//
Процедура ДополнитьСКДВыражениямиПредставленияАналитики(СхемаКомпоновкиДанных, ПутьКПолямКомпоновки, ИсточникАналитики) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ПоляКомпоновки = СхемаКомпоновкиДанных;
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКПолямКомпоновки, ".");
	Для каждого Реквизит Из Массив Цикл
		ПоляКомпоновки = ПоляКомпоновки[Реквизит];
	КонецЦикла;
	
	ШаблонИмениАналитики = "Аналитика%НомерАналитики%";
	ШаблонВидаАналитики  = "ВидАналитики%НомерАналитики%";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ИмяПоляАналитики = СтрЗаменить(ШаблонИмениАналитики, "%НомерАналитики%", НомерАналитики);
		
		ПолеКомпоновки = ПоляКомпоновки.Найти(ИмяПоляАналитики);
		Если ТипЗнч(ПолеКомпоновки) = Тип("ПолеНабораДанныхСхемыКомпоновкиДанных")
			И СокрЛП(ПолеКомпоновки.ВыражениеПредставления) = "&ТекстПредставленияЗначенияАналитики" Тогда
			
			Выражение = 
			"ВЫБОР
			|	КОГДА Не ЗначениеЗаполнено(%ИмяПоляАналитики%) И ЗначениеЗаполнено(%ПолеВидаАналитики%)
			|		ТОГДА БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
			|				%ПолеВидаАналитики%, ""Прочие"", Представление(%ПолеВидаАналитики%))
			|	ИНАЧЕ %ИмяПоляАналитики%
			|КОНЕЦ";
			
			ИмяВидаАналитики  = СтрЗаменить(ШаблонВидаАналитики, "%НомерАналитики%", НомерАналитики);
			ПолеВидаАналитики = ИсточникАналитики + "." + ИмяВидаАналитики;
			
			Выражение = СтрЗаменить(Выражение, "%ИмяПоляАналитики%",  ИмяПоляАналитики);
			Выражение = СтрЗаменить(Выражение, "%ПолеВидаАналитики%", ПолеВидаАналитики);
			
			ПолеКомпоновки.ВыражениеПредставления = Выражение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Очищает значение параметра ДатаАктуальностиДанных в пользовательских настройках компоновщика настроек формы.
// 
// Параметры:
// 	ЭтаФорма - ФормаКлиентскогоПриложения - Форма, содержащая компоновщик настроек.
// 	ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки.
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, ПользовательскиеНастройки) Экспорт
	
	КомпоновщикНастроек = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаАктуальностиДанных");
	Если Параметр <> Неопределено Тогда
		ИдентификаторПользовательскойНастройки = Параметр.ИдентификаторПользовательскойНастройки;
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройки);
		Если ЭлементПользовательскойНастройки <> Неопределено Тогда
			ЭлементПользовательскойНастройки.Значение = Дата('00010101');
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПравилПолученияДанных

Функция ВыраженияЗаполненияАналитикиПоПравилу(Правило, ВидыАналитик, СхемаКомпоновкиДанных)
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	ВыраженияАналитикИзПравила = Новый Массив;
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		НомерАналитики = СтрокаВидАналитики.НомерАналитики;
		Если НЕ ЗначениеЗаполнено(Правило["ВидАналитики" + НомерАналитики]) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			Выражение = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
			Если ВыраженияАналитикИзПравила.Найти(Выражение) = Неопределено Тогда
				ВыраженияАналитикИзПравила.Добавить(Выражение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ВыраженияАналитикИзПравила.Количество() > 0 Тогда
		ДанныеДляПолученияВыражений = РаботаСФормулами.ДанныеДляПолученияВыраженийФормулЧерезСКД(СхемаКомпоновкиДанных,
			ВыраженияАналитикИзПравила, Ложь, Истина);
		ЗаменыВыраженийАналитик = ДанныеДляПолученияВыражений.ПреобразованныеВыражения;
	Иначе
		ЗаменыВыраженийАналитик = Новый Соответствие;
	КонецЕсли;
	
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[СтрокаВидАналитики.ВидАналитики];
		
		НомерАналитики = СтрокаВидАналитики.НомерАналитики;
		
		Если Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
			ИмяПараметра = "ЗначениеАналитики" + НомерАналитики;
			ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Правило[ИмяПараметра]);
			Выражение = "&" + ИмяПараметра;
		Иначе
			Выражение = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
			
			ПреобразованноеВыражение = ЗаменыВыраженийАналитик.Получить(Выражение);
			Если НЕ ПреобразованноеВыражение = Неопределено Тогда
				Выражение = ПреобразованноеВыражение;
			КонецЕсли;
			
			Если ЭтоИзмерениеАналитики(НоваяСтрока.ТипЗначения, СтрокаВидАналитики.ВидАналитики) Тогда
				Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(Выражение, СтрокаВидАналитики.ВидАналитики);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Выражение = Выражение;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

// Возвращает таблицу выражений заполнения аналитик.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема получения фактических данных.
//  ВидыАналитик - ТаблицаЗначений - Таблица аналитик:
//   *НомерАналитики - Число - Порядковый номер аналитики.
//   *ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//  ПроверятьТипЗначенияВВыражении - Булево - Флаг необходимости проверки типа аналитики в самом выражении. Значение по умолчанию Ложь.
//  			Должен быть установлен в Истина при получении данных для преобразование
//  			значений не подходящего типа в пустое значение.
//  			Должен быть установлен в Ложь при автоматическом подборе подходящих полей СКД.
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица выражений аналитик:
//   *НомерАналитики - Число - Порядковый номер аналитики.
//   *ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
//   *ТипЗначения - ОписаниеТипов - тип значения аналитики.
//   *Выражение - Строка - Строка заполнения аналитики. В зависимости от значения флага ПроверятьТипЗначенияВВыражении
//   			может содержать проверку на тип данных.
//   *Неоднозначно - Булево - Истина, если выбранное выражение аналитики неоднозначно, и в правилах получения
//   			данных требуется ручной выбор поля аналитики.
//
Функция ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик, ПроверятьТипЗначенияВВыражении = Ложь) Экспорт
	
	ВыраженияЗаполнения = Новый ТаблицаЗначений;
	ВыраженияЗаполнения.Колонки.Добавить("НомерАналитики", Новый ОписаниеТипов("Число"));
	ВыраженияЗаполнения.Колонки.Добавить("ВидАналитики", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов"));
	ВыраженияЗаполнения.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыраженияЗаполнения.Колонки.Добавить("Выражение", Новый ОписаниеТипов("Строка"));
	ВыраженияЗаполнения.Колонки.Добавить("Неоднозначно", Новый ОписаниеТипов("Булево"));
	
	ИсточникиЗаполненияАналитики = Новый Соответствие;
	ТипыИсточниковЗаполненияАналитик = Новый Соответствие;
	Если СхемаКомпоновкиДанных <> Неопределено
		И СхемаКомпоновкиДанных.НаборыДанных.Количество() <> 0 Тогда
		ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		Для каждого ПолеНабора Из ПоляНабора Цикл
			Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных")
				Или ТипЗнч(ПолеНабора) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПолеНабора.ТипЗначения) Тогда
				ИсточникиЗаполненияАналитики.Вставить(ПолеНабора.ПутьКДанным, ПолеНабора.ТипЗначения);
				ЗначениеДляСохранения = ТипыИсточниковЗаполненияАналитик.Получить(ПолеНабора.ТипЗначения);
				Если ЗначениеДляСохранения = Неопределено Тогда
					ЗначениеДляСохранения = Новый Массив;
				КонецЕсли;
				ЗначениеДляСохранения.Добавить(ПолеНабора.ПутьКДанным);
				ТипыИсточниковЗаполненияАналитик.Вставить(ПолеНабора.ТипЗначения, ЗначениеДляСохранения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОписаниеТиповАналитик = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыАналитик.ВыгрузитьКолонку("ВидАналитики"), "ТипЗначения");
	
	Для каждого СтрокаВидАналитики Из ВидыАналитик Цикл
		
		ВидАналитики = СтрокаВидАналитики.ВидАналитики;
		
		НоваяСтрока = ВыраженияЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВидАналитики);
		НоваяСтрока.ТипЗначения = ОписаниеТиповАналитик[ВидАналитики];
		
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоНомеру = "Аналитика" + СтрокаВидАналитики.НомерАналитики;
		
		ОднозначноПодходящееПоле = Новый Массив; // Поле, описание типов которого совпадает с описанием типов аналитики
		УсловноПодходящиеПоля = Новый Массив; // Поля, описание типов которых содержат типы аналитики
		
		Если ИсточникиЗаполненияАналитики[ПолеАналитикиПоНомеру] <> Неопределено Тогда
			ОднозначноПодходящееПоле.Добавить(ПолеАналитикиПоНомеру);
		Иначе
			// Попробуем подобрать поле заполнение аналитики "по типу"
			ОписаниеТиповАналитики = ОписаниеТиповАналитик[ВидАналитики];
			ИсточникЗаполненияАналитики = ТипыИсточниковЗаполненияАналитик.Получить(ОписаниеТиповАналитики);
			Если Не ИсточникЗаполненияАналитики = Неопределено Тогда
				ОднозначноПодходящееПоле = ИсточникЗаполненияАналитики;
			Иначе
				Для каждого ИсточникЗаполненияАналитики Из ИсточникиЗаполненияАналитики Цикл
					Для каждого Тип Из ИсточникЗаполненияАналитики.Значение.Типы() Цикл
						Если ОписаниеТиповАналитики.СодержитТип(Тип) Тогда
							УсловноПодходящиеПоля.Добавить(ИсточникЗаполненияАналитики.Ключ);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОднозначноПодходящееПоле.Количество() <> 0 Тогда
			Если ПроверятьТипЗначенияВВыражении Тогда
				НоваяСтрока.Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(ОднозначноПодходящееПоле[0],
					ВидАналитики);
			Иначе
				НоваяСтрока.Выражение = ОднозначноПодходящееПоле[0];
			КонецЕсли;
			НоваяСтрока.Неоднозначно = ОднозначноПодходящееПоле.Количество() > 1;
		ИначеЕсли УсловноПодходящиеПоля.Количество() <> 0 Тогда
			Если ПроверятьТипЗначенияВВыражении Тогда
				НоваяСтрока.Выражение = ВыражениеЗначенияАналитикиПоИсточникуИТипу(УсловноПодходящиеПоля[0],
					ВидАналитики);
			Иначе
				НоваяСтрока.Выражение = УсловноПодходящиеПоля[0];
			КонецЕсли;
			НоваяСтрока.Неоднозначно = УсловноПодходящиеПоля.Количество() > 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыраженияЗаполнения; 
	
КонецФункции

// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - 
// 	ИмяТаблицы - Строка - Описание
Процедура ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, ИмяТаблицы) Экспорт
	
	ВидыАналитики = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ВидыАналитики();
	
	Для каждого ВидАналитики Из ВидыАналитики Цикл
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ВидАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = ВидАналитики.Ссылка;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ЗначениеАналитики");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбораДанных.Использование = Истина;
		
		Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
		Оформление.Использование = Истина;
		Оформление.Значение = БюджетнаяОтчетностьКлиентСервер.ПредставлениеПрочейАналитикиБюджетирования(
			ВидАналитики, "Прочие", ВидАналитики.Представление);
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Использование = Истина;
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ЗначениеАналитики");
		
	КонецЦикла;
	
КонецПроцедуры


// Инициализирует компоновщик настроек правила получения фактических данных.
// 
// Параметры:
// 	Правило - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - Правило получения факта.
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов - Правило получения факта.
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения - Форма, содержащая параметр:
// 	  * АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища, содержащего схему компоновки получения фактических данных.
// 	НастройкаКомпоновки - НастройкиКомпоновкиДанных - настройки компоновки.
// 						- КомпоновщикНастроекКомпоновкиДанных - 
//
Процедура ИнициализироватьКомпоновщикНастроекПравила(Правило, ПараметрыЗаполненияАналитик, НастройкаКомпоновки) Экспорт
	
	Если Не ЗначениеЗаполнено(Правило.РазделИсточникаДанных) Или Не ЗначениеЗаполнено(Правило.ИсточникДанных) Тогда
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(Неопределено);
		Возврат;
	КонецЕсли;
	
	// Уточним настройки компоновщика, иначе после формирования "старого" бюджета из кэша возвращается модифицированная схема.
	Если Не ЗначениеЗаполнено(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		ТаблицаКорреспонденций = Неопределено;
		Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет
			И ТипЗнч(Правило.ИсточникДанных) = Тип("СправочникСсылка.НастройкиХозяйственныхОпераций")
			И ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам") Тогда
			ТаблицаКорреспонденций = ИсточникиДанныхСервер.ТаблицаКорреспонденцийРегистров(Правило.ИсточникДанных);
		КонецЕсли;
		СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило, Новый Структура("ВычисляемыеПоля"),, Истина, ТаблицаКорреспонденций);
		УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило);
		
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = 
			ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ПараметрыЗаполненияАналитик.УникальныйИдентификатор);
	КонецЕсли;
	
	Попытка
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	Исключение
		СобытиеЖР = НСтр("ru = 'Выполнение инициализации компоновщика настроек правила';
						|en = 'Initializing rule setting composer'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если НастройкаКомпоновки = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек = ИнициализированныйКомпоновщикПоУмолчанию(СхемаКомпоновкиДанных);
	Иначе
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаКомпоновки);
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	КонецЕсли;
	
КонецПроцедуры


// Заполняет настройки компоновщика настроек свойствами заполнения аналитик из правила.
// 
// Параметры:
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения - форма с реквизитами:
// 	 *КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных -
// 	 *АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища, содержащего схему получения факта.
// 	Правило - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - Правило получения факта.
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов -
// 			- СправочникОбъект.НефинансовыеПоказателиБюджетов -
// 	ВидыАналитик - См. БюджетированиеСервер.ВидыАналитик
//
Процедура ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Правило, ВидыАналитик) Экспорт
	
	ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Очистить();
	
	МассивВидовАналитик = Новый Массив;
	Для каждого ВидАналитики Из ВидыАналитик Цикл
		МассивВидовАналитик.Добавить(ВидАналитики.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивВидовАналитик, "ДополнительноеСвойство");
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		
		ВидАналитики = ВидыАналитик["ВидАналитики" + НомерАналитики];
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Добавить();
		СтрокаНастройки.НомерАналитики = НомерАналитики;
		СтрокаНастройки.ВидАналитики = ВидАналитики;
		СтрокаНастройки.ДополнительноеСвойство = ДополнительныеСвойства[ВидАналитики];
		СтрокаНастройки.ЗаполнятьУказаннымЗначением = Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики];
		СтрокаНастройки.ЗначениеАналитики = Правило["ЗначениеАналитики" + НомерАналитики];
		СтрокаНастройки.ВыражениеЗаполненияАналитики = Правило["ВыражениеЗаполненияАналитики" + НомерАналитики];
		
	КонецЦикла;
	
КонецПроцедуры


// Выполняет проверку настроек заполнения аналитики.
// 
// Параметры:
// 	НастройкиЗаполненияАналитики - ТаблицаФормы - Табличная часть формы, содержащая настройки заполнения аналитики.
// 	Отказ - Булево - Флаг ошибки при проверке.
// 	РежимНастройкиЗаполненияАналитики - Булево - флаг расширенной настройки заполнения аналитик.
//
Процедура ОбработкаПроверкиНастроекЗаполненияАналитики(НастройкиЗаполненияАналитики, Отказ, РежимНастройкиЗаполненияАналитики = Ложь) Экспорт
	
	Если Не РежимНастройкиЗаполненияАналитики Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Настройте заполнение аналитики ""%1""';
							|en = 'Set up population of the ""%1"" dimension'");
	ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
	
	Для каждого СтрокаНастройки Из НастройкиЗаполненияАналитики Цикл
		
		Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаНастройки.НетВДоступныхПолях И СтрокаНастройки.ВыражениеЗаполненияАналитики <> "" Тогда
			Продолжить;
		КонецЕсли;
			
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
		Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, Поле,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры


// Помещает настройки заполнения аналитик из настроек компоновщика формы в данные правила.
// 
// Параметры:
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения - форма, содержащая реквизиты:
//   *КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   *АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища схемы получения факта.
// 	Правило - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - правила получения факта.
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов -
// 			- СправочникОбъект.НефинансовыеПоказателиБюджетов -
//
Процедура ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Правило) Экспорт
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Правило["ЗначениеАналитики" + НомерАналитики] = Неопределено;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = Неопределено;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики] = Неопределено;
	КонецЦикла;
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		НомерАналитики = СтрокаНастройки.НомерАналитики;
		Правило["ЗначениеАналитики" + НомерАналитики] = СтрокаНастройки.ЗначениеАналитики;
		Правило["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] = СтрокаНастройки.ЗаполнятьУказаннымЗначением;
		Правило["ВыражениеЗаполненияАналитики" + НомерАналитики] = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки, КомпоновщикНастроек, ВыраженияСПредставлениямиХарактеристик, ОчищатьНедоступныеНастройки = Ложь)
	
	Если СтрокаНастройки.ЗаполнятьУказаннымЗначением Тогда
		СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
	КонецЕсли;
	
	Если СтрокаНастройки.ВыражениеЗаполненияАналитики = "" Тогда
		СтрокаНастройки.НетВДоступныхПолях = Ложь;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = "";
		Возврат;
	КонецЕсли;
	
	СтрокаНастройки.НетВДоступныхПолях = Ложь;
	
	МодифицированноеВыражение = ВыраженияСПредставлениямиХарактеристик.Получить(СтрокаНастройки.ВыражениеЗаполненияАналитики);
	Поле = Новый ПолеКомпоновкиДанных(МодифицированноеВыражение);
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
	Если ДоступноеПоле = Неопределено Тогда
		Если ОчищатьНедоступныеНастройки Тогда
			СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
		Иначе
			СтрокаНастройки.НетВДоступныхПолях = Истина;
		КонецЕсли;
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = СтрокаНастройки.ВыражениеЗаполненияАналитики;
	Иначе
		СтрокаНастройки.ПредставлениеВыраженияЗаполненияАналитики = ДоступноеПоле.Заголовок;
	КонецЕсли;
	
КонецПроцедуры


// Выполняет проверку корректности выражения заполнения аналитики
// 
// Параметры:
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения - Форма, содержащая реквизиты:
// 	 *АдресСхемыКомпоновкиДанных - Строка - Адрес временного хранилища, содержащий схему компоновки данных.
// 	 *КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек формы.
// 	ИдентификаторСтроки - Число - Идентификатор текущей строки аналитики.
//
Процедура ПроверитьВыражениеЗаполненияАналитикиПослеВыбора(ПараметрыЗаполненияАналитик, ИдентификаторСтроки) Экспорт
	
	СтрокаНастройки = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.НайтиПоИдентификатору(ИдентификаторСтроки);
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
	ПараметрыЗаполненияАналитик.КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных));
		
	МассивВыражений = Новый Массив;
	МассивВыражений.Добавить(СтрокаНастройки.ВыражениеЗаполненияАналитики);
	ВыраженияСПредставлениямиХарактеристик = РаботаСФормулами.ВыраженияСПредставлениямиХарактеристикДляОнлайнПроверки(
		МассивВыражений,
		СхемаКомпоновки);
	
	ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки,
		ПараметрыЗаполненияАналитик.КомпоновщикНастроек, ВыраженияСПредставлениямиХарактеристик);
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения - Форма с реквизитами:
// * НастройкиЗаполненияАналитики - ТаблицаЗначений -:
// ** ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - Вид аналитики.
// ** НомерАналитики - Число - Номер аналитики.
// ** ВыражениеЗаполненияАналитики - Строка - Выражение заполнения аналитики.
// ** ЗаполнятьУказаннымЗначением - Булево - Заполнять указанным значением.
// ** ЗначениеАналитики - ЛюбаяСсылка - Значение аналитики.
// ** ПредставлениеВыраженияЗаполненияАналитики - Строка - Представление выражения.
// ** НетВДоступныхПолях - Булево - Флаг отсутствия поля по указанному выражению в доступных полях.
// ** ДополнительноеСвойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
// 	Правило - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов -
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов -
// 			- СправочникОбъект.НефинансовыеПоказателиБюджетов - Объект, содержащий настройки заполнения аналитик.
// 	ОчищатьНедоступныеНастройки - Булево - Флаг необходимости очищать недоступные настройки.
Процедура ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Правило, ОчищатьНедоступныеНастройки = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
	Иначе
		СхемаКомпоновки = Неопределено;
	КонецЕсли;
	
	ВыраженияАналитик = Новый Массив;
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		Если ЗначениеЗаполнено(СтрокаНастройки.ВыражениеЗаполненияАналитики) Тогда
			ВыраженияАналитик.Добавить(СтрокаНастройки.ВыражениеЗаполненияАналитики);
		КонецЕсли;
	КонецЦикла;
	ВыраженияСПредставлениямиХарактеристик = РаботаСФормулами.ВыраженияСПредставлениямиХарактеристикДляОнлайнПроверки(
		ВыраженияАналитик,
		СхемаКомпоновки);
	
	Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
		ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки,
			ПараметрыЗаполненияАналитик.КомпоновщикНастроек,
			ВыраженияСПредставлениямиХарактеристик,
			ОчищатьНедоступныеНастройки);
	КонецЦикла;
	
КонецПроцедуры


// Устанавливает настройки заполнения аналитики по алгоритму.
// 
// Параметры:
// 	ПараметрыЗаполненияАналитик - ФормаКлиентскогоПриложения, Структура - форма или структура со свойствами:
// * АдресСхемыКомпоновкиДанных - Строка - адрес временного хранилища схемы компоновки.
// * КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек.
// * УникальныйИдентификатор - УникальныйИдентификатор - идентификатор формы.
// * НастройкиЗаполненияАналитики - ТаблицаЗначений - настройки заполнения аналитик:
// ** ВидАналитики - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - вид аналитики.
// ** НомерАналитики - Число - Номер аналитики.
// ** ВыражениеЗаполненияАналитики - Строка - Выражение заполнения аналитики.
// ** ЗаполнятьУказаннымЗначением - Булево - Заполнять указанным значением.
// ** ЗначениеАналитики - ЛюбаяСсылка - Значение аналитики.
// ** ПредставлениеВыраженияЗаполненияАналитики - Строка - Представление выражения.
// ** НетВДоступныхПолях - Булево - Флаг отсутствия поля по указанному выражению в доступных полях.
// ** ДополнительноеСвойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - ссылка на дополнительный реквизит.
// 	ВыраженияЗаполненияАналитики - См. БюджетированиеСервер.ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных
//
Процедура УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик, ВыраженияЗаполненияАналитики = Неопределено) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных) Тогда
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных);
		Если ВыраженияЗаполненияАналитики = Неопределено Тогда
			Если ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений") Тогда
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Скопировать(, "НомерАналитики, ВидАналитики");
			Иначе
				ВидыАналитик = ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики.Выгрузить(, "НомерАналитики, ВидАналитики");
			КонецЕсли;
			
			ВыраженияЗаполненияАналитики = ВыраженияЗаполненияАналитикиПоСхемеКомпоновкиДанных(СхемаКомпоновкиДанных, ВидыАналитик);
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'В источнике есть несколько подходящих вариантов заполнения аналитики ""%1"". Требуется ручной выбор.';
								|en = 'There are several suitable options for mapping the ""%1"" dimension in the source. Select manually.'");
		ШаблонПоля = "НастройкиЗаполненияАналитики[%1].ПредставлениеВыраженияЗаполненияАналитики";
		КонтекстФормы = Не ТипЗнч(ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики) = Тип("ТаблицаЗначений");
		
		МассивВыражений = Новый Массив;
		Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
			Отбор = Новый Структура("НомерАналитики, ВидАналитики");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНастройки);
			РезультатПоиска = ВыраженияЗаполненияАналитики.НайтиСтроки(Отбор)[0];
			
			Если ЗначениеЗаполнено(РезультатПоиска.Выражение) Тогда
				Если РезультатПоиска.Неоднозначно Тогда
					СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				Иначе
					СтрокаНастройки.ВыражениеЗаполненияАналитики = РезультатПоиска.Выражение;
				КонецЕсли;
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Ложь;
			Иначе
				СтрокаНастройки.ВыражениеЗаполненияАналитики = "";
				СтрокаНастройки.ЗаполнятьУказаннымЗначением = Истина;
			КонецЕсли;
			
			Если РезультатПоиска.Неоднозначно И КонтекстФормы Тогда
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаНастройки.ВидАналитики);
				Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПоля, СтрокаНастройки.ПолучитьИдентификатор());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле);
			КонецЕсли;
			
			МассивВыражений.Добавить(СтрокаНастройки.ВыражениеЗаполненияАналитики);
		КонецЦикла;
		
		ВыраженияСПредставлениямиХарактеристик = РаботаСФормулами.ВыраженияСПредставлениямиХарактеристикДляОнлайнПроверки(
			МассивВыражений,
			СхемаКомпоновкиДанных);
		
		Для каждого СтрокаНастройки Из ПараметрыЗаполненияАналитик.НастройкиЗаполненияАналитики Цикл
			ПроверитьВыражениеЗаполненияАналитики(СтрокаНастройки,
				ПараметрыЗаполненияАналитик.КомпоновщикНастроек, ВыраженияСПредставлениямиХарактеристик);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


// Переопределяет свойства некоторых полей у схемы компоновки данных в зависимости от дополнительных параметров правила.
// 
// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки.
// 	Правило - СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов -
// 			- СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов -
// 			- СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов -
// 			- СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов - Правило получения факта.
Процедура УстановитьСвойстваПолейДляНастройкиПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	Если СхемаКомпоновкиДанных = Неопределено
		ИЛИ СхемаКомпоновкиДанных.НаборыДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет
		Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		
		Счет = Правило.ИсточникДанных;
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ПолеГруппаСчет = ПоляНабораДанных.Найти("ГруппаСчет");
		Если ПолеГруппаСчет <> Неопределено Тогда
			РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Код, Наименование");
			ПолеГруппаСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
		КонецЕсли;
		
		ВидыКорСубконто = Неопределено;
		Если ТипЗнч(Правило.Ссылка) = Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов")
			И ЗначениеЗаполнено(Правило.КорСчет) Тогда
			
			ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
			ПолеГруппаКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет");
			Если ПолеГруппаКорСчет <> Неопределено Тогда
				РеквизитыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Правило.КорСчет, "Код, Наименование");
				ПолеГруппаКорСчет.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", РеквизитыСчета.Код, РеквизитыСчета.Наименование); 
			КонецЕсли;
			
			ПолеКорСчет = ПоляНабораДанных.Найти("ГруппаКорСчет.КорСчет");
			Если ПолеКорСчет <> Неопределено Тогда
				ПолеКорСчет.ОграничениеИспользования.Условие = Истина;
				ПолеКорСчет.ОграничениеИспользованияРеквизитов.Условие = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто);
		
	КонецЕсли;
	
	// Скроем служебные из списка полей, доступных для отбора
	СлужебныеПоля = ИсточникиДанныхПовтИсп.СлужебныеПоляМакетовРасчета();
	
	Для каждого ПолеНабора Из СхемаКомпоновкиДанных.НаборыДанных[0].Поля Цикл
		
		Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭтоПолеНедоступноеДляЗаполненияАналитики = Не ЗначениеЗаполнено(ПолеНабора.ТипЗначения);
		
		ПолеНабора.ОграничениеИспользования.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = ЭтоПолеНедоступноеДляЗаполненияАналитики;
		
		Если ПолеНабора.Поле = "Регистратор" И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Правило,
			"ПромежуточноеКэшированиеРезультатовРаботыПравил") Тогда
			
			ПромежуточноеКэширование = Правило.ПромежуточноеКэшированиеРезультатовРаботыПравил;
			
			ПолеНабора.ОграничениеИспользования.Поле = Ложь;
			ПолеНабора.ОграничениеИспользования.Условие = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Поле = Не ПромежуточноеКэширование;
			ПолеНабора.ОграничениеИспользованияРеквизитов.Условие = Не ПромежуточноеКэширование;
			
		ИначеЕсли Не СлужебныеПоля.Найти(ПолеНабора.Поле) = Неопределено Тогда
			
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаЗарезервированныхПараметров = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
		Если Не ИменаЗарезервированныхПараметров.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
			ПараметрКомпоновки.ОграничениеИспользования = Истина;
			ПараметрКомпоновки.ВключатьВДоступныеПоля = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто = Неопределено)
	
	ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	Для НомерСубконто = 1 По 3 Цикл
		УстановитьСвойстваПоляСубконто(НомерСубконто, Ложь, ПоляНабораДанных, ВидыСубконто);
		Если ВидыКорСубконто <> Неопределено Тогда
			УстановитьСвойстваПоляСубконто(НомерСубконто, Истина, ПоляНабораДанных, ВидыКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойстваПоляСубконто(НомерСубконто, КорСубконто, ПоляНабораДанных, ВидыСубконто)
	
	Если КорСубконто Тогда
		ИмяПоля = "КорСубконто" + НомерСубконто;
	Иначе
		ИмяПоля = "Субконто" + НомерСубконто;
	КонецЕсли;
	
	// Добавление ограничения на условие некорректно, так как в правилах могут быть настройки отбора по свойствам кор счета
	// даже при отсутствии указания самого кор счета в правиле
	ОграниченияИспользования = Новый Массив;
	ОграниченияИспользования.Добавить("Поле");
	ОграниченияИспользования.Добавить("Группировка");
	ОграниченияИспользования.Добавить("Порядок");
	
	Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
		Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ПолеНабораДанных.Поле <> ИмяПоля Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидСубконто = ВидыСубконто.Найти(НомерСубконто, "НомерСубконто");
		Если СтрокаВидСубконто <> Неопределено Тогда
			ПолеНабораДанных.ТипЗначения = СтрокаВидСубконто.ТипЗначения;
			ПолеНабораДанных.Заголовок = Строка(СтрокаВидСубконто.ВидСубконто);
		Иначе
			Для каждого Ограничение Из ОграниченияИспользования Цикл
				ПолеНабораДанных.ОграничениеИспользования[Ограничение] = Истина;
				ПолеНабораДанных.ОграничениеИспользованияРеквизитов[Ограничение] = Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление настроек заполнения аналитики.
//
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - 
Процедура УстановитьУсловноеНастроекЗаполненияАналитики(УсловноеОформление) Экспорт
	
	ДополнитьУсловноеОформлениеНастройкамиОтображенияАналитик(УсловноеОформление, "НастройкиЗаполненияАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиВыражениеЗаполненияАналитики");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиНетВДоступныхПолях");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	Оформление.Использование = Истина;
	Оформление.Значение = Ложь;
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗначениеАналитики");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Указанным значением';
								|en = 'Specified value'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
	// 
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.Использование = Истина;
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитики.ЗаполнятьУказаннымЗначением");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	
	Оформление = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	Оформление.Использование = Истина;
	Оформление.Значение = НСтр("ru = 'Из источника данных';
								|en = 'From data source'");
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("НастройкиЗаполненияАналитикиЗаполнятьУказаннымЗначением");
	
КонецПроцедуры


// Перезаполняет реквизиты правил получения факта по выбранным правилам получения данных.
// 
// Параметры:
// 	Объект - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов -
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов - Правило.
//
Процедура ЗаполнитьРеквизитыОбъектаНастроекЗаполненияАналитики(Объект) Экспорт
	
	ПараметрыЗаполненияАналитик = ШаблонПараметровЗаполненияАналитик();
	ВидыАналитик = ВидыАналитик(Объект);
	
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ПараметрыЗаполненияАналитик.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(Объект.СхемаИсточникаДанных.Получить());
	КонецЕсли;
	
	ИнициализироватьКомпоновщикНастроекПравила(Объект, ПараметрыЗаполненияАналитик, Неопределено); 
	ЗаполнитьНастройкиЗаполненияАналитикиПоПравилу(ПараметрыЗаполненияАналитик, Объект, ВидыАналитик);
	ПроверитьДоступностьПолейЗаполненияАналитики(ПараметрыЗаполненияАналитик, Объект);
	УстановитьНастройкиЗаполненияАналитикиАвтоматически(ПараметрыЗаполненияАналитик);
	ПоместитьНастройкиЗаполненияАналитикиВПравило(ПараметрыЗаполненияАналитик, Объект);
	
КонецПроцедуры


// Заполняет реквизиты хешей схемы и настроек компоновки данных перед записью правил.
// 
// Параметры:
// 	Объект - СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов -
// 			- СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов - Правило.
Процедура ЗаполнитьРеквизитыХешейНастроекИСхемы(Объект) Экспорт
	
	// Генерация и проверка уникальности хеша для настроек
	НастройкиКД = Неопределено;
	Если Не Объект.ДополнительныеСвойства.Свойство("НастройкиКД", НастройкиКД) Тогда
		НастройкиКД = Объект.КомпоновщикНастроек.Получить();
	КонецЕсли;
	Объект.ХешНастроек = ХешНастроекСПроверкойУникальности(Объект, НастройкиКД);

	// Генерация и проверка уникальности хеша для произвольной схемы
	Если Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		СхемаКД = Объект.СхемаИсточникаДанных.Получить();
		Объект.ХешСхемыКомпоновкиДанных = ХешНастроекСПроверкойУникальности(Объект, СхемаКД);
	Иначе
		Объект.ХешСхемыКомпоновкиДанных = "";
	КонецЕсли;
	
КонецПроцедуры


// Возвращает хеш настроек.
// 
// Параметры:
// 	Объект - СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов, СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов - Описание
// 	Настройки - СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных - схема или настройки.
// Возвращаемое значение:
// 	Строка - Хеш.
Функция ХешНастроекСПроверкойУникальности(Объект, Настройки)
	
	ЭтоПравилоПолученияФактаПоСтатьямБюджетов = Ложь;
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов";
		ЭтоПравилоПолученияФактаПоСтатьямБюджетов = Истина;
	КонецЕсли;
	
	ЭтоНастройкиКомпоновкиДанных = ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных");
	
	Регламентированный = Ложь;
	Международный = Ложь;
	//++ Локализация
	Регламентированный = Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет;
	//-- Локализация

	//++ НЕ УТКА
	Международный = Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
	//-- НЕ УТКА
	
	// Проверка наличия идентичного хеша у других объектов и его модификация
	ХешПовторяетсяДляРазныхНастроек = Истина;
	
	Пока ХешПовторяетсяДляРазныхНастроек Цикл 
		Если ЭтоНастройкиКомпоновкиДанных Тогда
			// Отбор не хранится, но влияет на уникальность хеша для статей
			// В произвольных правилах источник данных - информационное поле и не задается пользователем.
			Если Не Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
				ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ИсточникДанных", Объект.ИсточникДанных);
				Если Регламентированный Или Международный Тогда
					Если ЭтоПравилоПолученияФактаПоСтатьямБюджетов Тогда
						ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ГруппаКорСчет.КорСчет", Объект.КорСчет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(Настройки);
		ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
			
		// Получается не из кеша, т.к. далее в коде удаляется поле "Ссылка" в доп. настройках.
		Если ЭтоНастройкиКомпоновкиДанных Тогда
			НастройкиСИдентичнымХешем = ИсточникиДанныхСервер.ПолучитьХранимыеНастройкиСправочника(ИмяСправочникаИсточника, ХешНастроек, Истина);
		Иначе
			НастройкиСИдентичнымХешем = ИсточникиДанныхСервер.ПолучитьХранимыйМакетСправочника(ИмяСправочникаИсточника, ХешНастроек, Истина);
		КонецЕсли;
		
		// Нет записанных объектов с идентичным хешем
		Если НастройкиСИдентичнымХешем = Неопределено Тогда
			ХешПовторяетсяДляРазныхНастроек = Ложь;
		Иначе
			Если ЭтоНастройкиКомпоновкиДанных Тогда
				ДополнительныеСвойства = НастройкиСИдентичнымХешем.ДополнительныеСвойства; // Структура
			Иначе
				ДополнительныеСвойства = НастройкиСИдентичнымХешем.НастройкиПоУмолчанию.ДополнительныеСвойства;
			КонецЕсли;
		
			// Найден только текущий объект
			ХешПовторяетсяДляРазныхНастроек = Не Объект.Ссылка = ДополнительныеСвойства.Ссылка;
			
			// При сравнении настроек, свойство ссылки не требуется
			ДополнительныеСвойства.Удалить("Ссылка");
			
			Если ЭтоНастройкиКомпоновкиДанных Тогда
				// Отбор не хранится, но влияет на уникальность хеша для статей
				// В произвольных правилах источник данных - информационное поле и не задается пользователем.
				Если Не Объект.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
					ФинансоваяОтчетностьСервер.НовыйОтбор(НастройкиСИдентичнымХешем.Отбор, "ИсточникДанных", Объект.ИсточникДанных);
					Если Регламентированный Или Международный Тогда
						Если ЭтоПравилоПолученияФактаПоСтатьямБюджетов Тогда
							ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ГруппаКорСчет.КорСчет", Объект.КорСчет);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		// В базе данных есть объекты с идентичным хешем. Проверим идентичность настроек
		Если ХешПовторяетсяДляРазныхНастроек Тогда
			СериализованныеНастройкиСИдентичнымХешем = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиСИдентичнымХешем);
			
			Если СериализованныеНастройки <> СериализованныеНастройкиСИдентичнымХешем Тогда
				МодификаторХеша = Неопределено;
				Если ЭтоНастройкиКомпоновкиДанных Тогда
					ДополнительныеСвойства = Настройки.ДополнительныеСвойства;
				Иначе
					ДополнительныеСвойства = Настройки.НастройкиПоУмолчанию.ДополнительныеСвойства;
				КонецЕсли;
				
				Если Не ДополнительныеСвойства.Свойство("МодификаторХеша", МодификаторХеша) Тогда
					ДополнительныеСвойства.Вставить("МодификаторХеша");
				КонецЕсли;
				
				Если МодификаторХеша = Неопределено Тогда
					МодификаторХеша = 1;
				Иначе
					МодификаторХеша = МодификаторХеша + 1;
				КонецЕсли;
				
				Если МодификаторХеша = 10 Тогда
					ТекстОшибки = НСтр("ru = 'Превышено допустимое количество итераций проверки хеша настроек.
						|Выполнение прервано для предотвращения зацикливания механизма записи объекта.';
						|en = 'The maximum number of check iterations of settings hash is exceeded.
						|Execution is aborted to prevent looping when writing the object.'");
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
				ДополнительныеСвойства.МодификаторХеша = МодификаторХеша;
				
				// Обновим хеш настроек с учетом модификатора
				СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(Настройки);
				ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
			Иначе 
				ХешПовторяетсяДляРазныхНастроек = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ХешНастроек;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям


// Описание
// 
// Параметры:
// 	ТаблицаДанныхПоВидуБюджета - См. ШаблонТаблицыДанныхПоВидуБюджета
// 	ИсточникДанных - Структура - Структура со свойствами:
// 	 *ТипИсточника - ПеречислениеСсылка.ТипыИсточниковДанныхБюджетирования - тип источника.
// 	 *Объекты - Массив из СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов -
// 	 *ПредполагаетФактическиеДанные - Строка - Признак необходимости получения факта по источнику в зависимости от настроек.
// 	 *Идентификатор - Строка - Идентификатор источника данных.
// 	Параметры - Структура - Описание:
// * ВалютаОтчета - СправочникСсылка.Валюты -
// * ФункциональнаяВалюта - ПеречислениеСсылка.ВидыУчетаВФункциональнойВалюте -
// * ВалютаМеждународ - СправочникСсылка.Валюты -
// * Период - СтандартныйПериод -
// * Периодичность - ПеречислениеСсылка.Периодичность, Неопределено -
// * ОстаткиТолькоНаНачалоПериода - Булево -
// * ВозвращатьУпрИРеглСуммы - Булево -
// * ПоПравиламПолученияДанных - Булево -
// * Показатели - Структура -:
// ** Количество - Произвольный -
// ** Сумма - Произвольный -
// * ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево -
// * ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// * ПоОрганизациям - Булево -
// * ПоПодразделениям - Булево -
// * ПоРегистратору - Булево -
// * ДополнительныйОтбор - Структура -:
// ** Ключ - Произвольный -
// ** Значение - Произвольный -
// 	ПараметрыДанных - Структура - Описание
Процедура ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил,
			"ПромежуточноеКэшированиеРезультатовРаботыПравил",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		СтатьиБюджетов = Новый СписокЗначений;
		СтатьиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", СтатьиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
						И СценарийОтчетаФактическиеДанные);
	ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
						И СценарийОтчетаИсполнениеБюджета);
	
	СписокТипов = Новый СписокЗначений;
	Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяФакт Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил, ПараметрыПоИсточнику,, Ложь);
	
	Для каждого Строка Из ФактПоСтатьямБюджетов Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока["ИД_" + "Источника"] = ИсточникДанных.Идентификатор;
		НоваяСтрока.СуммаПриход = Строка.Сумма;
		НоваяСтрока.СуммаВалПриход = Строка.СуммаВВалюте;
		НоваяСтрока.КоличествоПриход = Строка.Количество;
	КонецЦикла;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ТаблицаДанныхПоВидуБюджета - См. ШаблонТаблицыДанныхПоВидуБюджета
// 	ИсточникДанных - Структура - Структура со свойствами:
// 	 *ТипИсточника - ПеречислениеСсылка.ТипыИсточниковДанныхБюджетирования - тип источника.
// 	 *Объекты - Массив из СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов -
// 	 *ПредполагаетФактическиеДанные - Строка - Признак необходимости получения факта по источнику в зависимости от настроек.
// 	 *Идентификатор - Строка - Идентификатор источника данных.
// 	Параметры - Структура - Описание:
// * ВалютаОтчета - СправочникСсылка.Валюты -
// * ВалютаУпр - СправочникСсылка.Валюты -
// * ВалютаРегл - СправочникСсылка.Валюты -
// * ВалютаМеждународ - СправочникСсылка.Валюты -
// * Период - СтандартныйПериод -
// * Периодичность - ПеречислениеСсылка.Периодичность, Неопределено -
// * ОстаткиТолькоНаНачалоПериода - Булево -
// * ВозвращатьУпрИРеглСуммы - Булево -
// * ПоПравиламПолученияДанных - Булево -
// * Показатели - Структура -:
// ** Количество - Произвольный -
// ** Сумма - Произвольный -
// * ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево -
// * ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// * ПоОрганизациям - Булево -
// * ПоПодразделениям - Булево -
// * ПоРегистратору - Булево -
// * ДополнительныйОтбор - Структура -:
// ** Ключ - Произвольный -
// ** Значение - Произвольный -
// 	ПараметрыДанных - Структура - Описание
Процедура ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		ПоказателиБюджетов = Новый СписокЗначений;
		ПоказателиБюджетов.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
			ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
				И  СценарийОтчетаФактическиеДанные);
	ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
			ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
				И  СценарийОтчетаИсполнениеБюджета);
	
	СписокТипов = Новый СписокЗначений;
	Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяФакт Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные);
	КонецЕсли;
	Если ПредполагаетсяИсполнениеБюджета Тогда
		СписокТипов.Добавить(Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета);
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ТипПравила", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ФактПоПоказателямБюджетов = ФактПоПоказателямБюджетов(ОтборПравил, ПараметрыПоИсточнику);
	
	Сценарии = СценарииСУчетомОтбора(ПараметрыПоИсточнику.ДополнительныйОтбор);
	Если Сценарии.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определены сценарии источника данных';
								|en = 'Data source scenarios are not determined'")
	КонецЕсли;
	
	СтрокиИсполнения = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ИсполнениеБюджета));
	СтрокиФактическихДанных = ФактПоПоказателямБюджетов.НайтиСтроки(Новый Структура("Сценарий", Справочники.Сценарии.ФактическиеДанные));
	
	Для каждого СтрокаСценарии Из Сценарии Цикл
		Если СтрокаСценарии.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
			ТаблицаДобавления = СтрокиИсполнения;
		Иначе
			ТаблицаДобавления = СтрокиФактическихДанных;
		КонецЕсли;
		Для каждого СтрокаФакт Из ТаблицаДобавления Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока.Сценарий = СтрокаСценарии.Сценарий;
			НоваяСтрока["ИД_" + "Источника"] = ИсточникДанных.Идентификатор;
			
			Если ЗначениеЗаполнено(НоваяСтрока.СтатьяБюджетов) Тогда //целевой показатель
				НоваяСтрока.СуммаПриход = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВалПриход = СтрокаФакт.СуммаВВалюте;
				НоваяСтрока.КоличествоПриход = СтрокаФакт.Количество;
			Иначе
				НоваяСтрока.СуммаНачальныйОстаток = СтрокаФакт.Сумма;
				НоваяСтрока.СуммаВалНачальныйОстаток = СтрокаФакт.СуммаВВалюте;
				НоваяСтрока.КоличествоНачальныйОстаток = СтрокаФакт.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Сценарии.Найти(Справочники.Сценарии.ФактическиеДанные) <> Неопределено
		ИЛИ Сценарии.Найти(Справочники.Сценарии.ИсполнениеБюджета) <> Неопределено Тогда
		ФактПоСтатьямБюджетов = ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, ПараметрыПоИсточнику, Ложь);
		Для каждого СтрокаФакт Из ФактПоСтатьямБюджетов Цикл
			НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаФакт);
			НоваяСтрока["ИД_" + "Источника"] = ИсточникДанных.Идентификатор;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных);
	
	ОтборПравил = Новый НастройкиКомпоновкиДанных;
	Если ИсточникДанных.Объекты <> Неопределено Тогда
		НефинансовыеПоказатели = Новый СписокЗначений;
		НефинансовыеПоказатели.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			ОтборПравил, 
			"НефинансовыйПоказатель", 
			НефинансовыеПоказатели, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
	ЗначенияНефинансовыхПоказателей = ЗначенияНефинансовыхПоказателей(ОтборПравил, ПараметрыПоИсточнику);
	
	КопияТаблицаДанныхПоВидуБюджета = ТаблицаДанныхПоВидуБюджета.СкопироватьКолонки();
	ПеренестиЗначенияНФПВОбщуюТаблицу(ЗначенияНефинансовыхПоказателей, ИсточникДанных, Параметры, ПараметрыПоИсточнику, КопияТаблицаДанныхПоВидуБюджета);
	
	ДанныеКурсовСценария = Новый Структура;
	ДанныеКурсовСценария.Вставить("ГраницаФактДанных", ПараметрыДанных.ГраницаФактДанных);
	Если ПараметрыДанных.Свойство("Сценарий") И ЗначениеЗаполнено(ПараметрыДанных.Сценарий) Тогда
		ДанныеКурсовСценария.Вставить("ТаблицаКурсовСценария", Справочники.Сценарии.ТаблицаКурсовСценария(ПараметрыДанных.Сценарий, , ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода));
	КонецЕсли;
	
	ПоляПересчета = Новый Массив;
	ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
		"ЗначениеПоказателя", "СуммаВФункциональнойВалюте", "ЗначениеПоказателя", "ЗначениеПоказателяВВалюте"));
	ПересчитатьТаблицуДанныхВВалюту(КопияТаблицаДанныхПоВидуБюджета, Параметры.ВалютаОтчета, Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл, ПоляПересчета, ДанныеКурсовСценария);
	
	Для каждого Строка Из КопияТаблицаДанныхПоВидуБюджета Цикл
		НоваяСтрока = ТаблицаДанныхПоВидуБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ЗначенияНефинансовыхПоказателей - См. БюджетированиеСервер.ЗначенияНефинансовыхПоказателей
// 	ИсточникДанных - СтрокаТаблицыЗначений - Описание истиочника данных:
// 	*Идентификатор - Строка - Идентификатор источника.
// 	*ВыражениеПериод - Строка - Выражение периода.
// 	*ВыражениеПериодГраница - Строка - Выражение границы периода.
// 	*ПоказательЗависимогоИсточникаДанных - СправочникСсылка.ПоказателиБюджетов - показатель.
// 	Параметры - См. БюджетированиеСервер.ШаблонПараметровПолученияФакта
// 	ПараметрыПоИсточнику - См. ПараметрыПоИсточникуДанных
// 	ТаблицаДанныхПоВидуБюджета - См. ШаблонТаблицыДанныхПоВидуБюджета
//
Процедура ПеренестиЗначенияНФПВОбщуюТаблицу(Знач ЗначенияНефинансовыхПоказателей, Знач ИсточникДанных, Знач Параметры, Знач ПараметрыПоИсточнику, Знач ТаблицаДанныхПоВидуБюджета)
	
	Перем ЗначенияКолонокПоУмолчанию, Строка;
	
	// Модифицируем структуру временной таблицы значений и перенесем в общую
	// Пересчет данных здесь производиться не будет.
	ЗначенияКолонокПоУмолчанию = Новый Структура;
	ЗначенияКолонокПоУмолчанию.Вставить("ИД_" + "Источника", ИсточникДанных.Идентификатор);
	ЗначенияКолонокПоУмолчанию.Вставить("Валюта", ПараметрыПоИсточнику.ВалютаОтчета);
	
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаРасход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("СуммаВалРасход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоНачальныйОстаток", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоПриход", 0);
	ЗначенияКолонокПоУмолчанию.Вставить("КоличествоРасход", 0);
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ЗначенияНефинансовыхПоказателей.Колонки.Период.Имя = "ПериодЗамененный";
		ЗначенияНефинансовыхПоказателей.Колонки.ПериодУстановки.Имя = "Период";
	КонецЕсли;
	
	ЗначенияНефинансовыхПоказателей.Колонки.Валюта.Имя = "ВалютаХранения";
	
	ЗначенияНефинансовыхПоказателей.Колонки.Добавить("ПериодКурса");
	ОбщегоНазначенияУТКлиентСервер.СкопироватьЗначенияИзКолонкиВКолонку(ЗначенияНефинансовыхПоказателей, "Период", "ПериодКурса"); 
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ЗначенияНефинансовыхПоказателей, ТаблицаДанныхПоВидуБюджета, ЗначенияКолонокПоУмолчанию);
	
	Для каждого Строка Из ТаблицаДанныхПоВидуБюджета Цикл
		Строка.ИндексНФП = ТаблицаДанныхПоВидуБюджета.Индекс(Строка);
		
		// Уточним данные для будущего пересчета по курсам валют
		Если НЕ Строка.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный Тогда
			Строка.ВалютаХранения = Неопределено;
			Строка.Валюта = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанныхПоВидуБюджета.Колонки.Добавить("СуммаВФункциональнойВалюте", Новый ОписаниеТипов("Число"));

КонецПроцедуры


// Параметры, уточненные по источнику данных.
// 
// Параметры:
// 	Параметры - Структура - Описание:
// 	*ВалютаОтчета - СправочникСсылка.Валюты - Валюта отчета или документа.
// 	*ВалютаУпр - СправочникСсылка.Валюты - Валюта управленческого учета.
// 	*ВалютаРегл - СправочникСсылка.Валюты - Валюта регламентированного учета.
// 	*ВалютаМеждународ - СправочникСсылка.Валюты - Валюта международного учета.
// 	*Период - СтандартныйПериод - Период отчета или документа.
// 	*Периодичность - ПеречислениеСсылка.Периодичность - Периодичность данных.
// 	*ОстаткиТолькоНаНачалоПериода - Булево - Флаг получения остатков только на начало периода.
// 	*ВозвращатьУпрИРеглСуммы - Булево -
// 	*ПоПравиламПолученияДанных - Булево -
// 	*Показатели - Структура -:
// 	**Количество - Произвольный -
// 	**Сумма - Произвольный -
// 	*ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево -
// 	*ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	*ПоОрганизациям - Булево -
// 	*ПоПодразделениям - Булево -
// 	*ПоРегистратору - Булево -
// 	*ДополнительныйОтбор - Структура -:
// 	**Ключ - Произвольный - 
// 	**Значение - Произвольный -
// 	ИсточникДанных - СтрокаТаблицыЗначений, Структура - Описание источника данных:
// 	*ТипИсточника - ПеречислениеСсылка.ТипыИсточниковДанныхБюджетирования -
// 	*Объекты - Массив из СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов, СправочникСсылка.НефинансовыеПоказателиБюджетов -
// 	*ПредполагаетФактическиеДанные - Строка - 
// 	*Идентификатор - Строка - Идентификатор источника.
// 	ПараметрыДанных - Структура - Описание
// 	
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	*ВалютаОтчета - СправочникСсылка.Валюты - Валюта отчета или документа.
// 	*ВалютаУпр - СправочникСсылка.Валюты - Валюта управленческого учета.
// 	*ВалютаРегл - СправочникСсылка.Валюты - Валюта регламентированного учета.
// 	*ВалютаМеждународ - СправочникСсылка.Валюты - Валюта международного учета.
// 	*Период - СтандартныйПериод - Период отчета или документа.
// 	*Периодичность - ПеречислениеСсылка.Периодичность - Периодичность данных.
// 	*ОстаткиТолькоНаНачалоПериода - Булево - Флаг получения остатков только на начало периода.
// 	*ВозвращатьУпрИРеглСуммы - Булево -
// 	*ПоПравиламПолученияДанных - Булево -
// 	*Показатели - Структура -:
// 	**Количество - Произвольный -
// 	**Сумма - Произвольный -
// 	*ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево -
// 	*ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	*ПоОрганизациям - Булево -
// 	*ПоПодразделениям - Булево -
// 	*ПоРегистратору - Булево -
// 	*ДополнительныйОтбор - Структура -:
// 	**Ключ - Произвольный - 
// 	**Значение - Произвольный -
// 	*ГраницаФактДанных - Дата - Граница фактических данных.
// 	*ВыражениеНачалоПериода - Строка -
// 	*ВыражениеКонецПериода - Строка - 
// 	*ВыражениеПериодаГруппировки - Строка - 
Функция ПараметрыПоИсточникуДанных(Параметры, ИсточникДанных, ПараметрыДанных)
	
	ПараметрыПоИсточнику = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
	
	ПараметрыПоИсточнику.Вставить("ВыражениеНачалоПериода", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеНачалоПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеКонецПериода", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеКонецПериода));
	ПараметрыПоИсточнику.Вставить("ВыражениеПериодаГруппировки", ПреобразоватьВВыражениеСКД(ИсточникДанных.ВыражениеПериодаГруппировки));
	ПараметрыПоИсточнику.Вставить("ГраницаФактДанных", ПараметрыДанных.ГраницаФактДанных);
	
	ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(ИсточникДанных.ДополнительныйОтбор.Отбор,
		ДополнительныйОтбор.Отбор);
	Если ДополнительныйОтбор <> Неопределено И ПараметрыДанных <> Неопределено Тогда
		БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводом(ДополнительныйОтбор, ПараметрыДанных);
	КонецЕсли;
	ПараметрыПоИсточнику.ДополнительныйОтбор = ДополнительныйОтбор;
	
	Возврат ПараметрыПоИсточнику;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ВалютаОтчета - СправочникСсылка.Валюты - Валюта отчета или документа.
// 	Период - СтандартныйПериод - Период отчета или документа.
// 	Периодичность - ПеречислениеСсылка.Периодичность - Периодичность.
// 	ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов - Виды аналитик.
// 	ПоОрганизациям - Булево - Флаг получения данных в разрезе организаций.
// 	ПоПодразделениям - Булево - Флаг получения данных в разрезе подразделений.
// 	РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования - режим получения данных.
// Возвращаемое значение:
// 	Структура - См. БюджетированиеСервер.ШаблонПараметровПолученияФакта
Функция ПараметрыПолученияФактаПоВидуБюджета(ВидБюджета, ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных)
	
	Параметры = ШаблонПараметровПолученияФакта();
	
	Параметры.ВалютаОтчета = ВалютаОтчета;
	Параметры.Период = Период;
	Параметры.Периодичность = Периодичность;
	Если ВидыАналитик <> Неопределено Тогда
		Параметры.Вставить("ВидыАналитик", ВидыАналитик);
	КонецЕсли;
	Параметры.ПоОрганизациям = ПоОрганизациям;
	Параметры.ПоПодразделениям = ПоПодразделениям;
	Параметры.ОстаткиТолькоНаНачалоПериода = Истина;
	Параметры.РежимПолученияДанных = РежимПолученияДанных;
	Если ЗначениеЗаполнено(ВидБюджета) Тогда
		Параметры.ФункциональнаяВалюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "Владелец.ФункциональнаяВалюта");
	Иначе
		Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр;
	КонецЕсли;
	
	// В бюджетных отчетах (экземплярах бюджетов) весь хранимый факт получается отдельно (кэшируемые СКД),
	// для лимитов хранимый факт также не используется (т.к. правила с типом исполнение бюджета не поддерживают хранимый факт).
	Параметры.ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом = Ложь;
	
	Возврат Параметры;
	
КонецФункции

Функция ШаблонТаблицыФактаПоПоказателямБюджетов(Параметры)
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоПравиламПолученияДанных Тогда
		ТаблицаФакта.Колонки.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		ОписаниеТиповИсточникДанных = Новый ОписаниеТипов(
				"ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, 
				//++ НЕ УТКА
				|ПланСчетовСсылка.Международный,
				//-- НЕ УТКА

				//++ Локализация
				|ПланСчетовСсылка.Хозрасчетный,
				//-- Локализация
				|Строка");
		ТаблицаФакта.Колонки.Добавить("ИсточникДанных", ОписаниеТиповИсточникДанных);
		
		ТаблицаФакта.Колонки.Добавить("ТипИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИтогов"));
		ТаблицаФакта.Колонки.Добавить("Отбор", Новый ОписаниеТипов("Строка"));
		
		ТаблицаФакта.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов"));
		
	КонецЕсли;
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Если Параметры.Периодичность <> Неопределено Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
		И Параметры.ЕстьПериодичностьСекунда Тогда
		ТаблицаФакта.Колонки.Добавить("ПериодСекунда",
			Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	КонецЕсли;
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		ТаблицаФакта.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ТипСумма = Новый ОписаниеТипов(ТипЧисло, "Null");
		
		ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
		ТаблицаФакта.Колонки.Добавить("Сумма", ТипЧисло);
		
		ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВВалюте", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		
		Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
			ТаблицаФакта.Колонки.Добавить("СуммаУпр", ТипЧисло);
			ТаблицаФакта.Колонки.Добавить("СуммаРегл", ТипЧисло);
		КонецЕсли;
		
		ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВВалютеХранения", ТипЧисло);
		ТаблицаФакта.Колонки.Добавить("ВалютаФункциональная", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаФакта.Колонки.Добавить("СуммаВФункциональнойВалюте", ТипСумма);
		
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции


// Возвращает шаблон таблицы значений нефинансовых показателей.
// 
// Параметры:
// 	Параметры - Структура - Структура со свойствами:
// 	*ПоОрганизациям - Булево - Флаг получения данных в разрезе организаций.
// 	*ПоПодразделениям - Булево - Флаг получения данных в разрезе подразделений.
// 	*ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов - виды аналитик.
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений с колонками:
// * НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов - Нефинансовый показатель
// * ВидПоказателя - ПеречислениеСсылка.ВидыНефинансовыхПоказателей - вид показателя.
// * Организация - СправочникСсылка.Организации - организация.
// * Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
// * Сценарий - СправочникСсылка.Сценарии - сценарий.
// * Валюта - СправочникСсылка.Валюты - валюта.
// * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения - единица измерения количественных значений.
// * Регистратор - ДокументСсылка - Регистратор.
// * Период - Дата - Период.
// * ПериодУстановки - Дата - Период установки значений.
// * НомерПодпериода - Число - Номер подпериода.
// * ЗначениеПоказателя - Число - Значение.
Функция ШаблонТаблицыЗначенийНефинансовыхПоказателей(Параметры) Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаЗначений.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНефинансовыхПоказателей"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаЗначений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаЗначений.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	ОписаниеТиповАналитики = ВсеТипыАналитик();
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаЗначений.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики); 
		ТаблицаЗначений.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаЗначений.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаЗначений.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	
	ТаблицаЗначений.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("ПериодУстановки", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаЗначений.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	ТаблицаЗначений.Колонки.Добавить("ЗначениеПоказателя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает таблицу фактических данных, получаемых из бюджетного кэша
//
// Параметры:
//  Параметры - Структура - структура параметров получения факта, в том числе:
//   * РежимПолученияДанных - ПеречислениеСсылка.РежимПолученияДанныхБюджетирования
//   * ДействующиеЛимиты - ТаблицаЗначений
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица факта из колонок, в том числе:
//   * НачалоПериода - Дата - начало периода
//   * КонецПериода - Дата - конец периода
// 
Функция ФактСтатьиБюджетовХранимый(Параметры) Экспорт
	
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ХранимыеОборотыПоСтатьямБюджетов");
	Если Параметры.РежимПолученияДанных = Перечисления.РежимПолученияДанныхБюджетирования.Все Тогда
		Для Каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда
				Набор.Запрос = СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписейВоВсемЗапросе(Набор.Запрос, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для Каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ЗначениеЗаполнено(Набор.Запрос) Тогда
			ПараметрыВыражения = ШаблонПараметровПоляАналитикиСУсловиемПоКоличествуВидовАналитики();
			ПараметрыВыражения.ВыражениеКоличествоИспользуемыхАналитик = "ОборотыБюджетов.СтатьяБюджетов.КоличествоИспользуемыхАналитик";
			ПараметрыВыражения.ВыражениеЗначенияАналитикиБезИндекса = "ОборотыБюджетов.Аналитика";
			
			Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
				Набор.Запрос = СтрЗаменить(Набор.Запрос, "&ВыражениеАналитика" + НомерАналитики,
					ТекстПоляАналитикиСУсловиемПоКоличествуВидовАналитики(ПараметрыВыражения, НомерАналитики));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	Если Параметры.Свойство("ДействующиеЛимиты") И ТипЗнч(Параметры.ДействующиеЛимиты) = Тип("ТаблицаЗначений") Тогда
		
		ВнешниеНаборыДанных.Вставить("ДействующиеЛимиты", Параметры.ДействующиеЛимиты);
		
		Для Каждого Набор Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Если ЗначениеЗаполнено(Набор.Запрос) Тогда
				Набор.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(Набор.Запрос, "&НачалоПериода",
					"НачалоПериода", , Истина);
				Набор.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(Набор.Запрос, "&КонецПериода", "КонецПериода",
					, Истина);
				ФинансоваяОтчетностьСервер.НовоеПолеНабора(Набор, "НачалоПериода", "НачалоПериода", ,
					Параметры.ДействующиеЛимиты.Колонки.НачалоПериода.ТипЗначения);
				ФинансоваяОтчетностьСервер.НовоеПолеНабора(Набор, "КонецПериода", "КонецПериода", ,
					Параметры.ДействующиеЛимиты.Колонки.КонецПериода.ТипЗначения);
			КонецЕсли;
		КонецЦикла;

		НДДействующиеЛимиты = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных, Тип(
			"НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДействующиеЛимиты");
		Для Каждого Колонка Из Параметры.ДействующиеЛимиты.Колонки Цикл
			ФинансоваяОтчетностьСервер.НовоеПолеНабора(НДДействующиеЛимиты, Колонка.Имя, Колонка.Имя,
				Колонка.Заголовок, Колонка.ТипЗначения);
		КонецЦикла;

		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СхемаКомпоновкиДанных, "ДействующиеЛимиты", "Факт",
			"СтатьяБюджетов", "СтатьяБюджетов");
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СхемаКомпоновкиДанных, "ДействующиеЛимиты", "Факт",
			"НачалоПериода", "НачалоПериода", "НачалоПериода");
		КомпоновкаДанныхСервер.ДобавитьСвязьНаборовДанных(СхемаКомпоновкиДанных, "ДействующиеЛимиты", "Факт",
			"КонецПериода", "КонецПериода", "КонецПериода");
		
	КонецЕсли;
	
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	
	Если Параметры.Свойство("ДействующиеЛимиты") Тогда
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета)");
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий",
			"ВЫБОР КОГДА Правило.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) ТОГДА ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КОНЕЦ");
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "Сценарий", Справочники.Сценарии.ФактическиеДанные);
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	ДобавитьПолеГруппировки(Настройки, "Правило");
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ПолеАналитикиПоНомеру = "Аналитика" + НомерАналитики;
		ДобавитьПолеГруппировки(Настройки, ПолеАналитикиПоНомеру);
	КонецЦикла;
	
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Не Параметры.Свойство("ДействующиеЛимиты") Тогда
		
		ПараметрСтандартныйПериод = Параметры.Период; // СтандартныйПериод -
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода", ПараметрСтандартныйПериод.ДатаНачала);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода", ПараметрСтандартныйПериод.ДатаОкончания);
		
		Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
			ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
			ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
		КонецЕсли;
		Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
			ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
			ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
		КонецЕсли;
		
		Если Параметры.Периодичность <> Неопределено Тогда
			
			ИмяПоляПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Параметры.Периодичность).Период;
			ВыражениеПериод = ИмяПоляПериод;
			
			Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
				ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
			КонецЕсли;
			
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
			ДобавитьПолеГруппировки(Настройки, "Период");
			
		КонецЕсли;
		
		Если Параметры.Свойство("ЕстьПериодичностьСекунда")
			И Параметры.ЕстьПериодичностьСекунда Тогда
			
			ИмяПоляПериод = "ПериодСекунда";
			ВыражениеПериод = ИмяПоляПериод;
			
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодСекунда", ВыражениеПериод);
			ДобавитьПолеГруппировки(Настройки, "ПериодСекунда");
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьПолеГруппировки(Настройки, "НачалоПериода");
		ДобавитьПолеГруппировки(Настройки, "КонецПериода");
		
	КонецЕсли;
	
	Ресурсы = Новый Структура;
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ВалютаХранения",
			"ВЫБОР КОГДА СуммаВВалюте <> 0 ТОГДА Валюта ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ");
		ДобавитьПолеГруппировки(Настройки, "ВалютаХранения");
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "ПериодДень");
		ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
		
		Ресурсы.Вставить("СуммаВВалютеХранения", "СуммаВВалюте");
		
		Если Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
			ВыражениеПоляСуммаВФункциональнойВалюте = "СуммаУпр";
		ИначеЕсли Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл Тогда
			ВыражениеПоляСуммаВФункциональнойВалюте = "СуммаРегл";
		Иначе
			ВыражениеПоляСуммаВФункциональнойВалюте = "NULL";
		КонецЕсли;
		
		Ресурсы.Вставить("СуммаВФункциональнойВалюте", ВыражениеПоляСуммаВФункциональнойВалюте);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Ресурс Из Ресурсы Цикл
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, Ресурс.Ключ, Ресурс.Значение, "Сумма");
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, Ресурс.Ключ);
	КонецЦикла;
	
	Если Параметры.ПоРегистратору Тогда
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗаполненностьПоказателей(Настройки, Параметры);
	
	ФактическиеДанныеБюджетирования = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборыДанных);
	
	ПересчитатьТаблицуДанныхВВалюту(ФактическиеДанныеБюджетирования, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта);
	
	Возврат ФактическиеДанныеБюджетирования;
	
КонецФункции

Процедура ФактСтатьиБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта) Экспорт
	
	СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(
		Правило, ОчищаемыеКоллекцииПриПолученииФакта(), Параметры.РежимПолученияДанных, Истина);
	
	НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
	Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
		Если НЕ НеКопируемыеПараметры.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
			ПараметрКомпоновки.Значение = Неопределено;
		ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
			// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
			ПараметрКомпоновки.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		КонецЕсли;
	КонецЦикла;
	
	РегламентированныйИлиМеждународныйУчет =
		Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		ИЛИ Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет;
		
	Если РегламентированныйИлиМеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных);
		ВидыКорСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.КорСчет);
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто, ВидыКорСубконто); 
	КонецЕсли;
	
	КомпоновщикНастроек = Правило.КомпоновщикНастроек; // ХранилищеЗначения
	НастройкиОтбора = КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"НаборСценарии");
	НаборДанныхСценарии.Запрос =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий";
	ЗаголовокПоля = НСтр("ru = 'Тип правила';
						|en = 'Rule type'");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"ТипПравила",
		"ТипПравила",
		ЗаголовокПоля,
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипПравилаПолученияФактическихДанныхБюджетирования"));
	ЗаголовокПоля = НСтр("ru = 'Сценарий';
						|en = 'Scenario'");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"Сценарий",
		"Сценарий",
		ЗаголовокПоля,
		Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные)";
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета)";
	Иначе
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные)";
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(
		СхемаКомпоновкиДанных,
		НаборДанных.Имя,
		НаборДанныхСценарии.Имя,
		ВыражениеТипаПравила,
		"ТипПравила");
	
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	ПараметрСтандартныйПериод = Параметры.Период; // СтандартныйПериод -
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "НачалоПериода", ПараметрСтандартныйПериод.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "КонецПериода", ПараметрСтандартныйПериод.ДатаОкончания);
	Если Правило.РазделИсточникаДанных <> Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	КонецЕсли;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ХозяйственнаяОперация", Правило.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если РегламентированныйИлиМеждународныйУчет И ЗначениеЗаполнено(Правило.КорСчет) Тогда
		ПараметрКорСчет = СхемаКомпоновкиДанных.Параметры.Найти("КорСчет");
		ПараметрКорСчет.Значение = Правило.КорСчет;
		ПараметрКорСчет.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
		СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
		Если ПараметрНачалоПериода = Неопределено Тогда
			ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрНачалоПериода.Имя = "НачалоПериода";
			ПараметрНачалоПериода.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		КонецЕсли;
		ПараметрНачалоПериода.Выражение = Параметры.ВыражениеНачалоПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыражениеКонецПериода") Тогда
		ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
		Если ПараметрКонецПериода = Неопределено Тогда
			ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Добавить();
			ПараметрКонецПериода.Имя = "КонецПериода";
			ПараметрКонецПериода.ТипЗначения = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		КонецЕсли;
		ПараметрКонецПериода.Выражение = Параметры.ВыражениеКонецПериода;
	КонецЕсли;
	
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	ПараметрОборотПоАналитикеРасхода = СхемаКомпоновкиДанных.Параметры.Найти("ОборотПоАналитикеРасхода");
	Если ПараметрОборотПоАналитикеРасхода <> Неопределено Тогда
		ПараметрОборотПоАналитикеРасхода.Значение = Правило.ОборотПоАналитикеРасхода;
		ПараметрОборотПоАналитикеРасхода.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОборотПоАналитикеРасхода", Правило.ОборотПоАналитикеРасхода);
	КонецЕсли;
	
	Если Параметры.Периодичность <> Неопределено Тогда
		
		ИмяПоляПериод = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Параметры.Периодичность).Период;
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НАЧАЛОПЕРИОДА(Период, ""%1"")", 
				ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Параметры.Периодичность)); 
		Иначе
			ТекстОшибки = НСтр("ru = 'В схеме источника данных отсутствует поле периода.
										|Получение данных в разрезе периода невозможно.';
										|en = 'The period field is missing in the data source scheme.
										|Cannot receive data by the period.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериод = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериод);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "Период");
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
		И Параметры.ЕстьПериодичностьСекунда Тогда
		ИмяПоляПериод = "ПериодСекунда";
		ЕстьПолеНеобходимойПериодичности = (НаборДанных.Поля.Найти(ИмяПоляПериод) <> Неопределено);
		ЕстьПолеПериод = (НаборДанных.Поля.Найти("Период") <> Неопределено);
		Если ЕстьПолеНеобходимойПериодичности Тогда
			ВыражениеПериод = ИмяПоляПериод;
		ИначеЕсли ЕстьПолеПериод Тогда
			ВыражениеПериод = "Период";
		Иначе
			ТекстОшибки = НСтр("ru = 'В схеме источника данных отсутствует поле периода.
									|Получение данных в разрезе периода невозможно.';
									|en = 'The period field is missing in the data source scheme.
									|Cannot receive data by the period.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодСекунда", ВыражениеПериод);
		ДобавитьПолеГруппировки(Настройки, "ПериодСекунда");
	КонецЕсли;
	
	Если Параметры.ПоРегистратору Тогда
		ЕстьПолеРегистратор = (НаборДанных.Поля.Найти("Регистратор") <> Неопределено);
		Если Не ЕстьПолеРегистратор Тогда
			ТекстОшибки = НСтр("ru = 'В схеме источника данных отсутствует поле регистратора. 
										|Получение данных в разрезе регистратора невозможно.';
										|en = 'The recorder field is missing in the data source scheme.
										|Cannot receive data by the recorder.'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
		
	КонецЕсли;
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗаполненностьПоказателей(Настройки, Параметры);
	
	ВнешниеНаборыДанных = Неопределено;
	Если СхемаКомпоновкиДанных.НаборыДанных.Найти("ТаблицаКорреспонденций") <> Неопределено Тогда
		ВнешниеНаборыДанных = Новый Структура("ТаблицаКорреспонденций", Правило.ТаблицаКорреспонденций);
	КонецЕсли;
	Попытка
		РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборыДанных);
	Исключение
		ТекстШаблона = НСтр(
			"ru = 'Ошибка при получении фактических данных по статье бюджета %1 по правилу %2 по причине: %3';
			|en = 'An error occurred when getting actual data by the %1 budget flow item according to the %2 rule. Reason: %3'");
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон(ТекстШаблона, Правило.СтатьяБюджетов, Правило.Правило, Символы.ПС + ТекстОшибки);
	КонецПопытки;
	
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		
		НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
		
		Если Параметры.Показатели.Свойство("Сумма") Тогда
			Если (Не ЗначениеЗаполнено(НоваяСтрока.ВалютаХранения) Или Не ЗначениеЗаполнено(
				НоваяСтрока.СуммаВВалютеХранения)) И ЗначениеЗаполнено(НоваяСтрока.ВалютаФункциональная) Тогда
				НоваяСтрока.ВалютаХранения = НоваяСтрока.ВалютаФункциональная;
				НоваяСтрока.СуммаВВалютеХранения = НоваяСтрока.СуммаВФункциональнойВалюте;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаВВалютеХранения) Тогда
				НоваяСтрока.СуммаВВалютеХранения = НоваяСтрока.СуммаВВалютеХранения * Правило.Коэффициент;
			КонецЕсли;
			Если ЗначениеЗаполнено(НоваяСтрока.СуммаВФункциональнойВалюте) Тогда
				НоваяСтрока.СуммаВФункциональнойВалюте = НоваяСтрока.СуммаВФункциональнойВалюте * Правило.Коэффициент;
			КонецЕсли;
			Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
				НоваяСтрока.СуммаУпр = НоваяСтрока.СуммаУпр * Правило.Коэффициент;
				НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл * Правило.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Показатели.Свойство("Количество") Тогда
			НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ФактПоказателяБюджетовПоПравилу(Правило, Параметры, ТаблицаФакта, Знач ПереопределеннаяСКД = Неопределено) Экспорт
	
	Если ПереопределеннаяСКД = Неопределено Тогда
		СхемаКомпоновкиДанных = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(Правило, ОчищаемыеКоллекцииПриПолученииФакта(), Параметры.РежимПолученияДанных, Истина);
		
		НеКопируемыеПараметры = ИменаОбщихПараметровПравилПолученияФакта();
		Для каждого ПараметрКомпоновки Из СхемаКомпоновкиДанных.Параметры Цикл
			Если НЕ НеКопируемыеПараметры.Найти(ПараметрКомпоновки.Имя) = Неопределено Тогда
				ПараметрКомпоновки.Значение = Неопределено;
			ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
				// Пользовательские параметры использовать всегда, даже если в СКД стоит использование Авто.
				ПараметрКомпоновки.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СхемаКомпоновкиДанных = ПереопределеннаяСКД;
	КонецЕсли;
	
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
		 Или Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ВидыСубконто = ФинансоваяОтчетностьПовтИсп.ВидыСубконтоСчета(Правило.ИсточникДанных); 
		УстановитьСвойстваПолейСубконто(СхемаКомпоновкиДанных, ВидыСубконто); 
	КонецЕсли;

	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодГраница");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодКурса");
	ДобавитьПараметр(СхемаКомпоновкиДанных, "НачалоПериода");
	
	КомпоновщикНастроек = Правило.КомпоновщикНастроек; // ХранилищеЗначения
	НастройкиОтбора = КомпоновщикНастроек.Получить();
	Настройки = ИнициализированныеНастройкиПоУмолчанию(СхемаКомпоновкиДанных);
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры);
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило);
	КонецЕсли;
	
	// Инициализируем параметр, чтобы он появился в макете компоновки данных
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "СтатьяАктивовПассивов", Правило.ИсточникДанных);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Настройки, "ИсточникДанных", Правило.ИсточникДанных);
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, НастройкиОтбора);
	Если Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	ИспользоватьДатуНачала = Параметры.ОстаткиТолькоНаНачалоПериода И 
								Не Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Целевой;
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
		ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&" + "НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		
		ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("ПериодГраница");
		Если ИспользоватьДатуНачала Тогда
			ПараметрПериод.Выражение = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&" + "НАЧАЛОПЕРИОДА", "&ПЕРИОД");
		Иначе
			ПараметрПериод.Выражение = "КомпоновкаДанныхСервер.ГраницаПериода(" + СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&" + "НАЧАЛОПЕРИОДА", "&ПЕРИОД") + ", ""Включая"")";
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		
		ВыражениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"НАЧАЛОПЕРИОДА(&ПериодКурса, ""%1"")",
			ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Параметры.Периодичность));
			
		Если Правило.ТипПоказателя = Перечисления.ТипПоказателяБюджетов.Расчетный Тогда
			ВыражениеСоединения = ВыражениеПериода;
		Иначе
			ВыражениеСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"КОНЕЦПЕРИОДА(&ПериодКурса, ""%1"")",
				ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Параметры.Периодичность));
		КонецЕсли;
		
		Если Параметры.Свойство("ВыражениеПериодаГруппировки") Тогда
			ВыражениеПериода = СтрЗаменить(Параметры.ВыражениеПериодаГруппировки, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеСоединения);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Период", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "Период");
	КонецЕсли;
	
	Если Параметры.Свойство("ЕстьПериодичностьСекунда")
		И Параметры.ЕстьПериодичностьСекунда Тогда
		ВыражениеПериода = "&ПериодКурса";
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодСекунда", ВыражениеПериода);
		ДобавитьПолеГруппировки(Настройки, "ПериодСекунда");
	КонецЕсли;
	
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"НаборСценарии");
	НаборДанныхСценарии.Запрос =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета) КАК ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ФактическиеДанные) КАК Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные) КАК
	|		ТипПравила,
	|	ЗНАЧЕНИЕ(Справочник.Сценарии.ИсполнениеБюджета) КАК Сценарий";
	ЗаголовокПоля = НСтр("ru = 'Тип правила';
						|en = 'Rule type'");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"ТипПравила",
		"ТипПравила",
		ЗаголовокПоля,
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипПравилаПолученияФактическихДанныхБюджетирования"));
	ЗаголовокПоля = НСтр("ru = 'Сценарий';
						|en = 'Scenario'");
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(
		НаборДанныхСценарии,
		"Сценарий",
		"Сценарий",
		ЗаголовокПоля,
		Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	Если Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ФактическиеДанные)";
	ИначеЕсли Правило.ТипПравила = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета Тогда
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета)";
	Иначе
		ВыражениеТипаПравила = "ЗНАЧЕНИЕ(Перечисление.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджетаИФактическиеДанные)";
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(
		СхемаКомпоновкиДанных,
		НаборДанных.Имя,
		НаборДанныхСценарии.Имя,
		ВыражениеТипаПравила,
		"ТипПравила");
	ДобавитьПолеГруппировки(Настройки, "Сценарий");
	
	ДобавитьВыраженияПолейОтборов(СхемаКомпоновкиДанных, Настройки);
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	УстановитьОтборНаЗаполненностьПоказателей(Настройки, Параметры);
	
	Для каждого СтрокаПериод Из Параметры.ТаблицаПериодов Цикл
		Период = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, СтрокаПериод.ДатаОкончания);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "Период", Период, Истина);
		
		ПериодГраница = ?(ИспользоватьДатуНачала, СтрокаПериод.ДатаНачала, Новый Граница(Период, ВидГраницы.Включая));
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодГраница", ПериодГраница, Истина);
		
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "ПериодКурса", Период, Истина);
		ФинансоваяОтчетностьСервер.УстановитьПараметр(Настройки.ПараметрыДанных, "НачалоПериода", Параметры.Период.ДатаНачала, Истина);
		
		РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
		Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
			НоваяСтрока = ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, СтрокаРезультат, Правило);
			Если Параметры.Показатели.Свойство("Сумма") Тогда
				Если (Не ЗначениеЗаполнено(НоваяСтрока.ВалютаХранения) Или Не ЗначениеЗаполнено(
					НоваяСтрока.СуммаВВалютеХранения)) И ЗначениеЗаполнено(НоваяСтрока.ВалютаФункциональная) Тогда
					НоваяСтрока.ВалютаХранения = НоваяСтрока.ВалютаФункциональная;
					НоваяСтрока.СуммаВВалютеХранения = НоваяСтрока.СуммаВФункциональнойВалюте;
				КонецЕсли;
				Если ЗначениеЗаполнено(НоваяСтрока.СуммаВВалютеХранения) Тогда
					НоваяСтрока.СуммаВВалютеХранения = НоваяСтрока.СуммаВВалютеХранения * Правило.Коэффициент;
				КонецЕсли;
				Если ЗначениеЗаполнено(НоваяСтрока.СуммаВФункциональнойВалюте) Тогда
					НоваяСтрока.СуммаВФункциональнойВалюте = НоваяСтрока.СуммаВФункциональнойВалюте * Правило.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			Если Параметры.Показатели.Свойство("Количество") Тогда
				НоваяСтрока.Количество = НоваяСтрока.Количество * Правило.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗначенияНефинансовогоПоказателяПоПравилу(Правило, Параметры, ТаблицаЗначений) Экспорт
	
	СхемаКомпоновкиДанных = Правило.СхемаПолученияДанных;
	ШаблонВводаНФП = Неопределено;
	Параметры.Свойство("ШаблонВводаНФП", ШаблонВводаНФП);
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'Не определена схема компоновки данных для нефинансового показателя ""%1""';
									|en = 'Data composition schema is not identified for the ""%1"" non-financial item'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Правило.НефинансовыйПоказатель);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не определена схема компоновки данных в шаблоне ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2""';
									|en = 'The data composition schema is not defined in the non-financial item profile ""%1"" for non-financial item ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ШаблонВводаНФП, Правило.НефинансовыйПоказатель);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если Не СхемаКомпоновкиДанных.НаборыДанных.Количество() Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'Отсутствует набор данных в схеме заполнения для нефинансового показателя ""%1""';
									|en = 'No data set in the population scheme for non-financial item ""%1""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Правило.НефинансовыйПоказатель);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Отсутствует набор данных в схеме заполнения шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2""';
									|en = 'No data set in the template population schema of non-financial item profile ""%1"" for non-financial item ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ШаблонВводаНФП, Правило.НефинансовыйПоказатель);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если ПоляНабора.Найти("ЗначениеПоказателя") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "ЗначениеПоказателя";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""';
									|en = 'The ""%2"" field is missing in the data composition schema of the ""%1"" non-financial item.'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""';
									|en = 'There is no field with the name ""%3"" in the data composition scheme of the non-financial item profile ""%1"" for non-financial item ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если ПоляНабора.Найти("Период") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "Период";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""';
									|en = 'The ""%2"" field is missing in the data composition schema of the ""%1"" non-financial item.'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показатей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""';
									|en = 'There is no field with the name ""%3"" in the data composition scheme of the input template for non-financial items ""%1"" for non-financial item ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Если Правило.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" И ПоляНабора.Найти("Валюта") = Неопределено Тогда
		ИмяПоляНаЯзыкеКода = "Валюта";
		Если НЕ ЗначениеЗаполнено(ШаблонВводаНФП) Тогда
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных нефинансового показателя ""%1"" отсутствует поле с именем ""%2""';
									|en = 'The ""%2"" field is missing in the data composition schema of the ""%1"" non-financial item.'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		Иначе
			ШаблонСообщения = НСтр("ru = 'В схеме компоновки данных шаблона ввода нефинансовых показателей ""%1"" для нефинансового показателя ""%2"" отсутствует поле с именем ""%3""';
									|en = 'There is no field with the name ""%3"" in the data composition scheme of the non-financial item profile ""%1"" for non-financial item ""%2""'");
			ШаблонСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				ШаблонВводаНФП,
				Правило.НефинансовыйПоказатель,
				ИмяПоляНаЯзыкеКода);
		КонецЕсли;
		ВызватьИсключение ШаблонСообщения;
	КонецЕсли;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	Если Правило.НастройкиСхемыПолученияДанных <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(Настройки, Правило.НастройкиСхемыПолученияДанных); 
	КонецЕсли;
	
	ДобавитьПоляАналитики(СхемаКомпоновкиДанных, Настройки, Правило, Параметры);
	
	ДобавитьПолеГруппировки(Настройки, "ЗначениеПоказателя");
	
	Если Правило.ПоОрганизациям 
		И ПоляНабора.Найти("Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Правило.ПоПодразделениям 
		И ПоляНабора.Найти("Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
	ДобавитьПараметр(СхемаКомпоновкиДанных, "Период");
	Если Параметры.Свойство("ГраницаФактДанных") Тогда
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ГраницаФактДанных", Параметры.ГраницаФактДанных);
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "Период");
	
	Если Параметры.Свойство("ДополнительныйОтбор") И Параметры.ДополнительныйОтбор <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(
			СхемаКомпоновкиДанных, Настройки, Параметры.ДополнительныйОтбор);
	КонецЕсли;
	
	Если Не Правило.ПоСценариям Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Настройки.Отбор, "Сценарий");
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Правило.ПоПериодам И ПоляНабора.Найти("НомерПодпериода") <> Неопределено Тогда
		ВыражениеВычисляемогоПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"БюджетированиеКлиентСервер.ДобавитьИнтервал(
			|	НАЧАЛОПЕРИОДА(Период, ""%1""),
			|	&ПериодичностьПодпериодов,
			|	ВЫБОР КОГДА ЗначениеЗаполнено(НомерПодпериода) ТОГДА НомерПодпериода - 1 ИНАЧЕ 0 КОНЕЦ, 
			|	&Кэш)",
			ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Правило.Периодичность));
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки",
			ВыражениеВычисляемогоПоля);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "Кэш", Новый Соответствие);
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ПериодичностьПодпериодов", Правило.ПериодичностьПодпериодов);
	Иначе
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, 
			"ПериодУстановки", 
			"ПериодУстановки");
	КонецЕсли;
	ДобавитьПолеГруппировки(Настройки, "ПериодУстановки");
	
	Если ПоляНабора.Найти("Регистратор") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Регистратор");
	КонецЕсли;
	
	Если Правило.ПоСценариям Тогда
		Если ПоляНабора.Найти("Сценарий") = Неопределено Тогда
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "Сценарий", "&ФактическиеДанные");
			ДобавитьПараметр(СхемаКомпоновкиДанных, "ФактическиеДанные", Справочники.Сценарии.ФактическиеДанные);
		КонецЕсли;
		ДобавитьПолеГруппировки(Настройки, "Сценарий");
	КонецЕсли;
	
	Если Правило.ПоПериодам И (ПоляНабора.Найти("НомерПодпериода") <> Неопределено Или Параметры.Свойство("ТаблицаПодпериодов")) Тогда
		ДобавитьПолеГруппировки(Настройки, "НомерПодпериода");
	КонецЕсли;
	
	Если Правило.ПоПериодам И ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ВыражениеВычисляемогоПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"КонецПериода(Период, ""%1"")",
			ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Параметры.Периодичность));
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных,
			"КонецПериодаГруппировки",
			ВыражениеВычисляемогоПоля);
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("Период"), ,ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Структура[0].Отбор, "ПериодУстановки", Новый ПолеКомпоновкиДанных("КонецПериодаГруппировки"), ,ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ДобавитьПолеГруппировки(Настройки, "КонецПериодаГруппировки");
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(Настройки);
	
	ВнешниеНаборы = ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило);
	
	ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, "ЗначениеПоказателя",,, ВидСравненияКомпоновкиДанных.Заполнено);
	
	РезультатРаботыПравила = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
	
	Для каждого СтрокаРезультат Из РезультатРаботыПравила Цикл
		ДобавитьСтрокуВТаблицуДанных(ТаблицаЗначений, СтрокаРезультат, Правило);
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилоПолученияЗначенийНефинансовогоПоказателя(РеквизитыПоказателя, СхемаПолученияДанных, НастройкиСхемыПолученияДанных = Неопределено) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Правило = Новый Структура();
	Правило.Вставить("НефинансовыйПоказатель");
	Правило.Вставить("ПоОрганизациям");
	Правило.Вставить("ПоПодразделениям");
	Правило.Вставить("ПоСценариям");
	Правило.Вставить("ПоПериодам");
	Правило.Вставить("УстанавливатьЗначениеНаКаждыйПериод");
	Правило.Вставить("Периодичность");
	Правило.Вставить("ПериодичностьПодпериодов");
	Правило.Вставить("КоличествоИспользуемыхАналитик");
	
	Правило.Вставить("РасширенныйРежимНастройкиЗаполненияАналитики");
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Правило.Вставить("ВидАналитики" + НомерАналитики);
		Правило.Вставить("ВыражениеЗаполненияАналитики" + НомерАналитики);
		Правило.Вставить("ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики);
		Правило.Вставить("ЗначениеАналитики" + НомерАналитики);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Правило, РеквизитыПоказателя);
	
	Правило.Вставить("РазделИсточникаДанных", Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные);
	Правило.Вставить("СхемаПолученияДанных", СхемаПолученияДанных);
	Правило.Вставить("НастройкиСхемыПолученияДанных", НастройкиСхемыПолученияДанных);
	
	Правило.Вставить("ВидПоказателя", РеквизитыПоказателя.ВидПоказателя);
	
	ДенежныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Денежный);
	Если Не ДенежныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеВалюты", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ВалютаОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиВалюта", РеквизитыПоказателя.АдресАналитикиВалюта);
		Правило.Вставить("ПолеВалютыАналитики", РеквизитыПоказателя.ПолеВалютыАналитики);
	Иначе 
		Правило.Вставить("ЗаполнениеВалюты", "ОпределяетсяПоИсточникуДанных");
	КонецЕсли;
	
	КоличественныйПоказатель = (РеквизитыПоказателя.ВидПоказателя = Перечисления.ВидыНефинансовыхПоказателей.Количественный);
	Если Не КоличественныйПоказатель Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "НеЗаполнять");
	ИначеЕсли РеквизитыПоказателя.ЕдиницаИзмеренияОпределяетсяАналитикой Тогда
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ОпределяетсяПоАналитике");
		Правило.Вставить("АдресАналитикиЕдиницаИзмерения", РеквизитыПоказателя.АдресАналитикиКоличество);
		Правило.Вставить("ПолеЕдиницыИзмеренияАналитики", РеквизитыПоказателя.ПолеЕдиницыИзмеренияАналитики);
	Иначе
		Правило.Вставить("ЗаполнениеЕдиницыИзмерения", "ФиксированноеЗначение");
		Правило.Вставить("ЕдиницаИзмерения", РеквизитыПоказателя.ЕдиницаИзмерения);
	КонецЕсли;
	
	Возврат Правило;
	
КонецФункции

// Производит пересчет полей сумм ресурсов таблицы факта в валюту отчета.
//
// Параметры:
//    ТаблицаДанных - ТаблицаЗначений - Таблица фактических данных
//    ВалютаОтчета - СправочникСсылка.Валюты - Валюта, в которую требуется выполнить пересчет
//    ФункциональнаяВалюта - ПеречислениеСсылка.ВидыУчетаВФункциональнойВалюте - Функциональная валюта, суммы в которой используются для пересчета
//    ПоляПересчета - Массив из Структура - Имена суммовых полей таблицы: ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных (необязательно)
//    ДанныеКурсовСценария - Структура:
//     *ГраницаФактДанных - Дата -
//     *ТаблицаКурсовСценария - ТаблицаЗначений -
//
Процедура ПересчитатьТаблицуДанныхВВалюту(ТаблицаДанных, ВалютаОтчета, ФункциональнаяВалюта,
	ПоляПересчета = Неопределено, ДанныеКурсовСценария = Неопределено) Экспорт
	
	Если ПоляПересчета = Неопределено Тогда
		ПолеПересчета = Новый Структура;
		ПолеПересчета.Вставить("ПолеПересчета", "СуммаВВалютеХранения");
		ПолеПересчета.Вставить("ПолеФункциональнойВалюты", "СуммаВФункциональнойВалюте");
		ПолеПересчета.Вставить("ПолеВыходныхДанных", "Сумма");
		ПолеПересчета.Вставить("ПолеВыходныхДанныхВВалюте", "СуммаВВалюте");
		ПоляПересчета = Новый Массив;
		ПоляПересчета.Добавить(ПолеПересчета);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	Если ТипЗнч(ДанныеКурсовСценария ) = Тип("Структура") И ДанныеКурсовСценария.Свойство("ТаблицаКурсовСценария") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаКурсовСценария.Валюта,
		|	ТаблицаКурсовСценария.Период,
		|	ТаблицаКурсовСценария.Курс
		|ПОМЕСТИТЬ ТаблицаКурсовСценария
		|ИЗ
		|	&ТаблицаКурсовСценария КАК ТаблицаКурсовСценария";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ДАТАВРЕМЯ(1,1,1) КАК Период,
		|	0 КАК Курс
		|ПОМЕСТИТЬ ТаблицаКурсовСценария";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + "
	|ВЫБРАТЬ
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр) ТОГДА
	|			ВалютаУпр.Значение
	|		КОГДА &ФункциональнаяВалюта = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл) ТОГДА
	|			&ВалютаРегл
	|	КОНЕЦ КАК ФункциональнаяВалюта,
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаДанных
	|	ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУпр
	|	ПО ИСТИНА
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВалют.ВалютаСуммы КАК ВалютаСуммы,
	|	ТаблицаВалют.ПериодКурсаПересчет КАК ПериодКурсаПересчет
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ФункциональнаяВалюта КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> &ВалютаОтчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ВалютаХранения КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> &ВалютаОтчета
	|		И Таблица.ВалютаХранения <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|) КАК ТаблицаВалют
	|
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	МАКСИМУМ(ТаблицаПериодов.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСуммы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодов.ВалютаСуммы,
	|		ТаблицаПериодов.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = ТаблицаПериодов.ВалютаСуммы
	|			И КурсыВалют.Период <= &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.ВалютаСуммы,
	|		ТаблицаПериодов.ПериодКурсаПересчет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПериодов.ВалютаСуммы,
	|		ТаблицаПериодов.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКурсовСценария КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = ТаблицаПериодов.ВалютаСуммы
	|			И КурсыВалют.Период > &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.ВалютаСуммы,
	|		ТаблицаПериодов.ПериодКурсаПересчет) КАК ТаблицаПериодов
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	МАКСИМУМ(ТаблицаПериодов.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаОтчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодов.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = &ВалютаОтчета
	|			И КурсыВалют.Период <= &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.ПериодКурсаПересчет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПериодов.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКурсовСценария КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодов.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = &ВалютаОтчета
	|			И КурсыВалют.Период > &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодов.ПериодКурсаПересчет) КАК ТаблицаПериодов
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодов.ВалютаСуммы,
	|	ТаблицаПериодов.ПериодКурсаПересчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалютХранения.КурсЗнаменатель, 0) <> 0 И ЕСТЬNULL(КурсыВалютОтчета.КурсЧислитель, 0) <> 0 ТОГДА
	|			КурсыВалютХранения.КурсЧислитель * КурсыВалютОтчета.КурсЗнаменатель / (КурсыВалютХранения.КурсЗнаменатель * КурсыВалютОтчета.КурсЧислитель)
	|		КОГДА ЕСТЬNULL(КурсыВалютХраненияСценария.Курс, 0) <> 0 ТОГДА
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютОтчетаСценария.Курс, 0) <> 0 ТОГДА
	|				КурсыВалютХраненияСценария.Курс / КурсыВалютОтчетаСценария.Курс
	|			КОГДА ЕСТЬNULL(КурсыВалютОтчета.КурсЧислитель, 0) <> 0 ТОГДА
	|				КурсыВалютХраненияСценария.Курс / КурсыВалютОтчета.КурсЧислитель
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаВВалютуОтчета
	|ИЗ
	|	ТаблицаПериодов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСуммы
	|	ПО
	|		ТаблицаПериодовВалютаСуммы.ПериодКурсаПересчет = ТаблицаПериодов.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСуммы.ВалютаСуммы = ТаблицаПериодов.ВалютаСуммы
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютХранения
	|		ПО
	|			КурсыВалютХранения.Период = ТаблицаПериодовВалютаСуммы.ДатаКурса
	|			И КурсыВалютХранения.Валюта = ТаблицаПериодовВалютаСуммы.ВалютаСуммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаКурсовСценария КАК КурсыВалютХраненияСценария
	|		ПО
	|			КурсыВалютХраненияСценария.Период = ТаблицаПериодовВалютаСуммы.ДатаКурса
	|			И КурсыВалютХраненияСценария.Валюта = ТаблицаПериодовВалютаСуммы.ВалютаСуммы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаОтчета
	|	ПО
	|		ТаблицаПериодовВалютаОтчета.ПериодКурсаПересчет = ТаблицаПериодов.ПериодКурсаПересчет
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютОтчета
	|		ПО
	|			КурсыВалютОтчета.Период = ТаблицаПериодовВалютаОтчета.ДатаКурса
	|			И КурсыВалютОтчета.Валюта = &ВалютаОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаКурсовСценария КАК КурсыВалютОтчетаСценария
	|		ПО
	|			КурсыВалютОтчетаСценария.Период = ТаблицаПериодовВалютаОтчета.ДатаКурса
	|			И КурсыВалютОтчетаСценария.Валюта = &ВалютаОтчета
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВалют.ВалютаСтроки КАК ВалютаСтроки,
	|	ТаблицаВалют.ВалютаСуммы КАК ВалютаСуммы,
	|	ТаблицаВалют.ПериодКурсаПересчет КАК ПериодКурсаПересчет
	|ПОМЕСТИТЬ ТаблицаПериодовСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Валюта КАК ВалютаСтроки,
	|		Таблица.ФункциональнаяВалюта КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> Таблица.Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Валюта КАК ВалютаСтроки,
	|		Таблица.ВалютаХранения КАК ВалютаСуммы,
	|		Таблица.ПериодКурса КАК ПериодКурсаПересчет
	|	ИЗ
	|		Таблица
	|	ГДЕ
	|		Таблица.ВалютаХранения <> Таблица.Валюта
	|		И Таблица.ВалютаХранения <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	) КАК ТаблицаВалют
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	МАКСИМУМ(ТаблицаПериодовСтроки.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСуммыСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ВалютаСуммы,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодовСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСуммы
	|			И КурсыВалют.Период <= &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ВалютаСуммы,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ВалютаСуммы,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период)
	|	ИЗ
	|		ТаблицаПериодовСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКурсовСценария КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСуммы
	|		И КурсыВалют.Период > &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ВалютаСуммы,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет) КАК ТаблицаПериодовСтроки
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	МАКСИМУМ(ТаблицаПериодовСтроки.Период) КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаПериодовВалютаСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		ТаблицаПериодовСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|			И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСтроки
	|			И КурсыВалют.Период <= &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|		МАКСИМУМ(КурсыВалют.Период)
	|	ИЗ
	|		ТаблицаПериодовСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|	ПО
	|		КурсыВалют.Период <= ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И КурсыВалют.Валюта = ТаблицаПериодовСтроки.ВалютаСтроки
	|		И КурсыВалют.Период > &ГраницаФактДанных
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаПериодовСтроки.ВалютаСтроки,
	|		ТаблицаПериодовСтроки.ПериодКурсаПересчет) КАК ТаблицаПериодовСтроки
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПериодовСтроки.ВалютаСтроки,
	|	ТаблицаПериодовСтроки.ВалютаСуммы,
	|	ТаблицаПериодовСтроки.ПериодКурсаПересчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КурсыВалютХранения.КурсЗнаменатель, 0) <> 0 И ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) <> 0 ТОГДА
	|			КурсыВалютХранения.КурсЧислитель * КурсыВалют.КурсЗнаменатель / (КурсыВалютХранения.КурсЗнаменатель * КурсыВалют.КурсЧислитель)
	|		КОГДА ЕСТЬNULL(КурсыВалютХраненияСценария.Курс, 0) <> 0 ТОГДА
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(КурсыВалютСценария.Курс, 0) <> 0 ТОГДА
	|				КурсыВалютХраненияСценария.Курс / КурсыВалютСценария.Курс
	|			КОГДА ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) <> 0 ТОГДА
	|				КурсыВалютХраненияСценария.Курс / КурсыВалют.КурсЧислитель
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КоэффициентыПересчетаВВалютуСтроки
	|ИЗ
	|	ТаблицаПериодовСтроки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСуммыСтроки
	|	ПО
	|		ТаблицаПериодовВалютаСуммыСтроки.ПериодКурсаПересчет = ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСуммыСтроки.ВалютаСуммы = ТаблицаПериодовСтроки.ВалютаСуммы
	|		И ТаблицаПериодовВалютаСуммыСтроки.ВалютаСтроки = ТаблицаПериодовСтроки.ВалютаСтроки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютХранения
	|		ПО
	|			КурсыВалютХранения.Период = ТаблицаПериодовВалютаСуммыСтроки.ДатаКурса
	|			И КурсыВалютХранения.Валюта = ТаблицаПериодовВалютаСуммыСтроки.ВалютаСуммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаКурсовСценария КАК КурсыВалютХраненияСценария
	|		ПО
	|			КурсыВалютХраненияСценария.Период = ТаблицаПериодовВалютаСуммыСтроки.ДатаКурса
	|			И КурсыВалютХраненияСценария.Валюта = ТаблицаПериодовВалютаСуммыСтроки.ВалютаСуммы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПериодовВалютаСтроки
	|	ПО
	|		ТаблицаПериодовВалютаСтроки.ПериодКурсаПересчет = ТаблицаПериодовСтроки.ПериодКурсаПересчет
	|		И ТаблицаПериодовВалютаСтроки.ВалютаСтроки = ТаблицаПериодовСтроки.ВалютаСтроки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО
	|			КурсыВалют.Период = ТаблицаПериодовВалютаСтроки.ДатаКурса
	|			И КурсыВалют.Валюта = ТаблицаПериодовВалютаСтроки.ВалютаСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ТаблицаКурсовСценария КАК КурсыВалютСценария
	|		ПО
	|			КурсыВалютСценария.Период = ТаблицаПериодовВалютаСтроки.ДатаКурса
	|			И КурсыВалютСценария.Валюта = ТаблицаПериодовВалютаСтроки.ВалютаСтроки
	|;
	|
	|ВЫБРАТЬ
	|	&ПоляПересчета,
	|	&ПоляВВалюте,
	|	&ПоляТаблицы,
	|	ВЫБОР КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО ИЛИ Таблица.ВалютаХранения = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ФункциональнаяВалюта
	|	ИНАЧЕ
	|		Таблица.ВалютаХранения
	|	КОНЕЦ КАК ВалютаХранения,
	|	ВЫБОР КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО ИЛИ Таблица.ВалютаХранения = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.СуммаВФункциональнойВалюте
	|	ИНАЧЕ
	|		Таблица.СуммаВВалютеХранения
	|	КОНЕЦ КАК СуммаВВалютеХранения
	|ИЗ
	|	Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуОтчета КАК КоэффициентыПересчетаИзФункциональнойВалюты
	|	ПО
	|		КоэффициентыПересчетаИзФункциональнойВалюты.ВалютаСуммы = Таблица.ФункциональнаяВалюта
	|		И КоэффициентыПересчетаИзФункциональнойВалюты.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуОтчета КАК КоэффициентыПересчетаИзВалютыХранения
	|	ПО
	|		КоэффициентыПересчетаИзВалютыХранения.ВалютаСуммы = Таблица.ВалютаХранения
	|		И КоэффициентыПересчетаИзВалютыХранения.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуСтроки КАК КоэффициентыПересчетаИзФункциональнойВалютыСтроки
	|	ПО
	|		КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ВалютаСтроки = Таблица.Валюта
	|		И КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ВалютаСуммы = Таблица.ФункциональнаяВалюта
	|		И КоэффициентыПересчетаИзФункциональнойВалютыСтроки.ПериодКурсаПересчет = Таблица.ПериодКурса
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КоэффициентыПересчетаВВалютуСтроки КАК КоэффициентыПересчетаИзВалютыХраненияСтроки
	|	ПО
	|		КоэффициентыПересчетаИзВалютыХраненияСтроки.ВалютаСтроки = Таблица.Валюта
	|		И КоэффициентыПересчетаИзВалютыХраненияСтроки.ВалютаСуммы = Таблица.ВалютаХранения
	|		И КоэффициентыПересчетаИзВалютыХраненияСтроки.ПериодКурсаПересчет = Таблица.ПериодКурса
	|
	|";
	
	ШаблонПоляПересчета = "
	|	ВЫБОР
	|		КОГДА Таблица.ВалютаХранения = &ВалютаОтчета
	|			ТОГДА %1 // Таблица.СуммаВВалютеХранения
	|		КОГДА Таблица.ВалютаХранения <> &ВалютаОтчета
	|			И НЕ (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %2 * ЕСТЬNULL(КоэффициентыПересчетаИзФункциональнойВалюты.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения <> &ВалютаОтчета
	|			И (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %1 * ЕСТЬNULL(КоэффициентыПересчетаИзВалютыХранения.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО
	|			ТОГДА %1
	|	КОНЕЦ КАК %3
	|";
	
	ШаблонПоляПересчетаВВалюте = "
	|	ВЫБОР
	|		КОГДА Таблица.ВалютаХранения = Таблица.Валюта
	|			ТОГДА %1 // Таблица.СуммаВВалютеХранения
	|		КОГДА Таблица.ВалютаХранения <> Таблица.Валюта
	|			И НЕ (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %2 * ЕСТЬNULL(КоэффициентыПересчетаИзФункциональнойВалютыСтроки.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения <> Таблица.Валюта
	|			И (%2 ЕСТЬ NULL
	|				ИЛИ Таблица.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ %2 = 0 И %1 <> 0)
	|			ТОГДА %1 * ЕСТЬNULL(КоэффициентыПересчетаИзВалютыХраненияСтроки.КоэффициентПересчета, 1)
	|		КОГДА Таблица.ВалютаХранения = НЕОПРЕДЕЛЕНО
	|			ТОГДА %1
	|	КОНЕЦ КАК %3
	|";
	Если ТипЗнч(ДанныеКурсовСценария) = Тип("Структура") И ДанныеКурсовСценария.Свойство("ТаблицаКурсовСценария") Тогда
		Запрос.УстановитьПараметр("ТаблицаКурсовСценария", ДанныеКурсовСценария.ТаблицаКурсовСценария);
		Запрос.УстановитьПараметр("ГраницаФактДанных", ДанныеКурсовСценария.ГраницаФактДанных);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КурсыВалют.Период <= &ГраницаФактДанных", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КурсыВалют.Период > &ГраницаФактДанных", "ИСТИНА");
	КонецЕсли;
	
	СтрокиПолейПересчета = Новый Массив;
	Для каждого Поле Из ПоляПересчета Цикл
		СтрокиПолейПересчета.Добавить(СтрШаблон(ШаблонПоляПересчета, Поле.ПолеПересчета, Поле.ПолеФункциональнойВалюты, Поле.ПолеВыходныхДанных));
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляПересчета", СтрСоединить(СтрокиПолейПересчета, ", "));
	
	СтрокиПолейПересчетаВВалюте = Новый Массив;
	Для каждого Поле Из ПоляПересчета Цикл
		СтрокиПолейПересчетаВВалюте.Добавить(СтрШаблон(ШаблонПоляПересчетаВВалюте, Поле.ПолеПересчета, Поле.ПолеФункциональнойВалюты, Поле.ПолеВыходныхДанныхВВалюте));
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВВалюте", СтрСоединить(СтрокиПолейПересчетаВВалюте, ", "));
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("ВалютаОтчета", ВалютаОтчета);
	Запрос.УстановитьПараметр("ФункциональнаяВалюта", ФункциональнаяВалюта);
	
	ПоляТаблицы = Новый Массив;
	НетипизированныеПоля = Новый Массив;
	Для каждого Колонка Из ТаблицаДанных.Колонки Цикл
		Если ЗначениеЗаполнено(Колонка.ТипЗначения) Тогда
			ПоляТаблицы.Добавить(Колонка.Имя);
		Иначе
			НетипизированныеПоля.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ИндексПоляСумма = ПоляТаблицы.Найти("Сумма");
	Если ИндексПоляСумма <> Неопределено Тогда
		ПоляТаблицы.Удалить(ИндексПоляСумма);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", СтрСоединить(ПоляТаблицы, ","));
	
	Если ПоляТаблицы.Найти("Организация") <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаРегл", "Организация.ВалютаРегламентированногоУчета");
		Иначе
			ОрганизацияПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
			Запрос.УстановитьПараметр("ВалютаРегл",
				 ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ОрганизацияПоУмолчанию));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ВалютаРегл", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("СуммаВФункциональнойВалюте") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.СуммаВФункциональнойВалюте", "0");
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("СуммаВВалютеХранения") = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.СуммаВВалютеХранения", "0");
	КонецЕсли;
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для каждого Поле Из НетипизированныеПоля Цикл
		ТаблицаДанных.Колонки.Добавить(Поле);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, ИмяПоля)
	
	Для Каждого ПолеНабора Из ПоляНабора Цикл
		Если ТипЗнч(ПолеНабора) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НРег(ПолеНабора.Поле) = НРег(ИмяПоля) Тогда
			Возврат ПолеНабора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьПоляИзмерений(СхемаКомпоновкиДанных, Настройки, Параметры)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	Если Параметры.ПоОрганизациям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Организация") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Организация");
	КонецЕсли;
	
	Если Параметры.ПоПодразделениям И НайтиПолеКомпоновкиПоИмениПоля(ПоляНабора, "Подразделение") <> Неопределено Тогда
		ДобавитьПолеГруппировки(Настройки, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Функция ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило) Экспорт
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Правило, "ТаблицаКорреспонденций") Тогда
			ПоказателиРегистра = ИсточникиДанныхПовтИсп.ПоказателиСуммыПоИсточникуДанных(Правило.ИсточникДанныхХО);
		Иначе
			ИмяНабораДанных = НаборДанных.Имя; // Имя набора данных соответствует регистру операции
			ПоказателиРегистра = МеждународныйУчетСерверПовтИсп.Показатели(ИмяНабораДанных);
		КонецЕсли;
		ДанныеИсточникаСуммы = ПоказателиРегистра.Получить(Правило.ИсточникСуммыОперации);
		РесурсыИсточникаСуммы = ?(ДанныеИсточникаСуммы = Неопределено, Неопределено, ДанныеИсточникаСуммы.Ресурсы);
		Если РесурсыИсточникаСуммы = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для источника суммы %1 хозяйственной операции %2 не найдены соответствующие ресурсы в источнике данных.';
					|en = 'Corresponding resources are not found in the data source for the source of amount %1 of business transaction %2.'"), 
				Правило.ИсточникСуммыОперации, 
				Правило.ИсточникДанныхХО);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Для каждого Ресурс Из РесурсыИсточникаСуммы Цикл
			ПолеСуммы = Ресурс["Имя"];
			Если НаборДанных.Поля.Найти(ПолеСуммы) = Неопределено Тогда
				// Ресурс не выбирается в источнике
				Продолжить;
			КонецЕсли;
			Если Ресурс["ИсточникВалюты"] = "ВалютаУпр" Тогда
				ИсточникиСуммы.Вставить("Упр", ПолеСуммы);
			ИначеЕсли Ресурс["ИсточникВалюты"] = "ВалютаРегл" Тогда
				ИсточникиСуммы.Вставить("Регл", ПолеСуммы);
			Иначе
				ИсточникиСуммы.Вставить("Валюта", ПолеСуммы);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		ИсточникиСуммы.Вставить("Упр", ПолеРесурсаБухгалтерии("СуммаУУ", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	Возврат ИсточникиСуммы;
	
КонецФункции

Процедура ДобавитьПолеСуммыПоСтатьеБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = ИсточникиСуммыПравила(СхемаКомпоновкиДанных, Правило);
	
	ДобавитьПолеСуммы(СхемаКомпоновкиДанных, Настройки, Правило, Параметры, ИсточникиСуммы);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
	Если НаборДанных.Поля.Найти("ПериодДень") <> Неопределено Тогда
		ВыражениеПоляПериодКурса = "ПериодДень";
	ИначеЕсли НаборДанных.Поля.Найти("Период") <> Неопределено Тогда
		ВыражениеПоляПериодКурса = "Период";
	Иначе
		ВыражениеПоляПериодКурса = "&КонецПериода";
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", ВыражениеПоляПериодКурса);
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеСуммыПоПоказателюБюджетов(СхемаКомпоновкиДанных, Настройки, Правило, Параметры)
	
	ИсточникиСуммы = Новый Структура;
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет Тогда
		ИсточникиСуммы.Вставить("Регл", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		ИсточникиСуммы.Вставить("Упр", ПолеРесурсаБухгалтерии("СуммаУУ", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ИсточникиСуммы.Вставить("Международ", ПолеРесурсаБухгалтерии("Сумма", Правило.ТипИтога));
		Если Правило.ИсточникВалютный Тогда
			ИсточникиСуммы.Вставить("Валюта", ПолеРесурсаБухгалтерии("СуммаВВалюте", Правило.ТипИтога));
		КонецЕсли;
	ИначеЕсли Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.ПроизвольныеДанные Тогда
		ЗаполнитьИсточникиСуммыПоСхеме(ИсточникиСуммы, СхемаКомпоновкиДанных.НаборыДанных[0]);
	КонецЕсли;
	
	ДобавитьПолеСуммы(СхемаКомпоновкиДанных, Настройки, Правило, Параметры, ИсточникиСуммы);
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ПериодКурса", "&Период");
	ДобавитьПолеГруппировки(Настройки, "ПериодКурса");
	
КонецПроцедуры

Процедура ДобавитьПолеСуммы(СхемаКомпоновкиДанных, Настройки, Правило, Параметры, ИсточникиСуммы)
	
	ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Сумма",, "Сумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сумма");
	
	Если ИсточникиСуммы.Свойство("Валюта") Тогда
		
		ПрефиксПоиска = ПрефиксПоиска(Правило.РазделИсточникаДанных, "Валюта", Правило.ТипОбъектаИсточникаДанных);
		
		ПоляНабораДанных = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
		ПолеНабораДанныхВалюта = ПоляНабораДанных.Найти(ПрефиксПоиска + "Валюта");
		
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
				Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных")
					Или ТипЗнч(ПолеНабораДанных) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ПолеНабораДанных.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Валюты")) Тогда
					ПолеНабораДанныхВалюта = ПолеНабораДанных;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолеНабораДанныхВалюта = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не определена валюта для получения валютной суммы.';
								|en = 'Currency for receiving currency amount  is not determined.'");
			ВызватьИсключение ТекстОшибки;
		Иначе
			ПутьКДаннымВалюта = ПолеНабораДанныхВалюта.ПутьКДанным;
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ВалютаХранения", ПутьКДаннымВалюта);
		ДобавитьПолеГруппировки(Настройки, "ВалютаХранения");
		
		ВыражениеПоляСумма = ИсточникиСуммы.Валюта;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаВВалютеХранения", ВыражениеПоляСумма, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаВВалютеХранения");
		
	//++ НЕ УТКА
	ИначеЕсли ИсточникиСуммы.Свойство("Международ") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоПлановСчетовВМеждународномУчете") Тогда
			ПутьКДаннымВалюта = "МеждународныйУчетСерверПовтИсп.ВалютаФункциональная(ПланСчетовМеждународногоУчета, Организация)";
		Иначе
			ПутьКДаннымВалюта = "&ВалютаХранения";
			ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаХранения", Параметры.ВалютаМеждународ);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ВалютаХранения", ПутьКДаннымВалюта);
		ДобавитьПолеГруппировки(Настройки, "ВалютаХранения");
		
		ВыражениеПоляСумма = ИсточникиСуммы.Международ;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаВВалютеХранения", ВыражениеПоляСумма, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаВВалютеХранения");
	//-- НЕ УТКА
	КонецЕсли;
	
	Если Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		
		Если ИсточникиСуммы.Свойство("Упр") Тогда
			ВыражениеПоляСуммаВФункциональнойВалюте = ИсточникиСуммы.Упр;
		Иначе
			ВыражениеПоляСуммаВФункциональнойВалюте = "NULL";
		КонецЕсли;
		ВыражениеПоляФункциональнаяВалюта = "&ВалютаФункциональная";
		ДобавитьПараметр(СхемаКомпоновкиДанных, "ВалютаФункциональная", Параметры.ВалютаУпр);
		
	ИначеЕсли Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл Тогда
		Если ИсточникиСуммы.Свойство("Регл") Тогда
			ВыражениеПоляСуммаВФункциональнойВалюте = ИсточникиСуммы.Регл;
		Иначе
			ВыражениеПоляСуммаВФункциональнойВалюте = "NULL";
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			ВыражениеПоляФункциональнаяВалюта = "Организация.ВалютаРегламентированногоУчета";
		Иначе
			ВыражениеПоляФункциональнаяВалюта = "Константы.ВалютаРегламентированногоУчета.Получить()";
		КонецЕсли;
		
	Иначе
		ВыражениеПоляСуммаВФункциональнойВалюте = "NULL";
		ВыражениеПоляФункциональнаяВалюта = "NULL";
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
		СхемаКомпоновкиДанных, "СуммаВФункциональнойВалюте", ВыражениеПоляСуммаВФункциональнойВалюте, "Сумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаВФункциональнойВалюте");
	
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "ВалютаФункциональная", ВыражениеПоляФункциональнаяВалюта);
	ДобавитьПолеГруппировки(Настройки, "ВалютаФункциональная");
	
	Если Параметры.ВозвращатьУпрИРеглСуммы Тогда // для хранимого кеша
		
		Если ИсточникиСуммы.Свойство("Упр") Тогда
			ВыражениеПоляСумма = ИсточникиСуммы.Упр;
		Иначе
			ВыражениеПоляСумма = "NULL";
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаУпр", ВыражениеПоляСумма, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаУпр");
		
		Если ИсточникиСуммы.Свойство("Регл") Тогда
			ВыражениеПоляСумма = ИсточникиСуммы.Регл;
		Иначе
			ВыражениеПоляСумма = "NULL";
		КонецЕсли;
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "СуммаРегл", ВыражениеПоляСумма, "Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "СуммаРегл");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПолеКоличество(СхемаКомпоновкиДанных, Настройки, Правило)
	
	ПоляНабора = СхемаКомпоновкиДанных.НаборыДанных[0].Поля;
	
	ПолеКоличество = "Количество";
	Если Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет
			ИЛИ Правило.РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет Тогда
		ПолеКоличество = ПолеРесурсаБухгалтерии("Количество", Правило.ТипИтога)
	КонецЕсли;
	
	Если ПоляНабора.Найти(ПолеКоличество) <> Неопределено Тогда
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", ПолеКоличество, "Сумма");
	Иначе
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(СхемаКомпоновкиДанных, "Количество", "NULL", "Сумма");
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Количество");
	
КонецПроцедуры

Процедура ДобавитьПараметр(СхемаКомпоновкиДанных, ИмяПараметра, Значение = Неопределено)
	
	Если СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
	Параметр.Имя = ИмяПараметра;
	Параметр.ОграничениеИспользования = Истина;
	
	Если Значение <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.ВключатьВДоступныеПоля = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборНаЗаполненностьПоказателей(Настройки, Параметры)
	
	Отбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Настройки.Отбор.Элементы, "ГруппаОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		Если Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти("СуммаВВалютеХранения") <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				Отбор, "СуммаВВалютеХранения",, ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		КонецЕсли;
		Если Настройки.Выбор.ДоступныеПоляВыбора.Элементы.Найти("СуммаВФункциональнойВалюте") <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				Отбор, "СуммаВФункциональнойВалюте",, ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		КонецЕсли;
		// Для записи хранимого факта заполненность суммы в функциональной валюте не требуется
		Если Параметры.ВозвращатьУпрИРеглСуммы Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				Отбор, "СуммаУпр",, ВидСравненияКомпоновкиДанных.Заполнено, Истина);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
				Отбор, "СуммаРегл",, ВидСравненияКомпоновкиДанных.Заполнено, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Показатели.Свойство("Количество") Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			Отбор, "Количество",, ВидСравненияКомпоновкиДанных.Заполнено, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ФактПоСтатьямВлияющимНаПоказателиБюджетов(ОтборПравил, Параметры, РазворачиватьПериод = Ложь, ПересчитыватьВВалюту = Истина) Экспорт
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	// Дополним отбором, обеспечивающим выбор только статей, влияющих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.Заполнено);
	КонецЕсли;
	
	// Установка отборов.
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаОтбораСтатей = ФинансоваяОтчетностьСервер.НоваяСхема();
	НаборЗапрос = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(
		СхемаОтбораСтатей, Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"), "СвязиПоказателейБюджетов");
	НаборЗапрос.Запрос =
	"ВЫБРАТЬ
	|	СвязиПоказателейБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов КАК ПоказательБюджетов
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов";
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "СтатьяБюджетов");
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаОтбораСтатей, НастройкиКомпоновкиДанных, ОтборПравил, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	СтатьиБюджетовПоПоказателям = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаОтбораСтатей, НастройкиКомпоновкиДанных);
	МассивСтатей = СтатьиБюджетовПоПоказателям.ВыгрузитьКолонку("СтатьяБюджетов");
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборПравил.Отбор, "СтатьяБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(ОтборПравил, "СтатьяБюджетов", МассивСтатей, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ФактПоСтатьямБюджетов = ФактПоСтатьямБюджетов(ОтборПравил,
		Параметры,
		Ложь,
		Параметры.ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом);
	
	СхемаКомпоновкиДанных = ФинансоваяОтчетностьСервер.НоваяСхема();
	НастройкиКомпоновкиДанных = Новый НастройкиКомпоновкиДанных;
	
	// Наборы данных схемы
	НаборСвязиПоказателейБюджетов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"СвязиПоказателейБюджетов");
	
	ТекстЗначенийАналитик = "";
	ТекстТрансляцииАналитик = "";
	ТекстАдресовТрансляции = "";
	ТекстВидовАналитикиПоказателяСвязи = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстЗначенийАналитик = ТекстЗначенийАналитик + ?(ТекстЗначенийАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.Аналитика%1 КАК ЗначениеАналитика%1",
				НомерАналитики);
		
		ТекстТрансляцииАналитик = ТекстТрансляцииАналитик + ?(ТекстТрансляцииАналитик = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.ТранслироватьАналитику%1 КАК ТранслироватьАналитику%1",
				НомерАналитики);
		
		ТекстАдресовТрансляции = ТекстАдресовТрансляции + ?(ТекстАдресовТрансляции = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СвязиПоказателейБюджетов.АдресТрансляцииАналитики%1 КАК АдресТрансляцииАналитики%1",
				НомерАналитики);
		
		ТекстВидовАналитикиПоказателяСвязи = ТекстВидовАналитикиПоказателяСвязи
			+ ?(ТекстВидовАналитикиПоказателяСвязи = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ПоказателиБюджетов.ВидАналитики%1 КАК ПоказательБюджетовВидАналитики%1",
				НомерАналитики);
	КонецЦикла;
	ТестЗапроса =
	"ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка КАК ПоказательБюджетов,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	ПоказателиБюджетов.АналитикаВалюты.ЗаполнениеВалюты КАК ПолеВалютыАналитики,
	|	СвязиПоказателейБюджетов.СтатьяБюджетов КАК СтатьяБюджетов,
	|	СвязиПоказателейБюджетов.Расход КАК Расход,
	|	СвязиПоказателейБюджетов.Коэффициент КАК Коэффициент,
	|	&ТекстВидовАналитикиПоказателяСвязи,
	|	&ТекстЗначенийАналитик,
	|	&ТекстТрансляцииАналитик,
	|	&ТекстАдресовТрансляции
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|	ПО
	|		СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = ПоказателиБюджетов.Ссылка";
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстЗначенийАналитик", ТекстЗначенийАналитик);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстТрансляцииАналитик", ТекстТрансляцииАналитик);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстАдресовТрансляции", ТекстАдресовТрансляции);
	ТестЗапроса = СтрЗаменить(ТестЗапроса, "&ТекстВидовАналитикиПоказателяСвязи", ТекстВидовАналитикиПоказателяСвязи);
	
	НаборСвязиПоказателейБюджетов.Запрос = ТестЗапроса;
	
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "ПоказательБюджетов"); 
	
	НаборФактПоСтатьямБюджетов = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ФактПоСтатьямБюджетов");
	НаборФактПоСтатьямБюджетов.ИмяОбъекта = "ФактПоСтатьямБюджетов";
	
	Ресурсы = Новый Структура;
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		Ресурсы.Вставить("Сумма", "Сумма");
		Ресурсы.Вставить("СуммаВал", "СуммаВВалютеХранения");
	КонецЕсли;
	Если Параметры.Показатели.Свойство("Количество") Тогда
		Ресурсы.Вставить("Количество", "Количество");
	КонецЕсли;
	
	Для каждого Колонка Из ФактПоСтатьямБюджетов.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборФактПоСтатьямБюджетов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
		НовоеПоле.ОграничениеИспользования.Условие = Истина;
		Если Не Ресурсы.Свойство(ИмяПоля) Тогда
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	// Связи наборов данных
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ФактПоСтатьямБюджетов";
	Связь.ВыражениеИсточник = "СтатьяБюджетов";
	Связь.НаборДанныхПриемник = "СвязиПоказателейБюджетов";
	Связь.ВыражениеПриемник = "СтатьяБюджетов";
	
	Если РазворачиватьПериод Тогда
		Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
			ЕстьПолеРегистратор = НаборФактПоСтатьямБюджетов.Поля.Найти("Регистратор") <> Неопределено;
			ЕстьПолеПериод = НаборФактПоСтатьямБюджетов.Поля.Найти("Период") <> Неопределено;
			Если Не ЗначениеЗаполнено(Периодичность) Тогда
				Поле = "Регистратор";
				Если ЕстьПолеРегистратор Тогда
					Выражение = "Регистратор";
				Иначе
					Выражение = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
			Иначе
				Поле = ФинансоваяОтчетностьКлиентСервер.СтрокиПериода(Периодичность).Период;
				Если ЕстьПолеПериод Тогда 
					Выражение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"НАЧАЛОПЕРИОДА(Период, ""%1"")",
						ФинансоваяОтчетностьКлиентСерверПовтИсп.ПериодичностьСтрокой(Периодичность));
				Иначе
					Выражение = "ДАТАВРЕМЯ(1,1,1)";
				КонецЕсли;
			КонецЕсли;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, Поле, Выражение);
			ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, Поле);
		КонецЦикла;
	КонецЕсли;
	
	// Вычисляемые поля аналитики
	ВыраженияАналитики = Новый Структура;
	ШаблонВыражения =
	"ВЫБОР
	|	КОГДА КоличествоИспользуемыхАналитик < %НомерАналитики
	|		ТОГДА %ПустоеЗначениеАналитики%
	|	КОГДА НЕ ТранслироватьАналитику%НомерАналитики
	|		ТОГДА ЗначениеАналитика%НомерАналитики";
	Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
		ШаблонВыражения = ШаблонВыражения + Символы.ПС
			+ 	"	КОГДА АдресТрансляцииАналитики%НомерАналитики = " + Сч + "
			  	|		ТОГДА Аналитика" + Сч;
	КонецЦикла;
	ШаблонВыражения = ШаблонВыражения + Символы.ПС + "КОНЕЦ";
	ШаблонВыражения = СтрЗаменить(ШаблонВыражения, "%ПустоеЗначениеАналитики%", ВыражениеПустогоЗначенияАналитики());
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Выражение = СтрЗаменить(ШаблонВыражения, "%НомерАналитики", НомерАналитики);
		ИмяПоля = "Аналитика" + НомерАналитики;
		ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ИмяПоля, Выражение);
		ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, ИмяПоля); 
		ВыраженияАналитики.Вставить(ИмяПоля, Выражение);
	КонецЦикла;
	
	ТипыВидовВидыАналитик = БюджетированиеПовтИсп.ТипыВидовВидыАналитик();
	Если Параметры.Свойство("Аналитики") Тогда
		Аналитики = Параметры.Аналитики;
	Иначе
		Аналитики = ТипыВидовВидыАналитик.ВыгрузитьКолонку("Ссылка");
		Параметры.Вставить("Аналитики", Аналитики);
	КонецЕсли;
	
	ШаблонВыраженияИменованнойАналитики =
	"ВЫБОР
	|	%УсловиеПоИмениАналитики%
	|	ИНАЧЕ %ПустоеЗначениеАналитики%
	|КОНЕЦ";
	ШаблонУсловиеПоИмениАналитики =
	"КОГДА ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(%ПоказательБюджетовВидАналитики%) = ""%ИмяАналитики%""
	|		ТОГДА %ВыражениеТрансляцииАналитикиСПроверкойПоТипу%";
	
	Для Каждого СтрокаТипыВидовВидыАналитик Из ТипыВидовВидыАналитик Цикл
		ВидАналитики = СтрокаТипыВидовВидыАналитик.Ссылка;
		
		Если Аналитики.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеАналитикиПоВиду = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		
		Если ФактПоСтатьямБюджетов.Колонки.Найти(ПолеАналитикиПоВиду) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Выражение = ШаблонВыраженияИменованнойАналитики;
		
		УсловиеПоИмениАналитики = "";
		Для НомерАналитикиПоказателя = 1 По МаксимальноеКоличествоАналитик Цикл
		
			ЧастьУсловия = СтрЗаменить(ШаблонУсловиеПоИмениАналитики,
				"%ПоказательБюджетовВидАналитики%", "ПоказательБюджетовВидАналитики" + НомерАналитикиПоказателя);
			
			ВыражениеТрансляцииАналитикиСПроверкойПоТипу = СтрЗаменить(ШаблонВыражения,
				"%НомерАналитики", НомерАналитикиПоказателя);
			ЧастьУсловия = СтрЗаменить(ЧастьУсловия,
				"%ВыражениеТрансляцииАналитикиСПроверкойПоТипу%",
				ВыражениеТрансляцииАналитикиСПроверкойПоТипу);
			УсловиеПоИмениАналитики = УсловиеПоИмениАналитики
				+ ?(УсловиеПоИмениАналитики = "", "", " " + Символы.ПС + Символы.Таб) + ЧастьУсловия;
		КонецЦикла;
		
		Выражение = СтрЗаменить(Выражение, "%УсловиеПоИмениАналитики%", УсловиеПоИмениАналитики);
		Выражение = СтрЗаменить(Выражение, "%ИмяАналитики%", ПолеАналитикиПоВиду);
		
		Выражение = СтрЗаменить(Выражение, "%ПустоеЗначениеАналитики%", ВыражениеПустогоЗначенияАналитики());
		
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ВычисляемоеПоле.ПутьКДанным = ПолеАналитикиПоВиду;
		ВычисляемоеПоле.Выражение   = Выражение;
		ВычисляемоеПоле.ТипЗначения = СтрокаТипыВидовВидыАналитик.ТипЗначения;
		
	КонецЦикла;
	
	ТекстУсловийПоАдресуВалюты = "ВЫБОР"; //@Query-part
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстУсловийПоАдресуВалюты = ТекстУсловийПоАдресуВалюты + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"				КОГДА АдресАналитикиВалюта = %1 ТОГДА %2",
				НомерАналитики,
				ВыраженияАналитики["Аналитика" + НомерАналитики]);
	КонецЦикла;
	ТекстУсловийПоАдресуВалюты = ТекстУсловийПоАдресуВалюты + "
	|			КОНЕЦ";
	
	ВыражениеВалюта =
	"ВЫБОР 
	|	КОГДА НЕ ВалютаОпределяетсяАналитикой 
	|		ТОГДА ВалютаХранения
	|	ИНАЧЕ
	|		ВЫРАЗИТЬ(БюджетнаяОтчетностьВыводСервер.Подключаемый_ЗначениеИзАналитики(
	|			&КэшЗначенийАналитик, 
	|			%1, 
	|			ПолеВалютыАналитики,
	|			ВалютаХранения), %2)
	|	КОНЕЦ";
	ВыражениеВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ВыражениеВалюта,
		ТекстУсловийПоАдресуВалюты, """" + "Справочник.Валюты" + """");
	ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных,
			"ВалютаХранения",
			ВыражениеВалюта,,,
			Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ДобавитьПолеГруппировки(НастройкиКомпоновкиДанных, "ВалютаХранения");
	
	ДобавитьПараметр(СхемаКомпоновкиДанных, "КэшЗначенийАналитик", Новый Соответствие);
	ДобавитьПараметр(СхемаКомпоновкиДанных, "Валюта", Параметры.ВалютаОтчета);
	
	ВыражениеПриход = "ВЫБОР КОГДА Расход ТОГДА 0 ИНАЧЕ Коэффициент * %Поле КОНЕЦ";
	ВыражениеРасход = "ВЫБОР КОГДА Расход ТОГДА Коэффициент * %Поле ИНАЧЕ 0 КОНЕЦ";
	
	Для каждого Ресурс Из Ресурсы Цикл
		
		РесурсПриход = Ресурс.Ключ + "Приход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсПриход, 
			СтрЗаменить(ВыражениеПриход, "%Поле", Ресурс.Значение), 
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсПриход);
		
		РесурсРасход = Ресурс.Ключ + "Расход";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиДанных, 
			РесурсРасход, 
			СтрЗаменить(ВыражениеРасход, "%Поле", Ресурс.Значение),
			"Сумма");
		КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(НастройкиКомпоновкиДанных, РесурсРасход);
		
	КонецЦикла;
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ОтборПравил, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ОтключитьВыводОбщихИтогов(НастройкиКомпоновкиДанных);
	
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ФактПоСтатьямБюджетов", ФактПоСтатьямБюджетов);
	
	ТаблицаФакт = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ВнешниеНаборыДанных);
	
	Если Параметры.Показатели.Свойство("Сумма") Тогда
		ПересчитатьТаблицуДанныхВВалюту(ТаблицаФакт, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта);
	КонецЕсли;
	
	Возврат ТаблицаФакт;
	
КонецФункции

Функция ПолеРесурсаБухгалтерии(ПолеСумма, ТипИтога) Экспорт
	
	ИмяТипИтога = ОбщегоНазначения.ИмяЗначенияПеречисления(ТипИтога);
	Если ИмяТипИтога = "Сальдо" Тогда
		Если ПолеСумма = "Количество" Тогда
			ПолеРесурса = "КоличествоСальдо";
		ИначеЕсли ПолеСумма = "Сумма" Тогда
			ПолеРесурса = "СуммаСальдо";
		ИначеЕсли ПолеСумма = "СуммаВВалюте" Тогда
			ПолеРесурса = "СуммаВВалютеСальдо";
		Иначе
			ПолеРесурса = СтрЗаменить(ПолеСумма + ИмяТипИтога, " ","");
		КонецЕсли;
	ИначеЕсли ИмяТипИтога = "СальдоДт" Тогда
		Если ПолеСумма = "Количество" Тогда
			ПолеРесурса = "КоличествоСальдоДт";
		ИначеЕсли ПолеСумма = "Сумма" Тогда
			ПолеРесурса = "СуммаСальдоДт";
		ИначеЕсли ПолеСумма = "СуммаВВалюте" Тогда
			ПолеРесурса = "СуммаВВалютеСальдоДт";
		Иначе
			ПолеРесурса = СтрЗаменить(ПолеСумма + ИмяТипИтога, " ","");
		КонецЕсли;
	ИначеЕсли ИмяТипИтога = "СальдоКт" Тогда
		Если ПолеСумма = "Количество" Тогда
			ПолеРесурса = "КоличествоСальдоКт";
		ИначеЕсли ПолеСумма = "Сумма" Тогда
			ПолеРесурса = "СуммаСальдоКт";
		ИначеЕсли ПолеСумма = "СуммаВВалюте" Тогда
			ПолеРесурса = "СуммаВВалютеСальдоКт";
		Иначе
			ПолеРесурса = СтрЗаменить(ПолеСумма + ИмяТипИтога, " ","");
		КонецЕсли;
	Иначе
		ПолеРесурса = СтрЗаменить(ПолеСумма + ИмяТипИтога, " ","");
	КонецЕсли;
	
	Возврат ПолеРесурса;
	
КонецФункции

Процедура ДобавитьПолеГруппировки(Настройки, Поле)
	
	Если Настройки.Структура.Количество() = 0 Тогда
		Группировка = ФинансоваяОтчетностьСервер.НоваяГруппировка(Настройки.Структура);
	Иначе
		Группировка = Настройки.Структура[0];
	КонецЕсли;
	
	ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, Поле);
	
КонецПроцедуры

Функция ДобавитьСтрокуВТаблицуДанных(ТаблицаФакта, Строка, Правило)
	
	НоваяСтрока = ТаблицаФакта.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Правило);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Если ЗначениеЗаполнено(Правило["ВидАналитики" + НомерАналитики])
			И Не ЗначениеЗаполнено(НоваяСтрока["Аналитика" + НомерАналитики]) Тогда
			НоваяСтрока["Аналитика" + НомерАналитики] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьНаборПериодовНефинансовогоПоказателя(СхемаКомпоновкиДанных, Параметры, Правило)
	
	ТаблицаПериодов = Параметры.ТаблицаПериодов;
	
	ТаблицаПериодовПоДатамУстановки = Новый ТаблицаЗначений;
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("Период");
	ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("ПериодУстановки");
	
	Если Не Правило.ПоПериодам Тогда
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
			ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
			Пока ПериодУстановки < СтрокаТаблицыПериодов.ДатаОкончания Цикл
				НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
				НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
				НоваяСтрока.ПериодУстановки = ПериодУстановки;
				ПериодУстановки = БюджетированиеКлиентСервер.ДобавитьИнтервал(ПериодУстановки, Правило.Периодичность, 1);
			КонецЦикла;
		КонецЦикла;
	Иначе
		ЗаполнятьПоПодпериодам = Ложь;
		Если Параметры.Свойство("ТаблицаПодпериодов") Тогда
			ЗаполнятьПоПодпериодам = Истина;
			ТаблицаПериодовПоДатамУстановки.Колонки.Добавить("НомерПодпериода");
			ТаблицаПериодов = Параметры.ТаблицаПодпериодов;
			ФинансоваяОтчетностьСервер.НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, "НомерПодпериода", "НомерПодпериода");
		КонецЕсли;
		Для каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл
			НоваяСтрока = ТаблицаПериодовПоДатамУстановки.Добавить();
			НоваяСтрока.Период = СтрокаТаблицыПериодов.ДатаНачала;
			НоваяСтрока.ПериодУстановки = СтрокаТаблицыПериодов.ДатаНачала;
			Если ЗаполнятьПоПодпериодам Тогда
				НоваяСтрока.ПериодУстановки = СтрокаТаблицыПериодов.ДатаУстановки;
				НоваяСтрока.НомерПодпериода = СтрокаТаблицыПериодов.НомерПодпериода;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборТаблицаПериодовПоДатамУстановки = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ТаблицаПериодовПоДатамУстановки");
	НаборТаблицаПериодовПоДатамУстановки.ИмяОбъекта = "ТаблицаПериодовПоДатамУстановки";
	
	Для каждого Колонка Из ТаблицаПериодовПоДатамУстановки.Колонки Цикл
		ИмяПоля = Колонка.Имя;
		НовоеПоле = НаборТаблицаПериодовПоДатамУстановки.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяПоля;
		НовоеПоле.ПутьКДанным = ИмяПоля;
	КонецЦикла;
	
	Связь = СхемаКомпоновкиДанных.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = "ТаблицаПериодовПоДатамУстановки";
	Если Параметры.Свойство("ВыражениеНачалоПериода") Тогда
		Связь.ВыражениеИсточник = СтрЗаменить(Параметры.ВыражениеНачалоПериода, "&" + "НАЧАЛОПЕРИОДА", "ПЕРИОДУСТАНОВКИ");
	Иначе
		Связь.ВыражениеИсточник = "ПериодУстановки";
	КонецЕсли;
	Связь.НаборДанныхПриемник = СхемаКомпоновкиДанных.НаборыДанных[0].Имя;
	Связь.ВыражениеПриемник = "Период";
	Связь.Параметр = "Период";
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаПериодовПоДатамУстановки", ТаблицаПериодовПоДатамУстановки);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Функция ПреобразоватьВВыражениеСКД(ВыражениеЯзыкаЗапросов, Знач ЧисловоеВыражение = Ложь, Знач ВыражениеАналитики = Ложь) Экспорт
	
	ВыражениеСКД = ВРег(ВыражениеЯзыкаЗапросов); 
	
	Периоды = Новый Структура;
	Периоды.Вставить("ДЕНЬ",					"""ДЕНЬ""");
	Периоды.Вставить("НЕДЕЛЯ",					"""НЕДЕЛЯ""");
	Периоды.Вставить("ДЕКАДА",					"""ДЕКАДА""");
	Периоды.Вставить("МЕСЯЦ",					"""МЕСЯЦ""");
	Периоды.Вставить("КВАРТАЛ",					"""КВАРТАЛ""");
	Периоды.Вставить("ПОЛУГОДИЕ",				"""ПОЛУГОДИЕ""");
	Периоды.Вставить("ГОД",						"""ГОД""");
	
	Для каждого Период Из Периоды Цикл
		// Уточняем поведение для однокоренных слов
		Если Период.Ключ = "ГОД" И СтрНайти(ВыражениеСКД, "ПОЛУГОДИЕ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыражениеСКД = СтрЗаменить(ВыражениеСКД, Период.Ключ, Период.Значение);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВыражениеЯзыкаЗапросов) Тогда
		Если ЧисловоеВыражение Тогда
			ВыражениеСКД = "0";
		ИначеЕсли ВыражениеАналитики Тогда
			ВыражениеСКД = ВыражениеПустогоЗначенияАналитики();
		Иначе
			ВыражениеСКД = "НЕОПРЕДЕЛЕНО";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВыражениеСКД;
	
КонецФункции

// Возвращает значение настройки СКД.
// 
// Параметры:
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
// 	ИмяНастройки - Строка - Имя настройки.
// Возвращаемое значение:
// 	Произвольный - значение настройки.
Функция ЗначениеНастройкиСКД(КомпоновщикНастроек, ИмяНастройки) Экспорт
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраКомпоновкиДанных")
			И Строка(ПользовательскаяНастройка.Параметр) = ИмяНастройки Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.Параметр) = ИмяНастройки Тогда
			Возврат ПользовательскаяНастройка.Значение;
		КонецЕсли;
	КонецЦикла;
		
КонецФункции

// Возвращает шаблон таблицы фактических данных.
// 
// Параметры:
// 	Параметры - Структура - Описание:
// * ВалютаОтчета - СправочникСсылка.Валюты -
// * ВалютаУпр - СправочникСсылка.Валюты -
// * ВалютаРегл - СправочникСсылка.Валюты -
// * ВалютаМеждународ - СправочникСсылка.Валюты -
// * Период - СтандартныйПериод -
// * Периодичность - ПеречислениеСсылка.Периодичность, Неопределено -
// * ОстаткиТолькоНаНачалоПериода - Булево -
// * ВозвращатьУпрИРеглСуммы - Булево -
// * ПоПравиламПолученияДанных - Булево -
// * Показатели - Структура - Структура со свойствами:
// ** Количество - Произвольный -
// ** Сумма - Произвольный -
// * ФактПоСтатьямВлияющимНаПоказателиБюджетовДополнятьХранимымФактом - Булево -
// * ВидыАналитик - Массив из ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// * ПоОрганизациям - Булево -
// * ПоПодразделениям - Булево -
// * ПоРегистратору - Булево -
// * ДополнительныйОтбор - Структура - Структура со свойствами:
// ** Ключ - Произвольный -
// ** Значение - Произвольный -
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с колонками:
// * ИндексНФП - Число -
// * ИД_Источника - Строка -
// * СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
// * ПоказательБюджетов - СправочникСсылка.ПоказателиБюджетов -
// * НефинансовыйПоказатель - СправочникСсылка.НефинансовыеПоказателиБюджетов -
// * ВидПоказателя - ПеречислениеСсылка.ВидыНефинансовыхПоказателей -
// * Период - Дата -
// * НачалоПериода - Дата - 
// * КонецПериода - Дата -
// * Сценарий - СправочникСсылка.Сценарии -
// * Организация - СправочникСсылка.Организации -
// * Подразделение - СправочникСсылка.СтруктураПредприятия -
// * Валюта - СправочникСсылка.Валюты -
// * ВалютаХранения - СправочникСсылка.Валюты -
// * ПериодКурса - Дата -
// * ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения -
// * КоличествоНачальныйОстаток - Число -
// * СуммаНачальныйОстаток - Число -
// * СуммаВалНачальныйОстаток - Число -
// * КоличествоПриход - Число -
// * СуммаПриход - Число -
// * СуммаВалПриход - Число -
// * КоличествоРасход - Число -
// * СуммаРасход - Число -
// * СуммаВалРасход - Число -
// * ЗначениеПоказателя - Число -
// * НомерПодпериода - Число -
// * Регистратор - ДокументСсылка -
Функция ШаблонТаблицыДанныхПоВидуБюджета(Параметры)
	
	ОписаниеТиповДата =  Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповАналитики  = ВсеТипыАналитик();
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3));
	ОписаниеТиповСумма = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
	ОписаниеТиповЗначениеНефинансовогоПоказателя = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20,6)); 
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаФакта = Новый ТаблицаЗначений;
	
	ТаблицаФакта.Колонки.Добавить("ИндексНФП", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	ТаблицаФакта.Колонки.Добавить("ИД_" + "Источника", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50)));
	МассивТиповСтатьи = Новый Массив;
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.СтатьиБюджетов"));
	МассивТиповСтатьи.Добавить(Тип("СправочникСсылка.ПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("СтатьяБюджетов", Новый ОписаниеТипов(МассивТиповСтатьи));
	ТаблицаФакта.Колонки.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
	
	ТаблицаФакта.Колонки.Добавить("НефинансовыйПоказатель", Новый ОписаниеТипов("СправочникСсылка.НефинансовыеПоказателиБюджетов"));
	ТаблицаФакта.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНефинансовыхПоказателей"));
	
	Если ЗначениеЗаполнено(Параметры.Периодичность) Тогда
		ТаблицаФакта.Колонки.Добавить("Период", ОписаниеТиповДата);
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("НачалоПериода", ОписаниеТиповДата);
	ТаблицаФакта.Колонки.Добавить("КонецПериода", ОписаниеТиповДата);
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТаблицаФакта.Колонки.Добавить("Аналитика" + НомерАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	Для каждого ВидАналитики Из Параметры.ВидыАналитик Цикл
		КолонкаВидАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
		ТаблицаФакта.Колонки.Добавить(КолонкаВидАналитики, ОписаниеТиповАналитики);
	КонецЦикла;
	
	ТаблицаФакта.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	
	Если Параметры.ПоОрганизациям Тогда
		ТаблицаФакта.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонецЕсли;
	Если Параметры.ПоПодразделениям Тогда
		ТаблицаФакта.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТаблицаФакта.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ВалютаХранения", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаФакта.Колонки.Добавить("ПериодКурса", ОписаниеТиповДата);
	
	ТаблицаФакта.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	ТаблицаФакта.Колонки.Добавить("КоличествоНачальныйОстаток", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаНачальныйОстаток", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалНачальныйОстаток", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоПриход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаПриход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалПриход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("КоличествоРасход", ОписаниеТиповКоличество);
	ТаблицаФакта.Колонки.Добавить("СуммаРасход", ОписаниеТиповСумма);
	ТаблицаФакта.Колонки.Добавить("СуммаВалРасход", ОписаниеТиповСумма);
	
	ТаблицаФакта.Колонки.Добавить("ЗначениеПоказателя", ОписаниеТиповЗначениеНефинансовогоПоказателя);
	ТаблицаФакта.Колонки.Добавить("НомерПодпериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)));
	
	Если Параметры.ПоРегистратору Тогда
		ТаблицаФакта.Колонки.Добавить("Регистратор");
	КонецЕсли;
	
	Возврат ТаблицаФакта;
	
КонецФункции

Функция ОчищаемыеКоллекцииПриПолученииФакта()
	ОчищаемыеКоллекции = Новый Соответствие;
	ОчищаемыеКоллекции.Вставить("ВычисляемыеПоля");
	ОчищаемыеКоллекции.Вставить("ПоляИтога");
	
	Возврат ОчищаемыеКоллекции;
КонецФункции

Процедура ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, Знач ЭлементОбъединенногоФакта)
	
	Если ТипЗнч(ЭлементОбъединенногоФакта) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
		
		ЭлементОбъединенногоФакта.Запрос = СхемыЗапросов.ДобавитьПолеВыборкиВЗапрос(
			ЭлементОбъединенногоФакта.Запрос, 
			"&" + ИмяКолонки, 
			ИмяКолонки, , 
			Истина, 
			Истина);
		
	ИначеЕсли ТипЗнч(ЭлементОбъединенногоФакта) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
		
		Для Каждого ЭлементОбъединенногоФакта Из ЭлементОбъединенногоФакта.Элементы Цикл 
			ДобавитьПолеВыборкиВЗапросРекурсивно(ИмяКолонки, ЭлементОбъединенногоФакта);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Копирует все правила получения фактических данных от статьи или показателя бюджетов - источника для статьи или показателя бюджетов - приемника
//
// Параметры:
// Источник - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
// Приемник - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
//
Процедура СкопироватьПравилаПолученияФактическихДанных(Источник, Приемник) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник) Или Не ЗначениеЗаполнено(Приемник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Ссылка КАК Ссылка,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.Наименование КАК Наименование,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.КомпоновщикНастроек КАК КомпоновщикНастроек,
	|	ПравилаПолученияФактаПоСтатьямБюджетов.СхемаИсточникаДанных КАК СхемаИсточникаДанных
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = &Источник";
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ПоказателиБюджетов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПравилаПолученияФактаПоСтатьямБюджетов", "ПравилаПолученияФактаПоПоказателямБюджетов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтатьяБюджетов", "ПоказательБюджетов");
		ПолеИсточника = "ПоказательБюджетов";
	Иначе
		ПолеИсточника = "СтатьяБюджетов";
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Не удалось скопировать правило %1 по причине: %2';
							|en = 'Cannot copy the %1 rule. Reason: %2'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПравилоОбъект = Выборка.Ссылка.Скопировать();
		ПравилоОбъект[ПолеИсточника] = Приемник;
		Если ТипЗнч(Выборка.КомпоновщикНастроек) = Тип("ХранилищеЗначения") Тогда
			ПравилоОбъект.КомпоновщикНастроек = Новый ХранилищеЗначения(Выборка.КомпоновщикНастроек.Получить());
		КонецЕсли;
		Если ТипЗнч(Выборка.СхемаИсточникаДанных) = Тип("ХранилищеЗначения") Тогда
			ПравилоОбъект.СхемаИсточникаДанных = Новый ХранилищеЗначения(Выборка.СхемаИсточникаДанных.Получить());
		КонецЕсли;
		Попытка
			ПравилоОбъект.Записать();
		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Наименование,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ХранимыеМакетыБюджета

Функция ФайлыСохранногоМакета(Бюджет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.Ссылка,
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла
		|ИЗ
		|	Справочник.ЭкземплярБюджетаПрисоединенныеФайлы КАК ЭкземплярБюджетаПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ТипыСлужебныхФайловЭкземпляраБюджета КАК ТипыСлужебныхФайловЭкземпляраБюджета
		|		ПО ЭкземплярБюджетаПрисоединенныеФайлы.ТипСлужебногоФайла = ТипыСлужебныхФайловЭкземпляраБюджета.Ссылка
		|ГДЕ
		|	ЭкземплярБюджетаПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ ЭкземплярБюджетаПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Бюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет Тогда
			Результат.Вставить("ХранимыйБюджет", ВыборкаДетальныеЗаписи.Ссылка);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные Тогда
			Результат.Вставить("ВспомогательныеДанные", ВыборкаДетальныеЗаписи.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает восстановленную структуру
// 
// Параметры:
// 	СсылкаНаБюджет - ДокументСсылка.ЭкземплярБюджета -
// 	ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	ВерсияВидаБюджета - Строка - 
// Возвращаемое значение:
// 	Структура - содержит:
// 	* ВидБюджета - СправочникСсылка.ВидыБюджетов -
// 	* ВерсияВидаБюджета - Строка -
// 	* Результат - ТабличныйДокумент -
// 	* ПараметрыВыводаВидаБюджета - см. БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета
//
Функция ВосстановитьХранимыйМакет(СсылкаНаБюджет, ВидБюджета, ВерсияВидаБюджета) Экспорт
	
	Файлы = БюджетированиеСервер.ФайлыСохранногоМакета(СсылкаНаБюджет);
	Если Не Файлы.Свойство("ХранимыйБюджет")
		Или Не Файлы.Свойство("ВспомогательныеДанные") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВспомогательныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(Файлы.ВспомогательныеДанные); // ДвоичныеДанные
	ИмяФайлаВспомогательныеДанные = ПолучитьИмяВременногоФайла("dat");
	ВспомогательныеДанные.Записать(ИмяФайлаВспомогательныеДанные);
	ВспомогательныеДанные = ЗначениеИзФайла(ИмяФайлаВспомогательныеДанные);
	
	Если ТипЗнч(ВспомогательныеДанные) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ВспомогательныеДанные.Свойство("ВидБюджета")
		ИЛИ Не ВспомогательныеДанные.Свойство("ВерсияВидаБюджета") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВспомогательныеДанные.ВидБюджета <> ВидБюджета
		ИЛИ ВспомогательныеДанные.ВерсияВидаБюджета <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидБюджета, "ВерсияДанных") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранимыйБюджет = РаботаСФайлами.ДвоичныеДанныеФайла(Файлы.ХранимыйБюджет);
	ИмяФайлаХранимыйБюджет = ПолучитьИмяВременногоФайла("mxl");
	ХранимыйБюджет.Записать(ИмяФайлаХранимыйБюджет);
	ХранимыйБюджет = Новый ТабличныйДокумент;
	ХранимыйБюджет.Прочитать(ИмяФайлаХранимыйБюджет);
	
	РезультатВосстановления = ВспомогательныеДанные;
	РезультатВосстановления.Вставить("Результат", ХранимыйБюджет);
	
	ПараметрыВывода = БюджетнаяОтчетностьРасчетКэшаСервер.ПолучитьПараметрыВыводаВидаБюджета(
							ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	ПараметрыВывода.Вставить("ИндексыТаблицыДанныхЯчеек", Новый Соответствие);
	РезультатВосстановления.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВывода);
	
	УдалитьФайлы(ИмяФайлаВспомогательныеДанные);
	УдалитьФайлы(ИмяФайлаХранимыйБюджет);
	
	Возврат РезультатВосстановления;
	
КонецФункции

#КонецОбласти

#Область ПроведениеЭкземпляровБюджета

Функция ЗаполнитьКэшПараметровСтатей(СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	ТаблицаСтатейИПоказателей = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек.Скопировать(,"СтатьяБюджетов");
	ТаблицаСтатейИПоказателей.Свернуть("СтатьяБюджетов");
	
	СтатьиИЦелевыеПоказатели = ТаблицаСтатейИПоказателей.ВыгрузитьКолонку("СтатьяБюджетов");
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Справочники.СтатьиБюджетов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтатьиИЦелевыеПоказатели, Неопределено);
	
	СоответствиеСтатейПоказателей = Новый Соответствие;
	
	ТекстВидыАналитикиСтатей = "";
	ТекстВидыАналитикиПоказателей = "";
	ТекстТипВидовАналитикСтатей = "";
	ТекстТипВидовАналитикПоказателей = "";
	ТекстЗаполнениеВалютыСтатей = "";
	ТекстЗаполнениеВалютыПоказателей = "";
	Для НомерВАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ТекстВидыАналитикиСтатей = ТекстВидыАналитикиСтатей + ?(ТекстВидыАналитикиСтатей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СтатьиБюджетов.ВидАналитики%1 КАК ВидАналитики%1",
				НомерВАналитики);
		
		ТекстВидыАналитикиПоказателей = ТекстВидыАналитикиПоказателей + ?(ТекстВидыАналитикиПоказателей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ПоказателиБюджетов.ВидАналитики%1",
				НомерВАналитики);
		
		ТекстТипВидовАналитикСтатей = ТекстТипВидовАналитикСтатей + ?(ТекстТипВидовАналитикСтатей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СтатьиБюджетов.ВидАналитики%1.ТипЗначения КАК ВидАналитики%1ТипЗначения",
				НомерВАналитики);
		
		ТекстТипВидовАналитикПоказателей = ТекстТипВидовАналитикПоказателей + ?(ТекстТипВидовАналитикПоказателей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ПоказателиБюджетов.ВидАналитики%1.ТипЗначения",
				НомерВАналитики);
		
		ТекстЗаполнениеВалютыСтатей = ТекстЗаполнениеВалютыСтатей + ?(ТекстЗаполнениеВалютыСтатей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"СтатьиБюджетов.ВидАналитики%1.ЗаполнениеВалюты КАК ВидАналитики%1ЗаполнениеВалюты",
				НомерВАналитики);
		
		ТекстЗаполнениеВалютыПоказателей = ТекстЗаполнениеВалютыПоказателей + ?(ТекстЗаполнениеВалютыПоказателей = "", "", "," + Символы.ПС + Символы.Таб)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"ПоказателиБюджетов.ВидАналитики%1.ЗаполнениеВалюты",
				НомерВАналитики);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиБюджетов.Ссылка КАК Ссылка,
	|	&ТекстВидыАналитикиСтатей,
	|	&ТекстТипВидовАналитикСтатей,
	|	&ТекстЗаполнениеВалютыСтатей,
	|	СтатьиБюджетов.УчитыватьПоВалюте КАК УчитыватьПоВалюте,
	|	СтатьиБюджетов.ВалютаОпределяетсяАналитикой КАК ВалютаОпределяетсяАналитикой,
	|	СтатьиБюджетов.АдресАналитикиВалюта КАК АдресАналитикиВалюта,
	|	СтатьиБюджетов.КоличествоИспользуемыхАналитик КАК КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.СтатьиБюджетов КАК СтатьиБюджетов
	|ГДЕ
	|	СтатьиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиБюджетов.Ссылка,
	|	&ТекстВидыАналитикиПоказателей,
	|	&ТекстТипВидовАналитикПоказателей,
	|	&ТекстЗаполнениеВалютыПоказателей,
	|	ПоказателиБюджетов.УчитыватьПоВалюте,
	|	ПоказателиБюджетов.ВалютаОпределяетсяАналитикой,
	|	ПоказателиБюджетов.АдресАналитикиВалюта,
	|	ПоказателиБюджетов.КоличествоИспользуемыхАналитик
	|ИЗ
	|	Справочник.ПоказателиБюджетов КАК ПоказателиБюджетов
	|ГДЕ
	|	ПоказателиБюджетов.Ссылка В(&СтатьиИЦелевыеПоказатели)
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстВидыАналитикиСтатей", ТекстВидыАналитикиСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстТипВидовАналитикСтатей", ТекстТипВидовАналитикСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗаполнениеВалютыСтатей", ТекстЗаполнениеВалютыСтатей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстВидыАналитикиПоказателей", ТекстВидыАналитикиПоказателей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстТипВидовАналитикПоказателей", ТекстТипВидовАналитикПоказателей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗаполнениеВалютыПоказателей", ТекстЗаполнениеВалютыПоказателей);
	
	Запрос.УстановитьПараметр("СтатьиИЦелевыеПоказатели", СтатьиИЦелевыеПоказатели);
	
	ТаблицаРеквизитов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтатьяПоказательБюджетов Из СтатьиИЦелевыеПоказатели Цикл
		
		РеквизитыСтатьи = Новый Структура;
		СтрокаТаблицыРеквизитов = ТаблицаРеквизитов.Найти(СтатьяПоказательБюджетов, "Ссылка");
		Для Каждого Колонка Из ТаблицаРеквизитов.Колонки Цикл
			Если Колонка.Имя = "Ссылка" Тогда
				Продолжить;
			КонецЕсли;
			РеквизитыСтатьи.Вставить(Колонка.Имя, СтрокаТаблицыРеквизитов[Колонка.Имя]);
		КонецЦикла;
		
		Если РеквизитыСтатьи.УчитыватьПоВалюте Тогда
			Если РеквизитыСтатьи.ВалютаОпределяетсяАналитикой Тогда
				ВидАналитикиВалюта = "ВидАналитики" + РеквизитыСтатьи.АдресАналитикиВалюта;
				ИмяРеквизита = РеквизитыСтатьи[ВидАналитикиВалюта + "ЗаполнениеВалюты"];
				РеквизитыСтатьи.Вставить("ПутьКАналитикеВалюта", ИмяРеквизита);
				РеквизитыСтатьи.Вставить("ИмяАналитикиВалюта", ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(РеквизитыСтатьи[ВидАналитикиВалюта]));
				РеквизитыСтатьи.Вставить("ВидАналитикиВалюта", РеквизитыСтатьи[ВидАналитикиВалюта]);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВидовАналитик = Новый Структура;
		Для Сч = 1 По РеквизитыСтатьи.КоличествоИспользуемыхАналитик Цикл
			ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
			ИмяАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
			СтруктураВидовАналитик.Вставить(ИмяАналитики, ВидАналитики);
		КонецЦикла;
		
		СоответствиеСтатейПоказателей.Вставить(СтатьяПоказательБюджетов, РеквизитыСтатьи);
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеСтатейПоказателей);
	
КонецФункции

Процедура ПоставитьДокументВОчередьПроведения(Документ) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
		
		Запись = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьМенеджерЗаписи();
		Запись.Документ = Документ;
		Запись.НомерЗадания = НомерЗадания;
		Запись.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Отложенное проведение экземпляров бюджета';
						|en = 'Deferred posting of Budget entry forms'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов(Ссылка=Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтложенноеПроведениеЭкземпляровБюджета);
	
	УстановитьПривилегированныйРежим(Истина);

	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияОтраженияЭкземпляровБюджетов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НомерЗадания = Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Получить();
		Константы.НомерЗаданияОтраженияЭкземпляровБюджетов.Установить(НомерЗадания + 1);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Отложенное проведение экземпляров бюджета';
						|en = 'Deferred posting of Budget entry forms'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖР, 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания КАК НомерЗадания,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета КАК ВидБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета КАК СохранятьБюджетВТабличнойФормеВЭкземпляреБюджета,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.ВидБюджета.ВерсияДанных КАК ВерсияДанных,
		|	ЗаданияКОтражениюЭкземпляровБюджета.Документ.Сценарий.Валюта КАК Валюта,
		|	ЗаданияКОтражениюЭкземпляровБюджета.ДокументПроведенОжидаетПроверки
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюЭкземпляровБюджета КАК ЗаданияКОтражениюЭкземпляровБюджета
		|ГДЕ
		|	ЗаданияКОтражениюЭкземпляровБюджета.НомерЗадания <= &НомерЗадания
		|	И (&Ссылка = НЕОПРЕДЕЛЕНО
		|			ИЛИ ЗаданияКОтражениюЭкземпляровБюджета.Документ = &Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЗадания УБЫВ";
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗадания);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеОбработанныхДокументов = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если СоответствиеОбработанныхДокументов[Выборка.Документ] = Истина Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		Если Ссылка = Неопределено Тогда
			Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Выборка.Документ.УникальныйИдентификатор());
		
			Отбор = Новый Структура();
			Отбор.Вставить("Ключ", Ключ);
			Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			
			АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если АктивныеЗадания.Количество() > 0 Тогда
				Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
					АктивноеЗадание.Отменить();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		НужнаДополнительнаяОбработкаОбъекта = Ложь;
		
		Ссылка = Выборка.Документ;
		
		ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Выборка.Документ, "ОборотыБюджетов");
		
		Движения = Новый Структура("ОборотыБюджетов");
		НаборОборотыБюджетов = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
		НаборОборотыБюджетов.Отбор.Регистратор.Установить(Ссылка);
		Движения.ОборотыБюджетов = НаборОборотыБюджетов;
		
		ОтразитьДвижения(ТаблицыДляДвижений, Движения, Ложь);
		
		НаборОборотыБюджетов = Движения.ОборотыБюджетов; // РегистрНакопленияНаборЗаписей.ОборотыБюджетов -
		НаборОборотыБюджетов.Записать(Истина);
		
		СоответствиеОбработанныхДокументов.Вставить(Выборка.Документ, Истина);
		
		Если НужнаДополнительнаяОбработкаОбъекта Тогда
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ДокументПроведенОжидаетПроверки = Истина;
			КонецЦикла;
			НаборЗаписей.Записать();
		Иначе
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюЭкземпляровБюджета.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьОтложенноеПроведениеФоновымЗаданием(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтложенноеПроведениеЭкземпляровБюджета" + Строка(Ссылка.УникальныйИдентификатор());
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Для Каждого АктивноеЗадание Из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется отложенное проведение экземпляров бюджета';
								|en = 'Deferred posting of Budget entry forms is in progress'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(Ссылка);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("БюджетированиеСервер.ВыполнитьОтложенноеПроведениеЭкземпляровБюджетов");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	
КонецПроцедуры

// Проверяет содержимое табличных частей экземпляра бюджета и корректирует их
//
// Параметры:
// 	ДанныеОбъекта - ДокументОбъект.ЭкземплярБюджета - проверяемый и изменяемый объект
// 	              - ДанныеФормыСтруктура - проверяемый и изменяемый объект из формы документа
// 	ОбъектИПараметрыРасчета - Структура - параметры бюджета, в том числе копия объекта в виде ДанныеФормыСтруктура
// 	Бюджет - ТабличныйДокумент - табличная форма бюджета, по которой производится проверка использования аналитик с помощью значений расшифровок в ячейках
// 	ДанныеРасшифровки - Произвольный -
//
Процедура ПроверитьИсправитьТЧЭкземпляраБюджета(ДанныеОбъекта, ОбъектИПараметрыРасчета, Бюджет, ДанныеРасшифровки) Экспорт
	
	// Привести типы колонок ТЧ АналитикаСтатейБюджета в соответствие к видам аналитик вида бюджета.
	Если ДанныеОбъекта.АналитикаСтатейБюджетов.Количество() > 0 Тогда
		КэшПараметровСтатей = ОбъектИПараметрыРасчета.КэшПараметровСтатей; // ФиксированноеСоответствие
		МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		
		Для Каждого СтрокаАналитикиСтатьейБюджетов Из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
			ПараметрыСтатьи = КэшПараметровСтатей.Получить(СтрокаАналитикиСтатьейБюджетов.СтатьяБюджетов);
			Если ПараметрыСтатьи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
				// Если тип аналитики не используется в видах аналитик, то значение очистится
				// Например, в ситуации когда изменили состав аналитики вида бюджета.
				ВидАналитики = ПараметрыСтатьи["ВидАналитики" + Сч];
				Если ЗначениеЗаполнено(ВидАналитики) Тогда
					Значение = БюджетированиеКлиентСервер.ПриведенноеЗначениеАналитики(СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч],
							ВидАналитики.ТипЗначения);
				Иначе
					Значение = БюджетированиеКлиентСервер.ПустоеЗначениеАналитики();
				КонецЕсли;
				СтрокаАналитикиСтатьейБюджетов["Аналитика" + Сч] = Значение;
			КонецЦикла;
		КонецЦикла;
		
		Если ТипЗнч(ДанныеОбъекта) = Тип("ДокументОбъект.ЭкземплярБюджета") Тогда
			ЗначениеВДанныеФормы(ДанныеОбъекта, ОбъектИПараметрыРасчета.Объект);
		КонецЕсли;
	КонецЕсли;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	
	Объект = ОбъектИПараметрыРасчета.Объект; // ДокументОбъект.ЭкземплярБюджета -
	ТабличныеЧастиКэш = Новый Структура;
	
	ТабличнаяЧастьКэш = Объект.АналитикаСтатейБюджетов.Выгрузить();
	ИменаКолонокИндекс = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонокИндекс = ИменаКолонокИндекс + ?(ИменаКолонокИндекс = "", "", ",") + "Аналитика" + НомерАналитики;
	КонецЦикла;
	ИменаКолонокИндекс = ИменаКолонокИндекс + ",СтатьяБюджетов,Валюта";
	ТабличнаяЧастьКэш.Индексы.Добавить(ИменаКолонокИндекс);
	
	ТабличныеЧастиКэш.Вставить("АналитикаСтатейБюджетов", ТабличнаяЧастьКэш);
	
	ТабличнаяЧастьКэш = Объект.АналитикаЗначений.Выгрузить();
	ИменаКолонокИндекс = "";
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ИменаКолонокИндекс = ИменаКолонокИндекс + ?(ИменаКолонокИндекс = "", "", ",") + "Аналитика" + НомерАналитики
			+ "," + "ВидАналитики" + НомерАналитики;
	КонецЦикла;
	ИменаКолонокИндекс = ИменаКолонокИндекс + ",РедактируемоеЗначение,КоличествоИспользуемыхАналитик";
	ТабличнаяЧастьКэш.Индексы.Добавить(ИменаКолонокИндекс);
	ТабличныеЧастиКэш.Вставить("АналитикаЗначений", ТабличнаяЧастьКэш);
	
	// Привести ТЧ в соответствие табличному документу
	СоответствиеНайденныхИД = Новый Соответствие;
	Для КоординатаХ = 1 По Бюджет.ШиринаТаблицы Цикл
		Для КоординатаУ = 1 По Бюджет.ВысотаТаблицы Цикл
			Расшифровка = Бюджет.Область(КоординатаУ, КоординатаХ).Расшифровка;
			Расшифровка = ДанныеРасшифровки[Расшифровка];
			Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
				Расшифровка = БюджетнаяОтчетностьКлиентСервер.ПреобразоватьРасшифровку(ОбъектИПараметрыРасчета, Расшифровка, Истина);
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета,
					ТабличныеЧастиКэш, Расшифровка);
				Если ИдентификаторСтроки <> Неопределено Тогда
					МассивПериодов = СоответствиеНайденныхИД[ИдентификаторСтроки];
					Если МассивПериодов = Неопределено Тогда
						МассивПериодов = Новый Массив;
						СоответствиеНайденныхИД.Вставить(ИдентификаторСтроки, МассивПериодов);
					КонецЕсли;
					МассивПериодов.Добавить(Расшифровка.ПериодПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаСтатейБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.АналитикаЗначений Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаЗначений", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ДанныеОбъекта.ОборотыПоСтатьямБюджетов Цикл
		МассивПериодов = СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки];
		Если МассивПериодов = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
			Продолжить;
		КонецЕсли;
		Если МассивПериодов.Найти(СтрокаТаблицы.ПериодПланирования) = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТаблицаИСтрока Из МассивНаУдаление Цикл
		ТабличнаяЧасть = ДанныеОбъекта[ТаблицаИСтрока.Таблица]; // ТабличнаяЧасть -
		ТабличнаяЧасть.Удалить(ТаблицаИСтрока["Строка"]);
	КонецЦикла;
	
КонецПроцедуры

// Получает идентификатор строки табличной части экземпляра бюджета по данным расшифровки.
// Является оптимизацией метода БюджетнаяОтчетностьКлиентСервер.ИдентификаторАналитикиСтатейБюджетов.
//
// Параметры:
// 	ОбъектИПараметрыРасчета - Структура - параметры бюджета, в том числе копия объекта в виде ДанныеФормыСтруктура:
// 	 *ВалютаСценария - СправочникСсылка.Валюты - Валюта сценария.
// 	ТабличныеЧастиКэш - Структура - Структура, содержащая выгруженные и проиндексированные табличные части документа:
// 	 *АналитикаСтатейБюджетов - ТаблицаЗначений - выгруженная табличная часть АналитикаСтатейБюджетов:
// 	  **ИдентификаторСтроки - Строка -
// 	  **СтатьяБюджетов - СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов -
// 	  **Аналитика1 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика2 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика3 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика4 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика5 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика6 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Валюта - СправочникСсылка.Валюты -
// 	 *АналитикаЗначений - ТаблицаЗначений - выгруженная табличная часть АналитикаЗначений:
// 	  **ИдентификаторСтроки - Строка -
// 	  **РедактируемоеЗначение - Строка -
// 	  **ВидАналитики1 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики2 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики3 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики4 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики5 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **ВидАналитики6 - ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов -
// 	  **Аналитика1 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика2 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика3 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика4 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика5 - Характеристика.АналитикиСтатейБюджетов -
// 	  **Аналитика6 - Характеристика.АналитикиСтатейБюджетов -
// 	  **КоличествоИспользуемыхАналитик - Число -
//
Функция ИдентификаторАналитикиСтатейБюджетов(ОбъектИПараметрыРасчета, ТабличныеЧастиКэш, ДанныеПоиска)
	ИдентификаторСтроки = Неопределено;
	
	ВалютаСценария = ОбъектИПараметрыРасчета.ВалютаСценария;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	СтруктураПоиска = Новый Структура;
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		СтруктураПоиска.Вставить("Аналитика" + НомерАналитики);
	КонецЦикла;
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		СтруктураПоиска.Вставить("СтатьяБюджетов");
		СтруктураПоиска.Вставить("Валюта");
		ТабличнаяЧастьКэш = ТабличныеЧастиКэш.АналитикаСтатейБюджетов;
	Иначе
		СтруктураПоиска.Вставить("РедактируемоеЗначение");
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			СтруктураПоиска.Вставить("ВидАналитики" + Сч);
		КонецЦикла;
		ТабличнаяЧастьКэш = ТабличныеЧастиКэш.АналитикаЗначений;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ДанныеПоиска.Свойство("СтатьяБюджетов") Тогда
		Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
			Если ДанныеПоиска.Свойство("Валюта") Тогда
				Если ДанныеПоиска.Валюта = Неопределено Тогда
					СтруктураПоиска.Удалить("Валюта");
				Иначе
					СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
				КонецЕсли;
			Иначе
				СтруктураПоиска.Валюта = ВалютаСценария;
			КонецЕсли;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		МаксимальныйНомерАналитики = 0;
		Для Сч = 1 По МаксимальноеКоличествоАналитик Цикл
			Если ЗначениеЗаполнено(СтруктураПоиска["ВидАналитики" + Сч]) Тогда
				МаксимальныйНомерАналитики = Сч;
			КонецЕсли;
		КонецЦикла;
		СтруктураПоиска.Вставить("КоличествоИспользуемыхАналитик", МаксимальныйНомерАналитики);
	КонецЕсли;
	
	РезультатПоиска = ТабличнаяЧастьКэш.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() <> 0 Тогда
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

// Описание
// 
// Параметры:
// 	МакетДляХранения - ТабличныйДокумент -
// 	ВспомогательныеДанные - Структура - содержит:
//		* ДанныеЯчеек - ТаблицаЗначений -
//		* ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных -
//		* ДеревоСтрокСпискаРедактирования - ДеревоЗначений -
//		* ВерсияВидаБюджета - Строка -
//		* ВидБюджета - СправочникСсылка.ВидыБюджетов - 
//		* КолонкиТаблиц - см. БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных
//		* СтильУровней - Структура - описание:
//			** Значение - см. БюджетнаяОтчетностьВыводСервер.ПолучитьКэшСтилейСтрокСпискаРедактирования
// 	СсылкаНаБюджет - ДокументСсылка.ЭкземплярБюджета - 
Процедура СохранитьХранимыйМакет(МакетДляХранения, ВспомогательныеДанные, СсылкаНаБюджет) Экспорт
	
	ИмяФайлаМакета = ПолучитьИмяВременногоФайла("mxl");
	МакетДляХранения.Записать(ИмяФайлаМакета, ТипФайлаТабличногоДокумента.MXL);
	ХранилищеМакета = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаМакета));
	
	ИмяФайлаВспомогательныхДанных = ПолучитьИмяВременногоФайла("dat");
	ЗначениеВФайл(ИмяФайлаВспомогательныхДанных, ВспомогательныеДанные);
	ХранилищеВспомогательныхДанных = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаВспомогательныхДанных));
	
	СохраненныеФайлы = ФайлыСохранногоМакета(СсылкаНаБюджет);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", СсылкаНаБюджет);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Неопределено);

	Файл = Неопределено;
	Если СохраненныеФайлы.Свойство("ХранимыйБюджет", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеМакета);
		РаботаСФайлами.ОбновитьФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Бюджет';
														|en = 'Budget'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "mxl");
		Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ХранилищеМакета, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ХранимыйБюджет;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	Если СохраненныеФайлы.Свойство("ВспомогательныеДанные", Файл) Тогда
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", ХранилищеВспомогательныхДанных);
		РаботаСФайлами.ОбновитьФайл(Файл, ПараметрыФайла);
	Иначе
		ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Вспомогательные данные бюджета';
														|en = 'Auxiliary budget data'"));
		ПараметрыФайла.Вставить("РасширениеБезТочки", "dat");
		Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ХранилищеВспомогательныхДанных, Неопределено);
		ФайлОбъект = Файл.ПолучитьОбъект();
		ФайлОбъект.ТипСлужебногоФайла = Перечисления.ТипыСлужебныхФайловЭкземпляраБюджета.ВспомогательныеДанные;
		ФайлОбъект.Записать();
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаМакета);
	УдалитьФайлы(ИмяФайлаВспомогательныхДанных);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхПоСтатьямИПоказателям

Функция РассчитатьФактПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	КолонкиТаблицыДанныхВидаБюджета = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыДанных.ВидБюджета);
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичности = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, КолонкиТаблицыДанныхВидаБюджета.Периодичности);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЗначениеЗаполнено(ИсточникДанных.ПериодичностьСмещения)
			И ЗначениеЗаполнено(ИсточникДанных.ПериодСмещения) Тогда
			Периодичности.Добавить(ИсточникДанных.ПериодичностьСмещения);
		КонецЕсли;
	КонецЦикла;
	Периодичности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Периодичности);
	Периодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	ВидыАналитик = КолонкиТаблицыДанныхВидаБюджета.ВидыАналитик;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Организация") <> Неопределено Тогда
		ПоОрганизациям = Истина;
	Иначе
		ПоОрганизациям = Ложь;
	КонецЕсли;
	Если КолонкиТаблицыДанныхВидаБюджета.Измерения.Найти("Подразделение") <> Неопределено Тогда
		ПоПодразделениям = Истина;
	Иначе
		ПоПодразделениям = Ложь;
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(
		ПараметрыДанных.ВидБюджета, ВалютаОтчета, Период, Периодичность, ВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных);
	
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ТаблицаДанныхПоВидуБюджета = ШаблонТаблицыДанныхПоВидуБюджета(Параметры);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		
		Если Не ИсточникДанных.ЕстьОнЛайновыеПравила Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
					И СценарийОтчетаФактическиеДанные)
				ИЛИ ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
					И  СценарийОтчетаИсполнениеБюджета);
		
		Если Не ИсточникДанных.ПривилегированныйРежим = Неопределено И ИсточникДанных.ПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОбороты(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			Если ИсточникДанных.ЕстьЦелевыеПоказатели = Истина Тогда
				ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
			КонецЕсли;
		ИначеЕсли ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки И ПолучатьФактическиеДанные Тогда
			ПолучитьФактПоИсточникуДанныхОстатки(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		ИначеЕсли ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Нефинансовый Тогда
			ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		КонецЕсли;
		
		Если Не ИсточникДанных.ПривилегированныйРежим = Неопределено И ИсточникДанных.ПривилегированныйРежим Тогда
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаВидаБюджета = ТаблицаДанныхПоВидуБюджета.Колонки.Найти("СуммаВВалютеНачальныйОстаток");
	Если КолонкаВидаБюджета <> Неопределено Тогда
		КолонкаВидаБюджета.Имя = "СуммаВалНачальныйОстаток";
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

#Область АльтернативныйФакт

Функция УточнитьПараметрыДанныхПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	КолонкиТаблицыДанных = Неопределено;
	Если Не ПараметрыДанных.Свойство("КолонкиТаблицыДанных", КолонкиТаблицыДанных) Тогда
		КолонкиТаблицыДанных = БюджетнаяОтчетностьРасчетКэшаСервер.КолонкиТаблицыДанных(ПараметрыДанных.ВидБюджета);
	КонецЕсли;
	
	Период = Новый СтандартныйПериод(ПараметрыДанных.НачалоПериода, ПараметрыДанных.КонецПериода);
	
	// Получаем факт только в разрезе минимальной периодичности
	Периодичности = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, КолонкиТаблицыДанных.Периодичности);
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ЗначениеЗаполнено(ИсточникДанных.ПериодичностьСмещения)
			И ЗначениеЗаполнено(ИсточникДанных.ПериодСмещения) Тогда
			Периодичности.Добавить(ИсточникДанных.ПериодичностьСмещения);
		КонецЕсли;
	КонецЦикла;
	Периодичности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Периодичности);
	МинимальнаяПериодичность = БюджетнаяОтчетностьКлиентСервер.МинимальнаяПериодичность(Периодичности);
	
	// Виды аналитик требуются для применения доп. отборов элементов вида бюджета
	// Это касается отборов по именованным аналитикам, для которых требуются расчетные поля "по имени" вида аналитики.
	ВсеВидыАналитик = КолонкиТаблицыДанных.ВидыАналитик;
	
	// Если аналитика в шапке и установлены отборы, то понадобятся поля
	ДополнительныеФильтрыПоАналитикам = Неопределено;
	Если ПараметрыДанных.Свойство("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам) 
		И НЕ ДополнительныеФильтрыПоАналитикам = Неопределено Тогда
		Для Каждого ИмяВидаАналитики Из ДополнительныеФильтрыПоАналитикам Цикл 
			ВсеВидыАналитик.Добавить(ФинансоваяОтчетностьПовтИсп.ПолеБюджетногоОтчетаПоИмени(ИмяВидаАналитики.Ключ));
		КонецЦикла;
	КонецЕсли;
	
	ПоОрганизациям = Ложь;
	Если Не ПараметрыДанных.Свойство("ПоОрганизациям", ПоОрганизациям) Тогда
		ПоОрганизациям = (КолонкиТаблицыДанных.Измерения.Найти("Организация") <> Неопределено);
	КонецЕсли;
	
	ПоПодразделениям = Ложь;
	Если Не ПараметрыДанных.Свойство("ПоПодразделениям", ПоПодразделениям) Тогда
		ПоПодразделениям = (КолонкиТаблицыДанных.Измерения.Найти("Подразделение") <> Неопределено);
	КонецЕсли;
	
	ВидБюджета = Неопределено;
	ПараметрыДанных.Свойство("ВидБюджета", ВидБюджета);
	
	Параметры = ПараметрыПолученияФактаПоВидуБюджета(
		ВидБюджета, ВалютаОтчета, Период, МинимальнаяПериодичность, ВсеВидыАналитик, ПоОрганизациям, ПоПодразделениям, РежимПолученияДанных);
	
	Если ПараметрыДанных.Свойство("ПоРегистратору") Тогда
		Параметры.ПоРегистратору = ПараметрыДанных.ПоРегистратору;
	Иначе
		Параметры.ПоРегистратору = Ложь;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыФактаОбороты(Параметры, ПараметрыДанных, РежимПолученияДанных)
	
	УказаныНастройкиПоказателей = ПараметрыДанных.Свойство("Показатели");
	ТребуетсяКоличество = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Количество");
	ТребуетсяСумма = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Сумма");
	
	// Параметры для получения фактических оборотов
	НастройкиСоставаПолей = Неопределено;
	Если Не ПараметрыДанных.Свойство("НастройкиСоставаПолей", НастройкиСоставаПолей) Тогда
		НастройкиСоставаПолей = Новый Структура ;
		НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", ТребуетсяКоличество);
		НастройкиСоставаПолей.Вставить("ТребуетсяСумма", ТребуетсяСумма);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Ложь);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Истина);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Истина);
	КонецЕсли;
	ПараметрыИдентификацииВыраженийОбороты = ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей);
	
	ПараметрыФактаОбороты = ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта(Параметры, ПараметрыИдентификацииВыраженийОбороты);
	
	Если ПараметрыДанных.Свойство("ОтборПоРегистраторуДляВсегоФакта") Тогда
		// Отбор по регистратору для целей оптимизации получения оборотов по статьям, когда
		// известно, что отбор по регистратору должен применяться ко всем статьям всех источников данных.
		// Например, при проверке прохождения документа по лимитам ДС. Результативность зависит от количества правил получения факта.
		ПараметрыФактаОбороты.Вставить("ОтборПоРегистраторуДляВсегоФакта", ПараметрыДанных.ОтборПоРегистраторуДляВсегоФакта);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		ПараметрыФактаОбороты.ДополнительныеФильтрыПоАналитикам, ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
		
	ПараметрыФактаОбороты.ОграниченияДоступа.РежимПолученияДанных = РежимПолученияДанных;
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты.ДополнительныеФильтрыПоИзмерениям, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОбороты.ДополнительныеФильтрыПоАналитикам, ПараметрыДанных);
	
	Возврат Новый Структура("ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты",
		ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты);
	
КонецФункции

Функция ПодготовитьПараметрыФактаОстатки(Параметры, ПараметрыДанных, ИсточникиДанных, РежимПолученияДанных)
	
	УказаныНастройкиПоказателей = ПараметрыДанных.Свойство("Показатели");
	ТребуетсяКоличество = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Количество");
	ТребуетсяСумма = Не УказаныНастройкиПоказателей ИЛИ ПараметрыДанных.Показатели.Свойство("Сумма");
	
	// Параметры для получения фактических остатков
	НастройкиСоставаПолей = Неопределено;
	Если Не ПараметрыДанных.Свойство("НастройкиСоставаПолей", НастройкиСоставаПолей) Тогда
		НастройкиСоставаПолей = Новый Структура ;
		НастройкиСоставаПолей.Вставить("ТребуетсяКоличество", ТребуетсяКоличество);
		НастройкиСоставаПолей.Вставить("ТребуетсяСумма", ТребуетсяСумма);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаНачальныйОстаток", Истина);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаПриход", Ложь);
		НастройкиСоставаПолей.Вставить("ТребуетсяСуммаРасход", Ложь);
		
		Для каждого ИсточникДанных Из ИсточникиДанных Цикл
			Если ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
				НастройкиСоставаПолей.ТребуетсяСуммаПриход = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПараметрыИдентификацииВыраженийОстатки = ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей);
	
	ПараметрыФактаОстатки = ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта(Параметры, ПараметрыИдентификацииВыраженийОстатки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФактаОстатки.ДополнительныеФильтрыПоАналитикам, 
		ПараметрыДанных.ДополнительныеФильтрыПоАналитикам);
		
	ПараметрыФактаОстатки.ОграниченияДоступа.РежимПолученияДанных = РежимПолученияДанных;
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки.ДополнительныеФильтрыПоИзмерениям, ПараметрыДанных);
	ЗаполнитьЗначенияСвойств(ПараметрыФактаОстатки.ДополнительныеФильтрыПоАналитикам, ПараметрыДанных);
	
	Возврат Новый Структура("ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки",
		ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки);
	
КонецФункции

Функция ПодготовитьВспомогательныеДанныеДляПолученияИменованныхАналитик(Параметры, ИсточникиДанных, ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты, ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки)
	
	ИндексИменИВидовАналитик = Новый Соответствие;
	
	// Подготовим вспомогательные данные для получения именованных аналитик 
	Для Каждого ЗапрошеннаяАналитика Из Параметры.ВидыАналитик Цикл 
		ИмяИменованнойАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ЗапрошеннаяАналитика);
		
		ПараметрыИдентификацииВыраженийОбороты.ЗначенияПоУмолчаниюДопДанные.Вставить(
			"ИД_" + "ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		ПараметрыИдентификацииВыраженийОбороты.ЧастиВыражений.Вставить(
			"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
		ПараметрыФактаОбороты.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		
		ПараметрыИдентификацииВыраженийОстатки.ЗначенияПоУмолчаниюДопДанные.Вставить(
			"ИД_" + "ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		ПараметрыИдентификацииВыраженийОстатки.ЧастиВыражений.Вставить(
			"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
		ПараметрыФактаОстатки.УсловияВыражений.Вставить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
		
		ИндексИменИВидовАналитик.Вставить(
			"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, ЗапрошеннаяАналитика);
	КонецЦикла;
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ИсточникДанных.Объекты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для каждого СтрокаОбъекта Из ИсточникДанных.Объекты Цикл
			Если ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.СтатьиБюджетов")
				ИЛИ ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.ПоказателиБюджетов")
				ИЛИ ТипЗнч(СтрокаОбъекта) = Тип("СправочникСсылка.НефинансовыеПоказателиБюджетов") Тогда
				
				Для Счетчик = 1 По БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик() Цикл
					
					ВидАналитики = СтрокаОбъекта["ВидАналитики" + Счетчик];
					Если ЗначениеЗаполнено(ВидАналитики) Тогда
						
						ИмяИменованнойАналитики = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
						
						Если НЕ ИндексИменИВидовАналитик.Получить("ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики) = Неопределено Тогда
							Продолжить; // Выражение аналитики добавлено
						КонецЕсли;
						
						ПараметрыИдентификацииВыраженийОбороты.ЗначенияПоУмолчаниюДопДанные.Вставить(
							"ИД_" + "ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						ПараметрыИдентификацииВыраженийОбороты.ЧастиВыражений.Вставить(
							"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
						ПараметрыФактаОбороты.УсловияВыражений.Вставить(
							"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						
						ПараметрыИдентификацииВыраженийОстатки.ЗначенияПоУмолчаниюДопДанные.Вставить(
							"ИД_" + "ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						ПараметрыИдентификацииВыраженийОстатки.ЧастиВыражений.Вставить(
							"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, Новый Массив);
						ПараметрыФактаОстатки.УсловияВыражений.Вставить(
							"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики);
						
						ИндексИменИВидовАналитик.Вставить(
							"ВыражениеИменованнойАналитики" + ИмяИменованнойАналитики, ВидАналитики);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ИндексИменИВидовАналитик;
	
КонецФункции

Процедура ЦиклПоИсточникам(Параметры, ПараметрыДанных, ИсточникиДанных, ПараметрыПолученияДанных)
	
	ПараметрыФактаОбороты = ПараметрыПолученияДанных.ПараметрыФактаОбороты;
	ПараметрыИдентификацииВыраженийОбороты = ПараметрыПолученияДанных.ПараметрыИдентификацииВыраженийОбороты;
	ПараметрыФактаОстатки = ПараметрыПолученияДанных.ПараметрыФактаОстатки;
	ПараметрыИдентификацииВыраженийОстатки = ПараметрыПолученияДанных.ПараметрыИдентификацииВыраженийОстатки;
	ЗадействованныеДопОтборыОбороты = ПараметрыПолученияДанных.ЗадействованныеДопОтборыОбороты;
	ЗадействованныеДопОтборыОстатки = ПараметрыПолученияДанных.ЗадействованныеДопОтборыОстатки;
	
	// Для проверки необходимости получения фактических данных
	СценарийОтчета = Неопределено;
	Если ПараметрыДанных <> Неопределено Тогда
		ПараметрыДанных.Свойство("Сценарий", СценарийОтчета);
	КонецЕсли;
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ИндексИменИВидовАналитик = ПодготовитьВспомогательныеДанныеДляПолученияИменованныхАналитик(Параметры, ИсточникиДанных,
		ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты, ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки);
	
	ПоказателиСуммы = Новый Массив;
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаНачальныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаКонечныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаУпрКонечныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаРеглКонечныйОстаток");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаПриход");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаУпрПриход");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаРеглПриход");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаРасход");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаУпрРасход");
	ПоказателиСуммы.Добавить("ВыражениеПоказателяСуммаВалютаРеглРасход");
	
	// При обходе источников и заполнении параметров происходит переключение для остатков и оборотов.
	Для Каждого ИсточникДанных Из ИсточникиДанных Цикл
		// При получении данных из самого документа используются НЕ онлайновые 
		Если Не ИсточникДанных.ЕстьОнЛайновыеПравила Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Нефинансовый Тогда
			Продолжить;
		КонецЕсли;
		
		ПолучатьФактическиеДанные = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
					И СценарийОтчетаФактическиеДанные)
				ИЛИ ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
				ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
					И СценарийОтчетаИсполнениеБюджета);
		
		ЭтоОбороты = (ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Обороты);
		ЭтоОстатки = (ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Остатки);
		ЭтоВлияющиеСтатьи = ЗначениеЗаполнено(ИсточникДанных.ПоказательЗависимогоИсточникаДанных);
		ЕстьЦелевые = ИсточникДанных.ЕстьЦелевыеПоказатели;
		ИспользоватьДатуНачала = Параметры.ОстаткиТолькоНаНачалоПериода И Не ЕстьЦелевые;
		
		ДопДанныеТекущегоИсточника = Новый ТаблицаЗначений;
		
		Если ПолучатьФактическиеДанные Тогда
			// Формирование таблицы периодов с правилами получения факта
			// Каждый источник и все его статьи/показатели получаются в пределах _одного_ периода и набора доп.отборов 
			// Вместо значений периодов, могут подставляться выражения.
			Если ЭтоОбороты И Не ЕстьЦелевые Тогда
				ЗаполняемыеПараметры = ПараметрыФактаОбороты;
				ПараметрыИдентификацииВыражений = ПараметрыИдентификацииВыраженийОбороты;
				ЗадействованныеДопОтборы = ЗадействованныеДопОтборыОбороты;
			ИначеЕсли ЭтоОстатки Или ЕстьЦелевые Тогда
				ЗаполняемыеПараметры = ПараметрыФактаОстатки;
				ПараметрыИдентификацииВыражений = ПараметрыИдентификацииВыраженийОстатки;
				ЗадействованныеДопОтборы = ЗадействованныеДопОтборыОстатки;
				ПараметрыИдентификацииВыражений.ПолучениеОстатковНаГраницуПериода = НЕ ИспользоватьДатуНачала;
				ПараметрыИдентификацииВыражений.ЗначенияПоУмолчанию.ПолучениеОстатковНаГраницуПериода = НЕ ИспользоватьДатуНачала;
			КонецЕсли;
			
			// Обозначим встретившиеся среди источников требования к доступу к данным.
			// Это позволит сократить количество итераций получения фактических данных.
			Если Не ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьПривилегированныйРежим Тогда
				ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьПривилегированныйРежим = ИсточникДанных.ПривилегированныйРежим;
			КонецЕсли;
			Если Не ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьНеПривилегированныйРежим Тогда
				ЗаполняемыеПараметры.ОграниченияДоступа.ЕстьНеПривилегированныйРежим = Не ИсточникДанных.ПривилегированныйРежим;
			КонецЕсли;
			
			// Сформируем коллекцию уникальных доп. отборов, которые указаны в:
			// - Бюджетном отчете
			// - Реквизитах экземпляра бюджета
			// - Операндах вида бюджета.
			СериализованныеНастройки = ОбщегоНазначения.ЗначениеВСтрокуXML(ИсточникДанных.ДополнительныйОтбор.Отбор);
			ХешНастроек = ОбщегоНазначенияУТ.ХешСуммаСтроки(СериализованныеНастройки, ХешФункция.MD5);
			Если ЗадействованныеДопОтборы[ХешНастроек] = Неопределено Тогда
				// Отметим, что уже добавляли, чтобы не усложнять работу оптимизатору запроса СКД
				ЗадействованныеДопОтборы.Вставить(ХешНастроек, 
					Новый Структура("ИД_Источников, Настройки", 
						Новый Массив, 
						ИсточникДанных.ДополнительныйОтбор));
			КонецЕсли; 
			// Уникальные отборы могут применяться в разных источниках, т.к. они определяют еще и уникальный период.
			ЗадействованныеДопОтборы[ХешНастроек].ИД_Источников.Добавить(ИсточникДанных.Идентификатор);
			
			ПараметрыДопДанных = ЗаполняемыеПараметры.ДополнительныеДанные;
			ЧастиВыражений = ПараметрыИдентификацииВыражений.ЧастиВыражений;
			ЗначенияПоУмолчанию = ПараметрыИдентификацииВыражений.ЗначенияПоУмолчанию;
			ЗначенияПоУмолчаниюДопДанные = ПараметрыИдентификацииВыражений.ЗначенияПоУмолчаниюДопДанные;
		
			// Получим правила получения факта по статьям и показателям
			ТаблицаПравилСтатей = ПравилаПолученияФактаИсточникаДанных(ИсточникДанных, СценарийОтчета);
			ДобавитьКолонкиУникальныхИдентификаторов(ТаблицаПравилСтатей, "ПравилоФакта");
			ДополнитьИсходныеВыраженияЗаполненияАналитик(
				ТаблицаПравилСтатей, ЗаполняемыеПараметры.ИсходныеВыраженияЗаполненияАналитик);
			
			#Область ЗаполнениеТаблицыОбластейДанных
			ИдентификаторыИсточниковДанных = ТаблицаПравилСтатей.ВыгрузитьКолонку("ИдентификаторИсточникаДанных");
			ИдентификаторыИсточниковДанных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыИсточниковДанных);
			
			Если ЕстьЦелевые Тогда
				ЗначенияПоУмолчанию.Период = Параметры.Период.ДатаОкончания;
			Иначе
				ЗначенияПоУмолчанию.Период = Параметры.Период.ДатаНачала;
			КонецЕсли;
			ЗначенияПоУмолчанию.НачалоПериода = Параметры.Период.ДатаНачала;
			ЗначенияПоУмолчанию.КонецПериода = Параметры.Период.ДатаОкончания;
			
			ЗначенияПоУмолчанию.ПривилегированныйРежимИсточника = ИсточникДанных.ПривилегированныйРежим;
			
			Для Каждого ЧастьОдногоВыражения Из ЧастиВыражений Цикл 
				// Идентификаторы для выражений аналитик формируются в таблице доп. данных для каждого правила.
				Если СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияАналитики")
					Или ЧастьОдногоВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалюта"
					Или ЧастьОдногоВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалютаХранения"
					Или ЧастьОдногоВыражения.Ключ = "ВыражениеЗаполненияАналитикиЕдиницаИзмерения"
					Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеИменованнойАналитики")
					Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателя")
					Или СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияПериодКурса") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЧастьОдногоВыражения.Ключ = "ВыражениеПериод"
				 ИЛИ ЧастьОдногоВыражения.Ключ = "ВыражениеПериодГраница" Тогда
					Если ЭтоОстатки Или ЕстьЦелевые Тогда
						Если ИспользоватьДатуНачала Тогда
							ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеНачалоПериода;
						Иначе 
							ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеКонецПериода;
						КонецЕсли;
					Иначе
						ИсточникДанных[ЧастьОдногоВыражения.Ключ] = ИсточникДанных.ВыражениеПериодаГруппировки;
					КонецЕсли;
				КонецЕсли;
				
				ОбновитьПараметрыИдентификацииВыражений(
					ПараметрыИдентификацииВыражений,
					ЗначенияПоУмолчанию,
					ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
					ИсточникДанных[ЧастьОдногоВыражения.Ключ]); // Строка выражения
			КонецЦикла;
			
			ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицуИзМассива(ЗаполняемыеПараметры.ОбластиДанных.ТаблицаДанных, 
				ИдентификаторыИсточниковДанных, 
				"ИдентификаторИсточникаДанных", 
				ЗначенияПоУмолчанию);
			
			ТаблицаДанныхОбластиДанных = ЗаполняемыеПараметры.ОбластиДанных.ТаблицаДанных; // ТаблицаЗначений - 
			ТаблицаДанныхОбластиДанных.Свернуть(ЗаполняемыеПараметры.ОбластиДанных.КолонкиСвертки);
			#КонецОбласти 
			
			// Заполним или дополним кэш свойств статей и показателей 
			Если ЗаполняемыеПараметры.ТаблицаПравилСтатей.Количество() = 0 Тогда
				ЗаполняемыеПараметры.ТаблицаПравилСтатей = ТаблицаПравилСтатей;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаПравилСтатей, ЗаполняемыеПараметры.ТаблицаПравилСтатей);
			КонецЕсли;
			
			// Сформируем доп. данные - поля, которые явно не относятся к получаемым данным,
			// но требуются для бюджетирования.
			Если ДопДанныеТекущегоИсточника.Количество() = 0 Тогда
				ДобавитьКолонкиДополнительныхДанных(
					ДопДанныеТекущегоИсточника,
					ИндексИменИВидовАналитик);
			КонецЕсли;
			
			ЗначенияПоУмолчанию["ИД_" + "Источника"] = ИсточникДанных.Идентификатор;
			ЗначенияПоУмолчанию.ПоказательБюджетов = ИсточникДанных.ПоказательЗависимогоИсточникаДанных;
			
			ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ТаблицаПравилСтатей,
				ДопДанныеТекущегоИсточника,
				ЗначенияПоУмолчанию,
				ЭтоОбороты И Не ЕстьЦелевые);
				
			КэшРеквизитовДляПолученияСхемы = Новый Структура("ТипОбъектаИсточникаДанных, РазделИсточникаДанных, ИсточникДанных, ХешСхемыКомпоновкиДанных");
				
			// Заполним идентификаторы
			Для Каждого СтрокаДопДанных Из ДопДанныеТекущегоИсточника Цикл
				ЗаполнитьЗначенияСвойств(ЗначенияПоУмолчаниюДопДанные, СтрокаДопДанных);
				
				ЗаполнитьЗначенияСвойств(КэшРеквизитовДляПолученияСхемы, СтрокаДопДанных);
				СтрокаДопДанных.КэшРеквизитовДляПолученияСхемы = КэшРеквизитовДляПолученияСхемы;
				
				Для Каждого ЧастьОдногоВыражения Из ЧастиВыражений Цикл
					
					Если ЧастьОдногоВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалютаХранения" Тогда
						Продолжить;
					КонецЕсли;
					
					ЭтоВыражениеЗаполненияАналитики = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеЗаполненияАналитики");
					ЭтоВыражениеИменованнойАналитики = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеИменованнойАналитики");
					ЭтоАналитикаВалюты = (ЧастьОдногоВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалюта");
					
					ЭтоВыражениеПоказателяКоличество = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателяКоличество");
					ЭтоВыражениеПоказателяСумма = (ПоказателиСуммы.Найти(ЧастьОдногоВыражения.Ключ) <> Неопределено);
					ЭтоВыражениеПоказателя = ЭтоВыражениеПоказателяКоличество Или ЭтоВыражениеПоказателяСумма;
					
					Если ЭтоВыражениеПоказателя Тогда
						ЭтоПоказательНачальныйОстаток = СтрНайти(ЧастьОдногоВыражения.Ключ, "НачальныйОстаток") > 0;
						ЭтоПоказательПриход = СтрНайти(ЧастьОдногоВыражения.Ключ, "Приход") > 0;
						ЭтоПоказательРасход = СтрНайти(ЧастьОдногоВыражения.Ключ, "Расход") > 0;
					Иначе
						ЭтоПоказательНачальныйОстаток = Ложь;
						ЭтоПоказательПриход = Ложь;
						ЭтоПоказательРасход = Ложь;
					КонецЕсли;
					
					Если Не (ЭтоВыражениеЗаполненияАналитики
						Или ЭтоВыражениеИменованнойАналитики
						Или ЭтоВыражениеПоказателя
						Или ЭтоАналитикаВалюты) Тогда
						Продолжить; // Идентификаторы для других выражений аналитик формируются ранее
					КонецЕсли;
					
					ВыражениеЗаполненияПоля = "";
					Если ЭтоВыражениеЗаполненияАналитики Или ЭтоАналитикаВалюты Тогда
						
						Если ЭтоАналитикаВалюты Тогда
							
							ПараметрыВыражения = ВыражениеЗаполненияАналитикиВалюта(ЗаполняемыеПараметры, СтрокаДопДанных);
							
							ЗаполняемыеПараметры.ПоВалютам = ЗаполняемыеПараметры.ПоВалютам Или ПараметрыВыражения.ПоВалютам;
							ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
							
						ИначеЕсли СтрНайти(ЧастьОдногоВыражения.Ключ, "ЕдиницаИзмерения") Тогда
							
							ПараметрыВыражения = ВыражениеЗаполненияАналитикиЕдиницаИзмерения(ЗаполняемыеПараметры.ПоЕдиницамИзмерения, СтрокаДопДанных);
							
							ЗаполняемыеПараметры.ПоЕдиницамИзмерения = ПараметрыВыражения.ПоЕдиницамИзмерения;
							ЗаполняемыеПараметры.УсловияВыражений.ВыражениеПересчетаКоличества = ПараметрыВыражения.ВыражениеПересчетаКоличества;
							ВыражениеЗаполненияПоля = ПараметрыВыражения.ВыражениеЗаполненияПоля;
							
						Иначе
							
							НомерАналитики = Число(Прав(ЧастьОдногоВыражения.Ключ, 1));
							Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
								ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитики, СтрокаДопДанных);
								ВыражениеЗаполненияПоля = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеЗаполненияПоля, "ВидАналитики" + НомерАналитики);
							Иначе
								// В данном случае получение аналитики может переопределятся в регистре СвязиПоказателейБюджетов.
								ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(НомерАналитики, СтрокаДопДанных);
							КонецЕсли;
						КонецЕсли;
						
						ОбновитьПараметрыИдентификацииВыражений(
							ПараметрыИдентификацииВыражений,
							ЗначенияПоУмолчаниюДопДанные,
							ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
							ВыражениеЗаполненияПоля,  // Строка выражения
							,
							Истина);
							
					ИначеЕсли ЭтоВыражениеИменованнойАналитики Тогда
						
						ЗапрошенныйВидАналитики = ИндексИменИВидовАналитик[ЧастьОдногоВыражения.Ключ];
						
						Для НомерАналитики = 1 По БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик() Цикл 
							Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
								ВидАналитикиПравила = СтрокаДопДанных["ВидАналитики" + НомерАналитики];
							Иначе
								// Вид аналитики определяется по показателю.
								ВидАналитикиПравила = СтрокаДопДанных["СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитики];
							КонецЕсли;
							
							Если ЗапрошенныйВидАналитики = ВидАналитикиПравила Тогда
								
								Если НЕ СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
									ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитики, СтрокаДопДанных);
									ВыражениеЗаполненияПоля = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ВыражениеЗаполненияПоля, "ВидАналитики" + НомерАналитики);
								Иначе
									// В данном случае получение аналитики может переопределятся в регистре СвязиПоказателейБюджетов.
									ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(НомерАналитики, СтрокаДопДанных);
								КонецЕсли;
								
								ОбновитьПараметрыИдентификацииВыражений(
									ПараметрыИдентификацииВыражений,
									ЗначенияПоУмолчаниюДопДанные,
									ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
									ВыражениеЗаполненияПоля,  // Строка выражения
									,
									Истина);
									
								Прервать;
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли ЭтоВыражениеПоказателя Тогда
						
						ИмяВыраженияВДопДанных = ЧастьОдногоВыражения.Ключ;
						ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "НачальныйОстаток", "");
						ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "Приход", "");
						ИмяВыраженияВДопДанных = СтрЗаменить(ИмяВыраженияВДопДанных, "Расход", "");
						
						ВыражениеЗаполненияПоля = СтрокаДопДанных[ИмяВыраженияВДопДанных];
						
						Если Не ЗначениеЗаполнено(ВыражениеЗаполненияПоля) И ЭтоВыражениеПоказателяСумма Тогда
							Для каждого ИсточникСуммы Из СтрокаДопДанных.ВыраженияПоказателейСуммы Цикл
								Если ИсточникСуммы.Ключ = "ВалютаМеждународ" Тогда
									ВыражениеЗаполненияПоля = ИсточникСуммы.Значение;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						// Уточним выражение неиспользуемых в источнике полей
						Если ЭтоОбороты И Не ЭтоВлияющиеСтатьи И Не ЭтоПоказательПриход 
							Или ЭтоОстатки И Не ЭтоПоказательНачальныйОстаток
							Или ЭтоВлияющиеСтатьи И СтрокаДопДанных.Расход И Не ЭтоПоказательРасход
							Или ЭтоВлияющиеСтатьи И Не СтрокаДопДанных.Расход И Не ЭтоПоказательПриход Тогда
							ВыражениеЗаполненияПоля = "0";
						КонецЕсли;
						
						ОбновитьПараметрыИдентификацииВыражений(
							ПараметрыИдентификацииВыражений,
							ЗначенияПоУмолчаниюДопДанные,
							ЧастьОдногоВыражения.Ключ, // Имя поля-идентификатора выражения
							ВыражениеЗаполненияПоля,   // Строка выражения
							Истина);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаДопДанных.ВыраженияПоказателейСуммы.Свойство("Валюта") Тогда
					
					ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиВалютаХранения(ЗаполняемыеПараметры, СтрокаДопДанных);
					ЗаполняемыеПараметры.ПоВалютам = Истина;
					
					ОбновитьПараметрыИдентификацииВыражений(
						ПараметрыИдентификацииВыражений,
						ЗначенияПоУмолчаниюДопДанные,
						"ВыражениеЗаполненияАналитикиВалютаХранения", // Имя поля-идентификатора выражения
						ВыражениеЗаполненияПоля);// Строка выражения
				Иначе
					
					ОбновитьПараметрыИдентификацииВыражений(
						ПараметрыИдентификацииВыражений,
						ЗначенияПоУмолчаниюДопДанные,
						"ВыражениеЗаполненияАналитикиВалютаХранения", // Имя поля-идентификатора выражения
						"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");// Строка выражения
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаДопДанных, ЗначенияПоУмолчаниюДопДанные);
			КонецЦикла;
			
			Если ПараметрыДопДанных.ТаблицаДанных.Количество() = 0 Тогда
				ДобавитьКолонкиДополнительныхДанных(ПараметрыДопДанных.ТаблицаДанных, ИндексИменИВидовАналитик);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДопДанныеТекущегоИсточника, ПараметрыДопДанных.ТаблицаДанных);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Расчет с таблицей правил в разрезе идентификаторов источников данных (ИИД) - уникальных схем СКД.
//
// Параметры:
//    ПараметрыДанных - Структура - Отборы, определенные на уровне бюджетного отчета
//    ИсточникиДанных -  Массив - Источники данных вида бюджета
//    ВалютаОтчета    - СправочникСсылка.Валюты - Валюта, в которой необходимо вернуть факт
//
// Возвращаемое значение:
//    ТаблицаЗначений - фактические данные
//
Функция РассчитатьФактПоВидуБюджетаАльтернативный(ПараметрыДанных, Знач ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных)
	
	ИсточникиДанных = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ИсточникиДанных);
	
	Параметры = УточнитьПараметрыДанныхПоВидуБюджета(ПараметрыДанных, ИсточникиДанных, ВалютаОтчета, РежимПолученияДанных);
	
	ТаблицаДанныхПоВидуБюджета = ШаблонТаблицыДанныхПоВидуБюджета(Параметры);
	
	СтруктураПараметровФактаОбороты = ПодготовитьПараметрыФактаОбороты(Параметры, ПараметрыДанных, РежимПолученияДанных);
	ПараметрыФактаОбороты = СтруктураПараметровФактаОбороты.ПараметрыФактаОбороты; // см. ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта
	ПараметрыИдентификацииВыраженийОбороты = СтруктураПараметровФактаОбороты.ПараметрыИдентификацииВыраженийОбороты;
	
	СтруктураПараметровФактаОбороты = ПодготовитьПараметрыФактаОстатки(Параметры, ПараметрыДанных, ИсточникиДанных, РежимПолученияДанных);
	ПараметрыФактаОстатки = СтруктураПараметровФактаОбороты.ПараметрыФактаОстатки;
	ПараметрыИдентификацииВыраженийОстатки = СтруктураПараметровФактаОбороты.ПараметрыИдентификацииВыраженийОстатки;
	
	ИсточникиДанных.Колонки.Добавить("ВыражениеПериод", ИсточникиДанных.Колонки.ВыражениеПериодаГруппировки.ТипЗначения);
	ИсточникиДанных.Колонки.Добавить("ВыражениеПериодГраница", ИсточникиДанных.Колонки.ВыражениеПериодаГруппировки.ТипЗначения);
	
	ЗадействованныеДопОтборыОбороты = Новый Соответствие; // Ключ - хеш, Значение - Структура - Идентификаторы + настройки компоновки
	ЗадействованныеДопОтборыОстатки = Новый Соответствие; // Ключ - хеш, Значение - Структура - Идентификаторы + настройки компоновки
	
	ДополнитьИсточникамиДанныхВлияющихСтатей(ИсточникиДанных);
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ПараметрыФактаОбороты", ПараметрыФактаОбороты);
	ПараметрыПолученияДанных.Вставить("ПараметрыИдентификацииВыраженийОбороты", ПараметрыИдентификацииВыраженийОбороты);
	ПараметрыПолученияДанных.Вставить("ПараметрыФактаОстатки", ПараметрыФактаОстатки);
	ПараметрыПолученияДанных.Вставить("ПараметрыИдентификацииВыраженийОстатки", ПараметрыИдентификацииВыраженийОстатки);
	ПараметрыПолученияДанных.Вставить("ЗадействованныеДопОтборыОбороты", ЗадействованныеДопОтборыОбороты);
	ПараметрыПолученияДанных.Вставить("ЗадействованныеДопОтборыОстатки", ЗадействованныеДопОтборыОстатки);
	
	ЦиклПоИсточникам(Параметры, ПараметрыДанных, ИсточникиДанных, ПараметрыПолученияДанных);
	
	Для каждого ИсточникДанных Из ИсточникиДанных Цикл
		Если ИсточникДанных.ТипИсточника = Перечисления.ТипыИсточниковДанныхБюджетирования.Нефинансовый Тогда
			ПолучитьЗначенияПоИсточникуДанныхНефинансовый(ТаблицаДанныхПоВидуБюджета, ИсточникДанных, Параметры, ПараметрыДанных);
		КонецЕсли;
	КонецЦикла;
	
	// Источники данных статей содержат правила факта и данные получать требуется
	Если ПараметрыФактаОбороты.ОбластиДанных.ТаблицаДанных.Количество() > 0 Тогда
		
		СформироватьУсловияВыражений(ПараметрыФактаОбороты, ПараметрыИдентификацииВыраженийОбороты);
		УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(ПараметрыФактаОбороты, Ложь);
		УточнитьМаксимальныйНомерАналитики(ПараметрыФактаОбороты);
		
		ПараметрыФактаОбороты.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
		
		// Применим исполняемые отборы факта
		СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборыОбороты, ПараметрыФактаОбороты, Ложь);
		
		СопоставитьИерархическиеИсточникиДанных(ПараметрыФактаОбороты);
		
		ФактическиеДанныеПоСтатьям = ФактическиеДанныеИзИсточников("ПравилаПолученияФактаПоСтатьямБюджетов", ПараметрыФактаОбороты);
		
		Если ФактическиеДанныеПоСтатьям.Количество() > 0 Тогда
			Если ПараметрыДанных.Свойство("ПериодКурса") Тогда // Для лимитов нужен пересчет в валюту на дату заявки или отчета по лимитам.
				ФактическиеДанныеПоСтатьям.ЗаполнитьЗначения(ПараметрыДанных.ПериодКурса, "ПериодКурса");
			КонецЕсли;
			
			ПоляПересчета = Новый Массив;
			Если Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
				ИмяКолонкиФункциональнаяВалютаПриход = "СуммаВалютаУпрПриход";
				ИмяКолонкиФункциональнаяВалютаРасход = "СуммаВалютаУпрРасход";
			Иначе
				ИмяКолонкиФункциональнаяВалютаПриход = "СуммаВалютаРеглПриход";
				ИмяКолонкиФункциональнаяВалютаРасход = "СуммаВалютаРеглРасход";
			КонецЕсли;
			
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалютаПриход", ИмяКолонкиФункциональнаяВалютаПриход, "СуммаПриход", "СуммаВалютаПриход"));
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалютаРасход", ИмяКолонкиФункциональнаяВалютаРасход, "СуммаРасход", "СуммаВалютаРасход"));
			
			ПересчитатьТаблицуДанныхВВалюту(ФактическиеДанныеПоСтатьям, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		СгенерироватьСтрокиФактическихДанных(
			ТаблицаДанныхПоВидуБюджета, ФактическиеДанныеПоСтатьям, ПараметрыФактаОбороты, ЗадействованныеДопОтборыОбороты, "Обороты");
	КонецЕсли;
	
	// Источники данных показателей содержат правила факта и данные получать требуется
	Если ПараметрыФактаОстатки.ОбластиДанных.ТаблицаДанных.Количество() > 0 Тогда
		
		СформироватьУсловияВыражений(ПараметрыФактаОстатки, ПараметрыИдентификацииВыраженийОстатки);
		УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(ПараметрыФактаОстатки, ПараметрыФактаОстатки.ОстаткиТолькоНаНачалоПериода);
		УточнитьМаксимальныйНомерАналитики(ПараметрыФактаОстатки);
		
		ПараметрыФактаОстатки.ДополнительныеДанные.Вид = Перечисления.ВидДополнительныхДанныхИсточниковДанных.НаборДанныхДополнительный;
		
		СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборыОстатки, ПараметрыФактаОстатки, Истина);
		
		// Применим исполняемые отборы факта
		СопоставитьИерархическиеИсточникиДанных(ПараметрыФактаОстатки);
		
		ФактическиеДанныеПоПоказателям = ФактическиеДанныеИзИсточников("ПравилаПолученияФактаПоПоказателямБюджетов", ПараметрыФактаОстатки);
		
		Если ФактическиеДанныеПоПоказателям.Количество() > 0 Тогда
			
			ПоляПересчета = Новый Массив;
			Если Параметры.ФункциональнаяВалюта = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
				ИмяКолонкиФункциональнаяВалюта = "СуммаВалютаУпрНачальныйОстаток";
				ИмяКолонкиФункциональнаяВалютаПриход = "СуммаВалютаУпрПриход";
				ИмяКолонкиФункциональнаяВалютаРасход = "СуммаВалютаУпрРасход";
			Иначе
				ИмяКолонкиФункциональнаяВалюта = "СуммаВалютаРеглНачальныйОстаток";
				ИмяКолонкиФункциональнаяВалютаПриход = "СуммаВалютаРеглПриход";
				ИмяКолонкиФункциональнаяВалютаРасход = "СуммаВалютаРеглРасход";
			КонецЕсли;
			
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалютаНачальныйОстаток", ИмяКолонкиФункциональнаяВалюта, "СуммаНачальныйОстаток", "СуммаВалютаНачальныйОстаток"));
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалютаПриход", ИмяКолонкиФункциональнаяВалютаПриход, "СуммаПриход", "СуммаВалютаПриход"));
			ПоляПересчета.Добавить(Новый Структура("ПолеПересчета, ПолеФункциональнойВалюты, ПолеВыходныхДанных, ПолеВыходныхДанныхВВалюте",
				"СуммаВалютаРасход", ИмяКолонкиФункциональнаяВалютаРасход, "СуммаРасход", "СуммаВалютаРасход"));
			
			ПересчитатьТаблицуДанныхВВалюту(ФактическиеДанныеПоПоказателям, Параметры.ВалютаОтчета, Параметры.ФункциональнаяВалюта, ПоляПересчета);
		КонецЕсли;
		
		СгенерироватьСтрокиФактическихДанных(
			ТаблицаДанныхПоВидуБюджета, ФактическиеДанныеПоПоказателям, ПараметрыФактаОстатки, ЗадействованныеДопОтборыОстатки, "Остатки");
	КонецЕсли;
	
	Возврат ТаблицаДанныхПоВидуБюджета;
	
КонецФункции

#КонецОбласти

// Дополняет массив исходных выражений заполнения аналитик.
// 
// Параметры:
// 	ТаблицаПравилСтатей - ТаблицаЗначений - Таблица правил получения факта.
// 	ИсходныеВыраженияЗаполненияАналитик - Массив из Строка - массив исходных (до модификации) выражений заполнения аналитик.
//
Процедура ДополнитьИсходныеВыраженияЗаполненияАналитик(ТаблицаПравилСтатей, ИсходныеВыраженияЗаполненияАналитик)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для Каждого СтрокаПравил Из ТаблицаПравилСтатей Цикл
		Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
			ИсходноеВыражение = СтрокаПравил["ВыражениеЗаполненияАналитики" + НомерАналитики];
			Если НЕ ЗначениеЗаполнено(ИсходноеВыражение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИсходныеВыраженияЗаполненияАналитик.Получить(ИсходноеВыражение) = Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаПравил.СтатьяБюджетов) Тогда
					СтатьяПоказатель = СтрокаПравил.СтатьяБюджетов;
				Иначе
					СтатьяПоказатель = СтрокаПравил.ПоказательБюджетов;
				КонецЕсли;
				ИсходныеВыраженияЗаполненияАналитик.Вставить(ИсходноеВыражение, СтатьяПоказатель);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСводныйДопОтборПоИсточникамДанных(Знач ЗадействованныеДопОтборы, Знач ПараметрыФакта, ИсключитьСценарий = Ложь)
	
	Перем ГруппаОтборИсточникаДанных, ГруппаОтборИсточниковДанных, ДопОтборыФакта, ЗадействованныйДопОтбор;
	
	// Заполним настройки доп. отборов в параметрах получения факта
	Если ПараметрыФакта.ДополнительныйОтбор = Неопределено Тогда
		ПараметрыФакта.ДополнительныйОтбор = Новый НастройкиКомпоновкиДанных;
	КонецЕсли;
	ДополнительныйОтбор = ПараметрыФакта.ДополнительныйОтбор; // НастройкиКомпоновкиДанных -
	ДопОтборыФакта = ДополнительныйОтбор.Отбор;
	
	ДопОтборыФакта.Элементы.Очистить();
	
	ГруппаОтборИсточниковДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ДопОтборыФакта, Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборИсточниковДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтборИсточниковДанных.Использование = Истина;
	ГруппаОтборИсточниковДанных.Представление = "ОтборВсехИсточниковДанных";
	
	Для Каждого ЗадействованныйДопОтбор Из ЗадействованныеДопОтборы Цикл 
		// Создадим совокупный отбор
		ГруппаОтборИсточникаДанных = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборИсточниковДанных, Неопределено,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИсточникаДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтборИсточникаДанных.Использование = Истина;
		ГруппаОтборИсточникаДанных.Представление = "ОтборИсточникаДанных_" + ЗадействованныйДопОтбор.Ключ;
		
		ФинансоваяОтчетностьСервер.СкопироватьОтбор(ЗадействованныйДопОтбор.Значение.Настройки.Отбор, ГруппаОтборИсточникаДанных, Истина);
		ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборИсточникаДанных, "ИД_" + "Источника", ЗадействованныйДопОтбор.Значение.ИД_Источников, , ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЦикла;
	
	// Заполним отборы значениями 
	БюджетнаяОтчетностьВыводСервер.ДополнитьНастройкиСКДПередВыводомАльтернативный(ПараметрыФакта.ДополнительныйОтбор, ПараметрыФакта, ИсключитьСценарий);
	
	Если ИсключитьСценарий Тогда
		
		// Также доп. отбор по сценариям не должен срабатывать для получения начального остатка расчетного показателя
		// (т.к. для расчетного показателя нет сценария и типа правил "исполнение бюджета", а конечный остаток по целевому 
		// показателю рассчитывается как начальный остаток по сценарию Факт и данные влияющих статей по тому сценарию, который либо задан в отборе либо в структуре отчета либо в шапке отчета (экземпляра бюджета),
		// но должен срабатывать для влияющих статей на расчетный показатель и для целевых показателей
		ЭлементыОтбораОстатки = КомпоновкаДанныхКлиентСервер.ПолучитьЭлементыОтбора(ПараметрыФакта.ДополнительныйОтбор.Отбор);
		ЭлементыОтбораСценарийКУдалению = Новый Массив; // Массив из ЭлементОтбораКомпоновкиДанных -
		Для каждого ЭлементОтбора Из ЭлементыОтбораОстатки Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
				И СокрЛП(ЭлементОтбора.ЛевоеЗначение) = "Сценарий" Тогда
				
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Строка")
					И СтрНайти(ЭлементОтбора.ПравоеЗначение, "<заполнить") Тогда
					// Настраиваемые отборы пропускаем
					Продолжить;
				КонецЕсли;
				Если НЕ ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				// Поместим элемент отбора по сценарию в группу ИЛИ, в ту же группу добавим группу И с двумя отборами: заполнен показатель бюджетов и не заполнена статья бюджетов
				// (т.к. для влияющих статей, ровно как и для целевого показателя, будет заполнена и статья и показатель)
				Если ЭлементОтбора.Родитель = Неопределено Тогда
					ЭлементыОтбораРодителя = ДопОтборыФакта.Элементы;
				Иначе
					ЭлементыОтбораРодителя = ЭлементОтбора.Родитель.Элементы;
				КонецЕсли;
				ГруппаИЛИ = ЭлементыОтбораРодителя.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаИЛИ.Использование = Истина;
				ГруппаИЛИ.Представление = НСтр("ru = 'Отбор по сценариям при получении факта применяется только для статей (включая влияющие на показатель статьи) и целевые показатели';
												|en = 'Filter by scenarios when receiving a fact is used only for items (including items that affect item indicator) and target values'");
				
				НовыйЭлементОтбораСценарий = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбораСценарий, ЭлементОтбора,"ЛевоеЗначение, ВидСравнения, ПравоеЗначение, Использование, Представление");
				
				ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ГруппаИ.Использование = Истина;
				
				НовыйЭлементОтбораНеСтатья = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбораНеСтатья.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяБюджетов");
				НовыйЭлементОтбораНеСтатья.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				НовыйЭлементОтбораНеСтатья.Использование = Истина;
				
				НовыйЭлементОтбораРасчетныйПоказатель = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбораРасчетныйПоказатель.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказательБюджетов");
				НовыйЭлементОтбораРасчетныйПоказатель.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
				НовыйЭлементОтбораРасчетныйПоказатель.Использование = Истина;
				
				ЭлементыОтбораСценарийКУдалению.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		Для каждого УдаляемыйЭлементОтбора Из ЭлементыОтбораСценарийКУдалению Цикл
			Если УдаляемыйЭлементОтбора.Родитель = Неопределено Тогда
				ЭлементыОтбораРодителя = ДопОтборыФакта.Элементы;
			Иначе
				ЭлементыОтбораРодителя = УдаляемыйЭлементОтбора.Родитель.Элементы;
			КонецЕсли;
			ЭлементыОтбораРодителя.Удалить(УдаляемыйЭлементОтбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьИерархическиеИсточникиДанных(ПараметрыФакта)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СхемаСопоставления = ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПолучитьМакет("ИерархияИсточниковДанныхБюджетирования");
	МакетСопоставления = ФинансоваяОтчетностьСервер.ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаСопоставления, СхемаСопоставления.НастройкиПоУмолчанию);
		
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных);
		
	ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетСопоставления, ВнешниеНаборыДанных);
	
	СопоставлениеДляОтборов = ПараметрыФакта.ИерархияИсточниковДанных.СопоставлениеДляОтборов;
	Для Каждого Сопоставление Из ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений Цикл 
		Если СопоставлениеДляОтборов[Сопоставление.ИсточникДанныхИсходный] = Неопределено Тогда
			Отбор = Новый Структура("ИсточникДанныхИсходный", Сопоставление.ИсточникДанныхИсходный);
			НайденныеСтроки = ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставлений.НайтиСтроки(Отбор);
			
			МассивДочернихИсточников = Новый Массив;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				МассивДочернихИсточников.Добавить(НайденнаяСтрока.ИсточникДанных);
			КонецЦикла;
			
			СопоставлениеДляОтборов.Вставить(Сопоставление.ИсточникДанныхИсходный, МассивДочернихИсточников);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим сопоставления для кор.счетов
	ТаблицаКорСчетов = ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных.Скопировать(, "КорСчет"); // ТаблицаЗначений -
	КолонкаКорСчет = ТаблицаКорСчетов.Колонки.КорСчет; // КолонкаТаблицыЗначений -
	КолонкаКорСчет.Имя = "ИсточникДанных";
	Для Каждого СтрокаТаблицы Из ТаблицаКорСчетов Цикл 
		Если СтрокаТаблицы.ИсточникДанных = Неопределено Тогда
			СтрокаТаблицы.ИсточникДанных = Истина;
		КонецЕсли;
	КонецЦикла;
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаДопДанных", ТаблицаКорСчетов);
		
	ПараметрыФакта.ИерархияИсточниковДанных.ТаблицаСопоставленийКорСчетов = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетСопоставления, ВнешниеНаборыДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает таблицу сценариев с учетом отбора компоновки данных.
//
// Параметры:
// 	 ОтборКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отбора по сценарию.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица сценариев:
//		* Сценарий - СправочникСсылка.Сценарии - Сценарий.
//		* Валюта - СправочникСсылка.Валюты - Валюта.
//		* ТребоватьУказанияКурсовДляКаждогоПериода - Булево - Истина, если требуется указывать куры для каждого периода. 
//
Функция СценарииСУчетомОтбора(ОтборКомпоновкиДанных)
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанныхСценарии = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"Сценарии");
	
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Валюта КАК Валюта,
	|	Сценарии.ТребоватьУказанияКурсовДляКаждогоПериода КАК ТребоватьУказанияКурсовДляКаждогоПериода
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.ЭтоГруппа
	|	И НЕ Сценарии.ПометкаУдаления";
	НаборДанныхСценарии.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Периодичность");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ТребоватьУказанияКурсовДляКаждогоПериода");
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанных);
	
	Возврат ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	
КонецФункции

// Возвращает таблицу соответствия идентификаторов источников данных и сценариев с учетом отбора компоновки данных.
//
// Параметры:
// 	 ИдентификаторыИсточниковДанных - ТаблицаЗначений - Свернутая таблица значений, содержащая только перечисления идентификаторов источников данных:
//		* ИД_Источника - Строка - Идентификатор источника данных таблицы факта.
// 	 ОтборКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки отбора по сценарию.
// Возвращаемое значение:
//   ТаблицаЗначений - таблица сценариев:
//		* Сценарий - СправочникСсылка.Сценарии - Сценарий.
//		* Валюта - СправочникСсылка.Валюты - Валюта.
//		* ТребоватьУказанияКурсовДляКаждогоПериода - Булево - Истина, если требуется указывать куры для каждого периода. 
//
Функция СценарииИдентификаторовИсточниковДанныхСУчетомОтбора(ИдентификаторыИсточниковДанных, ОтборКомпоновкиДанных)
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ИдентификаторыИсточниковДанных", ИдентификаторыИсточниковДанных);
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	
	НаборДанныхИдентификаторы = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"),
		"ИдентификаторыИсточниковДанных");
	
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхИдентификаторы, "ИД_" + "Источника", "ИД_" + "Источника",, Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	НаборДанныхСценарии       = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных,
		Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"),
		"Сценарии");
	
	НаборДанныхСценарии.Запрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сценарии.Ссылка КАК Сценарий,
	|	Сценарии.Валюта КАК Валюта,
	|	Сценарии.ТребоватьУказанияКурсовДляКаждогоПериода КАК ТребоватьУказанияКурсовДляКаждогоПериода
	|ИЗ
	|	Справочник.Сценарии КАК Сценарии
	|ГДЕ
	|	НЕ Сценарии.ЭтоГруппа
	|	И НЕ Сценарии.ПометкаУдаления";
	
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "Сценарий", "Сценарий",, Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "Валюта", "Валюта",, Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ФинансоваяОтчетностьСервер.НовоеПолеНабора(НаборДанныхСценарии, "ТребоватьУказанияКурсовДляКаждогоПериода", "ТребоватьУказанияКурсовДляКаждогоПериода",, Новый ОписаниеТипов("Булево"));
	
	ФинансоваяОтчетностьСервер.НоваяСвязьНаборов(СхемаКомпоновкиДанных,
			"ИдентификаторыИсточниковДанных",
			"Сценарии",
			"ИСТИНА",
			"ИСТИНА");
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(Настройки);
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ИД_" + "Источника");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Сценарий");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "Валюта");
	КомпоновкаДанныхКлиентСервер.ДобавитьВыбранноеПоле(Настройки, "ТребоватьУказанияКурсовДляКаждогоПериода");
	
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиДанных, Настройки, ОтборКомпоновкиДанных);
	
	СценарииИдентификаторовИсточников = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки, ВнешниеНаборы);
	СценарииИдентификаторовИсточников.Индексы.Добавить("ИД_" + "Источника");
	
	Возврат СценарииИдентификаторовИсточников;
	
КонецФункции

Процедура СгенерироватьСтрокиФактическихДанных(ТаблицаДанныхПоВидуБюджета, ФактическиеДанные, ПараметрыФакта, ЗадействованныеДопОтборы, ВидСуммы)
	
	ИдентификаторыИсточниковДанных = ФактическиеДанные.Скопировать(, "ИД_" + "Источника");
	ИдентификаторыИсточниковДанных.Свернуть("ИД_" + "Источника", "");
	
	СформироватьСводныйДопОтборПоИсточникамДанных(ЗадействованныеДопОтборы, ПараметрыФакта, Ложь);
	СценарииИсточниковДанных = СценарииИдентификаторовИсточниковДанныхСУчетомОтбора(ИдентификаторыИсточниковДанных, ПараметрыФакта.ДополнительныйОтбор);
	
	Для каждого СтрокаФакт Из ФактическиеДанные Цикл
		// 1. Добавление строк для полученных сценариев НЕ выполняется для статей бюджетов, полученных независимо от показателя,
		// а также статей бюджетов, полученных как влияющие на расчетный показатель. Для них добавляются строки по тому сценарию,
		// по которому они были получены (фактические данные или исполнение бюджета).
		// 2. Добавление строк для полученных сценариев выполняется только для расчетных и целевых показателей, причем, если
		// сценарий, по которому было получено значение показателя = исполнение бюджета, то добавляются строки только по сценарию исполнение бюджета
		// (для не задвоения данных при указании в отчете фактического сценария и сценария исполнения бюджета) - см. методы получения неоптимизированного факта.
		Если Не ЗначениеЗаполнено(СтрокаФакт.ПоказательБюджетов)
			Или ТипЗнч(СтрокаФакт.СтатьяБюджетов) = Тип("СправочникСсылка.СтатьиБюджетов")
			Или СтрокаФакт.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
			
			НоваяСтрокаФактическихДанных = ТаблицаДанныхПоВидуБюджета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаФактическихДанных, СтрокаФакт);
			
			Если ВидСуммы = "Обороты" Тогда
				НоваяСтрокаФактическихДанных.СуммаВалПриход = СтрокаФакт.СуммаВалютаПриход;
				НоваяСтрокаФактическихДанных.СуммаВалРасход = СтрокаФакт.СуммаВалютаРасход;
				НоваяСтрокаФактическихДанных.СуммаПриход = СтрокаФакт.СуммаПриход;
				НоваяСтрокаФактическихДанных.СуммаРасход = СтрокаФакт.СуммаРасход;
			ИначеЕсли ВидСуммы = "Остатки" Тогда
				НоваяСтрокаФактическихДанных.СуммаВалНачальныйОстаток = СтрокаФакт.СуммаВалютаНачальныйОстаток;
				НоваяСтрокаФактическихДанных.СуммаНачальныйОстаток = СтрокаФакт.СуммаНачальныйОстаток;
			КонецЕсли;
			
		Иначе
			СценарииИсточника = СценарииИсточниковДанных.НайтиСтроки(Новый Структура("ИД_" + "Источника", СтрокаФакт["ИД_" + "Источника"]));
			Для каждого СтрокаСценарии Из СценарииИсточника Цикл
				
				Если СтрокаСценарии.Сценарий = Справочники.Сценарии.ИсполнениеБюджета Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрокаФактическихДанных = ТаблицаДанныхПоВидуБюджета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаФактическихДанных, СтрокаФакт);
				
				Если ВидСуммы = "Обороты" Тогда
					НоваяСтрокаФактическихДанных.СуммаВалПриход = СтрокаФакт.СуммаВалютаПриход;
					НоваяСтрокаФактическихДанных.СуммаВалРасход = СтрокаФакт.СуммаВалютаРасход;
					НоваяСтрокаФактическихДанных.СуммаПриход = СтрокаФакт.СуммаПриход;
					НоваяСтрокаФактическихДанных.СуммаРасход = СтрокаФакт.СуммаРасход;
				ИначеЕсли ВидСуммы = "Остатки" Тогда
					НоваяСтрокаФактическихДанных.СуммаВалНачальныйОстаток = СтрокаФакт.СуммаВалютаНачальныйОстаток;
					НоваяСтрокаФактическихДанных.СуммаНачальныйОстаток = СтрокаФакт.СуммаНачальныйОстаток;
				КонецЕсли;
				
				НоваяСтрокаФактическихДанных.Сценарий = СтрокаСценарии.Сценарий;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыражениеЗаполненияАналитикиВалюта(ПараметрыПолученияФакта, Знач СтрокаДопДанных)
	
	ПоВалютам = Ложь;
	ВыражениеЗаполненияПоля = "";
	ПрефиксПоиска = ПрефиксПоиска(СтрокаДопДанных.РазделИсточникаДанных, "Валюта", СтрокаДопДанных.ТипОбъектаИсточникаДанных);
	
	Если СтрокаДопДанных.ЗаполнениеВалюты <> "НеЗаполнять" Тогда
		
		Если Не ПараметрыПолученияФакта.ПоВалютам Тогда
			ПоВалютам = Истина;
		КонецЕсли;
		
		ВВалютеОтчета = Ложь;
		Если СтрокаДопДанных.СтатьяБюджетовДляРасчетаПоказателя Тогда
			
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияВалютыПоУсловиюТрансляцииСвязейСтатейИПоказателей(СтрокаДопДанных);
			Если НЕ ВыражениеЗаполненияПоля = "&ВалютаОтчета" Тогда
				ПоВалютам = Истина;
			КонецЕсли;
			
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоАналитике" Тогда
			
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(СтрокаДопДанных.АдресАналитикиВалюта, СтрокаДопДанных);
			
			Если ВыражениеЗаполненияПоля = "" Тогда
				ВыражениеЗаполненияПоля = "&ВалютаОтчета";
			Иначе
				ВыражениеЗаполненияПоля = ВыражениеЗаполненияПоля + "." + СтрокаДопДанных.ПолеВалютыАналитики;
			КонецЕсли;
			
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяПоИсточникуДанных" Тогда
			
			СхемаКомпоновкиДанныхПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(СтрокаДопДанных.КэшРеквизитовДляПолученияСхемы);
			ПоляНабора = СхемаКомпоновкиДанныхПравила.НаборыДанных[0].Поля;
			
			Если ПоляНабора.Найти(ПрефиксПоиска + "Валюта") <> Неопределено Тогда
				ВыражениеЗаполненияПоля = ПрефиксПоиска + "Валюта";
			Иначе
				ВВалютеОтчета = Истина;
			КонецЕсли;
			
		ИначеЕсли СтрокаДопДанных.ЗаполнениеВалюты = "ОпределяетсяВалютойОтчета" Тогда
			ВВалютеОтчета = Истина;
		КонецЕсли;
		
		Если ВВалютеОтчета Тогда
			ВыражениеЗаполненияПоля = "&ВалютаОтчета";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ВыражениеЗаполненияПоля, ПоВалютам", ВыражениеЗаполненияПоля, ПоВалютам);
	
КонецФункции

Функция ВыражениеЗаполненияАналитикиВалютаХранения(ПараметрыПолученияФакта, Знач СтрокаДопДанных)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		Возврат "&ВалютаОтчета";
	КонецЕсли;
	
	ПрефиксПоиска = ПрефиксПоиска(СтрокаДопДанных.РазделИсточникаДанных, "Валюта", СтрокаДопДанных.ТипОбъектаИсточникаДанных);
	
	СхемаКомпоновкиДанныхПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(СтрокаДопДанных.КэшРеквизитовДляПолученияСхемы);
	
	ПоляНабораДанных = СхемаКомпоновкиДанныхПравила.НаборыДанных[0].Поля;
	ПолеНабораДанныхВалюта = ПоляНабораДанных.Найти(ПрефиксПоиска + "Валюта");
	
	Если ПолеНабораДанныхВалюта = Неопределено Тогда
		Для каждого ПолеНабораДанных Из ПоляНабораДанных Цикл
			Если ТипЗнч(ПолеНабораДанных) = Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных")
				Или ТипЗнч(ПолеНабораДанных) = Тип("ВложенныйНаборДанныхСхемыКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Если ПолеНабораДанных.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Валюты")) Тогда
				ПолеНабораДанныхВалюта = ПолеНабораДанных;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПолеНабораДанныхВалюта = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Не определена валюта для получения валютной суммы.';
							|en = 'Currency for receiving currency amount  is not determined.'");
		ВызватьИсключение ТекстОшибки;
	Иначе
		ПутьКДаннымВалюта = ПолеНабораДанныхВалюта.ПутьКДанным;
	КонецЕсли;
	
	Возврат ПутьКДаннымВалюта;
	
КонецФункции

Функция ВыражениеЗаполненияАналитикиЕдиницаИзмерения(Знач ПоЕдиницамИзмерения, Знач СтрокаДопДанных)
	
	ВыражениеЗаполненияПоля = "";
	ВыражениеПересчетаКоличества = "";
	Если СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения <> "НеЗаполнять" Тогда
		Если Не ПоЕдиницамИзмерения Тогда
			ПоЕдиницамИзмерения = Истина;
		КонецЕсли;
		
		Если СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения = "ОпределяетсяПоАналитике" Тогда
			ВыражениеЗаполненияПоля = ВыражениеЗаполненияАналитикиПоДопДанным(СтрокаДопДанных.АдресАналитикиЕдиницаИзмерения, СтрокаДопДанных);
			
			Если ВыражениеЗаполненияПоля = "" Тогда
				// НЕ РасширенныйРежимНастройкиЗаполненияАналитики и ЗаполнятьУказаннымЗначениемАналитику
				ВыражениеЗаполненияПоля = "НЕОПРЕДЕЛЕНО";
			Иначе
				ВыражениеЗаполненияПоля = ВыражениеЗаполненияПоля + "." + СтрокаДопДанных.ПолеЕдиницыИзмеренияАналитики;
				Если СтрокаДопДанных.ПолеЕдиницыИзмеренияАналитики = "ЕдиницаДляОтчетов" Тогда
					ВыражениеПересчетаКоличества = СтрЗаменить(ВыражениеЗаполненияПоля, ".ЕдиницаДляОтчетов",
						".КоэффициентЕдиницыДляОтчетов");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаДопДанных.ЗаполнениеЕдиницыИзмерения = "ФиксированноеЗначение" Тогда 
			ВыражениеЗаполненияПоля = "ЕдиницаИзмерения";
		КонецЕсли;
	КонецЕсли;
	
	ВыражениеЗаполненияАналитикиЕдиницаИзмерения = Новый Структура("ВыражениеЗаполненияПоля, ВыражениеПересчетаКоличества, ПоЕдиницамИзмерения", 
		ВыражениеЗаполненияПоля, ВыражениеПересчетаКоличества, ПоЕдиницамИзмерения);
	
	Возврат ВыражениеЗаполненияАналитикиЕдиницаИзмерения;
	
КонецФункции

Функция ВыражениеЗаполненияАналитикиПоДопДанным(Знач НомерАналитики, Знач СтрокаДопДанных)
	
	ВыражениеЗаполненияПоля = "";
	
	Если СтрокаДопДанных.РасширенныйРежимНастройкиЗаполненияАналитики 
		И СтрокаДопДанных["ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики] Тогда
		ВыражениеЗаполненияПоля = "ЗначениеАналитики" + НомерАналитики;
	Иначе
		ВыражениеЗаполненияПоля = СтрокаДопДанных["ВыражениеЗаполненияАналитики" + НомерАналитики];
	КонецЕсли;
	
	Возврат ВыражениеЗаполненияПоля;

КонецФункции

Функция ВыражениеЗаполненияАналитикиПоУсловиюТрансляцииСвязейСтатейИПоказателей(Знач НомерАналитикиПоказателя, Знач СтрокаДопДанных)
	
	Если СтрокаДопДанных.СвязиПоказателейБюджетов_КоличествоИспользуемыхАналитик < НомерАналитикиПоказателя Тогда
		ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
	ИначеЕсли НЕ СтрокаДопДанных["СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитикиПоказателя] Тогда
		ИтоговоеВыражение = "СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя;
	Иначе
		НомерАналитикиСтатьи = СтрокаДопДанных["СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитикиПоказателя];
		Если НЕ ЗначениеЗаполнено(НомерАналитикиСтатьи) Тогда
			ИтоговоеВыражение = ВыражениеПустогоЗначенияАналитики();
		Иначе
			// Выражение значение соответствует выражению для статьи, а проверка по типу по виду аналитики показателя бюджетов.
			ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитикиСтатьи, СтрокаДопДанных);
			ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗначенияАналитикиПоИсточникуИВидуАналитики(ЗначениеАналитикиПоПравиламСтатьи,
				"СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитикиПоказателя);
			Если НЕ ЗначениеЗаполнено(ЗначениеАналитикиПоПравиламСтатьи) Тогда
				ЗначениеАналитикиПоПравиламСтатьи = ВыражениеПустогоЗначенияАналитики();
			КонецЕсли;
			ИтоговоеВыражение = ЗначениеАналитикиПоПравиламСтатьи;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ИтоговоеВыражение;
		
КонецФункции

Функция ВыражениеЗаполненияВалютыПоУсловиюТрансляцииСвязейСтатейИПоказателей(Знач СтрокаДопДанных)
	
	Если НЕ СтрокаДопДанных.СвязиПоказателейБюджетов_ВалютаОпределяетсяАналитикой Тогда
		ИтоговоеВыражение = "&ВалютаОтчета";
	Иначе
		НомерАналитикиПоказателя = СтрокаДопДанных.СвязиПоказателейБюджетов_АдресАналитикиВалюта;
		
		Если НЕ СтрокаДопДанных["СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитикиПоказателя] Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДопДанных["СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя]) Тогда
				ИтоговоеВыражение = "&ВалютаОтчета";
			Иначе
				ПолеВалютыАналитики = СтрокаДопДанных.СвязиПоказателейБюджетов_ПолеВалютыАналитики;
				ИтоговоеВыражение = "СвязиПоказателейБюджетов_Аналитика" + НомерАналитикиПоказателя + "." + ПолеВалютыАналитики;
			КонецЕсли;
		Иначе
			НомерАналитикиСтатьи = СтрокаДопДанных["СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитикиПоказателя];
			ВидАналитикиСтатьи = СтрокаДопДанных["ВидАналитики" + НомерАналитикиСтатьи];
			// Проверка на возможность обращения к полю валюты
			ПараметрыЗаполненияВалютыВидаАналитики = БюджетированиеПовтИсп.ПараметрыЗаполненияВалютыВидаАналитики(ВидАналитикиСтатьи);
			Если НЕ ПараметрыЗаполненияВалютыВидаАналитики.УчитыватьПоВалюте Тогда
				ИтоговоеВыражение = "&ВалютаОтчета";
			Иначе
				ПолеВалютыАналитики = ПараметрыЗаполненияВалютыВидаАналитики.ЗаполнениеВалюты;
				ЗначениеАналитикиПоПравиламСтатьи = ВыражениеЗаполненияАналитикиПоДопДанным(НомерАналитикиСтатьи, СтрокаДопДанных);
				Если НЕ ЗначениеЗаполнено(ЗначениеАналитикиПоПравиламСтатьи) Тогда
					ИтоговоеВыражение = "&ВалютаОтчета";
				Иначе
					ВыражениеСКонтролемТипа = "
					|Выбор 
					// Приведение пустых к значению Неопределено - Null, Неопределено, ПустаяСсылка
					|	Когда НЕ ЗначениеЗаполнено(%1) Тогда %3
					// Проверка на соответствие значения ожидаемому типу
					|	Когда НЕ ТипЗначения(%1) В (БюджетированиеПовтИсп.ТипыВидаАналитики(ЕСТЬNULL(%2, НЕОПРЕДЕЛЕНО))) Тогда %3
					// После всех проверок можно использовать значение поля
					|	Иначе ЕСТЬNULL(%1.%4, %3)
					|Конец";
					ВыражениеСКонтролемТипа = СтрШаблон(ВыражениеСКонтролемТипа, 
						"СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитикиПоказателя,
						ЗначениеАналитикиПоПравиламСтатьи, 
						"&ВалютаОтчета",
						ПолеВалютыАналитики);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИтоговоеВыражение;
	
КонецФункции

Функция ПрефиксПоиска(РазделИсточникаДанных, ИмяПоля, ТипОбъектаИсточникаДанных)
	Префикс = "";
	
	Если ТипОбъектаИсточникаДанных <> Тип("СправочникСсылка.ПравилаПолученияФактаПоПоказателямБюджетов") Тогда
		// В показателях бюджета префиксы не используются.
		Если ИмяПоля = "Валюта" 
			И (РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет 
			Или РазделИсточникаДанных = Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет) Тогда
			Префикс = "ГруппаСчет.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Префикс;
КонецФункции

// Обновляет переданные параметры идентификации выражений и значения по умолчанию.
//
Процедура ОбновитьПараметрыИдентификацииВыражений(
				ПараметрыИдентификацииВыражений,
				ЗначенияПоУмолчанию,
				Знач ИмяПоляВыражения,
				Знач Выражение,
				Знач ЧисловоеВыражение = Ложь,
				Знач ВыражениеАналитики = Ложь)
	
	Перем НайденныйИдентификаторВыражения;
	
	ЗадействованныеВыражения = ПараметрыИдентификацииВыражений.ЗадействованныеВыражения;
	ВыражениеВстречаетсяВПоле = ПараметрыИдентификацииВыражений.ВыражениеВстречаетсяВПоле;
	
	ЧастиВыражений = ПараметрыИдентификацииВыражений.ЧастиВыражений[ИмяПоляВыражения]; // Массив из Строка -
	ТекущийИдентификаторВыражения = ПараметрыИдентификацииВыражений.ТекущийИдентификаторВыражения;
	
	Если ИмяПоляВыражения = "ВыражениеПериодГраница" Тогда
		// Выражение периода границы - то же самое, что выражение периода, но с приведением к границе.
		ИмяПоляИдентификатора = "ИД_" + "ВыражениеПериод";
	Иначе
		ИмяПоляИдентификатора = "ИД_" + ИмяПоляВыражения;
	КонецЕсли;
	ВыражениеИспользовалосьДляПоля = Ложь;
	
	НайденныйИдентификаторВыражения = ЗадействованныеВыражения[Выражение];
		
	Если НайденныйИдентификаторВыражения = Неопределено Тогда
		ЗадействованныеВыражения.Вставить(Выражение, ТекущийИдентификаторВыражения);
		
		ЗначенияПоУмолчанию[ИмяПоляИдентификатора] = ТекущийИдентификаторВыражения;
		
		ПараметрыИдентификацииВыражений.ТекущийИдентификаторВыражения = ТекущийИдентификаторВыражения + 1;
	Иначе
		ЗначенияПоУмолчанию[ИмяПоляИдентификатора] = НайденныйИдентификаторВыражения;
		
		ТекущийИдентификаторВыражения = НайденныйИдентификаторВыражения;
		
		ОтборКомбинации = Новый Структура("Выражение, ИмяПоляВыражения", Выражение, ИмяПоляВыражения); 
		ВыражениеИспользовалосьДляПоля = ВыражениеВстречаетсяВПоле.НайтиСтроки(ОтборКомбинации).Количество() <> 0;
	КонецЕсли;
	
	Если Не ВыражениеИспользовалосьДляПоля Тогда
	
		НоваяКомбинация = ВыражениеВстречаетсяВПоле.Добавить();
		НоваяКомбинация["Выражение"] = Выражение;
		НоваяКомбинация.ИмяПоляВыражения = ИмяПоляВыражения;
		
		ВыражениеСКД = ПреобразоватьВВыражениеСКД(Выражение, ЧисловоеВыражение, ВыражениеАналитики);
		Если ИмяПоляВыражения = "ВыражениеПериодГраница"
			И ПараметрыИдентификацииВыражений.ПолучениеОстатковНаГраницуПериода Тогда
			// Для целевых показателей необходимо получение остатков на границу периода.
			Если ПараметрыИдентификацииВыражений.ИспользуетсяПриведениеКГраницеПериода Тогда
				ВыражениеСКД = "КомпоновкаДанныхСервер.ГраницаПериода(" + ВыражениеСКД + ", ""Включая"")";
			Иначе
				ВыражениеСКД = "ДОБАВИТЬКДАТЕ(" + ВыражениеСКД + ", ""Секунда"", 1)";
			КонецЕсли;
		КонецЕсли;
		ЧастиВыражений.Добавить(
			" КОГДА "
			+ ИмяПоляИдентификатора 
			+ " = " 
			+ ТекущийИдентификаторВыражения 
			+ " ТОГДА " 
			+ ВыражениеСКД);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УточнитьУсловияВыраженийДопДанныхСУчетомВыраженийОбластей(Знач ПараметрыФакта, ПолучениеКурсаНаНачалоПериода = Ложь)
	
	Если ЗначениеЗаполнено(ПараметрыФакта.Периодичность) И Не ПолучениеКурсаНаНачалоПериода Тогда
		ВыражениеПериода = "ВыражениеПериод";
		Если СокрЛП(ВРЕГ(ПараметрыФакта.УсловияВыражений[ВыражениеПериода])) = "НЕОПРЕДЕЛЕНО" Тогда // В отчете нет измерения периода, периодом является начало периода отчета
			ВыражениеПериода = "ВыражениеНачалоПериода";
		КонецЕсли;
	Иначе
		ВыражениеПериода = "ВыражениеНачалоПериода";
	КонецЕсли;
	
	Для Каждого СтрокаДопДанных Из ПараметрыФакта.ДополнительныеДанные.ТаблицаДанных Цикл 
		СтрокаДопДанных["ИД_" + "ВыражениеЗаполненияПериодКурса"] = СтрокаДопДанных["ИД_" + ВыражениеПериода];
	КонецЦикла;
	
	Если ВыражениеПериода = "ВыражениеНачалоПериода" Тогда
		// В оптимизированном факте всегда рассчитывается поле НачалоПериода уже с учетом смещения (выражение передается в связях
		// источников данных в набор ОбъединенныйФакт как выражение источник).
		// Выполнение того же выражения в вычисляемом поле над уже преобразованной датой не требуется.
		ПараметрыФакта.УсловияВыражений.ВыражениеЗаполненияПериодКурса = "НачалоПериода";
	Иначе
		ПараметрыФакта.УсловияВыражений.ВыражениеЗаполненияПериодКурса = "ПериодКурса";
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьМаксимальныйНомерАналитики(ПараметрыФакта)
	МаксимальныйНомерАналитики = ПараметрыФакта.МаксимальныйНомерАналитики;
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		Если НЕ ПараметрыФакта.УсловияВыражений["ВыражениеЗаполненияАналитики" + НомерАналитики] = ПреобразоватьВВыражениеСКД(ВыражениеПустогоЗначенияАналитики()) Тогда
			МаксимальныйНомерАналитики = НомерАналитики;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФакта.МаксимальныйНомерАналитики = МаксимальныйНомерАналитики;
КонецПроцедуры

// Собирает из отдельных частей готовые выражения для расчета в СКД
//
Процедура СформироватьУсловияВыражений(Знач ПараметрыФакта, Знач ПараметрыИдентификацииВыражений)
	
	Перем ЧастьОдногоВыражения, ЭтоВыражениеПоказателя;
	
	Для Каждого ЧастьОдногоВыражения Из ПараметрыИдентификацииВыражений.ЧастиВыражений Цикл 
		ЭтоВыражениеПоказателя = СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателя");
		
		Если ЧастьОдногоВыражения.Значение.Количество() = 0 Тогда
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ЧастьОдногоВыражения.Значение.Количество() = 1 Тогда
			УсловиеВыражения = ЧастьОдногоВыражения.Значение[0];
			
			Если СтрЗаканчиваетсяНа(ВРЕГ(УсловиеВыражения), "НЕОПРЕДЕЛЕНО") Тогда
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "НЕОПРЕДЕЛЕНО";
			ИначеЕсли СтрЗаканчиваетсяНа(УсловиеВыражения, "0") Тогда
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = "0";
			Иначе
				НачалоВыражения = СтрНайти(УсловиеВыражения, "ТОГДА");
				ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = Прав(УсловиеВыражения, СтрДлина(УсловиеВыражения) - (НачалоВыражения + 4));
			КонецЕсли;
			
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = 
				?(ЭтоВыражениеПоказателя, "Коэффициент * ", "") 
				+ ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ];
		Иначе
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = 
				?(ЭтоВыражениеПоказателя, "Коэффициент * ", "")
				+ "ВЫБОР" //@Query-part
				+ Символы.ПС 
				+ СтрСоединить(ЧастьОдногоВыражения.Значение, Символы.ПС) 
				+ Символы.ПС
				+ "КОНЕЦ"; //@Query-part
		КонецЕсли;
		Если СтрНачинаетсяС(ЧастьОдногоВыражения.Ключ, "ВыражениеПоказателяКоличество")
			И Не ПустаяСтрока(ПараметрыФакта.УсловияВыражений.ВыражениеПересчетаКоличества) Тогда
			ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ] = ПараметрыФакта.УсловияВыражений[ЧастьОдногоВыражения.Ключ]
				+ " / " + ПараметрыФакта.УсловияВыражений.ВыражениеПересчетаКоличества;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавляет колонки дополнительных данных, которые предназначены для мэппинга факта на статьи и показатели.
//
Процедура ДобавитьКолонкиДополнительныхДанных(ТаблицаДополнительныхДанных, ИндексИменИВидовАналитик)
	
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	КолонкиТаблицыДанных = ТаблицаДополнительныхДанных.Колонки;
	
	ТребуетсяЗаполнение = КолонкиТаблицыДанных.Найти("ИдентификаторИсточникаДанных") = Неопределено;
	
	Если ТребуетсяЗаполнение Тогда
		ОписаниеТипаДата   = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
		ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
		ОписаниеТипаИД  = ОбщегоНазначения.ОписаниеТипаЧисло(4,, ДопустимыйЗнак.Неотрицательный);
		ОписаниеТипаАдрес  = ОбщегоНазначения.ОписаниеТипаЧисло(1,, ДопустимыйЗнак.Неотрицательный);
		ОписаниеТипаКоэффициент  = ОбщегоНазначения.ОписаниеТипаЧисло(7,2);
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		ОписаниеТипаВидАналитики = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.АналитикиСтатейБюджетов");
		ОписаниеТипаЗначениеАналитики = Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов.Тип;
		
		// Ключ области данных и поля связи с обобщенными данными
		КолонкиТаблицыДанных.Добавить("ИдентификаторИсточникаДанных", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ПривилегированныйРежимИсточника", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("Период", ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("НачалоПериода", ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("КонецПериода", ОписаниеТипаДата);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПериод", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеНачалоПериода", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеКонецПериода", ОписаниеТипаИД);
		
		// Дополнительные данные
		КолонкиТаблицыДанных.Добавить("ИД_" + "Источника", ОписаниеТипаСтрока); // ИД источника данных бюджетирования
		
		КолонкиТаблицыДанных.Добавить("ПравилоФакта", ИсточникиДанныхПовтИсп.ОписаниеТипаПравил());
		КолонкиТаблицыДанных.Добавить("ТипОбъектаИсточникаДанных");
		КолонкиТаблицыДанных.Добавить("КэшРеквизитовДляПолученияСхемы");
		КолонкиТаблицыДанных.Добавить("ХешСхемыКомпоновкиДанных");
		
		КолонкиТаблицыДанных.Добавить("ТипПравила", ИсточникиДанныхПовтИсп.ОписаниеТипаПолученияДанныхБюджетирования());
		КолонкиТаблицыДанных.Добавить("Коэффициент", ОписаниеТипаКоэффициент);
		КолонкиТаблицыДанных.Добавить("Расход", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("УникальныйИдентификатор", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ИсточникДанных");
		КолонкиТаблицыДанных.Добавить("КорСчет");
		
		КолонкиТаблицыДанных.Добавить("СтатьяБюджетов", Новый ОписаниеТипов("СправочникСсылка.СтатьиБюджетов, СправочникСсылка.ПоказателиБюджетов"));
		КолонкиТаблицыДанных.Добавить("ПоказательБюджетов", Новый ОписаниеТипов("СправочникСсылка.ПоказателиБюджетов"));
		
		// Поля, используемые для формирования идентификаторов выражений для нумерованных и именованных аналитик.
		КолонкиТаблицыДанных.Добавить("РасширенныйРежимНастройкиЗаполненияАналитики", ОписаниеТипаБулево);
		Для НомерАналитики = 1 По БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик() Цикл
			КолонкиТаблицыДанных.Добавить("ВидАналитики" + НомерАналитики, ОписаниеТипаВидАналитики);
			КолонкиТаблицыДанных.Добавить("ВыражениеЗаполненияАналитики" + НомерАналитики); // Строка или Неопределено
			КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеЗаполненияАналитики" + НомерАналитики, ОписаниеТипаИД);
			КолонкиТаблицыДанных.Добавить("ЗаполнятьУказаннымЗначениемАналитику" + НомерАналитики, ОписаниеТипаБулево);
			КолонкиТаблицыДанных.Добавить("ЗначениеАналитики" + НомерАналитики, ОписаниеТипаЗначениеАналитики);
		КонецЦикла;
		КолонкиТаблицыДанных.Добавить("ОборотПоАналитикеРасхода", ОписаниеТипаБулево);
		
		// Колонки, используемые только в случае получения данных по статьям бюджетов, влияющим на показатели бюджетов.
		// В таком случае аналитика может быть переопределена, также аналитика валюты может быть переопределена.
		// Признаком таких строк является флаг СтатьяБюджетовДляРасчетаПоказателя = Истина
		// (статья бюджетов и показатель бюджетов заполнены, причем статья бюджетов - это не статья, а не целевой показатель).
		КолонкиТаблицыДанных.Добавить("СтатьяБюджетовДляРасчетаПоказателя", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_КоличествоИспользуемыхАналитик");
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ВалютаОпределяетсяАналитикой", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_АдресАналитикиВалюта", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ПолеВалютыАналитики"); // Строка или Неопределено
		Для НомерАналитики = 1 По БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик() Цикл
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_Аналитика" + НомерАналитики, ОписаниеТипаЗначениеАналитики);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ТранслироватьАналитику" + НомерАналитики, ОписаниеТипаБулево);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_АдресТрансляцииАналитики" + НомерАналитики, ОписаниеТипаАдрес);
			КолонкиТаблицыДанных.Добавить("СвязиПоказателейБюджетов_ВидАналитики" + НомерАналитики, ОписаниеТипаВидАналитики);
		КонецЦикла;
		
		
		
		
		КолонкиТаблицыДанных.Добавить("РазделИсточникаДанных", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования"));
		
		// Валюта
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеЗаполненияАналитикиВалюта", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИсточникВалютный", ОписаниеТипаБулево);
		КолонкиТаблицыДанных.Добавить("ЗаполнениеВалюты", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("АдресАналитикиВалюта", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("ПолеВалютыАналитики", ОписаниеТипаСтрока);
		
		// Валюта хранения
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеЗаполненияАналитикиВалютаХранения", ОписаниеТипаИД);
		
		// Период курса
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеЗаполненияПериодКурса", ОписаниеТипаИД);
		
		// Единица измерения
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеЗаполненияАналитикиЕдиницаИзмерения", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ЗаполнениеЕдиницыИзмерения", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("АдресАналитикиЕдиницаИзмерения", ОписаниеТипаАдрес);
		КолонкиТаблицыДанных.Добавить("ПолеЕдиницыИзмеренияАналитики", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		// Показатели фактических данных
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяКоличество", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалюта", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалютаУпр", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыражениеПоказателяСуммаВалютаРегл", ОписаниеТипаСтрока);
		КолонкиТаблицыДанных.Добавить("ВыраженияПоказателейСуммы");
		
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяКоличествоНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяКоличествоПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаУпрПриход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаРеглПриход", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяКоличествоРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаУпрРасход", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаРеглРасход", ОписаниеТипаИД);
		
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяКоличествоКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаУпрКонечныйОстаток", ОписаниеТипаИД);
		КолонкиТаблицыДанных.Добавить("ИД_" + "ВыражениеПоказателяСуммаВалютаРеглКонечныйОстаток", ОписаниеТипаИД);
		
		Для Каждого ИмяВидАналитики Из ИндексИменИВидовАналитик Цикл 
			КолонкиТаблицыДанных.Добавить("ИД_" + ИмяВидАналитики.Ключ, ОписаниеТипаИД);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в исходную таблицу колонки вида ИмяКолонки_УникальныйИдентификатор
// При постобработке данных такие колонки свертываются в одну колонку вида ИмяКолонки.
//
Процедура ДобавитьКолонкиУникальныхИдентификаторов(ИсходнаяТаблица, ИсходныеКолонки)
	
	ТипПараметраИсходныеКолонки = ТипЗнч(ИсходныеКолонки);
	Если ТипПараметраИсходныеКолонки = Тип("Массив") Тогда
		КоллекцияИсходныхКолонок = ИсходныеКолонки;
	ИначеЕсли ТипПараметраИсходныеКолонки = Тип("Строка") Тогда
		КоллекцияИсходныхКолонок = СтрРазделить(ИсходныеКолонки, ",", Ложь);
	Иначе
		КоллекцияИсходныхКолонок = Новый Массив;
	КонецЕсли;
	
	ОднаКолонка = (КоллекцияИсходныхКолонок.Количество() = 1);
	
	Для Каждого ИсходнаяКолонка Из КоллекцияИсходныхКолонок Цикл 
		ИмяИсходнойКолонки = СокрЛП(ИсходнаяКолонка);
		ИмяДобавляемойКолонки = ?(ОднаКолонка, "", ИмяИсходнойКолонки) + "УникальныйИдентификатор";
		
		ИсходнаяТаблица.Колонки.Добавить(ИмяДобавляемойКолонки);
		
		Для Каждого ИсходнаяСтрока Из ИсходнаяТаблица Цикл
			ИсходнаяСтрока[ИмяДобавляемойКолонки] = КомпоновкаДанныхСервер.СтрУникальныйИдентификатор(ИсходнаяСтрока[ИмяИсходнойКолонки]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

// Возвращает правила получения факта для статей и показателей
//
// Параметры:
//  ИсточникДанных - Структура - параметры источника данных. См. подробнее БюджетнаяОтчетностьРасчетКэшаСервер.ДобавитьИсточник().
//  СценарийОтчета - СправочникСсылка.Сценарии - Сценарий отчета, если он задан.
//                 - Неопределено - Если сценарий отчета не задан.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица правил получения фактических данных. См. подробнее свойство ТаблицаПравилСтатей в ИсточникиДанныхСервер.ШаблонПараметровПолученияФакта().
//
Функция ПравилаПолученияФактаИсточникаДанных(ИсточникДанных, СценарийОтчета)
	
	СценарийОтчетаФактическиеДанные = (СценарийОтчета = Справочники.Сценарии.ФактическиеДанные);
	СценарийОтчетаИсполнениеБюджета = (СценарийОтчета = Справочники.Сценарии.ИсполнениеБюджета);
	
	ПравилаПолученияФактаИсточникаДанных = Неопределено;
	
	ТипыИсточников  = Перечисления.ТипыИсточниковДанныхБюджетирования;
	ТипыПравилФакта = Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования;
	
	ПродолжитьРасчет = Истина;
	ИмяМакета = "ПравилаПолученияФакта";
	Если ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
		И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоСтатьямБюджетов";
		ИмяПоляОтбора = "СтатьяБюджетов";
	ИначеЕсли ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки 
		Или ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
		ИмяСправочникаИсточника = "ПравилаПолученияФактаПоПоказателямБюджетов";
		ИмяПоляОтбора = "ПоказательБюджетов";
	Иначе
		ПродолжитьРасчет = Ложь;
	КонецЕсли;
	
	Если ПродолжитьРасчет Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		СхемаКомпоновкиДанныхПравил = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника(ИмяСправочникаИсточника, ИмяМакета);
		СКДПравил = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СхемаКомпоновкиДанныхПравил);
		Настройки = ИнициализированныеНастройкиПоУмолчанию(СКДПравил);
		
		ПредполагаетсяФакт = ИсточникДанных.ПредполагаетФактическиеДанные = "Предполагается"
			ИЛИ (ИсточникДанных.ПредполагаетФактическиеДанные = "ОпределяетсяНастройкойОтчета"
				И СценарийОтчетаФактическиеДанные);
		ПредполагаетсяИсполнениеБюджета = ИсточникДанных.ПредполагаетИсполнениеБюджета = "Предполагается"
			ИЛИ (ИсточникДанных.ПредполагаетИсполнениеБюджета = "ОпределяетсяНастройкойОтчета"
				И СценарийОтчетаИсполнениеБюджета);
		
		СписокТиповПравил = Новый СписокЗначений;
		Если ПредполагаетсяФакт ИЛИ ПредполагаетсяИсполнениеБюджета Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ИсполнениеБюджетаИФактическиеДанные);
		КонецЕсли;
		Если ПредполагаетсяФакт Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ФактическиеДанные);
		КонецЕсли;
		Если ПредполагаетсяИсполнениеБюджета Тогда
			СписокТиповПравил.Добавить(ТипыПравилФакта.ИсполнениеБюджета);
		КонецЕсли;
		
		ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ТипПравила", СписокТиповПравил, ВидСравненияКомпоновкиДанных.ВСписке);
		Если ЗначениеЗаполнено(СценарийОтчета) Тогда
			Если (ПредполагаетсяФакт И СценарийОтчетаФактическиеДанные
				Или ПредполагаетсяИсполнениеБюджета И СценарийОтчетаИсполнениеБюджета)
				И Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Сценарий")) <> Неопределено Тогда
				ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "Сценарий", СценарийОтчета, ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		КонецЕсли;
		
		ЗначенияОтбораПоСтатьямПоказателям = Новый СписокЗначений;
		ЗначенияОтбораПоСтатьямПоказателям.ЗагрузитьЗначения(ИсточникДанных.Объекты);
		
		ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, ИмяПоляОтбора, ЗначенияОтбораПоСтатьямПоказателям, ВидСравненияКомпоновкиДанных.ВСписке);
		
		ПоТаблицеКорреспонденций = ПолучитьФункциональнуюОпцию("НастройкаПравилПолученияФактаПоКорреспондирующимРегистрам");
		
		Если ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
			И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
			Если ПоТаблицеКорреспонденций Тогда
				ГруппаОтборовИЛИ = ФинансоваяОтчетностьСервер.НовыйОтбор(Настройки.Отбор, Неопределено, , Тип(
					"ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборовИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ГруппаОтборовИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборовИЛИ, Неопределено, , Тип(
					"ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборовИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаОтборовИ, "РазделИсточникаДанных",
					Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет,
					ВидСравненияКомпоновкиДанных.Равно);
					ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаОтборовИ, "ТипПравила",
					Перечисления.ТипПравилаПолученияФактическихДанныхБюджетирования.ИсполнениеБюджета,
					ВидСравненияКомпоновкиДанных.Равно);
				ГруппаОтборовИ = ФинансоваяОтчетностьСервер.НовыйОтбор(ГруппаОтборовИЛИ, Неопределено, , Тип(
					"ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтборовИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаОтборовИ,
						"РазделИсточникаДанных",
						Перечисления.РазделыИсточниковДанныхБюджетирования.ОперативныйУчет,
						ВидСравненияКомпоновкиДанных.НеРавно);
				ФинансоваяОтчетностьСервер.УстановитьОтбор(ГруппаОтборовИ,
						"ПромежуточноеКэшированиеРезультатовРаботыПравил",
						Ложь,
						ВидСравненияКомпоновкиДанных.Равно);
			Иначе
				ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор,
						"ПромежуточноеКэшированиеРезультатовРаботыПравил",
						Ложь,
						ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсточникДанных.ПоказательЗависимогоИсточникаДанных) Тогда
			ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", ИсточникДанных.ПоказательЗависимогоИсточникаДанных);
		ИначеЕсли ИсточникДанных.ТипИсточника = ТипыИсточников.Обороты 
				И НЕ ИсточникДанных.ЕстьЦелевыеПоказатели Тогда
			ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КонецЕсли;
		
		// Получим правила в виде таблицы со значениями реквизитов
		ПравилаПолученияФактаИсточникаДанных = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки);
		
		СтрокиПравилККорректировке = ПравилаПолученияФактаИсточникаДанных.НайтиСтроки(Новый Структура("ИдентификаторИсточникаДанных", "ДвиженияДенежныхСредствКВыплате"));
		Для Каждого СтрокаПравилаККорректировке Из СтрокиПравилККорректировке Цикл
			СтрокаПравилаККорректировке.ИдентификаторИсточникаДанных = СтрокаПравилаККорректировке.ИдентификаторИсточникаДанных + ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаПравилаККорректировке.ТипДанныхУчетаПриход);
		КонецЦикла;
		
		Если ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки Тогда
			//++ Локализация
			ОпределитьНеобходимостьОграниченияКоличестваСубконто(
				ПравилаПолученияФактаИсточникаДанных,
				Перечисления.РазделыИсточниковДанныхБюджетирования.РегламентированныйУчет);
			//-- Локализация
			
			//++ НЕ УТКА
			ОпределитьНеобходимостьОграниченияКоличестваСубконто(
				ПравилаПолученияФактаИсточникаДанных,
				Перечисления.РазделыИсточниковДанныхБюджетирования.МеждународныйУчет);
			//-- НЕ УТКА
		КонецЕсли;
		
		ПравилаПолученияФактаИсточникаДанных.Колонки.Добавить("ТипОбъектаИсточникаДанных");
		ПравилаПолученияФактаИсточникаДанных.ЗаполнитьЗначения(Тип("СправочникСсылка." + ИмяСправочникаИсточника), "ТипОбъектаИсточникаДанных");
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	КолонкаПравило = ПравилаПолученияФактаИсточникаДанных.Колонки.Правило; // КолонкаТаблицыЗначений -
	КолонкаПравило.Имя = "ПравилоФакта";
	
	Возврат ПравилаПолученияФактаИсточникаДанных;
	
КонецФункции

Процедура АдаптироватьВыражениеПоля(ИсходноеВыражение, ПрефиксИдентификатора = "", Знач УсловияВыражений)
	
	ПодготовленноеВыражение = "";
	
	Если СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеНачалоПериода")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеКонецПериода")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеПериод")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеПериодГраница")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеЗаполненияАналитики")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеЗаполненияПериодКурса")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеЗаполненияАналитикиВалюта")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеЗаполненияАналитикиВалютаХранения")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеПоказателя")
		Или СтрНачинаетсяС(ИсходноеВыражение, "ВыражениеИменованнойАналитики")
		Тогда
		Если УсловияВыражений.Свойство(ИсходноеВыражение, ПодготовленноеВыражение) Тогда
			
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "ИД_", ПрефиксИдентификатора + "ИД_");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&" + "НАЧАЛОПЕРИОДА", ПрефиксИдентификатора + "НАЧАЛОПЕРИОДА");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&" + "КОНЕЦПЕРИОДА", ПрефиксИдентификатора + "КОНЕЦПЕРИОДА");
			ПодготовленноеВыражение = СтрЗаменить(ПодготовленноеВыражение, "&" + "ПЕРИОД", ПрефиксИдентификатора + "ПЕРИОД");
			
			ИсходноеВыражение = ПодготовленноеВыражение;
		Иначе
			ИсходноеВыражение = "НЕОПРЕДЕЛЕНО";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура АдаптироватьВыражениеПериодаПланирования(ИсходноеВыражение, ВыражениеПериодаПланирования, ВыражениеПериодаКурса)
	
	ИсходноеВыражение = ВРЕГ(ИсходноеВыражение);
	
	ИсходноеВыражение = СтрЗаменить(ИсходноеВыражение, "ПЕРИОДПЛАНИРОВАНИЯ", ВыражениеПериодаПланирования);
	ИсходноеВыражение = СтрЗаменить(ИсходноеВыражение, "ПЕРИОДКУРСА", ВыражениеПериодаКурса);
	
КонецПроцедуры

// Выгружает данные в переданную таблицу по макету СКД, при необходимости включая привилегированный режим.
//
Процедура ВыгрузитьРезультатПоМакетуСУчетомОграниченийДоступа(ЗаполняемаяТаблица, МакетПолученияДанных, ВнешниеНаборыДанных, ПривилегированныйРежим)
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрПривилегированныйРежим = МакетПолученияДанных.ЗначенияПараметров.Найти("ПривилегированныйРежим");
	Если ПараметрПривилегированныйРежим <> Неопределено Тогда
		ПараметрПривилегированныйРежим.Значение = ПривилегированныйРежим;
	КонецЕсли;
	
	Если ТипЗнч(ЗаполняемаяТаблица) = Тип("ТаблицаЗначений") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
			ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных),
			ЗаполняемаяТаблица);
	Иначе
		ЗаполняемаяТаблица = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКДПоМакету(МакетПолученияДанных, ВнешниеНаборыДанных);
	КонецЕсли;

	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ШаблонПараметровИдентификацииВыражений(НастройкиСоставаПолей)
	
	Перем ПараметрыИдентификацииВыражений;
	
	ПараметрыИдентификацииВыражений = Новый Структура;
	
	ПараметрыИдентификацииВыражений.Вставить("ТекущийИдентификаторВыражения", 1);
	ПараметрыИдентификацииВыражений.Вставить("ЗадействованныеВыражения", Новый Соответствие); // Ключ - выражение, Значение - идентификатор условия выражения
	
	ВыражениеВстречаетсяВПоле = Новый ТаблицаЗначений;
	ВыражениеВстречаетсяВПоле.Колонки.Добавить("Выражение");
	ВыражениеВстречаетсяВПоле.Колонки.Добавить("ИмяПоляВыражения");
	ПараметрыИдентификацииВыражений.Вставить("ВыражениеВстречаетсяВПоле", ВыражениеВстречаетсяВПоле);
	
	// Расширяемая структура. Могут добавляться свойства вид "ИД_ИмяПоВидуАналитики", например, "ИД_Партнеры".
	ЧастиВыражений = Новый Структура; 
	ЗначенияПоУмолчанию = Новый Структура;
	
	// Выражения периода
	ЧастиВыражений.Вставить("ВыражениеНачалоПериода", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеКонецПериода", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеПериод", Новый Массив);
	ЧастиВыражений.Вставить("ВыражениеПериодГраница", Новый Массив);
	
	ЗначенияПоУмолчанию.Вставить("ИД_" + "ВыражениеНачалоПериода");
	ЗначенияПоУмолчанию.Вставить("ИД_" + "ВыражениеКонецПериода");
	ЗначенияПоУмолчанию.Вставить("ИД_" + "ВыражениеПериод");
	ЗначенияПоУмолчанию.Вставить("ПолучениеОстатковНаГраницуПериода", Ложь);
	
	ЗначенияПоУмолчанию.Вставить("НачалоПериода");
	ЗначенияПоУмолчанию.Вставить("КонецПериода");
	ЗначенияПоУмолчанию.Вставить("Период");
	
	// Выражения аналитик
	МаксимальноеКоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
	Для НомерАналитики = 1 По МаксимальноеКоличествоАналитик Цикл
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитики" + НомерАналитики, Новый Массив);
	КонецЦикла;
	
	// Выражения количественных показателей
	Если НастройкиСоставаПолей.ТребуетсяКоличество Тогда
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиЕдиницаИзмерения", Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоНачальныйОстаток", Новый Массив);
	КонецЕсли;
	
	// Выражения суммовых показателей
	Если НастройкиСоставаПолей.ТребуетсяСумма Тогда
		ЧастиВыражений.Вставить("ВыражениеЗаполненияПериодКурса", Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиВалюта", Новый Массив);
		ЧастиВыражений.Вставить("ВыражениеЗаполненияАналитикиВалютаХранения", Новый Массив);
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаНачальныйОстаток Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаНачальныйОстаток", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрНачальныйОстаток", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглНачальныйОстаток", Новый Массив);
		КонецЕсли;
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаПриход Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоПриход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаПриход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрПриход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглПриход", Новый Массив);
		КонецЕсли;
		
		Если НастройкиСоставаПолей.ТребуетсяСуммаРасход Тогда 
			ЧастиВыражений.Вставить("ВыражениеПоказателяКоличествоРасход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРасход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаУпрРасход", Новый Массив);
			ЧастиВыражений.Вставить("ВыражениеПоказателяСуммаВалютаРеглРасход", Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияПоУмолчанию.Вставить("ПривилегированныйРежимИсточника");
	ЗначенияПоУмолчанию.Вставить("ИД_" + "Источника");
	ЗначенияПоУмолчанию.Вставить("ПоказательБюджетов");
	
	ПараметрыИдентификацииВыражений.Вставить("ЧастиВыражений", ЧастиВыражений);
	ПараметрыИдентификацииВыражений.Вставить("ЗначенияПоУмолчанию", ЗначенияПоУмолчанию);
	
	// Расширяемая структура. Могут добавляться свойства вид "ИД_ИмяПоВидуАналитики", например, "ИД_Партнеры".
	ЗначенияПоУмолчаниюДопДанные = Новый Структура;
	Для Каждого ЧастьВыражения Из ЧастиВыражений Цикл
		Если СтрНачинаетсяС(ЧастьВыражения.Ключ, "ВыражениеПоказателя")
			Или СтрНачинаетсяС(ЧастьВыражения.Ключ, "ВыражениеЗаполненияАналитики")
			Или ЧастьВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалюта"
			Или ЧастьВыражения.Ключ = "ВыражениеЗаполненияАналитикиВалютаХранения" Тогда
			ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_" + ЧастьВыражения.Ключ);
		КонецЕсли;
	КонецЦикла;

	ЗначенияПоУмолчаниюДопДанные.Вставить("ИД_" + "ВыражениеЗаполненияПериодКурса");
	// Дополнительный отбор элемента вида бюджета
	ЗначенияПоУмолчаниюДопДанные.Вставить("ДополнительныйОтбор");
	
	ПараметрыИдентификацииВыражений.Вставить("ЗначенияПоУмолчаниюДопДанные", ЗначенияПоУмолчаниюДопДанные);
	
	// Целевые показатели выделены в отдельные источники данных.
	// Параметр используется как флаг необходимости получения остатков с учетом границы периода (параметр &ПериодГраница).
	ПараметрыИдентификацииВыражений.Вставить("ПолучениеОстатковНаГраницуПериода", Ложь);
	ПараметрыИдентификацииВыражений.Вставить("ИспользуетсяПриведениеКГраницеПериода", ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта());
	
	Возврат ПараметрыИдентификацииВыражений;

КонецФункции

Процедура ДополнитьИсточникамиДанныхВлияющихСтатей(ИсточникиДанных)
	
	ТипыИсточников = Перечисления.ТипыИсточниковДанныхБюджетирования;
	
	ИсходноеКоличествоИсточников = ИсточникиДанных.Количество();
	ИсточникиДанных.Колонки.Добавить("ПоказательЗависимогоИсточникаДанных");
	
	ПоказателиБюджетов = Новый Массив;
	
	Для ИндексИсточника = 0 По ИсходноеКоличествоИсточников - 1 Цикл
		ИсточникДанных = ИсточникиДанных[ИндексИсточника];
		
		// При получении данных из самого документа используются НЕ онлайновые 
		Если Не ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки Тогда // Только у показателей влияющие статьи
			Продолжить;
		КонецЕсли;
		
		ОбъектыИсточника = ИсточникДанных.Объекты; // Массив из СправочникСсылка.ПоказателиБюджетов, СправочникСсылка.СтатьиБюджетов -
		Если ОбъектыИсточника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектИсточника Из ОбъектыИсточника Цикл
			ПоказателиБюджетов.Добавить(ОбъектИсточника);
		КонецЦикла;
	КонецЦикла;
	
	Если ПоказателиБюджетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу правил, по которым планируется получить данные
	УстановитьПривилегированныйРежим(Истина);
	
	// Есть метод для источников данных
	СхемаКомпоновкиДанных = Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПолучитьМакет("ПравилаПолученияФакта");
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	// Дополним отбором, обеспечивающим выбор только статей, влияющих на показатели
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Настройки.Отбор, "ПоказательБюджетов");
	Если ЭлементОтбора = Неопределено Или Не ЭлементОтбора.Использование Тогда
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, "ПоказательБюджетов", ПоказателиБюджетов, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, "ПоказательБюджетов");
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Настройки, 
		"ПромежуточноеКэшированиеРезультатовРаботыПравил", Ложь, 
		ВидСравненияКомпоновкиДанных.Равно);
	
	ТаблицаПравилСтатей = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, Настройки);
	ТаблицаПравилСтатей.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	ТаблицаПравилСтатей.Индексы.Добавить("ПоказательБюджетов");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаПравилСтатей.Количество() > 0 Тогда
		Для ИндексИсточника = 0 По ИсходноеКоличествоИсточников - 1 Цикл
			ИсточникДанных = ИсточникиДанных[ИндексИсточника];
			
			// При получении данных из самого документа используются НЕ онлайновые 
			Если Не ИсточникДанных.ТипИсточника = ТипыИсточников.Остатки Тогда // Только у показателей влияющие статьи
				Продолжить;
			КонецЕсли;
			Если ОбъектыИсточника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектыИсточника = ИсточникДанных.Объекты;
			Для Каждого ОбъектИсточника Из ОбъектыИсточника Цикл
				Отбор = Новый Структура("ПоказательБюджетов", ОбъектИсточника);
				НайденныеСтроки = ТаблицаПравилСтатей.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					НовыйИсточник = ИсточникиДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйИсточник, ИсточникДанных,,"ТипИсточника, Объекты");
					НовыйИсточник.ПредполагаетФактическиеДанные = ИсточникДанных.ВлияющиеСтатьиПредполагаетФактическиеДанные;
					НовыйИсточник.ПредполагаетИсполнениеБюджета = ИсточникДанных.ВлияющиеСтатьиПредполагаетИсполнениеБюджета;
					НовыйИсточник.ВлияющиеСтатьиПредполагаетФактическиеДанные = "";
					НовыйИсточник.ВлияющиеСтатьиПредполагаетИсполнениеБюджета = "";
					
					НовыйИсточник.Объекты = Новый Массив;
					
					НовыйИсточник.ПоказательЗависимогоИсточникаДанных = ОбъектИсточника;
					НовыйИсточник.ТипИсточника = ТипыИсточников.Обороты;
					
					Для Каждого ПравилоСтатьи Из НайденныеСтроки Цикл
						Объекты = НовыйИсточник.Объекты; // Массив -
						Объекты.Добавить(ПравилоСтатьи.СтатьяБюджетов);
					КонецЦикла;
					НовыйИсточник.Объекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(НовыйИсточник.Объекты);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьАльтернативныйАлгоритм()
	ИспользоватьАльтернативныйАлгоритм = Истина;
	Возврат ИспользоватьАльтернативныйАлгоритм;
КонецФункции

Функция ИспользуетсяПриведениеКГраницеПериодаВСвязяхСхемыПолученияФакта()
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ТекущийРежим = Метаданные.РежимСовместимости;
	Режимы = Метаданные.СвойстваОбъектов.РежимСовместимости;
	
	ВерсияСПриведениемКГранице = "8.3.14";
	
	ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемнаяИнформация.ВерсияПриложения);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, ВерсияСПриведениемКГранице) >= 0
		И ТекущийРежим = Режимы.НеИспользовать Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ОпределитьНеобходимостьОграниченияКоличестваСубконто(ПравилаПолученияФакта, РазделИсточниковДанных)
	
	ОтборПоРазделуИсточниковДанных = Новый Структура("РазделИсточникаДанных", РазделИсточниковДанных);
	ПравилаРазделаИсточниковДанных = ПравилаПолученияФакта.НайтиСтроки(ОтборПоРазделуИсточниковДанных);
	
	ЕстьОграничениеКоличестваСубконто = Ложь;
	Для Каждого СтрокаПравил Из ПравилаРазделаИсточниковДанных Цикл
		Если СтрокаПравил.ОграничениеКоличестваСубконто > 0 Тогда
			ЕстьОграничениеКоличестваСубконто = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОграничениеКоличестваСубконто Тогда
		КоличествоАналитик = БюджетированиеКлиентСервер.МаксимальноеКоличествоАналитик();
		КоличествоСубконтоВВыражениях = 0;
		
		Для Каждого СтрокаПравил Из ПравилаРазделаИсточниковДанных Цикл
			КоличествоСубконто = 0;
			Для НомерАналитики = 1 По КоличествоАналитик Цикл
				ВыражениеЗаполненияАналитики = СтрокаПравил["ВыражениеЗаполненияАналитики" + НомерАналитики];
				Если НЕ ПустаяСтрока(ВыражениеЗаполненияАналитики) Тогда
					ЧастиПутиКДанным = СтрРазделить(ВыражениеЗаполненияАналитики, ".");
					Для Каждого ПутьКДанным Из ЧастиПутиКДанным Цикл
						Если СтрНачинаетсяС(ПутьКДанным, "Субконто") Тогда
							НомерСубконто = Число(Прав(ПутьКДанным, 1));
							КоличествоСубконто = Макс(КоличествоСубконто, НомерСубконто);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПравил.ОграничениеКоличестваСубконто > 0 Тогда
				Если КоличествоСубконто < СтрокаПравил.ОграничениеКоличестваСубконто Тогда
					СтрокаПравил.ОграничениеКоличестваСубконто = КоличествоСубконто;
				Иначе
					СтрокаПравил.ОграничениеКоличестваСубконто = -1;
				КонецЕсли;
			КонецЕсли;
			Если КоличествоСубконто > КоличествоСубконтоВВыражениях Тогда
				КоличествоСубконтоВВыражениях = КоличествоСубконто;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаПравил Из ПравилаРазделаИсточниковДанных Цикл
			Если СтрокаПравил.ОграничениеКоличестваСубконто >= 0 Тогда
				Если СтрокаПравил.ОграничениеКоличестваСубконто < КоличествоСубконтоВВыражениях Тогда
					СтрокаПравил.ИдентификаторИсточникаДанных = СтрокаПравил.ИдентификаторИсточникаДанных + СтрокаПравил.ОграничениеКоличестваСубконто;
				Иначе
					СтрокаПравил.ОграничениеКоличестваСубконто = -1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УменьшитьКоличествоСубконтоИсточникаПриНеобходимости(Макет, ИмяИсточникаДанных, ОграничениеКоличестваСубконто, МаксКоличествоСубконто)
	
	Если ОграничениеКоличестваСубконто >= 0 Тогда
		ТекстЗапроса = Макет.НаборыДанных[ИмяИсточникаДанных].Запрос;
		НомерСубконто = ОграничениеКоличестваСубконто + 1;
		Пока НомерСубконто <= МаксКоличествоСубконто Цикл
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				ИмяИсточникаДанных + ".Субконто" + НомерСубконто + ".*",
				"НЕОПРЕДЕЛЕНО");
			ТекстЗапроса = СтрЗаменить(
				ТекстЗапроса,
				ИмяИсточникаДанных + ".Субконто" + НомерСубконто,
				"НЕОПРЕДЕЛЕНО");
			НомерСубконто = НомерСубконто + 1;
		КонецЦикла;
		Макет.НаборыДанных[ИмяИсточникаДанных].Запрос = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА
#Область НастройкаРегламентногоЗаданияФормированияБюджетныхЗадач

// Получает параметры регламентного задания для модели бюджетирования и устанавливает реквизиты на форме.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента справочника Модели бюджетирования.
//
Процедура ПолучитьРасписаниеРегламентногоЗадания(Форма) Экспорт
	
	Форма.Расписание = Новый РасписаниеРегламентногоЗадания;
	
	Объект = Форма.Объект; // СправочникОбъект.МоделиБюджетирования -
	Если Объект.Ссылка.Пустая() Тогда
		
		Форма.Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		Форма.Расписание.ПериодПовтораДней = 1; //каждый день
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ИдентификаторЗадания = Форма.Объект.РегламентноеЗадание;
		Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
			Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				Форма.Расписание = Задание.Расписание;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Создает экземпляр регламентного задания при выполнении условий исполнения регламентного задания.
// Вызывается из обработчика события "Перед записью" справочника Модели бюджетирования.
//
// Параметры:
// 	Объект - СправочникОбъект.МоделиБюджетирования - записываемый объект.
// 	Отказ  - Булево - признак отказа от записи модели.
//
Процедура ПроверитьЭкземплярРегламентногоЗадания(Объект, Отказ) Экспорт
	
	Если Отказ ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Создание регламентное задание (получение уникального идентификатора)
	УстановитьПривилегированныйРежим(Истина);
	
	Задание = РегламентныеЗаданияСервер.Задание(Объект.РегламентноеЗадание);
	СоздатьЗадание = ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс")
			И Задание = Неопределено
			И Объект.АвтоматическиФормироватьЗадачи
			И Объект.Статус = Перечисления.СтатусыМоделейБюджетирования.Действует
			И НЕ Объект.ПометкаУдаления;
	
	Если СоздатьЗадание Тогда
		
		НаименованиеЗадания = НСтр("ru = 'Формирование бюджетных задач по модели: %1';
									|en = 'Budget task generation according to the model: %1'");
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НаименованиеЗадания, СокрЛП(Объект.Наименование));
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ФормированиеБюджетныхЗадач);
		ПараметрыЗадания.Вставить("Использование", Ложь);
		ПараметрыЗадания.Вставить("Наименование",  НаименованиеЗадания);
		
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Объект.РегламентноеЗадание = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
		
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("Задание",Задание);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Вызывается из обработчика события "При записи" справочника Модели бюджетирования.
// Задает параметры регламентного задания:
// 				- Использование
// 				- Расписание
// 				- Наименование.
//
// Параметры:
// 	Объект - СправочникОбъект.МоделиБюджетирования - записываемый объект.
// 	Отказ - Булево - признак отказа от записи модели.
//
Процедура УстановитьПараметрыЭкземплярРегламентногоЗадания(Объект, Отказ) Экспорт
	
	Если Отказ ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.Свойство("Задание") Тогда
		Задание = Объект.ДополнительныеСвойства.Задание;
		Если Задание = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗадание = Ложь;
	ПараметрыЗадания = Новый Структура;
	
	// Расписание устанавливается в форме элемента
	Если Объект.ДополнительныеСвойства.Свойство("Расписание") 
		И ТипЗнч(Объект.ДополнительныеСвойства.Расписание) = Тип("РасписаниеРегламентногоЗадания")
		И Строка(Объект.ДополнительныеСвойства.Расписание) <> Строка(Задание.Расписание) Тогда
	
		ПараметрыЗадания.Вставить("Расписание", Объект.ДополнительныеСвойства.Расписание);
		ЗаписатьЗадание = Истина;
		
	КонецЕсли;
	
	// Использование устанавливается в форме элемента
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБюджетныйПроцесс")
		И Объект.Статус = Перечисления.СтатусыМоделейБюджетирования.Действует
		И Объект.АвтоматическиФормироватьЗадачи	
		И НЕ Объект.ПометкаУдаления Тогда
		
		ПараметрыЗадания.Вставить("Использование", Истина);
		
	Иначе
		
		ПараметрыЗадания.Вставить("Использование", Ложь);
		
	КонецЕсли;
	Если ПараметрыЗадания.Использование <> Задание.Использование Тогда
		ЗаписатьЗадание = Истина;
	КонецЕсли;

	НаименованиеЗадания = НСтр("ru = 'Формирование бюджетных задач по модели: %1';
								|en = 'Budget task generation according to the model: %1'");
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НаименованиеЗадания, СокрЛП(Объект.Наименование));
	ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание")
		И ПараметрыЗадания.Наименование <> Задание.Наименование Тогда
		ЗаписатьЗадание = Истина;
	КонецЕсли;
	
	Если Задание.Параметры.Количество() <> 1 ИЛИ Задание.Параметры[0] <> Объект.Ссылка Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Объект.Ссылка);
		ПараметрыЗадания.Вставить("Параметры", Параметры);
		ЗаписатьЗадание = Истина;
	КонецЕсли;
	
	Если ЗаписатьЗадание Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегламентныеЗаданияСервер.ИзменитьЗадание(Объект.РегламентноеЗадание, ПараметрыЗадания);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет экземпляр регламентного задания.
// Вызывается из обработчика события "Перед удалением" справочника Модели бюджетирования.
//
// Параметры:
// 	Объект - СправочникОбъект.МоделиБюджетирования - удаляемый объект.
// 	Отказ - Булево - признак отказа от удаления модели.
//
Процедура УдалитьЭкземплярРегламентногоЗадания(Объект, Отказ) Экспорт
	
	Если Отказ ИЛИ Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	РегламентныеЗаданияСервер.УдалитьЗадание(Объект.РегламентноеЗадание);
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТКА

#Область ОбработчикиСобытий

Процедура ЭкземплярБюджетаПрисоединенныеФайлыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗначениеЗаполнено(Источник.ТипСлужебногоФайла)
		И ЗначениеЗаполнено(Источник.Редактирует) Тогда
		
		ТекстОшибки = НСтр("ru = 'Файл является служебным
									|Редактирование файла запрещено';
									|en = 'This file is for technical use
									|Editing is prohibited'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Проверяет, выполнились ли обработчики обновления, блокирующие формирование бюджетного отчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если данные еще обновляются.
//
Функция ДанныеДляБюджетногоОтчетаЕщеОбновляются() Экспорт
	Возврат НЕ ОбновлениеИнформационнойБазы.ОбъектОбработан("Отчет.БюджетныйОтчет").Обработан;
КонецФункции

// Функция для проверки объектов при открытии форм и перед записью.
// Может использоваться как функция проверки по умолчанию, если
// достаточно логики - заблокированные объекты зарегистрированы на узлах плана обмена ОбновлениеИнформационнойБазы.
//
// Параметры:
//  МетаданныеИОтбор - см. ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным.
//
// Возвращаемое значение:
//  Булево - Истина, если объект обновлен и доступен для изменения.
//
Функция ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Данные = МетаданныеИОтбор.Данные;
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Если Не ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
			Возврат Истина;
		ИначеЕсли ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеВГлавномУзлеЗавершеноУспешно") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеИОтбор = Неопределено Тогда
		МетаданныеИОтбор = ОбновлениеИнформационнойБазы.МетаданныеИОтборПоДанным(Данные, Неопределено);
	КонецЕсли;
	
	Если МетаданныеИОтбор.ЭтоНовый Тогда
		
		ДанныеТекущегоОбъектаОбновлены = Истина;
		
	Иначе
		
		ДанныеТекущегоОбъектаОбновлены = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, МетаданныеИОтбор.Метаданные, МетаданныеИОтбор.Отбор);
		
	КонецЕсли;
	
	Если НЕ ДанныеТекущегоОбъектаОбновлены Тогда
		Возврат ДанныеТекущегоОбъектаОбновлены;
	КонецЕсли;
	
	СвязанныеОбъекты = Новый Массив;
	
	ДанныеСвязанныхОбъектовОбновлены = Истина;
	
	Если МетаданныеИОтбор.Метаданные = Метаданные.Документы.УстановкаЗначенийНефинансовыхПоказателей Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ШаблоныВводаНефинансовыхПоказателей);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Документы.ЭкземплярБюджета Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Справочники.ВидыБюджетов Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Справочники.ЭлементыФинансовыхОтчетов Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.ПланыВидовХарактеристик.АналитикиСтатейБюджетов);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.БюджетныйОтчет Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.НефинансовыеПоказателиБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.ЗначенияНефинансовыхПоказателей);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ОборотнаяВедомостьБюджетирования Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ОборотноСальдоваяВедомостьБюджетирования Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ПроверкаСвязейПоказателейБюджетов Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоПоказателямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.СвязиПоказателейБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.РезультатРаботыПравилПолученияФактическихДанных Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.РасшифровкаФормулыБюджетногоОтчета Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшВспомогательныхДанныхВидаБюджета);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.ЛимитыРасходаДенежныхСредствПоДаннымБюджетирования Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаЛимитовПоДаннымБюджетирования);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования);
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств Тогда
		Если Константы.ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования.Получить() Тогда
			СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаПолученияФактаПоСтатьямБюджетов);
			СвязанныеОбъекты.Добавить(Метаданные.Справочники.ПравилаЛимитовПоДаннымБюджетирования);
			СвязанныеОбъекты.Добавить(Метаданные.РегистрыНакопления.ОборотыБюджетов);
			СвязанныеОбъекты.Добавить(Метаданные.РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу);
		КонецЕсли;
	
	//++ НЕ УТКА	
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Справочники.ВидыФинансовыхОтчетов Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Документы.ЭкземплярФинансовогоОтчета Тогда
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		
	ИначеЕсли МетаданныеИОтбор.Метаданные = Метаданные.Отчеты.МеждународныйОтчет Тогда 
		
		СвязанныеОбъекты.Добавить(Метаданные.Справочники.ЭлементыФинансовыхОтчетов);
		
	//-- НЕ УТКА
	КонецЕсли;
	
	Для каждого МетаданныеСвязанногоОбъекта Из СвязанныеОбъекты Цикл
	
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, МетаданныеСвязанногоОбъекта) Тогда
			ДанныеСвязанныхОбъектовОбновлены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеТекущегоОбъектаОбновлены И ДанныеСвязанныхОбъектовОбновлены;
	
КонецФункции

#КонецОбласти
