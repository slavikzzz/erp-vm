#Область СлужебныеПроцедурыИФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//   ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
Процедура ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	Изменения = ОбменДаннымиИСМПВызовСервера.ОтменитьПоследнююОперацию(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ОбменДаннымиИСМПВызовСервера.ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.';
				           |en = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет неотправленную операцию из очереди передачи данных в ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
Процедура ОтменитьПередачу(ДокументСсылка) Экспорт
	
	Изменения = ОбменДаннымиИСМПВызовСервера.ОтменитьПередачу(ДокументСсылка);
	
	Если Изменения <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Контекст",                ДокументСсылка);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", Неопределено);
		
		ПослеЗавершенияОбмена(
			Изменения,
			ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.';
				           |en = 'Операция отмены не может быть выполнена для документа %1 по причине нарушения внутренней структуры хранения данных.
				           |Выполнена операция восстановления статуса по данным протокола обмена.'"),
				ДокументСсылка));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьПротоколОбмена(Документ, Владелец = Неопределено, ДляДокументаОснования = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("ДляДокументаОснования", ДляДокументаОснования);
	
	ОткрытьФорму(
		"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаПротоколОбмена",
		ПараметрыФормы,
		Владелец,
		Новый УникальныйИдентификатор,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик команд по выполнению требуемого дальнейшего действия в динамических списках.
//
// Параметры:
//  ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда.
//  ПараметрыПередачи - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действие, которое будет выполнено.
//                    - См. ИнтеграцияИСКлиентСервер.ИнициализироватьПараметрыПередачиДанных
Процедура ПодготовитьСообщенияКПередаче(ДинамическийСписок, ПараметрыПередачи) Экспорт
	
	ОчищатьСообщения = Истина;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ОчищатьСообщения = ПараметрыПередачи.ОчищатьСообщения;
	КонецЕсли;
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДополнительныеПараметры = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		ДальнейшееДействие = ПараметрыПередачи.ДальнейшееДействие;
	Иначе
		ДальнейшееДействие = ПараметрыПередачи;
	КонецЕсли;
	
	Контекст = ОбменДаннымиИСКлиент.СтруктураПодготовкиСообщенийКПередаче(
		ДинамическийСписок, ДальнейшееДействие,
		Новый ОписаниеОповещения("ПодготовитьСообщенияКПередачеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура") Тогда
		Контекст.ПараметрыПередачи = ПараметрыПередачи;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПередачи) = Тип("Структура")
		И ПараметрыПередачи.ИменаКолонокДальнейшиеДействия <> Неопределено Тогда
		ИменаКолонокДальнейшиеДействия = ПараметрыПередачи.ИменаКолонокДальнейшиеДействия;
	Иначе
		ИменаКолонокДальнейшиеДействия = Новый Массив;
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП1");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП2");
		ИменаКолонокДальнейшиеДействия.Добавить("ДальнейшееДействиеИСМП3");
	КонецЕсли;
	
	ОбменДаннымиИСКлиент.ОпределитьДоступностьДействий(
		Контекст, ИменаКолонокДальнейшиеДействия, "Организация");
	
	ОбменДаннымиИСКлиент.ПодготовитьСообщенияКПередаче(Контекст);
	
КонецПроцедуры

// Обработчик завершения процедуры ПодготовитьСообщенияКПередаче.
//
// Параметры:
//  Контекст - Структура - контекст выполнения обработчика:
//   * МассивДокументов - Массив из ОпределяемыйТип.ДокументыИСМП - список ссылок на обрабатываемые документы,
//   * НепроведенныеДокументы - Массив из ОпределяемыйТип.ДокументыИСМП - документы, исключенные из обработки,
//   * ДинамическийСписок - ТаблицаФормы - список в котором выполняется команда,
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - действие, которое будет выполнено.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
Процедура ПодготовитьСообщенияКПередачеЗавершение(Контекст, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ВходящиеДанные = Новый Массив;
	Для Каждого ДокументСсылка Из Контекст.МассивДокументов Цикл
		
		ПараметрыОбработкиДокументов = ОбменДаннымиИСМПКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = ДокументСсылка;
		ПараметрыОбработкиДокументов.Организация        = Контекст.РеквизитыДокументов[ДокументСсылка].Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = Контекст.ДальнейшееДействие;
		
		ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
		
	КонецЦикла;
	
	Форма = Неопределено;
	Если ТипЗнч(Контекст) = Тип("Структура")
		И Контекст.Свойство("ДинамическийСписок")
		И ТипЗнч(Контекст.ДинамическийСписок) = Тип("ТаблицаФормы") Тогда
		Форма = ОбменДаннымиИСКлиент.ПолучитьФормуПоЭлементуФормы(Контекст.ДинамическийСписок);
	КонецЕсли;
	
	РезультатОбмена = ОбменДаннымиИСМПВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ОповещениеПриЗавершении = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОповещениеПриЗавершении") Тогда
		ОповещениеПриЗавершении = ДополнительныеПараметры.ОповещениеПриЗавершении;
	КонецЕсли;
	
	ОбменДаннымиИСМПКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

// Организации для обмена.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Неопределено, ОпределяемыйТип.Организация, Массив из ОпределяемыйТип.Организация - Организации для обмена
Функция ОрганизацииДляОбмена(Форма) Экспорт
	
	Организации = Форма.Организации.ВыгрузитьЗначения();
	Если Организации.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Организации.Количество() = 1 Тогда
		Возврат Организации[0];
	Иначе
		Возврат Организации;
	КонецЕсли;
	
КонецФункции

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ИС МП.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник команды выполнения обмена
//  Организация - Неопределено, Массив Из ОпределяемыйТип.Организация, ОпределяемыйТип.Организация - 
//        Организация или несколько организаций, по которым необходимо выполнить обмен.
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции.
Процедура ВыполнитьОбмен(Форма, Организация = Неопределено, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	РезультатОбмена = ОбменДаннымиИСМПВызовСервера.ВыполнитьОбмен(
		Организация,
		Форма.УникальныйИдентификатор);
	
	ОбработатьРезультатОбмена(
		РезультатОбмена, Форма,, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеОбмена(Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	РезультатОбмена = ОбменДаннымиИСМПВызовСервера.ПродолжитьВыполнениеОбмена(
		Неопределено, Форма.АдресРезультатаОбменаВоВременномХранилище);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст, ОповещениеПриЗавершении, ВыводитьОкноОжидания);
	
КонецПроцедуры

// Выполняет подготовку к передаче в сервис ИС МП сообщения по документу и начинает процедуру обмена
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ПараметрыОбработкиДокументов - (См. ОбменДаннымиИСМПКлиентСервер.ПараметрыОбработкиДокументов)
//  ОповещениеПриЗавершении - ОписаниеОповещения - Оповещение при завершении операции
Процедура ПодготовитьКПередаче(Форма, ПараметрыОбработкиДокументов, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	ВходящиеДанные = Новый Массив;
	ВходящиеДанные.Добавить(ПараметрыОбработкиДокументов);
	
	РезультатОбмена = ОбменДаннымиИСМПВызовСервера.ПодготовитьКПередаче(
		ВходящиеДанные,
		Форма.УникальныйИдентификатор);
	
	ОбработатьРезультатОбмена(
		РезультатОбмена, Форма, Неопределено, ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	Если РезультатОбмена.ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru = 'Выполняется обмен с ИС МП';
															|en = 'Выполняется обмен с ИС МП'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			ПараметрыОжидания.Интервал = РезультатОбмена.Ожидать;
		КонецЕсли;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
		ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ОбменДаннымиИСМПКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	Иначе
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			
			Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
			
		Иначе
			
			ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
			ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
			ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
			ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
			
			ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ПараметрыЗавершенияДлительнойОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена
// 
// Параметры:
//  Результат - Неопределено, Структура - Результат длительной операции.
//  ДополнительныеПараметрыДлительнойОперации - Структура - Дополнительные параметры
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметрыДлительнойОперации) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОбмена = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении, Новый Массив);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации)
	
	Форма                                     = ДополнительныеПараметрыДлительнойОперации.Форма;
	ОповещениеПриЗавершении                   = ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении;
	АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
	
	Если РезультатОбмена.ИзвлекатьДанныеЛогаЗапросов Тогда
		ОбменДаннымиИСМПВызовСервера.ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена);
	КонецЕсли;
	
	Если РезультатОбмена.Ожидать <> Неопределено Тогда
		
		Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
		Попытка
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
		Исключение
			
			РасширенноеСообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Ошибка подключения обработчика ожидания Подключаемый_ВыполнитьОбменОбработкаОжидания:
				           |Значение ожидания: %1
				           |Тип значения: %2';
				           |en = 'Ошибка подключения обработчика ожидания Подключаемый_ВыполнитьОбменОбработкаОжидания:
				           |Значение ожидания: %1
				           |Тип значения: %2'"),
				РезультатОбмена.Ожидать,
				Строка(ТипЗнч(РезультатОбмена.Ожидать)));
			
			ВызватьИсключение РасширенноеСообщениеОбОшибке;
			
		КонецПопытки;
		
	Иначе
		
		НаборДанныхДляПодписанияПоОрганизациям = Новый Соответствие;
		ДанныеДляОбновленияКлючаСессии         = ДанныеДляОбновленияКлючаСессии(РезультатОбмена);
		
		Для Каждого ЭлементДанныхОбновления Из ДанныеДляОбновленияКлючаСессии Цикл
			
			Организация          = ЭлементДанныхОбновления.Организация;
			ПараметрыЗапроса     = ЭлементДанныхОбновления.ПараметрыЗапроса;
			ПараметрыАвторизации = ЭлементДанныхОбновления.ПараметрыАвторизации;
			
			Описание = СтрШаблон(
				НСтр("ru = 'Авторизация в %1 для %2';
					|en = 'Авторизация в %1 для %2'"),
				ПараметрыЗапроса.ПредставлениеСервиса,
				ПараметрыЗапроса.Организация);
			
			Сообщение = ИнтерфейсАвторизацииИСМПСлужебныйКлиент.РезультатПодписания(
				ПараметрыЗапроса,
				Описание,
				ПараметрыАвторизации);
			
			// Для авторизации требуется прикрепленная подпись
			ПараметрыCMS = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
			ПараметрыCMS.Открепленная = Ложь;
			
			Данные = Новый Структура;
			Данные.Вставить("Данные",       ПараметрыАвторизации.Данные);
			Данные.Вставить("Сообщение",    Сообщение);
			Данные.Вставить("ПараметрыCMS", ПараметрыCMS);
			
			ПредставлениеДанных = Новый Структура;
			ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ИнтерфейсАвторизацииИСМПСлужебныйКлиент, Сообщение));
			ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Данные",        Данные);
			СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
			
			Если НаборДанныхДляПодписанияПоОрганизациям[Организация] = Неопределено Тогда
				НаборДанныхДляПодписанияПоОрганизациям.Вставить(Организация, Новый Массив);
			КонецЕсли;
			
			НаборДанныхДляПодписанияПоОрганизациям[Организация].Добавить(СтруктураДанные);
			
		КонецЦикла;
		
		Если РезультатОбмена.ТребуетсяПодписание <> Неопределено Тогда
			
			Для Каждого КлючИЗначение Из РезультатОбмена.ТребуетсяПодписание Цикл
				
				Организация = КлючИЗначение.Ключ;
				Сообщения   = КлючИЗначение.Значение;
				
				Для Каждого Сообщение Из Сообщения Цикл
					
					// Для подписания документов требуется открепленная подпись
					ПараметрыCMS = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
					ПараметрыCMS.Открепленная = Истина;
					
					Данные = Новый Структура;
					Данные.Вставить("Данные",       Сообщение.ТекстСообщенияJSON);
					Данные.Вставить("Сообщение",    Сообщение);
					Данные.Вставить("ПараметрыCMS", ПараметрыCMS);
					
					Если ТипЗнч(Сообщение.ПараметрыЗапроса) = Тип("Структура")
						И Сообщение.ПараметрыЗапроса.Свойство("ДвоичныеДанныеДляПодписания") Тогда
						Данные.Данные = Сообщение.ПараметрыЗапроса.ДвоичныеДанныеДляПодписания;
					КонецЕсли;
					
					ПредставлениеДанных = Новый Структура;
					ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ИнтерфейсАвторизацииИСМПСлужебныйКлиент, Сообщение));
					ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
					
					СтруктураДанные = Новый Структура;
					СтруктураДанные.Вставить("Данные",        Данные);
					СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
					
					Если НаборДанныхДляПодписанияПоОрганизациям[Организация] = Неопределено Тогда
						НаборДанныхДляПодписанияПоОрганизациям.Вставить(Организация, Новый Массив);
					КонецЕсли;
					
					НаборДанныхДляПодписанияПоОрганизациям[Организация].Добавить(СтруктураДанные);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
			
			Для Каждого КлючИЗначение Из НаборДанныхДляПодписанияПоОрганизациям Цикл
				
				Организация              = КлючИЗначение.Ключ;
				НаборДанныхДляПодписания = КлючИЗначение.Значение;
				
				Если РезультатОбмена.СообщенияПослеПодписания <> Неопределено Тогда
					СообщенияПослеПодписания = РезультатОбмена.СообщенияПослеПодписания[Организация];
				КонецЕсли;
				
				Контекст = Новый Структура;
				Контекст.Вставить("Форма",                                  Форма);
				Контекст.Вставить("Организация",                            Организация);
				Контекст.Вставить("ОповещениеПриЗавершении",                ОповещениеПриЗавершении);
				
				Контекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    НаборДанныхДляПодписанияПоОрганизациям);
				Контекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Новый Соответствие);
				Контекст.Вставить("ДоступныеСертификаты",                      РезультатОбмена.ДоступныеСертификаты);
				Контекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", АдресРезультатаОбменаВоВременномХранилище);
				Контекст.Вставить("СообщенияПослеПодписания",                  СообщенияПослеПодписания);
				
				ДоступныеСертификаты = РезультатОбмена.ДоступныеСертификаты.Получить(Организация);
				
				Подписать(
					НаборДанныхДляПодписания,
					Организация,
					ДоступныеСертификаты,
					Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст),
					СообщенияПослеПодписания);
				
				Прервать;
				
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(РезультатОбмена.КОпределениюВидаУпаковки) Тогда
			
			Контекст = Новый Структура;
			Контекст.Вставить("Форма",                                  Форма);
			Контекст.Вставить("Организация",                            Организация);
			Контекст.Вставить("ОповещениеПриЗавершении",                ОповещениеПриЗавершении);
			
			Контекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    Новый Соответствие);
			Контекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Новый Соответствие);
			Контекст.Вставить("ДоступныеСертификаты",                      РезультатОбмена.ДоступныеСертификаты);
			Контекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", АдресРезультатаОбменаВоВременномХранилище);
			
			Если ОбщегоНазначенияИСМПКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
				
				ВводКоэффициентаЗавершение = Новый ОписаниеОповещения(
					"ПродолжитьВыполнениеОбменаПослеУточненияВидаУпаковок",
					ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПСлужебныйКлиент"),
					Контекст);
				
				МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
				ПараметрыОткрытия = МодульИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
				ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = РезультатОбмена.КОпределениюВидаУпаковки;
				ПараметрыОткрытия.ДоступноРедактированиеВидаУпаковки  = Ложь;
				
				МодульИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ВводКоэффициентаЗавершение);
			
			КонецЕсли;
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма",                   Форма);
			ДополнительныеПараметры.Вставить("Контекст",                Неопределено);
			ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			
			ПослеЗавершенияОбмена(
				РезультатОбмена.Изменения,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляОбновленияКлючаСессии(РезультатОбмена)
	
	ВозвращаемоеЗначение = Новый Массив();
	
	Если РезультатОбмена.ТребуетсяОбновлениеКлючаСессии = Неопределено Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Для Каждого КлючОрганизацияЗначениеПоНазначению Из РезультатОбмена.ТребуетсяОбновлениеКлючаСессии Цикл
		
		Для Каждого КлючНазначениеЗначениеСоответствиеПараметров Из КлючОрганизацияЗначениеПоНазначению.Значение Цикл
		
			Для Каждого КлючПроизоводственныйОбъектЗначениеПараметры Из КлючНазначениеЗначениеСоответствиеПараметров.Значение Цикл
				
				ПараметрыОбновления = КлючПроизоводственныйОбъектЗначениеПараметры.Значение;
				
				ДанныеДляОбновления = Новый Структура();
				ДанныеДляОбновления.Вставить("Организация",          КлючОрганизацияЗначениеПоНазначению.Ключ);
				ДанныеДляОбновления.Вставить("ПараметрыЗапроса",     ПараметрыОбновления.ПараметрыЗапроса);
				ДанныеДляОбновления.Вставить("ПараметрыАвторизации", ПараметрыОбновления.ПараметрыАвторизации);
				
				ВозвращаемоеЗначение.Добавить(ДанныеДляОбновления);
				
			КонецЦикла;
		
		КонецЦикла;
	
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура Подписать(НаборДанныхДляПодписания, Организация, ДоступныеСертификаты, ОповещениеПриЗавершении, СообщенияПослеПодписания = Неопределено) Экспорт
	
	КоличествоСообщений = НаборДанныхДляПодписания.Количество();
	Если КоличествоСообщений = 1 Тогда
		ЗаголовокДанных = НСтр("ru = 'Сообщение';
								|en = 'Сообщение'");
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Сообщения';
								|en = 'Сообщения'");
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Обмен с ИС МП';
														|en = 'Обмен с ИС МП'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	
	Если ДоступныеСертификаты.Количество() = 1 Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты);
	ИначеЕсли ДоступныеСертификаты.Количество() > 1 Тогда
		
		ДляСертификатаУстановленПароль = Ложь;
		
		Для Каждого Сертификат Из ДоступныеСертификаты Цикл
			Если ОбщегоНазначенияИСКлиент.ПарольСертификатаУстановлен(Сертификат) Тогда
				ОписаниеДанных.Вставить("ОтборСертификатов", Новый Массив);
				ОписаниеДанных.ОтборСертификатов.Добавить(Сертификат);
				ДляСертификатаУстановленПароль = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДляСертификатаУстановленПароль Тогда
			ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2.';
				            |en = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2.'"),
				ПользователиКлиент.АвторизованныйПользователь(), Организация));
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Неопределено);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанныхДляПодписания);
	ОписаниеДанных.Вставить("ПредставлениеНабора", СтрШаблон(НСтр("ru = 'Показать (%1)';
																	|en = 'Показать (%1)'"), КоличествоСообщений));
	
	ДанныеДляОповещения = Новый Структура;
	ДанныеДляОповещения.Вставить("ОповещениеПриЗавершении",  ОповещениеПриЗавершении);
	ДанныеДляОповещения.Вставить("Организация",              Организация);
	ДанныеДляОповещения.Вставить("НаборДанныхДляПодписания", НаборДанныхДляПодписания);
	ДанныеДляОповещения.Вставить("СообщенияПослеПодписания", СообщенияПослеПодписания);
	
	ФормаИлиИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОповещениеПриЗавершении.ДополнительныеПараметры, "Форма", Новый УникальныйИдентификатор);
	ПодписатьЗавершение  = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ДанныеДляОповещения);
	ОбщегоНазначенияИСКлиент.Подписать(ОписаниеДанных, ФормаИлиИдентификатор, ПодписатьЗавершение);
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			
			Сообщение = ТекущийЭлементНабораДанных.Данные.Сообщение;
			
			Сообщение.Вставить("СвойстваПодписи", СвойстваПодписи);
			Сообщение.Вставить("Сертификат",      Результат.ВыбранныйСертификат.Ссылка);
			
			Сообщения.Добавить(Сообщение);
			
		КонецЦикла;
		
		Если ДополнительныеПараметры.СообщенияПослеПодписания <> Неопределено Тогда
			Для Каждого Сообщение Из ДополнительныеПараметры.СообщенияПослеПодписания Цикл
				Сообщения.Добавить(Сообщение);
			КонецЦикла;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи при непосредственном получении входящих документов, по ранее полученному списку
// документов к загрузке.
//
// Параметры:
//  ПодписанныеСообщенияПоОрганизациям  - Массив из Структура - содержит передаваемые сообщения.
//  Контекст  - Структура - содержит дополнительные параметры обработчика.
Процедура ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи(ПодписанныеСообщенияПоОрганизациям, Контекст) Экспорт
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		ПараметрОповещения = Новый Структура("ОбновлятьСтатусВФормахДокументов", Истина);
		Оповестить(
			ОбменДаннымиИСКлиентСервер.ИмяСобытияВыполненОбмен(ОбщегоНазначенияИСМПКлиентСервер.ИмяПодсистемы()),
			ПараметрОповещения);
		Возврат;
	КонецЕсли;
	
	Контекст.ПодписанныеСообщенияПоОрганизациям.Вставить(Контекст.Организация, ПодписанныеСообщенияПоОрганизациям);
	Контекст.НаборДанныхДляПодписанияПоОрганизациям.Удалить(Контекст.Организация);
	
	Если Контекст.НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
		
		Для Каждого КлючИЗначение Из Контекст.НаборДанныхДляПодписанияПоОрганизациям Цикл
			
			Организация              = КлючИЗначение.Ключ;
			НаборДанныхДляПодписания = КлючИЗначение.Значение;
			
			НовыйКонтекст = Новый Структура;
			НовыйКонтекст.Вставить("Форма",                                  Контекст.Форма);
			НовыйКонтекст.Вставить("Организация",                            Организация);
			НовыйКонтекст.Вставить("ОповещениеПриЗавершении",                Контекст.ОповещениеПриЗавершении);
			
			НовыйКонтекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    Контекст.НаборДанныхДляПодписанияПоОрганизациям);
			НовыйКонтекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Контекст.ПодписанныеСообщенияПоОрганизациям);
			НовыйКонтекст.Вставить("ДоступныеСертификаты",                      Контекст.ДоступныеСертификаты);
			НовыйКонтекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", Контекст.АдресРезультатаОбменаВоВременномХранилище);
			НовыйКонтекст.Вставить("СообщенияПослеПодписания",                  Контекст.СообщенияПослеПодписания);
			
			ДоступныеСертификаты = Контекст.ДоступныеСертификаты.Получить(Организация);
			
			Подписать(
				НаборДанныхДляПодписания,
				Организация,
				ДоступныеСертификаты,
				Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, НовыйКонтекст),
				Контекст.СообщенияПослеПодписания);
			
			Прервать;
			
		КонецЦикла;
		
	Иначе
		
		СообщенияДляПередачи     = Новый Соответствие;
		МассивУдаляемыхСообщений = Новый Массив;
		
		Для Каждого ДанныеПодписанныхСообщенийПоОрганизации Из Контекст.ПодписанныеСообщенияПоОрганизациям Цикл
			
			Для Каждого Сообщение Из ДанныеПодписанныхСообщенийПоОрганизации.Значение Цикл
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сообщение, "Организация") Тогда
					Сообщение.Организация = ДанныеПодписанныхСообщенийПоОрганизации.Ключ;
				КонецЕсли;
				
				СообщенияДляПередачи.Вставить(Сообщение, ДанныеПодписанныхСообщенийПоОрганизации.Ключ);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ДанныеСообщения Из СообщенияДляПередачи Цикл
			
			Сообщение = ДанныеСообщения.Ключ;
			
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сообщение, "ИдентификаторОсновногоСообщения")
				Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Сообщение, "СлужебныйИдентификатор") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Сообщение.ИдентификаторОсновногоСообщения) Тогда
				
				ОсновноеСообщение = Неопределено;
				
				Для Каждого ОсновныеСообщения Из СообщенияДляПередачи Цикл
					
					Если ОсновныеСообщения.Ключ.СлужебныйИдентификатор = Сообщение.ИдентификаторОсновногоСообщения Тогда
						ОсновноеСообщение = ОсновныеСообщения.Ключ;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОсновноеСообщение <> Неопределено Тогда
					
					ОсновноеСообщение.ТекстДополнительногоСообщенияJSON          = Сообщение.ТекстСообщенияJSON;
					ОсновноеСообщение.ОрганизацияПодписиДополнительногоСообщения = Сообщение.Организация;
					
					ОсновноеСообщение.Вставить("СвойстваДополнительнойПодписи", Сообщение.СвойстваПодписи);
					ОсновноеСообщение.Вставить("ДополнительныйСертификат",      Сообщение.Сертификат);
					
					МассивУдаляемыхСообщений.Добавить(Сообщение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Контекст.ПодписанныеСообщенияПоОрганизациям = Новый Соответствие;
		
		Для Каждого ДанныеСообщения Из СообщенияДляПередачи Цикл
			
			Сообщение = ДанныеСообщения.Ключ;
			
			Если МассивУдаляемыхСообщений.Найти(Сообщение) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПоОрганизации = Контекст.ПодписанныеСообщенияПоОрганизациям.Получить(ДанныеСообщения.Значение);
			
			Если ДанныеПоОрганизации = Неопределено Тогда
				ДанныеПоОрганизации = Новый Массив;
			КонецЕсли;
			
			ДанныеПоОрганизации.Добавить(Сообщение);
			Контекст.ПодписанныеСообщенияПоОрганизациям.Вставить(ДанныеСообщения.Значение, ДанныеПоОрганизации);
			
		КонецЦикла;
		
		РезультатОбмена = ОбменДаннымиИСМПВызовСервера.ПродолжитьВыполнениеОбмена(
			Контекст.ПодписанныеСообщенияПоОрганизациям,
			Контекст.АдресРезультатаОбменаВоВременномХранилище);
		
		ОбработатьРезультатОбмена(
			РезультатОбмена,
			Контекст.Форма, Контекст, Контекст.ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена.
// 
// Параметры:
//  Изменения - Массив из Структура - Изменения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
Процедура ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	СоответствиеДокументыОснования  = Новый Соответствие;
	СоответствиеДокументыСтатусы    = Новый Соответствие;
	СоответствиеИзмененныеДокументы = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			УникальныйИдентификатор = Неопределено;
			Если ДополнительныеПараметры.Свойство("Форма") Тогда
				УникальныйИдентификатор = ДополнительныеПараметры.Форма.УникальныйИдентификатор;
			КонецЕсли;
			
			ОбщегоНазначенияИСКлиент.СообщитьПользователюВФорму(УникальныйИдентификатор, ЭлементДанных.ТекстОшибки);
		КонецЕсли;
		
		СоответствиеДокументыОснования.Вставить(ЭлементДанных.Объект, ЭлементДанных.ДокументОснование);
		СоответствиеДокументыСтатусы.Вставить(ЭлементДанных.Объект, ЭлементДанных.НовыйСтатус);
		Если ЭлементДанных.ОбъектИзменен Тогда
			СоответствиеИзмененныеДокументы.Вставить(ЭлементДанных.Объект, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
		
		ОбъектИзменен = СоответствиеИзмененныеДокументы.Получить(КлючИЗначение.Ключ);
		Если ОбъектИзменен = Неопределено Тогда
			ОбъектИзменен = Ложь;
		КонецЕсли;
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",        КлючИЗначение.Ключ);
		ПараметрОповещения.Вставить("Основание",     КлючИЗначение.Значение);
		ПараметрОповещения.Вставить("ОбъектИзменен", ОбъектИзменен);
		
		Оповестить(ОбменДаннымиИСКлиентСервер.ИмяСобытияИзмененоСостояние(
			ОбщегоНазначенияИСМПКлиентСервер.ИмяПодсистемы()), ПараметрОповещения);
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры.Контекст) = Тип("ТаблицаФормы") Тогда
		
		// Выполнено действие из динамического списка
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для %1 из %2 выделенных в списке документов выполнено действие: %3';
				|en = 'Для %1 из %2 выделенных в списке документов выполнено действие: %3'"),
			СоответствиеДокументыСтатусы.Количество(),
			ДополнительныеПараметры.Контекст.ВыделенныеСтроки.Количество(),
			ДополнительныеПараметры.ДальнейшееДействие);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие';
				|en = 'Выполнено действие'"),,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32ГосИС);
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.Контекст) Тогда
		
		// Выполнено действие из формы документа
		Для Каждого КлючИЗначение Из СоответствиеДокументыСтатусы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для документа %1 изменен статус ИС МП: %2.';
					|en = 'Для документа %1 изменен статус ИС МП: %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выполнено действие';
					|en = 'Выполнено действие'"),
				ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32ГосИС);
			
		КонецЦикла;
		
	Иначе
		
		// Выполнен обмен с ЕГАИС
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыОснования", СоответствиеДокументыОснования);
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыСтатусы",   СоответствиеДокументыСтатусы);
		ДополнительныеПараметрыОповещения.Вставить("Изменения",                      Изменения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменено объектов: %1';
										|en = 'Изменено объектов: %1'"), СоответствиеДокументыСтатусы.Количество());
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнен обмен с ИС МП';
				|en = 'Выполнен обмен с ИС МП'"),
			Новый ОписаниеОповещения("ОткрытьРезультатВыполненияОбмена", ЭтотОбъект, ДополнительныеПараметрыОповещения),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32ГосИС);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

//Только для внутреннего использования.
// Вызывается из: ПослеЗавершенияОбмена.
Процедура ОткрытьРезультатВыполненияОбмена(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗавершенияДлительнойОперации() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма");
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	ПараметрыЗавершения.Вставить("Организация");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Процедура ПриОбработкеОповещенияИмяСобытияИзмененоСостояние(ПолноеИмяОбъекта, ТипДокумента, ОбновитьСписок, Форма, Параметр, Источник) Экспорт
	
	Если ПолноеИмяОбъекта = "РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС" Тогда
		ТипДокумента = Тип("ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти