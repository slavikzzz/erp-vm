#Если ВебКлиент Тогда

#Область ПрограммныйИнтерфейс

// Операция инициализации конфигурации локального модуля "Честный знак", первый этап настройки
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - Организация
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  УникальныйИдентификатор - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьОшибки - Булево - Истина, если есть ошибки
//   * ТребуетсяОбновлениеКлючаСессииРозница - Булево - если отсутствует розничный токен
//   * ОтказАвторизации - Булево - Истина, если переданы некорректные данные подключения администратора Локального модуля
//   * ТекстОшибки - Строка - полный текст ошибки
Асинх Функция ВыполнитьИнициализациюКонфигурацииЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	РезультатОбновления = Ждать ИнтерфейсИСМПОбщегоНазначенияВебКлиент.ИнициализацияКонфигурацииЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки);
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = РезультатОбновления.ТребуетсяОбновлениеКлючаСессииРозница;
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение в фоне статуса Локального модуля "Честный знак"
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, от имени которой выполняется запрос к ГИС МТ
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьОшибки - Булево - Истина, если есть ошибки
//   * ОтказАвторизации - Булево - Истина, если переданы некорректные данные подключения администратора Локального модуля
//   * ТекстОшибки - Строка - полный текст ошибки
//   * ВерсияСборки - Строка - версия текущей сборки ЛМ ЧЗ
//   * Статус - Строка - текущий статус ЛМ ЧЗ
//   * ДатаПоследнейСинхронизации - Дата - дата последней синхронизации
//   * ТребуетсяЗагрузка - Булево - Истина, если требуется обновление токена
Асинх Функция ЗапроситьСтатусЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                 Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",           Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                "");
	ВозвращаемоеЗначение.Вставить("ВерсияСборки",               "");
	ВозвращаемоеЗначение.Вставить("Статус",                     "");
	ВозвращаемоеЗначение.Вставить("ДатаПоследнейСинхронизации", Дата(1, 1, 1));
	ВозвращаемоеЗначение.Вставить("ТребуетсяЗагрузка",          Ложь);
	
	РезультатОбновления = Ждать ИнтерфейсИСМПОбщегоНазначенияВебКлиент.ЗапроситьСтатусЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки);
	
	ВозвращаемоеЗначение.ЕстьОшибки                 = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки                = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации           = РезультатОбновления.ОтказАвторизации;
	ВозвращаемоеЗначение.ВерсияСборки               = РезультатОбновления.ВерсияСборки;
	ВозвращаемоеЗначение.Статус                     = РезультатОбновления.Статус;
	ВозвращаемоеЗначение.ТребуетсяЗагрузка          = РезультатОбновления.ТребуетсяЗагрузка;
	ВозвращаемоеЗначение.ДатаПоследнейСинхронизации = РезультатОбновления.ДатаПоследнейСинхронизации;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Изменение в фоне пароля администратора Локального модуля "Честный знак"
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, от имени которой выполняется запрос к ГИС МТ
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  НовыйПароль - Строка - согласно API ЛМ ЧЗ должна отвечать следующим требованиям:
//		Пароль не может содержать пустую строку
//		Длина пароля должна быть не менее 8 символов. 
//		Пароль должен содержать буквы и цифры
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьОшибки - Булево - Истина, если есть ошибки
//   * ОтказАвторизации - Булево - Истина, если переданы некорректные данные подключения администратора Локального модуля
//   * ТекстОшибки - Строка - полный текст ошибки
Асинх Функция ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, НовыйПароль, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",       Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",      "");
	
	РезультатОбновления = Ждать ИнтерфейсИСМПОбщегоНазначенияВебКлиент.ИзменитьПарольАдминистратораЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, НовыйПароль);
	
	ВозвращаемоеЗначение.ЕстьОшибки       = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки      = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации = РезультатОбновления.ОтказАвторизации;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Настройка товарных групп Локального модуля "Честный знак". Финальный этап настройки.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, от имени которой выполняется запрос к ГИС МТ
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  ПараметрыНастройкиТоварныхГрупп - Соответствие из КлючИЗначение:
//  	Ключ - ПеречислениеСсылка.ВидыПродукцииИС - товарная группа для настройки
//  	Значение - Число - количество дней для выгрузки карточек КИ
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьОшибки - Булево - Истина, если есть ошибки
//   * ОтказАвторизации - Булево - Истина, если переданы некорректные данные подключения администратора Локального модуля
//   * ТекстОшибки - Строка - полный текст ошибки
//   * ТребуетсяОбновлениеКлючаСессииРозница - Булево - Истина, если требуется обновление токена
Асинх Функция НастроитьТоварныеГруппыЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, ПараметрыНастройкиТоварныхГрупп, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",                            Ложь);
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессииРозница", Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",                      Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                           "");
	
	РезультатОбновления = Ждать ИнтерфейсИСМПОбщегоНазначенияВебКлиент.НастройкаТоварныхГруппЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, ПараметрыНастройкиТоварныхГрупп);
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессииРозница = РезультатОбновления.ТребуетсяОбновлениеКлючаСессииРозница;
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверка конфигурации Локального модуля "Честный знак". Для проверки применения настроек ТГ и готовности к работе
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, от имени которой выполняется запрос к ГИС МТ
//  ПараметрыУстановки - см. ОбщегоНазначенияИСМПКлиентСервер.ПараметрыПодключенияЛокальногоМодуляЧЗ
//  УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - Уникальный идентификатор формы
// 
// Возвращаемое значение:
//  Структура:
//   * ЕстьОшибки - Булево - Истина, если есть ошибки
//   * ОтказАвторизации - Булево - Истина, если переданы некорректные данные подключения администратора Локального модуля
//   * ТекстОшибки - Строка - полный текст ошибки
//   * АдресСервернойЧасти - Строка - адрес подключения к серверной части ЛМ ЧЗ
//   * НастройкаТоварныхГрупп - Неопределено, Соответствие из КлючИЗначение - настройка загруженных карточек ТГ
Асинх Функция ПолучитьКонфигурациюЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки, УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЕстьОшибки",             Ложь);
	ВозвращаемоеЗначение.Вставить("ОтказАвторизации",       Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",            "");
	ВозвращаемоеЗначение.Вставить("АдресСервернойЧасти",    "");
	ВозвращаемоеЗначение.Вставить("НастройкаТоварныхГрупп", Неопределено);
	
	РезультатОбновления = Ждать ИнтерфейсИСМПОбщегоНазначенияВебКлиент.ЗапроситьКонфигурациюЛокальногоМодуляЧЗ(Организация, ПараметрыУстановки);
	
	ВозвращаемоеЗначение.ЕстьОшибки                            = ЗначениеЗаполнено(РезультатОбновления.ТекстОшибки);
	ВозвращаемоеЗначение.ТекстОшибки                           = РезультатОбновления.ТекстОшибки;
	ВозвращаемоеЗначение.ОтказАвторизации                      = РезультатОбновления.ОтказАвторизации;
	ВозвращаемоеЗначение.АдресСервернойЧасти                   = РезультатОбновления.АдресСервернойЧасти;
	ВозвращаемоеЗначение.НастройкаТоварныхГрупп                = РезультатОбновления.НастройкаТоварныхГрупп;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные по кодам идентификации из Локального модуля Честный знак.
// 
// Параметры:
//  ДанныеПроверки - Массив Из СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Коллекция строк таблицы
//  Организация - ОпределяемыйТип.Организация - Организация
//  ИдентификаторФискальногоНакопителя - Строка - идентификатор фискального накопителя
//  РабочееМесто - ОпределяемыйТип.РабочиеМестаИС - рабочее место кассира
//  ДанныеУстановленныхЛокальныхМодулей - Структура:
//  * СерверныеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//	* КлиентскиеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//  ЭтоОперацияПробития - Булево - флаг устанавливается, если процедура вызывается длительной операцией при пробитии
//  ОбменНаСервере - Булево - Истина, если идет обработка Локальных модулей на сервере
// Возвращаемое значение:
//  Структура - Получить информацию по КМ от ККТ:
//  * АварийныйРежим - Булево - Истина, если действует аварийный режим или в ходе проверки он был объявлен
//  * ОтсутствуютУстановленныеЛМ - Булево - Истина, если не найдено ни одного установленного ЛМ, подходящего по отбору
//  	по организации и рабочему месту
//  * РезультатыОтправкиЗапросов - Массив из см. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON
//  * ТекстОшибки - Строка - текст ошибки, полученной от ГИС МТ
// 		Общий текст ошибки, ошибки запросов по всем кодам
// * СтатусыКодовМаркировкиГИСМТ - Соответствие Из КлючИЗначение - Статусы кодов маркировки:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - см. ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля
// * КодыМаркировкиДляОбработкиНаЛМНаКлиенте - Соответствие Из КлючИЗначение - если нет доступных серверных ЛМ или по ним не получен ответ, и нужно
//  	вернуться на клиент для получения ответа с клиентских ЛМ по данным штрихкодам:
//		** Ключ - СтрокаТабличнойЧасти: см. ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки - Код маркировки.
//		** Значение - Булево - Истина, если требуется обработка на локальных ЛМ
// * ДанныеУстановленныхЛокальныхМодулей - Структура из КлючИЗначение:
//  ** СерверныеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак
//	** КлиентскиеМодули - Массив из см. КонструкторТаблицыЛокальныхМодулейЧестныйЗнак - список
//		локальных модулей для возврата на клиент. Если нет установленных ЛМ на клиенте, то возвращаться на клиент не требуется
// * ВидыПродукцииБезНастроенныхЛокальныхМодулей - Массив из ПеречислениеСсылка.ВидыПродукцииИС - виды продукции, не установленные в качестве
//		учитываемых в локальных модулях
// * НекорректныеДанныеАвторизации - Булево - Истина, если указаны некорректные логин/пароль подключения
// * НезавершеннаяНастройкаЛМ - Булево - Истина, если настройка подключения к ЛМ ЧЗ не завершена, возвращается код статуса не готовый к работе
// * ОтсутствиеСинхронизацииЛМ - Булево - Истина, если ЛМ возвращает статус отсутствия синхронизации более 72 часов
// * ПараметрыНастройкиЛМЧЗ - Неопределено, Структура из КлючИЗначение - структура для поиска настройки ЛМ ЧЗ.
Асинх Функция ДанныеЛокальногоМодуляЧЗПоКИПриРозничнойПродаже(ДанныеПроверки, Организация, ИдентификаторФискальногоНакопителя, РабочееМесто = Неопределено, ДанныеУстановленныхЛокальныхМодулей = Неопределено, ЭтоОперацияПробития = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АварийныйРежим",                              Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствуютУстановленныеЛМ",                  Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                                 "");
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировкиГИСМТ",                 Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("КодыМаркировкиДляОбработкиНаЛМНаКлиенте",     Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("ДанныеУстановленныхЛокальныхМодулей",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидыПродукцииБезНастроенныхЛокальныхМодулей", Новый Массив);
	ВозвращаемоеЗначение.Вставить("НекорректныеДанныеАвторизации",               Ложь);
	ВозвращаемоеЗначение.Вставить("НезавершеннаяНастройкаЛМ",                    Ложь);
	ВозвращаемоеЗначение.Вставить("ОтсутствиеСинхронизацииЛМ",                   Ложь);
	ВозвращаемоеЗначение.Вставить("ПараметрыНастройкиЛМЧЗ",                      Неопределено);
	
	ВозвращаемоеЗначение.АварийныйРежим = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ДействуетАварийныйРежимДляРозничныхПродаж();
	
	Если ВозвращаемоеЗначение.АварийныйРежим Тогда
		
		// на срок действия аварийного режима разрешена продажа без разрешительного режима
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	РежимыКонтроля        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	
	ЛогироватьУспешныеПроверки = (НастройкиСканирования.РежимКонтроляСредствамиККТ = РежимыКонтроля.ПередПробитиемЧека)
		И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.ХранитьУспешныеОперацииПриПроверкеКМ()
		И Не ЭтоОперацияПробития;
	
	Если ДанныеУстановленныхЛокальныхМодулей = Неопределено Тогда
		
		ДанныеУстановленныхЛокальныхМодулей = 
			ОбщегоНазначенияИСМПВызовСервера.СортированнаяТаблицаЛокальныхМодулейЧестныйЗнак(Организация, РабочееМесто);
			
	КонецЕсли;
	
	Если ДанныеУстановленныхЛокальныхМодулей.КлиентскиеМодули.Количество() = 0
		И ДанныеУстановленныхЛокальныхМодулей.СерверныеМодули.Количество() = 0 Тогда
		
		// если локальных модулей не установлено, то не отправлять запрос
		ВозвращаемоеЗначение.ОтсутствуютУстановленныеЛМ = Истина;
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураДополнительныхПараметров.Вставить("Организация",                Организация);
	СтруктураДополнительныхПараметров.Вставить("ИННОрганизации",             "");
	СтруктураДополнительныхПараметров.Вставить("НомерФН",                    ИдентификаторФискальногоНакопителя);
	СтруктураДополнительныхПараметров.Вставить("ЛогироватьУспешныеПроверки", ЛогироватьУспешныеПроверки);
	
	СтруктураДополнительныхПараметров.ИННОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Организация).ИНН;
	
	РезультатНастройкиЛМ = Новый Структура();
	РезультатНастройкиЛМ.Вставить("НекорректныеДанныеАвторизации", Ложь);
	РезультатНастройкиЛМ.Вставить("НезавершеннаяНастройкаЛМ",      Ложь);
	РезультатНастройкиЛМ.Вставить("ОтсутствиеСинхронизацииЛМ",     Ложь);
	
	ТекстВыполненияЗапроса = НСтр("ru = 'Выполняется разрешительный запрос ГИС МТ на Локальном модуле ""Честный знак""';
									|en = 'Выполняется разрешительный запрос ГИС МТ на Локальном модуле ""Честный знак""'");
	Индекс                 = 0;
	
	Для Каждого ДанныеШтрихкода Из ДанныеПроверки Цикл
		
		СписокКлиентскихМодулей   = ДанныеУстановленныхЛокальныхМодулей.КлиентскиеМодули.Получить(ДанныеШтрихкода.ВидПродукции);
		СписокМодулейДляОбработки = СписокКлиентскихМодулей;
		
		Если СписокКлиентскихМодулей.Количество() = 0 Тогда
			
			// нет локальных модулей, настроенных по виду продукции
			ВозвращаемоеЗначение.ОтсутствуютУстановленныеЛМ = Истина;
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
		РезультатОбработкиКИ = Ждать ОбработатьКодМаркировкиНаЛокальномМодулеЧестногоЗнака(ДанныеШтрихкода,
			СписокМодулейДляОбработки,
			СтруктураДополнительныхПараметров,
			РезультатНастройкиЛМ);
			
		ВозвращаемоеЗначение.НезавершеннаяНастройкаЛМ      = РезультатНастройкиЛМ.НезавершеннаяНастройкаЛМ;
		ВозвращаемоеЗначение.НекорректныеДанныеАвторизации = РезультатНастройкиЛМ.НекорректныеДанныеАвторизации;
		ВозвращаемоеЗначение.ОтсутствиеСинхронизацииЛМ     = РезультатНастройкиЛМ.ОтсутствиеСинхронизацииЛМ;
		ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ        = РезультатОбработкиКИ.ПараметрыНастройкиЛМЧЗ;
		
		Индекс = Индекс + 1;
		
		Состояние(ТекстВыполненияЗапроса, Индекс / ДанныеПроверки.Количество() * 100,, БиблиотекаКартинок.ДлительнаяОперация16);
		
		Для Каждого РезультатОтправкиЗапросаНаПлощадку Из РезультатОбработкиКИ.РезультатыОтправкиЗапросов Цикл
			ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиЗапросаНаПлощадку);
		КонецЦикла;
		
		Если ДанныеУстановленныхЛокальныхМодулей.КлиентскиеМодули.Количество() = 0 Тогда
			
			// нет клиентских модулей для обработки, необходимо вернуть ошибки, полученные от серверных модулей
			ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
				+ РезультатОбработкиКИ.ТекстОшибки;
				
		КонецЕсли;
		
		Если Не РезультатОбработкиКИ.ПараметрыКодаМаркировки = Неопределено Тогда
			
			// по КМ был получен ответ из ГИС МТ
			ВозвращаемоеЗначение.СтатусыКодовМаркировкиГИСМТ.Вставить(ДанныеШтрихкода, РезультатОбработкиКИ.ПараметрыКодаМаркировки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Процедура асинхронного получения ответа от HTTP-запроса
// 
// Параметры:
//  АдресЗапроса                  - Строка - сервер для отправки HTTP-запроса
//  ТелоЗапроса                   - ДвоичныеДанные - текст запроса
//  КлючСессии                    - Неопределено, Строка - ключ авторизации
//  HTTPМетод                     - Строка - тип метода, POST, GET, PUT и проч.
//  ПараметрыОтправкиHTTPЗапросов - Неопределено, Структура - Структура параметров отправки HTTP-запросов
//  ЗаголовокHTTP                 - Неопределено - Заголовок HTTP
//  HTTPОтветЭмуляция             - Неопределено, HTTPОтвет - параметр для мокирования ответов от сервиса
//  Соединение                    - Неопределено, HTTPСоединение - соединение для кеширования соединений между идентичными запросами
// 
// Возвращаемое значение:
//  Обещание - Отправить данные в сервис
Асинх Функция ОтправитьДанныеВСервис(АдресЗапроса, ТелоЗапроса, КлючСессии, HTTPМетод, ПараметрыОтправкиHTTPЗапросов, ЗаголовокHTTP = Неопределено, HTTPОтветЭмуляция = Неопределено, Соединение = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    "");
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     "");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   "");
	
	ОбменДаннымиИСМПКлиентСервер.РасширенныеОбработкиОтправкиДанныхВСервис(ПараметрыОтправкиHTTPЗапросов);
	
	ЭтоДвоичныеДанные = ТипЗнч(ТелоЗапроса) = Тип("ДвоичныеДанные");
	ЭтоФайл           = ТипЗнч(ТелоЗапроса) = Тип("Файл");
	
	Если ТелоЗапроса <> Неопределено И ТипЗнч(ТелоЗапроса) = Тип("Строка") Тогда
		ТелоЗапросаJSON = ТелоЗапроса;
	ИначеЕсли ТелоЗапроса <> Неопределено И Не ЭтоДвоичныеДанные И Не ЭтоФайл Тогда
		ТелоЗапросаJSON = ОбщегоНазначенияИСКлиентСервер.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	КонецЕсли;
	
	Если ЗаголовокHTTP = Неопределено Тогда
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		Если КлючСессии <> Неопределено Тогда
			ЗаголовокHTTP.Вставить("Authorization", СтрШаблон("Bearer %1", КлючСессии));
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(АдресЗапроса, ЗаголовокHTTP);
	Если ТелоЗапроса <> Неопределено Тогда
		Если ЭтоДвоичныеДанные Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ТелоЗапроса);
		ИначеЕсли ЭтоФайл Тогда
			HTTPЗапрос.УстановитьИмяФайлаТела(ТелоЗапроса.ПолноеИмя);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8);
		КонецЕсли;
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Если HTTPОтветЭмуляция = Неопределено Тогда
		
		ДанныеПути = Новый Массив;
		Если ПараметрыОтправкиHTTPЗапросов.ИспользоватьЗащищенноеСоединение Тогда
			ДанныеПути.Добавить("https://");
		Иначе
			ДанныеПути.Добавить("http://");
		КонецЕсли;
		ДанныеПути.Добавить(ПараметрыОтправкиHTTPЗапросов.Сервер);
		Если ЗначениеЗаполнено(ПараметрыОтправкиHTTPЗапросов.Порт) Тогда
			ДанныеПути.Добавить(":");
			ДанныеПути.Добавить(Формат(ПараметрыОтправкиHTTPЗапросов.Порт, "ЧГ=0"));
		КонецЕсли;
		Если Лев(АдресЗапроса, 1) <> "/" Тогда
			ДанныеПути.Добавить("/");
		КонецЕсли;
		Если ЗначениеЗаполнено(HTTPЗапрос.АдресРесурса) Тогда
			ДанныеПути.Добавить(HTTPЗапрос.АдресРесурса);
		КонецЕсли;
		
		СтрокаПодключения = СтрСоединить(ДанныеПути);
		
		Если HTTPМетод = "GET" Тогда
			РезультатЗапроса = Ждать HttpBridgeКлиент.GetАсинх(СтрокаПодключения, ЗаголовокHTTP);
		ИначеЕсли HTTPМетод = "POST" Тогда
			Если ТелоЗапроса = Неопределено Тогда
				РезультатЗапроса = Ждать HttpBridgeКлиент.PostАсинх(СтрокаПодключения, "", ЗаголовокHTTP);
			Иначе
				Если ЭтоДвоичныеДанные Тогда
					РезультатЗапроса = Ждать HttpBridgeКлиент.PostАсинх(СтрокаПодключения, ТелоЗапроса, ЗаголовокHTTP);
				ИначеЕсли ЭтоФайл Тогда
					ДвоичныеДанные = Новый ДвоичныеДанные(ТелоЗапроса.ПолноеИмя);
					РезультатЗапроса = Ждать HttpBridgeКлиент.PostАсинх(СтрокаПодключения, ДвоичныеДанные, ЗаголовокHTTP);
				Иначе
					РезультатЗапроса = Ждать HttpBridgeКлиент.PostАсинх(СтрокаПодключения, ТелоЗапросаJSON, ЗаголовокHTTP);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли HTTPМетод = "DELETE" Тогда
			РезультатЗапроса = Ждать HttpBridgeКлиент.DeleteАсинх(СтрокаПодключения, ЗаголовокHTTP);
		ИначеЕсли HTTPМетод = "PUT" Тогда
			ВерсияАсинх = Ждать HttpBridgeКлиент.ВерсияАсинх();
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияАсинх, "2.0.2.1") < 0 Тогда
				ВозвращаемоеЗначение.ТекстОшибки = НСтр("ru = 'В текущей версии метод PUT не поддерживается. Используйте тонкий клиент.';
														|en = 'В текущей версии метод PUT не поддерживается. Используйте тонкий клиент.'");
				Возврат ВозвращаемоеЗначение;
			КонецЕсли;
			МодульHttpBridgeКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("HttpBridgeКлиент");
			Если ТелоЗапроса = Неопределено Тогда
				//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
				РезультатЗапроса = Ждать МодульHttpBridgeКлиент.PutАсинх(СтрокаПодключения, "", ЗаголовокHTTP);
			Иначе
				Если ЭтоДвоичныеДанные Тогда
					//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
					РезультатЗапроса = Ждать МодульHttpBridgeКлиент.PutАсинх(СтрокаПодключения, ТелоЗапроса, ЗаголовокHTTP);
				ИначеЕсли ЭтоФайл Тогда
					ДвоичныеДанные = Новый ДвоичныеДанные(ТелоЗапроса.ПолноеИмя);
					//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
					РезультатЗапроса = Ждать МодульHttpBridgeКлиент.PutАсинх(СтрокаПодключения, ДвоичныеДанные, ЗаголовокHTTP);
				Иначе
					//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
					РезультатЗапроса = Ждать МодульHttpBridgeКлиент.PutАсинх(СтрокаПодключения, ТелоЗапросаJSON, ЗаголовокHTTP);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Неверный тип HTTP-запроса.';
								|en = 'Неверный тип HTTP-запроса.'");
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если РезультатЗапроса.Результат Тогда
			ОписаниеЧисло = Новый ОписаниеТипов("Число");
			HTTPОтвет = Новый Структура;
			HTTPОтвет.Вставить("Тело",         РезультатЗапроса.Ответ);
			HTTPОтвет.Вставить("КодСостояния", ОписаниеЧисло.ПривестиЗначение(РезультатЗапроса.КодОтвета));
			HTTPОтвет.Вставить("Заголовки");
			РезультатЗапроса.Свойство("Заголовки", HTTPОтвет.Заголовки);
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапроса.ОписаниеОшибки;
		КонецЕсли;
		
	Иначе
		
		HTTPОтвет = HTTPОтветЭмуляция;
		
	КонецЕсли;
	
	ДанныеЛогирования                               = ОбменДаннымиИСМПКлиентСервер.СтруктураДанныхЛогирования();
	ДанныеЛогирования.HTTPЗапросАдресРесурса        = HTTPЗапрос.АдресРесурса;
	ДанныеЛогирования.HTTPЗапросТело                = HTTPЗапрос.ПолучитьТелоКакСтроку();
	ДанныеЛогирования.HTTPЗапросЗаголовки           = HTTPЗапрос.Заголовки;
	ДанныеЛогирования.HTTPМетод                     = HTTPМетод;
	ДанныеЛогирования.ПараметрыОтправкиHTTPЗапросов = ПараметрыОтправкиHTTPЗапросов;
	ДанныеЛогирования.ТекстОшибки                   = ТекстОшибки;
	ДанныеЛогирования.ЭмуляцияЗапроса               = Не (HTTPОтветЭмуляция = Неопределено);
	
	Если ТипЗнч(HTTPОтвет) = Тип("Структура") Тогда
		
		ДанныеЛогирования.HTTPОтветЗаголовки            = HTTPОтвет.Заголовки;
		ДанныеЛогирования.HTTPОтветКодСостояния         = HTTPОтвет.КодСостояния;
		ДанныеЛогирования.HTTPОтветТело                 = HTTPОтвет.Тело;
		
	ИначеЕсли HTTPОтвет <> Неопределено Тогда
	
		ДанныеЛогирования.HTTPОтветЗаголовки            = HTTPОтвет.Заголовки;
		ДанныеЛогирования.HTTPОтветКодСостояния         = HTTPОтвет.КодСостояния;
		ДанныеЛогирования.HTTPОтветТело                 = HTTPОтвет.ПолучитьТелоКакСтроку();
		
	КонецЕсли;
	
	ЛогированиеЗапросовИСМПВызовСервера.ЗаписатьДанныеЛогирования(ДанныеЛогирования);
	
	ВозвращаемоеЗначение.Вставить("ПараметрыОтправкиHTTPЗапросов", ПараметрыОтправкиHTTPЗапросов);
	ВозвращаемоеЗначение.Вставить("HTTPМетод",                     HTTPМетод);
	ВозвращаемоеЗначение.Вставить("HTTPЗапрос",                    HTTPЗапрос);
	ВозвращаемоеЗначение.Вставить("HTTPОтвет",                     HTTPОтвет);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                   ТекстОшибки);

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РазрешительныйРежим

Асинх Функция ОбработатьКодМаркировкиНаЛокальномМодулеЧестногоЗнака(ДанныеШтрихкода, ДанныеУстановленныхЛокальныхМодулей, СтруктураДополнительныхПараметров, РезультатНастройкиЛМ)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ПараметрыКодаМаркировки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатыОтправкиЗапросов",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("ПараметрыНастройкиЛМЧЗ",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                            "");
	
	ПараметрыНормализацииМОТП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииМОТП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииМОТП.ВключатьМРЦ              = Ложь;
	ПараметрыНормализацииМОТП.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыНормализацииИСМП = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииИСМП.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииИСМП.НачинаетсяСоСкобки = Ложь;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		
		НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			ДанныеШтрихкода, ДанныеШтрихкода.ВидПродукции, ПараметрыНормализацииМОТП);
		
	Иначе
		
		Если ДанныеШтрихкода.ДанныеРазбора = Неопределено Тогда
			НормализованныйКодМаркировки = ДанныеШтрихкода.Штрихкод;
		Иначе
			НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
				ДанныеШтрихкода, ДанныеШтрихкода.ВидПродукции, ПараметрыНормализацииИСМП);
		КонецЕсли;
		
	КонецЕсли;
	
	URLЗапроса            = СтрШаблон("api/v1/cis/check?cis=%1", НормализованныйКодМаркировки);
	
	Для Каждого ДанныеЛокальногоМодуля Из ДанныеУстановленныхЛокальныхМодулей Цикл
		
		ДанныеАвторизацииBase64 = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(СтрШаблон("%1:%2", ДанныеЛокальногоМодуля.Логин, ДанныеЛокальногоМодуля.Пароль));
	
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Accept",         "application/json");
		ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
		ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Basic %1", ДанныеАвторизацииBase64));
		ЗаголовокHTTP.Вставить("X-ClientId",     СтруктураДополнительныхПараметров.НомерФН);
		
		ПараметрыЗапросов = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыОтправкиHTTPЗапросовКЛокальномуМодулюЧЗ(ДанныеЛокальногоМодуля);
		ПараметрыЗапросов.Таймаут = ДанныеЛокальногоМодуля.Таймаут;
		
		РезультатЗапроса = Ждать ОтправитьДанныеВСервис(
			URLЗапроса,
			,,
			"GET",
			ПараметрыЗапросов,
			ЗаголовокHTTP);
	
		РезультатОтправкиЗапроса = ОбменДаннымиИСМПКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса, Истина);
		
		ВозвращаемоеЗначение.РезультатыОтправкиЗапросов.Добавить(РезультатОтправкиЗапроса);
		
		Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
			Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
				
				ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если ДанныеОбработки = Неопределено Тогда
					
					ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
					ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
						+ ДополнениеТекстаОшибки;
					
				Иначе
					
					ДанныеКодовОтветаЛокальногоМодуля = ДанныеОбработки.Получить("codes");
					
					Если ДанныеКодовОтветаЛокальногоМодуля <> Неопределено Тогда
						
						// формат обмена Локального модуля "Честный знак" 1.0.6 и выше
						Если ТипЗнч(ДанныеКодовОтветаЛокальногоМодуля) = Тип("Массив") И ДанныеКодовОтветаЛокальногоМодуля.Количество() Тогда
							ПараметрыКодаМаркировки = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля(ДанныеКодовОтветаЛокальногоМодуля[0]);
						Иначе
							ПараметрыКодаМаркировки = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ИнициализироватьПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля();
						КонецЕсли;
						
						РазрешительныйРежимДатаЗапросаГИСМТ                                  = ДанныеОбработки.Получить("reqTimestamp");
						ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеОбработки.Получить("reqId");
						
					ИначеЕсли ДанныеОбработки.Получить("_id") <> Неопределено Тогда
						
						// формат обмена Локального модуля "Честный знак" до 1.0.6
						ПараметрыКодаМаркировки = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыКодаМаркировкиПоДаннымЛокальногоМодуля(ДанныеОбработки);
						
						РазрешительныйРежимДатаЗапросаГИСМТ                                  = ДанныеОбработки.Получить("ts");
						ПараметрыКодаМаркировки.РазрешительныйРежимИдентификаторЗапросаГИСМТ = ДанныеОбработки.Получить("_id");
						
					Иначе
						Продолжить;
					КонецЕсли;
					
					ПараметрыКодаМаркировки.РазрешительныйРежимДатаЗапросаГИСМТ = Формат(РазрешительныйРежимДатаЗапросаГИСМТ, "ЧГ=;");
					ПараметрыКодаМаркировки.РазрешительныйРежимАдресСервера     = ДанныеЛокальногоМодуля.АдресПодключения;
					ПараметрыКодаМаркировки.РазрешительныйРежимТелоЗапросаJSON  = URLЗапроса;
					ПараметрыКодаМаркировки.РазрешительныйРежимТелоОтветаJSON   = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
					ПараметрыКодаМаркировки.РазрешительныйРежимКодОтвета        = Формат(РезультатЗапроса.HTTPОтвет.КодСостояния, "ЧГ=0;");
					
					ВозвращаемоеЗначение.ПараметрыКодаМаркировки = ПараметрыКодаМаркировки;
					
					Если ПараметрыКодаМаркировки.Заблокирован Тогда
						
						ТекстОшибки = НСтр("ru = 'Товар запрещен к продаже по решению ОГВ.';
											|en = 'Товар запрещен к продаже по решению ОГВ.'");
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					Если ПараметрыКодаМаркировки.GTINЗапрещенКПродаже Тогда
					
						ТекстОшибки = НСтр("ru = 'GTIN запрещен к продаже.';
											|en = 'GTIN запрещен к продаже.'");
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					Если ПараметрыКодаМаркировки.КИЗапрещенКПродаже Тогда
						
						ТекстОшибки = НСтр("ru = 'КИ запрещен к продаже.';
											|en = 'КИ запрещен к продаже.'");
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					Если ПараметрыКодаМаркировки.Продан Тогда
						
						Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
							ДанныеШтрихкода.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиМОТП.ВыведенИзОборота");
						Иначе
							ДанныеШтрихкода.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.ВыведенИзОборотаРозничнаяПродажа");
						КонецЕсли;
						
					КонецЕсли;
					
					Если ПараметрыКодаМаркировки.СерияМедицинскогоПрепаратаЗапрещенаКПродаже Тогда
						
						ТекстОшибки = НСтр("ru = 'Серия медицинского препарата запрещена к продаже.';
											|en = 'Серия медицинского препарата запрещена к продаже.'");
						
						ДанныеШтрихкода.ТекстОшибки = ТекстОшибки;
						ДанныеШтрихкода.КонтролиРазрешительногоРежима.Добавить(ТекстОшибки);
						
					КонецЕсли;
					
					// достаточно одного ответа от одного ЛМ
					Прервать;
					
				КонецЕсли;
			
			Иначе
			
				ДанныеОбработки = ОбменДаннымиИСМПКлиентСервер.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
				
				Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
					
					// некорректный логин/пароль администратора
					ШаблонПодсказки             = НСтр("ru = 'Указаны некорректные логин/пароль подключения к Локальному модулю ""Честный знак"" %1.';
														|en = 'Указаны некорректные логин/пароль подключения к Локальному модулю ""Честный знак"" %1.'");
					ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
					
					РезультатНастройкиЛМ.НекорректныеДанныеАвторизации = Истина;
					
					ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ = Новый Структура("РабочееМесто, Приоритет");
					ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ, ДанныеЛокальногоМодуля);
					
				ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
					
					// код ошибки 4045 - не инициализировано, или в статусе инициализации
					// код ошибки 4050 - ошибка синхронизации
					
					// в обоих случаях переходим к следующей площадке
					
					КодРасшифровкиОшибки = ДанныеОбработки.Получить("errorCode");
					Если КодРасшифровкиОшибки <> Неопределено Тогда
						
						Если КодРасшифровкиОшибки = 4045 Тогда
							
							ШаблонПодсказки             = НСтр("ru = 'Не завершена настройка подключения к Локальному модулю ""Честный знак"" %1.';
																|en = 'Не завершена настройка подключения к Локальному модулю ""Честный знак"" %1.'");
							ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
							
							РезультатНастройкиЛМ.НезавершеннаяНастройкаЛМ = Истина;
							
						ИначеЕсли КодРасшифровкиОшибки = 4050 Тогда
							
							ШаблонПодсказки             = НСтр("ru = 'Статус Локального модуля ""Честный знак"" %1 - ошибка синхронизации.';
																|en = 'Статус Локального модуля ""Честный знак"" %1 - ошибка синхронизации.'");
							ДанныеШтрихкода.ТекстОшибки = СтрШаблон(ШаблонПодсказки, ДанныеЛокальногоМодуля.АдресПодключения);
							
							РезультатНастройкиЛМ.ОтсутствиеСинхронизацииЛМ = Истина;
							
						Иначе
							
							ТекстОшибкиИзСервиса = ДанныеОбработки.Получить("reason");
							
							Если ТекстОшибкиИзСервиса <> Неопределено Тогда
								
								ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
								+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
									+ ТекстОшибкиИзСервиса;
								
							Иначе
								
								ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
									URLЗапроса,
									РезультатОтправкиЗапроса);
								
								ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
									+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
									+ ДополнениеТекстаОшибки;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ = Новый Структура("РабочееМесто, Приоритет");
					ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение.ПараметрыНастройкиЛМЧЗ, ДанныеЛокальногоМодуля);
					
				Иначе
					
					ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
						URLЗапроса,
						РезультатОтправкиЗапроса);
					
					ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
						+ ДополнениеТекстаОшибки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// не получен ответ при инициализации, таймаут или иные проблемы
			ДополнениеТекстаОшибки = ОбщегоНазначенияИСКлиентСервер.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				+ ?(ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки), Символы.ПС, "")
				+ ДополнениеТекстаОшибки;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли