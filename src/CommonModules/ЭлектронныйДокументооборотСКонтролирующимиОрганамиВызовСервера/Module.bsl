////////////////////////////////////////////////////////////////////////////////
// ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// 
Функция ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов) Экспорт

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецФункции

// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции 

Функция СвойстваПодписи(Подпись, ПрочитатьСертификаты = Истина) Экспорт
	
	Если Подпись = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбщийМодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
	СвойстваЭлектроннойПодписи = ОбщийМодульЭлектроннаяПодпись.СвойстваПодписи(Подпись, ПрочитатьСертификаты);
	ОбщийМодульЭлектроннаяПодписьКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьКлиентСервер");
	НовыеСвойстваПодписи = ОбщийМодульЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	ЗаполнитьЗначенияСвойств(НовыеСвойстваПодписи, СвойстваЭлектроннойПодписи);
	НовыеСвойстваПодписи.Подпись = Подпись;
	Если НовыеСвойстваПодписи.ПодписьВерна = Неопределено Тогда
		НовыеСвойстваПодписи.ПодписьВерна = Истина;
	КонецЕсли;
	Возврат НовыеСвойстваПодписи;
	
КонецФункции

Функция ВыгрузитьДокументСервер(СсылкаНаОтчет, ИдентификаторФормыВызова = Неопределено) Экспорт
	
	СвойстваФайлаВыгрузки =
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент(
		СсылкаНаОтчет,
		ИдентификаторФормыВызова);
	
	Если НЕ ЗначениеЗаполнено(СвойстваФайлаВыгрузки)
		ИЛИ ТипЗнч(СвойстваФайлаВыгрузки) <> Тип("Массив") И ТипЗнч(СвойстваФайлаВыгрузки) <> Тип("ФиксированныйМассив")
		И НЕ ЗначениеЗаполнено(СвойстваФайлаВыгрузки.АдресФайлаВыгрузки) Тогда
		
		Если ЗначениеЗаполнено(СвойстваФайлаВыгрузки) И СвойстваФайлаВыгрузки.Свойство("Ошибки") Тогда
			Для каждого ТекстОшибки Из СвойстваФайлаВыгрузки.Ошибки Цикл
				ДлительнаяОтправкаКлиентСервер.ВывестиОшибку(ТекстОшибки);
			КонецЦикла;
		КонецЕсли;
		
		Возврат Неопределено;
		
	Иначе
		Возврат СвойстваФайлаВыгрузки;
	КонецЕсли;
	
КонецФункции

// Для переданной организции определяет, является ли она юридическим лицом
// 
// Параметры:
//  СправочникСсылка.Организации - организация, для которой определяется, является ли она юридическим лицом
//
// Результат:
//  Булево - Истина, если организация - юридическое лицо, Ложь - в противном случае
//
Функция ЭтоЮрЛицо(Организация) Экспорт
	Возврат РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
КонецФункции

Функция ПолучитьПутьВК() Экспорт
	
	Компоненты = Новый Соответствие;
	АктуальнаяВерсия = 0;
	
	ОбработатьМакетыСКомпонентойОбмена(Метаданные.ОбщиеМакеты, Компоненты, АктуальнаяВерсия);
		
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если КонтекстЭДОСервер <> Неопределено Тогда
		ОбработатьМакетыСКомпонентойОбмена(
			КонтекстЭДОСервер.Метаданные().Макеты, Компоненты, АктуальнаяВерсия, КонтекстЭДОСервер.ПутьКОбъекту);
	КонецЕсли;
	
	Возврат Компоненты.Получить(АктуальнаяВерсия);

КонецФункции

Функция ФИОФизЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("Фамилия");
	МассивПоказателей.Добавить("Имя");
	МассивПоказателей.Добавить("Отчество");
	
	ДатаЗначения = ТекущаяДатаСеанса();

	Возврат РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
КонецФункции

// Функция возвращает вид отправляемого документа 
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
//	СправочникСсылка.ВидыОтправляемыхДокументов, в случае неудачи - пустая ссылка данного типа
//
Функция ПолучитьВидОтправляемогоДокументаПоСсылке(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
		ВидУведомления = ОбъектСсылка.ВидУведомления;
		
		Если ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ДорожнаяКартаНМ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ДорожнаяКартаНМ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросМотивированногоМнения Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапросМотивированногоМнения;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеСМотивированнымМнением Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СогласиеСМотивированнымМнением;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РазногласиеСМотивированнымМнением Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РазногласиеСМотивированнымМнением;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВзаимосогласительнаяПроцедура Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВзаимосогласительнаяПроцедура;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявительныйПорядокВозмещенияНДСАкциз Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявительныйПорядокВозмещенияНДСАкциз;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПроведенииНалоговогоМониторинга Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПроведенииНалоговогоМониторинга;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОтзывЗапросаМотивированногоМнения Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтзывЗапросаМотивированногоМнения;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОРазницахБУиНУ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОРазницахБУиНУ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияУдельныйВес Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияУдельныйВес;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РасшифровкаПоОКВЭД Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РасшифровкаПоОКВЭД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОРискахПоОтдельнымСделкам Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОРискахПоОтдельнымСделкам;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СтруктураВзаимосвязейВнутриГруппыКомпаний Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СтруктураВзаимосвязейВнутриГруппыКомпаний;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОбОрганизацииСистемыВнутреннегоКонтроля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОбУчастниках Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОбУчастниках;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.КонтрольныеПроцедуры Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.КонтрольныеПроцедуры;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.МатрицаРисковКП Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.МатрицаРисковКП;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.МероприятияПоСовершенствованию Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.МероприятияПоСовершенствованию;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОценкаСистемыВнутреннегоКонтроля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОценкаСистемыВнутреннегоКонтроля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ГрафикПереходаНалоговыйМониторинг Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ГрафикПереходаНалоговыйМониторинг;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РегламентИнформационногоВзаимодействия Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РегламентИнформационногоВзаимодействия;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РезультатыВыполнения Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РезультатыВыполнения;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РискиОрганизацииНалоговыйМониторинг Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РискиОрганизацииНалоговыйМониторинг;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УчетнаяПолитика Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УчетнаяПолитика;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Форма_1_6_Учет Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПостановкиНаУчет;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОткрытиеЗакрытиеСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УчастиеВРоссийскихИностранныхОрганизациях;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_1 Тогда 
			Возврат Справочники.ВидыОтправляемыхДокументов.СозданиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_3_2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗакрытиеОбособленныхПодразделений;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеорганизацияЛиквидацияОрганизации;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаНаУчетПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаОрганизацииПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СнятиеСУчетаПредпринимателяПлательщикаЕНВД;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииОбъектаНалогообложенияПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзменениеОбъектаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОтказеОтУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтказОтУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбУтратеПраваНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УтратаПраваНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПереходНаУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПереходНПДУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПрекращенииДеятельностиПоУСН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПрекращениеДеятельностиУСН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатента Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатента;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПрекращенииДеятельностиПоПатентнойСистеме;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОбУтратеПраваНаПатент Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОбУтратеПраваНаПатент;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУменьшениеНалогаККТ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеУменьшениеНалогаККТ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УменьшениеНалогаНаСтраховыеВзносы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаУ_ИО;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаКИК;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС1 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаТС1;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаТС2 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаТС2;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаС09_6 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаС_09_6;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеПостановкаОбъектаНВОС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОРегистрацииОбъектаНВОС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеОНаделенииОППолномочиямиПоВыплатам Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.НаделениеОППолномочиямиПоВыплатамФизлицам;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаСИО Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ФормаСИО;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВыборНалоговогоОрганаДляПредставленияДеклараций Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыборНалоговогоОрганаДляПредставленияДеклараций;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОсвобождениеОтНДСПриЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОсвобождениеОтНДСПриЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОсвобождениеОтУплатыНДС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОсвобождениеОтУплатыНДС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВыборНалоговогоОрганаНДФЛ Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеВыборНалоговогоОрганаУплатаНДФЛ;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПорядокУплатыПрибыль Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПорядокУплатыПрибыль;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВозвратГоспошлины Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВозвратГоспошлины;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОВозвратеНалога Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОВозвратеНалога;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВозвратНДФЛНПДБиоресурсы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВозвратНДФЛНПДБиоресурсы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗачетГоспошлины Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗачетГоспошлины;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОЗачетеНалога Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОЗачетеНалога;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ДоступГИРБО Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ДоступГИРБО;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОтменаЗачетаНалога Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтменаЗачетаНалога;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеЛьготаТранспортЗемля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНалоговаяЛьготаТранспортЗемля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОГибелиИмущества Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОГибелиИмущества;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЛьготаПоНалогуНаИмущество Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЛьготаПоНалогуНаИмущество;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПередачаСообщенийОСуммахНалогов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПередачаСообщенийОСуммахНалогов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИзъятиеТС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзъятиеТС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрЛьготИмущество Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеестрЛьготИмущество;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапретПредставленияУполномоченнымиЛицами Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапретПредставленияУполномоченнымиЛицами;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СообщениеТранспортЗемля Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СообщениеТранспортЗемля;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОГибелиТранспортногоСредства Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОГибелиТранспортногоСредства;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПоясненияПоСуммамНалогов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПоясненияПоСуммамНалогов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИзменениеПорядкаИсчисленияАвансовПоНалогуНаПрибыль;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОтчетДДС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОтчетДДС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПримененииНалоговойЛьготыУчастникамиРегиональныхИнвестиционныхПроектов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПостановкаСнятиеВКачествеНалоговогоАгента Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПостановкаСнятиеВКачествеНалоговогоАгента;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаРаскрытиеНалоговойТайны Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СогласиеНаРаскрытиеНалоговойТайны;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НевозможностьПредоставленияДокументов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.НевозможностьПредоставленияДокументов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОсвобождениеОтСтраховыхВзносов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОсвобождениеОтСтраховыхВзносов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбОткрытииЗакрытииСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОбОткрытииЗакрытииСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОбИзмененииРеквизитовСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОбИзмененииРеквизитовСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОНаличииСчета Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОНаличииСчета;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИсправлениеОшибок Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИсправлениеОшибок;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ДубликатСвидетельстваПереработкаНефти Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ДубликатСвидетельстваПереработкаНефти;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СвидетельствоПереработкаНефти Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СвидетельствоПереработкаНефти;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеНДДДУС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеНДДДУС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПереходНаЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПереходНаЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПереходНПДЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПереходНПДЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПрекращениеЕСХН Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПрекращениеЕСХН;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПриобретениеСтатусаМХК Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПриобретениеСтатусаМХК;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросСведенийСоставляющихНалоговуюТайну Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапросСведенийСоставляющихНалоговуюТайну;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеКЛМК Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеКЛМГК;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СоблюдениеУсловийПониженныхСтавок Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СоблюдениеУсловийПониженныхСтавок;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаСубсидиюДляЗарплаты Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеНаСубсидиюДляЗарплаты;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СубсидияНаПроведениеПрофилактики Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СубсидияНаПроведениеПрофилактики;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВыдачаСправкиПоРасчетам Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВыдачаСправкиПоРасчетам;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПредставлениеАктаСверкиЕНП Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПредставлениеАктаСверкиЕНП;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СогласиеНаИнформированиеОЗадолженности Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СогласиеНаИнформированиеОЗадолженности;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.НалогНаПрибыльКурилы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.НалогНаПрибыльКурилы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНалогНаПрибыльСколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНалогНаПрибыльСколково;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОсвобождениеНДССколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеОсвобождениеНДССколково;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЖалобаФНС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЖалобаФНС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросСостояниеРасчетов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапросСостояниеРасчетов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗапросСуммЕНП Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗапросСуммЕНП;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РеестрДокументовПодтверждающихЛьготы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РеестрДокументовПодтверждающихЛьготы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СубсидияПострадавшимМСП Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СубсидияПострадавшимМСП;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЭлементДляВыпускаНовыхПатчей Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЭлементДляВыпускаНовыхПатчей;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеОПоручительстве Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ЗаявлениеОПоручительстве;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ДосрочноеИсполнениеОтсрочки Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ДосрочноеИсполнениеОтсрочки;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПредоставлениеОтсрочки Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ПредоставлениеОтсрочки;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СубсидияПоПостановлению1513 Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СубсидияПоПостановлению1513;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИсчисленныеСуммыНалогов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИсчисленныеСуммыНалогов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОсобыйПорядокУплатыНалогов Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОсобыйПорядокУплатыНалогов;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ВозвратЕдиногоНалоговогоПлатежа Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ВозвратЕдиногоНалоговогоПлатежа;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.СведенияОКадастровыхНомерах Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.СведенияОКадастровыхНомерах;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИнформацияОПараметрахДоступаИС Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ИнформацияОПараметрахДоступаИС;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ОперацииОтчужденияЦФА Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.ОперацииОтчужденияЦФА;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.РезидентДФОПониженныеТарифы Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.РезидентДФОПониженныеТарифы;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУчастникаСколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика;
		ИначеЕсли ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеУчастникаСколково Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика;
		ИначеЕсли ВидУведомления = 
			Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеПорядокПредставленияНалоговыхДеклараций Тогда
			Возврат Справочники.ВидыОтправляемыхДокументов.УведомлениеПорядокПредставленияДекларацииИмущество;
		Иначе
			Если ТипЗнч(ВидУведомления) = Тип("ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения") Тогда
				ИндексВидаУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.Индекс(ВидУведомления);
				Если ИндексВидаУведомления <> -1 И ИндексВидаУведомления <
					Метаданные.Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗначенияПеречисления.Количество() Тогда
					
					ИмяВидаУведомления = Метаданные.Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗначенияПеречисления[
						ИндексВидаУведомления].Имя;
					Если ЗначениеЗаполнено(ИмяВидаУведомления) Тогда
						Попытка
							Запрос = Новый Запрос(
								"ВЫБРАТЬ РАЗРЕШЕННЫЕ
								|	ВидыОтправляемыхДокументов.Ссылка КАК Ссылка
								|ИЗ
								|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
								|ГДЕ
								|	ВидыОтправляемыхДокументов.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных");
							
							Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяВидаУведомления);
							Выборка = Запрос.Выполнить().Выбрать();
							Если Выборка.Следующий() Тогда
								Возврат Выборка.Ссылка;
							КонецЕсли;
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстОшибки = СтрШаблон(
								НСтр("ru = 'Не удалось найти вид отправляемых документов ""%1""';
									|en = 'Не удалось найти вид отправляемых документов ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
								ИмяВидаУведомления);
							
							ЗаписьЖурналаРегистрации(
								ТекстОшибки,
								УровеньЖурналаРегистрации.Ошибка,,,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						КонецПопытки;
						
						Возврат Справочники.ВидыОтправляемыхДокументов.ЭлементДляВыпускаНовыхПатчей;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Справочники.ВидыОтправляемыхДокументов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура СкрытьЭлементыФормыПриИспользованииОднойОрганизации(Форма, ИмяЭлемента) Экспорт
		
	Если РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
		
		Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
			
			Для Каждого ИмяОдногоЭлемента Из ИмяЭлемента Цикл
				
				СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяОдногоЭлемента);
				
				Если СкрываемыйЭлемент <> Неопределено Тогда
					СкрываемыйЭлемент.Видимость = Ложь;
				КонецЕсли;
				
			КонецЦикла; 
			
		ИначеЕсли ТипЗнч(ИмяЭлемента) = Тип("Строка") Тогда
			
			СкрываемыйЭлемент = Форма.Элементы.Найти(ИмяЭлемента);
			
			Если СкрываемыйЭлемент <> Неопределено Тогда
				
				СкрываемыйЭлемент.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для проверки факта отправки в ФНС, ПФР или Росстат
// Функция возвращает вид отправляемого документа 
// Параметры:      
//  Ссылка - ссылка на отправляемый объект.
// Результат:
//	Истина, если объект отправлялся в контролирующие органы
//	Ложь, если объект не отправлялся в контролирующие органы
//
Функция ОбъектОтправлялсяВКонтролирующиеОрганы(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатусыОтправки.Объект
		|ИЗ
		|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		|ГДЕ
		|	СтатусыОтправки.Статус в (&Статус)
		|	И СтатусыОтправки.Объект = &Объект";

	Статус = Новый Массив;
	Статус.Добавить(Перечисления.СтатусыОтправки.Отправлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.Доставлен);
	Статус.Добавить(Перечисления.СтатусыОтправки.НеПринят);
	Статус.Добавить(Перечисления.СтатусыОтправки.Сдан);
	Статус.Добавить(Перечисления.СтатусыОтправки.ПринятЕстьОшибки);
	
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("Объект", Ссылка);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ЗаголовокГиперссылкиЗаявления(Организация) Экспорт
	
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаголовокГиперссылкиЗаявления(
		Неопределено, 
		Организация, 
		Неопределено, 
		Неопределено);
	
КонецФункции

Функция ПараметрыОтображенияВЖурналеОтчетов() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ДокСсылка",					Неопределено);
	ПараметрыОтчета.Вставить("НаименованиеОтчета",			"");
	ПараметрыОтчета.Вставить("ВидКонтролирующегоОргана",	Неопределено);
	ПараметрыОтчета.Вставить("КодКонтролирующегоОргана",	"");
	ПараметрыОтчета.Вставить("ДатаНачалаОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("ДатаОкончанияОП",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Организация",					Неопределено);
	ПараметрыОтчета.Вставить("СтатусОтправки",				"");
	ПараметрыОтчета.Вставить("ПредставлениеВида",			"");
	ПараметрыОтчета.Вставить("ДатаСоздания",				Дата(1, 1, 1));
	ПараметрыОтчета.Вставить("Комментарий",					"");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ИзменитьЗначениеВФорме1СОтчетность(Ссылка, ИмяПоля, Знач НовоеЗначение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		СведенияПоОтправляемомуОбъекту = КонтекстЭДОСервер.СведенияПоОтправляемымОбъектам(Ссылка);
		
		СтраницаЖурнала = СведенияПоОтправляемомуОбъекту.СтраницаЖурнала;
		
		Если СтраницаЖурнала = Перечисления.СтраницыЖурналаОтчетность.Отчеты Тогда
			Регистр = "ЖурналОтчетовСтатусы";
		Иначе
			Регистр = "ЖурналОтправокВКонтролирующиеОрганы";
		КонецЕсли;
		
		СтруктураКлюча = Новый Структура("Ссылка", Ссылка);
		Ключ = РегистрыСведений[Регистр].СоздатьКлючЗаписи(СтруктураКлюча);
		ЗаблокироватьДанныеДляРедактирования(Ключ);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + Регистр);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Ссылка.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		
		Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора[ИмяПоля] = НовоеЗначение;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Ошибка = НСтр("ru = 'Не удалось изменить свойство %1 в таблице %2 в форме 1С-Отчетности для %3';
						|en = 'Не удалось изменить свойство %1 в таблице %2 в форме 1С-Отчетности для %3'", ОбщегоНазначения.КодОсновногоЯзыка());
		Ошибка = СтрШаблон(Ошибка, ИмяПоля, Регистр, Строка(Ссылка));
		
		ЗаписьЖурналаРегистрации(
			Ошибка, 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Функция ВидыОтправляемыхУведомленийОСпецрежимахНалогообложения() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтправляемыхДокументов.Ссылка КАК Вид
		|ИЗ
		|	Справочник.ВидыОтправляемыхДокументов КАК ВидыОтправляемыхДокументов
		|ГДЕ
		|	ВидыОтправляемыхДокументов.Ссылка В ИЕРАРХИИ(&Уведомления)
		|	И ВидыОтправляемыхДокументов.Ссылка <> &Уведомления
		|		ИЛИ ВидыОтправляемыхДокументов.Ссылка =
		|			ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.ЗаявлениеОРегистрацииОбъектаНВОС)
		|		ИЛИ ВидыОтправляемыхДокументов.Ссылка =
		|			ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.УведомлениеСколковоОсвобождениеОтОбязанностейНалогоплательщика)";

	Запрос.УстановитьПараметр("Уведомления", Справочники.ВидыОтправляемыхДокументов.Уведомления);

	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивВидовУведомлений = Результат.ВыгрузитьКолонку("Вид");
	Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.МассивВидовПрочихУведомленийПоддерживающихДокументооборот(МассивВидовУведомлений);
	
КонецФункции

Функция ИмяПеречисления(ЗначениеПеречисления) Экспорт
	
	Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
	
		Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(ЗначениеПеречисления);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяТипа(Тип) Экспорт

	Возврат Метаданные.НайтиПоТипу(Тип).ПолноеИмя();

КонецФункции

Функция ПолучитьСписокВложений(ВладелецВложения) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенияНеформализованныхДокументов.ИмяФайла,
	|	ВложенияНеформализованныхДокументов.Тип,
	|	ВложенияНеформализованныхДокументов.Размер
	|ИЗ
	|	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	|ГДЕ
	|	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент";
	Запрос.УстановитьПараметр("НеформализованныйДокумент", ВладелецВложения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИменФайлов.Добавить(Новый Структура("ИмяФайла,Размер", Выборка.ИмяФайла, Выборка.Размер));
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Функция ПолучитьВложенияДокументовРеализацииПолномочийНалоговыхОрганов(Владелец) Экспорт
	
	СписокИменФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла КАК ИмяФайла,
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Размер КАК Размер,
	|	ВЫБОР
	|		КОГДА СостояниеОбъектов.Архивный ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА СостояниеОбъектов.Архивный = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВАрхиве,
	|	Представление(ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ВидРешенияНаЖалобу) КАК ВидРешенияНаЖалобу
	|ИЗ
	|	РегистрСведений.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов КАК ФайлыДокументовРеализацииПолномочийНалоговыхОрганов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПризнакиАрхивированияФайловДОСКонтролирующимиОрганами КАК СостояниеОбъектов
	|		ПО (СостояниеОбъектов.Объект = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ)
	|			И (СостояниеОбъектов.ИмяФайла = ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.ИмяФайла)
	|			И (СостояниеОбъектов.Владелец = ЗНАЧЕНИЕ(Перечисление.ВидыАрхивируемыхМетаданныхДО.ФайлыДокументовРеализацииПолномочийНалоговыхОрганов))
	|ГДЕ
	|	ФайлыДокументовРеализацииПолномочийНалоговыхОрганов.Документ = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Пустое", Перечисления.ВидыРешенийНаЖалобу.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеВложения = Новый Структура(
			"ИмяФайла, Размер, ВАрхиве, ВидРешенияНаЖалобу", 
			Выборка.ИмяФайла, 
			Выборка.Размер, 
			Выборка.ВАрхиве, 
			Выборка.ВидРешенияНаЖалобу);
			
		СписокИменФайлов.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат СписокИменФайлов;
	
КонецФункции

Процедура УдалитьВыборCSPИзВременныхНастроек() Экспорт

	Попытка
		
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"МастерФормированияЗаявкиНаПодключение",
		"ВыбранныйКриптопровайдер",
		ИмяПользователя()
		);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Удаление сохраненных настроек мастера подключения к 1С-Отчетности';
				|en = 'Удаление сохраненных настроек мастера подключения к 1С-Отчетности'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецПопытки;

КонецПроцедуры

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	ВидОбменаСКонтролирующимиОрганами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ВидОбменаСКонтролирующимиОрганами");
	Если ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяЗначенияПеречисленияСпецоператорыСвязиПоСинониму(Синоним) Экспорт
	
	НужныйИндекс = Перечисления.СпецоператорыСвязи.Индекс(Синоним);
	ИмяЗначения = Перечисления.СпецоператорыСвязи.Прочие.Метаданные().ЗначенияПеречисления[НужныйИндекс].Имя;
	Возврат ИмяЗначения;
	
КонецФункции

Функция ПолучитьПараметрСпецоператора(Знач Спецоператор, Параметр) Экспорт
	
	Возврат ДокументооборотСКОПовтИсп.ПолучитьПараметрСпецоператора(Спецоператор, Параметр);
	
КонецФункции

Функция ИменаУЦКалуги() Экспорт
	
	ИменаУЦ = ПолучитьПараметрСпецоператора(Перечисления.СпецоператорыСвязи.КалугаАстрал, "ИменаУЦ");
	
	Возврат ИменаУЦ;
	
КонецФункции

Процедура ЗадатьКодОрганаФСГСВОрганизации(Организация, НовыйКодОрганаФСГС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗадатьКодОрганаФСГСВОрганизации(
		Организация,
		НовыйКодОрганаФСГС,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Если РегламентированнаяОтчетность.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
			ОбщийМодульРегистрацииВОрганеСтатистикиВызовСервера = ОбщегоНазначения.ОбщийМодуль("РегистрацииВОрганеСтатистикиВызовСервера");
			Сведения = ОбщийМодульРегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Организация,, "КодОрганаФСГС");
			Если Сведения.Регистрация <> Неопределено И Сведения.ДанныеРегистрации.КодОрганаФСГС <> НовыйКодОрганаФСГС Тогда
				РегистрацияОбъект = Сведения.Регистрация.ПолучитьОбъект();
				РегистрацияОбъект.КодОрганаФСГС = НовыйКодОрганаФСГС;
				РегистрацияОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗадатьКодОрганаФСГСВПодразделении(Подразделение, НовыйКодОрганаФСГС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ЗадатьКодОрганаФСГСВПодразделении(
		Подразделение,
		НовыйКодОрганаФСГС,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Если РегламентированнаяОтчетность.ИспользуютсяРегистрацииВОрганеСтатистики() Тогда
			ОбщийМодульРегистрацииВОрганеСтатистикиВызовСервера = ОбщегоНазначения.ОбщийМодуль("РегистрацииВОрганеСтатистикиВызовСервера");
			Сведения = ОбщийМодульРегистрацииВОрганеСтатистикиВызовСервера.СведенияОРегистрацииВОрганеСтатистики(Подразделение,, "КодОрганаФСГС");
			Если Сведения.Регистрация <> Неопределено И Сведения.ДанныеРегистрации.КодОрганаФСГС <> НовыйКодОрганаФСГС Тогда
				РегистрацияОбъект = Сведения.Регистрация.ПолучитьОбъект();
				РегистрацияОбъект.КодОрганаФСГС = НовыйКодОрганаФСГС;
				РегистрацияОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьДоступККонтекстуЭДО() Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер <> Неопределено;
	
КонецФункции

Функция ВерсияВнешнегоМодуляДокументооборота() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Получить();
	
КонецФункции

Функция ПараметрыВнешнегоМодуляДокументооборота(ЗагружатьДанныеМодуля = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьВнешнийМодуль", Неопределено);
	Результат.Вставить("ВнешнийМодуль", 			Неопределено);
	Результат.Вставить("ВерсияВнешнегоМодуля", 		Неопределено);
	
	Если ПравоДоступа("Чтение",
		Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль) Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль," + ?(ЗагружатьДанныеМодуля, "
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,", "") + "
			|	Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля
			|ИЗ
			|	Константы КАК Константы";
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат.ИспользоватьВнешнийМодуль 	= Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль;
			Если ЗагружатьДанныеМодуля Тогда
				Результат.ВнешнийМодуль 			= Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль.Получить();
			КонецЕсли;
			Результат.ВерсияВнешнегоМодуля 			= Выборка.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресТекстаОтправленногоЗаявления(ЗаявлениеСсылка) Экспорт
	Возврат ПоместитьВоВременноеХранилище(ЗаявлениеСсылка.ТекстОтправленногоЗаявления.Получить(), Новый УникальныйИдентификатор);
КонецФункции

Функция ПредставлениеДекларацииПоНДС(ДекларацияПоНДС) Экспорт
	
	Представление = "";
	// Для регламентированного отчета формируем представление по отдельному алгоритму
	Если ТипЗнч(ДекларацияПоНДС) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Представление = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДекларацияПоНДС);
	Иначе
		Представление = Строка(ДекларацияПоНДС);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ЭтоТребованиеФНС(ДокументСсылка) Экспорт
	
	Возврат ДокументСсылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииДокументов
		ИЛИ ДокументСсылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОПредставленииПоясненийКДекларацииНДС;
	
КонецФункции

Функция СодержитТребованиеУплаты(ДокументСсылка) Экспорт
	
	Возврат ДокументСсылка.ВидДокумента = Перечисления.ВидыНалоговыхДокументов.ТребованиеОбУплатеНалогаСбораПениШтрафа;
	
КонецФункции

Функция СведенияОЗаполненииПоясненияКДекларацииПоНДС(Пояснение) Экспорт
	
	СведенияОЗаполнении = Новый Структура("ЕстьНеОтвеченныеСтроки, ЕстьИзмененияПоНДС, ЕстьСтрокиДляОтправки", Ложь, Ложь, Ложь);
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Пояснение", Пояснение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоНеОтвеченныхСтрок), 0) КАК КоличествоНеОтвеченныхСтрок,
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоСтрокДляОтправки), 0) КАК КоличествоСтрокДляОтправки,
	|	ЕСТЬNULL(СУММА(СведенияОЗаполнении.КоличествоСтрокСИзменениямиНДС), 0) КАК КоличествоСтрокСИзменениямиНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоНеОтвеченныхСтрок,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоСтрокДляОтправки,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупок.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСКнигаПокупок.СуммаНДС <> ПоясненияКДекларацииПоНДСКнигаПокупок.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоСтрокСИзменениямиНДС
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПокупок КАК ПоясненияКДекларацииПоНДСКнигаПокупок
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПокупок.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПокупокДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСКнигаПокупокДл.СуммаНДС <> ПоясненияКДекларацииПоНДСКнигаПокупокДл.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПокупокДл КАК ПоясненияКДекларацииПоНДСКнигаПокупокДл
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПокупокДл.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродаж.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И (ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС20 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС20Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС18 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС18Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС10 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС10Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС7 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС7Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС5 <> ПоясненияКДекларацииПоНДСКнигаПродаж.СуммаНДС5Расхождение)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПродаж КАК ПоясненияКДекларацииПоНДСКнигаПродаж
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПродаж.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСКнигаПродажДл.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И (ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС20 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС20Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС18 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС18Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС10 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС10Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС7 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС7Расхождение
	|						ИЛИ ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС5 <> ПоясненияКДекларацииПоНДСКнигаПродажДл.СуммаНДС5Расхождение)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.КнигаПродажДл КАК ПоясненияКДекларацииПоНДСКнигаПродажДл
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСКнигаПродажДл.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ЖурналУчетаВыставленныхСчетовФактур КАК ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСЖурналУчетаВыставленныхСчетовФактур.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ЖурналУчетаПолученныхСчетовФактур КАК ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСЖурналУчетаПолученныхСчетовФактур.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки = ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|					И ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.СуммаНДС <> ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.СуммаНДСРасхождение
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.ВыставленныеСчетаФактурыНеплательщиковНДС КАК ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСВыставленныеСчетаФактурыНеплательщиковНДС.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДСНетКнигаПрод.РезультатПроверки <> ЗНАЧЕНИЕ(Перечисление.РезультатПроверкиСтрокиДекларации.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.НетКнигаПрод КАК ПоясненияКДекларацииПоНДСНетКнигаПрод
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДСНетКнигаПрод.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДССведКС.ПоясненКС <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС.СведКС КАК ПоясненияКДекларацииПоНДССведКС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДССведКС.Ссылка = &Пояснение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ВЫБОР
	|			КОГДА ПоясненияКДекларацииПоНДССведКС.ПояснИнОсн <> """"
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0
	|	ИЗ
	|		Документ.ПоясненияКДекларацииПоНДС КАК ПоясненияКДекларацииПоНДССведКС
	|	ГДЕ
	|		ПоясненияКДекларацииПоНДССведКС.Ссылка = &Пояснение) КАК СведенияОЗаполнении";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СведенияОЗаполнении.ЕстьНеОтвеченныеСтроки = Выборка.КоличествоНеОтвеченныхСтрок > 0;
		СведенияОЗаполнении.ЕстьСтрокиДляОтправки = (Выборка.КоличествоСтрокДляОтправки-Выборка.КоличествоСтрокСИзменениямиНДС) > 0;
		СведенияОЗаполнении.ЕстьИзмененияПоНДС = Выборка.КоличествоСтрокСИзменениямиНДС > 0;
	КонецЕсли;
	
	Возврат СведенияОЗаполнении;
	
КонецФункции

// По коду региона возвращает массив органов росстата.
//
// Параметры:
//  КодРегиона	 - Строка - Код региона, для которого надо получить список ТОГС.
//  Спецоператор - Строка - Если указан, ищутся только те органы, которые в указанном регионе поддерживаются
//		данным спецоператором. Если не указан, берутся все органы в данном регионе.
// 
// Возвращаемое значение:
//  Массив - пустой или содержит структуры с ключами КодТОГС и НаименованиеТОГС в качестве элементов.
//
Функция ОтделенияРосстатаРегиона(КодРегиона, Спецоператор = Неопределено) Экспорт
	
	ТаблицаТОГС = ТаблицаТОГС();
	ТаблицаТОГС.Индексы.Добавить("КодРегиона");
	
	Отбор = Новый Структура();
	Если ЗначениеЗаполнено(Спецоператор) Тогда
		
		ИмяКолонкиСпецоператора = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ПолучитьПараметрСпецоператора(
			Спецоператор, 
			"СпецоператорСвязи");
			
		ТаблицаТОГС = ТаблицаТОГС.Скопировать(Новый Структура(ИмяКолонкиСпецоператора, ""));
		
	КонецЕсли;
	
	ТаблицаТОГС.Сортировать("Код");
	
	Строки = ТаблицаТОГС.НайтиСтроки(Новый Структура("КодРегиона", КодРегиона));
	
	ОтделенияРосстата = Новый Массив();
	Для Каждого Строка ИЗ Строки Цикл
		Отделение = Новый Структура("КодТОГС, НаименованиеТОГС", Строка.Код, Строка.Наименование);
		ОтделенияРосстата.Добавить(Отделение);
	КонецЦикла;
	
	Возврат ОтделенияРосстата;
	
КонецФункции

// По коду органа Росстата возвращает его наименование.
//
// Параметры:
//  КодОрганаФСГС	 - Строка - код органа Росстата.
// 
// Возвращаемое значение:
//  Строка - наименование органа Росстата.
//
Функция НаименованиеТОГС(КодОрганаФСГС) Экспорт
	
	Если ЗначениеЗаполнено(КодОрганаФСГС) Тогда
		
		ТаблицаТОГС = ТаблицаТОГС(Истина, Ложь);
		Строка = ТаблицаТОГС.Найти(КодОрганаФСГС, "Код");
		Если Строка = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат Строка.Наименование;
		КонецЕсли;
		
	Иначе
		
		Возврат НСтр("ru = '<Не выбран код территориального органа>';
					|en = '<Не выбран код территориального органа>'");
		
	КонецЕсли;
	
КонецФункции

Процедура ОтметитьКакПрочтенное(Ссылка) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Ссылка);
	
КонецПроцедуры

Процедура СкрытьВосстановитьОбъект1СОтчетности(Ссылка, Скрыть) Экспорт
	
	ИзменитьЗначениеВФорме1СОтчетность(Ссылка, "Скрыт", Скрыть);
	
КонецПроцедуры

Функция ПодключенДокументооборотСКонтролирующимОрганом(Организация = Неопределено, КонтролирующийОрган = Неопределено) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(Организация, КонтролирующийОрган, Ложь, Истина);
	
КонецФункции

Функция ЗаполнитьПараметрыКриптографии() Экспорт
	
	СтруктураРезультата = Новый Структура;
	
	ПрисутствуетЗаполненныйПараметр = Ложь;
	
	ПараметрыКриптографии = Новый Соответствие;
	ПараметрыКриптографии.Вставить("ИмяКриптопровайдера");
	ПараметрыКриптографии.Вставить("ТипКриптопровайдера");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера КАК ИмяКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера КАК ТипКриптопровайдера
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого ПараметрКриптографии Из ПараметрыКриптографии Цикл
			ПараметрыКриптографии.Вставить(ПараметрКриптографии.Ключ, Выборка[ПараметрКриптографии.Ключ]);
			Если ЗначениеЗаполнено(Выборка[ПараметрКриптографии.Ключ]) Тогда
				ПрисутствуетЗаполненныйПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультата.Вставить("ПрисутствуетЗаполненныйПараметр", ПрисутствуетЗаполненныйПараметр);
	СтруктураРезультата.Вставить("ПараметрыКриптографии", ПараметрыКриптографии);
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция РазделениеВключено() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено();
	
КонецФункции

Функция РеквизитыНеХранящиесяВБазе(Организация = Неопределено) Экспорт
	
	Реквизиты = Новый Соответствие();
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонОсновной, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ТелефонДополнительный, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ЭлектроннаяПочта, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДолжность, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППодразделение, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПСНИЛС, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ДополнительныйКодФСС, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПМестоРождения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПДатаРождения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПКодПодразделения, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦППол, Ложь);
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.ВладелецЭЦПГражданство, Ложь);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ОпределитьНаличиеДанныхДляЗаявленияНаСертификат(Реквизиты, Организация);
	
	// Этот реквизит всегда должен быть доступным для ввода, поскольку ниоткуда не заполняется.
	Реквизиты.Вставить(Перечисления.ПараметрыПодключенияК1СОтчетности.НомерОсновнойПоставки1С, Ложь);
	
	НеХранящиесяРеквизиты = Новый Массив;
	Для каждого РеквизитМастера Из Реквизиты Цикл
		
		РеквизитНеХранитсяВБазе = РеквизитМастера.Значение = Ложь;
		
		Если РеквизитНеХранитсяВБазе Тогда
			НеХранящиесяРеквизиты.Добавить(РеквизитМастера.Ключ);
		КонецЕсли;
	
	КонецЦикла; 
	
	Возврат НеХранящиесяРеквизиты; 
	
КонецФункции

Функция КодАльфа2Заполнен(Гражданство) Экспорт
	
	Возврат ЗначениеЗаполнено(Гражданство.КодАльфа2);
	
КонецФункции

Функция ПолучитьИмяФормыОбъктаДляПередачиФНС(Тип) Экспорт

	ВидОбъекта = Неопределено;
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ВидОбъекта = "Справочник.";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		ВидОбъекта = "Документ.";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(Тип).Имя;
	ИмяФормыВыбора = ВидОбъекта + ИмяОбъектаМетаданных + ".ФормаВыбора";
	
	Возврат ИмяФормыВыбора;

КонецФункции

Функция ЭтоИностранныйПаспорт(Документ) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоИностранныйПаспорт(Документ); 
	
КонецФункции

Функция ЭтоПаспортРФ(Документ) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Возврат КонтекстЭДОСервер.ЭтоПаспортРФ(Документ); 
	
КонецФункции

#Область ИнтеграцияСЭДО

Процедура ПроверитьНастройкиРегистрацииЭДО(НастройкиЭДО, НастройкиКорректны) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиПереопределяемый.ПроверитьНастройкиРегистрацииЭДО(НастройкиЭДО, НастройкиКорректны);

КонецПроцедуры
 
#КонецОбласти

Функция ЗначенияРеквизитовОбмена(ОрганизацияИлиУчетнаяЗапись, НастройкиПолучения = Неопределено) Экспорт
	
	НастройкиПолученияРеквизитов = Новый Структура;
	НастройкиПолученияРеквизитов.Вставить("ПолучатьРеквизитыУчетнойЗаписи", Истина);
	НастройкиПолученияРеквизитов.Вставить("ПолучатьПраваОбмена", 			Истина);
	Если НастройкиПолучения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПолученияРеквизитов, НастройкиПолучения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Организация", 							Неопределено);
	Результат.Вставить("УчетнаяЗапись", 						Неопределено);
	Результат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", 	Ложь);
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь, Результат);
	Результат.Вставить("СертификатРуководителя", 				"");
	Результат.Вставить("СертификатГлавногоБухгалтера", 			"");
	Результат.Вставить("СертификатДляШифрования", 				"");
	Результат.Вставить("ПредназначенаДляДокументооборотаСФНС", 	Ложь);
	Результат.Вставить("ПредназначенаДляДокументооборотаСПФР", 	Ложь);
	Результат.Вставить("ПредназначенаДляДокументооборотаСФСГС", Ложь);
	Результат.Вставить("ПользователюРазрешеноВыполнятьОбмен", 	Ложь);
	
	Если НЕ ЗначениеЗаполнено(ОрганизацияИлиУчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ОрганизацияИлиУчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		Результат.Организация = ОрганизацияИлиУчетнаяЗапись;
		Результат.УчетнаяЗапись = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.УчетнаяЗаписьОрганизации(
			ОрганизацияИлиУчетнаяЗапись);
	Иначе
		Результат.УчетнаяЗапись = ОрганизацияИлиУчетнаяЗапись;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.УчетнаяЗапись) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиПолученияРеквизитов.ПолучатьРеквизитыУчетнойЗаписи Тогда
		
		Сертификат = Мультирежим.СертификатПользователя(
			Результат.УчетнаяЗапись, "ЭлектроннаяПодписьВМоделиСервиса, МодельХраненияЗакрытогоКлюча, УчетнаяЗаписьОблачнойПодписи");
		Если НЕ Сертификат.Найден Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.ЭтоЭлектроннаяПодписьВМоделиСервиса = Сертификат.ЭлектроннаяПодписьВМоделиСервиса;
		
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.ОпределитьМестоХраненияКлюча(
			Сертификат.МодельХраненияЗакрытогоКлюча, 
			Сертификат.УчетнаяЗаписьОблачнойПодписи);
			
		КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(МестоХраненияКлюча, Результат);
		
		ИменаРеквизитов    = "ПредназначенаДляДокументооборотаСФНС, ПредназначенаДляДокументооборотаСПФР, ПредназначенаДляДокументооборотаСФСГС";
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.УчетнаяЗапись, ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, ЗначенияРеквизитов);
		
		ЗаполнитьЗначенияСвойств(Результат, Сертификат);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НастройкиПолученияРеквизитов.ПолучатьПраваОбмена Тогда
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		Если КонтекстЭДОСервер <> Неопределено Тогда
			Результат.ПользователюРазрешеноВыполнятьОбмен = КонтекстЭДОСервер.ПользователюРазрешеноВыполнятьОбменПоУчетнойЗаписи(
				Результат.УчетнаяЗапись);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ПереходКоробкаОблакоИОбратно

Процедура ПередВыгрузкойДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПередВыгрузкойДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПослеВыгрузкиДанных(Контейнер);
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПослеЗагрузкиДанных(Контейнер);
	
КонецПроцедуры

#КонецОбласти

Функция EMailФизическиеЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("АдресЭлектроннойПочты");
	ДатаЗначения = ТекущаяДатаСеанса();
	
	Сведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
	Почта = "";
	Сведения.Свойство("АдресЭлектроннойПочты", Почта);
	
	Возврат Почта;
	
КонецФункции

Функция ИННФизЛица(ФизЛицо) Экспорт
	
	МассивПоказателей = Новый Массив;
		
	МассивПоказателей.Добавить("ИНН");
	ДатаЗначения = ТекущаяДатаСеанса();
	
	Сведения = РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОФизЛице(ФизЛицо, МассивПоказателей, ДатаЗначения);
	
	ИНН = "";
	Сведения.Свойство("ИНН", ИНН);
	
	Возврат ИНН;
	
КонецФункции

Процедура ДобавитьВидыПрочихУведомленийПоддерживающихДокументооборот(
		МассивВидовПрочихУведомленийПоддерживающихДокументооборот,
		МассивВидовОтправляемыхДокументов) Экспорт
	
	ВидыОтправляемыхДокументов = ДокументооборотСКОПовтИсп.ТаблицаВидовОтправляемыхДокументов();
	
	Для каждого ВидОтправляемыхДокументов Из МассивВидовОтправляемыхДокументов Цикл
		СтрокаВидовОтправляемыхДокументов = ВидыОтправляемыхДокументов.Найти(ВидОтправляемыхДокументов, "Ссылка");
		Если СтрокаВидовОтправляемыхДокументов <> Неопределено Тогда
			ИмяВидаОтправляемыхДокументов = СтрокаВидовОтправляемыхДокументов.ИмяПредопределенныхДанных;
			Если ЗначениеЗаполнено(ИмяВидаОтправляемыхДокументов) Тогда
				Если Метаданные.Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗначенияПеречисления.Найти(
					ИмяВидаОтправляемыхДокументов) <> Неопределено Тогда
					
					ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения[ИмяВидаОтправляемыхДокументов];
					Если МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Найти(ВидУведомления) = Неопределено Тогда
						МассивВидовПрочихУведомленийПоддерживающихДокументооборот.Добавить(ВидУведомления);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ТребованияСФР

Процедура ЗаполнитьРегистрДаннымиИзОтветовНаТребованияСФР()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Основание КАК Требование,
	|	МАКСИМУМ(ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС) КАК ДатаОтправкиВФСС
	|ПОМЕСТИТЬ ВТДатыОтправкиОтветов
	|ИЗ
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТДатыОтправкиОтветов.Требование КАК Требование,
	|	МАКСИМУМ(ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТОтветыНаТребования
	|ИЗ
	|	ВТДатыОтправкиОтветов КАК ВТДатыОтправкиОтветов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|		ПО ВТДатыОтправкиОтветов.ДатаОтправкиВФСС = ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС
	|			И ВТДатыОтправкиОтветов.Требование = ОтветСтрахователяНаТребованиеПроверкиФСС.Основание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДатыОтправкиОтветов.Требование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТОтветыНаТребования.Требование КАК Ссылка,
	|	ВТОтветыНаТребования.Ссылка КАК ОтветНаТребованиеФСС,
	|	ВЫБОР
	|		КОГДА ОшибкиЛогическогоКонтроля.СодержимоеОшибки ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ОшибкиЛогическогоКонтроля.СодержимоеОшибки = """"""""
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|	КОНЕЦ КАК СодержимоеОшибки
	|ПОМЕСТИТЬ ВТОшибкиЛогическогоКонтроля
	|ИЗ
	|	ВТОтветыНаТребования КАК ВТОтветыНаТребования,
	|	Документ.ВходящийДокументСЭДОФСС.ОшибкиЛогическогоКонтроля КАК ОшибкиЛогическогоКонтроля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(УведомленияОПриемеОтказе.ДатаПолученияПротокола) КАК ДатаПолученияПротокола,
	|	УведомленияОПриемеОтказе.НаборДокументов КАК НаборДокументов,
	|	УведомленияОПриемеОтказе.ВидДокумента КАК ВидДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА УведомленияОПриемеОтказе.Статус = 1
	|				ТОГДА УведомленияОПриемеОтказе.КоличествоДокументовВоВложении
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КолПр,
	|	СУММА(ВЫБОР
	|			КОГДА УведомленияОПриемеОтказе.Статус = 2
	|				ТОГДА УведомленияОПриемеОтказе.КоличествоДокументовВоВложении
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КолНепр,
	|	МАКСИМУМ(УведомленияОПриемеОтказе.ПричинаОтказа) КАК ПричинаОтказа,
	|	УведомленияОПриемеОтказе.Ссылка КАК ТребованиеФСС
	|ПОМЕСТИТЬ ВТУведомленияОПриемеОтказе
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС.УведомленияОПриемеОтказе КАК УведомленияОПриемеОтказе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|		ПО УведомленияОПриемеОтказе.ОтветНаТребованиеФСС = ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	УведомленияОПриемеОтказе.ВидДокумента,
	|	УведомленияОПриемеОтказе.НаборДокументов,
	|	УведомленияОПриемеОтказе.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Письма) КАК СтраницаЖурнала,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Организация КАК Организация,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ""Не отправлено""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) > 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) > 0
	|					ТОГДА ""Принято частично""
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) = 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) > 0
	|					ТОГДА ""Не принято""
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) > 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) = 0
	|					ТОГДА ""Принято""
	|				ИНАЧЕ ""Отправлено в СФР""
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусОтправки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФСС) КАК ВидКонтролирующегоОргана,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС КАК ДатаОтправки,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Дата КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ВТОшибкиЛогическогоКонтроля.СодержимоеОшибки ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКритическиеОшибкиОтправки,
	|	ВходящийДокументСЭДОФСС.КодОтправителя КАК КодКонтролирующегоОргана,
	|	ПОДСТРОКА(ОтветСтрахователяНаТребованиеПроверкиФСС.Комментарий, 1, 200) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА ОтветСтрахователяНаТребованиеПроверкиФСС.ТипСообщенияОтвета = ""313""
	|			ТОГДА ""Ответ страхователя на запрос документов по камеральной проверке""
	|		ИНАЧЕ ""Ответ страхователя на запрос документов по выездной проверке""
	|	КОНЕЦ КАК Наименование,
	|	ЛОЖЬ КАК НеОтправляетсяВКонтролирующийОрган,
	|	ЛОЖЬ КАК Непрочтенное,
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.ПометкаУдаления КАК ПометкаУдаления,
	|	""СФР "" + ВходящийДокументСЭДОФСС.КодОтправителя КАК ПредставлениеКонтролирующегоОргана,
	|	ЕСТЬNULL(ЖурналНовыхСобытий.Скрыт, ЛОЖЬ) КАК Скрыт,
	|	ВЫБОР
	|		КОГДА ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) > 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота)
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) = 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота)
	|				КОГДА ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолПр, 0) > 0
	|						И ЕСТЬNULL(ВТУведомленияОПриемеОтказе.КолНепр, 0) = 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНачат)
	|			КОНЕЦ
	|	КОНЕЦ КАК СостояниеСдачиОтчетности
	|ИЗ
	|	ВТОтветыНаТребования КАК ВТОтветыНаТребования,
	|	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|		ПО ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка = ЖурналНовыхСобытий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУведомленияОПриемеОтказе КАК ВТУведомленияОПриемеОтказе
	|		ПО ОтветСтрахователяНаТребованиеПроверкиФСС.Основание = ВТУведомленияОПриемеОтказе.ТребованиеФСС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	|		ПО ОтветСтрахователяНаТребованиеПроверкиФСС.Основание = ВходящийДокументСЭДОФСС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиЛогическогоКонтроля КАК ВТОшибкиЛогическогоКонтроля
	|		ПО ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка = ВТОшибкиЛогическогоКонтроля.ОтветНаТребованиеФСС
	|			И ОтветСтрахователяНаТребованиеПроверкиФСС.Основание = ВТОшибкиЛогическогоКонтроля.Ссылка";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписейЖурналОтправокВКонтролирующиеОрганы = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Прочитать();
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Очистить();
		
		НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы = НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы, Выборка);
		
		Попытка
			НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстЗаписи = НСтр("ru = 'Электронный документооборот с контролирующими органами. Заполнение сведений об ответах ФСС';
								|en = 'Электронный документооборот с контролирующими органами. Заполнение сведений об ответах ФСС'");
			ТекстЗаписи = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстЗаписи, Истина);
			// Запись в журнал.
			ЗаписьЖурналаРегистрации(
				ТекстЗаписи,
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрДаннымиИзЗапросовНаСверкуСФР()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Сверки) КАК СтраницаЖурнала,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.Организация КАК Организация,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Подготовлено""
	|				ИЛИ ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Не отправлено""
	|			ТОГДА ""Не отправлено""
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Отправлено""
	|			ТОГДА ""Отправлено в СФР""
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Зарегистрировано""
	|			ТОГДА ""Принято в обработку""
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Справка получена""
	|			ТОГДА ""Готово""
	|	КОНЕЦ КАК СтатусОтправки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФСС) КАК ВидКонтролирующегоОргана,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.ДатаОтправкиВФСС КАК ДатаОтправки,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.Дата КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.ОшибкиКонтроля = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьКритическиеОшибкиОтправки,
	|	ЛОЖЬ КАК ЕстьПриcоединенныйФайл,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	ПОДСТРОКА(ЗаявлениеНаФормированиеСправкиОРасчетах.Комментарий, 1, 200) КАК Комментарий,
	|	""Справка о расчетах"" КАК Наименование,
	|	ЛОЖЬ КАК НеОтправляетсяВКонтролирующийОрган,
	|	ЛОЖЬ КАК Непрочтенное,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.ПометкаУдаления КАК ПометкаУдаления,
	|	""СФР "" + (ВЫРАЗИТЬ(ЗаявлениеНаФормированиеСправкиОРасчетах.КодПодчиненностиФСС КАК СТРОКА(4))) КАК ПредставлениеКонтролирующегоОргана,
	|	ЕСТЬNULL(ЖурналНовыхСобытий.Скрыт, ЛОЖЬ) КАК Скрыт,
	|	ВЫБОР
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Подготовлено""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат)
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Не отправлено""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНеНачат)
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Отправлено""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНачат)
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Зарегистрировано""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ДокументооборотНачат)
	|		КОГДА ЗаявлениеНаФормированиеСправкиОРасчетах.Статус = ""Справка получена""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота)
	|	КОНЕЦ КАК СостояниеСдачиОтчетности,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовВЖурнале.ПустаяСсылка) КАК ВидДокумента,
	|	ЗаявлениеНаФормированиеСправкиОРасчетах.ДатаЗадолженности КАК ПредставлениеПериода
	|ИЗ
	|	Документ.ЗаявлениеНаФормированиеСправкиОРасчетах КАК ЗаявлениеНаФормированиеСправкиОРасчетах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	|		ПО (ЖурналНовыхСобытий.Ссылка = ЗаявлениеНаФормированиеСправкиОРасчетах.Ссылка)";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписейЖурналОтправокВКонтролирующиеОрганы = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Прочитать();
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Очистить();
		
		НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы = НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы, Выборка);
		НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы.ПредставлениеПериода =
			Формат(Выборка.ПредставлениеПериода, "ДФ=dd.MM.yyyy");
		
		Попытка
			НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстЗаписи = НСтр("ru = 'Электронный документооборот с контролирующими органами. Заполнение сведений о запросах на сверку ФСС';
								|en = 'Электронный документооборот с контролирующими органами. Заполнение сведений о запросах на сверку ФСС'");
			ТекстЗаписи = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстЗаписи, Истина);
			// Запись в журнал.
			ЗаписьЖурналаРегистрации(
				ТекстЗаписи,
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТребованияСФРНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьРегистрДаннымиИзТребованийСФР();
	ЗаполнитьРегистрДаннымиИзОтветовНаТребованияСФР();
	ЗаполнитьРегистрДаннымиИзЗапросовНаСверкуСФР();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТабДокументУведомленияФСС(Ссылка, ТолькоСвойстваУведомленияФСС = Ложь) Экспорт
	
	Перем СтатусыДокументов;
	
	ТабДокумент = Неопределено;
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	ВидыДокументовСЭДОФССДоходнаяЧасть = КонтекстЭДОСервер.ПолучитьВидыДокументовСЭДОФССДоходнаяЧасть();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.ДатаПолученияПротокола) КАК ДатаПолученияПротокола,
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.НаборДокументов КАК НаборДокументов,
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.ВидДокумента КАК ВидДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.Статус = 1
	|				ТОГДА ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.КоличествоДокументовВоВложении
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КолПр,
	|	СУММА(ВЫБОР
	|			КОГДА ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.Статус = 2
	|				ТОГДА ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.КоличествоДокументовВоВложении
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КолНепр,
	|	МАКСИМУМ(ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.ПричинаОтказа) КАК ПричинаОтказа,
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.Ссылка КАК ТребованиеФСС
	|ИЗ
	|	Документ.ВходящийДокументСЭДОФСС.УведомленияОПриемеОтказе КАК ВходящийДокументСЭДОФССУведомленияОПриемеОтказе
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	|		ПО ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.ОтветНаТребованиеФСС = ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка
	|ГДЕ
	|	ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.ВидДокумента,
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.НаборДокументов,
	|	ВходящийДокументСЭДОФССУведомленияОПриемеОтказе.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТабДокумент;
	Иначе
		СвойстваУведомленияФСС = Новый Структура;
		СвойстваОрганизации = ДокументооборотСКОВызовСервера.ПолучитьСвойстваОрганизации(Ссылка.Организация);
		
		РегистрационныйНомерФСС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Организация, "РегистрационныйНомерФСС");
		Если СвойстваОрганизации.ЭтоЮридическоеЛицо Тогда
			СвПолДок = СвойстваОрганизации.НаимЮЛПол + ", " +
				СвойстваОрганизации.ИННЮЛ + 
				?(ЗначениеЗаполнено(СвойстваОрганизации.КППЮЛ), "/" + СвойстваОрганизации.КППЮЛ, "") +
				?(ЗначениеЗаполнено(РегистрационныйНомерФСС), ", " + РегистрационныйНомерФСС, "");
		Иначе
			СвПолДок = Ссылка.Организация.Наименование + ", " +
				СвойстваОрганизации.ИННФЛ + 
				?(ЗначениеЗаполнено(РегистрационныйНомерФСС), ", " + РегистрационныйНомерФСС, "");
		КонецЕсли;
		
		СвойстваУведомленияФСС.Вставить("СвПолДок", СвПолДок);
		
		СтатусыДокументов = Новый ТаблицаЗначений;
		СтатусыДокументов.Колонки.Добавить("ТребованиеФСС");
		СтатусыДокументов.Колонки.Добавить("ДатаПолученияПротокола");
		СтатусыДокументов.Колонки.Добавить("НомерПП");
		СтатусыДокументов.Колонки.Добавить("ВидДокумента");
		СтатусыДокументов.Колонки.Добавить("КолПр");
		СтатусыДокументов.Колонки.Добавить("КолНепр");
		СтатусыДокументов.Колонки.Добавить("ПричинаОтказа");
		
		Выборка = Результат.Выбрать();
		К = 1;
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СтатусыДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.ВидДокумента = ВидыДокументовСЭДОФССДоходнаяЧасть[Строка(Выборка.ВидДокумента)];
			НоваяСтрока.НомерПП = К;
			К = К + 1;
		КонецЦикла;
		
		СвойстваУведомленияФСС.Вставить("СтатусыДокументов", СтатусыДокументов);
		
		ДатаУведомления = ?(СтатусыДокументов.Количество() > 0,
			СтатусыДокументов[0].ДатаПолученияПротокола, Дата('00010101'));
			
		СвойстваУведомленияФСС.Вставить("ДатаУведомления", Формат(ДатаУведомления, "ДФ='dd.MM.yyyy HH:mm'"));
			
		ТребованиеФСС = ?(СтатусыДокументов.Количество() > 0, СтатусыДокументов[0].ТребованиеФСС, Неопределено);
		Если НЕ ТребованиеФСС = Неопределено Тогда
			СвОргФСС = ТребованиеФСС.Отправитель + ", " + ТребованиеФСС.КодОтправителя;
		КонецЕсли;
		
		СвойстваУведомленияФСС.Вставить("СвОргФСС", СвОргФСС);
		
		СвойстваУведомленияФСС.Вставить("ВидПроверки", ?(Ссылка.ТипСообщенияОтвета = 313, "камеральной", "выездной"));
		
	КонецЕсли;
	
	Если ТолькоСвойстваУведомленияФСС Тогда
		ТабДокумент = СвойстваУведомленияФСС;
	Иначе
		КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
		ТабДокумент = КонтекстЭДОСервер.ТабДокументУведомлениеОПриемеОтказеФСС(СвойстваУведомленияФСС);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция СостояниеТребованийСФРДляПанели(Организация = Неопределено) Экспорт
	
	Подтвердить	= ЭлектронныйДокументооборотСФСС.ТребующиеСкорогоПодтвержденияСФР(Организация).Количество();
	БезОтвета	= ЭлектронныйДокументооборотСФСС.ТребующиеСкорогоОтветаСФР(Организация).Количество();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Подтвердить",	Подтвердить);
	ДополнительныеПараметры.Вставить("БезОтвета",	БезОтвета);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Процедура ЗаполнитьРегистрДаннымиИзТребованийСФР()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОтветСтрахователяНаТребованиеПроверкиФСС.Основание КАК Требование,
	               |	МАКСИМУМ(ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС) КАК ДатаОтправкиВФСС
	               |ПОМЕСТИТЬ ВТДатыОтправкиОтветов
	               |ИЗ
	               |	Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	               |ГДЕ
	               |	НЕ ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС = ДАТАВРЕМЯ(1, 1, 1)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОтветСтрахователяНаТребованиеПроверкиФСС.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ВТДатыОтправкиОтветов.Требование КАК Требование,
	               |	ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВТОтветыНаТребования
	               |ИЗ
	               |	ВТДатыОтправкиОтветов КАК ВТДатыОтправкиОтветов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	               |		ПО ВТДатыОтправкиОтветов.ДатаОтправкиВФСС = ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС
	               |			И ВТДатыОтправкиОтветов.Требование = ОтветСтрахователяНаТребованиеПроверкиФСС.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТОтветыНаТребования.Требование КАК Ссылка,
	               |	ВТОтветыНаТребования.Ссылка КАК Ответ,
	               |	ВЫБОР
	               |		КОГДА ОшибкиЛогическогоКонтроля.СодержимоеОшибки ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА НЕ ОшибкиЛогическогоКонтроля.СодержимоеОшибки = """"
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ
	               |	КОНЕЦ КАК Ошибка
	               |ПОМЕСТИТЬ ВТОшибкиЛогическогоКонтроля
	               |ИЗ
	               |	ВТОтветыНаТребования КАК ВТОтветыНаТребования,
	               |	Документ.ВходящийДокументСЭДОФСС.ОшибкиЛогическогоКонтроля КАК ОшибкиЛогическогоКонтроля
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗНАЧЕНИЕ(Перечисление.СтраницыЖурналаОтчетность.Входящие) КАК СтраницаЖурнала,
	               |	ВходящийДокументСЭДОФСС.Организация КАК Организация,
	               |	ВходящийДокументСЭДОФСС.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ВходящийДокументСЭДОФСС.Статус = """"
	               |			ТОГДА ВЫБОР
	               |					КОГДА ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения > ДАТАВРЕМЯ(1900, 1, 1)
	               |						ТОГДА ""Прием подтвержден""
	               |					ИНАЧЕ ""Подтвердите прием""
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ВходящийДокументСЭДОФСС.Статус = ""Получено""
	               |					ТОГДА ""Прием подтвержден""
	               |				ИНАЧЕ ВходящийДокументСЭДОФСС.Статус
	               |			КОНЕЦ
	               |	КОНЕЦ КАК СтатусОтправки,
	               |	ЗНАЧЕНИЕ(Перечисление.ТипыКонтролирующихОрганов.ФСС) КАК ВидКонтролирующегоОргана,
	               |	ВходящийДокументСЭДОФСС.ВходящаяДата КАК ДатаОтправки,
	               |	ВходящийДокументСЭДОФСС.ВходящаяДата КАК ДатаСоздания,
	               |	ЛОЖЬ КАК ЕстьКритическиеОшибкиОтправки,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВложенныйЗапрос.КоличествоОтветов, 0) > 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЕстьОтвет,
	               |	ВходящийДокументСЭДОФСС.КодОтправителя КАК КодКонтролирующегоОргана,
	               |	ПОДСТРОКА(ВходящийДокументСЭДОФСС.Комментарий, 1, 200) КАК Комментарий,
	               |	ВходящийДокументСЭДОФСС.ВидДокументаФСС КАК Наименование,
	               |	ЛОЖЬ КАК НеОтправляетсяВКонтролирующийОрган,
	               |	НЕ ЕСТЬNULL(ЖурналНовыхСобытий.Просмотрено, ЛОЖЬ) КАК Непрочтенное,
	               |	ВходящийДокументСЭДОФСС.ПометкаУдаления КАК ПометкаУдаления,
	               |	""СФР "" + ВходящийДокументСЭДОФСС.КодОтправителя КАК ПредставлениеКонтролирующегоОргана,
	               |	ЕСТЬNULL(ЖурналНовыхСобытий.Скрыт, ЛОЖЬ) КАК Скрыт,
	               |	ВЫБОР
	               |		КОГДА ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ТребуетсяПодтверждениеПриема)
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеСдачиОтчетности.ПриемПодтвержден)
	               |	КОНЕЦ КАК СостояниеСдачиОтчетности,
	               |	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовВЖурнале.ТребованиеИлиУведомление) КАК ВидДокумента,
	               |	ЕСТЬNULL(ВходящийДокументСЭДОФСС.ДатаОтправкиОтветаНаЗапрос, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтвета,
	               |	ВходящийДокументСЭДОФСС.ВходящаяДата КАК ДатаОтправкиТребования,
	               |	ЕСТЬNULL(ВходящийДокументСЭДОФСС.ДатаОтправкиПодтверждения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПодтверждения,
	               |	10 КАК ДнейДоОтвета,
	               |	ВТОшибкиЛогическогоКонтроля.Ошибка КАК ЕстьКритическаяОшибкаОтвета,
	               |	ЛОЖЬ КАК КалендарьБылНезаполнен,
	               |	ЕСТЬNULL(ВложенныйЗапрос.КоличествоОтветов, 0) КАК КоличествоОтветов,
	               |	ЕСТЬNULL(ВходящийДокументСЭДОФСС.МаксимальнаяДатаОтправкиОтвета, ДАТАВРЕМЯ(1, 1, 1)) КАК ОтветитьДо,
	               |	ЕСТЬNULL(ВходящийДокументСЭДОФСС.МаксимальнаяДатаПодтверждения, ДАТАВРЕМЯ(1, 1, 1)) КАК ПодтвердитьДо,
	               |	ВЫБОР
	               |		КОГДА ВходящийДокументСЭДОФСС.ТипСообщения = ""303""
	               |				ИЛИ ВходящийДокументСЭДОФСС.ТипСообщения = ""308""
	               |			ТОГДА ВЫБОР
	               |					КОГДА ВходящийДокументСЭДОФСС.ДатаОтправкиОтветаНаЗапрос = ДАТАВРЕМЯ(1, 1, 1)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТребуетОтвета,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВложенныйЗапрос.КоличествоОтветов, 0) > 0
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ОтветУжеДан,
	               |	ВТОшибкиЛогическогоКонтроля.Ошибка КАК ОтветНеПринят
	               |ИЗ
	               |	Документ.ВходящийДокументСЭДОФСС КАК ВходящийДокументСЭДОФСС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналНовыхСобытий КАК ЖурналНовыхСобытий
	               |		ПО ВходящийДокументСЭДОФСС.Ссылка = ЖурналНовыхСобытий.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			КОЛИЧЕСТВО(ОтветСтрахователяНаТребованиеПроверкиФСС.Ссылка) КАК КоличествоОтветов,
	               |			ОтветСтрахователяНаТребованиеПроверкиФСС.Основание КАК Основание,
	               |			МАКСИМУМ(ОтветСтрахователяНаТребованиеПроверкиФСС.ДатаОтправкиВФСС) КАК ДатаОтправкиВФСС
	               |		ИЗ
	               |			Документ.ОтветСтрахователяНаТребованиеПроверкиФСС КАК ОтветСтрахователяНаТребованиеПроверкиФСС
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ОтветСтрахователяНаТребованиеПроверкиФСС.Основание) КАК ВложенныйЗапрос
	               |		ПО ВходящийДокументСЭДОФСС.Ссылка = ВложенныйЗапрос.Основание
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиЛогическогоКонтроля КАК ВТОшибкиЛогическогоКонтроля
	               |		ПО ВходящийДокументСЭДОФСС.Ссылка = ВТОшибкиЛогическогоКонтроля.Ссылка
	               |ГДЕ
	               |	НЕ ВходящийДокументСЭДОФСС.Ссылка = ЗНАЧЕНИЕ(Документ.ВходящийДокументСЭДОФСС.ПустаяССылка)
	               |	И НЕ ЕСТЬNULL(ЖурналНовыхСобытий.Скрыт, ЛОЖЬ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТОшибкиЛогическогоКонтроля
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТОтветыНаТребования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТДатыОтправкиОтветов";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписейЖурналОтправокВКонтролирующиеОрганы = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.СоздатьНаборЗаписей();
	НаборЗаписейСвойстваОтветовНаТребованияФСС = РегистрыСведений.СвойстваОтветовНаТребованияФСС.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Прочитать();
		НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Очистить();
		
		НаборЗаписейСвойстваОтветовНаТребованияФСС.Отбор.Ссылка.Установить(Выборка.Ссылка);
		НаборЗаписейСвойстваОтветовНаТребованияФСС.Прочитать();
		НаборЗаписейСвойстваОтветовНаТребованияФСС.Очистить();
		
		НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы = НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьЖурналОтправокВКонтролирующиеОрганы, Выборка);
		
		НоваяЗаписьСвойстваОтветовНаТребованияФСС = НаборЗаписейСвойстваОтветовНаТребованияФСС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаписьСвойстваОтветовНаТребованияФСС, Выборка);
		
		Попытка
			НаборЗаписейСвойстваОтветовНаТребованияФСС.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстЗаписи = НСтр("ru = 'Электронный документооборот с контролирующими органами. Заполнение сведений о свойствах ответов на требования ФСС';
								|en = 'Электронный документооборот с контролирующими органами. Заполнение сведений о свойствах ответов на требования ФСС'");
			ТекстЗаписи = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстЗаписи, Истина);
			// Запись в журнал.
			ЗаписьЖурналаРегистрации(
			ТекстЗаписи,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
		
		Попытка
			НаборЗаписейЖурналОтправокВКонтролирующиеОрганы.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстЗаписи = НСтр("ru = 'Электронный документооборот с контролирующими органами. Заполнение сведений о требованиях ФСС';
								|en = 'Электронный документооборот с контролирующими органами. Заполнение сведений о требованиях ФСС'");
			ТекстЗаписи = ДокументооборотСКОКлиентСервер.ЗаменитьПФРиФССнаСФР(ТекстЗаписи, Истина);
			// Запись в журнал.
			ЗаписьЖурналаРегистрации(
			ТекстЗаписи,
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьТребующиеПодтвержденияТребованияСФР(Организация = Неопределено) Экспорт
	
	Требования = ЭлектронныйДокументооборотСФСС.ТребующиеПодтвержденияСФР(Организация);
	Возврат Требования.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОбменСЭДОСФР

// Обработчик обновления версии 1.2.1.150
// Формирование требований ФСС из входящих сообщений
Процедура ОбработатьСообщенияСЭДОФССНаСервере() Экспорт
	
	СписокТиповСообщений = Новый Массив;
	// В версии БРО 1.2.1.150 тип сообщения Число.
	СписокТиповСообщений.Добавить(300);
	СписокТиповСообщений.Добавить(301);
	СписокТиповСообщений.Добавить(302);
	СписокТиповСообщений.Добавить(303);
	СписокТиповСообщений.Добавить(304);
	СписокТиповСообщений.Добавить(305);
	СписокТиповСообщений.Добавить(306);
	СписокТиповСообщений.Добавить(307);
	СписокТиповСообщений.Добавить(308);
	СписокТиповСообщений.Добавить(309);
	СписокТиповСообщений.Добавить(310);
	СписокТиповСообщений.Добавить(311);
	СписокТиповСообщений.Добавить(312);
	
	ДанныеСообщений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВходящиеСообщенияСЭДОФСС.Идентификатор КАК Идентификатор,
	|	ВходящиеСообщенияСЭДОФСС.Организация КАК Организация,
	|	ВходящиеСообщенияСЭДОФСС.Содержимое КАК Содержимое,
	|	ВходящиеСообщенияСЭДОФСС.ИНН КАК ИНН,
	|	ВходящиеСообщенияСЭДОФСС.КПП КАК КПП,
	|	ВходящиеСообщенияСЭДОФСС.СНИЛС КАК СНИЛС,
	|	ВходящиеСообщенияСЭДОФСС.Тип КАК Тип,
	|	ВходящиеСообщенияСЭДОФСС.ТипВзаимодействия КАК ТипВзаимодействия,
	|	ВходящиеСообщенияСЭДОФСС.СрокДействия КАК СрокДействия,
	|	ВходящиеСообщенияСЭДОФСС.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВходящиеСообщенияСЭДОФСС.Получатель КАК Получатель,
	|	ВходящиеСообщенияСЭДОФСС.Новое КАК Новое,
	|	ВходящиеСообщенияСЭДОФСС.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ВходящиеСообщенияСЭДОФСС КАК ВходящиеСообщенияСЭДОФСС
	|ГДЕ
	|	ВходящиеСообщенияСЭДОФСС.Тип В(&СписокТиповСообщений)
	|	И ВходящиеСообщенияСЭДОФСС.Дата >= &Дата";
	
	Запрос.УстановитьПараметр("Дата", Дата('20221101'));
	Запрос.УстановитьПараметр("СписокТиповСообщений", СписокТиповСообщений);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСообщения = Новый Структура;
		ДанныеСообщения.Вставить("Идентификатор", 			Выборка.Идентификатор);
		ДанныеСообщения.Вставить("Тип", 					Строка(Выборка.Тип));
		ДанныеСообщения.Вставить("Получатель", 				Выборка.Получатель);
		ДанныеСообщения.Вставить("ИНН", 					Выборка.ИНН);
		ДанныеСообщения.Вставить("КПП", 					Выборка.КПП);
		ДанныеСообщения.Вставить("СНИЛС", 					Выборка.СНИЛС);
		ДанныеСообщения.Вставить("ТребуетсяПодтверждение", 	Выборка.ТребуетсяПодтверждение);
		ДанныеСообщения.Вставить("Новое", 					Выборка.Новое);
		ДанныеСообщения.Вставить("Дата", 					Выборка.Дата);
		ДанныеСообщения.Вставить("СрокДействия", 			Выборка.СрокДействия);
		ДанныеСообщения.Вставить("ТекстСообщения", 			Выборка.Содержимое.Получить());
		
		Попытка
			// Вызов предопределенного метода.
			РезультатОбработки = ЭлектронныйДокументооборотСФСС.
				ПриПолученииСодержимогоСообщенияСЭДО(Выборка.Организация, ДанныеСообщения);
			Если РезультатОбработки.ОшибкаОбработки Тогда
				ОписаниеОшибки = РезультатОбработки.ОписаниеОшибки;
				// Запись в журнал.
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Электронный документооборот с контролирующими органами. Обмен СЭДО ФСС';
						|en = 'Электронный документооборот с контролирующими органами. Обмен СЭДО ФСС'"),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
			КонецЕсли;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			// Запись в журнал.
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Электронный документооборот с контролирующими органами. Обмен СЭДО ФСС';
					|en = 'Электронный документооборот с контролирующими органами. Обмен СЭДО ФСС'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ТипСообщенияСЭДОВЧисло(Знач ТипСообщенияСЭДО, Суффикс = "") Экспорт
	
	Возврат ЭлектронныйДокументооборотСФСС.ТипСообщенияСЭДОВЧисло(ТипСообщенияСЭДО, Суффикс);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЗаявления(Организация = Неопределено) Экспорт
		
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеАбонентаСпецоператораСвязи) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеАбонентаСпецоператораСвязи.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявлениеАбонентаСпецоператораСвязи КАК ЗаявлениеАбонентаСпецоператораСвязи
	|ГДЕ
	|	НЕ ЗаявлениеАбонентаСпецоператораСвязи.ПометкаУдаления
	|	И (ЗаявлениеАбонентаСпецоператораСвязи.Организация = &Организация
	|				И &ОрганизацияУказана
	|			ИЛИ НЕ &ОрганизацияУказана)";
	
	ДвеНеделиНазад = ТекущаяДатаСеанса() - 14 * 24 * 60 * 60;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОрганизацияУказана", Организация <> Неопределено);
	
	Запрос.Текст = Текст;
	
	Результат 		= Запрос.Выполнить();
	ЕстьЗаявления 	= Результат.Выгрузить().ВыгрузитьКолонку("Ссылка").Количество() > 0;
	
	Возврат ЕстьЗаявления;
		
КонецФункции

Функция СканыЗаявленийНеПриложены(Ссылка, МастерДалее = Истина, ВыводитьСообщения = Истина) Экспорт

	РезультатПроверкиРеквизитов = Новый Массив;
	
	Если Ссылка.ЭтоЗаявлениеОНазначенииПенсии Тогда
		
		ВидЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОНазначении();
		ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, "УказательЗаявлениеОНазначении");
		
	КонецЕсли;
	
	Если Ссылка.ЭтоЗаявлениеОДоставкеПенсии Тогда
		ВидЗаявления = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ВидДокументаЗаявлениеОДоставке();
		ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, "УказательЗаявлениеОДоставке");
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	Для каждого РезультатПроверки Из РезультатПроверкиРеквизитов Цикл
		ЕстьОшибкаВРеквизите = ДокументооборотСКОКлиентСервер.ВывестиОшибкуПроверкиРеквизита(МастерДалее, РезультатПроверки, ВыводитьСообщения);
		Если ЕстьОшибкаВРеквизите Тогда
			ЕстьОшибка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибка;

КонецФункции

Процедура ПроверитьНаличиеСканаЗаявления(Ссылка, ВидЗаявления, РезультатПроверкиРеквизитов, ПутьКРеквизиту)

	ЕстьДокументы = Ложь;
	Для каждого ЭлектронныйДокументы Из Ссылка.ЭлектронныеДокументы Цикл
		Если ЭлектронныйДокументы.Документ = ВидЗаявления Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьДокументы Тогда
		
		РезультатПроверки = ДокументооборотСКОКлиентСервер.РезультатПроверкиРеквизитов();
		РезультатПроверки.ТекстОшибки = СтрШаблон(НСтр("ru = 'Прикрепите скан-копию документа ""%1""';
														|en = 'Прикрепите скан-копию документа ""%1""'"), ВидЗаявления);
		РезультатПроверки.Пустой      = Истина;
		РезультатПроверки.Поле        = ПутьКРеквизиту;
		
		РезультатПроверкиРеквизитов.Добавить(РезультатПроверки);
		
	КонецЕсли;

КонецПроцедуры

Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина)
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" Тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает строковое представление места рождения.
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт
	
	Если Лев(СтрокаМестоРождения, 2) = "0,"
		ИЛИ Лев(СтрокаМестоРождения, 2) = "1," Тогда
	
		СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
		
		Если СтруктураМестоРождения.Особое = 1 Тогда
			
			Представление	=	"особое" +
			?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
		Иначе
			
			Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
			+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
			
			Если Лев(Представление, 1) = ","  Тогда
				Представление = Сред(Представление, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Представление;
		
	Иначе
		
		Возврат СтрокаМестоРождения;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьМакетыСКомпонентойОбмена(КоллекцияМакетов, Компоненты, АктуальнаяВерсия, ПутьКОбъекту = "")
	
	ЭтоВнешняяОбработка = ЗначениеЗаполнено(ПутьКОбъекту);
	Для Каждого Макет Из КоллекцияМакетов Цикл
		Если СтрНайти(Макет.Имя, "КомпонентаОбмена") Тогда
			Если Макет.Имя = "КомпонентаОбмена" Тогда
				Компоненты.Вставить(?(ЭтоВнешняяОбработка, 1000000, 0), Макет.Имя);
				
			Иначе
				СтрокаВерсииИзМакета = СтрЗаменить(Макет.Имя, "КомпонентаОбмена", "");
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаВерсииИзМакета) Тогда
					ВерсияИзМакета = Число(СтрокаВерсииИзМакета);
					Версия = ?(ЭтоВнешняяОбработка, 1000000 + ВерсияИзМакета, ВерсияИзМакета);
					
					ПолноеИмяМакета = Макет.ПолноеИмя();
					Если ЗначениеЗаполнено(ПутьКОбъекту) Тогда
						ДлинаПутиКОбъекту = СтрДлина(ПутьКОбъекту);
						НачалоПолногоИмениМакета = Лев(ПолноеИмяМакета, ДлинаПутиКОбъекту + 1);
						Если ВРег(НачалоПолногоИмениМакета) <> ВРег(ПутьКОбъекту + ".") Тогда
							ПолноеИмяМакета = ПутьКОбъекту + "." + Макет.ПолноеИмя();
						КонецЕсли;
					КонецЕсли;
					
					Компоненты.Вставить(Версия, ПолноеИмяМакета);
					
					АктуальнаяВерсия = Макс(АктуальнаяВерсия, Версия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает цикл обмена или отправку по их идентификатору.
Функция ОтправкаПоИдентификатору(ИдентификаторОтправки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЦиклыОбмена.Ссылка
	               |ИЗ
	               |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	               |ГДЕ
	               |	ЦиклыОбмена.Идентификатор = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФСС.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСС КАК ОтправкиФСС
	               |ГДЕ
	               |	ОтправкиФСС.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФСРАР.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФСРАР КАК ОтправкиФСРАР
	               |ГДЕ
	               |	ОтправкиФСРАР.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиРПН.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиРПН КАК ОтправкиРПН
	               |ГДЕ
	               |	ОтправкиРПН.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОтправкиФТС.Ссылка
	               |ИЗ
	               |	Справочник.ОтправкиФТС КАК ОтправкиФТС
	               |ГДЕ
	               |	ОтправкиФТС.ИдентификаторОтправкиНаСервере = &ИдентификаторОтправки";
				   
	Запрос.УстановитьПараметр("ИдентификаторОтправки", ИдентификаторОтправки);
	
	ВсеОтправки = Запрос.Выполнить().Выбрать();
	
	Если ВсеОтправки.Следующий() Тогда
		Возврат ВсеОтправки.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НужноПоказатьРекламу1СОтчетности(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		УчетнаяЗаписьОрганизации 	= КонтекстЭДОСервер.УчетнаяЗаписьОрганизации(Организация);
		ПоказатьПредложение 		= НЕ ЗначениеЗаполнено(УчетнаяЗаписьОрганизации);
		
	Иначе
		
		// Проверка по всем организациям.
		ПоказатьПредложение = НЕ КонтекстЭДОСервер.ЭлектронныйДокументооборотИспользуется();
		
	КонецЕсли;
	
	Возврат ПоказатьПредложение;
	
КонецФункции

Функция ТаблицаТОГС(ВключаяСтарые = Ложь, ПолучатьНаименования = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Макет   = КонтекстЭДОСервер.ПолучитьМакет("КодыТОГСпоЦЕМПОС");
	Таблица = КонтекстЭДОСервер.ДанныеМакетаЧерезПостроительЗапроса(Макет);
	
	Если ВключаяСтарые Тогда
		
		КлассификаторXML = КонтекстЭДОСервер.ПолучитьМакет("КодыТОГС").ПолучитьТекст();
		ТаблицаСтарыхКодов = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
		
		Для каждого СтрокаСтарыхКодов Из ТаблицаСтарыхКодов Цикл
			НоваяСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтарыхКодов); 
		КонецЦикла;
		
		Таблица.Сортировать("Код Возр");
		
	КонецЕсли;
	
	Если ПолучатьНаименования Тогда
		
		Таблица.Колонки.Добавить("Регион");
	
		Для каждого Строка Из Таблица Цикл
			Регион = РегламентированнаяОтчетностьВызовСервера.ПолучитьНазваниеРегионаПоКоду(Строка.КодРегиона);
			Если ЗначениеЗаполнено(Регион) Тогда
				Строка.Регион = Регион + ".";
			Иначе
				Строка.Регион = "";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
	
	Возврат Таблица;
	
КонецФункции

Процедура ПолучитьИдентификаторАдресаФИАС(
		АдресЮридическийЗначение, 
		АдресФактическийЗначение,
		АдресХранилища) Экспорт
		
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("АдресЮридический", АдресЮридическийЗначение);
	ДополнительныеПараметры.Вставить("АдресФактический", АдресФактическийЗначение);
	ДополнительныеПараметры.Вставить("АдресХранилища", 	 АдресХранилища);
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	КонтекстЭДОСервер.ПолучитьИдентификаторАдресаФИАС(ДополнительныеПараметры);
	
КонецПроцедуры

Функция ОтчетЕщеНеОтправлялся(Ссылка) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	СтатусОтправки = КонтекстЭДОСервер.ПолучитьСтатусОтправкиОбъекта(Ссылка);
	
	Возврат НЕ ЗначениеЗаполнено(СтатусОтправки) ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте;
	
КонецФункции

Функция КонтекстПолученияДанныхФайлаИзвещенияФСС(ВходящийФайл) Экспорт
	
	Результат = Новый Структура("ДанныеФайла");
	
	Результат.ДанныеФайла = РаботаСФайлами.ДанныеФайла(ВходящийФайл);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваОбменаПоСЭДОЧерезОператора(
		Организация,
		ОбменПоСЭДОНапрямуюИзНастроек = Неопределено,
		Настройки = Неопределено) Экспорт
	
	НастройкиВызова = Новый Структура;
	НастройкиВызова.Вставить("ОпределитьОбменПоСЭДОНапрямуюВключенДляВсех", Ложь);
	НастройкиВызова.Вставить("ОтпечатокСертификатаСтрахователя", 			"");
	НастройкиВызова.Вставить("БезУчетаПользователя", 						Ложь); // Истина из фонового задания
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НастройкиВызова, Настройки);
	КонецЕсли;
	
	ПроверятьСертификатВУчетнойЗаписи 	= Истина;
	
	ОбменПоСЭДОНапрямую 				= Истина;
	ИдентификаторАбонентаСЭДО 			= "";
	СвойстваОрганизацииИУчетнойЗаписи 	= Неопределено;
	ОбменПоСЭДОНапрямуюВключенДляВсех 	= Неопределено;
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер <> Неопределено Тогда
		СвойстваОрганизацииИУчетнойЗаписи = КонтекстЭДОСервер.ЕстьВозможностьАвтонастройкиВУниверсальномФормате(
			Организация, Истина);
		Если ОбменПоСЭДОНапрямуюИзНастроек <> Истина И СвойстваОрганизацииИУчетнойЗаписи <> Неопределено
			И СвойстваОрганизацииИУчетнойЗаписи.ВидОбменаСКонтролирующимиОрганами =
				ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате")
			И СвойстваОрганизацииИУчетнойЗаписи.СпецоператорСвязи = Перечисления.СпецоператорыСвязи.КалугаАстрал
			И Мультирежим.ГосОрганыУчетнойЗаписиИзРегистра(СвойстваОрганизацииИУчетнойЗаписи.УчетнаяЗаписьОбмена).СдаватьВФСС
			И НЕ КонтекстЭДОСервер.ЛицензияПросрочена(СвойстваОрганизацииИУчетнойЗаписи.УчетнаяЗаписьОбмена) Тогда
			
			СертификатВУчетнойЗаписи = Неопределено;
			Если ОбменПоСЭДОНапрямуюИзНастроек = Неопределено ИЛИ ПроверятьСертификатВУчетнойЗаписи Тогда
				ТекущийПользователь = ?(НастройкиВызова.БезУчетаПользователя, Справочники.Пользователи.ПустаяСсылка(),
					Пользователи.ТекущийПользователь());
				ОтпечаткиСертификатов = КонтекстЭДОСервер.ПолучитьОтпечаткиСертификатовИзНастроекОрганизацииДляФСС(Организация,
					ТекущийПользователь);
				Если ОбменПоСЭДОНапрямуюИзНастроек = Неопределено Тогда
					ОбменПоСЭДОНапрямуюИзНастроек = ?(ОтпечаткиСертификатов = Неопределено,
						Ложь, ОтпечаткиСертификатов.ОбменПоСЭДОНапрямую);
				КонецЕсли;
				
				ПроверятьСертификатВУчетнойЗаписи = НЕ НастройкиВызова.БезУчетаПользователя
					ИЛИ НЕ СвойстваОрганизацииИУчетнойЗаписи.ЭтоМультиРежим
						И (ОтпечаткиСертификатов = Неопределено ИЛИ НЕ ОтпечаткиСертификатов.ИспользоватьНесколько);
				
				Если ПроверятьСертификатВУчетнойЗаписи Тогда
					Если НЕ ЗначениеЗаполнено(НастройкиВызова.ОтпечатокСертификатаСтрахователя)
						И ОтпечаткиСертификатов <> Неопределено Тогда
						НастройкиВызова.ОтпечатокСертификатаСтрахователя = ОтпечаткиСертификатов.СертификатСтрахователяОтпечаток;
					КонецЕсли;
					Если ЗначениеЗаполнено(НастройкиВызова.ОтпечатокСертификатаСтрахователя) Тогда
						ОтпечаткиСертификатовУчетнойЗаписи = Мультирежим.ОтпечаткиСертификатовУчетнойЗаписи(
							СвойстваОрганизацииИУчетнойЗаписи.УчетнаяЗаписьОбмена);
						
						СертификатВУчетнойЗаписи = ОтпечаткиСертификатовУчетнойЗаписи.Найти(
							НастройкиВызова.ОтпечатокСертификатаСтрахователя) <> Неопределено;
					Иначе
						СертификатВУчетнойЗаписи = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СертификатВУчетнойЗаписи <> Ложь И НЕ ОбменПоСЭДОНапрямуюИзНастроек Тогда
				ОбменПоСЭДОНапрямуюВключенДляВсех =
					ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Обмен по СЭДО напрямую");
				Если НЕ ОбменПоСЭДОНапрямуюВключенДляВсех Тогда
					ОбменПоСЭДОНапрямую = Ложь;
					ИдентификаторАбонентаСЭДО = ДокументооборотСКО.ИдентификаторАбонентаДляЗапросаРегФайла(
						СвойстваОрганизацииИУчетнойЗаписи.ИдентификаторАбонента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменПоСЭДОНапрямуюВключенДляВсех = Неопределено
		И НастройкиВызова.ОпределитьОбменПоСЭДОНапрямуюВключенДляВсех Тогда
		
		ОбменПоСЭДОНапрямуюВключенДляВсех =
			ОнлайнСервисыРегламентированнойОтчетностиВызовСервера.СобытиеНаступило("Обмен по СЭДО напрямую");
	КонецЕсли;
	
	ДатаВремяПоследнегоОбновления = ТекущаяДатаСеанса();
	
	Результат = Новый Структура;
	Результат.Вставить("ОбменПоСЭДОНапрямую", 				ОбменПоСЭДОНапрямую);
	Результат.Вставить("ИдентификаторАбонентаСЭДО", 		ИдентификаторАбонентаСЭДО);
	Результат.Вставить("СвойстваОрганизацииИУчетнойЗаписи", СвойстваОрганизацииИУчетнойЗаписи);
	Результат.Вставить("ОбменПоСЭДОНапрямуюВключенДляВсех", ОбменПоСЭДОНапрямуюВключенДляВсех);
	Результат.Вставить("ДатаВремяПоследнегоОбновления", 	ДатаВремяПоследнегоОбновления);
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваПоследнейОтправкиОтчетаВФСС(СсылкаНаОтчет) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтправкаСсылка = КонтекстЭДОСервер.ПолучитьПоследнююОтправкуОтчетаВФСС(СсылкаНаОтчет);
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОтправкаСсылка,
		"Ссылка, ОтчетСсылка, ИдентификаторОтправкиНаСервере, СтатусОтправки, Организация, ДатаОтправки, "
			+ "ДатаПолученияРезультата, ДатаЗакрытия, ОбменЧерезОператора, ДоставленоВСФР, ДатаДоставкиВСФР");
	
КонецФункции

Функция СвойстваПоследнихОтправокОтчетаВФСС(СсылкаНаОтчет) Экспорт
	
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КонтекстЭДОСервер.СвойстваПоследнихОтправокОтчетаВФСС(СсылкаНаОтчет);
	
КонецФункции

Функция СвойстваВидаОтправляемыхДокументов(СсылкаИлиИсточникОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗнчОтчета = ТипЗнч(СсылкаИлиИсточникОтчета);
	Если ТипЗнчОтчета = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаИлиИсточникОтчета, "ИсточникОтчета");
		
	ИначеЕсли ТипЗнчОтчета = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаИлиИсточникОтчета, "ВидОтчета");
		
	ИначеЕсли ТипЗнчОтчета = Тип("Строка") Тогда
		ИсточникОтчета = СсылкаИлиИсточникОтчета;
		
	Иначе
		МетаданныеОтчета = ?(ЗначениеЗаполнено(СсылкаИлиИсточникОтчета), Метаданные.НайтиПоТипу(ТипЗнчОтчета), Неопределено);
		ИсточникОтчета = ?(МетаданныеОтчета = Неопределено, "", МетаданныеОтчета.Имя);
	КонецЕсли;
	
	ВидОтчета = ?(ЗначениеЗаполнено(ИсточникОтчета),
		Справочники.ВидыОтправляемыхДокументов.НайтиПоРеквизиту("Источник", ИсточникОтчета), Неопределено);
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОтчета,
			"Ссылка, Код, Наименование, Описание, Источник, ТипПолучателя, ТипДокумента");
		
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаИлиИсточникОтчета) И ТипЗнчОтчета <> Тип("Строка") Тогда
		ВозможноПрисоединениеФайловКОбъекту =
			РегламентированнаяОтчетностьВызовСервера.ВозможноПрисоединениеФайловКОбъекту(СсылкаИлиИсточникОтчета);
		Если Результат = Неопределено Тогда
			Результат = Новый Структура;
		КонецЕсли;
		Результат.Вставить("ВозможноПрисоединениеФайловКОбъекту", ВозможноПрисоединениеФайловКОбъекту);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти