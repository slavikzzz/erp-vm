// @strict-types

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Синхронизация данных".
// Серверные процедуры, обслуживающие правила регистрации объектов.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ШаблоныОбработчиков

// Определяет используемые обработчики правил регистрации.
// 
// Параметры:
//  Настройки - ТаблицаЗначений - настройки обработчиков:
//   * ПриОбработкеПередИзменением - Булево - если Истина, то в модуле менеджера объекта должна быть определена процедура
//      ПриОбработкеПравилаПослеИзмененияОбъекта.
//   * ПриОбработкеПослеИзменения - Булево - если Истина, то в модуле менеджера объекта должна быть определена процедура
//      ПриОбработкеПравилаПередИзменениемОбъекта.
//   * ПослеОбработки - Булево - если Истина, то в модуле менеджера объекта должна быть определена процедура
//      ПослеОбработкиПравилаРегистрации.
//   * Модуль - ОбщийМодуль, Неопределено - общий модуль, в котором расположены процедуры-обработчики.
//      Если Неопределено, то используется модуль менеджера объекта.
//   * ДополнительныеПараметры - Структура - дополнительные параметры. Может содержать следующие свойства:
//     ** РазделыДанных - Массив из Строка,Строка - идентификаторы разделов данных в массиве или в строке, разделенные
//      запятыми.
//     ** ВидОтбора - Строка - может принимать значения:
//       СинхронизацияДанныхЗарплатаКадрыСервер.ВидыОтборовРИБ().ПоОрганизациям,
//       СинхронизацияДанныхЗарплатаКадрыСервер.ВидыОтборовРИБ().ПоПодразделениям.
//     ** СвойстваОбъекта - Строка,ОбъектМетаданных,Массив из Строка,ОбъектМетаданных - реквизиты или их имена
//     ** Реквизит - Строка,ОбъектМетаданных - реквизит или его имя
//     ** Измерение - Строка,ОбъектМетаданных - измерение регистра или его имя
//		
Процедура ШаблонОбработчика(Настройки) Экспорт
	
КонецПроцедуры

// Обработчик правила регистрации "При обработке" перед изменением объекта.
// 
// Условие возникновения события:
//   Событие выполняется перед выполнением запроса к информационной базе для определения узлов-получателей,
//   в момент, когда текст запроса сформирован и получены значения свойств объекта.
//   Параметры запроса инициализированы значениями из версии объекта до изменения.
//   Обработчик не выполняется для новых объектов и не выполняется в процессе выгрузки данных.
//
// Контекст выполнения:
//   Перед записью объекта.
// 
// Параметры:
//  Объект - СправочникОбъект,ДокументОбъект,ПланВидовХарактеристикОбъект,ПланВидовРасчетаОбъект,БизнесПроцессОбъект,
//  	ЗадачаОбъект,РегистрСведенийЗапись,РегистрНакопленияЗапись, РегистрРасчетаЗапись - объект, для которого
//  	выполняется правило регистрации.
//  Отказ - Булево - флаг отказа от выполнения правила регистрации. Отказ от выполнения правила означает, что объект
//    не будет зарегистрирован на узлах плана обмена, для которого создано это правило.
//  Параметры - Структура:
//    * ПРО - Структура - описывает правило регистрации объектов:
//    	** ОбъектМетаданныхИмя - Строка.
//    * ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//    * ПараметрыЗапроса - Структура - содержит значения свойств версии объекта до изменения,
//  	которые используются в качестве параметров в запросе для определения узлов-получателей.
//    * ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//  	  при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//  	  недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить.
//  	  Значение по умолчанию - Истина.
Процедура ШаблонОбработчикаПриОбработкеПередИзменением(Объект, Отказ, Параметры) Экспорт
	
КонецПроцедуры

// Обработчик правила регистрации "При обработке" после изменения объекта.
// 
// Условие возникновения события:
//   Событие выполняется перед выполнением запроса к информационной базе для определения узлов-получателей,
//   в момент, когда текст запроса сформирован и получены значения свойств объекта.
//   Параметры запроса инициализированы значениями из текущей версии объекта.
//
// Контекст выполнения:
//   Перед записью объекта; При выгрузке объекта.
// 
// Параметры:
//  Объект - СправочникОбъект,ДокументОбъект,ПланВидовХарактеристикОбъект,ПланВидовРасчетаОбъект,БизнесПроцессОбъект,
//  	ЗадачаОбъект,РегистрСведенийЗапись,РегистрНакопленияЗапись, РегистрРасчетаЗапись - объект, для которого
//  	выполняется правило регистрации.
//  Отказ - Булево - флаг отказа от выполнения правила регистрации. Отказ от выполнения правила означает, что объект
//    не будет зарегистрирован на узлах плана обмена, для которого создано это правило.
//  Параметры - Структура:
//    * ПРО - Структура - описывает правило регистрации объектов:
//    	** ОбъектМетаданныхИмя - Строка.
//    * ТекстЗапроса - Строка - текст запроса, который будет использован для определения узлов-получателей.
//    * ПараметрыЗапроса - Структура - содержит значения свойств версии объекта до изменения,
//  	которые используются в качестве параметров в запросе для определения узлов-получателей.
//    * ИспользоватьКэш - Булево - параметр определяет включение платформенного механизма повторно используемых значений
//  	  при определении узлов-получателей. Если передаваемые запросу значения в структуре ПараметрыЗапроса содержат
//  	  недопустимые типы данных для платформенного механизма кэширования, то флаг следует сбросить.
//  	  Значение по умолчанию - Истина.
//    * Выгрузка - Булево - параметр определяет контекст выполнения правила регистрации (только чтение).
//  	  Истина - правило регистрации выполняется в контексте выгрузки объекта.
//  	  Ложь - правило регистрации выполняется в контексте перед записью объекта.
Процедура ШаблонОбработчикаПриОбработкеПослеИзменения(Объект, Отказ, Параметры) Экспорт
	
КонецПроцедуры

// Обработчик правила регистрации "После обработки".
// 
// Условие возникновения события:
//   Событие выполняется после выполнения запроса к информационной базе, когда определен список узлов-получателей.
//   Список узлов-получателей сформирован, но не применен к объекту.
//   Можно очистить или дополнить список узлов-получателей.
//
// Контекст выполнения:
//   Перед записью объекта; При выгрузке объекта.
// 
// Параметры:
//  Объект - СправочникОбъект,ДокументОбъект,ПланВидовХарактеристикОбъект,ПланВидовРасчетаОбъект,БизнесПроцессОбъект,
//  	ЗадачаОбъект,РегистрСведенийЗапись,РегистрНакопленияЗапись, РегистрРасчетаЗапись - объект, для которого
//  	выполняется правило регистрации.
//  Отказ - Булево - флаг отказа от выполнения правила регистрации. Отказ от выполнения правила означает, что объект
//    не будет зарегистрирован на узлах плана обмена, для которого создано это правило.
//  Параметры - Структура:
//    * ПРО - Структура - описывает правило регистрации объектов:
//    	** ОбъектМетаданныхИмя - Строка.
//    * ОбъектМетаданных - ОбъектМетаданных - объект метаданных, соответствующий параметру Объект.
//    * Выгрузка - Булево - параметр определяет контекст выполнения правила регистрации (только чтение).
//       Истина - правило регистрации выполняется в контексте выгрузки объекта.
//       Ложь - правило регистрации выполняется в контексте перед записью объекта.
//    * Получатели - Массив - список узлов-получателей, на которых будет зарегистрирован объект.
Процедура ШаблонОбработчикаПослеОбработки(Объект, Отказ, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОтборПоСвойствамПланаОбмена

// Определяет используемые обработчики для отбора по организациям.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  СвойстваОбъекта - Строка,ОбъектМетаданных,Массив из Строка,ОбъектМетаданных - реквизиты или их имена.
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляОтбораПоОрганизации(Настройки, СвойстваОбъекта = "Организация",
	РазделыДанных = "РегламентированныеДанные") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОтбораПоОрганизации(Настройки, СвойстваОбъекта, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для отбора по подразделениям.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  СвойстваОбъекта - Строка,ОбъектМетаданных,Массив из Строка,ОбъектМетаданных - реквизиты или их имена.
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляОтбораПоПодразделению(Настройки, СвойстваОбъекта = "Подразделение",
	РазделыДанных = "УправленческиеДанные") Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОтбораПоПодразделению(Настройки, СвойстваОбъекта, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для отбора по свойствам плана обмена.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  ВидОтбора - Строка - может принимать значения "Организации", "Подразделения"
//  СвойстваОбъекта - Строка,ОбъектМетаданных,Массив из Строка,ОбъектМетаданных - реквизиты или их имена.
Процедура ДляОтбораПоСвойствамПланаОбмена(Настройки, ВидОтбора, СвойстваОбъекта) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОтбораПоСвойствамПланаОбмена(Настройки, ВидОтбора, СвойстваОбъекта);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтборПоРазделамДанных

// Определяет используемые обработчики для отбора по регламентированным данным.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляРегламентированныхДанных(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляРегламентированныхДанных(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для отбора по управленческим данным.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляУправленческихДанных(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляУправленческихДанных(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для отбора по разделам данных.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляОтбораПоРазделамДанных(Настройки, РазделыДанных) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОтбораПоРазделамДанных(Настройки, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Определяет используемые обработчики для справочника присоединенных файлов.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляСправочникаПрисоединенныхФайлов(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляСправочникаПрисоединенныхФайлов(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для объектов, у которых есть присоединенные файлы.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляОбъектаСПрисоединеннымиФайлами(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОбъектаСПрисоединеннымиФайлами(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для подчиненного справочника.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляПодчиненногоСправочника(Настройки, РазделыДанных = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляПодчиненногоСправочника(Настройки, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для регистра подчиненного регистратору.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляРегистраПодчиненногоРегистратору(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляРегистраПодчиненногоРегистратору(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для независимого регистра.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика.
//  Измерение - Строка,ОбъектМетаданных - измерение регистра или его имя.
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляНезависимогоРегистра(Настройки, Измерение, РазделыДанных = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляНезависимогоРегистра(Настройки, Измерение, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для ограничения получателей по реквизиту объекта.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика.
//  Реквизит - Строка,ОбъектМетаданных - реквизит или его имя.
//  РазделыДанных - Строка,Массив из Строка
Процедура ДляОграниченияПоРеквизиту(Настройки, Реквизит, РазделыДанных = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОграниченияПоРеквизиту(Настройки, Реквизит, РазделыДанных);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для регистрации движений документа.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляРегистрацииДвижений(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляРегистрацииДвижений(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используемые обработчики для регистрации объектов.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
Процедура ДляСовместноРегистрируемыхОбъектов(Настройки) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляСовместноРегистрируемыхОбъектов(Настройки);
	КонецЕсли;
		
КонецПроцедуры

// Определяет используемые обработчики для объектов с измерениями ГоловнаяОрганизация и ФизическоеЛицо.
// 
// Параметры:
//  Настройки - ТаблицаЗначений: см. ЗарплатаКадрыРасширенныйСинхронизацияДанных.ШаблонОбработчика
//  РазделыДанных - Строка,Массив из Строка
//  ИменаРеквизитов - Структура - имена реквизитов ГоловнаяОрганизация и ФизическоеЛицо объекта:
//   * ГоловнаяОрганизация - Строка
//   * ФизическоеЛицо - Строка
Процедура ДляОбъектаСГоловнойОрганизациейИФизическимЛицом(Настройки, РазделыДанных = "РегламентированныеДанные",
	ИменаРеквизитов = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.СинхронизацияДанных") Тогда
		МодульНастройкиОбработчиков = ОбщегоНазначения.ОбщийМодуль("СинхронизацияДанныхБЗКНастройкиОбработчиков");
		МодульНастройкиОбработчиков.ДляОбъектаСГоловнойОрганизациейИФизическимЛицом(Настройки, РазделыДанных,
			ИменаРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти