
#Область СлужебныеПроцедурыИФункции

#Область ФормаСписка

// Устанавливает условное оформление формы списка ведомостей.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, которая создается.
//
Процедура УстановитьУсловноеОформлениеФормыСписка(Форма) Экспорт
	
	Если Форма.Элементы.Список.РежимВыбора Тогда
		Возврат
	КонецЕсли;	

	ЭлементОформления = Форма.Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование	= Истина;
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ЕстьОплаты");
	ЭлементОтбора.ПравоеЗначение	= Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
КонецПроцедуры

#КонецОбласти

#Область ФормаДокумента

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере.
// 	Устанавливает первоначальные значения реквизитов объекта.
//	Инициализирует реквизиты формы.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, которая создается.
// 	Отказ - Булево - признак отказа от создания формы.
// 	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
// 	ЗначенияДляЗаполнения - структура с дополнительными заполняемыми реквизитами.
//		Имя элемента структуры идентифицирует значение, которое необходимо заполнить.
//		Значение элемента структуры - путь к реквизиту формы, значение которого необходимо заполнить.
//		Необязательный параметр.
//		По умолчанию заполняются:
//			ПериодРегистрации
//			Организация
//			Ответственный
//			ГлавныйБухгалтер
//			Руководитель
//			ДолжностьРуководителя
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Первоначальное заполнение объекта.
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ЗаполнитьПервоначальныеЗначения();
		Форма.ПриПолученииДанныхНаСервере(Форма.РеквизитФормыВЗначение("Объект"));
	КонецЕсли;
	
	ПодборПоРолям = Новый Соответствие;
	ПодборПоРолям.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатыБывшимСотрудникам, Перечисления.РолиФизическихЛиц.БывшийСотрудник);
	ПодборПоРолям.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ВыплатаПрочихДоходов, Перечисления.РолиФизическихЛиц.ПрочийПолучательДоходов);
	ПодборПоРолям.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.Дивиденды, Перечисления.РолиФизическихЛиц.Акционер);
	ПодборПоРолям.Вставить(Перечисления.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам, Перечисления.РолиФизическихЛиц.Акционер);
	Форма.ОписаниеПодбораПоРолям = Новый ФиксированноеСоответствие(ПодборПоРолям);
	
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, которая создается.
// 	ТекущийОбъект - читаемый объект.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
// 	ТекущийОбъект - ДокументОбъект - записываемый объект.
//	ПараметрыЗаписи - структура - параметры записи.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере.
// 	Инициирует проверку заполнения объекта.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие.
//	Отказ - булево - признак отказа от записи 
//	ПроверяемыеРеквизиты - массив - пути к реквизитам, для которых будет выполнена проверка заполнения.
//	
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Форма.ОбработатьСообщенияПользователю();
		Отказ = Истина
	КонецЕсли;	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "Объект");
КонецПроцедуры

Процедура СоставОбработкаВыбораНаСервере(Форма, Знач ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		ВыбранныеПолучатели = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	Иначе
		ВыбранныеПолучатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыбранноеЗначение)
	КонецЕсли;
	
	ПолучателиДоходов = Новый Массив;
	Для Каждого ПолучательДоходов Из ВыбранныеПолучатели Цикл
		
		СтрокиПолучателяДоходов = Форма.Объект.Состав.НайтиСтроки(Новый Структура("ФизическоеЛицо", ПолучательДоходов));
		
		Если СтрокиПолучателяДоходов.Количество() = 0 Тогда
			ПолучателиДоходов.Добавить(ПолучательДоходов)
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучателиДоходов.Количество() > 0 Тогда
		ДополнитьНаСервере(Форма, ПолучателиДоходов);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

Процедура ЗаполнитьНаСервере(Форма) Экспорт
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьВыплаты() Тогда
		ТекущийОбъект.ЗаполнитьВыплаты();
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
	
КонецПроцедуры

Процедура ДополнитьНаСервере(Форма, ПолучателиДоходов)
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьВыплаты() Тогда
		ТекущийОбъект.ДополнитьВыплаты(ПолучателиДоходов);
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
	
КонецПроцедуры

Процедура ОчиститьНаСервере(Форма) Экспорт
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ОчиститьСостав();
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
	
КонецПроцедуры

// Вызывается при создании формы новой ведомости.
// Выполняет заполнение первоначальных значений реквизитов ведомости в форме.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения.
//
Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("МесяцРасчета",  "Объект.ПериодРегистрации");
	ЗначенияДляЗаполнения.Вставить("Организация",   "Объект.Организация");
	ЗначенияДляЗаполнения.Вставить("Ответственный", "Объект.Ответственный");
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);
	
	Если ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ") Тогда
		Форма.Объект.ПеречислениеНДФЛВыполнено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении формой данных объекта.
// 	Приспосабливаем форму к редактируемым данным.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения.
//	ТекущийОбъект - Объект, который будет прочитан, ДокументОбъект. 
//
Процедура ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(Форма, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой");
	
	Для Каждого СтрокаСостава Из Форма.Объект.Состав Цикл
		ПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава);
	КонецЦикла;
	
	Форма.УстановитьДоступностьЭлементов();
	Форма.УстановитьПредставлениеОплаты();
	УстановитьИтогНДФЛ(Форма);
	
	ВедомостьПрочихДоходовКлиентСервер.УстановитьПредставлениеОснований(Форма); 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВнешниеХозяйственныеОперацииЗарплатаКадры") Тогда
		Форма.Элементы.ОплатыПредставление.Видимость	= Ложь;
		Форма.Элементы.ВнешниеОперацииГруппа.Видимость	= Истина;
		
		ПоказыватьВводДокументаПеречисленияНДФЛ = Ложь;
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.УчетНДФЛВХО") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УчетНДФЛВХО");
			ПоказыватьВводДокументаПеречисленияНДФЛ = Модуль.ПоказыватьВводДокументаПеречисленияНДФЛ();
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
				"ВводДанныхОПеречисленииНДФЛ", "Видимость", ПоказыватьВводДокументаПеречисленияНДФЛ);
		
		Если УчетНДФЛ.РегистрироватьПеречисленныйНалог(Форма.Объект.Дата) Тогда
			// Вариант регистрации перечисления НДФЛ показывается, если
			// в документе уже указано, что налог перечислен или не ведется учет расчетов с бюджетом.
			ПоказыватьВариантПеречислениеНДФЛ = Форма.Объект.ПеречислениеНДФЛВыполнено Или Не ПолучитьФункциональнуюОпцию("ВестиРасчетыСБюджетомПоНДФЛ");
			Если Форма.ПоказыватьВариантПеречислениеНДФЛПрежняя = Неопределено Тогда
				Форма.ПоказыватьВариантПеречислениеНДФЛПрежняя = ПоказыватьВариантПеречислениеНДФЛ;
			Иначе
				ПоказыватьВариантПеречислениеНДФЛ = ПоказыватьВариантПеречислениеНДФЛ Или Форма.ПоказыватьВариантПеречислениеНДФЛПрежняя;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
				"ПеречислениеНДФЛВыполнено", "Видимость", ПоказыватьВариантПеречислениеНДФЛ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
				"ПеречислениеНДФЛПолностьюИнфо", "Видимость", ПоказыватьВариантПеречислениеНДФЛ);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
				"ПеречислениеНДФЛГруппа", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, 
				"ВнешниеОперацииГруппа", "Заголовок", НСтр("ru = 'Выплата';
															|en = 'Payment'"));
		КонецЕсли;
		
		ВедомостьПрочихДоходовКлиентСервер.УстановитьОтображениеВХО(Форма);
		
	Иначе	
		Форма.Элементы.ОплатыПредставление.Видимость	= Истина;
		Форма.Элементы.ВнешниеОперацииГруппа.Видимость	= Ложь;
	КонецЕсли;
	
	Форма.СпособВыплатыПрежнееЗначение = Форма.Объект.СпособВыплаты;
	
	ПроверятьЗаполнениеФинансирования = ПолучитьФункциональнуюОпцию("ПроверятьЗаполнениеФинансированияВВедомостях");	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяФинансирования", 	"АвтоОтметкаНезаполненного", ПроверятьЗаполнениеФинансирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяФинансирования", 	"ОтметкаНезаполненного",     ПроверятьЗаполнениеФинансирования И Не ЗначениеЗаполнено(ТекущийОбъект.СтатьяФинансирования));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяРасходов", 	"АвтоОтметкаНезаполненного",         ПроверятьЗаполнениеФинансирования);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СтатьяРасходов", 	"ОтметкаНезаполненного",             ПроверятьЗаполнениеФинансирования И Не ЗначениеЗаполнено(ТекущийОбъект.СтатьяРасходов));
	
	ОписаниеКлючевыхРеквизитов = Форма.КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов();
	ТаблицыОчищаемыеПриИзменении = Форма.КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении();
	
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(Форма, , ОписаниеКлючевыхРеквизитов, ТаблицыОчищаемыеПриИзменении);
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(Форма, ОписаниеКлючевыхРеквизитов);
		
КонецПроцедуры

Процедура ПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава) Экспорт
	
	ПриПолученииДанныхСтрокиСоставаВыплаты(Форма, СтрокаСостава);
	ПриПолученииДанныхСтрокиСоставаНДФЛ(Форма, СтрокаСостава)
	
КонецПроцедуры

Процедура ПриПолученииДанныхСтрокиСоставаВыплаты(Форма, СтрокаСостава)

	СтрокиВыплатПоФизическомуЛицу = Форма.Объект.Выплаты.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	СтрокаСостава.КВыплате = Форма.Объект.Выплаты.Выгрузить(СтрокиВыплатПоФизическомуЛицу, "КВыплате").Итог("КВыплате");
	
	ПоказыватьСтатьиФинансирования = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплата");
	ПоказыватьСтатьиРасходов       = ПолучитьФункциональнуюОпцию("РаботаВБюджетномУчреждении");
	
	Если Не ПоказыватьСтатьиФинансирования И Не ПоказыватьСтатьиРасходов Тогда
		СтрокаСостава.Финансирование = "";
		Возврат
	КонецЕсли;
	
	ПоляСтатей = Новый Массив;
	Если ПоказыватьСтатьиФинансирования Тогда 
		ПоляСтатей.Добавить("СтатьяФинансирования")
	КонецЕсли;
	Если ПоказыватьСтатьиРасходов Тогда
		ПоляСтатей.Добавить("СтатьяРасходов")
	КонецЕсли;
	ПоляСтатей = СтрСоединить(ПоляСтатей, ", ");
	
	СочетанияСтатей = Форма.Объект.Выплаты.Выгрузить(
		СтрокиВыплатПоФизическомуЛицу, 
		ПоляСтатей);
	СочетанияСтатей.Свернуть(ПоляСтатей);
	
	Если ПоказыватьСтатьиФинансирования Тогда
		ПредставленияСтатейФинансирования = ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейФинансирования();
	КонецЕсли;
	Если ПоказыватьСтатьиРасходов Тогда
		ПредставленияСтатейРасходов = ВедомостьНаВыплатуЗарплатыФормыПовтИсп.ПредставленияСтатейРасходов();
	КонецЕсли;	
	
	РасшифровкаФинансирования = "";
	Для Индекс = 0 По СочетанияСтатей.Количество()-1 Цикл
		
		Если Индекс = 3 Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования + "...";
			Прервать
		ИначеЕсли Индекс > 0 Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования + Символы.ПС;
		КонецЕсли;

		Если ПоказыватьСтатьиФинансирования И ПоказыватьСтатьиРасходов Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования
				+ СтрШаблон(
					"%1(%2)",
					ПредставленияСтатейФинансирования[СочетанияСтатей[Индекс].СтатьяФинансирования],
					ПредставленияСтатейРасходов[СочетанияСтатей[Индекс].СтатьяРасходов]);
		ИначеЕсли ПоказыватьСтатьиФинансирования Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования
				+ ПредставленияСтатейФинансирования[СочетанияСтатей[Индекс].СтатьяФинансирования];
		ИначеЕсли ПоказыватьСтатьиРасходов Тогда
			РасшифровкаФинансирования = РасшифровкаФинансирования
				+ ПредставленияСтатейРасходов[СочетанияСтатей[Индекс].СтатьяРасходов];
		КонецЕсли;	
			
	КонецЦикла;	

	СтрокаСостава.Финансирование = РасшифровкаФинансирования;
	
КонецПроцедуры

Процедура ПриПолученииДанныхСтрокиСоставаНДФЛ(Форма, СтрокаСостава)
	
	ПериодРегистрацииВедомости = Форма.Объект.ПериодРегистрации;
	
	СтрокиНДФЛРаботника = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	СтрокаСостава.НДФЛ = 0;
	СтрокаСостава.НДФЛРасшифровка = "";
	
	РасшифровкаПериодов = "";
	РасшифровкаОснований = "";
	
	ЕстьПрошлыеПериоды = Ложь;
	Для Каждого СтрокаНДФЛРаботника Из СтрокиНДФЛРаботника Цикл
		
		СтрокаСостава.НДФЛ = СтрокаСостава.НДФЛ + УчетНДФЛ.ИтоговаяСуммаНДФЛпоСтроке(СтрокаНДФЛРаботника);
		
		ЕстьПрошлыеПериоды = ЕстьПрошлыеПериоды 
			ИЛИ НачалоМесяца(СтрокаНДФЛРаботника.МесяцНалоговогоПериода) <> НачалоМесяца(ПериодРегистрацииВедомости);
			
	КонецЦикла;
	
	Если ЕстьПрошлыеПериоды Тогда
		РасшифровкаПериодов = НСтр("ru = 'в т.ч. в счет ранее исчисленного';
									|en = 'including in account of the previously calculated'");
	Иначе
	КонецЕсли;	

	Если ЗначениеЗаполнено(РасшифровкаПериодов) Тогда
		СтрокаСостава.НДФЛРасшифровка = РасшифровкаПериодов
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает доступность элементов формы ведомости.
// 	Документ ввода начальных остатков, или по ведомость, по которой есть выплаты
//	доступны только для просмотра.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения.
//
Процедура УстановитьДоступностьЭлементов(Форма) Экспорт
	
	Форма.ТолькоПросмотр = 
		ЗначениеЗаполнено(Форма.Объект.Ссылка) 
		И (ДатыЗапретаИзменения.ИзменениеЗапрещено(Форма.Объект.Ссылка.Метаданные().ПолноеИмя(), Форма.Объект.Ссылка) 
			ИЛИ ВзаиморасчетыССотрудниками.ЕстьОплатаПоВедомости(Форма.Объект.Ссылка)
			ИЛИ Не ОбменСБанкамиПоЗарплатнымПроектам.ДоступностьПлатежногоДокумента(Форма.Объект.Ссылка)
			Или ЗарплатаКадрыПриложенияВызовСервера.ЕстьПодтверждениеВыплатыДоходовПоВедомости(Форма.Объект.Ссылка));
	
КонецПроцедуры

Процедура РедактироватьВыплатуСтрокиЗавершениеНаСервере(Форма, РезультатыРедактирования) Экспорт
	
	ИдентификаторСтроки	= РезультатыРедактирования.ИдентификаторСтроки;
	
	СтрокиСостава = Форма.Объект.Состав.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Если СтрокиСостава.Количество() <> 0 Тогда
		СтрокаСостава  = СтрокиСостава[0]
	Иначе
		Возврат
	КонецЕсли;	

	ВыплатаСтроки	= ПолучитьИзВременногоХранилища(РезультатыРедактирования.АдресВХранилищеВыплатыПоСтроке);
	
	УдаляемыеСтроки = Форма.Объект.Выплаты.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Форма.Объект.Выплаты.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
	
	ПоляСостава	= Новый Массив;
	Для Каждого РеквизитСостава Из Форма.Объект.Ссылка.Метаданные().ТабличныеЧасти.Состав.Реквизиты  Цикл
		Если ВыплатаСтроки.Колонки.Найти(РеквизитСостава.Имя) = Неопределено Тогда
			ВыплатаСтроки.Колонки.Добавить(РеквизитСостава.Имя, РеквизитСостава.Тип);
		КонецЕсли;	
		ПоляСостава.Добавить(РеквизитСостава.Имя);
	КонецЦикла;	
	СписокСвойств = СтрСоединить(ПоляСостава, ", ");
	
	Для Каждого СтрокаВыплаты Из ВыплатаСтроки Цикл
		ЗаполнитьЗначенияСвойств(СтрокаВыплаты, СтрокаСостава, СписокСвойств)
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВыплатаСтроки, Форма.Объект.Выплаты);

	ПриПолученииДанныхСтрокиСостава(Форма, СтрокаСостава);
		
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Функция АдресВХранилищеВыплатыПоСтроке(Форма, ИдентификаторСтроки) Экспорт
	Возврат ПоместитьВоВременноеХранилище(Форма.Объект.Выплаты.Выгрузить(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки)), Форма.УникальныйИдентификатор);
КонецФункции

Процедура ОбновитьНДФЛНаСервере(Форма, ИдентификаторыСтрок) Экспорт
	
	СтрокиСостава = Новый Массив;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		СтрокаСостава = Форма.Объект.Состав.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаСостава <> Неопределено Тогда
			СтрокиСостава.Добавить(СтрокаСостава);
		КонецЕсли	
		
	КонецЦикла;	

	ЗаполнитьНДФЛ(Форма, СтрокиСостава);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛ(Форма, СтрокиСостава)
	
	ФизЛица = Новый Массив;
	
	Для Каждого СтрокаСостава Из СтрокиСостава Цикл
		ФизЛица.Добавить(СтрокаСостава.ФизическоеЛицо);
	КонецЦикла;
	
	ТекущийОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	Если ТекущийОбъект.МожноЗаполнитьВыплаты() Тогда
		ВедомостьПрочихДоходов.ОбновитьНДФЛ(ТекущийОбъект, ФизЛица);
	КонецЕсли;	
	
	Форма.ОбработатьСообщенияПользователю();
	
	Форма.ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриПолученииДанныхНаСервере(Форма, ТекущийОбъект);	
	
КонецПроцедуры

Процедура УстановитьИтогНДФЛ(Форма)
	
	Форма.ИтогНДФЛ = УчетНДФЛ.ИтоговаяСуммаНДФЛпоДокументу(Форма.Объект);
	
КонецПроцедуры

Процедура СоставПослеУдаленияНаСервере(Форма) Экспорт
	
	Для Каждого ИдентификаторСтроки Из Форма.ИдентификаторыСтрок Цикл
		
		УдаляемыеСтроки = Форма.Объект.Выплаты.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.Объект.Выплаты.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		УдаляемыеСтроки = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.Объект.НДФЛ.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьИтогНДФЛ(Форма);
	
КонецПроцедуры

Процедура СоставКВыплатеПриИзмененииНаСервере(Форма) Экспорт
	
	СтрокаСостава = Форма.Объект.Состав.НайтиПоИдентификатору(Форма.Элементы.Состав.ТекущаяСтрока);
	ВыплатыСтрокиСостава = Форма.Объект.Выплаты.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаСостава.ИдентификаторСтроки));
	
	ЗарплатаКадры.РазнестиСуммуПоБазе(СтрокаСостава.КВыплате, ВыплатыСтрокиСостава, "КВыплате");
	
КонецПроцедуры	

#Область КлючевыеРеквизитыЗаполненияФормы

// Возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.Состав");
	Массив.Добавить("Объект.Выплаты");
	Массив.Добавить("Объект.Основания");
	Массив.Добавить("Объект.НДФЛ");
	Возврат Массив
КонецФункции 

// Возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация",	НСтр("ru = 'организации';
																							|en = 'companies'")));
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "СпособВыплаты", НСтр("ru = 'порядка выплаты';
																						|en = 'payment procedure'")));
	Возврат Массив
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
