#Область ПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

// Возвращает структуру параметров настройки счета учета операции.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ДоступностьПоОперации - Булево - Признак доступности настройки по хозяйственной операции документа.
// 	
// 	* ПутьКДанным - Строка - Путь к данным настройки счетов регл. учета (Например, "Объект" или "Объект.ПрочиеРасходы").
// 	* НастройкаСчетовУчета - Строка - Имя реквизита хранения настройки счетов учета операции. Значение по умолчанию "НастройкаСчетовУчета".
//	* СтатьяАктивовПассивов - Строка - Имя реквизита хранения статьи прочих активов пассивов. Значение по умолчанию "СтатьяАктивовПассивов".
//	* АналитикаАктивовПассивов - Строка - Имя реквизита хранения аналитики прочих активов пассивов. Значение по умолчанию "АналитикаАктивовПассивов".
// 	* ВерсияНастройкиСчетовУчета - Строка - Имя реквизита хранения версии настройки счетов учета операции.
//										Используется для корректной работы механизма выборочной регистрации к отражению в регл. учете.
//										Значение по умолчанию пустая строка.
// 	* Представление - Строка - Имя реквизита формы (Типа Строка) для хранения представления гиперссылки настройки.
// 	                       Значение по умолчанию "ПредставлениеОтраженияОперации".
// 	* ТипСтатьи - Строка - Имя реквизита ТипСтатьи (Типа Число), в котором хранится числовой индекс типа выбранной статьи.
// 	                       Заполнение реквизита обеспечивается функциями выбора статей и аналитик механизма учета доходов и расходов.
// 	                       См. ДоходыИРасходыКлиентСервер.ЗаполнитьРеквизитыСтатьи.
// 	                       Если параметр указан, то настройка счетов учета доступна только при выбранной статье прочих активов и пассивов (ТипСтатьи = 3).
// 
//	* Организация - Строка - Полный путь к данным организации документа. Значение по умолчанию "ТипСтатьи".
//
//	* ИсточникиПодбораСубконто - СписокЗначений - Список источников автоматического подбора субконто
//       * Значение - Произвольный - Тип источника автоматического подбора субконто (Например, Тип("СправочникСсылка.ФизическиеЛица"))
//       * Заголовок - Строка - Путь к данным источника, (Например, "Объект.Начисление.ФизическоеЛицо").
//                                   
//	* ЭлементыФормы - Массив - Имена элементов формы, через которые выполняется настройка счетов учета.
//	
//	* УсловияДоступностиСчетаУчетаВСтроках - Структура - Дополнительные условия доступности настройки в строках таблицы. 
//	                                                 Если условий несколько, то доступность определяется по "И".
//	                                                 В элементах структуры:
//	                                                 	* Ключ - Строка - Имя реквизита объекта или реквизита таблицы, определяющее доступность статьи.
//	                                                 	* Значение - Произвольный - Значение реквизита, при котором выбор статьи доступен.
//	* СкрыватьНедоступныйСчетУчетаВСтроках - Булево - Если Истина, то недоступные в строках статьи и аналитики скрываются.
//	                                               Если Ложь, то для ячеек устанавливается оформление ТолькоПросмотр. Значение по умолчанию Ложь.
//	
Функция ПараметрыНастройки() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДоступностьПоОперации", Истина);
	
	// Путь к данным "контекста" настройки
	Параметры.Вставить("ПутьКДанным", "");
	Параметры.Вставить("НастройкаСчетовУчета",     "НастройкаСчетовУчета");
	Параметры.Вставить("СтатьяАктивовПассивов",    "СтатьяРасходов");
	Параметры.Вставить("АналитикаАктивовПассивов", "АналитикаАктивовПассивов");
	Параметры.Вставить("ВерсияНастройкиСчетовУчета", "");
	
	// Вспомогательные реквизиты формы
	Параметры.Вставить("ТипСтатьи",     "");
	Параметры.Вставить("Представление", "ПредставлениеОтраженияОперации");
	
	Параметры.Вставить("Организация", "Объект.Организация");
	
	// Автоподбор субконто
	Параметры.Вставить("ИсточникиПодбораСубконто", Новый СписокЗначений());
	
	// Элементы формы, которые используются для настройки
	Параметры.Вставить("ЭлементыФормы", Новый Массив());
	
	Параметры.Вставить("УсловияДоступностиСчетаУчетаВСтроках", Новый Структура);
	Параметры.Вставить("СкрыватьНедоступныйСчетУчетаВСтроках", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Инициализирует форму объекта в соответствии с свойствами элементов настройки счетов учета.
// Вызывается в обработчике формы ПриСозданииНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройкиСчетов - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриСозданииНаСервере(Форма, ПараметрыНастройкиСчетов) Экспорт
	
	ДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройкиСчетов);
	
	Если Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	УсловноеОформление = Форма.УсловноеОформление;
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		
		Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
			
			КонтекстНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным); // ДанныеФормыКоллекция -
			Если ТипЗнч(КонтекстНастройки) <> Тип("ДанныеФормыКоллекция") Тогда
				Продолжить;
			КонецЕсли;
			
			#Область ДоступностьВСтрокахТаблицыПоУсловию
			Если ЗначениеЗаполнено(ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках) Тогда
				Элемент = УсловноеОформление.Элементы.Добавить();
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);

				ТаблицаКонтекста = КонтекстНастройки.Выгрузить(Новый Массив()); // ТаблицаЗначений -
				КолонкиКонтекста = ТаблицаКонтекста.Колонки;
				
				Группа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				Для каждого ПолеИЗначение Из ПараметрыНастройки.УсловияДоступностиСчетаУчетаВСтроках Цикл
					ОтборЭлемента = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Если КолонкиКонтекста.Найти(ПолеИЗначение.Ключ) <> Неопределено Тогда
						ПутьКДаннымПоля = ПараметрыНастройки.ПутьКДанным;
					Иначе
						ПутьКДаннымПоля = СтрРазделить(ПараметрыНастройки.ПутьКДанным, ".", Ложь)[0];
					КонецЕсли;
					ПолеКомпоновки = СтрШаблон("%1.%2", ПутьКДаннымПоля, ПолеИЗначение.Ключ);
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеКомпоновки);
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемента.ПравоеЗначение = ПолеИЗначение.Значение;
				КонецЦикла;
				
				Если ПараметрыНастройки.СкрыватьНедоступныйСчетУчетаВСтроках Тогда
					Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
				Иначе
					Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				КонецЕсли;
			КонецЕсли;
			#КонецОбласти

			#Область ЦветГиперссылки
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ГиперссылкаЦвет);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			РеквизитЭлемента = ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.Представление;
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитЭлемента);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.ГиперссылкаЦвет);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настроить';
																		|en = 'Configure'"));
			#КонецОбласти
			
			// Условное оформление по типу статьи
			Если ПараметрыНастройки.ТипСтатьи = "" Тогда
				Продолжить;
			КонецЕсли;
			
			#Область ЦветГиперссылки
			РеквизитТипСтатьи = ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.ТипСтатьи;
			
			// Тип статьи не определен
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 0;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется статьей>';
																		|en = '<defined by item>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			
			// Статьи расходов
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 1;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется статьей расходов>';
																		|en = '<defined by expense item>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			
			// Статьи доходов
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(РеквизитТипСтатьи);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = 2;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<определяется статьей доходов>';
																		|en = '<defined by income item>'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			#КонецОбласти
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета") = Неопределено Тогда
		Если ЭтоФормаОбработки(Форма)
		 ИЛИ ЭтоПроизвольнаяФорма(Форма, ДанныеНастройкиСчетовУчета) Тогда
			СохранитьДанныеНастроекСчетовВДанныхМеханизма(Форма, ДанныеНастройкиСчетовУчета);
		ИначеЕсли (Форма.Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования))
		 ИЛИ (Форма.Параметры.Свойство("ЗначенияЗаполнения") И ЗначениеЗаполнено(Форма.Параметры.ЗначенияЗаполнения))
		 ИЛИ (Форма.Параметры.Свойство("Основание") И ЗначениеЗаполнено(Форма.Параметры.Основание)) Тогда
			// Открытие формы нового объекта
			Если Форма.Параметры.Свойство("Основание") И ЗначениеЗаполнено(Форма.Параметры.Основание) 
				И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура")
				И Форма.Параметры.Основание.Свойство("НастройкаСчетовУчетаЗаполнена") И Форма.Параметры.Основание.НастройкаСчетовУчетаЗаполнена Тогда 
				СохранитьДанныеНастроекСчетовВДанныхМеханизма(Форма, ДанныеНастройкиСчетовУчета);
			Иначе
				СохранитьДанныеНастроекСчетовВДанныхМеханизма(Форма, ДанныеНастройкиСчетовУчета, Истина);
			КонецЕсли;
		КонецЕсли;
		
		ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ДанныеНастройкиСчетовУчета);
		
		Если ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
			НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
			НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает свойства элементов настройки при чтении данных объекта настройки.
// Вызывается в обработчике формы ПриЧтенииНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройкиСчетов - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриЧтенииНаСервере(Форма, ПараметрыНастройкиСчетов) Экспорт
	
	ДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройкиСчетов);
	
	СохранитьДанныеНастроекСчетовВДанныхМеханизма(Форма, ДанныеНастройкиСчетовУчета);
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ДанныеНастройкиСчетовУчета);
	
	Если Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЦикла;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета);
	
КонецПроцедуры

// Заполняет значение субконто по свойству ИсточникиПодбораСубконто (если источники указаны).
// Вызывается в обработчике формы ПередЗаписьюНаСервере().
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта
// 	ТекущийОбъект - ДокументОбъект - Записываемый объект
//
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьНеактуальныеНастройкиОтраженияВОбъекте(Форма, ТекущийОбъект, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	ЗаполнитьСубконтоИзИсточников(ТекущийОбъект, ДанныеНастройкиСчетовУчета);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкиСчетовУчета", ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета);
	
КонецПроцедуры

// Устанавливает свойства элементов настройки после записи данных объекта настройки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
//
Процедура ПослеЗаписиНаСервере(Форма) Экспорт
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено ИЛИ Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	
КонецПроцедуры

// Выполняет настройку формы под новые параметры.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПараметрыНастройкиСчетов - Структура, Массив - Параметры настройки (См. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//
Процедура ПриИзмененииПараметровНастройки(Форма, ПараметрыНастройкиСчетов) Экспорт
	
	НовыеДанныеНастройкиСчетовУчета = ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройкиСчетов);
	
	ТекущиеДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ТекущиеДанныеНастройкиСчетовУчета <> Неопределено Тогда
		НовыеДанныеНастройкиСчетовУчета.НастройкиСчетовУчета = ОбщегоНазначения.СкопироватьРекурсивно(ТекущиеДанныеНастройкиСчетовУчета.НастройкиСчетовУчета);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", НовыеДанныеНастройкиСчетовУчета);
	
	НастройкаСчетовУчетаКлиентСервер.ОчиститьНеактуальныеНастройкиОтраженияВДанныхФормы(Форма, НовыеДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, НовыеДанныеНастройкиСчетовУчета.МассивПараметровНастройки);
	НастройкаСчетовУчетаКлиентСервер.УстановитьВидимостьЭлементовФормы(Форма, НовыеДанныеНастройкиСчетовУчета);
	
КонецПроцедуры

// Вызывается после программного установки счетов учета для обновления отображения на форме.
//
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ПутьКДанным - Строка - Путь к данным настройки счетов
// 	ИдентификаторыСтрок - Число, Массив - Идентификаторы измененных строк. 
// 	                               Если счет учета в таблице, а идентификаторы измененных строк не переданы, то будут обновлены данные во всей таблице.
//
Процедура ОбновитьПредставлениеНастройки(Форма, ПутьКДанным = Неопределено, ИдентификаторыСтрок = Неопределено) Экспорт
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСчетовУчета = Новый Массив();
	СоответствиеНастроек = Новый Соответствие();

	Если ИдентификаторыСтрок <> Неопределено И ТипЗнч(ИдентификаторыСтрок) <> Тип("Массив") Тогда
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если ПутьКДанным <> Неопределено И ПараметрыНастройки.ПутьКДанным <> ПутьКДанным Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПутьКДанным);
		Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
			Если ИдентификаторыСтрок <> Неопределено Тогда
				// Обновим только по переданным строкам
				Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
					СтрокаТаблицы = КонтекстНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
					Если ЗначениеЗаполнено(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
						Если НастройкиСчетовУчета.Найти(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) = Неопределено Тогда
							НастройкиСчетовУчета.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
						Иначе
							НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
							СоответствиеНастроек.Вставить(НоваяНастройка, СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
							СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Обновим все строки таблицы
				Для Каждого СтрокаТаблицы Из КонтекстНастройки Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
						Если НастройкиСчетовУчета.Найти(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) = Неопределено Тогда
							НастройкиСчетовУчета.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
						Иначе
							НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
							СоответствиеНастроек.Вставить(НоваяНастройка, СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
							СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
			НастройкиСчетовУчета.Добавить(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиСчетовУчета.Количество() > 0 Тогда
		ДанныеНастроекСчетов = ДанныеНастроекСчетовУчета(НастройкиСчетовУчета);
		Для Каждого КлючИЗначение Из ДанныеНастроекСчетов Цикл
			ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СоответствиеНастроек Цикл
			ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(КлючИЗначение.Ключ, ДанныеНастроекСчетов[КлючИЗначение.Значение]);
		КонецЦикла;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьПредставлениеНастройки(Форма, ДанныеНастройкиСчетовУчета.МассивПараметровНастройки, ПутьКДанным, ИдентификаторыСтрок);
	
КонецПроцедуры

// Предназначена для сохранения измененных в форме данных настроек счетов учета прочих операций документа или справочника,
// пометки на удаление неиспользуемых настроек, синхронизации пометки удаления настроек и их владельца.
// Вызывается из события ПередЗаписью объекта документа или справочника. Данные настроек счетов учета
// передаются через механизм дополнительных свойств объекта в свойстве "НастройкиСчетовУчета".
// 
// Параметры:
//  Объект - ДокументОбъект,
//           СправочникОбъект - записываемый объект
//  ПараметрыНастройкиСчетов - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
// 
Процедура ПередЗаписью(Объект, ПараметрыНастройкиСчетов) Экспорт
	
	Если НЕ ДоступнаНастройкаСчетовРеглУчета() И НЕ ДоступнаНастройкаСчетовМеждународногоУчета() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданные = Объект.Метаданные();
	ОбъектМенеджер   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданные.ПолноеИмя());
	ПометкаУдаления  = Объект.ПометкаУдаления;
	
	Если Объект.ЭтоНовый() Тогда
		ОбъектСсылка = Объект.ПолучитьСсылкуНового();
	Иначе
		ОбъектСсылка = Объект.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНастройкиСчетов) = Тип("Массив") Тогда
		МассивПараметровНастройки = ПараметрыНастройкиСчетов;
	Иначе
		МассивПараметровНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыНастройкиСчетов);
	КонецЕсли;
	
	НастройкиДокумента  = Новый Массив();
	ПутиКДаннымНастроек = Новый Соответствие();
	ПутиКВерсииНастроек = Новый Соответствие();
	
	ДублиНастроек = Новый ТаблицаЗначений();
	ДублиНастроек.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций"));
	ДублиНастроек.Колонки.Добавить("ПутьКДанным");
	ДублиНастроек.Колонки.Добавить("ПутьКВерсии");
	
	Для Каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		УчетВерсийНастроекСчетовУчета = ЗначениеЗаполнено(ПараметрыНастройки.ВерсияНастройкиСчетовУчета);
		
		ЧастиПутиКДанным = СтрРазделить(ПараметрыНастройки.ПутьКДанным, ".", Ложь);
		Если ЧастиПутиКДанным[0] = "Объект" Тогда
			ЧастиПутиКДанным.Удалить(0);
		КонецЕсли;
		
		Если ЧастиПутиКДанным.Количество() = 0 Тогда
			ПутьКДанным = ПараметрыНастройки.НастройкаСчетовУчета;
		ИначеЕсли ЧастиПутиКДанным.Количество() = 1 Тогда
			ПутьКДанным = ЧастиПутиКДанным[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ОбъектМетаданные.ТабличныеЧасти.Найти(ПутьКДанным) <> Неопределено Тогда
			ТабличнаяЧасть = Объект[ПутьКДанным]; // ТабличнаяЧасть -
			Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
					ЧастиПутиКДанным = Новый Массив();
					ЧастиПутиКДанным.Добавить(ПутьКДанным);
					ЧастиПутиКДанным.Добавить(ТабличнаяЧасть.Индекс(СтрокаТаблицы));
					Если УчетВерсийНастроекСчетовУчета Тогда
						ЧастиПутиКВерсии = ОбщегоНазначения.СкопироватьРекурсивно(ЧастиПутиКДанным);
						ЧастиПутиКВерсии.Добавить(ПараметрыНастройки.ВерсияНастройкиСчетовУчета);
					КонецЕсли;
					ЧастиПутиКДанным.Добавить(ПараметрыНастройки.НастройкаСчетовУчета);
					Если НастройкиДокумента.Найти(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) = Неопределено Тогда
						НастройкиДокумента.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
						ПутиКДаннымНастроек.Вставить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета], ЧастиПутиКДанным);
						Если УчетВерсийНастроекСчетовУчета Тогда
							ПутиКВерсииНастроек.Вставить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета], ЧастиПутиКВерсии);
						КонецЕсли;
					Иначе
						НовыйДубль = ДублиНастроек.Добавить();
						НовыйДубль.Ссылка = СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета];
						НовыйДубль.ПутьКДанным = ЧастиПутиКДанным;
						Если УчетВерсийНастроекСчетовУчета Тогда
							НовыйДубль.ПутьКВерсии = ЧастиПутиКВерсии;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект[ПутьКДанным]) Тогда
		ИначеЕсли НастройкиДокумента.Найти(Объект[ПутьКДанным]) = Неопределено Тогда
			НастройкиДокумента.Добавить(Объект[ПутьКДанным]);
			ПутиКДаннымНастроек.Вставить(Объект[ПутьКДанным], ПутьКДанным);
			Если УчетВерсийНастроекСчетовУчета Тогда
				ПутиКВерсииНастроек.Вставить(Объект[ПутьКДанным], ПараметрыНастройки.ВерсияНастройкиСчетовУчета);
			КонецЕсли;
		Иначе
			НовыйДубль = ДублиНастроек.Добавить();
			НовыйДубль.Ссылка = Объект[ПутьКДанным];
			НовыйДубль.ПутьКДанным = ПутьКДанным;
			Если УчетВерсийНастроекСчетовУчета Тогда
				НовыйДубль.ПутьКВерсии = ПараметрыНастройки.ВерсияНастройкиСчетовУчета;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭтаСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("СписокНастроек", НастройкиДокумента);
	Запрос.УстановитьПараметр("СписокДублей", ДублиНастроек.ВыгрузитьКолонку("Ссылка"));
	
	ТекстыЗапросов = Новый Массив();
	
	ДанныеНастроекСчетовУчета = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.ДополнительныеСвойства.Свойство("НастройкиСчетовУчета", ДанныеНастроекСчетовУчета)
		И ТипЗнч(ДанныеНастроекСчетовУчета) = Тип("Соответствие") Тогда
		
		ТекстыЗапросов.Добавить("ВЫБРАТЬ
		|	НастройкиСчетовУчета.Ссылка            КАК Ссылка,
		|	НастройкиСчетовУчета.ПометкаУдаления   КАК ПометкаУдаления,
		|	НастройкиСчетовУчета.ВладелецНастройки КАК ВладелецНастройки
		//++ Локализация
		|	,
		|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
		|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
		|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
		|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
		//-- Локализация

		//++ НЕ УТКА
		|	,
		|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
		//-- НЕ УТКА
		|ИЗ
		|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
		|ГДЕ
		|	НастройкиСчетовУчета.Ссылка В (&СписокНастроек)");
		
		Если НЕ Объект.ЭтоНовый() Тогда
			ТекстыЗапросов.Добавить("ВЫБРАТЬ
			|	НастройкиСчетовУчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
			|ГДЕ
			|	НастройкиСчетовУчета.ВладелецНастройки = &ЭтаСсылка
			|	И НЕ НастройкиСчетовУчета.Ссылка В (&СписокНастроек)
			|	И НЕ НастройкиСчетовУчета.ПометкаУдаления");
		КонецЕсли;
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результат = Запрос.ВыполнитьПакет();

		Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
			ОбъектСсылка = ОбъектМенеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(ОбъектСсылка);
		КонецЕсли;
		
		ВыборкаНастройки = Результат[0].Выбрать(); 
		
		Для Каждого НастройкаДокумента Из НастройкиДокумента Цикл
			ДанныеНастройки = ДанныеНастроекСчетовУчета[НастройкаДокумента];
			СтруктураПоиска = Новый Структура("Ссылка", НастройкаДокумента);
			
			ВыборкаНастройки.Сбросить();
			НастройкаНайденаВыборке = ВыборкаНастройки.НайтиСледующий(СтруктураПоиска);
			НастройкаДокументаИзменена = Ложь;
			
			Если НастройкаНайденаВыборке Тогда
				Если НЕ ЗначениеЗаполнено(ВыборкаНастройки.ВладелецНастройки) Тогда
					Если ДанныеНастройки <> Неопределено Тогда
						ИзменитьЭлементНастройкиСчетовУчета(НастройкаДокумента, ДанныеНастройки, ПометкаУдаления, ОбъектСсылка);
						НастройкаДокументаИзменена = Истина;
					Иначе
						ИзменитьЭлементНастройкиСчетовУчета(НастройкаДокумента, ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
					КонецЕсли;
				ИначеЕсли ВыборкаНастройки.ВладелецНастройки <> ОбъектСсылка Тогда
					Если ДанныеНастройки <> Неопределено Тогда
						НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, ОбъектСсылка);
						НастройкаДокументаИзменена = Истина;
					Иначе
						НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
					КонецЕсли;
					УстановитьЗначениеРеквизитаОбъекта(Объект, ПутиКДаннымНастроек[НастройкаДокумента], НоваяНастройка);
				ИначеЕсли ДанныеНастройки <> Неопределено
					И НастройкаСчетовУчетаИзменена(ДанныеНастройки, ПометкаУдаления, ВыборкаНастройки) Тогда
					ИзменитьЭлементНастройкиСчетовУчета(НастройкаДокумента, ДанныеНастройки, ПометкаУдаления);
					НастройкаДокументаИзменена = Истина;
				КонецЕсли;
			ИначеЕсли ДанныеНастройки <> Неопределено Тогда
				НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, ОбъектСсылка, НастройкаДокумента);
				НастройкаДокументаИзменена = Истина;
			Иначе
				УстановитьЗначениеРеквизитаОбъекта(Объект, ПутиКДаннымНастроек[НастройкаДокумента], Неопределено);
				НастройкаДокументаИзменена = Истина;
			КонецЕсли;
			
			Если НастройкаДокументаИзменена Тогда
				ПутьКВерсииНастройки = ПутиКВерсииНастроек[НастройкаДокумента];
				Если ПутьКВерсииНастройки <> Неопределено Тогда
					ОбновитьВерсиюНастройкиСчетовУчета(Объект, ПутьКВерсииНастройки);
				КонецЕсли;
			КонецЕсли;
			
			МассивДублей = ДублиНастроек.НайтиСтроки(СтруктураПоиска);
			Для Каждого ДубльНастройки Из МассивДублей Цикл
				НастройкаДокументаИзменена = Ложь;
				Если ДанныеНастройки <> Неопределено Тогда
					НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, ОбъектСсылка);
					НастройкаДокументаИзменена = Истина;
				ИначеЕсли НастройкаНайденаВыборке Тогда
					НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
				Иначе
					НоваяНастройка = Неопределено;
					НастройкаДокументаИзменена = Истина;
				КонецЕсли;
				УстановитьЗначениеРеквизитаОбъекта(Объект, ДубльНастройки.ПутьКДанным, НоваяНастройка);
				Если НастройкаДокументаИзменена И ЗначениеЗаполнено(ДубльНастройки.ПутьКВерсии) Тогда
					ОбновитьВерсиюНастройкиСчетовУчета(Объект, ДубльНастройки.ПутьКВерсии);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ПометкаУдаления = Истина;
		
	Иначе
		
		ТекстыЗапросов.Добавить("ВЫБРАТЬ
		|	НастройкиСчетовУчета.Ссылка            КАК Ссылка,
		|	НастройкиСчетовУчета.ВладелецНастройки КАК ВладелецНастройки
		//++ Локализация
		|	,
		|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
		|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
		|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
		|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
		//-- Локализация

		//++ НЕ УТКА
		|	,
		|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
		//-- НЕ УТКА
		|ИЗ
		|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
		|ГДЕ
		|	(НастройкиСчетовУчета.Ссылка В (&СписокНастроек)
		|	И НастройкиСчетовУчета.ВладелецНастройки <> &ЭтаСсылка)
		|	ИЛИ НастройкиСчетовУчета.Ссылка В (&СписокДублей)");
		
		Если НЕ Объект.ЭтоНовый() Тогда
			ТекстЗапроса = "ВЫБРАТЬ
			|	НастройкиСчетовУчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
			|ГДЕ
			|	НастройкиСчетовУчета.ВладелецНастройки = &ЭтаСсылка
			|	И НастройкиСчетовУчета.ПометкаУдаления <> &ПометкаУдаления";
			
			Если НЕ ПометкаУдаления Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|	И НастройкиСчетовУчета.Ссылка В (&СписокНастроек)";
			КонецЕсли;
			
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;

		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Результат = Запрос.ВыполнитьПакет();
		
		Если НЕ Результат[0].Пустой() Тогда
			Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
				ОбъектСсылка = ОбъектМенеджер.ПолучитьСсылку();
				Объект.УстановитьСсылкуНового(ОбъектСсылка);
			КонецЕсли;
			
			ВыборкаНастройки = Результат[0].Выбрать();
			Пока ВыборкаНастройки.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаНастройки.ВладелецНастройки) Тогда
					ИзменитьЭлементНастройкиСчетовУчета(ВыборкаНастройки.Ссылка, ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
				ИначеЕсли ВыборкаНастройки.ВладелецНастройки <> ОбъектСсылка Тогда
					НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
					УстановитьЗначениеРеквизитаОбъекта(Объект, ПутиКДаннымНастроек[ВыборкаНастройки.Ссылка], НоваяНастройка);
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Ссылка", ВыборкаНастройки.Ссылка);
				МассивДублей = ДублиНастроек.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого ДубльНастройки Из МассивДублей Цикл
					НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ВыборкаНастройки, ПометкаУдаления, ОбъектСсылка);
					УстановитьЗначениеРеквизитаОбъекта(Объект, ДубльНастройки.ПутьКДанным, НоваяНастройка);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Количество() > 1 Тогда
		ВыборкаНастройки = Результат[1].Выбрать();
		Пока ВыборкаНастройки.Следующий() Цикл
			НастройкаСчетовОбъект = ВыборкаНастройки.Ссылка.ПолучитьОбъект();
			НастройкаСчетовОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для копирования состава настроек счетов учета прочих операций из одной настройки счетов учета объекта в другую.
// Если ссылка на настройку счетов учета - приемник не заполнена, будет создан новый элемент справочника настроек счетов.
// Иначе настройка счетов учета - приемник будет перезаписана, если ее данные отличаются от настройки счетов учета - источника.
// Ограничения текущей реализации: настройки счетов источник и приемник должны иметь одинаковый путь к данным.
// 
// Параметры:
//  Объект - ДокументОбъект,
//           СправочникОбъект - записываемый объект
//  ПараметрыНастройкиСчетов - Массив, Структура - Параметры настройки (См. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
// 	                                         Если для объекта выполняется настройка нескольких счетов, то передается массив.
// 	                                         Каждый элемент массива - структура параметров.
//  НастройкаСчетовИсточник - Строка - имя реквизита с копируемой настройкой счетов учета
//  НастройкаСчетовПриемник - Строка - имя реквизита настройки счетов учета, в которую копируется состав настроек источника
//
Процедура СкопироватьНастройкуСчетовОбъекта(Объект, ПараметрыНастройкиСчетов, НастройкаСчетовИсточник, НастройкаСчетовПриемник) Экспорт
	
	Если НЕ ДоступнаНастройкаСчетовРеглУчета() И НЕ ДоступнаНастройкаСчетовМеждународногоУчета() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданные = Объект.Метаданные();
	ОбъектМенеджер   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданные.ПолноеИмя());
	ПометкаУдаления  = Объект.ПометкаУдаления;
	
	Если Объект.ЭтоНовый() Тогда
		ОбъектСсылка = Объект.ПолучитьСсылкуНового();
	Иначе
		ОбъектСсылка = Объект.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыНастройкиСчетов) = Тип("Массив") Тогда
		МассивПараметровНастройки = ПараметрыНастройкиСчетов;
	Иначе
		МассивПараметровНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыНастройкиСчетов);
	КонецЕсли;
	
	НастройкиИсточник   = Новый Массив();
	НастройкиПриемник   = Новый Массив();
	ПутиКДаннымИсточник = Новый Соответствие();
	
	Для Каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		Если ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовИсточник
		 ИЛИ ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовПриемник Тогда
			ЧастиПутиКДанным = СтрРазделить(ПараметрыНастройки.ПутьКДанным, ".", Ложь);
			Если ЧастиПутиКДанным[0] = "Объект" Тогда
				ЧастиПутиКДанным.Удалить(0);
			КонецЕсли;
			
			Если ЧастиПутиКДанным.Количество() = 0 Тогда
				ПутьКДанным = ПараметрыНастройки.НастройкаСчетовУчета;
			ИначеЕсли ЧастиПутиКДанным.Количество() = 1 Тогда
				ПутьКДанным = ЧастиПутиКДанным[0];
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ОбъектМетаданные.ТабличныеЧасти.Найти(ПутьКДанным) <> Неопределено Тогда
				ТабличнаяЧасть = Объект[ПутьКДанным]; // ТабличнаяЧасть -
				Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
					ИначеЕсли ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовИсточник Тогда
						НастройкиИсточник.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
						ЧастиПутиКДанным = Новый Массив();
						ЧастиПутиКДанным.Добавить(ПутьКДанным);
						ЧастиПутиКДанным.Добавить(ТабличнаяЧасть.Индекс(СтрокаТаблицы));
						ЧастиПутиКДанным.Добавить(ПараметрыНастройки.НастройкаСчетовУчета);
						ПутиКДаннымИсточник.Вставить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета], ЧастиПутиКДанным);
					ИначеЕсли ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовПриемник Тогда
						НастройкиПриемник.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли НЕ ЗначениеЗаполнено(Объект[ПутьКДанным]) Тогда
			ИначеЕсли ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовИсточник Тогда
				НастройкиИсточник.Добавить(Объект[ПутьКДанным]);
				ПутиКДаннымИсточник.Вставить(Объект[ПутьКДанным], ПутьКДанным);
			ИначеЕсли ПараметрыНастройки.НастройкаСчетовУчета = НастройкаСчетовПриемник Тогда
				НастройкиПриемник.Добавить(Объект[ПутьКДанным]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиИсточник.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ОбъектСсылка = ОбъектМенеджер.ПолучитьСсылку();
		Объект.УстановитьСсылкуНового(ОбъектСсылка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиСчетовУчета.Ссылка    КАК Ссылка
	//++ Локализация
	|	,
	|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
	|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
	|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
	|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
	//-- Локализация

	//++ НЕ УТКА
	|	,
	|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	//-- НЕ УТКА
	|ИЗ
	|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|ГДЕ
	|	НастройкиСчетовУчета.Ссылка В (&НастройкиИсточник)
	|
	|;
	|
	|ВЫБРАТЬ
	|	НастройкиСчетовУчета.Ссылка          КАК Ссылка,
	|	НастройкиСчетовУчета.ПометкаУдаления КАК ПометкаУдаления
	//++ Локализация
	|	,
	|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
	|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
	|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
	|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
	//-- Локализация

	//++ НЕ УТКА
	|	,
	|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	//-- НЕ УТКА
	|ИЗ
	|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|ГДЕ
	|	НастройкиСчетовУчета.Ссылка В (&НастройкиПриемник)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НастройкиИсточник", НастройкиИсточник);
	Запрос.УстановитьПараметр("НастройкиПриемник", НастройкиПриемник);
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаИсточник = Результаты[0].Выбрать();
	ВыборкаПриемник = Результаты[1].Выбрать();
	
	Пока ВыборкаИсточник.Следующий() Цикл
		ПутьКДанным = ПутиКДаннымИсточник[ВыборкаИсточник.Ссылка];
		Если ТипЗнч(ПутьКДанным) = Тип("Массив") Тогда
			НастройкаПриемник = Объект[ПутьКДанным[0]][ПутьКДанным[1]][НастройкаСчетовПриемник];
		Иначе
			НастройкаПриемник = Объект[НастройкаСчетовПриемник];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкаПриемник) Тогда
			НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ВыборкаИсточник, ПометкаУдаления, ОбъектСсылка);
			Если ТипЗнч(ПутьКДанным) = Тип("Массив") Тогда
				Объект[ПутьКДанным[0]][ПутьКДанным[1]][НастройкаСчетовПриемник] = НоваяНастройка;
			Иначе
				Объект[НастройкаСчетовПриемник] = НоваяНастройка;
			КонецЕсли;
		Иначе
			ВыборкаПриемник.Сбросить();
			Если НЕ ВыборкаПриемник.НайтиСледующий(НастройкаПриемник, "Ссылка") Тогда
				НовыйЭлементНастройкиСчетовУчета(ВыборкаИсточник, ПометкаУдаления, ОбъектСсылка, НастройкаПриемник);
			ИначеЕсли НастройкаСчетовУчетаИзменена(ВыборкаИсточник, ПометкаУдаления, ВыборкаПриемник) Тогда
				ИзменитьЭлементНастройкиСчетовУчета(НастройкаПриемник, ВыборкаИсточник, ПометкаУдаления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для сохранения созданных и измененных в форме настроек счетов учета прочих операций.
// В основном используется в дополнительнывх формах и обработках по изменению табличных частей.
// Вызывается при начале выполнения обработки или перед выполнением кода закрытия формы.
// Вновь созданные настройки счетов учета записываются без владельца, владелец записывается при записи объекта,
// в котором используются созданные настройки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма с настройками счетов учета
// 
Процедура ЗаписатьНастройкиСчетовУчетаФормы(Форма) Экспорт
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиФормы = Новый Массив();
	
	Для Каждого КлючИЗначение Из ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
			НастройкиФормы.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	НастройкиСчетовУчета.Ссылка          КАК Ссылка,
	|	НастройкиСчетовУчета.ПометкаУдаления КАК ПометкаУдаления
	//++ Локализация
	|	,
	|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
	|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
	|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
	|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
	//-- Локализация

	//++ НЕ УТКА
	|	,
	|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	//-- НЕ УТКА
	|ИЗ
	|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|ГДЕ
	|	НастройкиСчетовУчета.Ссылка В (&СписокНастроек)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНастроек", НастройкиФормы);
	Результат = Запрос.Выполнить();
	
	ВыборкаНастройки = Результат.Выбрать();
	ПометкаУдаления = Истина;
	Владелец = Неопределено;
	
	Для Каждого НастройкаФормы Из НастройкиФормы Цикл
		ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[НастройкаФормы];
		СтруктураПоиска = Новый Структура("Ссылка", НастройкаФормы);
		
		ВыборкаНастройки.Сбросить();
		Если ВыборкаНастройки.НайтиСледующий(СтруктураПоиска) Тогда
			Если ДанныеНастройки <> Неопределено
				И НастройкаСчетовУчетаИзменена(ДанныеНастройки, ВыборкаНастройки.ПометкаУдаления, ВыборкаНастройки) Тогда
				ИзменитьЭлементНастройкиСчетовУчета(НастройкаФормы, ДанныеНастройки, ВыборкаНастройки.ПометкаУдаления);
			КонецЕсли;
		ИначеЕсли ДанныеНастройки <> Неопределено Тогда
			НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, Владелец, НастройкаФормы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет настройку счетов учета по умолчанию по данным статьи активов и пассивов.
// Вызывается из механизма ОбработкаТабличнойЧасти.
// 
// Параметры:
//  ТекущаяСтрока - Структура - Данные строки.
//  ПараметрыДействия - Структура - Параметры действия. (См. НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьНастройкуСчетовУчетаПоУмолчанию):
//   *ДействиеВФорме - Булево - признак выполнения действия в форме объекта
//   *ДанныеНастройкиСчетовУчета - Структура из см. НастройкаСчетовУчетаКлиентСервер.НовыеДанныеНастройкиСчетовУчета
//
Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, ПараметрыДействия) Экспорт
	
	ДанныеНастройкиСчетовУчета = ПараметрыДействия.ДанныеНастройкиСчетовУчета;
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если НастройкаСчетовУчетаКлиентСервер.ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(ТекущаяСтрока, ТекущаяСтрока, ПараметрыНастройки) Тогда
			Если ПараметрыДействия.ДействиеВФорме Тогда
				НастройкаПоУмолчанию = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(
					ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов], ДанныеНастройкиСчетовУчета);
				НастройкаСчетовУчетаКлиентСервер.ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(ТекущаяСтрока, ПараметрыНастройки, НастройкаПоУмолчанию, ДанныеНастройкиСчетовУчета);
			Иначе
				НастройкаПоУмолчанию = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов]);
				Если НастройкаПоУмолчанию[ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов]] <> Неопределено Тогда
					ДанныеНастройки = НастройкаПоУмолчанию[ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов]].ДанныеНастройки;
					ТекущаяСтрока[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройкаСчетовУчета(ДанныеНастройки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет настройку счетов учета по умолчанию по данным статьи активов и пассивов. Вызывается из механизма пакетной 
// обработки табличных частей.
// 
// Параметры:
//  ТекущаяСтрока - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.ТекущаяСтрока
//  ПараметрыДействия - Структура - Параметры действия. (См. НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьНастройкуСчетовУчетаПоУмолчанию):
//   *ДействиеВФорме - Булево - признак выполнения действия в форме объекта
//   *ДанныеНастройкиСчетовУчета - см. НастройкаСчетовУчетаКлиентСервер.НовыеДанныеНастройкиСчетовУчета
//   КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчаниюПакетно(ТекущаяСтрока, ПараметрыДействия, КэшированныеЗначения) Экспорт
	
	ДанныеНастройкиСчетовУчета = ПараметрыДействия.ДанныеНастройкиСчетовУчета;
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если НастройкаСчетовУчетаКлиентСервер.ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(ТекущаяСтрока, ТекущаяСтрока, ПараметрыНастройки) Тогда
			Если ПараметрыДействия.ДействиеВФорме Тогда
				НастройкаПоУмолчанию = ДанныеНастроекСчетовУчетаПоУмолчаниюПакетно(
					КэшированныеЗначения, ПараметрыНастройки.ПутьКДанным, ДанныеНастройкиСчетовУчета);
					
				НастройкаСчетовУчетаКлиентСервер.ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(
					ТекущаяСтрока,
					ПараметрыНастройки,
					НастройкаПоУмолчанию,
					ДанныеНастройкиСчетовУчета);
			Иначе
				НастройкаПоУмолчанию = ДанныеНастроекСчетовУчетаПоУмолчаниюПакетно(
					КэшированныеЗначения, ПараметрыНастройки.ПутьКДанным);
				
				Если НастройкаПоУмолчанию[ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов]] <> Неопределено Тогда
					ДанныеНастройки = НастройкаПоУмолчанию[ТекущаяСтрока[ПараметрыНастройки.СтатьяАктивовПассивов]].ДанныеНастройки;
					ТекущаяСтрока[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройкаСчетовУчета(ДанныеНастройки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения настройки счетов по умолчанию
// при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстыЗапросовНастройкуСчетовУчетаПоУмолчанию(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ЗаполнитьНастройкуСчетовУчетаПоУмолчанию",
			СтруктураДействий,
			КэшированныеЗначения,
			ПараметрыДействия) Тогда
		
		ДанныеНастройкиСчетовУчета = ПараметрыДействия.ДанныеНастройкиСчетовУчета;
	
		Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			
			Если ПакетнаяОбработкаТабличнойЧастиСервер.ЕстьКолонкаВИсточникеДанных(
					ПараметрыНастройки.СтатьяАктивовПассивов,
					КэшированныеЗначения) Тогда
			
				ТекстЗарпоса = "ВЫБРАТЬ
				|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
				|	СтатьиАктивовПассивов.Ссылка    КАК Ссылка
				//++ Локализация
				|	,
				|	СтатьиАктивовПассивов.СчетУчета КАК СчетУчета,
				|	СтатьиАктивовПассивов.Субконто1 КАК Субконто1,
				|	СтатьиАктивовПассивов.Субконто2 КАК Субконто2,
				|	СтатьиАктивовПассивов.Субконто3 КАК Субконто3
				//-- Локализация

				//++ НЕ УТКА
				|	,
				|	СтатьиАктивовПассивов.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
				//-- НЕ УТКА
				|ИЗ
				|	ВтИсточникДанных КАК ИсточникДанных
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиАктивовПассивов
				|		ПО &ПолеСтатьяЗатрат = СтатьиАктивовПассивов.Ссылка
				|";
				ТекстЗарпоса = СтрЗаменить(ТекстЗарпоса, "&ПолеСтатьяЗатрат", "ИсточникДанных." + ПараметрыНастройки.СтатьяАктивовПассивов);
				
				ИмяЗапроса = "НастройкаСчетовУчетаПоУмолчанию" + СтрЗаменить(ПараметрыНастройки.ПутьКДанным, ".", "");
				ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗарпоса, ИмяЗапроса);
				
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление настройки счетов учета.
// Вызывается из механизма ОбработкаТабличнойЧасти.
// 
// Параметры:
//  ТекущаяСтрока - Структура - Данные строки.
//  ПараметрыДействия - Структура - Параметры действия. (См. НастройкаСчетовУчетаКлиентСервер.ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета):
//   *ДанныеНастройкиСчетовУчета - Структура из см. НастройкаСчетовУчетаКлиентСервер.НовыеДанныеНастройкиСчетовУчета
//
Процедура ЗаполнитьПредставлениеНастройкиСчетовУчета(ТекущаяСтрока, ПараметрыДействия) Экспорт
	
	ДанныеНастройкиСчетовУчета = ПараметрыДействия.ДанныеНастройкиСчетовУчета;
	
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		ТекущаяСтрока[ПараметрыНастройки.Представление] = 
			НастройкаСчетовУчетаКлиентСервер.ПредставлениеНастройкиОтражения(ТекущаяСтрока, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для создания нового элемента справочника настроек счетов учета по переданным данным.
// Используется при программном заполнении настроек счетов учета объектов документов и справочников,
// по известным значениям счетов учета и субконто.
// 
// Если создание настройки учета происходит для объекта, редактируемого в форме, обязательна
// передача формы. В этом случае данные настройки будут сохранены в кэше механизма, а запись нового элемента
// настроек произойдет перед записью редактируемого объекта формы.
// 
// Если заполнение настройки учета происходит для объекта - переменной модуля, то запись нового элемента
// настроек происходит непосредственно в функции. Вновь созданная настройка счетов учета записывается 
// без владельца, владелец записывается при записи объекта, в котором используется созданная настройка.
// 
// Параметры:
//  ДанныеНастройки - См. НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета
//  Форма - ФормаКлиентскогоПриложения - форма редактируемого объекта документа или справочника
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций - новый элемент настройки счетов учета с переданными данными настройки счетов.
//   При передаче формы в параметр Форма это ссылка нового (еще не существующего) элемента справочника настроек.
//   Если форма не передана, это ссылка созданного при работе функции нового элемента справочника настроек.
// 
Функция НоваяНастройкаСчетовУчета(ДанныеНастройки, Форма = Неопределено) Экспорт
	
	НоваяНастройка = Справочники.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка();
	
	Если Форма <> Неопределено Тогда
			
		ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
		
		Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
			Возврат НоваяНастройка;
		ИначеЕсли Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
			Возврат НоваяНастройка;
		ИначеЕсли ДанныеНастройки = Неопределено Тогда
			Возврат НоваяНастройка;
		КонецЕсли;
		
		НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
		ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(НоваяНастройка, ОбщегоНазначения.СкопироватьРекурсивно(ДанныеНастройки));
		
	ИначеЕсли ДанныеНастройки <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПометкаУдаления = Истина;
		Владелец = Неопределено;
		НоваяНастройка = НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, Владелец);
		
	КонецЕсли;
	
	Возврат НоваяНастройка;
	
КонецФункции

// Предназначена для копирования содержимого настройки счетов учета в новый элемент справочника настроек.
// Используется при программном заполнении настроек счетов учета объектов документов и справочников,
// где простое присвоение ссылки настройки счетов, полученной из другого объекта, недопустимо.
// 
// Если заполнение настройки учета происходит для объекта, редактируемого в форме, обязательна
// передача формы. В этом случае данные настройки будут сохранены в кэше механизма, а запись нового элемента
// настроек произойдет перед записью редактируемого объекта формы.
// 
// Если заполнение настройки учета происходит для объекта - переменной модуля, то запись нового элемента
// настроек происходит непосредственно в функции. Вновь созданная настройка счетов учета записывается 
// без владельца, владелец записывается при записи объекта, в котором используется созданная настройка.
// 
// Параметры:
//  НастройкаСчетовИсточник - СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций - настройка счетов учета, данные которой необходимо скопировать в новую настройку
//  Форма - ФормаКлиентскогоПриложения - форма редактируемого объекта документа или справочника
// 
// Возвращаемое значение:
//  СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций - новый элемент настройки счетов учета с данными настройки счетов - источника.
//   При передаче формы в параметр Форма это ссылка нового (еще не существующего) элемента справочника настроек.
//   Если форма не передана, это ссылка созданного при работе функции нового элемента справочника настроек.
// 
Функция КопияНастройкиСчетовУчета(НастройкаСчетовИсточник, Форма = Неопределено) Экспорт
	
	НоваяНастройка = Справочники.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка();
	
	Если Форма <> Неопределено Тогда
			
		ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
		
		Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
			Возврат НоваяНастройка;
		ИначеЕсли Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
			Возврат НоваяНастройка;
		КонецЕсли;
		
		ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[НастройкаСчетовИсточник];
		
		Если ДанныеНастройки <> Неопределено Тогда
			НоваяНастройка = НоваяНастройкаСчетовУчета(ДанныеНастройки, Форма);
		ИначеЕсли ЗначениеЗаполнено(НастройкаСчетовИсточник) Тогда
			ДанныеНастройки = ДанныеНастроекСчетовУчета(НастройкаСчетовИсточник);
			НоваяНастройка = НоваяНастройкаСчетовУчета(ДанныеНастройки[НастройкаСчетовИсточник], Форма);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкаСчетовИсточник) Тогда
		
		ДанныеНастройки = ДанныеНастроекСчетовУчета(НастройкаСчетовИсточник);
		НоваяНастройка = НоваяНастройкаСчетовУчета(ДанныеНастройки[НастройкаСчетовИсточник]);
		
	КонецЕсли;
	
	Возврат НоваяНастройка;
	
КонецФункции

#КонецОбласти

#Область НастройкаСчетовУчетаНоменклатуры

// Выполняет проверку заполнения счетов учета в объекте.
// 
// Параметры:
// 	Объект - Произвольный - Объект хранения настроек счетов
//	Отказ - Булево - Флаг Отказ
//	ПроверяемыеРеквизиты - Массив - Проверяемые реквизиты
//
Процедура ОбработкаПроверкиЗаполненияСчетовУчетаНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидЦенности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыбораСубконто

// Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
// Возвращаемое значение:
//	ОписаниеТипов - Описание типов справочников, которые зависят от организации.
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	СтрокаТипов = 
		"СправочникСсылка.БанковскиеСчетаОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,
		|СправочникСсылка.ДоговорыКредитовИДепозитов,
		|СправочникСсылка.ДоговорыАренды,
		//++ Локализация
		|СправочникСсылка.РегистрацииВНалоговомОргане,
		//-- Локализация
		|СправочникСсылка.ДоговорыМеждуОрганизациями
		|";

	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), СтрокаТипов);
	
КонецФункции

#КонецОбласти

// Вызывается из соответствующего обработчика формы с настраиваемыми счетами учета
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо проверить заполнение настроек счетов учета (и субконто)
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Отказ Или ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	//++ НЕ УТ
	РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(ДанныеНастройкиСчетовУчета);
	
	Если НастройкаСчетовУчетаКлиентСервер.РазделыУчетаИспользующиеСубконто().Найти(РазделУчета) <> Неопределено Тогда
		
		НастройкаРаздела = ДанныеНастройкиСчетовУчета.НастройкиРазделов.Получить(РазделУчета);
		
		Для каждого ЭлементНастройки Из ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.ЭлементыНастройки) Цикл
			
			Если НастройкаСчетовУчетаКлиентСервер.ПрефиксЭлементаНастройки(ЭлементНастройки) = "Субконто" Тогда
				ИмяСчета = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНастройкиПоИмениЭлементаФормы(ЭлементНастройки);
				ИмяРеквизитаСчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(ДанныеНастройкиСчетовУчета,
					"Номенклатура", ИмяСчета);
				ЭтоСчетПрочиеДоходыРасходы = БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(Форма[ИмяРеквизитаСчета])
					ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеРасходы(Форма[ИмяРеквизитаСчета]);
				ИмяРеквизитаСубконто = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(
						ДанныеНастройкиСчетовУчета, "Номенклатура", ИмяСчета, "Субконто");
				Если ЭтоСчетПрочиеДоходыРасходы Тогда
					ПроверяемыеРеквизиты.Добавить(ИмяРеквизитаСубконто);
				Иначе
					МассивНепроверяемыхРеквизитов.Добавить(ИмяРеквизитаСубконто);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//-- НЕ УТ
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	//-- Локализация
	
КонецПроцедуры

// Выполняет сохранение счетов учета.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта настройки;
//  Отказ - Булево - Признак отказа от записи, см. параметр "Отказ" события ПриЗаписиНаСервере;
// 	Объект - СправочникОбъект, ДанныеФормыСтруктура, Произвольный - Объект хранения настроек счетов, см. параметр "ТекущийОбъект" события ПриЗаписиНаСервере;
// 	ПараметрыЗаписи - Структура - содержит параметры записи, см. параметр "ПараметрыЗаписи" события ПриЗаписиНаСервере.
//
Процедура ПриЗаписиОбъектаНастройкиСчетовУчета(Форма, Отказ, Объект, ПараметрыЗаписи) Экспорт
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	Если Отказ Или ДанныеНастройкиСчетовУчета = Неопределено Или Не ДанныеНастройкиСчетовУчета.ДоступноИзменениеНастроекСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТ
	СтруктураСчетовУчета = Новый Структура;
	Для каждого НастройкаРаздела Из ДанныеНастройкиСчетовУчета.НастройкиРазделов Цикл
		НастройкаСчетовУчетаКлиентСервер.ЗаполнитьСчетаУчетаНастройкамиРаздела(НастройкаРаздела.Ключ, СтруктураСчетовУчета, ДанныеНастройкиСчетовУчета, Форма);
	КонецЦикла;
	
	СтруктураИзмерений = НастройкаСчетовУчетаКлиентСервер.ИнициализироватьСтруктуруИзмеренийРегистра();
	СтруктураИзмерений.АналитикаУчета = Объект.Ссылка;
	
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СохранитьЗначенияСчетовУчета(СтруктураИзмерений, СтруктураСчетовУчета, Отказ);
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Выполняет загрузку счетов учета.
// 
// Параметры:
// Форма - ФормаКлиентскогоПриложения - форма объекта настройки. В форме реквизит:
// 	* Объект - ДанныеФормыСтруктура - содержит поля:
// 		** Ссылка - СправочникСсылка -
//
Процедура ПриЧтенииСозданииОбъектаНастройкиСчетовУчета(Форма) Экспорт

	РазделыУчета = Неопределено;
	//++ Локализация

	//++ НЕ УТ
	АналитикаУчета = Форма.Объект.Ссылка;
	РазделыУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.РазделыУчетаПоАналитикеУчета(АналитикаУчета);
	//-- НЕ УТ

	//-- Локализация
	
	ПараметрыНастройкиСчетовУчета = ПараметрыНастройкиСчетовУчета(РазделыУчета);
	ПараметрыНастройкиСчетовУчета.ИмяГруппыНастроекСчетовУчета = "ГруппаСчетов";
	ПараметрыНастройкиСчетовУчета.ПрефиксЭлементовФормы = "НастройкаСчетовУчета";
	ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДанным = "НастройкаСчетовУчета_";
	ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДаннымРеквизитов = "Объект.";
	
	ГруппаЭлементовНастройкиСчетовУчета = Форма.Элементы.Найти(ПараметрыНастройкиСчетовУчета.ИмяГруппыНастроекСчетовУчета);
	ДоступнаНастройкаСчетовУчета = ПараметрыНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета И ГруппаЭлементовНастройкиСчетовУчета <> Неопределено;
	ДляСчетовИспользуетсяАналитика = Ложь;
	//++ Локализация

	//++ НЕ УТ
	Для каждого НастройкаРаздела Из ПараметрыНастройкиСчетовУчета.НастройкиРазделов Цикл
		Если НастройкаРаздела.Значение.СвойстваАналитики.Используется Тогда
			ДляСчетовИспользуетсяАналитика = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//-- НЕ УТ

	//-- Локализация
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета И ДляСчетовИспользуетсяАналитика;
	Если ГруппаЭлементовНастройкиСчетовУчета <> Неопределено Тогда
		ГруппаЭлементовНастройкиСчетовУчета.Видимость = ДоступнаНастройкаСчетовУчета;
	КонецЕсли;
	Если Не ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация

	//++ НЕ УТ
	Если ТипЗнч(АналитикаУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
		ПараметрыНастройкиСчетовУчета.РазбитьПоРазделамЭлементы = Ложь;
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Стоимость");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Продажи");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("НДС");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Резервы");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ТМЦПринятыеНаОтветственноеХранение");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("МатериалыПринятыеВПереработку");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ТоварыПринятыеНаКомиссию");
	ИначеЕсли ТипЗнч(АналитикаУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов") Тогда
		ПараметрыНастройкиСчетовУчета.РазбитьПоРазделамЭлементы = Ложь;
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("Основное");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ЦелевоеФинансирование");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ЗабалансовыйУчет");
		ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Добавить("ФинансоваяАренда");
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(АналитикаУчета);
	МенеджерОбъекта.ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(ПараметрыНастройкиСчетовУчета.ПутиКРеквизитамАналитики);
	
	ОбщегоНазначенияУТ.СохранитьДанныеМеханизмаВКэшФормы(Форма, "НастройкаСчетовУчета", ПараметрыНастройкиСчетовУчета);
	
	ЗаполнениеРеквизитовФормы(Форма);
	Если ПараметрыНастройкиСчетовУчета.СворачиваемыеГруппы.Количество() Тогда
		ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(ПараметрыНастройкиСчетовУчета, "", "НастройкаСворачиваемостиГрупп", "Команда");
		Форма[ИмяРеквизита] = "СвернутьВсе";
	КонецЕсли;
	
	Если Не АналитикаУчета.Пустая() Тогда
		СчетаУчета = Новый Массив;
		
		Для каждого НастройкаРаздела Из ПараметрыНастройкиСчетовУчета.НастройкиРазделов Цикл
			СчетаРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Значение.ЭлементыНастройки);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаУчета, СчетаРаздела, Истина);
		КонецЦикла;
		СтруктураЗначений = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(АналитикаУчета, СчетаУчета);
		Для каждого ЗначениеНастройкиУчета Из СтруктураЗначений Цикл
			ИмяРеквизитаНаФорме = ПараметрыНастройкиСчетовУчета.ПрефиксПутиКДанным + ЗначениеНастройкиУчета.Ключ;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизитаНаФорме) Тогда
				Форма[ИмяРеквизитаНаФорме] = ЗначениеНастройкиУчета.Значение;
				Если СтрНачинаетсяС(ЗначениеНастройкиУчета.Ключ, "СчетУчетаДолгосрочный") И ЗначениеЗаполнено(ЗначениеНастройкиУчета.Значение) Тогда
					ПараметрыНастройкиСчетовУчета.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, Форма.Объект);
	УстановитьНастройкиСчетовУчетаВФорме(Форма);
	НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма, АналитикаУчета.Пустая());
	
	Если ПараметрыНастройкиСчетовУчета.ИспользуетсяНастройкаИсключений Тогда
		ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(ПараметрыНастройкиСчетовУчета, "", "Ссылка", "Команда");
		Форма.Элементы[ИмяРеквизита].Видимость = ЗначениеЗаполнено(Форма.Объект.Ссылка);
		РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета);
		Форма[ИмяРеквизита] = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНастройкаСчетовУчета(Форма.Объект.Ссылка, РазделУчета);
	КонецЕсли;
	
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Возвращает структуру параметров настройки счетов учета.
// 
// Параметры:
// 	РазделыУчета - Неопределено, Массив -
// Возвращаемое значение:
// 	Структура - Параметры настройки счетов учета
//
Функция ПараметрыНастройкиСчетовУчета(РазделыУчета = Неопределено) Экспорт
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ИмяГруппыНастроекСчетовУчета", "");
	ПараметрыНастройки.Вставить("ПрефиксЭлементовФормы", "");
	ПараметрыНастройки.Вставить("ПрефиксПутиКДанным", "");
	ПараметрыНастройки.Вставить("ПрефиксПутиКДаннымРеквизитов", "");
	ПараметрыНастройки.Вставить("СчетаСДинамическимиПараметрамиВыбора", Новый Массив);
	ПараметрыНастройки.Вставить("СчетаСДинамическимиСвойствами", Новый Массив);
	ПараметрыНастройки.Вставить("РедактированиеВСписке", Ложь);
	ПараметрыНастройки.Вставить("СоздаватьВСлучаеОтсутствия", Истина);
	ПараметрыНастройки.Вставить("РазбитьПоРазделам", Ложь);
	ПараметрыНастройки.Вставить("РазбитьПоРазделамЭлементы", Ложь);
	ПараметрыНастройки.Вставить("ИмяЭлементаГиперссылкиНастройкиСчетовУчета", "");
	ПараметрыНастройки.Вставить("НастройкиРазделов", Новый Соответствие);
	ПараметрыНастройки.Вставить("ИспользуетсяНастройкаИсключений", Ложь);
	ПараметрыНастройки.Вставить("СписокРазделовУчета", Новый СписокЗначений);
	ПараметрыНастройки.Вставить("РеквизитыАналитики", Новый Структура);
	ПараметрыНастройки.Вставить("СворачиваемыеГруппы", Новый Массив);
	ПараметрыНастройки.Вставить("ОбщиеРеквизиты", Новый Структура);
	ПараметрыНастройки.Вставить("ПутиКРеквизитамАналитики", Новый Структура);
	ПараметрыНастройки.Вставить("ДоступныеСчетаУчета", Новый Структура);
	ПараметрыНастройки.Вставить("ДоступнаНастройкаСчетовУчета", Ложь);
	ПараметрыНастройки.Вставить("ДоступноИзменениеНастроекСчетовУчета", Ложь);
	ПараметрыНастройки.Вставить("УчитыватьСчетаПоУмолчанию", Ложь);
	ПараметрыНастройки.Вставить("УчитыватьСчетаТребующиеНастройки", Ложь);
	ПараметрыНастройки.Вставить("УчитыватьИзмененныеСчетаУчета", Ложь);
	ПараметрыНастройки.Вставить("ИспользуютсяДолгосрочныеСчетаУчета", Ложь);
	
	//++ Локализация
	ПараметрыНастройки.ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета();
	
	Если Не ПараметрыНастройки.ДоступнаНастройкаСчетовУчета Тогда
		Возврат ПараметрыНастройки;
	КонецЕсли;
	
	//++ НЕ УТ
	
	ПараметрыНастройки.ДоступноИзменениеНастроекСчетовУчета = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета);
	
	РазделыУчетаСИсключениями = НастройкаСчетовУчетаКлиентСервер.РазделыУчетаДляКоторыхНастраиваютсяИсключения();
	
	СписокРазделовУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета();
	Если РазделыУчета = Неопределено Или ТипЗнч(РазделыУчета) <> Тип("Массив") Тогда
		РазделыУчета = СписокРазделовУчета.ВыгрузитьЗначения();
	КонецЕсли;
	
	Для каждого РазделУчета Из СписокРазделовУчета Цикл
		
		Если Не РазделУчета.Пометка Или (РазделыУчета.Найти(РазделУчета.Значение) = Неопределено
			 И РазделыУчета.Найти(НастройкаСчетовУчетаКлиентСервер.ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета.Значение)) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыНастройки.СписокРазделовУчета.Добавить(РазделУчета.Значение, РазделУчета.Представление, Истина);
		
		СтруктураНастроекРаздела = ИнициализироватьСтруктуруНастроекРаздела(РазделУчета.Значение);
		СтруктураНастроекРаздела.Представление = РазделУчета.Представление;
		Для каждого РеквизитАналитики Из СтруктураНастроекРаздела.РеквизитыАналитики Цикл
			ПараметрыНастройки.РеквизитыАналитики.Вставить(РеквизитАналитики.Ключ, РеквизитАналитики.Значение);
		КонецЦикла;
		
		Если РазделыУчетаСИсключениями.Найти(РазделУчета.Значение) <> Неопределено Тогда
			ПараметрыНастройки.ИспользуетсяНастройкаИсключений = Истина;
		КонецЕсли;
		
		Если СтруктураНастроекРаздела.ДолгосрочныеСчета.Количество() Тогда
			ПараметрыНастройки.ИспользуютсяДолгосрочныеСчетаУчета = Истина;
		КонецЕсли;
		
		ПараметрыНастройки.НастройкиРазделов.Вставить(РазделУчета.Значение, СтруктураНастроекРаздела);
		
	КонецЦикла;
	
	ЗаполнитьОбщиеРеквизитыВлияющиеНаНастройкуСчетовУчета(РазделыУчета, ПараметрыНастройки.ОбщиеРеквизиты);
	ПараметрыНастройки.ДоступныеСчетаУчета = Обработки.НастройкаОтраженияДокументовВРеглУчете.ДоступныеСчетаУчета(РазделыУчета);
	ПараметрыНастройки.РазбитьПоРазделамЭлементы = РазделыУчета.Количество() > 1;
	
	ЗаполнитьИменаРеквизитовАналитикиВСоответствииИмен(ПараметрыНастройки.ПутиКРеквизитамАналитики, ПараметрыНастройки.РеквизитыАналитики);

	//-- НЕ УТ

	//-- Локализация
	
	Возврат ПараметрыНастройки;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДоступнаНастройкаСчетовРеглУчета() Экспорт
	
	ДоступнаНастройкаСчетовУчета = Ложь;
	
	//++ Локализация

	//++ НЕ УТ
	ДоступнаНастройкаСчетовУчета = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет")
		И ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Хозрасчетный);
	//-- НЕ УТ

	//-- Локализация
	
	Возврат ДоступнаНастройкаСчетовУчета;
	
КонецФункции

Функция ДоступнаНастройкаСчетовМеждународногоУчета() Экспорт
	
	ДоступнаНастройкаСчетовУчета = Ложь;
	
	//++ НЕ УТКА
	ДоступнаНастройкаСчетовУчета = ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет")
		И ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета")
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ПланыСчетовМеждународногоУчета)
		И ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Международный);
	//-- НЕ УТКА
	
	Возврат ДоступнаНастройкаСчетовУчета;
	
КонецФункции

Функция ДанныеНастроекСчетовУчета(НастройкиСчетовУчета) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие();
	
	Если ТипЗнч(НастройкиСчетовУчета) = Тип("Массив") Тогда
		СписокНастроек = НастройкиСчетовУчета;
	Иначе
		СписокНастроек = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НастройкиСчетовУчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокНастроек", СписокНастроек);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиСчетовУчета.Ссылка    КАК Ссылка
	//++ Локализация
	|	,
	|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
	|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
	|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
	|	НастройкиСчетовУчета.Субконто3 КАК Субконто3
	//-- Локализация

	//++ НЕ УТКА
	|	,
	|	НастройкиСчетовУчета.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	//-- НЕ УТКА
	|ИЗ
	|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|ГДЕ
	|	НастройкиСчетовУчета.Ссылка В (&СписокНастроек)
	|";
	
	Результат = Запрос.Выполнить();
	ВыборкаНастройки = Результат.Выбрать(); 
	
	Пока ВыборкаНастройки.Следующий() Цикл
		ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		//++ Локализация
		ЗаполнитьЗначенияСвойств(ДанныеНастройки, ВыборкаНастройки, НастройкаСчетовУчетаКлиентСервер.РеквизитыНастройкиСчетаУчета());
		//-- Локализация

		//++ НЕ УТКА
		РезультатНастройкиМеждународногоУчета = ВыборкаНастройки.НастройкиМеждународногоУчета; // ВыборкаИзРезультатаЗапроса -
		ВыборкаНастройкиМеждународногоУчета = РезультатНастройкиМеждународногоУчета.Выбрать();
		Пока ВыборкаНастройкиМеждународногоУчета.Следующий() Цикл
			ДанныеМеждународнойНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовМеждународногоУчета();
			ЗаполнитьЗначенияСвойств(ДанныеМеждународнойНастройки, ВыборкаНастройкиМеждународногоУчета);
			ДанныеНастройки.НастройкиМеждународногоУчета.Добавить(ДанныеМеждународнойНастройки);
		КонецЦикла;
		//-- НЕ УТКА
		ВозвращаемоеЗначение.Вставить(ВыборкаНастройки.Ссылка, ДанныеНастройки);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//++ НЕ УТ

//++ Локализация

// Возвращает структура настроек раздела учета.
//	Параметры:
//		РазделУчета - Строка - имя раздела учета, см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета;
//		ТолькоИспользуемые - Булево - признак заполнения счетов учета и субконто для раздела, если истина - будут выводиться только те, которые доступны по ФО.
//	Возвращаемое значение:
//		Структура - содержит:
//			* Представление - Строка - представление раздела учета.
//			* ЭлементыНастройки - см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ЭлементыНастройкиСчетовУчетаПоРазделуУчета.
//			* РеквизитыАналитики - см. НастройкаСчетовУчетаСервер.РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета.
//			* СвойстваОрганизации - см. НастройкаСчетовУчетаСервер.НастройкиОрганизацииПоРазделуУчета.
//			* СвойстваАналитики - см. НастройкаСчетовУчетаСервер.НастройкиАналитикиУчетаПоРазделуУчета.
//			* СвойстваМестаУчета - см. НастройкаСчетовУчетаСервер.НастройкиМестаУчетаПоРазделуУчета.
//
Функция ИнициализироватьСтруктуруНастроекРаздела(РазделУчета, ТолькоИспользуемые = Ложь) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Представление");
	СписокЭлементов = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ЭлементыНастройкиСчетовУчетаПоРазделуУчета(РазделУчета);
	Если ТолькоИспользуемые Тогда
		СписокЭлементов = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокЭлементов);
	КонецЕсли;
	СтруктураНастроек.Вставить("ЭлементыНастройки", СписокЭлементов);
	СтруктураНастроек.Вставить("РеквизитыАналитики", РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваОрганизации", НастройкиОрганизацииПоРазделуУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваАналитики", НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета));
	СтруктураНастроек.Вставить("СвойстваМестаУчета", НастройкиМестаУчетаПоРазделуУчета(РазделУчета));
	
	ДолгосрочныеСчета = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ВыделятьДолгосрочныеАктивыОбязательства") Тогда
		МассивЭлементов = ?(ТолькоИспользуемые, СписокЭлементов, ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СписокЭлементов));
		Для каждого ИмяВидаСчета Из МассивЭлементов Цикл
			Если НастройкаСчетовУчетаКлиентСервер.ИспользуетсяДолгосрочныйСчет(ИмяВидаСчета) Тогда
				ДолгосрочныеСчета.Добавить(ИмяВидаСчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураНастроек.Вставить("ДолгосрочныеСчета", ДолгосрочныеСчета);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает реквизиты, которые влияют на настройку счетов учета для данного раздела.
//	Параметры:
//		РазделУчета - Строка - имя раздела учета, см. РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета.
//	Возвращаемое значение:
//		Структура - структура, ключем выступает имя реквизита, используемое в настройках счетов учета,
//					а значением - подстановка по умолчанию в запрос пустого значения данного реквизита.
//
Функция РеквизитыАналитикиВлияющиеНаНастройкуСчетовУчета(РазделУчета) Экспорт
	
	Реквизиты = Новый Структура;
	
	Если РазделУчета = "Доходы" Или РазделУчета = "Расходы" Или РазделУчета = "ДоходыРасходы" Тогда
			
		Реквизиты.Вставить("Доходы", "ИСТИНА");
		Реквизиты.Вставить("Расходы", "ИСТИНА");
		
	ИначеЕсли РазделУчета = "ДенежныеСредства" Тогда
			
		Реквизиты.Вставить("АналитикаДенежныхСредств", "НЕОПРЕДЕЛЕНО");
		Реквизиты.Вставить("ТипБанковскогоСчета", "ЗНАЧЕНИЕ(Перечисление.ТипыБанковскихСчетов.ПустаяСсылка)");
		Реквизиты.Вставить("ВалютаДенежныхСредств", "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)");
		Реквизиты.Вставить("Организация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
		
	ИначеЕсли РазделУчета = "Резервы" Тогда
			
		Реквизиты.Вставить("ВидРезервов", "ЗНАЧЕНИЕ(Справочник.Резервы.ПустаяСсылка)");
		
	ИначеЕсли РазделУчета = "ВнеоборотныеАктивы" Тогда
			
		Реквизиты.Вставить("ВидАктива", "ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ПустаяСсылка)");
			
	ИначеЕсли РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
		
	ИначеЕсли Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов().Найти(РазделУчета) <> Неопределено Или РазделУчета = "РасчетыСПартнерами"  Тогда
			
		Для каждого ВидРасчетовСПартнерами Из НастройкаСчетовУчетаКлиентСервер.ВидыРасчетовСПартнерами() Цикл
			Реквизиты.Вставить(ВидРасчетовСПартнерами, "ИСТИНА");
		КонецЦикла;
		Реквизиты.Вставить("РасчетыВВалюте", "ЛОЖЬ");
		
	ИначеЕсли РазделУчета = "Эквайринг" Тогда
			
		Реквизиты.Вставить("Организация", "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция НастройкиМестаУчетаПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Заголовок, ПредставлениеПустого, ТипЗначения, ПредставлениеДетализации, Используется");
	
	ЗначениеВозврата.Используется = Ложь;
	
	Если РазделУчета = "Доходы" Или РазделУчета = "Расходы" Или РазделУчета = "ДоходыРасходы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Подразделение';
											|en = 'Business unit'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'Для всех подразделений';
													|en = 'For all business units'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru = 'по организациям и подразделениям';
														|en = 'by companies and business units'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьЗарплатаКадрыКорпоративнаяПодсистемы");
	КонецЕсли;
	
	Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Склад';
											|en = 'Warehouse'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'Для всех складов';
													|en = 'For all warehouses'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru = 'по организациям и складам';
														|en = 'by companies and warehouses'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "Производство" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Место производства';
											|en = 'Production location'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'Для всех мест производства';
													|en = 'For all production places'");
		ЗначениеВозврата.ПредставлениеДетализации = НСтр("ru = 'по организациям и местам производства';
														|en = 'by companies and production places'");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
			//++ Устарело_Переработка24
			Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
			//-- Устарело_Переработка24
			Или Ложь Тогда
			ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Партнеры");
		Иначе
			ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
		КонецЕсли;
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НастройкиАналитикиУчетаПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Заголовок, ПредставлениеПустого, ТипЗначения, Используется");
	ЗначениеВозврата.Используется = Ложь;
	
	Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураПереданная" Или РазделУчета = "НоменклатураПринятая" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Группа настроек фин. учета';
											|en = 'Financial accounting settings group'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	КонецЕсли;
	
	Если НастройкаСчетовУчетаКлиентСервер.ВидыРасчетовСПартнерами().Найти(РазделУчета) <> Неопределено
		Или РазделУчета = "РасчетыСПартнерами" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Группа настроек фин. учета';
											|en = 'Financial accounting settings group'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	КонецЕсли;
	
	Если РазделУчета = "Доходы" Или РазделУчета = "Расходы" Или РазделУчета = "ДоходыРасходы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Группа настроек фин. учета';
											|en = 'Financial accounting settings group'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	КонецЕсли;
	
	Если РазделУчета = "ДенежныеСредства" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Банковский счет / Касса';
											|en = 'Bank account / cash account'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций, СправочникСсылка.Кассы");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "ПодарочныеСертификаты" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Вид сертификата';
											|en = 'Certificate kind'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ВидыПодарочныхСертификатов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьПодарочныеСертификаты");
	КонецЕсли;
	
	Если РазделУчета = "ТМЦВЭксплуатации" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Категория эксплуатации';
											|en = 'Operation category'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КатегорииЭксплуатации");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление");
	КонецЕсли;
	
	Если РазделУчета = "Резервы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Вид резервов';
											|en = 'Reserve kind'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указан';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Резервы");
		ЗначениеВозврата.Используется = Истина;
	КонецЕсли;
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Группа настроек фин. учета';
											|en = 'Financial accounting settings group'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	КонецЕсли;
	
	Если РазделУчета = "Производство" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Группа продукции';
											|en = 'Manufactured product group'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("НастройкаСчетовУчетаПроизводстваПоГруппамПродукции");
	КонецЕсли;
	
	Если РазделУчета = "Эквайринг" Тогда
		ЗначениеВозврата.Заголовок = НСтр("ru = 'Договор подключения к платежной системе';
											|en = 'Payment system contract'");
		ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'не указана';
													|en = 'not specified'");
		ЗначениеВозврата.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДоговорыЭквайринга");
		ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НастройкиОрганизацииПоРазделуУчета(РазделУчета) Экспорт
	
	ЗначениеВозврата = Новый Структура("Используется, ПредставлениеПустого");
	ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'Настройка для аналитики учета';
												|en = 'Setting for accounting dimension'");
	
	ЗначениеВозврата.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗначениеВозврата.Используется = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция НастройкиДолгосрочныхСчетовПоРазделуУчета(РазделУчета) Экспорт 

	СтруктураНастроекРаздела = ИнициализироватьСтруктуруНастроекРаздела(РазделУчета);
	
	ЗначениеВозврата = Новый Структура("Используется, ПредставлениеПустого");
	ЗначениеВозврата.ПредставлениеПустого = НСтр("ru = 'Долгосрочные счета';
												|en = 'Long-term accounts'", ОбщегоНазначения.КодОсновногоЯзыка()); 
	ЗначениеВозврата.Используется = СтруктураНастроекРаздела.ДолгосрочныеСчета.Количество();
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ВидыСчетовРеглУчетаПоРазделуУчета(РазделУчета, ДоступныеПоФО = Истина) Экспорт
	
	МассивВозврата = Новый Массив;
	
	СчетаУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокСчетовУчетаПоРазделуУчета(РазделУчета);
	Если ДоступныеПоФО Тогда
		СчетаУчета = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(СчетаУчета);
	Иначе
		СчетаУчета = СчетаУчета.ВыгрузитьЗначения();
	КонецЕсли;
	Для каждого СчетУчета Из СчетаУчета Цикл
		МассивВозврата.Добавить(Перечисления.ВидыСчетовРеглУчета[СчетУчета]);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура УстановитьНастройкиСчетовУчетаВФорме(Форма) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Параметры = Неопределено;
	
	Если Настройка.Свойство("МенятьОбщие") Тогда
		Если Настройка.РедактированиеВСписке Тогда
			РазделУчетаПоНастройкам = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета);
			УстановитьУсловноеОформление(Форма, РазделУчетаПоНастройкам, "АналитикаУчета", "Реквизит");
			УстановитьУсловноеОформление(Форма, РазделУчетаПоНастройкам, "МестоУчета", "Реквизит");
			УстановитьУсловноеОформление(Форма, Неопределено, "Организация", "Реквизит");
		КонецЕсли;
		НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(Форма);
	КонецЕсли;
	
	ГруппыБылиДобавлены = Ложь;
	ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройка.СписокРазделовУчета);
		
	Для каждого ЭлементРазделаУчета Из РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СписокРазделовСчетовУчета() Цикл
		
		РазделУчета = ЭлементРазделаУчета.Значение;
		НастройкаРаздела = Настройка.НастройкиРазделов.Получить(РазделУчета);
		
		Если НастройкаРаздела = Неопределено Тогда
			// Данный раздел учета не доступен по ФО
			Продолжить;
		КонецЕсли;
		
		ГруппаРаздела = ИнициализироватьРазделНаФорме(Форма, ЭлементРазделаУчета, Параметры);
		
		Если ГруппаРаздела <> Неопределено Тогда
			Если Настройка.РазбитьПоРазделамЭлементы Тогда
				ГруппаРаздела.Заголовок = НастройкаРаздела.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройка.Свойство("МенятьОбщие") И ОтмеченныеРазделы.Найти(РазделУчета) <> Неопределено Тогда
			НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваИзмеренийНаФорме(Форма, РазделУчета);
		КонецЕсли;
		
		НачальнаяГруппаДляДобавления = Параметры.ГруппаДляДобавления;
		
		Если Настройка.СворачиваемыеГруппы.Количество() Тогда
			// Добавим на форму команду свертки всех групп:
			НастройкаСворачиваемостиГрупп = ДобавитьЭлементНаФорму("НастройкаСворачиваемостиГрупп", Параметры, "Переключатель");
		КонецЕсли;
		
		Для каждого ЭлементНастройки Из НастройкаРаздела.ЭлементыНастройки Цикл
			
			ТипЭлемента = НастройкаСчетовУчетаКлиентСервер.ПрефиксЭлементаНастройки(ЭлементНастройки.Значение);
			ИмяЭлемента = СтрЗаменить(ЭлементНастройки.Значение, ТипЭлемента + "_", "");
			Параметры.ГруппаДляДобавления = НачальнаяГруппаДляДобавления;
			ДобавитьГруппыНаФормуДляТекущегоЭлемента(ИмяЭлемента, Параметры, ТипЭлемента);
			ГруппыБылиДобавлены = Параметры.ГруппаДляДобавления <> НачальнаяГруппаДляДобавления;
			
			Параметры.ЭлементВыводится = ЭлементНастройки.Пометка;
			Параметры.Представление = ЭлементНастройки.Представление;
			ЭлементСчетаУчетаНаФорме(ИмяЭлемента, Параметры, ТипЭлемента);
			
			Если НастройкаРаздела.ДолгосрочныеСчета.Найти(ЭлементНастройки.Значение) <> Неопределено Тогда
				// Добавим так же настройку долгосрочного счета:
				
				Параметры.ГруппаДляДобавления = НачальнаяГруппаДляДобавления;
				ДобавитьГруппыНаФормуДляТекущегоЭлемента(ЭлементНастройки.Значение, Параметры, "СчетУчетаДолгосрочный");
				ГруппыБылиДобавлены = Параметры.ГруппаДляДобавления <> НачальнаяГруппаДляДобавления;
				
				Параметры.ЭлементВыводится = ЭлементНастройки.Пометка;
				Параметры.Представление = ЭлементНастройки.Представление;
				ЭлементСчетаУчетаНаФорме(ЭлементНастройки.Значение, Параметры, "СчетУчетаДолгосрочный");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры.ЭлементВыводится = Настройка.ИспользуютсяДолгосрочныеСчетаУчета;
	Параметры.ГруппаДляДобавления = Форма.Элементы.ФормаКоманднаяПанель;
	Параметры.Представление = НСтр("ru = 'Показывать долгосрочные';
									|en = 'Show long-term'");
	ЭлементДолгосрочные = ДобавитьЭлементНаФорму("ПоказыватьДолгосрочныеСчета", Параметры, "Команда");
	Если ЭлементДолгосрочные <> Неопределено Тогда
		ЭлементДолгосрочные.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КонецЕсли;
	
	Если ГруппыБылиДобавлены Тогда
		Настройка.Вставить("ВысотаШапки", 2);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения -
// 	РазделУчета - Произвольный, Неопределено -
// 	ИмяЭлементаНастройки - Строка -
// 	ТипЭлемента - Строка -
Процедура УстановитьУсловноеОформление(Форма, РазделУчета, ИмяЭлементаНастройки, ТипЭлемента = "СчетУчета") Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	НастройкаРазделаУчета = Настройка.НастройкиРазделов.Получить(РазделУчета);
	
	ПутьКДанным = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, ТипЭлемента);
	ИмяЭлементаФормы = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, РазделУчета, ИмяЭлементаНастройки, ТипЭлемента);
	
	Если ИмяЭлементаНастройки = "АналитикаУчета" Тогда
		НастройкиАналитики = НастройкаРазделаУчета.СвойстваАналитики;
		Если НастройкиАналитики.Используется Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкиАналитики.ПредставлениеПустого);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "МестоУчета" Тогда
		НастройкиМестаУчета = НастройкаРазделаУчета.СвойстваМестаУчета;
		Если НастройкиМестаУчета.Используется Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			ИмяРеквизитаОрганизация = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "Организация", "Реквизит");
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаОрганизация, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НастройкиМестаУчета.ПредставлениеПустого);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	
	Если ИмяЭлементаНастройки = "Организация" И ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		РазделыУчетаНеЗависящиеОтОрганизации = Новый СписокЗначений;
		РазделыУчетаНеЗависящиеОтОрганизации.ЗагрузитьЗначения(НастройкаСчетовУчетаКлиентСервер.РазделыУчетаНеЗависящиеОтОрганизации());
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ИмяРеквизитаМестоУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "МестоУчета", "Реквизит");
		ИмяРеквизитаРазделУчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "РазделУчета", "Реквизит");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаМестоУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		Если РазделУчета = Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаРазделУчета, РазделыУчетаНеЗависящиеОтОрганизации, ВидСравненияКомпоновкиДанных.НеВСписке);
		КонецЕсли;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка для аналитики учета';
																	|en = 'Setting for accounting dimension'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		Если РазделУчета = Неопределено Тогда
			Элемент = Форма.УсловноеОформление.Элементы.Добавить();
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаМестоУчета, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаРазделУчета, РазделыУчетаНеЗависящиеОтОрганизации, ВидСравненияКомпоновкиДанных.ВСписке);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка по организации не применяется';
																		|en = 'Setting by company is not used'"));
			Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Если Настройка.ИспользуютсяДолгосрочныеСчетаУчета И ИмяЭлементаНастройки = "Долгосрочный" Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Ложь, ВидСравненияКомпоновкиДанных.Равно);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Краткосрочная';
																	|en = 'Short-term'"));
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Долгосрочная';
																	|en = 'Long-term '"));
		Возврат;
	КонецЕсли;
	
	// Общие настройки для всех счетов:
	
	// Оформление счетов по умолчанию:
	ПутьСчетаУчетаПоУмолчанию = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "СчетаУчетаПоУмолчанию", "Реквизит");
	Если Настройка.УчитыватьСчетаПоУмолчанию Тогда
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьСчетаУчетаПоУмолчанию, "," + ИмяЭлементаНастройки + ",", ВидСравненияКомпоновкиДанных.Содержит);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);
		
	КонецЕсли;
	
	// Оформление счетов требующих заполнения:
	ПутьТребуетсяНастройкаСчетов = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "ТребуетсяНастройкаСчетов", "Реквизит");
	Если Настройка.УчитыватьСчетаТребующиеНастройки Тогда
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьТребуетсяНастройкаСчетов, "," + ИмяЭлементаНастройки + ",", ВидСравненияКомпоновкиДанных.Содержит);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
	КонецЕсли;
	
	// Оформление счетов не требующих заполнения:
	ПутьИзмененныеДанные = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "ИзмененныеДанные", "Реквизит");
	Если Настройка.УчитыватьИзмененныеСчетаУчета И Настройка.УчитыватьСчетаТребующиеНастройки Тогда
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьТребуетсяНастройкаСчетов, "," + ИмяЭлементаНастройки + ",", ВидСравненияКомпоновкиДанных.НеСодержит);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьКДанным, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ПутьИзмененныеДанные, "," + ИмяЭлементаНастройки + ",", ВидСравненияКомпоновкиДанных.НеСодержит);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не требуется';
																	|en = 'Not required'"));
		
	КонецЕсли;
	
	// Оформление счетов не являющихся долгосрочными
	Если Настройка.ИспользуютсяДолгосрочныеСчетаУчета И
			(НастройкаРазделаУчета = Неопределено ИЛИ НастройкаРазделаУчета.ДолгосрочныеСчета.Найти(ИмяЭлементаНастройки) = Неопределено) Тогда
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		ИмяРеквизитаДолгосрочный = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "Долгосрочный", "Реквизит");
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаДолгосрочный, Истина, ВидСравненияКомпоновкиДанных.Равно);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																	|en = 'Not used'"));
	КонецЕсли;
	
	Если ТипЭлемента = "Субконто" Тогда
		
		СчетСубконто = СтрЗаменить(ИмяЭлементаНастройки, "Субконто_", "");
		ИмяРеквизитаСчета = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, СчетСубконто);
		ИмяРеквизитаСубконто = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, СчетСубконто, ТипЭлемента);
		СписокПрочихДоходовРасходов = Новый СписокЗначений;
		СписокПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеДоходы"));
		СписокПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходы"));
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаСчета, Неопределено, ВидСравненияКомпоновкиДанных.Заполнено);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаСчета, СписокПрочихДоходовРасходов, ВидСравненияКомпоновкиДанных.НеВСписке);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																	|en = 'Not used'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаСчета, СписокПрочихДоходовРасходов, ВидСравненияКомпоновкиДанных.ВСписке);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор, ИмяРеквизитаСубконто, Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	КонецЕсли;
	
	Если ИмяЭлементаНастройки = "ВыбытиеВНА" Тогда
		
		Элемент = Форма.УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, Форма.Элементы[ИмяЭлементаФормы].Имя);
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(Элемент.Отбор,
			НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, РазделУчета, "ВидАктива", "Реквизит"),
			ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не используется';
																	|en = 'Not used'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнениеРеквизитовФормы(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	ТипСчетаУчета = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
	ДобавляемыеЭлементы = Новый Массив;
	Для каждого НастройкаРаздела Из Настройка.НастройкиРазделов Цикл
		
		Для каждого ЭлементНастройки Из НастройкаРаздела.Значение.ЭлементыНастройки Цикл
			
			Если Не ЭлементНастройки.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЭлемента = НастройкаСчетовУчетаКлиентСервер.ПрефиксЭлементаНастройки(ЭлементНастройки.Значение);
			ИмяЭлемента = СтрЗаменить(ЭлементНастройки.Значение, ТипЭлемента + "_", "");
			ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, НастройкаРаздела.Ключ, ИмяЭлемента, ТипЭлемента);
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита)
				И Настройка.СоздаватьВСлучаеОтсутствия И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
				ТипЭлементаФормы = ТипСчетаУчета;
				Если ТипЭлемента = "ДопПоле" Тогда
					ТипЭлементаФормы = Новый ОписаниеТипов("Булево");
				ИначеЕсли ТипЭлемента = "Субконто" Тогда
					ТипЭлементаФормы = НастройкаСчетовУчетаКлиентСервер.ТипСубконтоПоИмениСчета(ИмяЭлемента);
				КонецЕсли;
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипЭлементаФормы,, ЭлементНастройки.Представление, Истина));
				ДобавляемыеЭлементы.Добавить(ИмяРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СчетУчета Из НастройкаРаздела.Значение.ДолгосрочныеСчета Цикл
			ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, НастройкаРаздела.Ключ, СчетУчета, "СчетУчетаДолгосрочный");
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита)
					И Настройка.СоздаватьВСлучаеОтсутствия И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ТипСчетаУчета,,, Истина));
				ДобавляемыеЭлементы.Добавить(ИмяРеквизита);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если Настройка.СворачиваемыеГруппы.Количество() Тогда
		ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, "", "НастройкаСворачиваемостиГрупп", "Команда");
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка")));
		КонецЕсли;
	КонецЕсли;
	
	Если Настройка.ИспользуетсяНастройкаИсключений Тогда
		ИмяРеквизита = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, "", "Ссылка", "Команда");
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) И ДобавляемыеЭлементы.Найти(ИмяРеквизита) = Неопределено Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ФорматированнаяСтрока")));
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ЗаполнитьИменаРеквизитовАналитикиВСоответствииИмен(СоответствиеИмен, СтруктураРеквизитов) Экспорт
	
	Для каждого Реквизит Из СтруктураРеквизитов Цикл
		Если Не НастройкаСчетовУчетаКлиентСервер.ЭтоНеРеквизитАналитики(Реквизит.Ключ) Или Реквизит.Ключ = "Организация" Тогда
			СоответствиеИмен.Вставить(Реквизит.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета, которые влияют на настройку
// 
// Параметры:
// 	ПараметрыНастройки - Структура - См. НастройкаСчетов.ПараметрыНастройкиСчетовУчета
// 	АналитикаУчета - ОпределяемыйТип.НастройкаСчетовУчетаАналитикаУчета - аналитика учета порядка отражения
//
Процедура ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымАналитики(ПараметрыНастройки, АналитикаУчета) Экспорт
	
	Если ПараметрыНастройки.ПутиКРеквизитамАналитики.Количество() Тогда
		РеквизитыАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АналитикаУчета, ПараметрыНастройки.ПутиКРеквизитамАналитики);
		
		Для каждого ЗначениеРеквизита Из РеквизитыАналитики Цикл
			Если ПараметрыНастройки.РеквизитыАналитики.Свойство(ЗначениеРеквизита.Ключ) И ЗначениеЗаполнено(ЗначениеРеквизита.Значение) Тогда
				ПараметрыНастройки.РеквизитыАналитики[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если АналитикаУчета <> Неопределено И ТипЗнч(АналитикаУчета) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		МассивВидовРасчетов = Новый Массив;
		Для каждого РеквизитВидаРасчетов Из ПараметрыНастройки.ПутиКРеквизитамАналитики Цикл
			Если АналитикаУчета[РеквизитВидаРасчетов.Значение] Тогда
				МассивВидовРасчетов.Добавить(РеквизитВидаРасчетов.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если МассивВидовРасчетов.Количество() <> 1 Тогда
			МассивВидовРасчетов = СтрРазделить("РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСДебиторами,РасчетыСКредиторами,РасчетыСАрендодателями,РасчетыСКомитентами", ",");
		КонецЕсли;
		Для каждого ЭлементСписка Из ПараметрыНастройки.СписокРазделовУчета Цикл
			ЭлементСписка.Пометка = МассивВидовРасчетов.Найти(ЭлементСписка.Значение) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область СоответствияВидовСчетовЭлементамНастройки

Функция СчетаУчетаРасходовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Расходы,              "СчетУчета");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовОСНО, "СчетСписанияОСНО");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СписаниеРасходовЕНВД, "СчетСписанияЕНВД");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаДоходовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Доходы, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаРезервовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Резервы, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаДенежныхСредствРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ДенежныеСредства, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаНоменклатурыРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();

	// Учет стоимости
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НаСкладе,                                "СчетУчетаНаСкладе");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РеализацияБезПереходаПраваСобственности, "СчетУчетаВПути");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НоменклатураПереданная,                  "СчетУчетаПередачиНаКомиссию");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ПередачаВПереработку,                    "СчетУчетаПередачиВПереработку");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ЗатратыНаПриобретениеТМЦ,                "СчетУчетаЗатратыНаПриобретение");
	
	// Продажи
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродаж,             "СчетУчетаВыручкиОтПродаж");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаОтПродажЕНВД,         "СчетУчетаВыручкиОтПродажЕНВД");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыручкаРаздельныйНУ,         "СчетУчетаВыручкиРаздельныйНУ");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродаж,         "СчетУчетаСебестоимостиПродаж");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СебестоимостьПродажЕНВД,         "СчетУчетаСебестоимостиПродажЕНВД");
	
	// НДС
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НДСПриПродаже,                               "СчетУчетаНДСПриПродаже");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НДСПриОтгрузкеБезПереходаПраваСобственности, "СчетУчетаНДСВПути");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаРасчетовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	
	// С клиентами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентами,     "СчетУчетаРасчетовСКлиентами");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыПолученные,      "СчетУчетаАвансовПолученных");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКлиентамиТара, "СчетУчетаРасчетовСКлиентамиТара");
	// С поставщиками
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщиками,      "СчетУчетаРасчетовСПоставщиками");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АвансыВыданные,            "СчетУчетаАвансовВыданных");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.УдалитьРасчетыПоПретензиям, "СчетУчетаРасчетовПоПретензиям");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСПоставщикамиТара,  "СчетУчетаРасчетовСПоставщикамиТара");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.НеотфактурованныеПоставки, "СчетУчетаНеотфактурованныеПоставки");
	// С дебиторами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиОсновнойДолг, "СчетУчетаРасчетовСДебиторамиОсновнойДолг");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиПроценты,     "СчетУчетаРасчетовСДебиторамиПроценты");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСДебиторамиКомиссия,     "СчетУчетаРасчетовСДебиторамиКомиссия");
	// С кредиторами
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиОсновнойДолг, "СчетУчетаРасчетовСКредиторамиОсновнойДолг");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиПроценты,     "СчетУчетаРасчетовСКредиторамиПроценты");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыСКредиторамиКомиссия,     "СчетУчетаРасчетовСКредиторамиКомиссия");
	// С арендодателем
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.УслугаПоАренде,        "СчетУчетаРасчетовСАрендодателемУслугаПоАренде");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ОбеспечительныйПлатеж, "СчетУчетаРасчетовСАрендодателемОбеспечительныйПлатеж");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыкупнаяСтоимость,     "СчетУчетаРасчетовСАрендодателемВыкупнаяСтоимость");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АрендныеОбязательства, "СчетУчетаРасчетовСАрендодателемАрендныеОбязательства");
	
	Возврат ВидыСчетов;
КонецФункции

Функция СчетаУчетаТМЦВЭксплуатацииРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатации,           "СчетУчета");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ТМЦВЭксплуатацииЗаБалансом, "СчетЗабалансовогоУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаВнеоборотныхАктивовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СтоимостьВНА,        "СчетУчета");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.СтоимостьВНА_ЦФ,     "СчетУчетаЦФ");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АмортизацияВНА,      "СчетУчетаАмортизации");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.АмортизацияВНА_ЦФ,   "СчетУчетаАмортизацииЦФ");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ВыбытиеВНА,          "СчетУчетаВыбытия");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РезервДоОценкиВНА,   "СчетУчетаРезерваДооценки");
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.ЗабалансовыйУчетВНА, "СчетЗабалансовогоУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаПодарочныхСертификатовРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.РасчетыПоПодарочнымСертификатам, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

Функция СчетаУчетаПроизводстваРегл() Экспорт
	
	ВидыСчетов = Новый Соответствие();
	ВидыСчетов.Вставить(Перечисления.ВидыСчетовРеглУчета.Производство, "СчетУчета");
	
	Возврат ВидыСчетов;
	
КонецФункции

#КонецОбласти

#Область ПереопределенияТекстаЗапроса

Функция ТекстПеречисленияВидовСчетов(МассивСчетов) Экспорт
	
	МассивТекстовВидовСчетов = Новый Массив;
	Для каждого СчетУчета Из МассивСчетов Цикл
		МассивТекстовВидовСчетов.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.%1)", СчетУчета));
	КонецЦикла;
	
	ТекстВидовСчетов = СтрСоединить(МассивТекстовВидовСчетов, ","+Символы.ПС+Символы.Таб);
	
	Возврат ТекстВидовСчетов;
	
КонецФункции

#КонецОбласти

//-- Локализация

// Генерирует элементы справочника НастройкиСчетовУчетаПрочихОпераций по данным реквизитов шапки и табличных частей
// и заполняет реквизит НастройкаСчетовУчетаСервер.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, в которорм требуется заполнить реквизит НастройкаСчетовУчетаСервер
// 	Постфикс - Строка - Постфикс в имени реквизита
Процедура ЗаполнитьНастройкиСчетовУчета(Объект, Постфикс = "") Экспорт
	
	//++ Локализация
	МетаданныеДокумента = Объект.Метаданные();
	ТабЧасти = МетаданныеДокумента.ТабличныеЧасти;
	
	ИмяРеквизитаСчетУчета = "УдалитьСчетУчета" + Постфикс;
	ИмяРеквизитаСубконто1 = "УдалитьСубконто1" + Постфикс;
	ИмяРеквизитаСубконто2 = "УдалитьСубконто2" + Постфикс;
	ИмяРеквизитаСубконто3 = "УдалитьСубконто3" + Постфикс;
	ИмяРеквизитаНастройкаСчетовУчета = "НастройкаСчетовУчета" + Постфикс;
	ЕстьНеобходимыеРеквизиты = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаСчетУчета)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаСубконто1)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаСубконто2)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизитаСубконто3);
	
	Если ЕстьНеобходимыеРеквизиты И ЗначениеЗаполнено(Объект[ИмяРеквизитаСчетУчета]) И НЕ ЗначениеЗаполнено(Объект[ИмяРеквизитаНастройкаСчетовУчета]) Тогда
		ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
		ДанныеНастройки.СчетУчета = Объект[ИмяРеквизитаСчетУчета];
		ДанныеНастройки.Субконто1 = Объект[ИмяРеквизитаСубконто1];
		ДанныеНастройки.Субконто2 = Объект[ИмяРеквизитаСубконто2];
		ДанныеНастройки.Субконто3 = Объект[ИмяРеквизитаСубконто3];
		Объект[ИмяРеквизитаНастройкаСчетовУчета] = НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, Объект.ПометкаУдаления, Объект.Ссылка);
	КонецЕсли;
	
	Для Каждого ТабЧасть Из ТабЧасти Цикл
		ЕстьНеобходимыеРеквизитыТЧ = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабЧасть.Реквизиты, ИмяРеквизитаСчетУчета)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабЧасть.Реквизиты, ИмяРеквизитаСубконто1)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабЧасть.Реквизиты, ИмяРеквизитаСубконто2)
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабЧасть.Реквизиты, ИмяРеквизитаСубконто3);
		
		Если ЕстьНеобходимыеРеквизитыТЧ Тогда
			Для Каждого СтрокаТЧ Из Объект[ТабЧасть.Имя] Цикл
				Если ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизитаСчетУчета]) И НЕ ЗначениеЗаполнено(СтрокаТЧ.НастройкаСчетовУчета) Тогда
					ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
					ДанныеНастройки.СчетУчета = СтрокаТЧ[ИмяРеквизитаСчетУчета];
					ДанныеНастройки.Субконто1 = СтрокаТЧ[ИмяРеквизитаСубконто1];
					ДанныеНастройки.Субконто2 = СтрокаТЧ[ИмяРеквизитаСубконто2];
					ДанныеНастройки.Субконто3 = СтрокаТЧ[ИмяРеквизитаСубконто3];
					СтрокаТЧ[ИмяРеквизитаНастройкаСчетовУчета] = НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, Объект.ПометкаУдаления, Объект.Ссылка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкаСчетовУчетаПрочихОпераций

Функция ДанныеНастройкиОтраженияОперации(Форма, ПараметрыНастройкиСчетов)
	
	Если ТипЗнч(ПараметрыНастройкиСчетов) = Тип("Массив") Тогда
		МассивПараметровНастройки= ПараметрыНастройкиСчетов;
	Иначе
		МассивПараметровНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыНастройкиСчетов);
	КонецЕсли;
	
	ПроверитьПараметрыНастройкиСчетовУчета(Форма, МассивПараметровНастройки);
	
	СоответствиеПараметровНастройкиЭлементамФормы = Новый Структура;
	Индекс = 0;
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		Для каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл
			СоответствиеПараметровНастройкиЭлементамФормы.Вставить(ИмяЭлемента, Индекс);
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовРеглУчета() ИЛИ ДоступнаНастройкаСчетовМеждународногоУчета();

	ДанныеНастройкиСчетовУчета = НастройкаСчетовУчетаКлиентСервер.НовыеДанныеНастройкиСчетовУчета();
	ДанныеНастройкиСчетовУчета.МассивПараметровНастройки = Новый ФиксированныйМассив(МассивПараметровНастройки);
	ДанныеНастройкиСчетовУчета.СоответствиеПараметровНастройкиЭлементамФормы = СоответствиеПараметровНастройкиЭлементамФормы;
	ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета;
	
	//++ Локализация
	ДанныеНастройкиСчетовУчета.ИспользуетсяРегламентированныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	//-- Локализация
	
	//++ НЕ УТКА
	ДанныеНастройкиСчетовУчета.ИспользуетсяМеждународныйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет");
	ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам = МеждународныйУчетСерверПовтИсп.СтатьиАктивовПассивовСНастройкамиПоОбъектам();
	//-- НЕ УТКА
	
	Возврат ДанныеНастройкиСчетовУчета;
	
КонецФункции

// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - содержит:
// 		* Объект - ДанныеФормыСтруктура - 
// 	МассивПараметровНастройки - Массив - Описание
Процедура ПроверитьПараметрыНастройкиСчетовУчета(Форма, МассивПараметровНастройки)
	
	Если Не ОбщегоНазначения.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для каждого ПараметрНастройки Из МассивПараметровНастройки Цикл
		
		Если ПараметрНастройки.ПутьКДанным = "" Тогда
			Возврат;
		КонецЕсли;
	
		МассивПроверяемыхРеквизитов = Новый Массив();
		МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["НастройкаСчетовУчета"]);
		Если ЗначениеЗаполнено(ПараметрНастройки["Представление"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Представление"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрНастройки["СтатьяАктивовПассивов"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["СтатьяАктивовПассивов"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрНастройки["АналитикаАктивовПассивов"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["АналитикаАктивовПассивов"]);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрНастройки["ТипСтатьи"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["ТипСтатьи"]);
		КонецЕсли;
	
		Если Найти(ПараметрНастройки.ПутьКДанным, "Объект.") > 0 Тогда
			ИмяТЧ = СтрЗаменить(ПараметрНастройки.ПутьКДанным, "Объект.", "");
			ПоискПоТЧ = Истина;
			ТаблицаФормы = Форма.Объект[ИмяТЧ]; // ДанныеФормыКоллекция
			СписокКолонокТЧ = ТаблицаФормы.Выгрузить().Колонки;
		ИначеЕсли ПараметрНастройки.ПутьКДанным = "Объект" Тогда
			ПоискПоТЧ = Ложь;
		ИначеЕсли ПараметрНастройки.ПутьКДанным = "ТаблицаКорректировки" Тогда
			ИмяТЧ = ПараметрНастройки.ПутьКДанным;
			ПоискПоТЧ = Истина;
			ТаблицаФормы = Форма[ИмяТЧ]; // ДанныеФормыКоллекция
			СписокКолонокТЧ = ТаблицаФормы.Выгрузить().Колонки;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru = 'Указан неверный путь к данным %1 в параметрах настройки счетов учета.';
										|en = 'Invalid path is specified for data %1 in ledger account settings.'"), 
									ПараметрНастройки.ПутьКДанным),
						"");
						
		КонецЕсли;
		
		Если НЕ ПоискПоТЧ И ЗначениеЗаполнено(ПараметрНастройки.УсловияДоступностиСчетаУчетаВСтроках) Тогда
			ТекстСообщения = СтрШаблон(
				                НСтр("ru = 'Настройка располагается в шапке документа. Использование параметра ""%1"" не допускается.';
									|en = 'The setting is located at the document header. The parameter ''%1'' cannot be used.'",
				                "УсловияДоступностиСчетаУчетаВСтроках"));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"",
					ТекстСообщения, 
					"");
		КонецЕсли;

		Для каждого ПроверяемыйРеквизит Из МассивПроверяемыхРеквизитов Цикл
			Если ПоискПоТЧ И НЕ ЕстьКолонкаВТЧ(СписокКолонокТЧ, ПроверяемыйРеквизит) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru = 'Отсутствует реквизит %1 в %2 формы объекта.';
										|en = 'No attribute %1 in %2 of the item form.'"), 
									ПроверяемыйРеквизит, 
									?(ПоискПоТЧ, СтрШаблон(НСтр("ru = 'табличной части %1';
																|en = 'table %1'"), ИмяТЧ), НСтр("ru = 'списке реквизитов';
																											|en = 'list of attributes'"))),
						"");
			КонецЕсли;
			
			Если НЕ ПоискПоТЧ 
				И НЕ (ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, ПроверяемыйРеквизит)
						ИЛИ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ПроверяемыйРеквизит)) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru = 'Отсутствует реквизит %1 в %2 формы объекта.';
										|en = 'No attribute %1 in %2 of the item form.'"), 
									ПроверяемыйРеквизит, 
									?(ПоискПоТЧ, СтрШаблон(НСтр("ru = 'табличной части %1';
																|en = 'table %1'"), ИмяТЧ), НСтр("ru = 'списке реквизитов';
																											|en = 'list of attributes'"))),
						"");
			КонецЕсли;
		КонецЦикла;
		
		МассивПроверяемыхРеквизитов.Очистить();
		
		Если ЗначениеЗаполнено(ПараметрНастройки["Организация"]) Тогда
			МассивПроверяемыхРеквизитов.Добавить(ПараметрНастройки["Организация"]);
		КонецЕсли;
		
		Для каждого ПроверяемыйРеквизит Из МассивПроверяемыхРеквизитов Цикл
				ИмяРеквизита = ИмяРеквизитаПоПутиКДанным(ПроверяемыйРеквизит);
				ИмяТЧРеквизита = ИмяТЧПоПутиКДанным(ПроверяемыйРеквизит); 
				ЕстьРеквизитВОбъекте = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, ИмяРеквизита);
				
				Если ИмяТЧ = Неопределено И НЕ ЕстьРеквизитВОбъекте Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Отсутствует реквизит %1 в объекте формы.';
											|en = 'Attribute %1 is missing in the form object.'"), ИмяРеквизита),
							"");
							
				ИначеЕсли (ЗначениеЗаполнено(ИмяТЧРеквизита) И ПоискПоТЧ И НЕ ИмяТЧРеквизита = ИмяТЧ) Тогда
					 ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Путь к реквизиту %1 ссылается на неправильную табличную часть %2, ожидается %3.';
											|en = 'Path to attribute %1 refers to an invalid table %2, expected %3.'"), 
										ИмяРеквизита,
										ИмяТЧРеквизита,
										ИмяТЧ),
							"");
							
				ИначеЕсли (ЗначениеЗаполнено(ИмяТЧРеквизита) 
							И ПоискПоТЧ 
							И ИмяТЧРеквизита = ИмяТЧ
							И НЕ ЕстьКолонкаВТЧ(СписокКолонокТЧ, ИмяРеквизита)) Тогда 
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
							Ошибки,
							"",
							СтрШаблон(НСтр("ru = 'Реквизит %1 отсутствует в табличной части %2.';
											|en = 'Attribute %1 is missing in the table %2.'"), 
										ИмяРеквизита,
										ИмяТЧ),
							"");
					
				КонецЕсли;
		КонецЦикла;
		
		Для каждого ИмяЭлемента Из ПараметрНастройки.ЭлементыФормы Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(НСтр("ru = 'Отсутствует элемент формы %1.';
										|en = 'The %1 form item is missing.'"), 
									ИмяЭлемента),
						"");
				
			Иначе
				ЭлементУправленияФормы = Форма.Элементы[ИмяЭлемента];
				РеквизитВШапке = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементУправленияФормы) = Неопределено;
				ИмяСвойстваДляПроверки = ?(РеквизитВШапке, "Гиперссылка", "ГиперссылкаЯчейки");
				
				Если НЕ ЭлементУправленияФормы[ИмяСвойстваДляПроверки] Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(
						НСтр("ru = 'Не заполнено значение свойства %1 для элемента формы %2.';
							|en = 'The value of property %1 for form element %2 cannot be blank.'"),
							ИмяСвойстваДляПроверки,
							ИмяЭлемента),
						"");
					
				КонецЕсли;
				
				Если ЭлементУправленияФормы.ПутьКДанным <> ПараметрНастройки.Представление
					И НЕ СтрНайти(ЭлементУправленияФормы.ПутьКДанным, "." + ПараметрНастройки.Представление) Тогда 
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
						Ошибки,
						"",
						СтрШаблон(
						НСтр("ru = 'Элемент формы %1 должен быть привязан к служебному реквизиту %2.';
							|en = 'Form element %1 must be associated with internal attribute %2.'"),
							ИмяЭлемента,
							ПараметрНастройки.Представление),
						"");
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
	
	Если НЕ Ошибки = Неопределено Тогда
		ТекстИсключения = НСтр("ru = 'Найдены ошибки при проверке параметров настройки счетов учета';
								|en = 'Errors found while validating ledger account settings'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоИзИсточников(ТекущийОбъект, ДанныеНастройкиСчетовУчета)

	ОбъектМетаданные = ТекущийОбъект.Метаданные();
	
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
			
		Если ПараметрыНастройки.ИсточникиПодбораСубконто.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Данные = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(ТекущийОбъект, ПараметрыНастройки.ПутьКДанным);
		Если ОбъектМетаданные.ТабличныеЧасти.Содержит(ОбъектМетаданные.Родитель().НайтиПоТипу(ТипЗнч(Данные))) Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				ЗаполнитьСубконтоИзИсточника(СтрокаТаблицы, ТекущийОбъект, ПараметрыНастройки, ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета);
			КонецЦикла;
		Иначе
			ЗаполнитьСубконтоИзИсточника(Данные, ТекущийОбъект, ПараметрыНастройки, ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСубконтоИзИсточника(КонтекстНастройки, ТекущийОбъект, ПараметрыНастройки, НастройкиСчетовУчета)
	
	Если НЕ ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНастройки = НастройкиСчетовУчета[КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]];
	Если ДанныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	Если ЗначениеЗаполнено(ДанныеНастройки.СчетУчета) Тогда
		ЗаполнитьСубконтоВДанныхНастройки(ДанныеНастройки, ПараметрыНастройки, КонтекстНастройки, ТекущийОбъект);
	КонецЕсли;
	//-- Локализация
	
	//++ НЕ УТКА
	Для Каждого ДанныеМеждународнойНастройки Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
		Если ЗначениеЗаполнено(ДанныеМеждународнойНастройки.СчетУчета) Тогда
			ЗаполнитьСубконтоВДанныхНастройки(ДанныеМеждународнойНастройки, ПараметрыНастройки, КонтекстНастройки, ТекущийОбъект);
		КонецЕсли;
	КонецЦикла;
	//-- НЕ УТКА
	
КонецПроцедуры

Процедура ЗаполнитьСубконтоВДанныхНастройки(ДанныеНастройки, ПараметрыНастройки, КонтекстНастройки, ТекущийОбъект)
	
	СвойстваСчета = НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(ДанныеНастройки.СчетУчета);
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
		Для Каждого Источник Из ПараметрыНастройки.ИсточникиПодбораСубконто Цикл
			Если Не ЗначениеЗаполнено(Источник.Значение) 
				ИЛИ Не ЗначениеЗаполнено(Источник.Представление) Тогда
				Продолжить;
			КонецЕсли; 
			Если НЕ ОписаниеТиповСубконто.СодержитТип(Источник.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ЧастиПутиКДанным = СтрРазделить(Источник.Представление, ".");
			
			ИндексИмениРеквизита = ЧастиПутиКДанным.Количество() - 1;
			ВТаблице = (ЧастиПутиКДанным.Количество() = 3);
			Если ВТаблице Тогда
				Значение = КонтекстНастройки[ЧастиПутиКДанным[ИндексИмениРеквизита]];
			Иначе
				Значение = ТекущийОбъект[ЧастиПутиКДанным[ИндексИмениРеквизита]];
			КонецЕсли;
			Если ЗначениеЗаполнено(Значение) Тогда
				ДанныеНастройки["Субконто" + НомерСубконто] = Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьНеактуальныеНастройкиОтраженияВОбъекте(Форма, Объект, МассивПараметровНастройки)
	
	Для каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		
		ЭтоТаблицаФормы = Ложь;
		
		Если НЕ СтрНачинаетсяС(ПараметрыНастройки.ПутьКДанным, "Объект")
			И ПараметрыНастройки.ЭлементыФормы.Количество() = 1 Тогда
			ЭлементФормы = Форма.Элементы[ПараметрыНастройки.ЭлементыФормы[0]];
			ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементФормы);
			ЭтоТаблицаФормы = ТаблицаФормы <> Неопределено;
		КонецЕсли;
		
		Если ЭтоТаблицаФормы Тогда
			Продолжить; // должны обработать перед записью формы на клиенте. См. НастройкаСчетовУчетаКлиент.ПередЗаписьюНаКлиенте
		КонецЕсли;
		
		Данные = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Объект, ПараметрыНастройки.ПутьКДанным); // ДанныеФормыКоллекция - 

		// Только в данных формы есть ТипСтатьи, поэтому получим их
		ДанныеФормы = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
		
		Если ТипЗнч(ДанныеФормы) = Тип("ДанныеФормыКоллекция") Тогда
			Для каждого СтрокаТаблицы Из Данные Цикл
				СтрокаДанныхФормы = ДанныеФормы[Данные.Индекс(СтрокаТаблицы)];
				ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), СтрокаДанныхФормы[ПараметрыНастройки.ТипСтатьи], Неопределено);
				ОчиститьНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ТипСтатьи);
			КонецЦикла;
		Иначе
			ТипСтатьи = ?(ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи), Форма[ПараметрыНастройки.ТипСтатьи], Неопределено);
			ОчиститьНастройкиОтражения(Данные, ПараметрыНастройки, ТипСтатьи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНастройкиОтражения(Данные, ПараметрыНастройки, ТипСтатьи)
	
	Если Не ПараметрыНастройки.ДоступностьПоОперации Или (ТипСтатьи <> Неопределено И ТипСтатьи <> 3) Тогда
		Данные[ПараметрыНастройки.НастройкаСчетовУчета] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьКолонкаВТЧ(СписокКолонокТЧ, ИмяКолонки)
	
	Возврат Не СписокКолонокТЧ.Найти(ИмяКолонки) = Неопределено;
	
КонецФункции

Функция ИмяТЧПоПутиКДанным(ПутьКДанным)
	
	//Выделяем имя ТЧ из пути к данным
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Если МассивПодстрок.Количество() = 3 Тогда
		Возврат МассивПодстрок[1] ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяРеквизитаПоПутиКДанным(ПутьКДанным)
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Возврат МассивПодстрок[МассивПодстрок.Количество() - 1] ;
	
КонецФункции

Процедура СохранитьДанныеНастроекСчетовВДанныхМеханизма(Форма, ДанныеНастройкиСчетовУчета, Копирование = Ложь)
	
	НастройкиСчетовУчета = Новый Массив();
	СоответствиеНастроек = Новый Соответствие();
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		КонтекстНастройки = НастройкаСчетовУчетаКлиентСервер.ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
		Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
			Для Каждого СтрокаТаблицы Из КонтекстНастройки Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
					НастройкиСчетовУчета.Добавить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета]);
					Если Копирование Тогда
						НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
						СоответствиеНастроек.Вставить(СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета], НоваяНастройка);
						СтрокаТаблицы[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройка;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
			НастройкиСчетовУчета.Добавить(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]);
			Если Копирование Тогда
				НоваяНастройка = НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета();
				СоответствиеНастроек.Вставить(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета], НоваяНастройка);
				КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета] = НоваяНастройка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеНастроек = ДанныеНастроекСчетовУчета(НастройкиСчетовУчета);
	
	Для Каждого НастройкаСчетов Из НастройкиСчетовУчета Цикл
		Если Копирование Тогда
			ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(СоответствиеНастроек[НастройкаСчетов], ДанныеНастроек[НастройкаСчетов]);
		Иначе
			ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(НастройкаСчетов, ДанныеНастроек[НастройкаСчетов]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйЭлементНастройкиСчетовУчета(ДанныеНастройки, ПометкаУдаления, Владелец, СсылкаНового = Неопределено) Экспорт
	
	НастройкаСчетовОбъект = Справочники.НастройкиСчетовУчетаПрочихОпераций.СоздатьЭлемент();
	
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		НастройкаСчетовОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
		
	//++ Локализация
	ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект, ДанныеНастройки, НастройкаСчетовУчетаКлиентСервер.РеквизитыНастройкиСчетаУчета());
	//-- Локализация
	
	//++ НЕ УТКА
	Если ТипЗнч(ДанныеНастройки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		РезультатНастройкиМеждународногоУчета = ДанныеНастройки.НастройкиМеждународногоУчета; // ВыборкаИзРезультатаЗапроса -
		ВыборкаНастройкиМеждународногоУчета = РезультатНастройкиМеждународногоУчета.Выбрать();
		Пока ВыборкаНастройкиМеждународногоУчета.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект.НастройкиМеждународногоУчета.Добавить(), ВыборкаНастройкиМеждународногоУчета);
		КонецЦикла;
	Иначе
		Для Каждого НастройкаМеждународногоУчета Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
			ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект.НастройкиМеждународногоУчета.Добавить(), НастройкаМеждународногоУчета);
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	НастройкаСчетовОбъект.ВладелецНастройки = Владелец;
	НастройкаСчетовОбъект.ПометкаУдаления = ПометкаУдаления;
	НастройкаСчетовОбъект.Записать();
	
	Возврат НастройкаСчетовОбъект.Ссылка;
	
КонецФункции

Функция НастройкаСчетовУчетаИзменена(ДанныеНастройки, ПометкаУдаления, СохраненныеДанныеНастройки)
	
	НастройкаИзменена = ПометкаУдаления <> СохраненныеДанныеНастройки.ПометкаУдаления;
	
	//++ Локализация
	НастройкаИзменена = НастройкаИзменена ИЛИ НастройкаСчетаУчетаИзменена(ДанныеНастройки, СохраненныеДанныеНастройки);
	//-- Локализация
	
	//++ НЕ УТКА
	Если НЕ НастройкаИзменена Тогда
		РезультатСохраненныеНастройкиМеждународногоУчета = СохраненныеДанныеНастройки.НастройкиМеждународногоУчета; // ВыборкаИзРезультатаЗапроса -
		СохраненныеНастройкиМеждународногоУчета = РезультатСохраненныеНастройкиМеждународногоУчета.Выбрать();
		
		Если ТипЗнч(ДанныеНастройки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			РезультатНастройкиМеждународногоУчета = ДанныеНастройки.НастройкиМеждународногоУчета; // ВыборкаИзРезультатаЗапроса -
			ВыборкаНастройкиМеждународногоУчета = РезультатНастройкиМеждународногоУчета.Выбрать();
			Если СохраненныеНастройкиМеждународногоУчета.Количество() = ВыборкаНастройкиМеждународногоУчета.Количество() Тогда
				Пока ВыборкаНастройкиМеждународногоУчета.Следующий() Цикл
					СохраненныеНастройкиМеждународногоУчета.Сбросить();
					Если СохраненныеНастройкиМеждународногоУчета.НайтиСледующий(ВыборкаНастройкиМеждународногоУчета.ПланСчетов, "ПланСчетов") Тогда
						НастройкаИзменена = НастройкаСчетаУчетаИзменена(ВыборкаНастройкиМеждународногоУчета, СохраненныеНастройкиМеждународногоУчета);
					Иначе
						НастройкаИзменена = Истина;
					КонецЕсли;
					Если НастройкаИзменена Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НастройкаИзменена = Истина;
			КонецЕсли;
		ИначеЕсли СохраненныеНастройкиМеждународногоУчета.Количество() = ДанныеНастройки.НастройкиМеждународногоУчета.Количество() Тогда
			Для Каждого НастройкаМеждународногоУчета Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
				СохраненныеНастройкиМеждународногоУчета.Сбросить();
				Если СохраненныеНастройкиМеждународногоУчета.НайтиСледующий(НастройкаМеждународногоУчета.ПланСчетов, "ПланСчетов") Тогда
					НастройкаИзменена = НастройкаСчетаУчетаИзменена(НастройкаМеждународногоУчета, СохраненныеНастройкиМеждународногоУчета);
				Иначе
					НастройкаИзменена = Истина;
				КонецЕсли;
				Если НастройкаИзменена Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НастройкаИзменена = Истина;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	Возврат НастройкаИзменена;
	
КонецФункции

Функция НастройкаСчетаУчетаИзменена(ДанныеНастройки, СохраненныеДанныеНастройки)
	
	НастройкаИзменена = Ложь;
	
	РеквизитыНастройки = Новый Структура(НастройкаСчетовУчетаКлиентСервер.РеквизитыНастройкиСчетаУчета());
	Для Каждого РеквизитНастройки Из РеквизитыНастройки Цикл
		НастройкаИзменена = НастройкаИзменена ИЛИ ДанныеНастройки[РеквизитНастройки.Ключ] <> СохраненныеДанныеНастройки[РеквизитНастройки.Ключ];
		Если НастройкаИзменена Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат НастройкаИзменена;
	
КонецФункции

Процедура ИзменитьЭлементНастройкиСчетовУчета(СсылкаНастройки, ДанныеНастройки, ПометкаУдаления, Владелец = Неопределено)
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НастройкиСчетовУчетаПрочихОпераций");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНастройки);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НастройкаСчетовОбъект = СсылкаНастройки.ПолучитьОбъект();
		
		//++ Локализация
		ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект, ДанныеНастройки, НастройкаСчетовУчетаКлиентСервер.РеквизитыНастройкиСчетаУчета());
		//-- Локализация
		
		НастройкаСчетовОбъект.НастройкиМеждународногоУчета.Очистить();
		
		//++ НЕ УТКА
		Если ТипЗнч(ДанныеНастройки) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			РезультатНастройкиМеждународногоУчета = ДанныеНастройки.НастройкиМеждународногоУчета; // ВыборкаИзРезультатаЗапроса -
			ВыборкаНастройкиМеждународногоУчета = РезультатНастройкиМеждународногоУчета.Выбрать();
			Пока ВыборкаНастройкиМеждународногоУчета.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект.НастройкиМеждународногоУчета.Добавить(), ВыборкаНастройкиМеждународногоУчета);
			КонецЦикла;
		Иначе
			Для Каждого НастройкаМеждународногоУчета Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
				ЗаполнитьЗначенияСвойств(НастройкаСчетовОбъект.НастройкиМеждународногоУчета.Добавить(), НастройкаМеждународногоУчета);
			КонецЦикла;
		КонецЕсли;
		//-- НЕ УТКА
		
		Если Владелец <> Неопределено И НЕ ЗначениеЗаполнено(НастройкаСчетовОбъект.ВладелецНастройки) Тогда
			НастройкаСчетовОбъект.ВладелецНастройки = Владелец;
		КонецЕсли;
		
		НастройкаСчетовОбъект.ПометкаУдаления = ПометкаУдаления;
		НастройкаСчетовОбъект.Записать();
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
			
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьЗначениеРеквизитаОбъекта(Объект, ПутьКДанным, Значение)
	
	Если ТипЗнч(ПутьКДанным) = Тип("Массив") Тогда
		Объект[ПутьКДанным[0]][ПутьКДанным[1]][ПутьКДанным[2]] = Значение;
	Иначе
		Объект[ПутьКДанным] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВерсиюНастройкиСчетовУчета(Объект, ПутьКДанным)
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор();
	УстановитьЗначениеРеквизитаОбъекта(Объект, ПутьКДанным, УникальныйИдентификатор);
	
КонецПроцедуры

Функция ЭтоПроизвольнаяФорма(Форма, ДанныеНастройкиСчетовУчета)
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если НЕ ПустаяСтрока(ПараметрыНастройки.ПутьКДанным) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоФормаОбработки(Форма)
	
	Возврат СтрНачинаетсяС(Форма.ИмяФормы, "Обработка.");
	
КонецФункции

#КонецОбласти

Функция ДанныеНастроекСчетовУчетаПоУмолчаниюПакетно(КэшированныеЗначения, ПутьКДанным, Знач ДанныеНастройкиСчетовУчета = Неопределено)
	
	ВозвращаемоеЗначение = Новый Соответствие();
	
	//++ НЕ УТКА
	Если ДанныеНастройкиСчетовУчета <> Неопределено Тогда
		СтатьиСНастройкамиПоОбъектам = ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам;
	Иначе
		СтатьиСНастройкамиПоОбъектам = МеждународныйУчетСерверПовтИсп.СтатьиАктивовПассивовСНастройкамиПоОбъектам();
	КонецЕсли;
	//-- НЕ УТКА
	
	ИмяЗапроса = "НастройкаСчетовУчетаПоУмолчанию" + СтрЗаменить(ПутьКДанным, ".", "");
	
	ДанныеДляОбработки = ПакетнаяОбработкаТабличнойЧастиСервер.ДанныеДляОбработкиСтроки(ИмяЗапроса, КэшированныеЗначения);
	
	Если Не ДанныеДляОбработки = Неопределено Тогда
	
		Для Каждого ВыборкаНастройки Из ДанныеДляОбработки Цикл
			ДанныеНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовУчета();
			НастройкаЗаполнена = Ложь;
			//++ Локализация
			Если ЗначениеЗаполнено(ВыборкаНастройки.СчетУчета) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеНастройки, ВыборкаНастройки, НастройкаСчетовУчетаКлиентСервер.РеквизитыНастройкиСчетаУчета());
				НастройкаЗаполнена = Истина;
			КонецЕсли;
			//-- Локализация

			//++ НЕ УТКА
			Если СтатьиСНастройкамиПоОбъектам.Найти(ВыборкаНастройки.Ссылка) = Неопределено Тогда
				Для Каждого ВыборкаНастройкиМеждународногоУчета Из ВыборкаНастройки.НастройкиМеждународногоУчета Цикл
					Если ЗначениеЗаполнено(ВыборкаНастройкиМеждународногоУчета.СчетУчета) Тогда
						ДанныеМеждународнойНастройки = НастройкаСчетовУчетаКлиентСервер.СоставНастройкиСчетовМеждународногоУчета();
						ЗаполнитьЗначенияСвойств(ДанныеМеждународнойНастройки, ВыборкаНастройкиМеждународногоУчета);
						ДанныеНастройки.НастройкиМеждународногоУчета.Добавить(ДанныеМеждународнойНастройки);
						НастройкаЗаполнена = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			//-- НЕ УТКА
			
			Если НастройкаЗаполнена Тогда
				ВозвращаемоеЗначение.Вставить(ВыборкаНастройки.Ссылка,
					Новый Структура("ДанныеНастройки,НастройкаСчетовУчета",
						ДанныеНастройки,
						НастройкаСчетовУчетаСлужебныйВызовСервера.СсылкаНовогоЭлементаНастройкиСчетовУчета()));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//++ Локализация

Функция ДоступнаНастройкаСчетовУчета()
	
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовРеглУчета();
	//++ НЕ УТ
	ДоступнаНастройкаСчетовУчета = ДоступнаНастройкаСчетовУчета И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета);
	//-- НЕ УТ
	
	Возврат ДоступнаНастройкаСчетовУчета; 
	
КонецФункции

#Область ДобавлениеСчетовУчетаНаФорму

Функция ЭлементСчетаУчетаНаФорме(ИмяЭлементаНастройки, Параметры, ТипЭлемента = "СчетУчета")
	
	Настройки = Параметры.Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	ЭлементФормы = ДобавитьЭлементНаФорму(ИмяЭлементаНастройки, Параметры, ТипЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Заголовок = ?(ЗначениеЗаполнено(ЭлементФормы.Заголовок), ЭлементФормы.Заголовок, Параметры.Представление);
		ЭлементФормы.Видимость = Параметры.ЭлементВыводится;
		Если ЭлементФормы.Видимость Тогда
			Если ТипЭлемента <> "Субконто" И ТипЭлемента <> "ДопПоле" Тогда
				ЭлементФормы.ПараметрыВыбора = НастройкаСчетовУчетаКлиентСервер.ПараметрыВыбораСчетаУчета(ИмяЭлементаНастройки, Настройки, ТипЭлемента = "СчетУчетаДолгосрочный");
			КонецЕсли;
			Если Настройки.ИспользуютсяДолгосрочныеСчетаУчета И Не Настройки.РедактированиеВСписке
				И НастройкаСчетовУчетаКлиентСервер.ИспользуетсяДолгосрочныйСчет(ИмяЭлементаНастройки) Тогда
				Если ТипЭлемента = "СчетУчетаДолгосрочный" И Не Настройки.РедактированиеВСписке
					И СтрЗаканчиваетсяНа(Параметры.ГруппаДляДобавления.Имя, "Долгосрочные") Тогда
					// Для долгосрочных счетов учета не выводим заголовок только тогда, когда подчиненных групп нет,
					// поэтому проверяем на окончание, так как общая группа всегда будет заканчиваться на "Долгосрочные".
					ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
				МассивТекстовПодсказки = Новый Массив;
				МассивТекстовПодсказки.Добавить(ЭлементФормы.Заголовок);
				МассивТекстовПодсказки.Добавить("-");
				МассивТекстовПодсказки.Добавить(?(ТипЭлемента = "СчетУчетаДолгосрочный", НСтр("ru = 'Долгосрочный';
																								|en = 'Long-term'"), НСтр("ru = 'Краткосрочный';
																															|en = 'Short-term'")));
				МассивТекстовПодсказки.Добавить(НСтр("ru = 'счет учета';
													|en = 'gL account'"));
				ЭлементФормы.Подсказка = СтрСоединить(МассивТекстовПодсказки, " ");
			КонецЕсли;
			Если Настройки.РедактированиеВСписке Тогда
				УстановитьУсловноеОформление(Параметры.Форма, Параметры.РазделУчета, ИмяЭлементаНастройки, ТипЭлемента);
			КонецЕсли;
			НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваСчетовНаФорме(Параметры.Форма, ИмяЭлементаНастройки, Параметры, ТипЭлемента);
			Если Не Настройки.ДоступноИзменениеНастроекСчетовУчета Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

// Добавляет элемент на форму, возвращает ссылку на него
// 
// Параметры:
// 	ИмяЭлемента - Строка -
// 	Параметры - Структура - содержит в том числе:
// 		* РазделУчета - Строка -
// 		* Форма - ФормаКлиентскогоПриложения - 
// 	ТипЭлемента - Строка - название типа элемента формы
// Возвращаемое значение:
// 	ГруппаФормы, ПолеФормы -
Функция ДобавитьЭлементНаФорму(ИмяЭлемента, Параметры, ТипЭлемента = "СчетУчета")
	
	Настройка = Параметры.Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	ИмяЭлементаНаФорме = НастройкаСчетовУчетаКлиентСервер.ИмяЭлементаНаФорме(Настройка, Параметры.РазделУчета, ИмяЭлемента, ТипЭлемента);
	
	ЭлементФормы = Параметры.Форма.Элементы.Найти(ИмяЭлементаНаФорме);
	Если ЭлементФормы <> Неопределено Или Не Параметры.СоздаватьВСлучаеОтсутствия Или Не Параметры.ЭлементВыводится Тогда
		Если Не Параметры.ЭлементВыводится И ЭлементФормы <> Неопределено Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		Возврат ЭлементФормы;
	КонецЕсли;
	
	ТипЭлементаФормы = ?(СтрНачинаетсяС(ТипЭлемента, "Группа"), Тип("ГруппаФормы"), Тип("ПолеФормы"));
	
	Если ТипЭлемента = "Команда" Тогда
		ИмяКоманды = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка,, ИмяЭлемента, ТипЭлемента);
		КомандаФормы = Параметры.Форма.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду"; // универсальный обработчик
		КомандаФормы.Заголовок = Параметры.Представление;
		ТипЭлементаФормы = Тип("КнопкаФормы");
	КонецЕсли;
	
	ЭлементФормы = Параметры.Форма.Элементы.Добавить(ИмяЭлементаНаФорме, ТипЭлементаФормы, Параметры.ГруппаДляДобавления);
	Если СтрНачинаетсяС(ТипЭлемента, "Группа") Тогда
		ЭлементФормы.Вид = ?(Настройка.РедактированиеВСписке, ВидГруппыФормы.ГруппаКолонок, ВидГруппыФормы.ОбычнаяГруппа);
		ЭлементФормы.Группировка = ?(Настройка.РедактированиеВСписке, ГруппировкаКолонок.Горизонтальная, ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно);
		Если Не Настройка.РедактированиеВСписке Тогда
			ЭлементФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
		КонецЕсли;
		Если Настройка.СворачиваемыеГруппы.Найти(ИмяЭлемента) <> Неопределено Тогда
			ЭлементФормы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
			ЭлементФормы.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
			ЭлементФормы.ОтображатьОтступСлева = Ложь;
			ЭлементФормы.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
			ЭлементФормы.Скрыть();
		КонецЕсли;
	ИначеЕсли ТипЭлемента = "Команда" Тогда
		ЭлементФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		ЭлементФормы.ИмяКоманды = ИмяКоманды;
	ИначеЕсли ТипЭлемента = "Переключатель" Тогда
		ЭлементФормы.Вид = ВидПоляФормы.ПолеПереключателя;
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементФормы.ВидПереключателя = ВидПереключателя.Тумблер;
		ЭлементФормы.ПутьКДанным = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, Параметры.РазделУчета, ИмяЭлемента, ТипЭлемента);
		ЭлементФормы.СписокВыбора.Добавить("ПоказатьВсе", НСтр("ru = 'Показать все';
																|en = 'Show all'"));
		ЭлементФормы.СписокВыбора.Добавить("СвернутьВсе", НСтр("ru = 'Свернуть все';
																|en = 'Collapse all.'"));
		ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииСчетаУчета");
	Иначе
		ЭлементФормы.Вид = ?(ТипЭлемента = "ДопПоле", ВидПоляФормы.ПолеФлажка, ВидПоляФормы.ПолеВвода);
		ЭлементФормы.ПутьКДанным = НастройкаСчетовУчетаКлиентСервер.ИмяРеквизитаНаФорме(Настройка, Параметры.РазделУчета, ИмяЭлемента, ТипЭлемента);
		Если СтрНачинаетсяС(ТипЭлемента, "СчетУчета") И Не Настройка.РедактированиеВСписке Тогда
			ЭлементФормы.Ширина = 9;
			ЭлементФормы.РастягиватьПоГоризонтали = Ложь;
		КонецЕсли;
		Если ТипЭлемента = "Субконто" И Не Настройка.РедактированиеВСписке Тогда
			ЭлементФормы.МаксимальнаяШирина = 16;
			ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
			Если Параметры.ГруппаДляДобавления <> Неопределено И СтрЗаканчиваетсяНа(Параметры.ГруппаДляДобавления.Имя, "Субконто") Тогда
				ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
			ЭлементФормы.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		КонецЕсли;
		Если ТипЭлемента = "СчетУчета" И (НастройкаСчетовУчетаКлиентСервер.СчетИспользуетСубконто(ИмяЭлемента) ИЛИ Настройка.СворачиваемыеГруппы.Количество()) Тогда
			ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииСчетаУчета");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

Процедура ДобавитьГруппыНаФормуДляТекущегоЭлемента(ИмяЭлемента, Параметры, ТипЭлемента = "СчетУчета")
	
	Настройка = Параметры.Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	ТипЭлементаГруппы = ?(ТипЭлемента <> "СчетУчетаДолгосрочный", "Группа", "ГруппаДолгосрочные");
	
	Если Настройка.ИспользуютсяДолгосрочныеСчетаУчета И Настройка.СворачиваемыеГруппы.Количество() = 0 Тогда
		// Добавим на форму группы долгосрочные и краткосрочные (если есть сворачиваемые группы - то добавляем только в подгруппы):
		
		ДобавитьГруппуДолгосрочныхСчетов(ТипЭлементаГруппы, Параметры, Настройка.РедактированиеВСписке);
		
	КонецЕсли;
	
	НастройкиГруппы = НастройкаСчетовУчетаКлиентСервер.ГруппаСчетаУчета(ИмяЭлемента, Параметры.РазделУчета, Настройка.РедактированиеВСписке, ТипЭлемента);
	
	Если НастройкиГруппы <> Неопределено Тогда
		
		Параметры.ЭлементВыводится = Истина;
		ГруппаНаФорме = ДобавитьЭлементНаФорму(НастройкиГруппы.ИмяГруппы, Параметры, ТипЭлементаГруппы);
		Если ГруппаНаФорме <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(ГруппаНаФорме.Заголовок) Тогда
				ЗаполнитьЗначенияСвойств(ГруппаНаФорме, НастройкиГруппы);
				Если Настройка.РедактированиеВСписке Тогда
					ГруппаНаФорме.ОтображатьВШапке = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Настройка.СворачиваемыеГруппы.Найти(НастройкиГруппы.ИмяГруппы) <> Неопределено 
				И ГруппаНаФорме.ЗаголовокСвернутогоОтображения = "" Тогда
				ГруппаНаФорме.ЗаголовокСвернутогоОтображения = ГруппаНаФорме.Заголовок
					 + НастройкаСчетовУчетаКлиентСервер.ДопПредставлениеГруппы(Параметры.Форма, НастройкиГруппы.ИмяГруппы);
			КонецЕсли;
			
			Параметры.ГруппаДляДобавления = ГруппаНаФорме;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Настройка.ИспользуютсяДолгосрочныеСчетаУчета И Настройка.СворачиваемыеГруппы.Количество() <> 0 Тогда
		// Добавим на форму группы долгосрочные и краткосрочные (если есть сворачиваемые группы - то добавляем только в подгруппы):
		
		ДобавитьГруппуДолгосрочныхСчетов(ТипЭлементаГруппы, Параметры, Настройка.РедактированиеВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьГруппуДолгосрочныхСчетов(ТипЭлементаГруппы, Параметры, РедактированиеВСписке)
	
	Параметры.ЭлементВыводится = Истина;
	ИмяГруппы = ?(ТипЭлементаГруппы = "Группа", "Краткосрочные", "Долгосрочные");
	ГруппаНаФорме = ДобавитьЭлементНаФорму(ИмяГруппы, Параметры, ТипЭлементаГруппы);
	Если ГруппаНаФорме <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ГруппаНаФорме.Заголовок) Тогда
			ГруппаНаФорме.Заголовок = ИмяГруппы;
			Если Не РедактированиеВСписке Тогда
				ГруппаНаФорме.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ГруппаДляДобавления = ГруппаНаФорме;
	
КонецПроцедуры

Функция ИнициализироватьРазделНаФорме(Форма, РазделУчета, Параметры)
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Параметры = ПараметрыДобавленияЭлементаНаФорму(Форма);
	ГруппаРаздела = Неопределено;
	Параметры.РазделУчета = РазделУчета.Значение;
	Параметры.ЭлементВыводится = РазделУчета.Пометка;
	
	Если Настройка.РазбитьПоРазделамЭлементы Тогда
		ГруппаРаздела = ДобавитьЭлементНаФорму(РазделУчета.Значение, Параметры, "Группа");
		Если ГруппаРаздела <> Неопределено Тогда
			ГруппаРаздела.Заголовок = РазделУчета.Представление;
		КонецЕсли;
		Параметры.ГруппаДляДобавления = ГруппаРаздела;
	КонецЕсли;
	
	Возврат ГруппаРаздела;
	
КонецФункции

Функция ПараметрыДобавленияЭлементаНаФорму(Форма)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Форма", Форма);
	СтруктураВозврата.Вставить("РазделУчета", "");
	СтруктураВозврата.Вставить("ГруппаДляДобавления", Форма.Элементы[Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.ИмяГруппыНастроекСчетовУчета]);
	СтруктураВозврата.Вставить("СоздаватьВСлучаеОтсутствия", Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.СоздаватьВСлучаеОтсутствия);
	СтруктураВозврата.Вставить("ЭлементВыводится", Истина);
	СтруктураВозврата.Вставить("Представление", "");
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьОбщиеРеквизитыВлияющиеНаНастройкуСчетовУчета(РазделыУчета, Реквизиты)
	
	Реквизиты.Вставить("ТолькоПросмотр", Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПорядокОтраженияНаСчетахУчета));
	Реквизиты.Вставить("ПоказыватьДолгосрочныеСчета", Ложь);
	
	Для каждого РазделУчета Из РазделыУчета Цикл
		
		Если РазделУчета = "Расходы" Или РазделУчета = "Доходы" Тогда
			
			Реквизиты.Вставить("СписокРазделовУчета", Неопределено);
			
		КонецЕсли;
		
		Если РазделУчета = "ДенежныеСредства" Тогда
			
			Реквизиты.Вставить("ВалютаРеглУчета", Константы.БазоваяВалютаПоУмолчанию.Получить());
			
		КонецЕсли;
		
		Если РазделУчета = "Резервы" Тогда
			
			Реквизиты.Вставить("ФормироватьРезервыПредстоящихРасходов", ПолучитьФункциональнуюОпцию("ФормироватьРезервыПредстоящихРасходов"));
			
		КонецЕсли;
		
		Если РазделУчета = "НоменклатураСобственная" Или РазделУчета = "Номенклатура" Тогда
			
			КомиссияМеждуОрганизациями = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями"),
				ОбщегоНазначенияУТПовтИсп.ИспользуетсяСпособПередачиТоваровМеждуОрганизациями(
				Перечисления.СпособыПередачиТоваров.ПередачаНаКомиссию), ЛОЖЬ);
			
			Реквизиты.Вставить("ИспользуютсяМалоценные", ПолучитьФункциональнуюОпцию("ПрименятьСписаниеСтоимостиМалоценныхТМЦНаРасходы"));
			Реквизиты.Вставить("ИспользуетсяЕНВД", ПолучитьФункциональнуюОпцию("ИспользуетсяЕНВД"));
			Реквизиты.Вставить("ИспользоватьКомиссиюПриПродажах",
				ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") ИЛИ КомиссияМеждуОрганизациями);
			Реквизиты.Вставить("ИспользоватьОтгрузкуБезПереходаПраваСобственности", ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности"));
			
			Реквизиты.Вставить("ИспользоватьПроизводствоНаСтороне",
				ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне2_5")
				//++ Устарело_Переработка24
				Или ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")
				//-- Устарело_Переработка24
				Или Ложь);
			
			Реквизиты.Вставить("ИспользоватьТоварыВПутиОтПоставщиков", ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков"));
			
			СписокВидовПрочихДоходовРасходов = Новый СписокЗначений;
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияОбъектовСтроительства"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияПрочегоИмущества"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияКакОказанияФинансовыхУслуг"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияДоНаступленияСрокаПлатежа"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияПраваТребованияПослеНаступленияСрокаПлатежа"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравКромеПраваТребования"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияИмущественныхПравПоОбъектамОбслуживающихПроизводствИХозяйств"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.РеализацияЦенныхБумаг"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.СдачаИмуществаВАрендуИлиСубаренду"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрибыльУбытокПрошлыхЛет"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы"));
			СписокВидовПрочихДоходовРасходов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПрочихДоходовИРасходов.ПрочиеУбыткиПриравненныеКВнереализационнымРасходам"));
			Реквизиты.Вставить("ВидыПрочихДоходовРасходов", СписокВидовПрочихДоходовРасходов);
			
		КонецЕсли;
		
		Если Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов().Найти(РазделУчета) <> Неопределено Тогда
			
			Реквизиты.Вставить("ИспользоватьМногооборотнуюТару", ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару"));
			Реквизиты.Вставить("ИспользоватьНеотфактурованныеПоставки", ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки"));
			Реквизиты.Вставить("ИспользоватьДоговорыКредитовИДепозитов", ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов"));
			Реквизиты.Вставить("УчетДисконтированнойКредиторскойЗадолженностиПоставщикам", ПолучитьФункциональнуюОпцию("УчетДисконтированнойКредиторскойЗадолженностиПоставщикам"));
			Реквизиты.Вставить("СписокРазделовУчета", Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

