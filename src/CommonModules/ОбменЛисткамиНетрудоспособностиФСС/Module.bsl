#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает пространство имен пакета XDTO для обмена ЭЛН с ФСС.
//
// Возвращаемое значение:
//   Строка - Пространство имен пакета XDTO для обмена ЭЛН с ФСС.
//
Функция ПространствоИмен() Экспорт
	Возврат "http://www.fss.ru/integration/types/eln/ins/v01";
КонецФункции

// Возвращает версию формата обмена ЭЛН с ФСС.
//
// Возвращаемое значение:
//   Строка - Версия формата обмена ЭЛН с ФСС.
//
Функция Версия() Экспорт
	Возврат "2.0";
КонецФункции

// Проверяет что причина нетрудоспособности - карантин и что есть сведения об электронном листке нетрудоспособности.
//
// Возвращаемое значение:
//    Булево - Истина если причина нетрудоспособности - карантин и есть сведения об ЭЛН.
//
Функция ЭтоКарантинныйЭЛН(ПричинаНетрудоспособности, НомерЛН) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин
		И РегистрыСведений.СведенияОбЭЛН.ЭтоЭЛН(НомерЛН);
КонецФункции

// Проверяет по номеру ЛН что это ЭЛН и в регистре есть его исходный XML.
Функция ДоступенИсходныйXML(НомерЛН, ГоловнаяОрганизация) Экспорт
	Возврат РегистрыСведений.СведенияОбЭЛН.ДоступенИсходныйXML(НомерЛН, ГоловнаяОрганизация);
КонецФункции

#Область Больничные

Функция ДанныеРеестраВЧастиБольничногоОтправляемыеВФСС(СсылкаРеестра, НомерЛН) Экспорт
	ДанныеРеестраЭЛН = СтруктураДанныхРеестровВЧастиБольничного();
	ЗаполнитьДанныеРеестраЗаполняемыеИзБольничного(ДанныеРеестраЭЛН, СсылкаРеестра, НомерЛН);
	Возврат ДанныеРеестраЭЛН;
КонецФункции

Функция ДанныеБольничногоОтправляемыеВФСС(БольничныйОбъект) Экспорт
	ДанныеБольничногоДляЭЛН = СтруктураДанныхРеестровВЧастиБольничного();
	ЗаполнитьДанныеБольничногоОтправляемыеВФСС(ДанныеБольничногоДляЭЛН, БольничныйОбъект);
	Возврат ДанныеБольничногоДляЭЛН;
КонецФункции

Функция СтруктураДанныхРеестровВЧастиБольничного() Экспорт
	ИменаПолей =
	"ОсновноеМестоРаботы,
	|БазаДляРасчетаСреднегоЗаработка,
	|СреднийДневнойЗаработок,
	|УсловияИсчисленияКод1,
	|УсловияИсчисленияКод2,
	|УсловияИсчисленияКод3,
	|ДатаАктаН1,
	|ДатаНачалаРаботы,
	|ДатаНачалаОплаты,
	|ДатаОкончанияОплаты,
	|СтажЛет,
	|СтажМесяцев,
	|СтажДней,
	|СтажРасширенныйЛет,
	|СтажРасширенныйМесяцев,
	|СтажРасширенныйДней,
	|СуммаОплатыЗаСчетРаботодателя,
	|СуммаОплатыЗаСчетФСС";
	Возврат Новый Структура(ИменаПолей);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаНешифрованногоЗапроса

// Формирует параметры получения электронного листка нетрудоспособности.
//
// Параметры:
//   БольничныйЛист - ДокументОбъект.БольничныйЛист, ДанныеФормыСтруктура - Больничный.
//
// Возвращаемое значение:
//   Структура - Результат выгрузки в XML.
//       * Организация - СправочникСсылка.Организации - Организация, для которой получается ЭЛН.
//       * РегистрационныйНомерФСС - Строка - Рег. номер организации, для которой получается ЭЛН.
//       * ТекстXML - Строка - Сведения, необходимые для получения ЭЛН в формате XML.
//
Функция ВыгрузитьЗапросДляПолученияЭЛН(БольничныйЛист) Экспорт
	Отказ = Ложь;
	ДанныеБольничного = ДанныеБольничногоДляПолученияЭЛН(БольничныйЛист, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен());
	getPrivateLNDataRequest = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("getPrivateLNDataRequest").Тип);
	
	Если ЗначениеЗаполнено(ДанныеБольничного.РегистрационныйНомерСФР) Тогда
		getPrivateLNDataRequest.regNumSFR = ДанныеБольничного.РегистрационныйНомерСФР;
	Иначе
		getPrivateLNDataRequest.regNum    = ДанныеБольничного.РегистрационныйНомерДляОбменаФСС;
	КонецЕсли;
	getPrivateLNDataRequest.lnCode = ДанныеБольничного.НомерЛисткаНетрудоспособности;
	getPrivateLNDataRequest.snils  = ДанныеБольничного.СНИЛС;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, getPrivateLNDataRequest, "getPrivateLNDataRequest");
	
	Результат = Новый Структура("Организация, РегистрационныйНомерФСС, ЭтоРегистрационныйНомерСФР, ТекстXML");
	Результат.Организация             = БольничныйЛист.Организация;
	Результат.ТекстXML                = ЗаписьXML.Закрыть();
	Если ЗначениеЗаполнено(ДанныеБольничного.РегистрационныйНомерСФР) Тогда
		Результат.РегистрационныйНомерФСС    = ДанныеБольничного.РегистрационныйНомерСФР;
		Результат.ЭтоРегистрационныйНомерСФР = Истина;
	Иначе
		Результат.РегистрационныйНомерФСС    = ДанныеБольничного.РегистрационныйНомерДляОбменаФСС;
		Результат.ЭтоРегистрационныйНомерСФР = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует параметры отправки реестра электронных листков нетрудоспособности.
//
// Параметры:
//   Документ - ДокументОбъект.РеестрДанныхЭЛНЗаполняемыхРаботодателем, ДанныеФормыСтруктура - Реестр.
//   ПомещатьВФайл - Булево - Истина, если результат надо поместить в файл и вернуть адрес во временном хранилище.
//   ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы. Обязательный, если ПомещатьВФайл = Истина.
//   ВнутреннийФормат - Булево - Истина, если реестр требуется выгрузить в сокращенном формате для БРО.
//   ИсключатьПринятые - Булево - Истина, если реестр отправляется в сервис и необходимо учитывать состояние строк.
//       Ложь, если выгрузка в файл и требуются все строки, без учета их состояния.
//
// Возвращаемое значение:
//   Структура - Результат выгрузки в XML.
//       * Организация - СправочникСсылка.Организации - Организация, для которой отправляется реестр ЭЛН.
//       * РегистрационныйНомерФСС - Строка - Рег. номер организации, для которой отправляется реестр ЭЛН.
//       * ТекстXML - Строка - Данные реестра в формате XML (электронное представление),
//                             либо пустая строка если ПомещатьВФайл = Истина.
//       * Адрес - Строка - Адрес временного хранилища, по которому размещены двоичные данные файла реестра в формате XML,
//                          либо пустая строка если ПомещатьВФайл = Ложь.
//
Функция ВыгрузитьЗапросДляОтправкиРеестраЭЛН(Документ, ПомещатьВФайл, ИдентификаторФормы, ВнутреннийФормат, ИсключатьПринятые) Экспорт
	РегистрационныйНомерДляОбменаФСС = УчетПособийСоциальногоСтрахованияКлиентСервер.РегистрационныйНомерДляОбменаФСС(Документ);
	
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен());
	
	ParseReestrFileRequest = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("prParseReestrFileRequest").Тип);
	
	Request = ФабрикаXDTO.Создать(ParseReestrFileRequest.Свойства().Получить("request").Тип);
	Request.regNum = РегистрационныйНомерДляОбменаФСС;
	
	XMLFile = ФабрикаXDTO.Создать(Request.Свойства().Получить("pXmlFile").Тип);
	Rowset = ФабрикаXDTO.Создать(XMLFile.Свойства().Получить("rowset").Тип);
	
	Rowset.version          = Версия();
	Rowset.software         = Лев("1С:" + Метаданные.Синоним, 80);
	Rowset.version_software = Лев(Метаданные.Версия, 15);
	
	Rowset.author = Строка(Документ.РеестрСоставил);
	Rowset.phone  = Строка(Документ.ТелефонСоставителя);
	Rowset.email  = Строка(Документ.АдресЭлектроннойПочтыСоставителя);
	
	ФИО = Новый Структура("Руководитель, ГлавныйБухгалтер", Документ.Руководитель, Документ.ГлавныйБухгалтер);
	ЗаполнитьПолныеФИО(ФИО);
	
	ТипСтроки = Rowset.Свойства().Получить("row").Тип;
	
	Для Каждого ДанныеЛН Из Документ.ДанныеЭЛН Цикл
		
		Если ИсключатьПринятые И ДанныеЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС Тогда
			Продолжить;
		КонецЕсли;
		
		Row = Rowset.row.Добавить(ФабрикаXDTO.Создать(ТипСтроки));
		
		Row.lnCode   = ДанныеЛН.НомерЛисткаНетрудоспособности;
		Row.snils    = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(ДанныеЛН.СНИЛС);
		Row.employer = Строка(Документ.Организация);
		Row.emplFlag = ?(ДанныеЛН.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, 1, 0);
		
		УстановитьЗначениеЕслиЗаполнено(Row.innPerson,       ДанныеЛН.ИНН);
		УстановитьЗначениеЕслиЗаполнено(Row.emplRegNo,       Документ.РегистрационныйНомерФСС);
		УстановитьЗначениеЕслиЗаполнено(Row.emplRegNo2,      Документ.ДополнительныйКодФСС);
		УстановитьЗначениеЕслиЗаполнено(Row.approve2,        ФИО.ГлавныйБухгалтер);
		УстановитьЗначениеЕслиЗаполнено(Row.baseAvgSal,      ДанныеЛН.БазаДляРасчетаСреднегоЗаработка);
		УстановитьЗначениеЕслиЗаполнено(Row.baseAvgDailySal, ДанныеЛН.СреднийДневнойЗаработок);
		УстановитьЗначениеЕслиЗаполнено(Row.calcCondition1,  ДанныеЛН.УсловияИсчисленияКод1);
		УстановитьЗначениеЕслиЗаполнено(Row.calcCondition2,  ДанныеЛН.УсловияИсчисленияКод2);
		УстановитьЗначениеЕслиЗаполнено(Row.calcCondition3,  ДанныеЛН.УсловияИсчисленияКод3);
		
		УстановитьЗначение(Row.emplParentNo,   Документ.КодПодчиненностиФСС);
		УстановитьЗначение(Row.approve1,       ФИО.Руководитель);
		УстановитьЗначение(Row.form1Dt,        ДанныеЛН.ДатаАктаН1);
		УстановитьЗначение(Row.returnDateEmpl, ДанныеЛН.ДатаНачалаРаботы);
		УстановитьЗначение(Row.dt1Ln,          ДанныеЛН.ДатаНачалаОплаты);
		УстановитьЗначение(Row.dt2Ln,          ДанныеЛН.ДатаОкончанияОплаты);
		
		НестраховойСтаж = УчетПособийСоциальногоСтрахования.НестраховойСтаж(ДанныеЛН);
		Если НестраховойСтаж.Лет <> 0 Или НестраховойСтаж.Месяцев <> 0 Тогда
			Row.insurYy = ДанныеЛН.СтажРасширенныйЛет;
			Row.insurMm = ДанныеЛН.СтажРасширенныйМесяцев;
			Row.notInsurYy = НестраховойСтаж.Лет;
			Row.notInsurMm = НестраховойСтаж.Месяцев;
		Иначе
			Row.insurYy = ДанныеЛН.СтажЛет;
			Row.insurMm = ДанныеЛН.СтажМесяцев;
			Row.notInsurYy = Неопределено;
			Row.notInsurMm = Неопределено;
		КонецЕсли;
		
		Row.emplPayment = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя;
		Row.fssPayment  = ДанныеЛН.СуммаОплатыЗаСчетФСС;
		Row.payment     = ДанныеЛН.СуммаОплатыЗаСчетРаботодателя + ДанныеЛН.СуммаОплатыЗаСчетФСС;
		
		Если ДанныеЛН.Исправление Тогда
			УстановитьЗначениеЕслиЗаполнено(Row.correctionReason, ДанныеЛН.КодПричиныИсправления);
			УстановитьЗначениеЕслиЗаполнено(Row.correctionNote,   СокрЛП(ДанныеЛН.ОписаниеПричиныИсправления));
		КонецЕсли;
		
	КонецЦикла;
	
	XMLFile.rowset = Rowset;
	Request.pXmlFile = XMLFile;
	ParseReestrFileRequest.request = Request;
	
	Если ВнутреннийФормат Тогда
		ТекстXML = СериализацияБЗК.ОбъектXDTOВСтрокуXML(Rowset, "rowset", Ложь);
	Иначе
		ПакетXDTO = ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/");
		Envelope = ФабрикаXDTO.Создать(ПакетXDTO.КорневыеСвойства.Получить("Envelope").Тип);
		Envelope.Body = ФабрикаXDTO.Создать(Envelope.Свойства().Получить("Body").Тип);
		Envelope.Body.Добавить(ФормаXML.Элемент, ПространствоИмен(), "prParseReestrFileRequest", ParseReestrFileRequest);
		ТекстXML = СериализацияБЗК.ОбъектXDTOВСтрокуXML(Envelope, "Envelope", Истина);
	КонецЕсли;
	
	Результат = Новый Структура("Организация, РегистрационныйНомерФСС, ТекстXML, Адрес");
	Результат.Организация             = Документ.Организация;
	Результат.РегистрационныйНомерФСС = РегистрационныйНомерДляОбменаФСС;
	Результат.ТекстXML                = ТекстXML;
	
	Если ПомещатьВФайл Тогда
		ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, "UTF-8", Истина);
		Результат.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ДанныеБольничногоДляПолученияЭЛН(БольничныйЛист, Отказ)
	Результат = Новый Структура("НомерЛисткаНетрудоспособности, РегистрационныйНомерСФР, РегистрационныйНомерДляОбменаФСС, СНИЛС");
	
	// Номер больничного листа.
	Результат.НомерЛисткаНетрудоспособности = БольничныйЛист.НомерЛисткаНетрудоспособности;
	
	// Регистрационный номер ФСС организации (страхователя).
	ИменаПолей = "РегНомерСФР, НомерСтрахователяФСС";
	СведенияОбОрганизации = СЭДОФСС.СведенияОСтрахователе(БольничныйЛист.Организация, ИменаПолей);
	Результат.РегистрационныйНомерСФР = СведенияОбОрганизации.РегНомерСФР;
	Результат.РегистрационныйНомерДляОбменаФСС = СведенияОбОрганизации.НомерСтрахователяФСС;
	
	// СНИЛС сотрудника на которого оформлен листок нетрудоспособности.
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, БольничныйЛист.Сотрудник, "СтраховойНомерПФР");
	Если КадровыеДанные.Количество() > 0 Тогда
		Результат.СНИЛС = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеФСС(
			КадровыеДанные[0].СтраховойНомерПФР);
	КонецЕсли;
	
	// Проверка результатов.
	ТекстОшибки = УчетПособийСоциальногоСтрахования.ПроверитьНомерЛН(Результат.НомерЛисткаНетрудоспособности);
	Если ТекстОшибки <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "НомерЛисткаНетрудоспособности", "Объект", Отказ);
	КонецЕсли;
	ТекстОшибки = УчетПособийСоциальногоСтрахования.ПроверитьРегистрационныйНомерФСС(
		Результат.РегистрационныйНомерДляОбменаФСС);
	Если ТекстОшибки <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Организация", "Объект", Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Результат.СНИЛС) Тогда
		Текст = НСтр("ru = 'У сотрудника не указан СНИЛС';
					|en = 'SNILS is not specified for the employee'");
		ОбщегоНазначения.СообщитьПользователю(Текст, , "Сотрудник", "Объект", Отказ);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает полные ФИО физических лиц.
//
// Параметры:
//   СтруктураФИО - Структура - По указанным ключам структуры будут размещены полные ФИО.
//       * Ключ - Строка - Имя ключа, по которому будет размещено полное ФИО.
//       * Значение - СправочникСсылка.ФизическиеЛица - Ссылка физ. лица, для которого требуется получить ФИО.
//           После выполнения процедуры превращается в тип "Строка".
//
Процедура ЗаполнитьПолныеФИО(СтруктураФИО)
	МассивФизическихЛиц = Новый Массив;
	Для Каждого КлючИЗначение Из СтруктураФИО Цикл
		МассивФизическихЛиц.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, МассивФизическихЛиц, "ФИОПолные");
	
	Для Каждого КлючИЗначение Из СтруктураФИО Цикл
		КадровыеДанныеФизическогоЛица = ТаблицаКадровыхДанных.Найти(КлючИЗначение.Значение, "ФизическоеЛицо");
		Если КадровыеДанныеФизическогоЛица <> Неопределено Тогда
			ФИО = КадровыеДанныеФизическогоЛица.ФИОПолные;
		ИначеЕсли ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ФИО = Строка(КлючИЗначение.Значение);
		Иначе
			ФИО = "";
		КонецЕсли;
		СтруктураФИО.Вставить(КлючИЗначение.Ключ, ФИО);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьЗначениеЕслиЗаполнено(ИзменяемоеЗначение, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		ИзменяемоеЗначение = Значение;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьЗначение(ИзменяемоеЗначение, Значение)
	Если ЗначениеЗаполнено(Значение) Тогда
		ИзменяемоеЗначение = Значение;
	Иначе
		ИзменяемоеЗначение = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция КодыПричинИсправления(Список = Неопределено) Экспорт
	Если ТипЗнч(Список) <> Тип("СписокЗначений") Тогда
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Список.Добавить("01", НСтр("ru = 'Работником представлены дополнительные сведения для расчета';
								|en = 'Employee has provided additional information for calculation'"));
	Список.Добавить("02", НСтр("ru = 'Работником представлено свидетельство ИНН';
								|en = 'Employee gave the TIN certificate'"));
	Список.Добавить("03", НСтр("ru = 'Изменены регистрационные данные работодателя/сведения о должностных лицах работодателя';
								|en = 'Employer''s registration data/information on employer''s officials was changed'"));
	Список.Добавить("04", НСтр("ru = 'Уточнены условия труда работника/условия исчисления пособия (включая Акт ф. Н-1)';
								|en = 'Employee working conditions/allowance calculation conditions are specified (including certificate N-1 from)'"));
	Список.Добавить("05", НСтр("ru = 'Выявлены ошибки в расчете пособия/подсчете страхового стажа';
								|en = 'Allowance/pensionable service calculation errors are detected'"));
	Список.Добавить("06", НСтр("ru = 'Ошибка оператора';
								|en = 'Provider error'"));
	
	Для Каждого Элемент Из Список Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат Список;
КонецФункции

#КонецОбласти

#Область ЧтениеРасшифрованногоОтвета

Функция ЗагрузитьОтветСервисаФСС(Документ, Операция, АдресРасшифрованногоОтвета, ЗагрузкаИзФайла = Ложь) Экспорт
	Результат = Новый Структура("Отказ, ТекстСообщенияФСС");
	Результат.Отказ = Ложь;
	Результат.ТекстСообщенияФСС = "";
	
	ИсходныйXML = Неопределено;
	СтруктураDOM = Неопределено;
	Попытка
		ИсходныйXML = СериализацияБЗК.СтрокаXMLИзВременногоХранилища(АдресРасшифрованногоОтвета);
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ИсходныйXML);
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при получении содержимого XML: %1';
				|en = 'Error getting XML content: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	Если СтруктураDOM = Неопределено Тогда
		РасшифрованныйОтвет = ПолучитьИзВременногоХранилища(АдресРасшифрованногоОтвета);
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(РасшифрованныйОтвет);
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресРасшифрованногоОтвета);
	
	Попытка
		Если Операция = "getPrivateLNData" Тогда
			
			ДанныеЭЛН = ЭЛНФСС.ДанныеЭЛНИзXML(СтруктураDOM);
			Если Не ДанныеЭЛН.Успех Тогда
				СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Результат.Отказ, ДанныеЭЛН.ТекстОшибки);
				Возврат Результат;
			КонецЕсли;
			
			Если ТипЗнч(Документ) = Тип("Структура") Тогда
				// Метод вызван только для актуализации данных ЭЛН.
				Страхователь = СЭДОФСС.СтраховательОрганизации(Документ.Организация);
				РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОбЭЛН(Страхователь, ИсходныйXML, ДанныеЭЛН);
			Иначе
				// Метод вызван для заполнения больничного.
				ЗаполнитьБольничныйПоДаннымЭЛН(Документ, ДанныеЭЛН, Результат.Отказ, ИсходныйXML);
				Если Результат.Отказ Тогда
					Возврат Результат;
				КонецЕсли;
				ПроверитьФИОСотрудника(Документ, ДанныеЭЛН);
			КонецЕсли;
			
		ИначеЕсли Операция = "prParseReestrFile" Тогда
			
			Результат.ТекстСообщенияФСС = ТекстСообщенияФСС(СтруктураDOM);
			
			УзелRowset = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'infoRowset']");
			Если УзелRowset = Неопределено Тогда
				УзелRow = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'infoRow']");
				Если УзелRow = Неопределено Тогда
					ВызватьИсключение СокрП(НСтр("ru = 'Узел ""infoRowset"" не найден';
												|en = '""infoRowset"" node not found'") + Символы.ПС + Символы.ПС + Результат.ТекстСообщенияФСС);
				КонецЕсли;
				УзелRowset = УзелRow.РодительскийУзел;
			КонецЕсли;
			
			СтрокаXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(УзелRowset);
			ОбъектRowset = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(СтрокаXML);
			ЭлементыRow = СериализацияБЗК.СписокXDTO(ОбъектRowset, "infoRow");
			
			ЗагрузитьРезультатОтправкиРеестраЭЛН(Документ, ЭлементыRow, Результат);
			
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при загрузке ответа ФСС по операции ""%1"":
				|%2
				|
				|XML ответа:
				|%3';
				|en = 'Error importing SSF response to operation ""%1"":
				|%2
				|
				|Response XML:
				|%3'"),
			Операция,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ИсходныйXML);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ТекстСообщенияФСС(СтруктураDOM)
	УзелСообщения = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "mess");
	Если УзелСообщения <> Неопределено Тогда
		ТекстовоеСодержимое = СокрЛП(Строка(УзелСообщения.ТекстовоеСодержимое));
		Если ТекстовоеСодержимое <> "" Тогда
			Возврат НСтр("ru = 'При обмене с ФСС возникли ошибки. Ответ ФСС:';
						|en = 'Errors occurred when exchanging with SSF. SSF response:'") + Символы.ПС + ТекстовоеСодержимое;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

#КонецОбласти

#Область ЗаполнениеБольничногоПоДаннымЭЛН

Процедура ЗаполнитьПоПервичномуБольничномуЛисту(Документ, ДанныеЭЛН) Экспорт
	
	Документ.НомерПервичногоЛисткаНетрудоспособности = ДанныеЭЛН.НомерПервичногоЛН;
	Документ.ЯвляетсяПродолжениемБолезни             = ДанныеЭЛН.ЯвляетсяПродолжениемБолезни;
	Документ.ЗаполнитьПоПервичномуБольничномуЛисту(Неопределено);
	
КонецПроцедуры

Процедура ЗаполнитьСотрудникаПоСНИЛС(Документ, ДанныеЭЛН, Отказ)
	// В документе не заполнен сотрудник и это первичный больничный лист.
	Если ЗначениеЗаполнено(Документ.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПоиска = ЭЛНФСС.КадровыеДанныеСотрудника(ДанныеЭЛН, Документ.ГоловнаяОрганизация, Документ.Организация);
	
	Если РезультатПоиска.Успех Тогда
		ОрганизацияДо = Документ.Организация;
		ЗаполнитьЗначенияСвойств(Документ, РезультатПоиска, "Сотрудник, ФизическоеЛицо, Организация, ГоловнаяОрганизация");
		Если ОрганизацияДо <> Документ.Организация Тогда
			ЗаполнитьПериодРегистрацииВБольничном(Документ);
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатПоиска.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПоиска.ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПериодРегистрацииВБольничном(Документ) Экспорт
	ЗначенияДляЗаполнения = Новый Структура;
	ЗначенияДляЗаполнения.Вставить("МесяцРасчета", "ПериодРегистрации");
	ЗначенияДляЗаполнения.Вставить("Организация", "Организация");
	ФиксированныеЗначения = СтрРазделить("Организация", ",");
	ЗарплатаКадры.ЗаполнитьЗначенияВФорме(Документ, ЗначенияДляЗаполнения, ФиксированныеЗначения);
КонецПроцедуры

Процедура ЗаполнитьБольничныйПоДаннымЭЛН(Документ, ДанныеЭЛН, Отказ, ИсходныйXML) Экспорт
	
	ЭЛНФСС.ПроверитьВозможностьЗагрузкиЭЛН(Документ, ДанныеЭЛН, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Перед записью хеша необходимо определить организацию и физлицо.
	ЗаполнитьСотрудникаПоСНИЛС(Документ, ДанныеЭЛН, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныйXML <> Неопределено Тогда
		Страхователь = СЭДОФСС.СтраховательОрганизации(Документ.Организация);
		РегистрыСведений.СведенияОбЭЛН.ОбновитьСведенияОбЭЛН(Страхователь, ИсходныйXML, ДанныеЭЛН);
	КонецЕсли;
	
	ЗаполнитьПоПервичномуБольничномуЛисту(Документ, ДанныеЭЛН);
	
	ЗаполнитьРеквизитыШапкиПоДаннымЭЛН(Документ, ДанныеЭЛН);
	
	ЗаполнитьРеквизитыШапкиПоУходу(Документ, ДанныеЭЛН);
	
	Документы.БольничныйЛист.ЗаполнитьТаблицуУходаЗаРодственниками(Документ, ДанныеЭЛН);
	
	ЗаполнитьПериодыНетрудоспособности(Документ, ДанныеЭЛН);
	
	ЗаполнитьМедицинскуюОрганизацию(Документ);
	
	ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Документ);
	
	Документы.БольничныйЛист.ПослеЗагрузкиЭЛН(Документ, ДанныеЭЛН);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиПоДаннымЭЛН(Документ, ДанныеЭЛН)
	
	Документ.ДатаНачала        = ДанныеЭЛН.ДатаНачала;
	Документ.ДатаОкончания     = ДанныеЭЛН.ДатаОкончания;
	Документ.ДатаНачалаСобытия = ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН, Документ.ГоловнаяОрганизация);
	
	Документ.НомерЛисткаНетрудоспособности                = ДанныеЭЛН.НомерЛН;
	Документ.НомерПервичногоЛисткаНетрудоспособности      = ДанныеЭЛН.НомерПервичногоЛН;
	Документ.ПредоставленДубликатЛисткаНетрудоспособности = ДанныеЭЛН.ПредоставленДубликатЛН;
	Документ.ДатаВыдачиЛисткаНетрудоспособности           = ДанныеЭЛН.ДатаВыдачи;
	
	Документ.НаименованиеМедицинскойОрганизации = ДанныеЭЛН.НаименованиеМедицинскойОрганизации;
	Документ.АдресМедицинскойОрганизации        = ДанныеЭЛН.АдресМедицинскойОрганизации;
	Документ.ОГРНМедицинскойОрганизации         = ДанныеЭЛН.ОГРНМедицинскойОрганизации;
	
	Документ.КодПричиныНетрудоспособности               = ДанныеЭЛН.КодПричиныНетрудоспособности;
	Документ.ДополнительныйКодПричиныНетрудоспособности = ДанныеЭЛН.ДополнительныйКодПричиныНетрудоспособности;
	Документ.ВторойКодПричиныНетрудоспособности         = ДанныеЭЛН.ВторойКодПричиныНетрудоспособности;
	
	Документ.ДатаИзмененияКодаПричиныНетрудоспособности = ДанныеЭЛН.ДатаИзмененияКодаПричиныНетрудоспособности;
	Документ.ДатаОкончанияПутевки                       = ДанныеЭЛН.ДатаОкончанияПутевки;
	
	Документ.НомерПутевки   = ДанныеЭЛН.НомерПутевки;
	Документ.ОГРН_Санатория = ДанныеЭЛН.ОГРНСанатория;
	
	Документ.ПериодНахожденияВСтационареСРебенкомС  = ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомС;
	Документ.ПериодНахожденияВСтационареСРебенкомПо = ДанныеЭЛН.ПериодНахожденияВСтационареСРебенкомПо;
	
	Документ.ДатаНаправленияВБюроМСЭ      = ДанныеЭЛН.ДатаНаправленияВБюроМСЭ;
	Документ.ДатаРегистрацииДокументовМСЭ = ДанныеЭЛН.ДатаРегистрацииДокументовМСЭ;
	Документ.ДатаОсвидетельствованияМСЭ   = ДанныеЭЛН.ДатаОсвидетельствованияМСЭ;
	Документ.ГруппаИнвалидности           = ДанныеЭЛН.ГруппаИнвалидности;
	Документ.УтратаТрудоспобности         = ДанныеЭЛН.УтратаТрудоспобности;
	
	Документ.НомерЗаменяемогоЛН = ДанныеЭЛН.НомерЗаменяемогоЛН;
	Документ.ПрерывистыйМетод   = ДанныеЭЛН.ПрерывистыйМетод;
	
	Документ.НовыйСтатусНетрудоспособного     = ДанныеЭЛН.НовыйСтатусНетрудоспособного;
	Документ.ДатаНовыйСтатусНетрудоспособного = ДанныеЭЛН.ДатаНовыйСтатусНетрудоспособного;
	Документ.ПриступитьКРаботеС               = ДанныеЭЛН.ПриступитьКРаботеС;
	Документ.НомерЛисткаПродолжения           = ДанныеЭЛН.НомерЛисткаПродолжения;
	
	Документ.КодНарушенияРежима  = ДанныеЭЛН.КодНарушенияРежима;
	Документ.ДатаНарушенияРежима = ДанныеЭЛН.ДатаНарушенияРежима;
	
	Документ.ПоставленаНаУчетВРанниеСрокиБеременности = ДанныеЭЛН.ПоставленаНаУчетВРанниеСрокиБеременности;
	
КонецПроцедуры

// Заполнение реквизитов шапки больничного по уходу за родственниками.
Процедура ЗаполнитьРеквизитыШапкиПоУходу(Больничный, ДанныеЭЛН) Экспорт
	
	ЗаполнитьДатыУходаЗаРодственниками(ДанныеЭЛН, Больничный.ГоловнаяОрганизация, Больничный.ФизическоеЛицо);
	
	ДатыУхода = ДанныеЭЛН.ДатыУхода;
	
	// Очистка периодов ухода за родственниками в документе.
	РеквизитыШапки = Новый Структура;
	Для Номер = 1 По 2 Цикл
		РеквизитыШапки.Вставить("ПоУходуВозрастЛет"        + Номер, 0);
		РеквизитыШапки.Вставить("ПоУходуВозрастМесяцев"    + Номер, 0);
		РеквизитыШапки.Вставить("ПоУходуРодственнаяСвязь"  + Номер, "");
		РеквизитыШапки.Вставить("ПоУходуФИО"               + Номер, "");
		// Следующие поля есть только в расширенной реализации.
		РеквизитыШапки.Вставить("ДатаНачалаРодственник"    + Номер, '00010101');
		РеквизитыШапки.Вставить("ДатаОкончанияРодственник" + Номер, '00010101');
		РеквизитыШапки.Вставить("РодственникЗаКоторымОсуществляетсяУход" + Номер, Неопределено);
	КонецЦикла;
	
	Если ДатыУхода.Количество() > 0 Тогда
		
		// Заполнение периода нахождения в стационаре.
		Если Не ЗначениеЗаполнено(Больничный.ПериодНахожденияВСтационареСРебенкомС)
			И Не ЗначениеЗаполнено(Больничный.ПериодНахожденияВСтационареСРебенкомПо) Тогда
			ДатыСтационара = ДатыУхода.Скопировать(Новый Структура("ЭтоСтационар", Истина));
			Если ДатыСтационара.Количество() > 0 Тогда
				ДатыСтационара.Сортировать("Дата");
				Больничный.ПериодНахожденияВСтационареСРебенкомС  = ДатыСтационара[0].Дата;
				Больничный.ПериодНахожденияВСтационареСРебенкомПо = ДатыСтационара[ДатыСтационара.Количество() - 1].Дата;
			КонецЕсли;
		КонецЕсли;
		
		// Заполнение полей шапки по уходу за родственниками.
		Измерения = "Родственник";
		Ресурсы   = "";
		Реквизиты = "";
		ПериодыУхода = ОбщегоНазначенияБЗК.ТаблицаПериодовИзТаблицыДат(ДатыУхода, Измерения, Ресурсы, Реквизиты, Истина);
		Для Номер = 1 По Мин(ПериодыУхода.Количество(), 2) Цикл
			ПериодУхода = ПериодыУхода[Номер-1];
			Родственник = ПериодУхода.Родственник;
			РеквизитыШапки["ПоУходуВозрастЛет"        + Номер] = Родственник.ВозрастЛет;
			РеквизитыШапки["ПоУходуВозрастМесяцев"    + Номер] = Родственник.ВозрастМесяцев;
			РеквизитыШапки["ПоУходуРодственнаяСвязь"  + Номер] = Родственник.КодСвязи;
			РеквизитыШапки["ПоУходуФИО"               + Номер] = Родственник.ФИО;
			РеквизитыШапки["ДатаНачалаРодственник"    + Номер] = ПериодУхода.ДатаНачала;
			РеквизитыШапки["ДатаОкончанияРодственник" + Номер] = ПериодУхода.ДатаОкончания;
			РеквизитыШапки["РодственникЗаКоторымОсуществляетсяУход" + Номер] = Родственник.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение реквизитов ухода в шапке документа.
	// Имена полей не указываются, т.к. часть полей есть только в расширенной реализации.
	ЗаполнитьЗначенияСвойств(Больничный, РеквизитыШапки);
	
	// Дозаполнение кода причины нетрудоспособности в шапке из таблицы периодов ухода.
	КодыПричин = КоллекцииБЗК.УникальныеЗначенияКолонки(ДатыУхода, "КодПричины");
	КоллекцииБЗК.УдалитьПустыеЗначенияМассива(КодыПричин);
	Если Не ЗначениеЗаполнено(Больничный.КодПричиныНетрудоспособности) Тогда
		Если КодыПричин.Количество() > 0 Тогда
			Больничный.КодПричиныНетрудоспособности = КодыПричин[0];
		Иначе
			ТекстОшибки = НСтр("ru = 'В ЭЛН не указана причина нетрудоспособности. Требуется выбрать вручную.';
								|en = 'ESLR does not contain the reason for incapacity for work. Please, select it manually.'");
			СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки, , "ПричинаНетрудоспособности");
		КонецЕсли;
	Иначе
		ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(КодыПричин, Больничный.КодПричиныНетрудоспособности);
	КонецЕсли;
	
	// Проверка количества различных кодов причин нетрудоспособности.
	Если КодыПричин.Количество() > 1 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В ЭЛН несколько причин нетрудоспособности: %1.';
				|en = 'ESLR contains several reasons for incapacity for work: %1.'"),
			СтрСоединить(КодыПричин, ", "));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки, , "ПричинаНетрудоспособности");
	КонецЕсли;
	
КонецПроцедуры

// Получение таблицы ухода за родственниками и дней стационара.
Процедура ЗаполнитьДатыУходаЗаРодственниками(ДанныеЭЛН, ГоловнаяОрганизация, ФизическоеЛицо) Экспорт
	Если ДанныеЭЛН.Свойство("ДатыУхода") Тогда
		Возврат;
	КонецЕсли;
	
	НомерРодственника = 0;
	
	Родственники = СЭДОФСС.ПустаяТаблицаРодственников();
	
	ДатыУхода = Новый ТаблицаЗначений;
	ДатыУхода.Колонки.Добавить("Родственник");
	ДатыУхода.Колонки.Добавить("НомерРодственника", Новый ОписаниеТипов("Число"));
	ДатыУхода.Колонки.Добавить("КодПричины",        Новый ОписаниеТипов("Строка"));
	ДатыУхода.Колонки.Добавить("РежимЛечения",      Новый ОписаниеТипов("ПеречислениеСсылка.РежимыЛечения"));
	ДатыУхода.Колонки.Добавить("СлучайУхода",       Новый ОписаниеТипов("ПеречислениеСсылка.СлучаиУходаЗаБольнымиДетьми"));
	ДатыУхода.Колонки.Добавить("ЭтоСтационар",      Новый ОписаниеТипов("Булево"));
	ДатыУхода.Колонки.Добавить("Дата",              ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДатыУхода.Колонки.Добавить("Год",               Новый ОписаниеТипов("Число"));
	
	ПоискРодственников = Новый Соответствие;
	
	ПроверятьДатуРождения = ДанныеЭЛН.АктуальныйФормат;
	
	ДатаНачалаСобытия = ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН, ГоловнаяОрганизация);
	
	Для Каждого ПериодЛечения Из ДанныеЭЛН.ПериодыЛеченияРодственников Цикл
		
		// Проверка спецификации.
		Если Не ПроверитьПериодЛеченияРодственника(ПериодЛечения, ПроверятьДатуРождения) Тогда
			Продолжить;
		КонецЕсли;
		
		// Подготовка ключей для быстрого поиска родственника.
		Ключи = КлючиПоискаРодственника(ПериодЛечения);
		Если ЗначениеЗаполнено(ПериодЛечения.РодственникСсылка) Тогда
			Ключи.Вставить(0, ПериодЛечения.РодственникСсылка);
		КонецЕсли;
		
		// Поиск родственника по ключам.
		Родственник = НайтиРодственника(ПериодЛечения, ПоискРодственников, Ключи);
		
		// Регистрация нового родственника или заполнение найденного.
		Если Родственник = Неопределено Тогда
			НомерРодственника = НомерРодственника + 1;
			Родственник = Родственники.Добавить();
			Родственник.Номер          = НомерРодственника;
			Родственник.Фамилия        = ПериодЛечения.Фамилия;
			Родственник.Имя            = ПериодЛечения.Имя;
			Родственник.Отчество       = ПериодЛечения.Отчество;
			Родственник.ФИО            = ПериодЛечения.ФИО;
			Родственник.ДатаРождения   = ПериодЛечения.ДатаРождения;
			Родственник.ВозрастЛет     = ПериодЛечения.ВозрастЛет;
			Родственник.ВозрастМесяцев = ПериодЛечения.ВозрастМесяцев;
			Родственник.СНИЛС          = ПериодЛечения.СНИЛС;
			Родственник.КодСвязи       = ПериодЛечения.КодСвязи;
			Родственник.Ключи          = Ключи;
			Родственник.Ссылка         = ПериодЛечения.РодственникСсылка;
			Если ЗначениеЗаполнено(Родственник.ДатаРождения)
				И ЗначениеЗаполнено(ДатаНачалаСобытия)
				И Не ЗначениеЗаполнено(Родственник.ВозрастЛет)
				И Не ЗначениеЗаполнено(Родственник.ВозрастМесяцев) Тогда
				РазмерПериода = ОбщегоНазначенияБЗК.РазмерПериода(Родственник.ДатаРождения, ДатаНачалаСобытия);
				Родственник.ВозрастЛет     = РазмерПериода.Лет;
				Родственник.ВозрастМесяцев = РазмерПериода.Месяцев;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ПериодЛечения.ДатаРождения)
				И ЗначениеЗаполнено(Родственник.ДатаРождения)
				И ПериодЛечения.ДатаРождения <> Родственник.ДатаРождения Тогда
				ТекстОшибки = НСтр("ru = 'В периодах ухода за родственниками указаны две разные даты рождения %1: %2 и %3.';
									|en = 'Two different dates of birth are specified for %1 in relative care periods: %2 and %3.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПериодЛечения.ФИО, Родственник.ДатаРождения, ПериодЛечения.ДатаРождения);
				СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
				Если Родственник.ДатаРождения > ПериодЛечения.ДатаРождения Тогда
					Родственник.ДатаРождения   = ПериодЛечения.ДатаРождения;
					Родственник.ВозрастЛет     = ПериодЛечения.ВозрастЛет;
					Родственник.ВозрастМесяцев = ПериодЛечения.ВозрастМесяцев;
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(Родственник.ВозрастЛет) И Не ЗначениеЗаполнено(Родственник.ВозрастМесяцев) Тогда
					Родственник.ВозрастЛет     = ПериодЛечения.ВозрастЛет;
					Родственник.ВозрастМесяцев = ПериодЛечения.ВозрастМесяцев;
				КонецЕсли;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Родственник.КодСвязи) Тогда
				Родственник.КодСвязи = ПериодЛечения.КодСвязи;
			ИначеЕсли ЗначениеЗаполнено(ПериодЛечения.КодСвязи) И Родственник.КодСвязи <> ПериодЛечения.КодСвязи Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В ЭЛН %1 по уходу за %2 указаны разные родственные связи: %3 и %4.';
						|en = 'Different relationships are specified in ESLR %1 where %2 needs to be cared for: %3 and %4.'"),
					ДанныеЭЛН.НомерЛН,
					ПериодЛечения.ФИО,
					Родственник.КодСвязи,
					ПериодЛечения.КодСвязи);
				СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Родственник.СНИЛС) Тогда
				Родственник.СНИЛС = ПериодЛечения.СНИЛС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Родственник.Отчество) Тогда
				Родственник.Фамилия  = ПериодЛечения.Фамилия;
				Родственник.Имя      = ПериодЛечения.Имя;
				Родственник.Отчество = ПериодЛечения.Отчество;
				Родственник.ФИО      = ПериодЛечения.ФИО;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Родственник.Ключи, Ключи, Истина);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Родственник.Ссылка) Тогда
				Родственник.Ссылка = ПериодЛечения.РодственникСсылка;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Родственник.Ключи, Ключи, Истина);
			КонецЕсли;
		КонецЕсли;
		
		// Когда родственник определен, то он попадает в соответствие для быстрого поиска.
		Для Каждого Ключ Из Ключи Цикл
			ПоискРодственников.Вставить(Ключ, Родственник);
		КонецЦикла;
		
		// Определение случая ухода.
		СлучайУхода = ПериодЛечения.СлучайУхода;
		Если Не ЗначениеЗаполнено(СлучайУхода) Тогда
			СлучайУхода = УчетПособийСоциальногоСтрахования.СлучайУхода(
				ДатаНачалаСобытия,
				ПериодЛечения.КодПричины,
				Родственник.ВозрастЛет,
				ПериодЛечения.РежимЛечения);
		КонецЕсли;
		
		// Регистрация дней ухода.
		ДниУхода = ОбщегоНазначенияБЗК.МассивДатИзПериода(ПериодЛечения.ДатаНачала, ПериодЛечения.ДатаОкончания);
		Стационар = (ПериодЛечения.РежимЛечения = Перечисления.РежимыЛечения.Стационар
			Или ПериодЛечения.РежимЛечения = Перечисления.РежимыЛечения.ДневнойСтационар);
		Для Каждого Дата Из ДниУхода Цикл
			СтрокаТаблицы = ДатыУхода.Добавить();
			СтрокаТаблицы.Родственник       = Родственник;
			СтрокаТаблицы.НомерРодственника = НомерРодственника;
			СтрокаТаблицы.КодПричины        = ПериодЛечения.КодПричины;
			СтрокаТаблицы.РежимЛечения      = ПериодЛечения.РежимЛечения;
			СтрокаТаблицы.ЭтоСтационар      = Стационар;
			СтрокаТаблицы.Дата              = Дата;
			СтрокаТаблицы.Год               = Год(Дата);
			СтрокаТаблицы.СлучайУхода       = СлучайУхода;
		КонецЦикла;
	КонецЦикла;
	
	СЭДОФСС.ЗаполнитьСсылкиРодственников(ФизическоеЛицо, Родственники);
	
	ДанныеЭЛН.Вставить("ДатыУхода", ДатыУхода);
	ДанныеЭЛН.Вставить("Родственники", Родственники);
	ДанныеЭЛН.Вставить("ПоискРодственников", ПоискРодственников);
КонецПроцедуры

// Заполнение периодов нетрудоспособности в шапке больничного.
Процедура ЗаполнитьПериодыНетрудоспособности(Документ, ДанныеЭЛН)
	
	Номер = 0;
	Для Каждого Период Из ДанныеЭЛН.ПериодыНетрудоспособности Цикл
		Номер = Номер + 1;
		Документ["ОсвобождениеДатаНачала" + Номер]                   = Период.ДатаНачала;
		Документ["ОсвобождениеДатаОкончания" + Номер]                = Период.ДатаОкончания;
		Документ["ОсвобождениеФИОВрача" + Номер]                     = Период.ВрачФИО;
		Документ["ОсвобождениеДолжностьВрача" + Номер]               = Период.ВрачДолжность;
		Документ["ОсвобождениеФИОВрачаПредседателяВК" + Номер]       = Период.ПредседательВКФИО;
		Документ["ОсвобождениеДолжностьВрачаПредседателяВК" + Номер] = Период.ПредседательВКДолжность;
		Если Номер = 3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Очистка отсутствующих периодов нетрудоспособности.
	Пока Номер < 2 Цикл
		Номер = Номер + 1;
		Документ["ОсвобождениеДатаНачала" + Номер]                   = '00010101';
		Документ["ОсвобождениеДатаОкончания" + Номер]                = '00010101';
		Документ["ОсвобождениеФИОВрача" + Номер]                     = "";
		Документ["ОсвобождениеДолжностьВрача" + Номер]               = "";
		Документ["ОсвобождениеФИОВрачаПредседателяВК" + Номер]       = "";
		Документ["ОсвобождениеДолжностьВрачаПредседателяВК" + Номер] = "";
	КонецЦикла;
	
КонецПроцедуры

// Проверяет период лечения на соответствие спецификации ФСС.
Функция ПроверитьПериодЛеченияРодственника(ПериодЛечения, ПроверятьДатуРождения)
	Если Не ЗначениеЗаполнено(ПериодЛечения.ФИО) Тогда
		ТекстОшибки = НСтр("ru = 'В периодах ухода за родственниками не заполнено ФИО родственника.';
							|en = 'In relative care periods, the relative''s full name is not filled in.'");
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	ТекстОшибки = ПроверкиБЗККлиентСервер.ТекстОшибкиЗаполненияПериода(ПериодЛечения.ДатаНачала, ПериодЛечения.ДатаОкончания);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЗаголовокПериодаВРодительномПадеже = СтрШаблон(НСтр("ru = 'ухода за %1';
															|en = 'care for %1'"), ПериодЛечения.ФИО);
		ТекстОшибки = СтрШаблон(ТекстОшибки, ЗаголовокПериодаВРодительномПадеже);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Если ПроверятьДатуРождения И Не ЗначениеЗаполнено(ПериодЛечения.ДатаРождения) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В периодах ухода за родственниками не заполнена дата рождения %1.';
									|en = 'Date of birth is not filled in for %1 in relative care periods.'"), ПериодЛечения.ФИО);
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
		Возврат Истина;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Возвращает массив ключей для поиска родственника.
//
// Параметры:
//   Родственник - Структура, СтрокаТаблицыЗначений - см. ЭЛНФСС.ПустаяТаблицаПериодовЛеченияРодственников
//                                                    и СЭДОФСС.ПустаяТаблицаРодственников.
//       * ФИО          - Строка
//       * Фамилия      - Строка
//       * Имя          - Строка
//       * КодСвязи     - Строка
//       * СНИЛС        - Строка
//       * ДатаРождения - Дата
//
// Возвращаемое значение:
//   Массив из Строка
//
Функция КлючиПоискаРодственника(Родственник) Экспорт
	Ключи = Новый Массив;
	
	// Подготовка локальных переменных.
	ФИОДляПоиска = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(Родственник.ФИО);
	Если ЗначениеЗаполнено(Родственник.ДатаРождения) Тогда
		ДатаРожденияСтрокой = Формат(Родственник.ДатаРождения, "ДЛФ=D");
	Иначе
		ДатаРожденияСтрокой = "";
	КонецЕсли;
	ФамилияИмя = СокрП(Родственник.Фамилия + " " + Родственник.Имя);
	ФамилияИмяДляПоиска = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(ФамилияИмя);
	КодСвязи = Родственник.КодСвязи;
	
	// СНИЛС - самый приоритетный ключ поиска.
	Если ЗначениеЗаполнено(Родственник.СНИЛС) Тогда
		Ключи.Добавить(Родственник.СНИЛС);
	КонецЕсли;
	
	// Добавление ключей поиска по ФИО в сочетании с кодом связи и датой рождения.
	Если ЗначениеЗаполнено(ФИОДляПоиска) И ФамилияИмяДляПоиска <> ФИОДляПоиска Тогда
		Если ЗначениеЗаполнено(ДатаРожденияСтрокой) Тогда
			Если ЗначениеЗаполнено(КодСвязи) Тогда
				Ключи.Добавить(ФИОДляПоиска + КодСвязи + ДатаРожденияСтрокой);
			КонецЕсли;
			Ключи.Добавить(ФИОДляПоиска + ДатаРожденияСтрокой);
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСвязи) Тогда
			Ключи.Добавить(ФИОДляПоиска + КодСвязи);
		КонецЕсли;
		Ключи.Добавить(ФИОДляПоиска);
	КонецЕсли;
	
	// Аналогичным образом добавляюстя ключи поиска по Фамилия + Имя без отчества.
	Если ЗначениеЗаполнено(ФамилияИмяДляПоиска) Тогда
		Если ЗначениеЗаполнено(ДатаРожденияСтрокой) Тогда
			Если ЗначениеЗаполнено(КодСвязи) Тогда
				Ключи.Добавить(ФамилияИмяДляПоиска + КодСвязи + ДатаРожденияСтрокой);
			КонецЕсли;
			Ключи.Добавить(ФамилияИмяДляПоиска + ДатаРожденияСтрокой);
		КонецЕсли;
		Если ЗначениеЗаполнено(КодСвязи) Тогда
			Ключи.Добавить(ФамилияИмяДляПоиска + КодСвязи);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ключи;
КонецФункции

Функция НайтиРодственника(РеквизитыРодственника, ПоискРодственников, Ключи)
	Для Каждого Ключ Из Ключи Цикл
		Родственник = ПоискРодственников[Ключ];
		Если Родственник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родственник.СНИЛС)
			И ЗначениеЗаполнено(РеквизитыРодственника.СНИЛС)
			И Родственник.СНИЛС <> РеквизитыРодственника.СНИЛС Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родственник.КодСвязи)
			И ЗначениеЗаполнено(РеквизитыРодственника.КодСвязи)
			И Родственник.КодСвязи <> РеквизитыРодственника.КодСвязи Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родственник.ДатаРождения)
			И ЗначениеЗаполнено(РеквизитыРодственника.ДатаРождения)
			И Родственник.ДатаРождения <> РеквизитыРодственника.ДатаРождения Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родственник.Ссылка)
			И ЗначениеЗаполнено(РеквизитыРодственника.РодственникСсылка)
			И Родственник.Ссылка <> РеквизитыРодственника.РодственникСсылка Тогда
			Продолжить;
		КонецЕсли;
		Возврат Родственник;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура ПроверитьФИОСотрудника(Документ, ДанныеЭЛН)
	
	// Проверка кадровых данных сотрудника.
	КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина,
		Документ.Сотрудник,
		"Фамилия, Имя, Отчество, ДатаРождения",
		ЭЛНФСС.ДатаНачалаСобытия(ДанныеЭЛН, Документ.ГоловнаяОрганизация));
	Найденные = КадровыеДанныеСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Документ.Сотрудник));
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КадровыеДанныеСотрудника = Найденные[0];
	
	Если СтрСравнить(ДанныеЭЛН.Фамилия, СокрЛП(КадровыеДанныеСотрудника.Фамилия)) <> 0 Тогда
		ТекстОшибки = НСтр("ru = 'Фамилия ""%1"" (указана в ЭЛН %2) не совпадает с фамилией сотрудника (%3).';
							|en = 'The last name ""%1"" (specified in ESLR %2) does not match the employee''s last name (%3).'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭЛН.Фамилия, ДанныеЭЛН.НомерЛН, КадровыеДанныеСотрудника.Фамилия);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	Если СтрСравнить(ДанныеЭЛН.Имя, СокрЛП(КадровыеДанныеСотрудника.Имя)) <> 0 Тогда
		ТекстОшибки = НСтр("ru = 'Имя ""%1"" (указано в ЭЛН %2) не совпадает с именем сотрудника (%3).';
							|en = 'The name ""%1"" (specified in ESLR %2) does not match the employee''s name (%3).'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭЛН.Имя, ДанныеЭЛН.НомерЛН, КадровыеДанныеСотрудника.Имя);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	Если СтрСравнить(ДанныеЭЛН.Отчество, СокрЛП(КадровыеДанныеСотрудника.Отчество)) <> 0 Тогда
		ТекстОшибки = НСтр("ru = 'Отчество ""%1"" (указано в ЭЛН %2) не совпадает с отчеством сотрудника (%3).';
							|en = 'The patronymic ""%1"" (specified in ESLR %2) does not match the employee''s patronymic (%3).'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДанныеЭЛН.Отчество, ДанныеЭЛН.НомерЛН, КадровыеДанныеСотрудника.Отчество);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЭЛН.ДатаРождения)
		И ДанныеЭЛН.ДатаРождения <> КадровыеДанныеСотрудника.ДатаРождения Тогда
		ТекстОшибки = НСтр("ru = 'Дата рождения ""%1"" (указана в ЭЛН %2) не совпадает с датой рождения сотрудника (%3).';
							|en = 'The date of birth ""%1"" (specified in the electronic sick leave record %2) does not match the employee''s date of birth (%3).'");
		ТекстОшибки = СтрШаблон(
			ТекстОшибки,
			Формат(ДанныеЭЛН.ДатаРождения, "ДЛФ=D"),
			ДанныеЭЛН.НомерЛН,
			Формат(КадровыеДанныеСотрудника.ДатаРождения, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение медицинской организации.
Процедура ЗаполнитьМедицинскуюОрганизацию(Документ)
	Если Не ЗначениеЗаполнено(Документ.ОГРНМедицинскойОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МедицинскиеОрганизации.Ссылка
	|ИЗ
	|	Справочник.МедицинскиеОрганизации КАК МедицинскиеОрганизации
	|ГДЕ
	|	МедицинскиеОрганизации.ОГРН = &ОГРН";
	Запрос.УстановитьПараметр("ОГРН", Документ.ОГРНМедицинскойОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Документ.МедицинскаяОрганизация = Выборка.Ссылка;
	Иначе
		МедОрганизация = Справочники.МедицинскиеОрганизации.СоздатьЭлемент();
		МедОрганизация.Наименование = Документ.НаименованиеМедицинскойОрганизации;
		МедОрганизация.ОГРН         = Документ.ОГРНМедицинскойОрганизации;
		МедОрганизация.Адрес        = Документ.АдресМедицинскойОрганизации;
		МедОрганизация.Записать();
		Документ.МедицинскаяОрганизация = МедОрганизация.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение дат оплаты и освобождения от работы.
Процедура ЗаполнитьПериодНетрудоспособности(Больничный) Экспорт
	
	ЗаполнитьЗначенияСвойств(Больничный, УчетПособийСоциальногоСтрахованияКлиентСервер.ПериодЛН(Больничный));
	
	Больничный.ДатаНачалаОплаты    = Больничный.ДатаНачала;
	Больничный.ДатаОкончанияОплаты = Больничный.ДатаОкончания;
	
	Если Не Больничный.ЯвляетсяПродолжениемБолезни Тогда
		Больничный.ДатаНачалаСобытия = Больничный.ДатаНачала;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет причину нетрудоспособности и случай ухода за ребенком.
Процедура ЗаполнитьПричинуНетрудоспособностиИСлучайУходаЗаРебенком(Больничный) Экспорт
	
	Если Не ЗначениеЗаполнено(Больничный.КодПричиныНетрудоспособности) Тогда
		Возврат;
	КонецЕсли;
	
	НаименьшийВозрастПоУходу = НаименьшийВозрастПоУходу(Больничный);
	
	Если ЗначениеЗаполнено(Больничный.ПериодНахожденияВСтационареСРебенкомС) Тогда
		РежимЛечения = Перечисления.РежимыЛечения.Стационар;
	Иначе
		РежимЛечения = Перечисления.РежимыЛечения.Амбулаторно;
	КонецЕсли;
	
	Если Больничный.КодПричиныНетрудоспособности = "01"
		И Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Профзаболевание
		И УчетПособийСоциальногоСтрахования.ДействуетПорядокНСПЗ_2022(Больничный.ДатаНачалаСобытия) Тогда
		// Код уже соответствует, заполнять причину не требуется.
	ИначеЕсли Больничный.КодПричиныНетрудоспособности = "02"
		И Больничный.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
		И УчетПособийСоциальногоСтрахования.ДействуетПорядокНСПЗ_2022(Больничный.ДатаНачалаСобытия) Тогда
		// Код уже соответствует, заполнять причину не требуется.
	Иначе
		Больничный.ПричинаНетрудоспособности = УчетПособийСоциальногоСтрахования.ПричинаНетрудоспособности(
			Больничный.КодПричиныНетрудоспособности,
			НаименьшийВозрастПоУходу,
			Больничный.ДатаНачалаСобытия,
			Больничный.НомерЛисткаНетрудоспособности,
			Больничный.ГоловнаяОрганизация);
	КонецЕсли;
	
	Больничный.СлучайУходаЗаБольнымРебенком = УчетПособийСоциальногоСтрахования.СлучайУхода(
		Больничный.ДатаНачалаСобытия,
		Больничный.КодПричиныНетрудоспособности,
		НаименьшийВозрастПоУходу,
		РежимЛечения);
	
КонецПроцедуры

Функция НаименьшийВозрастПоУходу(Больничный) Экспорт
	НаименьшийВозраст = Неопределено;
	Если Больничный.ПериодыУходаЗаРодственниками.Количество() > 0 Тогда
		// Определение наименьшего возраста по таблице ПериодыУходаЗаРодственниками.
		Для Каждого СтрокаТаблицы Из Больничный.ПериодыУходаЗаРодственниками Цикл
			Возраст = СтрокаТаблицы.ВозрастЛет + Окр(СтрокаТаблицы.ВозрастМесяцев / 12, 1);
			Если НаименьшийВозраст = Неопределено Или НаименьшийВозраст > Возраст Тогда
				НаименьшийВозраст = Возраст;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Определение наименьшего возраста по реквизитам шапки.
		Если ЗначениеЗаполнено(Больничный.ПоУходуФИО1) Тогда
			НаименьшийВозраст = Больничный.ПоУходуВозрастЛет1 + Окр(Больничный.ПоУходуВозрастМесяцев1 / 12, 1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Больничный.ПоУходуФИО2) Тогда
			ПоУходуВозраст2 = Больничный.ПоУходуВозрастЛет2 + Окр(Больничный.ПоУходуВозрастМесяцев2 / 12, 1);
			Если НаименьшийВозраст = Неопределено Или НаименьшийВозраст > ПоУходуВозраст2 Тогда
				НаименьшийВозраст = ПоУходуВозраст2;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат НаименьшийВозраст;
КонецФункции

#КонецОбласти

#Область ЗагрузкаРеестровЭЛН

Процедура ЗагрузитьРезультатОтправкиРеестраЭЛН(Документ, ЭлементыRow, Результат)
	ТребуетсяВывестиТекстСообщенияФСС = ЗначениеЗаполнено(Результат.ТекстСообщенияФСС);
	Для Каждого Row Из ЭлементыRow Цикл
		ТребуетсяАктуализацияХеша = Ложь;
		ТекстыОшибок = Новый Массив;
		
		НомерЛН = Row.lnCode;
		ЭЛНПринят = (Строка(Row.status) = "1");
		
		Хеш = Неопределено;
		Если Row.Свойства().Получить("lnHash") <> Неопределено Тогда
			Хеш = СериализацияБЗК.СтрокаИзXML(Row.lnHash);
		КонецЕсли;
		
		Если Не ЭЛНПринят Тогда
			Errors = СериализацияБЗК.СписокXDTO(Row, "errors.error");
			Для Каждого Error Из Errors Цикл
				ТекстыОшибок.Добавить(СтрШаблон("[%1] %2", СокрЛП(Error.errCode), СокрЛП(Error.errMess)));
				Если СтрСравнить(Error.errCode, "ERR_013") = 0 Тогда
					// Отказ не включается, т.к. будет предпринята попытка зачитать актуальные хеши и повторная попытка отправки.
					ТребуетсяАктуализацияХеша = Истина;
					ТекстыОшибок.Добавить(НСтр("ru = 'Будет предпринята попытка актуализации Хэша ЭЛН';
												|en = 'ESLR hash update will be attempted'")); // АПК:1036 "Хэш ЭЛН" - термин ФСС.
				КонецЕсли;
				Если ТребуетсяВывестиТекстСообщенияФСС Тогда
					СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Результат.Отказ, Результат.ТекстСообщенияФСС);
					ТребуетсяВывестиТекстСообщенияФСС = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаДанныхЭЛН = Документ.ДанныеЭЛН.Найти(НомерЛН, "НомерЛисткаНетрудоспособности");
		Если СтрокаДанныхЭЛН = Неопределено Тогда
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Результат.Отказ, СтрСоединить(ТекстыОшибок, Символы.ПС));
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(
				Результат.Отказ,
				СтрШаблон(НСтр("ru = 'ЭЛН № %1 не найден в документе.';
								|en = 'ESLR № %1 not found in document.'"), НомерЛН),
				"ДанныеЭЛН[0].НомерЛисткаНетрудоспособности",
				"Объект");
		Иначе
			СтрокаДанныхЭЛН.ТребуетсяАктуализацияХеша = ТребуетсяАктуализацияХеша;
			СтрокаДанныхЭЛН.КомментарийКСостоянию = СтрСоединить(ТекстыОшибок, Символы.ПС);
			Если ЭЛНПринят Тогда
				СтрокаДанныхЭЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.ПринятФСС;
			Иначе
				СтрокаДанныхЭЛН.Состояние = Перечисления.СостоянияЭЛНВРеестрахЭЛН.НеПринятФСС;
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.СведенияОбЭЛН.ПриЗагрузкеОтветаФССПоРеестру(НомерЛН, Документ, СтрокаДанныхЭЛН, Хеш);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЭЛН

Функция ОписаниеФайлаЭЛН(НомерЛН, ГоловнаяОрганизация, ИдентификаторФормы) Экспорт
	Результат = Новый Структура("Адрес, ИмяБезРасширения");
	
	ТекстXML = РегистрыСведений.СведенияОбЭЛН.ИсходныйXML(НомерЛН, ГоловнаяОрганизация);
	Если Не ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено
	КонецЕсли;
	Если СтрСравнить(Лев(СокрЛ(ТекстXML), 5), "<?xml") = 0 Тогда
		Кодировка = СериализацияБЗК.КодировкаXML(ТекстXML);
	Иначе
		ТекстXML = "<?xml version='1.0' encoding='UTF-8'?>" + Символы.ПС + ТекстXML;
		Кодировка = "UTF-8";
	КонецЕсли;
	
	ДвоичныеДанные = ЗарплатаКадры.СтрокаВДвоичныеДанные(ТекстXML, Кодировка, Истина);
	Результат.Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	
	Попытка
		СтруктураDOM = СериализацияБЗК.СтруктураDOM(ТекстXML);
		УзелЗапроса = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'requestId']");
		Если УзелЗапроса = Неопределено Тогда
			УзелЗапроса = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "//*[local-name() = 'REQUEST_ID']");
		КонецЕсли;
		Если УзелЗапроса <> Неопределено Тогда
			Результат.ИмяБезРасширения = УзелЗапроса.ТекстовоеСодержимое;
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при получении содержимого XML: %1';
				|en = 'Error getting XML content: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		СообщенияБЗК.СообщитьОПроблеме(ТекстОшибки);
	КонецПопытки;
	Если Не ЗначениеЗаполнено(Результат.ИмяБезРасширения) Тогда
		Результат.ИмяБезРасширения = "getPrivateLNData_" + НомерЛН;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область Больничные

// Заполняет структуру ДанныеРеестраЭЛН по данным реестра ЭЛН в соответствии с форматом обмена с ФСС.
Процедура ЗаполнитьДанныеРеестраЗаполняемыеИзБольничного(ДанныеРеестраЭЛН, СсылкаРеестра, НомерЛН)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеЭЛН.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновноеМестоРаботы,
	|	ДанныеЭЛН.БазаДляРасчетаСреднегоЗаработка КАК БазаДляРасчетаСреднегоЗаработка,
	|	ДанныеЭЛН.СреднийДневнойЗаработок КАК СреднийДневнойЗаработок,
	|	ДанныеЭЛН.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	ДанныеЭЛН.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	ДанныеЭЛН.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	ДанныеЭЛН.ДатаАктаН1 КАК ДатаАктаН1,
	|	ДанныеЭЛН.ДатаНачалаРаботы КАК ДатаНачалаРаботы,
	|	ДанныеЭЛН.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	ДанныеЭЛН.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	ДанныеЭЛН.СтажЛет КАК СтажЛет,
	|	ДанныеЭЛН.СтажМесяцев КАК СтажМесяцев,
	|	ДанныеЭЛН.СтажДней КАК СтажДней,
	|	ДанныеЭЛН.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	ДанныеЭЛН.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	ДанныеЭЛН.СтажРасширенныйДней КАК СтажРасширенныйДней,
	|	ДанныеЭЛН.СуммаОплатыЗаСчетРаботодателя КАК СуммаОплатыЗаСчетРаботодателя,
	|	ДанныеЭЛН.СуммаОплатыЗаСчетФСС КАК СуммаОплатыЗаСчетФСС
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
	|ГДЕ
	|	ДанныеЭЛН.Ссылка = &СсылкаРеестра
	|	И ДанныеЭЛН.НомерЛисткаНетрудоспособности = &НомерЛН";
	Запрос.УстановитьПараметр("СсылкаРеестра", СсылкаРеестра);
	Запрос.УстановитьПараметр("НомерЛН",       НомерЛН);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Возврат; // Нештатная ситуация - строка ЭЛН исчезла из принятого реестра.
	КонецЕсли;
	
	ЭлементТаблицыЭЛН = Таблица[0];
	ЗаполнитьЗначенияСвойств(ДанныеРеестраЭЛН, ЭлементТаблицыЭЛН);
	
КонецПроцедуры

// Заполняет структуру ДанныеБольничногоДляЭЛН по данным больничного в соответствии с форматом обмена с ФСС.
Процедура ЗаполнитьДанныеБольничногоОтправляемыеВФСС(ДанныеБольничногоДляЭЛН, БольничныйОбъект)
	
	ЗаполнитьЗначенияСвойств(ДанныеБольничногоДляЭЛН, БольничныйОбъект);
	
	ДатаВключенияРКПриРасчетеБольничного = УчетПособийСоциальногоСтрахования.ДатаВключенияРКПриРасчетеБольничного();
	Если БольничныйОбъект.ДатаНачалаСобытия >= ДатаВключенияРКПриРасчетеБольничного Тогда
		МинимальныйСреднедневной = БольничныйОбъект.МинимальныйСреднедневнойЗаработок * БольничныйОбъект.РайонныйКоэффициентРФНаНачалоСобытия;
	Иначе
		МинимальныйСреднедневной = БольничныйОбъект.МинимальныйСреднедневнойЗаработок;
	КонецЕсли;
	
	БазаДляРасчетСреднего = Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем.БазаДляРасчетаСреднегоЗаработка(БольничныйОбъект);
	
	Если БольничныйОбъект.СреднийДневнойЗаработок <= МинимальныйСреднедневной
		И ЗначениеЗаполнено(БазаДляРасчетСреднего.УчитываемыхДнейВКалендарныхГодах)
		И ЗначениеЗаполнено(БольничныйОбъект.СреднийДневнойЗаработок) Тогда
		БазаДляРасчетаСреднегоЗаработка = БольничныйОбъект.МинимальныйСреднедневнойЗаработок * БазаДляРасчетСреднего.УчитываемыхДнейВКалендарныхГодах;
	ИначеЕсли ЗначениеЗаполнено(БазаДляРасчетСреднего.БазаДляРасчетаСреднегоЗаработка) Тогда
		БазаДляРасчетаСреднегоЗаработка = БазаДляРасчетСреднего.БазаДляРасчетаСреднегоЗаработка;
	Иначе
		БазаДляРасчетаСреднегоЗаработка = 0;
	КонецЕсли;
	ДанныеБольничногоДляЭЛН.БазаДляРасчетаСреднегоЗаработка = БазаДляРасчетаСреднегоЗаработка;
	ДанныеБольничногоДляЭЛН.СреднийДневнойЗаработок = Макс(БольничныйОбъект.СреднийДневнойЗаработок, МинимальныйСреднедневной);
	
	КатегорииЗаСчетФСС          = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.КатегорииПрямыхВыплатФСС();
	КатегорияЗаСчетРаботодателя = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя;
	СуммаОплатыЗаСчетФСС          = 0;
	СуммаОплатыЗаСчетРаботодателя = 0;
	Если БольничныйОбъект.Начисления.Количество() > 0 Тогда
		ТаблицаЗначений = БольничныйОбъект.Начисления.Выгрузить();
		СсылкиНачислений = КоллекцииБЗК.УникальныеЗначенияКолонки(ТаблицаЗначений, "Начисление");
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(СсылкиНачислений, ПланыВидовРасчета.Начисления.ПустаяСсылка());
		Если СсылкиНачислений.Количество() > 0 Тогда
			КатегорииНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СсылкиНачислений, "КатегорияНачисленияИлиНеоплаченногоВремени");
		Иначе
			КатегорииНачислений = Новый Соответствие;
		КонецЕсли;
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			Категория = КатегорииНачислений[СтрокаТаблицы.Начисление];
			Если КатегорииЗаСчетФСС.Найти(Категория) <> Неопределено Тогда
				СуммаОплатыЗаСчетФСС = СуммаОплатыЗаСчетФСС + СтрокаТаблицы.Результат;
			КонецЕсли;
			Если Категория = КатегорияЗаСчетРаботодателя Тогда
				СуммаОплатыЗаСчетРаботодателя = СуммаОплатыЗаСчетРаботодателя + СтрокаТаблицы.Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеБольничногоДляЭЛН.СуммаОплатыЗаСчетФСС          = СуммаОплатыЗаСчетФСС;
	ДанныеБольничногоДляЭЛН.СуммаОплатыЗаСчетРаботодателя = СуммаОплатыЗаСчетРаботодателя;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ЭЛНФСС.ДанныеЭЛНИзXML.ПериодыЛеченияРодственников.
Функция ПериодыЛеченияРодственников(ДанныеЭЛН) Экспорт
	Если ДанныеЭЛН.Свойство("ПериодыЛеченияРодственников") Тогда
		Возврат ДанныеЭЛН.ПериодыЛеченияРодственников;
	КонецЕсли;
	
	Результат = СоздатьТаблицуПериодовЛеченияРодственников(ДанныеЭЛН);
	
	ИменаПолей = "servAge, servMm, servRelationCode, servDt1, servDt2, treatmentType, surname, name, patronymic, birthday, reason1, snils";
	ПоискРодственников = Новый Соответствие;
	Для Каждого УходЗаРодственником Из ДанныеЭЛН.ПериодыЛеченияРодственниковXML Цикл
		// Чтение первичных значений из XML.
		ЗначенияПолей = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(ЗначенияПолей, УходЗаРодственником);
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.ДатаНачала     = СериализацияБЗК.ДатаИзXML(ЗначенияПолей.servDt1);
		СтрокаТаблицы.ДатаОкончания  = СериализацияБЗК.ДатаИзXML(ЗначенияПолей.servDt2);
		СтрокаТаблицы.ДатаРождения   = СериализацияБЗК.ДатаИзXML(ЗначенияПолей.birthday);
		СтрокаТаблицы.ВозрастЛет     = СериализацияБЗК.ЧислоИзXML(ЗначенияПолей.servAge);
		СтрокаТаблицы.ВозрастМесяцев = СериализацияБЗК.ЧислоИзXML(ЗначенияПолей.servMm);
		СтрокаТаблицы.КодПричины     = СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.reason1);
		СтрокаТаблицы.ТипЛечения     = СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.treatmentType);
		СтрокаТаблицы.КодСвязи       = СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.servRelationCode);
		СтрокаТаблицы.СНИЛС          = УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.snils));
		СтрокаТаблицы.Фамилия        = ТРег(СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.surname));
		СтрокаТаблицы.Имя            = ТРег(СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.name));
		СтрокаТаблицы.Отчество       = ТРег(СериализацияБЗК.СтрокаИзXML(ЗначенияПолей.patronymic));
		СтрокаТаблицы.ФИО            = СокрП(СтрокаТаблицы.Фамилия + " " + СтрокаТаблицы.Имя + " " + СтрокаТаблицы.Отчество);
		СтрокаТаблицы.РежимЛечения   = Перечисления.РежимыЛечения.НайтиПоКоду(СтрокаТаблицы.ТипЛечения);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Устарела. Следует использовать ЭЛНФСС.ДанныеЭЛНИзXML.
Функция ДанныеЭЛН(СтруктураDOM, Отказ = Ложь, ТекстСообщенияФСС = Неопределено) Экспорт
	ТекстСообщенияФСС = ТекстСообщенияФСС(СтруктураDOM);
	
	УзелЭЛН = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "responseRow");
	Если УзелЭЛН = Неопределено Тогда
		УзелЭЛН = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "changeElnNotice");
		Если УзелЭЛН = Неопределено Тогда
			УзелЭЛН = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "ROW");
			Если УзелЭЛН = Неопределено Тогда
				ТекстОшибки = ?(ПустаяСтрока(ТекстСообщенияФСС), НСтр("ru = 'Узел ""responseRow"" не найден';
																		|en = '""responseRow"" node not found'"), ТекстСообщенияФСС);
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаXML = СериализацияБЗК.ОбъектDOMВСтрокуXML(УзелЭЛН);
	ОбъектЭЛН = СериализацияБЗК.ОбъектXDTOИзСтрокиXML(СтрокаXML);
	
	УзелОтвета = СериализацияБЗК.НайтиУзелDOMПоИмени(СтруктураDOM, "fileOperationsLnUserGetPrivateLNDataOut");
	УзелКодаОтвета = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "*[local-name() = 'status']", УзелОтвета);
	Если УзелКодаОтвета = Неопределено Тогда
		УзелКодаОтвета = СериализацияБЗК.НайтиУзелDOM(СтруктураDOM, "*[local-name() = 'STATUS']", УзелОтвета);
	КонецЕсли;
	КодОтвета = ?(УзелКодаОтвета = Неопределено, "", СокрЛП(УзелКодаОтвета.ТекстовоеСодержимое));
	Если КодОтвета <> "1" И ЗначениеЗаполнено(ТекстСообщенияФСС) Тогда
		СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстСообщенияФСС);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбъектЭЛН.Свойства().Получить("lnCode") = Неопределено
		И ОбъектЭЛН.Свойства().Получить("LN_CODE") <> Неопределено Тогда
		ДанныеИзСервиса = ОтветСервисаПолученияЭЛНСтаройВерсии(ОбъектЭЛН, Отказ);
	Иначе
		ДанныеИзСервиса = ОтветСервисаПолученияЭЛН(ОбъектЭЛН, Отказ);
	КонецЕсли;
	
	Возврат ДанныеИзСервиса;
КонецФункции

// Устарела. Следует использовать ЭЛНФСС.ДанныеЭЛНИзXML.
Функция ОтветСервисаПолученияЭЛН(ОбъектЭЛН, Отказ) Экспорт
	ИменаПолейИзСервиса = 
	"approve1,
	|approve2,
	|baseAvgDailySal,
	|baseAvgSal,
	|birthday,
	|calcCondition1,
	|calcCondition2,
	|calcCondition3,
	|calcCondition4,
	|date1,
	|date2,
	|dt1Ln,
	|dt2Ln,
	|duplicateFlag,
	|emplFlag,
	|emplParentNo,
	|emplPayment,
	|emplRegNo,
	|emplRegNo2,
	|employer,
	|form1Dt,
	|fssPayment,
	|gender,
	|hospitalBreach,
	|hospitalDt1,
	|hospitalDt2,
	|innPerson,
	|insurMm,
	|insurYy,
	|lnCode,
	|lnDate,
	|lnHash,
	|lnResult,
	|lnState,
	|lpuAddress,
	|lpuName,
	|lpuOgrn,
	|mseDt1,
	|mseDt2,
	|mseDt3,
	|mseInvalidGroup,
	|mseInvalidLoss,
	|name,
	|notInsurMm,
	|notInsurYy,
	|patronymic,
	|payment,
	|pregn12wFlag,
	|prevLnCode,
	|primaryFlag,
	|reason1,
	|reason2,
	|reason3,
	|returnDateEmpl,
	|snils,
	|surname,
	|voucherNo,
	|voucherOgrn,
	|previouslyIssuedCode,
	|intermittentMethodFlag";
	
	ДанныеИзСервиса = Новый Структура(ИменаПолейИзСервиса);
	ЗаполнитьЗначенияСвойств(ДанныеИзСервиса, ОбъектЭЛН);
	ДанныеИзСервиса.Вставить("АктуальныйФормат", Истина); // Проверять заполнение обязательных полей.
	
	// Базовые проверки спецификации.
	БазовыеПоля = СтрРазделить("snils, lnCode", ", ", Ложь);
	Для Каждого ИмяПоля Из БазовыеПоля Цикл
		Если Не ЗначениеЗаполнено(ДанныеИзСервиса[ИмяПоля]) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Файл не соответствует спецификации: Не заполнено поле ""%1"".';
										|en = 'File does not match the specification: Field ""%1"" is blank.'"), ИмяПоля);
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеИзСервиса.Вставить("НомерЛН", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.lnCode));
	ДанныеИзСервиса.Вставить("ДатаЛН", СериализацияБЗК.ДатаИзXML(ДанныеИзСервиса.lnDate));
	ДанныеИзСервиса.Вставить("ХешЭЛН", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.lnHash));
	
	ДанныеИзСервиса.Вставить("СНИЛС", УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ДанныеИзСервиса.snils));
	ДанныеИзСервиса.Вставить("Фамилия",  СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.surname));
	ДанныеИзСервиса.Вставить("Имя",      СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.name));
	ДанныеИзСервиса.Вставить("Отчество", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.patronymic));
	
	ДанныеИзСервиса.Вставить("ЯвляетсяПродолжениемБолезни", Не СериализацияБЗК.БулевоИзXML(ДанныеИзСервиса.primaryFlag));
	ДанныеИзСервиса.Вставить("НомерПервичногоЛисткаНетрудоспособности", Строка(ДанныеИзСервиса.prevLnCode));
	
	ДанныеИзСервиса.Вставить("ПериодыНетрудоспособности", СериализацияБЗК.СписокXDTO(ОбъектЭЛН, "treatPeriods.treatFullPeriod"));
	ДанныеИзСервиса.Вставить("ПериодыЛеченияРодственниковXML", СериализацияБЗК.СписокXDTO(ОбъектЭЛН, "servData.servFullData"));
	
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(ДанныеИзСервиса.lnState);
	ДанныеИзСервиса.Вставить("СостояниеЭЛНВФСС", СостояниеЭЛНВФСС);
	
	Возврат ДанныеИзСервиса;
КонецФункции

// Устарела. Следует использовать ЭЛНФСС.ДанныеЭЛНИзXML.
Функция ОтветСервисаПолученияЭЛНСтаройВерсии(ОбъектЭЛН, Отказ)
	ИменаПолейСтарогоФормата = 
	"APPROVE1,
	|APPROVE2,
	|BASE_AVG_DAILY_SAL,
	|BASE_AVG_SAL,
	|BIRTHDAY,
	|BOZ_FLAG,
	|CALC_CONDITION1,
	|CALC_CONDITION2,
	|CALC_CONDITION3,
	|CALC_CONDITION4,
	|DATE1,
	|DATE2,
	|DT1_LN,
	|DT2_LN,
	|DUPLICATE_FLAG,
	|EMPL_FLAG,
	|EMPL_PARENT_NO,
	|EMPL_PAYMENT,
	|EMPL_REG_NO,
	|EMPL_REG_NO2,
	|EMPLOYER,
	|FORM1_DT,
	|FSS_PAYMENT,
	|GENDER,
	|HOSPITAL_BREACH,
	|HOSPITAL_DT1,
	|HOSPITAL_DT2,
	|INN_PERSON,
	|INSUR_MM,
	|INSUR_YY,
	|LN_CODE,
	|LN_DATE,
	|LN_HASH,
	|LN_RESULT,
	|LN_STATE,
	|LPU_ADDRESS,
	|LPU_EMPL_FLAG,
	|LPU_EMPLOYER,
	|LPU_NAME,
	|LPU_OGRN,
	|MSE_DT1,
	|MSE_DT2,
	|MSE_DT3,
	|MSE_INVALID_GROUP,
	|NAME,
	|NOT_INSUR_MM,
	|NOT_INSUR_YY,
	|PARENT_CODE,
	|PATRONIMIC,
	|PAYMENT,
	|PREGN12W_FLAG,
	|PREV_LN_CODE,
	|PRIMARY_FLAG,
	|REASON1,
	|REASON2,
	|REASON3,
	|RETURN_DATE_EMPL,
	|SERV1_AGE,
	|SERV1_FIO,
	|SERV1_MM,
	|SERV1_RELATION_CODE,
	|SERV2_AGE,
	|SERV2_FIO,
	|SERV2_MM,
	|SERV2_RELATION_CODE,
	|SNILS,
	|SURNAME,
	|VOUCHER_NO,
	|VOUCHER_OGRN";
	
	ДанныеВСтаромФормате = Новый Структура(ИменаПолейСтарогоФормата);
	ЗаполнитьЗначенияСвойств(ДанныеВСтаромФормате, ОбъектЭЛН);
	
	ДанныеИзСервиса = Новый Структура;
	ДанныеИзСервиса.Вставить("АктуальныйФормат", Ложь); // Отключается проверка заполнения даты рождения родственника.
	ДанныеИзСервиса.Вставить("approve1", ДанныеВСтаромФормате.APPROVE1);
	ДанныеИзСервиса.Вставить("approve2", ДанныеВСтаромФормате.APPROVE2);
	ДанныеИзСервиса.Вставить("baseAvgDailySal", ДанныеВСтаромФормате.BASE_AVG_DAILY_SAL);
	ДанныеИзСервиса.Вставить("baseAvgSal", ДанныеВСтаромФормате.BASE_AVG_SAL);
	ДанныеИзСервиса.Вставить("birthday", ДанныеВСтаромФормате.BIRTHDAY);
	ДанныеИзСервиса.Вставить("calcCondition1", ДанныеВСтаромФормате.CALC_CONDITION1);
	ДанныеИзСервиса.Вставить("calcCondition2", ДанныеВСтаромФормате.CALC_CONDITION2);
	ДанныеИзСервиса.Вставить("calcCondition3", ДанныеВСтаромФормате.CALC_CONDITION3);
	ДанныеИзСервиса.Вставить("calcCondition4", ДанныеВСтаромФормате.CALC_CONDITION4);
	ДанныеИзСервиса.Вставить("date1", ДанныеВСтаромФормате.DATE1);
	ДанныеИзСервиса.Вставить("date2", ДанныеВСтаромФормате.DATE2);
	ДанныеИзСервиса.Вставить("dt1Ln", ДанныеВСтаромФормате.DT1_LN);
	ДанныеИзСервиса.Вставить("dt2Ln", ДанныеВСтаромФормате.DT2_LN);
	ДанныеИзСервиса.Вставить("duplicateFlag", ДанныеВСтаромФормате.DUPLICATE_FLAG);
	ДанныеИзСервиса.Вставить("emplFlag", ДанныеВСтаромФормате.EMPL_FLAG);
	ДанныеИзСервиса.Вставить("emplParentNo", ДанныеВСтаромФормате.EMPL_PARENT_NO);
	ДанныеИзСервиса.Вставить("emplPayment", ДанныеВСтаромФормате.EMPL_PAYMENT);
	ДанныеИзСервиса.Вставить("emplRegNo", ДанныеВСтаромФормате.EMPL_REG_NO);
	ДанныеИзСервиса.Вставить("emplRegNo2", ДанныеВСтаромФормате.EMPL_REG_NO2);
	ДанныеИзСервиса.Вставить("employer", ДанныеВСтаромФормате.EMPLOYER);
	ДанныеИзСервиса.Вставить("form1Dt", ДанныеВСтаромФормате.FORM1_DT);
	ДанныеИзСервиса.Вставить("fssPayment", ДанныеВСтаромФормате.FSS_PAYMENT);
	ДанныеИзСервиса.Вставить("gender", ДанныеВСтаромФормате.GENDER);
	ДанныеИзСервиса.Вставить("hospitalBreach", Неопределено);
	ДанныеИзСервиса.Вставить("hospitalDt1", ДанныеВСтаромФормате.HOSPITAL_DT1);
	ДанныеИзСервиса.Вставить("hospitalDt2", ДанныеВСтаромФормате.HOSPITAL_DT2);
	ДанныеИзСервиса.Вставить("innPerson", ДанныеВСтаромФормате.INN_PERSON);
	ДанныеИзСервиса.Вставить("insurMm", ДанныеВСтаромФормате.INSUR_MM);
	ДанныеИзСервиса.Вставить("insurYy", ДанныеВСтаромФормате.INSUR_YY);
	ДанныеИзСервиса.Вставить("lnCode", ДанныеВСтаромФормате.LN_CODE);
	ДанныеИзСервиса.Вставить("lnDate", ДанныеВСтаромФормате.LN_DATE);
	ДанныеИзСервиса.Вставить("lnHash", ДанныеВСтаромФормате.LN_HASH);
	ДанныеИзСервиса.Вставить("lnResult", Неопределено);
	ДанныеИзСервиса.Вставить("lnState", ДанныеВСтаромФормате.LN_STATE);
	ДанныеИзСервиса.Вставить("lpuAddress", ДанныеВСтаромФормате.LPU_ADDRESS);
	ДанныеИзСервиса.Вставить("lpuName", ДанныеВСтаромФормате.LPU_NAME);
	ДанныеИзСервиса.Вставить("lpuOgrn", ДанныеВСтаромФормате.LPU_OGRN);
	ДанныеИзСервиса.Вставить("mseDt1", ДанныеВСтаромФормате.MSE_DT1);
	ДанныеИзСервиса.Вставить("mseDt2", ДанныеВСтаромФормате.MSE_DT2);
	ДанныеИзСервиса.Вставить("mseDt3", ДанныеВСтаромФормате.MSE_DT3);
	ДанныеИзСервиса.Вставить("mseInvalidGroup", ДанныеВСтаромФормате.MSE_INVALID_GROUP);
	ДанныеИзСервиса.Вставить("mseInvalidLoss", Неопределено);
	ДанныеИзСервиса.Вставить("name", ДанныеВСтаромФормате.NAME);
	ДанныеИзСервиса.Вставить("notInsurMm", ДанныеВСтаромФормате.NOT_INSUR_MM);
	ДанныеИзСервиса.Вставить("notInsurYy", ДанныеВСтаромФормате.NOT_INSUR_YY);
	ДанныеИзСервиса.Вставить("patronymic", ДанныеВСтаромФормате.PATRONIMIC);
	ДанныеИзСервиса.Вставить("payment", ДанныеВСтаромФормате.PAYMENT);
	ДанныеИзСервиса.Вставить("pregn12wFlag", Неопределено);
	ДанныеИзСервиса.Вставить("prevLnCode", ДанныеВСтаромФормате.PREV_LN_CODE);
	ДанныеИзСервиса.Вставить("primaryFlag", ДанныеВСтаромФормате.PRIMARY_FLAG);
	ДанныеИзСервиса.Вставить("reason1", ДанныеВСтаромФормате.REASON1);
	ДанныеИзСервиса.Вставить("reason2", ДанныеВСтаромФормате.REASON2);
	ДанныеИзСервиса.Вставить("reason3", ДанныеВСтаромФормате.REASON3);
	ДанныеИзСервиса.Вставить("returnDateEmpl", ДанныеВСтаромФормате.RETURN_DATE_EMPL);
	ДанныеИзСервиса.Вставить("snils", ДанныеВСтаромФормате.SNILS);
	ДанныеИзСервиса.Вставить("surname", ДанныеВСтаромФормате.SURNAME);
	ДанныеИзСервиса.Вставить("voucherNo", ДанныеВСтаромФормате.VOUCHER_NO);
	ДанныеИзСервиса.Вставить("voucherOgrn", ДанныеВСтаромФормате.VOUCHER_OGRN);
	ДанныеИзСервиса.Вставить("previouslyIssuedCode", "");
	ДанныеИзСервиса.Вставить("intermittentMethodFlag", Неопределено);
	
	// Адаптация поля pregn12wFlag.
	Если ДанныеВСтаромФормате.PREGN12W_FLAG = "1" Тогда
		ДанныеИзСервиса.Вставить("pregn12wFlag", "true");
	ИначеЕсли ДанныеВСтаромФормате.PREGN12W_FLAG = "0" Тогда
		ДанныеИзСервиса.Вставить("pregn12wFlag", "false");
	КонецЕсли;
	
	// Адаптация вложенных полей lnResult.
	Если ДанныеВСтаромФормате.LN_RESULT <> Неопределено Тогда
		ЗначенияВСтаромФормате = Новый Структура("MSE_RESULT, OTHER_STATE_DT, RETURN_DATE_LPU, NEXT_LN_CODE");
		ЗаполнитьЗначенияСвойств(ЗначенияВСтаромФормате, ДанныеВСтаромФормате.LN_RESULT);
		
		Значения = Новый Структура;
		Значения.Вставить("mseResult", ЗначенияВСтаромФормате.MSE_RESULT);
		Значения.Вставить("otherStateDt", ЗначенияВСтаромФормате.OTHER_STATE_DT);
		Значения.Вставить("returnDateLpu", ЗначенияВСтаромФормате.RETURN_DATE_LPU);
		Значения.Вставить("nextLnCode", ЗначенияВСтаромФормате.NEXT_LN_CODE);
		
		ДанныеИзСервиса.Вставить("lnResult", Значения);
	КонецЕсли;
	
	// Адаптация вложенных полей hospitalBreach.
	Если ДанныеВСтаромФормате.HOSPITAL_BREACH <> Неопределено Тогда
		ЗначенияВСтаромФормате = Новый Структура("HOSPITAL_BREACH_CODE, HOSPITAL_BREACH_DT");
		ЗаполнитьЗначенияСвойств(ЗначенияВСтаромФормате, ДанныеВСтаромФормате.HOSPITAL_BREACH);
		
		Значения = Новый Структура;
		Значения.Вставить("hospitalBreachCode", ЗначенияВСтаромФормате.HOSPITAL_BREACH_CODE);
		Значения.Вставить("hospitalBreachDt", ЗначенияВСтаромФормате.HOSPITAL_BREACH_DT);
		
		ДанныеИзСервиса.Вставить("hospitalBreach", Значения);
	КонецЕсли;
	
	// Адаптация вложенных полей treatPeriods.treatFullPeriod.
	ДатаНачала    = '39991231235959';
	ДатаОкончания = '00010101';
	ДатаНачалаXML    = "";
	ДатаОкончанияXML = "";
	ПериодыНетрудоспособности = Новый Массив;
	ПериодыНетрудоспособностиВСтаромФормате = СериализацияБЗК.СписокXDTO(ОбъектЭЛН, "TREAT_PERIODS.TREAT_FULL_PERIOD");
	Для Каждого СтрокаТаблицыПолныхПериодов Из ПериодыНетрудоспособностиВСтаромФормате Цикл
		
		СвойстваПериодаВСтаромФормате = Новый Структура("TREAT_CHAIRMAN, TREAT_CHAIRMAN_ROLE, TREAT_PERIOD");
		ЗаполнитьЗначенияСвойств(СвойстваПериодаВСтаромФормате, СтрокаТаблицыПолныхПериодов);
		
		ПодробностиПериода = Неопределено;
		Если СвойстваПериодаВСтаромФормате.TREAT_PERIOD <> Неопределено Тогда
			
			ПодробностиПериодаВСтаромФормате = Новый Структура("TREAT_DT1, TREAT_DT2, TREAT_DOCTOR_ROLE, TREAT_DOCTOR");
			ЗаполнитьЗначенияСвойств(ПодробностиПериодаВСтаромФормате, СвойстваПериодаВСтаромФормате.TREAT_PERIOD);
			
			ПодробностиПериода = Новый Структура;
			ПодробностиПериода.Вставить("treatDt1",        ПодробностиПериодаВСтаромФормате.TREAT_DT1);
			ПодробностиПериода.Вставить("treatDt2",        ПодробностиПериодаВСтаромФормате.TREAT_DT2);
			ПодробностиПериода.Вставить("treatDoctorRole", ПодробностиПериодаВСтаромФормате.TREAT_DOCTOR_ROLE);
			ПодробностиПериода.Вставить("treatDoctor",     ПодробностиПериодаВСтаромФормате.TREAT_DOCTOR);
			
			// Для заполнения обязательных полей servDt1 и servDt2 требуется вычислить начало и окончание нетрудоспособности.
			Дата1 = СериализацияБЗК.ДатаИзXML(ПодробностиПериода.treatDt1);
			Дата2 = СериализацияБЗК.ДатаИзXML(ПодробностиПериода.treatDt2);
			Если ЗначениеЗаполнено(Дата1) И Дата1 < ДатаНачала Тогда
				ДатаНачала    = Дата1;
				ДатаНачалаXML = ПодробностиПериода.treatDt1;
				Если ДатаОкончания < ДатаНачала Тогда
					ДатаОкончания    = ДатаНачала;
					ДатаОкончанияXML = ДатаНачалаXML;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Дата2) И Дата2 > ДатаОкончания Тогда
				ДатаОкончания    = Дата2;
				ДатаОкончанияXML = ПодробностиПериода.treatDt2;
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваПериода = Новый Структура;
		СвойстваПериода.Вставить("treatChairman",     СвойстваПериодаВСтаромФормате.TREAT_CHAIRMAN);
		СвойстваПериода.Вставить("treatChairmanRole", СвойстваПериодаВСтаромФормате.TREAT_CHAIRMAN_ROLE);
		СвойстваПериода.Вставить("treatPeriod",       ПодробностиПериода);
		
		ПериодыНетрудоспособности.Добавить(СвойстваПериода);
	КонецЦикла;
	
	// Адаптация вложенных полей servData.servFullData.
	ПериодыЛеченияРодственниковXML = Новый Массив;
	Для НомерРодственника = 1 По 2 Цикл
		Префикс = "SERV" + НомерРодственника + "_";
		
		ФИО            = СериализацияБЗК.СтрокаИзXML(ДанныеВСтаромФормате[Префикс + "FIO"]);
		ВозрастЛет     = СериализацияБЗК.ЧислоИзXML(ДанныеВСтаромФормате[Префикс + "AGE"]);
		ВозрастМесяцев = СериализацияБЗК.ЧислоИзXML(ДанныеВСтаромФормате[Префикс + "MM"]);
		Если ЗначениеЗаполнено(ФИО)
			Или (ТипЗнч(ВозрастЛет) = Тип("Число")     И ВозрастЛет > 0)
			Или (ТипЗнч(ВозрастМесяцев) = Тип("Число") И ВозрастМесяцев > 0) Тогда
			
			Если ЗначениеЗаполнено(ФИО) Тогда
				ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
			Иначе
				ЧастиИмени = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
			КонецЕсли;
			
			ЗначенияПолей = Новый Структура;
			ЗначенияПолей.Вставить("servAge",          ДанныеВСтаромФормате[Префикс + "AGE"]);
			ЗначенияПолей.Вставить("servMm",           ДанныеВСтаромФормате[Префикс + "MM"]);
			ЗначенияПолей.Вставить("servRelationCode", ДанныеВСтаромФормате[Префикс + "RELATION_CODE"]);
			ЗначенияПолей.Вставить("servDt1",          ДатаНачалаXML);
			ЗначенияПолей.Вставить("servDt2",          ДатаОкончанияXML);
			ЗначенияПолей.Вставить("treatmentType",    Неопределено);
			ЗначенияПолей.Вставить("surname",          ЧастиИмени.Фамилия);
			ЗначенияПолей.Вставить("name",             ЧастиИмени.Имя);
			ЗначенияПолей.Вставить("patronymic",       ЧастиИмени.Отчество);
			ЗначенияПолей.Вставить("birthday",         Неопределено);
			ЗначенияПолей.Вставить("reason1",          Неопределено);
			ЗначенияПолей.Вставить("snils",            Неопределено);
			
			ПериодыЛеченияРодственниковXML.Добавить(ЗначенияПолей);
		КонецЕсли;
	КонецЦикла;
	
	// Базовые проверки спецификации.
	БазовыеПоля = СтрРазделить("snils, lnCode", ", ", Ложь);
	Для Каждого ИмяПоля Из БазовыеПоля Цикл
		Если Не ЗначениеЗаполнено(ДанныеИзСервиса[ИмяПоля]) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Файл не соответствует спецификации: Не заполнено поле ""%1"".';
										|en = 'File does not match the specification: Field ""%1"" is blank.'"), ИмяПоля);
			СообщенияБЗККлиентСервер.СообщитьОбОшибкеВФорме(Отказ, ТекстОшибки, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеИзСервиса.Вставить("НомерЛН", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.lnCode));
	ДанныеИзСервиса.Вставить("ДатаЛН", СериализацияБЗК.ДатаИзXML(ДанныеИзСервиса.lnDate));
	ДанныеИзСервиса.Вставить("ХешЭЛН", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.lnHash));
	
	ДанныеИзСервиса.Вставить("СНИЛС", УчетПособийСоциальногоСтрахованияКлиентСервер.СНИЛСВФорматеИБ(ДанныеИзСервиса.snils));
	ДанныеИзСервиса.Вставить("Фамилия",  СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.surname));
	ДанныеИзСервиса.Вставить("Имя",      СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.name));
	ДанныеИзСервиса.Вставить("Отчество", СериализацияБЗК.СтрокаИзXML(ДанныеИзСервиса.patronymic));
	
	ДанныеИзСервиса.Вставить("ЯвляетсяПродолжениемБолезни", Не СериализацияБЗК.БулевоИзXML(ДанныеИзСервиса.primaryFlag));
	ДанныеИзСервиса.Вставить("НомерПервичногоЛисткаНетрудоспособности", Строка(ДанныеИзСервиса.prevLnCode));
	
	ДанныеИзСервиса.Вставить("ПериодыНетрудоспособности", ПериодыНетрудоспособности);
	ДанныеИзСервиса.Вставить("ПериодыЛеченияРодственниковXML", ПериодыЛеченияРодственниковXML);
	
	СостояниеЭЛНВФСС = Перечисления.СостоянияЭЛНВФСС.НайтиПоКодуФСС(ДанныеИзСервиса.lnState);
	ДанныеИзСервиса.Вставить("СостояниеЭЛНВФСС", СостояниеЭЛНВФСС);
	
	Возврат ДанныеИзСервиса;
КонецФункции

// Устарела. Следует использовать ЭЛНФСС.ПустаяТаблицаПериодовЛеченияРодственников.
Функция СоздатьТаблицуПериодовЛеченияРодственников(ДанныеЭЛН) Экспорт
	Результат = ЭЛНФСС.ПустаяТаблицаПериодовЛеченияРодственников();
	ДанныеЭЛН.Вставить("ПериодыЛеченияРодственников", Результат);
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
