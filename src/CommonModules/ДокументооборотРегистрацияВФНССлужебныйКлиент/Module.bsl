////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - обеспечивает цикл авторизации
// - обеспечивает цикл отправки
// - обеспечивает цикл проверки статуса отправленного заявления
// - выполняет клиентские асинхронные вызовы сервиса регистрации
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет отправку заявления на сервер ФНС
//
// Основные этапы цикла обмена
// - проверка токена авторизации, при необходимости авторизация пользователя см. АвторизацияПользователя
// - отправка пакета
// - проверка статуса после отправки
// - формирование результата работы
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Токен 				- Строка - значение токена авторизации в формате Base64
//		* ИдентификаторЗаявления- Строка - идентификатор заявления присвоенный сервером
//		* ОтправкаСсылка		- СправочникСсылка.ОтправкиРегистрацияЮЛ
//      * Ошибка				- Строка - описание ошибки выполнения.
//	ИмяФайлаПакета 				- Строка
//	ПакетОтправки 				- Строка, ДвоичныеДанные - адрес временного хранилища
//	ПредметОтправки 			- ДокументСсылка
//	ПараметрыОперации 			- Структура
//		* Сертификат 			- Структура - см. СертификатПодписи()
//		* ПарольСертификата 	- Строка
//		* ТокенАвторизации		- Строка
//
Процедура ОтправкаПакетаРегистрацииЮЛ(
			ОповещениеОЗавершении,
			ИмяФайлаПакета,
			ПакетОтправки,
			ПредметОтправки,
			ПараметрыОперации = Неопределено) Экспорт
			
	Сертификат = СвойствоСтруктуры(ПараметрыОперации, "Сертификат");
	ПарольСертификата = СвойствоСтруктуры(ПараметрыОперации, "ПарольСертификата");
	ОтпечатокСертификата = СвойствоСтруктуры(Сертификат, "Отпечаток", "");
	ТокенАвторизации = СвойствоСтруктуры(Сертификат, "ТокенАвторизации", Неопределено);
	МенеджерКриптографии = СвойствоСтруктуры(ПараметрыОперации, "МенеджерКриптографии", Неопределено);
	ПоказыватьОжидание = СвойствоСтруктуры(ПараметрыОперации, "ПоказыватьОжидание", Ложь);
	ВерсияОбмена = ДокументооборотРегистрацияВФНСКлиентСервер.ВерсияОбменаПоУмолчанию();
	
	Если ТокенАвторизации = Неопределено И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ТокенАвторизации = ПолучитьТокенАвторизацииПользователя(ОтпечатокСертификата);
	КонецЕсли;	
	
	ПараметрыЦикла = Новый Структура();
	ПараметрыЦикла.Вставить("ПредметОтправки", ПредметОтправки);
	ПараметрыЦикла.Вставить("ИмяФайлаПакета", ИмяФайлаПакета);
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("Сертификат", Сертификат);
	ПараметрыЦикла.Вставить("ПарольСертификата", ?(Сертификат = Неопределено, Неопределено, ПарольСертификата));
	ПараметрыЦикла.Вставить("ТокенАвторизации", ТокенАвторизации);
	ПараметрыЦикла.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ПараметрыЦикла.Вставить("ОтправкаСсылка", Неопределено);
	ПараметрыЦикла.Вставить("ИдентификаторЗаявления", "");
	ПараметрыЦикла.Вставить("ПакетОтправки", ПакетОтправки);
	ПараметрыЦикла.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
	ПараметрыЦикла.Вставить("ВерсияОбмена", ВерсияОбмена);
	
	Если ТокенАвторизации = Неопределено И ВерсияОбмена = 0 Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛПолучениеТокена", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛОшибка", ЭтотОбъект));
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Сертификат", Сертификат);
		ПараметрыВызова.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		ПараметрыВызова.Вставить("ПарольСертификата", ПарольСертификата);
		ПараметрыВызова.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ПараметрыВызова.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
		
		АвторизацияПользователя(ОповещениеСледующее, ПараметрыВызова);
		
	Иначе
		ОтправкаПакетаРегистрацииЮЛОтправкаПакета(ПараметрыЦикла);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет состояние заявление на сервере ФНС и обновляет его статус в ИБ
//
// Основные этапы цикла обмена
// - проверка токена авторизации, при необходимости авторизация пользователя см. АвторизацияПользователя
// - обновление статуса заявления
// - формирование результата работы
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Токен 				- Строка - значение токена авторизации в формате Base64
//		* ИдентификаторЗаявления- Строка - идентификатор заявления присвоенный сервером
//		* ОтправкаСсылка		- СправочникСсылка.ОтправкиРегистрацияЮЛ
//      * Ошибка				- Строка - описание ошибки выполнения.
//	ПредметОтправки 			- ДокументСсылка, СправочникСсылка.ОтправкиРегистрацияЮЛ
//	ПараметрыОперации 			- Структура
//		* Сертификат 			- Структура - см. СертификатПодписи()
//		* ПарольСертификата 	- Строка
//		* ТокенАвторизации		- Строка
//
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ(
			ОповещениеОЗавершении,
			ПредметОтправки,
			ПараметрыОперации = Неопределено) Экспорт
			
	СвойстваОтправки = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваОтправкиРегистрацииЮЛ(ПредметОтправки);
	Сертификат = СвойствоСтруктуры(ПараметрыОперации, "Сертификат");
	ПарольСертификата = СвойствоСтруктуры(ПараметрыОперации, "ПарольСертификата");
	ПринудительноОбновить = СвойствоСтруктуры(ПараметрыОперации, "ПринудительноОбновить", Ложь);
	ПоказыватьОжидание = СвойствоСтруктуры(ПараметрыОперации, "ПоказыватьОжидание", Ложь);
	
	ТокенАвторизации = СвойствоСтруктуры(ПараметрыОперации, "ТокенАвторизации", Неопределено);
	Если ТокенАвторизации = Неопределено И ЗначениеЗаполнено(СвойстваОтправки.ОтпечатокСертификата) И СвойстваОтправки.ВерсияОбмена = 0 Тогда
		ТокенАвторизации = ПолучитьТокенАвторизацииПользователя(СвойстваОтправки.ОтпечатокСертификата);
	КонецЕсли;	
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ИдентификаторЗаявления", СвойстваОтправки.ИдентификаторЗаявления);
	ПараметрыЦикла.Вставить("ОтпечатокСертификата", СвойстваОтправки.ОтпечатокСертификата);
	ПараметрыЦикла.Вставить("ОтправкаСсылка", СвойстваОтправки.ОтправкаСсылка);
	ПараметрыЦикла.Вставить("ПредметОтправки", ПредметОтправки);
	ПараметрыЦикла.Вставить("ТокенАвторизации", ТокенАвторизации);
	ПараметрыЦикла.Вставить("ПринудительноОбновить", ПринудительноОбновить);
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("Файлы", Новый Массив);
	ПараметрыЦикла.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
	ПараметрыЦикла.Вставить("ВерсияОбмена", СвойстваОтправки.ВерсияОбмена);
	
	Если НЕ ЗначениеЗаполнено(СвойстваОтправки.ОтправкаСсылка) Тогда
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛРезультат(
				НСтр("ru = 'Не обнаружена отправка для ';
					|en = 'Не обнаружена отправка для '") + ПредметОтправки, 
				ПараметрыЦикла);
		
	ИначеЕсли ТокенАвторизации = Неопределено И СвойстваОтправки.ВерсияОбмена = 0 Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПолучениеТокена", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОбновитьСостояниеЗаявленияНаРегистрациюЮЛОшибка", ЭтотОбъект));
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("Сертификат", Сертификат);
		ПараметрыВызова.Вставить("ОтпечатокСертификата", СвойстваОтправки.ОтпечатокСертификата);
		ПараметрыВызова.Вставить("ПарольСертификата", ?(Сертификат = Неопределено, Неопределено, ПарольСертификата));
		ПараметрыВызова.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
		
		АвторизацияПользователя(ОповещениеСледующее, ПараметрыВызова);
		
	Иначе
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПодключение(ПараметрыЦикла);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет состояние заявлений на сервере ФНС и обновляет их статус в ИБ
//
// Основные этапы цикла обмена
// - обновление статуса заявления
// - формирование результата работы
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Ошибка				- Строка - описание ошибки выполнения.
//	Организация					- СправочникСсылка.Организации
//	ПараметрыОперации 			- Структура
//
Процедура ОбновитьСостояниеЗаявленийНаРегистрациюЮЛ(
			ОповещениеОЗавершении,
			Организация,
			ПараметрыОперации = Неопределено) Экспорт

	ВсеОтправки = ДокументооборотРегистрацияВФНСВызовСервера.ПолучитьОтправкиПоОрганизации(Организация);
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("Организация", Организация);
	ПараметрыЦикла.Вставить("Отправки", ВсеОтправки);
	ПараметрыЦикла.Вставить("Счетчик", 0);
	ПараметрыЦикла.Вставить("Всего", ВсеОтправки.Количество() - 1);
	
	ОбновитьСостояниеЗаявленийНаРегистрациюЮЛСледующее(Новый Структура("Выполнено", Истина), ПараметрыЦикла);
	
КонецПроцедуры

// Выполняет выгрузку файлов отправки, разделенных на этапы и упаковывает их в один архив
//
// Основные этапы цикла обмена
// - подготовка параметров цикла
// - проверяет наличие установленного расширения для работы с файлами
// - формирования архива с файлами (фоновое задание на сервере)
// - диалог выбора файла и запись файла с архивом
// - завершение цикла
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Ошибка				- Строка - описание ошибки выполнения.
//	МассивЭтапов 				- Массив - где элементы структура с описанием этапа отправки
//	ИдентификаторОтправки		- Строка
//
Процедура ВыгрузитьВсеФайлыЭтапов(ОповещениеОЗавершении, Отправка, ИдентификаторФормы = Неопределено) Экспорт
	
	ВсеЭтапы = ДокументооборотРегистрацияВФНСВызовСервера.СформироватьЭтапыОтправки(Отправка);
	
	МассивЭтапов = Новый Массив;
	Если ВсеЭтапы.ПринятВОбработку.Выполнен Тогда
		МассивЭтапов.Добавить(ВсеЭтапы.ПринятВОбработку);
	КонецЕсли;
	
	Если ВсеЭтапы.Рассмотрение.Выполнен Тогда
		МассивЭтапов.Добавить(ВсеЭтапы.Рассмотрение);
	КонецЕсли;
	
	Если ВсеЭтапы.Отправлено.Выполнен Тогда
		МассивЭтапов.Добавить(ВсеЭтапы.Отправлено);
	КонецЕсли;
	
	ВыгрузитьФайлыЭтапов(ОповещениеОЗавершении, МассивЭтапов, ВсеЭтапы.ИдентификаторНаСервере, ИдентификаторФормы);
	
КонецПроцедуры

// Предусмотрен разбор строки навигационной ссылка и извлечения из нее ссылки на объект базы
//
// Параметры:
//	СсылкаОтправки 		- СправочникСсылка.ОтправкиРегистрацияЮЛ
//	НавигационнаяСсылка - Строка
//	ИдентификаторФормы 	- Неопределено
//						- УникальныйИдентификатор
//
Процедура ОткрытьФайлПоСсылке(СсылкаОтправки, НавигационнаяСсылка, ИдентификаторФормы = Неопределено) Экспорт
	
	ТекущийФайл = ДокументооборотРегистрацияВФНСВызовСервера.ПолучитьДанныеПоНавигационнойСсылке(НавигационнаяСсылка);
	
	Если ЗначениеЗаполнено(ТекущийФайл) Тогда
	 	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущийФайл, ИдентификаторФормы);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет результат выполнения фонового задания, формирует параметры ожидания результата
//
// Параметры:
//	ОповещениеОЗавершении 	- ОписаниеОповещения
//	ДлительнаяОперация		- Структура - описание длительной операции
//	ПараметрыОперации		- Структура - ожидаемые поля ПоказыватьОжидание, ФормаВладелец, ПояснениеОперации
//
Процедура ОжидатьЗавершенияВыполненияВФоне(ОповещениеОЗавершении, ДлительнаяОперация, ПараметрыОперации = Неопределено) Экспорт
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ВыводитьОкноОжидания = СвойствоСтруктуры(ПараметрыОперации, "ПоказыватьОжидание", Ложь);
		ФормаВладелец = СвойствоСтруктуры(ПараметрыОперации, "ФормаВладелец");
		ПояснениеОперации = СвойствоСтруктуры(ПараметрыОперации, "ПояснениеОперации", "");
		
		ПараметрыОжидания.ФормаВладелец = ФормаВладелец;
		ПараметрыОжидания.ТекстСообщения = ПояснениеОперации;
		ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, ДлительнаяОперация);
		
	КонецЕсли;	

КонецПроцедуры

// Получает результат выполнения длительной операции
//
// Параметры:
//	ДлительнаяОперация - Структура - описание длительной операции
//
// Возвращаемое значение:
//	Структура - с обязательными полями, состав другие полей зависит от вызываемой функции
//		* Выполнено - Булево
//		* Ошибка 	- Строка
//
Функция ПолучитьРезультатВыполненияВФоне(ДлительнаяОперация, РеквизитыВХранилище = "") Экспорт
	
	Ответ = Новый Структура;
	Ответ.Вставить("Выполнено", Ложь);
	Ответ.Вставить("Ошибка", "");
	
	Если ДлительнаяОперация = Неопределено Тогда
		Ответ.Ошибка = НСтр("ru = 'Работа сервиса регистрации ЮЛ/ИП завершилась ошибкой.';
							|en = 'Работа сервиса регистрации ЮЛ/ИП завершилась ошибкой.'");
	ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
		Ответ = ДокументооборотРегистрацияВФНСВызовСервера.ПолучитьРезультатВыполненияВФоне(ДлительнаяОперация, РеквизитыВХранилище);
	Иначе
		Ответ.Ошибка = НСтр("ru = 'Вызов API сервиса регистрации ЮЛ/ИП завершился с ошибкой при выполнении.';
							|en = 'Вызов API сервиса регистрации ЮЛ/ИП завершился с ошибкой при выполнении.'") 
						+ ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Структура с информацией об используемом сертификате
//
// Параметры:
//	ДанныеСертификата 					- Неопределено, Структура - данные для заполнения структуры
//
// Возвращаемое значение:
//	Отпечаток 							- Строка
//	ЭтоЭлектроннаяПодписьВМоделиСервиса - Булево
//	Поставщик 							- Строка - представление издателя
//	СерийныйНомер 						- Строка
//	Сертификат 							- Строка, ДвоичныеДанные - если строка, то формате Base64
//
Функция СертификатПодписи(ДанныеСертификата = Неопределено) Экспорт
	
	Сертификат = Новый Структура;
	Сертификат.Вставить("Отпечаток", "");
	Сертификат.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь);
	Сертификат.Вставить("Поставщик", "");
	Сертификат.Вставить("СерийныйНомер", "");
	Сертификат.Вставить("Сертификат", Неопределено);
	
	Если ДанныеСертификата <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Сертификат, ДанныеСертификата);
	КонецЕсли;
	
	КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(ДанныеСертификата, Сертификат);
	
	Возврат Сертификат;
	
КонецФункции

// Обрабатывает событие нажатия на кнопку "Отправить" в формах регламентированной отчетности
//
// Параметры:
//	РезультатОперации 	- Структура
//	ПараметрыОперации	- Структура
//	
Процедура ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРегистрацияЮЛ(РезультатОперации, ПараметрыОперации) Экспорт
	
	Форма = ПараметрыОперации.Форма;
	ЭтоОтправкаИзФормыОтчетность = ПараметрыОперации.ЭтоОтправкаИзФормыОтчетность;
	Если ПараметрыОперации.Свойство("ОтчетСсылка") Тогда
		ОтчетаСсылка = ПараметрыОперации.ОтчетСсылка;
	Иначе
		ОтчетСсылка = ПараметрыОперации.СсылкаНаОтчет;
	КонецЕсли;
	ОрганизацияОтчета = ПараметрыОперации.ОрганизацияОтчета;
	ТипЗнчСсылкаНаОтчет = ТипЗнч(ОтчетСсылка);
	
	ЭтоРегламентированныйОтчет = ТипЗнчСсылкаНаОтчет = Тип("СправочникСсылка.ОтправкиРегистрацияЮЛ");
	НаправлениеПодключено = Ложь;
	
	Если ЭтоРегламентированныйОтчет И НаправлениеПодключено Тогда
		
		Если ЭтоОтправкаИзФормыОтчетность Тогда
			ОтправкаВКонтролирующийОрганРегистрацияЮЛ(ОрганизацияОтчета, ОтчетСсылка, Форма, ЭтоОтправкаИзФормыОтчетность);
		Иначе
			// отправляем только из записанной формы
			Если Форма.Модифицированность Тогда
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ОрганизацияОтчета", ОрганизацияОтчета);
				ДополнительныеПараметры.Вставить("ОтчетСсылка", ОтчетСсылка);
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("ЭтоОтправкаИзФормыОтчетность", ЭтоОтправкаИзФормыОтчетность);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПриНажатииНаКнопкуОтправкиВКонтролирующийОрганРегистрацияЮЛ", ЭтотОбъект, ДополнительныеПараметры);
				Форма.СохранитьНаКлиенте(, ОписаниеОповещения);
			Иначе
				ОтправкаВКонтролирующийОрганРегистрацияЮЛ(ОрганизацияОтчета, ОтчетСсылка, Форма, ЭтоОтправкаИзФормыОтчетность);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РезультатОтправки = Новый Структура;
		РезультатОтправки.Вставить("Выполнено", Ложь);
		РезультатОтправки.Вставить("ТекстИнформации", НСтр("ru = 'Отправка заявлений из формы отчетности не предусмотрена';
															|en = 'Отправка заявлений из формы отчетности не предусмотрена'"));
		ОтправкаВКонтролирующийОрганРегистрацияЮЛЗавершение(РезультатОтправки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Создает и возвращает менеджер криптографии (на клиенте) для указанного криптопровайдера.
//
// Параметры:
//  Оповещение     				- ОписаниеОповещения - оповещение о результате выполнения следующих типов:
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//		* МенеджерКриптографии	- МенеджерКриптографии
//      * Ошибка				- Строка - описание ошибки выполнения.
//  Криптопровайдер 			- Неопределено,
//								- Структура - информация о модуле криптографии для которого нужно создать и вернуть менеджер криптографии.
//  ИнтерактивныйРежим 			- Булево - если Истина, тогда менеджер криптографии будет создан
//                      		в режиме использования интерактивного режима криптографии
//		                       (установка свойства ПарольДоступаКЗакрытомуКлючу будет запрещена).
//
Процедура СоздатьМенеджерКриптографии(Оповещение, Криптопровайдер = Неопределено, ИнтерактивныйРежим = Ложь) Экспорт
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("Оповещение", Оповещение);
	ПараметрыЦикла.Вставить("Криптопровайдер", Криптопровайдер);
	ПараметрыЦикла.Вставить("ИнтерактивныйРежим", ИнтерактивныйРежим);
	ПараметрыЦикла.Вставить("ЭтоLinux", ОбщегоНазначенияЭДКОКлиент.ЭтоКриптопровайдерLinux());
	ПараметрыЦикла.Вставить("МенеджерКриптографии", Неопределено);
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", Оповещение);
	
	ОповещениеСледующее = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("СоздатьМенеджерКриптографииОшибка", ЭтотОбъект));
	
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, ОповещениеСледующее);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвторизацияПользователя

// Проверяет существующий токен авторизации, при необходимость проходит эту процедуру на сервисе регистрации
// Основные этапы цикла обмена
// - получение клиентского контекста
// - получение общего массива сертификатов (облачные и локальные), если не передан в параметрах
// - выбор сертификата из списка
// - получение двоичных данных сертификата
// - проверка ранее полученного токена для сертификата
// - получение временного токена для подключения к сервису
// - получение менеджера криптографии (для локального сертификата)
// - ввод пароля локального сертификата, если не передан
// - подписание значения временного токена
// - получение токена авторизации
// - сохранение токена авторизации в параметрах сеанса
// - возврат результат работы
//
// Параметры:
//  ОповещениеОЗавершении		- ОписаниеОповещения - описание процедуры, принимающей результат
//    Результат - Структура:
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Токен 				- Строка - значение токена авторизации в формате Base64
//		* ОтпечатокСертификата	- Строка - отпечаток сертификата, для которого сформировать токен
//      * Ошибка				- Строка - описание ошибки выполнения.
//  ПараметрыВызова 			- Структура - ожидаемые поля, но необязательные поля
//		* Сертификат 			- Структура - для локального сертификата см. СертификатПодписи()
//		* КонтекстЭДО 			- Форма
//		* ПарольСертификата 	- Строка
//		* ОтпечатокСертификата	- Строка
//		
Процедура АвторизацияПользователя(ОповещениеОЗавершении, ПараметрыВызова = Неопределено)
	
	ВыбранныйСертификат = СвойствоСтруктуры(ПараметрыВызова, "Сертификат");
	КонтекстЭДО = СвойствоСтруктуры(ПараметрыВызова, "КонтекстЭДО");
	ПарольСертификата = СвойствоСтруктуры(ПараметрыВызова, "ПарольСертификата");
	ОтпечатокСертификата = СвойствоСтруктуры(ПараметрыВызова, "ОтпечатокСертификата", "");
	ПоказыватьОжидание = СвойствоСтруктуры(ПараметрыВызова, "ПоказыватьОжидание", Ложь);
	СертификатКриптографии = Неопределено;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ВыбратьСертификат", ВыбранныйСертификат = Неопределено);
	ПараметрыЦикла.Вставить("Сертификат", ВыбранныйСертификат);
	ПараметрыЦикла.Вставить("ПарольСертификата", ?(ВыбранныйСертификат = Неопределено, Неопределено, ПарольСертификата));
	ПараметрыЦикла.Вставить("ОтпечатокСертификата", ВРег(ОтпечатокСертификата));
	ПараметрыЦикла.Вставить("ВременныйТокен", Неопределено);
	ПараметрыЦикла.Вставить("Токен", Неопределено);
	ПараметрыЦикла.Вставить("ПодписьТокена", Неопределено);
	ПараметрыЦикла.Вставить("КонтекстЭДО", КонтекстЭДО);
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("МенеджерКриптографии", СвойствоСтруктуры(ПараметрыВызова, "МенеджерКриптографии"));
	ПараметрыЦикла.Вставить("СертификатКриптографии", СертификатКриптографии);
	ПараметрыЦикла.Вставить("МассивСертификатов", Новый Соответствие);
	ПараметрыЦикла.Вставить("МассивВыбора", Новый Массив);
	ПараметрыЦикла.Вставить("ИнтерактивныйРежим", ПарольСертификата = Неопределено);
	ПараметрыЦикла.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
	ПараметрыЦикла.Вставить("МассивКриптоПровайдеров", Новый Массив);
	
	Если ВыбранныйСертификат <> Неопределено Тогда
		ПараметрыЦикла.МассивСертификатов.Вставить(ВыбранныйСертификат.Отпечаток, ВыбранныйСертификат);
	КонецЕсли;
	
	ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеПодключенияРасширенияРаботыСКриптографией", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
	
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Ложь, ОповещениеСледующее);
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеПодключенияРасширенияРаботыСКриптографией(РезультатВызова, ПараметрыЦикла) Экспорт
	
	КонтекстЭДО = ПараметрыЦикла.КонтекстЭДО;
	
	Если РезультатВызова <> Истина Тогда
		АвторизацияПользователяРезультат(
			НСтр("ru = 'В браузере требуется установить расширение
				           |для работы с электронной подписью и шифрованием.';
				           |en = 'В браузере требуется установить расширение
				           |для работы с электронной подписью и шифрованием.'"),
			ПараметрыЦикла);
	Иначе
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПолучениеКонтекста", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		
		Если КонтекстЭДО = Неопределено Тогда
			ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОповещениеСледующее);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеСледующее, ПараметрыЦикла);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПолучениеКонтекста(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Результат = Неопределено;
	
	ПараметрыЦикла.КонтекстЭДО = РезультатВызова.КонтекстЭДО;
	
	Если РезультатВызова.КонтекстЭДО = Неопределено Тогда
		Результат = НСтр("ru = 'Не удалось инициализировать модуль работы с ЭДО';
						|en = 'Не удалось инициализировать модуль работы с ЭДО'");
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяРезультат", ЭтотОбъект, ПараметрыЦикла);
	ИначеЕсли ПараметрыЦикла.ВыбратьСертификат Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПолучитьМенеджерКриптографии", ЭтотОбъект, ПараметрыЦикла);
	Иначе
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеВыбораСертификата", ЭтотОбъект, ПараметрыЦикла);
		Результат = ПараметрыЦикла.Сертификат;
	КонецЕсли;
	
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
	ВыполнитьОбработкуОповещения(ОповещениеСледующее, Результат);

КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПолучитьМенеджерКриптографии(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ИнтерактивныйРежим = ПараметрыЦикла.ИнтерактивныйРежим;
	
	ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПолучитьСписокСертификатов", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
	
	СоздатьМенеджерКриптографии(ОповещениеСледующее, , ИнтерактивныйРежим);
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПолучитьСписокСертификатов(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		МенеджерКриптографии = РезультатВызова.МенеджерКриптографии;
		ПараметрыЦикла.МенеджерКриптографии = МенеджерКриптографии;
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПолучитьСертификаты", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(ОповещениеСледующее, ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе
		АвторизацияПользователяРезультат(РезультатВызова.Ошибка, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПолучитьСертификаты(ХранилищеВсехСертификатов, ПараметрыЦикла) Экспорт
	
	КонтекстЭДО = ПараметрыЦикла.КонтекстЭДО;
	ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	МенеджерКриптографии = ПараметрыЦикла.МенеджерКриптографии;
	
	Если ХранилищеВсехСертификатов <> Неопределено Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяЛокальныеСертификаты", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		ХранилищеВсехСертификатов.НачатьПолучениеВсех(ОповещениеСледующее);
	Иначе
		АвторизацияПользователяРезультат(
			НСтр("ru = 'Не получено хранилище сертификатов.';
				|en = 'Не получено хранилище сертификатов.'"), 
			ПараметрыЦикла);
	КонецЕсли;		
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяЛокальныеСертификаты(СертификатыХранилища, ПараметрыЦикла) Экспорт
	
	КонтекстЭДО = ПараметрыЦикла.КонтекстЭДО;
	ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	
	Если СертификатыХранилища <> Неопределено Тогда
		
		МестоХраненияКлюча = КриптографияЭДКОКлиентСервер.КонтекстМоделиХраненияКлюча(Ложь);
		ПараметрыЦикла.МассивВыбора = АвторизацияПользователяПодготовитьМассивСертификатов(СертификатыХранилища, ОтпечатокСертификата, , МестоХраненияКлюча);
		Для Каждого СтрокаМассива Из СертификатыХранилища Цикл
			ПараметрыЦикла.МассивСертификатов.Вставить(ПолучитьHexСтрокуИзДвоичныхДанных(СтрокаМассива.Отпечаток), СтрокаМассива);
		КонецЦикла;	
		
		СертификатыНаСервере = КриптографияЭДКОСлужебныйВызовСервера.ПолучитьСертификаты("MY");
		ПараметрыЦикла.МассивВыбора = АвторизацияПользователяПодготовитьМассивСертификатов(СертификатыНаСервере, ОтпечатокСертификата, ПараметрыЦикла.МассивВыбора);
		Для Каждого СтрокаМассива Из СертификатыНаСервере Цикл
			ПараметрыЦикла.МассивСертификатов.Вставить(СтрокаМассива.Отпечаток, СтрокаМассива);
		КонецЦикла;	
		
		АвторизацияПользователяВыбратьСертификат(ПараметрыЦикла);
		
	Иначе
		АвторизацияПользователяРезультат(
			НСтр("ru = 'Не получены сертификаты из хранилища.';
				|en = 'Не получены сертификаты из хранилища.'"), 
			ПараметрыЦикла);
	КонецЕсли;		
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяВыбратьСертификат(ПараметрыЦикла)
	
	КонтекстЭДО = ПараметрыЦикла.КонтекстЭДО;
	ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	
	ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеВыбораСертификата", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		
	МассивВыбора = ПараметрыЦикла.МассивВыбора;
	
	Если МассивВыбора.Количество() = 1 
		И ВРег(МассивВыбора[0].Отпечаток) = ВРег(ОтпечатокСертификата)
		И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ВыполнитьОбработкуОповещения(ОповещениеСледующее, МассивВыбора[0]);
	Иначе	
		ДопПараметры = Новый Структура();
		ДопПараметры.Вставить("Отпечаток", ОтпечатокСертификата);
		ДопПараметры.Вставить("Адрес", ПоместитьВоВременноеХранилище(МассивВыбора));
		ДопПараметры.Вставить("Сертификаты", Новый Массив);
		ДопПараметры.Вставить("МножественныйВыбор", Ложь);
		ДопПараметры.Вставить("Пояснение", НСтр("ru = 'Выберите сертификат для авторизации на сервере ФНС.';
												|en = 'Выберите сертификат для авторизации на сервере ФНС.'"));
		
		ОткрытьФорму(КонтекстЭДО.ПутьКОбъекту + ".Форма.ВыборСертификатовОблачныхИлиЛокальных",
			ДопПараметры,
			ЭтотОбъект,
			,
			,
			,
			ОповещениеСледующее, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеВыбораСертификата(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ТекстОшибки = "";
	ОжидатьФайл = Истина;
	
	Если РезультатВызова = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Отказ от выбора сертификата.';
							|en = 'Отказ от выбора сертификата.'");
	Иначе
		Если ТипЗнч(РезультатВызова) = Тип("Массив") Тогда
			Сертификат = СертификатПодписи(РезультатВызова[0]);
		Иначе	
			Сертификат = СертификатПодписи(РезультатВызова);
		КонецЕсли;
		
		НашлиСертификат = ПараметрыЦикла.МассивСертификатов[Сертификат.Отпечаток];
		
		Если НашлиСертификат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не выбран сертификат.';
								|en = 'Не выбран сертификат.'");
		ИначеЕсли Тип("ДвоичныеДанные") = ТипЗнч(НашлиСертификат) Тогда
			Сертификат.Сертификат = НашлиСертификат;
			ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеСозданияСертификата", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
			НовыйСертификат = Новый СертификатКриптографии;
			НовыйСертификат.НачатьИнициализацию(ОповещениеСледующее, НашлиСертификат);
		ИначеЕсли Тип("СертификатКриптографии") = ТипЗнч(НашлиСертификат) Тогда
			ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеВыгрузкиСертификата", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
			ПараметрыЦикла.СертификатКриптографии = НашлиСертификат;
			НашлиСертификат.НачатьВыгрузку(ОповещениеСледующее);
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(НашлиСертификат) Тогда
			СертфикатХранилища = ЭлектроннаяПодписьВМоделиСервисаБРОВызовСервера.НайтиСертификатВХранилищеПоОтпечатку(НашлиСертификат.Отпечаток);
			Если СертфикатХранилища <> Неопределено Тогда
				Сертификат.Сертификат = СертфикатХранилища.Сертификат;
				ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеСозданияСертификата", ЭтотОбъект, ПараметрыЦикла);
				ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
				НовыйСертификат = Новый СертификатКриптографии;
				НовыйСертификат.НачатьИнициализацию(ОповещениеСледующее, Сертификат.Сертификат);
			Иначе
				ТекстОшибки = НСтр("ru = 'Не найден сертификат в хранилище программы.';
									|en = 'Не найден сертификат в хранилище программы.'");
			КонецЕсли;
		ИначеЕсли КриптографияЭДКОКлиентСервер.ЭтоОблачнаяПодпись(НашлиСертификат) Тогда
			ПараметрыЦикла.Сертификат = Сертификат;
			ПараметрыЦикла.ОтпечатокСертификата = Сертификат.Отпечаток;
			АвторизацияПользователяПолучитьВременныйТокен(Неопределено, ПараметрыЦикла);
		Иначе
			Сертификат.Сертификат = НашлиСертификат.Сертификат;
			ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеСозданияСертификата", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
			НовыйСертификат = Новый СертификатКриптографии;
			НовыйСертификат.НачатьИнициализацию(ОповещениеСледующее, НашлиСертификат.Сертификат);
		КонецЕсли;
		
		ПараметрыЦикла.Сертификат = Сертификат;
		ПараметрыЦикла.ОтпечатокСертификата = Сертификат.Отпечаток;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		АвторизацияПользователяРезультат(ТекстОшибки, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеСозданияСертификата(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова <> Неопределено Тогда
		ПараметрыЦикла.СертификатКриптографии = РезультатВызова;
		АвторизацияПользователяПолучитьВременныйТокен(Неопределено, ПараметрыЦикла);
	Иначе
		АвторизацияПользователяРезультат("", ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеВыгрузкиСертификата(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова <> Неопределено Тогда
		ПараметрыЦикла.Сертификат.Сертификат = РезультатВызова;
		АвторизацияПользователяПолучитьВременныйТокен(Неопределено, ПараметрыЦикла);
	Иначе
		АвторизацияПользователяРезультат(НСтр("ru = 'Не удалось выгрузить сертификат.';
												|en = 'Не удалось выгрузить сертификат.'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПолучитьВременныйТокен(РезультатВызова, ПараметрыЦикла)
	
	ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	
	ТекущийТокен = ПолучитьТокенАвторизацииПользователя(ОтпечатокСертификата);
	Если ТекущийТокен = Неопределено Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеПолученияВременногоТокена", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		ВыполнитьОперациюСервераРегистрацииЮЛ(ОповещениеСледующее, "СервисРегистрацииФНСПодключение", Новый Структура, ПараметрыЦикла);
	Иначе	
		ПараметрыЦикла.Токен = ТекущийТокен;
		АвторизацияПользователяРезультат(Неопределено, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеПолученияВременногоТокена(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	Сертификат = ПараметрыЦикла.Сертификат;
	МенеджерКриптографии = ПараметрыЦикла.МенеджерКриптографии;
	ИнтерактивныйРежим = ПараметрыЦикла.ИнтерактивныйРежим;
	КонтекстЭДО = ПараметрыЦикла.КонтекстЭДО;
	
	Если РезультатВыполнения.Выполнено Тогда
		ПараметрыЦикла.ВременныйТокен = РезультатВыполнения.Токен;
		Если НЕ КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(Сертификат) Тогда
			ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеПодписания", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
			АдресДанных = ПоместитьВоВременноеХранилище(Base64Значение(ПараметрыЦикла.ВременныйТокен), Новый УникальныйИдентификатор);
			КриптографияЭДКОКлиент.ПодписатьPKCS7(ОповещениеСледующее, Сертификат, АдресДанных, Ложь, Неопределено,,, Истина);
			
		ИначеЕсли МенеджерКриптографии <> Неопределено И СтрНайти(МенеджерКриптографии.АлгоритмПодписи, "GOST") > 0 Тогда
			АвторизацияПользователяНачатьПодписание(ПараметрыЦикла);
			
		Иначе
			МассивКриптоПровайдеров = ПараметрыЦикла.МассивКриптоПровайдеров;
			МассивИзОдного = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыЦикла.Сертификат);
			ИнформацияОСертификате = КриптографияЭДКОСлужебныйВызовСервера.ИзвлечьИнформациюОКриптопровайдереПоСертификату(МассивИзОдного, Истина);
			Криптопровайдер = Неопределено;
			
			Если ИнформацияОСертификате.Количество() > 0 Тогда
				Криптопровайдер = ИнформацияОСертификате[0].Криптопровайдер;
			КонецЕсли;
			
			Если Криптопровайдер = Неопределено Тогда
				МассивКриптоПровайдеров.Добавить(КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro());
				МассивКриптоПровайдеров.Добавить(КриптографияЭДКОКлиентСервер.КриптопровайдерViPNet());
			Иначе
				МассивКриптоПровайдеров.Добавить(Криптопровайдер);
			КонецЕсли;
			
			АвторизацияПользователяСоздатьМенеджерКриптографииВЦикле(ПараметрыЦикла);
			
		КонецЕсли;
		
	Иначе
		АвторизацияПользователяРезультат(РезультатВыполнения.Ошибка, ПараметрыЦикла);
		
	КонецЕсли;	
	
КонецПроцедуры

// Продолжение процедуры АвторизацияПользователя.
Процедура АвторизацияПользователяСоздатьМенеджерКриптографииВЦикле(ПараметрыЦикла)
	
	ИнтерактивныйРежим = ПараметрыЦикла.ИнтерактивныйРежим;
	
	Если ПараметрыЦикла.МассивКриптоПровайдеров.Количество() = 0 Тогда
		АвторизацияПользователяРезультат(
			НСтр("ru = 'Не удалось инициализировать подходящий криптопровайдер';
				|en = 'Не удалось инициализировать подходящий криптопровайдер'"), 
			ПараметрыЦикла);
	Иначе
		ТекущийКриптоПровайдер = ПараметрыЦикла.МассивКриптоПровайдеров[0];
		ПараметрыЦикла.МассивКриптоПровайдеров.Удалить(0);
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяСоздатьМенеджерКриптографииРезультат", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяСоздатьМенеджерКриптографииОшибка", ЭтотОбъект));
		СоздатьМенеджерКриптографии(ОповещениеСледующее, ТекущийКриптоПровайдер, ИнтерактивныйРежим);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры АвторизацияПользователя.
Процедура АвторизацияПользователяСоздатьМенеджерКриптографииРезультат(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПараметрыЦикла.МенеджерКриптографии = РезультатВызова.МенеджерКриптографии;
		ПараметрыЦикла.МассивКриптоПровайдеров.Очистить();
		АвторизацияПользователяНачатьПодписание(ПараметрыЦикла);
	Иначе
		АвторизацияПользователяСоздатьМенеджерКриптографииВЦикле(ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры АвторизацияПользователя.
Процедура АвторизацияПользователяСоздатьМенеджерКриптографииОшибка(РезультатВызова, ПараметрыЦикла) Экспорт
	
	АвторизацияПользователяСоздатьМенеджерКриптографииВЦикле(ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяНачатьПодписание(ПараметрыЦикла)
	
	ПарольСертификата = ПараметрыЦикла.ПарольСертификата;
	ИнтерактивныйРежим = ПараметрыЦикла.ИнтерактивныйРежим;
	
	Если ИнтерактивныйРежим Тогда
		АвторизацияПользователяПодписание("", ПараметрыЦикла);
	ИначеЕсли ПарольСертификата = Неопределено Тогда
		АвторизацияПользователяВводПароля("", ПараметрыЦикла);
	Иначе
		АвторизацияПользователяПодписание(ПарольСертификата, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяВводПароля(ТекстЗаголовка, ПараметрыЦикла)
	
	Сертификат = ПараметрыЦикла.Сертификат;
	
	ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПодписание", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СерийныйНомер", Сертификат.СерийныйНомер);
	ПараметрыФормы.Вставить("Поставщик", Сертификат.Поставщик);
	ПараметрыФормы.Вставить("Заголовок", ТекстЗаголовка);
	
	ОткрытьФорму(
		"ОбщаяФорма.ФормаВводаПароляЗакрытогоКлюча",
		ПараметрыФормы,,,,, 
		ОповещениеСледующее,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры
	
// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПодписание(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ПарольСертификата = ПараметрыЦикла.ПарольСертификата;
	ВременныйТокен = ПараметрыЦикла.ВременныйТокен;
	СертификатКриптографии = ПараметрыЦикла.СертификатКриптографии;
	МенеджерКриптографии = ПараметрыЦикла.МенеджерКриптографии;
	
	Если РезультатВызова = КодВозвратаДиалога.Отмена ИЛИ РезультатВызова = Неопределено Тогда
		АвторизацияПользователяРезультат(НСтр("ru = 'Отказ от ввода пароля.';
												|en = 'Отказ от ввода пароля.'"), ПараметрыЦикла);
		
	Иначе
		ПараметрыЦикла.ПарольСертификата = РезультатВызова;
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеПодписания", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("АвторизацияПользователяОшибка", ЭтотОбъект));
		
		Если ЗначениеЗаполнено(РезультатВызова) Тогда
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = РезультатВызова;
		КонецЕсли;

		МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
		МенеджерКриптографии.НачатьПодписывание(ОповещениеСледующее, Base64Значение(ВременныйТокен), СертификатКриптографии);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеПодписания(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Сертификат = ПараметрыЦикла.Сертификат;
	ВременныйТокен = ПараметрыЦикла.ВременныйТокен;
	ПодписьТокена = Неопределено;
	
	Если НЕ КриптографияЭДКОКлиентСервер.ЭтоЛокальнаяПодпись(Сертификат) Тогда
		Если РезультатВызова.Выполнено Тогда
			ПодписьТокена = ПолучитьИзВременногоХранилища(РезультатВызова.Подпись);
		Иначе
			РезультатВызова = Неопределено;
		КонецЕсли;
	Иначе
		ПодписьТокена = РезультатВызова;
	КонецЕсли;
	
	Если РезультатВызова = Неопределено Тогда
		АвторизацияПользователяРезультат(НСтр("ru = 'Ошибка подписания токена авторизации.';
												|en = 'Ошибка подписания токена авторизации.'"), ПараметрыЦикла);
	Иначе	
		ПараметрыЦикла.ПодписьТокена = ПодписьТокена;
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("Токен", ВременныйТокен);
		ПараметрыВызова.Вставить("Подпись", ПодписьТокена);
		
		ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.СервисРегистрацииФНСАвторизация", ПараметрыВызова);
		ОповещениеСледующее = Новый ОписаниеОповещения("АвторизацияПользователяПослеПолученияТокена", ЭтотОбъект, ПараметрыЦикла);
		ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
	КонецЕсли;

КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяПослеПолученияТокена(РезультатВызова, ПараметрыЦикла) Экспорт
	
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова);
	Результат = Неопределено;
	Если РезультатВыполнения.Выполнено Тогда
		ПараметрыЦикла.Токен = РезультатВыполнения.Токен;
		АвторизацияПользователяСохранитьТокен(РезультатВыполнения.Токен, РезультатВыполнения.СрокДействия, ПараметрыЦикла.ОтпечатокСертификата);
	Иначе
		Результат = РезультатВыполнения.Ошибка;
	КонецЕсли;	
	
	АвторизацияПользователяРезультат(Результат, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	ОшибкаПароля = НСтр("ru = 'Контейнер закрытого ключа доступен, но операция с использованием этого контейнера завершилась неудачно.';
						|en = 'Контейнер закрытого ключа доступен, но операция с использованием этого контейнера завершилась неудачно.'");
	
	Если СтрНайти(ПредставлениеОшибки, ОшибкаПароля) Тогда
		АвторизацияПользователяВводПароля(
			НСтр("ru = 'Неверно указан пароль доступа к закрытому ключу сертификата.';
				|en = 'Неверно указан пароль доступа к закрытому ключу сертификата.'"), 
			ПараметрыЦикла);
	Иначе
		АвторизацияПользователяРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	КонецЕсли;	
	
КонецПроцедуры

// Продолжение АвторизацияПользователя
Процедура АвторизацияПользователяРезультат(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Токен", "");
	Результат.Вставить("ОтпечатокСертификата", "");
	
	Если РезультатВызова = Неопределено Тогда
		Результат.Выполнено = Истина;
		Результат.Токен = ПараметрыЦикла.Токен;
		Результат.ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	Иначе
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Служебное для АвторизацияПользователя
Процедура АвторизацияПользователяСохранитьТокен(Токен, СрокДействия, ОтпечатокСертификата)
	
	ИмяПараметраПриложения = "ТокенАвторизацииФНС";
	РеестрТокенов = ПолучитьПараметрПриложения(ИмяПараметраПриложения);
	
	Если РеестрТокенов = Неопределено Тогда
		РеестрТокенов = Новый Соответствие;
	КонецЕсли;	
	
	НовыйТокен = Новый Структура();
	НовыйТокен.Вставить("Токен", Токен);
	НовыйТокен.Вставить("СрокДействия", СрокДействия);
	
	РеестрТокенов.Вставить(ОтпечатокСертификата, НовыйТокен);
	
	УстановитьПараметрПриложения(ИмяПараметраПриложения, РеестрТокенов);
	
КонецПроцедуры

// Служебное для АвторизацияПользователя
Функция АвторизацияПользователяПодготовитьМассивСертификатов(СписокСертификатов, ОтпечатокСертификата = Неопределено, ДополнитьМассив = Неопределено, МестоХраненияКлюча = Неопределено)
	
	Если ДополнитьМассив = Неопределено Тогда
		МассивСертификатов = Новый Массив;
	Иначе
		МассивСертификатов = ДополнитьМассив;
	КонецЕсли;
	
	ТекущаяСтрока = Неопределено;
	ТекДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ДляСортировки = Новый СписокЗначений;
	ШаблонДаты = "ДФ=yyyyMMddHHmmss";
	
	Для Каждого СтрокаМассива Из МассивСертификатов Цикл
		ЗначениеСортировки = Формат(СтрокаМассива.ДействителенС, ШаблонДаты) + Формат(СтрокаМассива.ДействителенПо, ШаблонДаты);
		ДляСортировки.Добавить(СтрокаМассива, ЗначениеСортировки);
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из СписокСертификатов Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("Структура") Тогда
			ДатаНачала = СтрокаМассива.ДействителенС;
			ДатаОкончания = СтрокаМассива.ДействителенПо;
			Отпечаток = СтрокаМассива.Отпечаток;
			СтруктураВладельца = СтрокаМассива.ВладелецСтруктура;
			СтруктураИздателя = СтрокаМассива.ПоставщикСтруктура;
		Иначе
			ДатаНачала = СтрокаМассива.ДатаНачала;
			ДатаОкончания = СтрокаМассива.ДатаОкончания;
			Отпечаток = ПолучитьHexСтрокуИзДвоичныхДанных(СтрокаМассива.Отпечаток);
			СтруктураВладельца = СтрокаМассива.Субъект;
			СтруктураИздателя = СтрокаМассива.Издатель;
		КонецЕсли;
		
		Просрочен = 
			НачалоДня(ТекДата) < НачалоДня(ДатаНачала)
			ИЛИ НачалоДня(ТекДата) > НачалоДня(ДатаОкончания)
			ИЛИ НЕ СтрокаМассива.ИспользоватьДляПодписи;
			
		Если Просрочен Тогда
			Продолжить;
		КонецЕсли;
		
    	НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Пометка", Ложь);
		НоваяСтрока.Вставить("ИмяВладельца", "");
		НоваяСтрока.Вставить("Организация", "");
		НоваяСтрока.Вставить("ИНН", "");
		НоваяСтрока.Вставить("Должность", "");
		НоваяСтрока.Вставить("ДействителенС", '00010101');
		НоваяСтрока.Вставить("ДействителенПо", '00010101');
		НоваяСтрока.Вставить("EMail", "");
		НоваяСтрока.Вставить("Отпечаток", "");
		НоваяСтрока.Вставить("ПригоденДляШифрования", Истина);
		НоваяСтрока.Вставить("ПригоденДляПодписания", Истина);
		НоваяСтрока.Вставить("Поставщик", "");
		НоваяСтрока.Вставить("Наименование", "");
		НоваяСтрока.Вставить("Владелец", "");
		НоваяСтрока.Вставить("СерийныйНомер", "");
		НоваяСтрока.Вставить("ВладелецСтруктура", Неопределено);
		НоваяСтрока.Вставить("ПоставщикСтруктура", Неопределено);
		НоваяСтрока.Вставить("СНИЛС", "");
		НоваяСтрока.Вставить("Издатель", "");
		НоваяСтрока.Вставить("ЗапрещенКВыбору", Ложь);
		НоваяСтрока.Вставить("ЭтоЭлектроннаяПодписьВМоделиСервиса", Ложь);
		НоваяСтрока.Вставить("МестоХраненияКлюча", Неопределено);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМассива);
		
		Если МестоХраненияКлюча <> Неопределено Тогда
			НоваяСтрока.МестоХраненияКлюча = МестоХраненияКлюча;
		КонецЕсли;
		
		НоваяСтрока.ЭтоЭлектроннаяПодписьВМоделиСервиса = КриптографияЭДКОКлиентСервер.ЭтоПодписьСервиса(НоваяСтрока.МестоХраненияКлюча);
		
		НоваяСтрока.ДействителенС = ДатаНачала;
		НоваяСтрока.ДействителенПо = ДатаОкончания;
		НоваяСтрока.Отпечаток = Отпечаток;
		
		НоваяСтрока.ИмяВладельца = СвойствоСтруктуры(СтруктураВладельца, "SN", "") + " " + СвойствоСтруктуры(СтруктураВладельца, "GN", "");
		НоваяСтрока.Организация = СвойствоСтруктуры(СтруктураВладельца, "O", "");
		НоваяСтрока.EMail = СвойствоСтруктуры(СтруктураВладельца, "E", "");
		НоваяСтрока.Должность = СвойствоСтруктуры(СтруктураВладельца, "T", "");
		НоваяСтрока.ИНН = СвойствоСтруктуры(СтруктураВладельца, "INN", "");
		НоваяСтрока.СНИЛС = СвойствоСтруктуры(СтруктураВладельца, "SNILS", "");
		НоваяСтрока.Издатель = СвойствоСтруктуры(СтруктураИздателя, "CN", "");
		НоваяСтрока.ВладелецСтруктура = СтруктураВладельца;
		НоваяСтрока.ПригоденДляШифрования = СтрокаМассива.ИспользоватьДляШифрования;
		НоваяСтрока.ПригоденДляПодписания = СтрокаМассива.ИспользоватьДляПодписи;
		НоваяСтрока.ПоставщикСтруктура = СтруктураИздателя; 
		НоваяСтрока.Поставщик = ПреобразоватьВСтроку(СтруктураИздателя);
		НоваяСтрока.Владелец = ПреобразоватьВСтроку(СтруктураВладельца);
		
		Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
			НоваяСтрока.Наименование = СвойствоСтруктуры(СтруктураВладельца, "CN", "");
		КонецЕсли;
		
		Если ПустаяСтрока(НоваяСтрока.ИмяВладельца) Тогда
			НоваяСтрока.ИмяВладельца = НоваяСтрока.Наименование;
		КонецЕсли;
		
		ЗначениеСортировки = Формат(НоваяСтрока.ДействителенС, ШаблонДаты) + Формат(НоваяСтрока.ДействителенПо, ШаблонДаты);
		ДляСортировки.Добавить(НоваяСтрока, ЗначениеСортировки);
		
		Если ВРег(ОтпечатокСертификата) = ВРег(НоваяСтрока.Отпечаток) Тогда
			ТекущаяСтрока = НоваяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	ДляСортировки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	МассивСертификатов = ДляСортировки.ВыгрузитьЗначения();
	
	Для Каждого СтрокаМассива Из МассивСертификатов Цикл
		Если ВРег(ОтпечатокСертификата) = ВРег(СтрокаМассива.Отпечаток) Тогда
			МассивСертификатов.Очистить();
			МассивСертификатов.Добавить(СтрокаМассива);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСертификатов;
	
КонецФункции

Функция ПреобразоватьВСтроку(Издатель)
	
	СтрокаИздателя = "";
	
	Для Каждого Тег Из Издатель Цикл 
		СтрокаИздателя = СтрокаИздателя + ?(СтрокаИздателя = "", "", ",") + Тег.Ключ + "=" + Тег.Значение;
	КонецЦикла;
	
	Возврат СтрокаИздателя;
	
КонецФункции

#КонецОбласти

#Область ОтправкаПакетаРегистрации

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛПолучениеТокена(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПараметрыЦикла.ОтпечатокСертификата = РезультатВызова.ОтпечатокСертификата;
		ПараметрыЦикла.ТокенАвторизации = РезультатВызова.Токен;
		ОтправкаПакетаРегистрацииЮЛОтправкаПакета(ПараметрыЦикла);
	Иначе
		ОтправкаПакетаРегистрацииЮЛРезультат(РезультатВызова.Ошибка, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛОтправкаПакета(ПараметрыЦикла)
	
	ТокенАвторизации = ПараметрыЦикла.ТокенАвторизации;
	ОтпечатокСертификата = ПараметрыЦикла.ОтпечатокСертификата;
	ИмяФайла = ПараметрыЦикла.ИмяФайлаПакета;
	ДанныеФайла = ПараметрыЦикла.ПакетОтправки;
	ОтправкаСсылка = ПараметрыЦикла.ОтправкаСсылка;
	ПредметОтправки = ПараметрыЦикла.ПредметОтправки;
	ВерсияОбмена = ПараметрыЦикла.ВерсияОбмена;
	
	Если ЭтоАдресВременногоХранилища(ДанныеФайла) Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла);
	КонецЕсли;
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Токен", ПараметрыЦикла.ТокенАвторизации);
	ПараметрыВызова.Вставить("ИмяФайла", ПараметрыЦикла.ИмяФайлаПакета);
	ПараметрыВызова.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыВызова.Вставить("ИмяФайлаТранспортногоКонтейнера", ИмяФайла);
	ПараметрыВызова.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ПараметрыВызова.Вставить("ПредметОтправки", ПредметОтправки);
	ПараметрыВызова.Вставить("ВерсияОбмена", ВерсияОбмена);
	
	ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.СоздатьОтправкуРегистрацииЮЛ", ПараметрыВызова);
	ОповещениеСледующее = Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛПослеОтправкиПакета", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛОшибка", ЭтотОбъект));
	ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
		
КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛПослеОтправкиПакета(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ВерсияОбмена = ПараметрыЦикла.ВерсияОбмена;
	ПредметОтправки = ПараметрыЦикла.ПредметОтправки;

	ТекстОшибки = "";
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова);
	
	Если РезультатВыполнения.Выполнено Тогда
		ОтправкаПакетаРегистрацииЮЛПроверитьСтатусОтправкиПакета(РезультатВызова, ПараметрыЦикла);
		
	ИначеЕсли РезультатВыполнения.Свойство("ИдентификаторОтправки") И ВерсияОбмена <> 0 Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("ИдентификаторОтправки", РезультатВыполнения.ИдентификаторОтправки);
		ПараметрыВызова.Вставить("ДатаОтправки", РезультатВыполнения.ДатаОтправки);
		ПараметрыВызова.Вставить("ПредметОтправки", ПредметОтправки);
		ПараметрыВызова.Вставить("ИмяФайла", ПараметрыЦикла.ИмяФайлаПакета);
		ПараметрыВызова.Вставить("ДанныеФайла", ПараметрыЦикла.ПакетОтправки);
		ПараметрыВызова.Вставить("ИмяФайлаТранспортногоКонтейнера", ПараметрыЦикла.ИмяФайлаПакета);
		ПараметрыВызова.Вставить("ОтпечатокСертификата", ПараметрыЦикла.ОтпечатокСертификата);
		ПараметрыВызова.Вставить("ВерсияОбмена", ВерсияОбмена);
		
		ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.НайтиОтправкуРегистрацииЮЛ", ПараметрыВызова);
		ОповещениеСледующее = Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛПроверитьСтатусОтправкиПакета", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛОшибка", ЭтотОбъект));
		ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
		
	Иначе
		ТекстОшибки = РезультатВыполнения.Ошибка;
		ОтправкаПакетаРегистрацииЮЛРезультат(РезультатВыполнения.Ошибка, ПараметрыЦикла);
		
	КонецЕсли;

КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛПроверитьСтатусОтправкиПакета(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ТекстОшибки = "";
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова);
	Если РезультатВыполнения.Выполнено Тогда
		
		ПараметрыЦикла.ИдентификаторЗаявления = РезультатВыполнения.ИдентификаторЗаявления;
		ПараметрыЦикла.ОтправкаСсылка = РезультатВыполнения.Отправка;
		
		// проверим сразу статус
		ПараметрыОперации = Новый Структура();
		ПараметрыОперации.Вставить("ТокенАвторизации", ПараметрыЦикла.ТокенАвторизации);
		ПараметрыОперации.Вставить("ПринудительноОбновить", Ложь);
		
		ОповещениеСледующее = Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛПослеПроверкиСтатуса", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОтправкаПакетаРегистрацииЮЛОшибка", ЭтотОбъект));
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ(ОповещениеСледующее, ПараметрыЦикла.ОтправкаСсылка, ПараметрыОперации);
		
	Иначе
		ТекстОшибки = РезультатВыполнения.Ошибка;
		ОтправкаПакетаРегистрацииЮЛРезультат(РезультатВыполнения.Ошибка, ПараметрыЦикла);
	КонецЕсли;

КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛПослеПроверкиСтатуса(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	ТекстОшибки = "";
	ИзменяемыеРеквизиты = Новый Структура();
	
	Если НЕ РезультатВыполнения.Выполнено Тогда
		ТекстОшибки = РезультатВыполнения.Ошибка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОтправкаПакетаРегистрацииЮЛРезультат(ТекстОшибки, ПараметрыЦикла);
	Иначе
		ОтправкаПакетаРегистрацииЮЛРезультат(Неопределено, ПараметрыЦикла);
	КонецЕсли;

КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОтправкаПакетаРегистрацииЮЛРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ОтправкаПакетаРегистрацииЮЛ
Процедура ОтправкаПакетаРегистрацииЮЛРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Токен", "");
	Результат.Вставить("ИдентификаторЗаявления", ПараметрыЦикла.ИдентификаторЗаявления);
	Результат.Вставить("ОтправкаСсылка", ПараметрыЦикла.ОтправкаСсылка);
	
	Если РезультатВызова = Неопределено Тогда
		Результат.Выполнено = Истина;
		Результат.Токен = ПараметрыЦикла.ТокенАвторизации;
	Иначе
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСтатусРегистрации

// Продолжение ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПолучениеТокена(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПараметрыЦикла.ОтпечатокСертификата = РезультатВызова.ОтпечатокСертификата;
		ПараметрыЦикла.ТокенАвторизации = РезультатВызова.Токен;
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПодключение(ПараметрыЦикла);
	Иначе
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛРезультат(РезультатВызова.Ошибка, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПодключение(ПараметрыЦикла)
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Токен", ПараметрыЦикла.ТокенАвторизации);
	ПараметрыВызова.Вставить("ОтправкаСсылка", ПараметрыЦикла.ОтправкаСсылка);
	ПараметрыВызова.Вставить("Принудительно", ПараметрыЦикла.ПринудительноОбновить);
	
	ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.ОбновитьСтатусОтправкиРегистрацииЮЛ", ПараметрыВызова);
	ОповещениеСледующее = Новый ОписаниеОповещения("ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПослеОбновления", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ОбновитьСостояниеЗаявленияНаРегистрациюЮЛОшибка", ЭтотОбъект));
	ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛПослеОбновления(РезультатВызова, ПараметрыЦикла) Экспорт
	
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова);
	Результат = Неопределено;
	Если НЕ РезультатВыполнения.Выполнено Тогда
		Результат = РезультатВыполнения.Ошибка;
	Иначе
		ПараметрыЦикла.Файлы = РезультатВыполнения.Файлы;
	КонецЕсли;
	
	ОбновитьСостояниеЗаявленияНаРегистрациюЮЛРезультат(Результат, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОбновитьСостояниеЗаявленияНаРегистрациюЮЛРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ
Процедура ОбновитьСостояниеЗаявленияНаРегистрациюЮЛРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Токен", "");
	Результат.Вставить("ИдентификаторЗаявления", ПараметрыЦикла.ИдентификаторЗаявления);
	Результат.Вставить("ОтправкаСсылка", ПараметрыЦикла.ОтправкаСсылка);
	Результат.Вставить("Файлы", ПараметрыЦикла.Файлы);
	
	Если РезультатВызова = Неопределено Тогда
		Результат.Выполнено = Истина;
		Результат.Токен = ПараметрыЦикла.ТокенАвторизации;
	Иначе
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнитьОперациюСервераРегистрацииЮЛ

// Выполняет запрос к сервису ФНС к любому предусмотренному методу
// Полный список методов см. ДокументооборотРегистрацияВФНС в разделе СервисРегистрации 
//
// Основные этапы цикла обмена
// - проверка токена авторизации, при необходимости авторизация пользователя см. АвторизацияПользователя
// - выполнение запроса к серверу
// - формирование результата работы
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Токен 				- Строка - значение токена авторизации в формате Base64
//      * Ошибка				- Строка - описание ошибки выполнения.
//		* РезультатВызова		- Произвольный
//	ИмяМетода		 			- Строка - имя вызываемой функции в ДокументооборотРегистрацияВФНС
//	ОписаниеМетода				- Структура - параметры для вызова функции
//	ПараметрыОперации 			- Структура
//		* ОтпечатокСертификата	- Строка
//		* ПарольСертификата 	- Строка
//		* ТокенАвторизации		- Строка - для вызова функций авторизации обязательный ключ
//
Процедура ВыполнитьОперациюСервераРегистрацииЮЛ(
			ОповещениеОЗавершении,
			ИмяМетода,
			ОписаниеМетода,
			ПараметрыОперации = Неопределено)

	ОтпечатокСертификата = СвойствоСтруктуры(ПараметрыОперации, "ОтпечатокСертификата");
	ПарольСертификата = СвойствоСтруктуры(ПараметрыОперации, "ПарольСертификата");
	ПоказыватьОжидание = СвойствоСтруктуры(ПараметрыОперации, "ПоказыватьОжидание", Ложь);
	
	ТокенАвторизации = СвойствоСтруктуры(ПараметрыОперации, "ТокенАвторизации", Неопределено);
	Если ТокенАвторизации = Неопределено И ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ТокенАвторизации = ПолучитьТокенАвторизацииПользователя(ОтпечатокСертификата);
	КонецЕсли;	
	
	ТребуетсяАвторизация = ИмяМетода <> "СервисРегистрацииФНСПодключение";
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
	ПараметрыЦикла.Вставить("ТокенАвторизации", ТокенАвторизации);
	ПараметрыЦикла.Вставить("ПарольСертификата", ПарольСертификата);
	ПараметрыЦикла.Вставить("ИмяМетода", ИмяМетода);
	ПараметрыЦикла.Вставить("ОписаниеМетода", ОписаниеМетода);
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
	ПараметрыЦикла.Вставить("ТребуетсяАвторизация", ТребуетсяАвторизация);
	
	Если ТокенАвторизации = Неопределено И ПараметрыЦикла.ТребуетсяАвторизация Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("ВыполнитьОперациюСервераРегистрацииЮЛПолучениеТокена", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ВыполнитьОперациюСервераРегистрацииЮЛОшибка", ЭтотОбъект));
		
		ПараметрыВызова = Новый Структура();
		ПараметрыВызова.Вставить("ОтпечатокСертификата", ОтпечатокСертификата);
		ПараметрыВызова.Вставить("ПарольСертификата", ?(ОтпечатокСертификата = Неопределено, Неопределено, ПарольСертификата));
		ПараметрыВызова.Вставить("ПоказыватьОжидание", ПоказыватьОжидание);
		
		АвторизацияПользователя(ОповещениеСледующее, ПараметрыВызова);
		
	Иначе
		ВыполнитьОперациюСервераРегистрацииЮЛПодключение(ПараметрыЦикла);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ВыполнитьОперациюСервераРегистрацииЮЛ
Процедура ВыполнитьОперациюСервераРегистрацииЮЛПолучениеТокена(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если РезультатВызова.Выполнено Тогда
		ПараметрыЦикла.ОтпечатокСертификата = РезультатВызова.ОтпечатокСертификата;
		ПараметрыЦикла.ТокенАвторизации = РезультатВызова.Токен;
		ВыполнитьОперациюСервераРегистрацииЮЛПодключение(ПараметрыЦикла);
	Иначе
		ВыполнитьОперациюСервераРегистрацииЮЛРезультат(РезультатВызова.Ошибка, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ВыполнитьОперациюСервераРегистрацииЮЛ
Процедура ВыполнитьОперациюСервераРегистрацииЮЛПодключение(ПараметрыЦикла)
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("Токен", ПараметрыЦикла.ТокенАвторизации);
	ПараметрыВызова.Вставить("ИмяМетода", ПараметрыЦикла.ИмяМетода);
	ПараметрыВызова.Вставить("ОписаниеМетода", ПараметрыЦикла.ОписаниеМетода);
	
	ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьОперациюСервераРегистрацииЮЛ", ПараметрыВызова);
	ОповещениеСледующее = Новый ОписаниеОповещения("ВыполнитьОперациюСервераРегистрацииЮЛПослеОбновления", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ВыполнитьОперациюСервераРегистрацииЮЛОшибка", ЭтотОбъект));
	ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыполнитьОперациюСервераРегистрацииЮЛ
Процедура ВыполнитьОперациюСервераРегистрацииЮЛПослеОбновления(РезультатВызова, ПараметрыЦикла) Экспорт
	
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова);
	Результат = Неопределено;
	Если НЕ РезультатВыполнения.Выполнено Тогда
		Результат = РезультатВыполнения.Ошибка;
	Иначе
		Результат = РезультатВыполнения;
	КонецЕсли;
	
	ВыполнитьОперациюСервераРегистрацииЮЛРезультат(Результат, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыполнитьОперациюСервераРегистрацииЮЛ
Процедура ВыполнитьОперациюСервераРегистрацииЮЛОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьОперациюСервераРегистрацииЮЛРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыполнитьОперациюСервераРегистрацииЮЛ
Процедура ВыполнитьОперациюСервераРегистрацииЮЛРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Токен", "");
	
	Если ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	ИначеЕсли НЕ ПараметрыЦикла.ТребуетсяАвторизация Тогда
		Результат = РезультатВызова;
	Иначе
		Результат = РезультатВызова;
		Результат.Вставить("Токен", ПараметрыЦикла.ТокенАвторизации);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузитьФайлыЭтапов

// Выполняет выгрузку файлов отправки, разделенных на этапы и упаковывает их в один архив
//
// Основные этапы цикла обмена
// - подготовка параметров цикла
// - проверяет наличие установленного расширения для работы с файлами
// - формирования архива с файлами (фоновое задание на сервере)
// - диалог выбора файла и запись файла с архивом
// - завершение цикла
//
// Параметры:
//	ОповещениеОЗавершении
//      * Выполнено         	- Булево - если Истина, то процедура успешно выполнена и получен результат, иначе см. Ошибка.
//      * Ошибка				- Строка - описание ошибки выполнения.
//	МассивЭтапов 				- Массив - где элементы структура с описанием этапа отправки
//	ИдентификаторОтправки		- Строка
//
Процедура ВыгрузитьФайлыЭтапов(ОповещениеОЗавершении, МассивЭтапов, ИдентификаторОтправки = "", ИдентификаторФормы = Неопределено) Экспорт
	
	ОписаниеПакета = Новый Структура;
	ИмяЭтапа = "";

	Для Каждого СтрокаМассива Из МассивЭтапов Цикл
		ВсеФайлы = Новый Массив;
		Для Каждого СтрокаФайла Из СтрокаМассива.Файлы Цикл
			ВсеФайлы.Добавить(СтрокаФайла);
		КонецЦикла;
		ОписаниеПакета.Вставить(СтрокаМассива.Имя, ВсеФайлы);
		ИмяЭтапа = СтрокаМассива.Имя;
	КонецЦикла;
	
	Если МассивЭтапов.Количество() > 1 Тогда
		ИмяЭтапа = "СводнаяИнформация";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОтправки) Тогда
		ИмяЭтапа = ИмяЭтапа + "_" + ИдентификаторОтправки;
	КонецЕсли;
	
	ПараметрыЦикла = Новый Структура;
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("ОписаниеПакета", ОписаниеПакета);
	ПараметрыЦикла.Вставить("ИмяФайла", ИмяЭтапа + ".zip");
	ПараметрыЦикла.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	ВыгрузитьФайлыЭтаповПроверитьРасширение(ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов.
Процедура ВыгрузитьФайлыЭтаповПроверитьРасширение(ПараметрыЦикла)
	
	ОповещениеСледующее = Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповПослеПроверкиРасширения", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповОшибка", ЭтотОбъект));
	
	ТекстСообщения = НСтр("ru = 'Для продолжения работы требуется установить расширение для работы с файлами.';
							|en = 'Для продолжения работы требуется установить расширение для работы с файлами.'");
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеСледующее, ТекстСообщения, Ложь);
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов.
Процедура ВыгрузитьФайлыЭтаповПослеПроверкиРасширения(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	Если РезультатВыполнения Тогда
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("ОписаниеПакета", ПараметрыЦикла.ОписаниеПакета);
		ПараметрыВызова.Вставить("ИдентификаторФормы", ПараметрыЦикла.ИдентификаторФормы);
		ФоноваяОперация = ДокументооборотРегистрацияВФНСВызовСервера.ВыполнитьВФоне("ДокументооборотРегистрацияВФНСВызовСервера.ПодготовитьВыгрузкуФайлов", ПараметрыВызова);
		
		ОповещениеСледующее = Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповФормированиеПакета", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповОшибка", ЭтотОбъект));
		ОжидатьЗавершенияВыполненияВФоне(ОповещениеСледующее, ФоноваяОперация, ПараметрыЦикла);
	Иначе
		ВыгрузитьФайлыЭтаповРезультат(НСтр("ru = 'Не удалось установить расширение для работы с файлами';
											|en = 'Не удалось установить расширение для работы с файлами'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов
Процедура ВыгрузитьФайлыЭтаповФормированиеПакета(РезультатВызова, ПараметрыЦикла) Экспорт
	
	РезультатВыполнения = ПолучитьРезультатВыполненияВФоне(РезультатВызова, "АдресФайла");
	Результат = Неопределено;
	Если НЕ РезультатВыполнения.Выполнено Тогда
		ВыгрузитьФайлыЭтаповРезультат(РезультатВыполнения, ПараметрыЦикла);
	Иначе
		ОповещениеСледующее = Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповПослеЗаписи", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("ВыгрузитьФайлыЭтаповОшибка", ЭтотОбъект));
		СохранитьДанныеВФайл(ОповещениеСледующее, РезультатВыполнения.АдресФайла, ПараметрыЦикла.ИмяФайла, Истина)
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов
Процедура ВыгрузитьФайлыЭтаповПослеЗаписи(РезультатВызова, ПараметрыЦикла) Экспорт
	
	ВыгрузитьФайлыЭтаповРезультат(РезультатВызова, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов
Процедура ВыгрузитьФайлыЭтаповОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ВыгрузитьФайлыЭтаповРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение ВыгрузитьФайлыЭтапов
Процедура ВыгрузитьФайлыЭтаповРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	
	Если ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	Иначе
		Результат = РезультатВызова;
	КонецЕсли;	
	
	Если ОповещениеОЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	ИначеЕсли НЕ Результат.Выполнено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.Ошибка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранитьДанныеВФайл

// Запускает цикл для сохранения файла на стороне клиента
// Добавлена возможность вызова диалога для пользователя
//
// Шаги цикла:
// 1. подготовка параметров цикла
// 2. вложенный процесс проверки установки расширения работы с файлами
// 3. открыть диалог выбора файла, по необходимости
// 4. подготовка данных к записи (двоичные данные)
// 5. запись файла, асинхронным методом 
// 6. возврат результата операции
//
Процедура СохранитьДанныеВФайл(ОповещениеОЗавершении, ДанныеФайла, ИмяФайла, ВыборФайла = Ложь)
	
	ПараметрыЦикла = Новый Структура();
	ПараметрыЦикла.Вставить("ОповещениеОЗавершении",ОповещениеОЗавершении);
	ПараметрыЦикла.Вставить("ДанныеФайла", 			ДанныеФайла);
	ПараметрыЦикла.Вставить("ИмяФайла",				ИмяФайла);
	ПараметрыЦикла.Вставить("НуженВыборФайла",		ВыборФайла);
	
	СохранитьДанныеВФайлПроверитьРасширение(Неопределено, ПараметрыЦикла);
	
КонецПроцедуры	

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПроверитьРасширение(РезультатВыполнения, ПараметрыЦикла)
	
	ОповещениеСледующее = Новый ОписаниеОповещения("СохранитьДанныеВФайлПослеУстановкиРасширения", ЭтотОбъект, ПараметрыЦикла);
	ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("СохранитьДанныеВФайлОшибка", ЭтотОбъект));
	
	ТекстСообщения = НСтр("ru = 'Для продолжения работы требуется установить расширение для работы с файлами.';
							|en = 'Для продолжения работы требуется установить расширение для работы с файлами.'");
	
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеСледующее, ТекстСообщения, Ложь);
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПослеУстановкиРасширения(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	Если РезультатВыполнения Тогда
		Если ПараметрыЦикла.НуженВыборФайла Тогда
			ОповещениеСледующее = Новый ОписаниеОповещения("СохранитьДанныеВФайлПослеВыбораФайла", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("СохранитьДанныеВФайлОшибка", ЭтотОбъект));
			ЭтоРасширение	= Лев(ПараметрыЦикла.ИмяФайла, 1) = ".";
			ДиалогВыбора	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Если ЭтоРасширение Тогда
				ТекущееРасширение = Сред(ПараметрыЦикла.ИмяФайла, 2);
			Иначе
				ТекФайл = Новый Файл(ПараметрыЦикла.ИмяФайла);
				ТекущееРасширение = Сред(ТекФайл.Расширение, 2);
				ДиалогВыбора.ПолноеИмяФайла = ПараметрыЦикла.ИмяФайла;
			КонецЕсли;
			ДиалогВыбора.Расширение = ТекущееРасширение;
			ДиалогВыбора.Фильтр 	= "(*" + ТекущееРасширение + ")|*" + ТекущееРасширение;
			ДиалогВыбора.МножественныйВыбор = Ложь;
			ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОповещениеСледующее, ДиалогВыбора);
		Иначе
			СохранитьДанныеВФайлПодготовитьДанные(ПараметрыЦикла);	
		КонецЕсли;
	Иначе
		СохранитьДанныеВФайлРезультат(НСтр("ru = 'Не удалось установить расширение для работы с файлами';
											|en = 'Не удалось установить расширение для работы с файлами'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПослеВыбораФайла(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		ПараметрыЦикла.ИмяФайла = РезультатВыполнения[0];
		СохранитьДанныеВФайлПодготовитьДанные(ПараметрыЦикла);
	Иначе
		СохранитьДанныеВФайлРезультат(НСтр("ru = 'Отказ от выбора файла';
											|en = 'Отказ от выбора файла'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПодготовитьДанные(ПараметрыЦикла)
	
	ДанныеФайла		= ПараметрыЦикла.ДанныеФайла;
	ТипДанных 		= ТипЗнч(ПараметрыЦикла.ДанныеФайла);
	ЭтоХранилище	= Ложь;
	
	Если ТипДанных = Тип("Строка") Тогда
		ЭтоХранилище = ЭтоАдресВременногоХранилища(ДанныеФайла);
	ИначеЕсли ТипДанных = Тип("ДвоичныеДанные") Тогда
		ДанныеФайла = ПоместитьВоВременноеХранилище(ДанныеФайла);
		ЭтоХранилище = Истина;
	КонецЕсли;
	
	Если ТипДанных = Тип("Строка") И НЕ ЭтоХранилище Тогда
		Если СтрНайти(ДанныеФайла, ".") > 0 Тогда
			ОповещениеСледующее = Новый ОписаниеОповещения("СохранитьДанныеВФайлПриПолученииДвоичныхДанных", ЭтотОбъект, ПараметрыЦикла);
			ОбработкаОшибкиОповещения(ОповещениеСледующее, Новый ОписаниеОповещения("СохранитьДанныеВФайлОшибка", ЭтотОбъект));
			НачатьСозданиеДвоичныхДанныхИзФайла(ОповещениеСледующее, ДанныеФайла);
			Возврат;
		Иначе
			ДанныеФайла = ПолучитьДвоичныеДанныеИзBase64Строки(ДанныеФайла);
			ДанныеФайла = ПоместитьВоВременноеХранилище(ДанныеФайла);
			ЭтоХранилище = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЭтоХранилище Тогда
		СохранитьДанныеВФайлПриПолученииАдреса(ДанныеФайла, ПараметрыЦикла);
	Иначе
		СохранитьДанныеВФайлРезультат(НСтр("ru = 'Некорректные данные для сохранения файла.';
											|en = 'Некорректные данные для сохранения файла.'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПриПолученииДвоичныхДанных(РезультатВыполнения, ПараметрыЦикла) Экспорт
	
	Если РезультатВыполнения <> Неопределено Тогда
		ДанныеФайла = ПоместитьВоВременноеХранилище(РезультатВыполнения);
		СохранитьДанныеВФайлПриПолученииАдреса(ДанныеФайла, ПараметрыЦикла);
	Иначе
		СохранитьДанныеВФайлРезультат(НСтр("ru = 'Не удалось получить данные для файла.';
											|en = 'Не удалось получить данные для файла.'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПриПолученииАдреса(РезультатВыполнения, ПараметрыЦикла)
	
	Если РезультатВыполнения <> Неопределено Тогда
		ОповещениеСледующее = Новый ОписаниеОповещения("СохранитьДанныеВФайлПослеЗаписи", ЭтотОбъект, ПараметрыЦикла);
		ФайловаяСистемаКлиент.СохранитьФайл(ОповещениеСледующее, РезультатВыполнения, ПараметрыЦикла.ИмяФайла);
	Иначе
		СохранитьДанныеВФайлРезультат(НСтр("ru = 'Не удалось получить данные для файла.';
											|en = 'Не удалось получить данные для файла.'"), ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлПослеЗаписи(РезультатЗаписи, ПараметрыЦикла) Экспорт
	
	ОтветВызова = Новый Структура("Выполнено, Ошибка", Истина, "");
	
	Если РезультатЗаписи = Неопределено Тогда
		ОтветВызова.Выполнено = Ложь;
	КонецЕсли;
	
	СохранитьДанныеВФайлРезультат(ОтветВызова, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл
Процедура СохранитьДанныеВФайлОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	СохранитьДанныеВФайлРезультат(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение СохранитьДанныеВФайл.
Процедура СохранитьДанныеВФайлРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	
	Если ТипЗнч(РезультатВызова) = Тип("Строка") Тогда
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	Иначе
		Результат = РезультатВызова;
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПоддержкаРегламентированнойОтчетности

Процедура ОтправкаВКонтролирующийОрганРегистрацияЮЛ(ОрганизацияОтчета, ОтчетСсылка, Форма, ЭтоОтправкаИзФормыОтчетность)

	ПараметрыОтправки = Новый Структура;
	
	Если ЭтоОтправкаИзФормыОтчетность Тогда
		ОтчетСсылка = ОтчетСсылка;
	Иначе
		ОтчетСсылка = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	КонецЕсли;	

	СвойстваЗаявления = ДокументооборотРегистрацияВФНСВызовСервера.СвойстваЗаявленияРегистрацииЮЛ(ОтчетСсылка);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтправкаВКонтролирующийОрганРегистрацияЮЛЗавершение", ЭтотОбъект);
	
	МассивФайлов = Новый Массив;
	
	Для Каждого СтрокаМассива Из СвойстваЗаявления.Файлы Цикл
		ДанныеФайла = ПолучитьДвоичныеДанныеИзСтроки("");
		НовыйФайл = Новый Структура;
		НовыйФайл.Вставить("ВидДокумента", СвойстваЗаявления.ВидДокумента);
		НовыйФайл.Вставить("АдресаФайлов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоместитьВоВременноеХранилище(ДанныеФайла)));
		МассивФайлов.Добавить(НовыйФайл);
	КонецЦикла;
	
	ВсеПараметры = ИнтерфейсыВзаимодействияБРОКлиент.ПараметрыМетодаСформироватьПакетПоЕГРЮЛ();
	ВсеПараметры.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
	ВсеПараметры.Вставить("Заявление", ОтчетСсылка);
	ВсеПараметры.Вставить("КодНО", СвойстваЗаявления.КодНО);
	ВсеПараметры.Вставить("ОписаниеФайлов", МассивФайлов);
	ВсеПараметры.Вставить("СпособПредоставленияОтвета", СвойстваЗаявления.СпособПредоставленияОтвета);
	ВсеПараметры.Вставить("ЭлПочтаЗаявителя", СвойстваЗаявления.ЭлектроннаяПочта);
	ВсеПараметры.Вставить("ОтправитьПакет", Истина);
	ВсеПараметры.Вставить("ПодписатьПакет", Ложь);
	
	ИнтерфейсыВзаимодействияБРОКлиент.СформироватьПакетПоЕГРЮЛ(ВсеПараметры);
	
КонецПроцедуры

Процедура ОтправкаВКонтролирующийОрганРегистрацияЮЛЗавершение(РезультатОтправки, ПараметрыЦикла) Экспорт
	
	Если РезультатОтправки <> Неопределено И ЗначениеЗаполнено(РезультатОтправки.ТекстИнформации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Ошибка при отправке';
				|en = 'Ошибка при отправке'") + Символы.ПС
			+ РезультатОтправки.ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МенеджерКриптографии

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, ПараметрыЦикла) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	
	Если Подключено <> Истина Тогда
		СоздатьМенеджерКриптографииРезультат(
			НСтр("ru = 'В браузере требуется установить расширение
				           |для работы с электронной подписью и шифрованием.';
				           |en = 'В браузере требуется установить расширение
				           |для работы с электронной подписью и шифрованием.'"),
			ПараметрыЦикла);
	Иначе
		ПутьМодуляКриптографии = "";
		Если ПараметрыЦикла.ЭтоLinux Тогда
			ПутьМодуляКриптографии = ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПутьМодуляКриптографии();
			Если НЕ ЗначениеЗаполнено(ПутьМодуляКриптографии) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не указан путь модуля криптографии в настройках программы.';
										|en = 'Не указан путь модуля криптографии в настройках программы.'");
				СоздатьМенеджерКриптографииРезультат(ОписаниеОшибки, ПараметрыЦикла);
				Возврат;
			КонецЕсли;
			Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерCryptoPro(, ПараметрыЦикла.ЭтоLinux,, ПутьМодуляКриптографии);
		ИначеЕсли ПараметрыЦикла.Криптопровайдер = Неопределено Тогда
			Криптопровайдер = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
		Иначе
			Криптопровайдер = ПараметрыЦикла.Криптопровайдер;
		КонецЕсли;
		
		ПараметрыЦикла.Криптопровайдер = Криптопровайдер;
		
		ОповещениеСледующее = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииЦиклПослеПолученияИнформации", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, "СоздатьМенеджерКриптографииОшибка");
		
		СредстваКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(ОповещениеСледующее,
			Криптопровайдер.Имя,
			Криптопровайдер.Путь,
			Криптопровайдер.Тип);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеПолученияИнформации(ИнформацияМодуля, ПараметрыЦикла) Экспорт
	
	Криптопровайдер = ПараметрыЦикла.Криптопровайдер;
	РежимПароля = ?(ПараметрыЦикла.ИнтерактивныйРежим, 
							ИспользованиеИнтерактивногоРежимаКриптографии.Использовать,
							ИспользованиеИнтерактивногоРежимаКриптографии.НеИспользовать);
	
	Если ИнформацияМодуля = Неопределено Тогда
		СоздатьМенеджерКриптографииРезультат(
			НСтр("ru = 'Не удалось получить информацию об используемом криптопровайдера.';
				|en = 'Не удалось получить информацию об используемом криптопровайдера.'"),
			ПараметрыЦикла);
	Иначе
		МенеджерКриптографии = Новый МенеджерКриптографии;
		ОповещениеСледующее = Новый ОписаниеОповещения("СоздатьМенеджерКриптографииЦиклПослеИнициализации", ЭтотОбъект, ПараметрыЦикла);
		ОбработкаОшибкиОповещения(ОповещениеСледующее, "СоздатьМенеджерКриптографииОшибка");
		
		Если ПараметрыЦикла.ИнтерактивныйРежим Тогда
			МенеджерКриптографии.НачатьИнициализацию(ОповещениеСледующее,
					Криптопровайдер.Имя,
					Криптопровайдер.Путь,
					Криптопровайдер.Тип,
					Вычислить("ИспользованиеИнтерактивногоРежимаКриптографии.Использовать"));
		Иначе
			МенеджерКриптографии.НачатьИнициализацию(ОповещениеСледующее,
					Криптопровайдер.Имя,
					Криптопровайдер.Путь,
					Криптопровайдер.Тип);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеИнициализации(МенеджерКриптографии, ПараметрыЦикла) Экспорт
	
	Криптопровайдер = ПараметрыЦикла.Криптопровайдер;
	
	Попытка
		ПараметрыЦикла.МенеджерКриптографии = МенеджерКриптографии;
		СоздатьМенеджерКриптографииРезультат(Неопределено, ПараметрыЦикла);
	Исключение
		СоздатьМенеджерКриптографииРезультат(
			НСтр("ru = 'Выбранный криптопровайдер не поддерживает алгоритм подписи.';
				|en = 'Выбранный криптопровайдер не поддерживает алгоритм подписи.'"),
			ПараметрыЦикла);
	КонецПопытки;
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ПараметрыЦикла) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	СоздатьМенеджерКриптографииРезультат(ПредставлениеОшибки, ПараметрыЦикла);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("МенеджерКриптографии", "");
	
	Если РезультатВызова = Неопределено Тогда
		Результат.Выполнено = Истина;
		Результат.МенеджерКриптографии = ПараметрыЦикла.МенеджерКриптографии;
	Иначе
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновитьСостояниеЗаявлений

// Продолжение процедуры ОбновитьСостояниеЗаявленийНаРегистрациюЮЛ.
Процедура ОбновитьСостояниеЗаявленийНаРегистрациюЮЛСледующее(РезультатВызова, ПараметрыЦикла) Экспорт
	
	Если НЕ РезультатВызова.Выполнено Тогда
		ОбновитьСостояниеЗаявленийНаРегистрациюЮЛРезультат(РезультатВызова.Ошибка, ПараметрыЦикла);
	ИначеЕсли ПараметрыЦикла.Всего >= ПараметрыЦикла.Счетчик Тогда
		Отправка = ПараметрыЦикла.Отправки[ПараметрыЦикла.Счетчик];

		ДлительнаяОтправкаКлиент.ОповеститьОСменеЭтапаОбмена(
			"ОсуществитьОбменПоОрганизацииРегистрацияЮЛ", 
			ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РегистрацияЮЛФНС"), 
			Отправка);

		ПараметрыЦикла.Счетчик = ПараметрыЦикла.Счетчик + 1;
		ОписаниеСледующее = Новый ОписаниеОповещения("ОбновитьСостояниеЗаявленийНаРегистрациюЮЛСледующее", ЭтотОбъект, ПараметрыЦикла);
		ОбновитьСостояниеЗаявленияНаРегистрациюЮЛ(ОписаниеСледующее, Отправка);
	Иначе
		ОбновитьСостояниеЗаявленийНаРегистрациюЮЛРезультат(Неопределено, ПараметрыЦикла);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ОбновитьСостояниеЗаявленийНаРегистрациюЮЛ.
Процедура ОбновитьСостояниеЗаявленийНаРегистрациюЮЛРезультат(РезультатВызова, ПараметрыЦикла)
	
	ОповещениеОЗавершении = ПараметрыЦикла.ОповещениеОЗавершении;
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	
	Если РезультатВызова = Неопределено Тогда
		Результат.Выполнено = Истина;
	Иначе
		Результат.Ошибка = СокрЛП(РезультатВызова);
		ДокументооборотРегистрацияВФНСВызовСервера.ЗаписьЖурналаРегистрацииДляОшибки(Результат.Ошибка);
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Базовая функция для изменения глобальной переменной хранящей параметры на клиенте
//
// Параметры:
//	ИмяПараметра 		- Строка
//	ТекущееЗначение     - Произвольное - значение параметра
//
Процедура УстановитьПараметрПриложения(ИмяПараметра, ТекущееЗначение)
	
	ПараметрыПриложения.Вставить("БРО." + ИмяПараметра, ТекущееЗначение);

КонецПроцедуры

// Базовая функция для получения значения из параметров хранящихся на клиенте
//
// Параметры:
//	ИмяПараметра 	- Строка
//	Удалять			- Булево
//
// Возвращаемое значение:
//	Произвольный
//
Функция ПолучитьПараметрПриложения(ИмяПараметра, Удалять = Ложь)
	
	Результат = ПараметрыПриложения["БРО." + ИмяПараметра];
	Если Результат <> Неопределено И Удалять Тогда
		ПараметрыПриложения.Удалить("БРО." + ИмяПараметра);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Ищет сохраненный токен авторизации, привязанный к отпечатку сертификата
// Одновременно проверяется срок действия токена.
//
// Параметры:
//	ОтпечатокСертификата - Строка
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьТокенАвторизацииПользователя(ОтпечатокСертификата)
	
	ИмяПараметраПриложения = "ТокенАвторизацииФНС";
	РеестрТокенов = ПолучитьПараметрПриложения(ИмяПараметраПриложения);
	ТекущийТокен = Неопределено;
	Результат = Неопределено;
	
	Если РеестрТокенов <> Неопределено Тогда
		ТекущийТокен = РеестрТокенов[ОтпечатокСертификата];
	КонецЕсли;	
	
	Если ТекущийТокен <> Неопределено 
		И ТекущийТокен.СрокДействия > ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		Результат = ТекущийТокен.Токен;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция СвойствоСтруктуры(ТекущиеДанные, ИмяКлюча, ЗначениеПоУмолчанию = Неопределено)
	
	Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущиеДанные, ИмяКлюча, ЗначениеПоУмолчанию);
	
КонецФункции

Процедура ОбработкаОшибкиОповещения(ОбработкаОповещения, ИмяПроцедурыОшибки)
	
	Если ТипЗнч(ИмяПроцедурыОшибки) = Тип("Строка") Тогда
		НовоеОповещение = Новый ОписаниеОповещения(
									ОбработкаОповещения.ИмяПроцедуры,
									ОбработкаОповещения.Модуль,
									ОбработкаОповещения.ДополнительныеПараметры,
									ИмяПроцедурыОшибки,
									ЭтотОбъект);
	Иначе
		НовоеОповещение = Новый ОписаниеОповещения(
									ОбработкаОповещения.ИмяПроцедуры,
									ОбработкаОповещения.Модуль,
									ОбработкаОповещения.ДополнительныеПараметры,
									ИмяПроцедурыОшибки.ИмяПроцедуры,
									ЭтотОбъект);
	КонецЕсли;							
	
	ОбработкаОповещения = НовоеОповещение;
	
КонецПроцедуры

#КонецОбласти