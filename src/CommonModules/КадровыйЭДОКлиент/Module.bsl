#Область ПрограммныйИнтерфейс

// Выполняет обработку оповещения о записи печатных форм объектов, обновляет
// информацию о блокировке.
//
// Параметры:
//  УправляемаяФорма - УправляемаяФорма
//  ИмяСобытия       - Строка
//   Параметр        - Произвольный - См. описание одноименного параметра в синтакс-помощнике
//                      "ФормаКлиентскогоПриложения.ОбработкаОповещения".
//   Источник        - Произвольный - См. описание одноименного параметра в синтакс-помощнике
//                      "ФормаКлиентскогоПриложения.ОбработкаОповещения".
//
Процедура ОбработкаОповещения(УправляемаяФорма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ИмяСобытияПриЗаписиПечатныхФорм() Тогда
		
		Если УправляемаяФорма.Объект.Ссылка = Источник Тогда
			
			Структура = Новый Структура("ИдентификаторыФайловСЭЦП,РеквизитыИдентификаторов", Null, Null);
			ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
			Если Структура.ИдентификаторыФайловСЭЦП <> Null
				И Структура.РеквизитыИдентификаторов <> Null Тогда
				
				Если Структура.ИдентификаторыФайловСЭЦП = Неопределено Тогда
					ИдентификаторыФайловСЭЦП = Новый Соответствие;
				Иначе
					ИдентификаторыФайловСЭЦП = Новый Соответствие(Структура.ИдентификаторыФайловСЭЦП);
				КонецЕсли;
				
				Для Каждого ЭлементСтруктуры Из Параметр Цикл
					ИдентификаторКоманды = Структура.РеквизитыИдентификаторов.Получить(ЭлементСтруктуры.Ключ);
					Если ИдентификаторКоманды <> Неопределено Тогда
						ИдентификаторыФайловСЭЦП.Вставить(ИдентификаторКоманды, Истина);
					КонецЕсли;
				КонецЦикла;
				
				УправляемаяФорма.ИдентификаторыФайловСЭЦП = Новый ФиксированноеСоответствие(ИдентификаторыФайловСЭЦП);
				
				ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(УправляемаяФорма);
				
			КонецЕсли;
			
			БлокировкаИзмененияОбъектовКлиентСервер.ОбновитьГруппуБлокировкиИзмененияОбъекта(УправляемаяФорма, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет подключаемые команды в форме списка при обработке оповещения о записи печатных форм.
//
// Параметры:
//  УправляемаяФорма - УправляемаяФорма
//  ИмяСобытия       - Строка
//  Параметр         - Произвольный - См. описание одноименного параметра в синтакс-помощнике
//                      "ФормаКлиентскогоПриложения.ОбработкаОповещения".
//  Источник         - Произвольный - См. описание одноименного параметра в синтакс-помощнике
//                      "ФормаКлиентскогоПриложения.ОбработкаОповещения".
//
Процедура ОбработкаОповещенияВФормеСписка(УправляемаяФорма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = ИмяСобытияПриЗаписиПечатныхФорм() Тогда
		
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(УправляемаяФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеПечатью

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовВыполнитьКоманду
//
Процедура ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "СохранитьВPDFИПодписатьФайл" Тогда
		ПодписатьПоНастройкам(Форма,
			ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск"));
	ИначеЕсли Команда.Имя = "ОтправитьПодписанныеPDF" Тогда
		ПодписатьПоНастройкам(Форма,
			ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте"));
	ИначеЕсли Команда.Имя = "ПодписатьПечатныеФормы" Тогда
		Если Форма.Параметры.ПараметрыПечати.Свойство("ЦельПодписания") Тогда
			ПодписатьПечатныеФомыПриПечати(Форма, Форма.Параметры.ПараметрыПечати.ЦельПодписания);
		Иначе
			ПодписатьПечатныеФомыПриПечати(Форма,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Подписать"));
		КонецЕсли;
	ИначеЕсли Команда.Имя = "НачатьИзменениеПечатнойФормы" Тогда
		ВключитьРедактированиеПечатнойФормы(Форма);
	ИначеЕсли Команда.Имя = "НастроитьИПодписать" Тогда
		ЦельПодписания = Неопределено;
		Форма.Параметры.ПараметрыПечати.Свойство("ЦельПодписания", ЦельПодписания);
		НастроитьИПодписать(Форма, ЦельПодписания);
	ИначеЕсли Команда.Имя = "ОтказатьВПодписанииПечатныхФорм" Тогда
		ОтказатьВПодписании(Форма);
	ИначеЕсли Команда.Имя = "ОзнакомленоСКомментариямиКПечатнойФорме" Тогда
		ОзнакомитьсяСКомментариямиКПечатнойФорме(Форма);
	КонецЕсли;
	
	ИнтеграцияСРаботаВРоссииКлиент.ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры);
	ИнтеграцияКабинетСотрудникаКлиент.ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры);
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовПослеОткрытия
Процедура ПечатьДокументовПослеОткрытия(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПечатнаяФормаНедоступна Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НастроитьИПодписать",
			"Доступность",
			Ложь);
		
		ДоступностьКоманд = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СохранитьВPDFИПодписатьФайл",
			"Доступность",
			Ложь);
		
		ДоступностьКоманд = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ОтправитьПодписанныеPDF",
			"Доступность",
			Ложь);
		
		ДоступностьКоманд = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПередатьПодписанныеPDFВСервисКабинетСотрудника",
			"Доступность",
			Ложь);
			
		ДоступностьКоманд = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"ПередатьПодписанныеPDFНаРаботаВРоссии",
			"Доступность",
			Ложь);
			
		ДоступностьКоманд = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования() + "КомандаРедактирования",
			"Доступность",
			Ложь);
			
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеПечатью

// Выполняет подписание печатных форм, выведенных в общую форму ПечатьДокументов.
//
// Параметры:
//  УправляемаяФорма              - УправляемаяФорма, общая форма ПечатьДокументов
//  ЦельПодписания                - ПеречислениеСсылка.ДействияСФайламиДокументовКЭДО
//  ДанныеСертификатовОрганизаций - Соответствие
//										* Ключ     - Организация
//										* Значение - Массив, ссылок на
//											- СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//											- СправочникСсылка.Пользователи
//
Процедура ПодписатьПечатныеФомыПриПечати(УправляемаяФорма, ЦельПодписания, НастройкиПодписания = Неопределено) Экспорт
	
	// Сохранение отредактированной печатной формы
	НастройкаПечатнойФормы = УправлениеПечатьюКлиент.НастройкаТекущейПечатнойФормы(УправляемаяФорма);
	Если НастройкаПечатнойФормы <> Неопределено Тогда
		Если Не УправляемаяФорма.Элементы[НастройкаПечатнойФормы.ИмяРеквизита].Защита Тогда
			УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита] = УправляемаяФорма.ТекущаяПечатнаяФорма;
		КонецЕсли;
	КонецЕсли;
	
	ПечатныеФормы = Новый Массив;
	Для Каждого НастройкаПечатнойФормы Из УправляемаяФорма.НастройкиПечатныхФорм Цикл
		
		Если НастройкаПечатнойФормы.Печатать Тогда
			
			ОбластьТекст = УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита].Область(1, 1,
				УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита].ВысотаТаблицы,
				УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита].ШиринаТаблицы).Текст;
			
			ОписаниеФормы = Новый Структура;
			ОписаниеФормы.Вставить("ПечатнаяФорма", УправляемаяФорма[НастройкаПечатнойФормы.ИмяРеквизита]);
			ОписаниеФормы.Вставить("ИдентификаторПечатнойФормы", НастройкаПечатнойФормы.ИмяМакета);
			ОписаниеФормы.Вставить("Название", НастройкаПечатнойФормы.Название);
			
			ПечатныеФормы.Добавить(ОписаниеФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если УправляемаяФорма.ПараметрыВывода.Свойство("ПараметрыПечатиВнешнейПечатнойФормы")
		И ЗначениеЗаполнено(УправляемаяФорма.ПараметрыВывода.ПараметрыПечатиВнешнейПечатнойФормы) Тогда
		
		Если Не УправляемаяФорма.Параметры.ПараметрыПечати.Свойство("ДополнительныеПараметры")
			Или Не ЗначениеЗаполнено(УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры) Тогда
			
			УправляемаяФорма.Параметры.ПараметрыПечати.Вставить("ДополнительныеПараметры", Новый Структура);
		КонецЕсли;
		
		Для Каждого ОписаниеПараметра Из УправляемаяФорма.ПараметрыВывода.ПараметрыПечатиВнешнейПечатнойФормы Цикл
			Если ЗначениеЗаполнено(ОписаниеПараметра.Значение)
				И Не УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство(ОписаниеПараметра.Ключ) Тогда
				
				УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Вставить(
					ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПечатныеФормыОбъектов = КадровыйЭДОВызовСервера.ПечатныеФормыОбъектов(
		ПечатныеФормы,
		УправляемаяФорма.ОбъектыПечати,
		УправляемаяФорма.Параметры.ПараметрыПечати,
		УправляемаяФорма.УникальныйИдентификатор);
	
	Если Не ЗначениеЗаполнено(ПечатныеФормыОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", УправляемаяФорма);
	ДополнительныеПараметры.Вставить("ПечатныеФормыОбъектов", ПечатныеФормыОбъектов);
	ДополнительныеПараметры.Вставить("ЦельПодписания", ЦельПодписания);
	ДополнительныеПараметры.Вставить("ПечатныеФормы", ПечатныеФормы);
	ДополнительныеПараметры.Вставить("ОбъектыПечати", УправляемаяФорма.ОбъектыПечати);
	
	Если УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.Свойство("ТребуетсяПечатнаяФормаБезПодписи")
		И УправляемаяФорма.Параметры.ПараметрыПечати.ДополнительныеПараметры.ТребуетсяПечатнаяФормаБезПодписи = Истина Тогда
		
		ПоказатьСостояниеСохраненныхБезЦифровыхПодписей(ПечатныеФормыОбъектов.Количество());
		Для Каждого ОписаниеПечатнойФормы Из ПечатныеФормыОбъектов Цикл
			ДанныеИдентификаторовПечатныхФорм = Новый Соответствие;
			ДанныеИдентификаторовПечатныхФорм.Вставить(ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы, Истина);
			ОповеститьОбИзмененииПечатнойФормы(ОписаниеПечатнойФормы.Владелец, ДанныеИдентификаторовПечатныхФорм);
			ПослеПодписанияСохраненныхФорм(Истина, ДополнительныеПараметры); 
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодписанияСохраненныхФорм", ЭтотОбъект, ДополнительныеПараметры);
	ПодписатьФайлы(ПечатныеФормыОбъектов, Оповещение, УправляемаяФорма, ЦельПодписания, НастройкиПодписания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВыполнитьКомандуОткрытияПодписанныхФайлов(КомандаПечати) Экспорт
	
	Если ЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи() Тогда
		ПроверитьСертификатыПодписей(КомандаПечати);
		Возврат Неопределено;
	КонецЕсли;
	
	УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати(КомандаПечати);
	
КонецФункции

Функция РазблокироватьФормуОбъекта(УправляемаяФорма, СсылкаНаОбъект) Экспорт
	
	Результат = КадровыйЭДОВызовСервера.РазблокироватьФормуОбъекта(СсылкаНаОбъект);
	Если ПустаяСтрока(Результат) Тогда
		
		Структура = Новый Структура("ИдентификаторыФайловСЭЦП", Null);
		ЗаполнитьЗначенияСвойств(Структура, УправляемаяФорма);
		Если Структура.ИдентификаторыФайловСЭЦП <> Null Тогда
			УправляемаяФорма.ИдентификаторыФайловСЭЦП = Неопределено;
		КонецЕсли;
		
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(УправляемаяФорма);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОткрытьФормуПодписанияПечатныхФорм(ПрисоединенныеФайлы, ВладелецФормы = Неопределено, ОписаниеОповещения = Неопределено, РежимОткрытия = Неопределено, ЦельПодписания = Неопределено, ЗаполнитьПараметрыКоманды = Ложь) Экспорт
	
	ПараметрыОткрытия = КадровыйЭДОВызовСервера.ПараметрыОткрытияФормыПодписанияПрисоединенныхФайлов(ПрисоединенныеФайлы, ЗаполнитьПараметрыКоманды);
	Если ЦельПодписания <> Неопределено Тогда
		Если Не ПараметрыОткрытия.Свойство("ПараметрыПечати") Тогда
			ПараметрыОткрытия.Вставить("ПараметрыОткрытия", Новый Структура);
		КонецЕсли;
		
		ПараметрыОткрытия.ПараметрыПечати.Вставить("ЦельПодписания", ЦельПодписания);
		
	КонецЕсли;
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ВладелецФормы, Истина, , , ОписаниеОповещения, РежимОткрытия);
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыПодписанияПечатныхФорм(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументыКадровогоЭДО) Тогда
		
		ЭлектронныеДокументы =
			КадровыйЭДОВызовСервера.ЭлектронныеДокументыПоСсылкамНаДокументыКадровогоЭДО(ДокументыКадровогоЭДО);
		
		Если ЭлектронныеДокументы.ГоловныеОрганизации.Количество() > 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для подписания необходимо выбрать документы одной организации';
											|en = 'Для подписания необходимо выбрать документы одной организации'"));
			Возврат;
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
		
		Если ЭлектронныеДокументы.Организации.Количество() > 1 Тогда
			ТекстВопроса =
			НСтр("ru = 'Для подписания выбраны документы разных филиалов.
				|Все документы смогут быть подписаны подписью одного из филиалов.
				|Продолжить?';
				|en = 'Для подписания выбраны документы разных филиалов.
				|Все документы смогут быть подписаны подписью одного из филиалов.
				|Продолжить?'");
			Оповещение = Новый ОписаниеОповещения(
				"ОбработчикПодключаемойКомандыПодписанияПечатныхФормПродолжение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ОбработчикПодключаемойКомандыПодписанияПечатныхФормПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыПодписанияПечатныхФормПродолжение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЭлектронныеДокументы = ДополнительныеПараметры.ЭлектронныеДокументы;
		ДополнительныеПараметрыОповещенияВопроса = Новый Структура;
		ДополнительныеПараметрыОповещенияВопроса.Вставить("Форма", ДополнительныеПараметры.Форма);
		ДополнительныеПараметрыОповещенияВопроса.Вставить("ЭлектронныеДокументы", ЭлектронныеДокументы);
		
		Если ЗначениеЗаполнено(ЭлектронныеДокументы.ПечатныеФормы)
			И Не ЗначениеЗаполнено(ЭлектронныеДокументы.ПрисоединенныеФайлы) Тогда
			
			ОбработатьВыборДокументовНаПодпись(
				Новый Структура("Значение", "ПодписатьДокументыСПечатнымиФормами"), ДополнительныеПараметрыОповещенияВопроса);
		ИначеЕсли Не ЗначениеЗаполнено(ЭлектронныеДокументы.ПечатныеФормы)
			И ЗначениеЗаполнено(ЭлектронныеДокументы.ПрисоединенныеФайлы) Тогда
			
			ОбработатьВыборДокументовНаПодпись(
				Новый Структура("Значение", "ПодписатьДокументыСФайлами"), ДополнительныеПараметрыОповещенияВопроса);
		Иначе
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьВыборДокументовНаПодпись",
				ЭтотОбъект, ДополнительныеПараметрыОповещенияВопроса);
			
			ТекстВопроса = НСтр("ru = 'Среди выбранных документов есть документы с печатными формами и документы с файлами.
				|За один подход можно подписать документы с печатными формами или документы с файлами.';
				|en = 'Среди выбранных документов есть документы с печатными формами и документы с файлами.
				|За один подход можно подписать документы с печатными формами или документы с файлами.'");
			
			КнопкиВопроса = Новый СписокЗначений;
			КнопкиВопроса.Добавить("ПодписатьДокументыСПечатнымиФормами", НСтр("ru = 'Подписать документы с печатными формами';
																				|en = 'Подписать документы с печатными формами'"));
			КнопкиВопроса.Добавить("ПодписатьДокументыСФайлами", НСтр("ru = 'Подписать документы с файлами';
																		|en = 'Подписать документы с файлами'"));
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена';
																	|en = 'Отмена'"));
			
			ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
			ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
			
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, КнопкиВопроса, ПараметрыВопроса);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыСохранитьЭД(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументыКадровогоЭДО) Тогда
		СохранитьДокументыКЭДОНаДиск(ДокументыКадровогоЭДО);
		ОповеститьОНеобходимостиОбновленияФорм(ДокументыКадровогоЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыОткрытияЭлектронногоДокумента(ДокументКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументКадровогоЭДО) Тогда
		
		ЭлектронныйДокумент = КадровыйЭДОВызовСервера.ЭлектронныйДокументКадровогоЭДО(ДокументКадровогоЭДО);
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(
				ЭлектронныйДокумент, ДополнительныеПараметры.Форма.УникальныйИдентификатор, Ложь);
			
			Если ДополнительныеПараметры.Форма.ЗапрещенныеРасширения.НайтиПоЗначению(ДанныеФайла.Расширение) <> Неопределено Тогда
				ДополнительныеПараметрыОповещения = Новый Структура;
				ДополнительныеПараметрыОповещения.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				ДополнительныеПараметрыОповещения.Вставить("Форма", ДополнительныеПараметры.Форма);
				Оповещение = Новый ОписаниеОповещения(
					"ОткрытьЭлектронныйДокументПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметрыОповещения);
				ПараметрыФормы = Новый Структура("Ключ", "ПередОткрытиемФайла");
				ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности", ПараметрыФормы, , , , , Оповещение);
				Возврат;
			КонецЕсли;
			
			ОткрытьЭлектронныйДокумент(ЭлектронныйДокумент,
				ДополнительныеПараметры.Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыОткрытияВерсииЭлектронногоДокументаДляПечати(ДокументКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументКадровогоЭДО) Тогда
		
		ЭлектронныйДокумент = КадровыйЭДОВызовСервера.ЭлектронныйДокументКадровогоЭДО(ДокументКадровогоЭДО);
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			ДанныеФайлаНаПечать = КадровыйЭДОВызовСервера.ДанныеЭлектронногоДокументаСоШтампамиПодписей(
				ЭлектронныйДокумент, ДополнительныеПараметры.Форма.УникальныйИдентификатор);
			Если ДанныеФайлаНаПечать = Неопределено Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не удалось получить версию файла для печати';
												|en = 'Cannot get the file version to print'"));
			Иначе
				ФайловаяСистемаКлиент.ОткрытьФайл(ДанныеФайлаНаПечать.АдресВХранилище, , ДанныеФайлаНаПечать.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыОбновитьВ1СКабинетСотрудника(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если Не ЗарплатаКадрыВызовСервера.ЭтоПолноправныйПользователь() Тогда
		ТекстПредупреждения = НСтр("ru = 'Для выполнения команды необходимы полные права на базу данных';
									|en = 'To execute the command, you need to have full database rights'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеФайлы = Новый Массив;
	Если ЗначениеЗаполнено(ДокументыКадровогоЭДО) Тогда
		
		ЭлектронныеДокументы = КадровыйЭДОВызовСервера.ЭлектронныеДокументыПоСсылкамНаДокументыКадровогоЭДО(ДокументыКадровогоЭДО);
		ДокументыЗаявлений = ЭлектронныеДокументы.ДокументыПоКатегориям.Получить(ПредопределенноеЗначение("Перечисление.КатегорииДокументовКадровогоЭДО.ЗаявлениеСотрудника"));
		Если ДокументыЗаявлений <> Неопределено
			И ЗначениеЗаполнено(ДокументыЗаявлений) Тогда
			
			ТекстПредупреждения =
				НСтр("ru = 'Среди выбранных документов есть документы,
					|полученные от сотрудников.
					|Обновлять можно только документы подготовленные
					|организацией.';
					|en = 'Среди выбранных документов есть документы,
					|полученные от сотрудников.
					|Обновлять можно только документы подготовленные
					|организацией.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		ОбрабатываемыеФайлы = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ЭлектронныеДокументы.ПрисоединенныеФайлы);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбрабатываемыеФайлы, ЭлектронныеДокументы.ПечатныеФормы);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ОбрабатываемыеФайлы, Неопределено);
		
		КадровыйЭДОВызовСервера.ЗапланироватьДействияСПечатнымиФормами(ОбрабатываемыеФайлы,
			ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
		
	КонецЕсли;
	ПредставлениеДокументов = СтрокаСЧислом(
		НСтр("ru = ';%1 документа; ;%1 документов;%1 документов;%1 документа';
			|en = ';%1 document;;;;%1 documents'"),
			ОбрабатываемыеФайлы.Количество(), ВидЧисловогоЗначения.Количественное);
	Состояние(СтрШаблон(
		НСтр("ru = 'Запланировано обновление %1';
			|en = 'The %1 update is scheduled'"),
		ПредставлениеДокументов));
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыКонвертироватьДокументыВPDFA1A(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если Не ЗарплатаКадрыВызовСервера.ЭтоПолноправныйПользователь() Тогда
		ТекстПредупреждения = НСтр("ru = 'Для конвертации электронных документов печатных форм необходимы полные права на базу данных';
									|en = 'To convert electronic documents of print forms, you need to have full database rights'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДокументыКадровогоЭДО.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Выберите строки документы печатных форм которых хотите сконвертировать';
									|en = 'Select lines with print form documents that you want to convert'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
	ТекстВопроса =
		НСтр("ru = 'При проведении конвертации файлы печатных форм будут ПЕРЕЗАПИСАНЫ в требуемом формате (PDF/A-1A).
		|Ранее установленные цифровые подписи перестанут действовать и поэтому будут УДАЛЕНЫ.
		|По окончании конвертации будет произведено повторное подписание печатных форм ответственным лицом организации, после чего печатные формы будут отправлены в кабинеты сотрудникам для повторного ознакомления.
		|
		|Перед проведением конвертации настоятельно рекомендуем СДЕЛАТЬ КОПИЮ БАЗЫ ДАННЫХ!
		|Проводите конвертацию маленькими ПОРЦИЯМИ документов, во избежание неприятностей, связанных с нехваткой памяти.
		|
		|Конвертировать?';
		|en = 'During the conversion, print form files will be OVERWRITTEN in the required format (PDF/A-1A).
		|The previously installed digital signatures will no longer be valid and will be DELETED.
		|Once the conversion is completed, the print forms will be re-signed by the responsible person of the company and sent to employee accounts for review.
		|
		|Before the conversion, we strongly recommend that you BACK UP THE DATABASE.
		|We also recommend that you convert documents in small PORTIONS to avoid issues due to the lack of memory.
		|
		|Do you want to convert?'");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументыКадровогоЭДО", ДокументыКадровогоЭДО);
	Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОКонвертацииДокументов", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыОбновитьСостоянияДокументов(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	ДлительнаяОперация = КадровыйЭДОВызовСервера.ОбновитьСостоянияДокументовКЭДОВФоне(ДокументыКадровогоЭДО);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОбновленияСостояний", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.Форма);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыПроверитьНеПроверенныеПодписи(ДокументыКадровогоЭДО, ДополнительныеПараметры) Экспорт
	
	Если ДокументыКадровогоЭДО.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбраны документы для проверки непроверенных подписей';
									|en = 'The documents to verify unverified signatures are not selected'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыОбработкиОтвета = Новый Структура;
	ДополнительныеПараметрыОбработкиОтвета.Вставить("ДокументыКадровогоЭДО", ДокументыКадровогоЭДО);
	ДополнительныеПараметрыОбработкиОтвета.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	Если ДокументыКадровогоЭДО.Количество() > 10 Тогда
		
		ТекстВопроса =
			НСтр("ru = 'Проверка подписей электронных документов может занимать продолжительное время.
				|Во избежание неприятностей, связанных с нехваткой памяти - предлагается проводить проверку небольшими порциями документов.
				|
				|Продолжить?';
				|en = 'Verifying the signatures of electronic documents can take a long time.
				|To avoid issues due to the lack of memory, it is recommended to verify small document batches.
				|
				|Continue?'");
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОПроверкеПодписей", ЭтотОбъект, ДополнительныеПараметрыОбработкиОтвета);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОбработкаОтветаНаВопросОПроверкеПодписей(КодВозвратаДиалога.Да, ДополнительныеПараметрыОбработкиОтвета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборДокументовНаПодпись(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = "ПодписатьДокументыСПечатнымиФормами" Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыПодписанияДокументовСФайлами", ЭтотОбъект, Новый Структура);
			ОткрытьФормуПодписанияПечатныхФорм(ДополнительныеПараметры.ЭлектронныеДокументы.ПечатныеФормы,
				ДополнительныеПараметры.Форма, Оповещение, , ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Подписать"));
		ИначеЕсли Результат.Значение = "ПодписатьДокументыСФайлами" Тогда
			ФайлыНаПодпись = КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(
				ДополнительныеПараметры.ЭлектронныеДокументы.ПрисоединенныеФайлы);
			Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыПодписанияДокументовСФайлами", ЭтотОбъект,
				Новый Структура("ПодписанныеФайлы", ДополнительныеПараметры.ЭлектронныеДокументы.ПрисоединенныеФайлы));
			ПодписатьФайлы(
				ФайлыНаПодпись,
				Оповещение,
				ДополнительныеПараметры.Форма,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Подписать"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатыПодписанияДокументовСФайлами(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ПодписанныеФайлы") Тогда
			КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(ДополнительныеПараметры.ПодписанныеФайлы);
		КонецЕсли;
		ПоказатьСостояниеОтправленныхНаПодпись(ДополнительныеПараметры);
		ОповеститьОбОбновленииДанныхДокументовКЭДО();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСостояниеОтправленныхНаПодпись(ПараметрыОповещения) Экспорт
	
	Если ПараметрыОповещения.Свойство("ДанныеФайловНаПодпись")
		И ПараметрыОповещения.ДанныеФайловНаПодпись.Количество() > 0 Тогда
		
		КоличествоФайловНаправленныхНаПодпись = 0;
		Для Каждого ФайлыНаПодписьОрганизации Из ПараметрыОповещения.ДанныеФайловНаПодпись Цикл
			КоличествоФайловНаправленныхНаПодпись = КоличествоФайловНаправленныхНаПодпись + ФайлыНаПодписьОрганизации.Значение.Количество();
		КонецЦикла;
		
		УведомитьОКоличествоДокументовОтправленныхНаПодписание(КоличествоФайловНаправленныхНаПодпись);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСостояниеОтправленныхНаПодписьПоКоллекцииНаправлений(НаправленияНаПодписание) Экспорт
	
	КоличествоФайловНаправленныхНаПодпись = 0;
	Для Каждого НаправленияПоОрганизации Из НаправленияНаПодписание Цикл
		Для Каждого НаправленияПоИдентификатору Из НаправленияПоОрганизации.Значение Цикл
			Для Каждого НаправленияПоТипуОбъекта Из НаправленияПоИдентификатору.Значение Цикл
				Для Каждого НаправлениеПоПодписантам Из НаправленияПоТипуОбъекта.Значение Цикл
					КоличествоФайловНаправленныхНаПодпись = КоличествоФайловНаправленныхНаПодпись
						+ НаправлениеПоПодписантам.Значение.ПрисоединенныеФайлы.Количество();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	УведомитьОКоличествоДокументовОтправленныхНаПодписание(КоличествоФайловНаправленныхНаПодпись);
	
КонецПроцедуры

Процедура УведомитьОКоличествоДокументовОтправленныхНаПодписание(КоличествоФайловНаправленныхНаПодпись)
	
	Если КоличествоФайловНаправленныхНаПодпись > 0 Тогда
		Состояние(СтрокаСЧислом(
			НСтр("ru = ';%1 документ направлен на подпись; ;%1 документа направлено на подпись;%1 документов направлены на подпись;%1 направлено на подпись';
				|en = ';%1 document has been sent for signing; ;%1 documents have been sent for signing; %1 documents have been sent for signing; %1 sent for signing'"),
			КоличествоФайловНаправленныхНаПодпись, ВидЧисловогоЗначения.Количественное));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормыВыбораПодписантовПечатныхФорм(ВладелецФормы, Организация, Оповещение, ПодписантыПечатныхФорм = Неопределено, ВыборЕдинственногоПодписанта = Ложь) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организации", Организация);
	ПараметрыОткрытия.Вставить("ВыборЕдинственногоПодписанта", ВыборЕдинственногоПодписанта);
	
	Если ПодписантыПечатныхФорм <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ПодписантыПечатныхФорм", Новый ФиксированныйМассив(ПодписантыПечатныхФорм));
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ВыборПодписантовПечатныхФорм", ПараметрыОткрытия, ВладелецФормы, Истина, , ,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы.
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт 
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьДействияСообщения", ЭтотОбъект);
	СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Обработчик);
	
КонецПроцедуры

Процедура ОчиститьНастройкиПодписанияПечатныхФорм() Экспорт
	
	КадровыйЭДОВызовСервера.ОчиститьНастройкиПодписанияПечатныхФорм();
	ПоказатьПредупреждение(, НСтр("ru = 'Настройки подписания ЭЦП (электронными цифровыми подписями) очищены.';
									|en = 'Digital signature settings are cleared.'"));
	
КонецПроцедуры

Процедура ПодписатьФайлы(ПодписываемыеФайлы, ОповещениеЗавершения, ФормаВладелец, ЦельПодписания, НастройкиПодписания = Неопределено) Экспорт
	
	Организации = Новый Массив;
	ФайлыБезВладельца = Истина;
	ИсключаемыеИзЛичногоПодписания = Новый Массив;
	НаправленияНаПодписание = Новый Соответствие;
	ДанныеФайловНаПодпись = Новый Соответствие;
	Для Каждого ДанныеФайла Из ПодписываемыеФайлы Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеФайла.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Организации.Добавить(ДанныеФайла.Организация);
		Если ЗначениеЗаполнено(ДанныеФайла.ФайлОбъекта) Тогда
			ФайлыБезВладельца = Ложь;
		КонецЕсли;
		
		Если НастройкиПодписания <> Неопределено Тогда
			НастройкиОрганизации = НастройкиПодписания.Получить(ДанныеФайла.Организация);
			Если НастройкиОрганизации <> Неопределено Тогда
				НастройкиИдентификатора = НастройкиОрганизации.Получить(ДанныеФайла.ИдентификаторПечатнойФормы);
				Если НастройкиИдентификатора <> Неопределено Тогда
					НастройкиТипаОбъекта = НастройкиИдентификатора.Получить(ТипЗнч(ДанныеФайла.Владелец));
					Если НастройкиТипаОбъекта <> Неопределено Тогда
						Если Не НастройкиТипаОбъекта.Инициатор Тогда
							ИсключаемыеИзЛичногоПодписания.Добавить(ДанныеФайла);
						КонецЕсли;
						Если НастройкиТипаОбъекта.ОтветственныеЛица.Количество() > 0 Тогда
							
							НаправленияПоОрганизации = НаправленияНаПодписание.Получить(ДанныеФайла.Организация);
							Если НаправленияПоОрганизации = Неопределено Тогда
								НаправленияПоОрганизации = Новый Соответствие;
								НаправленияНаПодписание.Вставить(ДанныеФайла.Организация, НаправленияПоОрганизации);
							КонецЕсли;
							НаправленияПоИдентификатору = НаправленияПоОрганизации.Получить(ДанныеФайла.ИдентификаторПечатнойФормы);
							Если НаправленияПоИдентификатору = Неопределено Тогда
								НаправленияПоИдентификатору = Новый Соответствие;
								НаправленияПоОрганизации.Вставить(ДанныеФайла.ИдентификаторПечатнойФормы, НаправленияПоИдентификатору);
							КонецЕсли;
							ТипВладельца = ТипЗнч(ДанныеФайла.Владелец);
							НаправленияПоТипуОбъекта = НаправленияПоИдентификатору.Получить(ТипВладельца);
							Если НаправленияПоТипуОбъекта = Неопределено Тогда
								НаправленияПоТипуОбъекта = Новый Соответствие;
								НаправленияПоИдентификатору.Вставить(ТипВладельца, НаправленияПоТипуОбъекта);
							КонецЕсли;
							
							НаправленияПоПодписантам = Неопределено;
							Для Каждого НастройкиОтветственныхЛиц Из НастройкиТипаОбъекта.ОтветственныеЛица Цикл
								Если НастройкиОтветственныхЛиц.Значение.Найти(ДанныеФайла.Владелец) <> Неопределено Тогда
									НаправленияПоПодписантам = НаправленияПоТипуОбъекта.Получить(НастройкиОтветственныхЛиц.Ключ);
									Если НаправленияПоПодписантам = Неопределено Тогда
										НаправленияПоПодписантам = Новый Структура("ПрисоединенныеФайлы,ОтветственныеЛица", Новый Массив, НастройкиОтветственныхЛиц.Ключ);
										ОтветственныеЛица = НастройкиОтветственныхЛиц.Ключ;
										Если НастройкиТипаОбъекта.Инициатор Тогда
											ОтветственныеЛица.Вставить(0, ПользователиКлиент.ТекущийПользователь());
										КонецЕсли;
										НаправленияПоТипуОбъекта.Вставить(ОтветственныеЛица, НаправленияПоПодписантам);
									КонецЕсли;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							НаправленияПоПодписантам.ПрисоединенныеФайлы.Добавить(ДанныеФайла.ФайлОбъекта);
							
							// Подготовка коллекции к обновлению
							ДанныеФайлов = ДанныеФайловНаПодпись.Получить(ДанныеФайла.Организация);
							Если ДанныеФайлов = Неопределено Тогда
								ДанныеФайлов = Новый Массив;
								ДанныеФайловНаПодпись.Вставить(ДанныеФайла.Организация, ДанныеФайлов);
							КонецЕсли;
							
							Если ДанныеФайлов.Найти(ДанныеФайла) = Неопределено Тогда
								ДанныеФайлов.Добавить(ДанныеФайла);
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НаправленияНаПодписание.Количество() > 0 Тогда
		
		КадровыйЭДОВызовСервера.НаправитьНаПодписаниеПоКоллекцииНаправлений(НаправленияНаПодписание, ЦельПодписания);
		ПоказатьСостояниеОтправленныхНаПодписьПоКоллекцииНаправлений(НаправленияНаПодписание);
		
		Если ДанныеФайловНаПодпись.Количество() > 0 Тогда
			Если ОповещениеЗавершения <> Неопределено Тогда
				ОповещениеЗавершения.ДополнительныеПараметры.Вставить("ДанныеФайловНаПодпись", ДанныеФайловНаПодпись);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ИсключениеИзПодписания Из ИсключаемыеИзЛичногоПодписания Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
			ПодписываемыеФайлы, ИсключениеИзПодписания);
	КонецЦикла;
	
	Организации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Организации);
	ДанныеСертификатовОрганизаций = КадровыйЭДОВызовСервера.ДанныеСертификатовОрганизаций(Организации);
	
	ПараметрыПодписания = Новый Структура;
	ПараметрыПодписания.Вставить("ПодписываемыеФайлы", ПодписываемыеФайлы);
	ПараметрыПодписания.Вставить("Организации", Организации);
	ПараметрыПодписания.Вставить("СертификатыОрганизаций", ДанныеСертификатовОрганизаций.Сертификаты);
	ПараметрыПодписания.Вставить("ГоловныеОрганизации", ДанныеСертификатовОрганизаций.ГоловныеОрганизации);
	ПараметрыПодписания.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ПараметрыПодписания.Вставить("ЦельПодписания", ЦельПодписания);
	
	Если Не ЗначениеЗаполнено(ПодписываемыеФайлы) Тогда
		ПодписатьФайлыСертификатами(Истина, ПараметрыПодписания);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьФайлыСертификатами", ЭтотОбъект, ПараметрыПодписания);
	
	ПараметрыПодготовки = Новый Структура;
	ПараметрыПодготовки.Вставить("Организации", Организации);
	ПараметрыПодготовки.Вставить("ДанныеСертификатовОрганизаций", ДанныеСертификатовОрганизаций);
	ПараметрыПодготовки.Вставить("ОповещениеЗавершения", Оповещение);
	ПараметрыПодготовки.Вставить("ФормаВладелец", ФормаВладелец);
	ПараметрыПодготовки.Вставить("ИндексОрганизации", 0);
	ПараметрыПодготовки.Вставить("ФайлыБезВладельца", ФайлыБезВладельца);
	
	ПодготовитьСертификатыОрганизации(ПараметрыПодготовки);
	
КонецПроцедуры

Процедура ПоказатьСостояниеСохраненныхБезЦифровыхПодписей(КоличествоФайлов) Экспорт
	
	Если КоличествоФайлов > 0 Тогда
		
		Состояние(СтрокаСЧислом(
			НСтр("ru = ';%1 документ сохранен без цифровой подписи; ;%1 документа сохранено без цифровой подписи;%1 документов сохранено без цифровой подписи;%1 сохранено без цифровой подписи';
				|en = ';%1 document is saved without digital signature; %1 documents are saved without digital signature;%1documents are saved without digital signature;%1 is saved without digital signature'"),
			КоличествоФайлов, ВидЧисловогоЗначения.Количественное));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПоНастройкам(УправляемаяФорма, ЦельПодписания = Неопределено) Экспорт
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыНастройкиПодписания(УправляемаяФорма, ЦельПодписания);
	ОткрытьФорму("ОбщаяФорма.НастройкаПодписания", ПараметрыОткрытия, УправляемаяФорма, Истина);
	
КонецПроцедуры

Процедура НастроитьИПодписать(УправляемаяФорма, ЦельПодписания = Неопределено)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыНастройкиПодписания(УправляемаяФорма, ЦельПодписания);
	ПараметрыОткрытия.Вставить("Настроить", Истина);
	ОткрытьФорму("ОбщаяФорма.НастройкаПодписания", ПараметрыОткрытия, УправляемаяФорма, Истина);
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыНастройкиПодписания(УправляемаяФорма, ЦельПодписания)
	
	Идентификаторы = Новый Массив;
	Для Каждого НастройкаПечатнойФормы Из УправляемаяФорма.НастройкиПечатныхФорм Цикл
		Если НастройкаПечатнойФормы.Печатать Тогда
			Идентификаторы.Добавить(НастройкаПечатнойФормы.ИмяМакета);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектыПечати", УправляемаяФорма.ОбъектыПечати.ВыгрузитьЗначения());
	ПараметрыОткрытия.Вставить("Идентификаторы", ОбщегоНазначенияКлиентСервер.СвернутьМассив(Идентификаторы));
	ПараметрыОткрытия.Вставить("ЦельПодписания", ЦельПодписания);
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ОтказатьВПодписании(УправляемаяФорма) Экспорт
	
	ПараметрыОткрытия = Новый Структура("ФайлыДокументовКЭДО", ФайлыДокументовКЭДОФормыПечатьДокументов(УправляемаяФорма));
	ОткрытьФорму("ОбщаяФорма.ОтказВПодписании", ПараметрыОткрытия, УправляемаяФорма, Истина);
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыСохранитьМЧД(СписокМЧД, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(СписокМЧД) Тогда
		СохранитьМЧДНаДиск(СписокМЧД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОНеобходимостиОбновленияФорм(Источник) Экспорт
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ДокументКадровогоЭДО") Тогда
		ОповеститьОбИзменении(Источник);
		ОповеститьОбОбновленииДанныхДокументовКЭДО(Источник);
	Иначе
		ОповеститьОбИзменении(Тип("ДокументСсылка.ДокументКадровогоЭДО"));
		ОповеститьОбОбновленииДанныхДокументовКЭДО();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыВизуализаторШаблонаДокумента(ШаблонДокумента, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура("ШаблонДокумента", ШаблонДокумента);
	ОткрытьФорму("Справочник.ШаблоныДокументов.Форма.ВизуализаторДокумента",
		ПараметрыОткрытия, ЭтотОбъект, Истина);
	
КонецПроцедуры

Процедура ОбработчикПодключаемойКомандыВерсииШаблонаДокумента(ШаблонДокумента, ДополнительныеПараметры) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ШаблонДокумента", ШаблонДокумента);
	
	ОткрытьФорму("Справочник.ШаблоныДокументов.Форма.ФормаСпискаВерсий", ПараметрыОткрытия, ДополнительныеПараметры.Форма,
		Истина, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодписаниеВФормеПечатьДокументов

Процедура ПодписатьФайлыСертификатами(Результат, ДополнительныеПараметры) Экспорт
	
	ПодписываемыеФайлы = ДополнительныеПараметры.ПодписываемыеФайлы;
	СертификатыОрганизаций = ДополнительныеПараметры.СертификатыОрганизаций;
	
	ДанныеФайловНаПодпись = Новый Соответствие;
	ДанныеФайловПоСертификатам = Новый Соответствие;
	ПодписываемыеДанные = Новый Массив;
	Сертификаты = Новый Массив;
	Для Каждого ДанныеФайла Из ПодписываемыеФайлы Цикл
		
		Если ПустаяСтрока(ДанныеФайла.АдресВХранилище)
			И Не ЗначениеЗаполнено(ДанныеФайла.ФайлОбъекта) Тогда
			
			Продолжить;
		КонецЕсли;
		
		СертификатыОрганизации = СертификатыОрганизаций.Получить(
			?(ДанныеФайла.Организация = Неопределено, "Неопределено", ДанныеФайла.Организация));
		
		Если Не ЗначениеЗаполнено(СертификатыОрганизации) И ЗначениеЗаполнено(ДанныеФайла.Организация) Тогда
			ГоловнаяОрганизация = ДополнительныеПараметры.ГоловныеОрганизации.Получить(ДанныеФайла.Организация);
			Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
				СертификатыГоловнойОрганизации = СертификатыОрганизаций.Получить(ГоловнаяОрганизация);
				СертификатыОрганизации = СертификатыГоловнойОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		Если СертификатыОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СертификатыОрганизации[0]) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ДанныеФайлов = ДанныеФайловНаПодпись.Получить(ДанныеФайла.Организация);
			Если ДанныеФайлов = Неопределено Тогда
				ДанныеФайлов = Новый Массив;
				ДанныеФайловНаПодпись.Вставить(ДанныеФайла.Организация, ДанныеФайлов);
			КонецЕсли;
			
			Если ДанныеФайлов.Найти(ДанныеФайла) = Неопределено Тогда
				ДанныеФайлов.Добавить(ДанныеФайла);
			КонецЕсли;
			
		Иначе
			
			Сертификаты = СертификатыОрганизации;
			
			Если ЗначениеЗаполнено(ДанныеФайла.АдресВХранилище) Тогда
				АдресВХранилище = ДанныеФайла.АдресВХранилище;
			Иначе
				ДанныеПрисоединенногоФайла = РаботаСФайламиКлиент.ДанныеФайла(ДанныеФайла.ФайлОбъекта, Новый УникальныйИдентификатор, Истина);
				АдресВХранилище = ДанныеПрисоединенногоФайла.СсылкаНаДвоичныеДанныеФайла;
			КонецЕсли;
			
			Данные = Новый Структура;
			ПодписываемыеДанные.Добавить(Данные);
			
			Данные.Вставить("Данные",        АдресВХранилище);
			Данные.Вставить("Представление", ДанныеФайла.ИмяФайла);
			Данные.Вставить("ИсходнаяСтрока", ДанныеФайла);
			
			Если ЗначениеЗаполнено(ДанныеФайла.ФайлОбъекта) Тогда
				Данные.Вставить("Объект", ДанныеФайла.ФайлОбъекта);
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого Сертификат Из СертификатыОрганизации Цикл
				
				Если ДанныеФайла.УстановленныеПодписи <> Неопределено Тогда
					
					ДанныеСертификата = ДанныеФайла.УстановленныеПодписи.Получить(Сертификат);
					Если ДанныеСертификата <> Неопределено Тогда
					
						НаборДанных = ДанныеФайловПоСертификатам.Получить(Сертификат);
						Если НаборДанных = Неопределено Тогда
							НаборДанных = Новый Соответствие;
							ДанныеФайловПоСертификатам.Вставить(Сертификат, НаборДанных);
						КонецЕсли;
						
						НаборДанных.Вставить(ДанныеФайла.ФайлОбъекта, ДанныеСертификата);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеФайловНаПодпись.Количество() > 0 Тогда
		НаправитьНаПодпись(ДанныеФайловНаПодпись, ДополнительныеПараметры.ЦельПодписания, СертификатыОрганизаций);
		Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда
			Если ДополнительныеПараметры.ОповещениеЗавершения.ДополнительныеПараметры.Свойство("ДанныеФайловНаПодпись") Тогда
				ДанныеФайловНаПодписьПараметров = ДополнительныеПараметры.ОповещениеЗавершения.ДополнительныеПараметры.ДанныеФайловНаПодпись;
				Для Каждого ДанныеФайловНаПодписьОрганизации Из ДанныеФайловНаПодпись Цикл
					ДанныеФайлов = ДанныеФайловНаПодписьПараметров.Получить(ДанныеФайловНаПодписьОрганизации.Ключ);
					Если ДанныеФайлов = Неопределено Тогда
						ДанныеФайловНаПодписьПараметров.Вставить(ДанныеФайловНаПодписьОрганизации.Ключ, ДанныеФайловНаПодписьОрганизации.Значение);
					Иначе
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеФайлов, ДанныеФайловНаПодписьОрганизации.Значение, Истина);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ДополнительныеПараметры.ОповещениеЗавершения.ДополнительныеПараметры.Вставить("ДанныеФайловНаПодпись", ДанныеФайловНаПодпись);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Сертификаты.Количество() > 0 Тогда
		ПодписатьФайлыСертификатом(ПодписываемыеДанные, ДанныеФайловПоСертификатам, Сертификаты,
			ДополнительныеПараметры.ОповещениеЗавершения);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДополнительныеПараметры.ПодписываемыеФайлы);
	КонецЕсли;
	
КонецПроцедуры

#Область ПодготовкаСпискаСертификатовОрганизаций

Процедура ПодготовитьСертификатыОрганизации(ПараметрыПодготовки)
	
	ФормаВладелец = ПараметрыПодготовки.ФормаВладелец;
	Организация = ПараметрыПодготовки.Организации[ПараметрыПодготовки.ИндексОрганизации];
	ДанныеСертификатовОрганизаций = ПараметрыПодготовки.ДанныеСертификатовОрганизаций;
	
	СертификатыОрганизации = ДанныеСертификатовОрганизаций.Сертификаты.Получить(
		?(Организация = Неопределено, "Неопределено", Организация));
	
	Если Не ЗначениеЗаполнено(СертификатыОрганизации) И ЗначениеЗаполнено(Организация) Тогда
		Если ДанныеСертификатовОрганизаций.Свойство("ГоловныеОрганизации") Тогда
			ГоловнаяОрганизация = ДанныеСертификатовОрганизаций.ГоловныеОрганизации.Получить(Организация);
			Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
				СертификатыОрганизации = ДанныеСертификатовОрганизаций.Сертификаты.Получить(ГоловнаяОрганизация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыПодготовки.ФайлыБезВладельца
		И Не ЗначениеЗаполнено(СертификатыОрганизации) Тогда
		
		Если КадровыйЭДОВызовСервера.ДоступенВыборПользователей() Тогда
			Оповещение = Новый ОписаниеОповещения("ПриВыбореОтветственныхЛиц", ЭтотОбъект, ПараметрыПодготовки);
			ОткрытьФормыВыбораПодписантовПечатныхФорм(ФормаВладелец, Организация, Оповещение);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не найдено сертификатов %1 для подписания документов.';
					|en = 'No certificates %1 to sign documents are found.'"),
				Организация);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	Иначе
		ПодготовитьСертификатыСледующейОрганизации(ПараметрыПодготовки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСертификатыСледующейОрганизации(ПараметрыПодготовки)
	
	ПараметрыПодготовки.ИндексОрганизации = ПараметрыПодготовки.ИндексОрганизации + 1;
	Если ПараметрыПодготовки.ИндексОрганизации < ПараметрыПодготовки.Организации.Количество() Тогда
		ПодготовитьСертификатыОрганизации(ПараметрыПодготовки);
	Иначе
		ВыполнитьОбработкуОповещения(ПараметрыПодготовки.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ВыборСертификатов

Процедура ПриВыбореСертификатов(ВыбранныеСертификаты, ПараметрыПодготовки) Экспорт
	
	Если ВыбранныеСертификаты <> Неопределено Тогда
		
		Если ТипЗнч(ВыбранныеСертификаты) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
			СертификатыОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранныеСертификаты);
		Иначе
			СертификатыОрганизации = ВыбранныеСертификаты;
		КонецЕсли;
		
		Организация = ПараметрыПодготовки.Организации[ПараметрыПодготовки.ИндексОрганизации];
		ПараметрыПодготовки.ДанныеСертификатовОрганизаций.Сертификаты.Вставить(
			?(Организация = Неопределено, "Неопределено", Организация), СертификатыОрганизации);
		
		Если КадровыйЭДОВызовСервера.НеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(Организация) Тогда
			
			ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
			ПараметрыВопроса.Заголовок = НСтр("ru = 'Подписание документов';
												|en = 'Signing the documents'");
			ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
			
			Если СертификатыОрганизации.Количество() = 1 Тогда
				ТекстВопроса = НСтр("ru = 'Всегда подписывать выбранным сертификатом?';
									|en = 'Always sign with the selected certificate?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Всегда подписывать выбранными сертификатами?';
									|en = 'Always sign with selected certificates?'");
			КонецЕсли;
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да';
														|en = 'Yes'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет';
														|en = 'No'"));
			Кнопки.Добавить("ВсегдаНет", НСтр("ru = 'Всегда нет';
												|en = 'Always no'"));
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьОтветОПодписанииВыбраннымиСертификатами", ЭтотОбъект, ПараметрыПодготовки);
			СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
		Иначе
			ПодготовитьСертификатыСледующейОрганизации(ПараметрыПодготовки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветОПодписанииВыбраннымиСертификатами(Результат, ПараметрыПодготовки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыПодготовки.Организации[ПараметрыПодготовки.ИндексОрганизации];
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		СертификатыОрганизации = ПараметрыПодготовки.ДанныеСертификатовОрганизаций.Сертификаты.Получить(
			?(Организация = Неопределено, "Неопределено", Организация));
		КадровыйЭДОВызовСервера.ЗапомнитьСертификатыОрганизации(Организация, СертификатыОрганизации, Не Результат.БольшеНеЗадаватьЭтотВопрос);
	ИначеЕсли Результат.Значение = "ВсегдаНет" Тогда
		КадровыйЭДОВызовСервера.ЗапомнитьНеобходимостьЗадаватьВопросПриВыбореСертификатовОрганизации(
			Организация, Ложь);
	КонецЕсли;
	
	ПодготовитьСертификатыСледующейОрганизации(ПараметрыПодготовки);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборОтветственныхЛиц

Процедура ПриВыбореОтветственныхЛиц(ВыбранныеПодписанты, ПараметрыПодготовки) Экспорт
	
	Если ВыбранныеПодписанты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ПараметрыПодготовки.Организации[ПараметрыПодготовки.ИндексОрганизации];
	ПараметрыПодготовки.ДанныеСертификатовОрганизаций.Сертификаты.Вставить(Организация, ВыбранныеПодписанты);
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Подписание документов';
										|en = 'Signing the documents'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Если ВыбранныеПодписанты.Количество() = 1 Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Всегда направлять документы организации %1 на подписание выбранному
				|ответственному лицу (%2)?';
				|en = 'Always send %1 сompany documents for signing to the selected
				| responsible person (%2)?'"),
			Организация,
			ВыбранныеПодписанты[0]);
		
	Иначе
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Всегда направлять документы организации %1 на подписание выбранным ответственным лицам?';
				|en = 'Always send %1 сompany documents for signing to the selected responsible persons?'"),
			Организация);
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьОтветОВыбореОтветственныхЛиц", ЭтотОбъект, ПараметрыПодготовки);
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ПараметрыВопроса);
	
КонецПроцедуры

Процедура ОбработатьОтветОВыбореОтветственныхЛиц(Результат, ПараметрыПодготовки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		Организация = ПараметрыПодготовки.Организации[ПараметрыПодготовки.ИндексОрганизации];
		ВыбранныеПодписанты = ПараметрыПодготовки.ДанныеСертификатовОрганизаций.Сертификаты.Получить(Организация);
		КадровыйЭДОВызовСервера.ЗапомнитьПодписантов(Организация, ВыбранныеПодписанты);
	КонецЕсли;
	
	ПодготовитьСертификатыСледующейОрганизации(ПараметрыПодготовки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПодписаниеФайловПечатныхФорм

Процедура ПодписатьФайлыСертификатом(ПодписываемыеФайлы, ДанныеФайловПоСертификатам, СертификатыОрганизаций, ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеФайловПоСертификатам", ДанныеФайловПоСертификатам);
	ДополнительныеПараметры.Вставить("СертификатыОрганизаций", СертификатыОрганизаций);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПередПодписанием = Новый ОписаниеОповещения("ПередПодписаниемФайловСертификатом", ЭтотОбъект, ДополнительныеПараметры);
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ОтборСертификатов", СертификатыОрганизаций);
	ОписаниеДанных.Вставить("ПередВыполнением", ПередПодписанием);
	
	Если ПодписываемыеФайлы.Количество() = 1 Тогда
		ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Подписание файла';
															|en = 'Sign file'"));
		ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файл';
															|en = 'File'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора", ПодписываемыеФайлы[0].Представление);
	Иначе
		ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Подписание файлов';
															|en = 'Sign files'"));
		ОписаниеДанных.Вставить("ЗаголовокДанных",     НСтр("ru = 'Файлы';
															|en = 'Files'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора", НСтр("ru = 'Печатные формы (%1)';
															|en = 'Print forms (%1)'"));
	КонецЕсли;
	ОписаниеДанных.Вставить("НаборДанных",         ПодписываемыеФайлы);
	
	Состояние(ОписаниеДанных.Операция);
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодписанияФайловСертификатом", ЭтотОбъект, ДополнительныеПараметры);
	ТипПодписи = ЭлектроннаяПодписьКлиент.НовыйТипПодписи(ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.СМеткойДоверенногоВремениCAdEST"));
	ТипПодписи.ВыборДоверенности = Истина;
	ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, ЭтотОбъект, Оповещение, ТипПодписи);
	
КонецПроцедуры

Процедура ПередПодписаниемФайловСертификатом(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ОписаниеДанных.Свойство("НаборДанных") Тогда
		НаборДанных = Результат.ОписаниеДанных.НаборДанных;
	Иначе
		НаборДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.ОписаниеДанных);
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого ОписаниеДанных Из НаборДанных Цикл
		ДанныеСертификата = ДополнительныеПараметры.ДанныеФайловПоСертификатам.Получить(Результат.ОписаниеДанных.ВыбранныйСертификат.Ссылка);
		Если ДанныеСертификата <> Неопределено Тогда
			ДанныеПодписи = ДанныеСертификата.Получить(ОписаниеДанных.Объект);
			Если ДанныеПодписи <> Неопределено Тогда
				Для Каждого МашиночитаемаяДоверенность Из ДанныеПодписи Цикл
					Если Не ЗначениеЗаполнено(Результат.ОписаниеДанных.ВыбраннаяДоверенность)
						И МашиночитаемаяДоверенность = Неопределено Тогда
						
						УдаляемыеЭлементы.Добавить(ОписаниеДанных);
						Прервать
					ИначеЕсли МашиночитаемаяДоверенность <> Неопределено
						И Результат.ОписаниеДанных.ВыбраннаяДоверенность = МашиночитаемаяДоверенность Тогда
						
						УдаляемыеЭлементы.Добавить(ОписаниеДанных);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ОписаниеДанных Из УдаляемыеЭлементы Цикл
		НаборДанных.Удалить(НаборДанных.Найти(ОписаниеДанных));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НаборДанных) Тогда
		Результат.ОписаниеДанных.Вставить("ПрекратитьВыполнение");
		Состояние(НСтр("ru = 'Подпись уже установлена';
						|en = 'Подпись уже установлена'"));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Результат.Оповещение, Результат.ОписаниеДанных);
	
КонецПроцедуры

Процедура ПослеПодписанияФайловСертификатом(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Успех Тогда
		
		Сертификат = Результат.ВыбранныйСертификат.Ссылка;
		Результат.ПередВыполнением = Неопределено;
		КадровыйЭДОВызовСервера.ПослеПодписанияФайловСертификатом(Результат);
		Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
			
			ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
			ДополнительныеПараметрыОповещениеЗавершения = ОповещениеЗавершения.ДополнительныеПараметры;
			Если ДополнительныеПараметрыОповещениеЗавершения <> Неопределено
				И ДополнительныеПараметрыОповещениеЗавершения.Свойство("Форма") Тогда
				
				Если Не ДополнительныеПараметрыОповещениеЗавершения.Свойство("ОбновленныеФайлы") Тогда
					ДополнительныеПараметрыОповещениеЗавершения.Вставить("ОбновленныеФайлы", Новый Массив);
				КонецЕсли;
				
				ФайлыКОбработке = Новый Массив;
				
				Форма = ДополнительныеПараметрыОповещениеЗавершения.Форма;
				ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровФормы(Форма.Параметры);
				Если Результат.Свойство("НаборДанных") Тогда
					НаборДанных = Результат.НаборДанных;
				Иначе
					НаборДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
				КонецЕсли;
	
				Для Каждого ДанныеФайла Из НаборДанных Цикл
					
					Если ДанныеФайла.Свойство("ИсходнаяСтрока") И ЗначениеЗаполнено(ДанныеФайла.ИсходнаяСтрока.ФайлОбъекта) Тогда
						ФайлыКОбработке.Добавить(ДанныеФайла.ИсходнаяСтрока.ФайлОбъекта);
					ИначеЕсли ДанныеФайла.Свойство("Объект") И ЗначениеЗаполнено(ДанныеФайла.Объект) Тогда
						ФайлыКОбработке.Добавить(ДанныеФайла.Объект);
					Иначе
						Если Результат.Свойство("Данные") Тогда
							ДанныеФайла.ИсходнаяСтрока.Вставить("СвойстваПодписи", Результат.СвойстваПодписи);
						КонецЕсли;
					КонецЕсли;
					
					Если ОписанияФайлов <> Неопределено Тогда
						ОписаниеОригиналовИдентификатора = ОписанияФайлов.ОригиналыПечатныхФорм.Получить(
							ДанныеФайла.ИсходнаяСтрока.ИдентификаторПечатнойФормы);
						
						Если ОписаниеОригиналовИдентификатора <> Неопределено Тогда
							
							Оригиналы = ОписаниеОригиналовИдентификатора.Оригиналы;
							
							ИсходнаяСтрока = Оригиналы.Получить(ДанныеФайла.ИсходнаяСтрока.ФайлОбъекта);
							Если ИсходнаяСтрока <> Неопределено Тогда
								
								КадровыйЭДОКлиентСервер.ДобавитьДанныеПодписи(
									ИсходнаяСтрока.УстановленныеПодписи,
									Сертификат,
									Результат);
								
								ДополнительныеПараметрыОповещениеЗавершения.ОбновленныеФайлы.Добавить(ИсходнаяСтрока);
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ОповещениеЗавершения = Неопределено;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПослеПодписанияСохраненныхФорм(РезультатПодписания, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодписания <> Неопределено Тогда
		
		РезультатПодписанияФайлов = ДополнительныеПараметры.ПечатныеФормыОбъектов;
		
		ФормаПечатьДокументов = ДополнительныеПараметры.Форма;
		Если ДополнительныеПараметры.ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Подписать") Тогда
			
			Если ФормаПечатьДокументов.Открыта() Тогда
				ФормаПечатьДокументов.Закрыть();
			КонецЕсли;
			
		Иначе
			
			ОбрабатываемыеФайлы = Новый Массив;
			ВладельцыФайлов = Новый Соответствие;
			
			Если ДополнительныеПараметры.Свойство("ДанныеФайловНаПодпись") Тогда
				ДанныеФайловНаПодпись = ДополнительныеПараметры.ДанныеФайловНаПодпись;
			Иначе
				ДанныеФайловНаПодпись = Новый Соответствие;
			КонецЕсли;
			
			Для Каждого ОписаниеФайла Из РезультатПодписанияФайлов Цикл
				
				ФайлыНаПодписьОрганизации = ДанныеФайловНаПодпись.Получить(ОписаниеФайла.Организация);
				Если ФайлыНаПодписьОрганизации = Неопределено
					Или ФайлыНаПодписьОрганизации.Найти(ОписаниеФайла) = Неопределено Тогда
					
					Если ЗначениеЗаполнено(ОписаниеФайла.ФайлОбъекта) Тогда
						ОбрабатываемыеФайлы.Добавить(ОписаниеФайла.ФайлОбъекта);
					Иначе
						ОписаниеФайлаПодписанногоФайла = Новый Структура;
						ОписаниеФайлаПодписанногоФайла.Вставить("ПечатнаяФорма", ОписаниеФайла.ПечатнаяФорма);
						ОписаниеФайлаПодписанногоФайла.Вставить("СвойстваПодписи", ОписаниеФайла.СвойстваПодписи);
						ОписаниеФайлаПодписанногоФайла.Вставить("ИдентификаторПечатнойФормы", ОписаниеФайла.ИдентификаторПечатнойФормы);
						ОписаниеФайлаПодписанногоФайла.Вставить("ИмяФайла", ОписаниеФайла.ИмяФайла);
						ОписаниеФайлаПодписанногоФайла.Вставить("Название", ОписаниеФайла.Название);
						ОписаниеФайлаПодписанногоФайла.Вставить("АдресВХранилище", ОписаниеФайла.АдресВХранилище);
						ОписаниеФайлаПодписанногоФайла.Вставить("ФизическоеЛицо", ОписаниеФайла.ФизическоеЛицо);
						ОбрабатываемыеФайлы.Добавить(ОписаниеФайлаПодписанногоФайла);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОписаниеФайла.Владелец) И ТипЗнч(ОписаниеФайла.Владелец) <> Тип("Строка") Тогда
					
					ИдентификаторыВладельца = ВладельцыФайлов.Получить(ОписаниеФайла.Владелец);
					Если ИдентификаторыВладельца = Неопределено Тогда
						ИдентификаторыВладельца = Новый Соответствие;
						ВладельцыФайлов.Вставить(ОписаниеФайла.Владелец, ИдентификаторыВладельца);
					КонецЕсли;
					
					ИдентификаторыВладельца.Вставить(ОписаниеФайла.ИдентификаторПечатнойФормы, Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ДанныеВладельца Из ВладельцыФайлов Цикл
				ОповеститьОбИзмененииПечатнойФормы(ДанныеВладельца.Ключ, ДанныеВладельца.Значение);
			КонецЦикла;
			
			Если ОбрабатываемыеФайлы.Количество() > 0 Тогда
				
				Если ДополнительныеПараметры.ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ЗаписатьНаДиск") Тогда
					
					СохранитьПечатныеФормыНаДиск(ОбрабатываемыеФайлы);
					
				ИначеЕсли ДополнительныеПараметры.ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ОтправитьПоПочте") Тогда
					
					ПараметрыОтправки = ФормаПечатьДокументов.ПараметрыВывода.ПараметрыОтправки;
					
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("Получатели", ПараметрыОтправки.Получатель);
					ПараметрыОткрытияФормы.Вставить("Тема", ПараметрыОтправки.Тема);
					ПараметрыОткрытияФормы.Вставить("Текст", ПараметрыОтправки.Текст);
					ПараметрыОткрытияФормы.Вставить("СписокФайлов", ОбрабатываемыеФайлы);
					
					ОтправитьПечатныеФормыПоЭлектроннойПочте(ФормаПечатьДокументов, ПараметрыОткрытияФормы);
					
				ИначеЕсли ДополнительныеПараметры.ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьНаРаботаВРоссии") Тогда
					
					ИнтеграцияСРаботаВРоссииКлиент.ПередатьДокументы(ОбрабатываемыеФайлы);
					
				ИначеЕсли ДополнительныеПараметры.ЦельПодписания = ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников") Тогда
					
					КадровыйЭДОВызовСервера.ЗапланироватьДействияСПечатнымиФормами(ОбрабатываемыеФайлы, ДополнительныеПараметры.ЦельПодписания);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительныеПараметры.Свойство("ОбновленныеФайлы") Тогда
				ОбновленныеФайлы = ДополнительныеПараметры.ОбновленныеФайлы;
			Иначе
				ОбновленныеФайлы = Новый Массив;
			КонецЕсли;
			
			Если ДанныеФайловНаПодпись.Количество() > 0 Тогда
				Для Каждого ФайлыНаПодписьОрганизации Из ДанныеФайловНаПодпись Цикл
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбновленныеФайлы, ФайлыНаПодписьОрганизации.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПоказатьСостояниеОтправленныхНаПодпись(ДополнительныеПараметры);
			
			Если ОбновленныеФайлы.Количество() > 0 Тогда
				КадровыйЭДОВызовСервера.ЗаменитьПечатныеФормы(
					ОбновленныеФайлы, ДополнительныеПараметры.ПечатныеФормы, ДополнительныеПараметры.ОбъектыПечати);
			КонецЕсли;
			
			Для Каждого ОписаниеПечатнойФормы Из ДополнительныеПараметры.ПечатныеФормы Цикл
				
				НайденныеФормы = ФормаПечатьДокументов.НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("ИмяМакета", ОписаниеПечатнойФормы.ИдентификаторПечатнойФормы));
				Если НайденныеФормы.Количество() > 0 Тогда
					ФормаПечатьДокументов[НайденныеФормы[0].ИмяРеквизита] = ОписаниеПечатнойФормы.ПечатнаяФорма;
				КонецЕсли;
				
			КонецЦикла;
			
			ФормаПечатьДокументов.ПодключитьОбработчикОжидания("УстановитьТекущуюСтраницу", 0.1, Истина);
			
			ТекущаяНастройка = УправлениеПечатьюКлиент.НастройкаТекущейПечатнойФормы(ФормаПечатьДокументов);
			Если ТекущаяНастройка <> Неопределено Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					ФормаПечатьДокументов.Элементы,
					"КнопкаРедактирование",
					"Пометка",
					Ложь);
				
				ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
					ФормаПечатьДокументов.Элементы,
					"КнопкаРедактирование",
					"Доступность",
					Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОповеститьОбОбновленииДанныхДокументовКЭДО();
		КадровыйЭДОВызовСервера.ОбновитьУведомленияВФоне();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеНаНосители

Процедура СохранитьПечатныеФормыНаДиск(СписокФайлов, ОповещениеЗавершения = Неопределено) Экспорт
	
	СохранитьФайлыНаДиск(
		КадровыйЭДОВызовСервера.ФайлыПечатныхФормДляСохраненияНаДиск(СписокФайлов), ОповещениеЗавершения);
	
КонецПроцедуры

Процедура СохранитьДокументыКЭДОНаДиск(ДокументыКЭДО, ОповещениеЗавершения = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Подготовка файлов к записи на диск';
					|en = 'Prepare files to save to hard drive'"));
	
	Если ЗначениеЗаполнено(ДокументыКЭДО) Тогда
		
		ФайлыЭлектронныхДокументов = КадровыйЭДОВызовСервера.ФайлыЭлектронныхДокументовДляСохраненияНаДиск(ДокументыКЭДО);
		Если Не ЗначениеЗаполнено(ФайлыЭлектронныхДокументов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не задан электронный документ';
					|en = 'An electronic document is not specified'"), ДокументыКЭДО[0], "ИмяФайлаСРасширением", "");
			Возврат;
		КонецЕсли;
		
		СохранитьФайлыНаДиск(ФайлыЭлектронныхДокументов, ОповещениеЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьМЧДНаДиск(СписокМЧД, ОповещениеЗавершения = Неопределено) Экспорт
	
	Состояние(НСтр("ru = 'Подготовка файлов к записи на диск';
					|en = 'Prepare files to save to hard drive'"));
	
	СохранитьФайлыНаДиск(
		КадровыйЭДОВызовСервера.ФайлыМЧДДляСохранениеНаДиск(СписокМЧД), ОповещениеЗавершения);
	
КонецПроцедуры

Процедура СохранитьФайлыНаДиск(СохраняемыеФайлы, ОповещениеЗавершения)
	
	Если ОповещениеЗавершения = Неопределено Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеСохраненияФайловЭлектронныхДокументовНаДиск", ЭтотОбъект);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	ДополнительныеПараметры.Вставить("СохраняемыеФайлы", СохраняемыеФайлы);
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораКаталогаДляСохранениеФайлов", ЭтотОбъект, ДополнительныеПараметры);
	ФайловаяСистемаКлиент.ВыбратьКаталог(Оповещение);
	
КонецПроцедуры

Процедура ОбработкаВыбораКаталогаДляСохранениеФайлов(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранныйКаталог) Тогда
		
		ИменаФайлов = Новый Соответствие;
		ФайлыВПапке = НайтиФайлы(ВыбранныйКаталог, "*.*", Истина);
		Для Каждого НайденныйФайл Из ФайлыВПапке Цикл
			ИменаФайлов.Вставить(СтрЗаменить(Врег(НайденныйФайл.ПолноеИмя), ВРег(ВыбранныйКаталог) + ПолучитьРазделительПути(), "") , Истина);
		КонецЦикла;
		
		Для Каждого СохраняемыйФайл Из ДополнительныеПараметры.СохраняемыеФайлы Цикл
			Если ИменаФайлов.Получить(ВРег(СохраняемыйФайл.Имя)) = Истина Тогда
				СохраняемыйФайл.Имя = КадровыйЭДОКлиентСервер.УникальноеИмяФайлаСРасширением(
					СохраняемыйФайл.Имя, ИменаФайлов);
			КонецЕсли;
			ИменаФайлов.Вставить(ВРег(СохраняемыйФайл.Имя), Истина);
			СохраняемыйФайл.Имя = ВыбранныйКаталог + ПолучитьРазделительПути() + СохраняемыйФайл.Имя;
		КонецЦикла;
		
		ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ПараметрыСохранения.Интерактивно = Ложь;
		ФайловаяСистемаКлиент.СохранитьФайлы(
			ДополнительныеПараметры.ОповещениеЗавершения, ДополнительныеПараметры.СохраняемыеФайлы, ПараметрыСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеСохраненияФайловЭлектронныхДокументовНаДиск(СохраненныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если СохраненныеФайлы <> Неопределено Тогда
		
		Если СохраненныеФайлы.Количество() = 1 Тогда
			ТекстСообщения = НСтр("ru = 'Записан на диск:';
									|en = 'Saved to disk:'");
			Пояснение = СохраненныеФайлы[0].Имя;
		Иначе
			ТекстСообщения = НСтр("ru = 'Записано на диск';
									|en = 'Saved to disk'");
			Пояснение = СтрокаСЧислом(
				НСтр("ru = ';%1 файл; ;%1 файла;%1 файлов;%1 файлов';
					|en = ';%1 file;;;;%1 files $$$remove it%1%1$$$'"),
				СохраненныеФайлы.Количество(),
				ВидЧисловогоЗначения.Количественное);
		КонецЕсли;
		
		Состояние(ТекстСообщения, , Пояснение);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаНаЭлАдрес

Процедура ОтправитьПечатныеФормыПоЭлектроннойПочте(ВладелецФормы, ПараметрыОткрытияФормы)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
	ДополнительныеПараметры.Вставить("ВладелецФормы", ВладелецФормы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьПечатныеФормыПоЭлектроннойПочтеНастройкаУчетнойЗаписиПредложена", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		МодульРаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПечатныеФормыПоЭлектроннойПочтеНастройкаУчетнойЗаписиПредложена(УчетнаяЗаписьНастроена, ДополнительныеПараметры) Экспорт
	
	Если УчетнаяЗаписьНастроена <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	Иначе
		ОповещениеЗавершения = Неопределено;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаПодписанныхФайлов",
		ДополнительныеПараметры.ПараметрыОткрытияФормы,
		ДополнительныеПараметры.ВладелецФормы,
		Истина, , , ОповещениеЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

Процедура ОповеститьОбОбновленииДанныхДокументовКЭДО(Источник = Неопределено) Экспорт
	
	Оповестить("ОбновленыДанныеДокументовКЭДО", , Источник);
	
КонецПроцедуры

Процедура НаправитьНаПодпись(ДанныеФайловНаПодпись, Действие, ИсполнителиОрганизаций) Экспорт
	
	Для Каждого ОписаниеДанных Из ДанныеФайловНаПодпись Цикл
		
		Организация = ОписаниеДанных.Ключ;
		Исполнители = ИсполнителиОрганизаций.Получить(Организация);
		
		ДанныеФайлов = Новый Массив;
		Для Каждого ОписаниеФайла Из ОписаниеДанных.Значение Цикл
			ДанныеФайлов.Добавить(ОписаниеФайла.ФайлОбъекта)
		КонецЦикла;
		
		КадровыйЭДОВызовСервера.НаправитьНаПодпись(ДанныеФайлов, Действие, Исполнители);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСертификатыПодписей(КомандаПечати)
	
	ПодписиБезСертификатов = КадровыйЭДОВызовСервера.ПодписиБезСертификатов(КомандаПечати.ОбъектыПечати, КомандаПечати.Идентификатор);
	Если ЗначениеЗаполнено(ПодписиБезСертификатов) Тогда
		ДополнительныеПараметры = Новый Структура("КомандаПечати", КомандаПечати);
		ДополнительныеПараметры.Вставить("ПодписиБезСертификатов", ПодписиБезСертификатов);
		Оповещение = Новый ОписаниеОповещения("ПолучитьСведенияОСертификатеПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(Оповещение, "ПолучениеСертификатов");
		Возврат;
	КонецЕсли;
	
	УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати(КомандаПечати);
	
КонецПроцедуры

#Область ПолучениеДанныхСертификатаИзПодписи

Функция ДанныеСертификатаПодписи(МенеджерКриптографии, ДвоичныеДанныеПодписи) Экспорт
	
	ДанныеСертификата = Новый Структура("Сертификат,Отпечаток,АдресСертификата");
	Попытка
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
		Если Сертификаты.Количество() > 0 Тогда
			
			ДанныеСертификата.Сертификат = Сертификаты[Сертификаты.Количество() - 1];
			ДанныеСертификата.Отпечаток = Base64Строка(ДанныеСертификата.Сертификат.Отпечаток);
			ДанныеСертификата.АдресСертификата = ПоместитьВоВременноеХранилище(
				ДанныеСертификата.Сертификат.Выгрузить(), Новый УникальныйИдентификатор);
			
		КонецЕсли;
	Исключение
		Ошибка = ИнформацияОбОшибке();
	КонецПопытки;
	
	Возврат ДанныеСертификата;
	
КонецФункции

Процедура НачатьПолучениеДанныхСертификатаПодписи(МенеджерКриптографии, ДвоичныеДанныеПодписи, ОповещениеЗавершения) Экспорт
	
	Попытка
		ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
		Оповещение = Новый ОписаниеОповещения("ДанныеСертификатаПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерКриптографии.НачатьПолучениеСертификатовИзПодписи(Оповещение, ДвоичныеДанныеПодписи);
	Исключение
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Неопределено);
	КонецПопытки;
	
КонецПроцедуры

Процедура ДанныеСертификатаПодписиЗавершение(Сертификаты, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Сертификаты) Тогда
		
		ДанныеСертификата = Новый Структура("Сертификат,Отпечаток,АдресСертификата");
		ДанныеСертификата.Сертификат = Сертификаты[Сертификаты.Количество() - 1];
		ДанныеСертификата.Отпечаток = Base64Строка(ДанныеСертификата.Сертификат.Отпечаток);
		
		ДополнительныеПараметры.Вставить("ДанныеСертификата", ДанныеСертификата);
		Оповещение = Новый ОписаниеОповещения("ПоОкончанииВыгрузкиСертификата", ЭтотОбъект, ДополнительныеПараметры);
		ДанныеСертификата.Сертификат.НачатьВыгрузку(Оповещение);
		
		Возврат;
		
	Иначе
		ДанныеСертификата = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДанныеСертификата);
	
КонецПроцедуры

Процедура ПоОкончанииВыгрузкиСертификата(ДвоичныеДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДвоичныеДанныеСертификата <> Неопределено Тогда
		
		ДанныеСертификата = ДополнительныеПараметры.ДанныеСертификата;
		ДанныеСертификата.АдресСертификата = ПоместитьВоВременноеХранилище(
			ДвоичныеДанныеСертификата, Новый УникальныйИдентификатор);
		
	Иначе
		ДанныеСертификата = Неопределено;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, ДанныеСертификата);
	
КонецПроцедуры

#КонецОбласти

Процедура ПолучитьСведенияОСертификатеПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("Строка") Тогда
		
		ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", 0);
		
		ИтерацияПолученияДанныхСертификатаБезПодписи(ДополнительныеПараметры);
		
	Иначе
		УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати(ДополнительныеПараметры.КомандаПечати);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИтерацияПолученияДанныхСертификатаБезПодписи(ДополнительныеПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеСертификатаОчереднойПодписи", ЭтотОбъект, ДополнительныеПараметры);
	
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(
		ДополнительныеПараметры.ПодписиБезСертификатов[ДополнительныеПараметры.ИндексТекущейПодписи].Подпись);
	
	Если ТипЗнч(ДвоичныеДанныеПодписи) = Тип("ДвоичныеДанные") Тогда
		НачатьПолучениеДанныхСертификатаПодписи(
			ДополнительныеПараметры.МенеджерКриптографии,
			ДвоичныеДанныеПодписи,
			Оповещение);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДанныеСертификатаОчереднойПодписи(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ДанныеСертификата <> Неопределено Тогда
		ПодписьБезСертификата = ДополнительныеПараметры.ПодписиБезСертификатов[ДополнительныеПараметры.ИндексТекущейПодписи];
		ПодписьБезСертификата.Отпечаток = ДанныеСертификата.Отпечаток;
		ПодписьБезСертификата.Сертификат = ДанныеСертификата.АдресСертификата;
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	Если ДополнительныеПараметры.ИндексТекущейПодписи < ДополнительныеПараметры.ПодписиБезСертификатов.Количество() Тогда
		ИтерацияПолученияДанныхСертификатаБезПодписи(ДополнительныеПараметры);
	Иначе
		
		ДополнительныеПараметрыКоманды = Новый Структура;
		Если ДополнительныеПараметры.КомандаПечати.Свойство("ДополнительныеПараметры") Тогда
			ДополнительныеПараметрыКоманды = ДополнительныеПараметры.КомандаПечати.ДополнительныеПараметры;
		КонецЕсли;
		
		ДополнительныеПараметрыКоманды.Вставить("ПодписиБезСертификатов", ДополнительныеПараметры.ПодписиБезСертификатов);
		ДополнительныеПараметры.КомандаПечати.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыКоманды);
		
		УправлениеПечатьюБЗККлиент.ВыполнитьКомандуПечати(ДополнительныеПараметры.КомандаПечати);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДействияСообщения(Сообщение, Действие, ДополнительныеПараметры) Экспорт
	
	Если Действие = КадровыйЭДОКлиентСервер.ИмяДействияУведомленияОзнакомитьсяИПодписать() Тогда
		ПараметрыОткрытия = Новый Структура("ДокументыНаПодпись", Истина);
		ОткрытьФорму("Документ.ДокументКадровогоЭДО.ФормаСписка", ПараметрыОткрытия, , "f6aa6282-3adc-413c-a92a-bb0fbfa5313c");
	ИначеЕсли Действие = КадровыйЭДОКлиентСервер.ИмяДействияУведомленияОзнакомитьсяСОтказомПодписать() Тогда
		ПараметрыОткрытия = Новый Структура("Отбор",
			Новый Структура("ЕстьЗапланированныеДействияТекущегоИсполнителя", Истина));
		ОткрытьФорму("Документ.ДокументКадровогоЭДО.ФормаСписка", ПараметрыОткрытия, , "48bd2282-a817-4403-b2cf-ada0147db374");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьРедактированиеПечатнойФормы(УправляемаяФорма)
	
	Элементы = УправляемаяФорма.Элементы;
	
	НастройкаПечатнойФормы = УправлениеПечатьюКлиент.НастройкаТекущейПечатнойФормы(УправляемаяФорма);
	Если НастройкаПечатнойФормы <> Неопределено Тогда
		
		Редактирование = Не Элементы[КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования() + "КомандаРедактирования"].Пометка;
		
		ПолеТабличногоДокумента = Элементы[НастройкаПечатнойФормы.ИмяРеквизита];
		ПолеТабличногоДокумента.Редактирование = Редактирование;
		Элементы.ТекущаяПечатнаяФорма.Редактирование = ПолеТабличногоДокумента.Редактирование;
		Элементы.ТекущаяПечатнаяФорма.ОтображатьСетку = Элементы.ТекущаяПечатнаяФорма.Редактирование;
		Элементы.ТекущаяПечатнаяФорма.ОтображатьЗаголовки = Элементы.ТекущаяПечатнаяФорма.Редактирование;
		
		ПечатнаяФормаДоступна = Элементы.Страницы.ТекущаяСтраница <> Элементы.СтраницаПечатнаяФормаНедоступна;
		РедактированиеВозможно = ПечатнаяФормаДоступна И Не ПолеТабличногоДокумента.Защита;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования() + "КомандаРедактирования",
			"Пометка",
			Редактирование);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			КадровыйЭДОКлиентСервер.ПрефиксЭлементовОВозможностиРедактирования() + "КомандаРедактирования",
			"Доступность",
			РедактированиеВозможно);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСобытияПриЗаписиПечатныхФорм()
	Возврат "ЗаписьПечатныхФормСЭЦП";
КонецФункции

Процедура ОповеститьОбИзмененииПечатнойФормы(Владелец, ДанныеИдентификаторовПечатныхФорм)
	
	ОповеститьОбИзменении(Владелец);
	Оповестить(ИмяСобытияПриЗаписиПечатныхФорм(), ДанныеИдентификаторовПечатныхФорм, Владелец);
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокументПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено И Результат = "Продолжить" Тогда
		ОткрытьЭлектронныйДокумент(ДополнительныеПараметры.ЭлектронныйДокумент,
			ДополнительныеПараметры.Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьЭлектронныйДокумент(ЭлектронныйДокумент, ИдентификаторХранилища)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(
		ЭлектронныйДокумент, Неопределено, ИдентификаторХранилища);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

Функция ФайлыДокументовКЭДОФормыПечатьДокументов(УправляемаяФорма)
	
	ФайлыДокументовКЭДО = Новый Массив;
	
	ОписанияФайлов = КадровыйЭДОКлиентСервер.ОписанияФайловПечатныхФормИзПараметровФормы(УправляемаяФорма.Параметры);
	Если ОписанияФайлов <> Неопределено Тогда
		Для Каждого ОписаниеИдентификатора Из ОписанияФайлов.ОригиналыПечатныхФорм Цикл
			Для Каждого ОписаниеОригиналов Из ОписаниеИдентификатора.Значение.Оригиналы Цикл
				ФайлыДокументовКЭДО.Добавить(ОписаниеОригиналов.Ключ);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ФайлыДокументовКЭДО;
	
КонецФункции

Процедура ОзнакомитьсяСКомментариямиКПечатнойФорме(УправляемаяФорма)
	
	КадровыйЭДОВызовСервера.УдалитьФайлыИзОбработкиПользователя(
		ФайлыДокументовКЭДОФормыПечатьДокументов(УправляемаяФорма),
		ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.Ознакомиться"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		УправляемаяФорма.Элементы,
		"ОзнакомленоСКомментариямиКПечатнойФорме",
		"Доступность",
		Ложь);
	
КонецПроцедуры

#Область КонвертацияДокументов

Процедура ОбработкаОтветаНаВопросОКонвертацииДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьКонвертациюДокументов(ДополнительныеПараметры.ДокументыКадровогоЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонвертациюДокументов(ДокументыКадровогоЭДО)
	
	Результат = КадровыйЭДОВызовСервера.КонвертироватьДокументы(ДокументыКадровогоЭДО);
	Если Не ЗначениеЗаполнено(Результат.ДокументыСПечатнымиФормами) Тогда
		ТекстПредупреждения = НСтр("ru = 'Не найдено электронных документов печатных форм';
									|en = 'No electronic documents of print forms are found'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		ПоказатьПротоколКонвертацииДокументов(Результат);
		Возврат;
	КонецЕсли;
	
	ТекстыСообщения = Новый Массив;
	Если Результат.ЕстьОшибки Тогда
		ТекстыСообщения.Добавить(НСтр("ru = 'Среди выбранных документов есть документы с ошибками.';
										|en = 'Some of the selected documents contain errors.'"));
	КонецЕсли;
	
	Если Результат.ЕстьДругиеДокументы Тогда
		ТекстыСообщения.Добавить(НСтр("ru = 'Среди выбранных документов есть документы не являющиеся печатными формами.';
										|en = 'Some of the selected documents are not print forms.'"));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Результат", Результат);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьКонвертациюДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Если ТекстыСообщения.Количество() > 0
		Или Результат.ДокументыНеТребующиеКонвертации.Количество() > 0
		Или Результат.ДокументыПрошлыхПериодов.Количество() > 0 Тогда
		
		ДокументыСПечатнымиФормамиКоличество = СтрокаСЧислом(
			НСтр("ru = ';%1 электронный документ печатной формы;;%1 электронных документа печатных форм;%1 электронных документов печатных форм;%1 электронных документа печатных форм';
				|en = ';%1 electronic document of a print form;;;;%1 electronic documents of print forms'"),
			Результат.ДокументыСПечатнымиФормами.Количество(),
			ВидЧисловогоЗначения.Количественное);
		Если Результат.ДокументыНеТребующиеКонвертации.Количество() > 0
			Или Результат.ДокументыПрошлыхПериодов.Количество() > 0 Тогда
			
			ТекстыЭтогоСообщения = Новый Массив;
			ТекстыЭтогоСообщения.Добавить(
				СтрШаблон(НСтр("ru = 'Можно сконвертировать %1, в том числе:';
								|en = 'You can convert %1, including:'"),
					ДокументыСПечатнымиФормамиКоличество));
			Если Результат.ДокументыНеТребующиеКонвертации.Количество() Тогда
				ДокументыНеТребующиеКонвертацииКоличество = СтрокаСЧислом(
					НСтр("ru = ';%1 электронный документ возможно не требует;;%1 электронных документа возможно не требуют;%1 электронных документов возможно не требуют;%1 электронных документа возможно не требуют';
						|en = ';%1 electronic document might not require;;;;%1 electronic documents might not require'"),
					Результат.ДокументыНеТребующиеКонвертации.Количество(),
					ВидЧисловогоЗначения.Количественное);
				ТекстСообщенияОКоличестве = СтрШаблон(НСтр("ru = '- %1 конвертации';
															|en = '- %1 conversion'"), ДокументыНеТребующиеКонвертацииКоличество);
				Если Результат.ДокументыПрошлыхПериодов.Количество() > 0 Тогда
					ТекстСообщенияОКоличестве = ТекстСообщенияОКоличестве + ";";
				Иначе
					ТекстСообщенияОКоличестве = ТекстСообщенияОКоличестве + ".";
				КонецЕсли;
				ТекстыЭтогоСообщения.Добавить(ТекстСообщенияОКоличестве);
			КонецЕсли;
			Если Результат.ДокументыПрошлыхПериодов.Количество() > 0 Тогда
				ДокументыПрошлыхПериодовКоличество = СтрокаСЧислом(
					НСтр("ru = ';%1 электронный документ;;%1 электронных документа;%1 электронных документов;%1 электронных документа';
						|en = ';%1 electronic document;;;;%1 electronic documents'"),
					Результат.ДокументыПрошлыхПериодов.Количество(),
					ВидЧисловогоЗначения.Количественное);
				ТекстыЭтогоСообщения.Добавить(СтрШаблон(НСтр("ru = '- %1 из периода, когда не требовалось применение формата PDF/A-1A.';
															|en = '- %1 from the period when it was not required to use the PDF/A-1A format.'"), ДокументыПрошлыхПериодовКоличество));
			КонецЕсли;
			ТекстыСообщения.Добавить(СтрСоединить(ТекстыЭтогоСообщения, Символы.ПС));
			
		Иначе
			ТекстыСообщения.Добавить(СтрШаблон(НСтр("ru = 'Можно сконвертировать %1.';
													|en = 'You can convert %1.'"), ДокументыСПечатнымиФормамиКоличество));
		КонецЕсли;
		ТекстыСообщения.Добавить(НСтр("ru = 'Продолжить?';
										|en = 'Continue?'"));
		ПоказатьВопрос(Оповещение, СтрСоединить(ТекстыСообщения, Символы.ПС), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонвертациюДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодписанияФайловПриКонвертацииДокументов", ЭтотОбъект, ДополнительныеПараметры);
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КадровыйЭДОВызовСервера.УдалитьПодписиИОбновитьОсновныеДокументыПриКонвертацииДокументов(
			ДополнительныеПараметры.Результат);
		
		ПодписатьФайлы(
			КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(ДополнительныеПараметры.Результат.ЭлектронныеДокументыНаПодпись, Новый УникальныйИдентификатор),
			Оповещение, ЭтотОбъект, ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
		
	Иначе
		ПоказатьПротоколКонвертацииДокументов(ДополнительныеПараметры.Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПодписанияФайловПриКонвертацииДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	КадровыйЭДОВызовСервера.ЗапланироватьДействияСПечатнымиФормами(ДополнительныеПараметры.Результат.ЭлектронныеДокументы,
		ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
	
	ПоказатьПротоколКонвертацииДокументов(ДополнительныеПараметры.Результат);
	
КонецПроцедуры

Процедура ПоказатьПротоколКонвертацииДокументов(Результат)
	Если Результат.Протокол.КоличествоСтрок() > 0 Тогда
		Результат.Протокол.Показать(
			НСтр("ru = 'Протокол конвертации электронных документов печатных форм в формат PDF/A-1A';
				|en = 'Protocol of converting electronic documents of print forms into PDF/A-1A'"), НСтр("ru = 'Протокол конвертации.txt';
																											|en = 'Conversion protocol.txt'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПослеОбновленияСостояний(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ДокументКадровогоЭДО"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейЭлектронныхДокументов

Процедура ОбработкаОтветаНаВопросОПроверкеПодписей(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Состояние(НСтр("ru = 'Получаю сведения';
						|en = 'Receiving information'"), , НСтр("ru = 'о непроверенных подписях';
															|en = 'on unverified signatures'"));
		ДанныеДляПроверкиПодписей = КадровыйЭДОВызовСервера.ДанныеДляПроверкиНепроверенныхПодписей(
			ДополнительныеПараметры.ДокументыКадровогоЭДО,
			ДополнительныеПараметры.ДополнительныеПараметры.Форма.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(ДанныеДляПроверкиПодписей) Тогда
			НачатьПроверкуПодписей(ДанныеДляПроверкиПодписей, 0);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Непроверенных подписей не найдено';
										|en = 'Unverified signatures are not found'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьПроверкуПодписей(ДанныеДляПроверкиПодписей, Индекс) Экспорт
	
	Если Индекс >= ДанныеДляПроверкиПодписей.Количество() Тогда
		ДокументыКЭДО = Новый Массив;
		Для Каждого ДанныеЭлектронногоДокумента Из ДанныеДляПроверкиПодписей Цикл
			ДокументыКЭДО.Добавить(ДанныеЭлектронногоДокумента.ДокументКЭДО);
		КонецЦикла;
		КадровыйЭДОВызовСервера.ПроверитьГотовностьДокументовДляАрхивирования(ДокументыКЭДО);
		ОповеститьОНеобходимостиОбновленияФорм(ДокументыКЭДО);
		Если ДанныеДляПроверкиПодписей.Количество() > 1 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Проверка подписей завершена';
											|en = 'Signatures are checked.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеЭлектронногоДокумента = ДанныеДляПроверкиПодписей[Индекс];

	ВыводитьСообщения = ДанныеДляПроверкиПодписей.Количество() < 10;
	Если ВыводитьСообщения Тогда
		Состояние(НСтр("ru = 'Проверка подписей';
						|en = 'Check signatures'"), , Строка(ДанныеЭлектронногоДокумента.ДокументКЭДО));
	Иначе
		Состояние(НСтр("ru = 'Проверка подписей';
						|en = 'Check signatures'"), Цел(Индекс / ДанныеДляПроверкиПодписей.Количество() * 100), Строка(ДанныеЭлектронногоДокумента.ДокументКЭДО));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДляПроверкиПодписей", ДанныеДляПроверкиПодписей);
	ДополнительныеПараметры.Вставить("Индекс", Индекс);
	ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", ДанныеЭлектронногоДокумента.СсылкаНаДвоичныеДанныеФайла);
	ДополнительныеПараметры.Вставить("ПодписиИБ", ДанныеЭлектронногоДокумента.ПодписиИБ);
	ДополнительныеПараметры.Вставить("ПодписиСервиса", ДанныеЭлектронногоДокумента.ПодписиСервиса);
	
	Если ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ПодписиИБ) Тогда
		ПроверитьПодписиИБ(ДополнительныеПараметры.СсылкаНаДвоичныеДанные, ДополнительныеПараметры);
	ИначеЕсли ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ПодписиСервиса) Тогда
		ПроверитьПодписиСервиса(ДанныеЭлектронногоДокумента.ПодписиСервиса,
			ДополнительныеПараметры.СсылкаНаДвоичныеДанные, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиПодписи(Результат, ДополнительныеПараметры)
	
	ДанныеСтроки = ДополнительныеПараметры.ПодписиИБ[ДополнительныеПараметры.ИндексТекущейПодписи];
	Статус = НСтр("ru = 'Верна';
					|en = 'Valid'");
	ОписаниеОшибки = "";
	Если Результат = Истина Тогда
		ДанныеСтроки.ПодписьВерна = Истина;
	Иначе
		ДанныеСтроки.ПодписьВерна = Ложь;
		Статус = НСтр("ru = 'Не верна';
						|en = 'Invalid'");
		Для НомерСтроки = 0 по СтрЧислоСтрок(Результат) - 1 Цикл
			ОписаниеОшибки = СтрПолучитьСтроку(Результат, СтрЧислоСтрок(Результат) - НомерСтроки);
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДанныеСтроки.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "Статус") Тогда
		ДанныеСтроки.Статус = Статус;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "ОписаниеОшибки") Тогда
		ДанныеСтроки.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	Если ДанныеСтроки.ПодписьВерна Тогда
		ПодписанныйОбъект = ДополнительныеПараметры.ДанныеДляПроверкиПодписей[ДополнительныеПараметры.Индекс].ЭлектронныйДокумент;
		КадровыйЭДОВызовСервера.ОбновитьРезультатПроверкиПодписи(
			ПодписанныйОбъект, ДанныеСтроки.ПорядковыйНомер, ДанныеСтроки.ДатаПроверкиПодписи, ДанныеСтроки.ПодписьВерна);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеПроверкиПодписей(Результат, ДополнительныеПараметры) Экспорт
	
	НачатьПроверкуПодписей(ДополнительныеПараметры.ДанныеДляПроверкиПодписей, ДополнительныеПараметры.Индекс + 1);
	
КонецПроцедуры

#Область ПроверкаПодписейИБЭлектронныхДокументов

Процедура ПроверитьПодписиИБ(СсылкаНаДвоичныеДанные, ДополнительныеПараметры)
	
	Если Не ДополнительныеПараметры.Свойство("ИндексТекущейПодписи") Тогда
		ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", 0);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПодписиИБ", ЭтотОбъект, ДополнительныеПараметры);
	ЭлектроннаяПодписьКлиент.ПроверитьПодпись(Оповещение, СсылкаНаДвоичныеДанные,
		ДополнительныеПараметры.ПодписиИБ[ДополнительныеПараметры.ИндексТекущейПодписи].АдресПодписи);
	
КонецПроцедуры

Процедура ПослеПроверкиПодписиИБ(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеПроверкиПодписи(Результат, ДополнительныеПараметры);
	
	ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	Если ИндексТекущейПодписи < ДополнительныеПараметры.ПодписиИБ.Количество() Тогда
		ДополнительныеПараметры.ИндексТекущейПодписи = ИндексТекущейПодписи;
		ПроверитьПодписиИБ(ДополнительныеПараметры.СсылкаНаДвоичныеДанные, ДополнительныеПараметры)
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.ПодписиСервиса) Тогда
		ПроверитьПодписиСервиса(ДополнительныеПараметры.ПодписиСервиса,
			ДополнительныеПараметры.СсылкаНаДвоичныеДанные, ДополнительныеПараметры);
	Иначе
		ПослеПроверкиПодписей(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаПодписейСервисаЭлектронныхДокументов

Процедура ПроверитьПодписиСервиса(ПодписиСервиса, СсылкаНаДвоичныеДанные, ДополнительныеПараметры)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ТехнологияСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиент");
		ИспользоватьЭлектроннуюПодписьВМоделиСервиса = МодульЭлектроннаяПодписьВМоделиСервисаКлиент.ИспользованиеВозможно();
	Иначе
		ИспользоватьЭлектроннуюПодписьВМоделиСервиса = Ложь;
	КонецЕсли;
	
	ИспользоватьОблачнуюПодпись = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		МодульСервисКриптографииDSSКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СервисКриптографииDSSКлиент");
		ИспользоватьОблачнуюПодпись = МодульСервисКриптографииDSSКлиент.ИспользоватьСервисОблачнойПодписи();
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ИспользоватьЭлектроннуюПодписьВМоделиСервиса
		Или ИспользоватьОблачнуюПодпись
		Или Не МодульЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		
		ДополнительныеПараметры.Вставить("ТаблицаПодписей", ПодписиСервиса);
		ДополнительныеПараметры.Вставить("СсылкаНаДвоичныеДанные", СсылкаНаДвоичныеДанные);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроверитьПодписиСервисаПослеСозданияМенеджера", ЭтотОбъект, ДополнительныеПараметры);
		
		ЭлектроннаяПодписьКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, "ПроверкаПодписи");
		
	Иначе
		
		ПодписиДляПроверки = Новый Массив;
		Для Каждого ПодписьСервиса Из ПодписиСервиса Цикл
			ДанныеПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
			ДанныеПодписи.Вставить("АдресПодписи" );
			ДанныеПодписи.Вставить("ОписаниеОшибки");
			ДанныеПодписи.Вставить("Статус");
			ЗаполнитьЗначенияСвойств(ДанныеПодписи, ПодписьСервиса);
			ПодписиДляПроверки.Добавить(ДанныеПодписи);
		КонецЦикла;
		
		КадровыйЭДОВызовСервера.ПроверитьПодписи(ПодписиДляПроверки, СсылкаНаДвоичныеДанные);
		Для Каждого ПровереннаяПодпись Из ПодписиДляПроверки Цикл
			Для Каждого ПодписьСервиса Из ПодписиСервиса Цикл
				Если ПровереннаяПодпись.АдресПодписи = ПодписьСервиса.АдресПодписи Тогда
					Для Каждого КлючПоля Из СтрРазделить("ПодписьВерна,ДатаПроверкиПодписи,ОписаниеОшибки,Статус", ",") Цикл
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПодписьСервиса, КлючПоля) Тогда
							ПодписьСервиса[КлючПоля] = ПровереннаяПодпись[КлючПоля];
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ПослеПроверкиПодписей(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПодписиСервисаПослеСозданияМенеджера(МенеджерКриптографии, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(МенеджерКриптографии) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, МенеджерКриптографии);
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПослеПроверкиПодписей", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	ДополнительныеПараметры.Вставить("ПеречитатьПодписи", Ложь);
	ДополнительныеПараметры.Вставить("ИндексТекущейПодписи", 0);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	НачатьПроверкуПодписи(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НачатьПроверкуПодписи(ДополнительныеПараметры)
	
	Попытка
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.СсылкаНаДвоичныеДанные);
		АдресПодписи = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи].АдресПодписи;
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
		
		Оповещение = Новый ОписаниеОповещения("НачатьПроверкуСертификата", ЭтотОбъект, ДополнительныеПараметры, "ПроверкаПодписиВыполнитьПриОшибке", ЭтотОбъект);
		ДополнительныеПараметры.МенеджерКриптографии.НачатьПроверкуПодписи(Оповещение, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверкаПодписиВыполнитьПриОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт

	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	ПроверкаПодписиЗавершение(ОписаниеОшибки, Контекст);

КонецПроцедуры

Процедура НачатьПроверкуСертификата(Сертификат, ДополнительныеПараметры) Экспорт
	
	Если Сертификат <> Неопределено Тогда
		
		Попытка
			
			ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
			Оповещение = Новый ОписаниеОповещения("ПроверкаСертификатаЗавершение", ЭтотОбъект, ДополнительныеПараметры,
					"ПроверкаСертификатаВыполнитьПриОшибке", ЭтотОбъект);
			
			МассивРежимовПроверки = Новый Массив;
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
			МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьПроверкуВСпискеОтозванныхСертификатов);
			ДополнительныеПараметры.МенеджерКриптографии.НачатьПроверкуСертификата(
				Оповещение, Сертификат, МассивРежимовПроверки);
			
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
		КонецПопытки;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаСертификатаЗавершение(ДополнительныеПараметры) Экспорт
	
	ДанныеСтроки = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи];
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
	
	Попытка
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаПодписиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ЗаполнитьДанныеСертификатаПодписи(
			ДополнительныеПараметры.МенеджерКриптографии,
			ДанныеСтроки,
			ДополнительныеПараметры.Сертификат,
			ДвоичныеДанныеПодписи,
			Оповещение);
		
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ПроверкаПодписиЗавершение(КраткоеПредставлениеОшибки(Ошибка), ДополнительныеПараметры);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверкаСертификатаВыполнитьПриОшибке(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ОписаниеОшибки = Строка(ИнформацияОбОшибке);
	КонецЕсли;
	
	ПроверкаПодписиЗавершение(ОписаниеОшибки, Контекст);
	
КонецПроцедуры

Процедура ПроверкаПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеСтроки = ДополнительныеПараметры.ТаблицаПодписей[ДополнительныеПараметры.ИндексТекущейПодписи];
	Статус = НСтр("ru = 'Верна';
					|en = 'Valid'");
	ОписаниеОшибки = "";
	Если Результат = Истина Тогда
		ДанныеСтроки.ПодписьВерна = Истина;
	Иначе
		ДанныеСтроки.ПодписьВерна = Ложь;
		Статус = НСтр("ru = 'Не верна';
						|en = 'Invalid'");
		ОписаниеОшибки = Результат;
	КонецЕсли;
	ДанныеСтроки.ДатаПроверкиПодписи = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "Статус") Тогда
		ДанныеСтроки.Статус = Статус;
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "ОписаниеОшибки") Тогда
		ДанныеСтроки.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	Если ДанныеСтроки.ПодписьВерна Тогда
		ПодписанныйОбъект = ДополнительныеПараметры.ДанныеДляПроверкиПодписей[ДополнительныеПараметры.Индекс].ЭлектронныйДокумент;
		КадровыйЭДОВызовСервера.ОбновитьРезультатПроверкиПодписи(
			ПодписанныйОбъект, ДанныеСтроки.ПорядковыйНомер, ДанныеСтроки.ДатаПроверкиПодписи, ДанныеСтроки.ПодписьВерна);
	КонецЕсли;
	
	ДополнительныеПараметры.ИндексТекущейПодписи = ДополнительныеПараметры.ИндексТекущейПодписи + 1;
	Если ДополнительныеПараметры.ИндексТекущейПодписи < ДополнительныеПараметры.ТаблицаПодписей.Количество() Тогда
		НачатьПроверкуПодписи(ДополнительныеПараметры);
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСертификатаПодписи(МенеджерКриптографии, ДанныеСтроки, Сертификат, ДвоичныеДанныеПодписи, ОповещениеЗавершения)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
	ДополнительныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ПриПолученииДанныхСертификатаПодписи", ЭтотОбъект, ДополнительныеПараметры);
	КадровыйЭДОКлиент.НачатьПолучениеДанныхСертификатаПодписи(
		МенеджерКриптографии, ДвоичныеДанныеПодписи, Оповещение);
	
КонецПроцедуры

Процедура ПриПолученииДанныхСертификатаПодписи(ДанныеСертификата, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеСертификата) Тогда
		
		ДополнительныеПараметры.Сертификат = ДанныеСертификата.Сертификат;
		
		ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
		ДанныеСтроки.Отпечаток = ДанныеСертификата.Отпечаток;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "АдресСертификата") Тогда
			ДанныеСтроки.АдресСертификата = ДанныеСертификата.АдресСертификата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеЗавершения") Тогда
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ДанныеСтроки.Отпечаток) Тогда
			ДополнительныеПараметры.ОповещениеЗавершения.ДополнительныеПараметры.ПеречитатьПодписи = Истина;
		КонецЕсли;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
