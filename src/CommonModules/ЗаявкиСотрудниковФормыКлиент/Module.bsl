
#Область СлужебныеПроцедурыИФункции

#Область ИзменениеСрокаИсполненияВЗаявке

Процедура ИзменитьСрокИсполнения(Форма) Экспорт
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Подтверждение'");
	ТекстВопроса = НСтр("ru = 'Срок исполнения назначается автоматически по настройкам правил обработки заявок.
		|Продолжить редактирование?';
		|en = 'Срок исполнения назначается автоматически по настройкам правил обработки заявок.
		|Продолжить редактирование?'");
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьСрокИсполненияПродолжение", ЭтотОбъект, Форма);
	ПоказатьВопрос(Оповещение, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

Процедура ИзменитьСрокИсполненияПродолжение(Результат, Форма) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыВыбораДаты = Новый Структура("НачальноеЗначение");
		ПараметрыВыбораДаты.НачальноеЗначение = Форма.Объект.СрокИсполнения;
		
		Оповещение = Новый ОписаниеОповещения("ИзменитьСрокИсполненияЗавершение", ЭтотОбъект, Форма);
		ОткрытьФорму("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты, Форма, , , , Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьСрокИсполненияЗавершение(НовыйСрокИсполнения, Форма) Экспорт
	
	Если НовыйСрокИсполнения = Неопределено Или Не ЗначениеЗаполнено(НовыйСрокИсполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Объект.СрокИсполнения = НовыйСрокИсполнения;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборТиповогоОтвета

Процедура ВыбратьТиповойОтвет(Форма) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьТиповойОтветЗавершение", ЭтотОбъект, Форма);
	
	ПараметрыФормы = Новый Структура("РежимВыбора,Отбор");
	ПараметрыФормы.РежимВыбора = Истина;
	ПараметрыФормы.Отбор = Новый Структура("ТипЗаявки", Форма.Объект.ТипЗаявки);
	
	ОткрытьФорму("Справочник.ТиповыеОтветыНаЗаявкиКабинетСотрудника.ФормаВыбора", ПараметрыФормы, Форма,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыбратьТиповойОтветЗавершение(ТиповойОтвет, Форма) Экспорт
	
	Если ТиповойОтвет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТиповойОтвет = ТиповойОтвет;
	Форма.Модифицированность = Истина;
	Форма.Объект.ОтветПоЗаявке = ЗаявкиСотрудниковВызовСервера.СодержаниеТиповогоОтвета(ТиповойОтвет);
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеДокументаЗаявки

Процедура УдалитьДокументПоЗаявке(Форма, Элемент) Экспорт
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Подтверждение'");
	ТекстВопроса = НСтр("ru = 'Документ будет уделен из результата выполнения заявки';
						|en = 'Документ будет уделен из результата выполнения заявки'");
	
	ПараметрыОповещения = Новый Структура("Форма,Элемент", Форма, Элемент);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалитьДокументПоЗаявкеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

Процедура УдалитьДокументПоЗаявкеЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма 		= ПараметрыОповещения.Форма;
		ИмяЭлемента = ПараметрыОповещения.Элемент.Имя;
		ИдентификаторСтроки = Число(СтрЗаменить(ИмяЭлемента, "_КартинкаУдалитьДокументПоЗаявке", ""));
		ЭлементКоллекции = Форма.Объект.ДокументыПоЗаявке.НайтиПоИдентификатору(ИдентификаторСтроки);
		Форма.Объект.ДокументыПоЗаявке.Удалить(Форма.Объект.ДокументыПоЗаявке.Индекс(ЭлементКоллекции));
		Форма.ОбработатьИзменениеДокументыПоЗаявке();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗаявки

Процедура НачатьВыполнениеКомандыЗаявкаВыполнена(Форма, РезультатВыполненияЗаявки) Экспорт
	
	ТекстЗаписать = НСтр("ru = 'Продолжение операции возможно только после записи данных.
			|Записать данные и продолжить?';
			|en = 'Продолжение операции возможно только после записи данных.
			|Записать данные и продолжить?'");
	
	Если РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена") Тогда
		
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
								|en = 'Подтверждение'");
		ТекстВопроса = НСтр("ru = 'Регистрация выполнение заявки';
							|en = 'Регистрация выполнение заявки'");
		
		Если Форма.Модифицированность Тогда
			ТекстВопроса = СтрШаблон("%1%2%3", ТекстВопроса, Символы.ПС, ТекстЗаписать);
		КонецЕсли;
		
	Иначе
		
		ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
								|en = 'Подтверждение'");
		ТекстВопроса = НСтр("ru = 'Отклонение заявки сотрудника.
		|Сообщение о причине отклонения будет отправлено сотруднику в личный кабинет.';
		|en = 'Отклонение заявки сотрудника.
		|Сообщение о причине отклонения будет отправлено сотруднику в личный кабинет.'");
		
		Если Форма.Модифицированность Тогда
			ТекстВопроса = СтрШаблон("%1%2%3%4", ТекстВопроса, Символы.ПС, Символы.ПС, ТекстЗаписать);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Форма,РезультатВыполненияЗаявки", Форма, РезультатВыполненияЗаявки);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаявкаВыполненаПродолжение", ЭтотОбъект, ПараметрыОповещения);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);

КонецПроцедуры

Процедура КомандаЗаявкаВыполненаПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Форма = ПараметрыОповещения.Форма;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Форма.Модифицированность Тогда
			Форма.Записать();
		КонецЕсли;
		ОчиститьСообщения();
		ТребуетсяПодпись = ЗаявкиСотрудниковВызовСервера.ТребуетсяПодписьПриВыполненииЗаявки(Форма.Объект.Ссылка);
		Если ТребуетсяПодпись Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаявкаВыполненаЗавершение", ЭтотОбъект, ПараметрыОповещения);
			ЗаявкиСотрудниковКлиент.ПодписатьЗаявкуЭП(Форма, ОписаниеОповещения);
		Иначе
			КомандаЗаявкаВыполненаЗавершение(Неопределено, ПараметрыОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КомандаЗаявкаВыполненаЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено И Результат.Свойство("Отказ") И Результат.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПараметрыОповещения.Форма;
	
	Результат = Форма.РезультатЗаписиВыполненияЗаявки(ПараметрыОповещения.РезультатВыполненияЗаявки);
	Если Результат.Свойство("СообщениеПроверки") Тогда
		ПоказатьПредупреждение(,Результат.СообщениеПроверки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикЗавершенияЗаписиВыполненияЗаявки", Форма);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбработчикЗавершенияЗаписиВыполненияЗаявки(Результат, Форма) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		Форма.Модифицированность = Ложь;
		ПараметрыОповещения = Новый Структура("ИдентификаторЗаявки,ИдентификаторОтменяемойЗаявки");
		ЗаполнитьЗначенияСвойств(ПараметрыОповещения, Форма.Объект);
		Оповестить("Запись_ЗаявкаКабинетСотрудника", ПараметрыОповещения, Форма);
		Оповестить("Запись_ЗадачаИсполнителя");
		Форма.ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось изменить статус заявки.';
								|en = 'Не удалось изменить статус заявки.'");
		ТекстПредупреждения = СтрШаблон("%1%2%3", ТекстСообщения, Символы.ПС, Результат.КраткоеПредставлениеОшибки);
		ИнформированиеПользователяКлиент.Предупредить(ТекстПредупреждения, Результат.ПодробноеПредставлениеОшибки,);
	КонецЕсли;

КонецПроцедуры

Функция ЗаявкаГотоваКВыполнению(Форма, РезультатВыполненияЗаявки, ОписаниеДокумента) Экспорт
	
	Если РезультатВыполненияЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена") Тогда
		
		Если ОписаниеДокумента.ДоступнаОтменаЗаявки 
			И Форма.Объект.ВариантИсправления = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена") Тогда
			// Если Заявка отменяется, не выполняем проверку.
		Иначе
			
			Если ОписаниеДокумента.ПроверятьСвязанныеЗаявки
				И Форма.РезультатВыполненияСвязаннойЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Отклонена") Тогда
				ТекстПредупреждения = Форма.СообщениеСвязаннаяЗаявкаОтклонена;
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Возврат Ложь;
			КонецЕсли;
			
			Если ОписаниеДокумента.ВыводитьДокументыЗаявки И Не ЗначениеЗаполнено(Форма.Объект.ДокументыПоЗаявке)Тогда
				ТекстПредупреждения = НСтр("ru = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""';
											|en = 'Отсутствуют документы по заявке, добавьте в разделе ""Документы по заявке""'");
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ОписаниеДокумента.ДоступнаОтменаЗаявки 
			И Форма.Объект.ВариантИсправления = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияЗаявокКабинетСотрудника.Отмена") Тогда
			// Если заявка отменяется, разрешаем ее отклонить не зависимо от результатов выполнения связанных заявок.
		ИначеЕсли ОписаниеДокумента.ПроверятьСвязанныеЗаявки
			И Форма.РезультатВыполненияСвязаннойЗаявки = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияЗаявокКабинетСотрудника.Выполнена") Тогда
			ТекстПредупреждения = Форма.СообщениеСвязаннаяЗаявкаВыполнена;
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Форма.Объект.ОтветПоЗаявке) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо указать причину, по которой заявка отклоняется.';
									|en = 'Необходимо указать причину, по которой заявка отклоняется.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОтветПоЗаявке", "Объект");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область ВыборДокументаЗаявки

Процедура ВыполнитьКомандуВыбратьДокумент(Форма, ЗначенияДляВыбора) Экспорт

	Параметры = Новый Структура("Форма,Отбор", Форма, ЗначенияДляВыбора.Отбор);
	
	Если ЗначенияДляВыбора.ЗначенияДляВыбораВидаДокумента.Количество() = 1 Тогда
		ИмяОбъекта = ЗначенияДляВыбора.ЗначенияДляВыбораВидаДокумента[0].Значение;
		ВыбратьДокументПродолжение(ИмяОбъекта, Параметры);
	Иначе
		
		ТекстЗаголовка = НСтр("ru = 'Выбор типа данных';
								|en = 'Выбор типа данных'");
		
		ПараметрыОткрытия = Новый Структура("Заголовок,ЗначенияДляВыбора");
		ПараметрыОткрытия.Заголовок 		= ТекстЗаголовка;
		ПараметрыОткрытия.ЗначенияДляВыбора = ЗначенияДляВыбора.ЗначенияДляВыбораВидаДокумента;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументПродолжение", ЭтотОбъект, Параметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборЗначенияИзСпискаБЗК", ПараметрыОткрытия, Форма,,,,
				ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяФормыВыбора = СтрШаблон("%1.%2", Результат, "ФормаВыбора");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументЗавершение", ЭтотОбъект, Параметры);
	
	ПараметрыФормы = Новый Структура("РежимВыбора,Отбор");
	ПараметрыФормы.РежимВыбора = Истина;
	ПараметрыФормы.Отбор = Параметры.Отбор;
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Параметры.Форма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыбратьДокументЗавершение(ВыбранныйДокумент, Параметры) Экспорт
	
	Если ВыбранныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из Параметры.Форма.Объект.ДокументыПоЗаявке Цикл
		Если СтрокаТЧ.ДокументСсылка = ВыбранныйДокумент Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = Параметры.Форма.Объект.ДокументыПоЗаявке.Добавить();
	НоваяСтрока.ДокументСсылка = ВыбранныйДокумент;
	Параметры.Форма.ОбработатьИзменениеДокументыПоЗаявке();
	
КонецПроцедуры

Функция ЗначенияДляВыбораДокументаПоОтсутствию(Форма) Экспорт

	Возврат ЗаявкиСотрудниковФормыКлиентВнутренний.ЗначенияДляВыбораДокументаПоОтсутствию(Форма);

КонецФункции

#КонецОбласти

#Область ОбработкаОповещения

Процедура ОбработкаОповещения(Форма, ИмяСобытия, ПараметрОповещения, Источник) Экспорт
	
	Если ИмяСобытия = "ЗаявкиСотрудниковЗаписанДокумент" И Источник = Форма Тогда
		ЗаписанДокументПоЗаявке(Форма, ПараметрОповещения);
	ИначеЕсли ИмяСобытия = "Запись_ЗаявкаКабинетСотрудника" И Источник <> Форма Тогда
		Если ПараметрОповещения.ИдентификаторЗаявки = Форма.Объект.ИдентификаторЗаявки Тогда
			Форма.ОбработатьЗаписьСвязаннойЗаявки();
		ИначеЕсли ПараметрОповещения.ИдентификаторОтменяемойЗаявки = Форма.Объект.ИдентификаторЗаявки Тогда
			Форма.ОбработатьЗаписьОтменяющейЗаявки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписанДокументПоЗаявке(Форма, ДокументПоЗаявке)

	Если Не ЗначениеЗаполнено(ДокументПоЗаявке) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ДокументСсылка", ДокументПоЗаявке);
	Если ЗначениеЗаполнено(Форма.Объект.ДокументыПоЗаявке.НайтиСтроки(Отбор)) Тогда
		Возврат;
	КонецЕсли;
	НоваяЗапись = Форма.Объект.ДокументыПоЗаявке.Добавить();
	НоваяЗапись.ДокументСсылка = ДокументПоЗаявке;
	
	Форма.ОбработатьИзменениеДокументыПоЗаявке();

КонецПроцедуры

#КонецОбласти

#Область СозданиеНовыхДокументов

Процедура СоздатьНовыйДокументОтпуск(Форма) Экспорт

	ЗаявкиСотрудниковФормыКлиентВнутренний.СоздатьНовыйДокументОтпуск(Форма);

КонецПроцедуры

Процедура СоздатьНовыйДокументОтпускБезОплаты(Форма) Экспорт
	
	ПараметрыЗаполнения = ЗаявкиСотрудниковФормыКлиентВнутренний.ПараметрыЗаполненияДокументаОтпускБезОплаты(Форма);
	ОткрытьФорму("Документ.ОтпускБезСохраненияОплаты.Форма.ФормаДокумента", ПараметрыЗаполнения, Форма);

КонецПроцедуры

Процедура СоздатьНовыйДокументПоОтсутствию(Форма) Экспорт

	ЗаявкиСотрудниковФормыКлиентВнутренний.СоздатьНовыйДокументПоОтсутствию(Форма);

КонецПроцедуры

#КонецОбласти

#Область УдалениеФайлаСправки

Процедура УдалитьФайлСправки(Форма, Элемент) Экспорт
	
	ЗаголовокВопроса = НСтр("ru = 'Подтверждение';
							|en = 'Подтверждение'");
	ТекстВопроса = НСтр("ru = 'Файл справки будет удален';
						|en = 'Файл справки будет удален'");
	
	ПараметрыОповещения = Новый Структура("Форма,Элемент", Форма, Элемент);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("УдалитьФайлСправкиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, ИнтеграцияУправлениеПерсоналомКлиента.ОписаниеКнопокВопроса(),,,ЗаголовокВопроса);
	
КонецПроцедуры

Процедура УдалитьФайлСправкиЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Форма 		= ПараметрыОповещения.Форма;
		ИмяЭлемента = ПараметрыОповещения.Элемент.Имя;
		ИдентификаторСтроки = Число(СтрЗаменить(ИмяЭлемента, "_КартинкаУдалитьФайлСправки", ""));
		ЭлементКоллекции = Форма.Объект.ДокументыПоЗаявке.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаявкиСотрудниковВызовСервера.УдалитьФайлСправки(ЭлементКоллекции.ФайлСправки);
		ЭлементКоллекции.ФайлСправки = Неопределено;
		Форма.ВывестиДокументыИзТаблицыДокументовЗаявки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборФайлаСправки

Процедура ВыбратьФайлСправки(Форма, Элемент) Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма,Элемент", Форма, Элемент);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ВыбратьФайлСправкиЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = 
		НСтр("ru = 'Файлы MS Word (*.doc;*.docx)|*.doc;*.docx|Файлы PDF(*.pdf;*.PDF)|*.pdf;*.PDF|
			 |Архив (*.zip;*.rar;*.7z)|*.zip;*.rar;*.7z';
			 |en = 'Файлы MS Word (*.doc;*.docx)|*.doc;*.docx|Файлы PDF(*.pdf;*.PDF)|*.pdf;*.PDF|
			 |Архив (*.zip;*.rar;*.7z)|*.zip;*.rar;*.7z'");

	ПараметрыЗагрузки.ИдентификаторФормы = Форма.УникальныйИдентификатор;

	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения, ПараметрыЗагрузки);

КонецПроцедуры

Процедура ВыбратьФайлСправкиЗавершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныйФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
	РазмерФайла = Данные.Размер();
	МаксимальныйРазмерПринимаемогоФайла = ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();
	Если РазмерФайла > МаксимальныйРазмерПринимаемогоФайла Тогда
		МаксимальныйРазмер = МаксимальныйРазмерПринимаемогоФайла/1024/1024;
		РазмерФайла = Окр(РазмерФайла/1024/1024, 2);
		ТекстОшибки = НСтр("ru = 'Размер файла %1Мб превышает максимально допустимый %2Мб. Выберите другой файл.';
							|en = 'Размер файла %1Мб превышает максимально допустимый %2Мб. Выберите другой файл.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РазмерФайла, МаксимальныйРазмер);
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.ВыбратьФайлСправкиЗавершение(ПомещенныйФайл, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ОткрытьПрисоединенныйФайл(Форма, ПрисоединенныйФайл) Экспорт

	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ПрисоединенныйФайл, Форма.УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);

КонецПроцедуры

Процедура ПодписатьФайл(Форма, ПрисоединенныйФайл, ЭтоФайлПечатнойФормы) Экспорт
	
	ПараметрыОповещения = Новый Структура("ПодписанныйФайл", ПрисоединенныйФайл);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", Форма, ПараметрыОповещения);
	
	МассивФайлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайл);
	
	Если ЭтоФайлПечатнойФормы Тогда	
		КадровыйЭДОКлиент.ОткрытьФормуПодписанияПечатныхФорм(
			МассивФайлов, Форма, ОповещениеОЗавершении,,
			ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"),
			Истина);
	Иначе
		Если Форма.ИспользуетсяКадровыйЭДО Тогда
			ДанныеФайловНаПодпись = КадровыйЭДОВызовСервера.ДанныеФайловНаПодпись(МассивФайлов, Форма.УникальныйИдентификатор);
			КадровыйЭДОКлиент.ПодписатьФайлы(
				ДанныеФайловНаПодпись, ОповещениеОЗавершении, Форма,
				ПредопределенноеЗначение("Перечисление.ДействияСФайламиДокументовКЭДО.ПередатьВКабинетСотрудников"));
		Иначе
			
			ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ПрисоединенныйФайл, Форма.УникальныйИдентификатор);
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("Операция",            	НСтр("ru = 'Подписание файла';
																	|en = 'Подписание файла'"));
			ОписаниеДанных.Вставить("ЗаголовокДанных",     	НСтр("ru = 'Файл';
																	|en = 'Файл'"));
			ОписаниеДанных.Вставить("Данные",              	ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ОписаниеДанных.Вставить("Представление",       	ДанныеФайла.ИмяФайла);
			ОписаниеДанных.Вставить("Объект",				ПрисоединенныйФайл);
			
			ЭлектроннаяПодписьКлиент.Подписать(ОписаниеДанных, Форма, ОповещениеОЗавершении);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти