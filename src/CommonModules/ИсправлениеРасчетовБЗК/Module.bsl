
#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьМенеджерРасчета(МенеджерРасчета, ДокументИсправление, ОписаниеДокумента, ПараметрыИсправленногоДокумента) Экспорт
	ЭтоИсправление = ИсправлениеРасчетовБЗККлиентСервер.ЭтоИсправление(ПараметрыИсправленногоДокумента);
	
	Если Не ЭтоИсправление Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчета.ИсправленныйДокумент = ПараметрыИсправленногоДокумента.Ссылка;
	
	ИсправлениеВТекущемПериодеВозможно =
		ИсправлениеДокументовЗарплатаКадры.ВозможноИсправлениеТекущимПериодом(МенеджерРасчета.ИсправленныйДокумент);
		
	МенеджерРасчета.ЭтоИсправлениеТекущимПериодом = ИсправлениеВТекущемПериодеВозможно
		И ИсправлениеРасчетовБЗККлиентСервер.ИсправлениеВТекущемПериоде(ДокументИсправление,
			ПараметрыИсправленногоДокумента, ОписаниеДокумента.МесяцНачисленияИмя);
				
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерРасчета.РазрешеныДоначисленияВТекущемПериоде = ИсправлениеВТекущемПериодеВозможно
		И ИсправлениеРасчетовБЗККлиентСервер.ПерерасчетыДоступны(ДокументИсправление, ОписаниеДокумента, ПараметрыИсправленногоДокумента);

КонецПроцедуры

Процедура ДополнитьДанныеДляВременнойРегистрации(ДанныеДляПроведения, ИсправленныйДокумент = Неопределено) Экспорт
	ДанныеДляПроведения.Вставить("ИсправленныйДокумент", Неопределено);
	Если ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		ДанныеДляПроведения.ИсправленныйДокумент = ИсправленныйДокумент;
	КонецЕсли;	
КонецПроцедуры

Функция ДанныеПерерасчета(Организация, ПериодРегистрации, ИсходныеНачисления, ДокументСсылка) Экспорт
	Если ТребуетсяДополнятьСовместителями(ИсходныеНачисления) Тогда
		ДополнитьИсходныеНачисленияСовместителями(ИсходныеНачисления, Организация, ДокументСсылка);
	КонецЕсли;
	
	НачисленияСотрудников = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	Для Каждого СтрокаНачисления Из ИсходныеНачисления Цикл
		НоваяСтрока = НачисленияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
		НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
	КонецЦикла;
	
	ТребуетсяПерерасчет = ТребуетсяПерерасчет(ДокументСсылка, ПериодРегистрации, НачисленияСотрудников);
	Если Не ТребуетсяПерерасчет Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОтменятьТранзакцию = Не ТранзакцияАктивна();
	Если ОтменятьТранзакцию Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Движения = ЗарплатаКадры.НаборыЗаписейРегистратора(ДокументСсылка.Метаданные(), ДокументСсылка);
		Движения.Начисления.Записать();
	КонецЕсли;

	НачисленияЗаднимЧислом = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияСотрудников, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		НоваяСтрока = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
	КонецЦикла;
	
	СторноЗаписи = СторноЗаписи(НачисленияСотрудников, ДанныеСотрудников, ПериодРегистрации);
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = НаборДляЗаполненияПерерасчета(
		НачисленияЗаднимЧислом, 
		СторноЗаписи, 
		ДанныеСотрудников, 
		ВременныйРегистраторПерерасчета);
	
	ДополнитьНачисленияЗаднимЧисломСторноЗаписями(НачисленияЗаднимЧислом, СторноЗаписи, ВременныйРегистраторПерерасчета);
	
	// Запись сторно-записей перед получением данных для расчета.
	НаборДляЗаполненияПерерасчета.Записать();
	
	ДанныеПерерасчета = НачисленияПерерасчетПоНачисленияЗаднимЧислом(
		Организация, 
		ПериодРегистрации, 
		НачисленияЗаднимЧислом, 
		ВременныйРегистраторПерерасчета);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеПерерасчета;
КонецФункции

Функция ДанныеПерерасчетаДляИсправления(Организация, ПериодРегистрации, НачисленияТекущегоДокумента, ИсправленныйДокумент,
	ДокументСсылка, ОписаниеДокумента, ОписанияТаблиц, Сотрудник = Неопределено, ДоначислитьЗарплатуПриНеобходимости = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачисленияИсправляемогоДокумента = ИсправлениеДокументовРасчетЗарплаты.НачисленияИсправляемогоДокумента(
		ИсправленныйДокумент, 
		ОписанияТаблиц, 
		Сотрудник);
		
	Если НачисленияИсправляемогоДокумента.Количество() = 0 Тогда
		Возврат НовыйДанныеПерерасчета();
	КонецЕсли;
	
	ОтменятьТранзакцию = Не ТранзакцияАктивна();
	Если ОтменятьТранзакцию Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПредыдущийНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ДокументСсылка);
		ПредыдущийНабор.Записать(); 
	КонецЕсли;
	
	ИсправлениеДокументовРасчетЗарплаты.УчестьПредыдущиеИсправленияДокумента(
		ИсправленныйДокумент, 
		НачисленияИсправляемогоДокумента);
	
	СотрудникиИсправляемогоДокумента = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияИсправляемогоДокумента, "Сотрудник", Истина);	
	
	ТребуетсяВосстановлениеНачислений = ДоначислитьЗарплатуПриНеобходимости
		И ИсправлениеДокументовРасчетЗарплаты.НеобходимоДоначислятьЗарплату(ИсправленныйДокумент, НачисленияИсправляемогоДокумента, НачисленияТекущегоДокумента);
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		// Получим данные плановых начислений за исправляемый период.
		ИсправляемыйПериод = ИсправлениеДокументовРасчетЗарплаты.ПериодыВосстановленияНачислений(
			ИсправлениеДокументовРасчетЗарплаты.ПериодИсправляемогоДокумента(
				НачисленияИсправляемогоДокумента), 
			НачисленияТекущегоДокумента);
	
		ПлановыеНачисления = ИсправлениеДокументовРасчетЗарплаты.ВосстанавливаемыеНачисления(
			ДокументСсылка, 
			ИсправленныйДокумент, 
			ПериодРегистрации, 
			Организация, 
			СотрудникиИсправляемогоДокумента, 
			ИсправляемыйПериод);
	Иначе
		ПлановыеНачисления = Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	КонецЕсли;
	
	// "Новые" сотрудники.
	СотрудникиТекущегоДокумента = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияТекущегоДокумента, "Сотрудник", Истина);
	
	ОтборСотрудников = СотрудникиТекущегоДокумента;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборСотрудников, СотрудникиИсправляемогоДокумента, Истина);
		
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	// 1.
	// Получаем записи, которые, возможно, нужно сторнировать из-за расширения периода начисления.
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка);
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияТекущегоДокумента, "Начисление", Истина);
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	// "Новые" записи документа.
	Для Каждого СтрокаНачисления Из НачисленияТекущегоДокумента Цикл
		// Получать дополнение для начислений не имеющих периодов 
		// действия или для начислений "будущих" периодов не имеет смысла.
		ВидРасчетаИнфо = ВидыРасчетаИнфо[СтрокаНачисления.Начисление];
		Если ВидРасчетаИнфо.ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия
			Или СтрокаНачисления.ДатаНачала >= ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСотрудника = ДанныеСотрудников[СтрокаНачисления.Сотрудник];
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
	КонецЦикла;
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	НачисленияНабор.Очистить();
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистраторПерерасчета);
	
	НачисленияЗаднимЧислом = ИсправлениеДокументовРасчетЗарплаты.ПустаяТаблицаНачисленийЗаднимЧислом();
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаСторно);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Истина;
		СтрокаЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		ДанныеСотрудника = ДанныеСотрудников[СтрокаСторно.Сотрудник];
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// 2.
	// Выявляем начисления, которые необходимо доначислить в связи с исправлением.
	// Необходимо восстановить начисления в "старых" периодах по "старым" сотрудникам.
	
	ВременнаяСсылкаФизлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	ВременныйПериодРегистрации = ПериодРегистрации;
	ВременныйСледующийПериодРегистрации = ДобавитьМесяц(ВременныйПериодРегистрации, 1);
	
	СпособыВыполненияПлановыхНачислений = ПлановыеНачисленияСотрудников.СпособыВыполненияПлановыхНачислений();
	
	// Добавим во временный набор новые, исправленные записи.
	Для Каждого СтрокаНачисления Из НачисленияТекущегоДокумента Цикл
		ВидРасчетаИнфо = ВидыРасчетаИнфо[СтрокаНачисления.Начисление];
		Если СпособыВыполненияПлановыхНачислений.Найти(ВидРасчетаИнфо.СпособВыполненияНачисления) <> Неопределено Тогда
			Продолжить; // Записи, представляющие собой плановые начисления пропускаем.
		КонецЕсли;
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо; // Ссылка на физлицо
		// Головная организация "нового" сотрудника.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "новый" сотрудник.
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействияНачало;
		НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ПериодДействияКонец;
	КонецЦикла;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		
		ЗначенияПоказателейНабор = РегистрыСведений.ЗначенияПоказателейНачислений.СоздатьНаборЗаписей();
		ЗначенияПоказателейНабор.Отбор.Регистратор.Установить(ВременныйРегистраторПерерасчета);
		
		// Добавим во временный набор плановые начисления исправляемого периода.
		Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
			НоваяСтрока = НачисленияНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
			НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
			// Настоящая головная организация.
			НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
			НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "старый" сотрудник.
			НоваяСтрока.Регистратор = ВременнаяСсылка;
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
			// Сохраним показатели во временный набор записей.
			Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
				НоваяСтрокаПоказателя = ЗначенияПоказателейНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаПоказателя);
				НоваяСтрокаПоказателя.Регистратор = ВременныйРегистраторПерерасчета;
				НоваяСтрокаПоказателя.РегистраторИзмерение = ВременныйРегистраторПерерасчета;
			КонецЦикла;
		КонецЦикла;
		НачисленияНабор.Записать();                                
	КонецЕсли;
	
	ВременнаяСсылкаПолучениеДополнения = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеДополнения = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеДополнения);
	
	ДанныеПерерасчетовСторно = НовыйДанныеПерерасчета();
	
	// Формируем набор для получения дополнения и вычисления плановых начислений, которые потребуется доначислить.
	Для Каждого СтрокаНачисленийИсправленногоДокумента Из НачисленияИсправляемогоДокумента Цикл
		// Заполнение набора записей для получения доначислений из-за смещения периода.
		НоваяСтрока = НачисленияНаборПолучениеДополнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисленийИсправленногоДокумента);
		// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
		// Настоящая головная организация.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисленийИсправленногоДокумента.Сотрудник].ГоловнаяОрганизация;
		// НоваяСтрока.Сотрудник 			// "старого" сотрудника оставляем.
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеДополнения;
		НоваяСтрока.ВидРасчета = СтрокаНачисленийИсправленногоДокумента.Начисление;
		НоваяСтрока.ПериодРегистрации = ВременныйСледующийПериодРегистрации;
		
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДобавитьСтрокуДанныхПерерасчета(ДанныеПерерасчетовСторно);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, СтрокаНачисленийИсправленногоДокумента);
		НоваяСтрокаПерерасчета.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрокаПерерасчета.Результат = - СтрокаНачисленийИсправленногоДокумента.Результат;
		НоваяСтрокаПерерасчета.РанееНачислено = - СтрокаНачисленийИсправленногоДокумента.РанееНачислено;
		НоваяСтрокаПерерасчета.СуммаВычета = - СтрокаНачисленийИсправленногоДокумента.СуммаВычета;
		
		НоваяСтрокаПерерасчета.СкидкаПоВзносам = - СтрокаНачисленийИсправленногоДокумента.СкидкаПоВзносам;

		НоваяСтрокаПерерасчета.ДатаНачала = СтрокаНачисленийИсправленногоДокумента.ПериодДействияНачало;
		НоваяСтрокаПерерасчета.ДатаОкончания = СтрокаНачисленийИсправленногоДокумента.ПериодДействияКонец;
		
		НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ = - СтрокаНачисленийИсправленногоДокумента.РезультатВТомЧислеЗаСчетФБ;
		НоваяСтрокаПерерасчета.РезультатФСС = - СтрокаНачисленийИсправленногоДокумента.РезультатФСС;
		
		НоваяСтрокаПерерасчета.ОтработаноДней = - СтрокаНачисленийИсправленногоДокумента.ОтработаноДней;
		НоваяСтрокаПерерасчета.ОтработаноЧасов = - СтрокаНачисленийИсправленногоДокумента.ОтработаноЧасов;
		НоваяСтрокаПерерасчета.ОплаченоДней = - СтрокаНачисленийИсправленногоДокумента.ОплаченоДней;
		НоваяСтрокаПерерасчета.ОплаченоЧасов = - СтрокаНачисленийИсправленногоДокумента.ОплаченоЧасов;
		
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина; // По умолчанию сторнирующие строки не пересчитываем.
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = ИсправленныйДокумент;
	КонецЦикла;
	
	ЭтоИсправлениеТекущимПериодом = 
		ПериодРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, ОписаниеДокумента.МесяцНачисленияИмя);
		
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ДанныеПерерасчетов = ДанныеПерерасчетовСторно;
	Иначе
		ДанныеПерерасчетов = СкорректироватьПерерасчетыСУчетомФПД(
			ДанныеПерерасчетовСторно, ДанныеСотрудников, ПериодРегистрации, ИсправленныйДокумент);
	КонецЕсли;
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент);
	ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент);
	
	// То, что сторнировалось бы при вводе прежнего начисления, это и есть то, что нужно 
	// доначислить сейчас, при его "отмене".
	ЗаписиДоначисления = НачисленияНаборПолучениеДополнения.ПолучитьДополнение();
	
	Для Каждого СтрокаДоначисления Из ЗаписиДоначисления Цикл
		Если НачалоМесяца(СтрокаДоначисления.ПериодДействияНачалоСторно) >= ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаДоначисления);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаДоначисления.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Ложь;
		
		ДанныеСотрудника = ДанныеСотрудников[СтрокаДоначисления.Сотрудник];
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоначисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Ложь;
		НоваяСтрока.ПериодРегистрации = СтрокаДоначисления.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	НачисленияНабор.Очистить();
	НачисленияНабор.Записать();
	
	НаборДляЗаполненияПерерасчета.Записать();
	Если ТребуетсяВосстановлениеНачислений Тогда
		ЗначенияПоказателейНабор.Записать();
	КонецЕсли;
		
	НачисленияПерерасчет = НачисленияПерерасчетПоНачисленияЗаднимЧислом(
		Организация, 
		ПериодРегистрации, 
		НачисленияЗаднимЧислом, 
		ВременныйРегистраторПерерасчета,
		ДанныеПерерасчетов);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
		Если ТребуетсяВосстановлениеНачислений Тогда
			ЗначенияПоказателейНабор.Очистить();
			ЗначенияПоказателейНабор.Записать();
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НачисленияПерерасчет;
КонецФункции

Функция ТребуетсяПерерасчет(Регистратор, ПериодРегистрации, НачисленияСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начисления", НачисленияСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТФильтр
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.Сотрудник КАК Сотрудник,
		|	Фильтр.ВидРасчета КАК ВидРасчета,
		|	Фильтр.ПериодДействия КАК ПериодДействия,
		|	Фильтр.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Фильтр.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.ПериодДействияБазовый КАК ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТФильтр КАК Фильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Фильтр.ВидРасчета = Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
		|			И (СотрудникиПериоды.ПериодДействия = Начисления.ПериодДействия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВытесняющиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВытесняющиеВидыРасчета.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВедущиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВедущиеВидыРасчета.ВидРасчета)
		|			И (ВЫБОР
		|				КОГДА СотрудникиПериоды.ПериодДействияБазовый
		|					ТОГДА СотрудникиПериоды.ПериодДействияНачало <= Начисления.ПериодДействияКонец
		|							И СотрудникиПериоды.ПериодДействияКонец >= Начисления.ПериодДействияНачало
		|				ИНАЧЕ СотрудникиПериоды.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
		|						И СотрудникиПериоды.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
		|			КОНЕЦ)
		|ГДЕ
		|	Начисления.Регистратор <> &Регистратор
		|	И Начисления.ПериодРегистрации < &ПериодРегистрации
		|	И (НЕ ВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ВедущиеВидыРасчета.Ссылка ЕСТЬ NULL)";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НовыйДанныеПерерасчета() Экспорт
	НачисленияДокумента = Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	НачисленияДокумента.Колонки.Добавить("РезультатВТомЧислеЗаСчетФБ", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
	НачисленияДокумента.Колонки.Добавить("ЗачетНормыВремени", Новый ОписаниеТипов("Булево"));
	НачисленияДокумента.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	НачисленияДокумента.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	НачисленияДокумента.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета", Новый ОписаниеТипов("Число"));
	НачисленияДокумента.Колонки.Добавить("ИспользованиеПериода", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыИспользованияПериодаНачисления"));
	
	Возврат НачисленияДокумента;
КонецФункции	

Функция ДобавитьСтрокуДанныхПерерасчета(ДанныеПерерасчета) Экспорт
	НоваяСтрока = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(ДанныеПерерасчета);
	Возврат НоваяСтрока;		
КонецФункции

Функция НовыйИсходныеДанныеДляПерерасчета() Экспорт
	ИсходныеДанные = НовыйДанныеПерерасчета();
	
	Возврат ИсходныеДанные;
КонецФункции

Функция ДобавитьСтрокуИсходныхДанныхДляПерерасчета(ИсходныеДанныеДляПерерасчета) Экспорт
	Возврат ДобавитьСтрокуДанныхПерерасчета(ИсходныеДанныеДляПерерасчета);
КонецФункции

Функция ИсходныеДанныеДляПерерасчетаИзРезультатаРасчета(РезультатРасчета) Экспорт
	ИсходныеДанные = НовыйИсходныеДанныеДляПерерасчета();
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(РезультатРасчета, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	Для Каждого СтрокаРезультатаРасчета Из РезультатРасчета Цикл
		СтрокаИсходныхДанных = ДобавитьСтрокуИсходныхДанныхДляПерерасчета(ИсходныеДанные);
		СтрокаРезультатаРасчетаВСтрокуПерерасчета(СтрокаИсходныхДанных, СтрокаРезультатаРасчета, ВидыРасчетаИнфо, Истина);
	КонецЦикла;
	
	Возврат ИсходныеДанные;
КонецФункции

Процедура ДанныеПерерасчетаВДанныеОбъекта(ДанныеПерерасчета, ТаблицыДокумента, ОписаниеТаблицы, Организация) Экспорт
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПерерасчета, "Начисление", Истина);
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	Для Каждого СтрокаПерерасчета Из ТаблицыДокумента.НачисленияПерерасчет Цикл
		СтрокаТаблицы = РасчетДокументовБЗК.ДобавитьСтрокуТаблицыСИдентефикатором(
			ТаблицыДокумента.НачисленияПерерасчет, 
			ОписаниеТаблицы);	
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПерерасчета);
	
		ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаПерерасчета.Начисление);
		Если ЗначенияРеквизитов <> Неопределено Тогда
			ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаПерерасчета.Дополнительно);
			ИсходныеДанные.Вставить("КатегорияНачисления", ЗначенияРеквизитов.КатегорияНачисленияИлиНеоплаченногоВремени);
			ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗначенияРеквизитов);
			РасчетДокументовБЗК.ПоказателиВОбъект(СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], СтрокаПерерасчета, ТаблицыДокумента, ЗначенияРеквизитов.Показатели);
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаТаблицы, СтрокаПерерасчета, ЗначенияРеквизитов);
		КонецЕсли;
		
		РасчетДокументовБЗК.РаспределениеПоТерриториямУсловиямТрудаВОбъект(
			СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
			СтрокаПерерасчета, 
			Организация, 
			ТаблицыДокумента);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетЗарплатыРасширенная") 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиФинансированияЗарплатаРасширенный") Тогда
			
			РасчетДокументовБЗК.РаспределениеПоСтатьямВОбъект(
				СтрокаТаблицы[ОписаниеТаблицы.ИмяРеквизитаИдентификаторСтроки], 
				СтрокаПерерасчета, 
				ТаблицыДокумента.РаспределениеПоСтатьям);
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры

Процедура ДанныеПерерасчетаВМенеджерРасчета(ДанныеПерерасчета, МенеджерРасчета, Владелец = "НачисленияПерерасчет") Экспорт
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПерерасчета, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из ДанныеПерерасчета Цикл
		НоваяСтрока = МенеджерРасчета.СтрокаТаблицыНачислений();
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		СтрокаПерерасчетаВМенеджерРасчета(НоваяСтрока, СтрокаРасчета, ВидыРасчетаИнфо);
		НоваяСтрока.Владелец = Владелец;
	КонецЦикла; 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СкорректироватьПерерасчетыСУчетомФПД(ДанныеПерерасчетовСторно, ДанныеСотрудников, ПериодРегистрации, ИсправленныйДокумент)
	
	// Вычисляем, изменился ли ФПД сторнируемых строк и если да - делаем сторно рассчитываемым (ФиксСторно = Ложь).
	ВременнаяСсылкаПолучениеФПД = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеФПД = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеФПД);
	Для Каждого Строка Из ДанныеПерерасчетовСторно Цикл
		ДанныеСотрудника = ДанныеСотрудников[Строка.Сотрудник];
		НоваяСтрока = НачисленияНаборПолучениеФПД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.Сторно = Ложь; // Вводим "обычную" запись, чтобы выяснить ее новый ФПД.
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеФПД;
	КонецЦикла;
	
	НачисленияНаборПолучениеФПД.Записать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылкаПолучениеФПД);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСторно.Сотрудник КАК Сотрудник,
		|	НачисленияСторно.ВидРасчета КАК ВидРасчета,
		|	НачисленияСторно.ПериодДействия КАК ПериодДействия,
		|	НачисленияСторно.Сторно КАК Сторно,
		|	НачисленияСторно.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияСторно.ПериодДействияКонец КАК ПериодДействияКонец,
		|	СУММА(РАЗНОСТЬДАТ(Слева.ПериодДействияНачало, Слева.ПериодДействияКонец, СЕКУНДА) + 1) КАК Продолжительность
		|ПОМЕСТИТЬ ВТПериодыСторноПредварительно
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Сторно = ИСТИНА
		|				И СторнируемыйДокумент = &ИсправленныйДокумент) КАК НачисленияСторно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ФактическийПериодДействия(
		|				Сторно = ИСТИНА
		|					И СторнируемыйДокумент = &ИсправленныйДокумент) КАК Слева
		|		ПО (Слева.Сотрудник = НачисленияСторно.Сотрудник)
		|			И (Слева.ВидРасчета = НачисленияСторно.ВидРасчета)
		|			И (Слева.ПериодДействияНачало <= НачисленияСторно.ПериодДействияКонец)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСторно.Сотрудник,
		|	НачисленияСторно.ВидРасчета,
		|	НачисленияСторно.ПериодДействия,
		|	НачисленияСторно.Сторно,
		|	НачисленияСторно.ПериодДействияНачало,
		|	НачисленияСторно.ПериодДействияКонец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыСторно.Сотрудник КАК Сотрудник,
		|	ПериодыСторно.ВидРасчета КАК ВидРасчета,
		|	ПериодыСторно.ПериодДействия КАК ПериодДействия,
		|	ПериодыСторно.Сторно КАК Сторно,
		|	МИНИМУМ(ПериодыСторно.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	МАКСИМУМ(ПериодыСторно.ПериодДействияКонец) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТПериодыСторноОбъединенные
		|ИЗ
		|	ВТПериодыСторноПредварительно КАК ПериодыСторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыСторно.Сотрудник,
		|	ПериодыСторно.ВидРасчета,
		|	ПериодыСторно.ПериодДействия,
		|	ПериодыСторно.Сторно,
		|	ДОБАВИТЬКДАТЕ(ПериодыСторно.ПериодДействияКонец, СЕКУНДА, -ПериодыСторно.Продолжительность)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ЕСТЬNULL(НачисленияСторно.Сторно
		|			И НачисленияСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
		|			И НачисленияСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец, ЛОЖЬ) КАК Сторнировано,
		|	ЕСТЬNULL(НачисленияСторно.Сторно
		|			И (НачисленияСторно.ПериодДействияНачало <> Начисления.ПериодДействияНачало
		|				ИЛИ НачисленияСторно.ПериодДействияКонец <> Начисления.ПериодДействияКонец), ЛОЖЬ) КАК СторнированоЧастично,
		|	НачисленияФактическийПериодДействия.ВидРасчета ЕСТЬ NULL КАК Вытеснено
		|ПОМЕСТИТЬ ВТНовыйФПД
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК НачисленияФактическийПериодДействия
		|		ПО Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСторноОбъединенные КАК НачисленияСторно
		|		ПО (НачисленияСторно.Сотрудник = Начисления.Сотрудник)
		|			И (НачисленияСторно.ВидРасчета = Начисления.ВидРасчета)
		|			И (НачисленияСторно.ПериодДействияНачало <= Начисления.ПериодДействияКонец)
		|			И (НачисленияСторно.ПериодДействияКонец >= Начисления.ПериодДействияНачало)
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|	НачисленияФактическийПериодДействия.Сторно КАК Сторно,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТСтарыйФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &ИсправленныйДокумент) КАК НачисленияФактическийПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = &ИсправленныйДокумент)
		|			И (Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыйФПД.НомерСтроки КАК НомерСтроки,
		|	НовыйФПД.ДатаНачала КАК ПериодДействияНачало,
		|	НовыйФПД.ДатаОкончания КАК ПериодДействияКонец,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА НовыйФПД.ДатаНачала = СтарыйФПД.ДатаНачала
		|						И НовыйФПД.ДатаОкончания = СтарыйФПД.ДатаОкончания
		|					ИЛИ НовыйФПД.ВидРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ФПДСовпадает
		|ПОМЕСТИТЬ ВТПоверочныйФПД
		|ИЗ
		|	ВТНовыйФПД КАК НовыйФПД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыйФПД КАК СтарыйФПД
		|		ПО НовыйФПД.Сотрудник = СтарыйФПД.Сотрудник
		|			И НовыйФПД.ВидРасчета = СтарыйФПД.ВидРасчета
		|			И (НЕ СтарыйФПД.Сторно)
		|			И НовыйФПД.ПериодДействияКонец = СтарыйФПД.ПериодДействияКонец
		|			И НовыйФПД.ПериодДействияНачало = СтарыйФПД.ПериодДействияНачало
		|			И НовыйФПД.ДатаНачала <= СтарыйФПД.ДатаОкончания
		|			И НовыйФПД.ДатаОкончания >= СтарыйФПД.ДатаНачала
		|ГДЕ
		|	НЕ НовыйФПД.Вытеснено
		|
		|СГРУППИРОВАТЬ ПО
		|	НовыйФПД.НомерСтроки,
		|	НовыйФПД.ДатаНачала,
		|	НовыйФПД.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки - 1 КАК ИндексСтроки,
		|	ВЫБОР
		|		КОГДА ПоверочныйФПД.ФПДСовпадает
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ ЕСТЬNULL(ПоверочныйФПД.ПериодДействияНачало, Начисления.ПериодДействияНачало)
		|	КОНЕЦ КАК ПериодДействияНачало,
		|	ВЫБОР
		|		КОГДА ПоверочныйФПД.ФПДСовпадает
		|			ТОГДА Начисления.ПериодДействияКонец
		|		ИНАЧЕ ЕСТЬNULL(ПоверочныйФПД.ПериодДействияКонец, Начисления.ПериодДействияКонец)
		|	КОНЕЦ КАК ПериодДействияКонец,
		|	Начисления.СторнированоЧастично КАК СторнированоЧастично,
		|	ЕСТЬNULL(ПоверочныйФПД.ФПДСовпадает, ИСТИНА) КАК СтрокаНеИзменилась
		|ИЗ
		|	ВТНовыйФПД КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоверочныйФПД КАК ПоверочныйФПД
		|		ПО Начисления.НомерСтроки = ПоверочныйФПД.НомерСтроки
		|ГДЕ
		|	НЕ Начисления.Сторнировано
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.НомерСтроки - 1";
	
	ИнтервалыПерерасчета = Запрос.Выполнить().Выбрать();
	ДанныеПерерасчетов = НовыйДанныеПерерасчета();
	
	Пока ИнтервалыПерерасчета.Следующий() Цикл
		НоваяСтрокаПерерасчета = ДобавитьСтрокуДанныхПерерасчета(ДанныеПерерасчетов);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, ДанныеПерерасчетовСторно[ИнтервалыПерерасчета.ИндексСтроки]);
		НоваяСтрокаПерерасчета.ДатаНачала = ИнтервалыПерерасчета.ПериодДействияНачало;
		НоваяСтрокаПерерасчета.ДатаОкончания = ИнтервалыПерерасчета.ПериодДействияКонец;
		// Если ФПД сторнируемой строки изменился - делаем ее сторно рассчитываемым.
		Если Не ИнтервалыПерерасчета.СтрокаНеИзменилась Или ИнтервалыПерерасчета.СторнированоЧастично Тогда
			НоваяСтрокаПерерасчета.ФиксСторно = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	НачисленияНаборПолучениеФПД.Очистить();
	НачисленияНаборПолучениеФПД.Записать();
	
	Возврат ДанныеПерерасчетов;
	
КонецФункции

Функция ДополнитьИсходныеНачисленияСовместителями(ИсходныеНачисления, Организация, ДокументСсылка)
	ДобавленныеНачисления = Новый Массив();
	
	НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	// Для получения уникальных сотрудников
	УникальныеСотрудники = Новый Соответствие;
	Для Каждого СтрокаНачисления Из ИсходныеНачисления Цикл
		УникальныеСотрудники[СтрокаНачисления.Сотрудник] = НеОпределено;
	КонецЦикла;
	// Массив сотрудников для получения ссылок на физических лиц
	Сотрудники = Новый Массив;
	Для Каждого ЭлементСоответствия Из УникальныеСотрудники Цикл
		Сотрудники.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	Для Каждого СтрокаНачисления Из ИсходныеНачисления Цикл
		НоваяСтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, СтрокаНачисления);
		НоваяСтрокаНабора.ВидРасчета = СтрокаНачисления.Начисление;
		НоваяСтрокаНабора.Организация = Организация;
		НоваяСтрокаНабора.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачисления.Сотрудник];
		НоваяСтрокаНабора.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
		НоваяСтрокаНабора.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
	КонецЦикла;
	ДобавленныеЗаписи = Новый Массив;
	РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(НаборЗаписей, ДобавленныеЗаписи);
	Для Каждого ДобавленнаяЗапись Из ДобавленныеЗаписи Цикл
		НоваяСтрока = ДобавитьСтрокуИсходныхДанныхДляПерерасчета(ИсходныеНачисления);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавленнаяЗапись);
		НоваяСтрока.Начисление = ДобавленнаяЗапись.ВидРасчета;
		НоваяСтрока.ДатаНачала = ДобавленнаяЗапись.ПериодДействияНачало;
		НоваяСтрока.ДатаОкончания = ДобавленнаяЗапись.ПериодДействияКонец;
		ДобавленныеНачисления.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат ДобавленныеНачисления;
КонецФункции	

Функция ТребуетсяДополнятьСовместителями(ИсходныеНачисления)
	ВидыРасчетов = ОбщегоНазначения.ВыгрузитьКолонку(ИсходныеНачисления, "Начисление", Истина);
	// ...узнаем их свойства...
	СвойстваНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетов,
		"ДублироватьДляВнутреннихСовместителейИПодработок, ДублироватьДляПодработок");
	ТребуетсяДополнениеСовместителями = Ложь;
	ТребуетсяДополнениеПодработками = Ложь;
	// ...вычислим ТребуетсяДополнениеСовместителями и ТребуетсяДополнениеПодработками
	Для Каждого Элемент Из СвойстваНачислений Цикл
		СвойстваНачисления = Элемент.Значение;
		ТребуетсяДополнениеСовместителями = ТребуетсяДополнениеСовместителями Или СвойстваНачисления.ДублироватьДляВнутреннихСовместителейИПодработок;
		ТребуетсяДополнениеПодработками = ТребуетсяДополнениеПодработками Или СвойстваНачисления.ДублироватьДляПодработок Или СвойстваНачисления.ДублироватьДляВнутреннихСовместителейИПодработок;
	КонецЦикла;
	
	Возврат (ТребуетсяДополнениеПодработками И ПолучитьФункциональнуюОпцию("ИспользоватьПодработки"))
		Или ТребуетсяДополнениеСовместителями;	
КонецФункции	

Функция СторноЗаписи(НачисленияСотрудников, ДанныеСотрудников, ПериодРегистрации)
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка,,Ложь);
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияСотрудников, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	Для Каждого СтрокаНачисления Из НачисленияСотрудников Цикл
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
	КонецЦикла;	
	
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	СторноЗаписи.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	СторноЗаписи.Сортировать("Сотрудник,ВидРасчета,ПериодРегистрации,ПериодДействияНачалоСторно,Результат", Новый СравнениеЗначений());
	СторноЗаписи.ЗаполнитьЗначения(Ложь, "ФиксРасчет, ФиксРасчетВремени");
	
	ПерваяЗапись = Истина;
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		// Записи с нулевыми идентификаторами - "технические" записи подработок и внутренних совместителей.
		Если СтрокаСторно.ИдентификаторСтроки = 0 Тогда
			СтрокаСторно.НулевоеСторно = Истина;
		КонецЕсли;
		Если ПерваяЗапись Тогда
			ПерваяЗапись = Ложь;
		Иначе
			Если  СтрокаСторно.Сотрудник = ПредыдущаяСтрока.Сотрудник
				И СтрокаСторно.ВидРасчета = ПредыдущаяСтрока.ВидРасчета
				И СтрокаСторно.ПериодРегистрации = ПредыдущаяСтрока.ПериодРегистрации
				И СтрокаСторно.ПериодДействияНачалоСторно = ПредыдущаяСтрока.ПериодДействияНачалоСторно
				И СтрокаСторно.Результат = - ПредыдущаяСтрока.Результат Тогда
				// Обе строки - "нулевое" сторно.
				СтрокаСторно.НулевоеСторно = Истина;
				ПредыдущаяСтрока.НулевоеСторно = Истина;
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаСторно;
	КонецЦикла;
		
	НачисленияНабор.Очистить();
	НачисленияНабор.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
	НачисленияНабор.Записать();
	
	Возврат СторноЗаписи;
КонецФункции	

Процедура ДополнитьНачисленияЗаднимЧисломСторноЗаписями(НачисленияЗаднимЧислом, СторноЗаписи, ВременныйРегистраторПерерасчета)
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаСторно);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Истина;
		СтрокаЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
КонецПроцедуры	

Функция НаборДляЗаполненияПерерасчета(НачисленияЗаднимЧислом, СторноЗаписи, ДанныеСотрудников, ВременныйРегистраторПерерасчета)
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистраторПерерасчета);
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	Возврат НаборДляЗаполненияПерерасчета;
КонецФункции

Функция НачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации, НачисленияЗаднимЧислом, ВременныйРегистратор, СторнируемыеНачисления = Неопределено)
	ДанныеПерерасчетов = НовыйДанныеПерерасчета();
	Если СторнируемыеНачисления <> Неопределено Тогда
		ДополнитьТаблицуДанныхПерерасчета(ДанныеПерерасчетов, СторнируемыеНачисления);
		Для Каждого Строка Из ДанныеПерерасчетов Цикл
			НоваяСтрока = НачисленияЗаднимЧислом.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидРасчета = Строка.Начисление;
			НоваяСтрока.Регистратор = ВременныйРегистратор;
			НоваяСтрока.РегистраторПоказателей = ВременныйРегистратор;
			НоваяСтрока.ИдентификаторСтрокиПоказателей = Строка.ИдентификаторСтрокиВидаРасчета;
			НоваяСтрока.НулевоеСторно = Строка.Результат = 0;
			НоваяСтрока.ПериодРегистрации = Строка.ПериодДействия;
			НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = Строка.ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияЗаднимЧислом", НачисленияЗаднимЧислом);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ТипыОснований", РасчетЗарплатыРасширенный.ТипыОснованийПлановыхНачислений());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НачисленияЗаднимЧислом.ВидРасчета КАК ПланВидовРасчета.Начисления) КАК ВидРасчета,
		|	НачисленияЗаднимЧислом.ДокументОснование КАК ДокументОснование,
		|	НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
		|	НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
		|	НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияЗаднимЧислом.ИсходныйДокумент КАК ИсходныйДокумент,
		|	НачисленияЗаднимЧислом.РегистраторПоказателей КАК РегистраторПоказателей,
		|	НачисленияЗаднимЧислом.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
		|	НачисленияЗаднимЧислом.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияЗаднимЧислом.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	НачисленияЗаднимЧислом.Сторно КАК Сторно,
		|	НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
		|	НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТНачисленияЗаднимЧислом
		|ИЗ
		|	&НачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополняющиеНачисления.ВидРасчета КАК ВидРасчета,
		|	ДополняющиеНачисления.ДокументОснование КАК ДокументОснование,
		|	ДополняющиеНачисления.Сотрудник КАК Сотрудник,
		|	ДополняющиеНачисления.Регистратор КАК Регистратор,
		|	ДополняющиеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДополняющиеНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДополняющиеНачисления.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК НулевоеСторно,
		|	ДополняющиеНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ДополняющиеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ДополняющиеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ДополняющиеНачисления.ФиксСторно КАК ФиксСторно,
		|	ДополняющиеНачисления.ПериодДействия КАК ПериодДействия,
		|	ДополняющиеНачисления.Результат КАК Результат
		|ПОМЕСТИТЬ ВТНачисленияЗаднимЧисломДополняющие
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ДополняющиеНачисления
		|		ПО (ДополняющиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
		|			И (ДополняющиеНачисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
		|			И (ДополняющиеНачисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц
		|				ИЛИ ДополняющиеНачисления.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
		|					И ДополняющиеНачисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|					И ДополняющиеНачисления.ВидРасчета.ПоддерживаетНесколькоПлановыхНачислений)
		|			И (ДополняющиеНачисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
		|			И (ДополняющиеНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторнирующиеНачисления
		|		ПО (СторнирующиеНачисления.ВидРасчета = ДополняющиеНачисления.ВидРасчета)
		|			И (СторнирующиеНачисления.Сотрудник = ДополняющиеНачисления.Сотрудник)
		|			И (СторнирующиеНачисления.Результат = -ДополняющиеНачисления.Результат)
		|			И (СторнирующиеНачисления.СторнируемыйДокумент = ДополняющиеНачисления.Регистратор)
		|ГДЕ
		|	НЕ ДополняющиеНачисления.Сторно
		|	И НЕ ДополняющиеНачисления.ФиксСторно
		|	И НЕ ДополняющиеНачисления.ВидРасчета ЕСТЬ NULL
		|	И СторнирующиеНачисления.Регистратор ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Результат КАК Результат,
		|	Начисления.ФиксСторно КАК ФиксСторно,
		|	Начисления.Сторно КАК Сторно,
		|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	ВЫБОР
		|		КОГДА Начисления.РассчитыватьПоРазовымНачислениямДокумента
		|			ТОГДА НЕ Начисления.РегистраторРазовогоНачисления = НачисленияЗаднимЧислом.РегистраторРазовогоНачисления
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УточнятьПоНаличиюРазовогоНачисления,
		|	НачисленияЗаднимЧислом.ЭтоДополняющееНачисление КАК ЭтоДополняющееНачисление,
		|	Начисления.ИсходныйДокумент КАК ИсходныйДокумент
		|ПОМЕСТИТЬ ВТВозможныеЗаписиДляПерерасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияЗаднимЧислом.ВидРасчета КАК ВидРасчета,
		|		НачисленияЗаднимЧислом.ДокументОснование КАК ДокументОснование,
		|		НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
		|		НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
		|		НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|		НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		НачисленияЗаднимЧислом.Сторно КАК Сторно,
		|		НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
		|		НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
		|		НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
		|		НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец,
		|		НачисленияЗаднимЧислом.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|		НачисленияЗаднимЧислом.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|		ЛОЖЬ КАК ЭтоДополняющееНачисление,
		|		НачисленияЗаднимЧислом.ИсходныйДокумент КАК ИсходныйДокумент
		|	ИЗ
		|		ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		НачисленияЗаднимЧисломДополняющие.ВидРасчета,
		|		НачисленияЗаднимЧисломДополняющие.ДокументОснование,
		|		НачисленияЗаднимЧисломДополняющие.Сотрудник,
		|		НачисленияЗаднимЧисломДополняющие.Регистратор,
		|		НачисленияЗаднимЧисломДополняющие.СторнируемыйДокумент,
		|		НачисленияЗаднимЧисломДополняющие.ИдентификаторСтроки,
		|		НачисленияЗаднимЧисломДополняющие.Сторно,
		|		НачисленияЗаднимЧисломДополняющие.НулевоеСторно,
		|		НачисленияЗаднимЧисломДополняющие.ПериодРегистрации,
		|		НачисленияЗаднимЧисломДополняющие.ПериодДействияНачало,
		|		НачисленияЗаднимЧисломДополняющие.ПериодДействияКонец,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		ИСТИНА,
		|		НачисленияЗаднимЧисломДополняющие.ИсходныйДокумент
		|	ИЗ
		|		ВТНачисленияЗаднимЧисломДополняющие КАК НачисленияЗаднимЧисломДополняющие) КАК НачисленияЗаднимЧислом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисления
		|		ПО (ВедущиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияЗаднимЧислом КАК СторноНачисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
		|				ПО СторноНачисления.ВидРасчета = ПланВидовРасчетаНачисления.Ссылка
		|			ПО Начисления.ВидРасчета = СторноНачисления.ВидРасчета
		|				И (ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(СторноНачисления.ДокументОснование) В (&ТипыОснований)
		|						ТОГДА Начисления.ДокументОснование = СторноНачисления.ДокументОснование
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|				И Начисления.Сотрудник = СторноНачисления.Сотрудник
		|				И Начисления.ПериодДействияНачало = СторноНачисления.ПериодДействияНачало
		|				И (НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) = НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ))
		|				И (ВЫБОР
		|					КОГДА СторноНачисления.РассчитыватьПоРазовымНачислениямДокумента
		|						ТОГДА Начисления.РегистраторРазовогоНачисления = СторноНачисления.РегистраторРазовогоНачисления
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|				И (СторноНачисления.Сторно)
		|				И (НЕ Начисления.Сторно)
		|		ПО (Начисления.ВидРасчета = ВедущиеНачисления.Ссылка)
		|			И (Начисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
		|			И (Начисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
		|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (ВЫБОР
		|				КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
		|					ТОГДА НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.ПериодДействияКонец
		|							И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.ПериодДействияНачало
		|				ИНАЧЕ НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
		|						И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
		|			КОНЕЦ)
		|			И (СторноНачисления.ВидРасчета ЕСТЬ NULL)
		|ГДЕ
		|	НЕ НачисленияЗаднимЧислом.НулевоеСторно
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДокументОснование,
		|	Начисления.ПериодДействия,
		|	Начисления.ПериодРегистрации,
		|	Начисления.ФиксСторно,
		|	Начисления.Сторно,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.Результат,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления,
		|	ВЫБОР
		|		КОГДА Начисления.РассчитыватьПоРазовымНачислениямДокумента
		|			ТОГДА НЕ Начисления.РегистраторРазовогоНачисления = НачисленияЗаднимЧислом.РегистраторРазовогоНачисления
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НачисленияЗаднимЧислом.ЭтоДополняющееНачисление,
		|	Начисления.ИсходныйДокумент
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачисленияЗаднимЧисломДополняющие.Регистратор,
		|	НачисленияЗаднимЧисломДополняющие.ИдентификаторСтроки,
		|	НачисленияЗаднимЧисломДополняющие.Сотрудник,
		|	НачисленияЗаднимЧисломДополняющие.ВидРасчета,
		|	НачисленияЗаднимЧисломДополняющие.ДокументОснование,
		|	НачисленияЗаднимЧисломДополняющие.ПериодДействия,
		|	НачисленияЗаднимЧисломДополняющие.ПериодРегистрации,
		|	НачисленияЗаднимЧисломДополняющие.Результат,
		|	НачисленияЗаднимЧисломДополняющие.ФиксСторно,
		|	НачисленияЗаднимЧисломДополняющие.Сторно,
		|	НачисленияЗаднимЧисломДополняющие.СторнируемыйДокумент,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	НачисленияЗаднимЧисломДополняющие.ИсходныйДокумент
		|ИЗ
		|	ВТНачисленияЗаднимЧисломДополняющие КАК НачисленияЗаднимЧисломДополняющие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК Регистратор,
		|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВозможныеЗаписиДляПерерасчета.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.Сотрудник КАК Сотрудник,
		|	ВозможныеЗаписиДляПерерасчета.ВидРасчета КАК ВидРасчета,
		|	ВозможныеЗаписиДляПерерасчета.ДокументОснование КАК ДокументОснование,
		|	ВозможныеЗаписиДляПерерасчета.ПериодДействия КАК ПериодДействия,
		|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации КАК ПериодРегистрации,
		|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК СторнируемыйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	МИНИМУМ(ВозможныеЗаписиДляПерерасчета.УточнятьПоНаличиюРазовогоНачисления) КАК УточнятьПоНаличиюРазовогоНачисления,
		|	МАКСИМУМ(ВозможныеЗаписиДляПерерасчета.ЭтоДополняющееНачисление) КАК ЭтоДополняющееНачисление
		|ПОМЕСТИТЬ ВТЗатронутыеНачисления
		|ИЗ
		|	ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозможныеЗаписиДляПерерасчета КАК ВтораяПоловинаСторноПары
		|		ПО ВозможныеЗаписиДляПерерасчета.Сотрудник = ВтораяПоловинаСторноПары.Сотрудник
		|			И ВозможныеЗаписиДляПерерасчета.ВидРасчета = ВтораяПоловинаСторноПары.ВидРасчета
		|			И ВозможныеЗаписиДляПерерасчета.ПериодДействия = ВтораяПоловинаСторноПары.ПериодДействия
		|			И (ВЫБОР
		|				КОГДА ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента
		|					ТОГДА ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления = ВтораяПоловинаСторноПары.РегистраторРазовогоНачисления
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ВозможныеЗаписиДляПерерасчета.ДокументОснование) В (&ТипыОснований)
		|					ТОГДА ВозможныеЗаписиДляПерерасчета.ДокументОснование = ВтораяПоловинаСторноПары.ДокументОснование
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВозможныеЗаписиДляПерерасчета.Результат = -ВтораяПоловинаСторноПары.Результат)
		|			И (ВозможныеЗаписиДляПерерасчета.ФиксСторно
		|					И ВозможныеЗаписиДляПерерасчета.СторнируемыйДокумент = ВтораяПоловинаСторноПары.Регистратор
		|				ИЛИ НЕ ВозможныеЗаписиДляПерерасчета.ФиксСторно
		|					И ВозможныеЗаписиДляПерерасчета.Регистратор = ВтораяПоловинаСторноПары.СторнируемыйДокумент)
		|ГДЕ
		|	ВтораяПоловинаСторноПары.Сотрудник ЕСТЬ NULL
		|	И НЕ ВозможныеЗаписиДляПерерасчета.Сторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозможныеЗаписиДляПерерасчета.Регистратор,
		|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки,
		|	ВозможныеЗаписиДляПерерасчета.ИсходныйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.Сотрудник,
		|	ВозможныеЗаписиДляПерерасчета.ВидРасчета,
		|	ВозможныеЗаписиДляПерерасчета.ДокументОснование,
		|	ВозможныеЗаписиДляПерерасчета.ПериодДействия,
		|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации,
		|	ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента,
		|	ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления,
		|	ВозможныеЗаписиДляПерерасчета.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗатронутыеНачисления.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ЗатронутыеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ЗатронутыеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДляПолученияПериодовРегистрацииВремени
		|ИЗ
		|	ВТЗатронутыеНачисления КАК ЗатронутыеНачисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачисленияЗаднимЧислом.Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ)
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗатронутыеНачисления.Сотрудник КАК Сотрудник,
		|	ЗатронутыеНачисления.ВидРасчета КАК ВидРасчета,
		|	ЗатронутыеНачисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТРазличныеЗатронутыеНачисления
		|ИЗ
		|	ВТЗатронутыеНачисления КАК ЗатронутыеНачисления";
	Запрос.Выполнить();
	
	ОписаниеНабораСотрудников = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
	ОписаниеНабораСотрудников.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
	ОписаниеНабораСотрудников.ТаблицаИсточникДанных = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(
		Запрос.МенеджерВременныхТаблиц, ПериодРегистрации, ОписаниеНабораСотрудников);
	
	ОписаниеТаблицыФильтра = МенеджерДанныхУчетаВремени.ОписаниеФильтраВТИнтервалыДействияИсточниковДанныхУчетаВремени();
	ОписаниеТаблицыФильтра.ИмяТаблицы = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени.СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремени(ОписаниеТаблицыФильтра);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПериоды.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	ВЫБОР
		|		КОГДА Начисления.ДокументОснование ССЫЛКА Документ.НазначениеПлановогоНачисления
		|				ИЛИ Начисления.ДокументОснование ССЫЛКА Документ.Совмещение
		|			ТОГДА Начисления.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	Начисления.ВидРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.Результат КАК Результат,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.РезультатФСС КАК РезультатФСС,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоДней, 0) КАК ОплаченоДней,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоЧасов, 0) КАК ОплаченоЧасов,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
		|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериодСторноЗаписей,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
		|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремениСторноЗаписей,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафикСторноЗаписей,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы) КАК ГрафикРаботыЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма) КАК ГрафикРаботыНормаЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ВремяВведеноСводно, Начисления.ВремяВЦеломЗаПериод) КАК ВремяВЦеломЗаПериодЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени, Начисления.ПериодРегистрацииВремени) КАК ПериодРегистрацииВремениЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени, Начисления.ПериодРегистрацииНормыВремени) КАК ПериодРегистрацииНормыВремениЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик, Начисления.ОбщийГрафик) КАК ОбщийГрафикЗаписейПерерасчета,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
		|	Начисления.Организация КАК Организация,
		|	НачисленияПериоды.Регистратор КАК Регистратор,
		|	НачисленияПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПериоды.ИсходныйДокумент КАК ИсходныйДокумент,
		|	Показатели.Показатель КАК Показатель,
		|	ЗначенияПоказателейНачислений.Значение КАК Значение,
		|	Начисления.РанееНачислено КАК РанееНачислено,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	НачисленияПериоды.УточнятьПоНаличиюРазовогоНачисления КАК УточнятьПоНаличиюРазовогоНачисления
		|ИЗ
		|	ВТЗатронутыеНачисления КАК НачисленияПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = НачисленияПериоды.Регистратор)
		|			И (Начисления.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|			И (Начисления.Результат <> 0
		|				ИЛИ НЕ НачисленияПериоды.ЭтоДополняющееНачисление)
		|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
		|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПериоды.Сотрудник)
		|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|		ПО (Показатели.Ссылка = НачисленияПериоды.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
		|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПериоды.Регистратор)
		|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
		|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Регистратор = НачисленияПериоды.Регистратор)
		|			И (ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета.ОчередностьРасчета,
		|	Начисления.ВидРасчета,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ Начисления.БазовыйПериодНачало
		|	КОНЕЦ,
		|	НачисленияПериоды.Регистратор,
		|	НачисленияПериоды.ИдентификаторСтроки,
		|	РассчитыватьПоРазовымНачислениямДокумента,
		|	РегистраторРазовогоНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПерерасчета.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ВидРасчета.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	НачисленияПерерасчета.Сторно КАК Сторно,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ГрафикРаботы
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы)
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ГрафикРаботыНорма
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма)
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ВремяВЦеломЗаПериод
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ВремяВведеноСводно, Начисления.ВремяВЦеломЗаПериод)
		|	КОНЕЦ КАК ВремяВЦеломЗаПериод,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ПериодРегистрацииВремени
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени
		|	КОНЕЦ КАК ПериодРегистрацииВремени,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ПериодРегистрацииНормыВремени
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени
		|	КОНЕЦ КАК ПериодРегистрацииНормыВремени,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ОбщийГрафик
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик
		|	КОНЕЦ КАК ОбщийГрафик,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
		|	НачисленияПерерасчета.НулевоеСторно
		|		ИЛИ НЕ ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL КАК НулевоеСторно,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ФиксСтрока КАК ФиксСтрока,
		|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
		|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
		|	Начисления.ФиксРасчет КАК ФиксРасчет,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	НачисленияПерерасчета.РегистраторПоказателей КАК Регистратор,
		|	НачисленияПерерасчета.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтроки,
		|	Начисления.ИсходныйДокумент КАК ИсходныйДокумент,
		|	Показатели.Показатель КАК Показатель,
		|	ЗначенияПоказателейНачислений.Значение КАК Значение,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	Начисления.Результат КАК Результат,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.РезультатФСС КАК РезультатФСС,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоДней, 0) КАК ОплаченоДней,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоЧасов, 0) КАК ОплаченоЧасов,
		|	Начисления.РанееНачислено КАК РанееНачислено,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
		|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериодСторноЗаписей,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
		|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремениСторноЗаписей,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафикСторноЗаписей
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияПерерасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазличныеЗатронутыеНачисления КАК ЗатронутыеНачисления
		|		ПО НачисленияПерерасчета.Сотрудник = ЗатронутыеНачисления.Сотрудник
		|			И НачисленияПерерасчета.ВидРасчета = ЗатронутыеНачисления.ВидРасчета
		|			И (НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ) = ЗатронутыеНачисления.ПериодДействия)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = НачисленияПерерасчета.Регистратор)
		|			И (Начисления.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
		|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПерерасчета.Сотрудник)
		|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|		ПО (Показатели.Ссылка = НачисленияПерерасчета.ВидРасчета)
		|			И (ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
		|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПерерасчета.РегистраторПоказателей)
		|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
		|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтрокиПоказателей)
		|			И (ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Регистратор = НачисленияПерерасчета.Регистратор)
		|			И (ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
		|ГДЕ
		|	НЕ(Начисления.ВидРасчета.ТребуетсяРасчетБазы
		|				И НЕ Начисления.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.ПериодРегистрации,
		|	Начисления.ВидРасчета,
		|	Начисления.ДокументОснование,
		|	Начисления.Сторно УБЫВ,
		|	Начисления.ПериодДействияНачало,
		|	НачисленияПерерасчета.Регистратор,
		|	НачисленияПерерасчета.ИдентификаторСтроки,
		|	Показатели.НомерСтроки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПоказателиЗатронутыхНачислений = РезультатЗапроса[0].Выгрузить();
	ПоказателиНачисленийЗаднимЧислом = РезультатЗапроса[1].Выгрузить();
	
	РаспределениеНачислений = ИсправлениеДокументовРасчетЗарплаты.ПолучитьРаспределениеНачислений(
		ПоказателиЗатронутыхНачислений, 
		ПоказателиНачисленийЗаднимЧислом, 
		ВременныйРегистратор);
	
	// Свойства текущей собираемой строки перерасчета.
	Текущее = Новый Структура("ИдентификаторСтроки, Сотрудник, Регистратор, ПериодДействияНачало");
	
	// Сборка строк перерасчета по начислениям задним числом.
	Для Каждого Строка Из ПоказателиНачисленийЗаднимЧислом Цикл
		Если Текущее.ИдентификаторСтроки <> Строка.ИдентификаторСтроки
			Или Текущее.Сотрудник <> Строка.Сотрудник
			Или Текущее.Регистратор <> Строка.Регистратор
			Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало Тогда
			
			НовыйПерерасчет = ДобавитьСтрокуДанныхПерерасчета(ДанныеПерерасчетов);
			ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Строка);
			НовыйПерерасчет.ДатаНачала = Строка.ПериодДействияНачало;
			НовыйПерерасчет.ДатаОкончания = Строка.ПериодДействияКонец;
			НовыйПерерасчет.Начисление = Строка.ВидРасчета;
			
			Если Строка.НулевоеСторно Тогда
				НовыйПерерасчет.Результат = 0;
				НовыйПерерасчет.РезультатВТомЧислеЗаСчетФБ = 0;
				НовыйПерерасчет.РезультатФСС = 0;
				НовыйПерерасчет.РанееНачислено = 0;
				НовыйПерерасчет.ОтработаноДней = 0;
				НовыйПерерасчет.ОтработаноЧасов = 0;
				НовыйПерерасчет.ОплаченоДней = 0;
				НовыйПерерасчет.ОплаченоЧасов = 0;
				НовыйПерерасчет.ФиксСторно = Истина;
			Иначе
				
				Если НовыйПерерасчет.Сторно
					И НовыйПерерасчет.ДатаНачала = НачалоМесяца(НовыйПерерасчет.ДатаНачала)
					И НовыйПерерасчет.ДатаОкончания = КонецМесяца(НовыйПерерасчет.ДатаОкончания) Тогда
					ИсправлениеДокументовРасчетЗарплаты.ЗаполнитьКакФиксСторно(НовыйПерерасчет, Строка);
				КонецЕсли;

				// Прикладываем распределение результатов начислений.
				ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет,
					РаспределениеНачислений.ПоСтатьямФинансирования, Строка.Регистратор, Строка.ИдентификаторСтроки);
				// Прикладываем распределение по территориям.
				ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет,
					РаспределениеНачислений.ПоТерриториямИУсловиямТруда, Строка.Регистратор, Строка.ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Показатель) Тогда
			НоваяСтрокаПоказателей = НовыйПерерасчет.Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Строка.Показатель;
			НоваяСтрокаПоказателей.Значение = Строка.Значение;
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(Текущее, Строка);
	КонецЦикла;
	
	// Новые записи затронутых (в том числе зависимых) начислений.
	НовыеНачисления = НовыйДанныеПерерасчета();
	
	// Запоминаем строки, в которых затем потребуется скорректировать период базовых начислений.
	СтрокиБазовыйПериод = Новый Соответствие;
	
	Текущее = Новый Структура("ИдентификаторСтроки, Сотрудник, Регистратор, ПериодДействияНачало,
		|ВидРасчета, ДокументОснование, РассчитыватьПоРазовымНачислениямДокумента, РегистраторРазовогоНачисления");
	
	ДобавленныеЗависимыеНачисления = Новый ТаблицаЗначений;
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("Сотрудник");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ВидРасчета");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействия");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействияНачало");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействияКонец");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("РегистраторРазовогоНачисления");
	
	ДобавленныеЗависимыеНачисления.Индексы.Добавить("Сотрудник, ПериодДействия, РегистраторРазовогоНачисления");
	
	// Сборка строк перерасчета по начислениям затронутым начислениями задним числом.
	Для Каждого Строка Из ПоказателиЗатронутыхНачислений Цикл
		// Для начислений рассчитываемых по доходам разового начисления
		// в случае если в начислениях задним числом нет учитываемого регистратора
		// проверяем не был ли добавлен перерасчет ведущего разового начисления
		// и в случае если был добавлен, то добавляем и зависимое начисление в коллекцию перерасчетов.
		// Для того что бы учесть взаимозависимости обходим начисления по возрастанию очередности.

		Если Не Строка.УточнятьПоНаличиюРазовогоНачисления
			Или ИсправлениеДокументовРасчетЗарплаты.НеобходимоДобавлятьПерерасчетЗависимого(Строка, ДобавленныеЗависимыеНачисления) Тогда
			
			СделаноСторнирование = Ложь;
			
			Если (Текущее.ИдентификаторСтроки <> Строка.ИдентификаторСтроки 
				Или Текущее.Регистратор <> Строка.Регистратор 
				Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало) Тогда
				
				Если Строка.Результат<> 0 Или Строка.РезультатВТомЧислеЗаСчетФБ<>0 Или Строка.РезультатФСС <> 0
						Или Строка.ОтработаноДней<>0 Или Строка.ОтработаноЧасов<>0 Тогда 
					// Сторнирование прежних зависимых начислений.
					СделаноСторнирование = Истина;
					НовыйПерерасчетСторно = ДобавитьСтрокуДанныхПерерасчета(ДанныеПерерасчетов);
					ЗаполнитьЗначенияСвойств(НовыйПерерасчетСторно, Строка);
					ИсправлениеДокументовРасчетЗарплаты.ЗаполнитьКакФиксСторно(НовыйПерерасчетСторно, Строка);
					
					Если Строка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
						// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
						БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Строка.БазовыйПериодНачало, Строка.БазовыйПериодКонец);
						СтрокиБазовыйПериод.Вставить(НовыйПерерасчетСторно, БазовыйПериод);
					КонецЕсли;
					                                    
					// Прикладываем распределение результатов начислений.
					ЗаполнитьРезультатРаспределенияНачисления(
						НовыйПерерасчетСторно,
						РаспределениеНачислений.ПоСтатьямФинансирования, 
						Строка.Регистратор, 
						Строка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям.
					ЗаполнитьРезультатРаспределенияПоТерриториям(
						НовыйПерерасчетСторно,
						РаспределениеНачислений.ПоТерриториямИУсловиямТруда, 
						Строка.Регистратор, 
						Строка.ИдентификаторСтроки);						
				КонецЕсли;
				
				СтрокаДобавленногоЗависимого = ДобавленныеЗависимыеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавленногоЗависимого, Строка);
					
				Если Текущее.ВидРасчета <> Строка.ВидРасчета 
					Или Текущее.ДокументОснование <> Строка.ДокументОснование 
					Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало
					Или Текущее.Сотрудник <> Строка.Сотрудник 
					Или Текущее.РассчитыватьПоРазовымНачислениямДокумента <> Строка.РассчитыватьПоРазовымНачислениямДокумента
					Или Текущее.РегистраторРазовогоНачисления <> Строка.РегистраторРазовогоНачисления Тогда
					
					НовыйПерерасчет = ДобавитьСтрокуДанныхПерерасчета(НовыеНачисления);
					ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Строка,,"СторнируемыйДокумент");
					НовыйПерерасчет.ДатаНачала = Строка.ПериодДействияНачало;
					НовыйПерерасчет.ДатаОкончания = Строка.ПериодДействияКонец;
					НовыйПерерасчет.НачалоБазовогоПериода = Строка.БазовыйПериодНачало;
					НовыйПерерасчет.ОкончаниеБазовогоПериода = КонецДня(Строка.БазовыйПериодКонец);
					НовыйПерерасчет.Начисление = Строка.ВидРасчета;
				
					НовыйПерерасчет.ПериодРегистрацииВремени = Строка.ПериодРегистрацииВремениЗаписейПерерасчета;
					НовыйПерерасчет.ГрафикРаботы = Строка.ГрафикРаботыЗаписейПерерасчета;
					НовыйПерерасчет.ГрафикРаботыНорма = Строка.ГрафикРаботыНормаЗаписейПерерасчета;
					НовыйПерерасчет.ВремяВЦеломЗаПериод = Строка.ВремяВЦеломЗаПериодЗаписейПерерасчета;;
					
					Если Строка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
						// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
						БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Строка.БазовыйПериодНачало, Строка.БазовыйПериодКонец);
						СтрокиБазовыйПериод.Вставить(НовыйПерерасчет, БазовыйПериод);
					КонецЕсли;
					
					// Прикладываем распределение результатов начислений.
					ЗаполнитьРезультатРаспределенияНачисления(
						НовыйПерерасчет,
						РаспределениеНачислений.ПоСтатьямФинансирования, 
						Строка.Регистратор, 
						Строка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям.
					ЗаполнитьРезультатРаспределенияПоТерриториям(
						НовыйПерерасчет,
						РаспределениеНачислений.ПоТерриториямИУсловиямТруда, 
						Строка.Регистратор, 
						Строка.ИдентификаторСтроки);			
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.Показатель) Тогда
				Если СделаноСторнирование Тогда 
					НоваяСтрокаПоказателей = НовыйПерерасчетСторно.Показатели.Добавить();
					НоваяСтрокаПоказателей.Показатель = Строка.Показатель;
					НоваяСтрокаПоказателей.Значение = Строка.Значение;	
				КонецЕсли;
				НоваяСтрокаПоказателей = НовыйПерерасчет.Показатели.Добавить();
				НоваяСтрокаПоказателей.Показатель = Строка.Показатель;
				НоваяСтрокаПоказателей.Значение = Строка.Значение;	
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Текущее, Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПерерасчетов.Количество() <> 0 Или НовыеНачисления.Количество() <> 0 Тогда
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
		
		// Заполняем сведения о сотрудниках в данных перерасчета.
		ДополнитьСтрокиНачислений(МенеджерРасчета, ДанныеПерерасчетов, Организация, Истина, Ложь); 
		
		// Получить значения показателей.
		ДополнитьСтрокиНачислений(МенеджерРасчета, НовыеНачисления, Организация);
		
		// Заполняем даты базовым периодом.
		Для Каждого Строка Из СтрокиБазовыйПериод Цикл
			ЗаполнитьЗначенияСвойств(Строка.Ключ, Строка.Значение);
		КонецЦикла;
	
		// Переносим строки в таблицу значений ДанныеПерерасчетов.
		ДополнитьТаблицуДанныхПерерасчета(ДанныеПерерасчетов, НовыеНачисления);
	КонецЕсли;
	
	ФиксСтроки = Новый Массив;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Если (Строка.ФиксСторно Или Строка.ФиксРасчет) И Строка.Результат <> 0 Тогда
			ФиксСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Разделение рассчитываемых и не рассчитываемых строк.
	ДанныеНеРассчитываемые = ДанныеПерерасчетов.Скопировать(ФиксСтроки);
	Для Каждого Строка Из ФиксСтроки Цикл
		ДанныеПерерасчетов.Удалить(Строка);
	КонецЦикла;
	
	// Объединение рассчитываемых строк имеющих интервалы идущие встык.
	ЗарплатаКадрыРасширенный.ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(
		ДанныеПерерасчетов, "ДатаНачала", "ДатаОкончания",, "ИдентификаторСтрокиВидаРасчета");
		
	// Фикс. строки должны идти первыми, иначе возможны ошибки при расчетах с нормой времени.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, ДанныеНеРассчитываемые);
	ДанныеПерерасчетов = ДанныеНеРассчитываемые;
	
	Возврат ДанныеПерерасчетов;
КонецФункции

Процедура ЗаполнитьРезультатРаспределенияНачисления(СтрокаПерерасчет, РаспределениеРезультатовНачислений, Регистратор, ИдентификаторСтрокиВидаРасчета)
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачислений = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРаспределенияНачислений Из СтрокиРаспределенияНачислений Цикл
		СтрокаРаспределенияПерерасчета = СтрокаПерерасчет.РаспределениеПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределенияПерерасчета, СтрокаРаспределенияНачислений);
		СтрокаРаспределенияПерерасчета.Результат = -СтрокаРаспределенияПерерасчета.Результат;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаПерерасчет, РаспределениеНачисленийПоТерриториямИУсловиямТруда, Регистратор, ИдентификаторСтрокиВидаРасчета)
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = РаспределениеНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРаспределенияНачислений Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
		СтрокаРаспределенияПерерасчета = СтрокаПерерасчет.ТерриторииУсловияТруда.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаспределенияПерерасчета, СтрокаРаспределенияНачислений);
		СтрокаРаспределенияПерерасчета.Результат = -СтрокаРаспределенияПерерасчета.Результат;
		СтрокаРаспределенияПерерасчета.РанееНачислено = -СтрокаРаспределенияПерерасчета.РанееНачислено;
	КонецЦикла;
КонецПроцедуры

Процедура ДополнитьСтрокиНачислений(МенеджерРасчета, НачисленияЗаПериод, Организация, ЗаполнятьСведенияДляРасчета = Истина, ЗаполнятьЗначенияПоказателей = Истина)
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияЗаПериод, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	Начисления = МенеджерРасчета.ТаблицаНачислений();
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из НачисленияЗаПериод Цикл
		НоваяСтрока = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(Начисления);
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		СтрокаПерерасчетаВМенеджерРасчета(НоваяСтрока, СтрокаРасчета, ВидыРасчетаИнфо);
	КонецЦикла; 
	
	Если ЗаполнятьСведенияДляРасчета Тогда
		Требования = МенеджерРасчета.ТребованияЗаполненияСведенийНачисленийДляРасчета(Истина);
		Если Не ЗаполнятьЗначенияПоказателей Тогда
			Требования.ИсточникиДанныхВремени = Ложь;
		КонецЕсли;
		МенеджерРасчета.ЗаполнитьСведенияНачисленийДляРасчета(Начисления, Требования);
	КонецЕсли;
	
	Если ЗаполнятьЗначенияПоказателей Тогда
		МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		СтрокаРезультатаРасчетаВСтрокуПерерасчета(
			КлючИЗначение.Значение, 
			КлючИЗначение.Ключ, 
			ВидыРасчетаИнфо, 
			ЗаполнятьЗначенияПоказателей,
			Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура СкопироватьЗначенияПоказателей(СтрокаПриемник, СтрокаИсточник)
	СтрокаПриемник.Показатели.Очистить();
	Для Каждого СтрокаДанныхИсточника Из СтрокаИсточник.Показатели Цикл
		СтрокаДанныхПриемника = СтрокаПриемник.Показатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхПриемника, СтрокаДанныхИсточника);
	КонецЦикла
КонецПроцедуры

Процедура СкопироватьРаспределениеПоСтатьям(СтрокаПриемник, СтрокаИсточник)
	СтрокаПриемник.РаспределениеПоСтатьям.Очистить();
	Для Каждого СтрокаДанныхИсточника Из СтрокаИсточник.РаспределениеПоСтатьям Цикл
		СтрокаДанныхПриемника = СтрокаПриемник.РаспределениеПоСтатьям.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхПриемника, СтрокаДанныхИсточника);
	КонецЦикла	
КонецПроцедуры

Процедура СкопироватьРаспределениеПоТерриториямУсловиямТруда(СтрокаПриемник, СтрокаИсточник)
	СтрокаПриемник.ТерриторииУсловияТруда.Очистить();
	Для Каждого СтрокаДанныхИсточника Из СтрокаИсточник.ТерриторииУсловияТруда Цикл
		СтрокаДанныхПриемника = СтрокаПриемник.ТерриторииУсловияТруда.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанныхПриемника, СтрокаДанныхИсточника,, "Показатели");
		
		Для Каждого СтрокаПоказателяИсточника Из СтрокаДанныхИсточника.Показатели Цикл
			СтрокаПоказателяПриемника = СтрокаДанныхПриемника.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоказателяПриемника, СтрокаПоказателяИсточника);
		КонецЦикла;
	КонецЦикла	
КонецПроцедуры

Процедура СтрокаРезультатаРасчетаВСтрокуПерерасчета(СтрокаПерерасчета, СтрокаРезультатаРасчета, ВидыРасчетаИнфо, ЗаполнятьПоказатели = Истина, ЗаполнятьПособия = Истина)
	ЗаполнитьЗначенияСвойств(СтрокаПерерасчета, СтрокаРезультатаРасчета,, "Показатели, РаспределениеПоСтатьям, ТерриторииУсловияТруда, Дополнительно");
	ЗначенияРеквизитов = ВидыРасчетаИнфо.Получить(СтрокаРезультатаРасчета.Начисление);
	Если ЗначенияРеквизитов <> Неопределено Тогда
		ИсходныеДанные = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаРезультатаРасчета.Дополнительно);
		ИсходныеДанные.Вставить("КатегорияНачисления", ЗначенияРеквизитов.КатегорияНачисленияИлиНеоплаченногоВремени);
		Если ЗаполнятьПособия Тогда
			УчетПособийСоциальногоСтрахованияРасширенный.ПеренестиРезультатыРасчетаПособия(СтрокаРезультатаРасчета, ИсходныеДанные);
		КонецЕсли;
		ЗначенияРеквизитов.Вставить("ДоступенВыборОснования", ЗначенияРеквизитов.ПоддерживаетНесколькоПлановыхНачислений);
		ЗаполнитьЗначенияСвойств(СтрокаПерерасчета, ЗначенияРеквизитов,, "Показатели");
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеФормы(СтрокаПерерасчета, СтрокаРезультатаРасчета, ЗначенияРеквизитов);
		Если ЗначенияРеквизитов.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			СтрокаПерерасчета.ПериодДействияНачало = СтрокаПерерасчета.ДатаНачала;
			СтрокаПерерасчета.ПериодДействияКонец = КонецДня(СтрокаПерерасчета.ДатаОкончания);
		Иначе
			СтрокаПерерасчета.ПериодДействияНачало = НачалоМесяца(СтрокаПерерасчета.ПериодДействия);
			СтрокаПерерасчета.ПериодДействияКонец = КонецМесяца(СтрокаПерерасчета.ПериодДействия);	
		КонецЕсли;
	КонецЕсли;
	Если ЗаполнятьПоказатели Тогда
		СкопироватьЗначенияПоказателей(СтрокаПерерасчета, СтрокаРезультатаРасчета);
	КонецЕсли;
	СкопироватьРаспределениеПоСтатьям(СтрокаПерерасчета, СтрокаРезультатаРасчета);
	СкопироватьРаспределениеПоТерриториямУсловиямТруда(СтрокаПерерасчета, СтрокаРезультатаРасчета);
КонецПроцедуры

Процедура ДополнитьТаблицуДанныхПерерасчета(ТаблицаПриемник, ТаблицаИсточник)
	Для Каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		СтрокаПриемник = ДобавитьСтрокуДанныхПерерасчета(ТаблицаПриемник);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник,, "Показатели, РаспределениеПоСтатьям, ТерриторииУсловияТруда, Дополнительно");
		СкопироватьЗначенияПоказателей(СтрокаПриемник, СтрокаИсточник);
		СкопироватьРаспределениеПоСтатьям(СтрокаПриемник, СтрокаИсточник);
		СкопироватьРаспределениеПоТерриториямУсловиямТруда(СтрокаПриемник, СтрокаИсточник);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник.Дополнительно, СтрокаИсточник.Дополнительно);
	КонецЦикла;	
КонецПроцедуры

Процедура СтрокаПерерасчетаВМенеджерРасчета(СтрокаМенеджераРасчета, СтрокаПерерасчета, ВидыРасчетаИнфо)
	ЗаполнитьЗначенияСвойств(СтрокаМенеджераРасчета, СтрокаПерерасчета,, "Показатели, РаспределениеПоСтатьям, ТерриторииУсловияТруда, Дополнительно");
	СкопироватьЗначенияПоказателей(СтрокаМенеджераРасчета, СтрокаПерерасчета);
	СкопироватьРаспределениеПоСтатьям(СтрокаМенеджераРасчета, СтрокаПерерасчета);
	СкопироватьРаспределениеПоТерриториямУсловиямТруда(СтрокаМенеджераРасчета, СтрокаПерерасчета);
	РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(
		СтрокаМенеджераРасчета,
		СтрокаПерерасчета,
		ВидыРасчетаИнфо.Получить(СтрокаПерерасчета.Начисление));
		
	ЗаполнитьЗначенияСвойств(СтрокаМенеджераРасчета.Дополнительно, СтрокаПерерасчета);	
КонецПроцедуры

Процедура ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(Начисления)	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Начисление,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = Начисления.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = Начисления.СторнируемыйДокумент)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	
	ОтборСтрок = Новый Структура("СторнируемыйДокумент, ИдентификаторСтрокиВидаРасчета");
	Пока Выборка.Следующий() Цикл
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтрокиВидаРасчета 
			Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент Тогда
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
			НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаПоказателя = НайденнаяСтрока.Показатели.Добавить();
			СтрокаПоказателя.Показатель = Выборка.Показатель;
			СтрокаПоказателя.Значение = Выборка.Значение;
		КонецЦикла;
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтрокиВидаРасчета;
		ТекущийРегистратор = Выборка.СторнируемыйДокумент;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеРезультатовНачислений.Регистратор КАК Регистратор,
	|	РаспределениеРезультатовНачислений.НомерСтроки КАК НомерСтроки,
	|	РаспределениеРезультатовНачислений.Активность КАК Активность,
	|	РаспределениеРезультатовНачислений.РегистраторИзмерение КАК РегистраторИзмерение,
	|	РаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеРезультатовНачислений.Территория КАК Территория,
	|	РаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	РаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	РаспределениеРезультатовНачислений.Результат КАК Результат
	|ИЗ
	|	РегистрСведений.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
	|ГДЕ
	|	РаспределениеРезультатовНачислений.Регистратор = &ИсправленныйДокумент";
	
	РаспределениеРезультатовНачислений = Запрос.Выполнить().Выгрузить();
	РаспределениеРезультатовНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		ТекущиеСтрокиРаспределения = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаРаспределения Из ТекущиеСтрокиРаспределения Цикл
			СтрокаРаспределенияПерерасчета = СтрокаПерерасчет.РаспределениеПоСтатьям.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаРаспределенияПерерасчета, СтрокаРаспределения);
			СтрокаРаспределенияПерерасчета.Результат = -СтрокаРаспределенияПерерасчета.Результат;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор КАК Регистратор,
	|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение КАК РегистраторИзмерение,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	РаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
	|	РаспределениеПоТерриториямУсловиямТруда.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	РаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено
	|ИЗ
	|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор = &ИсправленныйДокумент";
	
	РаспределениеПоТерриториямУсловиямТруда = Запрос.Выполнить().Выгрузить();
	РаспределениеПоТерриториямУсловиямТруда.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		СтрокиРаспределенияПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРаспределенияПоТерриториямУсловиямТруда Из СтрокиРаспределенияПоТерриториямУсловиямТруда Цикл
			СтрокаРаспределенияПерерасчета = СтрокаПерерасчет.ТерриторииУсловияТруда.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРаспределенияПерерасчета, СтрокаРаспределенияПоТерриториямУсловиямТруда);
			СтрокаРаспределенияПерерасчета.Результат = -СтрокаРаспределенияПерерасчета.Результат;
			СтрокаРаспределенияПерерасчета.РанееНачислено = -СтрокаРаспределенияПерерасчета.РанееНачислено;
			СтрокаРаспределенияПерерасчета.СуммаВычета = -СтрокаРаспределенияПерерасчета.СуммаВычета;
			СтрокаРаспределенияПерерасчета.СкидкаПоВзносам = -СтрокаРаспределенияПерерасчета.СкидкаПоВзносам;			
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры




#КонецОбласти
