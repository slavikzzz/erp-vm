
#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу с данными перерасчета на основании данных "первичных" начислений.
// Процедура предполагает стандартные структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются как сторнируемые начисления, так и записи зависимых 
// начислений ("отменяющие" сторно-записи и новые записи).
// Параметры предназначены для передачи сведений о документе, для которого формируются перерасчеты
// 		ПериодРегистрации.
//		Начисления - коллекция уже сформированных начислений.
//		НачисленияПерерасчет - таблица с перерасчетами, которая заполняется в процедуре
//		ДокументСсылка.
//
Процедура СформироватьДанныеПерерасчета(Организация, ПериодРегистрации, Начисления, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам = Неопределено, Объект = Неопределено) Экспорт
	// Удаляем из перерасчетов строки перерассчитываемых сотрудников
	УдалитьСтрокиСоответствующиеОтборуПоСотрудникам(НачисленияПерерасчет, ОтборПоСотрудникам);
	
	// Вычислим, требуется ли дополнять набор начислений строками по совместителям и подработкам
	// Получим виды расчета...
	ВидыРасчетов = Новый Массив;
	Если Не ОписаниеДокумента.ВидНачисленияВШапке  Тогда
		УникальныеВидыРасчетов = Новый Соответствие;
		Для Каждого СтрокаНачисления Из Начисления Цикл
			Если Не ЗначениеЗаполнено(СтрокаНачисления.Начисление) Тогда
				Продолжить;
			КонецЕсли;
			УникальныеВидыРасчетов[СтрокаНачисления.Начисление] = НеОпределено;
		КонецЦикла;
		Для Каждого ЭлементСоответствия Из УникальныеВидыРасчетов Цикл
			ВидыРасчетов.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
	Иначе
		ВидыРасчетов.Добавить(Объект[ОписаниеДокумента.ВидНачисленияИмя]);
	КонецЕсли;
	// ...узнаем их свойства...
	СвойстваНачислений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРасчетов,
		"ДублироватьДляВнутреннихСовместителейИПодработок, ДублироватьДляПодработок");
	ТребуетсяДополнениеСовместителями = Ложь;
	ТребуетсяДополнениеПодработками = Ложь;
	// ...вычислим ТребуетсяДополнениеСовместителями и ТребуетсяДополнениеПодработками
	Для Каждого Элемент Из СвойстваНачислений Цикл
		СвойстваНачисления = Элемент.Значение;
		ТребуетсяДополнениеСовместителями = ТребуетсяДополнениеСовместителями Или СвойстваНачисления.ДублироватьДляВнутреннихСовместителейИПодработок;
		ТребуетсяДополнениеПодработками = ТребуетсяДополнениеПодработками Или СвойстваНачисления.ДублироватьДляПодработок Или СвойстваНачисления.ДублироватьДляВнутреннихСовместителейИПодработок;
	КонецЦикла;
	
	// Если требуется дополнить набор совместителями и подработками - дополним и запомним добавленные строки.
	ДобавленныеНачисления = Новый Массив;
	Если (ТребуетсяДополнениеПодработками И ПолучитьФункциональнуюОпцию("ИспользоватьПодработки"))
		Или ТребуетсяДополнениеСовместителями Тогда
		
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		// Для получения уникальных сотрудников
		УникальныеСотрудники = Новый Соответствие;
		Для Каждого СтрокаНачисления Из Начисления Цикл
			УникальныеСотрудники[СтрокаНачисления.Сотрудник] = НеОпределено;
		КонецЦикла;
		// Массив сотрудников для получения ссылок на физических лиц
		Сотрудники = Новый Массив;
		Для Каждого ЭлементСоответствия Из УникальныеСотрудники Цикл
			Сотрудники.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		ФизическиеЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		
		Для Каждого СтрокаНачисления Из Начисления Цикл
			НоваяСтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНабора, СтрокаНачисления);
			НоваяСтрокаНабора.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрокаНабора.Организация = Организация;
			НоваяСтрокаНабора.ФизическоеЛицо = ФизическиеЛицаСотрудников[СтрокаНачисления.Сотрудник];
			НоваяСтрокаНабора.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрокаНабора.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
		КонецЦикла;
		ДобавленныеЗаписи = Новый Массив;
		РегистрыРасчета.Начисления.ДополнитьНаборЗаписейНачислениямиСовместителейИПодработок(НаборЗаписей, ДобавленныеЗаписи);
		Для Каждого ДобавленнаяЗапись Из ДобавленныеЗаписи Цикл
			НоваяСтрока = Начисления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавленнаяЗапись);
			НоваяСтрока.Начисление = ДобавленнаяЗапись.ВидРасчета;
			НоваяСтрока.ДатаНачала = ДобавленнаяЗапись.ПериодДействияНачало;
			НоваяСтрока.ДатаОкончания = ДобавленнаяЗапись.ПериодДействияКонец;
			ДобавленныеНачисления.Добавить(НоваяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	// Сформируем список начислений опираясь на которые будем получать необходимые сторнирования и перерасчеты.
	НачисленияСотрудников = ПустаяТаблицаНачисленийЗаднимЧислом();
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ДатаОкончания;
		Если ОписаниеДокумента.ВидНачисленияВШапке Тогда
			НоваяСтрока.ВидРасчета = Объект[ОписаниеДокумента.ВидНачисленияИмя];
		Иначе
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		КонецЕсли;
	КонецЦикла;
	// Удаляем из НачисленияСотрудников все строки, не удовлетворяющие условию ОтборПоСотрудникам.
	Если ОтборПоСотрудникам <> НеОпределено Тогда
		УдалитьСтрокиНеСоответствующиеОтборуПоСотрудникам(НачисленияСотрудников, ОтборПоСотрудникам);
	КонецЕсли;
	
	// Выясним потребуется ли перерасчет
	ТребуетсяПерерасчет = ТребуетсяПерерасчет(ДокументСсылка, ПериодРегистрации, НачисленияСотрудников);
	Для Каждого ДобавленнаяЗапись Из ДобавленныеНачисления Цикл
		Начисления.Удалить(ДобавленнаяЗапись);
	КонецЦикла;
	Если Не ТребуетсяПерерасчет Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем коллекцию НачисленияПерерасчет
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДанныеПерерасчетаСлужебный(Организация, ПериодРегистрации, НачисленияСотрудников, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам, Объект);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  таблица с перерасчетами.
//		ДокументСсылка - ссылка на  документ, данные перерасчета которого формируются.
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправления(Организация, ПериодРегистрации, ИсправленныйДокумент,
	Начисления, НачисленияПерерасчет, ДокументСсылка, ОписаниеТаблицы, КонтролируемыеПоля,
	ОписаниеДокумента, Сотрудник = Неопределено, ДоначислитьЗарплатуПриНеобходимости = Истина) Экспорт
	
	Если ТипЗнч(ОписаниеТаблицы) = Тип("Структура") Тогда
		ОписанияТаблиц = Новый Массив;
		ОписанияТаблиц.Добавить(ОписаниеТаблицы);
	Иначе
		ОписанияТаблиц = ОписаниеТаблицы;
	КонецЕсли;
	
	Если ТипЗнч(Начисления) = Тип("Структура") Тогда
		ТаблицыДокумента = Начисления;	
	Иначе
		ТаблицыДокумента = Новый Структура;
		ТаблицыДокумента.Вставить(ОписаниеТаблицы.ИмяТаблицы, Начисления);
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Истина);
	СформироватьДанныеПерерасчетаДляИсправленияСлужебный(Организация, ПериодРегистрации, ИсправленныйДокумент, ТаблицыДокумента, НачисленияПерерасчет, ДокументСсылка, ОписанияТаблиц, КонтролируемыеПоля, ОписаниеДокумента, Сотрудник, ДоначислитьЗарплатуПриНеобходимости);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПустаяТаблицаНачисленийЗаднимЧислом() Экспорт
	
	НачисленияЗаднимЧислом = Новый ТаблицаЗначений;
	НачисленияЗаднимЧислом.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Регистратор", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("РегистраторПоказателей", Метаданные.РегистрыРасчета.Начисления.СтандартныеРеквизиты.Регистратор.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИдентификаторСтрокиПоказателей", Новый ОписаниеТипов("Число"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействия", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияНачало", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодДействияКонец", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("ПериодРегистрации", Новый ОписаниеТипов("Дата"));
	НачисленияЗаднимЧислом.Колонки.Добавить("Сторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("СторнируемыйДокумент", ОписаниеТиповСторнируемогоДокумента());
	НачисленияЗаднимЧислом.Колонки.Добавить("РассчитыватьПоРазовымНачислениямДокумента", Новый ОписаниеТипов("Булево"));
	НачисленияЗаднимЧислом.Колонки.Добавить("РегистраторРазовогоНачисления", Метаданные.ОпределяемыеТипы.РегистраторРазовогоНачисления.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ДокументОснование", Метаданные.ОпределяемыеТипы.ОснованиеНачисления.Тип);
	НачисленияЗаднимЧислом.Колонки.Добавить("ИсходныйДокумент", Метаданные.ОпределяемыеТипы.СторнируемыйДокумент.Тип);
	
	Возврат НачисленияЗаднимЧислом;
	
КонецФункции

Функция ОписаниеТиповСторнируемогоДокумента() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.СторнируемыйДокумент.Тип;
КонецФункции

// Готовит строки перерасчета для размещения в табличной части документа, и последующего расчета в менеджере расчета,
// заполняет значения показателей, отработанного времени и т.п.
// Добавляет новые строки перерасчета для начислений зависимых от пострадавших при вводе начислений задним числом,
// или от уже добавленных перерасчетов при исправлениях.
//
// Параметры:
//  Организация            - СправочникСсылка.Организации - Организация где происходит перерасчет
//  ПериодРегистрации      - Дата            - Период в котором регистрируется документ выполняющий перерасчет
//  НачисленияЗаднимЧислом - ТаблицаЗначений - См. метод ПустаяТаблицаНачисленийЗаднимЧислом()
//                                 Начисления регистрируемые за прошлый период, т.е. начислений из-за которых требуется
//                                 перерасчет. Например БЛ и необходимые сторно записи что бы БЛ имел ФПД.
//  НачисленияПерерасчет   - ТаблицаЗначений - Выход. Сюда записываются новые строки перерасчетов.
//                                 Структура таблицы аналогична таблице расчетного документа, получается методом
//                                 РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина)
//                                 или путем копирования колонок коллекции данных формы документа.
//  ВременныйРегистратор   - ДокументСсылка  - 
//  ДанныеПерерасчетов     - ТаблицаЗначений - При расчете документа-исправления здесь находятся перерасчеты
//                                 вычисленные в вызывающем методе, по ним дополняется таблица начислений задним
//                                 числом, для выявления затронутых начислений, но новые перерасчеты не создаются.
//  Показатели             - ДокументТабличнаяЧасть.СторнированиеНачислений.Показатели - Отдельная коллекция в которую
//                                 добавляются значения показателей выявленные для перерасчетов.
//
Процедура ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации,
	НачисленияЗаднимЧислом, НачисленияПерерасчет, ВременныйРегистратор,
	ДанныеПерерасчетов = Неопределено, Показатели = Неопределено) Экспорт
	
	Если ДанныеПерерасчетов = Неопределено Тогда
		ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	Иначе
		Для Каждого Строка Из ДанныеПерерасчетов Цикл
			НоваяСтрока = НачисленияЗаднимЧислом.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидРасчета = Строка.Начисление;
			НоваяСтрока.Регистратор = ВременныйРегистратор;
			НоваяСтрока.РегистраторПоказателей = ВременныйРегистратор;
			НоваяСтрока.ИдентификаторСтрокиПоказателей = Строка.ИдентификаторСтрокиВидаРасчета;
			НоваяСтрока.НулевоеСторно = Строка.Результат = 0;
			НоваяСтрока.ПериодРегистрации = Строка.ПериодДействия;
			НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = Строка.ДатаОкончания;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияЗаднимЧислом", НачисленияЗаднимЧислом);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ВременныйРегистратор);
	Запрос.УстановитьПараметр("ТипыОснований", РасчетЗарплатыРасширенный.ТипыОснованийПлановыхНачислений());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(НачисленияЗаднимЧислом.ВидРасчета КАК ПланВидовРасчета.Начисления) КАК ВидРасчета,
		|	НачисленияЗаднимЧислом.ДокументОснование КАК ДокументОснование,
		|	НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
		|	НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
		|	НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияЗаднимЧислом.ИсходныйДокумент КАК ИсходныйДокумент,
		|	НачисленияЗаднимЧислом.РегистраторПоказателей КАК РегистраторПоказателей,
		|	НачисленияЗаднимЧислом.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
		|	НачисленияЗаднимЧислом.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	НачисленияЗаднимЧислом.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	НачисленияЗаднимЧислом.Сторно КАК Сторно,
		|	НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
		|	НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
		|	НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТНачисленияЗаднимЧислом
		|ИЗ
		|	&НачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДополняющиеНачисления.ВидРасчета КАК ВидРасчета,
		|	ДополняющиеНачисления.ДокументОснование КАК ДокументОснование,
		|	ДополняющиеНачисления.Сотрудник КАК Сотрудник,
		|	ДополняющиеНачисления.Регистратор КАК Регистратор,
		|	ДополняющиеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДополняющиеНачисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ДополняющиеНачисления.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ЛОЖЬ КАК Сторно,
		|	ЛОЖЬ КАК НулевоеСторно,
		|	ДополняющиеНачисления.ПериодРегистрации КАК ПериодРегистрации,
		|	ДополняющиеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ДополняющиеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ДополняющиеНачисления.ФиксСторно КАК ФиксСторно,
		|	ДополняющиеНачисления.ПериодДействия КАК ПериодДействия,
		|	ДополняющиеНачисления.Результат КАК Результат
		|ПОМЕСТИТЬ ВТНачисленияЗаднимЧисломДополняющие
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК ДополняющиеНачисления
		|		ПО (ДополняющиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
		|			И (ДополняющиеНачисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
		|			И (ДополняющиеНачисления.ВидРасчета.ИспользоватьОперативныеПоказателиВЦеломЗаМесяц
		|				ИЛИ ДополняющиеНачисления.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы)
		|					И ДополняющиеНачисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|					И ДополняющиеНачисления.ВидРасчета.ПоддерживаетНесколькоПлановыхНачислений)
		|			И (ДополняющиеНачисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
		|			И (ДополняющиеНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК СторнирующиеНачисления
		|		ПО (СторнирующиеНачисления.ВидРасчета = ДополняющиеНачисления.ВидРасчета)
		|			И (СторнирующиеНачисления.Сотрудник = ДополняющиеНачисления.Сотрудник)
		|			И (СторнирующиеНачисления.Результат = -ДополняющиеНачисления.Результат)
		|			И (СторнирующиеНачисления.СторнируемыйДокумент = ДополняющиеНачисления.Регистратор)
		|ГДЕ
		|	НЕ ДополняющиеНачисления.Сторно
		|	И НЕ ДополняющиеНачисления.ФиксСторно
		|	И НЕ ДополняющиеНачисления.ВидРасчета ЕСТЬ NULL
		|	И СторнирующиеНачисления.Регистратор ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Регистратор КАК Регистратор,
		|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Результат КАК Результат,
		|	Начисления.ФиксСторно КАК ФиксСторно,
		|	Начисления.Сторно
		|		ИЛИ Начисления.СторноТекущегоПериода <> НЕОПРЕДЕЛЕНО КАК Сторно,
		|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	ВЫБОР
		|		КОГДА Начисления.РассчитыватьПоРазовымНачислениямДокумента
		|			ТОГДА НЕ Начисления.РегистраторРазовогоНачисления = НачисленияЗаднимЧислом.РегистраторРазовогоНачисления
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УточнятьПоНаличиюРазовогоНачисления,
		|	НачисленияЗаднимЧислом.ЭтоДополняющееНачисление КАК ЭтоДополняющееНачисление,
		|	Начисления.ИсходныйДокумент КАК ИсходныйДокумент
		|ПОМЕСТИТЬ ВТВозможныеЗаписиДляПерерасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияЗаднимЧислом.ВидРасчета КАК ВидРасчета,
		|		НачисленияЗаднимЧислом.ДокументОснование КАК ДокументОснование,
		|		НачисленияЗаднимЧислом.Сотрудник КАК Сотрудник,
		|		НачисленияЗаднимЧислом.Регистратор КАК Регистратор,
		|		НачисленияЗаднимЧислом.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|		НачисленияЗаднимЧислом.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|		НачисленияЗаднимЧислом.Сторно КАК Сторно,
		|		НачисленияЗаднимЧислом.НулевоеСторно КАК НулевоеСторно,
		|		НачисленияЗаднимЧислом.ПериодРегистрации КАК ПериодРегистрации,
		|		НачисленияЗаднимЧислом.ПериодДействияНачало КАК ПериодДействияНачало,
		|		НачисленияЗаднимЧислом.ПериодДействияКонец КАК ПериодДействияКонец,
		|		НачисленияЗаднимЧислом.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|		НачисленияЗаднимЧислом.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|		ЛОЖЬ КАК ЭтоДополняющееНачисление,
		|		НачисленияЗаднимЧислом.ИсходныйДокумент КАК ИсходныйДокумент
		|	ИЗ
		|		ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		НачисленияЗаднимЧисломДополняющие.ВидРасчета,
		|		НачисленияЗаднимЧисломДополняющие.ДокументОснование,
		|		НачисленияЗаднимЧисломДополняющие.Сотрудник,
		|		НачисленияЗаднимЧисломДополняющие.Регистратор,
		|		НачисленияЗаднимЧисломДополняющие.СторнируемыйДокумент,
		|		НачисленияЗаднимЧисломДополняющие.ИдентификаторСтроки,
		|		НачисленияЗаднимЧисломДополняющие.Сторно,
		|		НачисленияЗаднимЧисломДополняющие.НулевоеСторно,
		|		НачисленияЗаднимЧисломДополняющие.ПериодРегистрации,
		|		НачисленияЗаднимЧисломДополняющие.ПериодДействияНачало,
		|		НачисленияЗаднимЧисломДополняющие.ПериодДействияКонец,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		ИСТИНА,
		|		НачисленияЗаднимЧисломДополняющие.ИсходныйДокумент
		|	ИЗ
		|		ВТНачисленияЗаднимЧисломДополняющие КАК НачисленияЗаднимЧисломДополняющие) КАК НачисленияЗаднимЧислом
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеНачисления
		|		ПО (ВедущиеНачисления.ВидРасчета = НачисленияЗаднимЧислом.ВидРасчета)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияЗаднимЧислом КАК СторноНачисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления
		|				ПО СторноНачисления.ВидРасчета = ПланВидовРасчетаНачисления.Ссылка
		|			ПО Начисления.ВидРасчета = СторноНачисления.ВидРасчета
		|				И (ВЫБОР
		|					КОГДА ТИПЗНАЧЕНИЯ(СторноНачисления.ДокументОснование) В (&ТипыОснований)
		|						ТОГДА Начисления.ДокументОснование = СторноНачисления.ДокументОснование
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|				И Начисления.Сотрудник = СторноНачисления.Сотрудник
		|				И Начисления.ПериодДействияНачало = СторноНачисления.ПериодДействияНачало
		|				И (НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) = НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ))
		|				И (ВЫБОР
		|					КОГДА СторноНачисления.РассчитыватьПоРазовымНачислениямДокумента
		|						ТОГДА Начисления.РегистраторРазовогоНачисления = СторноНачисления.РегистраторРазовогоНачисления
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ)
		|				И (СторноНачисления.Сторно)
		|				И (НЕ Начисления.Сторно)
		|		ПО (Начисления.ВидРасчета = ВедущиеНачисления.Ссылка)
		|			И (Начисления.Сотрудник = НачисленияЗаднимЧислом.Сотрудник)
		|			И (Начисления.ПериодРегистрации >= НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ))
		|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (ВЫБОР
		|				КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
		|					ТОГДА НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.ПериодДействияКонец
		|							И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.ПериодДействияНачало
		|				ИНАЧЕ НачисленияЗаднимЧислом.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
		|						И НачисленияЗаднимЧислом.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
		|			КОНЕЦ)
		|			И (СторноНачисления.ВидРасчета ЕСТЬ NULL)
		|ГДЕ
		|	НЕ НачисленияЗаднимЧислом.НулевоеСторно
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Регистратор,
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ДокументОснование,
		|	Начисления.ПериодДействия,
		|	Начисления.ПериодРегистрации,
		|	Начисления.ФиксСторно,
		|	Начисления.Сторно
		|		ИЛИ Начисления.СторноТекущегоПериода <> НЕОПРЕДЕЛЕНО,
		|	Начисления.СторнируемыйДокумент,
		|	Начисления.Результат,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления,
		|	ВЫБОР
		|		КОГДА Начисления.РассчитыватьПоРазовымНачислениямДокумента
		|			ТОГДА НЕ Начисления.РегистраторРазовогоНачисления = НачисленияЗаднимЧислом.РегистраторРазовогоНачисления
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	НачисленияЗаднимЧислом.ЭтоДополняющееНачисление,
		|	Начисления.ИсходныйДокумент
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачисленияЗаднимЧисломДополняющие.Регистратор,
		|	НачисленияЗаднимЧисломДополняющие.ИдентификаторСтроки,
		|	НачисленияЗаднимЧисломДополняющие.Сотрудник,
		|	НачисленияЗаднимЧисломДополняющие.ВидРасчета,
		|	НачисленияЗаднимЧисломДополняющие.ДокументОснование,
		|	НачисленияЗаднимЧисломДополняющие.ПериодДействия,
		|	НачисленияЗаднимЧисломДополняющие.ПериодРегистрации,
		|	НачисленияЗаднимЧисломДополняющие.Результат,
		|	НачисленияЗаднимЧисломДополняющие.ФиксСторно,
		|	НачисленияЗаднимЧисломДополняющие.Сторно,
		|	НачисленияЗаднимЧисломДополняющие.СторнируемыйДокумент,
		|	ЛОЖЬ,
		|	НЕОПРЕДЕЛЕНО,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	НачисленияЗаднимЧисломДополняющие.ИсходныйДокумент
		|ИЗ
		|	ВТНачисленияЗаднимЧисломДополняющие КАК НачисленияЗаднимЧисломДополняющие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК Регистратор,
		|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВозможныеЗаписиДляПерерасчета.ИсходныйДокумент КАК ИсходныйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.Сотрудник КАК Сотрудник,
		|	ВозможныеЗаписиДляПерерасчета.ВидРасчета КАК ВидРасчета,
		|	ВозможныеЗаписиДляПерерасчета.ДокументОснование КАК ДокументОснование,
		|	ВозможныеЗаписиДляПерерасчета.ПериодДействия КАК ПериодДействия,
		|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации КАК ПериодРегистрации,
		|	ВозможныеЗаписиДляПерерасчета.Регистратор КАК СторнируемыйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	МИНИМУМ(ВозможныеЗаписиДляПерерасчета.УточнятьПоНаличиюРазовогоНачисления) КАК УточнятьПоНаличиюРазовогоНачисления,
		|	МАКСИМУМ(ВозможныеЗаписиДляПерерасчета.ЭтоДополняющееНачисление) КАК ЭтоДополняющееНачисление
		|ПОМЕСТИТЬ ВТЗатронутыеНачисления
		|ИЗ
		|	ВТВозможныеЗаписиДляПерерасчета КАК ВозможныеЗаписиДляПерерасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВозможныеЗаписиДляПерерасчета КАК ВтораяПоловинаСторноПары
		|		ПО ВозможныеЗаписиДляПерерасчета.Сотрудник = ВтораяПоловинаСторноПары.Сотрудник
		|			И ВозможныеЗаписиДляПерерасчета.ВидРасчета = ВтораяПоловинаСторноПары.ВидРасчета
		|			И ВозможныеЗаписиДляПерерасчета.ПериодДействия = ВтораяПоловинаСторноПары.ПериодДействия
		|			И (ВЫБОР
		|				КОГДА ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента
		|					ТОГДА ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления = ВтораяПоловинаСторноПары.РегистраторРазовогоНачисления
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ВозможныеЗаписиДляПерерасчета.ДокументОснование) В (&ТипыОснований)
		|					ТОГДА ВозможныеЗаписиДляПерерасчета.ДокументОснование = ВтораяПоловинаСторноПары.ДокументОснование
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И (ВозможныеЗаписиДляПерерасчета.Результат = -ВтораяПоловинаСторноПары.Результат)
		|			И (ВозможныеЗаписиДляПерерасчета.ФиксСторно
		|					И ВозможныеЗаписиДляПерерасчета.СторнируемыйДокумент = ВтораяПоловинаСторноПары.Регистратор
		|				ИЛИ НЕ ВозможныеЗаписиДляПерерасчета.ФиксСторно
		|					И ВозможныеЗаписиДляПерерасчета.Регистратор = ВтораяПоловинаСторноПары.СторнируемыйДокумент)
		|ГДЕ
		|	ВтораяПоловинаСторноПары.Сотрудник ЕСТЬ NULL
		|	И НЕ ВозможныеЗаписиДляПерерасчета.Сторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозможныеЗаписиДляПерерасчета.Регистратор,
		|	ВозможныеЗаписиДляПерерасчета.ИдентификаторСтроки,
		|	ВозможныеЗаписиДляПерерасчета.ИсходныйДокумент,
		|	ВозможныеЗаписиДляПерерасчета.Сотрудник,
		|	ВозможныеЗаписиДляПерерасчета.ВидРасчета,
		|	ВозможныеЗаписиДляПерерасчета.ДокументОснование,
		|	ВозможныеЗаписиДляПерерасчета.ПериодДействия,
		|	ВозможныеЗаписиДляПерерасчета.ПериодРегистрации,
		|	ВозможныеЗаписиДляПерерасчета.РассчитыватьПоРазовымНачислениямДокумента,
		|	ВозможныеЗаписиДляПерерасчета.РегистраторРазовогоНачисления,
		|	ВозможныеЗаписиДляПерерасчета.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗатронутыеНачисления.Сотрудник КАК Сотрудник,
		|	НАЧАЛОПЕРИОДА(ЗатронутыеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ЗатронутыеНачисления.ПериодДействия, МЕСЯЦ) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДляПолученияПериодовРегистрацииВремени
		|ИЗ
		|	ВТЗатронутыеНачисления КАК ЗатронутыеНачисления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НачисленияЗаднимЧислом.Сотрудник,
		|	НАЧАЛОПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ),
		|	КОНЕЦПЕРИОДА(НачисленияЗаднимЧислом.ПериодДействияНачало, МЕСЯЦ)
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияЗаднимЧислом
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗатронутыеНачисления.Сотрудник КАК Сотрудник,
		|	ЗатронутыеНачисления.ВидРасчета КАК ВидРасчета,
		|	ЗатронутыеНачисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТРазличныеЗатронутыеНачисления
		|ИЗ
		|	ВТЗатронутыеНачисления КАК ЗатронутыеНачисления";
	Запрос.Выполнить();
	
	ОписаниеНабораСотрудников = УчетРабочегоВремениРасширенный.ОписаниеНабораСотрудниковДляИнициализацииМенеджераДанных();
	ОписаниеНабораСотрудников.ТипИсточникаДанных = Тип("МенеджерВременныхТаблиц");
	ОписаниеНабораСотрудников.ТаблицаИсточникДанных = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени = УчетРабочегоВремениРасширенный.СоздатьМенеджерДанныхПоНаборуСотрудникиПериоды(
		Запрос.МенеджерВременныхТаблиц, ПериодРегистрации, ОписаниеНабораСотрудников);
	
	ОписаниеТаблицыФильтра = МенеджерДанныхУчетаВремени.ОписаниеФильтраВТИнтервалыДействияИсточниковДанныхУчетаВремени();
	ОписаниеТаблицыФильтра.ИмяТаблицы = "ВТДляПолученияПериодовРегистрацииВремени";
	
	МенеджерДанныхУчетаВремени.СоздатьВТИнтервалыДействияИсточниковДанныхУчетаВремени(ОписаниеТаблицыФильтра);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПериоды.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	ВЫБОР
		|		КОГДА Начисления.ДокументОснование ССЫЛКА Документ.НазначениеПлановогоНачисления
		|				ИЛИ Начисления.ДокументОснование ССЫЛКА Документ.Совмещение
		|			ТОГДА Начисления.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	Начисления.ВидРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Начисления.Результат КАК Результат,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.РезультатФСС КАК РезультатФСС,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоДней, 0) КАК ОплаченоДней,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоЧасов, 0) КАК ОплаченоЧасов,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
		|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериодСторноЗаписей,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
		|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремениСторноЗаписей,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафикСторноЗаписей,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы) КАК ГрафикРаботыЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма) КАК ГрафикРаботыНормаЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ВремяВведеноСводно, Начисления.ВремяВЦеломЗаПериод) КАК ВремяВЦеломЗаПериодЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени, Начисления.ПериодРегистрацииВремени) КАК ПериодРегистрацииВремениЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени, Начисления.ПериодРегистрацииНормыВремени) КАК ПериодРегистрацииНормыВремениЗаписейПерерасчета,
		|	ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик, Начисления.ОбщийГрафик) КАК ОбщийГрафикЗаписейПерерасчета,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
		|	Начисления.Организация КАК Организация,
		|	НачисленияПериоды.Регистратор КАК Регистратор,
		|	НачисленияПериоды.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	НачисленияПериоды.ИсходныйДокумент КАК ИсходныйДокумент,
		|	Показатели.Показатель КАК Показатель,
		|	ЗначенияПоказателейНачислений.Значение КАК Значение,
		|	Начисления.РанееНачислено КАК РанееНачислено,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	НачисленияПериоды.УточнятьПоНаличиюРазовогоНачисления КАК УточнятьПоНаличиюРазовогоНачисления
		|ИЗ
		|	ВТЗатронутыеНачисления КАК НачисленияПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = НачисленияПериоды.Регистратор)
		|			И (Начисления.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|			И (Начисления.Результат <> 0
		|				ИЛИ НЕ НачисленияПериоды.ЭтоДополняющееНачисление)
		|			И (Начисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (Начисления.Регистратор <> &ИсключаемыйРегистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
		|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПериоды.Сотрудник)
		|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|		ПО (Показатели.Ссылка = НачисленияПериоды.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
		|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПериоды.Регистратор)
		|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
		|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Регистратор = НачисленияПериоды.Регистратор)
		|			И (ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = НачисленияПериоды.ИдентификаторСтроки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета.ОчередностьРасчета,
		|	Начисления.ВидРасчета,
		|	ВЫБОР
		|		КОГДА Начисления.ВидРасчета.ПериодДействияБазовый
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ Начисления.БазовыйПериодНачало
		|	КОНЕЦ,
		|	НачисленияПериоды.Регистратор,
		|	НачисленияПериоды.ИдентификаторСтроки,
		|	РассчитыватьПоРазовымНачислениямДокумента,
		|	РегистраторРазовогоНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПерерасчета.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ВидРасчета.ТребуетсяРасчетБазы КАК ТребуетсяРасчетБазы,
		|	Начисления.ДокументОснование КАК ДокументОснование,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	Начисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	НачисленияПерерасчета.Сторно КАК Сторно,
		|	Начисления.ФиксСторно КАК ФиксСторно,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Начисления.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ГрафикРаботы
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхФактическогоВремени, Начисления.ГрафикРаботы)
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ГрафикРаботыНорма
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ИсточникДанныхНормыВремени, Начисления.ГрафикРаботыНорма)
		|	КОНЕЦ КАК ГрафикРаботыНорма,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ВремяВЦеломЗаПериод
		|		ИНАЧЕ ЕСТЬNULL(ИнтервалыДействияИсточниковДанныхУчетаВремени.ВремяВведеноСводно, Начисления.ВремяВЦеломЗаПериод)
		|	КОНЕЦ КАК ВремяВЦеломЗаПериод,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ПериодРегистрацииВремени
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииФактическогоВремени
		|	КОНЕЦ КАК ПериодРегистрацииВремени,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ПериодРегистрацииНормыВремени
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ПериодРегистрацииНормыВремени
		|	КОНЕЦ КАК ПериодРегистрацииНормыВремени,
		|	ВЫБОР
		|		КОГДА НачисленияПерерасчета.Сторно
		|			ТОГДА Начисления.ОбщийГрафик
		|		ИНАЧЕ ИнтервалыДействияИсточниковДанныхУчетаВремени.ОбщийГрафик
		|	КОНЕЦ КАК ОбщийГрафик,
		|	Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
		|	Начисления.ВремяВЧасах КАК ВремяВЧасах,
		|	НачисленияПерерасчета.НулевоеСторно
		|		ИЛИ НЕ ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL КАК НулевоеСторно,
		|	Начисления.Организация КАК Организация,
		|	Начисления.ФиксСтрока КАК ФиксСтрока,
		|	Начисления.ФиксЗаполнение КАК ФиксЗаполнение,
		|	Начисления.ФиксРасчетВремени КАК ФиксРасчетВремени,
		|	Начисления.ФиксРасчет КАК ФиксРасчет,
		|	Начисления.РасчетнаяБазаЗаЕдиницуНормыВремени КАК РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	НачисленияПерерасчета.РегистраторПоказателей КАК Регистратор,
		|	НачисленияПерерасчета.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтроки,
		|	Начисления.ИсходныйДокумент КАК ИсходныйДокумент,
		|	Показатели.Показатель КАК Показатель,
		|	ЗначенияПоказателейНачислений.Значение КАК Значение,
		|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
		|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления,
		|	Начисления.Результат КАК Результат,
		|	Начисления.РезультатВТомЧислеЗаСчетФБ КАК РезультатВТомЧислеЗаСчетФБ,
		|	Начисления.РезультатФСС КАК РезультатФСС,
		|	Начисления.ОтработаноДней КАК ОтработаноДней,
		|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоДней, 0) КАК ОплаченоДней,
		|	ЕСТЬNULL(ИсходныеДанныеПерерасчетов.ОплаченоЧасов, 0) КАК ОплаченоЧасов,
		|	Начисления.РанееНачислено КАК РанееНачислено,
		|	Начисления.ГрафикРаботы КАК ГрафикРаботыСторноЗаписей,
		|	Начисления.ГрафикРаботыНорма КАК ГрафикРаботыНормаСторноЗаписей,
		|	Начисления.ВремяВЦеломЗаПериод КАК ВремяВЦеломЗаПериодСторноЗаписей,
		|	Начисления.ПериодРегистрацииВремени КАК ПериодРегистрацииВремениСторноЗаписей,
		|	Начисления.ПериодРегистрацииНормыВремени КАК ПериодРегистрацииНормыВремениСторноЗаписей,
		|	Начисления.ОбщийГрафик КАК ОбщийГрафикСторноЗаписей
		|ИЗ
		|	ВТНачисленияЗаднимЧислом КАК НачисленияПерерасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазличныеЗатронутыеНачисления КАК ЗатронутыеНачисления
		|		ПО НачисленияПерерасчета.Сотрудник = ЗатронутыеНачисления.Сотрудник
		|			И НачисленияПерерасчета.ВидРасчета = ЗатронутыеНачисления.ВидРасчета
		|			И (НАЧАЛОПЕРИОДА(НачисленияПерерасчета.ПериодДействияНачало, МЕСЯЦ) = ЗатронутыеНачисления.ПериодДействия)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = НачисленияПерерасчета.Регистратор)
		|			И (Начисления.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИнтервалыДействияИсточниковДанныхУчетаВремени КАК ИнтервалыДействияИсточниковДанныхУчетаВремени
		|		ПО (ИнтервалыДействияИсточниковДанныхУчетаВремени.Сотрудник = НачисленияПерерасчета.Сотрудник)
		|			И (Начисления.ПериодДействияНачало МЕЖДУ ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаНачала И ИнтервалыДействияИсточниковДанныхУчетаВремени.ДатаОкончания)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
		|		ПО (Показатели.Ссылка = НачисленияПерерасчета.ВидРасчета)
		|			И (ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
		|		ПО (ЗначенияПоказателейНачислений.Регистратор = НачисленияПерерасчета.РегистраторПоказателей)
		|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
		|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтрокиПоказателей)
		|			И (ЗатронутыеНачисления.Сотрудник ЕСТЬ NULL)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсходныеДанныеПерерасчетов КАК ИсходныеДанныеПерерасчетов
		|		ПО (ИсходныеДанныеПерерасчетов.Регистратор = НачисленияПерерасчета.Регистратор)
		|			И (ИсходныеДанныеПерерасчетов.ИдентификаторСтроки = НачисленияПерерасчета.ИдентификаторСтроки)
		|ГДЕ
		|	НЕ(Начисления.ВидРасчета.ТребуетсяРасчетБазы
		|				И НЕ Начисления.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.Сотрудник,
		|	Начисления.ПериодРегистрации,
		|	Начисления.ВидРасчета,
		|	Начисления.ДокументОснование,
		|	Начисления.Сторно УБЫВ,
		|	Начисления.ПериодДействияНачало,
		|	НачисленияПерерасчета.Регистратор,
		|	НачисленияПерерасчета.ИдентификаторСтроки,
		|	Показатели.НомерСтроки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПоказателиЗатронутыхНачислений = РезультатЗапроса[0].Выгрузить();
	ПоказателиНачисленийЗаднимЧислом = РезультатЗапроса[1].Выгрузить();
	
	РаспределениеНачислений = ПолучитьРаспределениеНачислений(
		ПоказателиЗатронутыхНачислений, ПоказателиНачисленийЗаднимЧислом, ВременныйРегистратор);
	
	// Свойства текущей собираемой строки перерасчета.
	Текущее = Новый Структура("ИдентификаторСтроки, Сотрудник, Регистратор, ПериодДействияНачало");
	
	ИдентификаторСтрокиВидаРасчета = ЗарплатаКадрыРасширенный.МаксимальныйИдентификаторСтроки(
		НачисленияЗаднимЧислом, "ИдентификаторСтроки");
	
	ОтдельнаяКоллекцияПоказателей = Показатели <> Неопределено;
	
	// Сборка строк перерасчета по начислениям задним числом.
	Для Каждого Строка Из ПоказателиНачисленийЗаднимЧислом Цикл
		Если Текущее.ИдентификаторСтроки <> Строка.ИдентификаторСтроки
			Или Текущее.Сотрудник <> Строка.Сотрудник
			Или Текущее.Регистратор <> Строка.Регистратор
			Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало Тогда
			
			ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
			НомерПоказателя = 1;
			
			НовыйПерерасчет = ДанныеПерерасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Строка);
			НовыйПерерасчет.ДатаНачала = Строка.ПериодДействияНачало;
			НовыйПерерасчет.ДатаОкончания = Строка.ПериодДействияКонец;
			НовыйПерерасчет.Начисление = Строка.ВидРасчета;
			НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			
			Если Строка.НулевоеСторно Тогда
				НовыйПерерасчет.Результат = 0;
				НовыйПерерасчет.РезультатВТомЧислеЗаСчетФБ = 0;
				НовыйПерерасчет.РезультатФСС = 0;
				НовыйПерерасчет.РанееНачислено = 0;
				НовыйПерерасчет.ОтработаноДней = 0;
				НовыйПерерасчет.ОтработаноЧасов = 0;
				НовыйПерерасчет.ОплаченоДней = 0;
				НовыйПерерасчет.ОплаченоЧасов = 0;
				НовыйПерерасчет.ФиксСторно = Истина;
			Иначе
				
				Если НовыйПерерасчет.ФиксСторно	Или (НовыйПерерасчет.Сторно
					И НовыйПерерасчет.ДатаНачала = НачалоМесяца(НовыйПерерасчет.ДатаНачала)
					И НовыйПерерасчет.ДатаОкончания = КонецМесяца(НовыйПерерасчет.ДатаОкончания)) Тогда
					ЗаполнитьКакФиксСторно(НовыйПерерасчет, Строка);
				КонецЕсли;

				// Прикладываем распределение результатов начислений.
				ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет,
					РаспределениеНачислений.ПоСтатьямФинансирования, Строка.Регистратор, Строка.ИдентификаторСтроки);
				// Прикладываем распределение по территориям.
				ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет,
					РаспределениеНачислений.ПоТерриториямИУсловиямТруда, Строка.Регистратор, Строка.ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
		
		Если ОтдельнаяКоллекцияПоказателей Тогда
			НоваяСтрокаПоказателей = Показатели.Добавить();
			НоваяСтрокаПоказателей.Показатель = Строка.Показатель;
			НоваяСтрокаПоказателей.Значение = Строка.Значение;
			НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		Иначе
			НовыйПерерасчет["Показатель" + НомерПоказателя] = Строка.Показатель;
			НовыйПерерасчет["Значение" + НомерПоказателя] = Строка.Значение;
			НомерПоказателя = НомерПоказателя + 1;
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(Текущее, Строка);
	КонецЦикла;
	
	// Новые записи затронутых (в том числе зависимых) начислений.
	НовыеНачисления = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления();
	
	// Запоминаем строки, в которых затем потребуется скорректировать период базовых начислений.
	СтрокиБазовыйПериод = Новый Соответствие;
	
	Текущее = Новый Структура("ИдентификаторСтроки, Сотрудник, Регистратор, ПериодДействияНачало,
		|ВидРасчета, ДокументОснование, РассчитыватьПоРазовымНачислениямДокумента, РегистраторРазовогоНачисления");
	
	ДобавленныеЗависимыеНачисления = Новый ТаблицаЗначений;
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("Сотрудник");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ВидРасчета");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействия");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействияНачало");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("ПериодДействияКонец");
	ДобавленныеЗависимыеНачисления.Колонки.Добавить("РегистраторРазовогоНачисления");
	
	ДобавленныеЗависимыеНачисления.Индексы.Добавить("Сотрудник, ПериодДействия, РегистраторРазовогоНачисления");
	
	// Сборка строк перерасчета по начислениям затронутым начислениями задним числом.
	Для Каждого Строка Из ПоказателиЗатронутыхНачислений Цикл
		// Для начислений рассчитываемых по доходам разового начисления
		// в случае если в начислениях задним числом нет учитываемого регистратора
		// проверяем не был ли добавлен перерасчет ведущего разового начисления
		// и в случае если был добавлен, то добавляем и зависимое начисление в коллекцию перерасчетов.
		// Для того что бы учесть взаимозависимости обходим начисления по возрастанию очередности.

		Если Не Строка.УточнятьПоНаличиюРазовогоНачисления
			Или НеобходимоДобавлятьПерерасчетЗависимого(Строка, ДобавленныеЗависимыеНачисления) Тогда
			
			СделаноСторнирование = Ложь;
			
			Если (Текущее.ИдентификаторСтроки <> Строка.ИдентификаторСтроки 
				Или Текущее.Регистратор <> Строка.Регистратор 
				Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало) Тогда
				
				ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
				НомерПоказателя = 1;
				
				Если Строка.Результат<>0 Или Строка.РезультатВТомЧислеЗаСчетФБ<>0 Или Строка.РезультатФСС <> 0
						Или Строка.ОтработаноДней<>0 Или Строка.ОтработаноЧасов<>0 Тогда 
					// Сторнирование прежних зависимых начислений.
					СделаноСторнирование = Истина;
					НовыйПерерасчетСторно = ДанныеПерерасчетов.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПерерасчетСторно, Строка);
					ЗаполнитьКакФиксСторно(НовыйПерерасчетСторно, Строка);
					НовыйПерерасчетСторно.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Если Строка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
						// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
						БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Строка.БазовыйПериодНачало, Строка.БазовыйПериодКонец);
						СтрокиБазовыйПериод.Вставить(НовыйПерерасчетСторно, БазовыйПериод);
					КонецЕсли;
					                                    
					// Прикладываем распределение результатов начислений.
					ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчетСторно,
						РаспределениеНачислений.ПоСтатьямФинансирования, Строка.Регистратор, Строка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям.
					ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчетСторно,
						РаспределениеНачислений.ПоТерриториямИУсловиямТруда, Строка.Регистратор, Строка.ИдентификаторСтроки);
						
				КонецЕсли;
				
				СтрокаДобавленногоЗависимого = ДобавленныеЗависимыеНачисления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавленногоЗависимого, Строка);
					
				Если Текущее.ВидРасчета <> Строка.ВидРасчета 
					Или Текущее.ДокументОснование <> Строка.ДокументОснование 
					Или Текущее.ПериодДействияНачало <> Строка.ПериодДействияНачало
					Или Текущее.Сотрудник <> Строка.Сотрудник 
					Или Текущее.РассчитыватьПоРазовымНачислениямДокумента <> Строка.РассчитыватьПоРазовымНачислениямДокумента
					Или Текущее.РегистраторРазовогоНачисления <> Строка.РегистраторРазовогоНачисления Тогда
					
					ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
					
					НовыйПерерасчет = НовыеНачисления.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПерерасчет, Строка);
					НовыйПерерасчет.ДатаНачала = Строка.ПериодДействияНачало;
					НовыйПерерасчет.ДатаОкончания = Строка.ПериодДействияКонец;
					НовыйПерерасчет.НачалоБазовогоПериода = Строка.БазовыйПериодНачало;
					НовыйПерерасчет.ОкончаниеБазовогоПериода = Строка.БазовыйПериодКонец;
					НовыйПерерасчет.Начисление = Строка.ВидРасчета;
				
					НовыйПерерасчет.ПериодРегистрацииВремени = Строка.ПериодРегистрацииВремениЗаписейПерерасчета;
					НовыйПерерасчет.ПериодРегистрацииНормыВремени = Строка.ПериодРегистрацииНормыВремениЗаписейПерерасчета;
					НовыйПерерасчет.ГрафикРаботы = Строка.ГрафикРаботыЗаписейПерерасчета;
					НовыйПерерасчет.ГрафикРаботыНорма = Строка.ГрафикРаботыНормаЗаписейПерерасчета;
					НовыйПерерасчет.ВремяВЦеломЗаПериод = Строка.ВремяВЦеломЗаПериодЗаписейПерерасчета;
					
					НовыйПерерасчет.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
					
					Если Строка.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
						// Запоминаем эти строки, чтобы после получения сведений и показателей, заполнить даты начала и окончания базовым периодом.
						БазовыйПериод = Новый Структура("ДатаНачала, ДатаОкончания", Строка.БазовыйПериодНачало, Строка.БазовыйПериодКонец);
						СтрокиБазовыйПериод.Вставить(НовыйПерерасчет, БазовыйПериод);
					КонецЕсли;
					
					// Прикладываем распределение результатов начислений.
					ЗаполнитьРезультатРаспределенияНачисления(НовыйПерерасчет,
						РаспределениеНачислений.ПоСтатьямФинансирования, Строка.Регистратор, Строка.ИдентификаторСтроки);
					// Прикладываем распределение по территориям.
					ЗаполнитьРезультатРаспределенияПоТерриториям(НовыйПерерасчет,
						РаспределениеНачислений.ПоТерриториямИУсловиямТруда, Строка.Регистратор, Строка.ИдентификаторСтроки);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОтдельнаяКоллекцияПоказателей Тогда
				НоваяСтрокаПоказателей = Показатели.Добавить();
				НоваяСтрокаПоказателей.Показатель = Строка.Показатель;
				НоваяСтрокаПоказателей.Значение = Строка.Значение;
				НоваяСтрокаПоказателей.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
			Иначе
				Если СделаноСторнирование Тогда 
					НовыйПерерасчетСторно["Показатель" + НомерПоказателя] = Строка.Показатель;
					НовыйПерерасчетСторно["Значение" + НомерПоказателя] = Строка.Значение;
				КонецЕсли;
				НовыйПерерасчет["Показатель" + НомерПоказателя] = Строка.Показатель;
				НовыйПерерасчет["Значение" + НомерПоказателя] = Строка.Значение;
				НомерПоказателя = НомерПоказателя + 1;
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(Текущее, Строка);
		КонецЕсли;
	
	КонецЦикла;
	
	Если ДанныеПерерасчетов.Количество() <> 0 Или НовыеНачисления.Количество() <> 0 Тогда
		МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
		
		// Заполняем сведения о сотрудниках в данных перерасчета.
		ДополнитьСтрокиНачислений(МенеджерРасчета, ДанныеПерерасчетов, Организация, Истина);
		
		// Получить значения показателей.
		ДополнитьСтрокиНачислений(МенеджерРасчета, НовыеНачисления, Организация);
		
		// Заполняем даты базовым периодом.
		Для Каждого Строка Из СтрокиБазовыйПериод Цикл
			ЗаполнитьЗначенияСвойств(Строка.Ключ, Строка.Значение);
		КонецЦикла;
	
		// Переносим строки в таблицу значений ДанныеПерерасчетов.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеНачисления, ДанныеПерерасчетов);
		
		// Удаляем добавляемые зависимые начисления из НачисленияПерерасчет.
		СтруктураПоиска = Новый Структура("Сотрудник,Начисление,ПериодДействия");
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаПерерасчета Из ДанныеПерерасчетов Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПерерасчета);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиКУдалению, НачисленияПерерасчет.НайтиСтроки(СтруктураПоиска), Истина);
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			НачисленияПерерасчет.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	ФиксСтроки = Новый Массив;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Если (Строка.ФиксСторно Или Строка.ФиксРасчет) И Строка.Результат <> 0 Тогда
			ФиксСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	// Разделение рассчитываемых и не рассчитываемых строк.
	ДанныеНеРассчитываемые = ДанныеПерерасчетов.Скопировать(ФиксСтроки);
	Для Каждого Строка Из ФиксСтроки Цикл
		ДанныеПерерасчетов.Удалить(Строка);
	КонецЦикла;
	
	// Объединение рассчитываемых строк имеющих интервалы идущие встык.
	ЗарплатаКадрыРасширенный.ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(
		ДанныеПерерасчетов, "ДатаНачала", "ДатаОкончания",, "ИдентификаторСтрокиВидаРасчета");
		
	// Фикс. строки должны идти первыми, иначе возможны ошибки при расчетах с нормой времени.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, ДанныеНеРассчитываемые);
	ДанныеПерерасчетов = ДанныеНеРассчитываемые;
	
	// Переносим строки в коллекцию НачисленияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, НачисленияПерерасчет);
	
КонецПроцедуры

Функция ВидРасчетаЯвляетсяВытесняющим(ВидРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачисленияВытесняющиеВидыРасчета.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК НачисленияВытесняющиеВидыРасчета
	|ГДЕ
	|	НачисленияВытесняющиеВидыРасчета.ВидРасчета = &ВидРасчета";
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Процедура НастроитьМенеджерРасчета(МенеджерРасчета, Форма, ОписаниеДокумента) Экспорт
	
	Документ = Форма.Объект;
	
	ПараметрыИсправленного = Неопределено;
	ЭтоИсправление = ИсправлениеДокументовЗарплатаКадрыКлиентСервер.ЭтоИсправление(Форма, ПараметрыИсправленного);
	
	Если Не ЭтоИсправление Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерРасчета.ИсправленныйДокумент = ПараметрыИсправленного.Ссылка;
	
	ИсправлениеВТекущемПериодеВозможно =
		ИсправлениеДокументовЗарплатаКадры.ВозможноИсправлениеТекущимПериодом(МенеджерРасчета.ИсправленныйДокумент);
		
	МенеджерРасчета.ЭтоИсправлениеТекущимПериодом = ИсправлениеВТекущемПериодеВозможно
		И ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ИсправлениеВТекущемПериоде(
			Форма, ОписаниеДокумента.МесяцНачисленияИмя);
				
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерРасчета.РазрешеныДоначисленияВТекущемПериоде = ИсправлениеВТекущемПериодеВозможно
		И ИсправлениеДокументовРасчетЗарплатыКлиентСервер.ПерерасчетыДоступныПоОписанию(Форма, ОписаниеДокумента);

КонецПроцедуры

Процедура НастроитьМенеджерРасчетаПоДокументу(МенеджерРасчета, Документ, ОписаниеДокумента, ИсправленныйДокумент, ПараметрыИсправленного) Экспорт
	Если Не ЗначениеЗаполнено(ИсправленныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	МенеджерРасчета.ИсправленныйДокумент                 = ИсправленныйДокумент;
	МенеджерРасчета.ЭтоИсправлениеТекущимПериодом        = Ложь;
	МенеджерРасчета.РазрешеныДоначисленияВТекущемПериоде = Ложь;
	
	ИсправлениеВТекущемПериодеВозможно = ИсправлениеДокументовЗарплатаКадры.ВозможноИсправлениеТекущимПериодом(
		ИсправленныйДокумент);
	Если ИсправлениеВТекущемПериодеВозможно Тогда
		Если ПараметрыИсправленного.ПериодРегистрации = Документ[ОписаниеДокумента.МесяцНачисленияИмя] Тогда
			МенеджерРасчета.ЭтоИсправлениеТекущимПериодом = Истина;
		КонецЕсли;
		ВыполнятьРасчетСОптимизацией = Не ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации();
		ЕстьТаблицаПерерасчетов = (ОписаниеДокумента.НачисленияПерерасчетИмя <> Неопределено);
		Если ВыполнятьРасчетСОптимизацией И ЕстьТаблицаПерерасчетов Тогда
			МенеджерРасчета.РазрешеныДоначисленияВТекущемПериоде = 
				Не МенеджерРасчета.ЭтоИсправлениеТекущимПериодом
				Или ПараметрыИсправленного.ВыполнилДоначисление
				Или Документ[ОписаниеДокумента.НачисленияПерерасчетИмя].Количество() > 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ДоначисленияРазрешены(МенеджерРасчета) Экспорт
	
	Результат = Не МенеджерРасчета.ЭтоИсправлениеТекущимПериодом;
	
	Если ЗарплатаКадры.ВыполнятьРасчетЗарплатыБезОптимизации() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат Или МенеджерРасчета.РазрешеныДоначисленияВТекущемПериоде;
	
КонецФункции

Процедура ПриВременнойРегистрацииИсправления(Движения, ДанныеДляПроведения) Экспорт
	
	ИсправленныйДокумент = Неопределено;
	Если Не ДанныеДляПроведения.Свойство("ИсправленныйДокумент", ИсправленныйДокумент) Тогда
		СведенияОбИсправлении = ИсправлениеДокументовЗарплатаКадры.СведенияОбИсправленииДокумента(ДанныеДляПроведения.ДокументСсылка);
		ИсправленныйДокумент = СведенияОбИсправлении.ИсправленныйДокумент;
	КонецЕсли;
	
	Если ИсправленныйДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ИсправленныйДокумент);
	ПараметрыИсправляемого = МенеджерДокумента.ПараметрыИсправляемогоДокумента(ИсправленныйДокумент);
	
	ПараметрыСторнирования = ИсправлениеДокументовЗарплатаКадры.ПараметрыСторнирования();
	ПараметрыСторнирования.ИсправлениеВТекущемПериоде = ПараметрыИсправляемого.ПериодРегистрации = ДанныеДляПроведения.ПериодРегистрации;
	ПараметрыСторнирования.ПериодРегистрации = ДанныеДляПроведения.ПериодРегистрации;
	ПараметрыСторнирования.ИсправлениеДоначислением = ПараметрыИсправляемого.ВыполнилДоначисление;
	
	Если ПараметрыСторнирования.ИсправлениеВТекущемПериоде Тогда
		Если ПараметрыСторнирования.ИсправлениеДоначислением Тогда
			РегистрыРасчета.Начисления.ЗапланироватьПреобразованиеСторноТекущегоПериода(Движения.Начисления, ИсправленныйДокумент);
		Иначе
			РасчетЗарплатыРасширенный.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент, ПараметрыСторнирования);
			УчетСреднегоЗаработка.СторнироватьДвиженияДокумента(Движения, ИсправленныйДокумент);
		КонецЕсли
	Иначе
		// Сброс признака исправления текущим периодом, на случай если ранее документ был исправлен текущим периодом.
		РегистрыРасчета.Начисления.ПриОтменеИсправленияВТекущемПериоде(ИсправленныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСтрокиНачислений(МенеджерРасчета, НачисленияЗаПериод, Организация, ЭтоПерерасчеты = Ложь)
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияЗаПериод, "Начисление");
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	Начисления = МенеджерРасчета.ТаблицаНачислений();
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаРасчета Из НачисленияЗаПериод Цикл
		НоваяСтрока = Обработки.МенеджерРасчетаЗарплаты.СтрокаТаблицыНачислений(Начисления);
		СоответствиеСтрок.Вставить(НоваяСтрока, СтрокаРасчета);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		РасчетЗарплатыРасширенныйФормы.ПоказателиВМенеджерРасчета(НоваяСтрока, СтрокаРасчета, "Начисления");
		РасчетЗарплатыРасширенныйФормы.РезультатРаспределенияВМенеджерРасчета(НоваяСтрока, СтрокаРасчета);
		РасчетЗарплатыРасширенныйФормы.РаспределениеПоТерриториямУсловиямТрудаВМенеджерРасчета(
			НоваяСтрока,
			СтрокаРасчета,
			,
			МенеджерРасчета,
			Организация);
		
		БазовыйПериод = ?(СтрокаРасчета.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод,
			Новый СтандартныйПериод(СтрокаРасчета.НачалоБазовогоПериода, СтрокаРасчета.ОкончаниеБазовогоПериода),
			Неопределено);
		
		РасчетЗарплатыРасширенныйФормы.ЗаполнитьБазовыйПериодДанныеМенеджераРасчета(
			НоваяСтрока,
			СтрокаРасчета,
			ВидыРасчетаИнфо.Получить(СтрокаРасчета.Начисление),
			БазовыйПериод);
	КонецЦикла; 
	
	МенеджерРасчета.ЗаполнитьСведенияНачисленийДляРасчета(Начисления);
	
	Если Не ЭтоПерерасчеты Тогда
		МенеджерРасчета.ЗаполнитьЗначенияПоказателейНачислений(Начисления);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		РасчетЗарплатыРасширенныйФормы.СтрокаНачисленияВДанныеПерерасчета(Организация, КлючИЗначение.Значение, КлючИЗначение.Ключ, ВидыРасчетаИнфо);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКакФиксСторно(СтрокаСторно, Строка) Экспорт
	
	СтрокаСторно.ДатаНачала = Строка.ПериодДействияНачало;
	СтрокаСторно.ДатаОкончания = Строка.ПериодДействияКонец;
	СтрокаСторно.НачалоБазовогоПериода = Строка.БазовыйПериодНачало;
	СтрокаСторно.ОкончаниеБазовогоПериода = Строка.БазовыйПериодКонец;
	СтрокаСторно.Начисление = Строка.ВидРасчета;
	
	СтрокаСторно.Результат = - Строка.Результат;
	СтрокаСторно.РезультатФСС = - Строка.РезультатФСС;
	СтрокаСторно.РанееНачислено = - Строка.РанееНачислено;
	СтрокаСторно.РезультатВТомЧислеЗаСчетФБ = - Строка.РезультатВТомЧислеЗаСчетФБ;
	СтрокаСторно.ОтработаноДней = - Строка.ОтработаноДней;
	СтрокаСторно.ОтработаноЧасов = - Строка.ОтработаноЧасов;
	СтрокаСторно.ОплаченоДней = - Строка.ОплаченоДней;
	СтрокаСторно.ОплаченоЧасов = - Строка.ОплаченоЧасов;
	
	СтрокаСторно.ФиксРасчет = Истина;
	СтрокаСторно.ФиксСторно = Истина;
	СтрокаСторно.ПериодРегистрацииВремени = Строка.ПериодРегистрацииВремениСторноЗаписей;
	СтрокаСторно.ПериодРегистрацииНормыВремени = Строка.ПериодРегистрацииНормыВремениСторноЗаписей;
	СтрокаСторно.ГрафикРаботы = Строка.ГрафикРаботыСторноЗаписей;
	СтрокаСторно.ГрафикРаботыНорма = Строка.ГрафикРаботыНормаСторноЗаписей;
	СтрокаСторно.ВремяВЦеломЗаПериод = Строка.ВремяВЦеломЗаПериодСторноЗаписей;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор КАК Регистратор,
	|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение КАК РегистраторИзмерение,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
	|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
	|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
	|	РаспределениеПоТерриториямУсловиямТруда.СуммаВычета КАК СуммаВычета,
	|	РаспределениеПоТерриториямУсловиямТруда.СкидкаПоВзносам КАК СкидкаПоВзносам,
	|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
	|	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
	|	РаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено,
	|	РаспределениеПоТерриториямУсловиямТруда.СуммаДоходаНеОблагаемаяНДФЛ КАК СуммаДоходаНеОблагаемаяНДФЛ
	|ИЗ
	|	РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
	|ГДЕ
	|	РаспределениеПоТерриториямУсловиямТруда.Регистратор = &ИсправленныйДокумент";
	
	РаспределениеПоТерриториямУсловиямТруда = Запрос.Выполнить().Выгрузить();
	РаспределениеПоТерриториямУсловиямТруда.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		СтрокиРаспределенияПоТерриториямУсловиямТруда = РаспределениеПоТерриториямУсловиямТруда.НайтиСтроки(СтруктураПоиска);
		Если СтрокиРаспределенияПоТерриториямУсловиямТруда.Количество() > 0 Тогда
			
			СтрокиРаспределения = Новый Массив;
			Для каждого СтрокаРаспределенияПоТерриториямУсловиямТруда Из СтрокиРаспределенияПоТерриториямУсловиямТруда Цикл
				
				ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
				ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияПоТерриториямУсловиямТруда);
				ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
				ОписаниеСтрок.РанееНачислено = -ОписаниеСтрок.РанееНачислено;
				ОписаниеСтрок.СуммаВычета = -ОписаниеСтрок.СуммаВычета;
				ОписаниеСтрок.СкидкаПоВзносам = -ОписаниеСтрок.СкидкаПоВзносам;
				ОписаниеСтрок.СуммаДоходаНеОблагаемаяНДФЛ = -ОписаниеСтрок.СуммаДоходаНеОблагаемаяНДФЛ;
				СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
				
			КонецЦикла;
			СтрокаПерерасчет.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияПоТерриториям(СтрокаПерерасчет, РаспределениеНачисленийПоТерриториямИУсловиямТруда, Регистратор, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда = РаспределениеНачисленийПоТерриториямИУсловиямТруда.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда Из СтрокиРаспределенияНачисленийПоТерриториямИУсловиямТруда Цикл
			ОписаниеСтрок = РасчетЗарплатыРасширенныйФормы.ОписаниеСтрокиРаспределенияПоТерриториямУсловиямТруда();
			ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачисленийПоТерриториямИУсловиямТруда);
			ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
			ОписаниеСтрок.РанееНачислено = -ОписаниеСтрок.РанееНачислено;
			СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
			
		КонецЦикла;
		СтрокаПерерасчет.РаспределениеПоТерриториямУсловиямТруда = Новый ФиксированныйМассив(СтрокиРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультатРаспределенияНачисления(СтрокаПерерасчет, РаспределениеРезультатовНачислений, Регистратор, ИдентификаторСтрокиВидаРасчета)
	
	СтруктураПоиска = Новый Структура("Регистратор,ИдентификаторСтроки", Регистратор, ИдентификаторСтрокиВидаРасчета);
	СтрокиРаспределенияНачислений = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
	Если СтрокиРаспределенияНачислений.Количество() > 0 Тогда
		
		СтрокиРаспределения = Новый Массив;
		Для каждого СтрокаРаспределенияНачислений Из СтрокиРаспределенияНачислений Цикл
			
			ОписаниеТаблицы = Новый Структура("ПутьКДаннымРаспределениеРезультатов", "Объект.РаспределениеРезультатовНачислений");
			ИменаКолонокТаблицыРаспределенияНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчета(ОписаниеТаблицы);
			ОписаниеСтрок = Новый Структура(ИменаКолонокТаблицыРаспределенияНачислений);
			ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределенияНачислений);
			ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
			СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
			
		КонецЦикла;
		СтрокаПерерасчет.РезультатРаспределения = Новый ФиксированныйМассив(СтрокиРаспределения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДанныеПерерасчетаСлужебный(Организация, ПериодРегистрации, Начисления, НачисленияПерерасчет, ДокументСсылка, КонтролируемыеПоля, ОписаниеДокумента, ОтборПоСотрудникам, Объект)
	
	ОтменятьТранзакцию = Не ТранзакцияАктивна();
	Если ОтменятьТранзакцию Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Движения = ЗарплатаКадры.НаборыЗаписейРегистратора(ДокументСсылка.Метаданные(), ДокументСсылка);
		Движения.Начисления.Записать();
	КонецЕсли;
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка,,Ложь);
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	
	МассивСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Сотрудник", Истина);
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	Для Каждого СтрокаНачисления Из Начисления Цикл
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		
		ЗаполнитьЗначенияСвойств(НачисленияЗаднимЧислом.Добавить(), НоваяСтрока);
	КонецЦикла;
	
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	
	ФиксСтроки = СторноЗаписи.НайтиСтроки(Новый Структура("ФиксРасчет", Истина));
	Если ФиксСтроки.Количество() Тогда
		
		// Разделение рассчитываемых и не рассчитываемых строк.
		СторноЗаписиФикс = СторноЗаписи.Скопировать(ФиксСтроки);
		Для Каждого Строка Из ФиксСтроки Цикл
			СторноЗаписи.Удалить(Строка);
		КонецЦикла;
		
		// Если сторнирование ФиксРасчет-а выполняется двумя интервалами, идущими встык,
		// нужно объединить их в один, что бы избежать дублирования суммы ФиксСторно.
		ЗарплатаКадрыРасширенный.ОбъединитьСтрокиОбразующиеНепрерывныеИнтервалы(
			СторноЗаписиФикс, "ПериодДействияНачалоСторно", "ПериодДействияКонецСторно");
		// ...и сделать его не рассчитываемым (ФиксСторно), что бы сумма сторно не отличалась от сторнируемой.
		Для Каждого Строка Из СторноЗаписиФикс Цикл
			Если Строка.ПериодДействияНачалоСторно = Строка.ПериодДействияНачало
				И КонецДня(Строка.ПериодДействияКонецСторно) = КонецДня(Строка.ПериодДействияКонец) Тогда
				СторноЗаписиФикс.ЗаполнитьЗначения(Истина, "ФиксСторно");
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СторноЗаписиФикс, СторноЗаписи);
		
	КонецЕсли;
	
	СторноЗаписи.Колонки.Добавить("НулевоеСторно", Новый ОписаниеТипов("Булево"));
	СторноЗаписи.Сортировать("Сотрудник,ВидРасчета,ПериодРегистрации,ПериодДействияНачалоСторно,Результат", Новый СравнениеЗначений());
	СторноЗаписи.ЗаполнитьЗначения(Ложь, "ФиксРасчет, ФиксРасчетВремени");
	
	ПерваяЗапись = Истина;
	ПредыдущаяСтрока = Неопределено;
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		// Записи с нулевыми идентификаторами - "технические" записи подработок и внутренних совместителей.
		Если СтрокаСторно.ИдентификаторСтроки = 0 Тогда
			СтрокаСторно.НулевоеСторно = Истина;
		КонецЕсли;
		Если ПерваяЗапись Тогда
			ПерваяЗапись = Ложь;
		Иначе
			Если  СтрокаСторно.Сотрудник = ПредыдущаяСтрока.Сотрудник
				И СтрокаСторно.ВидРасчета = ПредыдущаяСтрока.ВидРасчета
				И СтрокаСторно.ПериодРегистрации = ПредыдущаяСтрока.ПериодРегистрации
				И СтрокаСторно.ПериодДействияНачалоСторно = ПредыдущаяСтрока.ПериодДействияНачалоСторно
				И СтрокаСторно.Результат = - ПредыдущаяСтрока.Результат Тогда
				// Обе строки - "нулевое" сторно.
				СтрокаСторно.НулевоеСторно = Истина;
				ПредыдущаяСтрока.НулевоеСторно = Истина;
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСтрока = СтрокаСторно;
	КонецЦикла;
		
	НачисленияНабор.Очистить();
	НачисленияНабор.ДополнительныеСвойства.Вставить("ЭтоВременныйНаборЗаписей");
	НачисленияНабор.Записать();
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистраторПерерасчета);
	
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаСторно);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Истина;
		СтрокаЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудников[НоваяСтрока.Сотрудник].ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[НоваяСтрока.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
			
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
		
	КонецЦикла;
	
	// Запись сторно-записей перед получением данных для расчета.
	НаборДляЗаполненияПерерасчета.Записать();
	
	НачисленияПерерасчетНовые = НачисленияПерерасчет.Выгрузить().СкопироватьКолонки();
	
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации,
		НачисленияЗаднимЧислом, НачисленияПерерасчетНовые, ВременныйРегистраторПерерасчета);
	
	СтруктураОтбора = Новый Структура("ФиксРасчет, ФиксСторно", Истина, Истина);
	ФиксСторноСтрокиНовые = НачисленияПерерасчетНовые.Скопировать(СтруктураОтбора);
	НайденныеСтроки = НачисленияПерерасчетНовые.НайтиСтроки(СтруктураОтбора);
	УдалитьСтрокиСОтборомПоСотрудникам(НачисленияПерерасчетНовые, НайденныеСтроки, ОтборПоСотрудникам);
	
	// Заменим строки объекта на рассчитанные записи перерасчета.
	КлючевыеКолонки = "Сотрудник";
	Если Не ОписаниеДокумента.ВидНачисленияВШапке Тогда
		КлючевыеКолонки = КлючевыеКолонки + ",Начисление";
	КонецЕсли;
	УсловияЗаменыСтрок = РасчетЗарплатыРасширенный.УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНаНовыеДанные(НачисленияПерерасчет, НачисленияПерерасчетНовые, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	
	// Восстановим сторнированные строки.
	Для каждого ФиксСторноСтрокаНовая Из ФиксСторноСтрокиНовые Цикл
		НоваяСтрокаНачисленияПерерасчет = НачисленияПерерасчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаНачисленияПерерасчет, ФиксСторноСтрокаНовая);
	КонецЦикла;
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиСОтборомПоСотрудникам(НачисленияПерерасчет, НайденныеСтроки, ОтборПоСотрудникам)
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СоответствуетУсловиям = Истина;
		Если ОтборПоСотрудникам <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ОтборПоСотрудникам Цикл
				ИмяОтбора = КлючИЗначение.Ключ;
				ЗначениеОтбора = КлючИЗначение.Значение;
				Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					СоответствуетУсловиям = ЗначениеОтбора.Найти(НайденнаяСтрока[ИмяОтбора]) <> Неопределено;
				Иначе
					СоответствуетУсловиям = НайденнаяСтрока[ИмяОтбора] = ЗначениеОтбора;
				КонецЕсли;
				Если Не СоответствуетУсловиям Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НачисленияПерерасчет.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиСоответствующиеОтборуПоСотрудникам(НаборСтрок, ОтборПоСотрудникам)
	Если ОтборПоСотрудникам <> Неопределено Тогда
		УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Ложь);
	КонецЕсли;
КонецПроцедуры
	
Процедура УдалитьСтрокиНеСоответствующиеОтборуПоСотрудникам(НаборСтрок, ОтборПоСотрудникам)
	Если ОтборПоСотрудникам <> Неопределено Тогда
		УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Истина);
	Иначе
		НаборСтрок.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьСтрокиПоОтбору(НаборСтрок, ОтборПоСотрудникам, Инверсия);
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из НаборСтрок Цикл
		СоответствуетУсловиям = Истина;
		Для Каждого КлючИЗначение Из ОтборПоСотрудникам Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				СоответствуетУсловиям = (ЗначениеОтбора.Найти(Строка[ИмяОтбора]) <> Неопределено) И СоответствуетУсловиям;
			Иначе
				СоответствуетУсловиям = (Строка[ИмяОтбора] = ЗначениеОтбора) И СоответствуетУсловиям;
			КонецЕсли;
		КонецЦикла;
		Если Инверсия И Не СоответствуетУсловиям Тогда
			СтрокиКУдалению.Добавить(Строка);
		ИначеЕсли Не Инверсия И СоответствуетУсловиям Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		НаборСтрок.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет требуется ли выполнять проверку необходимости сторнирования.
Функция ТребуетсяПерерасчет(Регистратор, ПериодРегистрации, НачисленияСотрудников)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Начисления", НачисленияСотрудников);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	Начисления.ПериодДействия КАК ПериодДействия,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТФильтр
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Фильтр.Сотрудник КАК Сотрудник,
		|	Фильтр.ВидРасчета КАК ВидРасчета,
		|	Фильтр.ПериодДействия КАК ПериодДействия,
		|	Фильтр.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Фильтр.ПериодДействияКонец КАК ПериодДействияКонец,
		|	Начисления.ПериодДействияБазовый КАК ПериодДействияБазовый
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТФильтр КАК Фильтр
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Фильтр.ВидРасчета = Начисления.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО (СотрудникиПериоды.Сотрудник = Начисления.Сотрудник)
		|			И (СотрудникиПериоды.ПериодДействия = Начисления.ПериодДействия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВытесняющиеВидыРасчета КАК ВытесняющиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВытесняющиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВытесняющиеВидыРасчета.ВидРасчета)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.ВедущиеВидыРасчета КАК ВедущиеВидыРасчета
		|		ПО Начисления.ВидРасчета = ВедущиеВидыРасчета.Ссылка
		|			И (СотрудникиПериоды.ВидРасчета = ВедущиеВидыРасчета.ВидРасчета)
		|			И (ВЫБОР
		|				КОГДА СотрудникиПериоды.ПериодДействияБазовый
		|					ТОГДА СотрудникиПериоды.ПериодДействияНачало <= Начисления.ПериодДействияКонец
		|							И СотрудникиПериоды.ПериодДействияКонец >= Начисления.ПериодДействияНачало
		|				ИНАЧЕ СотрудникиПериоды.ПериодДействияНачало <= Начисления.БазовыйПериодКонец
		|						И СотрудникиПериоды.ПериодДействияКонец >= Начисления.БазовыйПериодНачало
		|			КОНЕЦ)
		|ГДЕ
		|	Начисления.Регистратор <> &Регистратор
		|	И Начисления.ПериодРегистрации < &ПериодРегистрации
		|	И (НЕ ВытесняющиеВидыРасчета.Ссылка ЕСТЬ NULL
		|			ИЛИ НЕ ВедущиеВидыРасчета.Ссылка ЕСТЬ NULL)";
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция НачисленияИсправляемогоДокумента(ИсправляемыйДокумент, ОписаниеТаблицДокумента, Сотрудники = Неопределено) Экспорт
	НачисленияДокумента = ИсправлениеРасчетовБЗК.НовыйИсходныеДанныеДляПерерасчета();	
	МетаданныеДокумента = ИсправляемыйДокумент.Метаданные();
	
	Если МетаданныеДокумента.Реквизиты.Найти("ДокументРассчитан") <> Неопределено Тогда
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "ДокументРассчитан") Тогда
			Возврат НачисленияДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&ДокументОснование КАК ДокументОснование,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	&ДатаНачала КАК ДатаНачала,
	|	&ДатаНачала КАК ДатаОкончания,
	|	&ВидРасчета КАК Начисление,
	|	&ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	ВЫБОР
	|		КОГДА &ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
	|			ТОГДА &ДатаНачала
	|		ИНАЧЕ Начисления.ПериодДействия
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА &ИспользованиеПериода = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
	|			ТОГДА КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	Начисления.*
	|ИЗ
	|	&Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправляемыйДокумент
	|	И &ШаблонУсловиеПоСотруднику";
		
	// Т.к. в табличных частях может быть разное количество полей и эти поля не известны, то
	// то объединение в запросе не получится использовать, но важно что все необходимые для потребителей поля есть
	// в табличных частях, будем выполнять запрос в цикле, но цикл обычно будет 1-3 итерации.
	
	ПолноеИмяДокумента = МетаданныеДокумента.ПолноеИмя();
	
	Для Каждого ОписаниеТекущейТаблицы Из ОписаниеТаблицДокумента Цикл		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "&Таблица", ПолноеИмяДокумента + "." + ОписаниеТекущейТаблицы.ИмяТаблицы); 
		
		ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
		ОписаниеПакета.Параметры.Вставить("ИсправляемыйДокумент", ИсправляемыйДокумент);
		ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ТекстЗапроса);
		ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
		ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
		
		ДокументБезДатаНачала = МетаданныеДокумента.ТабличныеЧасти[ОписаниеТекущейТаблицы.ИмяТаблицы].Реквизиты.Найти("ДатаНачала") = Неопределено;
		
		НеобходимыеРеквизитыДокумента = Новый Массив;
		Если ЗначениеЗаполнено(ОписаниеТекущейТаблицы.ИмяРеквизитаПериод) Тогда
			НеобходимыеРеквизитыДокумента.Добавить(ОписаниеТекущейТаблицы.ИмяРеквизитаПериод);	
		КонецЕсли;	
		
		Если Не ОписаниеТекущейТаблицы.СодержитПолеВидРасчета Тогда
	    	НеобходимыеРеквизитыДокумента.Добавить(ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета);
		КонецЕсли;	
		
		Если НеобходимыеРеквизитыДокумента.Количество() > 0 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсправляемыйДокумент, НеобходимыеРеквизитыДокумента);
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			ДанныеДокумента = Новый Структура;
		КонецЕсли;		
		
		Если ЗначениеЗаполнено(ОписаниеТекущейТаблицы.ИмяРеквизитаПериод) Тогда
			ПериодРегистрации = ДанныеДокумента[ОписаниеТекущейТаблицы.ИмяРеквизитаПериод];	
		Иначе
			ПериодРегистрации = '00010101';
		КонецЕсли;
		
		ОписаниеПакета.Параметры.Вставить("ПериодРегистрации", ПериодРегистрации);
		
		Если ОписаниеТекущейТаблицы.СодержитПолеВидРасчета Тогда
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "Начисления." + ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета, "Начисление", Ложь); 
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "Начисления." + ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета + ".ЗачетНормыВремени", "ЗачетНормыВремени", Ложь);
			
			ВыражениеПоляИспользованиеПериода = "Начисления." + ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета + ".ИспользованиеПериода";
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляИспользованиеПериода, "ИспользованиеПериода", Ложь);	
			
			ВыражениеПоляПериодДействияНачало = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ПериодДействияНачало");
			ВыражениеПоляПериодДействияНачало = СтрЗаменить(ВыражениеПоляПериодДействияНачало, "&ИспользованиеПериода", ВыражениеПоляИспользованиеПериода);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодДействияНачало, "ПериодДействияНачало", Ложь);
			
			ВыражениеПоляПериодДействияКонец = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ПериодДействияКонец");
			ВыражениеПоляПериодДействияКонец = СтрЗаменить(ВыражениеПоляПериодДействияКонец, "&ИспользованиеПериода", ВыражениеПоляИспользованиеПериода);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодДействияКонец, "ПериодДействияКонец", Ложь);	
		Иначе
			ВидРасчета = ДанныеДокумента[ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета];
			
			ВыражениеПоляИспользованиеПериода = "Ссылка." + ОписаниеТекущейТаблицы.ИмяРеквизитаВидРасчета + ".ИспользованиеПериода";
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляИспользованиеПериода, "ИспользованиеПериода", Ложь);
			
			ОписаниеПакета.Параметры.Вставить("ВидРасчета", ВидРасчета);
			
			РеквизитыНачисления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидРасчета, "ЗачетНормыВремени, ИспользованиеПериода");		
			ОписаниеПакета.Параметры.Вставить("ЗачетНормыВремени", РеквизитыНачисления.ЗачетНормыВремени);
			ОписаниеПакета.Параметры.Вставить("ИспользованиеПериода", РеквизитыНачисления.ИспользованиеПериода);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОписаниеТекущейТаблицы.ИмяРеквизитаДокументОснование) Тогда
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "Начисления." + ОписаниеТекущейТаблицы.ИмяРеквизитаДокументОснование, "ДокументОснование", Ложь); 	
		Иначе
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "НЕОПРЕДЕЛЕНО", "ДокументОснование", Ложь); 
		КонецЕсли;		
	
		Если ДокументБезДатаНачала Тогда
			ОписаниеПакета.Параметры.Вставить("ДатаНачала", НачалоМесяца(ПериодРегистрации));
			ОписаниеПакета.Параметры.Вставить("ДатаОкончания", КонецМесяца(ПериодРегистрации));
			
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "&ДатаНачала", "ПериодДействияНачало", Ложь);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "&ДатаОкончания", "ПериодДействияКонец", Ложь);	
		Иначе	
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "Начисления.ДатаНачала", "ДатаНачала", Ложь);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, "Начисления.ДатаОкончания", "ДатаОкончания", Ложь);	
			
			ВыражениеПоляПериодДействияНачало = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ПериодДействияНачало");
			ВыражениеПоляПериодДействияНачало = СтрЗаменить(ВыражениеПоляПериодДействияНачало, "&ДатаНачала", "Начисления.ДатаНачала");
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодДействияНачало, "ПериодДействияНачало", Ложь);
			
			ВыражениеПоляПериодДействияКонец = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ПериодДействияКонец");
			ВыражениеПоляПериодДействияКонец = СтрЗаменить(ВыражениеПоляПериодДействияКонец, "&ДатаОкончания", "Начисления.ДатаОкончания");
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляПериодДействияКонец, "ПериодДействияКонец", Ложь);	
		КонецЕсли;
		
		Если Сотрудники <> Неопределено Тогда                    
			ТекстУсловияПоСотруднику = "Начисления.Сотрудник В (&Сотрудники)";
			ОписаниеПакета.Параметры.Вставить("Сотрудники", Сотрудники);
			ЗарплатаКадрыПериодическиеРегистры.ДобавитьУсловие(ОператорЗапроса, ТекстУсловияПоСотруднику);
		КонецЕсли;	
		Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаНачисленийДокумента = ИсправлениеРасчетовБЗК.ДобавитьСтрокуИсходныхДанныхДляПерерасчета(НачисленияДокумента);
			ЗаполнитьЗначенияСвойств(СтрокаНачисленийДокумента, Выборка);
		КонецЦикла;	
	КонецЦикла;
	
	Возврат НачисленияДокумента;
КонецФункции	

Функция НачисленияТекущегоДокумента(ИсправляемыйДокумент, ПериодРегистрации, ТаблицыНачислений, ОписаниеТаблиц)
	НачисленияТекущегоДокумента = ИсправлениеРасчетовБЗК.НовыйИсходныеДанныеДляПерерасчета();
	
	РазовыеНачисления = ПланыВидовРасчета.Начисления.РазовыеНачисления();
	РазовыеНачисления = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(РазовыеНачисления);
	
	МетаданныеДокумента = ИсправляемыйДокумент.Метаданные();
	
	Для Каждого ОписаниеТаблицы Из ОписаниеТаблиц Цикл
		ТаблицаДокумента = ТаблицыНачислений[ОписаниеТаблицы.ИмяТаблицы];
		
		ДокументБезДатаНачала = МетаданныеДокумента.ТабличныеЧасти[ОписаниеТаблицы.ИмяТаблицы].Реквизиты.Найти("ДатаНачала") = Неопределено;
		
		ВидРасчета = Неопределено;
		Если Не ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
			УстановитьПривилегированныйРежим(Истина);
			ВидРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, ОписаниеТаблицы.ИмяРеквизитаВидРасчета);
			ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(ВидРасчета);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
		
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			СтрокаНачисления = НачисленияТекущегоДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНачисления, СтрокаДокумента);
			Если ОписаниеТаблицы.СодержитПолеВидРасчета Тогда
				СтрокаНачисления.Начисление = СтрокаДокумента[ОписаниеТаблицы.ИмяРеквизитаВидРасчета];
				ВидРасчетаИнфо = ЗарплатаКадрыРасширенныйПовтИсп.ПолучитьИнформациюОВидеРасчета(СтрокаНачисления.Начисление);
			Иначе
				СтрокаНачисления.Начисление = ВидРасчета;
			КонецЕсли;
			
			Если ДокументБезДатаНачала Тогда
				СтрокаНачисления.ДатаНачала = НачалоМесяца(ПериодРегистрации);
				СтрокаНачисления.ДатаОкончания = КонецМесяца(ПериодРегистрации);
				СтрокаНачисления.ПериодДействияНачало = ПериодРегистрации;
				СтрокаНачисления.ПериодДействияКонец = КонецМесяца(ПериодРегистрации);
			ИначеЕсли ВидРасчетаИнфо.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
				СтрокаНачисления.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
				СтрокаНачисления.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
			Иначе
				СтрокаНачисления.ПериодДействияНачало = СтрокаНачисления.ПериодДействия;
				СтрокаНачисления.ПериодДействияКонец = КонецМесяца(СтрокаНачисления.ПериодДействия);	
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;		
	
	Возврат НачисленияТекущегоДокумента;
КонецФункции	

Процедура УчестьПредыдущиеИсправленияДокумента(ИсправляемыйДокумент, НачисленияИсправляемогоДокумента) Экспорт
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияИсправляемогоДокумента, "Начисление", Истина);
	
	Фильтр = НачисленияИсправляемогоДокумента.Скопировать(, "Сотрудник, ПериодДействия");
	Фильтр.Свернуть("Сотрудник, ПериодДействия");
	
	РезультатыПредыдущихИсправлений = РезультатыПредыдущихИсправлений(ИсправляемыйДокумент, Фильтр, ВидыРасчета);
	
	РезультатыПредыдущихИсправлений.Индексы.Добавить("Сотрудник, ПериодДействия, Начисление, РассчитыватьПоРазовымНачислениямДокумента");
	РезультатыПредыдущихИсправлений.Индексы.Добавить("Сотрудник, ПериодДействия, Начисление, РассчитыватьПоРазовымНачислениямДокумента, РегистраторРазовогоНачисления");

	ОтборПоНачислениямДокумента = Новый Структура("Сотрудник, ПериодДействия, Начисление, РассчитыватьПоРазовымНачислениямДокумента, РегистраторРазовогоНачисления");
	ОтборБезАнализаДокумента = Новый Структура("Сотрудник, ПериодДействия, Начисление, РассчитыватьПоРазовымНачислениямДокумента");
	
	Для Каждого НачислениеДокумента Из НачисленияИсправляемогоДокумента Цикл	
		Отбор = ОтборПоНачислениямДокумента;
		ЗаполнитьЗначенияСвойств(ОтборПоНачислениямДокумента, НачислениеДокумента);
		
		Если НачислениеДокумента.РассчитыватьПоРазовымНачислениямДокумента
			Или ДокументыРазовыхНачислений.ЭтоРазовоеНачисление(НачислениеДокумента.Начисление) Тогда
			
			ОтборПоНачислениямДокумента.РегистраторРазовогоНачисления = ИсправляемыйДокумент;	
		Иначе
			ОтборПоНачислениямДокумента.РегистраторРазовогоНачисления = Неопределено;
		КонецЕсли;	
		
		ПредыдущиеИсправленияНачисления = РезультатыПредыдущихИсправлений.НайтиСтроки(ОтборПоНачислениямДокумента);
		
		Для Каждого ПредыдущееИсправление Из ПредыдущиеИсправленияНачисления Цикл
			Если ПериодИсправленияВходитВПериодНачисления(НачислениеДокумента, ПредыдущееИсправление, ПредыдущееИсправление.ИспользованиеПериода) 
				И ПредыдущееИсправление.ДокументОснование = НачислениеДокумента.ДокументОснование Тогда
				
				НачислениеДокумента.Результат = НачислениеДокумента.Результат + ПредыдущееИсправление.Результат;
				НачислениеДокумента.ОтработаноДней = НачислениеДокумента.ОтработаноДней + ПредыдущееИсправление.ОтработаноДней;
				НачислениеДокумента.ОтработаноЧасов = НачислениеДокумента.ОтработаноЧасов + ПредыдущееИсправление.ОтработаноЧасов;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры	

Функция ПериодИсправленияВходитВПериодНачисления(СтрокаНачисления, СтрокаИсправленияНачисления, ВариантИспользованияПериода)
	Если ВариантИспользованияПериода = Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия 
		И ОбщегоНазначенияБЗК.ДатаВИнтервале(НачалоДня(СтрокаИсправленияНачисления.ПериодДействияКонец), СтрокаНачисления.ДатаНачала, СтрокаНачисления.ДатаОкончания)
		И ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаИсправленияНачисления.ПериодДействияНачало, СтрокаНачисления.ДатаНачала, СтрокаНачисления.ДатаОкончания) Тогда
					
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокаИсправленияНачисления.ПериодДействия = СтрокаНачисления.ПериодДействия Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;			
КонецФункции	

Процедура ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеРезультатовНачислений.Регистратор КАК Регистратор,
	|	РаспределениеРезультатовНачислений.НомерСтроки КАК НомерСтроки,
	|	РаспределениеРезультатовНачислений.Активность КАК Активность,
	|	РаспределениеРезультатовНачислений.РегистраторИзмерение КАК РегистраторИзмерение,
	|	РаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	РаспределениеРезультатовНачислений.Территория КАК Территория,
	|	РаспределениеРезультатовНачислений.СтатьяФинансирования КАК СтатьяФинансирования,
	|	РаспределениеРезультатовНачислений.СтатьяРасходов КАК СтатьяРасходов,
	|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете КАК СпособОтраженияЗарплатыВБухучете,
	|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД,
	|	РаспределениеРезультатовНачислений.ПодразделениеУчетаЗатрат КАК ПодразделениеУчетаЗатрат,
	|	РаспределениеРезультатовНачислений.Результат КАК Результат
	|ИЗ
	|	РегистрСведений.РаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
	|ГДЕ
	|	РаспределениеРезультатовНачислений.Регистратор = &ИсправленныйДокумент";
	
	РаспределениеРезультатовНачислений = Запрос.Выполнить().Выгрузить();
	РаспределениеРезультатовНачислений.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаПерерасчет Из ДанныеПерерасчетов Цикл
		СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаПерерасчет.ИдентификаторСтрокиВидаРасчета);
		ТекущиеСтрокиРаспределения = РаспределениеРезультатовНачислений.НайтиСтроки(СтруктураПоиска);
		Если ТекущиеСтрокиРаспределения.Количество() > 0 Тогда
			
			СтрокиРаспределения = Новый Массив;
			Для Каждого СтрокаРаспределения Из ТекущиеСтрокиРаспределения Цикл
				
				ИменаКолонокТаблицыРаспределенияНачислений = ЗарплатаКадрыРасширенныйКлиентСервер.ИменаКолонокТаблицыРаспределенияРезультатовРасчетаНачислений();
				ОписаниеСтрок = Новый Структура(ИменаКолонокТаблицыРаспределенияНачислений);

				ЗаполнитьЗначенияСвойств(ОписаниеСтрок, СтрокаРаспределения);
				ОписаниеСтрок.Результат = -ОписаниеСтрок.Результат;
				СтрокиРаспределения.Добавить(Новый ФиксированнаяСтруктура(ОписаниеСтрок));
				
			КонецЦикла;
			СтрокаПерерасчет.РезультатРаспределения = Новый ФиксированныйМассив(СтрокиРаспределения);		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Для начислений рассчитываемых по доходам разового начисления
// в случае если в начислениях задним числом нет учитываемого регистратора
// проверяем не было ли добавлен перерасчет ведущего разового начисления
// и в случае если был добавлен, то добавляем и зависимое начисление в коллекцию перерасчетов
//
Функция НеобходимоДобавлятьПерерасчетЗависимого(СтрокаНачисления, РаннееДобавленныеНачисления) Экспорт
	Если Не СтрокаНачисления.УточнятьПоНаличиюРазовогоНачисления Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Отбор = Новый Структура("Сотрудник, ПериодДействия, РегистраторРазовогоНачисления");
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаНачисления);
	
	РанееДобавлено = РаннееДобавленныеНачисления.НайтиСтроки(Отбор);
	
	Для Каждого РанееДобавленнаяСтрока Из РанееДобавлено Цикл
		Если ОбщегоНазначенияБЗК.ДатаВИнтервале(РанееДобавленнаяСтрока.ПериодДействияНачало, СтрокаНачисления.БазовыйПериодНачало, СтрокаНачисления.БазовыйПериодКонец)
			Или ОбщегоНазначенияБЗК.ДатаВИнтервале(СтрокаНачисления.БазовыйПериодНачало, РанееДобавленнаяСтрока.ПериодДействияНачало, РанееДобавленнаяСтрока.ПериодДействияКонец) Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

Функция РезультатыПредыдущихИсправлений(ИсправляемыйДокумент, СотрудникиПериоды, ВидыРасчета)
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(СотрудникиПериоды, "Сотрудник", "ПериодДействия");
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ОписаниеПакетаЗапросов.Параметры.Вставить("ВидыРасчета", ВидыРасчета);
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсправляемыйДокумент", ИсправляемыйДокумент);
	ТипыОснованийПлановыхНачислений = РасчетЗарплатыРасширенный.ТипыОснованийПлановыхНачислений();	 	
	ОписаниеПакетаЗапросов.Параметры.Вставить("ТипыОснований", ТипыОснованийПлановыхНачислений);

	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ПериодДействияНачало КАК ДатаНачала,
	|	Начисления.ПериодДействияКонец КАК ДатаОкончания,
	|	Начисления.ВидРасчета КАК Начисление,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Начисления.ДокументОснование) В (&ТипыОснований)
	|			ТОГДА Начисления.ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОснование,
	|	Начисления.ВидРасчета.ИспользованиеПериода КАК ИспользованиеПериода,
	|	Начисления.Результат КАК Результат,
	|	Начисления.ОтработаноДней КАК ОтработаноДней,
	|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	Начисления.Регистратор КАК Регистратор,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ВЫБОР
	|		КОГДА Начисления.СторнируемыйДокумент = &ИсправляемыйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсправлениеТекущегоДокумента,
	|	Начисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	Начисления.РассчитыватьПоРазовымНачислениямДокумента КАК РассчитыватьПоРазовымНачислениямДокумента,
	|	Начисления.РегистраторРазовогоНачисления КАК РегистраторРазовогоНачисления
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
	|		ПО (&ШаблонУсловиеСвязиПоСотруднику)
	|			И (Начисления.ПериодДействия = &ФильтрПериодДействия_)
	|ГДЕ
	|	Начисления.ВидРасчета В(&ВидыРасчета)
	|	И Начисления.Перерасчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	ЭтоИсправлениеТекущегоДокумента УБЫВ";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("Начисления");
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиПериоды", "Начисления");
	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,
		"",
		ОператорЗапроса,
		"");
		
	ВыражениеПериодДействия = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодДействия", ОписаниеИспользованияФильтра); 
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрПериодДействия_", ВыражениеПериодДействия);	
		
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакетаЗапросов, 
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
	
	ПредыдущиеНачисления = Запрос.Выполнить().Выгрузить();
	
	СтрокиКУдалению = Новый Массив;
	ЭтоРегистраторИсправления = Ложь;
	ПредыдущийРегистратор = Неопределено;
	Для Каждого СтрокаНачислений Из ПредыдущиеНачисления Цикл
		Если СтрокаНачислений.Регистратор <> ПредыдущийРегистратор Тогда
			ЭтоРегистраторИсправления = СтрокаНачислений.ЭтоИсправлениеТекущегоДокумента;
			ПредыдущийРегистратор = СтрокаНачислений.Регистратор;
		КонецЕсли;
		
		Если Не ЭтоРегистраторИсправления 
			Или ЗначениеЗаполнено(СтрокаНачислений.СторнируемыйДокумент)
			И СтрокаНачислений.СторнируемыйДокумент <> ИсправляемыйДокумент Тогда
			
			СтрокиКУдалению.Добавить(СтрокаНачислений);
		КонецЕсли;		
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
		ПредыдущиеНачисления.Удалить(УдаляемаяСтрока);
	КонецЦикла;	
		
	Возврат ПредыдущиеНачисления;	
КонецФункции	

Функция ПериодИсправляемогоДокумента(НачисленияИсправляемогоДокумента) Экспорт
	ПериодИсправляемогоДокумента = ИнтервалПериода(ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата(), '00010101');
	
	Для Каждого СтрокаНачисления Из НачисленияИсправляемогоДокумента Цикл
		Если СтрокаНачисления.ДатаНачала < ПериодИсправляемогоДокумента.ДатаНачала Тогда
			ПериодИсправляемогоДокумента.ДатаНачала = СтрокаНачисления.ДатаНачала;
		КонецЕсли;
		
		Если СтрокаНачисления.ДатаОкончания > ПериодИсправляемогоДокумента.ДатаОкончания Тогда
			ПериодИсправляемогоДокумента.ДатаОкончания = СтрокаНачисления.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПериодИсправляемогоДокумента;	
КонецФункции	

// Доначислять зарплату необходимо если среди начислений исправляемого документа есть начисления с зачетом нормы времени
// и за период этих начислений есть записи в регистре расчета по сотруднику
// Если записей в регистре нет, то доначисление может потребоваться, если исправляемые начисления занимали весь период
// из-за чего других начислений быть не могло. При уменьшении периода в результате исправления, появляется интервал без
// начислений, в котором выполняется доначисление.
//
Функция НеобходимоДоначислятьЗарплату(ИсправляемыйДокумент, НачисленияИсправляемогоДокумента, НачисленияТекущегоДокумента) Экспорт
	СотрудникиПериоды = НачисленияИсправляемогоДокумента.Скопировать(Новый Структура("ЗачетНормыВремени", Истина), "Сотрудник, ПериодДействия, ДатаНачала, ДатаОкончания");
	СотрудникиПериоды.Свернуть("Сотрудник, ПериодДействия, ДатаНачала, ДатаОкончания");
			
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(СотрудникиПериоды, "Сотрудник", "ПериодДействия, ДатаНачала, ДатаОкончания");
	
	ОписаниеПакетаЗапросов = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	
	ОписаниеПакетаЗапросов.Параметры.Вставить("ИсправляемыйДокумент", ИсправляемыйДокумент);

	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	ВТСотрудникиПериоды КАК СотрудникиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК РегистрНачисления
	|		ПО (&ШаблонУсловиеСвязиПоСотруднику)
	|			И (РегистрНачисления.ПериодДействия = &ФильтрПериодДействия_)
	|			И (&ФильтрДатаНачала_ < РегистрНачисления.ПериодДействияКонец)
	|			И (&ФильтрДатаОкончания_ > РегистрНачисления.ПериодДействияНачало)
	|ГДЕ
	|	РегистрНачисления.Регистратор <> &ИсправляемыйДокумент";

	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонТекстаЗапроса);
	ОписаниеПакетаЗапросов.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("Начисления");
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("СотрудникиПериоды", "РегистрНачисления");
	
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра, 
		ОписаниеФильтра,
		ОписаниеРегистра,  
		"",
		ОператорЗапроса,
		"");
		
	ВыражениеПериодДействия = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ПериодДействия", ОписаниеИспользованияФильтра); 
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрПериодДействия_", ВыражениеПериодДействия);
	ВыражениеПериодДействия = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ДатаНачала", ОписаниеИспользованияФильтра); 
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ВыражениеПериодДействия);
	ВыражениеПериодДействия = ЗарплатаКадрыПериодическиеРегистры.ВыражениеДопПоляФильтраПоОписаниюИспользованияФильтра("ДатаОкончания", ОписаниеИспользованияФильтра); 
	ЗарплатаКадрыПериодическиеРегистры.ЗаменитьТекстВУсловииСвязиСФильтром(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ВыражениеПериодДействия);
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакетаЗапросов, 
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакетаЗапросов);
	
	Результат = Не Запрос.Выполнить().Пустой();
	Если Результат Тогда
		Возврат Результат;
	КонецЕсли;

	Отбор = Новый Структура("Начисление,ПериодДействия,Подразделение,Сотрудник");
	Для Каждого ИсправляемыйПериод Из НачисленияИсправляемогоДокумента Цикл
		Если ИсправляемыйПериод.ЗачетНормыВремени
			И ИсправляемыйПериод.ДатаНачала = НачалоДня(НачалоМесяца(ИсправляемыйПериод.ДатаНачала))
			И ИсправляемыйПериод.ДатаОкончания = НачалоДня(КонецМесяца(ИсправляемыйПериод.ДатаОкончания)) Тогда
		
			ЗаполнитьЗначенияСвойств(Отбор, ИсправляемыйПериод);
			ИсправляющиеПериоды = НачисленияТекущегоДокумента.НайтиСтроки(Отбор);
			Для Каждого ИсправляющийПериод Из ИсправляющиеПериоды Цикл
				Если ИсправляющийПериод.ДатаНачала > ИсправляемыйПериод.ДатаНачала
					Или ИсправляющийПериод.ДатаОкончания < ИсправляемыйПериод.ДатаОкончания Тогда
					Результат = Истина;
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции	

Функция ПериодыВосстановленияНачислений(ПериодИсправляемогоДокумента, НачисленияТекущегоДокумента) Экспорт
	// Скорректируем исправляемый период.
	// В начале он состоит из одного интервала.
	ИсправляемыйПериод = Новый Массив;
	НовыйИнтервал = ИнтервалПериода(ПериодИсправляемогоДокумента.ДатаНачала, ПериодИсправляемогоДокумента.ДатаОкончания);
	ИсправляемыйПериод.Добавить(НовыйИнтервал);
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияТекущегоДокумента, "Начисление", Истина);
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	СпособыВыполненияПлановыхНачислений = ПлановыеНачисленияСотрудников.СпособыВыполненияПлановыхНачислений();
	
	Для Каждого СтрокаНачисления Из НачисленияТекущегоДокумента Цикл
		
		// В исправляемый период не входят интервалы в которые уже начислены плановые начисления
		// текущим документом-исправлением.
		ВидРасчетаИнфо = ВидыРасчетаИнфо[СтрокаНачисления.Начисление];
		Если СпособыВыполненияПлановыхНачислений.Найти(ВидРасчетаИнфо.СпособВыполненияНачисления) <> Неопределено
			И Не СтрокаНачисления.РассчитыватьПоРазовымНачислениямДокумента Тогда
			
			УдаляемыеИнтервалы = Новый Массив;
			НовыеИнтервалы = Новый Массив;
			НачалоНачисления = СтрокаНачисления.ДатаНачала;
			ОкончаниеНачисления = КонецДня(СтрокаНачисления.ДатаОкончания);
			Индекс = 0;
			Пока Индекс < ИсправляемыйПериод.Количество() Цикл
				Интервал = ИсправляемыйПериод[Индекс];
				// Если начисление "задевает" интервал
				Если НачалоНачисления < Интервал.ДатаОкончания И ОкончаниеНачисления > Интервал.ДатаНачала Тогда
					Если НачалоНачисления <= Интервал.ДатаНачала И ОкончаниеНачисления >= Интервал.ДатаОкончания Тогда 
						// Полностью покрыли интервал - удаляем
						УдаляемыеИнтервалы.Добавить(Индекс);
					ИначеЕсли НачалоНачисления <= Интервал.ДатаНачала И ОкончаниеНачисления < Интервал.ДатаОкончания Тогда
						// отрезали начало
						Интервал.ДатаНачала = ОкончаниеНачисления + 1;
					ИначеЕсли НачалоНачисления > Интервал.ДатаНачала И ОкончаниеНачисления >= Интервал.ДатаОкончания Тогда
						// отрезали конец
						Интервал.ДатаОкончания = НачалоНачисления - 1;
					Иначе
						// Вырезание середины интервала
						// добавляем новый интервал (вторая часть после "разрезания").
						НовыйИнтервал = ИнтервалПериода(ОкончаниеНачисления + 1, Интервал.ДатаОкончания);
						НовыеИнтервалы.Добавить(НовыйИнтервал);
						// ...и корректируем текущий интервал (первая часть после "разрезания")
						Интервал.ДатаОкончания = НачалоНачисления - 1;
					КонецЕсли;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			// Удалим интервалы
			Для Каждого УдаляемыйИнтервал Из УдаляемыеИнтервалы Цикл
				ИсправляемыйПериод.Удалить(УдаляемыйИнтервал);
			КонецЦикла;
			// Добавим новые
			Для Каждого НовыйИнтервал Из НовыеИнтервалы Цикл
				ИсправляемыйПериод.Добавить(НовыйИнтервал);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИсправляемыйПериод;
КонецФункции	

Функция ВосстанавливаемыеНачисления(ДокументСсылка, ИсправляемыйДокумент, ПериодРегистрации, Организация, СотрудникиИсправляемогоДокумента, ПериодыВосстановленияНачислений) Экспорт
	МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(ПериодРегистрации, Организация);
	МенеджерРасчета.УстановитьНастройкиРасчетаПоУмолчанию();
	МенеджерРасчета.ИсключаемыйРегистратор = ДокументСсылка;
	МенеджерРасчета.ИсправленныйДокумент = ИсправляемыйДокумент;
	МенеджерРасчета.НастройкиРасчета.ИсключатьРанееОплаченныеПериоды = Ложь;
	ТаблицаСотрудников = МенеджерРасчета.ТаблицаСотрудников();
	Для Каждого Интервал Из ПериодыВосстановленияНачислений Цикл
		Для Каждого СотрудникМассива Из СотрудникиИсправляемогоДокумента Цикл
			НоваяСтрока = ТаблицаСотрудников.Добавить();
			НоваяСтрока.Сотрудник = СотрудникМассива;
			НоваяСтрока.ДатаНачала = Интервал.ДатаНачала;
			НоваяСтрока.ДатаОкончания = Интервал.ДатаОкончания;
		КонецЦикла;
	КонецЦикла;
	МенеджерРасчета.ЗаполнитьНачислениеЗарплаты(ТаблицаСотрудников);
	Возврат МенеджерРасчета.Зарплата.Начисления;
КонецФункции	

Функция СкорректироватьПерерасчетыСУчетомФПД(ДанныеПерерасчетовСторно, ДанныеСотрудников, ПериодРегистрации, ИсправленныйДокумент)
	
	// Вычисляем, изменился ли ФПД сторнируемых строк и если да - делаем сторно рассчитываемым (ФиксСторно = Ложь).
	ВременнаяСсылкаПолучениеФПД = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеФПД = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеФПД);
	Для Каждого Строка Из ДанныеПерерасчетовСторно Цикл
		ДанныеСотрудника = ДанныеСотрудников[Строка.Сотрудник];
		НоваяСтрока = НачисленияНаборПолучениеФПД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		НоваяСтрока.Сторно = Ложь; // Вводим "обычную" запись, чтобы выяснить ее новый ФПД.
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = Строка.ДатаНачала;
		НоваяСтрока.ПериодДействияКонец = КонецДня(Строка.ДатаОкончания);
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеФПД;
	КонецЦикла;
	
	НачисленияНаборПолучениеФПД.Записать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылкаПолучениеФПД);
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСторно.Сотрудник КАК Сотрудник,
		|	НачисленияСторно.ВидРасчета КАК ВидРасчета,
		|	НачисленияСторно.ПериодДействия КАК ПериодДействия,
		|	НачисленияСторно.Сторно КАК Сторно,
		|	НачисленияСторно.ПериодДействияНачало КАК ПериодДействияНачало,
		|	НачисленияСторно.ПериодДействияКонец КАК ПериодДействияКонец,
		|	СУММА(РАЗНОСТЬДАТ(Слева.ПериодДействияНачало, Слева.ПериодДействияКонец, СЕКУНДА) + 1) КАК Продолжительность
		|ПОМЕСТИТЬ ВТПериодыСторноПредварительно
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(
		|			Сторно = ИСТИНА
		|				И СторнируемыйДокумент = &ИсправленныйДокумент) КАК НачисленияСторно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ФактическийПериодДействия(
		|				Сторно = ИСТИНА
		|					И СторнируемыйДокумент = &ИсправленныйДокумент) КАК Слева
		|		ПО (Слева.Сотрудник = НачисленияСторно.Сотрудник)
		|			И (Слева.ВидРасчета = НачисленияСторно.ВидРасчета)
		|			И (Слева.ПериодДействияНачало <= НачисленияСторно.ПериодДействияКонец)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияСторно.Сотрудник,
		|	НачисленияСторно.ВидРасчета,
		|	НачисленияСторно.ПериодДействия,
		|	НачисленияСторно.Сторно,
		|	НачисленияСторно.ПериодДействияНачало,
		|	НачисленияСторно.ПериодДействияКонец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыСторно.Сотрудник КАК Сотрудник,
		|	ПериодыСторно.ВидРасчета КАК ВидРасчета,
		|	ПериодыСторно.ПериодДействия КАК ПериодДействия,
		|	ПериодыСторно.Сторно КАК Сторно,
		|	МИНИМУМ(ПериодыСторно.ПериодДействияНачало) КАК ПериодДействияНачало,
		|	МАКСИМУМ(ПериодыСторно.ПериодДействияКонец) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТПериодыСторноОбъединенные
		|ИЗ
		|	ВТПериодыСторноПредварительно КАК ПериодыСторно
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыСторно.Сотрудник,
		|	ПериодыСторно.ВидРасчета,
		|	ПериодыСторно.ПериодДействия,
		|	ПериодыСторно.Сторно,
		|	ДОБАВИТЬКДАТЕ(ПериодыСторно.ПериодДействияКонец, СЕКУНДА, -ПериодыСторно.Продолжительность)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.НомерСтроки КАК НомерСтроки,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета КАК ВидРасчета,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
		|	ЕСТЬNULL(НачисленияСторно.Сторно
		|			И НачисленияСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
		|			И НачисленияСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец, ЛОЖЬ) КАК Сторнировано,
		|	ЕСТЬNULL(НачисленияСторно.Сторно
		|			И (НачисленияСторно.ПериодДействияНачало <> Начисления.ПериодДействияНачало
		|				ИЛИ НачисленияСторно.ПериодДействияКонец <> Начисления.ПериодДействияКонец), ЛОЖЬ) КАК СторнированоЧастично,
		|	НачисленияФактическийПериодДействия.ВидРасчета ЕСТЬ NULL КАК Вытеснено
		|ПОМЕСТИТЬ ВТНовыйФПД
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &Регистратор) КАК НачисленияФактическийПериодДействия
		|		ПО Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыСторноОбъединенные КАК НачисленияСторно
		|		ПО (НачисленияСторно.Сотрудник = Начисления.Сотрудник)
		|			И (НачисленияСторно.ВидРасчета = Начисления.ВидРасчета)
		|			И (НачисленияСторно.ПериодДействияНачало <= Начисления.ПериодДействияКонец)
		|			И (НачисленияСторно.ПериодДействияКонец >= Начисления.ПериодДействияНачало)
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	НачисленияФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	НачисленияФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|	НачисленияФактическийПериодДействия.Сторно КАК Сторно,
		|	НачисленияФактическийПериодДействия.ПериодДействияНачало КАК ДатаНачала,
		|	НачисленияФактическийПериодДействия.ПериодДействияКонец КАК ДатаОкончания,
		|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
		|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТСтарыйФПД
		|ИЗ
		|	РегистрРасчета.Начисления.ФактическийПериодДействия(Регистратор = &ИсправленныйДокумент) КАК НачисленияФактическийПериодДействия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.Начисления КАК Начисления
		|		ПО (Начисления.Регистратор = &ИсправленныйДокумент)
		|			И (Начисления.НомерСтроки = НачисленияФактическийПериодДействия.НомерСтроки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыйФПД.НомерСтроки КАК НомерСтроки,
		|	НовыйФПД.ДатаНачала КАК ПериодДействияНачало,
		|	НовыйФПД.ДатаОкончания КАК ПериодДействияКонец,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА НовыйФПД.ДатаНачала = СтарыйФПД.ДатаНачала
		|						И НовыйФПД.ДатаОкончания = СтарыйФПД.ДатаОкончания
		|					ИЛИ НовыйФПД.ВидРасчета.ИспользованиеПериода <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияПериодаНачисления.ПериодДействия)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ФПДСовпадает
		|ПОМЕСТИТЬ ВТПоверочныйФПД
		|ИЗ
		|	ВТНовыйФПД КАК НовыйФПД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтарыйФПД КАК СтарыйФПД
		|		ПО НовыйФПД.Сотрудник = СтарыйФПД.Сотрудник
		|			И НовыйФПД.ВидРасчета = СтарыйФПД.ВидРасчета
		|			И (НЕ СтарыйФПД.Сторно)
		|			И НовыйФПД.ПериодДействияКонец = СтарыйФПД.ПериодДействияКонец
		|			И НовыйФПД.ПериодДействияНачало = СтарыйФПД.ПериодДействияНачало
		|			И НовыйФПД.ДатаНачала <= СтарыйФПД.ДатаОкончания
		|			И НовыйФПД.ДатаОкончания >= СтарыйФПД.ДатаНачала
		|ГДЕ
		|	НЕ НовыйФПД.Вытеснено
		|
		|СГРУППИРОВАТЬ ПО
		|	НовыйФПД.НомерСтроки,
		|	НовыйФПД.ДатаНачала,
		|	НовыйФПД.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.НомерСтроки - 1 КАК ИндексСтроки,
		|	ВЫБОР
		|		КОГДА ПоверочныйФПД.ФПДСовпадает
		|			ТОГДА Начисления.ПериодДействияНачало
		|		ИНАЧЕ ЕСТЬNULL(ПоверочныйФПД.ПериодДействияНачало, Начисления.ПериодДействияНачало)
		|	КОНЕЦ КАК ПериодДействияНачало,
		|	ВЫБОР
		|		КОГДА ПоверочныйФПД.ФПДСовпадает
		|			ТОГДА Начисления.ПериодДействияКонец
		|		ИНАЧЕ ЕСТЬNULL(ПоверочныйФПД.ПериодДействияКонец, Начисления.ПериодДействияКонец)
		|	КОНЕЦ КАК ПериодДействияКонец,
		|	Начисления.СторнированоЧастично КАК СторнированоЧастично,
		|	ЕСТЬNULL(ПоверочныйФПД.ФПДСовпадает, ИСТИНА) КАК СтрокаНеИзменилась
		|ИЗ
		|	ВТНовыйФПД КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоверочныйФПД КАК ПоверочныйФПД
		|		ПО Начисления.НомерСтроки = ПоверочныйФПД.НомерСтроки
		|ГДЕ
		|	НЕ Начисления.Сторнировано
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.НомерСтроки - 1";
	
	ИнтервалыПерерасчета = Запрос.Выполнить().Выбрать();
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	Пока ИнтервалыПерерасчета.Следующий() Цикл
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, ДанныеПерерасчетовСторно[ИнтервалыПерерасчета.ИндексСтроки]);
		НоваяСтрокаПерерасчета.ДатаНачала = ИнтервалыПерерасчета.ПериодДействияНачало;
		НоваяСтрокаПерерасчета.ДатаОкончания = ИнтервалыПерерасчета.ПериодДействияКонец;
		// Если ФПД сторнируемой строки изменился - делаем ее сторно рассчитываемым.
		Если Не ИнтервалыПерерасчета.СтрокаНеИзменилась Или ИнтервалыПерерасчета.СторнированоЧастично Тогда
			НоваяСтрокаПерерасчета.ФиксСторно = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	НачисленияНаборПолучениеФПД.Очистить();
	НачисленияНаборПолучениеФПД.Записать();
	
	Возврат ДанныеПерерасчетов;
	
КонецФункции

Процедура СформироватьДанныеПерерасчетаДляИсправленияСлужебный(Организация, ПериодРегистрации, ИсправленныйДокумент,
	ТаблицыНачислений, НачисленияПерерасчет, ДокументСсылка, ОписанияТаблиц, КонтролируемыеПоля,
	ОписаниеДокумента, Сотрудник, ДоначислитьЗарплатуПриНеобходимости)
	
	НачисленияИсправляемогоДокумента = НачисленияИсправляемогоДокумента(ИсправленныйДокумент, ОписанияТаблиц, Сотрудник);
	Если НачисленияИсправляемогоДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтменятьТранзакцию = Не ТранзакцияАктивна();
	Если ОтменятьТранзакцию Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	// Удаляем текущие движения для исключения влияния на заполнение перерасчетов прошлого периода.
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПредыдущийНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ДокументСсылка);
		ПредыдущийНабор.Записать(); 
	КонецЕсли;
	
	УчестьПредыдущиеИсправленияДокумента(ИсправленныйДокумент, НачисленияИсправляемогоДокумента);
	
	СотрудникиИсправляемогоДокумента = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияИсправляемогоДокумента, "Сотрудник", Истина);	
	
	НачисленияТекущегоДокумента = НачисленияТекущегоДокумента(ИсправленныйДокумент, ПериодРегистрации, ТаблицыНачислений, ОписанияТаблиц);
	
	ТребуетсяВосстановлениеНачислений = ДоначислитьЗарплатуПриНеобходимости
		И НеобходимоДоначислятьЗарплату(ИсправленныйДокумент, НачисленияИсправляемогоДокумента, НачисленияТекущегоДокумента);
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		// Получим данные плановых начислений за исправляемый период.
		ИсправляемыйПериод = ПериодыВосстановленияНачислений(
			ПериодИсправляемогоДокумента(НачисленияИсправляемогоДокумента), НачисленияТекущегоДокумента);
	
		ПлановыеНачисления = ВосстанавливаемыеНачисления(
			ДокументСсылка, 
			ИсправленныйДокумент, 
			ПериодРегистрации, 
			Организация, 
			СотрудникиИсправляемогоДокумента, 
			ИсправляемыйПериод);
	Иначе
		ПлановыеНачисления = Обработки.МенеджерРасчетаЗарплаты.ТаблицаНачислений();
	КонецЕсли;
	
	// "Новые" сотрудники.
	СотрудникиТекущегоДокумента = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияТекущегоДокумента, "Сотрудник", Истина);
	
	ОтборСотрудников = СотрудникиТекущегоДокумента;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборСотрудников, СотрудникиИсправляемогоДокумента, Истина);
		
	ДанныеСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ОтборСотрудников, "ФизическоеЛицо,ГоловнаяОрганизация");
	
	// 1.
	// Получаем записи, которые, возможно, нужно сторнировать из-за расширения периода начисления.
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНабор = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылка);
	
	ВидыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияТекущегоДокумента, "Начисление", Истина);
	ВидыРасчетаИнфо = ЗарплатаКадрыРасширенный.ИнформацияОВидахРасчета(ВидыРасчета);
	
	// "Новые" записи документа.
	Для Каждого СтрокаНачисления Из НачисленияТекущегоДокумента Цикл
		// Получать дополнение для начислений не имеющих периодов 
		// действия или для начислений "будущих" периодов не имеет смысла.
		ВидРасчетаИнфо = ВидыРасчетаИнфо[СтрокаНачисления.Начисление];
		Если ВидРасчетаИнфо.ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия
			Или СтрокаНачисления.ДатаНачала >= ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСотрудника = ДанныеСотрудников[СтрокаНачисления.Сотрудник];
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
	КонецЦикла;
	СторноЗаписи = НачисленияНабор.ПолучитьДополнение();
	НачисленияНабор.Очистить();
	
	ВременныйРегистраторПерерасчета = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборДляЗаполненияПерерасчета = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременныйРегистраторПерерасчета);
	
	НачисленияЗаднимЧислом = ПустаяТаблицаНачисленийЗаднимЧислом();
	ИдентификаторСтроки = 1;
	
	Для Каждого СтрокаСторно Из СторноЗаписи Цикл
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаСторно);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = СтрокаСторно.Регистратор;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаСторно.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Истина;
		СтрокаЗаднимЧислом.СторнируемыйДокумент = СтрокаСторно.Регистратор;
		
		ДанныеСотрудника = ДанныеСотрудников[СтрокаСторно.Сотрудник];
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСторно);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Истина;
		НоваяСтрока.ПериодРегистрации = СтрокаСторно.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаСторно.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаСторно.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	// 2.
	// Выявляем начисления, которые необходимо доначислить в связи с исправлением.
	// Необходимо восстановить начисления в "старых" периодах по "старым" сотрудникам.
	
	ВременнаяСсылкаФизлицо = Справочники.ФизическиеЛица.ПолучитьСсылку();
	ВременныйПериодРегистрации = ПериодРегистрации;
	ВременныйСледующийПериодРегистрации = ДобавитьМесяц(ВременныйПериодРегистрации, 1);
	
	СпособыВыполненияПлановыхНачислений = ПлановыеНачисленияСотрудников.СпособыВыполненияПлановыхНачислений();
	
	// Добавим во временный набор новые, исправленные записи.
	Для Каждого СтрокаНачисления Из НачисленияТекущегоДокумента Цикл
		ВидРасчетаИнфо = ВидыРасчетаИнфо[СтрокаНачисления.Начисление];
		Если СпособыВыполненияПлановыхНачислений.Найти(ВидРасчетаИнфо.СпособВыполненияНачисления) <> Неопределено Тогда
			Продолжить; // Записи, представляющие собой плановые начисления пропускаем.
		КонецЕсли;
		НоваяСтрока = НачисленияНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо; // Ссылка на физлицо
		// Головная организация "нового" сотрудника.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
		НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "новый" сотрудник.
		НоваяСтрока.Регистратор = ВременнаяСсылка;
		НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
		НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
		НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ПериодДействияНачало;
		НоваяСтрока.ПериодДействияКонец = СтрокаНачисления.ПериодДействияКонец;
	КонецЦикла;
	
	Если ТребуетсяВосстановлениеНачислений Тогда
		
		ЗначенияПоказателейНабор = РегистрыСведений.ЗначенияПоказателейНачислений.СоздатьНаборЗаписей();
		ЗначенияПоказателейНабор.Отбор.Регистратор.Установить(ВременныйРегистраторПерерасчета);
		
		// Добавим во временный набор плановые начисления исправляемого периода.
		Для Каждого СтрокаНачисления Из ПлановыеНачисления Цикл
			НоваяСтрока = НачисленияНабор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисления);
			// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
			НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
			// Настоящая головная организация.
			НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисления.Сотрудник].ГоловнаяОрганизация;
			НоваяСтрока.Сотрудник = СтрокаНачисления.Сотрудник; // Настоящий "старый" сотрудник.
			НоваяСтрока.Регистратор = ВременнаяСсылка;
			НоваяСтрока.ВидРасчета = СтрокаНачисления.Начисление;
			НоваяСтрока.ПериодРегистрации = ВременныйПериодРегистрации;
			НоваяСтрока.ПериодДействияНачало = СтрокаНачисления.ДатаНачала;
			НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаНачисления.ДатаОкончания);
			// Сохраним показатели во временный набор записей.
			Для Каждого СтрокаПоказателя Из СтрокаНачисления.Показатели Цикл
				НоваяСтрокаПоказателя = ЗначенияПоказателейНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказателя, СтрокаПоказателя);
				НоваяСтрокаПоказателя.Регистратор = ВременныйРегистраторПерерасчета;
				НоваяСтрокаПоказателя.РегистраторИзмерение = ВременныйРегистраторПерерасчета;
			КонецЦикла;
		КонецЦикла;
		НачисленияНабор.Записать();                                
	КонецЕсли;
	
	ВременнаяСсылкаПолучениеДополнения = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НачисленияНаборПолучениеДополнения = РасчетЗарплатыРасширенный.НаборЗаписейНачисления(ВременнаяСсылкаПолучениеДополнения);
	
	ДанныеПерерасчетовСторно = РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых начислений, которые потребуется доначислить.
	Для Каждого СтрокаНачисленийИсправленногоДокумента Из НачисленияИсправляемогоДокумента Цикл
		// Заполнение набора записей для получения доначислений из-за смещения периода.
		НоваяСтрока = НачисленияНаборПолучениеДополнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачисленийИсправленногоДокумента);
		// Фиктивная ссылка для того, чтобы не пересекаться с настоящими записями регистра.
		НоваяСтрока.ФизическоеЛицо = ВременнаяСсылкаФизлицо;
		// Настоящая головная организация.
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудников[СтрокаНачисленийИсправленногоДокумента.Сотрудник].ГоловнаяОрганизация;
		// НоваяСтрока.Сотрудник 			// "старого" сотрудника оставляем.
		НоваяСтрока.Регистратор = ВременнаяСсылкаПолучениеДополнения;
		НоваяСтрока.ВидРасчета = СтрокаНачисленийИсправленногоДокумента.Начисление;
		НоваяСтрока.ПериодРегистрации = ВременныйСледующийПериодРегистрации;
		
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетовСторно.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, СтрокаНачисленийИсправленногоДокумента);
		НоваяСтрокаПерерасчета.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрокаПерерасчета.Результат = - СтрокаНачисленийИсправленногоДокумента.Результат;
		НоваяСтрокаПерерасчета.РанееНачислено = - СтрокаНачисленийИсправленногоДокумента.РанееНачислено;
		НоваяСтрокаПерерасчета.СуммаВычета = - СтрокаНачисленийИсправленногоДокумента.СуммаВычета;
		
		НоваяСтрокаПерерасчета.СкидкаПоВзносам = - СтрокаНачисленийИсправленногоДокумента.СкидкаПоВзносам;
		
		НоваяСтрокаПерерасчета.СуммаДоходаНеОблагаемаяНДФЛ = - СтрокаНачисленийИсправленногоДокумента.СуммаДоходаНеОблагаемаяНДФЛ;
		
		Если СтрокаНачисленийИсправленногоДокумента.ИспользованиеПериода <> Перечисления.ВариантыИспользованияПериодаНачисления.ПериодДействия Тогда
			НоваяСтрокаПерерасчета.ДатаНачала = СтрокаНачисленийИсправленногоДокумента.ПериодДействияНачало;
			НоваяСтрокаПерерасчета.ДатаОкончания = СтрокаНачисленийИсправленногоДокумента.ПериодДействияКонец;
			Если СтрокаНачисленийИсправленногоДокумента.ИспользованиеПериода = Перечисления.ВариантыИспользованияПериодаНачисления.БазовыйПериод Тогда
				НоваяСтрокаПерерасчета.НачалоБазовогоПериода = СтрокаНачисленийИсправленногоДокумента.ДатаНачала;
				НоваяСтрокаПерерасчета.ОкончаниеБазовогоПериода = СтрокаНачисленийИсправленногоДокумента.ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ = - СтрокаНачисленийИсправленногоДокумента.РезультатВТомЧислеЗаСчетФБ;
		НоваяСтрокаПерерасчета.РезультатФСС = - СтрокаНачисленийИсправленногоДокумента.РезультатФСС;
		
		НоваяСтрокаПерерасчета.ОтработаноДней = - СтрокаНачисленийИсправленногоДокумента.ОтработаноДней;
		НоваяСтрокаПерерасчета.ОтработаноЧасов = - СтрокаНачисленийИсправленногоДокумента.ОтработаноЧасов;
		НоваяСтрокаПерерасчета.ОплаченоДней = - СтрокаНачисленийИсправленногоДокумента.ОплаченоДней;
		НоваяСтрокаПерерасчета.ОплаченоЧасов = - СтрокаНачисленийИсправленногоДокумента.ОплаченоЧасов;
		
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина; // По умолчанию сторнирующие строки не пересчитываем.
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = ИсправленныйДокумент;
	КонецЦикла;
	
	ЭтоИсправлениеТекущимПериодом = 
		ПериодРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправленныйДокумент, ОписаниеДокумента.МесяцНачисленияИмя);
	
	Если ЭтоИсправлениеТекущимПериодом Тогда
		ДанныеПерерасчетов = ДанныеПерерасчетовСторно;
	Иначе
		ДанныеПерерасчетов = СкорректироватьПерерасчетыСУчетомФПД(
			ДанныеПерерасчетовСторно, ДанныеСотрудников, ПериодРегистрации, ИсправленныйДокумент);
	КонецЕсли;
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	ЗаполнитьРезультатыРаспределенияНачислений(ДанныеПерерасчетов, ИсправленныйДокумент);
	ЗаполнитьРезультатыРаспределенияПоТерриториям(ДанныеПерерасчетов, ИсправленныйДокумент);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// То, что сторнировалось бы при вводе прежнего начисления, это и есть то, что нужно 
	// доначислить сейчас, при его "отмене".
	ЗаписиДоначисления = НачисленияНаборПолучениеДополнения.ПолучитьДополнение();
	
	Для Каждого СтрокаДоначисления Из ЗаписиДоначисления Цикл
		Если НачалоМесяца(СтрокаДоначисления.ПериодДействияНачалоСторно) >= ПериодРегистрации Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗаднимЧислом = НачисленияЗаднимЧислом.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаднимЧислом, СтрокаДоначисления);
		СтрокаЗаднимЧислом.Регистратор = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтроки = ИдентификаторСтроки;
		СтрокаЗаднимЧислом.РегистраторПоказателей = ВременныйРегистраторПерерасчета;
		СтрокаЗаднимЧислом.ИдентификаторСтрокиПоказателей = СтрокаДоначисления.ИдентификаторСтроки;
		СтрокаЗаднимЧислом.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		СтрокаЗаднимЧислом.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		СтрокаЗаднимЧислом.Сторно = Ложь;
		
		ДанныеСотрудника = ДанныеСотрудников[СтрокаДоначисления.Сотрудник];
		
		НоваяСтрока = НаборДляЗаполненияПерерасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДоначисления);
		НоваяСтрока.ФизическоеЛицо = ДанныеСотрудника.ФизическоеЛицо;
		НоваяСтрока.ГоловнаяОрганизация = ДанныеСотрудника.ГоловнаяОрганизация;
		НоваяСтрока.Регистратор = ВременныйРегистраторПерерасчета;
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		НоваяСтрока.Сторно = Ложь;
		НоваяСтрока.ПериодРегистрации = СтрокаДоначисления.ПериодРегистрацииСторно;
		НоваяСтрока.ПериодДействияНачало = СтрокаДоначисления.ПериодДействияНачалоСторно;
		НоваяСтрока.ПериодДействияКонец = КонецДня(СтрокаДоначисления.ПериодДействияКонецСторно);
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;
	
	НачисленияНабор.Очистить();
	НачисленияНабор.Записать();
	
	НаборДляЗаполненияПерерасчета.Записать();
	Если ТребуетсяВосстановлениеНачислений Тогда
		ЗначенияПоказателейНабор.Записать();
	КонецЕсли;
	
	// 3.
	// Получим начисления, зависимые от введенных сторно и доначислений.
	НачисленияПерерасчетНовые = НачисленияПерерасчет.Выгрузить().СкопироватьКолонки();
	ЗаполнитьНачисленияПерерасчетПоНачисленияЗаднимЧислом(Организация, ПериодРегистрации,
		НачисленияЗаднимЧислом, НачисленияПерерасчетНовые, ВременныйРегистраторПерерасчета, ДанныеПерерасчетов);
	
	КлючевыеКолонки = "Сотрудник,Начисление";
	УсловияЗаменыСтрок = РасчетЗарплатыРасширенный.УсловияЗаменыСтрокКонтролируемымиПолями(КонтролируемыеПоля, ОписаниеДокумента.НачисленияПерерасчетИмя);
	ОтборПоСотрудникам = Неопределено;
	Если Сотрудник <> Неопределено Тогда
		Если ТипЗнч(Сотрудник) <> Тип("Массив") Тогда
			// Значит была ссылка на одного сотрудника.
			ОтборПоСотрудникам = Новый Структура("Сотрудник", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));
		Иначе
			ОтборПоСотрудникам = Новый Структура("Сотрудник", Сотрудник);
		КонецЕсли;
	КонецЕсли;
	РасчетЗарплатыРасширенный.ЗаменитьСтрокиНаНовыеДанные(НачисленияПерерасчет, НачисленияПерерасчетНовые, КлючевыеКолонки, УсловияЗаменыСтрок, ОтборПоСотрудникам);
	
	Если ОтменятьТранзакцию Тогда
		ОтменитьТранзакцию();
	Иначе
		НаборДляЗаполненияПерерасчета.Очистить();
		НаборДляЗаполненияПерерасчета.Записать();
		Если ТребуетсяВосстановлениеНачислений Тогда
			ЗначенияПоказателейНабор.Очистить();
			ЗначенияПоказателейНабор.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переносит значения показателей, зарегистрированные "при" сторнируемом документе в таблицу Начисления.
//
// Параметры:
//	Начисления - таблица значений см. РасчетЗарплатыРасширенный.ПустаяТаблицаНачисления.
//
Процедура ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(Начисления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Начисление,
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Начисления.Начисление,
	|	Показатели.Показатель,
	|	ЗначенияПоказателейНачислений.Значение
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления.Показатели КАК Показатели
	|		ПО (Показатели.Ссылка = Начисления.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейНачислений КАК ЗначенияПоказателейНачислений
	|		ПО (ЗначенияПоказателейНачислений.Регистратор = Начисления.СторнируемыйДокумент)
	|			И (Показатели.Показатель = ЗначенияПоказателейНачислений.Показатель)
	|			И (ЗначенияПоказателейНачислений.ИдентификаторСтроки = Начисления.ИдентификаторСтрокиВидаРасчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начисления.СторнируемыйДокумент,
	|	Начисления.ИдентификаторСтрокиВидаРасчета,
	|	Показатели.НомерСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийРегистратор = Неопределено;
	ТекущийИдентификаторСтроки = Неопределено;
	
	ОтборСтрок = Новый Структура("СторнируемыйДокумент, ИдентификаторСтрокиВидаРасчета");
	
	НомерПоказателя = 0;
	Пока Выборка.Следующий() Цикл
		Если ТекущийИдентификаторСтроки <> Выборка.ИдентификаторСтрокиВидаРасчета 
			Или ТекущийРегистратор <> Выборка.СторнируемыйДокумент Тогда
			НомерПоказателя = 1;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, Выборка);
			НайденныеСтроки = Начисления.НайтиСтроки(ОтборСтрок);
		КонецЕсли;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока["Показатель" + НомерПоказателя] = Выборка.Показатель;
			НайденнаяСтрока["Значение" + НомерПоказателя] = Выборка.Значение;
		КонецЦикла;
		НомерПоказателя = НомерПоказателя + 1;
		ТекущийИдентификаторСтроки = Выборка.ИдентификаторСтрокиВидаРасчета;
		ТекущийРегистратор = Выборка.СторнируемыйДокумент;
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу с данными перерасчета на основании данных исправляемого документа.
// Параметры:
//		Организация, 
//		ПериодРегистрации, 
//		ИсправленныйДокумент, 
//		Начисления - таблица с начислениями.
//		НачисленияПерерасчет -  - таблица с показателями перерасчета.
//
// Процедура предполагает "стандартные" структуры данных формы Начисления и НачисленияПерерасчет.
// При формировании перерасчетов заполняются 
//		- сторнируемые начисления
//		- доначисления плановых начислений, если исправление документа 
//			приводит к "освобождению" ранее занятого периода
//		- "отменяющие" сторно-записи зависимых начислений
//		- новые записи зависимых начислений.
//
Процедура СформироватьДанныеПерерасчетаДляИсправленияПособий(ИсправленныйДокумент, ПериодРегистрации, Пособия, ПособияПерерасчет, НачисленияПерерасчет, ОписаниеТаблицыПособияПерерасчеты, Сотрудник = Неопределено) Экспорт
	
	ПособияПерерасчет.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#Таблица КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ИсправленныйДокумент");
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ИсправленныйДокумент);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Таблица", ИмяТаблицы + ".Пособия");
	
	Если Сотрудник <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Ссылка = &ИсправленныйДокумент",
			"Начисления.Ссылка = &ИсправленныйДокумент И Начисления.Сотрудник В(&Сотрудник)");
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПерерасчетов = РасчетЗарплатыРасширенный.ПустаяТаблицаПособия(Истина);
	
	// Формируем набор для получения дополнения и вычисления плановых 
	// начислений, которые потребуется доначислить.
	Пока Выборка.Следующий() Цикл
		// Заполнение начислений перерасчета для сторнирования прежних записей исправляемого документа.
		НоваяСтрокаПерерасчета = ДанныеПерерасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПерерасчета, Выборка);
		
		НоваяСтрокаПерерасчета.Результат 								= - Выборка.Результат;
		НоваяСтрокаПерерасчета.РезультатВТомЧислеЗаСчетФБ 				= - Выборка.РезультатВТомЧислеЗаСчетФБ;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаПервымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаПервымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаПервымРебенком;
		НоваяСтрокаПерерасчета.СуммаВсегоПоУходуЗаВторымРебенком 		= - Выборка.СуммаВсегоПоУходуЗаВторымРебенком;
		НоваяСтрокаПерерасчета.СуммаСверхНормПоУходуЗаВторымРебенком 	= - Выборка.СуммаСверхНормПоУходуЗаВторымРебенком;
		
		НоваяСтрокаПерерасчета.Начисление = Выборка.Начисление;
		
		НоваяСтрокаПерерасчета.ДатаНачала = Выборка.ДатаНачала;
		НоваяСтрокаПерерасчета.ДатаОкончания = Выборка.ДатаОкончания;
		НоваяСтрокаПерерасчета.ОплаченоДней = - Выборка.ОплаченоДней;
		НоваяСтрокаПерерасчета.ОплаченоЧасов = - Выборка.ОплаченоЧасов;
		
		НоваяСтрокаПерерасчета.Сторно = Истина;
		НоваяСтрокаПерерасчета.СторнируемыйДокумент = Выборка.Ссылка;
		НоваяСтрокаПерерасчета.ФиксРасчет = Истина;
		НоваяСтрокаПерерасчета.ФиксСторно = Истина;
		НоваяСтрокаПерерасчета.ФиксРасчетВремени = Истина;
		
	КонецЦикла;
	
	// Значения показателей заполняем по сторнируемому документу.
	ЗаполнитьЗначенияПоказателейПоСторнируемомуДокументу(ДанныеПерерасчетов);
	
	// Перенумеруем строки после(!) заполнения показателей. При заполнении показателей ИдентификаторСтрокиВидаРасчета
	// используется для связи со значениями показателей.
	ИдентификаторСтрокиВидаРасчета = ОписаниеТаблицыПособияПерерасчеты.НомерТаблицы * 1000000 + 1;
	Для Каждого Строка Из ДанныеПерерасчетов Цикл
		Строка.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета;
		ИдентификаторСтрокиВидаРасчета = ИдентификаторСтрокиВидаРасчета + 1;
	КонецЦикла;
	
	// Переносим строки в коллекцию ПособияПерерасчет.
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПерерасчетов, ПособияПерерасчет);
	
КонецПроцедуры

Функция ИнтервалПериода(ДатаНачала, ДатаОкончания)
	Интервал = Новый Структура("ДатаНачала, ДатаОкончания");
	Интервал.ДатаНачала = ДатаНачала;
	Интервал.ДатаОкончания = ДатаОкончания;
	Возврат Интервал;
	
КонецФункции

// Получение текущего распределения результатов начислений.
Функция ПолучитьРаспределениеНачислений(ПоказателиЗатронутыхНачислений, ПоказателиНачисленийЗаднимЧислом, ИсключаемыйРегистратор) Экспорт
	
	Результат = Новый Структура("ПоСтатьямФинансирования, ПоТерриториямИУсловиямТруда");
	
	// Получение строк для распределения результатов начислений.
	СтрокиДляРаспределения = ПоказателиЗатронутыхНачислений.Скопировать(, "Регистратор, ИдентификаторСтроки");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПоказателиНачисленийЗаднимЧислом, СтрокиДляРаспределения);
		
	СтрокиДляРаспределения.Свернуть("Регистратор, ИдентификаторСтроки");
	
	РегистраторыНачислений = СтрокиДляРаспределения.Скопировать(, "Регистратор");
	РегистраторыНачислений.Свернуть("Регистратор");
	
	ИменаДокументовДляЗапроса = Новый Соответствие;
	Для Каждого Строка Из РегистраторыНачислений Цикл
		МетаданныеДокумента = Строка.Регистратор.Метаданные();
		Если Строка.Регистратор <> ИсключаемыйРегистратор
			И МетаданныеДокумента.ТабличныеЧасти.Найти("РаспределениеРезультатовНачислений") <> Неопределено Тогда
			ИменаДокументовДляЗапроса.Вставить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	Если ИменаДокументовДляЗапроса.Количество() = 0 Тогда
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 0
			|	NULL КАК Регистратор,
			|	NULL КАК ИдентификаторСтроки
			|ПОМЕСТИТЬ ВТДокументыРаспределения
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	NULL КАК Регистратор,
			|	NULL КАК ИдентификаторСтроки";
	Иначе
		ШаблонТекстаПоДокументу =
			"ВЫБРАТЬ
			|	РаспределениеРезультатовНачислений.Ссылка КАК Регистратор,
			|	РаспределениеРезультатовНачислений.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	РаспределениеРезультатовНачислений.Территория,
			|	РаспределениеРезультатовНачислений.СтатьяФинансирования,
			|	РаспределениеРезультатовНачислений.СтатьяРасходов,
			|	РаспределениеРезультатовНачислений.СпособОтраженияЗарплатыВБухучете,
			|	РаспределениеРезультатовНачислений.ОблагаетсяЕНВД,
			|	РаспределениеРезультатовНачислений.Результат
			|ИЗ
			|	ВТДокументыРаспределения КАК ДокументыРаспределения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицыРаспределениеРезультатовНачислений КАК РаспределениеРезультатовНачислений
			|		ПО (РаспределениеРезультатовНачислений.Ссылка = ДокументыРаспределения.Регистратор)
			|			И (РаспределениеРезультатовНачислений.ИдентификаторСтроки = ДокументыРаспределения.ИдентификаторСтроки)";
		
		ТекстОбъединитьВсе =
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		
		ТекстПоДокументам = "";
		
		Для Каждого Элемент Из ИменаДокументовДляЗапроса Цикл
			ИмяТабличнойЧасти = Элемент.Ключ + ".РаспределениеРезультатовНачислений";
			ТекстПоДокументам = ТекстПоДокументам
				+ ?(ПустаяСтрока(ТекстПоДокументам), "", ТекстОбъединитьВсе)
				+ СтрЗаменить(ШаблонТекстаПоДокументу, "#ИмяТаблицыРаспределениеРезультатовНачислений", ИмяТабличнойЧасти);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДокументыРаспределения", СтрокиДляРаспределения);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДокументыРаспределения.Регистратор КАК Регистратор,
			|	ДокументыРаспределения.ИдентификаторСтроки КАК ИдентификаторСтроки
			|ПОМЕСТИТЬ ВТДокументыРаспределения
			|ИЗ
			|	&ДокументыРаспределения КАК ДокументыРаспределения"
			+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+ ТекстПоДокументам;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст
		+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
		+
		"ВЫБРАТЬ
		|	РаспределениеПоТерриториямУсловиямТруда.Регистратор КАК Регистратор,
		|	РаспределениеПоТерриториямУсловиямТруда.НомерСтроки КАК НомерСтроки,
		|	РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение КАК РегистраторИзмерение,
		|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	РаспределениеПоТерриториямУсловиямТруда.Территория КАК Территория,
		|	РаспределениеПоТерриториямУсловиямТруда.УсловияТруда КАК УсловияТруда,
		|	РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтрокиПоказателей КАК ИдентификаторСтрокиПоказателей,
		|	РаспределениеПоТерриториямУсловиямТруда.ДоляРаспределения КАК ДоляРаспределения,
		|	РаспределениеПоТерриториямУсловиямТруда.Результат КАК Результат,
		|	РаспределениеПоТерриториямУсловиямТруда.РанееНачислено КАК РанееНачислено
		|ИЗ
		|	ВТДокументыРаспределения КАК ДокументыРаспределения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеПоТерриториямУсловиямТруда КАК РаспределениеПоТерриториямУсловиямТруда
		|		ПО (РаспределениеПоТерриториямУсловиямТруда.РегистраторИзмерение = ДокументыРаспределения.Регистратор)
		|			И (РаспределениеПоТерриториямУсловиямТруда.ИдентификаторСтроки = ДокументыРаспределения.ИдентификаторСтроки)";
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат.ПоСтатьямФинансирования = РезультатЗапроса[1].Выгрузить();
	Результат.ПоСтатьямФинансирования.Индексы.Добавить("Регистратор,ИдентификаторСтроки");
	
	Результат.ПоТерриториямИУсловиямТруда = РезультатЗапроса[2].Выгрузить();
	Результат.ПоТерриториямИУсловиямТруда.Индексы.Добавить("Регистратор,ИдентификаторСтроки");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
