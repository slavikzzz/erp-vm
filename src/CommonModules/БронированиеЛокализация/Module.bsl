#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация

	//++ НЕ УТ

	//ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения - Строка - Текст заполнения
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	//++ Локализация

	//++ НЕ УТ
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(Объект, Объект.ДополнительныеСвойства);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

// Выполняет обработку документа "Бронирование" при выполнении события "ПередУдалением"
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.Бронирование - документ, который удаляется.
//  Отказ - Булево - признак отмены выполнения обработчика.
//
Процедура ПередУдалением(ДокументОбъект, Отказ) Экспорт

	//++ Локализация
	Если Не Отказ Тогда
		ОбновитьНомерПоследнегоЗапросаСмартвэй(ДокументОбъект);
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстыОтражения = Новый Массив;
	
	//++ Локализация
	
#Область ПокупкаБилета // (Дт 76.14 :: Кт 60, 71, 76)
	ТекстЗапроса =
	"ВЫБРАТЬ //// Покупка билета (Дт 76.14 :: Кт 60, 71, 76)
	|
	|	ЕСТЬNULL(РасчетыСАгентами.Ссылка, РасчетыСПеревозчиками.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(РасчетыСАгентами.Период, РасчетыСПеревозчиками.Период) КАК Период,
	|	ЕСТЬNULL(РасчетыСАгентами.Организация, РасчетыСПеревозчиками.Организация) КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл + РасчетыПоДокументам.ДолгРегл, -РасчетыСПеревозчиками.СуммаРегл) КАК Сумма,
	|	ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаУпр + РасчетыПоДокументам.ДолгУпр, -РасчетыСПеревозчиками.СуммаУпр) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоБронированию) КАК ВидСчетаДт,
	|	Операция.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЕСТЬNULL(РасчетыСПеревозчиками.Валюта, Операция.Валюта) КАК ВалютаДт,
	|	РасчетыСПеревозчиками.Подразделение КАК ПодразделениеДт,
	|	РасчетыСПеревозчиками.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	РасчетыСПеревозчиками.Контрагент КАК СубконтоДт1,
	|	Операция.Сотрудник КАК СубконтоДт2,
	|	Операция.Ссылка КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг, -РасчетыСПеревозчиками.Сумма) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, 0) <> 0 ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|		КОГДА ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, РасчетыСАгентами.СуммаРегл) <> 0 ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ВидСчетаКт,
	|	ЕСТЬNULL(РасчетыСАгентами.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЕСТЬNULL(РасчетыСАгентами.Валюта, Операция.Валюта) КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо) ТОГДА
	|			Операция.ПодразделениеПодотчетногоЛица
	|	ИНАЧЕ
	|		ЕСТЬNULL(РасчетыСАгентами.Подразделение, Операция.Подразделение)
	|	КОНЕЦ КАК ПодразделениеКт,
	|	ЕСТЬNULL(РасчетыСАгентами.НаправлениеДеятельности, Операция.НаправлениеДеятельности) КАК НаправлениеДеятельностиКт,
	|
	|	ВЫБОР КОГДА РасчетыСАгентами.Контрагент ЕСТЬ NULL И Операция.Валюта = &ВалютаРеглУчета
	|		ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		КОГДА РасчетыСАгентами.Контрагент ЕСТЬ NULL И Операция.Валюта <> &ВалютаРеглУчета
	|		ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК СчетКт,
	|	ЕСТЬNULL(РасчетыСАгентами.Контрагент, Операция.ПодотчетноеЛицо) КАК СубконтоКт1,
	|	ЕСТЬNULL(РасчетыСАгентами.Договор, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(РасчетыПоДокументам.Предоплата + РасчетыПоДокументам.Долг, -РасчетыСПеревозчиками.Сумма) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА РасчетыСПеревозчиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратБронирования)
	|		ТОГДА ""Возврат билета""
	|		ИНАЧЕ ""Покупка билета""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.Бронирование КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		И Операция.ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК РасчетыСПеревозчиками
	|	ПО 
	|		РасчетыСПеревозчиками.Ссылка = Операция.Ссылка
	|		И РасчетыСПеревозчиками.ЭтоПеревозчик
	|		И (РасчетыСПеревозчиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИЛИ РасчетыСПеревозчиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратБронирования))
	|		И РасчетыСПеревозчиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноИспользованияБронированияПодотчетнымЛицом)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК РасчетыСАгентами
	|	ПО 
	|		РасчетыСАгентами.Ссылка = Операция.Ссылка
	|		И НЕ РасчетыСАгентами.ЭтоПеревозчик
	|		И РасчетыСАгентами.Период = РасчетыСПеревозчиками.Период
	|		И РасчетыСАгентами.СтатьяДвиженияДенежныхСредств = РасчетыСПеревозчиками.СтатьяДвиженияДенежныхСредств
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщикамиПоДокументам КАК РасчетыПоДокументам
	|	ПО 
	|		РасчетыСАгентами.Ссылка = РасчетыПоДокументам.Ссылка
	|		И РасчетыСАгентами.Период = РасчетыПоДокументам.Период
	|		И РасчетыСАгентами.ОбъектРасчетов = РасчетыПоДокументам.ОбъектРасчетов
	|		И РасчетыСАгентами.СтатьяДвиженияДенежныхСредств = РасчетыПоДокументам.СтатьяДвиженияДенежныхСредств
	|		И НЕ РасчетыПоДокументам.ЭтоШтраф
	|
	|ГДЕ
	|	НЕ (НЕ РасчетыСАгентами.Контрагент ЕСТЬ NULL И ЕСТЬNULL(РасчетыПоДокументам.ПредоплатаРегл, 0) = 0
	|		И ЕСТЬNULL(РасчетыПоДокументам.ДолгРегл, РасчетыСАгентами.СуммаРегл) = 0)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ВключениеСтоимостиВАвансСотруднику // (Дт 71 :: Кт 76.14)
	ТекстЗапроса =
	"ВЫБРАТЬ //// Включение стоимости билета в выданный сотруднику аванс (Дт 71 :: Кт 76.14)
	|
	|	Расчеты.Ссылка КАК Ссылка,
	|	Расчеты.Период КАК Период,
	|	Расчеты.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	Расчеты.СуммаРегл КАК Сумма,
	|	Расчеты.СуммаУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	Операция.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ВЫБОР КОГДА Операция.Валюта = &ВалютаРеглУчета
	|		ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал) КОНЕЦ КАК СчетДт,
	|
	|	Операция.Сотрудник КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Расчеты.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоБронированию) КАК ВидСчетаКт,
	|	Операция.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Расчеты.Валюта КАК ВалютаКт,
	|	Расчеты.Подразделение КАК ПодразделениеКт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	Расчеты.Контрагент КАК СубконтоКт1,
	|	Операция.Сотрудник КАК СубконтоКт2,
	|	Операция.Ссылка КАК СубконтоКт3,
	|
	|	Расчеты.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	ВЫБОР
	|		КОГДА Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноИспользованияБронированияПодотчетнымЛицом)
	|			ТОГДА ""Включение стоимости билета в выданный сотруднику аванс (сторно)""
	|		ИНАЧЕ ""Включение стоимости билета в выданный сотруднику аванс""
	|	КОНЕЦ КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.Бронирование КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		И Операция.ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РасчетыСПоставщиками КАК Расчеты
	|	ПО 
	|		Расчеты.Ссылка = Операция.Ссылка
	|		И Расчеты.ЭтоПеревозчик
	|		И (Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ИЛИ Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноИспользованияБронированияПодотчетнымЛицом))
	|		И Расчеты.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратБронирования)
	|
	|ГДЕ
	|	ИСТИНА
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ТекстШтрафы // (Дт <25, 26, 44, 20, 23, 08.3, 20> :: Кт <60.1, 76, 71> )
	ТекстЗапроса = "ВЫБРАТЬ // Штрафы (Дт <25, 26, 44, 20, 23, 08.3, 20> :: Кт <60.1, 76, 71> )
	|	Операция.Ссылка КАК Ссылка,
	|	ЗаписиПрочиеРасходы.Период КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	ЗаписиПрочиеРасходы.СуммаРегл КАК Сумма,
	|	ЗаписиПрочиеРасходы.СуммаУпр КАК СуммаУУ,
	|	ВЫБОР
	|		КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы)
	|	КОНЕЦ КАК ВидСчетаДт,
	|	ЕСТЬNULL(СтатьиРасходов.Ссылка, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаДт,
	|	ЗаписиПрочиеРасходы.Подразделение КАК МестоУчетаДт,
	|	Операция.Валюта КАК ВалютаДт,
	|	ЗаписиПрочиеРасходы.Подразделение КАК ПодразделениеДт,
	|	ЗаписиПрочиеРасходы.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ЕСТЬNULL(СтатьиРасходов.Ссылка, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ВариантРаздельногоУчетаНДС,
	|			НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ЕСТЬNULL(ОбъектыСтроительства.СпособСтроительства, ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|	ЗаписиПрочиеРасходы.Сумма КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ПринятиеКНалоговомуУчету, ИСТИНА) = ИСТИНА
	|			ТОГДА ЗаписиПрочиеРасходы.СуммаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНУДт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатьиРасходов.ПринятиеКНалоговомуУчету, ИСТИНА) = ЛОЖЬ
	|			ТОГДА ЗаписиПрочиеРасходы.СуммаРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА РасчетыСПоставщиками.ПредоплатаРегл <> 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|				КОГДА РасчетыСПоставщиками.ДолгРегл <> 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Валюта, РасчетыСПодотчетнымиЛицами.Валюта) КАК ВалютаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Подразделение, РасчетыСПодотчетнымиЛицами.Подразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|		И Операция.Валюта = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		КОГДА РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|		И Операция.Валюта <> &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Контрагент, РасчетыСПодотчетнымиЛицами.ПодотчетноеЛицо) КАК СубконтоКт1,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Договор, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПодотчетнымиЛицами.Сумма ЕСТЬ NULL
	|			ТОГДА РасчетыСПодотчетнымиЛицами.Сумма
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.СуммаУпр, 0) <> 0
	|			ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.Сумма, 0) * ЗаписиПрочиеРасходы.СуммаУпр / ЕСТЬNULL(РасчетыСПоставщиками.СуммаУпр, 0)
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.СуммаРегл, 0) <> 0
	|			ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.Сумма, 0) * ЗаписиПрочиеРасходы.СуммаРегл / ЕСТЬNULL(РасчетыСПоставщиками.СуммаРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Штраф"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		И Операция.ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК ЗаписиПрочиеРасходы
	|		ПО ДокументыКОтражению.Ссылка = ЗаписиПрочиеРасходы.Регистратор
	|		И ЗаписиПрочиеРасходы.Активность
	|		И ЗаписиПрочиеРасходы.НастройкаХозяйственнойОперации В
	|			(ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ШтрафыПриВозвратеБронирования),
	|			ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ШтрафыПриВозвратеБронированияПодотчетногоЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО ЗаписиПрочиеРасходы.СтатьяРасходов = СтатьиРасходов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|		ПО ОбъектыСтроительства.Ссылка = ЗаписиПрочиеРасходы.АналитикаРасходов
	|		И СтатьиРасходов.Ссылка ЕСТЬ НЕ NULL
	|		И
	|			СтатьиРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|		И ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСПоставщикамиНоваяАрхитектура КАК РасчетыСПоставщиками
	|		ПО ЗаписиПрочиеРасходы.Регистратор = РасчетыСПоставщиками.Ссылка
	|		И ЗаписиПрочиеРасходы.Период = РасчетыСПоставщиками.Период
	|		И ЗаписиПрочиеРасходы.ИдентификаторФинЗаписи = РасчетыСПоставщиками.ИдентификаторФинЗаписи
	|		И
	|			РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ШтрафыПриВозвратеБронирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК РасчетыСПодотчетнымиЛицами
	|		ПО ЗаписиПрочиеРасходы.Регистратор = РасчетыСПодотчетнымиЛицами.Регистратор
	|		И РасчетыСПодотчетнымиЛицами.Активность
	|		И ЗаписиПрочиеРасходы.Период = РасчетыСПодотчетнымиЛицами.Период
	|		И ЗаписиПрочиеРасходы.ИдентификаторФинЗаписи = РасчетыСПодотчетнымиЛицами.ИдентификаторФинЗаписи
	|		И ЗаписиПрочиеРасходы.НастройкаХозяйственнойОперации = РасчетыСПодотчетнымиЛицами.НастройкаХозяйственнойОперации
	|ГДЕ
	|	ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл,
	|		НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	И (ЕСТЬNULL(РасчетыСПоставщиками.ДолгРегл, 0) <> 0
	|	ИЛИ ЕСТЬNULL(РасчетыСПодотчетнымиЛицами.СуммаРегл, 0) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	ЗаписиПрочиеАктивыПассивы.Период КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	ЗаписиПрочиеАктивыПассивы.СуммаРегл КАК Сумма,
	|	ЗаписиПрочиеАктивыПассивы.СуммаУпр КАК СуммаУУ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	ВЫБОР
	|		КОГДА НЕ СтатьиРасходов.Ссылка ЕСТЬ NULL
	|			ТОГДА СтатьиРасходов.Ссылка
	|		ИНАЧЕ ЕСТЬNULL(ЗаписиПрочиеАктивыПассивы.Статья, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК АналитикаУчетаДт,
	|	ЗаписиПрочиеАктивыПассивы.Подразделение КАК МестоУчетаДт,
	|	Операция.Валюта КАК ВалютаДт,
	|	ЗаписиПрочиеАктивыПассивы.Подразделение КАК ПодразделениеДт,
	|	ЗаписиПрочиеАктивыПассивы.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	ЕСТЬNULL(НастройкиСчетовУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетДт,
	|	ЕСТЬNULL(НастройкиСчетовУчета.Субконто1, ЗаписиПрочиеАктивыПассивы.Статья) КАК СубконтоДт1,
	|	ЕСТЬNULL(НастройкиСчетовУчета.Субконто2, ЗаписиПрочиеАктивыПассивы.Аналитика) КАК СубконтоДт2,
	|	ВЫБОР
	|		КОГДА НЕ НастройкиСчетовУчета.Ссылка ЕСТЬ NULL
	|			ТОГДА НастройкиСчетовУчета.Субконто3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт3,
	|	ЗаписиПрочиеАктивыПассивы.СуммаБезНДС КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ЗаписиПрочиеАктивыПассивы.СуммаРегл КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА РасчетыСПоставщиками.ПредоплатаРегл <> 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные)
	|				КОГДА РасчетыСПоставщиками.ДолгРегл <> 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками)
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидСчетаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ГруппаФинансовогоУчета, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Валюта, РасчетыСПодотчетнымиЛицами.Валюта) КАК ВалютаКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Подразделение, РасчетыСПодотчетнымиЛицами.Подразделение) КАК ПодразделениеКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|		И Операция.Валюта = &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|		КОГДА РасчетыСПоставщиками.Контрагент ЕСТЬ NULL
	|		И Операция.Валюта <> &ВалютаРеглУчета
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СчетКт,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Контрагент, РасчетыСПодотчетнымиЛицами.ПодотчетноеЛицо) КАК СубконтоКт1,
	|	ЕСТЬNULL(РасчетыСПоставщиками.Договор, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	ВЫБОР
	|		КОГДА НЕ РасчетыСПодотчетнымиЛицами.Сумма ЕСТЬ NULL
	|			ТОГДА РасчетыСПодотчетнымиЛицами.Сумма
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.СуммаУпр, 0) <> 0
	|			ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.Сумма, 0) * ЗаписиПрочиеАктивыПассивы.СуммаУпр / ЕСТЬNULL(РасчетыСПоставщиками.СуммаУпр, 0)
	|		КОГДА ЕСТЬNULL(РасчетыСПоставщиками.СуммаРегл, 0) <> 0
	|			ТОГДА ЕСТЬNULL(РасчетыСПоставщиками.Сумма, 0) * ЗаписиПрочиеАктивыПассивы.СуммаРегл / ЕСТЬNULL(РасчетыСПоставщиками.СуммаРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Штраф"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Бронирование КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		И Операция.ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ЗаписиПрочиеАктивыПассивы
	|		ПО ДокументыКОтражению.Ссылка = ЗаписиПрочиеАктивыПассивы.Регистратор
	|		И ЗаписиПрочиеАктивыПассивы.Активность
	|		И ЗаписиПрочиеАктивыПассивы.НастройкаХозяйственнойОперации В
	|			(ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ШтрафыПриВозвратеБронирования),
	|			ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ШтрафыПриВозвратеБронированияПодотчетногоЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиАктивовПассивов КАК СтатьиРасходов
	|		ПО ЗаписиПрочиеАктивыПассивы.Статья = СтатьиРасходов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетыСПоставщикамиНоваяАрхитектура КАК РасчетыСПоставщиками
	|		ПО ЗаписиПрочиеАктивыПассивы.Регистратор = РасчетыСПоставщиками.Ссылка
	|		И ЗаписиПрочиеАктивыПассивы.Период = РасчетыСПоставщиками.Период
	|		И ЗаписиПрочиеАктивыПассивы.ИдентификаторФинЗаписи = РасчетыСПоставщиками.ИдентификаторФинЗаписи
	|		И
	|			РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ШтрафыПриВозвратеБронирования)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК РасчетыСПодотчетнымиЛицами
	|		ПО ЗаписиПрочиеАктивыПассивы.Регистратор = РасчетыСПодотчетнымиЛицами.Регистратор
	|		И РасчетыСПодотчетнымиЛицами.Активность
	|		И ЗаписиПрочиеАктивыПассивы.Период = РасчетыСПодотчетнымиЛицами.Период
	|		И ЗаписиПрочиеАктивыПассивы.ИдентификаторФинЗаписи = РасчетыСПодотчетнымиЛицами.ИдентификаторФинЗаписи
	|		И
	|			ЗаписиПрочиеАктивыПассивы.НастройкаХозяйственнойОперации = РасчетыСПодотчетнымиЛицами.НастройкаХозяйственнойОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|		ПО ЗаписиПрочиеАктивыПассивы.НастройкаСчетовУчета = НастройкиСчетовУчета.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(РасчетыСПоставщиками.ДолгРегл, 0) <> 0
	|	ИЛИ ЕСТЬNULL(РасчетыСПодотчетнымиЛицами.СуммаРегл, 0) <> 0";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	//-- Локализация
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	ТекстыЗапроса = Новый Массив;
	
	//++ Локализация
	
	#Область РасчетыСПоставщикамиПоДокументам
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расчеты.Ссылка,
	|	Расчеты.Период,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ШтрафыПриВозвратеБронирования) КАК ЭтоШтраф,
	|	СУММА(-Расчеты.Предоплата) КАК Предоплата,
	|	СУММА(-Расчеты.ПредоплатаУпр) КАК ПредоплатаУпр,
	|	СУММА(-Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл,
	|	СУММА(Расчеты.Долг) КАК Долг,
	|	СУММА(Расчеты.ДолгУпр) КАК ДолгУпр,
	|	СУММА(Расчеты.ДолгРегл) КАК ДолгРегл
	|ПОМЕСТИТЬ РасчетыСПоставщикамиПоДокументам
	|ИЗ
	|	РасчетыСПоставщикамиНоваяАрхитектура КАК Расчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Ссылка,
	|	Расчеты.Период,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	Расчеты.Долг = 0,
	|	Расчеты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ШтрафыПриВозвратеБронирования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Расчеты.Регистратор КАК Ссылка,
	|	Расчеты.Период КАК Период,
	|	ВЫБОР КОГДА Расчеты.Регистратор = ОбъектыРасчетов.Объект ТОГДА Расчеты.ВидДвижения ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ВидДвижения,
	|	Расчеты.Регистратор = ОбъектыРасчетов.Объект КАК ЭтоПеревозчик,
	|	ОбъектыРасчетов.Организация КАК Организация,
	|	ОбъектыРасчетов.Контрагент КАК Контрагент,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА Расчеты.Регистратор = ОбъектыРасчетов.Объект ТОГДА Расчеты.ХозяйственнаяОперация ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК ХозяйственнаяОперация,
	|	-СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.Сумма) КАК Сумма,
	|	-СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.СуммаУпр) КАК СуммаУпр,
	|	-СУММА(ВЫБОР КОГДА Расчеты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Расчеты.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ РасчетыСПоставщиками
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|	ПО
	|		ДокументыКОтражению.Ссылка = Расчеты.Регистратор
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО (Расчеты.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Регистратор,
	|	Расчеты.Период,
	|	ВЫБОР КОГДА Расчеты.Регистратор = ОбъектыРасчетов.Объект ТОГДА Расчеты.ВидДвижения ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	Расчеты.Регистратор = ОбъектыРасчетов.Объект,
	|	ОбъектыРасчетов.Организация,
	|	ОбъектыРасчетов.Контрагент,
	|	ОбъектыРасчетов.Договор,
	|	ОбъектыРасчетов.НаправлениеДеятельности,
	|	Расчеты.ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета,
	|	ОбъектыРасчетов.Подразделение,
	|	Расчеты.Валюта,
	|	Расчеты.СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР КОГДА Расчеты.Регистратор = ОбъектыРасчетов.Объект ТОГДА Расчеты.ХозяйственнаяОперация ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	//-- Локализация
	
	Если ТекстыЗапроса.Количество() Тогда
		ТекстыЗапроса.Добавить("");
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());;
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

//++ НЕ УТ

Процедура УстановитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(Объект, ДополнительныеСвойства)
	
	НепроверяемыеРеквизиты = Новый Структура;
	Для каждого Реквизит Из Метаданные.Документы.Бронирование.Реквизиты Цикл
		Если Реквизит.Имя <> "ДатаПрибытия" Тогда
			НепроверяемыеРеквизиты.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	НепроверяемыеТабличныеЧасти = Новый Структура;
	НепроверяемыеТабличныеЧасти.Вставить("ДополнительныеРеквизиты");
	НепроверяемыеТабличныеЧасти.Вставить("Сборы");
	
	ИзмененныеДатыОтражения = Новый Массив;
	ИзмененияДокумента = ОбщегоНазначенияУТ.ИзмененияДокумента(Объект, НепроверяемыеРеквизиты, НепроверяемыеТабличныеЧасти);
	
	Если ИзмененияДокумента.Свойство("Реквизиты") Тогда
		Для каждого ИзменениеРеквизита Из ИзмененияДокумента.Реквизиты Цикл
			Если ИзменениеРеквизита.НовоеЗначение <> ИзменениеРеквизита.СтароеЗначение Тогда
				Если ИзмененныеДатыОтражения.Найти(ИзменениеРеквизита.НовоеЗначение) = Неопределено Тогда
					ИзмененныеДатыОтражения.Добавить(ИзменениеРеквизита.НовоеЗначение);
				КонецЕсли;
				
				Если ИзмененныеДатыОтражения.Найти(ИзменениеРеквизита.СтароеЗначение) = Неопределено Тогда
					ИзмененныеДатыОтражения.Добавить(ИзменениеРеквизита.СтароеЗначение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИзмененияДокумента.Свойство("ТабличныеЧасти") Тогда
		Для каждого ИзменениеТабЧасти Из ИзмененияДокумента.ТабличныеЧасти Цикл
			Для каждого Изменение Из ИзменениеТабЧасти.Значение Цикл
				Если ИзмененныеДатыОтражения.Найти(Изменение.Дата) = Неопределено Тогда
					ИзмененныеДатыОтражения.Добавить(НачалоДня(Изменение.Дата))
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИзмененныеДатыОтражения.Добавить(Объект.ДатаПрибытия);
	
	Если ИзмененныеДатыОтражения.Количество() Тогда
		ТаблицаВыборочнойРегистрации = РеглУчетПроведениеСервер.ТаблицаВыборочнойРегистрацииКОтражению();
		Для каждого ИзмененнаяДатаОтражения Из ИзмененныеДатыОтражения Цикл
			Если ЗначениеЗаполнено(ИзмененнаяДатаОтражения) Тогда
				РеглУчетПроведениеСервер.ДобавитьПараметрыВыборочнойРегистрацииКОтражениюВРеглУчете(
					ТаблицаВыборочнойРегистрации, Объект.Организация, ИзмененнаяДатаОтражения);
			КонецЕсли;
		КонецЦикла;
		ПроведениеДокументов.ДобавитьТаблицуДанныхДокумента(Объект,
		"ТаблицаВыборочнойРегистрацииКОтражению", ТаблицаВыборочнойРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		Документы.Бронирование.ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстыЗапросаОтражения = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения
	|ГДЕ
	|	&ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)";
	ТекстыЗапросаОтражения.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|					КОГДА &ДатаПрибытия < &Период
	|						ТОГДА &Период
	|					ИНАЧЕ &ДатаПрибытия
	|				КОНЕЦ, ДЕНЬ) КАК ДатаОтражения
	|ГДЕ
	|	&ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)";
	ТекстыЗапросаОтражения.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период,
	|	&Организация,
	|	НАЧАЛОПЕРИОДА(Операции.Дата, ДЕНЬ)
	|ИЗ
	|	Документ.Бронирование.Операции КАК Операции
	|ГДЕ
	|	Операции.Ссылка = &Ссылка И &ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)";
	ТекстыЗапросаОтражения.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период,
	|	Бронирование.Договор.Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
	|ИЗ
	|	Документ.Бронирование КАК Бронирование
	|ГДЕ
	|	Бронирование.Ссылка = &Ссылка И &ТипБронирования = ЗНАЧЕНИЕ(Перечисление.ТипыБронирования.ЭлектронныйБилет)
	|	И Бронирование.Договор.ЦентрализованныйДоговор";
	ТекстыЗапросаОтражения.Добавить(ТекстЗапроса);
	
	ТекстыЗапросаОтражения.Добавить(ДоходыИРасходыСервер.ДополнитьТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(ЛОЖЬ));
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросаОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

Процедура ОбновитьНомерПоследнегоЗапросаСмартвэй(ДокументОбъект)

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюСоСмартвей") Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяВерсияОпераций = МинимальнаяВерсияБронирования(ДокументОбъект);
	
	Если МинимальнаяВерсияОпераций <> 0 Тогда
		
		НомерВерсии = Константы.ВерсияДанныхСмартвей.Получить();
		
		Если НомерВерсии > МинимальнаяВерсияОпераций Тогда
			Константы.ВерсияДанныхСмартвей.Установить(МинимальнаяВерсияОпераций);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция МинимальнаяВерсияБронирования(ДокументОбъект)
	
	Версия = 0;
	
	КопияОперации = ДокументОбъект.Операции.Выгрузить();
	КопияОперации.Сортировать("ИдентификаторВерсииСмартвей Убыв");
	
	Если КопияОперации.Количество() <> 0 Тогда
		Версия = КопияОперации.Получить(0).ИдентификаторВерсииСмартвей;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

//-- Локализация

#КонецОбласти
