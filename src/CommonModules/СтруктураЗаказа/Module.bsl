
#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗапуститьРасчет() Экспорт
	
	Если СтруктураЗаказаСлужебный.БлокироватьРасчет() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭкспортнойПроцедуры = "СтруктураЗаказа.ЗапуститьРасчетПродолжение";
	ПараметрыПроцедуры = Новый Массив();

	Ключ = Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа.Ключ;
	
	УстановитьПривилегированныйРежим(Истина);
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", Ключ, СостояниеФоновогоЗадания.Активно));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		
		Попытка
			ФоновыеЗадания.Выполнить(
				ИмяЭкспортнойПроцедуры,
				ПараметрыПроцедуры,
				Ключ,
				НСтр("ru = 'Расчет структуры заказа. Управляющий поток';
					|en = 'Order structure calculation. Thread of control'"));
		Исключение
			// задание уже запущено
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьРасчетПродолжение() Экспорт
	
	ПротоколРасчета = ПротоколРасчета();
	
	ПорядокРасчета = Новый Массив;
	
	Действие = ПараметрыДействия();
	Действие.Имя = НСтр("ru = 'Распределение';
						|en = 'Allocation'");
	Действие.ИмяПроцедуры = "СтруктураЗаказа.ВыполнитьРаспределениеЗапасов";
	Действие.ПоляВыборки = "Номенклатура,Характеристика,Склад,Назначение";
	Действие.ПоляГруппировки = "Номенклатура,Характеристика";
	Действие.ПараметрыОбработкиОшибок.ТипОшибки = Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРаспределенияЗапасов;
	Действие.ОчередьЗаданий = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов;
	Действие.КоличествоПорций = ПротоколРасчета.ПараметрыРасчета.КоличествоПотоков;
	ДобавитьТекстЗапросаПорционнойВыборки(Действие, ПротоколРасчета.ПараметрыРасчета, Действие.ПоляВыборки);
	ПорядокРасчета.Добавить(Действие);
	
	Действие = ПараметрыДействия();
	Действие.Имя = НСтр("ru = 'Разузлование';
						|en = 'Explosion'");
	Действие.ИмяПроцедуры = "СтруктураЗаказа.ВыполнитьРазузлование";
	Действие.ПоляВыборки = "Спецификация,ЗаказНаПроизводство";
	Действие.ПараметрыОбработкиОшибок.ТипОшибки = Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования;
	Действие.ПараметрыОбработкиОшибок.ПоляГруппировки = "ЗаказНаПроизводство";
	Действие.ОчередьЗаданий = РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации;
	Действие.КоличествоПорций = ПротоколРасчета.ПараметрыРасчета.КоличествоПотоков;
	ДобавитьТекстЗапросаПорционнойВыборки(Действие, ПротоколРасчета.ПараметрыРасчета, Действие.ПоляВыборки);
	ПорядокРасчета.Добавить(Действие);
	
	Действие = ПараметрыДействия();
	Действие.Имя = НСтр("ru = 'Пересчет структуры заказа';
						|en = 'Order structure recalculation'");
	Действие.ИмяПроцедуры = "СтруктураЗаказаСлужебный.ВыполнитьПересчет";
	Действие.ПоляВыборки = "ЗаказНаПроизводство";
	Действие.ПараметрыОбработкиОшибок.ТипОшибки = Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаРазузлования;
	Действие.ПараметрыОбработкиОшибок.ПоляГруппировки = "ЗаказНаПроизводство";
	Действие.ОчередьЗаданий = РегистрыСведений.ЗаданияКОчисткеСтруктурыЗаказа;
	Действие.КоличествоПорций = ПротоколРасчета.ПараметрыРасчета.КоличествоПотоков;
	ДобавитьТекстЗапросаПорционнойВыборки(Действие, ПротоколРасчета.ПараметрыРасчета, Действие.ПоляВыборки);
	ПорядокРасчета.Добавить(Действие);
	
	ВыполнитьДействия(ПорядокРасчета, ПротоколРасчета);
	
КонецПроцедуры

Процедура ВыполнитьДействия(ПорядокРасчета, ПротоколРасчета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсегоШагов = ПорядокРасчета.Количество();
	Шаг = 0;
	Такт = 1;
	
	ОтменитьВыполнениеВсехПотоков();
	
	Попытка
		
		ПродолжатьРасчет = Ложь;
		
		Пока Истина Цикл
			
			ТекущееДействие = ПорядокРасчета.Получить(Шаг);
			
			Если Такт > ПротоколРасчета.ТекТакт Тогда
				ГраницаРасчета = Константы.ГраницаРасчетаСтруктурыЗаказов.СледующаяГраницаРасчета();
				ПротоколРасчета.ТекТакт = Такт;
			КонецЕсли;
			
			НомерОчереди = ТекущееДействие.ОчередьЗаданий.ВыбратьИзменения(ГраницаРасчета);
			
			Если НомерОчереди > 0 Тогда
				
				ЕстьЗаданияКРасчету = Истина;
				ПоследняяЗапись = Неопределено;
				ВсегоПорций = 0;
				
				Пока Истина Цикл
					
					Если ВсегоПорций = 0
						И ЕстьЗаданияКРасчету Тогда
						
						Задания = ВыбратьДанныеДляОбработки(
							ПротоколРасчета.ПараметрыРасчета,
							НомерОчереди,
							ТекущееДействие.ТекстЗапроса,
							ТекущееДействие.УсловиеПорционнойВыборки,
							ПоследняяЗапись,
							ЕстьЗаданияКРасчету); // ТаблицаЗначений
							
						ПорцииРасчета = РазбитьНаПорции(
							Задания,
							ТекущееДействие.ПоляВыборки,
							ТекущееДействие.ПоляГруппировки,
							ТекущееДействие.КоличествоПорций);
							
						ВсегоПорций = ПорцииРасчета.Количество();
						
					КонецЕсли;
					
					Если ВсегоПорций > 0 Тогда
						
						ПараметрыДействия = Новый Структура(
							"Очередь,
							|ПорцияРасчета,
							|ПараметрыРасчета",
							 НомерОчереди,
							 ПорцииРасчета[0],
							 ПротоколРасчета.ПараметрыРасчета);
						
						ВыполнитьПоток(
							ТекущееДействие.Имя,
							ТекущееДействие.ИмяПроцедуры,
							ПараметрыДействия,
							ПротоколРасчета);
						
						ПорцииРасчета.Удалить(0);
						
						ВсегоПорций = ВсегоПорций - 1;
						
					КонецЕсли;
					
					Если ВсегоПорций > 0 Или ЕстьЗаданияКРасчету Тогда
						Продолжить;
					КонецЕсли;
					
					ОжидатьЗавершениеРасчета(ПротоколРасчета);
					
					Если НайденыОшибкиПриРасчете(
							ПротоколРасчета,
							ПорцииРасчета,
							ТекущееДействие) Тогда
						ВсегоПорций = ПорцииРасчета.Количество();
						Продолжить;
					КонецЕсли;
					
					ТекущееДействие.ОчередьЗаданий.УдалитьЗадания(НомерОчереди);
					
					Если ГраницаРасчета > НомерОчереди Тогда
						НомерОчереди = ТекущееДействие.ОчередьЗаданий.ВыбратьИзменения(ГраницаРасчета);
						ЕстьЗаданияКРасчету = НомерОчереди > 0;
					КонецЕсли;
					
					Если ЕстьЗаданияКРасчету Тогда
						Продолжить;
					КонецЕсли;
					
					Прервать;
					
				КонецЦикла;
				
				ПродолжатьРасчет = Истина;
				
			КонецЕсли;
			
			Шаг = Шаг + 1;
			
			Если ВсегоШагов > Шаг Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.НормативныйГрафикСтруктурыЗаказа.ЗапуститьРасчет();
			
			Если Не ПродолжатьРасчет Тогда
				Прервать;
			КонецЕсли;
			
			ПродолжатьРасчет = Ложь;
			Шаг = 0;
			
			Такт = Такт + 1;
			
		КонецЦикла;
		
	Исключение
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОтменитьВыполнениеВсехПотоков();
	КонецПопытки;
	
	ЗаписатьПротоколРасчетаВЖурналРегистрации(ПротоколРасчета);
	
КонецПроцедуры

Функция ВыполняетсяРасчет() Экспорт
	
	КлючПоиска = Новый Структура("Ключ, Состояние", Метаданные.РегламентныеЗадания.РасчетСтруктурыЗаказа.Ключ, СостояниеФоновогоЗадания.Активно);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(КлючПоиска);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат (Задания.Количество() > 0 И Задания[0].Состояние = СостояниеФоновогоЗадания.Активно);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПорядокРасчета

Функция ПараметрыДействия()

	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("Имя","");
	ПараметрыДействия.Вставить("ИмяПроцедуры","");
	
	ПараметрыДействия.Вставить("ОчередьЗаданий");
	
	ПараметрыДействия.Вставить("ПоляВыборки", "");
	ПараметрыДействия.Вставить("ПоляГруппировки", "");
	ПараметрыДействия.Вставить("ПараметрыОбработкиОшибок", Новый Структура("ТипОшибки,ПоляГруппировки",,""));
	
	ПараметрыДействия.Вставить("КоличествоПорций", 1);

	Возврат ПараметрыДействия;
	
КонецФункции

Процедура ДобавитьТекстЗапросаПорционнойВыборки(Действие, ПараметрыРасчета, ПорядокСтрока)
	
	Порядок = СтрРазделить(ПорядокСтрока, ",");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ //ПЕРВЫЕ 10000
	|	&ПоляВыборки
	|ИЗ
	|	&ИмяРегистра КАК Таблица
	|ГДЕ
	|	Таблица.Очередь = &Очередь
	|	И &УсловиеПорционнойВыборки
	|//УПОРЯДОЧИТЬ #ПорционнаяВыборка
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", Действие.ОчередьЗаданий.ПолноеИмя());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ПоляВыборки(Порядок));
	
	Если ПараметрыРасчета.ПорционнаяВыборка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ 10000", "ПЕРВЫЕ" + " " + Формат(ПараметрыРасчета.РазмерВыборки, "ЧН=0; ЧГ=0"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УПОРЯДОЧИТЬ #ПорционнаяВыборка", "УПОРЯДОЧИТЬ ПО" + " " + ПоляУпорядочивания(Порядок));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПЕРВЫЕ 10000", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//УПОРЯДОЧИТЬ #ПорционнаяВыборка", "");
	КонецЕсли;
	
	Действие.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	Поля = Порядок;
	ИмяТаблицы = "Таблица";
	
	КоличествоПолей = Поля.Количество();
	
	Результат = Новый Массив();
	
	Шаблон1 = "%1.%2 %3 &%2";
	Шаблон2 = "(%1)";
	
	Пока КоличествоПолей > 0 Цикл
		
		Список = Новый Массив(КоличествоПолей);
		
		Граница = КоличествоПолей - 1;
		
		Для Индекс = 0 По Граница Цикл
			Если Индекс = Граница Тогда
				Список[Индекс] = СтрШаблон(Шаблон1, ИмяТаблицы, Поля[Индекс], ">");
			Иначе
				Список[Индекс] = СтрШаблон(Шаблон1, ИмяТаблицы, Поля[Индекс], "=");
			КонецЕсли;
		КонецЦикла;
		
		ТекстУсловия = СтрШаблон(Шаблон2, СтрСоединить(Список, " И "));
		Результат.Добавить(ТекстУсловия);
		
		КоличествоПолей = КоличествоПолей - 1;
		
	КонецЦикла;
	
	Действие.Вставить("УсловиеПорционнойВыборки", СтрСоединить(Результат, " ИЛИ "));
	
КонецПроцедуры

Функция ПоляВыборки(Поля, ИмяТаблицы = "Таблица")
	
	КоличествоПолей = Поля.Количество();
	
	Список = Новый Массив(КоличествоПолей);
	
	Шаблон = "%1.%2 КАК %2";
	
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		Список[Индекс] = СтрШаблон(Шаблон, ИмяТаблицы, Поля[Индекс]);
	КонецЦикла;
	
	Возврат СтрСоединить(Список, ",");
	
КонецФункции

Функция ПоляУпорядочивания(Поля, ИмяТаблицы = "Таблица")
	
	КоличествоПолей = Поля.Количество();
	
	Список = Новый Массив(КоличествоПолей);
	
	Шаблон = "%1.%2";
	
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		Список[Индекс] = СтрШаблон(Шаблон, ИмяТаблицы, Поля[Индекс]);
	КонецЦикла;
	
	Возврат СтрСоединить(Список, ",");
	
КонецФункции

Функция ВыбратьДанныеДляОбработки(ПараметрыРасчета, Очередь, ТекстЗапроса, УсловиеПорционнойВыборки, ПоследняяЗапись, ПродолжатьРасчет)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Очередь", Очередь);
	
	Если ПараметрыРасчета.ПорционнаяВыборка И ПоследняяЗапись <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПорционнойВыборки", УсловиеПорционнойВыборки);
		
		Для каждого КлючИЗначение Из ПоследняяЗапись Цикл
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеПорционнойВыборки", "ИСТИНА")
	КонецЕсли;
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыРасчета.ПорционнаяВыборка Тогда
		
		Если ПараметрыРасчета.РазмерВыборки > Данные.Количество() Тогда
			
			ПродолжатьРасчет = Ложь;
			ПоследняяЗапись = Неопределено;
			
		Иначе
			
			ПродолжатьРасчет = Истина;
			
			ПоследняяСтрока = Данные[Данные.Количество()-1];
			
			Если ПоследняяЗапись = Неопределено Тогда
				
				ПоследняяЗапись = Новый Структура();
				
				Для каждого Колонка Из Данные.Колонки Цикл
					ПоследняяЗапись.Вставить(Колонка.Имя, ПоследняяСтрока[Колонка.Имя]);
				КонецЦикла;
				
			Иначе
				ЗаполнитьЗначенияСвойств(ПоследняяЗапись, ПоследняяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ПоследняяЗапись = Неопределено;
		ПродолжатьРасчет = Ложь;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#Область Разузлование

Процедура ВыполнитьРазузлование(ПараметрыДействия, АдресРезультата) Экспорт
	
	КлючеваяОперация = "СтруктураЗаказа.Разузлование";
	НачалоРасчета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазмерПорции = ПараметрыДействия.ПорцияРасчета.Количество();
	ЗамерВремени = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	ВыполнитьРазузлованиеВнутриЗамераВремени(ПараметрыДействия);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерВремени, РазмерПорции);
	РезультатРасчета = Новый Структура("Операция, РазмерПорции, Длительность", КлючеваяОперация, РазмерПорции, ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоРасчета);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьРазузлованиеВнутриЗамераВремени(ПараметрыДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРасчета = ПараметрыДействия.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Очередь", ПараметрыДействия.Очередь);
	Запрос.УстановитьПараметр("ПорцияРасчета", ПорцияРасчетаГруппыИзделий(ПараметрыДействия.ПорцияРасчета));
	Запрос.УстановитьПараметр("РассчитыватьИзменения", ПараметрыРасчета.РассчитыватьИзменения);
	Запрос.УстановитьПараметр("РазрешитьПовтИспРассчитанныхДанных", ПараметрыРасчета.РазрешитьПовтИспРассчитанныхДанных);
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|
	|	КэшНСИ.ГруппаИзделий КАК ГруппаИзделий,
	|
	|	Движения.Номенклатура        КАК Номенклатура,
	|	Движения.Характеристика      КАК Характеристика,
	|	Движения.Склад               КАК Склад,
	|	Движения.Назначение          КАК Назначение,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
	|
	|	КэшНСИ.Спецификация КАК Спецификация,
	|
	|	МИНИМУМ(Движения.ВидСтроки.Порядок) > 1 КАК ЭтоПолуфабрикат,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.Уровень
	|	КОНЕЦ), 0) КАК УровеньРодитель,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.КлючПартия
	|	КОНЕЦ), &ПустойКлючСвязи) КАК КлючПартияРодитель,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.ДлительностьДоВыпуска
	|	КОНЕЦ), 0) КАК ДлительностьДоВыпускаРодитель,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			  И Движения.ГруппаИзделий = КэшНСИ.ГруппаИзделий
	|			ТОГДА Движения.КлючПартия
	|	КОНЕЦ), &ПустойКлючСвязи) КАК КлючПартия,
	|
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			ТОГДА Движения.Спецификация
	|		ИНАЧЕ &ПустаяСпецификация
	|	КОНЕЦ) КАК СпецификацияВыпуска,
	|
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			ТОГДА Движения.ИдентификаторВерсииДанных
	|		ИНАЧЕ &ПустойКлючСвязи
	|	КОНЕЦ) КАК ИдентификаторВерсииДанных,
	|
	|	МАКСИМУМ(Движения.НазначениеСтруктуры) КАК НазначениеСтруктуры,
	|
	|	ВЫБОР
	|		КОГДА СУММА(Движения.Требуется
	|					- Движения.РаспределеноИзЗапасов
	|					- Движения.РаспределеноИзЗапасовОбособленно
	|					- Движения.РаспределеноИзПартий
	|					- Движения.РаспределеноИзПартийОбособленно) > 0
	|		ТОГДА СУММА(Движения.Требуется
	|					- Движения.РаспределеноИзЗапасов
	|					- Движения.РаспределеноИзЗапасовОбособленно
	|					- Движения.РаспределеноИзПартий
	|					- Движения.РаспределеноИзПартийОбособленно)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Требуется
	|
	|ПОМЕСТИТЬ Дельта
	|ИЗ
	|
	|	РегистрСведений.СтруктураЗаказа КАК Движения
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|		ПО КэшНСИ.Номенклатура        = Движения.Номенклатура
	|		 И КэшНСИ.Характеристика      = Движения.Характеристика
	|		 И КэшНСИ.Склад               = Движения.Склад
	|		 И КэшНСИ.Назначение          = Движения.Назначение
	|		 И КэшНСИ.ЗаказНаПроизводство = Движения.ЗаказНаПроизводство
	|
	|ГДЕ
	|	КэшНСИ.ГруппаИзделий В (&ПорцияРасчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение,
	|	Движения.ЗаказНаПроизводство, Движения.КлючНоменклатура, КэшНСИ.ГруппаИзделий, КэшНСИ.Спецификация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Движения.Требуется) <> 0 ИЛИ СУММА(Движения.Запланировано) <> 0
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	ДД.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ДД.ГруппаИзделий       КАК ГруппаИзделий,
	|	ДД.КлючПартия          КАК КлючПартия
	|
	|ПОМЕСТИТЬ Партии
	|
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК ДД
	|
	|ГДЕ
	|	ДД.ГруппаИзделий В (&ПорцияРасчета)
	|		И ДД.ВидСтроки В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|
	|ИНДЕКСИРОВАТЬ
	|	ПО КлючПартия
	|;
	|
	|ВЫБРАТЬ
	|
	|	Партии.ГруппаИзделий КАК ГруппаИзделий,
	|
	|	Партии.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Партии.КлючПартия          КАК КлючПартия,
	|
	|	ВЫБОР 
	|		КОГДА ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ПротоколРасчетаСтруктурыЗаказа КАК ДД
	|				ГДЕ
	|					ДД.ИдентификаторОшибки = Партии.КлючПартия)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БылиОшибки
	|
	|ПОМЕСТИТЬ ПартииДоИзменения
	|
	|ИЗ
	|	Партии КАК Партии
	|
	|ИНДЕКСИРОВАТЬ
	|	ПО БылиОшибки, ГруппаИзделий
	|;
	|
	|ВЫБРАТЬ
	|
	|	Изделия.ГруппаИзделий КАК ГруппаИзделий,
	|	Изделия.КлючПартияРодитель КАК КлючПартияРодитель,
	|	Изделия.ДлительностьДоВыпускаРодитель КАК ДлительностьДоВыпускаРодитель
	|
	|ПОМЕСТИТЬ МножественныйЗапуск
	|
	|ИЗ
	|	Дельта КАК Изделия
	|
	|СГРУППИРОВАТЬ
	|	ПО Изделия.ГруппаИзделий, Изделия.КлючПартияРодитель, Изделия.ДлительностьДоВыпускаРодитель
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|
	|ИНДЕКСИРОВАТЬ
	|	ПО ГруппаИзделий, КлючПартияРодитель, ДлительностьДоВыпускаРодитель
	|;
	|
	|ВЫБРАТЬ
	|	
	|	АвтоНомерЗаписи() КАК ИндексСтроки,
	|
	|	Изделия.ГруппаИзделий КАК ГруппаИзделий,
	|	
	|	Изделия.Номенклатура        КАК Номенклатура,
	|	Изделия.Характеристика      КАК Характеристика,
	|	Изделия.Склад               КАК Склад,
	|	Изделия.Назначение          КАК Назначение,
	|	Изделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Изделия.КлючНоменклатура    КАК КлючНоменклатура,
	|	Изделия.КлючПартия          КАК КлючПартия,
	|	Изделия.Требуется           КАК Требуется,
	|	
	|	Изделия.Спецификация КАК Спецификация,
	|	Изделия.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|
	|	ВЫБОР
	|		КОГДА МножественныйЗапуск.ГруппаИзделий ЕСТЬ NULL
	|			  И НЕ (Изделия.Спецификация.ЕстьПараметризацияРесурсов
	|				ИЛИ Изделия.Спецификация.ВариантНазначения = ЗНАЧЕНИЕ(Перечисление.ВариантыНазначенияСпецификации.СписокНоменклатуры)
	|				ИЛИ Изделия.Спецификация.ВыпускПроизвольнымиПорциями = ЛОЖЬ
	|				ИЛИ Изделия.Спецификация.ЕстьНекратныеНормативыВРЦ
	|				ИЛИ Изделия.Спецификация.МинимальнаяПартияВыпуска <> 0)
	//++ Устарело_Переработка24
	|			  И Изделия.ЗаказНаПроизводство.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	//-- Устарело_Переработка24
	|			  И Изделия.ЗаказНаПроизводство.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПовтИсп,
	|	ВЫБОР
	|		КОГДА МножественныйЗапуск.ГруппаИзделий ЕСТЬ НЕ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МножественныйЗапуск,
	|	ВЫБОР
	|		КОГДА Изделия.Спецификация.ЕстьПараметризацияРесурсов
	|			 ИЛИ Изделия.Спецификация.ЕстьУточняемоеОсновноеИзделие
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПараметрическаяСпецификация,
	|	ВЫБОР
	|		КОГДА Изделия.ИдентификаторВерсииДанных <> &ПустойКлючСвязи
	|		ТОГДА Изделия.ИдентификаторВерсииДанных
	|		ИНАЧЕ Изделия.Спецификация.ИдентификаторВерсииДанных
	|	КОНЕЦ КАК ИдентификаторВерсииДанных,
	|	ВЫБОР 
	|		КОГДА ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					ПартииДоИзменения КАК ДД
	|				ГДЕ
	|					ДД.БылиОшибки
	|					И ДД.ГруппаИзделий = Изделия.ГруппаИзделий)
	|			ТОГДА ИСТИНА
	|		КОГДА ИСТИНА В (
	|				ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации КАК ДД
	|				ГДЕ
	|					ДД.ПолныйРасчет
	|					И ДД.Очередь = &Очередь
	|					И ДД.Спецификация = Изделия.Спецификация
	|					И ДД.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПолныйРасчет,
	|
	|	&ТекстПоляНазначениеСтруктуры КАК НазначениеСтруктуры,
	|
	|	Изделия.ЗаказНаПроизводство.Подразделение           КАК ПодразделениеДиспетчер,
	|	Изделия.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Изделия.ЗаказНаПроизводство.НачатьНеРанее           КАК НачалоПроизводства,
	|	ВЫБОР
	|		КОГДА Изделия.ЗаказНаПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5)
	|			ТОГДА ИСТИНА
	//++ Устарело_Переработка24
	|		КОГДА Изделия.ЗаказНаПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|			ТОГДА ИСТИНА
	//-- Устарело_Переработка24
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК ПроизводствоИзДавальческогоСырья,
	|
	|	Изделия.УровеньРодитель               КАК УровеньРодитель,
	|	Изделия.КлючПартияРодитель            КАК КлючПартияРодитель,
	|	Изделия.ДлительностьДоВыпускаРодитель КАК ДлительностьДоВыпускаРодитель
	|
	|ПОМЕСТИТЬ Изделия
	|ИЗ
	|	Дельта КАК Изделия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ МножественныйЗапуск КАК МножественныйЗапуск
	|	ПО Изделия.ГруппаИзделий                 = МножественныйЗапуск.ГруппаИзделий
	|	 И Изделия.КлючПартияРодитель            = МножественныйЗапуск.КлючПартияРодитель
	|	 И Изделия.ДлительностьДоВыпускаРодитель = МножественныйЗапуск.ДлительностьДоВыпускаРодитель
	|
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	Изделия.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных
	|
	|ПОМЕСТИТЬ ИзделияПовтИсп
	|ИЗ
	|	Изделия КАК Изделия
	|
	|ГДЕ
	|	&РазрешитьПовтИспРассчитанныхДанных
	|	И Изделия.ПовтИсп
	|	И НЕ Изделия.ПолныйРасчет
	|	И Изделия.ИдентификаторВерсииДанных <> &ПустойКлючСвязи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторВерсииДанных
	|;
	|
	|ВЫБРАТЬ
	|
	|	Движения.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных,
	|	МАКСИМУМ(Движения.КлючПартия) КАК КлючПартия
	|
	|ПОМЕСТИТЬ КэшДанных
	|ИЗ
	|
	|	ИзделияПовтИсп КАК Изделия
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Изделия.ИдентификаторВерсииДанных = Движения.ИдентификаторВерсииДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.ИдентификаторВерсииДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПартия, ИдентификаторВерсииДанных
	|;
	|
	|ВЫБРАТЬ // КЭШ данных (движения номенклатуры)
	|
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных,
	|
	|	Движения.Номенклатура   КАК Номенклатура,
	|	Движения.Характеристика КАК Характеристика,
	|	Движения.Склад          КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА Движения.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Обособленно,
	|
	|	ВЫБОР
	|		КОГДА Движения.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|									ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ЭтоИзделие,
	|	ВЫБОР
	|		КОГДА Движения.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ЭтоПобочныйВыпуск,
	|	ВЫБОР
	|		КОГДА Движения.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ ЭтоМатериал,
	|
	|	Движения.Подразделение КАК Подразделение,
	|	Движения.Этап КАК Этап,
	|
	|	Движения.СпецификацияПолуфабриката КАК СпецификацияПолуфабриката,
	|	Движения.КлючСвязиСтрокаСпецификации КАК КлючСвязиСтрокаСпецификации,
	|	Движения.КоличествоНаЕдиницуПартииЗапуска КАК КоличествоНаЕдиницуПартииЗапуска,
	|	Движения.ДлительностьДоВыпуска КАК ДлительностьДоВыпуска
	|
	|ИЗ
	|	КэшДанных КАК Кэш
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Кэш.КлючПартия          = Движения.КлючПартия
	|	 И Кэш.ИдентификаторВерсииДанных = Движения.ИдентификаторВерсииДанных
	|	 И НЕ Движения.ДополнительнаяЗапись
	|;
	|
	|ВЫБРАТЬ // КЭШ данных (трудозатраты)
	|
	|	Движения.Спецификация КАК Спецификация,
	|	Движения.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных,
	|
	|	Движения.ВидРабот КАК ВидРабот,
	|
	|	Движения.Подразделение КАК Подразделение,
	|	Движения.Этап КАК Этап,
	|	
	|	Движения.КлючСвязиСтрокаСпецификации КАК КлючСвязиСтрокаСпецификации,
	|	Движения.КоличествоНаЕдиницуПартииЗапуска КАК КоличествоНаЕдиницуПартииЗапуска
	|
	|ИЗ
	|	КэшДанных КАК Кэш
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТрудозатратыСтруктурыЗаказа КАК Движения
	|	ПО Кэш.КлючПартия          = Движения.КлючПартия
	|	 И Кэш.ИдентификаторВерсииДанных = Движения.ИдентификаторВерсииДанных
	|	 И НЕ Движения.ДополнительнаяЗапись
	|;
	|
	|ВЫБРАТЬ // движения до изменения (движения номенклатуры)
	|
	|	Движения.Номенклатура        КАК Номенклатура,
	|	Движения.Характеристика      КАК Характеристика,
	|	Движения.Склад               КАК Склад,
	|	Движения.Назначение          КАК Назначение,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
	|	Движения.КлючПартия          КАК КлючПартия,
	|	Движения.ВидСтроки           КАК ВидСтроки,
	|	Движения.ЗаказНаПоступление  КАК ЗаказНаПоступление,
	|	Движения.ДатаПоступления     КАК ДатаПоступления,
	|
	|	-Движения.Требуется      КАК Требуется,
	|	-Движения.Запланировано  КАК Запланировано,
	|
	|	Движения.Уровень                          КАК Уровень,
	|	Движения.ДополнительнаяЗапись             КАК ДополнительнаяЗапись,
	|	Движения.Подразделение                    КАК Подразделение,
	|	Движения.Этап                             КАК Этап,
	|	Движения.Спецификация                     КАК Спецификация,
	|	Движения.ИдентификаторВерсииДанных        КАК ИдентификаторВерсииДанных,
	|	Движения.КлючСвязиСтрокаСпецификации      КАК КлючСвязиСтрокаСпецификации,
	|	Движения.КоличествоНаЕдиницуПартииЗапуска КАК КоличествоНаЕдиницуПартииЗапуска,
	|	Движения.НазначениеСтруктуры              КАК НазначениеСтруктуры,
	|	Движения.СпецификацияПолуфабриката        КАК СпецификацияПолуфабриката,
	|	Движения.ДлительностьДоВыпуска            КАК ДлительностьДоВыпуска,
	|	Движения.ГруппаИзделий                    КАК ГруппаИзделий
	|
	|ИЗ
	|	Партии КАК Партии
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Партии.КлючПартия = Движения.КлючПартия
	|
	|ГДЕ
	|	&РассчитыватьИзменения
	|		И Движения.ВидСтроки <> ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано)
	|	ИЛИ Движения.ВидСтроки В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск))
	|;
	|
	|ВЫБРАТЬ // движения до изменения (трудозатраты)
	|
	|	Движения.ВидРабот            КАК ВидРабот,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Движения.КлючВидРабот        КАК КлючВидРабот,
	|	Движения.КлючПартия          КАК КлючПартия,
	|
	|	-Движения.Количество КАК Количество,
	|
	|	Движения.ДополнительнаяЗапись             КАК ДополнительнаяЗапись,
	|	Движения.Подразделение                    КАК Подразделение,
	|	Движения.Этап                             КАК Этап,
	|	Движения.Спецификация                     КАК Спецификация,
	|	Движения.ИдентификаторВерсииДанных              КАК ИдентификаторВерсииДанных,
	|	Движения.КлючСвязиСтрокаСпецификации      КАК КлючСвязиСтрокаСпецификации,
	|	Движения.КоличествоНаЕдиницуПартииЗапуска КАК КоличествоНаЕдиницуПартииЗапуска
	|
	|ИЗ
	|	Партии КАК Партии
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТрудозатратыСтруктурыЗаказа КАК Движения
	|	ПО Партии.КлючПартия = Движения.КлючПартия
	|
	|ГДЕ
	|	&РассчитыватьИзменения
	|;
	|
	|ВЫБРАТЬ // данные по номенклатуры (НСИ)
	|
	|	Изделия.ИндексСтроки                                  КАК Идентификатор,
	|	Изделия.Спецификация                                  КАК Спецификация,
	|	Изделия.Номенклатура                                  КАК Номенклатура,
	|	Изделия.Характеристика                                КАК Характеристика,
	|	Изделия.Требуется                                     КАК Количество,
	|
	|	Изделия.ПодразделениеДиспетчер                        КАК ПодразделениеДиспетчер,
	|	Изделия.НаправлениеДеятельности                       КАК НаправлениеДеятельности,
	|	Изделия.НачалоПроизводства                            КАК НачалоПроизводства
	|
	|ИЗ
	|	Изделия КАК Изделия
	|
	|ГДЕ
	|	(Изделия.ПолныйРасчет
	|		ИЛИ Не Изделия.ПовтИсп
	|		ИЛИ (Изделия.ИдентификаторВерсииДанных) НЕ
	|			 В (
	|				ВЫБРАТЬ
	|					Кэш.ИдентификаторВерсииДанных ИЗ КэшДанных
	|			КАК Кэш))
	|	И Изделия.Требуется <> 0
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ // нормативный график
	|
	|	Изделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	ВЫБОР
	|		КОГДА
	|			Изделия.ЗаказНаПроизводство.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию)
	|				И Изделия.КлючПартия = &ПустойКлючСвязи
	|				И ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК Таблица
	|				ГДЕ
	|					Таблица.ЗаказНаПроизводство = Изделия.ЗаказНаПроизводство)
	|				ТОГДА Изделия.КлючПартияРодитель
	|			ИНАЧЕ Изделия.КлючПартия
	|		КОНЕЦ КАК КлючПартия
	|
	|ИЗ
	|	Изделия КАК Изделия
	|;
	|
	|ВЫБРАТЬ // все партии
	|
	|	Партии.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Партии.ГруппаИзделий       КАК ГруппаИзделий,
	|	Партии.КлючПартия          КАК КлючПартия,
	|	Партии.БылиОшибки          КАК БылиОшибки
	|
	|ИЗ
	|	ПартииДоИзменения КАК Партии
	|
	|;
	|
	|ВЫБРАТЬ // все изделия
	|
	|	Изделия.ИндексСтроки КАК ИндексСтроки,
	|
	|	Изделия.ГруппаИзделий КАК ГруппаИзделий,
	|	
	|	Изделия.Номенклатура        КАК Номенклатура,
	|	Изделия.Характеристика      КАК Характеристика,
	|	Изделия.Склад               КАК Склад,
	|	Изделия.Назначение          КАК Назначение,
	|	Изделия.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Изделия.КлючНоменклатура    КАК КлючНоменклатура,
	|	Изделия.КлючПартия          КАК КлючПартия,
	|	Изделия.Требуется           КАК Требуется,
	|
	|	Изделия.Спецификация КАК Спецификация,
	|
	|	Изделия.УровеньРодитель               КАК УровеньРодитель,
	|	Изделия.КлючПартияРодитель            КАК КлючПартияРодитель,
	|	Изделия.ДлительностьДоВыпускаРодитель КАК ДлительностьДоВыпускаРодитель,
	|
	|	Изделия.ЭтоПолуфабрикат КАК ЭтоПолуфабрикат,
	|	Изделия.ПроизводствоИзДавальческогоСырья КАК ПроизводствоИзДавальческогоСырья,
	|	
	|	Изделия.ПовтИсп КАК ПовтИсп,
	|	Изделия.МножественныйЗапуск КАК МножественныйЗапуск,
	|	Изделия.ПараметрическаяСпецификация КАК ПараметрическаяСпецификация,
	|	Изделия.ИдентификаторВерсииДанных КАК ИдентификаторВерсииДанных,
	|	Изделия.ПолныйРасчет КАК ПолныйРасчет,
	|
	|	Изделия.НазначениеСтруктуры КАК НазначениеСтруктуры,
	|
	|	ISNULL(ВЫБОР
	|		КОГДА Изделия.ПараметрическаяСпецификация И СпецификацииИзделий.Порядок <> 1
	|			ТОГДА ИСТИНА
	|		КОГДА СпецификацииИзделий.ПобочныйВыход
	|			ТОГДА ИСТИНА
	|	КОНЕЦ, ЛОЖЬ) КАК ПобочныйВыпуск,
	|
	|	ISNULL(СпецификацииИзделий.ЕдиницаИзмеренияШтучная, ЛОЖЬ) КАК ЕдиницаИзмеренияШтучная,
	|
	|	ISNULL(СпецификацииИзделий.Порядок, 1)                                                                                КАК Порядок,
	|	ISNULL(СпецификацииИзделий.КоличествоУпаковокНаЕдиницуПартииЗапуска, 1) * ISNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоНаЕдиницуПартииЗапуска
	|
	|ИЗ
	|	Изделия КАК Изделия
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииИзделий КАК СпецификацииИзделий
	|	ПО Изделия.Спецификация = СпецификацииИзделий.Спецификация
	|	 И СпецификацииИзделий.ВидНоменклатуры = Изделия.Номенклатура.ВидНоменклатуры
	|	 И СпецификацииИзделий.Номенклатура   В (Изделия.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	 И СпецификацииИзделий.Характеристика В (Изделия.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|
	|ГДЕ
	|	Изделия.Требуется > 0
	|
	|УПОРЯДОЧИТЬ ПО Изделия.ГруппаИзделий
	|;
	|";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляНазначениеСтруктуры", СтруктураЗаказаПроведениеДокументов.ТекстПоляНазначениеМатериалов("Изделия.ЗаказНаПроизводство", "Изделия.НазначениеСтруктуры"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"СпецификацииИзделий.Упаковка",
			"Изделия.Номенклатура"));
	
	Хранилище = Хранилище();

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();

#Область КэшДанных
	
	КэшДанных = Новый Структура();
	КэшДанных.Вставить("СтруктураЗаказа", РезультатЗапроса[КоличествоПакетов-8].Выгрузить());
	КэшДанных.СтруктураЗаказа.Индексы.Добавить("Спецификация,ИдентификаторВерсииДанных");
	КэшДанных.Вставить("Трудозатраты", РезультатЗапроса[КоличествоПакетов-7].Выгрузить());
	КэшДанных.Трудозатраты.Индексы.Добавить("Спецификация,ИдентификаторВерсииДанных");
	
#КонецОбласти

#Область ДвиженияДоИзменения
	
	ЗагрузитьДвиженияВХранилище(Хранилище, "СтруктураЗаказа",             РезультатЗапроса[КоличествоПакетов-6].Выгрузить(),, Новый Структура("ДвиженияДоИзменения", Истина));
	ЗагрузитьДвиженияВХранилище(Хранилище, "ТрудозатратыСтруктурыЗаказа", РезультатЗапроса[КоличествоПакетов-5].Выгрузить(),, Новый Структура("ДвиженияДоИзменения", Истина));
	
#КонецОбласти

#Область НСИ
	
	Если РезультатЗапроса[КоличествоПакетов-4].Пустой() Тогда
		ДанныеСпецификаций = Новый Соответствие();
	Иначе
		ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификации(РезультатЗапроса[КоличествоПакетов-4].Выгрузить(), ПараметрыВыборкиДанныхСпецификации());
	КонецЕсли;
	
#КонецОбласти

#Область НормативныйГрафик
	
	РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадания(РезультатЗапроса[КоличествоПакетов-3].Выгрузить());
	
#КонецОбласти

#Область КлючиСвязи

	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Новый Структура("ДополнительнаяЗапись", Ложь));
	Параметры.Вставить("Колонки", "КлючПартия,КлючНоменклатура,КлючСвязиСтрокаСпецификации");
	Параметры.Вставить("КолонкиПоЗначению");
	Параметры.Вставить("НовыеИменаКолонок", Новый Структура("КлючНоменклатура", "КлючСвязи"));
	
	КэшКлючиСвязи1 = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Хранилище.СтруктураЗаказа,
		Параметры.Строки,
		Параметры.Колонки,
		Параметры.КолонкиПоЗначению,
		Параметры.НовыеИменаКолонок);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Новый Структура("ДополнительнаяЗапись", Ложь));
	Параметры.Вставить("Колонки", "КлючПартия,КлючВидРабот,КлючСвязиСтрокаСпецификации");
	Параметры.Вставить("КолонкиПоЗначению");
	Параметры.Вставить("НовыеИменаКолонок", Новый Структура("КлючВидРабот", "КлючСвязи"));
	
	КэшКлючиСвязи2 = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Хранилище.ТрудозатратыСтруктурыЗаказа,
		Параметры.Строки,
		Параметры.Колонки,
		Параметры.КолонкиПоЗначению,
		Параметры.НовыеИменаКолонок);
	
	СоединитьТаблицы(КэшКлючиСвязи1, КэшКлючиСвязи2);
	
	КлючиСвязи = Новый Структура("Кэш, Ключ", КэшКлючиСвязи1, Новый Структура("КлючПартия, КлючСвязиСтрокаСпецификации"));
	
	КэшКлючиСвязи1 = Неопределено;
	КэшКлючиСвязи2 = Неопределено;
	
	КлючиСвязи.Кэш.Индексы.Добавить("КлючПартия,КлючСвязиСтрокаСпецификации");

#КонецОбласти

	ПартииДоИзменения = РезультатЗапроса[КоличествоПакетов-2].Выгрузить();
	Партии = СкопироватьКолонки(ПартииДоИзменения.Колонки);
	Партии.Колонки.Добавить("НоваяПартия", Новый ОписаниеТипов("Булево"));
	Партии.Колонки.Добавить("РазмерПартии", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	Партии.Колонки.Добавить("РассчитыватьИзменения", Новый ОписаниеТипов("Булево"));
	Партии.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	Партии.Колонки.Добавить("ПроизводствоИзДавальческогоСырья", Новый ОписаниеТипов("Булево"));
	Партии.Колонки.Добавить("Протокол");
	ПартииГруппы = Партии.СкопироватьКолонки();
	ПартииГруппы.Колонки.Добавить("Строки", Новый ОписаниеТипов("Массив"));
	ПартииГруппы.Колонки.Добавить("КорректировкаСтрок");
	ПартияСтруктура = Новый Структура("КлючПартия");
	
	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ВсеПартииНовые = НЕ ПартииДоИзменения.Количество() > 0;
	
	Изделия = РезультатЗапроса[КоличествоПакетов-1].Выгрузить();
	ИзделияГруппы = СкопироватьКолонки(Изделия.Колонки,"Порядок,Требуется,КоличествоНаЕдиницуПартииЗапуска");
	ИзделияГруппы.Колонки.Добавить("ТребуетсяЕдиницПартий", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой)));
	ИзделияГруппы.Колонки.Добавить("ПоляГруппировки", Новый ОписаниеТипов("Строка"));
	ИзделияГруппы.Колонки.Добавить("Изделие");
	ПобочныеИзделияГруппы = ИзделияГруппы.СкопироватьКолонки();
	
	ВсегоИзделий = Изделия.Количество();
	Индекс = 0;
	
	Пока ВсегоИзделий > Индекс Цикл
		
		Изделие = Изделия[Индекс];
		
		Если Не
			(Изделие.МножественныйЗапуск Или Изделие.ПобочныйВыпуск) Тогда
			
			Партия = ПартииГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(Партия, Изделие, "ЗаказНаПроизводство, ГруппаИзделий, КлючПартия" + ", ПроизводствоИзДавальческогоСырья");
			Партия.РазмерПартии = ?(Изделие.ЕдиницаИзмеренияШтучная И Изделие.Требуется > Цел(Изделие.Требуется), Цел(Изделие.Требуется) + 1, Изделие.Требуется);
			Партия.Строки.Добавить(Изделие);
			
			Если Партия.КлючПартия = ПустойКлючСвязи Тогда
				Партия.НоваяПартия = Истина;
				Партия.КлючПартия = Новый УникальныйИдентификатор();
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		Иначе
			
			ГруппаИзделий = Изделие.ГруппаИзделий;
			
			Пока ВсегоИзделий > Индекс И ГруппаИзделий = Изделия[Индекс].ГруппаИзделий Цикл
				
				Изделие = Изделия[Индекс];
				
				ИзделиеГруппы = ?(Не Изделие.ПобочныйВыпуск, ИзделияГруппы.Добавить(), ПобочныеИзделияГруппы.Добавить());
				ИзделиеГруппы.Изделие = Изделие;
				ЗаполнитьЗначенияСвойств(ИзделиеГруппы, Изделие, "Порядок, Требуется, КоличествоНаЕдиницуПартииЗапуска");
				
				ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
				
				ХешированиеДанных.Добавить("" + Изделие.ГруппаИзделий);
				ХешированиеДанных.Добавить("" + Изделие.КлючПартияРодитель);
				ХешированиеДанных.Добавить("" + Изделие.ДлительностьДоВыпускаРодитель);
				ХешированиеДанных.Добавить("" + Изделие.НазначениеСтруктуры.УникальныйИдентификатор());
				
				Если Изделие.ПараметрическаяСпецификация Тогда
					ХешированиеДанных.Добавить("" + Изделие.Номенклатура.УникальныйИдентификатор());
					ХешированиеДанных.Добавить("" + Изделие.Характеристика.УникальныйИдентификатор());
				КонецЕсли;
				
				ИзделиеГруппы.ПоляГруппировки = ХешированиеДанных.ХешСумма;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			ВсегоИзделийВГруппе = ИзделияГруппы.Количество();
			
			Если ВсегоИзделийВГруппе > 0 Тогда
			
				ГраницаИзделияГруппы = ВсегоИзделийВГруппе - 1;
				X = 0;
				Y = X + 1;
				ИзделиеX = Неопределено;
				
				Пока ГраницаИзделияГруппы >= X Цикл
					
					Если ИзделиеX = Неопределено Тогда
						ИзделиеX = ИзделияГруппы[X];
						ИзделиеX.ТребуетсяЕдиницПартий = ИзделиеX.ТребуетсяЕдиницПартий + ИзделиеX.Требуется / ИзделиеX.КоличествоНаЕдиницуПартииЗапуска
					КонецЕсли;
					
					Если ГраницаИзделияГруппы >= Y Тогда
						ИзделиеY = ИзделияГруппы[Y];
					Иначе
						ИзделиеX = Неопределено;
						X = X + 1;
						Y = X + 1;
						Продолжить;
					КонецЕсли;
					
					Если ИзделиеX.Порядок = ИзделиеY.Порядок И ИзделиеX.ПоляГруппировки = ИзделиеY.ПоляГруппировки Тогда
						ИзделиеY.ТребуетсяЕдиницПартий = ИзделиеX.ТребуетсяЕдиницПартий;
						ИзделиеX.ТребуетсяЕдиницПартий = ИзделиеX.ТребуетсяЕдиницПартий + ИзделиеY.Требуется / ИзделиеY.КоличествоНаЕдиницуПартииЗапуска;
					КонецЕсли;
					
					Y = Y + 1;
					
				КонецЦикла;
				
				ИзделияГруппы.Сортировать("ПоляГруппировки, ТребуетсяЕдиницПартий Убыв, Порядок Возр, Требуется Убыв", Новый СравнениеЗначений());
				
				ПоляГруппировки = Неопределено;
				X = 0;
				
				Пока ГраницаИзделияГруппы >= X Цикл
					
					ИзделиеГруппы = ИзделияГруппы[X];
					
					Если ПоляГруппировки <> ИзделиеГруппы.ПоляГруппировки Тогда
						Партия = ПартииГруппы.Добавить();
						ЗаполнитьЗначенияСвойств(Партия, ИзделиеГруппы.Изделие, "ЗаказНаПроизводство, ГруппаИзделий, КлючПартия" + ", ПроизводствоИзДавальческогоСырья");
						Партия.РазмерПартии = ИзделиеГруппы.ТребуетсяЕдиницПартий * ИзделиеГруппы.Изделие.КоличествоНаЕдиницуПартииЗапуска;
						Партия.РазмерПартии = ?(ИзделиеГруппы.Изделие.ЕдиницаИзмеренияШтучная И Партия.РазмерПартии > Цел(Партия.РазмерПартии), Цел(Партия.РазмерПартии) + 1, Партия.РазмерПартии);
						ПоляГруппировки = ИзделиеГруппы.ПоляГруппировки;
					КонецЕсли;
					
					Если Партия.КлючПартия = ПустойКлючСвязи И ИзделиеГруппы.Изделие.КлючПартия <> ПустойКлючСвязи Тогда
						Партия.КлючПартия = ИзделиеГруппы.Изделие.КлючПартия;
					КонецЕсли;
					
					Если (X = ГраницаИзделияГруппы Или ИзделияГруппы[X + 1].ПоляГруппировки <> ПоляГруппировки)
						  И (Партия.КлючПартия = ПустойКлючСвязи ИЛИ Партии.Найти(Партия.КлючПартия, "КлючПартия") <> Неопределено) Тогда
						Партия.НоваяПартия = Истина;
						Партия.КлючПартия = Новый УникальныйИдентификатор();
					КонецЕсли;
					
					Партия.Строки.Добавить(ИзделиеГруппы.Изделие);
					X = X + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПобочныеИзделияГруппы.Количество() > 0 Тогда
				
				X = ПартииГруппы.Количество() - 1;
				
				Если X = -1 Тогда // в заказе только побочные изделия
					
					Партия = ПартииГруппы.Добавить();
					ЗаполнитьЗначенияСвойств(Партия, Изделие, "ЗаказНаПроизводство, ГруппаИзделий, КлючПартия");
					
					Для каждого Строка Из ПобочныеИзделияГруппы Цикл
						Партия.Строки.Добавить(Строка.Изделие);
					КонецЦикла;
					
					Если Партия.КлючПартия = ПустойКлючСвязи Тогда
						Партия.НоваяПартия = Истина;
						Партия.КлючПартия = Новый УникальныйИдентификатор();
					КонецЕсли;
					
				Иначе
					
					ПобочныеИзделияГруппы.Сортировать("Порядок Убыв, Требуется Возр", Новый СравнениеЗначений());
					
					Пока X >= 0 Цикл
						
						Партия = ПартииГруппы[X];
						
						Доступно = 0;
						Порядок = Неопределено;
						
						Для Y = -ПобочныеИзделияГруппы.Количество() + 1 По 0 Цикл
							
							Строка = ПобочныеИзделияГруппы[-Y];
							
							Если Порядок <> Строка.Порядок Тогда
								Доступно = Партия.РазмерПартии * (Строка.КоличествоНаЕдиницуПартииЗапуска / Партия.Строки[0].КоличествоНаЕдиницуПартииЗапуска);
								Порядок = Строка.Порядок;
							КонецЕсли;
							
							Если Строка.Изделие.КлючПартияРодитель <> Партия.Строки[0].КлючПартияРодитель Тогда
								Распределено = 0;
							Иначе
								Распределено = Мин(Доступно, Строка.Требуется);
							КонецЕсли;
							
							Если Распределено = 0 И X <> 0 Тогда
								Продолжить;
							КонецЕсли;
							
							Доступно = Доступно - Распределено;
							Строка.Требуется = Строка.Требуется - Распределено;
							
							Если X = 0 Тогда
								Распределено = Распределено + Строка.Требуется; // первая партия забирает все остатки
							КонецЕсли;
							
							Если Распределено > 0 И Распределено <> Строка.Изделие.Требуется Тогда
								Партия.КорректировкаСтрок = ?(Партия.КорректировкаСтрок = Неопределено, Новый Соответствие(), Партия.КорректировкаСтрок);
								Партия.КорректировкаСтрок.Вставить(Строка.Изделие.КлючНоменклатура, Строка.Изделие.Требуется - Распределено);
							КонецЕсли;
							
							Партия.Строки.Добавить(Строка.Изделие);
							
							Если Строка.Требуется > 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ПобочныеИзделияГруппы.Удалить(Строка);
							
						КонецЦикла;
						
						X = X - 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ЕстьОшибки = ПобочныеИзделияГруппы.Количество() > 0;
				
				Если ЕстьОшибки Тогда
					
					Партия = ПартииГруппы[0];
					
					Для каждого Строка Из ПобочныеИзделияГруппы Цикл
						Партия.БылиОшибки = Истина;
						ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Строка.Изделие.Номенклатура, Строка.Изделие.Характеристика,,,Строка.Изделие.Назначение);
						Шаблон = НСтр("ru = 'Не удалось запланировать изделие ""%1"" в количестве %2 %3 по спецификации %4 ""%5"".';
										|en = 'Cannot schedule the ""%1"" finished product in the amount of %2 %3 under the %4 ""%5"" BOM.'");
						ТекстСообщения = СтрШаблон(Шаблон,
							ПредставлениеНоменклатуры, Строка.Требуется, Строка.Изделие.Номенклатура.ЕдиницаИзмерения, Строка.Изделие.Спецификация.Код, Строка.Изделие.Спецификация.Наименование);
						Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
						ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Партия.ЗаказНаПроизводство,
							ТекстСообщения);
					КонецЦикла;
					
					ПобочныеИзделияГруппы.Очистить();
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИзделияГруппы.Очистить();
			
		КонецЕсли;
		
		Для каждого Партия Из ПартииГруппы Цикл
			
			Если Партия.Строки.Количество() > 0
				И ПроверитьЗацикливаниеРазузлованияСтруктурыЗаказа(Партия, Партия.Строки, ПараметрыРасчета) Тогда
				Партия.РазмерПартии = 0; // блокируем расчет
			КонецЕсли;
			
			ЗаполнитьДвиженияПоРезультатуРазузлования(Хранилище, Партия, Партия.Строки, КэшДанных, ДанныеСпецификаций, КлючиСвязи);
			
			Если Партия.БылиОшибки Тогда
				Протокол = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПротоколМакет();
				Протокол.Данные = СтруктураПоПолям(Партия.Строки[0], "Спецификация, ЗаказНаПроизводство");
				Протокол.ТекстСообщения = Партия.Протокол;
				Партия.Протокол = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(9)); // регистрация ошибок
			КонецЕсли;
			
			Партия.Действует             = Партия.РазмерПартии > 0 Или Партия.Строки.Количество() > 0;
			Партия.РассчитыватьИзменения = Партия.Действует И НЕ Партия.НоваяПартия И НЕ Изделие.ПолныйРасчет И НЕ Партия.БылиОшибки И ПараметрыРасчета.РассчитыватьИзменения;
			
			ЗаполнитьЗначенияСвойств(Партии.Добавить(), Партия);
			
		КонецЦикла;
		
		ПартииГруппы.Очистить();
		
	КонецЦикла;
	
	Изделия.Очистить();
	
	// в ИБ после расчета могут остаться "старые" ключи партий, по ним нужно "затереть" данные
	
	Если Не
		ВсеПартииНовые Тогда
		
		Партии.Индексы.Добавить("КлючПартия");
		
		Для каждого ПартияДоИзменения Из ПартииДоИзменения Цикл
			
			Партия = Партии.Найти(ПартияДоИзменения.КлючПартия, "КлючПартия");
			
			Если Партия = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Партии.Добавить(), ПартияДоИзменения);
				Продолжить;
			КонецЕсли;
			
			Партия.БылиОшибки = Партия.БылиОшибки Или ПартияДоИзменения.БылиОшибки;
			
		КонецЦикла;
		
		ПартииДоИзменения.Очистить();
		
	КонецЕсли;
	
	// расчет "дельты" для записи изменений по спецификациям "повт.исп = ложь" (в режиме "дополнение")
	
	Если ВсеПартииНовые Тогда
		
		ВсегоСтрок = 0;
		
		Для каждого Данные Из Хранилище Цикл
			
			Таблица = Данные.Значение; // ТаблицаЗначений
			
			Таблица.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
			Таблица.Индексы.Добавить("КлючПартия");
			
			ВсегоСтрок = Макс(ВсегоСтрок, Таблица.Количество());
			
		КонецЦикла;
		
	Иначе
		
		НайденныеПартии = Партии.НайтиСтроки(Новый Структура("РассчитыватьИзменения", Истина));
		
		ВсегоСтрок = 0;
		Для каждого Данные Из Хранилище Цикл
			
			Таблица = Данные.Значение; // ТаблицаЗначений
			
			Если НайденныеПартии.ВГраница() <> -1 Тогда
				
				ЗначенияЗаполнения = Новый Структура("РассчитыватьИзменения", Истина);
				
				ПараметрыОтбора = Новый Структура("КлючПартия");
				
				Таблица.Колонки.Добавить("РассчитыватьИзменения", Новый ОписаниеТипов("Булево"));
				Таблица.Индексы.Добавить("КлючПартия");
				
				Для каждого Партия Из НайденныеПартии Цикл
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Партия);
					ЗаполнитьКолонкиВТаблицеПоПараметрамОтбора(Таблица, ПараметрыОтбора, ЗначенияЗаполнения);
				КонецЦикла;
				
				Таблица.Индексы.Удалить(0);
				
				Если Данные.Ключ = "СтруктураЗаказа" Тогда
					РассчитатьИзмененияИДобавитьСторноДвиженияВТаблицуСтруктураЗаказа(Таблица);
				КонецЕсли;
				
				Если Данные.Ключ = "ТрудозатратыСтруктурыЗаказа" Тогда
					РассчитатьИзмененияИДобавитьСторноДвиженияВТаблицуТрудозатратыСтруктурыЗаказа(Таблица);
				КонецЕсли;
				
			КонецЕсли;
			
			Таблица.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
			Таблица.Индексы.Добавить("КлючПартия");
			
			ВсегоСтрок = Макс(ВсегоСтрок, Таблица.Количество());
			
		КонецЦикла;
		
	КонецЕсли;
	
	Партии.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
	
	// группировка партий в ПорцииЗаписи по порциям записи
	
	ПорцииЗаписи = ПорцииЗаписи();
	
	Если ВсеПартииНовые
		И КоличествоСтрокВНабореЗаписей() > ВсегоСтрок Тогда
		
		ПорцииЗаписи.Добавить().НомерПорции = 0;
		
	Иначе
	
		ВсегоПартий = Партии.Количество();
		
		КоличествоСтрок = 0;
		Контейнер = Новый Массив();
		
		Для X = 0 По ВсегоПартий - 1 Цикл
			
			Партия = Партии[X];
			
			ЗаполнитьЗначенияСвойств(ПартияСтруктура, Партия);
			
			Замещать = Не Партия.НоваяПартия И Не Партия.РассчитыватьИзменения;
			
			Для каждого Данные Из Хранилище Цикл
				Контейнер.Добавить(Данные.Значение.НайтиСтроки(ПартияСтруктура));
			КонецЦикла;
			
			КоличествоСтрок = Контейнер[0].Количество();
			
			ПорцияЗаписи = ПорцияЗаписи(ПорцииЗаписи, Замещать, Истина, КоличествоСтрок);
			
			Для каждого Коллекция Из Контейнер Цикл
				УстановитьНомерПорцииВКоллекцииДвижений(Коллекция, ПорцияЗаписи.НомерПорции);
			КонецЦикла;
			
			Партия.НомерПорции = ПорцияЗаписи.НомерПорции;
			
			Контейнер.Очистить();
			
			ПорцияЗаписи.КоличествоСтрок = ПорцияЗаписи.КоличествоСтрок + КоличествоСтрок;
			ПорцияЗаписи.Доступно = КоличествоСтрокВНабореЗаписей() > ПорцияЗаписи.КоличествоСтрок;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// расчет таблицы изменений для регистрации заданий к распределению запасов
	
	ПустаяГруппаИзделийСтруктура = Новый Структура("ГруппаИзделий", ПустаяГруппаИзделий()); // исключаем строки вида ПроизводствоПродукция, ПроизводствоПолуфабриката
	
	Если ВсеПартииНовые
		Или ПараметрыРасчета.РассчитыватьИзменения Тогда
		
		ИзменениеЗапасов = Хранилище.СтруктураЗаказа.Скопировать(ПустаяГруппаИзделийСтруктура, "НомерПорции," + "Номенклатура,Характеристика,Склад,Назначение" + ",ЗаказНаПроизводство"); // ТаблицаЗначений
		ИзменениеЗапасов.Свернуть("НомерПорции," + "Номенклатура,Характеристика,Склад,Назначение" + ",ЗаказНаПроизводство");
		ИзменениеЗапасов.Индексы.Добавить("НомерПорции");
		
	Иначе
		
		Измерения = РегистрыСведений.СтруктураЗаказа.СтруктураМетаданных().ИзмеренияСтрока;
		ИзменениеЗапасов = Хранилище.СтруктураЗаказа.Скопировать(ПустаяГруппаИзделийСтруктура, "НомерПорции," + Измерения + ",Требуется,Запланировано"); // ТаблицаЗначений
		СвернутьТаблицуИУдалитьНулевыеСтроки(ИзменениеЗапасов, "НомерПорции," + Измерения, "Требуется,Запланировано");
		ИзменениеЗапасов.Свернуть("НомерПорции," + "Номенклатура,Характеристика,Склад,Назначение" + ",ЗаказНаПроизводство");
		ИзменениеЗапасов.Индексы.Добавить("НомерПорции");
		
	КонецЕсли;
	
	// подготовка к записи ошибок расчета
	
	БылиОшибки = Партии.Найти(Истина, "БылиОшибки") <> Неопределено;
	
	Если БылиОшибки Тогда
		
		Партии.Колонки.Добавить("ИдентификаторОшибки", Новый ОписаниеТипов("УникальныйИдентификатор"));
		Партии.ЗагрузитьКолонку(Партии.ВыгрузитьКолонку("КлючПартия"), "ИдентификаторОшибки");
	
	КонецЕсли;
	
	// подготовка движений к записи (удаление записей "до изменения", необходимых для контроля изменений на предыдущем шаге)
	
	Если Не
		ВсеПартииНовые Тогда
		
		Для каждого Данные Из Хранилище Цикл
			НайденныеСтроки = Данные.Значение.НайтиСтроки(Новый Структура("ДвиженияДоИзменения", Истина));
			УдалитьСтрокиИзТаблицы(Данные.Значение, НайденныеСтроки);
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Данные Из Хранилище Цикл
		Таблица = Данные.Значение; // ТаблицаЗначений
		Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("КлючПартия"), "КлючНабор"); // отдельное измерение для записи движений
		Таблица.Индексы.Добавить("НомерПорции");
	КонецЦикла;
	
	Партии.Индексы.Добавить("НомерПорции");
	
	// запись результата разузлования
	
	ВсегоПорций = ПорцииЗаписи.Количество();
	Индекс = 0;
	
	СчетчикОшибок = 1;
	
	Пока ВсегоПорций > Индекс Цикл
		
		ПорцияЗаписи = ПорцииЗаписи[Индекс];
		ПорцияЗаписиСтруктура = Новый Структура("НомерПорции", ПорцияЗаписи.НомерПорции);
		ИзмененныеСтроки = ИзменениеЗапасов.Скопировать(ПорцияЗаписиСтруктура);
		
		НачатьТранзакцию();
		Попытка
			
			Если Не ПорцияЗаписи.Замещать Тогда
				
				НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
				НаборЗаписей.Загрузить(Хранилище.СтруктураЗаказа.Скопировать(ПорцияЗаписиСтруктура));
				НаборЗаписей.Записать(Ложь);
				
				НаборЗаписей = РегистрыСведений.ТрудозатратыСтруктурыЗаказа.СоздатьНаборЗаписей();
				НаборЗаписей.Загрузить(Хранилище.ТрудозатратыСтруктурыЗаказа.Скопировать(ПорцияЗаписиСтруктура));
				НаборЗаписей.Записать(Ложь);
				
			Иначе
				
				НайденныеПартии = Партии.НайтиСтроки(ПорцияЗаписиСтруктура);
				
				Для каждого Партия Из НайденныеПартии Цикл
					
					ЗаполнитьЗначенияСвойств(ПартияСтруктура, Партия);
					
					НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.КлючНабор.Установить(Партия.КлючПартия);
					Если Партия.Действует Тогда
						НаборЗаписей.Загрузить(Хранилище.СтруктураЗаказа.Скопировать(ПартияСтруктура));
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
					
					НаборЗаписей = РегистрыСведений.ТрудозатратыСтруктурыЗаказа.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.КлючНабор.Установить(Партия.КлючПартия);
					Если Партия.Действует Тогда
						НаборЗаписей.Загрузить(Хранилище.ТрудозатратыСтруктурыЗаказа.Скопировать(ПартияСтруктура));
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
					
				КонецЦикла;
				
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗаданияВСледующуюОчередь(ИзмененныеСтроки);
			
			Если БылиОшибки Тогда
				СтруктураОшибок = Новый Структура();
				СтруктураОшибок.Вставить("ТипОшибки", Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаЗаполненияДанныхСпецификации);
				СтруктураОшибок.Вставить("Ошибки", Партии.НайтиСтроки(Новый Структура("НомерПорции, БылиОшибки", ПорцияЗаписи.НомерПорции, Истина)));
				РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ЗарегистрироватьОшибки(СтруктураОшибок);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СчетчикОшибок < КоличествоПопытокЗаписи() Тогда
				ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Индекс = Индекс + 1;
		СчетчикОшибок = 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Хранилище()
	
	Хранилище = Новый Структура(); // Хранилище движений
	
	Возврат Хранилище;
	
КонецФункции

Процедура ЗагрузитьДвиженияВХранилище(Хранилище, ИмяРегистра, Данные, ПривестиТипы = Истина, КолонкиПоЗначению = Неопределено)

	Если ПривестиТипы Тогда
	
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Набор.Загрузить(Данные);
		Хранилище.Вставить(ИмяРегистра, Набор.Выгрузить());
		
	Иначе
		Хранилище.Вставить(ИмяРегистра, Данные);
	КонецЕсли;
	
	Таблица = Хранилище[ИмяРегистра]; // ТаблицаЗначений
	
	Если КолонкиПоЗначению <> Неопределено Тогда
		Для каждого Колонка Из КолонкиПоЗначению Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Колонка.Значение));
			Таблица.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(МассивТипов));
			Таблица.ЗаполнитьЗначения(Колонка.Значение, Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗацикливаниеРазузлованияСтруктурыЗаказа(Партия, Изделия, ПараметрыРасчета)
	
	ОписаниеЦикла = "";
	
	ЕстьОшибки = Ложь;
	
	Изделие = Изделия[0];
	Уровень = Изделие.УровеньРодитель + 1;

	Если Уровень > ПараметрыРасчета.МаксГлубинаРасчета Тогда
		ЕстьОшибки = Истина;
		Партия.БылиОшибки = Истина;
		Шаблон = НСтр("ru = 'Превышена максимальная глубина разузлования структуры заказа (%1)';
						|en = 'The maximum explosion depth of the order structure is exceeded (%1)'");
		ТекстСообщения = СтрШаблон(Шаблон, ПараметрыРасчета.МаксГлубинаРасчета);
		Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
			ТекстСообщения);
	КонецЕсли;
	
	Если Не ЕстьОшибки И Уровень > ПараметрыРасчета.ИскатьЦиклыПосле Тогда
		
		ЕстьОшибки = Ложь;
		
		СвязиСпецификаций = Новый Соответствие();
		
		Запрос = Новый Запрос();
		
		Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|
		|	КэшНСИ.Спецификация          КАК Спецификация,
		|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
		|	Иерархия.Спецификация        КАК СпецификацияРодитель,
		|	Иерархия.КлючНоменклатура    КАК КлючНоменклатураРодитель,
		|	Иерархия.Номенклатура        КАК НоменклатураРодитель,
		|	Иерархия.Характеристика      КАК ХарактеристикаРодитель,
		|	Иерархия.Склад               КАК СкладРодитель,
		|	Иерархия.Назначение          КАК НазначениеРодитель,
		|	Иерархия.ЗаказНаПроизводство КАК ЗаказНаПроизводствоРодитель
		|ИЗ
		|	РегистрСведений.СтруктураЗаказа КАК Движения
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
		|		ПО КэшНСИ.Номенклатура        = Движения.Номенклатура
		|		 И КэшНСИ.Характеристика      = Движения.Характеристика
		|		 И КэшНСИ.Склад               = Движения.Склад
		|		 И КэшНСИ.Назначение          = Движения.Назначение
		|		 И КэшНСИ.ЗаказНаПроизводство = Движения.ЗаказНаПроизводство
		|		 И Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|		 И Движения.Разделитель = &ПустойКлючСвязи
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Иерархия
		|		ПО Движения.КлючПартия = Иерархия.КлючПартия
		|		 И Иерархия.ВидСтроки В (ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
		|								 ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
		|		 И Иерархия.Разделитель = &ПустойКлючСвязи
		|
		|ГДЕ
		|	Движения.Номенклатура          = &Номенклатура
		|	И Движения.Характеристика      = &Характеристика
		|	И Движения.Склад               = &Склад
		|	И Движения.Назначение          = &Назначение
		|	И Движения.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И Движения.КлючНоменклатура    = &КлючНоменклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|
		|	КэшНСИ1.Спецификация         КАК Спецификация,
		|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
		|	КэшНСИ2.Спецификация         КАК СпецификацияРодитель,
		|	Иерархия.КлючНоменклатура    КАК КлючНоменклатураРодитель,
		|	Иерархия.Номенклатура        КАК НоменклатураРодитель,
		|	Иерархия.Характеристика      КАК ХарактеристикаРодитель,
		|	Иерархия.Склад               КАК СкладРодитель,
		|	Иерархия.Назначение          КАК НазначениеРодитель,
		|	Иерархия.ЗаказНаПроизводство КАК ЗаказНаПроизводствоРодитель
		|
		|ИЗ
		|	РегистрСведений.СтруктураЗаказа КАК Движения
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ1
		|		ПО КэшНСИ1.Номенклатура        = Движения.Номенклатура
		|		 И КэшНСИ1.Характеристика      = Движения.Характеристика
		|		 И КэшНСИ1.Склад               = Движения.Склад
		|		 И КэшНСИ1.Назначение          = Движения.Назначение
		|		 И КэшНСИ1.ЗаказНаПроизводство = Движения.ЗаказНаПроизводство
		|		 И Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|		 И Движения.Разделитель = &ПустойКлючСвязи
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Перемещение
		|		ПО Движения.КлючПартия = Перемещение.КлючПартия
		|		 И Перемещение.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение)
		|		 И Перемещение.Разделитель = &ПустойКлючСвязи
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Иерархия
		|		ПО Перемещение.Номенклатура        = Иерархия.Номенклатура
		|		 И Перемещение.Характеристика      = Иерархия.Характеристика
		|		 И Перемещение.Назначение          = Иерархия.Назначение
		|		 И Перемещение.ЗаказНаПроизводство = Иерархия.ЗаказНаПроизводство
		|		 И Перемещение.КлючСвязиСтрокаСпецификации = Иерархия.КлючНоменклатура
		|		 И Иерархия.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|		 И Иерархия.Разделитель = &ПустойКлючСвязи
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ2
		|		ПО КэшНСИ2.Номенклатура        = Иерархия.Номенклатура
		|		 И КэшНСИ2.Характеристика      = Иерархия.Характеристика
		|		 И КэшНСИ2.Склад               = Иерархия.Склад
		|		 И КэшНСИ2.Назначение          = Иерархия.Назначение
		|		 И КэшНСИ2.ЗаказНаПроизводство = Иерархия.ЗаказНаПроизводство
		|		 И Иерархия.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
		|		 И Иерархия.Разделитель = &ПустойКлючСвязи
		|ГДЕ
		|	Движения.Номенклатура          = &Номенклатура
		|	И Движения.Характеристика      = &Характеристика
		|	И Движения.Склад               = &Склад
		|	И Движения.Назначение          = &Назначение
		|	И Движения.ЗаказНаПроизводство = &ЗаказНаПроизводство
		|	И Движения.КлючНоменклатура    = &КлючНоменклатура
		|";
		Запрос.УстановитьПараметр("Номенклатура",        Изделие.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",      Изделие.Характеристика);
		Запрос.УстановитьПараметр("Склад",               Изделие.Склад);
		Запрос.УстановитьПараметр("Назначение",          Изделие.Назначение);
		Запрос.УстановитьПараметр("ЗаказНаПроизводство", Изделие.ЗаказНаПроизводство);
		Запрос.УстановитьПараметр("КлючНоменклатура",    Изделие.КлючНоменклатура);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НайтиЦиклыВСвязяхСпецификаций(
				СвязиСпецификаций, Выборка.Спецификация, Выборка.СпецификацияРодитель, ОписаниеЦикла, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				
				Партия.БылиОшибки = Истина;
				Шаблон = НСтр("ru = 'Обнаружено зацикливание спецификаций: %1 \%2 %3';
								|en = 'Bill of materials looping is found: %1 \%2 %3'");
				ТекстСообщения = СтрШаблон(Шаблон, ОписаниеЦикла, СокрЛП(Выборка.Спецификация.Код), СокрЛП(Выборка.Спецификация.Наименование));
				Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
				ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
					ТекстСообщения);
				Прервать;
				
			Иначе
				
				Связь = СвязиСпецификаций.Получить(Выборка.Спецификация);
				Если Связь = Неопределено Тогда
					СвязиСпецификаций.Вставить(
						Выборка.Спецификация,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.СпецификацияРодитель));
				Иначе
					Если Связь.Найти(Выборка.СпецификацияРодитель) = Неопределено Тогда
						Связь.Добавить(Выборка.СпецификацияРодитель);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
				
			Запрос.УстановитьПараметр("Номенклатура",        Выборка.НоменклатураРодитель);
			Запрос.УстановитьПараметр("Характеристика",      Выборка.ХарактеристикаРодитель);
			Запрос.УстановитьПараметр("Склад",               Выборка.СкладРодитель);
			Запрос.УстановитьПараметр("Назначение",          Выборка.НазначениеРодитель);
			Запрос.УстановитьПараметр("ЗаказНаПроизводство", Выборка.ЗаказНаПроизводствоРодитель);
			Запрос.УстановитьПараметр("КлючНоменклатура",    Выборка.КлючНоменклатураРодитель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;

КонецФункции

Процедура НайтиЦиклыВСвязяхСпецификаций(СвязиСпецификаций, Спецификация, СпецификацияРодитель, ОписаниеЦикла, Отказ)
	
	Если Спецификация = СпецификацияРодитель Тогда
		Отказ = Истина;
	Иначе
		
		Связь = СвязиСпецификаций.Получить(СпецификацияРодитель);
		
		Если Связь = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для каждого Предшественник Из Связь Цикл
			
			Если Предшественник = Спецификация Тогда
				
				Отказ = Истина;
				ОписаниеЦикла = "" + СтрШаблон(НСтр("ru = '""%1 %2""';
													|en = '""%1 %2""'"), СокрЛП(Спецификация.Код), СокрЛП(Спецификация.Наименование));
			Иначе
				
				НайтиЦиклыВСвязяхСпецификаций(
					СвязиСпецификаций, Спецификация, Предшественник, ОписаниеЦикла, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОписаниеЦикла = ОписаниеЦикла + "\" + СтрШаблон(НСтр("ru = '""%1 %2""';
															|en = '""%1 %2""'"), СокрЛП(СпецификацияРодитель.Код), СокрЛП(СпецификацияРодитель.Наименование));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДвиженияПоРезультатуРазузлования(Хранилище, Партия, Изделия, КэшДанных, ДанныеСпецификаций, КлючиСвязи)
	
	Если Партия.РазмерПартии > 0 Или Партия.Строки.Количество() > 0 Тогда
		
		Изделие = Изделия[0];
		Уровень = Изделие.УровеньРодитель + 1;
		
		Кэш = Неопределено;
		
		ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
		
	#Область Кэш
		
		Если Изделие.ПовтИсп И НЕ Изделие.ПолныйРасчет Тогда
			
			ПараметрыОтбора = Новый Структура("Спецификация, ИдентификаторВерсииДанных", Изделие.Спецификация, Изделие.ИдентификаторВерсииДанных);
			
			КэшДвижений = КэшДанных.СтруктураЗаказа.НайтиСтроки(ПараметрыОтбора);
			Если КэшДвижений.ВГраница() <> -1 Тогда
				
				Кэш = Новый Структура();
				
				Кэш.Вставить("МатериалыИУслуги", Новый Массив());
				Кэш.Вставить("ПобочныеИзделия",  Новый Массив());
				Кэш.Вставить("Изделия",          Новый Массив());
			
				Для каждого Строка Из КэшДвижений Цикл
					Если Строка.ЭтоИзделие Тогда
						Кэш.Изделия.Добавить(Строка);
					КонецЕсли;
					Если Строка.ЭтоПобочныйВыпуск Тогда
						Кэш.ПобочныеИзделия.Добавить(Строка);
					КонецЕсли;
					Если Строка.ЭтоМатериал Тогда
						Кэш.МатериалыИУслуги.Добавить(Строка);
					КонецЕсли;
				КонецЦикла;
				
				Кэш.Вставить("Трудозатраты", КэшДанных.Трудозатраты.НайтиСтроки(ПараметрыОтбора));
			
				Если Кэш.Изделия.ВГраница() = -1 Тогда
					Кэш = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецОбласти
		
		Если Кэш <> Неопределено Тогда
		
	#Область Изделия
			
			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
		
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("ГруппаИзделий",         Изделие.ГруппаИзделий);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Этап",                  Кэш.Изделия[0].Этап);
			КолонкиПоЗначению.Вставить("Подразделение",         Кэш.Изделия[0].Подразделение);
			КолонкиПоЗначению.Вставить("ДлительностьДоВыпуска", Изделие.ДлительностьДоВыпускаРодитель);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", Изделие.ИдентификаторВерсииДанных);
			
			Для каждого Строка Из Изделия Цикл
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Склад,Назначение,НазначениеСтруктуры");
				
				НоваяСтрока.КлючНоменклатура = Строка.КлючНоменклатура;
				
				НоваяСтрока.Запланировано = Строка.Требуется;
				
				Если Строка.ЭтоПолуфабрикат Тогда
					НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката;
				Иначе
					НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции;
				КонецЕсли;
				
				НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииЗапуска;
				
			КонецЦикла;
			
			#КонецОбласти
	
	#Область ПобочныйВыпуск
	
			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
	
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("ЗаказНаПоступление",    Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Назначение",            ПустоеНазначение); // приведение типа по всем измерениям
			КолонкиПоЗначению.Вставить("НазначениеСтруктуры",   ПустоеНазначение);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", Изделие.ИдентификаторВерсииДанных);
			
			Для каждого Строка Из Кэш.ПобочныеИзделия Цикл
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Склад,Этап,Подразделение");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск;
				
				НоваяСтрока.Запланировано = Партия.РазмерПартии * Строка.КоличествоНаЕдиницуПартииЗапуска / Изделие.КоличествоНаЕдиницуПартииЗапуска;;
				
				НоваяСтрока.ДлительностьДоВыпуска = Изделие.ДлительностьДоВыпускаРодитель + (Строка.ДлительностьДоВыпуска - Кэш.Изделия[0].ДлительностьДоВыпуска);
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязиСтрокаСпецификации;
				НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииЗапуска;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "СтруктураЗаказа", "КлючНоменклатура", КлючиСвязи); // "00000000-0000-0000-0000-000000000000"
				
			КонецЦикла;
	
	#КонецОбласти
	
	#Область Материалы
	
			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
			
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Назначение",            ПустоеНазначение); // приведение типа по всем измерениям
			КолонкиПоЗначению.Вставить("НазначениеСтруктуры",   Изделие.НазначениеСтруктуры);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", Изделие.ИдентификаторВерсииДанных);
			
			Для каждого Строка Из Кэш.МатериалыИУслуги Цикл
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Склад,Этап,Подразделение");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление;
				
				Если Строка.Обособленно Тогда
					НоваяСтрока.Назначение = Изделие.НазначениеСтруктуры;
				КонецЕсли;
				
				НоваяСтрока.Требуется = Партия.РазмерПартии * Строка.КоличествоНаЕдиницуПартииЗапуска / Изделие.КоличествоНаЕдиницуПартииЗапуска;
				
				НоваяСтрока.СпецификацияПолуфабриката = Строка.СпецификацияПолуфабриката;
				
				НоваяСтрока.ДлительностьДоВыпуска = Изделие.ДлительностьДоВыпускаРодитель + (Строка.ДлительностьДоВыпуска - Кэш.Изделия[0].ДлительностьДоВыпуска);
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязиСтрокаСпецификации;
				НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииЗапуска;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "СтруктураЗаказа", "КлючНоменклатура", КлючиСвязи);
				
			КонецЦикла;
				
	#КонецОбласти
	
	#Область Трудозатраты
	
			ДвиженияТрудозатраты = Хранилище.ТрудозатратыСтруктурыЗаказа; // ТаблицаЗначений
	
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("КлючПартия",          Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",        Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство", Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", Изделие.ИдентификаторВерсииДанных);
			
			Для каждого Строка Из Кэш.Трудозатраты Цикл
			
				НоваяСтрока = ДвиженияТрудозатраты.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "ВидРабот,Этап,Подразделение");
				
				НоваяСтрока.Количество = Партия.РазмерПартии * Строка.КоличествоНаЕдиницуПартииЗапуска / Изделие.КоличествоНаЕдиницуПартииЗапуска;
				
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязиСтрокаСпецификации;
				НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииЗапуска;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "ТрудозатратыСтруктурыЗаказа", "КлючВидРабот", КлючиСвязи);
				
			КонецЦикла;
			
	#КонецОбласти
	
		Иначе
			
			ДанныеСпецификации = ДанныеСпецификации(Изделие, Партия.РазмерПартии, ДанныеСпецификаций);
			
	#Область Изделия
		
			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
			
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("ГруппаИзделий",         Изделие.ГруппаИзделий);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Этап",                  ДанныеСпецификации.ВыходныеИзделия[0].Этап);
			КолонкиПоЗначению.Вставить("Подразделение",         ДанныеСпецификации.ВыходныеИзделия[0].ПодразделениеЭтапа);
			КолонкиПоЗначению.Вставить("ДлительностьДоВыпуска", Изделие.ДлительностьДоВыпускаРодитель);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", ?(Партия.ПроизводствоИзДавальческогоСырья, "", ДанныеСпецификации.ИдентификаторВерсииДанных));
			
			Для каждого Строка Из Изделия Цикл
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Склад,Назначение,НазначениеСтруктуры");
				
				НоваяСтрока.КлючНоменклатура = Строка.КлючНоменклатура;
				
				Если Не ЗначениеЗаполнено(Партия.КорректировкаСтрок) Тогда
					НоваяСтрока.Запланировано = Строка.Требуется;
				Иначе
					НоваяСтрока.Запланировано = Строка.Требуется - ПривестиЗначение(ТипЧисло(), Партия.КорректировкаСтрок[Строка.КлючНоменклатура]);
				КонецЕсли;
				
				Если Строка.ЭтоПолуфабрикат Тогда
					НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката;
				Иначе
					НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции;
				КонецЕсли;
				
				НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииЗапуска;
				
			КонецЦикла;
	#КонецОбласти
	
	#Область ПобочныйВыпуск
	
			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
		
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("ЗаказНаПоступление",    Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Назначение",            ПустоеНазначение); // приведение типа по всем измерениям
			КолонкиПоЗначению.Вставить("НазначениеСтруктуры",   ПустоеНазначение);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", ?(Партия.ПроизводствоИзДавальческогоСырья, "", ДанныеСпецификации.ИдентификаторВерсииДанных));
		
			ПобочныеИзделия = ПобочныеИзделия(Партия, ДанныеСпецификации);
			
			Для каждого Строка Из ПобочныеИзделия Цикл
				
				Если Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве
					ИЛИ Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве Тогда
					Продолжить;
				КонецЕсли;
				
				Если (Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
						И Не ЗначениеЗаполнено(Строка.Номенклатура)
					ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
						И Не ЗначениеЗаполнено(Строка.Характеристика)) Тогда
					Партия.БылиОшибки = Истина;
					Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 ""%2"" в строке №%3 списка ""Побочные изделия"" не удалось выполнить автовыбор номенклатуры по причине: %4.';
									|en = 'Cannot autoselect an item while exploding the product by the %1 ""%2"" bill of materials in line No.%3 of the ""By-products"" list due to: %4.'");
					ТекстСообщения = СтрШаблон(Шаблон, ДанныеСпецификации.Код, ДанныеСпецификации.СпецификацияПредставление, Строка.НомерСтроки, Строка.СведенияАвтовыбора);
					Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
					ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
						ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				Если Строка.Склад.Пустая()
					И Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
					Партия.БылиОшибки = Истина;
					Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 ""%2"" в строке №%3 списка ""Побочные изделия"" не удалось подобрать склад.';
									|en = 'Cannot pick a warehouse while exploding the product by the %1 ""%2"" bill of materials in line No.%3 of the ""By-products"" list.'");
					ТекстСообщения = СтрШаблон(Шаблон, ДанныеСпецификации.Код, ДанныеСпецификации.СпецификацияПредставление, Строка.НомерСтроки);
					Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
					ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
						ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Этап");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск;
				
				НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
				
				Если Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
					НоваяСтрока.Склад = Строка.Склад;
				Иначе
					НоваяСтрока.Склад = Строка.ПодразделениеЭтапа;
				КонецЕсли;
				
				НоваяСтрока.Запланировано = Строка.Количество;
				
				НоваяСтрока.ДлительностьДоВыпуска = Строка.ДлительностьДоВыпуска + Изделие.ДлительностьДоВыпускаРодитель;
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязи; // КлючСвязиСтрокаСпецификации
				
				Если Строка.АлгоритмРасчетаКоличества <> "" И ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок > 0 Тогда
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.Количество
																		* ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска / ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок;
				Иначе
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска * Строка.ДанныеУпаковки.Числитель / Строка.ДанныеУпаковки.Знаменатель;
				КонецЕсли;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "СтруктураЗаказа", "КлючНоменклатура", КлючиСвязи); // "00000000-0000-0000-0000-000000000000"
				
			КонецЦикла;
			
	#КонецОбласти
	
	#Область Материалы

			ДвиженияНоменклатура = Хранилище.СтруктураЗаказа; // ТаблицаЗначений
			
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("Уровень",               Уровень);
			КолонкиПоЗначению.Вставить("КлючПартия",            Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",          Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство",   Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("Назначение",            ПустоеНазначение); // приведение типа по всем измерениям
			КолонкиПоЗначению.Вставить("НазначениеСтруктуры",   Изделие.НазначениеСтруктуры);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", ?(Партия.ПроизводствоИзДавальческогоСырья, "", ДанныеСпецификации.ИдентификаторВерсииДанных));
		
			Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
				
				Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Набор
					И Не ЗначениеЗаполнено(Строка.Номенклатура)
					И Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве Тогда
					Партия.БылиОшибки = Истина;
					Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 ""%2"" в строке №%3 списка ""Материалы и работы"": %4';
									|en = 'While exploding the product by the %1 ""%2"" bill of materials in line No.%3 of the ""Materials and works"" list: %4'");
					ТекстСообщения = СтрШаблон(Шаблон, ДанныеСпецификации.Код, ДанныеСпецификации.СпецификацияПредставление, Строка.НомерСтроки, Строка.СведенияАвтовыбора);
					Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
					ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
						ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				Если Строка.СпособАвтовыбораНоменклатуры = Перечисления.СпособыАвтовыбораНоменклатуры.УточняетсяПриПроизводстве
					ИЛИ Строка.СпособАвтовыбораХарактеристики = Перечисления.СпособыАвтовыбораХарактеристики.УточняетсяПриПроизводстве
					ИЛИ Строка.ПроизводитсяВПроцессе И Строка.СпособПолученияМатериала = Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе Тогда
					Продолжить;
				КонецЕсли;
				Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа И НЕ Строка.Обособленно Тогда
					Продолжить; // необособленная работа по сути услуга, ее количество неограничено и нет задачи обеспечения
				КонецЕсли;
				
				Если (Строка.СпособАвтовыбораНоменклатуры <> Перечисления.СпособыАвтовыбораНоменклатуры.УказываетсяВНСИ
						И Не ЗначениеЗаполнено(Строка.Номенклатура)
					ИЛИ Строка.СпособАвтовыбораХарактеристики <> Перечисления.СпособыАвтовыбораХарактеристики.УказываетсяВНСИ
						И Не ЗначениеЗаполнено(Строка.Характеристика)) Тогда
					Партия.БылиОшибки = Истина;
					Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 ""%2"" в строке №%3 списка ""Материалы и работы"" не удалось выполнить автовыбор номенклатуры по причине: %4.';
									|en = 'Cannot autoselect an item while exploding the product by the %1 ""%2"" bill of materials in line No.%3 of the ""Materials and works"" list due to: %4.'");
					ТекстСообщения = СтрШаблон(Шаблон, ДанныеСпецификации.Код, ДанныеСпецификации.СпецификацияПредставление, Строка.НомерСтроки, Строка.СведенияАвтовыбора);
					Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
					ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
						ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				Если Строка.Склад.Пустая()
					И Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
					Партия.БылиОшибки = Истина;
					Шаблон = НСтр("ru = 'При разузловании изделия по спецификации %1 ""%2"" в строке №%3 списка ""Материалы и работы"" не удалось подобрать склад.';
									|en = 'Cannot pick the warehouse while exploding the product by the %1 ""%2"" bill of materials in line No.%3 of the ""Materials and works"" list.'");
					ТекстСообщения = СтрШаблон(Шаблон, ДанныеСпецификации.Код, ДанныеСпецификации.СпецификацияПредставление, Строка.НомерСтроки);
					Партия.Протокол = ?(ПустаяСтрока(Партия.Протокол), "" , Партия.Протокол + ";") + ТекстСообщения;
					ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,Изделие.ЗаказНаПроизводство,
						ТекстСообщения);
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ДвиженияНоменклатура.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Характеристика,Этап");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление;
				
				НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
				
				Если Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
					НоваяСтрока.Склад = Строка.Склад;
				Иначе
					НоваяСтрока.Склад = Строка.ПодразделениеЭтапа;
				КонецЕсли;
				
				Если Строка.Обособленно Или Строка.Запланировать И Партия.ПроизводствоИзДавальческогоСырья Тогда
					НоваяСтрока.Назначение = Изделие.НазначениеСтруктуры;
				КонецЕсли;
				
				НоваяСтрока.Требуется = Строка.Количество;
				
				НоваяСтрока.СпецификацияПолуфабриката = ?(Строка.ПроизводитсяВПроцессе, Строка.Спецификация, Справочники.РесурсныеСпецификации.ПустаяСсылка());
				
				НоваяСтрока.ДлительностьДоВыпуска = Строка.ДлительностьДоВыпуска + Изделие.ДлительностьДоВыпускаРодитель;
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязи; // КлючСвязиСтрокаСпецификации
				
				Если Строка.АлгоритмРасчетаКоличества <> "" И ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок > 0 Тогда
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.Количество
																		* ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска / ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок;
				Иначе
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска * Строка.ДанныеУпаковки.Числитель / Строка.ДанныеУпаковки.Знаменатель;
				КонецЕсли;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "СтруктураЗаказа", "КлючНоменклатура", КлючиСвязи);
				
			КонецЦикла;
			
	#КонецОбласти
	
	#Область Трудозатраты
	
			ДвиженияТрудозатраты = Хранилище.ТрудозатратыСтруктурыЗаказа; // ТаблицаЗначений
		
			КолонкиПоЗначению = Новый Структура();
			КолонкиПоЗначению.Вставить("КлючПартия",          Партия.КлючПартия);
			КолонкиПоЗначению.Вставить("Спецификация",        Изделие.Спецификация);
			КолонкиПоЗначению.Вставить("ЗаказНаПроизводство", Изделие.ЗаказНаПроизводство);
			КолонкиПоЗначению.Вставить("ИдентификаторВерсииДанных", ?(Партия.ПроизводствоИзДавальческогоСырья, "", ДанныеСпецификации.ИдентификаторВерсииДанных));
			
			Для каждого Строка Из ДанныеСпецификации.Трудозатраты Цикл
			
				НоваяСтрока = ДвиженияТрудозатраты.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, КолонкиПоЗначению);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "ВидРабот,Этап");
				
				НоваяСтрока.Подразделение = Строка.ПодразделениеЭтапа;
				
				НоваяСтрока.Количество = Строка.Количество;
				
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Строка.КлючСвязи; // КлючСвязиСтрокаСпецификации
				
				Если Строка.АлгоритмРасчетаКоличества <> "" И ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок > 0 Тогда
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.Количество
																		* ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска / ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковок;
				Иначе
					НоваяСтрока.КоличествоНаЕдиницуПартииЗапуска = Строка.КоличествоНаЕдиницуПартииВыпуска;
				КонецЕсли;
				
				УстановитьКлючСвязиСтроки(НоваяСтрока, "ТрудозатратыСтруктурыЗаказа", "КлючВидРабот", КлючиСвязи);
				
			КонецЦикла;
			
	#КонецОбласти
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если Партия.БылиОшибки Тогда
		ЗаполнитьРеквизитыВДвиженияхПоПараметрамОтбора(Хранилище, Новый Структура("КлючПартия", Партия.КлючПартия), Новый Структура("ИдентификаторВерсииДанных", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")));
	КонецЕсли;

КонецПроцедуры

Функция НуженДопРасчетПобочногоВыпуска(Партия, ДанныеСпецификации)
	
	НуженДопРасчетПобочногоВыпуска = Ложь;
	
	Если ДанныеСпецификации.ВыходныеИзделия.Количество() > 1 Или Партия.РазмерПартии <> ДанныеСпецификации.ОсновноеИзделие.Количество Тогда
		НуженДопРасчетПобочногоВыпуска = Истина;
	КонецЕсли;
	
	Если ДанныеСпецификации.ВозвратныеОтходы.Количество() > 0 И НайтиСтрокуПоЗначениюКолонкиВМассивеСтрок(Партия.Строки, "ПобочныйВыпуск", Истина) <> Неопределено Тогда
		НуженДопРасчетПобочногоВыпуска = Истина;
	КонецЕсли;
	
	Возврат НуженДопРасчетПобочногоВыпуска;

КонецФункции

Функция ПобочныеИзделия(Партия, ДанныеСпецификации)
	
	Изделия = Партия.Строки;
	
	НуженДопРасчетПобочногоВыпуска = НуженДопРасчетПобочногоВыпуска(Партия, ДанныеСпецификации);
	
	Если НЕ
		НуженДопРасчетПобочногоВыпуска Тогда
		
		ПобочныеИзделия = ДанныеСпецификации.ВозвратныеОтходы;
		
	Иначе
		
		ПобочныеИзделия = ДанныеСпецификации.ВозвратныеОтходы.СкопироватьКолонки();
		
		Кэш = ПобочныеИзделия.СкопироватьКолонки("Номенклатура,Характеристика,Количество,КоличествоУпаковокНаЕдиницуПартииВыпуска"); // ТаблицаЗначений
		Кэш.Колонки.Добавить("Строка");
		
		Для каждого Строка Из ДанныеСпецификации.ВыходныеИзделия Цикл
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Строка = Строка;
		КонецЦикла;
		
		Для каждого Строка Из ДанныеСпецификации.ВозвратныеОтходы Цикл
			НоваяСтрока = Кэш.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Строка = Строка;
		КонецЦикла;
		
		Кэш.Индексы.Добавить("Номенклатура,Характеристика");
		
		СтруктураОтбора = Новый Структура("Номенклатура,Характеристика");
		
		Для каждого Изделие Из Изделия Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Изделие);
			
			Если Не ЗначениеЗаполнено(Партия.КорректировкаСтрок) Тогда
				Требуется = Изделие.Требуется;
			Иначе
				Требуется = Изделие.Требуется - ПривестиЗначение(ТипЧисло(), Партия.КорректировкаСтрок[Изделие.КлючНоменклатура]);
			КонецЕсли;
			
			Строки = Кэш.НайтиСтроки(СтруктураОтбора);
			
			Для каждого Строка Из Строки Цикл
				Распределено = Мин(Требуется, Строка.Количество);
				Строка.Количество = Строка.Количество - Распределено;
				Требуется = Требуется - Распределено;
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Строка Из Кэш Цикл
			
			Если Строка.Количество > 0 Или Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска > 0 И Строка.Строка.Владелец() = ДанныеСпецификации.ВозвратныеОтходы Тогда
				НоваяСтрока = ПобочныеИзделия.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка.Строка);
				НоваяСтрока.Количество = Строка.Количество;
				НоваяСтрока.КоличествоУпаковокНаЕдиницуПартииВыпуска = Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПобочныеИзделия;
	
КонецФункции

// Рассчитывает изменения и добавляет сторно записи в таблицу движений
// 
// Параметры:
// 	Движения - ТаблицаЗначений - движения
Процедура РассчитатьИзмененияИДобавитьСторноДвиженияВТаблицуСтруктураЗаказа(Движения)
	
	СтруктураМетаданных = РегистрыСведений.СтруктураЗаказа.СтруктураМетаданных();
	
	ПервичныеСтроки = Движения.НайтиСтроки(Новый Структура("РассчитыватьИзменения", Истина));
	
	Дельты = Движения.СкопироватьКолонки(СтруктураМетаданных.ИзмеренияСтрока + ",Требуется,Запланировано");
	
	Дельты.Колонки.Добавить("НомерСтрокиДвиженияДоИзменения", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Дельты.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Для Индекс = 0 По ПервичныеСтроки.ВГраница() Цикл
		
		Строка = ПервичныеСтроки[Индекс];
		
		НоваяСтрока = Дельты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если Строка.ДополнительнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ДвиженияДоИзменения Тогда
			НоваяСтрока.НомерСтрокиДвиженияДоИзменения = Индекс + 1;
		Иначе
			НоваяСтрока.НомерСтроки                    = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Дельты.Свернуть(СтруктураМетаданных.ИзмеренияСтрока, "Требуется, Запланировано" + ", НомерСтроки, НомерСтрокиДвиженияДоИзменения");
	
	Для каждого Дельта Из Дельты Цикл
		
		Если (Дельта.Требуется = 0 И Дельта.Запланировано = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ДвиженияДоИзменения = НЕ Дельта.Требуется >= 0 Или НЕ Дельта.Запланировано >= 0;
		
		НоваяСтрока = Движения.Добавить();
		
		ИндексСтроки = ?(ДвиженияДоИзменения, Дельта.НомерСтрокиДвиженияДоИзменения, Дельта.НомерСтроки) - 1;
		ПервичнаяСтрока = ПервичныеСтроки[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПервичнаяСтрока, СтруктураМетаданных.РеквизитыСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Дельта);
		
		Если ДвиженияДоИзменения ИЛИ Дельта.НомерСтрокиДвиженияДоИзменения <> 0 Тогда
		
			НоваяСтрока.ДополнительнаяЗапись = Истина;
			НоваяСтрока.Разделитель = Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиИзТаблицы(Движения, ПервичныеСтроки);
	
КонецПроцедуры

// Рассчитывает изменения и добавляет сторно записи в таблицу движений
// 
// Параметры:
// 	Движения - ТаблицаЗначений - движения
Процедура РассчитатьИзмененияИДобавитьСторноДвиженияВТаблицуТрудозатратыСтруктурыЗаказа(Движения)
	
	СтруктураМетаданных = РегистрыСведений.ТрудозатратыСтруктурыЗаказа.СтруктураМетаданных();
	
	ПервичныеСтроки = Движения.НайтиСтроки(Новый Структура("РассчитыватьИзменения", Истина));
	
	Дельты = Движения.СкопироватьКолонки(СтруктураМетаданных.ИзмеренияСтрока + ",Количество");
	
	Дельты.Колонки.Добавить("НомерСтрокиДвиженияДоИзменения", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Дельты.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Для Индекс = 0 По ПервичныеСтроки.ВГраница() Цикл
		
		Строка = ПервичныеСтроки[Индекс];
		
		НоваяСтрока = Дельты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если Строка.ДополнительнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ДвиженияДоИзменения Тогда
			НоваяСтрока.НомерСтрокиДвиженияДоИзменения = Индекс + 1;
		Иначе
			НоваяСтрока.НомерСтроки                    = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Дельты.Свернуть(СтруктураМетаданных.ИзмеренияСтрока, "Количество" + ", НомерСтроки, НомерСтрокиДвиженияДоИзменения");
	
	Для каждого Дельта Из Дельты Цикл
		
		Если Дельта.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДвиженияДоИзменения = НЕ Дельта.Количество >= 0;
		
		НоваяСтрока = Движения.Добавить();
		
		ИндексСтроки = ?(ДвиженияДоИзменения, Дельта.НомерСтрокиДвиженияДоИзменения, Дельта.НомерСтроки) - 1;
		ПервичнаяСтрока = ПервичныеСтроки[ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПервичнаяСтрока, СтруктураМетаданных.РеквизитыСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Дельта);
		
		Если ДвиженияДоИзменения ИЛИ Дельта.НомерСтрокиДвиженияДоИзменения <> 0 Тогда
		
			НоваяСтрока.ДополнительнаяЗапись = Истина;
			НоваяСтрока.Разделитель = Новый УникальныйИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиИзТаблицы(Движения, ПервичныеСтроки);
	
КонецПроцедуры

Функция ПорцииЗаписи()
	
	Порции = Новый ТаблицаЗначений();
	
	Порции.Колонки.Добавить("НомерПорции", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
	
	Порции.Колонки.Добавить("Замещать", Новый ОписаниеТипов("Булево"));
	Порции.Колонки.Добавить("Доступно", Новый ОписаниеТипов("Булево"));
	
	Порции.Колонки.Добавить("КоличествоСтрок", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	Возврат Порции;
	
КонецФункции

Функция ПорцияЗаписи(ПорцииЗаписи, Замещать, Найти = Ложь, КоличествоСтрок = 1, ПорцияЗаписи = Неопределено)
	
	Если Найти
		И ПорцияЗаписи = Неопределено Тогда
		
		КоличествоСтрокВНабореЗаписей = КоличествоСтрокВНабореЗаписей();
		
		НайденныеСтроки = ПорцииЗаписи.НайтиСтроки(Новый Структура("Доступно, Замещать", Найти, Замещать));
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если КоличествоСтрок < ( КоличествоСтрокВНабореЗаписей - НайденнаяСтрока.КоличествоСтрок ) Тогда
				
				ПорцияЗаписи = НайденнаяСтрока;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПорцияЗаписи = Неопределено Тогда
		
		ПорцияЗаписи = ПорцииЗаписи.Добавить();
		
		ПорцияЗаписи.Замещать    = Замещать;
		ПорцияЗаписи.НомерПорции = ПорцииЗаписи.Количество();
		
	КонецЕсли;
	
	Возврат ПорцияЗаписи;
	
КонецФункции

Процедура УстановитьНомерПорцииВКоллекцииДвижений(Коллекция, НомерПорции)
	
	Для каждого ТекущаяСтрока Из Коллекция Цикл ТекущаяСтрока.НомерПорции = НомерПорции;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиВТаблицеПоПараметрамОтбора(Таблица, ПараметрыОтбора, КолонкиПоЗначению)
	
	Если ПараметрыОтбора = Неопределено Тогда
	
		Для каждого ТекущаяСтрока Из Таблица Цикл ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КолонкиПоЗначению);
		КонецЦикла;
	
	Иначе
		
		Для каждого ТекущаяСтрока Из Таблица.НайтиСтроки(ПараметрыОтбора) Цикл ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КолонкиПоЗначению);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВДвиженияхПоПараметрамОтбора(Хранилище, ПараметрыОтбора, КолонкиПоЗначению)
	
	Для каждого Данные Из Хранилище Цикл
		ЗаполнитьКолонкиВТаблицеПоПараметрамОтбора(Данные.Значение, ПараметрыОтбора, КолонкиПоЗначению);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКлючСвязиСтроки(Строка, ИмяТЧ, ИмяПоля, КлючиСвязи)
	
	ЗаполнитьЗначенияСвойств(КлючиСвязи.Ключ, Строка);
	
	НайденныеСтроки = КлючиСвязи.Кэш.НайтиСтроки(КлючиСвязи.Ключ);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		Строка[ИмяПоля] = НайденныеСтроки[0].КлючСвязи;
		
	Иначе
		
		Строка[ИмяПоля] = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ГруппаИзделийКонтрольнаяСумма(Данные) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	ХешированиеДанных.Добавить("" + Данные.Спецификация.УникальныйИдентификатор());
	ХешированиеДанных.Добавить("" + Данные.ЗаказНаПроизводство.УникальныйИдентификатор());
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

Функция ПустаяГруппаИзделий()
	
	Возврат "                                ";
	
КонецФункции

Функция ПорцияРасчетаГруппыИзделий(ПорцияРасчета)
	
	КоличествоСтрок = ПорцияРасчета.Количество();
	
	ГруппыИзделий = Новый Массив(КоличествоСтрок);
	
	Для Индекс = 0 По КоличествоСтрок - 1 Цикл
		ГруппыИзделий[Индекс] = ГруппаИзделийКонтрольнаяСумма(ПорцияРасчета[Индекс]);
	КонецЦикла;
	
	Возврат ГруппыИзделий;
	
КонецФункции

#КонецОбласти

#Область РаспределениеЗапасов

Процедура ВыполнитьРаспределениеЗапасов(ПараметрыДействия, АдресРезультата) Экспорт
	
	КлючеваяОперация = "СтруктураЗаказа.РаспределениеЗапасов";
	НачалоРасчета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазмерПорции = ПараметрыДействия.ПорцияРасчета.Количество();
	ЗамерВремени = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	ВыполнитьРаспределениеЗапасовВнутриЗамераВремени(ПараметрыДействия);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерВремени, РазмерПорции);
	РезультатРасчета = Новый Структура("Операция, РазмерПорции, Длительность", КлючеваяОперация, РазмерПорции, ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоРасчета);
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресРезультата);
	
КонецПроцедуры

Процедура ВыполнитьРаспределениеЗапасовВнутриЗамераВремени(ПараметрыДействия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	СостояниеЗапасов = Новый Массив();
	СостояниеЗапасов.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	СостояниеЗапасов.Добавить(Перечисления.РаспределениеЗапасовСостояния.ОжидаемоеПоступление);
	СостояниеЗапасов.Добавить(Перечисления.РаспределениеЗапасовСостояния.ПоступлениеНеПодтвержденное);
	
	ПараметрыРасчета = ПараметрыДействия.ПараметрыРасчета;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГраницаПериода", ГраницаПериода());
	Запрос.УстановитьПараметр("ПорцияРасчета", ПараметрыДействия.ПорцияРасчета);
	Запрос.УстановитьПараметр("СостояниеЗапасов", СостояниеЗапасов);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад          КАК Склад,
	|	Товары.Назначение     КАК Назначение
	|
	|ПОМЕСТИТЬ ПорцияРасчета
	|ИЗ
	|	&ПорцияРасчета КАК Товары
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад          КАК Склад,
	|	Товары.Назначение     КАК Назначение,
	|	Товары.Обособленно    КАК Обособленно
	|
	|ПОМЕСТИТЬ Товары
	|ИЗ (
	|
	|ВЫБРАТЬ
	|
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад          КАК Склад,
	|
	|	ТоварыНоменклатура.ОбособленнаяЗакупкаПродажа КАК Обособленно,
	|
	|	ВЫБОР
	|		КОГДА ТоварыНоменклатура.ОбособленнаяЗакупкаПродажа
	|		  Или Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА Товары.Назначение
	|		КОГДА ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ПорцияРасчета КАК ДД
	|			ГДЕ
	|				ДД.Номенклатура = Товары.Номенклатура
	|				И ДД.Характеристика = Товары.Характеристика
	|				И ДД.Склад = Товары.Склад
	|				И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.РаспределениеЗапасов КАК ДД
	|			ГДЕ
	|				ДД.Состояние В (&СостояниеЗапасов)
	|				И ДД.Номенклатура = Товары.Номенклатура
	|				И ДД.Характеристика = Товары.Характеристика
	|				И ДД.Склад = Товары.Склад
	|				И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				И ДД.Излишек > 0)
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СтруктураЗаказа КАК ДД
	|			ГДЕ
	|				ДД.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск)
	|				И ДД.Номенклатура = Товары.Номенклатура
	|				И ДД.Характеристика = Товары.Характеристика
	|				И ДД.Склад = Товары.Склад
	|				И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Назначение
	|	КОНЕЦ КАК Назначение
	|
	|ИЗ
	|	ПорцияРасчета КАК Товары
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТоварыНоменклатура
	|		ПО Товары.Номенклатура = ТоварыНоменклатура.Ссылка
	|
	|) КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|ВЫБРАТЬ
	|
	|	График.Номенклатура     КАК Номенклатура,
	|	График.Характеристика   КАК Характеристика,
	|	График.Склад            КАК Склад,
	|	График.Назначение       КАК Назначение,
	|
	|	График.Состояние КАК Состояние,
	|
	|	График.ЗаказНаПоступление КАК ЗаказНаПоступление,
	|	График.ДатаПоступления    КАК ДатаПоступления,
	|
	|	График.Излишек КАК Доступно
	|
	|ПОМЕСТИТЬ График
	|ИЗ
	|	Товары КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК График
	|	ПО Товары.Номенклатура   = График.Номенклатура
	|	 И Товары.Характеристика = График.Характеристика
	|	 И Товары.Склад          = График.Склад
	|	 И (Товары.Назначение = График.Назначение
	|		Или Не Товары.Обособленно И Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|
	|ГДЕ
	|	График.Излишек > 0
	|		И График.Состояние В (&СостояниеЗапасов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение
	|;
	|
	|ВЫБРАТЬ
	|
	|	АвтоНомерЗаписи() КАК ИндексСтроки,
	|
	|	Движения.Номенклатура        КАК Номенклатура,
	|	Движения.Характеристика      КАК Характеристика,
	|	Движения.Склад               КАК Склад,
	|	Движения.Назначение          КАК Назначение,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
	|
	|	СУММА(Движения.Требуется) КАК Требуется,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.ВидСтроки <> ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск) ТОГДА
	|				Движения.Запланировано
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК Запланировано,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.ВидСтроки  = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск) ТОГДА
	|				Движения.Запланировано
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ) КАК ПобочныйВыпуск,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано)
	|					И Движения.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
	|				ТОГДА Движения.РаспределеноИзЗапасов + Движения.РаспределеноИзЗапасовОбособленно
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РаспределеноИзНаличияНаСкладе,
	|	СУММА(ВЫБОР
	|			КОГДА Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции)
	|				ТОГДА Движения.РаспределеноИзПартий + Движения.РаспределеноИзПартийОбособленно
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РаспределеноИзПартийНаПродукцию,
	|
	|	МАКСИМУМ(Товары.Назначение) КАК НазначениеГруппировка,
	|
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЭтоПродукция,
	|
	|	МИНИМУМ(Движения.ЗаказНаПоступление) КАК ЗаказНаПоступление,
	|	МИНИМУМ(Движения.ДатаПоступления)    КАК ДатаПоступления,
	|	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки НЕ В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			ТОГДА Движения.КлючПартия
	|	КОНЕЦ) КАК КлючПартия,
	|	
	|	МИНИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки НЕ В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			ТОГДА Движения.Этап
	|	КОНЕЦ) КАК Этап,
	|
	|	МИНИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки НЕ В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПродукции),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|			ТОГДА Движения.Подразделение
	|	КОНЕЦ) КАК Подразделение,
	|
	|	МАКСИМУМ(Движения.НазначениеСтруктуры) КАК НазначениеСтруктуры,
	|	МАКСИМУМ(Движения.КлючСвязиПеремещение) КАК КлючСвязиПеремещение,
	|
	|	ISNULL(МИНИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПобочныйВыпуск))
	|			ТОГДА Движения.ДлительностьДоВыпуска
	|	КОНЕЦ), 0) КАК ДлительностьДоВыпуска,
	|
	|	МАКСИМУМ(Движения.СпецификацияПолуфабриката) КАК СпецификацияПолуфабриката
	|
	|ПОМЕСТИТЬ НоменклатурныйПлан
	|
	|ИЗ
	|	Товары КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Товары.Номенклатура   = Движения.Номенклатура
	|	 И Товары.Характеристика = Движения.Характеристика
	|	 И Товары.Склад          = Движения.Склад
	|	 И (Товары.Назначение    = Движения.Назначение
	|		Или Не Товары.Обособленно И Товары.Назначение В (Движения.НазначениеСтруктуры, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение,
	|	Движения.ЗаказНаПроизводство, Движения.КлючНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаПроизводство, КлючНоменклатура, КлючПартия
	|;
	|
	|УНИЧТОЖИТЬ ПорцияРасчета
	|;
	|УНИЧТОЖИТЬ Товары
	|;
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	План.ЗаказНаПроизводство КАК Ссылка
	|ПОМЕСТИТЬ ВсеЗаказы
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|;"
	 + СтруктураЗаказаСлужебный.ТекстЗапросаВременнаяТаблицаОчередьЗаказов("ВсеЗаказы", "Очередь")
	 + "ВЫБРАТЬ
	|
	|	График.Номенклатура       КАК Номенклатура,
	|	График.Характеристика     КАК Характеристика,
	|	График.Склад              КАК Склад,
	|	График.Назначение         КАК Назначение,
	|
	|	График.ЗаказНаПоступление КАК ЗаказНаПоступление,
	|	График.ДатаПоступления    КАК ДатаПоступления,
	|
	|	ВЫБОР
	|		КОГДА График.ДатаПоступления = ДАТАВРЕМЯ(1,1,1) И График.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО ТОГДА
	|			1
	|		КОГДА График.ДатаПоступления <> ДАТАВРЕМЯ(1,1,1) И График.ЗаказНаПоступление <> НЕОПРЕДЕЛЕНО ТОГДА
	|			2
	|		ИНАЧЕ
	|			3
	|	КОНЕЦ КАК ТипЗапаса,
	|	
	|	График.Доступно КАК Доступно,
	|
	|	-1 КАК НомерОчереди,
	|	-1 КАК ПорядокНормативногоГрафика
	|	
	|ИЗ
	|	График КАК График
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	План.Номенклатура       КАК Номенклатура,
	|	План.Характеристика     КАК Характеристика,
	|	План.Склад              КАК Склад,
	|	План.Назначение         КАК Назначение,
	|
	|	План.ЗаказНаПоступление КАК ЗаказНаПоступление,
	|	План.ДатаПоступления    КАК ДатаПоступления,
	|
	|	5 КАК ТипЗапаса,
	|	
	|	План.ПобочныйВыпуск КАК Доступно,
	|
	|	ISNULL(Очередь.НомерОчереди, 0)        КАК НомерОчереди,
	|	ISNULL(-План.ДлительностьДоВыпуска, 0) КАК ПорядокНормативногоГрафика
	|	
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Очередь КАК Очередь
	|		ПО Очередь.Ссылка = План.ЗаказНаПроизводство
	|	
	|ГДЕ
	|	План.ПобочныйВыпуск > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение, ТипЗапаса, НомерОчереди, ПорядокНормативногоГрафика, ДатаПоступления, ЗаказНаПоступление
	|;
	|
	|ВЫБРАТЬ
	|
	|	План.ИндексСтроки КАК ИндексСтроки,
	|
	|	План.Номенклатура   КАК Номенклатура,
	|	План.Характеристика КАК Характеристика,
	|	План.Склад          КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА План.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			План.Назначение
	|		ИНАЧЕ
	|			План.НазначениеСтруктуры
	|	КОНЕЦ КАК Назначение,
	|	ВЫБОР
	|		КОГДА План.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК Обособленно,
	|
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	План.КлючПартия          КАК КлючПартия,
	|	План.КлючНоменклатура    КАК КлючНоменклатура,
	|
	|	План.Требуется КАК Требуется,
	|	План.Запланировано КАК Запланировано,
	|
	|	ISNULL(Очередь.НомерОчереди, 0)        КАК НомерОчереди,
	|	ISNULL(-План.ДлительностьДоВыпуска, 0) КАК ПорядокНормативногоГрафика
	|	
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Очередь КАК Очередь
	|		ПО Очередь.Ссылка = План.ЗаказНаПроизводство
	|
	|ГДЕ
	|	План.Требуется > 0 И НЕ План.ЭтоПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура, Характеристика, Склад,
	|	  План.НазначениеГруппировка УБЫВ, НомерОчереди, Назначение УБЫВ, Обособленно УБЫВ, ПорядокНормативногоГрафика,
	|	  ВЫБОР
	|			КОГДА План.Этап ССЫЛКА Справочник.ЭтапыПроизводства ТОГДА
	|				2
	|			ИНАЧЕ
	|				1
	|		КОНЕЦ, Требуется, КлючПартия, КлючНоменклатура
	|;
	|УНИЧТОЖИТЬ ВсеЗаказы; УНИЧТОЖИТЬ Очередь;
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();

	РезультатРаспределения = Новый ТаблицаЗначений();
	РезультатРаспределения.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
	РезультатРаспределения.Колонки.Добавить("Назначение", Метаданные.РегистрыСведений.СтруктураЗаказа.Измерения.Назначение.Тип);
	РезультатРаспределения.Колонки.Добавить("ДатаПоступления", Метаданные.РегистрыСведений.СтруктураЗаказа.Измерения.ДатаПоступления.Тип);
	РезультатРаспределения.Колонки.Добавить("ЗаказНаПоступление", Метаданные.РегистрыСведений.СтруктураЗаказа.Измерения.ЗаказНаПоступление.Тип);
	РезультатРаспределения.Колонки.Добавить("Распределено", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	РаспределитьЗапасы(РезультатЗапроса[КоличествоПакетов-3], РезультатЗапроса[КоличествоПакетов-4], РезультатРаспределения);
	ПоместитьРезультатРаспределенияЗапасовВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, РезультатРаспределения);
	РезультатРаспределения = Неопределено;
	
	РассчитатьИзмененияИЗаписатьРезультатРаспределенияЗапасов(МенеджерВременныхТаблиц, ПараметрыРасчета);
	
	ПолучитьИПоместитьВКешСпособыОбеспечения(МенеджерВременныхТаблиц, "НоменклатурныйПлан");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|
	|	План.ИндексСтроки КАК ИндексСтроки,
	|	
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	План.КлючНоменклатура    КАК КлючНоменклатура,
	|	План.КлючПартия          КАК КлючПартия,
	|
	|	КэшНСИ.ТипОбеспечения    КАК ТипОбеспечения,
	|	КэшНСИ.СпособОбеспечения КАК СпособОбеспечения,
	|	КэшНСИ.Спецификация      КАК Спецификация,
	|
	|	КэшНСИ.ИдентификаторОшибки КАК ИдентификаторОшибки
	|
	|ПОМЕСТИТЬ ПланПотребления
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|	ПО План.Номенклатура        = КэшНСИ.Номенклатура
	|	 И План.Характеристика      = КэшНСИ.Характеристика
	|	 И План.Склад               = КэшНСИ.Склад
	|	 И План.Назначение          = КэшНСИ.Назначение
	|	 И План.ЗаказНаПроизводство = КэшНСИ.ЗаказНаПроизводство
	|	 И КэшНСИ.Запланировать
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовИтоговыеЗаписи КАК РаспределениеЗапасов
	|	ПО План.ИндексСтроки = РаспределениеЗапасов.ИндексСтроки
	|
	|ГДЕ
	|	План.Требуется <> План.Запланировано + План.РаспределеноИзПартийНаПродукцию + ЕСТЬNULL(РаспределениеЗапасов.Распределено, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Характеристика, Склад, Назначение, ЗаказНаПроизводство, КлючНоменклатура, КлючПартия
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ План.ТипОбеспечения ИЗ ПланПотребления КАК План;
	|";
	ТипыОбеспечения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Если ТипыОбеспечения.Найти(Перечисления.ТипыОбеспечения.Производство) <> Неопределено Тогда
		ЗапланироватьПроизводство(ПараметрыРасчета, МенеджерВременныхТаблиц, "ПланПотребления");
	КонецЕсли;
	
	Если ТипыОбеспечения.Найти(Перечисления.ТипыОбеспечения.Перемещение) <> Неопределено Тогда
		ЗапланироватьПеремещение(ПараметрыРасчета, МенеджерВременныхТаблиц, "ПланПотребления");
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьЗапасы(РезультатТребуется, РезультатЗапасы, РезультатРаспределения)
	
	Если РезультатТребуется.Пустой() Или РезультатЗапасы.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ГрафикТовары = СкопироватьКолонки(РезультатЗапасы.Колонки, "Номенклатура,Характеристика,Склад,Назначение");
	
	ГрафикТовары.Колонки.Добавить("ГрафикРазряжен", Новый ОписаниеТипов("Булево"));
	ГрафикТовары.Колонки.Добавить("Индекс",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	ГрафикТовары.Колонки.Добавить("Граница",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ГрафикЕстьДоступно = Неопределено;
	
	График = РезультатЗапасы.Выгрузить();
	Индекс = 0;
	
	ГрафикТовара = Неопределено;
	
	Пока График.Количество() > Индекс Цикл
		
		ТекущаяСтрока = График[Индекс];
		
		Если НЕ (Индекс > 0
			 И ГрафикТовара.Номенклатура   = ТекущаяСтрока.Номенклатура
			 И ГрафикТовара.Характеристика = ТекущаяСтрока.Характеристика
			 И ГрафикТовара.Склад          = ТекущаяСтрока.Склад
			 И ГрафикТовара.Назначение     = ТекущаяСтрока.Назначение)  Тогда

			ГрафикТовара = ГрафикТовары.Добавить();
			ЗаполнитьЗначенияСвойств(ГрафикТовара, ТекущаяСтрока);
			ГрафикТовара.Индекс = Индекс;

		КонецЕсли;
		
		Индекс               = Индекс + 1;
		ГрафикТовара.Граница = Индекс;
		
	КонецЦикла;
	
	ГрафикТовары.Индексы.Добавить("Номенклатура,Характеристика,Склад,Назначение");
	
	Требуется = Неопределено;
	Индекс = -1;
	Граница = -1;
	
	Аналитика = Новый Структура("Номенклатура,Характеристика,Склад,Назначение");

	Выборка = РезультатТребуется.Выбрать();

	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	Пока ЕстьЗаписиВВыборке Цикл
		
		ЗаполнитьЗначенияСвойств(Аналитика, Выборка);
		
		ГрафикТовара = ГрафикТовара(ГрафикТовары, Аналитика, Граница, Индекс, Выборка);
		
		Пока ЕстьЗаписиВВыборке
			И Аналитика.Номенклатура   = Выборка.Номенклатура
			И Аналитика.Характеристика = Выборка.Характеристика
			И Аналитика.Склад          = Выборка.Склад
			И Аналитика.Назначение     = Выборка.Назначение Цикл
			
			Требуется = ?(Не Требуется = Неопределено, Требуется, Выборка.Требуется);
			
			Пока Требуется > 0 И Граница > Индекс Цикл
				
				Запас = График[Индекс];
				
				Если ЗапасДоступен(Выборка, Запас) Тогда
					
					Распределено = Мин(Требуется, Запас.Доступно);

					Потребность = РезультатРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(Потребность, Выборка, "ИндексСтроки");
					ЗаполнитьЗначенияСвойств(Потребность, Запас, "ДатаПоступления,ЗаказНаПоступление,Назначение");
					Потребность.Распределено = Распределено;
					
				Иначе
					
					ГрафикТовара.ГрафикРазряжен = ГрафикТовара.ГрафикРазряжен Или Запас.Доступно > 0;
					
					Если ГрафикЕстьДоступно = Неопределено И Запас.Доступно > 0 Тогда
						ГрафикЕстьДоступно = ГрафикТовара;
					КонецЕсли;
					
					Если Не ГрафикТовара.ГрафикРазряжен Тогда
						Прервать;
					Иначе
						Индекс = Индекс + 1;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				Запас.Доступно = Запас.Доступно - Распределено;
				Требуется = Требуется - Распределено;
				
				Если Запас.Доступно > 0 Тогда
					Продолжить;
				Иначе
					Если Индекс = ГрафикТовара.Индекс Тогда
						ГрафикТовара.Индекс = ГрафикТовара.Индекс + 1;
						ГрафикТовара.ГрафикРазряжен = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
			Если Требуется > 0 И СледующийГрафикТовара(ГрафикТовара, Аналитика, Граница, Индекс, Выборка) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ГрафикЕстьДоступно <> Неопределено Тогда
				ГрафикТовара = ГрафикЕстьДоступно;
				Индекс  = ГрафикТовара.Индекс;
				Граница = ГрафикТовара.Граница;
			КонецЕсли;
			
			ГрафикЕстьДоступно = Неопределено;
			Требуется = Неопределено;
			
			ЕстьЗаписиВВыборке = Выборка.Следующий();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГрафикТовара(График, Аналитика, Граница, Индекс, УсловияРасчета, ИзменитьАналитику = Ложь)
	
	Назначение = Аналитика.Назначение;
	
	Если ИзменитьАналитику Тогда
		Аналитика.Назначение = Справочники.Назначения.ПустаяСсылка();
	КонецЕсли;
	
	Список = График.НайтиСтроки(Аналитика);
	
	НетГрафика = Список.Количество() = 0;
	
	Если НетГрафика
		И Не ИзменитьАналитику И Не УсловияРасчета.Обособленно Тогда
		
		ГрафикТовара = ГрафикТовара(График, Аналитика, Граница, Индекс, УсловияРасчета, Истина);
		
	Иначе
		
		Если НетГрафика Тогда
			ГрафикТовара  = Неопределено;
			Индекс  = -1;
			Граница = -1;
		Иначе
			ГрафикТовара = Список[0];
			Индекс  = ГрафикТовара.Индекс;
			Граница = ГрафикТовара.Граница;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзменитьАналитику Тогда
		Аналитика.Назначение = Назначение;
	КонецЕсли;
	
	Возврат ГрафикТовара;
	
КонецФункции

Функция СледующийГрафикТовара(ГрафикТовара, Аналитика, Граница, Индекс, УсловияРасчета)
	
	Если ГрафикТовара = Неопределено ИЛИ УсловияРасчета.Обособленно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ГрафикТовара.Назначение.Пустая() Тогда
		ГрафикТовара  = Неопределено;
		Индекс  = -1;
		Граница = -1;
		Возврат Ложь;
	КонецЕсли;
	
	ГрафикТовара = ГрафикТовара(ГрафикТовара.Владелец(), Аналитика, Граница, Индекс, УсловияРасчета, Истина);
	
	Возврат (ГрафикТовара <> Неопределено);
	
КонецФункции

Функция ЗапасДоступен(Выборка, Запас)
	
	Если Выборка.НомерОчереди > Запас.НомерОчереди Тогда
		
		Возврат Истина;
		
	ИначеЕсли Выборка.НомерОчереди = Запас.НомерОчереди Тогда
		
		Если Выборка.ПорядокНормативногоГрафика > Запас.ПорядокНормативногоГрафика Тогда
			
			Возврат Истина;
			
		ИначеЕсли Выборка.ПорядокНормативногоГрафика = Запас.ПорядокНормативногоГрафика И НЕ Выборка.Запланировано > 0 Тогда // ограничение для контроля зацикливания расчета
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоместитьРезультатРаспределенияЗапасовВМенеджерВременныхТаблиц(МенеджерВременныхТаблиц, РезультатРаспределения)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.Текст = ""
		+ ТекстЗапросаПоместитьТаблицуЗначенийВоВременнуюТаблицу("РезультатРаспределения", РезультатРаспределения.Колонки,,, "ИндексСтроки")
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "ВЫБРАТЬ
		|
		|	План.ИндексСтроки КАК ИндексСтроки,
		|
		|	План.Номенклатура         КАК Номенклатура,
		|	План.Характеристика       КАК Характеристика,
		|	План.Склад                КАК Склад,
		|	План.Назначение           КАК Назначение,
		|	План.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
		|	План.КлючНоменклатура     КАК КлючНоменклатура,
		|	План.КлючПартия           КАК КлючПартия,
		|	План.Этап                 КАК Этап,
		|	План.Подразделение        КАК Подразделение,
		|	План.НазначениеСтруктуры  КАК НазначениеСтруктуры,
		|	План.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
		|
		|	Резервы.ДатаПоступления    КАК ДатаПоступления,
		|	Резервы.ЗаказНаПоступление КАК ЗаказНаПоступление,
		|
		|	ЭтапВыпуска.Ссылка                                      КАК ЭтапВыпуска,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЭтапВыпуска.ПартияПроизводства) КАК КлючПартияВыпуска,
		|	ЭтапВыпуска.Подразделение                               КАК ПодразделениеВыпуска,
		|
		|	ВЫБОР
		|		КОГДА Резервы.Назначение <> &ПустоеНазначение
		|				И НЕ &ТекстПоляРаспределеноВПартииПоЗаказуНаПроизводство
		|			ТОГДА Резервы.Распределено
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РаспределеноИзЗапасовОбособленно,
		|	ВЫБОР
		|		КОГДА Резервы.Назначение = &ПустоеНазначение
		|				И НЕ &ТекстПоляРаспределеноВПартииПоЗаказуНаПроизводство
		|			ТОГДА Резервы.Распределено
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РаспределеноИзЗапасов,
		|	ВЫБОР
		|		КОГДА Резервы.Назначение <> &ПустоеНазначение
		|				И &ТекстПоляРаспределеноВПартииПоЗаказуНаПроизводство
		|			ТОГДА Резервы.Распределено
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РаспределеноИзПартийОбособленно,
		|	ВЫБОР
		|		КОГДА Резервы.Назначение = &ПустоеНазначение
		|				И &ТекстПоляРаспределеноВПартииПоЗаказуНаПроизводство
		|			ТОГДА Резервы.Распределено
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РаспределеноИзПартий
       	|
		|ПОМЕСТИТЬ РаспределениеЗапасов
		|ИЗ
		|		РезультатРаспределения КАК Резервы
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ НоменклатурныйПлан КАК План
		|			ПО Резервы.ИндексСтроки = План.ИндексСтроки
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапВыпуска
		|			ПО Резервы.ЗаказНаПоступление = ЭтапВыпуска.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение,
		|	ЗаказНаПроизводство
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.ИндексСтроки КАК ИндексСтроки,
		|	СУММА(Таблица.Распределено) КАК Распределено,
		|	СУММА(ВЫБОР
		|			КОГДА Таблица.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
		|				ТОГДА Таблица.Распределено
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РаспределеноИзНаличияНаСкладе
		|ПОМЕСТИТЬ РаспределениеЗапасовИтоговыеЗаписи
		|ИЗ
		|	РезультатРаспределения КАК Таблица
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.ИндексСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИндексСтроки
		|;
		|УНИЧТОЖИТЬ РезультатРаспределения
		|;
		|";
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстПоляРаспределеноВПартииПоЗаказуНаПроизводство",
		"(ЭтапВыпуска.Ссылка ЕСТЬ НЕ NULL
		|		И ЭтапВыпуска.Распоряжение = План.ЗаказНаПроизводство
		|		И План.КлючПартия <> УНИКАЛЬНЫЙИДЕНТИФИКАТОР(ЭтапВыпуска.ПартияПроизводства))");
		
	Запрос.УстановитьПараметр("РезультатРаспределения", РезультатРаспределения);
	Запрос.Выполнить();	
		
КонецПроцедуры

Процедура РассчитатьИзмененияИЗаписатьРезультатРаспределенияЗапасов(МенеджерВременныхТаблиц, ПараметрыРасчета)
	
	РассчитыватьИзменения = ПараметрыРасчета.РассчитыватьИзменения;
	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	РазделительЗаписи = ?(РассчитыватьИзменения, Новый УникальныйИдентификатор, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("РассчитыватьИзменения", РассчитыватьИзменения);
	Запрос.УстановитьПараметр("РазделительЗаписи", РазделительЗаписи);
	Запрос.УстановитьПараметр("ПустойКлючСвязи", ПустойКлючСвязи);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура           КАК Номенклатура,
	|	Таблица.Характеристика         КАК Характеристика,
	|	Таблица.Склад                  КАК Склад,
	|	Таблица.Назначение             КАК Назначение,
	|	Таблица.ЗаказНаПроизводство    КАК ЗаказНаПроизводство,
	|	Таблица.КлючНоменклатура       КАК КлючНоменклатура,
	|	Таблица.КлючПартия             КАК КлючПартия,
	|	Таблица.ВидСтроки              КАК ВидСтроки,
	|	Таблица.ЗаказНаПоступление     КАК ЗаказНаПоступление,
	|	Таблица.ДатаПоступления        КАК ДатаПоступления,
	|	МАКСИМУМ(Таблица.КлючНабор)            КАК КлючНабор,
	|	МАКСИМУМ(Таблица.Этап)                 КАК Этап,
	|	МАКСИМУМ(Таблица.Подразделение)        КАК Подразделение,
	|	МАКСИМУМ(Таблица.НазначениеСтруктуры)  КАК НазначениеСтруктуры,
	|	МАКСИМУМ(Таблица.КлючСвязиПеремещение) КАК КлючСвязиПеремещение,
	|	СУММА(Таблица.РаспределеноИзЗапасовОбособленно) КАК РаспределеноИзЗапасовОбособленно,
	|	СУММА(Таблица.РаспределеноИзЗапасов)            КАК РаспределеноИзЗапасов,
	|	СУММА(Таблица.РаспределеноИзПартийОбособленно)  КАК РаспределеноИзПартийОбособленно,
	|	СУММА(Таблица.РаспределеноИзПартий)             КАК РаспределеноИзПартий,
	|	0                                              КАК Готово,
	|	МИНИМУМ(Таблица.НоваяЗапись)                   КАК НоваяЗапись,
	|	СГРУППИРОВАНОПО(Таблица.КлючНоменклатура)      КАК ДетальнаяЗапись
	|	
	|ПОМЕСТИТЬ РезервыИзменения
	|ИЗ (
	|	
	|	ВЫБРАТЬ
	|
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано) КАК ВидСтроки,
	|
	|		Резервы.Номенклатура         КАК Номенклатура,
	|		Резервы.Характеристика       КАК Характеристика,
	|		Резервы.Склад                КАК Склад,
	|		Резервы.Назначение           КАК Назначение,
	|		Резервы.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
	|		Резервы.КлючНоменклатура     КАК КлючНоменклатура,
	|		Резервы.КлючПартия           КАК КлючПартия,
	|		Резервы.Этап                 КАК Этап,
	|		Резервы.Подразделение        КАК Подразделение,
	|		Резервы.НазначениеСтруктуры  КАК НазначениеСтруктуры,
	|		Резервы.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
	|		Резервы.ЗаказНаПоступление   КАК ЗаказНаПоступление,
	|		Резервы.ДатаПоступления      КАК ДатаПоступления,
	|
	|		&ПустойКлючСвязи КАК КлючНабор,
	|
	|		Резервы.РаспределеноИзЗапасовОбособленно КАК РаспределеноИзЗапасовОбособленно,
	|		Резервы.РаспределеноИзЗапасов            КАК РаспределеноИзЗапасов,
	|		0                                        КАК РаспределеноИзПартийОбособленно,
	|		0                                        КАК РаспределеноИзПартий,
	|
	|		ИСТИНА КАК НоваяЗапись
	|
	|	ИЗ
	|		РаспределениеЗапасов КАК Резервы
	|
	|	ГДЕ
	|		Резервы.РаспределеноИзЗапасов > 0 Или Резервы.РаспределеноИзЗапасовОбособленно > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|
	|		ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката) КАК ВидСтроки,
	|
	|		Резервы.Номенклатура          КАК Номенклатура,
	|		Резервы.Характеристика        КАК Характеристика,
	|		Резервы.Склад                 КАК Склад,
	|		Резервы.Назначение            КАК Назначение,
	|		Резервы.ЗаказНаПроизводство   КАК ЗаказНаПроизводство,
	|		Резервы.КлючНоменклатура      КАК КлючНоменклатура,
	|		Резервы.КлючПартияВыпуска     КАК КлючПартия,
	|		Резервы.ЭтапВыпуска           КАК Этап,
	|		Резервы.ПодразделениеВыпуска  КАК Подразделение,
	|		Резервы.НазначениеСтруктуры   КАК НазначениеСтруктуры,
	|		&ПустойКлючСвязи              КАК КлючСвязиПеремещение,
	|		Резервы.ЗаказНаПоступление    КАК ЗаказНаПоступление,
	|		Резервы.ДатаПоступления       КАК ДатаПоступления,
	|
	|		&ПустойКлючСвязи КАК КлючНабор,
	|
	|		0                                        КАК РаспределеноИзЗапасовОбособленно,
	|		0                                        КАК РаспределеноИзЗапасов,
	|		Резервы.РаспределеноИзПартийОбособленно  КАК РаспределеноИзПартийОбособленно,
	|		Резервы.РаспределеноИзПартий             КАК РаспределеноИзПартий,
	|
	|		ИСТИНА КАК НоваяЗапись
	|
	|	ИЗ
	|		РаспределениеЗапасов КАК Резервы
	|	
	|	ГДЕ
	|		Резервы.РаспределеноИзПартий > 0 Или Резервы.РаспределеноИзПартийОбособленно > 0 
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|
	|		Резервы.ВидСтроки КАК ВидСтроки,
	|	
	|		Резервы.Номенклатура         КАК Номенклатура,
	|		Резервы.Характеристика       КАК Характеристика,
	|		Резервы.Склад                КАК Склад,
	|		Резервы.Назначение           КАК Назначение,
	|		Резервы.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
	|		Резервы.КлючНоменклатура     КАК КлючНоменклатура,
	|		Резервы.КлючПартия           КАК КлючПартия,
	|		Резервы.Этап                 КАК Этап,
	|		Резервы.Подразделение        КАК Подразделение,
	|		Резервы.НазначениеСтруктуры  КАК НазначениеСтруктуры,
	|		Резервы.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
	|		Резервы.ЗаказНаПоступление   КАК ЗаказНаПоступление,
	|		Резервы.ДатаПоступления      КАК ДатаПоступления,
	|		
	|		Резервы.КлючНабор КАК КлючНабор,
	|
	|		ВЫБОР
	|			КОГДА &РассчитыватьИзменения
	|				ТОГДА -Резервы.РаспределеноИзЗапасовОбособленно
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК РаспределеноИзЗапасовОбособленно,
	|		ВЫБОР
	|			КОГДА &РассчитыватьИзменения
	|				ТОГДА -Резервы.РаспределеноИзЗапасов
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК РаспределеноИзЗапасов,
	|		ВЫБОР
	|			КОГДА &РассчитыватьИзменения
	|				ТОГДА -Резервы.РаспределеноИзПартийОбособленно
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК РаспределеноИзПартийОбособленно,
	|		ВЫБОР
	|			КОГДА &РассчитыватьИзменения
	|				ТОГДА -Резервы.РаспределеноИзПартий
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК РаспределеноИзПартий,
	|
	|		ЛОЖЬ КАК НоваяЗапись
	|	
	|	ИЗ
	|		РегистрСведений.СтруктураЗаказа КАК Резервы
	|	
	|	ГДЕ
	|		(Резервы.Номенклатура, Резервы.Характеристика, Резервы.Склад, Резервы.Назначение) В
	|					(ВЫБРАТЬ
	|						ДД.Номенклатура,
	|						ДД.Характеристика,
	|						ДД.Склад,
	|						ДД.Назначение
	|					ИЗ
	|						НоменклатурныйПлан КАК ДД)
	|		И Резервы.ВидСтроки В (
	|					ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Зарезервировано),
	|					ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|		И (Резервы.РаспределеноИзЗапасов <> 0
	|					ИЛИ Резервы.РаспределеноИзЗапасовОбособленно <> 0
	|					ИЛИ Резервы.РаспределеноИзПартий <> 0 
	|					ИЛИ Резервы.РаспределеноИзПартийОбособленно <> 0)
	|
	|) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО ГРУППИРУЮЩИМ НАБОРАМ (
	|
	|	(Таблица.Номенклатура,
	|	 Таблица.Характеристика,
	|	 Таблица.Склад,
	|	 Таблица.Назначение),
	|	(Таблица.Номенклатура,
	|	 Таблица.Характеристика,
	|	 Таблица.Склад,
	|	 Таблица.Назначение,
	|	 Таблица.ЗаказНаПроизводство,
	|	 Таблица.КлючНоменклатура,
	|	 Таблица.КлючПартия,
	|	 Таблица.ВидСтроки,
	|	 Таблица.ЗаказНаПоступление,
	|	 Таблица.ДатаПоступления))
	|
	|ИМЕЮЩИЕ
	|	(НЕ &РассчитыватьИзменения
	|			ИЛИ СУММА(Таблица.РаспределеноИзЗапасов) <> 0
	|			ИЛИ СУММА(Таблица.РаспределеноИзЗапасовОбособленно) <> 0
	|			ИЛИ СУММА(Таблица.РаспределеноИзПартий) <> 0 
	|			ИЛИ СУММА(Таблица.РаспределеноИзПартийОбособленно) <> 0)
	|		ИЛИ НЕ СГРУППИРОВАНОПО(Таблица.ЗаказНаПроизводство)
	|
	|;";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Порции.Номенклатура        КАК Номенклатура,
	|	Порции.Характеристика      КАК Характеристика,
	|	Порции.Склад               КАК Склад,
	|	Порции.Назначение          КАК Назначение,
	|	Порции.КлючНабор           КАК КлючНабор
	|ИЗ
	|	РезервыИзменения КАК Порции
	|ГДЕ
	|	НЕ Порции.ДетальнаяЗапись
	|;";
	ПорцииЗаписи = Запрос.Выполнить().Выгрузить();
	
	НайденныеСтроки = ПорцииЗаписи.НайтиСтроки(Новый Структура("КлючНабор", ПустойКлючСвязи));
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.КлючНабор = Новый УникальныйИдентификатор();
	КонецЦикла;
	
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, "ПорцииЗаписи", ПорцииЗаписи,,, "Номенклатура,Характеристика,Склад,Назначение");

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ // нормативный график
	|
	|	Резервы.КлючПартия КАК КлючПартия,
	|	Резервы.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|ИЗ
	|	РезервыИзменения КАК Резервы
	|
	|ГДЕ
	|	Резервы.ВидСтроки В (
	|			ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.ПроизводствоПолуфабриката))
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ // задания к расчету состояния обеспечения этапов
	|
	|	План.Этап КАК ОбъектРасчета
	|
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаспределениеЗапасовИтоговыеЗаписи КАК РаспределениеЗапасов
	|		ПО План.ИндексСтроки = РаспределениеЗапасов.ИндексСтроки
	|
	|ГДЕ
	|	План.РаспределеноИзНаличияНаСкладе <> ISNULL(РаспределениеЗапасов.РаспределеноИзНаличияНаСкладе, 0)
	|		И (План.Требуется > ISNULL(РаспределениеЗапасов.РаспределеноИзНаличияНаСкладе, 0) И План.Требуется <= План.РаспределеноИзНаличияНаСкладе
	|			ИЛИ План.Требуется > План.РаспределеноИзНаличияНаСкладе И План.Требуется <= ISNULL(РаспределениеЗапасов.РаспределеноИзНаличияНаСкладе, 0))
	|		И План.Этап ССЫЛКА Документ.ЭтапПроизводства2_2
	|;
	|ВЫБРАТЬ
	|
	|	Резервы.Номенклатура         КАК Номенклатура,
	|	Резервы.Характеристика       КАК Характеристика,
	|	Резервы.Склад                КАК Склад,
	|	Резервы.Назначение           КАК Назначение,
	|	Резервы.ЗаказНаПроизводство  КАК ЗаказНаПроизводство,
	|	Резервы.КлючНоменклатура     КАК КлючНоменклатура,
	|	Резервы.КлючПартия           КАК КлючПартия,
	|	Резервы.ВидСтроки            КАК ВидСтроки,
	|	Резервы.ЗаказНаПоступление   КАК ЗаказНаПоступление,
	|	Резервы.ДатаПоступления      КАК ДатаПоступления,
	|	Резервы.Этап                 КАК Этап,
	|	Резервы.Подразделение        КАК Подразделение,
	|	Резервы.НазначениеСтруктуры  КАК НазначениеСтруктуры,
	|	Резервы.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
	|	
	|	ПорцииЗаписи.КлючНабор КАК КлючНабор,
	|
	|	Резервы.РаспределеноИзЗапасовОбособленно КАК РаспределеноИзЗапасовОбособленно,
	|	Резервы.РаспределеноИзЗапасов            КАК РаспределеноИзЗапасов,
	|	Резервы.РаспределеноИзПартийОбособленно  КАК РаспределеноИзПартийОбособленно,
	|	Резервы.РаспределеноИзПартий             КАК РаспределеноИзПартий,
	|
	|	ВЫБОР
	|		КОГДА &РассчитыватьИзменения И НЕ Резервы.НоваяЗапись ТОГДА
	|			&РазделительЗаписи
	|		ИНАЧЕ
	|			&ПустойКлючСвязи
	|	КОНЕЦ КАК Разделитель,
	|
	|	&РассчитыватьИзменения И НЕ Резервы.НоваяЗапись КАК ДополнительнаяЗапись
	|	
	|ИЗ
	|	
	|	РезервыИзменения КАК Резервы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорцииЗаписи КАК ПорцииЗаписи
	|	ПО Резервы.Номенклатура   = ПорцииЗаписи.Номенклатура
	|	 И Резервы.Характеристика = ПорцииЗаписи.Характеристика
	|	 И Резервы.Склад          = ПорцииЗаписи.Склад
	|	 И Резервы.Назначение     = ПорцииЗаписи.Назначение
	|	 И Резервы.ДетальнаяЗапись
	|
	|ГДЕ
	|	(&РассчитыватьИзменения
	|			ИЛИ Резервы.РаспределеноИзЗапасов <> 0
	|			ИЛИ Резервы.РаспределеноИзЗапасовОбособленно <> 0
	|			ИЛИ Резервы.РаспределеноИзПартий <> 0
	|			ИЛИ Резервы.РаспределеноИзПартийОбособленно <> 0)
	|;";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
#Область НормативныйГрафик

	Если Не РезультатЗапроса[КоличествоПакетов-3].Пустой() Тогда
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадания(РезультатЗапроса[КоличествоПакетов-3].Выгрузить());
	КонецЕсли;
	
#КонецОбласти

	РезультатРасчета = РезультатЗапроса[КоличествоПакетов-1].Выгрузить();
	
	Если РассчитыватьИзменения Тогда
		СтруктураЗаказа.ЗаполнитьИЗаписатьНаборЗаписей(РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей(), РезультатРасчета);
	Иначе
		
		ПорцияЗаписиСтруктура = Новый Структура("КлючНабор", ПустойКлючСвязи);
		РезультатРасчета.Индексы.Добавить("КлючНабор");
		
		ВсегоПорций = ПорцииЗаписи.Количество();
		Индекс = 0;
		
		Пока ВсегоПорций > Индекс Цикл
			ПорцияЗаписиСтруктура.КлючНабор = ПорцииЗаписи[Индекс].КлючНабор;
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(ПорцияЗаписиСтруктура.КлючНабор);
			НаборЗаписей.Загрузить(РезультатРасчета.Скопировать(ПорцияЗаписиСтруктура));
			ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Истина);
			Индекс = Индекс + 1;
		КонецЦикла;
	
	КонецЕсли;
	
#Область СостояниеОбеспечения
	
	Если Не РезультатЗапроса[КоличествоПакетов-2].Пустой() Тогда
		
		ОтложенныеЗадания.ОбработатьЗаданияОчереди(
							"ЗаданияКРасчетуСостоянияОбеспеченияЭтаповПроизводства",
							РезультатЗапроса[КоличествоПакетов-2].Выгрузить());
		
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

Процедура ПолучитьИПоместитьВКешСпособыОбеспечения(МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "НоменклатурныйПлан")
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(План.СпецификацияПолуфабриката) <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УказанаСпецификация,
	|
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА План.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА План.СпецификацияПолуфабриката
	|			КОНЕЦ) > 1
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) ИНАЧЕ МАКСИМУМ(План.СпецификацияПолуфабриката)
	|	КОНЕЦ КАК СпецификацияПолуфабриката,
	|
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВЫБОР
	|				КОГДА КэшНСИ.Номенклатура ЕСТЬ НЕ NULL ТОГДА
	|					ИСТИНА
	|				ИНАЧЕ
	|					ЛОЖЬ
	|				КОНЕЦ) И МАКСИМУМ(План.СпецификацияПолуфабриката) <> МАКСИМУМ(КэшНСИ.Спецификация) ТОГДА
	|			ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Заменить
	|
	|ПОМЕСТИТЬ ИзмененныеСтроки
	|
	|ИЗ
	|	НоменклатурныйПлан КАК План
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшНСИСтруктурыЗаказа КАК КэшНСИ
	|	ПО План.Номенклатура        = КэшНСИ.Номенклатура
	|	 И План.Характеристика      = КэшНСИ.Характеристика
	|	 И План.Склад               = КэшНСИ.Склад
	|	 И План.Назначение          = КэшНСИ.Назначение
	|	 И План.ЗаказНаПроизводство = КэшНСИ.ЗаказНаПроизводство
	|
	|ГДЕ
	|	План.Требуется > 0
	|	И (КэшНСИ.Номенклатура ЕСТЬ NULL
	|		Или КэшНСИ.Предопределенная
	|		Или План.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|
	|	План.Номенклатура,
	|	План.Характеристика,
	|	План.Склад,
	|	План.Назначение,
	|	План.ЗаказНаПроизводство
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(КэшНСИ.Номенклатура) ЕСТЬ NULL
	|	ИЛИ
	|	  ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА План.СпецификацияПолуфабриката <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				ТОГДА План.СпецификацияПолуфабриката
	|			КОНЕЦ) > 1
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка) ИНАЧЕ МАКСИМУМ(План.СпецификацияПолуфабриката)
	|	  КОНЕЦ <> МАКСИМУМ(КэшНСИ.Спецификация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение,
	|	ЗаказНаПроизводство
	|;
	|"; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НоменклатурныйПлан", ИмяВременнойТаблицы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Выгрузить()[0].Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификацийНаИзготовлениеСборку();
	
	ПараметрыЗапросаСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыТекстаЗапросаСпецификацийИзделий();
	ПараметрыЗапросаСпецификаций.ИмяВходнойТаблицы          = "СписокНоменклатуры";
	ПараметрыЗапросаСпецификаций.ИмяВыходнойТаблицы         = "СпецификацииНоменклатуры";
	ПараметрыЗапросаСпецификаций.УничтожитьВременныеТаблицы = Истина;
	ПараметрыЗапросаСпецификаций.ТолькоПриоритетные         = Истина;
	ПараметрыЗапросаСпецификаций.УсловияОтбораВходящихДанных.Добавить(
	"ВЫБОР
	|	КОГДА СписокНоменклатуры.УказанаСпецификация
	|		ТОГДА ЛОЖЬ
	|	КОГДА СписокНоменклатуры.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)
	|		ТОГДА ИСТИНА
	|	КОГДА СписокНоменклатуры.Запланировать И СписокНоменклатуры.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ
	|");
	
	УправлениеДаннымиОбИзделиях.УстановитьПараметрыЗапросаСпецификацийИзделий(Запрос, ПараметрыВыбораСпецификаций);
	
	Запрос.Текст =
	"" + Справочники.ФорматыМагазинов.ТекстЗапросаВтФорматыСкладов(Ложь)
	  + "ВЫБРАТЬ
	|
	|	АвтоНомерЗаписи() КАК ИндексДанных,
	|
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|
	|	План.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|
	|	План.ЗаказНаПроизводство.Подразделение           КАК ПодразделениеДиспетчер,
	|	План.ЗаказНаПроизводство.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	План.ЗаказНаПроизводство.НачатьНеРанее           КАК НачалоПроизводства,
	|
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	План.Заменить КАК Заменить,
	|
	|	ВЫБОР
	|		КОГДА План.УказанаСпецификация
	|			ТОГДА ИСТИНА
	|		КОГДА (План.ЗаказНаПроизводство.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ИЛИ ЕСТЬNULL(СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|					В (План.ЗаказНаПроизводство.Подразделение,
	|					   НЕОПРЕДЕЛЕНО,
	|					   ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)))
	|				И ЕСТЬNULL(СпособыОбеспеченияПотребностей.ТипОбеспечения,
	|					   ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|				И ЕСТЬNULL(СпособыОбеспеченияПотребностей.СпособПланированияПолуфабрикатов,
	|					   ЗНАЧЕНИЕ(Перечисление.СпособыПланированияПолуфабрикатов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияПолуфабрикатов.Автоматически)
	|				И План.Номенклатура.Качество = ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)
	|			ТОГДА ИСТИНА
	|		КОГДА СпособыОбеспеченияПотребностей.Ссылка ЕСТЬ НЕ NULL
	|				И СпособыОбеспеченияПотребностей.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|				И СпособыОбеспеченияПотребностей.ИсточникОбеспеченияПотребностей НЕ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка), План.Склад)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Запланировать,
	|
	|	План.УказанаСпецификация КАК УказанаСпецификация,
	|	План.СпецификацияПолуфабриката КАК СпецификацияПолуфабриката,
	|
	|	ВЫБОР
	|		КОГДА План.УказанаСпецификация
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|		ИНАЧЕ ISNULL(СпособыОбеспеченияПотребностей.ТипОбеспечения, ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка))
	|	КОНЕЦ КАК ТипОбеспечения,
	|
	|	ISNULL(СпособыОбеспеченияПотребностей.Ссылка, ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка)) КАК СпособОбеспечения
	|
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	ИзмененныеСтроки КАК План
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
	|	ПО &ПодстановкаОсновногоСпособаОбеспечения И НЕ План.УказанаСпецификация
	|
	|ИНДЕКСИРОВАТЬ ПО ИндексДанных
	|;"
	  + УправлениеДаннымиОбИзделиях.ТекстЗапросаСпецификацийИзделий(ПараметрыЗапросаСпецификаций, ПараметрыВыбораСпецификаций) + 
	"ВЫБРАТЬ
	|	
	|	План.ИндексДанных КАК ИндексДанных,
	|
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	План.Заменить КАК Заменить,
	|
	|	ВЫБОР
	|		КОГДА СпецификацииНоменклатуры.Спецификация ЕСТЬ НЕ NULL
	|				И План.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка) ТОГДА ИСТИНА
	|			ИНАЧЕ План.Запланировать
	|	КОНЕЦ КАК Запланировать,
	|
	|	План.УказанаСпецификация КАК Предопределенная,
	|
	|	ISNULL(СпецификацииНоменклатуры.Спецификация, План.СпецификацияПолуфабриката) КАК Спецификация,
	|
	|	ВЫБОР
	|		КОГДА План.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.ПустаяСсылка)
	|			ТОГДА
	|				ВЫБОР КОГДА СпецификацииНоменклатуры.Спецификация ЕСТЬ NULL
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|				КОНЕЦ
	|			ИНАЧЕ План.ТипОбеспечения
	|	КОНЕЦ КАК ТипОбеспечения,
	|
	|	План.СпособОбеспечения КАК СпособОбеспечения
	|
	|ИЗ
	|	СписокНоменклатуры КАК План
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпецификацииНоменклатуры КАК СпецификацииНоменклатуры
	|		ПО План.ИндексДанных = СпецификацииНоменклатуры.ИндексДанных
	|;
	|
	|УНИЧТОЖИТЬ ИзмененныеСтроки; УНИЧТОЖИТЬ СписокНоменклатуры; УНИЧТОЖИТЬ СпецификацииНоменклатуры;
	|";
	
	Если ИмяВременнойТаблицы <> "НоменклатурныйПлан" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НоменклатурныйПлан", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ПоляСоединения = "План.Номенклатура, План.Характеристика, План.Склад";
	ИмяПараметра   = "ПодстановкаОсновногоСпособаОбеспечения";
	
	Запрос.Текст = РегистрыСведений.СхемыОбеспечения.ПодставитьСоединениеДляПолученияСпособаОбеспечения(
		Запрос.Текст, ИмяПараметра, ПоляСоединения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	КэшируемыеЗначения = РезультатЗапроса[КоличествоПакетов-4].Выгрузить();
	
	Замена = КэшируемыеЗначения.НайтиСтроки(Новый Структура("Заменить", Истина));
	
	Если Замена.Количество() > 0 Тогда
		РегистрыСведений.КэшНСИСтруктурыЗаказа.ЗаменитьКэшируемыеЗначения(Замена);
		УдалитьСтрокиИзТаблицы(КэшируемыеЗначения, Замена);
	КонецЕсли;
	
	РегистрыСведений.КэшНСИСтруктурыЗаказа.ЗаписатьКэшируемыеЗначения(КэшируемыеЗначения);
	
КонецПроцедуры

Процедура ЗапланироватьПроизводство(ПараметрыРасчета, МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "ПланПроизводства")
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустойИдентификатор", ПустойИдентификатор);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	План.Спецификация        КАК Спецификация,
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|
	|ИЗ
	|	ПланПроизводства КАК План
	|
	|ГДЕ
	|	План.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство) И План.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	План.Номенклатура        КАК Номенклатура,
	|	План.Характеристика      КАК Характеристика,
	|	План.Склад               КАК Склад,
	|	План.Назначение          КАК Назначение,
	|	План.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	План.ИдентификаторОшибки КАК ИдентификаторОшибки
	|
	|ИЗ
	|	ПланПроизводства КАК План
	|
	|ГДЕ
	|	План.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Производство)
	|		И План.ИдентификаторОшибки <> &ПустойИдентификатор
	|		И План.Спецификация = ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|";
	
	Если ИмяВременнойТаблицы <> "ПланПроизводства" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланПроизводства", ИмяВременнойТаблицы);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// задания к расчету структуры заказа
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаСпецификации.ДобавитьЗаданияВКонецОчереди(РезультатЗапроса[0].Выгрузить());
	КонецЕсли;
	
	// ошибки подбора спецификаций
	
	Если Не РезультатЗапроса[1].Пустой() Тогда
		
		Ошибки = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		
		СтруктураОшибок = Новый Структура();
		СтруктураОшибок.Вставить("ТипОшибки", Перечисления.ТипыОшибокРасчетаСтруктурыЗаказаНаПроизводство.ОшибкаПодбораСпецификаций);
		СтруктураОшибок.Вставить("Ошибки", Ошибки);
		
		Протокол = Новый Структура("Номенклатура,Характеристика,Склад,Назначение,ЗаказНаПроизводство"); //@skip-warning
		
		Выборка = РезультатЗапроса[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Ошибка = Ошибки.Добавить();
			ЗаполнитьЗначенияСвойств(Ошибка, Выборка, "ИдентификаторОшибки,ЗаказНаПроизводство");
			ЗаполнитьЗначенияСвойств(Протокол, Выборка);
			Ошибка.Протокол = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(9));
		КонецЦикла;
		
		РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ЗарегистрироватьОшибки(СтруктураОшибок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапланироватьПеремещение(ПараметрыРасчета, МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "ПланПотребления")
	
	ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	РассчитыватьИзменения = ПараметрыРасчета.РассчитыватьИзменения;
	РазрешитьПовтИспРассчитанныхДанных = ПараметрыРасчета.РазрешитьПовтИспРассчитанныхДанных;
	
	РазделительЗаписи = ?(РассчитыватьИзменения, Новый УникальныйИдентификатор, Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустойКлючСвязи", ПустойКлючСвязи);
	Запрос.УстановитьПараметр("РассчитыватьИзменения", РассчитыватьИзменения);
	Запрос.УстановитьПараметр("РазрешитьПовтИспРассчитанныхДанных", РазрешитьПовтИспРассчитанныхДанных);
	Запрос.Текст =
	"ВЫБРАТЬ
	|
	|	Движения.Номенклатура        КАК Номенклатура,
	|	Движения.Характеристика      КАК Характеристика,
	|	Движения.Склад               КАК Склад,
	|	Движения.Назначение          КАК Назначение,
	|	Движения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Движения.КлючНоменклатура    КАК КлючНоменклатура,
	|	
	|	МАКСИМУМ(Товары.СпособОбеспечения) КАК СпособОбеспечения,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение))
	|			ТОГДА Движения.КлючПартия
	|	КОНЕЦ), &ПустойКлючСвязи) КАК КлючПартия,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.Уровень
	|	КОНЕЦ), 0) КАК Уровень,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.ДлительностьДоВыпуска
	|	КОНЕЦ), 0) КАК ДлительностьДоВыпуска,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.Подразделение
	|	КОНЕЦ), ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|
	|	МАКСИМУМ(Движения.КлючСвязиПеремещение) КАК КлючСвязиПеремещение,
	|
	|	ISNULL(МАКСИМУМ(ВЫБОР
	|		КОГДА Движения.ВидСтроки В (
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Продукция),
	|				ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление))
	|			ТОГДА Движения.КлючПартия
	|	КОНЕЦ), &ПустойКлючСвязи) КАК КлючПартияРодитель,
	|
	|	МАКСИМУМ(Движения.НазначениеСтруктуры) КАК НазначениеСтруктуры,
	|
	|	ВЫБОР
	|		КОГДА СУММА(Движения.Требуется - Движения.РаспределеноИзЗапасов - Движения.РаспределеноИзЗапасовОбособленно) > 0
	|		ТОГДА СУММА(Движения.Требуется - Движения.РаспределеноИзЗапасов - Движения.РаспределеноИзЗапасовОбособленно)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Требуется,
	|
	|	СУММА(Движения.Запланировано) КАК Запланировано
	|
	|ПОМЕСТИТЬ Дельта
	|
	|ИЗ
	|	ПланПотребления КАК Товары
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Товары.Номенклатура        = Движения.Номенклатура
	|	 И Товары.Характеристика      = Движения.Характеристика
	|	 И Товары.Склад               = Движения.Склад
	|	 И Товары.Назначение          = Движения.Назначение
	|	 И Товары.ЗаказНаПроизводство = Движения.ЗаказНаПроизводство
	|	 И Товары.КлючНоменклатура    = Движения.КлючНоменклатура
	|
	|ГДЕ
	|	Товары.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Перемещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Номенклатура, Движения.Характеристика, Движения.Склад, Движения.Назначение,
	|	Движения.ЗаказНаПроизводство, Движения.КлючНоменклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(Движения.Требуется) <> 0 ИЛИ СУММА(Движения.Запланировано) <> 0
	|;
	|
	|ВЫБРАТЬ
	|
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Склад               КАК Склад,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Товары.КлючНоменклатура    КАК КлючНоменклатура,
	|	
	|	Товары.КлючПартия          КАК КлючПартия,
	|	Товары.КлючПартияРодитель  КАК КлючПартияРодитель,
	|
	|	Товары.Склад                                             КАК СкладПолучатель,
	|	Товары.СпособОбеспечения.ИсточникОбеспеченияПотребностей КАК СкладОтправитель,
	|
	|	Товары.Уровень КАК Уровень,
	|
	|	Товары.ДлительностьДоВыпуска                                                        КАК ДлительностьДоВыпуска,
	|	Товары.ДлительностьДоВыпуска + (Товары.СпособОбеспечения.ДлительностьВДнях * 86400) КАК ДлительностьДоЗапуска,
	|
	|	Товары.Подразделение КАК Подразделение,
	|
	|	ВЫБОР
	|		КОГДА Товары.КлючСвязиПеремещение = &ПустойКлючСвязи ТОГДА Товары.КлючНоменклатура
	|			ИНАЧЕ Товары.КлючСвязиПеремещение
	|	КОНЕЦ КАК КлючСвязиПеремещение,
	|
	|	Товары.НазначениеСтруктуры КАК НазначениеСтруктуры,
	|
	|	Товары.Требуется КАК Требуется,
	|	Товары.Запланировано КАК Запланировано
	|
	|ПОМЕСТИТЬ Перемещения
	|
	|ИЗ
	|	Дельта КАК Товары
	|
	|ГДЕ
	|	Товары.СпособОбеспечения.ИсточникОбеспеченияПотребностей НЕ В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПартия
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ // нормативный график
	|
	|	Перемещения.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|
	|	ВЫБОР
	|		КОГДА
	|			Перемещения.ЗаказНаПроизводство.РазмещениеВыпуска = ЗНАЧЕНИЕ(Перечисление.СпособыПривязкиОперацийПроизводства.КОкончанию)
	|		И Перемещения.КлючПартия = &ПустойКлючСвязи
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.НормативныйГрафикСтруктурыЗаказа КАК Таблица
	|			ГДЕ
	|				Таблица.ЗаказНаПроизводство = Перемещения.ЗаказНаПроизводство)
	|			ТОГДА Перемещения.КлючПартияРодитель
	|		ИНАЧЕ Перемещения.КлючПартия
	|	КОНЕЦ КАК КлючПартия
	|
	|ИЗ
	|	Перемещения КАК Перемещения
	|;
	|
	|ВЫБРАТЬ
	|
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Склад               КАК Склад,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Товары.КлючНоменклатура    КАК КлючНоменклатура,
	|	Товары.КлючПартия          КАК КлючПартия,
	|
	|	Товары.Склад   КАК СкладПолучатель,
	|	Движения.Склад КАК СкладОтправитель,
	|	
	|	Товары.Уровень КАК Уровень,
	|
	|	Товары.ДлительностьДоВыпуска КАК ДлительностьДоВыпуска,
	|	Товары.ДлительностьДоЗапуска КАК ДлительностьДоЗапуска,
	|
	|	Движения.КлючНоменклатура КАК КлючНоменклатураНаСкладеОтправителе,
	|
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
	|
	|	Товары.НазначениеСтруктуры КАК НазначениеСтруктуры,
	|
	|	ВЫБОР
	|		КОГДА НЕ &РазрешитьПовтИспРассчитанныхДанных
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Требуется
	|			 - ВЫБОР
	|				КОГДА &РассчитыватьИзменения И Товары.Требуется <> 0 ТОГДА Товары.Запланировано
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ Количество,
	|
	|	ВЫБОР
	|		КОГДА НЕ &РазрешитьПовтИспРассчитанныхДанных ИЛИ НЕ &РассчитыватьИзменения ИЛИ Товары.Требуется = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК Замещать
	|
	|ИЗ
	|	Перемещения КАК Товары
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтруктураЗаказа КАК Движения
	|	ПО Товары.КлючПартия = Движения.КлючПартия
	|	 И НЕ Движения.ДополнительнаяЗапись
	|	 И Движения.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление)
	|
	|ГДЕ
	|	Товары.КлючПартия <> &ПустойКлючСвязи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Склад               КАК Склад,
	|	Товары.Назначение          КАК Назначение,
	|	Товары.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	Товары.КлючНоменклатура    КАК КлючНоменклатура,
	|	&ПустойКлючСвязи           КАК КлючПартия,
	|
	|	Товары.СкладПолучатель  КАК СкладПолучатель,
	|	Товары.СкладОтправитель КАК СкладОтправитель,
	|	
	|	Товары.Уровень КАК Уровень,
	|
	|	Товары.ДлительностьДоВыпуска КАК ДлительностьДоВыпуска,
	|	Товары.ДлительностьДоЗапуска КАК ДлительностьДоЗапуска,
	|	
	|	&ПустойКлючСвязи КАК КлючНоменклатураНаСкладеОтправителе,
	|
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.КлючСвязиПеремещение КАК КлючСвязиПеремещение,
	|
	|	Товары.НазначениеСтруктуры КАК НазначениеСтруктуры,
	|
	|	Товары.Требуется КАК Количество,
	|
	|	ЛОЖЬ КАК Замещать
	|
	|ИЗ
	|	Перемещения КАК Товары
	|
	|ГДЕ
	|	(Товары.КлючПартия = &ПустойКлючСвязи ИЛИ НЕ &РазрешитьПовтИспРассчитанныхДанных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Замещать УБЫВ
	|;
	|УНИЧТОЖИТЬ Перемещения;
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПланПотребления", ИмяВременнойТаблицы);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КоличествоПакетов = РезультатЗапроса.Количество();
	
#Область НормативныйГрафик
	
	РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаНормативныйГрафик.ДобавитьЗадания(РезультатЗапроса[КоличествоПакетов-3].Выгрузить());
	
#КонецОбласти
	
	Выборка = РезультатЗапроса[КоличествоПакетов-2].Выбрать();
	
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	
	СчетчикОшибок = 1; // пересечения потоков по измерениям нет, но т.к. возможны "страничные" блокировки в СУБД, запись следует выполнять в попытке
	
	Пока ЕстьЗаписиВВыборке И Выборка.Замещать Цикл // И (Выборка.Действие = "Удалить" ИЛИ Выборка.Действие = "Изменить") 
		
		КлючПартия = Выборка.КлючПартия;
		
		НачатьТранзакцию();
		Попытка
			
			НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КлючНабор.Установить(КлючПартия);
			
			Если Выборка.Количество <> 0 Тогда
	
				// перемещение на склад
				
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "КлючПартия,КлючНоменклатура,Склад,ДлительностьДоВыпуска");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение;
				
				НоваяСтрока.КлючПартия            = КлючПартия;
				НоваяСтрока.КлючНоменклатура      = Выборка.КлючНоменклатура;
				НоваяСтрока.Склад                 = Выборка.СкладПолучатель;
				НоваяСтрока.ДлительностьДоВыпуска = Выборка.ДлительностьДоВыпуска;
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Выборка.КлючСвязиПеремещение; // поддержка совместимости
				
				НоваяСтрока.Запланировано = Выборка.Количество;
				
				НоваяСтрока.КлючНабор = КлючПартия;
				
				// перемещение со склада
				
				НоваяСтрока = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "КлючПартия,КлючНоменклатура,Склад,ДлительностьДоВыпуска");
				
				НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление;
				
				НоваяСтрока.КлючПартия            = КлючПартия;
				НоваяСтрока.КлючНоменклатура      = Выборка.КлючНоменклатураНаСкладеОтправителе;
				НоваяСтрока.Склад                 = Выборка.СкладОтправитель;
				НоваяСтрока.ДлительностьДоВыпуска = Выборка.ДлительностьДоЗапуска;
				НоваяСтрока.КлючСвязиСтрокаСпецификации = Выборка.КлючСвязиПеремещение; // поддержка совместимости
				
				НоваяСтрока.Требуется = Выборка.Количество;
				
				НоваяСтрока.КлючНабор = КлючПартия;
				
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
			РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗаданиеВСледующуюОчередь(
				Выборка.Номенклатура, Выборка.Характеристика, Выборка.СкладОтправитель, Выборка.Назначение);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
			Если СчетчикОшибок < КоличествоПопытокЗаписи() Тогда
				ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		СчетчикОшибок = 1;
		
	КонецЦикла;
	
	КоличествоСтрокВНабореЗаписей = КоличествоСтрокВНабореЗаписей();
	КоличествоСтрок = 0;
	
	Хранилище = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	Пока ЕстьЗаписиВВыборке И Не Выборка.Замещать Цикл // И (Выборка.Действие = "Вставить")
		
		КлючПартия = ?(Выборка.КлючПартия <> ПустойКлючСвязи, Выборка.КлючПартия, Новый УникальныйИдентификатор());
		
		Если Выборка.Количество <> 0 Тогда
		
			// перемещение на склад
			
			НоваяСтрока = Хранилище.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "КлючПартия,КлючНоменклатура,Склад,ДлительностьДоВыпуска");
			
			НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Перемещение;
			
			НоваяСтрока.КлючПартия            = КлючПартия;
			НоваяСтрока.КлючНоменклатура      = Выборка.КлючНоменклатура;
			НоваяСтрока.Склад                 = Выборка.СкладПолучатель;
			НоваяСтрока.ДлительностьДоВыпуска = Выборка.ДлительностьДоВыпуска;
			НоваяСтрока.КлючСвязиСтрокаСпецификации = Выборка.КлючСвязиПеремещение; // поддержка совместимости
			
			НоваяСтрока.Запланировано = Выборка.Количество;
			
			Если Выборка.КлючПартия <> ПустойКлючСвязи Тогда
				НоваяСтрока.Разделитель          = РазделительЗаписи;
				НоваяСтрока.ДополнительнаяЗапись = Истина;
			КонецЕсли;
			
			НоваяСтрока.КлючНабор = КлючПартия;
			
			// перемещение со склада
			
			НоваяСтрока = Хранилище.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "КлючПартия,КлючНоменклатура,Склад,ДлительностьДоВыпуска");
			
			НоваяСтрока.ВидСтроки = Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление;
			
			НоваяСтрока.КлючПартия            = КлючПартия;
			НоваяСтрока.КлючНоменклатура      = ?(Выборка.КлючНоменклатураНаСкладеОтправителе <> ПустойКлючСвязи, Выборка.КлючНоменклатураНаСкладеОтправителе, Новый УникальныйИдентификатор());
			НоваяСтрока.Склад                 = Выборка.СкладОтправитель;
			НоваяСтрока.ДлительностьДоВыпуска = Выборка.ДлительностьДоЗапуска;
			НоваяСтрока.КлючСвязиСтрокаСпецификации = Выборка.КлючСвязиПеремещение; // поддержка совместимости
			
			НоваяСтрока.Требуется = Выборка.Количество;
			
			Если Выборка.КлючПартия <> ПустойКлючСвязи Тогда
				НоваяСтрока.Разделитель          = РазделительЗаписи;
				НоваяСтрока.ДополнительнаяЗапись = Истина;
			КонецЕсли;
			
			НоваяСтрока.КлючНабор = КлючПартия;
			
		КонецЕсли;
		
		КоличествоСтрок = КоличествоСтрок + 2;
		
		ЕстьЗаписиВВыборке = Выборка.Следующий();
		
		Если КоличествоСтрокВНабореЗаписей > КоличествоСтрок И ЕстьЗаписиВВыборке Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНаСкладеОтгрузки = Новый Структура("ВидСтроки", Перечисления.ВидыСтрокСтруктурыЗаказаНаПроизводство.Потребление);
		
		ИзмененныеСтроки = Хранилище.Скопировать(СтруктураНаСкладеОтгрузки, "Номенклатура,Характеристика,Склад,Назначение"); // ТаблицаЗначений
		ИзмененныеСтроки.Свернуть("Номенклатура,Характеристика,Склад,Назначение");
		
		СчетчикОшибок = 1;
		
		Пока Истина Цикл
		
			НачатьТранзакцию();
			Попытка
				
				НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
				НаборЗаписей.Загрузить(Хранилище);
				НаборЗаписей.Записать(Ложь);
				
				РегистрыСведений.ЗаданияКРасчетуСтруктурыЗаказаРаспределениеЗапасов.ДобавитьЗаданияВСледующуюОчередь(
					ИзмененныеСтроки);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
				Если СчетчикОшибок < КоличествоПопытокЗаписи() Тогда
					ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
					СчетчикОшибок = СчетчикОшибок + 1;
					Продолжить;
				КонецЕсли;
				
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
			Прервать;
			
		КонецЦикла;
		
		Хранилище.Очистить();
		
		КоличествоСтрок = 0;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПроблемныеНаборыЗаписейПоАналитике(Аналитика, ВидСтроки, КлючНабор = Null)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСтроки", ВидСтроки);
	Запрос.УстановитьПараметр("КлючНабор", КлючНабор);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.КлючНабор КАК КлючНабор
	|ИЗ
	|	РегистрСведений.СтруктураЗаказа КАК Движения
	|ГДЕ
	|	&Аналитика
	|	И Движения.ВидСтроки = &ВидСтроки И Не Движения.КлючНабор = &КлючНабор";
	
	Список = Новый Массив();
	
	ИмяТаблицы = "Движения";
	ИмяПараметра = "Аналитика";
	
	Для каждого КлючИЗначение Из Аналитика Цикл
		Список.Добавить(ИмяТаблицы + "." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&" + ИмяПараметра, СтрСоединить(Список, " " + "И" + " "));
	
	Для каждого КлючИЗначение Из Аналитика Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.КлючНабор.Установить(Выборка.КлючНабор);
		ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНаборЗаписейПоКлючу(КлючНабор) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтруктураЗаказа.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КлючНабор.Установить(КлючНабор);

	ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область НСИ

Функция ПараметрыВыборкиДанныхСпецификации()
	
	ПараметрыВыборкиДанных = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных("ВыходныеИзделия,ВозвратныеОтходы,МатериалыИУслуги,Трудозатраты,Этапы");
	
	ПараметрыВыборкиДанных.РассчитыватьПризнакЗапланироватьПроизводство = Истина; // ПроизводствоИзДавальческогоСырья
	ПараметрыВыборкиДанных.УчитыватьВероятностьБрака                    = Ложь;
	
	Возврат ПараметрыВыборкиДанных;
	
КонецФункции

Функция ДанныеСпецификации(Изделие, КоличествоИзделия, ДанныеСпецификаций)

	ДанныеСпецификации = ДанныеСпецификаций[Изделие.ИндексСтроки];
	
	Если ДанныеСпецификации = Неопределено Тогда
		Шаблон = НСтр("ru = 'Требуется дополнительное получение данных, кэш спецификаций не содержит данных нужной версии (%1 / %2) или содержит некорректные данные';
						|en = 'Additional data is required. The cache of the bills of materials does not contain data of the required version (%1 / %2) or contains incorrect data'");
		ТекстОшибки = СтрШаблон(Шаблон, Изделие.Спецификация, Изделие.ИдентификаторВерсииДанных);
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,Изделие.ЗаказНаПроизводство,
			ТекстОшибки);
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Изделие);
		ДанныеСпецификации = Справочники.РесурсныеСпецификации.ДанныеСпецификации(ДанныеПоНоменклатуре, ПараметрыВыборкиДанныхСпецификации())[0];
		ДанныеСпецификаций.Вставить(Изделие.ИндексСтроки, ДанныеСпецификации);
	КонецЕсли;
	
	// рассчитываем количество на партию производства
	
	Если КоличествоИзделия <> 0 Тогда
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Изделие);
		Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями И ДанныеСпецификации.МинимальнаяПартияВыпуска <> 0 Тогда
			КоличествоНаОднуПартию = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска * ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Числитель / ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Знаменатель;
			Требуется = КоличествоИзделия;
		Иначе
			КоличествоНаОднуПартию = ДанныеСпецификации.ОсновноеИзделие.КоличествоУпаковокНаЕдиницуПартииВыпуска;
			Требуется = КоличествоИзделия * ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Знаменатель / ДанныеСпецификации.ОсновноеИзделие.ДанныеУпаковки.Числитель;
		КонецЕсли;
		Если КоличествоНаОднуПартию = 0 Тогда
			ПартияВыпуска = Справочники.РесурсныеСпецификации.ПартияВыпуска(0, 1);
		Иначе
			Если ДанныеСпецификации.ВыпускПроизвольнымиПорциями Тогда
				МинимальныйВыпуск = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * ДанныеСпецификации.ОсновноеИзделие.КоэффициентПересчетаВОсновноеИзделие, 3);
				Требуется = Макс(Требуется, МинимальныйВыпуск);
			Иначе
				МинимальныйВыпуск = Окр(ДанныеСпецификации.МинимальнаяПартияВыпуска * КоличествоНаОднуПартию, 3);
				Коэффициент = Требуется / КоличествоНаОднуПартию;
				Если Цел(Коэффициент) <> Коэффициент Тогда
					Требуется = КоличествоНаОднуПартию * (Цел(Коэффициент) + 1);
				КонецЕсли;
				Требуется = Макс(Требуется, МинимальныйВыпуск);
			КонецЕсли;
			ПартияВыпуска = Справочники.РесурсныеСпецификации.ПартияВыпуска(Требуется, КоличествоНаОднуПартию);
		КонецЕсли;
		Справочники.РесурсныеСпецификации.РассчитатьКоличествоНаПартиюВыпуска(ПартияВыпуска, ДанныеСпецификации, ДанныеПоНоменклатуре);
	КонецЕсли;
	
	// исключаем полуфабрикаты производимые на других этапах текущей спецификации
	
	Если ДанныеСпецификации.ВозвратныеОтходы.Количество() > 0 Тогда
		
		СписокСтрокКУдалению = Новый Массив();
		СравнениеЗначений = Новый СравнениеЗначений;
		ПоляГруппировки = Новый Структура("Номенклатура,Характеристика");
		Расчеты = Новый ТаблицаЗначений;
		Расчеты.Колонки.Добавить("Номенклатура");
		Расчеты.Колонки.Добавить("Характеристика");
		Расчеты.Индексы.Добавить("Номенклатура,Характеристика");
		Полуфабрикаты = Новый ТаблицаЗначений;
		Полуфабрикаты.Колонки.Добавить("Номенклатура");
		Полуфабрикаты.Колонки.Добавить("Характеристика");
		Полуфабрикаты.Колонки.Добавить("НомерЭтапа"); 
		Полуфабрикаты.Колонки.Добавить("ГруппаСтрок"); // 0 - приходы, 1 - расходы
		Полуфабрикаты.Колонки.Добавить("Строка");
		ДанныеСпецификации.МатериалыИУслуги.Индексы.Добавить("Номенклатура,Характеристика");
		ДанныеСпецификации.Этапы.Индексы.Добавить("Этап");
		
		Для каждого СтрокаИзделие Из ДанныеСпецификации.ВозвратныеОтходы Цикл
			
			ДанныеЭтапаИзделия = ДанныеСпецификации.Этапы.Найти(СтрокаИзделие.Этап, "Этап");
			
			Если ДанныеЭтапаИзделия = Неопределено Или ДанныеЭтапаИзделия.НомерСледующегоЭтапа = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПоляГруппировки, СтрокаИзделие);
			
			Если Расчеты.НайтиСтроки(ПоляГруппировки).ВГраница() <> -1 Тогда
				Полуфабрикат = Полуфабрикаты.Добавить();
				ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
				Полуфабрикат.Строка = СтрокаИзделие;
				Полуфабрикат.НомерЭтапа = ДанныеЭтапаИзделия.НомерЭтапа;
				Полуфабрикат.ГруппаСтрок = 0;
			Иначе
				ЭтоПолуфабрикат = Ложь;
				НайденныеПолуфабрикаты = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(ПоляГруппировки);
				Для каждого НайденныйПолуфабрикат Из НайденныеПолуфабрикаты Цикл
					Если НайденныйПолуфабрикат.ПроизводитсяВПроцессе
							И НайденныйПолуфабрикат.СпособПолученияМатериала <> Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе Тогда
						Продолжить;
					КонецЕсли;
					ДанныеЭтапаПолуфабриката = ДанныеСпецификации.Этапы.Найти(НайденныйПолуфабрикат.Этап, "Этап");
					Если ДанныеЭтапаПолуфабриката = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЭтоПолуфабрикат = Истина;
					Полуфабрикат = Полуфабрикаты.Добавить();
					ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
					Полуфабрикат.Строка = НайденныйПолуфабрикат;
					Полуфабрикат.НомерЭтапа = ДанныеЭтапаПолуфабриката.НомерЭтапа;
					Полуфабрикат.ГруппаСтрок = 1;
				КонецЦикла;
				Если ЭтоПолуфабрикат Тогда 
					Полуфабрикат = Полуфабрикаты.Добавить();
					ЗаполнитьЗначенияСвойств(Полуфабрикат, СтрокаИзделие);
					Полуфабрикат.Строка = СтрокаИзделие;
					Полуфабрикат.НомерЭтапа = ДанныеЭтапаИзделия.НомерЭтапа;
					Полуфабрикат.ГруппаСтрок = 0;
					ЗаполнитьЗначенияСвойств(Расчеты.Добавить(), СтрокаИзделие);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		
		Полуфабрикаты.Сортировать("Номенклатура, Характеристика, ГруппаСтрок, НомерЭтапа", СравнениеЗначений);
		
		ПоляГруппировки.Номенклатура = Неопределено;
		ПоляГруппировки.Характеристика = Неопределено;
		
		ИндексИзделия = -1;
		ГраницаИзделия = -1;
		
		Для ТекИндекс = 0 По Полуфабрикаты.Количество() - 1 Цикл
			
			ТекСтрока = Полуфабрикаты[ТекИндекс];
			
			Если ПоляГруппировки.Номенклатура <> ТекСтрока.Номенклатура Или ПоляГруппировки.Характеристика <> ТекСтрока.Характеристика Тогда
				ЗаполнитьЗначенияСвойств(ПоляГруппировки, ТекСтрока);
				ИндексИзделия = ТекИндекс;
				ГраницаИзделия = -1;
			КонецЕсли;
			Если ТекСтрока.ГруппаСтрок = 0 Тогда
				ГраницаИзделия = ТекИндекс;
				Продолжить;
			КонецЕсли;
			
			СтрокаМатериал = ТекСтрока;
			
			Пока ГраницаИзделия >= ИндексИзделия И СтрокаМатериал.Строка.Количество > 0 Цикл
				
				СтрокаИзделие = Полуфабрикаты[ИндексИзделия];
				
				Если СтрокаМатериал.НомерЭтапа < СтрокаИзделие.НомерЭтапа Тогда
					Прервать;
				КонецЕсли; 
				
				Распределено = Мин(СтрокаМатериал.Строка.Количество, СтрокаИзделие.Строка.Количество);
				
				СтрокаИзделие.Строка.Количество = СтрокаИзделие.Строка.Количество - Распределено;
				СтрокаИзделие.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска = ?(СтрокаИзделие.Строка.КоличествоУпаковок > 0, СтрокаИзделие.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска -
					(Распределено * СтрокаИзделие.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска) / СтрокаИзделие.Строка.КоличествоУпаковок, 0);
				СтрокаИзделие.Строка.КоличествоУпаковок = СтрокаИзделие.Строка.Количество * СтрокаИзделие.Строка.ДанныеУпаковки.Знаменатель / СтрокаИзделие.Строка.ДанныеУпаковки.Числитель;
				Если СтрокаИзделие.Строка.Количество = 0 Тогда
					СписокСтрокКУдалению.Добавить(СтрокаИзделие.Строка);
				КонецЕсли;
				
				СтрокаМатериал.Строка.Количество = СтрокаМатериал.Строка.Количество - Распределено;
				СтрокаМатериал.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска = ?(СтрокаМатериал.Строка.КоличествоУпаковок > 0, СтрокаМатериал.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска -
					(Распределено * СтрокаМатериал.Строка.КоличествоУпаковокНаЕдиницуПартииВыпуска) / СтрокаМатериал.Строка.КоличествоУпаковок, 0);
				СтрокаМатериал.Строка.КоличествоУпаковок = СтрокаМатериал.Строка.Количество * СтрокаМатериал.Строка.ДанныеУпаковки.Знаменатель / СтрокаМатериал.Строка.ДанныеУпаковки.Числитель;
				Если СтрокаМатериал.Строка.Количество = 0 Тогда
					СписокСтрокКУдалению.Добавить(СтрокаМатериал.Строка);
				КонецЕсли;
				
				Если СтрокаИзделие.Строка.Количество > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИндексИзделия = ИндексИзделия + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого Строка Из СписокСтрокКУдалению Цикл
			Строка.Владелец().Удалить(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

#КонецОбласти

#Область МногопоточноеВыполнение

Процедура ВыполнитьПоток(НаименованиеЗадания, ИмяПроцедуры, ПараметрыПроцедуры, ПротоколРасчета)
	
	МестоВОчереди = ПолучитьМестоВОчередиРасчета(ПротоколРасчета);
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Расчет структуры заказа: %1 (%2)';
										|en = 'Order structure calculation: %1 (%2)'"), НаименованиеЗадания, МестоВОчереди + 1);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ЗапуститьНеВФоне = НЕ ПротоколРасчета.ПараметрыРасчета.РаспараллеливатьРасчет;
	ПараметрыВыполнения.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	РезультатЗапуска = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Если РезультатЗапуска.Статус = "Выполняется" Тогда
		ПротоколРасчета.ОчередьРасчета[МестоВОчереди] = Новый Структура(
			"ИдентификаторЗадания,
			|АдресРезультата,
			|ПараметрыПроцедуры", РезультатЗапуска.ИдентификаторЗадания, РезультатЗапуска.АдресРезультата, ПараметрыПроцедуры);
		СохранитьПоток(РезультатЗапуска.ИдентификаторЗадания);
	Иначе
		Если РезультатЗапуска.Статус = "Выполнено" Тогда
			ЗаписатьРезультатВПротоколРасчета(ПротоколРасчета, РезультатЗапуска.АдресРезультата);
		КонецЕсли;
		Если РезультатЗапуска.Статус = "Ошибка" Тогда
			ЗаписатьОшибкуВПротоколРасчета(
				ПротоколРасчета, ПараметрыПроцедуры, РезультатЗапуска.КраткоеПредставлениеОшибки, РезультатЗапуска.ПодробноеПредставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Работа с потоками в памяти.

Функция ЕстьСвободныеПотоки(ПротоколРасчета)
	
	ЕстьСвободныеПотоки = Ложь;
	ОчередьРасчета = ПротоколРасчета.ОчередьРасчета;
	
	Для Индекс = -ОчередьРасчета.ВГраница() По 0 Цикл
		
		Если ОчередьРасчета[-Индекс] = Неопределено Тогда
			ЕстьСвободныеПотоки = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьСвободныеПотоки;

КонецФункции

Функция ПолучитьМестоВОчередиРасчета(ПротоколРасчета)
	
	МестоВОчереди = 0;
	
	Если ПротоколРасчета.ПараметрыРасчета.РаспараллеливатьРасчет Тогда
		
		Если Не ЕстьСвободныеПотоки(ПротоколРасчета) Тогда ОжидатьЗавершениеРасчета(ПротоколРасчета, Ложь);
		КонецЕсли;
		
		МестоВОчереди = ПротоколРасчета.ОчередьРасчета.Найти(Неопределено);
		
	КонецЕсли;
	
	Возврат МестоВОчереди;
	
КонецФункции

Функция ОжидатьЗавершениеРасчета(ПротоколРасчета, ОжидатьЗавершениеРасчетаВсехПотоков = Истина)
	
	РасчетЗавершен = Ложь;
	ОчередьРасчета = ПротоколРасчета.ОчередьРасчета;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Пока Не РасчетЗавершен Цикл
		
		АктивныеЗадания = Новый Массив();
		ЕстьЗавершенныеЗадания = Ложь;
		
		Для Поток = 0 По ОчередьРасчета.ВГраница() Цикл
			
			Если ОчередьРасчета[Поток] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаданиеВыполнено = ЗаданиеВыполнено(ПротоколРасчета, ОчередьРасчета[Поток]);
			
			Если Не ЗаданиеВыполнено Тогда
				
				АктивныеЗадания.Добавить(ОчередьРасчета[Поток].ИдентификаторЗадания);
				Продолжить;
				
			КонецЕсли;
			
			УдалитьИзВременногоХранилища(ОчередьРасчета[Поток].АдресРезультата);
			УдалитьПоток(ОчередьРасчета[Поток].ИдентификаторЗадания);
			
			ОчередьРасчета[Поток] = Неопределено;
			
			ЕстьЗавершенныеЗадания = Истина;
			
		КонецЦикла;
		
		РасчетЗавершен = (ЕстьЗавершенныеЗадания И Не ОжидатьЗавершениеРасчетаВсехПотоков) ИЛИ Не ЗначениеЗаполнено(АктивныеЗадания);
		
		Если Не РасчетЗавершен Тогда
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(АктивныеЗадания[0]);
			
			Если Задание <> Неопределено Тогда
				
				Задание.ОжидатьЗавершенияВыполнения(ПротоколРасчета.ПараметрыРасчета.ИнтервалПроверкиЗавершенияРасчета);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РасчетЗавершен;
	
КонецФункции

Функция ЗаданиеВыполнено(ПротоколРасчета, ОписаниеПотока)
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ОписаниеПотока.ИдентификаторЗадания);
	
	Если Не Задание = Неопределено Тогда
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			ЗаписатьРезультатВПротоколРасчета(ПротоколРасчета, ОписаниеПотока.АдресРезультата);
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
			ЗаписатьОшибкуВПротоколРасчета(
				ПротоколРасчета, ОписаниеПотока.ПараметрыПроцедуры, КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с потоками в базе данных.

Процедура СохранитьПоток(ИдентификаторПотока)
	
	НаборЗаписей = РегистрыСведений.ПотокиРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПотока.Установить(ИдентификаторПотока);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ИдентификаторПотока = ИдентификаторПотока;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьВсеПотоки()
	
	НаборЗаписей = РегистрыСведений.ПотокиРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьПоток(ИдентификаторПотока)
	
	НаборЗаписей = РегистрыСведений.ПотокиРасчетаСтруктурыЗаказа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПотока.Установить(ИдентификаторПотока);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОтменитьВыполнениеВсехПотоков()
	
	Потоки = Потоки();
	
	Для Поток = 0 По Потоки.ВГраница() Цикл
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(Потоки[Поток]);
		
		УдалитьПоток(Потоки[Поток]);
		
	КонецЦикла;
	
КонецПроцедуры

Функция Потоки()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Потоки.ИдентификаторПотока КАК ИдентификаторПотока
		|ИЗ
		|	РегистрСведений.ПотокиРасчетаСтруктурыЗаказа КАК Потоки";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Работа с ошибками.

Функция НайденыОшибкиПриРасчете(ПротоколРасчета, ПорцияРасчета, ТекущееДействие)
	
	БылиОшибки = ПротоколРасчета.ОшибкиРасчета.Количество() > 0;
	
	Если БылиОшибки
		И ПроверитьСтатистикуОшибок(ПротоколРасчета) Тогда
		
		ОшибкиРасчета = ПротоколРасчета.ОшибкиРасчета;
	
		СтруктураОшибок = Новый Структура();
		СтруктураОшибок.Вставить("ТипОшибки", ТекущееДействие.ПараметрыОбработкиОшибок.ТипОшибки);
		СтруктураОшибок.Вставить("Ошибки", Новый Массив());
		
		ПоляГруппировки = ТекущееДействие.ПараметрыОбработкиОшибок.ПоляГруппировки;
		
		Если ПоляГруппировки = "" Тогда
			ПоляГруппировки = ТекущееДействие.ПоляГруппировки;
		КонецЕсли;
		
		Если ПоляГруппировки = "" Тогда
			ПоляГруппировки = ТекущееДействие.ПоляВыборки;
		КонецЕсли;
		
		Для Индекс = -ОшибкиРасчета.Количество() + 1 По 0 Цикл
			
			ОписаниеОшибки = ОшибкиРасчета[-Индекс];
			
			НоваяПорцияРасчета = РазбитьНаПорции(
				ОписаниеОшибки.ПорцияРасчета,
				ТекущееДействие.ПоляВыборки,
				ПоляГруппировки,
				?(ТекущееДействие.КоличествоПорций = 1, 4, ТекущееДействие.КоличествоПорций),
				Ложь);
			
			Если НоваяПорцияРасчета.Количество() > 1 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПорцияРасчета, НоваяПорцияРасчета);
			Иначе
				
				ЗаказНаПроизводство = РеквизитКоллекции(ОписаниеОшибки.ПорцияРасчета[0], "ЗаказНаПроизводство");
				
				Протокол = РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ПротоколМакет();
				Протокол.Данные = ОписаниеОшибки.ПорцияРасчета;
				Протокол.ТекстСообщения = ОписаниеОшибки.ПодробноеПредставлениеОшибки;
				Протокол = Новый ХранилищеЗначения(Протокол, Новый СжатиеДанных(9));
				
				Ошибка = Новый Структура();
				Ошибка.Вставить("ИдентификаторОшибки", Новый УникальныйИдентификатор());
				Ошибка.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводство);
				Ошибка.Вставить("КраткоеОписание", ОписаниеОшибки.КраткоеПредставлениеОшибки);
				Ошибка.Вставить("Протокол", Протокол);
				Ошибка.Вставить("БлокируетРасчет", Истина);
				
				СтруктураОшибок.Ошибки.Добавить(Ошибка); // неразрешимая ошибка
			
			КонецЕсли;
			
			ОшибкиРасчета.Удалить(-Индекс);
			
		КонецЦикла;
		
		Если СтруктураОшибок.Ошибки.Количество() > 0 Тогда
			РегистрыСведений.ПротоколРасчетаСтруктурыЗаказа.ЗарегистрироватьОшибки(СтруктураОшибок);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат БылиОшибки;
	
КонецФункции

Функция ПроверитьСтатистикуОшибок(ПротоколРасчета)

	Если ПротоколРасчета.ТекТакт > 1
		И ПротоколРасчета.Статистика.Количество() = ПротоколРасчета.Статистика.НайтиСтроки(Новый Структура("Статус", "Ошибка")).Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Все запущенные потоки расчета завершились с ошибкой. Выполнение управляющего потока остановлено.';
								|en = 'All started calculation threads completed with an error. Execution of the thread of control is canceled.'");
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Протокола расчета.

Процедура ЗаписатьРезультатВПротоколРасчета(ПротоколРасчета, АдресРезультата)
	
	РезультатРасчета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	НоваяЗапись = ПротоколРасчета.Статистика.Добавить();
	НоваяЗапись.НомерТакта = ПротоколРасчета.ТекТакт;
	НоваяЗапись.Статус = "Готово";
	
	Если Не РезультатРасчета = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяЗапись, РезультатРасчета);
	КонецЕсли;
	
	СократитьПротокол(ПротоколРасчета);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВПротоколРасчета(ПротоколРасчета, ПараметрыПроцедуры, КраткоеПредставлениеОшибки = "", ПодробноеПредставлениеОшибки = "")

	НоваяЗапись = ПротоколРасчета.Статистика.Добавить();
	НоваяЗапись.НомерТакта = ПротоколРасчета.ТекТакт;
	НоваяЗапись.Статус = "Ошибка";

	ОписаниеОшибки = Новый Структура();
	
	ОписаниеОшибки.Вставить("ПорцияРасчета", ПараметрыПроцедуры.ПорцияРасчета);
	ОписаниеОшибки.Вставить("КраткоеПредставлениеОшибки", КраткоеПредставлениеОшибки);
	ОписаниеОшибки.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	
	ПротоколРасчета.ОшибкиРасчета.Добавить(ОписаниеОшибки);
	
	СократитьПротокол(ПротоколРасчета);
	
КонецПроцедуры

Процедура СократитьПротокол(ПротоколРасчета)
	
	Если Не ПротоколРасчета.Статистика.Количество() > 200 Тогда
		Возврат;
	КонецЕсли;
	
	Сч = 1;
	
	Для каждого ЗаписьПротокола Из ПротоколРасчета.Статистика Цикл
	
		Если Сч > 100 Тогда
			Прервать;
		КонецЕсли;
		
		ПротоколРасчета.Статистика.Удалить(ЗаписьПротокола);
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыРасчета

Функция ПараметрыРасчета() Экспорт
	
	Настройки = СтруктураЗаказаПовтИсп.СлужебныеНастройки();
	
	ПараметрыРасчета = Новый Структура();
	
	ПараметрыРасчета.Вставить("РаспараллеливатьРасчет", Настройки.РаспараллеливатьРасчет);
	ПараметрыРасчета.Вставить("КоличествоПотоков", ?(Настройки.РаспараллеливатьРасчет, Настройки.КоличествоПотоков, 1));
	
	ПараметрыРасчета.Вставить("ПорционнаяВыборка", Настройки.ПорционнаяВыборка);
	ПараметрыРасчета.Вставить("РазмерВыборки", Настройки.РазмерВыборки * ?(Настройки.РаспараллеливатьРасчет, Настройки.КоличествоПотоков, 1));
	
	ПараметрыРасчета.Вставить("МаксГлубинаРасчета", Настройки.МаксГлубинаРасчета);
	ПараметрыРасчета.Вставить("ИскатьЦиклыПосле", Настройки.ИскатьЦиклыПосле);
	
	ПараметрыРасчета.Вставить("ИнтервалПроверкиЗавершенияРасчета", 2);
	
	ПараметрыРасчета.Вставить("РассчитыватьИзменения", Настройки.РассчитыватьИзменения);
	ПараметрыРасчета.Вставить("РазрешитьПовтИспРассчитанныхДанных", Настройки.РазрешитьПовтИспРассчитанныхДанных);
	
	ПараметрыРасчета.Вставить("ДополнительныеПараметры", Настройки.ДополнительныеПараметры);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныеНастройки

Функция СлужебныеНастройки(ПроверитьРежимЭксплуатации = Истина) Экспорт
	
	НастройкиРасчета = СтруктураЗаказа.СтандартныеНастройкиРасчетаСтруктурыЗаказа();
	
	УстановитьПривилегированныйРежим(Истина);
	Хранилище = Константы.НастройкиРасчетаСтруктурыЗаказаНаПроизводство.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		
		ЗаполнитьЗначенияСвойств(НастройкиРасчета, Хранилище.Получить());
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось получить параметры расчета структуры заказа на производство, значения будут приведены к настройкам по умолчанию';
							|en = 'Cannot get the calculation parameters of the production order structure, the values will be reset to the default settings'");
		
		ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,,
						ТекстОшибки);
						
		УстановитьСтандартныеНастройкиРасчетаСтруктурыЗаказа();
		
	КонецПопытки;
	
	Если ПроверитьРежимЭксплуатации И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		НастройкиРасчета.РаспараллеливатьРасчет = Ложь;
		НастройкиРасчета.КоличествоПотоков      = 1;
		
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(НастройкиРасчета);
	
КонецФункции

Функция СтандартныеНастройкиРасчетаСтруктурыЗаказа() Экспорт
	
	НастройкиРасчета = Новый Структура;
	
	НастройкиРасчета.Вставить("РаспараллеливатьРасчет", Ложь);
	НастройкиРасчета.Вставить("КоличествоПотоков", 8);
	
	НастройкиРасчета.Вставить("РазрешитьПовтИспРассчитанныхДанных", Истина);
	
	НастройкиРасчета.Вставить("ПорционнаяВыборка", Истина);
	НастройкиРасчета.Вставить("РазмерВыборки", 1000);
	
	НастройкиРасчета.Вставить("МаксГлубинаРасчета", 125);
	НастройкиРасчета.Вставить("ИскатьЦиклыПосле", 25);
	
	НастройкиРасчета.Вставить("ПорционнаяЗапись", Истина);
	НастройкиРасчета.Вставить("КоличествоСтрокВНабореЗаписей", 100000); // РаспараллеливатьРасчет = Ложь
	
	НастройкиРасчета.Вставить("РассчитыватьИзменения", Истина);
	
	НастройкиРасчета.Вставить("ДополнительныеПараметры", "");
	
	Возврат НастройкиРасчета;
	
КонецФункции

Процедура ЗаписатьНастройкиРасчетаСтруктурыЗаказа(ЗначенияНастроек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиРасчета = СтандартныеНастройкиРасчетаСтруктурыЗаказа();
	
	ЗаполнитьЗначенияСвойств(НастройкиРасчета, ЗначенияНастроек);
	
	Константы.НастройкиРасчетаСтруктурыЗаказаНаПроизводство.Установить(Новый ХранилищеЗначения(НастройкиРасчета));
	
КонецПроцедуры

Процедура ИнициализироватьНастройкиРасчетаСтруктурыЗаказа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Хранилище = Константы.НастройкиРасчетаСтруктурыЗаказаНаПроизводство.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ Хранилище = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтандартныеНастройкиРасчетаСтруктурыЗаказа();
	
КонецПроцедуры

Процедура УстановитьСтандартныеНастройкиРасчетаСтруктурыЗаказа() Экспорт
	
	ЗначенияПараметров = СтандартныеНастройкиРасчетаСтруктурыЗаказа();
	
	ЗаписатьНастройкиРасчетаСтруктурыЗаказа(ЗначенияПараметров);
	
КонецПроцедуры

Процедура УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания)
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Отбор = Новый Структура();
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства.Имя);
		
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
		Если Задания.Количество() <> 1 Тогда
			ЗаписьЖурналаРегистрации(
				СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегламентныеЗадания.СверткаСторноЗаписейВГрафикеПроизводства,,
				НСтр("ru = 'Не найдено регламентное задание: Свертка сторно записей в регистрах структуры заказов на производство';
					|en = 'A scheduled job is not found: The record storno rollup in production order structure registers'"));
			Возврат;
		КонецЕсли;
		
		Задание = Задания[0];
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание.УникальныйИдентификатор, ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства()

	Возврат Константы.ДинамическаяСтруктураЗаказовНаПроизводство.Получить() И СтруктураЗаказа.СлужебныеНастройки().РассчитыватьИзменения;

КонецФункции

Процедура УстановитьИспользованиеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства() Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства());
	УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания);
	
КонецПроцедуры

Процедура УстановитьРасписаниеРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(РасписаниеРегламентногоЗадания) Экспорт

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользоватьРеглЗаданиеСверткаСторноЗаписейВГрафикеПроизводства());
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	УстановитьНастройкиРеглЗаданияСверткаСторноЗаписейВГрафикеПроизводства(ПараметрыЗадания);

КонецПроцедуры

Функция ИнтервалПроверкиЗавершенияРасчета()
	
	Возврат 2;
	
КонецФункции

Функция КоличествоСтрокВНабореЗаписей() Экспорт
	
	Настройки = СтруктураЗаказаПовтИсп.СлужебныеНастройки();
	Возврат ?(Настройки.ПорционнаяЗапись, Настройки.КоличествоСтрокВНабореЗаписей, МаксимальноеКоличествоСтрокВНабореЗаписей());
	
КонецФункции

Функция МаксимальноеКоличествоСтрокВНабореЗаписей()
	
	Возврат 100000;
	
КонецФункции

Функция КоличествоПопытокЗаписи()
	
	Возврат ?(ТранзакцияАктивна(), 1, 3);

КонецФункции

#КонецОбласти

#Область ПротоколРасчета

Функция ПротоколРасчета()
	
	ПротоколРасчета = Новый Структура();
	
	ПротоколРасчета.Вставить("ТекТакт", -1);
	
	ПротоколРасчета.Вставить("НачалоРасчета", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
	ПротоколРасчета.Вставить("ПараметрыРасчета", ПараметрыРасчета()); // кэш текущих значений параметров расчета
	
	ПротоколРасчета.Вставить("ОчередьРасчета", Новый Массив(ПротоколРасчета.ПараметрыРасчета.КоличествоПотоков));
	
	ПротоколРасчета.Вставить("ОшибкиРасчета", Новый Массив());
	
	ПротоколРасчета.Вставить("Статистика", Статистика());
	
	Возврат ПротоколРасчета;
	
КонецФункции

Функция Статистика()
	
	Статистика = Новый ТаблицаЗначений;
	
	Статистика.Колонки.Добавить("НомерТакта", Новый ОписаниеТипов("Число"));
	Статистика.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("Число"));
	Статистика.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	Статистика.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка"));
	Статистика.Колонки.Добавить("РазмерПорции", Новый ОписаниеТипов("Число"));
	Статистика.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	
	Возврат Статистика;
	
КонецФункции

Функция ЗамерыКода() Экспорт
	
	ЗамерыКода = Новый ТаблицаЗначений();
	
	ЗамерыКода.Колонки.Добавить("Операция", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(32)));
	ЗамерыКода.Колонки.Добавить("НомерТакта", Новый ОписаниеТипов("Число"));
	
	ЗамерыКода.Колонки.Добавить("НачалоРасчета", Новый ОписаниеТипов("Число"));
	ЗамерыКода.Колонки.Добавить("КонецРасчета", Новый ОписаниеТипов("Число"));
	
	ЗамерыКода.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	ЗамерыКода.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	
	Возврат ЗамерыКода;
	
КонецФункции

Функция НачатьЗамер(ИмяОперации, ПротоколРасчета) Экспорт
	
	ЗамерыКода = ПротоколРасчета.ЗамерыКода; // ТаблицаЗначений
	
	ЗамерКода = ЗамерыКода.Добавить();
	
	ЗамерКода.Операция = ИмяОперации;
	ЗамерКода.НачалоРасчета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Возврат ЗамерКода;
	
КонецФункции

Функция ЗавершитьЗамер(ЗамерКода, КоличествоСтрок = 0) Экспорт
	
	ЗамерКода.КонецРасчета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЗамерКода.КоличествоСтрок = КоличествоСтрок;
	ЗамерКода.Длительность = (ЗамерКода.КонецРасчета - ЗамерКода.НачалоРасчета) / 1000;
	
	Возврат ЗамерКода.Владелец();
	
КонецФункции

Функция РасшифровкаПротоколаРасчетаПоЗамеруКода(Таблица)
	
	Итоги = Таблица.Скопировать(,"Операция,Длительность,КоличествоСтрок"); // ТаблицаЗначений
	Итоги.Свернуть("Операция", "Длительность,КоличествоСтрок");

	МассивСообщений = Новый Массив;
	МассивСообщений.Добавить(НСтр("ru = 'Протокол расчета';
									|en = 'Calculation protocol'"));
	
	Шаблон = НСтр("ru = '- %1, T: %2, N: %3';
					|en = '- %1, T: %2, N: %3'");
	
	Для каждого Итог Из Итоги Цикл
	
		ТекстСообщения = СтрШаблон(Шаблон, Итог.Операция, Итог.Длительность, Итог.КоличествоСтрок);
		МассивСообщений.Добавить(ТекстСообщения);
		
	КонецЦикла;
	
	ТекстСообщения = СтрСоединить(МассивСообщений, ";" + Символы.ПС);
	Возврат ТекстСообщения;
	
КонецФункции

Процедура ЗаписатьПротоколРасчетаВЖурналРегистрации(ПротоколРасчета)
	
	ВремяВСекундах = Цел((ТекущаяУниверсальнаяДатаВМиллисекундах() - ПротоколРасчета.НачалоРасчета)/1000);
	
	Часы = Цел(ВремяВСекундах/3600);
	Минуты = Цел((ВремяВСекундах - Часы * 3600) / 60);
	Секунды = Макс(ВремяВСекундах - Часы * 3600 - Минуты * 60, 1);
	
	ПродолжительностьЧасы = ?(Часы = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 час';
																										|en = '%1 h'"), Часы));
	ПродолжительностьМинуты = ?(Минуты = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 мин';
																											|en = '%1 min'"), Минуты));
	ПродолжительностьСекунды = ?(Секунды = 0, "", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 сек';
																												|en = '%1 sec'"), Секунды));
	
	ПродолжительностьРасчета = ПродолжительностьЧасы + " " + ПродолжительностьМинуты + " " + ПродолжительностьСекунды;
	ПродолжительностьРасчета = СокрЛП(ПродолжительностьРасчета);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Завершен расчет, продолжительность %1';
									|en = 'Calculation is completed, duration %1'"), ПродолжительностьРасчета);
	
	Если ПротоколРасчета.Свойство("ЗамерыКода") Тогда
		
		ТекстСообщения = ТекстСообщения + Символы.ПС + РасшифровкаПротоколаРасчетаПоЗамеруКода(ПротоколРасчета.ЗамерыКода);
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		ТекстСообщения);

КонецПроцедуры

Процедура ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки) Экспорт
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Неудачная попытка записи (%1): %2';
									|en = 'Unsuccessful attempt to write (%1): %2'"), СчетчикОшибок, ТекстОшибки);
	
	ЗаписьЖурналаРегистрации(СтруктураЗаказа.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,,,
		ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область Запись

Процедура ЗаполнитьИЗаписатьНаборЗаписей(
			НаборЗаписей,
			Таблица,
			Замещать = Ложь,
			ЕстьРазделитель = Ложь,
			КолонкиПоЗначению = Неопределено) Экспорт
	
	КоличествоСтрокВНабореЗаписей = КоличествоСтрокВНабореЗаписей();
	
	Если НЕ Замещать
		И Таблица.Количество() > КоличествоСтрокВНабореЗаписей Тогда
		
		КоличествоСтрок = Таблица.Количество();
		
		ВсегоПорций = Окр(КоличествоСтрок/КоличествоСтрокВНабореЗаписей + 0.5, 0, 0);
		Делитель = Новый Массив(ВсегоПорций);
		
		Счетчик = 0;
		НомерПорции = 0;
		Для каждого Строка Из Таблица Цикл
			Если Счетчик >= КоличествоСтрокВНабореЗаписей Тогда
				Счетчик = 0;
				НомерПорции = НомерПорции + 1;
			КонецЕсли;
			Если Делитель[НомерПорции] = Неопределено Тогда
				РазмерПорции = Мин(КоличествоСтрокВНабореЗаписей, КоличествоСтрок - КоличествоСтрокВНабореЗаписей * НомерПорции);
				Делитель[НомерПорции] = Новый Массив(РазмерПорции);
			КонецЕсли;
			Делитель[НомерПорции][Счетчик] = Строка;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		Для каждого Строки Из Делитель Цикл
			ЗагрузитьСтрокиВНаборЗаписейСДопОбработкой(
				НаборЗаписей,
				Таблица,
				Строки,
				ЕстьРазделитель,
				КолонкиПоЗначению);
			ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Ложь);
		КонецЦикла;
		
	Иначе
		
		ЗагрузитьСтрокиВНаборЗаписейСДопОбработкой(
			НаборЗаписей,
			Таблица,,
			ЕстьРазделитель,
			КолонкиПоЗначению);
		ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Замещать);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьСтрокиВНаборЗаписейСДопОбработкой(НаборЗаписей, Таблица, СписокСтрок = Неопределено, ЕстьРазделитель = Ложь, КолонкиПоЗначению = Неопределено) Экспорт
	
	Если ЕстьРазделитель Тогда
		РазделительЗаписи = Новый УникальныйИдентификатор();
	КонецЕсли;

	Если ЕстьРазделитель Или КолонкиПоЗначению <> Неопределено Тогда
		
		Коллекция = ?(СписокСтрок = Неопределено, Таблица, СписокСтрок);
		
		Для каждого Строка Из Коллекция Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			
			Если ЕстьРазделитель Тогда
				НоваяЗапись.Разделитель = РазделительЗаписи;
			КонецЕсли;
			
			Если КолонкиПоЗначению <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяЗапись, КолонкиПоЗначению);
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		Если СписокСтрок <> Неопределено Тогда
			
			НаборЗаписей.Загрузить(Таблица.Скопировать(СписокСтрок));
			
		Иначе
			
			НаборЗаписей.Загрузить(Таблица);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьНаборЗаписейВПопытке(НаборЗаписей, Замещать)
	
	СчетчикОшибок = 1;
	
	Пока Истина Цикл
		
		Попытка
			
			НаборЗаписей.Записать(Замещать);
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если СчетчикОшибок < КоличествоПопытокЗаписи() Тогда
				ЗаписатьНеудачнуюПопыткуЗаписиВЖурналРегистрации(СчетчикОшибок, ТекстОшибки);
				СчетчикОшибок = СчетчикОшибок + 1;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Разбивает исходную таблицу на порции
// 
// Параметры:
// 	Таблица - ТаблицаЗначений - исходная таблица
// 	ПоляВыборки - Строка - поля выборки
// 	ПоляГруппировки - Строка - поля группировки
// 	КоличествоПорций - Число - количество порций
// 	ТаблицаУпорядочена - Булево - призна, таблица упорядочена
// Возвращаемое значение:
// 	Массив - порции
//
Функция РазбитьНаПорции(Таблица, ПоляВыборки, ПоляГруппировки = "", КоличествоПорций = 1, ТаблицаУпорядочена = Истина)
	
	Результат = Новый Массив();
	
	Если КоличествоПорций > 1 Тогда
		
		РазмерПорции = Окр((Таблица.Количество() / КоличествоПорций) + 0.5, 0, 0);
		
		СписокГруппировок = СтрРазделить(ПоляГруппировки, ",");
		
		Если Не ТаблицаУпорядочена И ПоляГруппировки <> "" Тогда
			Таблица.Сортировать(ПоляГруппировки, Новый СравнениеЗначений);
		КонецЕсли;
		
		Таблица.Колонки.Добавить("Делитель", ОбщегоНазначения.ОписаниеТипаЧисло(4,0));
		
		Делитель = 1;
		Сч = 0;
		Для каждого Строка Из Таблица Цикл
			Если Сч >= РазмерПорции
				И (ПоляГруппировки = "" ИЛИ ПоляГруппировки <> "" И ЕстьРазличияВКолонках(Таблица[Таблица.Индекс(Строка)-1], Строка, СписокГруппировок)) Тогда
				Делитель = Делитель + 1;
				Сч = 0;
			КонецЕсли;
			Строка.Делитель = Делитель;
			Сч = Сч + 1;
		КонецЦикла;
		
		Пока Делитель > 0 Цикл
			Результат.Добавить(Таблица.Скопировать(Новый Структура("Делитель", Делитель), ПоляВыборки));
			Делитель = Делитель - 1;
		КонецЦикла;
		
	ИначеЕсли Таблица.Количество() > 0 Тогда
		Результат.Добавить(Таблица);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура СоединитьТаблицы(Таблица, Таблица1)
	
	Для X = 0 По Таблица1.Количество() - 1 Цикл
		Таблица.Вставить(0);
	КонецЦикла;
	
	Для X = 0 По Таблица1.Колонки.Количество() - 1 Цикл 
		Таблица.ЗагрузитьКолонку(Таблица1.ВыгрузитьКолонку(X), X);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьРазличияВКолонках(Строка1, Строка2, Колонки)
	
	ЕстьРазличия = Ложь;
	
	Для каждого Колонка Из Колонки Цикл
		
		Если Строка1[Колонка] <> Строка2[Колонка] Тогда 
			ЕстьРазличия = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьРазличия;
	
КонецФункции

Функция СравнитьЗначенияПолейКлюча(ПервоеЗначение, ВтороеЗначение, ПоляКлюча, СравнениеЗначений) Экспорт
	
	Результат = 0;
	
	Для Каждого Поле Из ПоляКлюча Цикл
		Результат = СравнениеЗначений.Сравнить(ПервоеЗначение[Поле], ВтороеЗначение[Поле]);
		Если Результат <> 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция СкопироватьКолонки(Колонки, КопируемыеКолонки = "", ИсключаемыеКолонки = "", ДобавляемыеКолонки = Неопределено) Экспорт
	
	СписокКопируемыхКолонок = СтрРазделить(КопируемыеКолонки, ",");
	
	НоваяТаблица = Новый ТаблицаЗначений();
	
	Для каждого Колонка из Колонки Цикл
		
		Если КопируемыеКолонки <> "" И СписокКопируемыхКолонок.Найти(Колонка.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяТаблица.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "NULL"));
		
	КонецЦикла;
	
	Если ДобавляемыеКолонки <> Неопределено Тогда
		
		Для каждого Колонка из ДобавляемыеКолонки Цикл
		
			НоваяТаблица.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НоваяТаблица;

КонецФункции

Функция НайтиСтрокуПоЗначениюКолонкиВМассивеСтрок(МассивСтрок, ИмяКолонки, Значение)

	НайденнаяСтрока = Неопределено;
	
	Для каждого Строка Из МассивСтрок Цикл
	
		Если Строка[ИмяКолонки] <> Значение Тогда Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = Строка;
		Прервать;
		
	КонецЦикла;
	
	Возврат НайденнаяСтрока;
	
КонецФункции

Процедура СвернутьТаблицуИУдалитьНулевыеСтроки(Таблица, КолонкиГруппировки, КолонкиСуммирования)

	Ресурсы = СтрРазделить(КолонкиСуммирования, ",");
	
	ИзмененныеСтроки = Таблица.Скопировать(, КолонкиГруппировки + "," + КолонкиСуммирования); // ТаблицаЗначений
	ИзмененныеСтроки.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	
	Для Индекс = -ИзмененныеСтроки.Количество() + 1 По 0 Цикл
		
		ТекущаяСтрока = ИзмененныеСтроки[-Индекс];
		Удалить = Истина;
		
		Для каждого Ресурс Из Ресурсы Цикл
			
			Если ТекущаяСтрока[Ресурс] <> 0 Тогда
				Удалить = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Удалить Тогда
			ИзмененныеСтроки.Удалить(-Индекс);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиИзТаблицы(Таблица, Строки)
	
	Для каждого Строка Из Строки Цикл Таблица.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ПривестиЗначение(ОписаниеТипов, Значение)

	Результат = ОписаниеТипов.ПривестиЗначение(Значение);
	Возврат Результат;
	
КонецФункции

Функция ИменаКолонокТаблицыСтрокой(ИсточникКолонок, ИсключаемыеКолонки = "") Экспорт
	
	Если ТипЗнч(ИсточникКолонок) = Тип("ТаблицаЗначений")
	 ИЛИ ТипЗнч(ИсточникКолонок) = Тип("РезультатЗапроса") Тогда
		Колонки = ИсточникКолонок.Колонки;
	Иначе
		Колонки = ИсточникКолонок;
	КонецЕсли;
	
	ИменаКолонок = "";
	СтруктураИсключаемыеКолонки = Новый Структура(ИсключаемыеКолонки);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Если НЕ СтруктураИсключаемыеКолонки.Свойство(Колонка.Имя) Тогда
			ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + "%1" + Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

Функция ТекстЗапросаПоместитьТаблицуЗначенийВоВременнуюТаблицу(ИмяВременнойТаблицы, Колонки, Знач ПоляТаблицы = "", Знач УсловиеОтбора = "", Знач ПоляИндексирования = "") Экспорт
	
	ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ
		|	&Поля
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	&ИмяВременнойТаблицы КАК Таблица
		|ГДЕ &УсловиеОтбора", "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Если ПоляТаблицы = "" Тогда
		ПоляТаблицы = ИменаКолонокТаблицыСтрокой(Колонки);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", Символы.ПС + "Таблица.")));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ?(УсловиеОтбора = "", "ИСТИНА", УсловиеОтбора));
	
	Если ПоляИндексирования <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + " " + "ИНДЕКСИРОВАТЬ ПО" + " " + ПоляИндексирования;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Таблица, Знач ПоляТаблицы = "", Знач УсловиеОтбора = "", Знач ПоляИндексирования = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		ТекстЗапросаПоместитьТаблицуЗначенийВоВременнуюТаблицу(ИмяВременнойТаблицы, Таблица.Колонки, ПоляТаблицы, УсловиеОтбора, ПоляИндексирования);
	Запрос.УстановитьПараметр(ИмяВременнойТаблицы, Таблица);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РеквизитКоллекции(Коллекция, ИмяРеквизита)
	
	СтруктураРеквизита = Новый Структура(ИмяРеквизита);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Коллекция);
	
	Возврат СтруктураРеквизита[ИмяРеквизита];

КонецФункции

Функция СтруктураПоПолям(Коллекция, СписокПолей)

	Результат = Новый Структура(СписокПолей);
	ЗаполнитьЗначенияСвойств(Результат, Коллекция);
	Возврат Результат;

КонецФункции

Функция ГраницаПериода()
	
	Возврат '39991231235959';
	
КонецФункции

Функция ТипЧисло()
	
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
	
КонецФункции

Процедура СортироватьМассивСтрок(Массив, Колонка, lb, ub)
	
	X = lb;
	Y = ub;
	
	Граница = Массив[Цел((X + Y)/2)][Колонка]; // опорный элемент
	
	Пока X <= Y Цикл
		
		Пока Массив[X][Колонка] < Граница Цикл
			X = X + 1;
		КонецЦикла;
		
		Пока Массив[Y][Колонка] > Граница Цикл
			Y = Y - 1;
		КонецЦикла;
		
		Если X <= Y Тогда
			Буфер = Массив[X];
			Массив[X] = Массив[Y];
			Массив[Y] = Буфер;
			X = X + 1;
			Y = Y - 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если lb < Y Тогда
		СортироватьМассивСтрок(Массив, Колонка, lb, Y);
	КонецЕсли;
	
	Если X < ub Тогда
		СортироватьМассивСтрок(Массив, Колонка, X, ub);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Расчет структуры заказа на производство';
				|en = 'Production order structure calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
