
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия          = "3.1.30.124";
	Обработчик.Процедура       = "ИнтеграцияУправлениеПерсоналом.ЗаполнитьПриложениеВСостоянииПодключения";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Версия          = "3.1.30.124";
	Обработчик.Процедура       = "ИнтеграцияУправлениеПерсоналом.ЗаполнитьПриложениеВИсключенияхИзПравил";
	
КонецПроцедуры

#КонецОбласти

// Возвращает значение настройки интеграции - ПубликоватьСтруктуруЮридическихЛиц.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ПубликоватьСтруктуруЮридическихЛиц() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Настройки.ПубликоватьСтруктуруЮридическихЛиц;

КонецФункции

Функция ИспользуетсяКабинетСотрудника() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяСервисКабинетСотрудника");

КонецФункции

Функция Используется1СПерсонал() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяПриложение1СПерсонал");

КонецФункции

Функция ИспользуетсяИнтеграция() Экспорт

	Возврат Используется1СПерсонал()
		Или ИспользуетсяКабинетСотрудника();

КонецФункции

Функция ДоступенРасширенныйФункционал() Экспорт

	Возврат ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы");

КонецФункции

// Возвращает массив используемых приложений.
//
// Возвращаемое значение:
//	Массив - значения массива ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Функция ИспользуемыеПриложения() Экспорт

	Приложения = Новый Массив;
	Если Используется1СПерсонал() Тогда
		Приложения.Добавить(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	КонецЕсли;
	Если ИспользуетсяКабинетСотрудника() Тогда
		Приложения.Добавить(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	КонецЕсли;
	
	Возврат Приложения;

КонецФункции

Функция ДоступенРасчетЗарплатыДляНебольшихОрганизаций() Экспорт

	ИмяОпции = "РасчетЗарплатыДляНебольшихОрганизаций";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	Возврат ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);

КонецФункции

Функция ДоступнаВыгрузкаВидовСправок() Экспорт

	ИмяОпции = "ИспользоватьЗапросыСправокСотрудником";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	Использовать = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	
	Возврат Использовать;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КлючиМенеджераТокен

// Возвращает ключи менеджера из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение
// 		Неопределено или Структура со свойствами
// 			* ИдентификаторКлиента
// 			* СекретКлиента.
//
Функция КлючиМенеджера(Приложение) Экспорт
	
	АдресКлючей = АдресХраненияКлючейМенеджера(Приложение);
	Если Не ЗначениеЗаполнено(АдресКлючей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		АдресКлючей, "ИдентификаторКлиента,СекретКлиента");

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

// Сохраняет ключи приложения в безопасном хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 		Ключи - Структура
// 			* ИдентификаторКлиента
// 			* СекретКлиента
//
Процедура СохранитьКлючиМенеджера(Приложение, Ключи) Экспорт

	АдресКлючей = АдресХраненияКлючейМенеджера(Приложение);
	Если Не ЗначениеЗаполнено(АдресКлючей) Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресКлючей, Ключи.ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресКлючей, Ключи.СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

// Удаляет в безопасном хранилище ключи и токен менеджера.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Процедура ОчиститьКлючиТокенМенеджера(Приложение) Экспорт

	АдресКлючей = АдресХраненияКлючейМенеджера(Приложение);
	АдресТокена = АдресХраненияТокенаМенеджера(Приложение);
	
	Если ЗначениеЗаполнено(АдресКлючей) Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресКлючей);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресТокена) Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресТокена);
	КонецЕсли;

КонецПроцедуры

// Возвращает адрес Токена в безопасном хранилище.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Функция АдресХраненияТокенаМенеджера(Приложение) Экспорт

	АдресТокена = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		АдресТокена = "1СПерсонал.Менеджер.Токен";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		АдресТокена = "1СКабинетСотрудника.Менеджер.Токен";
	КонецЕсли;
	
	Возврат АдресТокена;
	
КонецФункции

// Возвращает адрес ключей менеджера в безопасном хранилище.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Функция АдресХраненияКлючейМенеджера(Приложение)

	АдресКлючей = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		АдресКлючей = "1СПерсонал.Менеджер.Ключи";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		АдресКлючей = "1СКабинетСотрудника.Менеджер.Ключи";
	КонецЕсли;
	
	Возврат АдресКлючей;
	
КонецФункции

// Удаляет токен из безопасного хранилища.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Процедура УдалитьТокенМенеджера(Приложение) Экспорт

	АдресТокена = АдресХраненияТокенаМенеджера(Приложение);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресТокена);

КонецПроцедуры

// Проверяет наличие ключей приложения.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение
// 		Булево
//
Функция ЕстьКлючиМенеджера(Приложение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат (КлючиМенеджера(Приложение) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область КлючиПриложенияТокен

// Возвращает ключи приложения из безопасного хранилища.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение
// 		Неопределено или Структура со свойствами
// 			* ИдентификаторКлиента
// 			* СекретКлиента.
//
Функция КлючиПриложения(Приложение) Экспорт
	
	АдресКлючей = АдресХраненияКлючейПриложения(Приложение);
	Если Не ЗначениеЗаполнено(АдресКлючей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		АдресКлючей, "ИдентификаторКлиента,СекретКлиента");

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

// Сохраняет ключи приложения в безопасном хранилище.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 		Ключи - Структура
// 			* ИдентификаторКлиента
// 			* СекретКлиента
//
Процедура СохранитьКлючиПриложения(Приложение, Ключи) Экспорт

	АдресКлючей = АдресХраненияКлючейПриложения(Приложение);
	Если Не ЗначениеЗаполнено(АдресКлючей) Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресКлючей, Ключи.ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(АдресКлючей, Ключи.СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

// Удаляет в безопасном хранилище ключи и токен приложения.
// Вызывающий код должен самостоятельно устанавливать привилегированный режим.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Процедура ОчиститьКлючиТокенПриложения(Приложение) Экспорт

	АдресКлючей = АдресХраненияКлючейПриложения(Приложение);
	АдресТокена = АдресХраненияТокенаПриложения(Приложение);
	
	Если ЗначениеЗаполнено(АдресКлючей) Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресКлючей);
	КонецЕсли;
	Если ЗначениеЗаполнено(АдресТокена) Тогда
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресТокена);
	КонецЕсли;

КонецПроцедуры

// Возвращает адрес Токена в безопасном хранилище.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Функция АдресХраненияТокенаПриложения(Приложение) Экспорт

	АдресТокена = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		АдресТокена = "1СПерсонал.Токен";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		АдресТокена = "1СКабинетСотрудника.Приложение.Токен";
	КонецЕсли;
	
	Возврат АдресТокена;
	
КонецФункции

// Возвращает адрес ключей в безопасном хранилище.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Функция АдресХраненияКлючейПриложения(Приложение)

	АдресКлючей = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		АдресКлючей = "1СПерсонал.Ключи";
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		АдресКлючей = "1СКабинетСотрудника.Приложение.Ключи";
	КонецЕсли;
	
	Возврат АдресКлючей;
	
КонецФункции

// Удаляет токен из безопасного хранилища.
//
// Параметры
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
Процедура УдалитьТокенПриложения(Приложение) Экспорт

	АдресТокена = АдресХраненияТокенаПриложения(Приложение);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(АдресТокена);

КонецПроцедуры

#КонецОбласти

#Область ИменаСобытийЖурналаРегистрации

Функция ИменаСобытийЖР(Приложение) Экспорт

	ИменаСобытий = Новый Структура("
	|Обмен,
	|Запрос,
	|Ответ,
	|Конвертация,
	|ПрочиеСобытия,
	|Обсуждения,
	|Отключение,
	|ИмяОбщегоСобытияЖР");
	
	НазваниеГруппыСобытийЖР 	= НазваниеГруппыСобытийЖР(Приложение);
	ИменаСобытий.Обмен 			= ИмяСобытияОбмен(НазваниеГруппыСобытийЖР);
	ИменаСобытий.ПрочиеСобытия 	= ИмяСобытияПрочиеСобытия(НазваниеГруппыСобытийЖР);
	ИменаСобытий.Запрос 		= ИмяСобытияЗапрос(НазваниеГруппыСобытийЖР);
	ИменаСобытий.Ответ 			= ИмяСобытияОтвет(НазваниеГруппыСобытийЖР);
	ИменаСобытий.Конвертация 	= ИмяСобытияКонвертация(НазваниеГруппыСобытийЖР);
	ИменаСобытий.Отключение 	= ИмяСобытияОтключение(НазваниеГруппыСобытийЖР);
	ИменаСобытий.Обсуждения 	= ИмяСобытияОбсуждения(НазваниеГруппыСобытийЖР);
	
	// Имя общего события - ИнтеграцияУправлениеПерсоналом.
	ИменаСобытий.ИмяОбщегоСобытияЖР = ИмяОбщегоСобытияЖР();
	
	Возврат ИменаСобытий;

КонецФункции

Функция НазваниеГруппыСобытийЖР(Приложение) Экспорт
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		НазваниеГруппыСобытийЖР = НСтр("ru = '1С:Персонал';
										|en = '1C:Human Resources'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		НазваниеГруппыСобытийЖР = НСтр("ru = '1С:Кабинет сотрудника';
										|en = '1C:Employee Account'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Возврат НазваниеГруппыСобытийЖР;
	
КонецФункции

Функция ИмяСобытияОбмен(НазваниеГруппыСобытийЖР)

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Обмен';
															|en = 'Exchange'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЗапрос(НазваниеГруппыСобытийЖР)

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Запрос';
															|en = 'Request'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияОтвет(НазваниеГруппыСобытийЖР)

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Ответ';
															|en = 'Response'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПрочиеСобытия(НазваниеГруппыСобытийЖР)
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Прочие события';
															|en = 'Other events'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияКонвертация(НазваниеГруппыСобытийЖР)
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Конвертация';
															|en = 'Conversion'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияОтключение(НазваниеГруппыСобытийЖР)
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Отключение';
															|en = 'Disconnect'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяОбщегоСобытияЖР() Экспорт
	
	Возврат НСтр("ru = 'ИнтеграцияУправлениеПерсоналом';
				|en = 'ИнтеграцияУправлениеПерсоналом'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ИмяСобытияОбсуждения(НазваниеГруппыСобытийЖР)
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР, НСтр("ru = 'Обсуждения';
															|en = 'Conversations'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.';
				|en = 'Подробности см. в журнале регистрации.'");

КонецФункции

#КонецОбласти

#Область Версионирование

// Подбирает версию формата.
// Параметры:
// 		ВерсияИзПриложения - Строка - версия формата приложения
// 		ПоддерживаемыеВерсии - Массив - поддерживаемые версии формата
// Возвращаемое значение:
// 		Строка - версия формата.
//
Функция ПодобратьВерсию(ВерсияИзПриложения, ПоддерживаемыеВерсии) Экспорт
	
	ДоступныеВерсии = Новый ТаблицаЗначений;
	ДоступныеВерсии.Колонки.Добавить("Версия");
	Для Каждого Версия Из ПоддерживаемыеВерсии Цикл
		ДоступныеВерсии.Добавить().Версия = Версия;
	КонецЦикла;
	ДоступныеВерсии.Сортировать("Версия Убыв");

	ПодобраннаяВерсия = Неопределено;
	Для каждого СтрокаТЗ Из ДоступныеВерсии Цикл
		Если СравнитьВерсии(ВерсияИзПриложения, СтрокаТЗ.Версия) >= 0 Тогда
			ПодобраннаяВерсия = СтрокаТЗ.Версия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодобраннаяВерсия;
	
КонецФункции

// Сравнить две строки версий.
//
// Параметры:
//  СтрокаВерсии1  - Строка - номер версии в формате 0.0 либо 0.0.
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии.
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//             Меньше 0 если СтрокаВерсии1 < СтрокаВерсии2.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Результат = 0;
	Если СокрЛП(СтрокаВерсии1) = СокрЛП(СтрокаВерсии2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Версия1 = СтрРазделить(СтрокаВерсии1, ".");
	Версия2 = СтрРазделить(СтрокаВерсии2, ".");
	
	// Значимыми при сравнении являются первые 2 разряда (всегда число).
	Для Разряд = 0 По 1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияФорматаМеньшеВерсии(ВерсияФормата, ВерсияДляСравнения) Экспорт

	Если ПустаяСтрока(ВерсияФормата) Тогда
		Возврат Истина;
	Иначе
		Возврат СравнитьВерсии(ВерсияФормата, ВерсияДляСравнения) < 0;
	КонецЕсли;

КонецФункции 

Функция ВерсияФорматаБольшеИлиРавнаВерсии(ВерсияФормата, ВерсияДляСравнения) Экспорт

	Если ПустаяСтрока(ВерсияФормата) Тогда
		Возврат Ложь;
	Иначе
		Возврат СравнитьВерсии(ВерсияФормата, ВерсияДляСравнения) >= 0;
	КонецЕсли;

КонецФункции

// Поддерживаемые версии объектов.
Функция ВерсииDTO(Приложение) Экспорт

	Версии = Новый Массив;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаполнитьВерсииDTO(Версии);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ЗаполнитьВерсииDTO(Версии);
	КонецЕсли;
	
	Возврат Версии;

КонецФункции

// Поддерживаемые версии API.
Функция ВерсииAPI(Приложение) Экспорт

	Версии = Новый Массив;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаполнитьВерсииAPI(Версии);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ЗаполнитьВерсииAPI(Версии)
	КонецЕсли;
	
	Возврат Версии;

КонецФункции

Процедура УстановитьНовуюВерсиюDTO(Приложение, ТекущаяВерсияDTO, НоваяВерсияDTO) Экспорт

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.УстановитьНовуюВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO);
	Иначе
		ИнтеграцияКабинетСотрудника.УстановитьНовуюВерсиюDTO(ТекущаяВерсияDTO, НоваяВерсияDTO);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНовуюВерсиюAPI(Приложение, ТекущаяВерсияAPI, НоваяВерсияAPI) Экспорт

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.УстановитьНовуюВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI);
	Иначе
		ИнтеграцияКабинетСотрудника.УстановитьНовуюВерсиюAPI(ТекущаяВерсияAPI, НоваяВерсияAPI);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПодключитьПриложениеЛокально

Процедура ПодключитьПриложениеЛокальноФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	Отказ = Ложь;
	
	Приложение 	= Параметры.Приложение;
	НастройкиПодключения = Параметры.НастройкиПодключения;

	ШаблонСообщения = НСтр("ru = 'Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.';
							|en = 'Подключение недоступно. Указаны неверные настройки подключения или недоступно приложение по адресу ""%1"". Обратитесь к вашему администратору.'");
	ТекстСообщенияОбОшибке = СтрШаблон(ШаблонСообщения, НастройкиПодключения.АдресПриложения);
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Истина);
	
	// Проверка ключей и доступности приложения.
	Ответ = МенеджерОбмена.ПроверитьНастройкиПодключения(НастройкиПодключения);
	Если Ответ.КодСостояния = Неопределено Или Ответ.КодСостояния <> 200 Тогда
		Результат.СообщениеОбОшибке = ТекстСообщенияОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	// Проверка ключей выполнена.
	// Сохраняем ключи и настройки подключения.
	// Получаем идентификатор приложения.
	ИдентификаторПриложения = "";
	Если Не Отказ Тогда
		
		СохранитьКлючиПриложения(Приложение, НастройкиПодключения.Ключи); 
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
			ИнтеграцияКабинетСотрудника.ЗаписатьАдресПриложения(НастройкиПодключения.АдресПриложения);
		ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Интеграция1СПерсонал.ЗаписатьАдресПриложения(НастройкиПодключения.АдресПриложения);
		КонецЕсли;
		
		ИнформацияОПриложении = МенеджерОбмена.ИнформацияОПриложении();
		Если ИнформацияОПриложении = Неопределено Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			ИдентификаторПриложения = ИнформацияОПриложении.ИдентификаторПриложения;
			Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.';
										|en = 'Подключение недоступно. Приложение еще не зарегистрировано, обратитесь к вашему администратору.'");
				Результат.СообщениеОбОшибке = СообщениеОбОшибке;
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Версии DTO и API.
	Если Не Отказ Тогда
		
		ВерсияAPI = "";
		ВерсияDTO = "";
		
		Ответ = МенеджерОбмена.ВерсииФорматаОбменаПриложения();
		Если Ответ.Использовать = Истина Тогда
			ВерсииФормата = Ответ.ОбъектВерсииФормата;
			Если ЗначениеЗаполнено(ВерсииФормата.ВерсияDTO) И ЗначениеЗаполнено(ВерсииФормата.ВерсияAPI) Тогда
				ВерсияAPI = ПодобратьВерсию(ВерсииФормата.ВерсияAPI, ВерсииAPI(Приложение));
				ВерсияDTO = ПодобратьВерсию(ВерсииФормата.ВерсияDTO, ВерсииDTO(Приложение));
				Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
					ИнтеграцияКабинетСотрудника.ЗаписатьВерсииФормата(ВерсияAPI, ВерсияDTO);
				ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
					Интеграция1СПерсонал.ЗаписатьВерсииФормата(ВерсияAPI, ВерсияDTO);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Публикация ответственного.
	Если Не Отказ Тогда 
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
			БылиОшибки = ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(НастройкиПодключения.Ответственный);
		ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			БылиОшибки = Интеграция1СПерсонал.ЗарегистрироватьОпубликоватьОтветственного(НастройкиПодключения.Ответственный);
		КонецЕсли;
		
		Если БылиОшибки Тогда
			Результат.СообщениеОбОшибке = НСтр("ru = 'Не удалось опубликовать ответственное лицо.';
												|en = 'Не удалось опубликовать ответственное лицо.'");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка администратора.
	Если Не Отказ Тогда
		
		Объект = Новый Структура("ФизическоеЛицо", НастройкиПодключения.Ответственный);
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВнешнееФизическоеЛицо;
		Ответ = МенеджерОбмена.СоздатьАдминистратора(Объект, ТипОбъекта);
		Если Ответ.БылиОшибки Или МенеджерОбмена.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			Результат.СсылкаДляАдминистратора = Ответ.СсылкаДляАдминистратора;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОчиститьКлючиТокенПриложения(Приложение);
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
			ИнтеграцияКабинетСотрудника.ОчиститьНастройкиПодключения();
		ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Интеграция1СПерсонал.ОчиститьНастройкиПодключения();
		КонецЕсли;
		
	Иначе
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
			ИнтеграцияКабинетСотрудника.ЗаписатьНастройкиПодключенияЛокальные(ИдентификаторПриложения, НастройкиПодключения.Ответственный);
			ИнтеграцияКабинетСотрудникаОбмен.ВыгрузитьНастройкиПриложения(МенеджерОбмена);
		ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Интеграция1СПерсонал.ЗаписатьНастройкиПодключенияЛокальные(ИдентификаторПриложения, НастройкиПодключения.Ответственный);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновлениеОтветственногоФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Приложение 		= Параметры.Приложение;
	Ответственный 	= Параметры.Ответственный;
	
	Результат = Новый Структура("НовыйОтветственный,СообщениеОбОшибке");
	Отказ = Ложь;
	
	ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось изменить ответственное лицо.';
									|en = 'Не удалось изменить ответственное лицо.'");
	СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		БылиОшибки = ИнтеграцияКабинетСотрудника.ЗарегистрироватьОпубликоватьОтветственного(Ответственный);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		БылиОшибки = Интеграция1СПерсонал.ЗарегистрироватьОпубликоватьОтветственного(Ответственный);
	КонецЕсли;
	
	Если БылиОшибки Тогда
		Результат.СообщениеОбОшибке = СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерОбмена = ИнтеграцияУправлениеПерсоналомОбмен.НовыйМенеджерОбмена(Приложение, Истина);
		
		Объект = Новый Структура("ФизическоеЛицо", Ответственный);
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ВнешнееФизическоеЛицо;
		Ответ = МенеджерОбмена.СоздатьАдминистратора(Объект, ТипОбъекта);
		Если Ответ.БылиОшибки Или МенеджерОбмена.БылиОшибки Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", ТекстСообщенияОбОшибке, ПодробностиВЖурналеРегистрации());
			Отказ = Истина;
		Иначе
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
				ИнтеграцияКабинетСотрудника.ЗаписатьНовогоОтветственногоЗаПриложение(Ответственный);
			ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				Интеграция1СПерсонал.ЗаписатьНовогоОтветственногоЗаПриложение(Ответственный);
			КонецЕсли;
			Результат.НовыйОтветственный = Ответственный;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область ПравилаВыгрузки

Процедура СохранитьНовыеПравилаВыгрузки(Приложение, НовыеПравила) Экспорт
	
	ПозицииПравил = Новый Соответствие;
	Для каждого СтрокаТЗ Из НовыеПравила Цикл
		Если ТипЗнч(СтрокаТЗ.Ссылка) = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
			ПозицииПравил.Вставить(СтрокаТЗ.Ссылка, Истина);
		КонецЕсли;
	КонецЦикла;
	ЕстьПравила = ЗначениеЗаполнено(ПозицииПравил);
	
	Если Не ПубликоватьСтруктуруЮридическихЛиц() Тогда
		ОбновитьСтруктуруПредприятия();
	КонецЕсли;
	
	ПроверитьОбновитьИсключенияИзПравил(Приложение);
	
	ОбъектыДляРегистрации = Новый Структура("
	|НовыеПравила,
	|ВыгружаемыеОбъекты,
	|ИзмененияДляОбмена,
	|БудущиеСобытия,
	|ИзмененияДанныхГрафика,
	|ФизическиеЛицаОрганизации");
	ОбъектыДляРегистрации.Вставить("НовыеПравила", НовыеПравила);
	
	Если ЕстьПравила Тогда
		
		Приложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Приложение); 
		
		// Получим данные сотрудников:
		// - будущие кадровые события
		// - данные рабочих мест.
		ДанныеСотрудников = ДанныеРабочихМест(Приложения);
		РабочиеМеста 			= ДанныеСотрудников.РабочиеМеста;
		БудущиеКадровыеСобытия 	= ДанныеСотрудников.БудущиеКадровыеСобытия;
		
		// Заполняем таблицу БудущиеСобытия.
		БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
		Для каждого СтрокаТЗ Из БудущиеКадровыеСобытия Цикл
			НоваяСтрока = БудущиеСобытия.Добавить();
			НоваяСтрока.Приложение 	= Приложение;
			НоваяСтрока.Событие 	= Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные;
			НоваяСтрока.Объект 		= СтрокаТЗ.Объект;
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаСобытия;
		КонецЦикла;
		
		РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(РабочиеМеста, "ФизическоеЛицо", Истина);
		ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
		ФизическиеЛицаСотрудники = Новый Соответствие;
		Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
			Сотрудники = Новый Массив;
			ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
			НайденныеСтроки = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) = Неопределено Тогда
					Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
				КонецЕсли;
			КонецЦикла;
			ФизическиеЛицаСотрудники.Вставить(ФизическоеЛицо, Сотрудники);
		КонецЦикла;
		
		ПараметрыПолученияДанных = НовыеПараметрыПолученияДанныхДляРегистрацииОбъектов();
		ПараметрыПолученияДанных.Приложение 				= Приложение;
		ПараметрыПолученияДанных.ПозицияЕстьВПравилах 		= ПозицииПравил;
		ПараметрыПолученияДанных.ФизическиеЛицаСотрудники 	= ФизическиеЛицаСотрудники;
		ПараметрыПолученияДанных.РабочиеМеста 				= РабочиеМеста;
		ПараметрыПолученияДанных.ЗаписьНовыйПравил 			= Истина;
		ПараметрыПолученияДанных.ФизическиеЛицаУсловноВыгружаемыхСотрудников = ФизическиеЛицаУсловноВыгружаемыхСотрудников(Приложение); 
		
		// ДанныеДляРегистрации - Структура.
		// ФизическиеЛица
		// Сотрудники
		// ПрочиеОбъекты
		ДанныеДляРегистрации = ДанныеДляРегистрацииОбъектов(ПараметрыПолученияДанных); 

		ОбъектыПриложенияДляРегистрации = ОбъектыДляРегистрацииПриЗаписиНовыхПравил(Приложение, ДанныеДляРегистрации);
		ЗаполнитьЗначенияСвойств(ОбъектыДляРегистрации, ОбъектыПриложенияДляРегистрации);
		ОбъектыДляРегистрации.БудущиеСобытия = БудущиеСобытия;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник);
		Запрос.УстановитьПараметр("Приложение", Приложение);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК Таблица
		|ГДЕ
		|	Таблица.Приложение = &Приложение
		|	И Таблица.ТипОбъекта = &ТипОбъекта
		|	И Таблица.Выгружался";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ОбъектыПриложенияДляРегистрации = ОбъектыДляРегистрацииПриЗаписиПустыхПравил(Приложение, Сотрудники);
		ЗаполнитьЗначенияСвойств(ОбъектыДляРегистрации, ОбъектыПриложенияДляРегистрации);
	
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаписатьОбъектыПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации);
	Иначе
		ИнтеграцияКабинетСотрудника.ЗаписатьОбъектыПриСохраненииПравилВыгрузки(ОбъектыДляРегистрации);
	КонецЕсли;
	
КонецПроцедуры 

Функция ФизическиеЛицаУсловноВыгружаемыхСотрудников(Приложение)

	// Физические лица условно публикуемых сотрудников.
	ФизическиеЛицаУсловноВыгружаемыхСотрудников = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ПубликуемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ПубликуемыеОбъекты.Ссылка = Сотрудники.Ссылка
	|ГДЕ
	|	ПубликуемыеОбъекты.УсловноВыгружается";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаУсловноВыгружаемыхСотрудников.Вставить(Выборка.ФизическоеЛицо, Истина);
	КонецЦикла;
	
	Возврат ФизическиеЛицаУсловноВыгружаемыхСотрудников;

КонецФункции

Функция ОбъектыДляРегистрацииПриЗаписиНовыхПравил(Приложение, ДанныеДляРегистрации)
	
	ТаблицаФизическиеЛица 	= ДанныеДляРегистрации.ФизическиеЛица;
	ТаблицаСотрудники 		= ДанныеДляРегистрации.Сотрудники;
	ПрочиеОбъекты 	= ДанныеДляРегистрации.ПрочиеОбъекты;
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты(Приложение);
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена(Приложение);
	
	ТипыЗначенийОсновныхОбъектов = ТипыЗначенийОсновныхОбъектов();
	ТипыОсновныхОбъектов = ТипыОсновныхОбъектов();
	
	ДоступенРасширенныйФункционал = ДоступенРасширенныйФункционал();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОсновныхОбъектов", ТипыОсновныхОбъектов);
	Запрос.УстановитьПараметр("ТипыЗначенийОсновныхОбъектов", ТипыЗначенийОсновныхОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО ВыгружаемыеОбъекты.Ссылка = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта В (&ТипыОсновныхОбъектов))
	|			И (НЕ Изменения.ВыгружатьУдаление)
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОсновныхОбъектов)
	|	И Изменения.ВыгружатьУдаление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОсновныхОбъектов)
	|	И НЕ Изменения.ВыгружатьУдаление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ВыгружаемыеОбъекты.УсловноВыгружается КАК УсловноВыгружается,
	|	ВыгружаемыеОбъекты.ОкончаниеВыгрузки КАК ОкончаниеВыгрузки
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) В (&ТипыЗначенийОсновныхОбъектов)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "РегистрСведений.ИзмененияДляОбмена1СПерсонал");
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТекущиеУсловноВыгружаемыеОбъекты 	= РезультатЗапроса[0].Выгрузить();
	ТекущиеОбъектыКУдалению 			= РезультатЗапроса[1].Выгрузить();
	ТекущиеИзмененияОбъектов 			= РезультатЗапроса[2].Выгрузить();
	ПрочиеВыгружаемыеОбъекты 			= РезультатЗапроса[3].Выгрузить();
	
	Отбор = Новый Структура("ТипОбъекта");
	ТекущиеУсловноВыгружаемыеОбъекты.Индексы.Добавить("ТипОбъекта");
	ТекущиеОбъектыКУдалению.Индексы.Добавить("ТипОбъекта");
	ТекущиеИзмененияОбъектов.Индексы.Добавить("ТипОбъекта");
	
	// Прочие выгружаемые объекты, которые не зависят от правил выгрузки.
	Для каждого СтрокаТЗ Из ПрочиеВыгружаемыеОбъекты Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.ОкончаниеВыгрузки 	= СтрокаТЗ.ОкончаниеВыгрузки;
		НоваяСтрока.УсловноВыгружается 	= СтрокаТЗ.УсловноВыгружается;
	КонецЦикла;
	
	// Физические лица.
	// Добавляем как выгружаемые всех, кроме Удалить.
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ВыгружаемыеФизическихЛиц = Новый Массив;
	Для каждого СтрокаТЗ Из ТаблицаФизическиеЛица Цикл
		Если СтрокаТЗ.Удалить Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.ФизическоеЛицо;
		НоваяСтрока.ОкончаниеВыгрузки 	= СтрокаТЗ.ОкончаниеВыгрузки;
		ВыгружаемыеФизическихЛиц.Добавить(СтрокаТЗ.ФизическоеЛицо);
	КонецЦикла;
	
	// Добавляем новые выгружаемые как изменения.
	ТекущиеВыгружаемые = ОбъектыВыгружаютсяВПриложение(ВыгружаемыеФизическихЛиц, Приложение);
	НовыеФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыгружаемыеФизическихЛиц, ТекущиеВыгружаемые);
	Для каждого ФизическоеЛицо Из НовыеФизическиеЛица Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 		= ФизическоеЛицо;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	КонецЦикла;
	
	// Добавляем уже зарегистрированные изменения, кроме новых.
	ТекущиеИзменения = ТекущиеИзмененияОбъектов.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
	СтарыеИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеИзменения, НовыеФизическиеЛица);
	Для каждого ФизическоеЛицо Из СтарыеИзменения Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 		= ФизическоеЛицо;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	КонецЦикла;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		// Регистрация зависимых данных новых физических лиц,
		// - ДоступныеФункцииФизическогоЛица
		// - ПрименяемыеВычетыНДФЛ
		// - ОграничениеДоступаКРабочимКонтактам.
		ИспользуютсяДоступныеФункцииФизическогоЛица = ИнтеграцияКабинетСотрудника.ИспользуютсяДоступныеФункцииФизическогоЛица();
		ИспользуютсяОграниченияДоступа = ИнтеграцияКабинетСотрудника.ИспользуютсяОграниченияДоступаКРабочимКонтактам();
		Для каждого ФизическоеЛицо Из НовыеФизическиеЛица Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= ФизическоеЛицо;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПрименяемыеВычетыНДФЛ;
			Если ИспользуютсяДоступныеФункцииФизическогоЛица Тогда
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДоступныеФункцииФизическогоЛица; 
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Если ИспользуютсяОграниченияДоступа Тогда
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Сотрудники.
	Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	ВыгружаемыеСотрудники = Новый Массив;
	
	// Добавляем как выгружаемые всех, кроме Удалить и изменения с признаком ВыгружатьУдаление.
	Для каждого СтрокаТЗ Из ТаблицаСотрудники Цикл
		Если СтрокаТЗ.Удалить Тогда
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 				= СтрокаТЗ.Сотрудник;
			НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
			НоваяСтрока.ВыгружатьУдаление 	= Истина;
		Иначе
			НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
			НоваяСтрока.Ссылка = СтрокаТЗ.Сотрудник;
			НоваяСтрока.УсловноВыгружается = СтрокаТЗ.УсловноВыгружается;
			ВыгружаемыеСотрудники.Добавить(СтрокаТЗ.Сотрудник);
			Если СтрокаТЗ.УсловноВыгружается Тогда
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 				= СтрокаТЗ.Сотрудник;
				НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем условно выгружаемых, которые уже зарегистрированы и не выгружаются по новым правилам.
	УсловноВыгружаемые = ТекущиеУсловноВыгружаемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
	Если ЗначениеЗаполнено(УсловноВыгружаемые) Тогда
		СтарыеУсловноВыгружаемые = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УсловноВыгружаемые, ВыгружаемыеСотрудники);
		Для каждого Сотрудник Из СтарыеУсловноВыгружаемые Цикл
			НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
			НоваяСтрока.Ссылка 				= Сотрудник;
			НоваяСтрока.УсловноВыгружается 	= Истина;
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 		= Сотрудник;
			НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
		КонецЦикла;
	КонецЕсли;
	
	// Добавляем новые выгружаемые как изменения.
	ТекущиеВыгружаемые = ОбъектыВыгружаютсяВПриложение(ВыгружаемыеСотрудники, Приложение);
	НовыеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыгружаемыеСотрудники, ТекущиеВыгружаемые);
	Для каждого Сотрудник Из НовыеСотрудники Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 		= Сотрудник;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	КонецЦикла;
	
	// Добавляем уже зарегистрированные изменения, кроме новых.
	ТекущиеИзменения = ТекущиеИзмененияОбъектов.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
	СтарыеИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеИзменения, НовыеСотрудники);
	Для каждого Сотрудник Из СтарыеИзменения Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 		= Сотрудник;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	КонецЦикла;
	
	// Добавляем уже зарегистрированные как выгрузку удаления.
	ОбъектыКУдалению = ТекущиеОбъектыКУдалению.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
	СтарыеОбъектыКУдалению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ОбъектыКУдалению, ВыгружаемыеСотрудники);
	Для каждого Сотрудник Из СтарыеОбъектыКУдалению Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 				= Сотрудник;
		НоваяСтрока.ТипОбъекта 			= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
		НоваяСтрока.ВыгружатьУдаление 	= Истина;
	КонецЦикла;
	
	ИзмененияДанныхГрафика = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника И ДоступенРасширенныйФункционал Тогда
		// Добавляем зависимые данные новых сотрудников,
		// - ЗаработанныеПраваНаОтпуск
		// - ГрафикОтпусков.
		Для каждого Сотрудник Из НовыеСотрудники Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить(); 
			НоваяСтрока.Ссылка 			= Сотрудник;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
		КонецЦикла;
		// Добавляем зависимые данные новых графиков работы,
		// - ИзмененияДанныхГрафикаКабинетСотрудника.
		Отбор.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
		ГрафикиРаботыСотрудников = ПрочиеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		ИзмененияДанныхГрафика = ИнтеграцияКабинетСотрудникаВнутренний.РассчитатьИзмененияДанныхГрафика(ГрафикиРаботыСотрудников);
		// Добавляем зависимые данные новых сотрудников,
		// - ЗаработанныеПраваНаОтпуск.
		Если ДоступенРасширенныйФункционал Тогда
			ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(НовыеСотрудники);
			Для каждого ФизическоеЛицо Из ФизическиеЛицаСотрудников Цикл
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Обработка прочих объектов.
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника И Используется1СПерсонал() Тогда
		ДополнитьВыгружаемыеОбъекты1СПерсонал(ПрочиеОбъекты);
	КонецЕсли;
	
	// Добавляем как выгружаемые все.
	ВыгружаемыеПрочиеОбъекты = ПрочиеОбъекты.Скопировать();
	ВыгружаемыеПрочиеОбъекты.Свернуть("Ссылка,УсловноВыгружается");
	Для каждого СтрокаТЗ Из ВыгружаемыеПрочиеОбъекты Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка 				= СтрокаТЗ.Ссылка;
		НоваяСтрока.УсловноВыгружается 	= СтрокаТЗ.УсловноВыгружается;
	КонецЦикла;
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
	
	ПрочиеОбъекты.Индексы.Добавить("ТипОбъекта");
	Для каждого ТипОбъекта Из ТипыОбъектов Цикл
		
		Отбор.ТипОбъекта = ТипОбъекта;
		ВыгружаемыеОбъектыПоТипу = ПрочиеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		
		// Добавляем условно выгружаемых, которые уже зарегистрированы и не выгружаются по новым правилам.
		УсловноВыгружаемые = ТекущиеУсловноВыгружаемыеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		Если ЗначениеЗаполнено(УсловноВыгружаемые) Тогда
			СтарыеУсловноВыгружаемые = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УсловноВыгружаемые, ВыгружаемыеОбъектыПоТипу);
			Для каждого Ссылка Из СтарыеУсловноВыгружаемые Цикл
				НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
				НоваяСтрока.Ссылка 				= Ссылка;
				НоваяСтрока.УсловноВыгружается 	= Истина;
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 		= Ссылка;
				НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
			КонецЦикла;
		КонецЕсли;
		
		// Добавляем новые выгружаемые как изменения.
		ТекущиеВыгружаемые = ОбъектыВыгружаютсяВПриложение(ВыгружаемыеОбъектыПоТипу, Приложение);
		НовыеОбъекты = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыгружаемыеОбъектыПоТипу, ТекущиеВыгружаемые);
		Для каждого Ссылка Из НовыеОбъекты Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 		= Ссылка;
			НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
		КонецЦикла;
		
		// Добавляем уже зарегистрированные изменения, кроме новых.
		ТекущиеИзменения = ТекущиеИзмененияОбъектов.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		СтарыеИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТекущиеИзменения, НовыеОбъекты);
		Для каждого Ссылка Из СтарыеИзменения Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 		= Ссылка;
			НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавим прочие зарегистрированные изменения, кроме основных объектов.
	ИсключаемыеТипы = ТипыОсновныхОбъектов();
	Запрос.УстановитьПараметр("ТипыОбъектов", ИсключаемыеТипы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВыгружатьУдаление КАК ВыгружатьУдаление
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|ГДЕ
	|	НЕ Изменения.ТипОбъекта В (&ТипыОбъектов)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "РегистрСведений.ИзмененияДляОбмена1СПерсонал");
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ИзмененияДляОбмена);
	
	ИзмененияДляОбмена.Свернуть("Ссылка,ТипОбъекта,ВыгружатьУдаление");
	ИзмененияДляОбмена.Колонки.Добавить("ВерсияДанных");
	Для каждого СтрокаТЗ Из ИзмененияДляОбмена Цикл
		СтрокаТЗ.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ФизическиеЛицаОрганизации = ТаблицаСотрудники.Скопировать(,"Организация,ФизическоеЛицо");
	ФизическиеЛицаОрганизации.Свернуть("Организация,ФизическоеЛицо");
	
	ОбъектыДляРегистрации = Новый Структура;
	ОбъектыДляРегистрации.Вставить("ВыгружаемыеОбъекты", 		ВыгружаемыеОбъекты);
	ОбъектыДляРегистрации.Вставить("ИзмененияДляОбмена", 		ИзмененияДляОбмена);
	ОбъектыДляРегистрации.Вставить("ИзмененияДанныхГрафика", 	ИзмененияДанныхГрафика);
	ОбъектыДляРегистрации.Вставить("ФизическиеЛицаОрганизации", ФизическиеЛицаОрганизации);
	
	Возврат ОбъектыДляРегистрации;

КонецФункции

Процедура ДополнитьВыгружаемыеОбъекты1СПерсонал(ИсходнаяТаблица)
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	ТипыДанных = Новый Массив;
	ТипыДанных.Добавить(Тип("СправочникСсылка.Должности"));
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТипыДанных.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		ТипыДанных.Добавить(Тип("СправочникСсылка.Организации"));
	Иначе
		ТипыДанных.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыДанных", ТипыДанных);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) = ТИП(Справочник.Должности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение)
	|	КОНЕЦ КАК ТипОбъекта
	|ПОМЕСТИТЬ ВТОбъектыДляДополнения
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	НЕ ВыгружаемыеОбъекты.УсловноВыгружается
	|	И ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) В (&ТипыДанных)";
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ПОМЕСТИТЬ ВТИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыДляДополнения.Ссылка КАК Ссылка,
	|	ОбъектыДляДополнения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	ВТОбъектыДляДополнения КАК ОбъектыДляДополнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсходнаяТаблица КАК ИсходнаяТаблица
	|		ПО ОбъектыДляДополнения.Ссылка = ИсходнаяТаблица.Ссылка
	|			И ОбъектыДляДополнения.ТипОбъекта = ИсходнаяТаблица.ТипОбъекта
	|ГДЕ
	|	ИсходнаяТаблица.ТипОбъекта ЕСТЬ NULL";
	Таблица = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ИсходнаяТаблица);

КонецПроцедуры

Функция ОбъектыДляРегистрацииПриЗаписиПустыхПравил(Приложение, Сотрудники)

	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты(Приложение);
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена(Приложение);
	
	ТипыЗначенийОсновныхОбъектов = ТипыЗначенийОсновныхОбъектов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ТипыЗначенийОсновныхОбъектов", ТипыЗначенийОсновныхОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ВыгружаемыеОбъекты.УсловноВыгружается КАК УсловноВыгружается,
	|	ВыгружаемыеОбъекты.ОкончаниеВыгрузки КАК ОкончаниеВыгрузки
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	НЕ ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) В (&ТипыЗначенийОсновныхОбъектов)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал", "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка 				= Выборка.Ссылка;
		НоваяСтрока.УсловноВыгружается 	= Истина;
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= Выборка.Ссылка;
		НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	// Прочие объекты.
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.УсловноВыгружается 	= Истина;
	КонецЦикла;
	
	ФизическиеЛицаИсключения = ФизическиеЛицаИсключения(Приложение);
	Для каждого КлючИЗначение Из ФизическиеЛицаИсключения Цикл
		Если КлючИЗначение.Значение Тогда
			НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
			НоваяСтрока.Ссылка = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим прочие изменения.
	Запрос.УстановитьПараметр("ТипОбъекта", ТипыОсновныхОбъектов());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВыгружатьУдаление КАК ВыгружатьУдаление,
	|	Изменения.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|ГДЕ
	|	НЕ Изменения.ТипОбъекта В (&ТипОбъекта)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбмена1СПерсонал", "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	Изменения = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Изменения, ИзмененияДляОбмена);
	
	ОбъектыДляРегистрации = Новый Структура;
	ОбъектыДляРегистрации.Вставить("ВыгружаемыеОбъекты", ВыгружаемыеОбъекты);
	ОбъектыДляРегистрации.Вставить("ИзмененияДляОбмена", ИзмененияДляОбмена);
	
	Возврат ОбъектыДляРегистрации;

КонецФункции

Функция ОбработатьБудущиеСобытия(Приложение) Экспорт
	
	БылиОшибки = Ложь;
	ДатаАктуальности = НачалоДня(ТекущаяДатаСеанса());
	
	СобытияСотрудников = Новый Массив;
	СобытияСотрудников.Добавить(Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные);
	СобытияСотрудников.Добавить(Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.ГрафикРаботы);
	СобытияСотрудников.Добавить(Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.РабочиеМестаСотрудников);
	
	Отбор = Новый Структура("Событие");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("События", СобытияСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БудущиеСобытия.Объект КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БудущиеСобытия.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.БудущиеСобытияУправлениеПерсоналом КАК БудущиеСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО БудущиеСобытия.Объект = Сотрудники.Ссылка
	|ГДЕ
	|	БудущиеСобытия.ДатаСобытия <= &ДатаАктуальности
	|	И БудущиеСобытия.Приложение = &Приложение
	|	И БудущиеСобытия.Событие В(&События)";
	РезультатаЗапроса = Запрос.Выполнить();
	Если Не РезультатаЗапроса.Пустой() Тогда
		
		ТаблицаСотрудников  = РезультатаЗапроса.Выгрузить();

		Отбор.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные;
		Попытка
			ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников.Скопировать(Отбор), Приложение);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
		Отбор.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.ГрафикРаботы;
		Попытка
			ИнтеграцияУправлениеПерсоналомВнутренний.ЗарегистрироватьИзмененияГрафиковРаботы(ТаблицаСотрудников.Скопировать(Отбор), Приложение);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
		Отбор.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.РабочиеМестаСотрудников;
		Попытка
			ИнтеграцияУправлениеПерсоналомВнутренний.ЗарегистрироватьИзмененияРабочиеМестаСотрудников(ТаблицаСотрудников.Скопировать(Отбор), Приложение);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БудущиеСобытия.Объект КАК Объект,
	|	БудущиеСобытия.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.БудущиеСобытияУправлениеПерсоналом КАК БудущиеСобытия
	|ГДЕ
	|	БудущиеСобытия.ДатаСобытия <= &ДатаАктуальности
	|	И БудущиеСобытия.Приложение = &Приложение
	|	И НЕ БудущиеСобытия.Событие В (&События)";
	РезультатаЗапроса = Запрос.Выполнить();
	Если Не РезультатаЗапроса.Пустой() Тогда
		ТаблицаОбъектов  = РезультатаЗапроса.Выгрузить();
		Отбор.Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КлассыУсловийТрудаПоДолжностям;
		Попытка
			ИнтеграцияУправлениеПерсоналомВнутренний.ЗарегистрироватьИзмененияКлассовУсловийТрудаПоДолжностям(ТаблицаОбъектов.Скопировать(Отбор), Приложение);
		Исключение
			БылиОшибки = Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат БылиОшибки;
	
КонецФункции

Процедура ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников, ПриложениеДляОбработки = Неопределено) Экспорт

	// Требуется привилегированный режим, т.к. получаются сведения всех рабочих мест физических лиц.
	УстановитьПривилегированныйРежим(Истина);
	
	СписокФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаСотрудников, "ФизическоеЛицо", Истина);
	
	Если ПриложениеДляОбработки = Неопределено Тогда
		ИспользуемыеПриложения = ИспользуемыеПриложения();
	Иначе
		ИспользуемыеПриложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПриложениеДляОбработки);
	КонецЕсли;
	
	ФизическиеЛицаИсключенияПриложений 	= Новый Соответствие;
	ВыгружаемыеФизическиеЛицаПриложений = Новый Соответствие;
	Для каждого Приложение Из ИспользуемыеПриложения Цикл
		ФизическиеЛицаИсключения = ФизическиеЛицаИсключения(Приложение);
		ФизическиеЛицаИсключенияПриложений.Вставить(Приложение, ФизическиеЛицаИсключения);
		ВыгружаемыеФизическиеЛица = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВыгружаемыеФизическиеЛица(Приложение));
		ВыгружаемыеФизическиеЛицаПриложений.Вставить(Приложение, ВыгружаемыеФизическиеЛица);
	КонецЦикла;
	
	СписокСотрудников 	= Новый Массив;
	ОбрабатываемыеСотрудники = Новый Соответствие;
	Для каждого СтрокаТЗ Из ТаблицаСотрудников Цикл
		Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
			ОбрабатываемыеСотрудники.Вставить(СтрокаТЗ.Сотрудник, Истина);
			СписокСотрудников.Добавить(СтрокаТЗ.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	РассчитыватьПодразделенияРуководителей = РассчитыватьПодразделенияРуководителей();
	
	ПараметрыПолученияДанных = НовыеПараметрыПолученияДанныхРабочихМест();
	ПараметрыПолученияДанных.СписокСотрудников 						= СписокСотрудников;
	ПараметрыПолученияДанных.СписокФизическихЛиц 					= СписокФизическихЛиц;
	ПараметрыПолученияДанных.РассчитыватьПодразделенияРуководителей = РассчитыватьПодразделенияРуководителей;
	ПараметрыПолученияДанных.ПроверитьОбновитьПозиции 				= Истина;
	ДанныеРабочихМест = ДанныеРабочихМест(ИспользуемыеПриложения, ПараметрыПолученияДанных);
	
	РабочиеМеста 			= ДанныеРабочихМест.РабочиеМеста;
	БудущиеКадровыеСобытия 	= ДанныеРабочихМест.БудущиеКадровыеСобытия;
	ОбновляемыеПозиции 		= ДанныеРабочихМест.ОбновляемыеПозиции;
	
	РабочиеМеста.Индексы.Добавить("ФизическоеЛицо");
	ТаблицаСотрудников.Индексы.Добавить("ФизическоеЛицо");
	ОтборПоФизическимЛицам = Новый Структура("ФизическоеЛицо");
	
	// Получим публикуемые позиции штатного расписания.
	ВсеПозицииПравилВыгрузки = ВсеПозицииПравилВыгрузки(ИспользуемыеПриложения);
	
	ФизическиеЛицаСотрудники = Новый Соответствие;
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		Сотрудники = Новый Массив;
		ОтборПоФизическимЛицам.ФизическоеЛицо = ФизическоеЛицо;
		
		НайденныеСтроки = ТаблицаСотрудников.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
				Сотрудники.Добавить(СтрокаТЗ.Сотрудник);        
			КонецЕсли;
		КонецЦикла;
		НайденныеСтроки = РабочиеМеста.НайтиСтроки(ОтборПоФизическимЛицам);
		Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
			Если Сотрудники.Найти(СтрокаТЗ.Сотрудник) = Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаТЗ.Сотрудник) Тогда
					Сотрудники.Добавить(СтрокаТЗ.Сотрудник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФизическиеЛицаСотрудники.Вставить(ФизическоеЛицо, Сотрудники);
		
	КонецЦикла;

	ОтборПоСотрудникам = Новый Структура("Сотрудник");
	
	БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
	БудущиеСобытия.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	ОбъектыДляРегистрацииУП = Неопределено;
	ОбъектыДляРегистрацииКС = Неопределено;
	Для каждого Приложение Из ИспользуемыеПриложения Цикл
		
		ПозицияЕстьВПравилах = ВсеПозицииПравилВыгрузки[Приложение];
		
		ПараметрыПолученияДанных = НовыеПараметрыПолученияДанныхДляРегистрацииОбъектов();
		ПараметрыПолученияДанных.Приложение = Приложение;
		ПараметрыПолученияДанных.ПозицияЕстьВПравилах 		= ПозицияЕстьВПравилах;
		ПараметрыПолученияДанных.ФизическиеЛицаСотрудники 	= ФизическиеЛицаСотрудники;
		ПараметрыПолученияДанных.РабочиеМеста 				= РабочиеМеста;
		ПараметрыПолученияДанных.ОбновляемыеПозиции 		= ОбновляемыеПозиции;
		ПараметрыПолученияДанных.РассчитыватьПодразделенияРуководителей = РассчитыватьПодразделенияРуководителей;
		Данные = ДанныеДляРегистрацииОбъектов(ПараметрыПолученияДанных);
		
		Событие = Перечисления.ВидыБудущихСобытийУправлениеПерсоналом.КадровыеДанные;
		БудущиеСобытияПриложения = БудущиеСобытияПриложения(Приложение, СписокСотрудников, БудущиеКадровыеСобытия, Событие);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(БудущиеСобытияПриложения, БудущиеСобытия);
		
		ДанныеДляРегистрации = Новый Структура;
		ДанныеДляРегистрации.Вставить("ФизическиеЛица", 	Данные.ФизическиеЛица);
		ДанныеДляРегистрации.Вставить("Сотрудники", 		Данные.Сотрудники);
		ДанныеДляРегистрации.Вставить("ПрочиеОбъекты", 		Данные.ПрочиеОбъекты);
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			ОбъектыДляРегистрацииУП = ОбъектыДляРегистрацииОбмена(Приложение, ДанныеДляРегистрации);
		Иначе
			ОбъектыДляРегистрацииКС = ОбъектыДляРегистрацииОбмена(Приложение, ДанныеДляРегистрации);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗарегистрироватьОбъектыДляОбмена(БудущиеСобытия, ОбъектыДляРегистрацииУП, ОбъектыДляРегистрацииКС, ПриложениеДляОбработки);

КонецПроцедуры

// Формирует таблицы с данными для регистрации в регистрах, обслуживающих
// обмен с приложением. 
// Вызывается при обработке изменений кадровых событий.
//
// Параметры:
// 		ДанныеДляРегистрации - Структура
// 			* ФизическиеЛица - ТаблицаЗначений
// 					* ФизическоеЛицо
// 					* Выгружается - Булево
// 					* ОкончаниеВыгрузки - Дата
// 			* Сотрудники - ТаблицаЗначений
// 					* Сотрудник
// 					* УсловноВыгружается
// 					* Удалить - Булево
// 			* ПрочиеОбъекты - ТаблицаЗначений
// 					* Ссылка
// 					* ТипОбъекта
//
// Возвращаемое значение:
// 		Структура
// 			* ВыгружаемыеОбъекты  - ТаблицаЗначений
// 					* Выгружается - Булево
// 					* колонки соответствующие структуре регистра ВыгружаемыеОбъекты1СПерсонал
// 			* ИзмененияДляОбмена  - ТаблицаЗначений
// 					* колонки соответствующие структуре регистра ИзмененияДляОбмена1СПерсонал
//
Функция ОбъектыДляРегистрацииОбмена(Приложение, ДанныеДляРегистрации)
	
	ФизическиеЛица 	= ДанныеДляРегистрации.ФизическиеЛица;
	Сотрудники 		= ДанныеДляРегистрации.Сотрудники;
	ПрочиеОбъекты 	= ДанныеДляРегистрации.ПрочиеОбъекты;
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты(Приложение);
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена(Приложение);
	
	ДоступенРасширенныйФункционал = ДоступенРасширенныйФункционал();
	
	// Обработка Физических лиц.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника
	// и если Выгружается = Ложь, ссылки, которые зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычисляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВыгружаемыеФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Таблица.ОкончаниеВыгрузки КАК ОкончаниеВыгрузки,
	|	Таблица.Удалить КАК Удалить
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ВыгружаемыеФизическиеЛица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	Таблица.ОкончаниеВыгрузки КАК ОкончаниеВыгрузки,
	|	Таблица.Удалить КАК Удалить,
	|	ЛОЖЬ КАК УсловноВыгружается
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.ФизическоеЛицо = ВыгружаемыеОбъекты.Ссылка
	|			И Таблица.ОкончаниеВыгрузки = ВыгружаемыеОбъекты.ОкончаниеВыгрузки
	|ГДЕ
	|	НЕ Таблица.Удалить
	|	И ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо,
	|	Таблица.ОкончаниеВыгрузки,
	|	Таблица.Удалить,
	|	ЛОЖЬ
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.ФизическоеЛицо = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	Таблица.Удалить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ФизическоеЛицо КАК Ссылка,
	|	&ТипОбъекта КАК ТипОбъекта,
	|	ЛОЖЬ КАК ВыгружатьУдаление
	|ИЗ
	|	ВТФизическиеЛица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО Таблица.ФизическоеЛицо = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = &ТипОбъекта)
	|ГДЕ
	|	НЕ Таблица.Удалить
	|	И Изменения.ВерсияДанных ЕСТЬ NULL";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "РегистрСведений.ИзмененияДляОбмена1СПерсонал");
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		// Регистрация зависимых данных новых физических лиц,
		// - ДоступныеФункцииФизическогоЛица
		// - ПрименяемыеВычетыНДФЛ
		// - ОграничениеДоступаКРабочимКонтактам
		Отбор = Новый Структура("Удалить", Ложь);
		МассивФизическихЛиц = ФизическиеЛица.Скопировать(Отбор).ВыгрузитьКолонку("ФизическоеЛицо");
		ТекущиеВыгружаемыеФизическиеЛица = ОбъектыВыгружаютсяВПриложение(МассивФизическихЛиц, Приложение);
		НовыеФизическиеЛица = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивФизическихЛиц, ТекущиеВыгружаемыеФизическиеЛица);
		ИспользуютсяДоступныеФункцииФизическогоЛица = ИнтеграцияКабинетСотрудника.ИспользуютсяДоступныеФункцииФизическогоЛица();
		ИспользуютсяОграниченияДоступа = ИнтеграцияКабинетСотрудника.ИспользуютсяОграниченияДоступаКРабочимКонтактам();
		Для каждого ФизическоеЛицо Из НовыеФизическиеЛица Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= ФизическоеЛицо;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ПрименяемыеВычетыНДФЛ;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			Если ИспользуютсяДоступныеФункцииФизическогоЛица Тогда
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДоступныеФункцииФизическогоЛица; 
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Если ИспользуютсяОграниченияДоступа Тогда
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ОграничениеДоступаКРабочимКонтактам;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Обработка Сотрудников.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычисляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Сотрудник КАК Ссылка,
	|	Таблица.УсловноВыгружается КАК УсловноВыгружается,
	|	Таблица.Удалить КАК Удалить
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	&Сотрудники КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.УсловноВыгружается КАК УсловноВыгружается
	|ИЗ
	|	ВТСотрудники КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|			И Таблица.УсловноВыгружается = ВыгружаемыеОбъекты.УсловноВыгружается
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|	И НЕ Таблица.Удалить
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	&ТипОбъекта КАК ТипОбъекта,
	|	Таблица.Удалить КАК ВыгружатьУдаление
	|ИЗ
	|	ВТСотрудники КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО Таблица.Ссылка = Изменения.Ссылка
	|			И (&ТипОбъекта = Изменения.ТипОбъекта)
	|ГДЕ
	|	Изменения.ВерсияДанных ЕСТЬ NULL";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "РегистрСведений.ИзмененияДляОбмена1СПерсонал");
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника И ДоступенРасширенныйФункционал Тогда
		// Регистрация зависимых данных новых сотрудников,
		// - ЗаработанныеПраваНаОтпуск
		// - ГрафикОтпусков
		Отбор = Новый Структура("Удалить", Ложь);
		МассивСотрудников = Сотрудники.Скопировать(Отбор).ВыгрузитьКолонку("Сотрудник");
		ТекущиеВыгружаемыеСотрудники = ОбъектыВыгружаютсяВПриложение(МассивСотрудников, Приложение);
		НовыеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСотрудников, ТекущиеВыгружаемыеСотрудники);
		Для каждого Сотрудник Из НовыеСотрудники Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= Сотрудник;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикОтпусков;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
		ФизическиеЛицаСотрудников = КадровыйУчет.ФизическиеЛицаСотрудников(НовыеСотрудники);
		Для каждого ФизическоеЛицо Из ФизическиеЛицаСотрудников Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= ФизическоеЛицо;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ЗаработанныеПраваНаОтпуск;
		КонецЦикла;
	КонецЕсли;
	
	// Обработка прочих объектов.
	// Вычисляем ссылки, которые еще не зарегистрированы в ВыгружаемыеОбъектыКабинетСотрудника.
	// Вычисляем ссылки, не зарегистрированные в ИзмененияДляОбменаКабинетСотрудника.
	Запрос.УстановитьПараметр("ПрочиеОбъекты", ПрочиеОбъекты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта
	|ПОМЕСТИТЬ ВТПрочиеОбъекты
	|ИЗ
	|	&ПрочиеОбъекты КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК УсловноВыгружается
	|ИЗ
	|	ВТПрочиеОбъекты КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|		ПО Таблица.Ссылка = ВыгружаемыеОбъекты.Ссылка
	|ГДЕ
	|	ВыгружаемыеОбъекты.УсловноВыгружается ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.ТипОбъекта КАК ТипОбъекта,
	|	ЛОЖЬ КАК ВыгружатьУдаление
	|ИЗ
	|	ВТПрочиеОбъекты КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбменаКабинетСотрудника КАК Изменения
	|		ПО Таблица.Ссылка = Изменения.Ссылка
	|			И Таблица.ТипОбъекта = Изменения.ТипОбъекта
	|ГДЕ
	|	Изменения.ВерсияДанных ЕСТЬ NULL";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника", "РегистрСведений.ИзмененияДляОбмена1СПерсонал");
	КонецЕсли;
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса[1].Выгрузить(), ВыгружаемыеОбъекты);
	ДополнитьТаблицуИзмененияДляОбмена(РезультатЗапроса[2].Выгрузить(), ИзмененияДляОбмена);
	
	ИзмененияДанныхГрафика = Неопределено;
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника И ДоступенРасширенныйФункционал Тогда
		// Регистрация зависимых данных новых графиков работы,
		// - ИзмененияДанныхГрафикаКабинетСотрудника.
		Отбор = Новый Структура("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
		ГрафикиРаботыСотрудников = ПрочиеОбъекты.Скопировать(Отбор).ВыгрузитьКолонку("Ссылка");
		ИзмененияДанныхГрафика = ИнтеграцияКабинетСотрудникаВнутренний.РассчитатьИзмененияДанныхГрафика(ГрафикиРаботыСотрудников);
	КонецЕсли;

	ФизическиеЛицаОрганизации = Сотрудники.Скопировать(,"Организация,ФизическоеЛицо");
	ФизическиеЛицаОрганизации.Свернуть("Организация,ФизическоеЛицо");
	
	ОбъектыДляРегистрации = Новый Структура;
	ОбъектыДляРегистрации.Вставить("ВыгружаемыеОбъекты", 		ВыгружаемыеОбъекты);
	ОбъектыДляРегистрации.Вставить("ИзмененияДляОбмена", 		ИзмененияДляОбмена);
	ОбъектыДляРегистрации.Вставить("ИзмененияДанныхГрафика", 	ИзмененияДанныхГрафика);
	ОбъектыДляРегистрации.Вставить("ФизическиеЛицаОрганизации", ФизическиеЛицаОрганизации);
	
	Возврат ОбъектыДляРегистрации;

КонецФункции

Процедура ДополнитьТаблицуИзмененияДляОбмена(ТаблицаИсточник, ИзмененияДляОбмена)
	
	Для Каждого СтрокаТЗ Из ТаблицаИсточник Цикл
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		НоваяСтрока.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбъектыДляОбмена(БудущиеСобытия, ОбъектыДляРегистрацииУП, ОбъектыДляРегистрацииКС, Приложение) Экспорт
	
	РегистрироватьУП = Ложь;
	Если ЗначениеЗаполнено(ОбъектыДляРегистрацииУП) Тогда
		Для каждого КлючИЗначение Из ОбъектыДляРегистрацииУП Цикл
			РегистрироватьУП = РегистрироватьУП Или ЗначениеЗаполнено(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РегистрироватьКС = Ложь;
	Если ЗначениеЗаполнено(ОбъектыДляРегистрацииКС) Тогда
		Для каждого КлючИЗначение Из ОбъектыДляРегистрацииКС Цикл
			РегистрироватьКС = РегистрироватьКС Или ЗначениеЗаполнено(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(БудущиеСобытия)
		И Не РегистрироватьУП
		И Не РегистрироватьКС Тогда
		Возврат
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		Если ЗначениеЗаполнено(БудущиеСобытия) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БудущиеСобытияУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = БудущиеСобытия;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Объект", "Объект");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Событие", "Событие");
		КонецЕсли;
		Если РегистрироватьУП Тогда
			Интеграция1СПерсонал.ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрацииУП);
		КонецЕсли;
		Если РегистрироватьКС Тогда
			ИнтеграцияКабинетСотрудника.ДобавитьБлокировкуРегистрацияОбъектовДляОбмена(Блокировка, ОбъектыДляРегистрацииКС);
		КонецЕсли;
		Блокировка.Заблокировать();
		
		Если ЗначениеЗаполнено(БудущиеСобытия) Тогда
			// удаляем записи
			Для каждого СтрокаТЗ Из БудущиеСобытия Цикл
				Если СтрокаТЗ.Удалить Тогда
					НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Объект.Установить(СтрокаТЗ.Объект);
					НаборЗаписей.Отбор.Приложение.Установить(СтрокаТЗ.Приложение);
					НаборЗаписей.Отбор.Событие.Установить(СтрокаТЗ.Событие);
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
			// добавляем новые записи
			Для каждого СтрокаТЗ Из БудущиеСобытия Цикл
				Если Не СтрокаТЗ.Удалить Тогда
					МенеджерЗаписи = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Если РегистрироватьУП Тогда
			Интеграция1СПерсонал.ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрацииУП);
		КонецЕсли;
		
		Если РегистрироватьКС Тогда
			ИнтеграцияКабинетСотрудника.ЗаписатьОбъектыДляОбмена(ОбъектыДляРегистрацииКС);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка регистрации объектов для обмена.
			|%1';
			|en = 'An error occurred when registering objects for exchange.
			|%1'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
		Если ЗначениеЗаполнено(Приложение) Тогда
			ИмяСобытия = ИменаСобытийЖР(Приложение).ПрочиеСобытия;
		Иначе
			ИмяСобытия = ИмяОбщегоСобытияЖР();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		// Исключение обрабатывает вызывающий метод.
		ВызватьИсключение;
	КонецПопытки;	

КонецПроцедуры

Функция БудущиеСобытияПриложения(Приложение, Объекты, БудущиеСобытияСотрудников, Событие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Событие", Событие);
	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БудущиеСобытия.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.БудущиеСобытияУправлениеПерсоналом КАК БудущиеСобытия
	|ГДЕ
	|	БудущиеСобытия.Приложение = &Приложение
	|	И БудущиеСобытия.Событие = &Событие
	|	И БудущиеСобытия.Объект В(&Объекты)";
	ОбъектыДляУдаления = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект"));
	
	БудущиеСобытия = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("БудущиеСобытияУправлениеПерсоналом");
	БудущиеСобытия.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрокаТЗ Из БудущиеСобытияСотрудников Цикл
		НоваяСтрока = БудущиеСобытия.Добавить();
		НоваяСтрока.Приложение 	= Приложение;
		НоваяСтрока.Событие 	= Событие;
		НоваяСтрока.Объект 	= СтрокаТЗ.Объект;
		НоваяСтрока.ДатаСобытия = СтрокаТЗ.ДатаСобытия;
	КонецЦикла;
	
	Для каждого Объект Из Объекты Цикл
		Если ОбъектыДляУдаления[Объект] <> Неопределено Тогда
			НоваяСтрока = БудущиеСобытия.Добавить();
			НоваяСтрока.Приложение 	= Приложение;
			НоваяСтрока.Событие 	= Событие;
			НоваяСтрока.Объект 	= Объект;
			НоваяСтрока.Удалить 	= Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БудущиеСобытия;

КонецФункции

// Возвращает все позиции штатного расписания из правил выгрузки для указанных приложений.
//
// Параметры:
// 		Приложения - Массив
//
// Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ШтатноеРасписание
// 			* Значение - Булево
//
Функция ВсеПозицииПравилВыгрузки(Приложения)
	
	ПозицииПравил = Новый Соответствие;
	Для каждого Приложение Из Приложения Цикл
		ПозицииПравил.Вставить(Приложение, Новый Соответствие);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложения", Приложения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаВыгрузки.Ссылка КАК Ссылка,
	|	ПравилаВыгрузки.Приложение КАК Приложение
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК ПравилаВыгрузки
	|ГДЕ
	|	ПравилаВыгрузки.Ссылка ССЫЛКА Справочник.ШтатноеРасписание
	|	И ПравилаВыгрузки.Приложение В(&Приложения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Приложение") Цикл
		Приложение = Выборка.Приложение;
		Позиции = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			Позиции.Вставить(Выборка.Ссылка,  Истина);
		КонецЦикла;
		ПозицииПравил.Вставить(Приложение, Позиции);
	КонецЦикла;

	Возврат ПозицииПравил;

КонецФункции

Функция НовыеПараметрыПолученияДанныхРабочихМест()

	Параметры = Новый Структура("
	|СписокСотрудников,
	|СписокФизическихЛиц,
	|РассчитыватьПодразделенияРуководителей,
	|ПроверитьОбновитьПозиции");
	Параметры.РассчитыватьПодразделенияРуководителей = Ложь;
	Параметры.ПроверитьОбновитьПозиции = Ложь;
	
	Возврат Параметры;

КонецФункции

// Формирует данные о рабочих местах и будущих кадровых событиях.
// Вызывающий код должен устанавливать привилегированный режим.
//
// Параметры:
// 		Приложения - Массив
// 		ПараметрыПолученияДанных - Структура - см НовыеПараметрыПолученияДанныхРабочихМест.
//
// Возвращаемое значение
// 		Структура
// 			* РабочиеМеста - ТаблицаЗначений.
// 			* БудущиеКадровыеСобытия - ТаблицаЗначений.
// 			* ОбновляемыеПозиции - Массив.
//
Функция ДанныеРабочихМест(Приложения, ПараметрыПолученияДанных = Неопределено)
	
	Если ПараметрыПолученияДанных = Неопределено Тогда
		ПараметрыПолученияДанных = НовыеПараметрыПолученияДанныхРабочихМест();
	КонецЕсли;
	СписокСотрудников 			= ПараметрыПолученияДанных.СписокСотрудников;
	СписокФизическихЛиц 		= ПараметрыПолученияДанных.СписокФизическихЛиц;
	ПроверитьОбновитьПозиции 	= ПараметрыПолученияДанных.ПроверитьОбновитьПозиции;
	РассчитыватьПодразделенияРуководителей = ПараметрыПолученияДанных.РассчитыватьПодразделенияРуководителей;
	
	ИспользоватьОтборПоСотрудникам = ЗначениеЗаполнено(СписокСотрудников);
	ОбрабатываемыеСотрудники = Новый Соответствие;
	Если ИспользоватьОтборПоСотрудникам Тогда
		ОбрабатываемыеСотрудники = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(СписокСотрудников);
	КонецЕсли;

	ДатаАктуальности = КонецДня(ТекущаяДатаСеанса());
	ИмяОпции = "ИспользоватьШтатноеРасписание";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	ВедетсяШтатноеРасписание = ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции);
	ИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ТипГрафикРаботы = ТипГрафикРаботыСсылка();

	// Обновляемые позиции, для вычисления подразделений, в которых необходимо обновить руководителей.
	ОбновляемыеПозиции = Новый Массив;
	
	// РабочиеМеста - сведения о рабочих местах физических лиц на дату актуальности,
	// включая уволенных.
	РабочиеМеста = НоваяТаблицаРабочиеМестаСотрудников();
	
	// БудущиеКадровыеСобытия - даты будущих кадровых событий обрабатываемых сотрудников.
	БудущиеКадровыеСобытия = Новый ТаблицаЗначений;
	БудущиеКадровыеСобытия.Колонки.Добавить("Сотрудник", 	Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	БудущиеКадровыеСобытия.Колонки.Добавить("ДатаСобытия", 	Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Заполняем таблицы РабочиеМеста, БудущиеКадровыеСобытия.
	Если ИспользоватьКадровыйУчет Тогда
		
		// Будущие кадровые события.
		СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, ДатаАктуальности, СписокСотрудников);
		
		Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМеста.Период КАК ДатаСобытия,
		|	РабочиеМеста.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
		|ГДЕ
		|	РабочиеМеста.Период > &ДатаАктуальности";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(БудущиеКадровыеСобытия.Добавить(), Выборка);
		КонецЦикла;
		
		Если РассчитыватьПодразделенияРуководителей И ВедетсяШтатноеРасписание Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(РабочиеМеста.ПериодЗаписи, СЕКУНДА, -1) КАК ДатаСобытия,
			|	РабочиеМеста.Сотрудник КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудники
			|ИЗ
			|	ВТРабочиеМестаСотрудников КАК РабочиеМеста
			|ГДЕ
			|	РабочиеМеста.Период <= &ДатаАктуальности";
			Запрос.Выполнить();
			
			ОписательТаблицыОтборов = КадровыйУчет.ОписаниеВременнойТаблицыОтборовСотрудников("ВТСотрудники", "Сотрудник", "ДатаСобытия");
			ЗапросКД = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(Ложь, ОписательТаблицыОтборов, "ДолжностьПоШтатномуРасписанию",,Ложь);
			ЗапросКД.МенеджерВременныхТаблиц = МенеджерВТ;
			ЗапросКД.Выполнить();
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КадровыеДанные.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанныеСотрудников КАК КадровыеДанные";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.ДолжностьПоШтатномуРасписанию) Тогда
					ОбновляемыеПозиции.Добавить(Выборка.ДолжностьПоШтатномуРасписанию);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполняем таблицу РабочиеМеста.
		// Получим все рабочие места физических лиц на дату актуальности, включая уволенных.
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,РабочееМестоПериодРегистрации,ВидСобытия";
		Если ВедетсяШтатноеРасписание Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ДолжностьПоШтатномуРасписанию";
		Иначе
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",Подразделение,Должность";
		КонецЕсли;
		Если ТипГрафикРаботы <> Неопределено Тогда
			КадровыеДанныеСтрока = КадровыеДанныеСтрока + ",ГрафикРаботы";
		КонецЕсли;
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		ПараметрыПолучения.НачалоПериода 		= ДатаАктуальности;
		ПараметрыПолучения.ОкончаниеПериода 	= ДатаАктуальности;
		ПараметрыПолучения.РаботникиПоТрудовымДоговорам = Истина;
		ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
		ПараметрыПолучения.ВключаяУволенныхНаНачалоПериода = Истина;
		
		КадровыеДанныеСотрудников = КадровыеДанныеСотрудников(ПараметрыПолучения);
		
		// Заполним ДолжностьПоШтатномуРасписанию в таблице КадровыеДанныеСотрудников,
		// если не ведется штатное расписание.
		Если Не ВедетсяШтатноеРасписание Тогда
			
			Если ТипГрафикРаботы = Неопределено Тогда
				КадровыеДанныеСотрудников.Колонки.Добавить("ГрафикРаботы", Новый ОписаниеТипов("Строка"));
			КонецЕсли;
			
			Запрос.УстановитьПараметр("КадровыеДанныеСотрудников", КадровыеДанныеСотрудников);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.Подразделение КАК Подразделение,
			|	КадровыеДанные.Должность КАК Должность,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы
			|ПОМЕСТИТЬ ВТКадровыеДанные
			|ИЗ
			|	&КадровыеДанныеСотрудников КАК КадровыеДанные";
			Запрос.Выполнить();
			
			Если ПроверитьОбновитьПозиции Тогда
				ИнтеграцияУправлениеПерсоналомВнутренний.ПроверитьОбновитьПозиции(Приложения, МенеджерВТ); 
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	КадровыеДанные.Организация КАК Организация,
			|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
			|	КадровыеДанные.Сотрудник КАК Сотрудник,
			|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
			|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
			|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
			|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
			|ИЗ
			|	ВТКадровыеДанные КАК КадровыеДанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
			|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
			|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
			КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			НоваяСтрока = РабочиеМеста.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.ДатаСобытия = СтрокаТЗ.РабочееМестоПериодРегистрации;
		КонецЦикла;
		
	Иначе
		
		ПараметрыПолучения = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		КадровыеДанныеСтрока = "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
		ПараметрыПолучения.КадровыеДанные 		= КадровыеДанныеСтрока;
		ПараметрыПолучения.СписокФизическихЛиц 	= СписокФизическихЛиц;
		
		КадровыеДанные = КадровыеДанныеСотрудников(ПараметрыПолучения);
		Запрос.УстановитьПараметр("КадровыеДанные", КадровыеДанные);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.Подразделение КАК Подразделение,
		|	КадровыеДанные.Должность КАК Должность,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка) КАК ВидСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК РабочееМестоПериодРегистрации,
		|	"""" КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТКадровыеДанные
		|ИЗ
		|	&КадровыеДанные КАК КадровыеДанные";
		Запрос.Выполнить();
		
		Если ПроверитьОбновитьПозиции Тогда
			ИнтеграцияУправлениеПерсоналомВнутренний.ПроверитьОбновитьПозиции(Приложения, МенеджерВТ); 
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанные.Организация КАК Организация,
		|	КадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КадровыеДанные.Сотрудник КАК Сотрудник,
		|	КадровыеДанные.РабочееМестоПериодРегистрации КАК РабочееМестоПериодРегистрации,
		|	КадровыеДанные.ВидСобытия КАК ВидСобытия,
		|	КадровыеДанные.ГрафикРаботы КАК ГрафикРаботы,
		|	КадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	ШтатноеРасписание.Ссылка КАК ДолжностьПоШтатномуРасписанию
		|ИЗ
		|	ВТКадровыеДанные КАК КадровыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтатноеРасписание КАК ШтатноеРасписание
		|		ПО КадровыеДанные.Подразделение = ШтатноеРасписание.Подразделение
		|			И КадровыеДанные.Должность = ШтатноеРасписание.Должность";
		КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТЗ Из КадровыеДанныеСотрудников Цикл
			
			ДатаПриема 		= СтрокаТЗ.ДатаПриема;
			ДатаУвольнения 	= СтрокаТЗ.ДатаУвольнения;
			Если Не ЗначениеЗаполнено(ДатаПриема) Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДатаУвольнения) Тогда
				Если ДатаПриема <= ДатаАктуальности Тогда
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
				ИначеЕсли Не ИспользоватьОтборПоСотрудникам Или ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаПриема;
				КонецЕсли;
			Иначе
				Если ДатаУвольнения = ДатаАктуальности Тогда
						
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
					НоваяСтрока.ДатаСобытия = ДатаПриема;
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				ИначеЕсли ДатаУвольнения < ДатаАктуальности Тогда
					
					НоваяСтрока = РабочиеМеста.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение;
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
				Иначе //ДатаУвольнения > ДатаАктуальности
					
					НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.ДатаСобытия = ДатаУвольнения + 86400;
					
					Если ДатаПриема <= ДатаАктуальности Тогда
						
						НоваяСтрока = РабочиеМеста.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием;
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					ИначеЕсли ОбрабатываемыеСотрудники[СтрокаТЗ.Сотрудник] <> Неопределено Тогда
						
						НоваяСтрока = БудущиеКадровыеСобытия.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.ДатаСобытия = ДатаПриема;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	БудущиеКадровыеСобытия.Колонки.Сотрудник.Имя = "Объект";
	
	Результат = Новый Структура;
	Результат.Вставить("РабочиеМеста", РабочиеМеста);
	Результат.Вставить("БудущиеКадровыеСобытия", БудущиеКадровыеСобытия);
	Результат.Вставить("ОбновляемыеПозиции", ОбновляемыеПозиции);
	
	Возврат Результат

КонецФункции

Процедура СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, ДатаАктуальности, СписокСотрудников)
	
	Если ЗначениеЗаполнено(СписокСотрудников) Тогда
		Сотрудники = СписокСотрудников;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	ПараметрыПолученияРабочихМест = КадровыйУчет.ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников();
	ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
	ПараметрыПолученияРабочихМест.НачалоПериода 	= ДатаАктуальности;
	ПараметрыПолученияРабочихМест.СписокСотрудников = Сотрудники;
	КадровыйУчет.СоздатьВТРабочиеМестаСотрудников(МенеджерВТ, Ложь, ПараметрыПолученияРабочихМест);

КонецПроцедуры

Функция КадровыеДанныеСотрудников(ПараметрыПолученияДанных) Экспорт
	
	КадровыеДанные = ПараметрыПолученияДанных.КадровыеДанные;
	Если СтрНайти(ВРег(ПараметрыПолученияДанных.КадровыеДанные),"ГОЛОВНАЯОРГАНИЗАЦИЯ") = 0 Тогда
		ПараметрыПолученияДанных.КадровыеДанные = СтрШаблон("%1,%2", ПараметрыПолученияДанных.КадровыеДанные, "ГоловнаяОрганизация");
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВТ, Истина, ПараметрыПолученияДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УправленческаяОрганизация", УправленческаяОрганизация());
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	*
	|ИЗ
	|	ВТСотрудникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация <> &УправленческаяОрганизация";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция НовыеПараметрыПолученияДанныхДляРегистрацииОбъектов()

	Параметры = Новый Структура("
	|Приложение,
	|ПозицияЕстьВПравилах,
	|ФизическиеЛицаСотрудники,
	|РабочиеМеста,
	|ФизическиеЛицаУсловноВыгружаемыхСотрудников,
	|ОбновляемыеПозиции,
	|ЗаписьНовыйПравил,
	|РассчитыватьПодразделенияРуководителей");
	Параметры.ФизическиеЛицаУсловноВыгружаемыхСотрудников = Новый Соответствие;
	Параметры.ОбновляемыеПозиции = Новый Массив;
	Параметры.РассчитыватьПодразделенияРуководителей = Ложь;
	Параметры.ЗаписьНовыйПравил = Ложь;
	
	Возврат Параметры;

КонецФункции

// Формирует набор данных для регистрации объектов к обмену при изменении правил выгрузки или
// при кадровых событиях.
//
// Параметры:
// 		ПараметрыПолученияДанных - Структура
// 			* Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 			* ПозицияЕстьВПравилах - Соответствие
// 			* ФизическиеЛицаСотрудники - Соответствие
// 					* Ключ - СправочникСсылка.ФизическиеЛица
//					* Значение - Массив - сотрудники физического лица
// 			* РабочиеМеста - ТаблицаЗначений - см НоваяТаблицаРабочиеМестаСотрудников()
// 			* ОбновляемыеПозиции - Массив - позиции, для вычисления подразделений, в которых необходимо обновить руководителей
// 			* ЗаписьНовыйПравил - Булево
// 			* РассчитыватьПодразделенияРуководителей - Булево
// 			* ФизическиеЛицаУсловноВыгружаемыхСотрудников - Соответствие.
//
// Возвращаемое значение:
// 		Структура
// 			* ФизическиеЛица - ТаблицаЗначений
// 			* Сотрудники - ТаблицаЗначений
// 			* ПрочиеОбъекты - ТаблицаЗначений.
//
Функция ДанныеДляРегистрацииОбъектов(ПараметрыПолученияДанных)
	
	Приложение 					= ПараметрыПолученияДанных.Приложение; 
	ПозицияЕстьВПравилах 		= ПараметрыПолученияДанных.ПозицияЕстьВПравилах;
	ФизическиеЛицаСотрудники 	= ПараметрыПолученияДанных.ФизическиеЛицаСотрудники;
	РабочиеМеста 				= ПараметрыПолученияДанных.РабочиеМеста;
	ОбновляемыеПозиции 			= ПараметрыПолученияДанных.ОбновляемыеПозиции;
	ЗаписьНовыйПравил 			= ПараметрыПолученияДанных.ЗаписьНовыйПравил;
	РассчитыватьПодразделенияРуководителей 		= ПараметрыПолученияДанных.РассчитыватьПодразделенияРуководителей;
	ФизическиеЛицаУсловноВыгружаемыхСотрудников = ПараметрыПолученияДанных.ФизическиеЛицаУсловноВыгружаемыхСотрудников;
	
	ФизическиеЛицаИсключения 	= ФизическиеЛицаИсключения(Приложение);
	// текущие выгружаемые физические лица.
	ВыгружаемыеФизическиеЛица 	= ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ВыгружаемыеФизическиеЛица(Приложение));
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ДатаПроверкиВыгрузки = НачалоДня(ТекущаяДатаСеанса());
	Иначе
		Настройки = РегистрыСведений.НастройкиИнтеграцииКабинетСотрудника.НастройкиИнтеграции();
		ДатаПроверкиВыгрузки = НачалоДня(ТекущаяДатаСеанса()) - Настройки.ДнейСохраненияПубликации * 86400;
	КонецЕсли;
	
	ФизическиеЛица = Новый ТаблицаЗначений;
	ФизическиеЛица.Колонки.Добавить("ФизическоеЛицо", 		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ФизическиеЛица.Колонки.Добавить("Удалить", 				Новый ОписаниеТипов("Булево"));
	ФизическиеЛица.Колонки.Добавить("ОкончаниеВыгрузки", 	Новый ОписаниеТипов("Дата"));
	
	ДанныеПоСотрудникам = Новый ТаблицаЗначений;
	ДанныеПоСотрудникам.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеПоСотрудникам.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеПоСотрудникам.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеПоСотрудникам.Колонки.Добавить("УсловноВыгружается", 	Новый ОписаниеТипов("Булево"));
	ДанныеПоСотрудникам.Колонки.Добавить("Уволен", 				Новый ОписаниеТипов("Булево"));
	ДанныеПоСотрудникам.Колонки.Добавить("Удалить", 			Новый ОписаниеТипов("Булево"));
	
	ПозицииВыгружаемыхСотрудников 			= Новый Массив;
	ПозицииУсловноВыгружаемыхСотрудников 	= Новый Массив;
	ГрафикиВыгружаемыхСотрудников 			= Новый Массив;
	ГрафикиУсловноВыгружаемыхСотрудников 	= Новый Массив;
	
	РабочиеМестаФизическогоЛица = РабочиеМеста.СкопироватьКолонки();
	РабочиеМеста.Индексы.Добавить("Сотрудник");
	
	// Обработка данных
	Для каждого ЭлементКоллекции Из ФизическиеЛицаСотрудники Цикл
		
		ФизическоеЛицо 	= ЭлементКоллекции.Ключ;
		Сотрудники 		= ЭлементКоллекции.Значение;
		
		ФизическоеЛицоВыгружается = ВыгружаемыеФизическиеЛица[ФизическоеЛицо] <> Неопределено;
		РабочиеМестаФизическогоЛица.Очистить();
		
		ОкончаниеВыгрузки = Дата(1,1,1);
		Если ФизическиеЛицаИсключения[ФизическоеЛицо] <> Неопределено Тогда 
			
			// Обработка исключений из правил.
			ЕстьВыгружаемоеРабочееМесто = ФизическиеЛицаИсключения[ФизическоеЛицо];
			Для каждого Сотрудник Из Сотрудники Цикл
				ДанныеСотрудника = РабочиеМеста.Найти(Сотрудник, "Сотрудник");
				Если ДанныеСотрудника = Неопределено Или Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда 
					НоваяСтрока = ДанныеПоСотрудникам.Добавить();
					НоваяСтрока.Сотрудник = Сотрудник;
					НоваяСтрока.Удалить = Истина;
				ИначеЕсли Не ДанныеСотрудникаЗаполнены(ДанныеСотрудника) Тогда
					Продолжить;
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			ЕстьВыгружаемоеРабочееМесто = Ложь;
			Для каждого Сотрудник Из Сотрудники Цикл
				
				ДанныеСотрудника = РабочиеМеста.Найти(Сотрудник, "Сотрудник");
				Если ДанныеСотрудника = Неопределено Или Не ЗначениеЗаполнено(ДанныеСотрудника.ВидСобытия) Тогда
					Если ФизическоеЛицоВыгружается Тогда
						НоваяСтрока = ДанныеПоСотрудникам.Добавить();
						НоваяСтрока.Сотрудник = Сотрудник;
						НоваяСтрока.Удалить = Истина;
					КонецЕсли;
				ИначеЕсли Не ДанныеСотрудникаЗаполнены(ДанныеСотрудника) Тогда
					Продолжить;
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ФизическоеЛицоВыгружается И ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						// Увольнение выгружаемого физического лица с позиции, которая есть в правилах,
						// запомним самую позднюю дату увольнения сотрудника этого физического лица,
						// при условии, что уволен "недавно".
						ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
						Если ДатаСобытия > ДатаПроверкиВыгрузки Тогда
							ОкончаниеВыгрузки = ?(ОкончаниеВыгрузки < ДатаСобытия, ДатаСобытия, ОкончаниеВыгрузки);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ЗаписьНовыйПравил Тогда
						Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
							ЕстьВыгружаемоеРабочееМесто = Истина;
						КонецЕсли;
					Иначе
						Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
							ЕстьВыгружаемоеРабочееМесто = Истина;
						ИначеЕсли ФизическоеЛицоВыгружается Тогда
							// Перевод выгружаемого физического лица на позицию, которой нет в правилах,
							// запомним самую позднюю дату сотрудника этого физического лица.
							ДатаСобытия = ДанныеСотрудника.ДатаСобытия;
							Если ДатаСобытия > ДатаПроверкиВыгрузки Тогда
								ОкончаниеВыгрузки = ?(ОкончаниеВыгрузки < ДатаСобытия, ДатаСобытия, ОкончаниеВыгрузки);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.НачальныеДанные
					Или ДанныеСотрудника.ВидСобытия = Перечисления.ВидыКадровыхСобытий.ВосстановлениеВДолжности Тогда	
					
					ЗаполнитьЗначенияСвойств(РабочиеМестаФизическогоЛица.Добавить(), ДанныеСотрудника);
					Если ПозицияЕстьВПравилах[ДанныеСотрудника.ДолжностьПоШтатномуРасписанию] <> Неопределено Тогда
						ЕстьВыгружаемоеРабочееМесто = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьВыгружаемоеРабочееМесто Тогда
			НоваяСтрока = ФизическиеЛица.Добавить();
			НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
			Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
				НоваяСтрока = ДанныеПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
				ПозицииВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
				Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
					ГрафикиВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ГрафикРаботы);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Нет выгружаемых рабочих мест, проверим увольнение или перевод.
			Если ЗначениеЗаполнено(ОкончаниеВыгрузки) Тогда
				НоваяСтрока = ФизическиеЛица.Добавить();
				НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
				НоваяСтрока.ОкончаниеВыгрузки = ОкончаниеВыгрузки;
				Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
					НоваяСтрока = ДанныеПоСотрудникам.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
					НоваяСтрока.Уволен = (СтрокаТЗ.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение);
					ПозицииВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
					Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
						ГрафикиВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ГрафикРаботы);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ФизическоеЛицоВыгружается Тогда
					НоваяСтрока = ФизическиеЛица.Добавить();
					НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
					НоваяСтрока.Удалить = Истина;
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						// Регистрируем сотрудников к выгрузке для обновления сведений о рабочих местах,
						// т.к. текущее состояние физического лица - выгружается.
						НоваяСтрока = ДанныеПоСотрудникам.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						НоваяСтрока.УсловноВыгружается = Истина;
						ПозицииУсловноВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
							ГрафикиУсловноВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ГрафикРаботы);
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ФизическиеЛицаУсловноВыгружаемыхСотрудников[ФизическоеЛицо] <> Неопределено Тогда
					// текущие условно выгружаемые сотрудники, добавим их позиции
					Для каждого СтрокаТЗ Из РабочиеМестаФизическогоЛица Цикл
						ПозицииУсловноВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию);
						Если ЗначениеЗаполнено(СтрокаТЗ.ГрафикРаботы) Тогда
							ГрафикиУсловноВыгружаемыхСотрудников.Добавить(СтрокаТЗ.ГрафикРаботы);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка исключений, всегда выгружаются.
	Для каждого ЭлементКоллекции Из ФизическиеЛицаИсключения Цикл
		Если ЭлементКоллекции.Значение Тогда
			СтрокаТЗ = ФизическиеЛица.Найти(ЭлементКоллекции.Ключ, "ФизическоеЛицо");
			Если СтрокаТЗ = Неопределено Тогда
				НоваяСтрока = ФизическиеЛица.Добавить();
				НоваяСтрока.ФизическоеЛицо = ЭлементКоллекции.Ключ;
			Иначе
				СтрокаТЗ.Удалить = Ложь;
				СтрокаТЗ.ОкончаниеВыгрузки = Дата(1,1,1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ВыгружаемыеПозиции = Новый Массив;
	Если ЗаписьНовыйПравил Тогда
		// Если запись правил выгрузки, добавим в список выгружаемых позиций
		// позиции правил.
		Для каждого ЭлементКоллекции Из ПозицияЕстьВПравилах Цикл
			ВыгружаемыеПозиции.Добавить(ЭлементКоллекции.Ключ);
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВыгружаемыеПозиции, ПозицииВыгружаемыхСотрудников, Истина);
	
	// получим ссылки на объекты выгружаемых позиций
	ПрочиеОбъекты = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Приложение, ВыгружаемыеПозиции);
	ГрафикиВыгружаемыхСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГрафикиВыгружаемыхСотрудников);
	Для каждого Ссылка Из ГрафикиВыгружаемыхСотрудников Цикл
		НоваяСтрока = ПрочиеОбъекты.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	КонецЦикла;
	
	// Вычисление подразделений для обновления руководителей.
	Если РассчитыватьПодразделенияРуководителей Тогда
		ОбновляемыеПозицииПриложения = Новый Массив;
		Для каждого Позиция Из ОбновляемыеПозиции Цикл
			Если ПозицияЕстьВПравилах[Позиция] = Истина Тогда
				ОбновляемыеПозицииПриложения.Добавить(Позиция);
			КонецЕсли;
		КонецЦикла;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбновляемыеПозицииПриложения, ПозицииВыгружаемыхСотрудников, Истина);
		Подразделения = ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделенияПозицийРуководителей(ОбновляемыеПозицииПриложения);
		Если ЗначениеЗаполнено(Подразделения) Тогда
			Для каждого Подразделение Из Подразделения Цикл
				НоваяСтрока = ПрочиеОбъекты.Добавить();
				НоваяСтрока.Ссылка = Подразделение;
				НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// добавим условно выгружаемые данные
	ПрочиеОбъекты.Колонки.Добавить("УсловноВыгружается", 	Новый ОписаниеТипов("Булево"));
	ГрафикиУсловноВыгружаемыхСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ГрафикиУсловноВыгружаемыхСотрудников);
	ГрафикиУсловноВыгружаемыхСотрудников = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ГрафикиУсловноВыгружаемыхСотрудников, ГрафикиВыгружаемыхСотрудников);
	ПозицииУсловноВыгружаемыхСотрудников = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПозицииУсловноВыгружаемыхСотрудников, ВыгружаемыеПозиции);
	ПрочиеУсловноВыгружаемыеОбъекты = ОбъектыПозицийШтатногоРасписанияПоСсылкам(Приложение, ПозицииУсловноВыгружаемыхСотрудников);
	Для каждого Ссылка Из ГрафикиУсловноВыгружаемыхСотрудников Цикл
		НоваяСтрока = ПрочиеУсловноВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка 		= Ссылка;
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПрочиеУсловноВыгружаемыеОбъекты) Тогда
		
		ПрочиеОбъекты.Индексы.Добавить("Ссылка,ТипОбъекта");
		Отбор = Новый Структура("Ссылка,ТипОбъекта");
		ДобавляемыеСтроки = Новый Массив;
		Для каждого СтрокаТЗ Из ПрочиеУсловноВыгружаемыеОбъекты Цикл
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
			Если Не ЗначениеЗаполнено(ПрочиеОбъекты.НайтиСтроки(Отбор)) Тогда
				ДобавляемыеСтроки.Добавить(СтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
		
		ПрочиеОбъекты.Индексы.Удалить(0);
		Для каждого СтрокаТЗ Из ДобавляемыеСтроки Цикл
			НоваяСтрока = ПрочиеОбъекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			НоваяСтрока.УсловноВыгружается = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРегистрации = Новый Структура;
	ДанныеДляРегистрации.Вставить("ФизическиеЛица", ФизическиеЛица);
	ДанныеДляРегистрации.Вставить("Сотрудники", 	ДанныеПоСотрудникам);
	ДанныеДляРегистрации.Вставить("ПрочиеОбъекты", 	ПрочиеОбъекты);
	
	Возврат ДанныеДляРегистрации;

КонецФункции

Функция ОбъектыПозицийШтатногоРасписанияПоСсылкам(Приложение, Позиции)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ТипСсылки = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубликации1СПерсонал.Тип)
	Иначе
		ТипСсылки = Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.СсылкаПубликацииКабинетСотрудника.Тип)
	КонецЕсли;
	ОбъектыПозиций = Новый ТаблицаЗначений;
	ОбъектыПозиций.Колонки.Добавить("Ссылка", 		ТипСсылки);
	ОбъектыПозиций.Колонки.Добавить("ТипОбъекта", 	Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом"));
	
	Если Позиции.Количество() = 0 Тогда
		Возврат ОбъектыПозиций;
	КонецЕсли;
	
	Позиции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Позиции);
	Для каждого Позиция Из Позиции Цикл
		НоваяСтрока = ОбъектыПозиций.Добавить();
		НоваяСтрока.Ссылка = Позиция;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Владелец КАК Организация,
	|	ШтатноеРасписание.Должность КАК Должность
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	ТаблицаПозиций = Запрос.Выполнить().Выгрузить();
	
	Должности = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Должность", Истина);
	Для каждого Должность Из Должности Цикл
		НоваяСтрока = ОбъектыПозиций.Добавить();
		НоваяСтрока.Ссылка = Должность;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
	КонецЦикла;
	
	Организации = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПозиций, "Организация", Истина);
	ГоловныеОрганизации = Новый Массив;
	Для каждого Организация Из Организации Цикл
		ГоловныеОрганизации.Добавить(ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ГоловныеОрганизации, Истина);
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	Для каждого Организация Из Организации Цикл
		НоваяСтрока = ОбъектыПозиций.Добавить();
		НоваяСтрока.Ссылка = Организация;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация;
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			НоваяСтрока = ОбъектыПозиций.Добавить();
			НоваяСтрока.Ссылка = Организация;
			НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
		КонецЕсли;
	КонецЦикла;
	
	Подразделения = ПодразделенияПозицийШтатногоРасписания(Позиции);
	Для каждого Подразделение Из Подразделения Цикл
		НоваяСтрока = ОбъектыПозиций.Добавить();
		НоваяСтрока.Ссылка = Подразделение;
		НоваяСтрока.ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	КонецЦикла;
	
	Возврат ОбъектыПозиций;

КонецФункции

Функция ПодразделенияПозицийШтатногоРасписания(Позиции)

	Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Подразделения = ПодразделенияОрганизацииПозиций(Позиции);
	Иначе
		Подразделения = ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделенияПозиций(Позиции);
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

// Возвращает подразделения организаций, указанные в позициях штатного расписания,
// и родителей этих подразделений.
//
// Параметры:
// 		Позиции - Массив - СправочникСсылка.ШтатноеРасписание.
//
// 	Возвращаемое значение:
// 		Массив - СправочникСсылка.ПодразделенияОрганизаций.
//
Функция ПодразделенияОрганизацииПозиций(Позиции)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", Позиции);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтатноеРасписание.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Ссылка В(&Позиции)";
	Подразделения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
	
	Если Подразделения.Количество() > 0 Тогда
		РодителиПодразделений = РодителиПодразделений(Подразделения);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Подразделения, РодителиПодразделений, Истина);
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

Функция РодителиПодразделений(Подразделения) Экспорт
	
	РодителиПодразделений = Новый Массив;
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Подразделения, "Родитель", Ложь);
	Для каждого ЭлементКоллекции Из ЗначенияРеквизитов Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			РодителиПодразделений.Добавить(ЭлементКоллекции.Значение);
		КонецЕсли;
	КонецЦикла;
	РодителиПодразделений = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодителиПодразделений);
	
	Если РодителиПодразделений.Количество() > 0 Тогда
		РодителиРодителей = РодителиПодразделений(РодителиПодразделений);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РодителиПодразделений, РодителиРодителей, Истина);
	КонецЕсли;
	
	Возврат РодителиПодразделений;

КонецФункции

// Добавляет новые позиции в правила. Используется, когда не ведется штатное расписание.
// 
// Параметры:
// 		Приложения - Массив - приложения в правилах которых добавляются позиции.
// 		НовыеПозиции - Массив - новые позиции штатного расписания.
//		РегистрироватьИзменения - Булево, признак регистрации новых позиций в выгрузке и изменениях.
//
Процедура ДополнитьПозицииВПравилах(Приложения, НовыеПозиции, РегистрироватьИзменения = Ложь) Экспорт

	ПроверяемыеОбъекты = ОбщегоНазначения.ВыгрузитьКолонку(НовыеПозиции, "Организация", Истина);
	Подразделения = ОбщегоНазначения.ВыгрузитьКолонку(НовыеПозиции, "Подразделение", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеОбъекты, Подразделения);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверяемыеОбъекты", ПроверяемыеОбъекты);
	Запрос.УстановитьПараметр("Приложения", Приложения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаВыгрузки.Ссылка КАК Ссылка,
	|	ПравилаВыгрузки.Приложение КАК Приложение
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК ПравилаВыгрузки
	|ГДЕ
	|	ПравилаВыгрузки.Приложение В(&Приложения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбъектыПриложений = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Приложение") Цикл
		ОбъектыПравил = Новый Соответствие;
		Приложение = Выборка.Приложение;
		Пока Выборка.Следующий() Цикл
			ОбъектыПравил.Вставить(Выборка.Ссылка, Истина);
		КонецЦикла;
		ОбъектыПриложений.Вставить(Приложение, ОбъектыПравил);
	КонецЦикла;
	
	ТаблицаПозиций = Новый ТаблицаЗначений;
	ТаблицаПозиций.Колонки.Добавить("Ссылка");
	ТаблицаПозиций.Колонки.Добавить("Приложение");
	
	ИзмененияУП = Новый ТаблицаЗначений;
	ИзмененияУП.Колонки.Добавить("Ссылка");
	ИзмененияУП.Колонки.Добавить("ТипОбъекта");
	ИзмененияУП.Колонки.Добавить("ВерсияДанных");
	
	ИзмененияКС = ИзмененияУП.СкопироватьКолонки();
	
	Для каждого ЭлементКоллекции Из ОбъектыПриложений Цикл
		Приложение = ЭлементКоллекции.Ключ;
		ОбъектыПравил = ЭлементКоллекции.Значение;
		Для каждого СтрокаПозиции Из НовыеПозиции Цикл
			НоваяСтрока = Неопределено;
			Если ОбъектыПравил[СтрокаПозиции.Организация] <> Неопределено Тогда
				НоваяСтрока = ТаблицаПозиций.Добавить();
				НоваяСтрока.Ссылка = СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
				НоваяСтрока.Приложение = Приложение;
			ИначеЕсли ОбъектыПравил[СтрокаПозиции.Подразделение] <> Неопределено Тогда
				НоваяСтрока = ТаблицаПозиций.Добавить();
				НоваяСтрока.Ссылка = СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
				НоваяСтрока.Приложение = Приложение;
			КонецЕсли;
			Если РегистрироватьИзменения И НоваяСтрока <> Неопределено Тогда
				Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
					НоваяСтрока = ИзмененияУП.Добавить();
					НоваяСтрока.Ссылка 			= СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				Иначе
					НоваяСтрока = ИзмененияКС.Добавить();
					НоваяСтрока.Ссылка 			= СтрокаПозиции.ДолжностьПоШтатномуРасписанию;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаПозиций.Количество() > 0  Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
			ЭлементБлокировки.ИсточникДанных = ТаблицаПозиций;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			Если ЗначениеЗаполнено(ИзмененияУП) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
				ЭлементБлокировки.ИсточникДанных = ИзмененияУП;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
				ЭлементБлокировки.ИсточникДанных = ИзмененияУП;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			Если ЗначениеЗаполнено(ИзмененияКС) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ИзмененияКС;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ИзмененияКС;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			Блокировка.Заблокировать();
			
			Для каждого СтрокаТЗ Из ТаблицаПозиций Цикл
				МенеджерЗаписи = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			Для каждого СтрокаТЗ Из ИзмененияУП Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			Для каждого СтрокаТЗ Из ИзмененияКС Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ШаблонОписания = НСтр("ru = 'Ошибка регистрации новой позиции ШР в правилах выгрузки:
				|%1';
				|en = 'An error occurred when registering a new headcount position in export rules:
				|%1'");
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтрШаблон(ШаблонОписания, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИмяОбщегоСобытияЖР(), УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПравилаВыгрузкиЗаданы(Приложение) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Правила.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК Правила
	|ГДЕ
	|	Правила.Приложение = &Приложение";
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Процедура ПроверитьОбновитьИсключенияИзПравил(Приложение)

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Настройки = ИнтеграцияКабинетСотрудника.НастройкиПриложения();
	Иначе
		Настройки = Интеграция1СПерсонал.НастройкиПриложения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.Приложение КАК Приложение,
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.ЭтоОтветственный
	|	И ИсключенияИзПравил.Приложение = &Приложение";
	Выборка = Запрос.Выполнить().Выбрать();
	ОбновитьОтветственного = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФизическоеЛицо <> Настройки.Ответственный Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьМенеджерЗаписи();
			Запись.Приложение 		= Выборка.Приложение;
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Выборка.Публикуется;
			Запись.ЭтоОтветственный = Ложь;
			Запись.Записать();
		ИначеЕсли Не Выборка.Публикуется Тогда
			Запись = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьМенеджерЗаписи();
			Запись.Приложение 		= Выборка.Приложение;
			Запись.ФизическоеЛицо 	= Выборка.ФизическоеЛицо;
			Запись.Публикуется 		= Истина;
			Запись.ЭтоОтветственный = Истина;
			Запись.Записать();
		Иначе
			ОбновитьОтветственного = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновитьОтветственного И ЗначениеЗаполнено(Настройки.Ответственный) Тогда
		Запись = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		Запись.Приложение 		= Приложение;
		Запись.ФизическоеЛицо 	= Настройки.Ответственный;
		Запись.Публикуется 		= Истина;
		Запись.ЭтоОтветственный = Истина;
		Запись.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроверкаБлокировкаВыполненияОбмена

Функция ОписаниеКлючаБлокировкиОбмен(Приложение)

	ОписаниеКлюча = Новый Структура("Приложение,ВидСобытия");
	ОписаниеКлюча.Приложение = Приложение;
	ОписаниеКлюча.ВидСобытия = Перечисления.ВидыСобытийОбменаУправлениеПерсоналом.Обмен;
	
	Возврат ОписаниеКлюча;

КонецФункции

Функция ОбменВыполняется(Приложение) Экспорт
	
	ОписаниеКлюча = ОписаниеКлючаБлокировкиОбмен(Приложение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗаписи = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СоздатьКлючЗаписи(ОписаниеКлюча);
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьБлокировкуДляВыполненияОбмена(Приложение, БлокировкаУстановлена, ВызыватьИсключение) Экспорт
	
	ОписаниеКлюча = ОписаниеКлючаБлокировкиОбмен(Приложение);
	КлючЗаписи = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СоздатьКлючЗаписи(ОписаниеКлюча);
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		БлокировкаУстановлена = Истина;
	Исключение
		БлокировкаУстановлена = Ложь;
		Если ВызыватьИсключение Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не удалось заблокировать данные для обмена.
			|Вероятно, обмен уже выполняется. Повторите попытку позже.';
			|en = 'Не удалось заблокировать данные для обмена.
			|Вероятно, обмен уже выполняется. Повторите попытку позже.'", ОбщегоНазначения.КодОсновногоЯзыка()); 
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Комментарий = СтрШаблон("%1%2%3", СообщениеОбОшибке, Символы.ПС, ПодробноеПредставлениеОшибки);
			ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИсключенияИзПравилПубликации

Процедура ОбновитьСведенияОПубликацииФизическихЛицИсключений(Приложение, ФизическиеЛица) Экспорт

	Если Не ЗначениеЗаполнено(ФизическиеЛица) Или Не ПравилаВыгрузкиЗаданы(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) КАК Сотрудник
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО ФизическиеЛица.Ссылка = Сотрудники.ФизическоеЛицо
	|			И (Сотрудники.Ссылка = Сотрудники.ГоловнойСотрудник)
	|			И (НЕ Сотрудники.ПометкаУдаления)
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&ФизическиеЛица)";
	ТаблицаСотрудников = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьИзменениеКадровойИстории(ТаблицаСотрудников, Приложение);
	
	Если ОбновлятьРуководителейПриСменеРуководителяОрганизации() Тогда
		Организации = ОрганизацииГдеФизическиеЛицаРуководители(Приложение, ФизическиеЛица);
		Подразделения = ПодразделенияДляОбновленияРуководителя(Приложение, Организации);
		Если ЗначениеЗаполнено(Подразделения) Тогда
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
				Иначе
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				КонецЕсли;
				ЭлементБлокировки.ИсточникДанных = Подразделения;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				Для каждого СтрокаТЗ Из Подразделения Цикл
					Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
						МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
					Иначе
						МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.ВерсияДанных = Строка(Новый УникальныйИдентификатор);
					МенеджерЗаписи.Записать();
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИсключениеИзПравилЗарегистрироватьОтветственного(Приложение, ТекущийОтветственный, НовыйОтветственный) Экспорт
	
	ФизическиеЛица = Новый Массив;
	
	Если ЗначениеЗаполнено(ТекущийОтветственный) Тогда
		Запись = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		Запись.Приложение 		= Приложение;
		Запись.ФизическоеЛицо 	= ТекущийОтветственный;
		Запись.Удалить();
		ФизическиеЛица.Добавить(ТекущийОтветственный);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйОтветственный) Тогда
		Запись = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		Запись.Приложение 		= Приложение;
		Запись.ФизическоеЛицо 	= НовыйОтветственный;
		Запись.Публикуется 		= Истина;
		Запись.ЭтоОтветственный = Истина;
		Запись.Записать();
		ФизическиеЛица.Добавить(НовыйОтветственный);
	КонецЕсли;
	
	ОбновитьСведенияОПубликацииФизическихЛицИсключений(Приложение, ФизическиеЛица);

КонецПроцедуры

Функция ОрганизацииГдеФизическиеЛицаРуководители(Приложение, ФизическиеЛица)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
	КонецЕсли;
	ВыгружаемыеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	СведенияОРуководителях = СведенияОРуководителяхОрганизаций(ВыгружаемыеОрганизации);
	Организации = Новый Массив;
	Для каждого Организация Из ВыгружаемыеОрганизации Цикл
		Если ФизическиеЛица.Найти(СведенияОРуководителях[Организация].Руководитель) <> Неопределено Тогда
			Организации.Добавить(Организация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Организации;

КонецФункции

Функция ПодразделенияДляОбновленияРуководителя(Приложение, Организации)
	
	Подразделения = Новый Массив;
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат Подразделения;
	КонецЕсли;
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Подразделение
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
		|		ПО ВыгружаемыеОбъекты.Ссылка = Подразделения.Ссылка
		|			И (Подразделения.Владелец В (&Организации))
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ПодразделенияОрганизаций";
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		КонецЕсли;
		ПодразделенияДляПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		Для каждого Организация Из Организации Цикл
			Подразделения.Добавить(Организация);
		КонецЦикла;
	Иначе
		ПодразделенияДляПроверки = ПодразделенияДляПроверкиРуководителей(Организации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПодразделенияДляПроверки) Тогда
		Возврат Подразделения;
	КонецЕсли;
	
	ФизическиеЛица = ВыгружаемыеФизическиеЛица(Приложение);
	ВыгружаемыеФизическиеЛица = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);
	ПодразделенияРуководители = РуководителиПодразделенийОрганизаций(ПодразделенияДляПроверки, ВыгружаемыеФизическиеЛица);
	
	ПодразделенияБезРуководителей = Новый Массив;
	Для каждого Подразделение Из ПодразделенияДляПроверки Цикл
		Если Не ЗначениеЗаполнено(ПодразделенияРуководители[Подразделение]) Тогда
			ПодразделенияБезРуководителей.Добавить(Подразделение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПодразделенияБезРуководителей) Тогда
		Запрос.УстановитьПараметр("Подразделения", ПодразделенияБезРуководителей);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение) КАК ТипОбъекта
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка В(&Подразделения)";
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника", "РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
		КонецЕсли;
		Подразделения = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат Подразделения;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОбъектов

Функция ДанныеФизическихЛиц(ФизическиеЛица, Приложение) Экспорт

	АдресаФотографий = АдресаФотографийФизическихЛиц(ФизическиеЛица);
	КонтактнаяИнформация = КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица);
	
	КадровыеДанные = "ФИОПолные,Фамилия,Имя,Отчество,Инициалы,
	|Пол,ДатаРождения,ИНН,СтраховойНомерПФР,МестоРождения,
	|ТелефонРабочийПредставление,АдресПоПропискеПредставление,АдресМестаПроживанияПредставление,
	|ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКемВыдан,ДокументКодПодразделения,
	|Страна";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		КадровыеДанные = СтрШаблон("%1,%2", КадровыеДанные, "ДатаОтключенияКабинетСотрудника");
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Ложь, ФизическиеЛица, КадровыеДанные, ТекущаяДатаСеанса());
	
	Данные = Новый Структура;
	Данные.Вставить("КадровыеДанные", 		КадровыеДанные);
	Данные.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	Данные.Вставить("АдресаФотографий", 	АдресаФотографий);
	
	Возврат Данные;

КонецФункции

Функция КонтактнаяИнформацияФизическихЛиц(ФизическиеЛица) Экспорт

	КонтактнаяИнформация = Новый Структура("МобильныеТелефоны, АдресаПочты", Новый Соответствие, Новый Соответствие);
	Если ФизическиеЛица.Количество() = 0 Тогда
		Возврат КонтактнаяИнформация;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.Настройки();
	ВидыКИ = Новый Массив;
	ВидыКИ.Добавить(Настройки.ВидКИМобильныйТелефон);
	ВидыКИ.Добавить(Настройки.ВидКИАдресЭлектроннойПочты);
	
	МобильныеТелефоны = Новый Соответствие;
	АдресаПочты = Новый Соответствие;
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ФизическиеЛица, , ВидыКИ, ТекущаяДатаСеанса());
	Для каждого СтрокаТЗ Из ТаблицаКИ Цикл
		Если СтрокаТЗ.Вид = Настройки.ВидКИМобильныйТелефон Тогда
			МобильныеТелефоны.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		ИначеЕсли СтрокаТЗ.Вид = Настройки.ВидКИАдресЭлектроннойПочты Тогда
			АдресаПочты.Вставить(СтрокаТЗ.Объект, СокрЛП(СтрокаТЗ.Представление));
		КонецЕсли;
	КонецЦикла;
	
	КонтактнаяИнформация.МобильныеТелефоны = МобильныеТелефоны;
	КонтактнаяИнформация.АдресаПочты = АдресаПочты;
	
	Возврат КонтактнаяИнформация;

КонецФункции

Функция АдресаФотографийФизическихЛиц(ФизическиеЛица)
	
	АдресаФотографий = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		МодульКадровыйУчетРасширенный = ОбщегоНазначения.ОбщийМодуль("КадровыйУчетРасширенный");
		АдресаФотографий = МодульКадровыйУчетРасширенный.АдресаФотографийФизическихЛиц(ФизическиеЛица);
	КонецЕсли;
	
	Возврат АдресаФотографий;

КонецФункции

Функция ДанныеОрганизаций(Организации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.ОГРН КАК ОГРН,
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КПП, """") КАК КПП,
	|	ЕСТЬNULL(ТекущиеРуководители.Руководитель, НЕОПРЕДЕЛЕНО) КАК Руководитель,
	|	ЕСТЬNULL(ТекущиеРуководители.Должность, НЕОПРЕДЕЛЕНО) КАК ДолжностьРуководителя
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеРуководителиКабинетСотрудника КАК ТекущиеРуководители
	|		ПО Организации.Ссылка = ТекущиеРуководители.СтруктурнаяЕдиница
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеПодразделений(Подразделения, Приложение) Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ДанныеПодразделений(Подразделения, Приложение);

КонецФункции

Функция ДанныеШтатногоРасписания(ПозицииШР) Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ДанныеШтатногоРасписания(ПозицииШР);
	
КонецФункции

Функция ДанныеСотрудников(Сотрудники, ИспользоватьРабочиеМестаОхраныТруда) Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ДанныеСотрудников(Сотрудники, ИспользоватьРабочиеМестаОхраныТруда);
	
КонецФункции

Функция ВидыПредоставляемыхСотрудникамСправок() Экспорт

	ВидыСправок = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.СамообслуживаниеСотрудников") Тогда
		МодульСамообслуживаниеСотрудников = ОбщегоНазначения.ОбщийМодуль("СамообслуживаниеСотрудников");
		Возврат МодульСамообслуживаниеСотрудников.ВидыПредоставляемыхСотрудникамСправок();
	КонецЕсли;
	
	Возврат ВидыСправок;

КонецФункции

Функция ДанныеГрафиковРаботыСотрудников(ГрафикиРаботыСотрудников, Приложение)  Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ДанныеГрафиковРаботыСотрудников(ГрафикиРаботыСотрудников, Приложение);

КонецФункции

Функция ДоступныеФункцииФизическихЛиц(ФизическиеЛица, Приложение) Экспорт

	ФизическиеЛицаПрисоединенныеККЭДО = КадровыйЭДО.ФизическиеЛицаПрисоединенныеККЭДО(ФизическиеЛица);
	ИспользуетКЭДО = Новый Соответствие;
	Для каждого СтрокаТЗ Из ФизическиеЛицаПрисоединенныеККЭДО Цикл
		ИспользуетКЭДО.Вставить(СтрокаТЗ.ФизическоеЛицо, СтрокаТЗ.ИспользуетКЭДО);
	КонецЦикла;
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ФизическоеЛицо");
	Данные.Колонки.Добавить("ИспользуетКЭДО", Новый ОписаниеТипов("Булево"));
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.ИспользуетКЭДО = ?(ЗначениеЗаполнено(ИспользуетКЭДО[ФизическоеЛицо]), ИспользуетКЭДО[ФизическоеЛицо], Ложь);
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

Функция ОграниченияДоступаКРабочимКонтактам(ФизическиеЛица, Приложение) Экспорт
	
	Настройки = РегистрыСведений.ИспользуемаяФункциональностьСервисаКабинетСотрудника.Настройки();
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ФизическоеЛицо");
	Данные.Колонки.Добавить("УровеньДоступа");
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;
		НоваяСтрока.УровеньДоступа = Настройки.УровеньДоступаКИ;
	КонецЦикла;
	
	Возврат Данные;

КонецФункции

Функция ДанныеПрименяемыхВычетовНДФЛ(ФизическиеЛица, Приложение) Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомСлужебный.ПрименяемыеВычеты(ФизическиеЛица, ТекущаяДатаСеанса());

КонецФункции

Функция ДанныеМЧД(МЧД) Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеМЧД(МЧД);

КонецФункции

Функция ДанныеВидовПредоставляемыхСотрудникамСправок(ВидыСправок) Экспорт

	Данные = ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеВидовПредоставляемыхСотрудникамСправок(ВидыСправок);
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если настройка выключена, публикуем все виды справок как не используемые.
	ДоступнаВыгрузкаВидовСправок = ДоступнаВыгрузкаВидовСправок();
	
	Данные.Колонки.Добавить("Используется", Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТЗ Из Данные Цикл
		СтрокаТЗ.Представление = Лев(СтрокаТЗ.Представление, 30);
		СтрокаТЗ.Используется = ДоступнаВыгрузкаВидовСправок И Не СтрокаТЗ.ВАрхиве И Не СтрокаТЗ.ПометкаУдаления;
	КонецЦикла;
	
	Возврат Данные;

КонецФункции 

Функция ДанныеГрафиковОтпусков(Сотрудники) Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомСлужебный.ДанныеГрафиковОтпусков(Сотрудники);

КонецФункции 

#КонецОбласти

#Область ПроверкаЗаполнения 

Процедура ПроверитьЗаполнениеОбъектовПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение = Параметры.Приложение;
	Попытка
		ПроверитьЗаполнениеОбъектов(Приложение);
	Исключение
		// Текст ошибки обрабатывается при завершении фонового задания.
		ВызватьИсключение ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

Процедура ПроверитьЗаполнениеОбъектов(ПриложенияДляПроверки) Экспорт
	
	Если ТипЗнч(ПриложенияДляПроверки) <> Тип("Массив") Тогда
		Приложения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПриложенияДляПроверки);
	Иначе
		Приложения = ПриложенияДляПроверки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущиеОшибкиЗаполнения = ТекущиеОшибкиЗаполнения(Приложения);
	
	РезультатыПроверки = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	РезультатыПроверки.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	
	Отбор = Новый Структура("БлокирующаяОшибка,ТипОбъекта", Истина);
	
	ФизическиеЛица = Новый Массив;
	Для каждого Приложение Из Приложения Цикл
		ВыгружаемыеФизическиеЛица = ВыгружаемыеФизическиеЛица(Приложение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, ВыгружаемыеФизическиеЛица, Истина);
	КонецЦикла;
	ОшибкиЗаполнения = ОшибкиЗаполненияФизическихЛиц(ФизическиеЛица, Приложения);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполнения, ТекущиеОшибкиЗаполнения, ТипОбъекта);
	Отбор.ТипОбъекта = ТипОбъекта;
	ОшибкиФизическихЛиц = РезультатыПроверки.Скопировать(Отбор);
	
	ПозицииШР = Новый Массив;
	Для каждого Приложение Из Приложения Цикл
		ВыгружаемыеПозиции = ВыгружаемыеПозицииШтатногоРасписания(Приложение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПозицииШР, ВыгружаемыеПозиции, Истина);
	КонецЦикла;
	ОшибкиЗаполнения = ОшибкиЗаполненияПозицийШтатногоРасписания(ПозицииШР, Приложения);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполнения, ТекущиеОшибкиЗаполнения, ТипОбъекта);
	Отбор.ТипОбъекта = ТипОбъекта;
	ОшибкиПозицийШР = РезультатыПроверки.Скопировать(Отбор);
	
	Сотрудники = Новый Массив;
	Для каждого Приложение Из Приложения Цикл
		ВыгружаемыеСотрудники = ВыгружаемыеСотрудники(Приложение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, ВыгружаемыеСотрудники, Истина);
	КонецЦикла;
	ОшибкиЗаполнения = ОшибкиЗаполненияСотрудников(Сотрудники, ОшибкиФизическихЛиц, ОшибкиПозицийШР, Приложения);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполнения, ТекущиеОшибкиЗаполнения, ТипОбъекта);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
		ЭлементБлокировки.ИсточникДанных = РезультатыПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из РезультатыПроверки Цикл
			МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			Если СтрокаТЗ.ЕстьОшибка Тогда
				МенеджерЗаписи.Записать();
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка записи результатов проверки заполнения объектов %1
			|%2';
			|en = 'An error occurred when saving results of the object filling check %1
			|%2'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, Строка(Приложение), ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИменаСобытийЖР(Приложение).ПрочиеСобытия;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение
	КонецПопытки;

КонецПроцедуры

// Выполняет проверку уже зарегистрированных блокирующих ошибок
// и регистрирует ошибки, если они еще не зарегистрированы.
//
Процедура ПроверитьЗарегистрироватьБлокирующиеОшибкиЗаполнения(Приложение, ОшибкиЗаполнения, ТипОбъекта) Экспорт
	
	МассивОбъектов = Новый Массив;
	Для каждого ЭлементКоллекции Из ОшибкиЗаполнения Цикл
		МассивОбъектов.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Ссылки", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.БлокирующаяОшибка
	|	И ОшибкиЗаполнения.Приложение = &Приложение
	|	И ОшибкиЗаполнения.ТипОбъекта = &ТипОбъекта
	|	И ОшибкиЗаполнения.Ссылка В(&Ссылки)";
	ЗарегистрированныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбъектыКРегистрации = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивОбъектов, ЗарегистрированныеОбъекты);
	
	Если Не ЗначениеЗаполнено(ОбъектыКРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиКРегистрации = Новый Соответствие;
	Для каждого ОбъектСОшибкой Из ОбъектыКРегистрации Цикл
		ОшибкиКРегистрации.Вставить(ОбъектСОшибкой, ОшибкиЗаполнения[ОбъектСОшибкой]);
	КонецЦикла;
	
	РезультатыПроверки = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	РезультатыПроверки.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	ДополнитьРезультатыПроверкиОшибками(РезультатыПроверки, ОшибкиКРегистрации, ТипОбъекта);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
		ЭлементБлокировки.ИсточникДанных = РезультатыПроверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из РезультатыПроверки Цикл
			МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			Если СтрокаТЗ.ЕстьОшибка Тогда
				МенеджерЗаписи.Записать();
			Иначе
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ШаблонОписания = НСтр("ru = 'Ошибка записи результатов проверки заполнения объектов %1
			|%2';
			|en = 'An error occurred when saving results of the object filling check %1
			|%2'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтрШаблон(ШаблонОписания, Строка(Приложение), ПодробноеПредставлениеОшибки);
		ИмяСобытия = ИменаСобытийЖР(Приложение).Обмен;
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);
		ВызватьИсключение
	КонецПопытки;

КонецПроцедуры
	
Функция ТекущиеОшибкиЗаполнения(Приложения, Ссылки = Неопределено)
	
	Если ТипЗнч(Приложения) <> Тип("Массив") Тогда
		МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Приложения);
	Иначе
		МассивПриложений = Приложения;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложения", МассивПриложений);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.Ссылка КАК Ссылка,
	|	ОшибкиЗаполнения.Приложение КАК Приложение,
	|	ОшибкиЗаполнения.ТипОбъекта КАК ТипОбъекта,
	|	ОшибкиЗаполнения.БлокирующаяОшибка КАК БлокирующаяОшибка,
	|	ОшибкиЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОшибкиЗаполнения.ПозицияШР КАК ПозицияШР,
	|	ОшибкиЗаполнения.ПредставлениеБлокирующейОшибки КАК ПредставлениеБлокирующейОшибки,
	|	ОшибкиЗаполнения.ПредставлениеОшибки КАК ПредставлениеОшибки
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.Приложение В(&Приложения)
	|	И ОшибкиЗаполнения.Ссылка В(&Ссылки)";
	Если Не ЗначениеЗаполнено(Ссылки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОшибкиЗаполнения.Ссылка В(&Ссылки)", "");
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ДополнитьРезультатыПроверкиОшибками(РезультатыПроверки, ОшибкиЗаполненияОбъектов, ТипОбъекта)

	Для каждого КлючИЗначение Из ОшибкиЗаполненияОбъектов Цикл
		
		Ссылка 				= КлючИЗначение.Ключ;
		ОшибкиЗаполнения 	= КлючИЗначение.Значение;
		
		Для каждого Приложение Из Перечисления.ПриложенияДляИнтеграции Цикл
			
			ОшибкиПриложения = ОшибкиЗаполнения[Приложение];
			Если Не ЗначениеЗаполнено(ОшибкиПриложения) Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеБлокирующейОшибки 	= ПредставлениеОшибкиЗаполненияОбъекта(ОшибкиПриложения.БлокирующиеОшибки);
			ПредставлениеОшибки 			= ПредставлениеОшибкиЗаполненияОбъекта(ОшибкиПриложения.Ошибки);
			
			Если ПустаяСтрока(ПредставлениеБлокирующейОшибки) И ПустаяСтрока(ПредставлениеОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = РезультатыПроверки.Добавить();
			НоваяСтрока.Ссылка 							= Ссылка;
			НоваяСтрока.Приложение 						= Приложение;
			НоваяСтрока.ТипОбъекта 						= ТипОбъекта;
			НоваяСтрока.БлокирующаяОшибка 				= Не ПустаяСтрока(ПредставлениеБлокирующейОшибки);
			НоваяСтрока.ПредставлениеБлокирующейОшибки 	= ПредставлениеБлокирующейОшибки;
			НоваяСтрока.ПредставлениеОшибки 			= ПредставлениеОшибки;
			НоваяСтрока.ФизическоеЛицо 					= ОшибкиПриложения.ФизическоеЛицо;
			НоваяСтрока.ПозицияШР 						= ОшибкиПриложения.ПозицияШР;
			НоваяСтрока.ЕстьОшибка 						= Истина;
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьРезультатыПроверкиУдалениемОшибок(РезультатыПроверки, ОшибкиЗаполненияОбъектов, ТекущиеОшибкиЗаполнения, ТипОбъекта)

	Отбор = Новый Структура("ТипОбъекта");
	Отбор.ТипОбъекта = ТипОбъекта;
	ТекущиеОшибки = ТекущиеОшибкиЗаполнения.НайтиСтроки(Отбор);
	Для каждого СтрокаТЗ Из ТекущиеОшибки Цикл
		
		ОшибкиЗаполнения = ОшибкиЗаполненияОбъектов[СтрокаТЗ.Ссылка];
		
		НетОшибок = Ложь;
		Если ОшибкиЗаполнения = Неопределено Тогда
			НетОшибок = Истина;
		Иначе
			ОшибкиПриложения = ОшибкиЗаполнения[СтрокаТЗ.Приложение];
			Если Не ЗначениеЗаполнено(ОшибкиПриложения) Тогда
				НетОшибок = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(ОшибкиПриложения.БлокирующиеОшибки) И Не ЗначениеЗаполнено(ОшибкиПриложения.Ошибки) Тогда
				НетОшибок = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НетОшибок Тогда
			НоваяСтрока = РезультатыПроверки.Добавить();
			НоваяСтрока.Ссылка 		= СтрокаТЗ.Ссылка;
			НоваяСтрока.Приложение 	= СтрокаТЗ.Приложение;
			НоваяСтрока.ТипОбъекта 	= ТипОбъекта;
			НоваяСтрока.ЕстьОшибка 	= Ложь;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполненияОбъектов, ТекущиеОшибкиЗаполнения, ТипОбъекта)

	ДополнитьРезультатыПроверкиОшибками(РезультатыПроверки, ОшибкиЗаполненияОбъектов, ТипОбъекта);
	ДополнитьРезультатыПроверкиУдалениемОшибок(РезультатыПроверки, ОшибкиЗаполненияОбъектов, ТекущиеОшибкиЗаполнения, ТипОбъекта);

КонецПроцедуры

Функция ПредставлениеОшибкиЗаполненияОбъекта(МассивОписаний)
	
	ПредставлениеОшибки = "";
	Если ЗначениеЗаполнено(МассивОписаний) Тогда
		Для каждого ОписаниеОшибки Из МассивОписаний Цикл
			Если ПустаяСтрока(ПредставлениеОшибки) Тогда
				ПредставлениеОшибки = ОписаниеОшибки;
			Иначе
				ПредставлениеОшибки = СтрШаблон("%1%2%3", ПредставлениеОшибки, Символы.ПС, ОписаниеОшибки)
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки;

КонецФункции

Функция ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение) Экспорт
	
	ОшибкиОбъекта = Новый Соответствие;
	
	ОшибкиПриложения = РезультатПроверки[Приложение];
	Если ЗначениеЗаполнено(ОшибкиПриложения.БлокирующиеОшибки) Или ЗначениеЗаполнено(ОшибкиПриложения.Ошибки) Тогда
		ОшибкиОбъекта.Вставить(Приложение, ОшибкиПриложения);
	КонецЕсли;
	
	Возврат ОшибкиОбъекта;
	
КонецФункции

Функция НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибки, Ошибки, ФизическоеЛицо = Неопределено, ПозицияШР = Неопределено)

	Описание = Новый Структура;
	Описание.Вставить("БлокирующиеОшибки", 	БлокирующиеОшибки);
	Описание.Вставить("Ошибки", 			Ошибки);
	Описание.Вставить("ФизическоеЛицо", 	ФизическоеЛицо);
	Описание.Вставить("ПозицияШР", 			ПозицияШР);
	
	Возврат Описание;

КонецФункции

Функция ОшибкиЗаполненияОбъектов(Приложение, Ссылки) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.Ссылка КАК Ссылка,
	|	ОшибкиЗаполнения.Приложение КАК Приложение,
	|	ОшибкиЗаполнения.ТипОбъекта КАК ТипОбъекта,
	|	ОшибкиЗаполнения.БлокирующаяОшибка КАК БлокирующаяОшибка,
	|	ОшибкиЗаполнения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОшибкиЗаполнения.ПозицияШР КАК ПозицияШР,
	|	ОшибкиЗаполнения.ПредставлениеБлокирующейОшибки КАК ПредставлениеБлокирующейОшибки,
	|	ОшибкиЗаполнения.ПредставлениеОшибки КАК ПредставлениеОшибки
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.Приложение = &Приложение
	|	И ОшибкиЗаполнения.Ссылка В(&Ссылки)";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Область ПроверкаЗаполненияФизическиеЛица

// Выполняет проверку заполнения одного объекта.
//
// Параметры:
// 		Данные - Структура - проверяемые свойства.
// 		Корректировать - Булево - если Истина, в структуре Данные очищаются свойства с ошибками заполнения.
//
// Возвращаемое значение:
// 		Соответствие
// 			Ключ
// 			* ПеречислениеСсылка.ПриложенияДляИнтеграции
// 			Значение
// 			* Неопределено,Структура - см НовоеОписаниеОшибокЗаполнения()
//
Функция РезультатПроверкиДанныхФизическогоЛица(Данные, Корректировать = Ложь) Экспорт
	
	ПриложениеУправлениеПерсоналом = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ПриложениеКабинетСотрудника = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Результат = Новый Соответствие;
	Результат.Вставить(ПриложениеУправлениеПерсоналом);
	Результат.Вставить(ПриложениеКабинетСотрудника);
	
	БлокирующиеОшибкиУП = Новый Массив;
	БлокирующиеОшибкиКС = Новый Массив;
	
	ОшибкиУП = Новый Массив;
	ОшибкиКС = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Данные.Пол) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан пол';
							|en = 'Gender not specified'");
		БлокирующиеОшибкиУП.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Данные.Фамилия) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана фамилия';
							|en = 'Last name is not specified'");
		БлокирующиеОшибкиУП.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Данные.ТелефонМобильныйПредставление) И МобильныйТелефонУказанСОшибкой(Данные.ТелефонМобильныйПредставление) Тогда
		ТекстОшибки = НСтр("ru = 'Мобильный телефон указан некорректно';
							|en = 'Mobile phone number is incorrect'");
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
		ОшибкиУП.Добавить(ТекстОшибки);
		Если Корректировать Тогда
			Данные.ТелефонМобильныйПредставление = "";
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Данные.EMailПредставление) И АдресЭлектроннойПочтыУказанСОшибкой(Данные.EMailПредставление) Тогда
		ТекстОшибки = НСтр("ru = 'Адрес электронной почты указан некорректно';
							|en = 'Incorrect email address'");
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
		ОшибкиУП.Добавить(ТекстОшибки);
		Если Корректировать Тогда
			Данные.EMailПредставление = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ТелефонМобильныйПредставление) И Не ЗначениеЗаполнено(Данные.EMailПредставление) Тогда
		ТекстОшибки = НСтр("ru = 'Необходимо указать мобильный телефон или адрес электронной почты';
							|en = 'Specify a mobile phone or email address'");
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ТелефонРабочийПредставление) И СтрДлина(Данные.ТелефонРабочийПредставление) > 40 Тогда
		ТекстОшибки = НСтр("ru = 'Рабочий телефон указан некорректно';
							|en = 'Work phone number is incorrect'");
		ОшибкиУП.Добавить(ТекстОшибки);
		ОшибкиКС.Добавить(ТекстОшибки);
		Если Корректировать Тогда
			Данные.EMailПредставление = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.АдресФотографии) Тогда 
		ОшибкиПроверкиФотографии = ОшибкиПроверкиФотографии(Данные.АдресФотографии);
		Если ЗначениеЗаполнено(ОшибкиПроверкиФотографии) Тогда
			Если Корректировать Тогда
				Данные.АдресФотографии = Неопределено;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиУП, ОшибкиПроверкиФотографии);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиКС, ОшибкиПроверкиФотографии);
		КонецЕсли;
	КонецЕсли;
	
	Результат[ПриложениеУправлениеПерсоналом] 	= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибкиУП, ОшибкиУП);
	Результат[ПриложениеКабинетСотрудника] 		= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибкиКС, ОшибкиКС);
	
	Возврат Результат;
	
КонецФункции 

Функция РезультатПроверкиФизическогоЛица(ФизическоеЛицо) Экспорт
	
	РезультатыПроверки = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	РезультатыПроверки.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ФизическоеЛицо) = Тип("Массив") Тогда
		ФизическиеЛица = ФизическоеЛицо;
	Иначе	
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо);
	КонецЕсли;
	
	Приложения = ИспользуемыеПриложения();
	ТекущиеОшибкиЗаполнения = ТекущиеОшибкиЗаполнения(Приложения, ФизическиеЛица);
	ОшибкиЗаполнения = ОшибкиЗаполненияФизическихЛиц(ФизическиеЛица, Приложения);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполнения, ТекущиеОшибкиЗаполнения, ТипОбъекта);
	
	Возврат РезультатыПроверки;

КонецФункции

// Формирует ошибки заполнения физических лиц.
//
// Параметры:
// 		ФизическиеЛица - Массив
// 		Приложения - Массив, ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ФизическоеЛицо
// 			* Значение - Соответствие
// 				* Ключ - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 				* Значение - Структура
//					* БлокирующиеОшибки - Массив - строки с представление блокирующих ошибок
//					* Ошибки - Массив - строки с представление ошибок
//					* ФизическоеЛицо - СправочникСсылка.ФизическоеЛицо, Неопределено
//					* ПозицияШР - Массив - СправочникСсылка.ШтатноеРасписание, Неопределено
//
Функция ОшибкиЗаполненияФизическихЛиц(ФизическиеЛица, Приложения)
	
	ОшибкиЗаполнения = Новый Соответствие;
		
	Если Не ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Возврат ОшибкиЗаполнения;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = ДанныеФизическихЛиц(ФизическиеЛица, Неопределено);
	АдресаФотографий 		= Данные.АдресаФотографий;
	КонтактнаяИнформация 	= Данные.КонтактнаяИнформация;
	КадровыеДанные 			= Данные.КадровыеДанные;
	
	Для каждого СтрокаТЗ Из КадровыеДанные Цикл
		
		ДанныеДляПроверки = ДанныеДляПроверкиФизическогоЛица(СтрокаТЗ, АдресаФотографий, КонтактнаяИнформация);
		РезультатПроверки = РезультатПроверкиДанныхФизическогоЛица(ДанныеДляПроверки);
		
		ОшибкиОбъекта = Новый Соответствие;
		
		Если ТипЗнч(Приложения) = Тип("Массив") Тогда
			Для каждого Приложение Из Приложения Цикл
				ОшибкиПриложения = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
				ОшибкиОбъекта.Вставить(Приложение, ОшибкиПриложения[Приложение]);
			КонецЦикла;
		Иначе
			ОшибкиОбъекта = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОшибкиОбъекта) Тогда
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.ФизическоеЛицо, ОшибкиОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОшибкиЗаполнения;
	
КонецФункции

Функция ДанныеДляПроверкиФизическогоЛица(СтрокаДанных, АдресаФотографий, КонтактнаяИнформация) Экспорт
	
	ПроверяемыйСвойства = "Фамилия,Пол,ТелефонРабочийПредставление,ТелефонМобильныйПредставление,EMailПредставление,АдресФотографии";
	ДанныеДляПроверки = Новый Структура(ПроверяемыйСвойства);
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверки, СтрокаДанных);
	ДанныеДляПроверки.ТелефонМобильныйПредставление = КонтактнаяИнформация.МобильныеТелефоны[СтрокаДанных.ФизическоеЛицо];
	ДанныеДляПроверки.EMailПредставление 			= КонтактнаяИнформация.АдресаПочты[СтрокаДанных.ФизическоеЛицо];
	Если ЗначениеЗаполнено(АдресаФотографий) Тогда
		ДанныеДляПроверки.АдресФотографии = АдресаФотографий[СтрокаДанных.ФизическоеЛицо];
	КонецЕсли;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияШтатноеРасписание

// Выполняет проверку заполнения одного объекта.
//
// Параметры:
// 		Данные - Структура - проверяемые свойства.
//
// Возвращаемое значение:
// 		Соответствие
// 			Ключ
// 			* ПеречислениеСсылка.ПриложенияДляИнтеграции
// 			Значение
// 			* Неопределено,Структура - см НовоеОписаниеОшибокЗаполнения()
//
Функция РезультатПроверкиДанныхПозицииШтатногоРасписания(Данные) Экспорт

	ПриложениеУправлениеПерсоналом = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ПриложениеКабинетСотрудника = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Результат = Новый Соответствие;
	Результат.Вставить(ПриложениеУправлениеПерсоналом);
	Результат.Вставить(ПриложениеКабинетСотрудника);
	
	БлокирующиеОшибки = Новый Массив;
	БлокирующиеОшибкиКС = Новый Массив;
	
	Ошибки = Новый Массив;
	ОшибкиКС = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Данные.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена Организация';
							|en = 'Company is not filled in'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Данные.Подразделение) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено Место в структуре предприятия';
							|en = 'Place in enterprise structure is not filled'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.Должность) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена Должность';
							|en = 'Job title is not filled'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Результат[ПриложениеУправлениеПерсоналом] 	= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибки, Ошибки);
	Результат[ПриложениеКабинетСотрудника] 		= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибкиКС, ОшибкиКС);
	
	Возврат Результат;

КонецФункции

Функция РезультатПроверкиПозицииШтатногоРасписания(ПозицияШР) Экспорт

	РезультатыПроверки = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений("ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
	РезультатыПроверки.Колонки.Добавить("ЕстьОшибка", Новый ОписаниеТипов("Булево"));
	
	Если ТипЗнч(ПозицияШР) = Тип("Массив") Тогда
		Позиции = ПозицияШР;
	Иначе
		Позиции = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПозицияШР);
	КонецЕсли;
	
	Приложения = ИспользуемыеПриложения();
	ТекущиеОшибкиЗаполнения = ТекущиеОшибкиЗаполнения(Приложения, Позиции);
	ОшибкиЗаполнения = ОшибкиЗаполненияПозицийШтатногоРасписания(Позиции, Приложения);
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	ДополнитьРезультатыПроверкиЗаполненияОбъектов(РезультатыПроверки, ОшибкиЗаполнения, ТекущиеОшибкиЗаполнения, ТипОбъекта);
	
	Возврат РезультатыПроверки;

КонецФункции

Функция ОшибкиЗаполненияПозицийШтатногоРасписания(ПозицииШР, Приложения)
	
	ОшибкиЗаполнения = Новый Соответствие;
	
	Если ПозицииШР.Количество() = 0 Тогда
		Возврат ОшибкиЗаполнения;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеШтатногоРасписания = ДанныеШтатногоРасписания(ПозицииШР);
	
	Для каждого СтрокаТЗ Из ДанныеШтатногоРасписания Цикл 
		
		ДанныеДляПроверки = ДанныеДляПроверкиПозицииШтатногоРасписания(СтрокаТЗ);
		РезультатПроверки = РезультатПроверкиДанныхПозицииШтатногоРасписания(ДанныеДляПроверки);
		
		ОшибкиОбъекта = Новый Соответствие;
		
		Если ТипЗнч(Приложения) = Тип("Массив") Тогда
			Для каждого Приложение Из Приложения Цикл
				ОшибкиПриложения = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
				ОшибкиОбъекта.Вставить(Приложение, ОшибкиПриложения[Приложение]);
			КонецЦикла;
		Иначе
			ОшибкиОбъекта = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложения);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОшибкиОбъекта) Тогда
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.ДолжностьПоШтатномуРасписанию, ОшибкиОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОшибкиЗаполнения;

КонецФункции

Функция ДанныеДляПроверкиПозицииШтатногоРасписания(СтрокаДанных) Экспорт
	
	ПроверяемыйСвойства = "Организация,Подразделение,Должность";
	ДанныеДляПроверки = Новый Структура(ПроверяемыйСвойства);
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверки, СтрокаДанных);
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

#КонецОбласти 

#Область ПроверкаЗаполненияСотрудники

// Выполняет проверку заполнения одного объекта.
//
// Параметры:
// 		Данные - Структура - проверяемые свойства.
// 		ОшибкиФизическогоЛица - Массив - строки ТЗ.
// 		ОшибкиПозицииШР - Массив - строки ТЗ.
//
// Возвращаемое значение:
// 		Соответствие
// 			Ключ
// 			* ПеречислениеСсылка.ПриложенияДляИнтеграции
// 			Значение
// 			* Неопределено,Структура - см НовоеОписаниеОшибокЗаполнения()
//
Функция РезультатПроверкиДанныхСотрудника(Данные, ОшибкиФизическогоЛица, ОшибкиПозицииШР) Экспорт

	ПриложениеУправлениеПерсоналом = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом;
	ПриложениеКабинетСотрудника = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Результат = Новый Соответствие;
	Результат.Вставить(ПриложениеУправлениеПерсоналом);
	Результат.Вставить(ПриложениеКабинетСотрудника);
	
	БлокирующиеОшибки = Новый Массив;
	БлокирующиеОшибкиКС = Новый Массив;
	
	Ошибки = Новый Массив;
	ОшибкиКС = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Данные.Организация) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена Организация';
							|en = 'Company is not filled in'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ФизическоеЛицо) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено Физическое лицо';
							|en = 'Person is not filled'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.Подразделение) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнено Подразделение';
							|en = 'Business unit is not filled'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.Должность) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнена Должность';
							|en = 'Job title is not filled'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Данные.ВидЗанятости) Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнен Вид занятости';
							|en = 'Employment kind is required'");
		БлокирующиеОшибки.Добавить(ТекстОшибки);
		БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ФизическоеЛицо = Неопределено;
	ФизическоеЛицоКС = Неопределено;
	Для каждого СтрокаТЗ Из ОшибкиФизическогоЛица Цикл
		ТекстОшибки = НСтр("ru = 'Есть ошибки заполнения физического лица';
							|en = 'There are person filling errors'");
		Если СтрокаТЗ.Приложение = ПриложениеУправлениеПерсоналом Тогда
			БлокирующиеОшибки.Добавить(ТекстОшибки);
			ФизическоеЛицо = СтрокаТЗ.Ссылка;
		ИначеЕсли СтрокаТЗ.Приложение = ПриложениеКабинетСотрудника Тогда
			БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
			ФизическоеЛицоКС = СтрокаТЗ.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияШР = Неопределено;
	ПозицияШРКС = Неопределено;
	Для каждого СтрокаТЗ Из ОшибкиПозицииШР Цикл
		ТекстОшибки = НСтр("ru = 'Есть ошибки заполнения позиции штатного расписания';
							|en = 'There are errors of headcount position filling'");
		Если СтрокаТЗ.Приложение = ПриложениеУправлениеПерсоналом Тогда
			БлокирующиеОшибки.Добавить(ТекстОшибки);
			ПозицияШР = СтрокаТЗ.Ссылка;
		ИначеЕсли СтрокаТЗ.Приложение = ПриложениеКабинетСотрудника Тогда
			БлокирующиеОшибкиКС.Добавить(ТекстОшибки);
			ПозицияШРКС = СтрокаТЗ.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Результат[ПриложениеУправлениеПерсоналом] 	= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибки, Ошибки, ФизическоеЛицо, ПозицияШР);
	Результат[ПриложениеКабинетСотрудника] 		= НовоеОписаниеОшибокЗаполнения(БлокирующиеОшибкиКС, ОшибкиКС, ФизическоеЛицоКС, ПозицияШРКС);
	
	Возврат Результат;

КонецФункции

Функция ОшибкиЗаполненияСотрудников(Сотрудники, ОшибкиФизическихЛиц, ОшибкиПозицийШР, Приложения)

	ОшибкиЗаполнения = Новый Соответствие;
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат ОшибкиЗаполнения;
	КонецЕсли;
	
	ОшибкиФизическихЛиц.Индексы.Добавить("Ссылка");
	ОшибкиПозицийШР.Индексы.Добавить("Ссылка");
	Отбор = Новый Структура("Ссылка");
		
	ДанныеСотрудников = ДанныеСотрудников(Сотрудники, Ложь);
	Для каждого СтрокаТЗ Из ДанныеСотрудников Цикл 
		
		ДанныеДляПроверки = ДанныеДляПроверкиСотрудника(СтрокаТЗ);
		
		Отбор.Ссылка = СтрокаТЗ.ФизическоеЛицо;
		ОшибкиФизическогоЛица = ОшибкиФизическихЛиц.НайтиСтроки(Отбор);
		
		Отбор.Ссылка = СтрокаТЗ.ДолжностьПоШтатномуРасписанию;
		ОшибкиПозицииШР = ОшибкиПозицийШР.НайтиСтроки(Отбор);
		
		РезультатПроверки = РезультатПроверкиДанныхСотрудника(ДанныеДляПроверки, ОшибкиФизическогоЛица, ОшибкиПозицииШР);
		
		ОшибкиОбъекта = Новый Соответствие;
		Если ТипЗнч(Приложения) = Тип("Массив") Тогда
			Для каждого Приложение Из Приложения Цикл
				ОшибкиПриложения = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
				ОшибкиОбъекта.Вставить(Приложение, ОшибкиПриложения[Приложение]);
			КонецЦикла;
		Иначе
			ОшибкиОбъекта = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложения);
		КонецЕсли;
		
		ОшибкиОбъекта = ОшибкиЗаполненияОбъектаДляПриложения(РезультатПроверки, Приложение);
		Если ЗначениеЗаполнено(ОшибкиОбъекта) Тогда
			ОшибкиЗаполнения.Вставить(СтрокаТЗ.Сотрудник, ОшибкиОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОшибкиЗаполнения;

КонецФункции 

Функция ДанныеДляПроверкиСотрудника(СтрокаДанных) Экспорт
	
	ПроверяемыйСвойства = "Организация,ФизическоеЛицо,Подразделение,Должность,ВидЗанятости";
	ДанныеДляПроверки = Новый Структура(ПроверяемыйСвойства);
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверки, СтрокаДанных);
	
	Возврат ДанныеДляПроверки;
	
КонецФункции


#КонецОбласти

#Область ПроверкаЗаполненияСвойств

Функция МобильныйТелефонУказанСОшибкой(ТелефонСтрокой)
	
	РазрешенныеСимволы = "- ()+0123456789";
	ТелефонЦифры = "";
	Для Сч=1 По СтрДлина(ТелефонСтрокой) Цикл
		ОчереднойСимвол = Сред(ТелефонСтрокой, Сч, 1);
		Если СтрНайти(РазрешенныеСимволы, ) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		ТелефонЦифры = ТелефонЦифры + ОчереднойСимвол;
	КонецЦикла;
	
	Если Лев(ТелефонСтрокой, 1) = "+" Тогда
		// код страны должен начинаться цифрой и не равен нулю
		Если СтрНайти("123456789", Сред(ТелефонСтрокой, 2, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(ТелефонЦифры) < 10 Или СтрДлина(ТелефонСтрокой) > 20 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция АдресЭлектроннойПочтыУказанСОшибкой(АдресЭлектроннойПочты)

	Возврат Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты);

КонецФункции

Функция ОшибкиПроверкиФотографии(АдресФотографии)
	
	Ошибки = Новый Массив;
	
	ДвоичныеДанныеФотографии = ПолучитьИзВременногоХранилища(АдресФотографии);
	Если ТипЗнч(ДвоичныеДанныеФотографии) <> Тип("ДвоичныеДанные") Тогда
		Возврат Ошибки;
	КонецЕсли;
	
	РазмерФайла = ДвоичныеДанныеФотографии.Размер();
	МаксимальныйРазмерПринимаемогоФайла = ИнтеграцияУправлениеПерсоналомКлиентСервер.МаксимальныйРазмерПринимаемогоФайла();
	Если РазмерФайла > МаксимальныйРазмерПринимаемогоФайла Тогда
		МаксимальныйРазмер = МаксимальныйРазмерПринимаемогоФайла/1024/1024;
		РазмерФайла = Окр(РазмерФайла/1024/1024, 2);
		ТекстОшибки = НСтр("ru = 'Размер фотографии %1Мб превышает максимально допустимый %2Мб.';
							|en = 'Размер фотографии %1Мб превышает максимально допустимый %2Мб.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, РазмерФайла, МаксимальныйРазмер);
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Расширение = РасширениеФайлаКартинки(ДвоичныеДанныеФотографии);
	Если Расширение = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Неизвестный формат картинки фотографии.';
							|en = 'Unknown photo picture format.'"); 
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Ошибки;
	
КонецФункции

#КонецОбласти

Функция ОбъектыСБлокирующимиОшибками(Приложение, Ссылки, ТипОбъекта) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОшибкиЗаполнения.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
	|ГДЕ
	|	ОшибкиЗаполнения.Приложение = &Приложение
	|	И ОшибкиЗаполнения.Ссылка В(&Ссылки)
	|	И ОшибкиЗаполнения.ТипОбъекта = &ТипОбъекта
	|	И ОшибкиЗаполнения.БлокирующаяОшибка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

#КонецОбласти

#Область ВыгрузкаЖурналаРегистрации

Функция ВыгрузкаЖурналаРегистрацииФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ВыгрузитьЖурналРегистрации(ИмяВременногоФайла, Параметры.ОтборЖурналаРегистрации);
	
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip");
	Архив = Новый ЗаписьZipФайла(ИмяФайлаАрхива,,, МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	Архив.Записать();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаАрхива);
	
	УдалитьФайлы(ИмяВременногоФайла);
	УдалитьФайлы(ИмяФайлаАрхива);
	
	ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища)

КонецФункции

Функция ОтборЖурналаРегистрацииДляВыгрузки(ИменаСобытий, ОтборПоДатам) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Событие", ИменаСобытий);
	
	СмещениеВремениСервера = СмещениеВремениСервера();
	ОтборДатаНачала 	= ОтборПоДатам.ДатаНачала + СмещениеВремениСервера;
	ОтборДатаОкончания 	= ОтборПоДатам.ДатаОкончания + СмещениеВремениСервера;
	ОтборДатаОкончания = ОтборДатаОкончания + 1;
	
	Отбор.Вставить("ДатаНачала", ОтборДатаНачала);
	Отбор.Вставить("ДатаОкончания", ОтборДатаОкончания);
	
	Возврат Отбор;

КонецФункции

Функция СмещениеВремениСервера()
	
	СмещениеВремениСервера = ТекущаяДата() - ТекущаяДатаСеанса();
	Если СмещениеВремениСервера >= -1 И СмещениеВремениСервера <= 1 Тогда
		СмещениеВремениСервера = 0;
	КонецЕсли;
	Возврат СмещениеВремениСервера;
	
КонецФункции

#КонецОбласти

#Область ВыгружаемыеОбъекты

// Возвращает выгружаемые в приложение Организации.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение:
// 		Массив
//
Функция ВыгружаемыеОрганизации(Приложение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Организации";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка")

КонецФункции

// Возвращает выгружаемых в приложение физических лиц.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение:
// 		Массив
//
Функция ВыгружаемыеФизическиеЛица(Приложение) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ФизическиеЛица";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

// Возвращает выгружаемых сотрудников в приложение.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение:
// 		Массив
//
Функция ВыгружаемыеСотрудники(Приложение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.Сотрудники";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

// Возвращает выгружаемые позиции штатного расписания в приложение.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
//
// Возвращаемое значение:
// 		Массив
//
Функция ВыгружаемыеПозицииШтатногоРасписания(Приложение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка ССЫЛКА Справочник.ШтатноеРасписание";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

// Возвращает информацию о выгрузке объекта в приложения.
//
// Параметры:
// 		ПроверяемыйОбъект - СправочникСсылка.ФизическиеЛица.
//
// Возвращаемое значение:
// 		Соответствие
// 			* Ключ - ПеречислениеСсылка.ПриложенияДляИнтеграции.
// 			* Значение - Булево - Истина, если выгружается.
//
Функция ОбъектВыгружается(ПроверяемыйОбъект) Экспорт
	
	Выгружается = Новый Соответствие;
	Если Используется1СПерсонал() Тогда
		Выгружается.Вставить(
			Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом,
			Интеграция1СПерсонал.ОбъектВыгружается(ПроверяемыйОбъект));
	КонецЕсли;
	Если ИспользуетсяКабинетСотрудника() Тогда
		Выгружается.Вставить(
			Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника,
			ИнтеграцияКабинетСотрудника.ОбъектВыгружается(ПроверяемыйОбъект));
	КонецЕсли;
	
	Возврат Выгружается;
	
КонецФункции

// Возвращает списки выгружаемых объектов для приложений.
//
// Параметры:
// 		ПроверяемыеОбъекты - Массив - ссылки.
//
// Возвращаемое значение:
// 		Соответствие
//			* Ключ - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 			* Значение - Массив - ссылки.
//
Функция ОбъектыВыгружаются(ПроверяемыеОбъекты) Экспорт
	
	ОбъектыВыгружаются = Новый Соответствие;
	Если Используется1СПерсонал() Тогда
		ОбъектыВыгружаются.Вставить(
			Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом,
			ОбъектыВыгружаютсяВПриложение(ПроверяемыеОбъекты, Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом));
	КонецЕсли;
		
	Если ИспользуетсяКабинетСотрудника() Тогда
		ОбъектыВыгружаются.Вставить(
			Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника,
			ОбъектыВыгружаютсяВПриложение(ПроверяемыеОбъекты, Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника));
	КонецЕсли;
	
	Возврат ОбъектыВыгружаются;
	
КонецФункции

Функция ОбъектыВыгружаютсяВПриложение(ПроверяемыеОбъекты, Приложение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", ПроверяемыеОбъекты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ВыгружаемыеОбъекты.Ссылка В(&Ссылки)
	|	И НЕ ВыгружаемыеОбъекты.УсловноВыгружается";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ФизическиеЛицаИсключения(Приложение) Экспорт
	
	ФизическиеЛицаИсключения = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.Приложение = &Приложение";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФизическиеЛицаИсключения.Вставить(Выборка.ФизическоеЛицо, Выборка.Публикуется);
	КонецЦикла;
	
	Возврат ФизическиеЛицаИсключения;
	
КонецФункции

Функция УжеЗарегистрированыДляОбмена(Приложение, Ссылки, ТипОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|ГДЕ
	|	Изменения.ТипОбъекта = &ТипОбъекта
	|	И Изменения.Ссылка В(&Ссылки)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

#КонецОбласти

#Область СохранениеНастроек

Процедура СохранитьНовыеВидыКонтактнойИнформации(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты, СообщениеОбОшибке) Экспорт
	
	Приложения = ИспользуемыеПриложения();
	
	РегистрироватьУправлениеПерсоналом 	= НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	РегистрироватьКабинетСотрудника 	= НоваяТаблицаИзмененияДляОбмена(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);

	ФизическиеЛица = Новый Массив;
	ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	Для каждого Приложение Из Приложения Цикл
		ВыгружаемыеФизическиеЛица = ВыгружаемыеФизическиеЛица(Приложение);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФизическиеЛица, ВыгружаемыеФизическиеЛица, Истина);
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Для каждого ФизическоеЛицо Из ВыгружаемыеФизическиеЛица Цикл
				НоваяСтрока = РегистрироватьУправлениеПерсоналом.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
		Иначе
			Для каждого ФизическоеЛицо Из ВыгружаемыеФизическиеЛица Цикл
				НоваяСтрока = РегистрироватьКабинетСотрудника.Добавить();
				НоваяСтрока.Ссылка 			= ФизическоеЛицо;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииУправлениеПерсоналом");
		Если ЗначениеЗаполнено(РегистрироватьУправлениеПерсоналом) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
			ЭлементБлокировки.ИсточникДанных = РегистрироватьУправлениеПерсоналом;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Если ЗначениеЗаполнено(РегистрироватьКабинетСотрудника) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = РегистрироватьКабинетСотрудника;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;

		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.СохранитьНовыеВидыКонтактнойИнформации(ВидКИМобильныйТелефон, ВидКИАдресЭлектроннойПочты);
		
		Если ЗначениеЗаполнено(РегистрироватьУправлениеПерсоналом) Тогда
			Для каждого СтрокаТЗ Из РегистрироватьУправлениеПерсоналом Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрироватьКабинетСотрудника) Тогда
			Для каждого СтрокаТЗ Из РегистрироватьКабинетСотрудника Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить виды контактной информации. Подробности см. в журнале регистрации.';
								|en = 'Cannot change contact information kinds. For more information, see the event log.'");
		
		ЗаписьЖурналаРегистрации(ИмяОбщегоСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ПустаяСтрока(СообщениеОбОшибке) Тогда
		РезультатПроверки = РезультатПроверкиФизическогоЛица(ФизическиеЛица);
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
				ЭлементБлокировки.ИсточникДанных = РезультатПроверки;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Приложение", "Приложение");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать(); 
				Для каждого СтрокаТЗ Из РезультатПроверки Цикл
					МенеджерЗаписи = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					Если СтрокаТЗ.ЕстьОшибка Тогда
						МенеджерЗаписи.Записать();
					Иначе
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкуПубликуемойСтруктурыКомпании(ПубликоватьСтруктуруЮридическихЛиц, СообщениеОбОшибке) Экспорт

	Если ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц() Тогда
		Возврат;
	КонецЕсли;
	
	Данные = ДанныеДляРегистрацииПриИзмененииСтруктуруКомпании(Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом);
	ВыгружаемыеОбъектыУП 	= Данные.ВыгружаемыеОбъекты;
	ИзмененияДляОбменаУП 	= Данные.ИзмененияДляОбмена;
	
	РолиИсполнителейЗадач = ИнтеграцияУправлениеПерсоналомСлужебный.РолиИсполнителейЗадач();
	Данные = ДанныеДляРегистрацииПриИзмененииСтруктуруКомпании(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	ВыгружаемыеОбъектыКС = Данные.ВыгружаемыеОбъекты;
	ИзмененияДляОбменаКС = Данные.ИзмененияДляОбмена;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.ПодразделенияОрганизаций;
	Иначе
		ТипыОсновногоОбъектаАдресации = ПланыВидовХарактеристик.ОбъектыАдресацииЗадач.СтруктураПредприятия;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииУправлениеПерсоналом"); 
		Если ЗначениеЗаполнено(РолиИсполнителейЗадач) Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РолиИсполнителей");
			ЭлементБлокировки.ИсточникДанных = РолиИсполнителейЗадач;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыгружаемыеОбъектыКС) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъектыКС;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияДляОбменаКС) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
			ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбменаКС;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыгружаемыеОбъектыУП) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгружаемыеОбъекты1СПерсонал");
			ЭлементБлокировки.ИсточникДанных = ВыгружаемыеОбъектыУП;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияДляОбменаУП) Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
			ЭлементБлокировки.ИсточникДанных = ИзмененияДляОбменаУП;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.СохранитьНастройкуПубликоватьСтруктуруЮридическихЛиц(ПубликоватьСтруктуруЮридическихЛиц);
		
		Если ЗначениеЗаполнено(ВыгружаемыеОбъектыКС) Тогда
			Для каждого СтрокаТЗ Из ВыгружаемыеОбъектыКС Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъектыКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				Если СтрокаТЗ.Удалить Тогда
					МенеджерЗаписи.Удалить();
				Иначе
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияДляОбменаКС) Тогда
			Для каждого СтрокаТЗ Из ИзмененияДляОбменаКС Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(РолиИсполнителейЗадач) Тогда
			Для каждого СтрокаТЗ Из РолиИсполнителейЗадач Цикл
				РольОбъект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
				РольОбъект.ТипыОсновногоОбъектаАдресации = ТипыОсновногоОбъектаАдресации;
				РольОбъект.Записать();
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыгружаемыеОбъектыУП) Тогда
			Для каждого СтрокаТЗ Из ВыгружаемыеОбъектыУП Цикл
				МенеджерЗаписи = РегистрыСведений.ВыгружаемыеОбъекты1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				Если СтрокаТЗ.Удалить Тогда
					МенеджерЗаписи.Удалить();
				Иначе
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИзмененияДляОбменаУП) Тогда
			Для каждого СтрокаТЗ Из ИзмененияДляОбменаУП Цикл
				МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
				Если СтрокаТЗ.Удалить Тогда
					МенеджерЗаписи.Удалить();
				Иначе
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось изменить вид публикуемой структуры. Подробности см. в журнале регистрации.';
								|en = 'Cannot change a kind of the structure to publish. For more information, see the event log.'");;
		ЗаписьЖурналаРегистрации(ИмяОбщегоСобытияЖР(),
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ПустаяСтрока(СообщениеОбОшибке) Тогда 
		ПроверитьЗаполнениеОбъектов(ИспользуемыеПриложения());
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляРегистрацииПриИзмененииСтруктуруКомпании(Приложение)
	
	ДанныеДляРегистрации = Новый Структура("ВыгружаемыеОбъекты,ИзмененияДляОбмена");
	
	МенеджерПеречисления = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипЗначенияТипОбъекта = Новый Соответствие;
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Организации"), 				МенеджерПеречисления.Организация);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.Сотрудники"), 					МенеджерПеречисления.Сотрудник);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ШтатноеРасписание"), 			МенеджерПеречисления.ДолжностьПоШтатномуРасписанию);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.ПодразделенияОрганизаций"), 	МенеджерПеречисления.Подразделение);
	ТипЗначенияТипОбъекта.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), 		МенеджерПеречисления.Подразделение);
	
	ВыгружаемыеОбъекты = НоваяТаблицаВыгружаемыеОбъекты(Приложение);
	
	ИзмененияДляОбмена = НоваяТаблицаИзмененияДляОбмена(Приложение);
	
	// Текущее значение настройки.
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	ТипОрганизация = Тип("СправочникСсылка.Организации");
	ТипыДанных = Новый Массив;
	ТипыДанных.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыДанных.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипыДанных.Добавить(Тип("СправочникСсылка.ШтатноеРасписание")); 
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		ТипыДанных.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		ТипПодразделение = Тип("СправочникСсылка.ПодразделенияОрганизаций");
	Иначе
		ТипыДанных.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		ТипПодразделение = Тип("СправочникСсылка.СтруктураПредприятия");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыДанных", ТипыДанных);
	Запрос.УстановитьПараметр("ТипОрганизация", ТипОрганизация);
	Запрос.УстановитьПараметр("ТипПодразделение", ТипПодразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) КАК ТипДанных,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) = &ТипОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОрганизация,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) = &ТипПодразделение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПодразделение
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) В (&ТипыДанных)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	ТекущиеОбъекты = Запрос.Выполнить().Выгрузить();
	
	ПозицииШР = Новый Массив;
	Для каждого СтрокаТЗ Из ТекущиеОбъекты Цикл
		
		Если СтрокаТЗ.ЭтоПодразделение Тогда
			НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
			НоваяСтрока.Ссылка 	= СтрокаТЗ.Ссылка;
			НоваяСтрока.Удалить = Истина;
		Иначе
			Если СтрокаТЗ.ЭтоОрганизация Тогда
				Если ПубликоватьСтруктуруЮридическихЛиц Тогда
					НоваяСтрока = ИзмененияДляОбмена.Добавить();
					НоваяСтрока.Ссылка 		= СтрокаТЗ.Ссылка;
					НоваяСтрока.ТипОбъекта 	= МенеджерПеречисления.Подразделение;
					НоваяСтрока.Удалить 	= Истина;
				Иначе
					// Будет установлена настройка ПубликоватьСтруктуруЮридическихЛиц.
					НоваяСтрока = ИзмененияДляОбмена.Добавить();
					НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
					НоваяСтрока.ТипОбъекта 		= МенеджерПеречисления.Подразделение;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
			Иначе
				НоваяСтрока = ИзмененияДляОбмена.Добавить();
				НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
				НоваяСтрока.ТипОбъекта 		= ТипЗначенияТипОбъекта[СтрокаТЗ.ТипДанных];
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);	
			КонецЕсли;
			Если СтрокаТЗ.ТипДанных = Тип("СправочникСсылка.ШтатноеРасписание") Тогда
				ПозицииШР.Добавить(СтрокаТЗ.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		// Будет установлена настройка НЕ ПубликоватьСтруктуруЮридическихЛиц.
		НовыеПодразделения = ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделенияПозиций(ПозицииШР);
	Иначе
		// Будет установлена настройка ПубликоватьСтруктуруЮридическихЛиц.
		НовыеПодразделения = ПодразделенияОрганизацииПозиций(ПозицииШР);
	КонецЕсли;
	
	Для каждого Подразделение Из НовыеПодразделения Цикл
		
		НоваяСтрока = ВыгружаемыеОбъекты.Добавить();
		НоваяСтрока.Ссылка = Подразделение;
		
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= Подразделение;
		НоваяСтрока.ТипОбъекта 		= МенеджерПеречисления.Подразделение;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
	
	КонецЦикла;
	
	ДанныеДляРегистрации.ВыгружаемыеОбъекты = ВыгружаемыеОбъекты;
	ДанныеДляРегистрации.ИзмененияДляОбмена = ИзмененияДляОбмена;
	
	Возврат ДанныеДляРегистрации;

КонецФункции

#КонецОбласти

#Область РучнаяРегистрацияИзмененийДляОбмена

Функция ТипыОбъектовДляРучнойРегистрацииИзменений(Приложение) Экспорт

	ТипыОбъектов = Новый ТаблицаЗначений;
	ТипыОбъектов.Колонки.Добавить("ТипОбъекта");
	ТипыОбъектов.Колонки.Добавить("ИмяТаблицы");
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ФизическиеЛица.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.Организации.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.Должности.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ШтатноеРасписание.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник;
	НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.Сотрудники.ПустаяСсылка());
	
	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
	Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
		НоваяСтрока.ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Иначе
		НоваяСтрока.ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	ТипГрафикРаботы = ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипГрафикРаботы) Тогда
		СправочникМенеджер = ОбщегоНазначенияБЗК.МенеджерОбъектаПоТипу(ТипГрафикРаботы);
		НоваяСтрока = ТипыОбъектов.Добавить();
		НоваяСтрока.ТипОбъекта 	= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы;
		НоваяСтрока.ИмяТаблицы 	= ОбщегоНазначения.ИмяТаблицыПоСсылке(СправочникМенеджер.ПустаяСсылка());
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ТипыОбъектовДляРучнойРегистрацииИзменений(ТипыОбъектов);
	КонецЕсли;
	
	Возврат ТипыОбъектов;

КонецФункции

Функция ШаблонТекстаЗапросаИзмененийДляРедактирования(Приложение, ТипОбъекта) Экспорт
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка КАК Ссылка,
	|	ИзмененияДляОбмена.ВыгружатьУдаление КАК ВыгружатьУдаление
	|ИЗ
	|	#ИмяТаблицы КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК ИзмененияДляОбмена
	|		ПО Таблица.Ссылка = ИзмененияДляОбмена.Ссылка
	|			И (ИзмененияДляОбмена.ТипОбъекта = &ТипОбъекта)";
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса,"ИзмененияДляОбмена1СПерсонал","ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат ШаблонТекстЗапроса;

КонецФункции

Функция КоличествоИзмененийПоТипамОбъектов(Приложение, ТаблицаТиповОбъектов) Экспорт

	ТипКоличество = Новый Соответствие;
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	КОЛИЧЕСТВО(Изменения.ВыгружатьУдаление) КАК Количество
	|ИЗ
	|	#ИмяТаблицы КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ПО Таблица.Ссылка = Изменения.Ссылка
	|			И (Изменения.ТипОбъекта = &ТипОбъекта)
	|
	|СГРУППИРОВАТЬ ПО
	|	Изменения.ТипОбъекта";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса,"ИзмененияДляОбмена1СПерсонал","ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	ТекстОбъединения ="
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	Запрос = Новый Запрос;
	Индекс = 0;
	Для каждого СтрокаТЗ Из ТаблицаТиповОбъектов Цикл
		Если ПервыйЗапрос Тогда
			ТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "#ИмяТаблицы", СтрокаТЗ.ИмяТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			Запрос.УстановитьПараметр("ТипОбъекта", СтрокаТЗ.ТипОбъекта);
			ПервыйЗапрос = Ложь;
		Иначе 
			ИмяПараметра = СтрШаблон("%1%2","ТипОбъекта", Индекс);
			Запрос.УстановитьПараметр(ИмяПараметра, СтрокаТЗ.ТипОбъекта);
			ТекстСледующегоЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "#ИмяТаблицы", СтрокаТЗ.ИмяТаблицы);
			ТекстСледующегоЗапроса = СтрЗаменить(ТекстСледующегоЗапроса, "&ТипОбъекта", СтрШаблон("%1%2","&", ИмяПараметра)); 
			ТекстЗапроса = СтрШаблон("%1%2%3",ТекстЗапроса,ТекстОбъединения,ТекстСледующегоЗапроса);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать(); 
	ТипКоличество = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ТипКоличество.Вставить(Выборка.ТипОбъекта, Выборка.Количество);
	КонецЦикла; 
	
	Возврат ТипКоличество;
КонецФункции

Процедура ЗарегистрироватьИзмененияОбъектовПоТипуКОбменуФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Приложение 		= Параметры.Приложение;
	ТипыОбъектов 	= Параметры.ТипыОбъектов;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Изменения = РассчитатьИзмененияКОбменуПоТипуОбъектов(Приложение, ТипыОбъектов);
	Если Не ЗначениеЗаполнено(Изменения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
	Иначе
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыИзмененияДляОбмена);
		ЭлементБлокировки.ИсточникДанных = Изменения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из Изменения Цикл
			МенеджерЗаписи = РегистрСведенийМенеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Записать();
		КонецЦикла;

		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		// Текст ошибки обрабатывается при завершении фонового задания.
		СообщениеОбОшибке = НСтр("ru = 'Не удалось зарегистрировать изменения. Подробности см. в журнале регистрации.';
								|en = 'Cannot register the changes. For more information, see the event log.'");
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;

КонецПроцедуры

Функция ЗарегистрироватьОбъектыКОбмену(Объекты, Приложение, ТипОбъекта) Экспорт
	
	Результат = Новый Структура("БылиОшибки,СообщениеПользователю", Ложь);
	СообщениеПользователю = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипОбъектаВыгружаетсяПоПравилам(ТипОбъекта) Тогда
		
		ОбъектыКРегистрации 	= Новый Массив;
		НевыгружаемыеОбъекты 	= Новый Массив; 
		
		ВыгружаемыеОбъекты = ОбъектыВыгружаются(Объекты)[Приложение];
		Если ЗначениеЗаполнено(ВыгружаемыеОбъекты) Тогда
			ОбъектыКРегистрации 	= ВыгружаемыеОбъекты;
			НевыгружаемыеОбъекты 	= ОбщегоНазначенияКлиентСервер.РазностьМассивов(Объекты, ВыгружаемыеОбъекты);
		Иначе
			НевыгружаемыеОбъекты = Объекты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НевыгружаемыеОбъекты) Тогда
			ЗаголовокСообщения = НСтр("ru = 'Объекты не соответствуют правилам выгрузки.';
										|en = 'Objects do not match export rules.'");
			СообщениеСтроки = "";
			Для каждого Ссылка Из НевыгружаемыеОбъекты Цикл
				СообщениеСтроки = СтрШаблон("%1%2%3", СообщениеСтроки, Символы.ПС, Строка(Ссылка));
			КонецЦикла;
			СообщениеПользователю = СтрШаблон("%1%2", ЗаголовокСообщения, СообщениеСтроки);
		КонецЕсли;
		
	Иначе
		ОбъектыКРегистрации = Объекты;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбъектыКРегистрации) Тогда
		
		Изменения =РассчитатьИзмененияОбъектовКОбмену(Приложение, ОбъектыКРегистрации, ТипОбъекта);
		
		Если Не ЗначениеЗаполнено(Изменения) Тогда
			Если Не ЗначениеЗаполнено(СообщениеПользователю) Тогда
				СообщениеПользователю = НСтр("ru = 'Объекты уже зарегистрирован к обмену.';
											|en = 'The object is already registered for exchange.'");
			КонецЕсли;
		Иначе
			
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
				РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
			Иначе
				ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
				РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыИзмененияДляОбмена);
				ЭлементБлокировки.ИсточникДанных = Изменения;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
				Блокировка.Заблокировать();
				
				Для каждого СтрокаТЗ Из Изменения Цикл
					МенеджерЗаписи = РегистрСведенийМенеджер.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				Результат.БылиОшибки = Истина;
				ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия,
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
				
				СообщениеПользователю = НСтр("ru = 'Не удалось зарегистрировать изменения. Подробности см. в журнале регистрации.';
											|en = 'Cannot register the changes. For more information, see the event log.'");
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.СообщениеПользователю = СообщениеПользователю;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтменитьИзмененияОбъектовПоТипуКОбменуФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Приложение 		= Параметры.Приложение;
	ТипыОбъектов 	= Параметры.ТипыОбъектов;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Изменения = РассчитатьОтменуИзмененияКОбменуПоТипуОбъектов(Приложение, ТипыОбъектов);
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
	Иначе
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыИзмененияДляОбмена);
		ЭлементБлокировки.ИсточникДанных = Изменения;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТЗ Из Изменения Цикл
			МенеджерЗаписи = РегистрСведенийМенеджер.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
			МенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		// Текст ошибки обрабатывается при завершении фонового задания.
		СообщениеОбОшибке = НСтр("ru = 'Не удалось отменить регистрацию изменения. Подробности см. в журнале регистрации.';
								|en = 'Cannot cancel registration of changes. For more information, see the event log.'");
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;

КонецПроцедуры

Процедура ОтменитьРегистрациюОбъектаКОбменуФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Приложение 	= Параметры.Приложение;
	ТипОбъекта 	= Параметры.ТипОбъекта;
	Ссылка 		= Параметры.Ссылка;
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбмена1СПерсонал";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбмена1СПерсонал;
	Иначе
		ИмяТаблицыИзмененияДляОбмена = "РегистрСведений.ИзмененияДляОбменаКабинетСотрудника";
		РегистрСведенийМенеджер = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыИзмененияДляОбмена);
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрСведенийМенеджер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Ссылка 		= Ссылка;
		МенеджерЗаписи.ТипОбъекта 	= ТипОбъекта;
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия,
			УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		// Текст ошибки обрабатывается при завершении фонового задания.
		СообщениеОбОшибке = НСтр("ru = 'Не удалось отменить регистрацию изменения. Подробности см. в журнале регистрации.';
								|en = 'Cannot cancel registration of changes. For more information, see the event log.'");
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;

КонецПроцедуры

Функция ТипОбъектаВыгружаетсяПоПравилам(ТипОбъекта)
	
	ПеречислениеМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	
	Если ТипОбъекта = ПеречислениеМенеджер.ФизическоеЛицо
		Или ТипОбъекта = ПеречислениеМенеджер.Организация
		Или ТипОбъекта = ПеречислениеМенеджер.Подразделение
		Или ТипОбъекта = ПеречислениеМенеджер.Должность
		Или ТипОбъекта = ПеречислениеМенеджер.ДолжностьПоШтатномуРасписанию
		Или ТипОбъекта = ПеречислениеМенеджер.Сотрудник
		Или ТипОбъекта = ПеречислениеМенеджер.ГрафикРаботы
		Или ТипОбъекта = ПеречислениеМенеджер.МашиночитаемаяДоверенность
		Или ТипОбъекта = ПеречислениеМенеджер.ВидПредоставляемойСотрудникамСправки Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли

КонецФункции

Функция РассчитатьИзмененияКОбменуПоТипуОбъектов(Приложение, ТипыОбъектов)
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицыИзмененияДляОбмена = "ИзмененияДляОбмена1СПерсонал";
	Иначе
		ИмяТаблицыИзмененияДляОбмена = "ИзмененияДляОбменаКабинетСотрудника";
	КонецЕсли;
	ИзмененияДляОбмена = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений(ИмяТаблицыИзмененияДляОбмена);
	
	ТипОбъектаТипыЗначений 	= ТипОбъектаТипыЗначений();
	
	ТипЗначенияТипыОбъектов = Новый Соответствие;
	ТипыЗначений = Новый Массив;
	Для каждого ТипОбъекта Из ТипыОбъектов Цикл
		ТипЗначенияТипаОбъекта = ТипОбъектаТипыЗначений[ТипОбъекта];
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыЗначений, ТипЗначенияТипаОбъекта, Истина);
		Для каждого ТипЗначения Из ТипЗначенияТипаОбъекта Цикл
			ТипыОбъектов = ТипЗначенияТипыОбъектов[ТипЗначения];
			Если ТипыОбъектов = Неопределено Тогда
				ТипыОбъектов = Новый Массив;
			КонецЕсли;
			ТипыОбъектов.Добавить(ТипОбъекта);
			ТипЗначенияТипыОбъектов.Вставить(ТипЗначения, ТипыОбъектов);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыЗначений", ТипыЗначений);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка,
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.ВыгружаемыеОбъекты1СПерсонал КАК ВыгружаемыеОбъекты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВыгружаемыеОбъекты.Ссылка) В (&ТипыЗначений)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъекты1СПерсонал", "ВыгружаемыеОбъектыКабинетСотрудника");
	КонецЕсли;
	ТаблицаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат ИзмененияДляОбмена;
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из ТаблицаОбъектов Цикл
		ТипыОбъектов = ТипЗначенияТипыОбъектов[СтрокаТЗ.ТипЗначения];
		Для каждого ТипОбъекта Из ТипыОбъектов Цикл
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= СтрокаТЗ.Ссылка;
			НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Изменения", ИзмененияДляОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТНовыеИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеИзменения.Ссылка КАК Ссылка,
	|	НовыеИзменения.ТипОбъекта КАК ТипОбъекта,
	|	НовыеИзменения.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТНовыеИзменения КАК НовыеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ПО НовыеИзменения.Ссылка = Изменения.Ссылка
	|			И НовыеИзменения.ТипОбъекта = Изменения.ТипОбъекта
	|ГДЕ
	|	Изменения.ВыгружатьУдаление ЕСТЬ NULL";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция РассчитатьОтменуИзмененияКОбменуПоТипуОбъектов(Приложение, ТипыОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта
	|ИЗ
	|	РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|ГДЕ
	|	Изменения.ТипОбъекта В(&ТипыОбъектов)";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция РассчитатьИзмененияОбъектовКОбмену(Приложение, ОбъектыКРегистрации, ТипОбъекта)
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		ИмяТаблицыИзмененияДляОбмена = "ИзмененияДляОбмена1СПерсонал";
	Иначе
		ИмяТаблицыИзмененияДляОбмена = "ИзмененияДляОбменаКабинетСотрудника";
	КонецЕсли;
	ИзмененияДляОбмена = ОбщегоНазначенияБЗК.ТаблицаЗначенийПоИмениРегистраСведений(ИмяТаблицыИзмененияДляОбмена);
	
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	Для каждого Ссылка Из ОбъектыКРегистрации Цикл
		
		НоваяСтрока = ИзмененияДляОбмена.Добавить();
		НоваяСтрока.Ссылка 			= Ссылка;
		НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
		НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		
		Если ПубликоватьСтруктуруЮридическихЛиц И ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация Тогда
			НоваяСтрока = ИзмененияДляОбмена.Добавить();
			НоваяСтрока.Ссылка 			= Ссылка;
			НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
			НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", ИзмененияДляОбмена);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Изменения.Ссылка КАК Ссылка,
	|	Изменения.ТипОбъекта КАК ТипОбъекта,
	|	Изменения.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТНовыеИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеИзменения.Ссылка КАК Ссылка,
	|	НовыеИзменения.ТипОбъекта КАК ТипОбъекта,
	|	НовыеИзменения.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТНовыеИзменения КАК НовыеИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияДляОбмена1СПерсонал КАК Изменения
	|		ПО НовыеИзменения.Ссылка = Изменения.Ссылка
	|			И НовыеИзменения.ТипОбъекта = Изменения.ТипОбъекта
	|ГДЕ
	|	Изменения.ВыгружатьУдаление ЕСТЬ NULL";
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИзмененияДляОбмена1СПерсонал", "ИзмененияДляОбменаКабинетСотрудника");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает соответствие типа объекта и типа значения.
//
// Возвращаемое значение:
//	Соответствие
// 		*Ключ - ПеречислениеСсылка.ТипыОбъектовИнтеграцияУправлениеПерсоналом
// 		*Значение - Массив - элементы массива тип ссылка, например Тип("СправочникСсылка.ФизическиеЛица")
//
Функция ТипОбъектаТипыЗначений()
	
	ПеречислениеМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	ТипОбъектаТипЗначения = Новый Соответствие;
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ФизическоеЛицо,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ФизическиеЛица")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Организация,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Организации")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Должность,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Должности")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ДолжностьПоШтатномуРасписанию,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ШтатноеРасписание")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Сотрудник,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Сотрудники")));
	
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
		МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Подразделение, МассивТипов);
	Иначе
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Подразделение,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.СтруктураПредприятия")));
	КонецЕсли;
	
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.МашиночитаемаяДоверенность,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.МашиночитаемыеДоверенности")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ПрименяемыеВычетыНДФЛ,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ФизическиеЛица")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ОграничениеДоступаКРабочимКонтактам,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ФизическиеЛица")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ГрафикОтпусков,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.Сотрудники")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ЗаработанныеПраваНаОтпуск,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ФизическиеЛица")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ДоступныеФункцииФизическогоЛица,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ФизическиеЛица")));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ШаблонДокумента,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.ШаблоныДокументов")));
	
	ТипЗначения = ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ГрафикРаботы,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ПраздничныеДниГрафикаРаботы,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	КонецЕсли;
	
	ТипЗначения = ТипВидОтпускаСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ВидОтпуска,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	КонецЕсли;
	
	ТипЗначения = ТипВидПредоставляемойСотрудникамСправкиСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ВидПредоставляемойСотрудникамСправки,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	КонецЕсли;
	
	ТипЗначения = ТипРабочиеМестаОхраныТрудаСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) И ТипЗначения <> Тип("Неопределено") Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.РабочееМестоОхраныТруда,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначения));
	КонецЕсли;
	
	Возврат ТипОбъектаТипЗначения;
	
КонецФункции 

#КонецОбласти

#Область ОтключениеПриложения

Функция ОчиститьДанныеПриОтключенииПриложения(Приложение, РегистрироватьСобытиеЖР) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОчиститьОбщиеНастройки = (Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом
			И Не ИспользуетсяКабинетСотрудника()) 
			Или (Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника
			И Не Используется1СПерсонал());
			
	БылиОшибки = Ложь;
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БудущиеСобытияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииИзмененийУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаПодписанияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НезагруженныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НеобработанныеОбъектыУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РазмерыПорцийОбменаУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СобытияОбменаУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		
		Если ОчиститьОбщиеНастройки Тогда
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииУправлениеПерсоналом");
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТекущиеРуководителиКабинетСотрудника");
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.БудущиеСобытияУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ВерсииИзмененийУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ВыгруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаПодписанияУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.НезагруженныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.НеобработанныеОбъектыУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПравилаВыгрузкиУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.РазмерыПорцийОбменаУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.СобытияОбменаУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Записать();
		
		Если ОчиститьОбщиеНастройки Тогда
			РегистрыСведений.НастройкиИнтеграцииУправлениеПерсоналом.СоздатьНаборЗаписей().Записать();
			РегистрыСведений.ТекущиеРуководителиКабинетСотрудника.СоздатьНаборЗаписей().Записать();
			РегистрыСведений.ПубличныеИдентификаторыОбъектовУправлениеПерсоналом.СоздатьНаборЗаписей().Записать();
			Константы.РегистрироватьВЖурналеСобытийЗапросы.Установить(Ложь);
		КонецЕсли;
		
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Интеграция1СПерсонал.ОчиститьДанныеПриОтключенииПриложения();
		Иначе
			ИнтеграцияКабинетСотрудника.ОчиститьДанныеПриОтключенииПриложения();
		КонецЕсли;
		
		ОчиститьКлючиТокенМенеджера(Приложение);
		ОчиститьКлючиТокенПриложения(Приложение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		БылиОшибки = Истина;
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).Отключение,
			УровеньЖурналаРегистрации.Ошибка,,,ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не БылиОшибки И РегистрироватьСобытиеЖР Тогда
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Комментарий = НСтр("ru = 'Выполнено отключение приложения 1С:Персонал.';
								|en = '1C:Human Resources is disconnected.'");
		Иначе
			Комментарий = НСтр("ru = 'Выполнено отключение сервиса 1С:Кабинет сотрудника.';
								|en = '1C:Employee account service is disconnected.'");
		КонецЕсли;
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).Отключение, УровеньЖурналаРегистрации.Информация,,,Комментарий);
	КонецЕсли;
	
	Возврат БылиОшибки;

КонецФункции

#КонецОбласти

#Область Руководители

Функция ОбновлятьРуководителейПриСменеРуководителяОрганизации()

	ИмяОпции = "СтруктураПредприятияНеСоответствуетСтруктуреЮридическихЛиц";
	ФункциональнаяОпцияИспользуется = (Метаданные.ФункциональныеОпции.Найти(ИмяОпции) <> Неопределено);
	Возврат Не (ФункциональнаяОпцияИспользуется И ПолучитьФункциональнуюОпцию(ИмяОпции))
		Или ПубликоватьСтруктуруЮридическихЛиц();

КонецФункции
	
Процедура ПроверитьРуководителейОрганизаций(БылиОшибки) Экспорт
	
	Организации = Новый Массив;
	Приложения = ИспользуемыеПриложения();
	Для каждого Приложение Из Приложения Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ВыгружаемыеОрганизации(Приложение));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(ТекущиеРуководители.Руководитель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Руководитель,
	|	ЕСТЬNULL(ТекущиеРуководители.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК Должность
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеРуководителиКабинетСотрудника КАК ТекущиеРуководители
	|		ПО Организации.Ссылка = ТекущиеРуководители.СтруктурнаяЕдиница
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";
	ТекущиеРуководители = Запрос.Выполнить().Выгрузить();
	
	РуководителиОрганизаций = СведенияОРуководителяхОрганизаций(Организации);
	
	ОбновлениеОрганизаций = ТекущиеРуководители.СкопироватьКолонки();
	ОрганизацииДляОбновления = ТекущиеРуководители.СкопироватьКолонки();
	Для каждого СтрокаТЗ Из ТекущиеРуководители Цикл
		
		ДанныеРуководителя = РуководителиОрганизаций[СтрокаТЗ.Организация];
		Если СтрокаТЗ.Руководитель <> ДанныеРуководителя.Руководитель
			Или СтрокаТЗ.Должность <> ДанныеРуководителя.РуководительДолжность Тогда
			НоваяСтрока = ОбновлениеОрганизаций.Добавить();
			НоваяСтрока.Организация 	= СтрокаТЗ.Организация;
			НоваяСтрока.Руководитель 	= ДанныеРуководителя.Руководитель;
			НоваяСтрока.Должность 		= ДанныеРуководителя.РуководительДолжность;
		КонецЕсли;
		Если СтрокаТЗ.Руководитель <> ДанныеРуководителя.Руководитель Тогда
			НоваяСтрока = ОрганизацииДляОбновления.Добавить();
			НоваяСтрока.Организация 	= СтрокаТЗ.Организация;
			НоваяСтрока.Руководитель 	= ДанныеРуководителя.Руководитель;
			НоваяСтрока.Должность 		= ДанныеРуководителя.РуководительДолжность;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОрганизацииДляОбновления) И Не ЗначениеЗаполнено(ОбновлениеОрганизаций) Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененияУП = Новый ТаблицаЗначений;
	ИзмененияУП.Колонки.Добавить("Ссылка");
	ИзмененияУП.Колонки.Добавить("ТипОбъекта");
	ИзмененияУП.Колонки.Добавить("ВерсияДанных");
	
	ИзмененияКС = Новый ТаблицаЗначений;
	ИзмененияКС.Колонки.Добавить("Ссылка");
	ИзмененияКС.Колонки.Добавить("ТипОбъекта");
	ИзмененияКС.Колонки.Добавить("ВерсияДанных");
	
	Если ЗначениеЗаполнено(ОрганизацииДляОбновления) И ОбновлятьРуководителейПриСменеРуководителяОрганизации() Тогда
		
		ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
		ПодразделенияБезРуководителя = ПодразделенияБезРуководителя(ОрганизацииДляОбновления.ВыгрузитьКолонку("Организация"));
		
		ТипОбъекта = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение;
		
		ВыгружаемыеОрганизации = Новый Соответствие;
		Если ПубликоватьСтруктуруЮридическихЛиц Тогда
			ВыгружаемыеОрганизации = ОбъектыВыгружаются(ОрганизацииДляОбновления.ВыгрузитьКолонку("Организация"));
		КонецЕсли;
		
		Для каждого ЭлементКоллекции Из ПодразделенияБезРуководителя Цикл
			
			Приложение = ЭлементКоллекции.Ключ;
			ПодразделенияПриложенияБезРуководителя = ЭлементКоллекции.Значение;
			
			ВыгружаемыеОрганизацииПриложения = ВыгружаемыеОрганизации[Приложение];
			ОрганизацииКакПодразделения = Новый Массив;
			Если ЗначениеЗаполнено(ВыгружаемыеОрганизацииПриложения) Тогда
				УжеЗарегистрированы = УжеЗарегистрированыДляОбмена(Приложение, ВыгружаемыеОрганизацииПриложения, ТипОбъекта);
				ОрганизацииКакПодразделения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыгружаемыеОрганизацииПриложения, УжеЗарегистрированы);
			КонецЕсли;
			
			УжеЗарегистрированы = УжеЗарегистрированыДляОбмена(Приложение, ПодразделенияПриложенияБезРуководителя, ТипОбъекта);
			Подразделения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ПодразделенияПриложенияБезРуководителя, УжеЗарегистрированы);
			
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				Изменения = ИзмененияУП;
			Иначе
				Изменения = ИзмененияКС;
			КонецЕсли;
			
			Для каждого Подразделение Из Подразделения Цикл
				НоваяСтрока = Изменения.Добавить();
				НоваяСтрока.Ссылка 			= Подразделение;
				НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
				НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
			КонецЦикла;
			Если ЗначениеЗаполнено(ОрганизацииКакПодразделения) Тогда
				Для каждого Организация Из ОрганизацииКакПодразделения Цикл
					НоваяСтрока = Изменения.Добавить();
					НоваяСтрока.Ссылка 			= Организация;
					НоваяСтрока.ТипОбъекта 		= ТипОбъекта;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбновлениеОрганизаций) Тогда
		
		ВыгружаемыеОрганизации = ОбъектыВыгружаются(ОбновлениеОрганизаций.ВыгрузитьКолонку("Организация"));
		
		Для каждого Приложение Из Приложения Цикл
			
			Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
				Изменения = ИзмененияУП;
			Иначе
				Изменения = ИзмененияКС;
			КонецЕсли;
			
			ВыгружаемыеОрганизацииПриложения = ВыгружаемыеОрганизации[Приложение];
			Если ЗначениеЗаполнено(ВыгружаемыеОрганизацииПриложения) Тогда
				Для каждого Организация Из ВыгружаемыеОрганизацииПриложения Цикл
					НоваяСтрока = Изменения.Добавить();
					НоваяСтрока.Ссылка 			= Организация;
					НоваяСтрока.ТипОбъекта 		= Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация;
					НоваяСтрока.ВерсияДанных 	= Строка(Новый УникальныйИдентификатор);
				КонецЦикла;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзмененияУП) Или ЗначениеЗаполнено(ИзмененияКС) Или ЗначениеЗаполнено(ОбновлениеОрганизаций) Тогда
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных; 
			Если ЗначениеЗаполнено(ИзмененияУП) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбмена1СПерсонал");
				ЭлементБлокировки.ИсточникДанных = ИзмененияУП;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			Если ЗначениеЗаполнено(ИзмененияКС) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзмененияДляОбменаКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ИзмененияКС;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипОбъекта", "ТипОбъекта");
			КонецЕсли;
			Если ЗначениеЗаполнено(ОбновлениеОрганизаций) Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТекущиеРуководителиКабинетСотрудника");
				ЭлементБлокировки.ИсточникДанных = ОбновлениеОрганизаций;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтруктурнаяЕдиница", "Организация");
			КонецЕсли;
			Блокировка.Заблокировать(); 
			
			Если ЗначениеЗаполнено(ИзмененияУП) Тогда
				Для каждого СтрокаТЗ Из ИзмененияУП Цикл
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбмена1СПерсонал.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИзмененияКС) Тогда
				Для каждого СтрокаТЗ Из ИзмененияКС Цикл
					МенеджерЗаписи = РегистрыСведений.ИзмененияДляОбменаКабинетСотрудника.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЗ);
					МенеджерЗаписи.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаТЗ Из ОбновлениеОрганизаций Цикл
				МенеджерЗаписи = РегистрыСведений.ТекущиеРуководителиКабинетСотрудника.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.СтруктурнаяЕдиница 	= СтрокаТЗ.Организация;
				МенеджерЗаписи.Руководитель 		= СтрокаТЗ.Руководитель;
				МенеджерЗаписи.Должность 			= СтрокаТЗ.Должность;
				МенеджерЗаписи.Записать();
			КонецЦикла; 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			БылиОшибки = Истина;
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПрочиеСобытия(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПодразделенияБезРуководителя(Организации)
	
	ПодразделенияБезРуководителей = Новый Соответствие;
	ПубликоватьСтруктуруЮридическихЛиц = ПубликоватьСтруктуруЮридическихЛиц();
	
	Запрос = Новый Запрос;
	Если ПубликоватьСтруктуруЮридическихЛиц Тогда
		Запрос.УстановитьПараметр("Организации", Организации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Подразделения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|ГДЕ
		|	Подразделения.Владелец В(&Организации)";
		ПодразделенияДляПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		ПодразделенияДляПроверки = ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделенияДляПроверкиРуководителей(Организации);
	КонецЕсли;
	
	ВыгружаемыеПодразделения = ОбъектыВыгружаются(ПодразделенияДляПроверки);
	Для каждого ЭлементКоллекции Из ВыгружаемыеПодразделения Цикл
		Приложение = ЭлементКоллекции.Ключ;
		Подразделения = ЭлементКоллекции.Значение;
		ПодразделениеРуководитель = РуководителиПодразделений(Подразделения, ВыгружаемыеФизическиеЛица(Приложение));
		ПодразделенияПриложенияБезРуководителей = Новый Массив;
		Для каждого Подразделение Из Подразделения Цикл
			Если Не ЗначениеЗаполнено(ПодразделениеРуководитель[Подразделение]) Тогда
				ПодразделенияПриложенияБезРуководителей.Добавить(Подразделение);
			КонецЕсли;
		КонецЦикла;
		ПодразделенияБезРуководителей.Вставить(Приложение, ПодразделенияПриложенияБезРуководителей);
	КонецЦикла;
	
	Возврат ПодразделенияБезРуководителей;

КонецФункции 

Функция РуководителиПодразделений(Подразделения, ФизическиеЛица)
	
	ПодразделениеРуководитель = Новый Соответствие;
	
	ВыгружаемыеФизическиеЛица = ОбщегоНазначенияБЗККлиентСервер.МассивВСоответствие(ФизическиеЛица);
	
	Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
		ПодразделениеРуководитель = ИнтеграцияУправлениеПерсоналомВнутренний.РуководителиПодразделенийОрганизаций(Подразделения, ВыгружаемыеФизическиеЛица);
	Иначе
		ПодразделениеРуководитель = ИнтеграцияУправлениеПерсоналомВнутренний.РуководителиПодразделений(Подразделения, ВыгружаемыеФизическиеЛица);
	КонецЕсли;
	
	Возврат ПодразделениеРуководитель;

КонецФункции

Функция РассчитыватьПодразделенияРуководителей() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.РассчитыватьПодразделенияРуководителей();
	
КонецФункции

Функция ПодразделенияДляПроверкиРуководителей(Организации) Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделенияДляПроверкиРуководителей(Организации);

КонецФункции

Функция РуководителиПодразделенийОрганизаций(Подразделения, ВыгружаемыеФизическиеЛица) Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.РуководителиПодразделенийОрганизаций(Подразделения, ВыгружаемыеФизическиеЛица);

КонецФункции

Функция СведенияОРуководителяхОрганизаций(Организации) Экспорт
	
	СведенияОРуководителях = Новый Соответствие;
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	Сведения = "Руководитель,ДолжностьРуководителя";
	Для каждого Организация Из Организации Цикл
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтветственныеЛица = ЗарплатаКадры.ОтветственныеЛицаОрганизации(Организация, Сведения, ДатаАктуальности);
		ДанныеРуководителя = Новый Структура();
		ДанныеРуководителя.Вставить("Руководитель", Справочники.ФизическиеЛица.ПустаяСсылка());
		ДанныеРуководителя.Вставить("РуководительДолжность", Справочники.Должности.ПустаяСсылка());
		Если ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда
			ДанныеРуководителя.Руководитель = ОтветственныеЛица.Руководитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтветственныеЛица.ДолжностьРуководителя) Тогда
			ДанныеРуководителя.РуководительДолжность = ОтветственныеЛица.ДолжностьРуководителя;
		КонецЕсли;
		
		СведенияОРуководителях.Вставить(Организация, ДанныеРуководителя);
		
	КонецЦикла;
	
	Возврат СведенияОРуководителях;

КонецФункции

#КонецОбласти

#Область ОпределениеТипов

Функция ТипГрафикРаботыСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипГрафикРаботыСсылка();

КонецФункции

Функция ТипВидПредоставляемойСотрудникамСправкиСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипВидПредоставляемойСотрудникамСправкиСсылка();

КонецФункции

Функция ТипСборГрафиковОтпусковСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипСборГрафиковОтпусковСсылка();

КонецФункции

Функция ТипЗаявкаОстаткиОтпусковСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипЗаявкаОстаткиОтпусковСсылка();

КонецФункции

Функция ТипЗаявкаСправкаСМестаРаботыСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипЗаявкаСправкаСМестаРаботыСсылка();

КонецФункции

Функция ТипЗаявкаОтсутствиеСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипЗаявкаОтсутствиеСсылка();

КонецФункции

Функция ТипЗаявкаДСВСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипЗаявкаДСВСсылка();

КонецФункции

Функция ТипВидОтпускаСсылка() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипВидОтпускаСсылка();

КонецФункции

Функция ТипРабочиеМестаОхраныТрудаСсылка() Экспорт
	
	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ТипРабочиеМестаОхраныТрудаСсылка();

КонецФункции

#КонецОбласти

#Область КонструкторыОбъектов

Функция НоваяТаблицаВыгружаемыеОбъекты(Приложение) Экспорт

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Возврат Интеграция1СПерсонал.НоваяТаблицаВыгружаемыеОбъекты();
	Иначе
		Возврат ИнтеграцияКабинетСотрудника.НоваяТаблицаВыгружаемыеОбъекты();
	КонецЕсли;

КонецФункции

Функция НоваяТаблицаИзмененияДляОбмена(Приложение) Экспорт

	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Возврат Интеграция1СПерсонал.НоваяТаблицаИзмененияДляОбмена();
	Иначе
		Возврат ИнтеграцияКабинетСотрудника.НоваяТаблицаИзмененияДляОбмена();
	КонецЕсли;

КонецФункции

Функция НоваяТаблицаРабочиеМестаСотрудников()

	РабочиеМеста = Новый ТаблицаЗначений;
	РабочиеМеста.Колонки.Добавить("Сотрудник", 		Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	РабочиеМеста.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	РабочиеМеста.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	РабочиеМеста.Колонки.Добавить("ДолжностьПоШтатномуРасписанию", Новый ОписаниеТипов("СправочникСсылка.ШтатноеРасписание"));
	РабочиеМеста.Колонки.Добавить("ДатаСобытия", 	Новый ОписаниеТипов("Дата"));
	РабочиеМеста.Колонки.Добавить("ВидСобытия", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	РабочиеМеста.Колонки.Добавить("ГрафикРаботы", 	Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипГрафикРаботыСсылка())));
	
	Возврат РабочиеМеста;

КонецФункции

#КонецОбласти

#Область МенеджерыОбъектов

Функция МенеджерПеречисленияСостоянияСбораГрафиковОтпусков() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.МенеджерПеречисленияСостоянияСбораГрафиковОтпусков();

КонецФункции 

#КонецОбласти

#Область МетодыПолученияВыгруженныхОбъектов

Функция ОбъектыВыгруженныеВПриложение(Приложение, ТипОбъекта, Ссылки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|ГДЕ
	|	ВыгруженныеОбъекты.Выгружался
	|	И ВыгруженныеОбъекты.Приложение = &Приложение
	|	И ВыгруженныеОбъекты.ТипОбъекта = &ТипОбъекта
	|	И ВыгруженныеОбъекты.Ссылка В(&Ссылки)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СсылкуНаФизическоеЛицоМожноВыгружать(Приложение, Ссылка) Экспорт
	
	Выгружать = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТипОбъекта", Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыгруженныеОбъекты.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ВыгруженныеОбъектыУправлениеПерсоналом КАК ВыгруженныеОбъекты
	|ГДЕ
	|	ВыгруженныеОбъекты.Ссылка = &Ссылка
	|	И ВыгруженныеОбъекты.ТипОбъекта = &ТипОбъекта
	|	И ВыгруженныеОбъекты.Приложение = &Приложение
	|	И ВыгруженныеОбъекты.Выгружался";
	
	Выгружать = Не Запрос.Выполнить().Пустой();
	Если Не Выгружать Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыгружаемыеОбъекты.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ВыгружаемыеОбъектыКабинетСотрудника КАК ВыгружаемыеОбъекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОшибкиЗаполненияОбъектовУправлениеПерсоналом КАК ОшибкиЗаполнения
		|		ПО ВыгружаемыеОбъекты.Ссылка = ОшибкиЗаполнения.Ссылка
		|			И (ОшибкиЗаполнения.Приложение = &Приложение)
		|			И (ОшибкиЗаполнения.ТипОбъекта = &ТипОбъекта)
		|			И (ОшибкиЗаполнения.БлокирующаяОшибка)
		|ГДЕ
		|	ВыгружаемыеОбъекты.Ссылка = &Ссылка
		|	И ОшибкиЗаполнения.БлокирующаяОшибка ЕСТЬ NULL";
		Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыгружаемыеОбъектыКабинетСотрудника", "ВыгружаемыеОбъекты1СПерсонал");
		КонецЕсли;
		Выгружать = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Выгружать;

КонецФункции

#КонецОбласти

#Область ФормированиеJSON

Функция СформироватьJSON(Значение) Экспорт
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON( ,Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, Значение, НастройкиСериализацииJSON, "ПреобразованиеJSON", ИнтеграцияУправлениеПерсоналом);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	
	Отказ = Истина;
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьПриложениеВСостоянииПодключения() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостояниеПодключения.Приложение КАК Приложение,
	|	СостояниеПодключения.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	СостояниеПодключения.Состояние КАК Состояние,
	|	СостояниеПодключения.СсылкаДляАдминистратора КАК СсылкаДляАдминистратора,
	|	СостояниеПодключения.КоличествоПопыток КАК КоличествоПопыток
	|ИЗ
	|	РегистрСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом КАК СостояниеПодключения
	|ГДЕ
	|	СостояниеПодключения.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	НаборЗаписей = РегистрыСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Перечисления.ПриложенияДляИнтеграции.ПустаяСсылка());
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
	НаборЗаписей = РегистрыСведений.СостояниеПодключенияПриложенияУправлениеПерсоналом.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Приложение.Установить(Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
	ЗаписьНабора.Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура ЗаполнитьПриложениеВИсключенияхИзПравил() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсключенияИзПравил.Приложение КАК Приложение,
	|	ИсключенияИзПравил.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИсключенияИзПравил.Публикуется КАК Публикуется,
	|	ИсключенияИзПравил.ЭтоОтветственный КАК ЭтоОтветственный
	|ИЗ
	|	РегистрСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом КАК ИсключенияИзПравил
	|ГДЕ
	|	ИсключенияИзПравил.Приложение = ЗНАЧЕНИЕ(Перечисление.ПриложенияДляИнтеграции.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Перечисления.ПриложенияДляИнтеграции.ПустаяСсылка());
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
		НаборЗаписей = РегистрыСведений.ИсключенияИзПравилПубликацииУправлениеПерсоналом.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Приложение.Установить(Приложение);
		НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
		ЗаписьНабора.Приложение = Приложение;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Прочие

// Вычисляется расширение картинки 
Функция РасширениеФайлаКартинки(ДвоичныеДанные) Экспорт
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	ФорматФайла = Картинка.Формат();
	Если ФорматФайла = ФорматКартинки.JPEG 
		Или ФорматФайла = ФорматКартинки.GIF
		Или ФорматФайла = ФорматКартинки.TIFF
		Или ФорматФайла = ФорматКартинки.PNG
		Или ФорматФайла = ФорматКартинки.BMP Тогда
		Возврат Строка(ФорматФайла);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции 

// Возвращает позиции штатного расписания, которые соответствуют правилам выгрузки указанного приложения.
//
// Параметры:
// 		Приложение - ПеречислениеСсылка.ПриложенияДляИнтеграции
// 		ПозицииШР - Массив - содержит СправочникСсылка.ШтатноеРасписание
//
// Возвращаемое значение:
// 		Соответствие
// 			* Ключ - СправочникСсылка.ШтатноеРасписание
// 			* Значение - Булево
//
Функция ПозицииПравилВыгрузки(Приложение, ПозицииШР) Экспорт
	
	ПозицииПравилВыгрузки = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Позиции", ПозицииШР);
	Запрос.УстановитьПараметр("Приложение", Приложение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаВыгрузки.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПравилаВыгрузкиУправлениеПерсоналом КАК ПравилаВыгрузки
	|ГДЕ
	|	ПравилаВыгрузки.Ссылка В(&Позиции)
	|	И ПравилаВыгрузки.Приложение = &Приложение";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПозицииПравилВыгрузки.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат ПозицииПравилВыгрузки;

КонецФункции

Функция ТипыОсновныхОбъектов() Экспорт 
	
	// Порядок элементов в массиве определяет порядок выгрузки объектов.
	
	ТипыОбъектов = Новый Массив;
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ФизическоеЛицо);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Организация);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Подразделение);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Должность);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ДолжностьПоШтатномуРасписанию);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.Сотрудник);
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом.ГрафикРаботы);
	
	Возврат ТипыОбъектов;

КонецФункции

Процедура СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание) Экспорт
	
	ИнтеграцияУправлениеПерсоналомВнутренний.СоздатьВТШтатноеРасписание(МенеджерВТ, ИспользоватьШтатноеРасписание);
	
КонецПроцедуры

Функция НастройкиПодключения(Приложение) Экспорт
	
	НастройкиПодключения = Новый Структура("АдресПриложения,АдресПриложенияПоИмени,ВерсияDTO,ВерсияAPI");
	
	Если Приложение = Перечисления.ПриложенияДляИнтеграции.УправлениеПерсоналом Тогда
		Интеграция1СПерсонал.ЗаполнитьНастройкиПодключения(НастройкиПодключения);
	ИначеЕсли Приложение = Перечисления.ПриложенияДляИнтеграции.КабинетСотрудника Тогда
		ИнтеграцияКабинетСотрудника.ЗаполнитьНастройкиПодключения(НастройкиПодключения);
	КонецЕсли;
	
	Возврат НастройкиПодключения;

КонецФункции

Функция ПодразделениеВСтруктуреПредприятия(ПодразделениеОрганизации) Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.ПодразделениеВСтруктуреПредприятия(ПодразделениеОрганизации);

КонецФункции

Функция ТипыЗначенийОсновныхОбъектов()
	
	ТипыЗначений = Новый Массив;
	ТипыЗначений.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.Организации"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.Должности"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.ШтатноеРасписание"));
	ТипыЗначений.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипЗначения = ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипыЗначений.Добавить(ТипЗначения);
	КонецЕсли;
	
	Возврат ТипыЗначений;
	
КонецФункции

Процедура ОбновитьСтруктуруПредприятия() Экспорт

	ИнтеграцияУправлениеПерсоналомВнутренний.ОбновитьСтруктуруПредприятия();

КонецПроцедуры

Функция ТипОбъектаТипЗначенияДляПубличныхИдентификаторов() Экспорт

	ПеречислениеМенеджер = Перечисления.ТипыОбъектовИнтеграцияУправлениеПерсоналом;
	ТипОбъектаТипЗначения = Новый Соответствие;
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ФизическоеЛицо, 					Тип("СправочникСсылка.ФизическиеЛица"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Организация, 						Тип("СправочникСсылка.Организации"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Должность, 							Тип("СправочникСсылка.Должности"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ДолжностьПоШтатномуРасписанию, 		Тип("СправочникСсылка.ШтатноеРасписание"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Сотрудник, 							Тип("СправочникСсылка.Сотрудники"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.МашиночитаемаяДоверенность,		 	Тип("СправочникСсылка.МашиночитаемыеДоверенности"));
	ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.СогласиеНаПрисоединениеККЭДО, 		Тип("ДокументСсылка.СогласиеНаПрисоединениеККЭДО"));
	
	Если ПубликоватьСтруктуруЮридическихЛиц() Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Подразделение, Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	Иначе
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.Подразделение, Тип("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	ТипЗначения = ТипВидПредоставляемойСотрудникамСправкиСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ВидПредоставляемойСотрудникамСправки, ТипЗначения);
	КонецЕсли;
	ТипЗначения = ТипГрафикРаботыСсылка();
	Если ЗначениеЗаполнено(ТипЗначения) Тогда
		ТипОбъектаТипЗначения.Вставить(ПеречислениеМенеджер.ГрафикРаботы, ТипЗначения);
	КонецЕсли;
	
	Возврат ТипОбъектаТипЗначения;

КонецФункции

Функция ДанныеСотрудникаЗаполнены(ДанныеСотрудника)

	Если Не ЗначениеЗаполнено(ДанныеСотрудника.ДолжностьПоШтатномуРасписанию) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ИмяФайлаБезРасширения(ИмяФайла, Расширение) Экспорт

	ИмяФайлаБезРасширения = ИмяФайла;
	Если СтрЗаканчиваетсяНа(СокрЛП(ВРег(ИмяФайла)), "." + ВРег(Расширение)) Тогда
		КоличествоСимволов = СтрДлина(ИмяФайла) - СтрДлина(Расширение) - 1;
		ИмяФайлаБезРасширения = Лев(ИмяФайла, КоличествоСимволов);
	КонецЕсли;
	
	Возврат ИмяФайлаБезРасширения;

КонецФункции

// Получает хеш по алгоритму SHA256 и преобразовывает в HexСтроку.
//
// Возвращаемое значение:
// 	Строка
//
Функция ХешСуммаДвоичныхДанных(ДвоичныеДанные) Экспорт

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанные);
	
	Возврат ВРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));

КонецФункции

Функция ОписаниеКлиентскогоПриложения() Экспорт

	СистемнаяИнформация = Новый СистемнаяИнформация; 
	ВерсияПлатформы = СтрШаблон("%1%2", "1C/", СистемнаяИнформация.ВерсияПриложения);
	
	ВариантРаботы = ?(ОбщегоНазначения.ИнформационнаяБазаФайловая(), "File", "ClientServer");
	РежимРазделения = ?(ОбщегоНазначения.РазделениеВключено(),"; Splitted","");
	РежимРаботы = СтрШаблон("%1%2%3%4", "(", ВариантРаботы, РежимРазделения, ")");
	
	ВерсияПодсистемы = "";
	ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	СтрокаТЗ = ВерсииПодсистем.Найти("ЗарплатаКадрыБазовая", "ИмяПодсистемы");
	Если СтрокаТЗ <> Неопределено Тогда
		ВерсияПодсистемы = СтрокаТЗ.Версия;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВерсияПодсистемы) Тогда
		ТекущееПриложение = СтрШаблон("%1/%2 HRLib/%3", ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации(), Метаданные.Версия, ВерсияПодсистемы);
	Иначе
		ТекущееПриложение = СтрШаблон("%1/%2", ОбщегоНазначения.ИдентификаторИнтернетПоддержкиКонфигурации(), Метаданные.Версия);
	КонецЕсли;
	
	Возврат СтрШаблон("%1 %2 %3", ВерсияПлатформы, РежимРаботы, ТекущееПриложение);

КонецФункции

Процедура СохранитьНастройкиСервисаПодписания(Приложение, Настройки) Экспорт

	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиСервисаПодписанияУправлениеПерсоналом");
		ЭлементБлокировки.УстановитьЗначение("Приложение", Приложение);
		Блокировка.Заблокировать();
		
		ЗаписьМенеджера = РегистрыСведений.НастройкиСервисаПодписанияУправлениеПерсоналом.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьМенеджера, Настройки);
		ЗаписьМенеджера.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.';
								|en = 'Не удалось сохранить настройки. Подробности см. в журнале регистрации.'");
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИменаСобытийЖР(Приложение).ПрочиеСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
	КонецПопытки;

КонецПроцедуры

Функция УправленческаяОрганизация() Экспорт

	Возврат ИнтеграцияУправлениеПерсоналомВнутренний.УправленческаяОрганизация();

КонецФункции

#КонецОбласти

#КонецОбласти