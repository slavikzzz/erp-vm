////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции работы с наборами записей и регистрами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПереходныеПроцедурыИФункции

// Проверяет, что указанный режим соответствует добавлению набора записей.
//
// Параметры:
//  Замещение - Булево, РежимЗамещения
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДобавлениеНабораЗаписей(Замещение) Экспорт
	Возврат Замещение = Ложь
		Или (Замещение <> Неопределено И Замещение = ЗарплатаКадрыПовтИсп.РежимДобавленияНабораЗаписей());
КонецФункции

// Проверяет, что указанный режим соответствует замещению набора записей.
//
// Параметры:
//  Замещение - Булево, РежимЗамещения
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоЗамещениеНабораЗаписей(Замещение) Экспорт
	Возврат Замещение = Истина
		Или (Замещение <> Неопределено И Замещение = ЗарплатаКадрыПовтИсп.РежимЗамещенияНабораЗаписей());
КонецФункции

// Проверяет, что указанный режим соответствует обновлению набора записей.
//
// Параметры:
//  Замещение - Булево, РежимЗамещения
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбновлениеНабораЗаписей(Замещение) Экспорт
	Возврат Замещение <> Неопределено И Замещение = ЗарплатаКадрыПовтИсп.РежимОбновленияНабораЗаписей();
КонецФункции

// Проверяет, что указанный режим соответствует слиянию набора записей.
//
// Параметры:
//  Замещение - Булево, РежимЗамещения
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСлияниеНабораЗаписей(Замещение) Экспорт
	Возврат Замещение <> Неопределено И Замещение = ЗарплатаКадрыПовтИсп.РежимСлиянияНабораЗаписей();
КонецФункции

// Проверяет, что указанный режим соответствует удалению набора записей.
//
// Параметры:
//  Замещение - Булево, РежимЗамещения
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоУдалениеНабораЗаписей(Замещение) Экспорт
	Возврат Замещение <> Неопределено И Замещение = ЗарплатаКадрыПовтИсп.РежимУдаленияНабораЗаписей();
КонецФункции

// Возвращает таблицу значений с отборами, по которым набор записей будет записан в базу данных.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей,
//     РегистрРасчетаНаборЗаписей - Набор записей, который используется для подготовки условия и параметров для запроса.
//   Замещение - РежимЗамещения, Булево - Передается "как есть" из параметров события ПередЗаписью или ПриЗаписи.
//     - Неопределено - Режим записи будет получен из "НаборЗаписей.ДополнительныеСвойства.Замещение".
//
// Возвращаемое значение:
//   ТаблицаЗначений - В таблице присутствуют колонки "<ИмяИзмерения>" и "<ИмяИзмерения>_Использование".
//       В колонках "<ИмяИзмерения>" хранятся значения отборов,
//       а в колонках "<ИмяИзмерения>_Использование" - признаки использования.
//
Функция ОтборыЗаписейНабора(НаборЗаписей, Знач Замещение = Неопределено) Экспорт
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ОтборыЗаписейНабора") Тогда
		Возврат НаборЗаписей.ДополнительныеСвойства.ОтборыЗаписейНабора;
	КонецЕсли;
	
	ПрочитатьИПроверитьПараметрЗамещение(НаборЗаписей, Замещение);
	
	// Пример описания ключа записи для регистра с регистратором:
	//   ПолноеИмя = "РегистрСведений.БухучетРаспределениеОсновногоЗаработка",
	//   СписокПолей = "Регистратор,ПериодРегистрации,Сотрудник,Организация,СтатьяФинансирования,
	//                 |СпособОтраженияЗарплатыВБухучете,ОблагаетсяЕНВД,ПодразделениеУчетаЗатрат",
	//   СписокПолейОбновления = "Регистратор,НомерСтроки".
	ОписаниеКлючаЗаписи = ЗарплатаКадрыПовтИсп.ОписаниеКлючаЗаписи(НаборЗаписей.Метаданные().ПолноеИмя());
	Ключи = ОписаниеКлючаЗаписи.СписокПолейОбновления;
	
	РежимыЗамещения = ЗарплатаКадрыПовтИсп.РежимыЗамещения();
	
	Если ЗначениеЗаполнено(Ключи) Тогда
		СуффиксИспользование = "_Использование";
		Если Замещение = Ложь // Добавление.
			Или Замещение = РежимыЗамещения.Добавление
			Или Замещение = РежимыЗамещения.Обновление
			Или Замещение = РежимыЗамещения.Слияние
			Или Замещение = РежимыЗамещения.Удаление Тогда
			
			// Получение значений отборов в колонках "<ИмяИзмерения>".
			ОтборыЗаписейНабора = НаборЗаписей.Выгрузить(, Ключи);
			
			// Добавление колонок "<ИмяИзмерения>_Использование".
			МассивКлючей = СтрРазделить(Ключи, ", ", Ложь);
			Для Каждого Ключ Из МассивКлючей Цикл
				ОтборыЗаписейНабора.Колонки.Добавить(Ключ + СуффиксИспользование, Новый ОписаниеТипов("Булево"));
			КонецЦикла;
			
			// Заполнение Истина в колонки "<ИмяИзмерения>_Использование".
			Если ОтборыЗаписейНабора.Количество() > 0 Тогда
				ИменаКлючейИспользование = СтрСоединить(МассивКлючей, СуффиксИспользование + ",") + СуффиксИспользование;
				ОтборыЗаписейНабора.ЗаполнитьЗначения(Истина, ИменаКлючейИспользование);
			КонецЕсли;
			
		Иначе // Замещение = Истина Или Замещение = РежимыЗамещения.Замещение.
			
			// Создание пустой таблицы с колонками "<ИмяИзмерения>".
			ОтборыЗаписейНабора = НаборЗаписей.ВыгрузитьКолонки(Ключи);
			
			// Добавление колонок "<ИмяИзмерения>_Использование".
			Для Каждого Ключ Из СтрРазделить(Ключи, ",", Ложь) Цикл
				ОтборыЗаписейНабора.Колонки.Добавить(Ключ + СуффиксИспользование, Новый ОписаниеТипов("Булево"));
			КонецЦикла;
			
			// Добавление отборов.
			СтрокаТаблицы = ОтборыЗаписейНабора.Добавить();
			ЕстьОтборы = Ложь;
			Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
				Если Не ЭлементОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				ЕстьОтборы = Истина;
				СтрокаТаблицы[ЭлементОтбора.Имя]                        = ЭлементОтбора.Значение;
				СтрокаТаблицы[ЭлементОтбора.Имя + СуффиксИспользование] = ЭлементОтбора.Использование;
			КонецЦикла;
			Если Не ЕстьОтборы Тогда
				ОтборыЗаписейНабора.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Пустой регистр - пустая таблица без колонок.
		ОтборыЗаписейНабора = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ОтборыЗаписейНабора", ОтборыЗаписейНабора);
	Возврат ОтборыЗаписейНабора;
КонецФункции

// Возвращает значение отбора с которым будет записан набор записей в базу данных.
//
// Параметры:
//   НаборЗаписей - См. одноименный параметр функции ОтборыЗаписейНабора.
//   Замещение - См. одноименный параметр функции ОтборыЗаписейНабора.
//   ИмяИзмерения - Строка
//   НеопределеноЕслиНеИспользуется - Булево
//
// Возвращаемое значение:
//   Массив - Значения отбора.
//   Неопределено - если НеопределеноЕслиНеВключен = Истина и отбор не используется.
//
Функция ЗначенияОтбораЗаписейНабора(НаборЗаписей, Замещение, ИмяИзмерения, НеопределеноЕслиНеИспользуется = Ложь) Экспорт
	ОтборыЗаписейНабора = ОтборыЗаписейНабора(НаборЗаписей, Замещение);
	Копия = ОтборыЗаписейНабора.Скопировать(Новый Структура(ИмяИзмерения + "_Использование", Истина));
	Если Копия.Количество() = 0 Тогда
		Если НеопределеноЕслиНеИспользуется И ЭтоЗамещениеНабораЗаписей(Замещение) Тогда
			Возврат Неопределено;
		Иначе
			Возврат Новый Массив;
		КонецЕсли;
	Иначе
		Возврат КоллекцииБЗК.УникальныеЗначенияКолонки(Копия, ИмяИзмерения);
	КонецЕсли;
КонецФункции

// Возвращает указанные поля строк регистра из базы данных, которые будут
// записаны при записи указанного набора записей с учетом режима замещения.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей,
//       РегистрРасчетаНаборЗаписей - Набор записей, который используется для подготовки условия и параметров для запроса.
//   Замещение - РежимЗамещения, Булево - Передается "как есть" из параметров события ПередЗаписью или ПриЗаписи.
//     - Неопределено - Режим записи будет получен из "НаборЗаписей.ДополнительныеСвойства.Замещение".
//   СписокПолей - Строка - Имена полей (или фрагмент запроса полей) набора записей через запятую.
//       Если не указан, значит выбираются все поля набора записей.
//   Различные - Булево - Если Истина, тогда выбираются различные строки для указанных полей.
//       Если результат планируется передавать в функцию ИзменениеЗаписейНабора,
//       тогда для случая, когда Различные = Ложь и записи могут повторяться
//       (то есть указаны не все поля измерений), следует сделать свертку
//       полученной таблицы значений перед передачей в функцию ИзменениеЗаписейНабора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - поля из параметра СписокПолей,
//    строки без повторений для указанного списка полей.
//
Функция ЗаписиНабораИзБазыДанных(НаборЗаписей, Знач Замещение = Неопределено, Знач СписокПолей = "", Знач Различные = Ложь) Экспорт
	ПрочитатьИПроверитьПараметрЗамещение(НаборЗаписей, Замещение);
	Если ЭтоДобавлениеНабораЗаписей(Замещение) И СтрНайти(СписокПолей, " КАК ") = 0 Тогда
		Возврат НаборЗаписей.Выгрузить(Новый Массив,
			?(ЗначениеЗаполнено(СписокПолей), СписокПолей, Неопределено));
	КонецЕсли;
	Возврат ЗапросНабораИзБазыДанных(НаборЗаписей, Замещение, СписокПолей, Различные).Выполнить().Выгрузить();
КонецФункции

// Возвращает указанные поля строк регистра из базы данных, которые будут
// записаны при записи указанного набора записей с учетом режима замещения.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей,
//       РегистрРасчетаНаборЗаписей - Набор записей, который используется для подготовки условия и параметров для запроса.
//   Замещение - РежимЗамещения, Булево - Передается "как есть" из параметров события ПередЗаписью или ПриЗаписи.
//     - Неопределено - Режим записи будет получен из "НаборЗаписей.ДополнительныеСвойства.Замещение".
//   СписокПолей - Строка - Имена полей (или фрагмент запроса полей) набора записей через запятую.
//       Если не указан, значит выбираются все поля набора записей.
//   Различные - Булево - Если Истина, тогда выбираются различные строки для указанных полей.
//       Если результат планируется передавать в функцию ИзменениеЗаписейНабора,
//       тогда для случая, когда Различные = Ложь и записи могут повторяться
//       (то есть указаны не все поля измерений), следует сделать свертку
//       полученной таблицы значений перед передачей в функцию ИзменениеЗаписейНабора.
//   ИмяВТ - Строка - Имя временной таблицы, в которую необходимо поместить данные из регистра.
//
// Возвращаемое значение:
//  Запрос - поля из параметра СписокПолей,
//    строки без повторений для указанного списка полей.
//
Функция ЗапросНабораИзБазыДанных(НаборЗаписей, Знач Замещение = Неопределено, Знач СписокПолей = "", Знач Различные = Ложь, Знач ИмяВТ = "") Экспорт
	ПрочитатьИПроверитьПараметрЗамещение(НаборЗаписей, Замещение);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ВыбираемыеПоля
	|ПОМЕСТИТЬ ИмяВТ
	|ИЗ
	|	&Таблица КАК ТекущаяТаблица
	|ГДЕ
	|	&УсловиеОтбора";
	Если Не Различные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	Если ИмяВТ = "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИмяВТ", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ИмяВТ", "ПОМЕСТИТЬ " + ИмяВТ);
	КонецЕсли;
	ОтборЗаписейНабораИзБазыДанных(НаборЗаписей, Замещение, Запрос);
	
	Если Не ЗначениеЗаполнено(СписокПолей) Тогда
		Таблица = НаборЗаписей.Выгрузить(Новый Массив);
		Поля = Новый Массив;
		Для Каждого Колонка Из Таблица.Колонки Цикл
			Если Различные
				И Колонка.ТипЗначения.СодержитТип(Тип("Строка"))
				И Колонка.ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда
				Если Колонка.ТипЗначения.Типы().Количество() = 1 Тогда
					Шаблон = "ВЫРАЗИТЬ(%1 КАК СТРОКА(10000)) КАК %1";
				Иначе
					Шаблон = "ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(%1) = ТИП(СТРОКА) ТОГДА ВЫРАЗИТЬ(%1 КАК СТРОКА(10000)) ИНАЧЕ %1 КОНЕЦ КАК %1";
				КонецЕсли;
				Поля.Добавить(СтрШаблон(Шаблон, Колонка.Имя));
				Продолжить;
			КонецЕсли;
			Поля.Добавить(Колонка.Имя);
		КонецЦикла;
		СписокПолей = СтрСоединить(Поля, ",");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", НаборЗаписей.Метаданные().ПолноеИмя());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоля", СписокПолей);
	
	Возврат Запрос;
КонецФункции

// Возвращает удаленные и добавленные строки регистра для указанного набора записей с учетом режима замещения.
//
// Параметры:
//   ЗаписиИзБазыДанных - см. ЗаписиНабораИзБазыДанных
//   НаборЗаписей - РегистрСведенийНаборЗаписей, РегистрНакопленияНаборЗаписей, РегистрБухгалтерииНаборЗаписей,
//       РегистрРасчетаНаборЗаписей - Набор записей, который используется для подготовки условия и параметров для запроса.
//   Замещение - РежимЗамещения, Булево - Передается "как есть" из параметров события ПередЗаписью или ПриЗаписи.
//     - Неопределено - Режим записи будет получен из "НаборЗаписей.ДополнительныеСвойства.Замещение".
//   ТолькоИзменения - Булево - если установить Истина, тогда в результате
//       не будет строк без изменений (ВидИзмененияСтроки = 0).
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ВидИзмененияСтроки - Число - если 1, то строка добавлена, если -1, то удалена, если 0, то не изменилась.
//   Далее поля из таблицы ЗаписиИзБазыДанных.
//
Функция ИзменениеЗаписейНабора(ЗаписиИзБазыДанных, НаборЗаписей, Замещение, ТолькоИзменения = Ложь) Экспорт
	
	ОписаниеКлючаЗаписи = ЗарплатаКадрыПовтИсп.ОписаниеКлючаЗаписи(
		НаборЗаписей.Метаданные().ПолноеИмя());
	
	СписокПолейКлючаЗаписи = ВРег("," + ОписаниеКлючаЗаписи.СписокПолей + ",");
	
	ПоляКлючаЗаписи = Новый Массив;
	Поля = Новый Массив;
	Для Каждого Колонка Из ЗаписиИзБазыДанных.Колонки Цикл
		Поля.Добавить(Колонка.Имя);
		Если СтрНайти(СписокПолейКлючаЗаписи, "," + ВРег(Колонка.Имя) + ",") > 0 Тогда
			ПоляКлючаЗаписи.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	СписокПолей = СтрСоединить(Поля, ",");
	
	НовыеСтроки = ?(ЭтоУдалениеНабораЗаписей(Замещение), Новый Массив, Неопределено);
	Таблица = НаборЗаписей.Выгрузить(НовыеСтроки, СписокПолей);
	Если ОписаниеКлючаЗаписи.ОписаниеПолей.Количество() <> ПоляКлючаЗаписи.Количество() Тогда
		Таблица.Свернуть(СписокПолей);
	КонецЕсли;
	Таблица.Колонки.Добавить("ВидИзмененияСтроки", Новый ОписаниеТипов("Число"));
	Таблица.ЗаполнитьЗначения(1, "ВидИзмененияСтроки");
	
	Для Каждого СтараяЗапись Из ЗаписиИзБазыДанных Цикл
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяЗапись);
		НоваяСтрока.ВидИзмененияСтроки = -1;
	КонецЦикла;
	
	Таблица.Свернуть(СписокПолей, "ВидИзмененияСтроки");
	
	Если ТолькоИзменения Тогда
		СтрокиБезИзменений = Таблица.НайтиСтроки(Новый Структура("ВидИзмененияСтроки", 0));
		Для Каждого СтрокаТаблицы Из СтрокиБезИзменений Цикл
			Таблица.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Дополнительные параметры для функции ОтборЗаписейНабораИзБазыДанных.
//
// Возвращаемое значение:
//  Структура:
//   * ПсевдонимТаблицы - Строка - префикс, добавляемый к именам полей
//       (начальное значение "ТекущаяТаблица.").
//
//   * ПрефиксИменПолейВПараметрах - Строка - префикс, добавляемый к именам
//       полей отбора в условии и параметрах запроса (начальное значение без префикса).
//
//   * ИмяПараметраТаблицыКлючевыхПолей - Строка - начальное значение ЗначенияПолейОтбораСтрок.
//
Функция НовыеПараметрыОтбораЗаписейНабораИзБазыДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПсевдонимТаблицы", "ТекущаяТаблица.");
	Результат.Вставить("ПрефиксИменПолейВПараметрах", "");
	Результат.Вставить("ИмяПараметраТаблицыКлючевыхПолей", "ЗначенияПолейОтбораСтрок");
	
	Возврат Результат;
	
КонецФункции

// Возвращает условие отбора и параметры запроса для выбора записей из базы данных
// по указанному набору записей с учетом режима замещения.
//
// Если Замещение равно Истина или РежимЗамещения.Замещение, тогда
// записи будут извлекаться из базы данных по настройке свойства Отбор,
// в противном случае по ключам строк записей в наборе записей.
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей
//               - РегистрНакопленияНаборЗаписей
//               - РегистрБухгалтерииНаборЗаписей
//               - РегистрРасчетаНаборЗаписей - набор записей, который используется
//                   для подготовки условия и параметров для запроса.
//               - Отбор - отбор набора записей (в этом случае Замещение считается Истина).
//
//  Замещение - РежимЗамещения, Булево - как передается в подписку на событие ПередЗаписью.
//            - Неопределено - получить и установить в этот параметр значение из свойства
//                Замещение структуры ДополнительныеСвойства указанного набора записей
//                (если свойства нет, тогда устанавливается Истина).
//
//  Запрос - Запрос - установить параметры в указанный запрос и заменить на возвращаемое
//             УсловиеЗапроса строку "&УсловиеОтбора" в тексте запроса, если есть.
//         - Неопределено
//
//  ДополнительныеПараметры - см. НовыеПараметрыОтбораЗаписейНабораИзБазыДанных
//
// Возвращаемое значение:
//  Структура:
//   * УсловиеЗапроса - Строка - условие для подстановки в текст запроса.
//   * ПараметрыЗапроса - Структура из КлючИЗначение:
//      ** Ключ     - Строка - имя поля отбора или ЗначенияПолейОтбораСтрок с указанным префиксом.
//      ** Значение - Произвольный - значение поля отбора или таблица значений.
//
// Пример:
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ТекущаяТаблица.Пользователь КАК Пользователь,
//	|	ТекущаяТаблица.ПотребоватьСменуПароляПриВходе КАК ПотребоватьСменуПароляПриВходе,
//	|	ТекущаяТаблица.СрокДействияНеОграничен КАК СрокДействияНеОграничен,
//	|	ТекущаяТаблица.СрокДействия КАК СрокДействия,
//	|	ТекущаяТаблица.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода КАК ПросрочкаРаботыВПрограммеДоЗапрещенияВхода
//	|ИЗ
//	|	РегистрСведений.СведенияОПользователях КАК ТекущаяТаблица
//	|ГДЕ
//	|	&УсловиеОтбора";
//	ОбщегоНазначения.ОтборЗаписейНабораИзБазыДанных(НаборЗаписей, Замещение, Запрос);
//	СуществующиеЗаписи = Запрос.Выполнить().Выгрузить();
//
Функция ОтборЗаписейНабораИзБазыДанных(НаборЗаписей, Замещение = Неопределено, Запрос = Неопределено,
			ДополнительныеПараметры = Неопределено) Экспорт
	
	Параметры = ?(ДополнительныеПараметры <> Неопределено, ДополнительныеПараметры,
		НовыеПараметрыОтбораЗаписейНабораИзБазыДанных());
	
	Режим = Новый Структура("Замещение", Истина);
	Если ТипЗнч(НаборЗаписей) = Тип("Отбор") Или ТипЗнч(НаборЗаписей) = Тип("Массив") Тогда
		Отбор = НаборЗаписей;
	Иначе
		Отбор = НаборЗаписей.Отбор;
		Если Замещение = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Режим, НаборЗаписей.ДополнительныеСвойства);
			ИмяПараметра = "НаборЗаписей.ДополнительныеСвойства.Замещение";
		Иначе
			Режим.Замещение = Замещение;
			ИмяПараметра = "Замещение";
		КонецЕсли;
		Если ТипЗнч(Режим.Замещение) <> Тип("Булево")
		   И Не ЭтоДобавлениеНабораЗаписей(Режим.Замещение)
		   И Не ЭтоЗамещениеНабораЗаписей(Режим.Замещение)
		   И Не ЭтоОбновлениеНабораЗаписей(Режим.Замещение)
		   И Не ЭтоСлияниеНабораЗаписей(Режим.Замещение)
		   И Не ЭтоУдалениеНабораЗаписей(Режим.Замещение) Тогда
			
			ОжидаемыеТипы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево"));
			Если ЗарплатаКадрыПовтИсп.РежимДобавленияНабораЗаписей() <> Неопределено Тогда
				// АПК:488-выкл Поддержка новых типов платформы (исполняемый код безопасен)
				ОжидаемыеТипы.Добавить(Вычислить("Тип(""РежимЗамещения"")"));
				// АПК:488-вкл
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбщегоНазначения.ОтборЗаписейНабораИзБазыДанных",
				ИмяПараметра, Режим.Замещение, ОжидаемыеТипы);
		КонецЕсли;
	КонецЕсли;
	Если Замещение = Неопределено Тогда
		Замещение = Режим.Замещение;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	Условие = "ЛОЖЬ";
	Псевдоним = Параметры.ПсевдонимТаблицы;
	
	Если ЭтоОбновлениеНабораЗаписей(Режим.Замещение)
	 Или ЭтоСлияниеНабораЗаписей(Режим.Замещение)
	 Или ЭтоУдалениеНабораЗаписей(Режим.Замещение) Тогда
		
		ОписаниеКлючаЗаписи = ЗарплатаКадрыПовтИсп.ОписаниеКлючаЗаписи(
			НаборЗаписей.Метаданные().ПолноеИмя());
		
		СписокПолей = ОписаниеКлючаЗаписи.СписокПолейОбновления;
		Если ЗначениеЗаполнено(СписокПолей) Тогда
			ИмяПараметраТаблицы = Параметры.ИмяПараметраТаблицыКлючевыхПолей;
			Выгрузка = НаборЗаписей.Выгрузить(, СписокПолей);
			ПараметрыЗапроса.Вставить(ИмяПараметраТаблицы, Выгрузка);
			Если Запрос <> Неопределено Тогда
				Запрос.УстановитьПараметр(ИмяПараметраТаблицы, Выгрузка);
			КонецЕсли;
			Условие = СтрШаблон("(%1) В (&" + ИмяПараметраТаблицы + ")", // @query-part-1
				Псевдоним + СтрЗаменить(СписокПолей, ",", ", " + Псевдоним));
		Иначе
			Условие = "ИСТИНА";
		КонецЕсли;
		
	ИначеЕсли ЭтоЗамещениеНабораЗаписей(Режим.Замещение) Тогда
		
		ЧастиУсловия = Новый Массив;
		Префикс = Параметры.ПрефиксИменПолейВПараметрах;
		Шаблон = Псевдоним + "%1 = &" + Префикс + "%1"; // @query-part-1
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			ЧастиУсловия.Добавить(СтрШаблон(Шаблон, ЭлементОтбора.Имя));
			ПараметрыЗапроса.Вставить(Префикс + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			Если Запрос <> Неопределено Тогда
				Запрос.УстановитьПараметр(Префикс + ЭлементОтбора.Имя, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
		Условие = ?(Не ЗначениеЗаполнено(ЧастиУсловия), "ИСТИНА",
			СтрСоединить(ЧастиУсловия, Символы.ПС + "	И "));
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("УсловиеЗапроса", Условие);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Если Запрос <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", Условие);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Рекомендуется вызывать из ПередЗаписью регистров подчиненных регистратору перед началом использования данных набора.
//   Заполняет "Регистратор" набора записей на основании значения соответствующего отбора.
//
Процедура ЗаполнитьРегистраторНабораЗаписей(НаборЗаписей, Замещение) Экспорт
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("РегистраторЗаполнен") Тогда
		Возврат;
	КонецЕсли;
	Если НаборЗаписей.Отбор.Регистратор.Использование Тогда
		Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Регистратор = Регистратор;
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей.ДополнительныеСвойства.Вставить("РегистраторЗаполнен", Истина);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьИПроверитьПараметрЗамещение(НаборЗаписей, Замещение)
	Если Замещение = Неопределено Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("Замещение", Замещение);
	КонецЕсли;
	Если ТипЗнч(Замещение) <> Тип("Булево") Тогда
		РежимДобавления = ЗарплатаКадрыПовтИсп.РежимДобавленияНабораЗаписей();
		ДоступнаПлатформа27 = (РежимДобавления <> Неопределено);
		Если Не ДоступнаПлатформа27 Или ТипЗнч(Замещение) <> ТипЗнч(РежимДобавления) Тогда
			ОжидаемыеТипы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("Булево"));
			Если ДоступнаПлатформа27 Тогда
				ОжидаемыеТипы.Добавить(ТипЗнч(РежимДобавления));
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("ОбщегоНазначенияБЗК.ОтборыЗаписейНабора",
				"Замещение", Замещение, ОжидаемыеТипы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
