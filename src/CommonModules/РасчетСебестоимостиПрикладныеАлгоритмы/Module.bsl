#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыВызываемыеИзРегистров

// Возвращает признак записи движений по регистру механизмом расчета партий и себестоимости.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - набор записей регистра.
//
// Возвращаемое значение:
//	Булево - Истина, если движения записываются регламентной операцией закрытия месяца.
//
Функция ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей) Экспорт
	
	// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

// Проверяет необходимость формирования движений по регистрам учета себестоимости при проведении документов.
// Если формирование движений не требуется, то набор записей будет очищен.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - набор записей регистра.
//
// Возвращаемое значение:
//	Булево - Истина, если требуется формирование движений.
//
Функция ФормироватьДвиженияРегистровУчетаСебестоимости(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ФормироватьДвиженияРегистровУчетаСебестоимости") Тогда
		ФормироватьДвижения = НаборЗаписей.ДополнительныеСвойства.ФормироватьДвиженияРегистровУчетаСебестоимости;
		НаборЗаписей.ДополнительныеСвойства.Удалить("ФормироватьДвиженияРегистровУчетаСебестоимости");
		Возврат ФормироватьДвижения; // проверка уже выполнена перед записью набора
	ИначеЕсли ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(НаборЗаписей)
	 И НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		Возврат Истина; // если идет расчет себестоимости, то проверять не нужно
	ИначеЕсли НЕ РасчетСебестоимостиПовтИсп.ВозможныНеиспользуемыеДвиженияПоРегистрамСебестоимости() Тогда
		Возврат Истина; // учет себестоимости ведется во всех периодах
	КонецЕсли;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФормироватьДвиженияРегистровУчетаСебестоимости", Истина);
	
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	
	Если МетаданныеРегистра = Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости Тогда
		
		КоличествоЗаписей = НаборЗаписей.Количество();
		
		Для НомерЗаписи = 0 По КоличествоЗаписей - 1 Цикл
			
			ИндексЗаписи  = КоличествоЗаписей - 1 - НомерЗаписи; // обходим набор записей от конца к началу
			ПериодРасчета = НачалоМесяца(НаборЗаписей[ИндексЗаписи].Месяц);
			
			Если НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(ПериодРасчета) Тогда
				
				Если НаборЗаписей.ДополнительныеСвойства.Свойство("СформированПрограммно") Тогда
					НаборЗаписей.Удалить(ИндексЗаписи);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В периоде %1 учет себестоимости не ведется.';
							|en = 'Cost is not accounted in the period %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
						РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПериодРасчета));
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	РегистрНеИспользуется = РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости().Получить(МетаданныеРегистра) <> Неопределено;
	
	Если НЕ РегистрНеИспользуется Тогда
		Возврат Истина;
	КонецЕсли;
	
	КоличествоЗаписей = НаборЗаписей.Количество();
	Если КоличествоЗаписей = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	ЭтоВводОстатков = РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости().Получить(Регистратор.Метаданные()) <> Неопределено;
	
	ПериодыЗаписей = НаборЗаписей.Выгрузить(,"Период");
	ПериодыЗаписей.Сортировать("Период");
	
	Если РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(НачалоМесяца(ПериодыЗаписей[0].Период), ЭтоВводОстатков) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для НомерЗаписи = 0 По КоличествоЗаписей - 1 Цикл
		
		ИндексЗаписи = КоличествоЗаписей - 1 - НомерЗаписи; // обходим набор записей от конца к началу
		ПериодЗаписи = НачалоМесяца(НаборЗаписей[ИндексЗаписи].Период);
		
		Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(ПериодЗаписи, ЭтоВводОстатков) Тогда
			НаборЗаписей.Удалить(ИндексЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ФормироватьДвиженияРегистровУчетаСебестоимости", НаборЗаписей.Количество() > 0);
	
	Возврат НаборЗаписей.Количество() > 0;
	
КонецФункции

// Вызывается ПередЗаписью набора записей регистра - сохраняет движения документа, сформированные расчетом партий и себестоимости.
// Такие движения имеют реквизит РасчетПартий = Истина или РасчетСебестоимости = Истина.
// При перепроведении документа эти движения добавляются к набору движений, сформированному самим документом.
//
// Параметры:
//	НаборЗаписей - РегистрНакопленияНаборЗаписей - свойство ЭтотОбъект модуля набора записей.
//	Замещение - Булево - режим записи набора (параметр события ПередЗаписью).
//
Процедура СохранитьДвиженияСформированныеРасчетомПартийИСебестоимости(НаборЗаписей, Замещение) Экспорт
	
	Если РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().НеСохранятьРасчетныеДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Замещение Тогда
		Возврат; // движения, сформированные расчетом партий и себестоимости, не затираются
	КонецЕсли;
	
	Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ТочноНужноСохранитьДвижения") Тогда
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("СвойстваДокумента")
		 Или НаборЗаписей.ДополнительныеСвойства.СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Возврат; // движения, сформированные расчетом партий и себестоимости, надо удалить
		КонецЕсли;
	КонецЕсли;
	
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ФормированиеУправленческогоБаланса") Тогда
		Возврат; // движения сформированные для упр.баланса содержат в себе движения расчета себестоимости - сохранять не надо
	КонецЕсли;
	
	// Готовим вспомогательные данные
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	Регистратор        = НаборЗаписей.Отбор.Регистратор.Значение;
	
	Если (МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов
	 	ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеДоходы
	 	ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы)
	 И НЕ НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		
		СохранятьДвижения = РасчетСебестоимостиПовтИсп.ЕстьРасчетныеДвиженияДокумента(Регистратор.Метаданные().ПолноеИмя(), МетаданныеРегистра.ПолноеИмя());
		Если НЕ СохранятьДвижения Тогда
			Возврат; // у этого типа документа нет расчетных движений по данному регистру
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеРегистра = РасчетСебестоимостиПовтИсп.СформироватьОписаниеРегистра(МетаданныеРегистра.ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Если ОписаниеРегистра.ЕстьРасчетСебестоимости И ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ТекстОтборРасчетныеДвижения = "И (Т.РасчетСебестоимости ИЛИ Т.РасчетПартий)";
	//++ НЕ УТКА

	// При проведении этапа производства необходимо сохранять все расчетные движения.
	// Это необходимо для неизменности набора движений при проведении в закрытом периоде.
	ИначеЕсли ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя
	 И ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		ТекстОтборРасчетныеДвижения = "И Т.ВидИсточника <> ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковДвижений.ПустаяСсылка)"
	//-- НЕ УТКА
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
		ТекстОтборРасчетныеДвижения = "И Т.РасчетСебестоимости";
	ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда
		Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
			// Для регистров партионного учета при использовании партионного учета ниже версии 2.2
			// сохранить оффлайновые движения не получится, т.к. у них не заполняется реквизит "РасчетПартий".
			Возврат;
		КонецЕсли;
		ТекстОтборРасчетныеДвижения = "И Т.РасчетПартий";
	Иначе
		// Регистр не обслуживается расчетом партий и себестоимости
		Возврат;
	КонецЕсли;
	
	ТекстОтборРасчетныеДвижения = ТекстОтборРасчетныеДвижения + "
		|	И Т.Активность";
	
	Если МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.Закупки
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж Тогда
		
		Запрос.УстановитьПараметр("ПериодыДвижений", НаборЗаписей.Выгрузить(, "Период, РасчетПартий, РасчетСебестоимости"));
		Запрос.УстановитьПараметр("ЭтоЭтапПроизводства", Ложь);
		//++ НЕ УТКА
		Запрос.УстановитьПараметр("ЭтоЭтапПроизводства", ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЭтапПроизводства2_2"));
		//-- НЕ УТКА
		
		// Движения с признаком РасчетПартий сохраним в случае, если (по ИЛИ)
		//	- у документа нет первичных движений (необходимость наличия движений определит механизм партионного учета)
		//	- есть первичные движения в периоде движения с признаком РасчетПартий
		// Движения с признаком РасчетСебестоимости сохраним в случае, если (по ИЛИ)
		//	- есть первичные движения в периоде движения с признаком РасчетСебестоимости
		//	- есть движения с признаком РасчетПартий в периоде движения с признаком РасчетСебестоимости
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ПериодыПервичныхДвижений
		|ИЗ
		|	&ПериодыДвижений КАК Т
		|ГДЕ
		|	&ОтборПервичныеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПолеРасчетПартий КАК РасчетПартий,
		|	&ПолеРасчетСебестоимости КАК РасчетСебестоимости,
		|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Месяц
		|ПОМЕСТИТЬ ПериодыРасчетныхДвижений
		|ИЗ
		|	&ИмяРегистра КАК Т
		|ГДЕ
		|	Т.Регистратор = &Регистратор
		|	И Т.Активность
		|	И &ОтборРасчетныеДвижения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Месяц КАК Месяц
		|ПОМЕСТИТЬ ПериодыРасчетаПартий
		|ИЗ
		|	ПериодыРасчетныхДвижений КАК Т
		|ГДЕ
		|	Т.РасчетПартий
		|	И НЕ &ЭтоЭтапПроизводства
		|	И НЕ 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					ПериодыПервичныхДвижений КАК Т)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Месяц
		|ИЗ
		|	ПериодыРасчетныхДвижений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыПервичныхДвижений КАК Первичные
		|		ПО Т.Месяц = Первичные.Месяц
		|ГДЕ
		|	Т.РасчетПартий
		|	И (Первичные.Месяц ЕСТЬ НЕ NULL 
		|			ИЛИ &ЭтоЭтапПроизводства)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Месяц КАК Месяц
		|ПОМЕСТИТЬ ПериодыРасчетаСебестоимости
		|ИЗ
		|	ПериодыРасчетныхДвижений КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыПервичныхДвижений КАК ПериодыПервичныхДвижений
		|		ПО Т.Месяц = ПериодыПервичныхДвижений.Месяц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
		|		ПО (Т.Месяц = ПериодыПервичныхДвижений.Месяц)
		|ГДЕ
		|	Т.РасчетСебестоимости
		|	И (НЕ ПериодыПервичныхДвижений.Месяц ЕСТЬ NULL
		|			ИЛИ НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРегистра", МетаданныеРегистра.ПолноеИмя());
		
		Если ОписаниеРегистра.ЕстьРасчетСебестоимости И ОписаниеРегистра.ЕстьРасчетПартий Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПервичныеДвижения", "(НЕ Т.РасчетПартий И НЕ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборРасчетныеДвижения", "(Т.РасчетПартий ИЛИ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетПартий", "Т.РасчетПартий");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетСебестоимости", "Т.РасчетСебестоимости");
			
			ТекстСоединениеСТаблицамиПериодов = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
			|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаПартий.Месяц
			|		И Т.РасчетПартий
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаСебестоимости КАК ПериодыРасчетаСебестоимости
			|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаСебестоимости.Месяц
			|		И Т.РасчетСебестоимости
			|";
			
			ТекстОтборПоПериодам = "
			|	И (НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL
			|			ИЛИ НЕ ПериодыРасчетаСебестоимости.Месяц ЕСТЬ NULL)
			|";
			
		ИначеЕсли ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПервичныеДвижения", "(НЕ Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборРасчетныеДвижения", "(Т.РасчетСебестоимости)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетПартий", "ЛОЖЬ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетСебестоимости", "Т.РасчетСебестоимости");
			
			ТекстСоединениеСТаблицамиПериодов = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаСебестоимости КАК ПериодыРасчетаСебестоимости
			|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаСебестоимости.Месяц
			|		И Т.РасчетСебестоимости
			|";
			
			ТекстОтборПоПериодам = "
			|	И (НЕ ПериодыРасчетаСебестоимости.Месяц ЕСТЬ NULL)
			|";
			
		ИначеЕсли ОписаниеРегистра.ЕстьРасчетПартий Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПервичныеДвижения", "(НЕ Т.РасчетПартий)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборРасчетныеДвижения", "(Т.РасчетПартий)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетПартий", "Т.РасчетПартий");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеРасчетСебестоимости", "ЛОЖЬ");
			
			ТекстСоединениеСТаблицамиПериодов = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыРасчетаПартий КАК ПериодыРасчетаПартий
			|		ПО НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) = ПериодыРасчетаПартий.Месяц
			|		И Т.РасчетПартий
			|";
			
			ТекстОтборПоПериодам = "
			|	И (НЕ ПериодыРасчетаПартий.Месяц ЕСТЬ NULL)
			|";
			
		Иначе
			// Регистр не обслуживается расчетом партий и себестоимости
			Возврат;
		КонецЕсли;
		
		Запрос.Выполнить();
		
	Иначе
		
		ТекстСоединениеСТаблицамиПериодов = "";
		ТекстОтборПоПериодам = "";
		
	КонецЕсли;
	
	ТекстПоляОсновнойТаблицыРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "
		|	Т.");
	
	// Готовим запрос для выборки движений, сформированных расчетом партий и себестоимости.
	Если НаборЗаписей.ДополнительныеСвойства.Свойство("ДополнитьДвижениямиИзИБЗаПериод") Тогда
		ТекстОтборПериод = "И Т.Период <= &КонецПериода";
		Запрос.УстановитьПараметр("КонецПериода", НаборЗаписей.ДополнительныеСвойства.ДополнитьДвижениямиИзИБЗаПериод.КонецПериода);
	Иначе
		ТекстОтборПериод = "";
	КонецЕсли;
	
	РегистрНеИспользуется = РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости().Получить(МетаданныеРегистра) <> Неопределено;
	ЭтоВводОстатков = РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости().Получить(Регистратор.Метаданные()) <> Неопределено;
	
	Если НЕ РегистрНеИспользуется Тогда
		
		ТекстВозможныДвижения = "";
		
	ИначеЕсли НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости() Тогда
		
		ТекстВозможныДвижения = "И ЛОЖЬ";
		
	Иначе
		
		ДатаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить());
		
		Если НЕ ЗначениеЗаполнено(ДатаУчета) Тогда
			
			ТекстВозможныДвижения = "";
			
		Иначе
			
			Если ЭтоВводОстатков Тогда
				ДатаУчета = НачалоМесяца(ДатаУчета - 1);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", ДатаУчета);
			
			ТекстВозможныДвижения = "И Т.Период >= &ДатаНачалаУчетаСебестоимости";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ПолучитьЗаголовокЗапроса() + "
	|%1
	|ИЗ
	|	%2 КАК Т
	|%6
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|	%3
	|	%4
	|	%5
	|	%7
	|";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ТекстПоляОсновнойТаблицыРегистра,
		ОписаниеРегистра.ПолноеИмяРегистра,
		ТекстОтборПериод,
		ТекстОтборРасчетныеДвижения,
		ТекстВозможныДвижения,
		ТекстСоединениеСТаблицамиПериодов,
		ТекстОтборПоПериодам);
	
	// Дополним набор записей документа движениями, сформированных расчетом партий и себестоимости.
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	// Упорядочим набор записей так же, как это делается при расчете партий и себестоимости.
	ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", ""));
	ТекстПоляСортировки = "Регистратор, Период"
		+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
		+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", РасчетСебестоимости", "")
		+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", РасчетПартий", "");
		
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	ТаблицаЗаписей.Сортировать(ТекстПоляСортировки, Новый СравнениеЗначений);
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзДокументов

// Устанавливает параметры запроса выборки данных для проведения документа по регистрам партионного учета.
// Имена параметров см. в коде функции СформироватьСтруктуруПараметровЗапросаДляПроведения().
//
// Параметры:
//	Запрос - Запрос - запрос для установки параметров
//	Реквизиты - Произвольный - реквизиты документа для определения параметров партионного учета
//	Организация - СправочникСсылка.Организации, Неопределено - Организация, по которой будут получены параметры.
//
Процедура ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты, Организация = Неопределено) Экспорт
	
	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Период") Тогда
		Период = Реквизиты.Период;
	Иначе
		Период = Реквизиты.Дата;
	КонецЕсли;
	
	СтруктураПараметров = СформироватьСтруктуруПараметровЗапросаДляПроведения(Реквизиты, НачалоМесяца(Период), Организация);
	
	Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиИнициализированы", Истина);
	
КонецПроцедуры

// Формирует временную таблицу ВТПараметрыПартионногоУчетаДляПроведения, содержащую параметры для проведения документа по регистрам партионного учета.
// Процедуру следует использовать в том случае, если документ формирует движения в нескольких периодах
// и в каждом периоде надо учитывать действующие в нем (а не на дату документа) параметры партионного учета.
// Также процедуру следует использовать при пакетном формировании движений нескольких документов.
// Имена полей временной таблицы ВТПараметрыПартионногоУчетаДляПроведения см. в описании функции СформироватьСтруктуруПараметровЗапросаДляПроведения()
// Кроме того, во временную таблицу добавляются колонки
//	- Период, содержащую дату из параметра Периоды или из колонки Период переданной временной таблицы, приведенную к началу месяца.
//	- Организация, содержащую данные колонки Организация из переданной временной таблицы <ИмяТаблицыПериодов> или Реквизиты.Организация (если передан параметр Периоды)
// Информация о периодах в первую очередь получается из параметра Периоды, а если параметр не передан - то из временной таблицы <ИмяТаблицыПериодов>
// Соединение с временной таблицей ВТПараметрыПартионногоУчетаДляПроведения следует выполнять
// по полям Период (обязательно) и Организация (если передана временная таблица <ИмяТаблицыПериодов> с колонкой Организация).
//
// Параметры:
//	Запрос - Запрос - запрос для установки параметров
//	Реквизиты - ДокументСсылка, Произвольный - реквизиты документа для определения параметров партионного учета
// 	Периоды - Массив Из Дата - периоды, в которых документ формирует движения
//	ИмяТаблицыПериодов - Строка - имя временной таблицы с колонками Период (обязательный), Организация, Ссылка (необязательные)
//
Процедура ЗаполнитьПараметрыИнициализацииПоПериодам(Запрос, Реквизиты, Периоды = Неопределено, ИмяТаблицыПериодов = "") Экспорт
	
	Если Запрос.Параметры.Свойство("ПараметрыПартийИСебестоимостиПоПериодамИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДляПараметров = Новый Запрос;
	ЗапросДляПараметров.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	МассивПараметров  = Новый Массив;
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТипыКолонок 	  = Новый Структура;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация")
	 И ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		ТекущаяОрганизация = Реквизиты.Организация;
	Иначе
		ТекущаяОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Ссылка") Тогда
		ТекущаяСсылка = Реквизиты.Ссылка;
	Иначе
		ТекущаяСсылка = Неопределено;
	КонецЕсли;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Период", 	  Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если Периоды = Неопределено Тогда // передана временная таблица
		
		Если РазмерВременнойТаблицы(ЗапросДляПараметров, ИмяТаблицыПериодов) = 0 Тогда
			
			НовСтр = ТаблицаДанных.Добавить();
			НовСтр.Период = НачалоМесяца(ТекущаяДатаСеанса());
			НовСтр.Организация = ТекущаяОрганизация;
			
		Иначе
			
			Если КолонкаВременнойТаблицыСуществует(ЗапросДляПараметров, ИмяТаблицыПериодов, "Ссылка") Тогда
				ТекущаяСсылка = ВыгрузитьВременнуюТаблицу(ЗапросДляПараметров, ИмяТаблицыПериодов, 1)[0].Ссылка;
			КонецЕсли;
		
			ЗапросДляПараметров.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период
			|ИЗ
			|	ИмяТаблицыПериодов КАК Т
			|ГДЕ
			|	Т.Период <> ДАТАВРЕМЯ(1,1,1)";
			
			Если КолонкаВременнойТаблицыСуществует(ЗапросДляПараметров, ИмяТаблицыПериодов, "Организация") Тогда
				ЗапросДляПараметров.Текст = СтрЗаменить(ЗапросДляПараметров.Текст, "&Организация", "Т.Организация");
			Иначе
				ЗапросДляПараметров.УстановитьПараметр("Организация", ТекущаяОрганизация);
			КонецЕсли;
			
			ЗапросДляПараметров.Текст = СтрЗаменить(ЗапросДляПараметров.Текст, "ИмяТаблицыПериодов", ИмяТаблицыПериодов);
			
			ТаблицаДанных = ЗапросДляПараметров.Выполнить().Выгрузить();
			
		КонецЕсли;
		
	Иначе //передан массив периодов
		
		Если НЕ ЗначениеЗаполнено(Периоды) Тогда
			Периоды.Добавить(ТекущаяДатаСеанса());
		КонецЕсли;
		
		Для Каждого ТекущийПериод Из Периоды Цикл
			Если ЗначениеЗаполнено(ТекущийПериод) Тогда
				НовСтр = ТаблицаДанных.Добавить();
				НовСтр.Период = НачалоМесяца(ТекущийПериод);
				НовСтр.Организация = ТекущаяОрганизация;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДанных.Свернуть("Период, Организация");
		
	КонецЕсли;
	
	// Соберем информацию о параметрах по периодам.
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		
		СтруктураПараметров = СформироватьСтруктуруПараметровЗапросаДляПроведения(
			Реквизиты,
			ТекущаяСтрока.Период,
			ТекущаяСтрока.Организация,
			ТекущаяСсылка);
		
		СтруктураПараметров.Вставить("Период", 		ТекущаяСтрока.Период);
		СтруктураПараметров.Вставить("Организация", ТекущаяСтрока.Организация);
		
		// Запомним все возможные типы колонок таблицы параметров.
		Для Каждого КлючИЗначение Из СтруктураПараметров Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				// Параметры-массивы передаются не в таблицу параметров, а в параметры запроса
				Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);				
				Продолжить;
			КонецЕсли;
			
			Если НЕ ТипыКолонок.Свойство(КлючИЗначение.Ключ) Тогда
				МассивТиповКолонки = Новый Массив;
			Иначе
				МассивТиповКолонки = ТипыКолонок[КлючИЗначение.Ключ]; // Массив
			КонецЕсли;
			
			МассивТиповКолонки.Добавить(ТипЗнч(КлючИЗначение.Значение));
			ТипыКолонок.Вставить(КлючИЗначение.Ключ, МассивТиповКолонки);
			
		КонецЦикла;
		
		МассивПараметров.Добавить(СтруктураПараметров);
		
	КонецЦикла;
	
	// Создадим колонки таблицы параметров.
	Для Каждого КлючИЗначение Из ТипыКолонок Цикл
		
		ТипКолонки = Новый ОписаниеТипов(Новый ОписаниеТипов(КлючИЗначение.Значение),, "NULL");
		
		Если ТипКолонки.Типы().Количество() = 0 Тогда
			ТипКолонки = Новый ОписаниеТипов("Строка"); // если все значений данного параметра равны Неопределено, то присвоим колонке "фиктивный" тип, который можно будет выбрать в запросе
		КонецЕсли;
		
		ТаблицаПараметров.Колонки.Добавить(КлючИЗначение.Ключ, ТипКолонки);
		
	КонецЦикла;
	
	// Переложим параметры из массива в таблицу значений.
	Для Каждого СтруктураПараметров Из МассивПараметров Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПараметров.Добавить(), СтруктураПараметров);
	КонецЦикла;
	
	// Поместить таблицу значений во временную таблицу ВТПараметрыПартионногоУчетаДляПроведения.
	ЗапросДляПараметров.УстановитьПараметр("ТаблицаПараметровПартионногоУчета", ТаблицаПараметров);
	
	ЗапросДляПараметров.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТПараметрыПартионногоУчетаДляПроведения
	|ИЗ
	|	&ТаблицаПараметровПартионногоУчета КАК Т";
	
	ЗапросДляПараметров.Выполнить();
	
	Запрос.УстановитьПараметр("ПараметрыПартийИСебестоимостиПоПериодамИнициализированы", Истина);
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
КонецПроцедуры

// Формирует структуру параметров, влияющих на логику проведения документа по регистрам партионного учета.
//
// Параметры:
// 	Реквизиты - ДокументСсылка, ВыборкаИзРезультатаЗапроса - источник данных
// 	Период - Дата - период для получения данных
//  Организация - СправочникСсылка.Организации, Неопределено - период для получения данных
//  Ссылка - ДокументСсылка, Неопределено - ссылка на документ для получения данных
// Возвращаемое значение:
// 	Структура - Описание:
// * ЭтоВводОстатковВНА_2_4 - Булево -
// * ИспользуетсяУправлениеВНА_2_4 - Булево -
// * ИспользоватьУчетПрочихДоходовРасходовРегл - Булево -
// * ИспользоватьУчетПрочихДоходовРасходов - Произвольный -
// * ВариантОбособленногоУчетаТоваров - Произвольный - 
// * ОбособленныйУчетТоваровПоСделке - Произвольный - 
// * Сделка - Произвольный - 
// * ФормироватьВидыЗапасовПоПодразделениямМенеджерам - Произвольный -
// * ФормироватьВидыЗапасовПоСделкам - Произвольный -
// * ФИФОСкользящаяОценка - Булево -
// * УчитыватьСебестоимостьТоваровПоНазначениям - Булево -
// * УправленческийУчетОрганизаций - Булево -
// * ПартионныйУчетВерсии22 - Булево -
// * ПартионныйУчетВерсии21 - Булево, Неопределено -
// * ПартионныйУчетНеИспользуется - Булево -
// * ПартионныйУчетВерсии22Включен- Булево -
// * ДатаПереходаНаПартионныйУчетВерсии22 - Дата -
// 
Функция СформироватьСтруктуруПараметровЗапросаДляПроведения(Реквизиты, Период, Организация = Неопределено, Ссылка = Неопределено)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ПартионныйУчетНеИспользуется",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(Период));
	СтруктураПараметров.Вставить("ПартионныйУчетВерсии21",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(Период));
	СтруктураПараметров.Вставить("ПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Период));
		
	СтруктураПараметров.Вставить("ПартионныйУчетВерсии22Включен",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22());
	СтруктураПараметров.Вставить("ДатаПереходаНаПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());
	
	СтруктураПараметров.Вставить("УправленческийУчетОрганизаций",
		РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(Период));
	СтруктураПараметров.Вставить("ДатаНачалаВеденияУправленческогоУчетаОрганизаций",
		РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций());	

	СтруктураПараметров.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям",
		РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(НачалоМесяца(Период)));
	
	СтруктураПараметров.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Ложь);
	
	Если Организация <> Неопределено Тогда
		ТекущаяОрганизация = Организация;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Организация")
	 И ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		ТекущаяОрганизация = Реквизиты.Организация;
	Иначе
		ТекущаяОрганизация = Неопределено;
	КонецЕсли;
	
	Если Ссылка <> Неопределено Тогда
		ТекущаяСсылка = Ссылка;
	ИначеЕсли ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Ссылка") Тогда
		ТекущаяСсылка = Реквизиты.Ссылка;
	Иначе
		ТекущаяСсылка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("УчетнаяПолитикаФинансовогоУчета",
			ТекущаяОрганизация,
			Период);
		ПараметрыУчетнойПолитикиНДС = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНДС",
			ТекущаяОрганизация,
			Период);
		
		СтруктураПараметров.Вставить("ФИФОСкользящаяОценка",
			(ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка));
				
		СтруктураПараметров.Вставить("ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров",
			(ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров
				И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка));
		СтруктураПараметров.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС",
			(ПараметрыУчетнойПолитикиНДС <> Неопределено
				И ПараметрыУчетнойПолитикиНДС.РаздельныйУчетТоваровПоНалогообложениюНДС
				И ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров <> Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка));
		
		СтруктураПараметров.Вставить("УчетГотовойПродукцииПоПлановойСтоимости",
			(ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости));
		
		СтруктураПараметров.Вставить("КоэффициентПлановойСтоимости",
			?(ПараметрыУчетнойПолитики <> Неопределено
				И ПараметрыУчетнойПолитики.УчетГотовойПродукцииПоПлановойСтоимости, 1, 0));
		
		НастройкиУчетаНДС = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату("НастройкиУчетаНДС",
			ТекущаяОрганизация,
			Период);
		
		СтруктураПараметров.Вставить("ФормироватьНДСПредъявленныйПриВключенииВСтоимость",
			(НастройкиУчетаНДС <> Неопределено
				И НастройкиУчетаНДС.ФормироватьНДСПредъявленныйПриВключенииВСтоимость));
		
		СтруктураПараметров.Вставить("СписыватьНДСПоРасходамНеПринимаемымВНУ",
			(НастройкиУчетаНДС <> Неопределено
				И НастройкиУчетаНДС.СписыватьНДСПоРасходамНеПринимаемымВНУ));
	
	Иначе
		
		СтруктураПараметров.Вставить("ФИФОСкользящаяОценка", Ложь);
		СтруктураПараметров.Вставить("ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров", Ложь);
		СтруктураПараметров.Вставить("УчетГотовойПродукцииПоПлановойСтоимости", Ложь);
		СтруктураПараметров.Вставить("КоэффициентПлановойСтоимости", 0);
		СтруктураПараметров.Вставить("ФормироватьНДСПредъявленныйПриВключенииВСтоимость", Ложь);
		СтруктураПараметров.Вставить("СписыватьНДСПоРасходамНеПринимаемымВНУ", Ложь);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ФормироватьВидыЗапасовПоСделкам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	СтруктураПараметров.Вставить("ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "Сделка") Тогда
		СтруктураПараметров.Вставить("Сделка", Реквизиты.Сделка);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ОбособленныйУчетТоваровПоСделке") Тогда
		СтруктураПараметров.Вставить("ОбособленныйУчетТоваровПоСделке", Реквизиты.ОбособленныйУчетТоваровПоСделке);
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Реквизиты, "ВариантОбособленногоУчетаТоваров") Тогда
		СтруктураПараметров.Вставить("ВариантОбособленногоУчетаТоваров", Реквизиты.ВариантОбособленногоУчетаТоваров);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов"));
	СтруктураПараметров.Вставить("ИспользоватьУчетПрочихДоходовРасходовРегл", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходовРегл"));
	
	СтруктураПараметров.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	ЭтоВводОстатковВНА_2_4 = Ложь;
	//++ НЕ УТ
	Если ТипЗнч(ТекущаяСсылка) = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		// При переходе на учет 2.4 остатки вводятся на день раньше, чем дата начала учета 2.4.
		ИспользуетсяУправлениеВНА_2_4 = Истина;
		ЭтоВводОстатковВНА_2_4 = Истина;
	Иначе
		ИспользуетсяУправлениеВНА_2_4 = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Период);
	КонецЕсли;
	//-- НЕ УТ
	СтруктураПараметров.Вставить("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);
	СтруктураПараметров.Вставить("ЭтоВводОстатковВНА_2_4", ЭтоВводОстатковВНА_2_4);
	
	// Типы налогообложения НДС
	СтруктураПараметров.Вставить("ТипыНалогообложенияНДСНеУчитываетсяВСтоимости",
		УчетНДСУП.ТипыНалогообложенияНДСНеУчитываетсяВСтоимости());
	СтруктураПараметров.Вставить("ТипыНалогообложенияНДСУчитываетсяВСтоимости",
		УчетНДСУП.ВидыДеятельностиНДСУчитываетсяВСтоимости());
	
	СтруктураПараметров.Вставить("ТипыЗапасовСобственные", Перечисления.ТипыЗапасов.ТипыЗапасовСобственные());
	
	РасчетСебестоимостиЛокализация.ДополнитьПараметрыЗапросаДляПроведения(Реквизиты, Период, ТекущаяОрганизация, СтруктураПараметров);
	
	Возврат СтруктураПараметров;
	
КонецФункции


// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на модифицированность не проверяются.
// 
// Параметры:
//	ДокументОбъект - ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется).
//
// Возвращаемое значение:
//	Структура:
//	* ЕстьИзменения - Булево - признак наличия изменений в табличной части
//	* Дата - Дата, Неопределено - минимальное значение реквизита даты в измененных строка табличной части.
//
Функция ИзмененыТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей) Экспорт
	
	Результат = Новый Структура("ЕстьИзменения, Дата", Ложь, Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаДокумент = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|&ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|ВЫБРАТЬ
	|&ПоляСвернутые
	|ПОМЕСТИТЬ ВТИзменения
	|ИЗ
	|(ВЫБРАТЬ
	|&ПоляТаблицы
	|ИЗ
	|	ВТТабличнаяЧасть КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|&ПоляСМинусом
	|ИЗ
	|	&ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|) КАК Т
	|ГДЕ &Группировка
	|И &УсловиеОтбора
	|;
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(&Дата) КАК Результат
	|ИЗ
	|	ВТИзменения КАК Т
	|ГДЕ
	|	&Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|";
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
			 ИЛИ МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаПоляСвернутые = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсыСумма = "", "", ",
			|	") + СтрокаРесурсыСумма;
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		// Сформируем текст запроса и выполним запрос.
		Запрос.УстановитьПараметр("Таблица", ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		
		Запрос.Текст = ШаблонЗапроса;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", 	  СтрокаПоля);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСМинусом", 	  СтрокаПоляСМинусом);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокумента", СтрокаТаблицаДокумента);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвернутые", 	  СтрокаПоляСвернутые);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Группировка",  ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + СтрокаИзмерения));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеОтбора",  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", 			  СтрокаДата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Результат <> Null Тогда // найдены отличия
			
			Результат.ЕстьИзменения = Истина;
			
			Если ТипЗнч(Выборка.Результат) = Тип("Дата") Тогда
				Результат.Дата = ?(Результат.Дата = Неопределено, Выборка.Результат, Мин(Результат.Дата, Выборка.Результат));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает в документе и его движениях признак того, что документ проводится при выполнении расчета партий/себестоимости.
//
Процедура УстановитьПризнакВыполненияРасчетаПартийИСебестоимости(ДокументОбъект) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	Для Каждого Движение Из ДокументОбъект.Движения Цикл
		Движение.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того, что запрос формирования движений документа вызван из механизма партионного учета.
// 
// Параметры:
// 	Запрос - Запрос -
// Возвращаемое значение:
// 	Булево - признак расчета себестоимости
//
Функция ФормированиеТаблицДокументаПриРасчетеПартийИСебестоимости(Запрос) Экспорт
	
	Возврат Запрос.Параметры.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());
	
КонецФункции

#КонецОбласти

#Область ПроцедурыВызываемыеИзОтчетов

// При формировании отчета проверяет актуальность расчета партий и при необходимости запускает расчет партий в фоновом задании.
// Также в шапку отчета выводится информация о текущем состоянии расчета партий.
// Параметры запуска расчета партий помещаются в КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.
//
// Параметры:
//	ДокументРезультат   - ТабличныйДокумент - табличный документ отчета, вызывающего проверку.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку.
//	ИмяПоляОрганизация  - Строка - имя поля реквизита организации.
//
Процедура АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек, ИмяПоляОрганизация = "Организация") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРасчета = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ПараметрыРасчета.Вставить("РасчетПартийИСебестоимости", Ложь);
	ПараметрыРасчета.Вставить("НачалоПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("КонецПериодаРасчета", 		Неопределено);
	ПараметрыРасчета.Вставить("МассивОрганизаций", 			Неопределено);
	ПараметрыРасчета.Вставить("КоличествоДокументов", 		0);
	ПараметрыРасчета.Вставить("НомерЗадания", 				РегистрыСведений.ЗаданияКРасчетуСебестоимости.ПолучитьНомерЗадания());
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	ЗначениеПараметраОтчета = ПараметрПериодОтчета.Значение; //СтандартныйПериод
	ГраницаРасчета 		 = ?(ПараметрПериодОтчета.Использование, ЗначениеПараметраОтчета.ДатаОкончания, ТекущаяДатаСеанса());
	
	// Проверим дату запрета изменений.
	ТаблицаДанных = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки(); // ТаблицаЗначений
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.Дата   = НачалоМесяца(ГраницаРасчета);
	НоваяСтрока.Раздел = "РегламентныеОперации";
	
	ИзмененияЗапрещены = ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ТаблицаДанных);
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено
	 И НЕ ИзмененияЗапрещены
	 И Константы.АктуализироватьДанныеПриФормированииОтчетов.Получить()
	 И РасчетСебестоимостиПовтИсп.ПартионныйУчетВключен(НачалоМесяца(ГраницаРасчета)) Тогда
		
		ПараметрыРасчета.МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);
		
		СхемаРасчета = СхемаРасчетаПартий(ГраницаРасчета, ПараметрыРасчета.МассивОрганизаций);
		
		Если СхемаРасчета.Количество() > 0 Тогда
			
			ПараметрыРасчета.НачалоПериодаРасчета 		= НачалоМесяца(СхемаРасчета[0].Дата);
			ПараметрыРасчета.КонецПериодаРасчета  		= КонецМесяца(ГраницаРасчета);
			
			ПараметрыРасчета.МассивОрганизаций 	  		= ОбщегоНазначения.СкопироватьРекурсивно(
				СхемаРасчета[СхемаРасчета.Количество()-1].Организации); // в последней строке есть все организации, по которым будет выполнен расчет
			
			ПараметрыРасчета.КоличествоДокументов 		= КоличествоНеактуальныхДокументов(ПараметрыРасчета);
			
			АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.ПроверитьНаличиеАктивныхРасчетов(ПараметрыРасчета.МассивОрганизаций);
			
			Если НЕ АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
				ПараметрыРасчета.РасчетПартийИСебестоимости = РасчетСебестоимости.РассчитатьФоновымЗаданием(
					ПараметрыРасчета.КонецПериодаРасчета,
					ПараметрыРасчета.МассивОрганизаций);
			КонецЕсли;
			
			ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета, АктивныеРасчеты.ЕстьАктивныеРасчеты);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что расчета партий, запущенный при формировании отчета, завершен.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры запуска расчета партий;
//		ключи структуры см. в АктуализироватьПартииДляОтчетов() и в ОтчетыУТКлиентПереопределяемый.ВосстановитьОффлайновыеРасчеты().
//
// Возвращаемое значение:
//	Булево - признак окончания расчета.
//
Функция ПартииДляОтчетовАктуализированы(ПараметрыРасчета) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
	 ИЛИ НЕ ПараметрыРасчета.Свойство("КонецПериодаРасчета")
	 ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРасчета.КонецПериодаРасчета) Тогда
		Возврат Истина; // расчет не выполнялся
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Очередь.Месяц, МЕСЯЦ)) КАК НачалоПериодаРасчета
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Очередь
	|ГДЕ
	|	Очередь.НомерЗадания <= &НомерЗадания
	|	И Очередь.Организация В (&МассивОрганизаций)
	|ИМЕЮЩИЕ 
	|	НЕ (МИНИМУМ(Очередь.Месяц) ЕСТЬ NULL)
	|	И МИНИМУМ(НАЧАЛОПЕРИОДА(Очередь.Месяц, МЕСЯЦ)) <= &КонецПериодаРасчета
	|";
	
	Запрос.УстановитьПараметр("КонецПериодаРасчета", ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	 ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НомерЗадания", 		 ПараметрыРасчета.НомерЗадания);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции


// Возвращает количество документов, измененных после прошлого закрытия месяца.
//
// Возвращаемое значение:
//	Число - 
//
Функция КоличествоНеактуальныхДокументов(ПараметрыРасчета)
	
	КоличествоДокументов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК Количество
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Период
	|	И (&ПоВсемОрганизациям ИЛИ Задания.Организация В (&МассивОрганизаций))";
	
	Запрос.УстановитьПараметр("Период", 	  		ПараметрыРасчета.КонецПериодаРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", 	ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(ПараметрыРасчета.МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;
	
	Возврат КоличествоДокументов;
	
КонецФункции

// Возвращает массив организаций, по которым будет строиться отчет.
// Распознает в отборах отчета только одно условие отбора по организации с видами сравнения "равно", "в списке", "не равно", "не в списке".
//
Функция ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация = "Организация")
	
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат Справочники.Организации.ДоступныеОрганизации(Истина);
	КонецЕсли;
	
	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.Равно);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	
	ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоляОрганизация, ОперацииСравнения);
	ОтборРегистратор = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, "Регистратор", ОперацииСравнения);
	
	Если ОтборОрганизация = Неопределено Тогда
		
		Если ОтборРегистратор = Неопределено Тогда
			
			ПоВсемОрганизациям = Истина;
			МассивОрганизаций = Новый Массив;
			
		Иначе
			
			// При контекстном выполнении отчетов устанавливается отбор по регистратору, без отбора по организации.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Организация КАК Организация
			|ИЗ
			|	РегистрСведений.РеестрДокументов КАК Т
			|ГДЕ
			|	Т.Ссылка В(&Регистраторы)
			|	И Т.Ссылка <> НЕОПРЕДЕЛЕНО";
			
			Запрос.УстановитьПараметр("Регистраторы", ОбщегоНазначенияУТКлиентСервер.Массив(ОтборРегистратор));
			
			МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
			ПоВсемОрганизациям = НЕ ЗначениеЗаполнено(МассивОрганизаций);
			
		КонецЕсли;
		
	Иначе
		
		ПоВсемОрганизациям = Ложь;
		МассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);
		
	КонецЕсли;
	
	ОперацииСравнения = Новый Массив;
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеРавно);
	ОперацииСравнения.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	
	ОтборОрганизация = ОтчетыУТКлиентСервер.ПолучитьЗначениеОтбора(КомпоновщикНастроек, ИмяПоляОрганизация, ОперацииСравнения);
	
	Если ОтборОрганизация = Неопределено Тогда
		МассивИсключаемыхОрганизаций = Новый Массив;
	Иначе
		МассивИсключаемыхОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", 		  ПоВсемОрганизациям);
	Запрос.УстановитьПараметр("МассивОрганизаций", 			  МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивИсключаемыхОрганизаций", МассивИсключаемыхОрганизаций);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию",
		ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Т
	|ГДЕ
	|	(Т.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|		ИЛИ &ИспользоватьУправленческуюОрганизацию)
	|	И (Т.Ссылка В (&МассивОрганизаций)
	|			ИЛИ &ПоВсемОрганизациям)
	|	И НЕ Т.Ссылка В (&МассивИсключаемыхОрганизаций)";
	
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Организации;
	
КонецФункции

// Выводит в табличный документ предупреждение, если отчет формируется по неактуальным данным.
//
Процедура ВывестиОписаниеАктуальностиРасчета(ДокументРезультат, ПараметрыРасчета, ЕстьАктивныеРасчеты)
	
	ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Расчет партий выполнен до %1. Данные отчета могут быть не актуальны.';
			|en = 'Lot calculation was performed to %1. Report data may not be relevant.'"),
		Формат(КонецМесяца(ПараметрыРасчета.НачалоПериодаРасчета - 1), "ДЛФ=D"));
	
	Если ЕстьАктивныеРасчеты Тогда
		
		ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
			+ НСтр("ru = 'В настоящий момент есть активный сеанс закрытия месяца, по окончании которого Вам будет нужно переформировать отчет.';
					|en = 'At the moment, there is an active monthly closing session. After its completion you will need to rebuild the report.'")
		
	Иначе
		
		Если ПараметрыРасчета.РасчетПартийИСебестоимости Тогда
			
			ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Запущено фоновое задание расчета партий до %1.
						|После окончания расчета Вам будет предложено переформировать отчет.';
						|en = 'Background job for calculating lots up to %1 is started.
						|You will be prompted to rebuild the report after the calculation.'"),
					Формат(ПараметрыРасчета.КонецПериодаРасчета, "ДЛФ=D"));
				
			Если ЗначениеЗаполнено(ПараметрыРасчета.КоличествоДокументов) Тогда
				ТекстПредупреждения = ТекстПредупреждения + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '(требуется распределить партии для %1)';
							|en = '(allocate lots for %1)'"),
						ОбщегоНазначенияУТ.ЧислоДокументовПрописью(ПараметрыРасчета.КоличествоДокументов));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПредупреждение = Новый ТабличныйДокумент;
	ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
	
	ОбластьПредупреждение.Текст 	 = ТекстПредупреждения;
	ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	ДокументРезультат.ВставитьОбласть(
		ОбластьПредупреждение,
		ДокументРезультат.Область(1,1,1,1),
		ТипСмещенияТабличногоДокумента.ПоВертикали);
	
КонецПроцедуры

// Выводит в табличный документ предупреждение, если выполнено предварительное закрытие месяца.
//
// Параметры:
//	ДокументРезультат   - ТабличныйДокумент - табличный документ отчета, вызывающего проверку.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку.
//	ИмяПоляОрганизация  - Строка - имя поля реквизита организации.
//
Процедура ДобавитьПредупреждениеОПредварительномЗакрытииМесяца(ДокументРезультат, КомпоновщикНастроек, ИмяПоляОрганизация = "Организация") Экспорт
	
	ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
	ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
	ДатаОкончания		 = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаОкончания, ТекущаяДатаСеанса());
	
	МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ВыполненоПредварительноеЗакрытие
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК Расчет
	|ГДЕ
	|	Расчет.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И Расчет.Проведен
	|	И Расчет.Организация В (&МассивОрганизаций)
	|	И Расчет.РежимЗакрытияМесяца = ЗНАЧЕНИЕ(Перечисление.РежимыЗакрытияМесяца.ПредварительноеЗакрытие)
	|");
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоМесяца(ДатаОкончания));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончания));
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ТекстПредупреждения = НСтр("ru = 'В отчет выведены результаты предварительного закрытия месяца. 
			|После выполнения окончательного закрытия месяца результат может измениться.';
			|en = 'The report contains the results of the preliminary month-end closing.
			|The result may change after the final month-end closing.'");
		
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		
		ОбластьПредупреждение.Текст 	 = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		
		ДокументРезультат.ВставитьОбласть(
			ОбластьПредупреждение,
			ДокументРезультат.Область(1,1,1,1),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
		
КонецПроцедуры

// Процедура вывода предупреждения об использовании устаревших полей в табличный документ.
//
// Параметры:
//	ДокументРезультат - ТабличныйДокумент - основной табличный документ отчета
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек отчета, вызывающего проверку.
//	ПроверяемыеПоля - Массив - массив строк с именами полей
//	
Процедура ДобавитьПредупреждениеОбИспользованииУстаревшихПолей(ДокументРезультат, КомпоновщикНастроек, ПроверяемыеПоля) Экспорт
	
	ТекстИспользуемыеПоля = "";
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Поле) Тогда
			Если ПустаяСтрока(ТекстИспользуемыеПоля) Тогда
				ТекстИспользуемыеПоля = Поле;
			Иначе
				ТекстИспользуемыеПоля = ТекстИспользуемыеПоля + ", " + Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстИспользуемыеПоля) Тогда
		ТекстПредупреждения = НСтр("ru = 'Поля ""%1"" устарели, необходимо установить Стандартные настройки отчета.';
									|en = 'The ""%1"" fields are outdated. Apply the standard report settings.'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПредупреждения,
					ТекстИспользуемыеПоля);
					
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1, 1, 1, 1);
			
			ОбластьПредупреждение.Текст 	 = СокрЛП(ТекстПредупреждения);
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			
			ДокументРезультат.ВставитьОбласть(
				ОбластьПредупреждение,
				ДокументРезультат.Область(1, 1, 1, 1),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

КонецПроцедуры

// Подменяет путь в выбранном поле компоновки данных
//
// Параметры:
//	МассивИспользуемыхПолейКД - Массив из ВыбранноеПолеКомпоновкиДанных - Массив для заполнения выбранными полями в КД.
//	ИсходныйПуть - Строка - имя исходного пути поля компоновки данных.
//	КонечныйПуть - Строка - имя конечного пути поля компоновки данных.
//
Процедура ПодменитьПутьВВыбранномПолеКомпоновкиДанных(МассивИспользуемыхПолейКД, ИсходныйПуть, КонечныйПуть) Экспорт
	
	ПолеКотороеНеобходимоПодменить = Новый ПолеКомпоновкиДанных(ИсходныйПуть);
	ПолеНаКотороеНеобходимоПодменить = Новый ПолеКомпоновкиДанных(КонечныйПуть);
	
	Для Каждого Поле Из МассивИспользуемыхПолейКД Цикл
		Если Поле.Поле = ПолеКотороеНеобходимоПодменить Тогда
			Поле.Поле = ПолеНаКотороеНеобходимоПодменить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив выбранными полями в настройках компоновки данных
//
// Параметры:
//	ЭлементСтруктуры - НастройкиКомпоновкиДанных - настройки которые будут использованы в компоновщике макета.
//	МассивПолей - Массив из ВыбранноеПолеКомпоновкиДанных - Массив для заполнения выбранными полями в КД.
//	ВсеПоля - Булево - Если Истина то будут дубавлены все выбранные поля,
//		если Ложь то только с галочкой Использование (по умолчанию: Ложь).
//
Процедура ДобавитьВыбранныеПоляКомпоновкиДанныхВМассив(ЭлементСтруктуры, МассивПолей, ВсеПоля = Ложь) Экспорт
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ДобавитьВыбранныеПоляКомпоновкиДанныхВМассив(Элемент.Элементы, МассивПолей, ВсеПоля);
		ИначеЕсли ТипЗНЧ(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
			И (ВсеПоля Или Элемент.Использование) Тогда
			
			МассивПолей.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив организаций, по которым есть выручка за указанный период,
// но метод оценки стоимости отличается от "ФИФО (скользящая)".
//
// Параметры:
//	НачалоПериода - Дата - начало периода для получения движений
//	КонецПериода - Дата - конец периода для получения движений.
//
Функция ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода, КомпоновщикНастроек, ИмяПоляОрганизация)
	
	МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.Имя,
		Запрос.МенеджерВременныхТаблиц,
		НачалоПериода,
		"ВТУчетнаяПолитикаФинансовогоУчета");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Аналитика.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизацииСДвижениями
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &КонецПериода, ,) КАК Выручка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО Аналитика.Ссылка = Выручка.АналитикаУчетаПоПартнерам
	|ГДЕ
	|	Аналитика.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииСДвижениями КАК ОрганизацииСДвижениями
	|		ПО Т.Ссылка = ОрганизацииСДвижениями.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаФинансовогоУчета КАК УчетныеПолитикиОрганизаций
	|		ПО Т.Ссылка = УчетныеПолитикиОрганизаций.Организация
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.МетодОценкиСтоимостиТоваров <> ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИсключенныхОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивИсключенныхОрганизаций;
	
КонецФункции

// Выводит текст предупреждения в шапку отчета.
//
Процедура ДобавитьПредупреждениеОбОсобенностяхФормированияОтчета(ДокументРезультат, КомпоновщикНастроек, ПроверяемыеПоля, АктуализироватьПартии = Истина, ИмяПоляОрганизация = "Организация") Экспорт
	
	ИспользуемыеПоля = Новый Массив;
	ТекстИспользуемыеПоля = "";
	Для Каждого Поле Из ПроверяемыеПоля Цикл
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(КомпоновщикНастроек, Поле) Тогда
			ИспользуемыеПоля.Добавить(Поле);
			Если ПустаяСтрока(ТекстИспользуемыеПоля) Тогда
				ТекстИспользуемыеПоля = Поле;
			Иначе
				ТекстИспользуемыеПоля = ТекстИспользуемыеПоля + ", " + Поле;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПоля.Количество() > 0 Тогда
	
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Период");
		ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
		НачалоПериода = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
		КонецПериода = ?(ПараметрПериодОтчета.Использование, ПериодОтчета.ДатаОкончания, ТекущаяДатаСеанса());
		
		МассивИсключенныхОрганизаций = ОрганизацииБезФИФОСкользящая(НачалоПериода, КонецПериода, КомпоновщикНастроек, ИмяПоляОрганизация);
		
		ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода);
		Если НЕ ПартионныйУчетВерсии22 Тогда
			
			// Отчет не сформирован - сообщим о причинах.
			ДатаПереходаНаПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
			
			Если НЕ ЗначениеЗаполнено(ДатаПереходаНаПартионныйУчетВерсии22) Тогда
				Если ИспользуемыеПоля.Количество() = 1 Тогда
					ТекстПредупреждения = 
						НСтр("ru = 'Поле ""%1"" заполняется только при включенном партионном учете версии 2.2.';
							|en = 'The ""%1"" field is filled in only when lot accounting 2.2 is enabled.'");
				Иначе
					ТекстПредупреждения = 
						НСтр("ru = 'Поля ""%1"" заполняются только при включенном партионном учете версии 2.2.';
							|en = 'The ""%1"" fields are filled in only when lot accounting 2.2 is enabled.'");
				КонецЕсли;
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПредупреждения,
					ТекстИспользуемыеПоля);
			Иначе
				Если ИспользуемыеПоля.Количество() = 1 Тогда
					ТекстПредупреждения = 
						НСтр("ru = 'Поле ""%1"" заполняется только в периодах использования партионного учета версии 2.2.
						|Дата перехода на партионный учет версии 2.2: %2';
						|en = 'The ""%1"" field is filled in only in periods when lot accounting 2.2 is enabled.
						|Date of migration to lot accounting 2.2: %2'");
				Иначе
					ТекстПредупреждения = 
						НСтр("ru = 'Поля ""%1"" заполняются только в периодах использования партионного учета версии 2.2.
						|Дата перехода на партионный учет версии 2.2: %2';
						|en = 'The ""%1"" fields are filled in only in periods when lot accounting 2.2 is enabled.
						|Date of migration to lot accounting 2.2: %2'");
				КонецЕсли;	
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстПредупреждения,
					ТекстИспользуемыеПоля,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаПереходаНаПартионныйУчетВерсии22));
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(МассивИсключенныхОрганизаций) Тогда
			
			Если ИспользуемыеПоля.Количество() = 1 Тогда
				ТекстПредупреждения =
					НСтр("ru = 'Поле ""%1"" не заполняется для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2';
						|en = 'The ""%1"" field is required for companies which have a cost evaluation method different from ""FIFO (rolling valuation)"": %2'");
			Иначе
				ТекстПредупреждения =
					НСтр("ru = 'Поля ""%1"" не заполняются для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %2';
						|en = 'The ""%1"" fields are required for companies which have a cost evaluation method different from ""FIFO (rolling valuation)"": %2'");
			КонецЕсли;
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПредупреждения,
				ТекстИспользуемыеПоля,
				ПредставлениеОрганизаций(МассивИсключенныхОрганизаций, ", "));
			
		Иначе
			
			// Отчет сформирован без особенностей.
			ТекстПредупреждения = "";
			
		КонецЕсли;
		
		Если ПартионныйУчетВерсии22 Тогда
			АктуализироватьПартииДляОтчетов(ДокументРезультат, КомпоновщикНастроек, ИмяПоляОрганизация);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ТаблицаПредупреждение = Новый ТабличныйДокумент;
			ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
			
			ОбластьПредупреждение.Текст 	 = СокрЛП(ТекстПредупреждения);
			ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			
			ДокументРезультат.ВставитьОбласть(
				ОбластьПредупреждение,
				ДокументРезультат.Область(1,1,1,1),
				ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

//++ НЕ УТ

// Возвращает текст предупреждения об организациях, по которым невозможно формирование отчета.
//
// Параметры:
//	НачалоПериода - Дата - Дата начала анализа наличия выпусков ГП/ПФ.
//	КонецПериода - Дата - Дата окончания анализа наличия выпусков ГП/ПФ.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек СКД,
//		в отборе которого ожидается элемент отбора по организациям.
//	ИмяПоляОрганизация - Строка - Не обязательный параметр, указывает имя элемента отбора организации
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - Не обязательный параметр,
//		в случае если массив передан и заполнен организациями, анализ наличия выпусков ГП/ПФ производится только по ним.
//	
// Возвращаемое значение:
//	Строка - Строка предупреждения
//
Функция ТекстПредупрежденияНеподдерживаемыеОрганизации(НачалоПериода, КонецПериода, 
	КомпоновщикНастроек, ИмяПоляОрганизация = "Организация", МассивОрганизаций = Неопределено) Экспорт
	
	МассивИсключенныхОрганизаций = ОрганизацииСВыпускомПродукцииБезФИФОСкользящая(НачалоПериода, КонецПериода,
		КомпоновщикНастроек, ИмяПоляОрганизация, МассивОрганизаций);
	
	ПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоПериода);
	Если НЕ ПартионныйУчетВерсии22 Тогда
		ДатаПереходаНаПартионныйУчетВерсии22 = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
		Если НЕ ЗначениеЗаполнено(ДатаПереходаНаПартионныйУчетВерсии22) Тогда
			ТекстПредупреждения = 
				НСтр("ru = 'Фактические данные доступны только при включенном партионном учете версии 2.2.';
					|en = 'Actual data is available only when lot accounting 2.2 is enabled.'");
		Иначе
			ТекстПредупреждения = 
				НСтр("ru = 'Фактические данные доступны только в периодах использования партионного учета версии 2.2.
					|Дата перехода на партионный учет версии 2.2: %1';
					|en = 'Actual data is available only when lot accounting 2.2 is enabled. 
					|Date of migration to lot accounting 2.2: %1'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстПредупреждения,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ДатаПереходаНаПартионныйУчетВерсии22));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(МассивИсключенныхОрганизаций) Тогда
		
		ТекстПредупреждения =
			НСтр("ru = 'Невозможно получить фактические данные для организаций, имеющих метод оценки стоимости, отличный от ""ФИФО (скользящая оценка)"": %1';
				|en = 'Cannot receive actual data for companies with a cost evaluation method different from ""FIFO (rolling valuation)"": %1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			ПредставлениеОрганизаций(МассивИсключенныхОрганизаций, ", "));
	Иначе
		ТекстПредупреждения = "";
	КонецЕсли;	
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Возвращает массив организаций, по которым есть выпуск за указанный период,
// но метод оценки стоимости отличается от "ФИФО (скользящая)".
//
// Параметры:
//	НачалоПериода - Дата - начало периода для получения движений.
//	КонецПериода - Дата - конец периода для получения движений.
//	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек СКД,
//		в отборе которого ожидается элемент отбора по организациям.
//	ИмяПоляОрганизация - Строка - Не обязательный параметр, указывает имя элемента отбора организации
//	МассивОрганизаций - Массив из СправочникСсылка.Организации - в случае если массив передан и заполнен организациями,
//		анализ наличия выпсуков ГП/ПФ производится только по ним.
//
Функция ОрганизацииСВыпускомПродукцииБезФИФОСкользящая(НачалоПериода, КонецПериода, 
	КомпоновщикНастроек, ИмяПоляОрганизация, Знач МассивОрганизаций)
	
	Если МассивОрганизаций = Неопределено Тогда
		// В этом условии не нужно проверять массив на пустое количество! Если в отчете возвращается пустой результат,
		// тогда массив окажется пустым, если в отчете нет отбора по организациям,
		// тогда будут проверены все организации базы и пользователь может получить сообщение про учет по средней, в какой-либо организации,
		// у пользователя может сложится ложное впечатление что отчет пустой из-за этой ошибки.
		МассивОрганизаций = ОрганизацииДляОтбораИзНастроекОтчета(КомпоновщикНастроек, ИмяПоляОрганизация);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.Имя,
		Запрос.МенеджерВременныхТаблиц,
		НачалоПериода,
		"ВТУчетнаяПолитикаФинансовогоУчета");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизацииСДвижениями
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции.Обороты(&НачалоПериода, &КонецПериода, , Организация В (&МассивОрганизаций)) КАК ВыпускПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизацииСДвижениями КАК ОрганизацииСДвижениями
	|		ПО Т.Ссылка = ОрганизацииСДвижениями.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетнаяПолитикаФинансовогоУчета КАК УчетныеПолитикиОрганизаций
	|		ПО Т.Ссылка = УчетныеПолитикиОрганизаций.Организация
	|ГДЕ
	|	УчетныеПолитикиОрганизаций.МетодОценкиСтоимостиТоваров <> ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
	|	И УчетныеПолитикиОрганизаций.МетодОценкиСтоимостиТоваров <> ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивИсключенныхОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивИсключенныхОрганизаций;
	
КонецФункции

//-- НЕ УТ

// Возвращает список хозяйственных операций перемещений.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственные операции перемещений
Функция ХозяйственныеОперацииПеремещений() Экспорт
	
	СписокОперацийПеремещения = Новый Массив;
	
	СписокОперацийПеремещения = Новый Массив();
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтХранителя);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаВПроизводство);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуПодразделениями);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства);
	//++ Устарело_Переработка24
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПереработчику);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика);
	//-- Устарело_Переработка24
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5);
	СписокОперацийПеремещения.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика2_5);
	
	Возврат СписокОперацийПеремещения;
	
КонецФункции

// Ограничивает использование полей СКД    
//
// Параметры:
//    МассивНаименованийПолей - Массив из Строка - массив полей у которых необходимо ограничить использование
//    СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - Схема компоновки данных, к полям которой нужно ввести ограничение использования
//    КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, у которого необходимо обновить настройки после ограничения использования
//    ИмяНабораДанных - Строка - Имя набора данных в схеме компоновки данных
//    ВсеНаборыДанных - Булево - Если необходимо найти и ограничить поля во всех наборах данных, включая вычислияемые поля, то параметр установить в Истина
//
Процедура ОграничитьИспользованиеПолейСКД(МассивНаименованийПолей, СхемаКомпоновкиДанных, КомпоновщикНастроек,
	ИмяНабораДанных = "", ВсеНаборыДанных = Ложь) Экспорт
	
	Если ИмяНабораДанных = "" И Не ВсеНаборыДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеНаборыДанных Тогда
		Для Каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			УстановитьОграничениеИспользованияУНабораДанных(НаборДанных.Поля, МассивНаименованийПолей);
		КонецЦикла;
		УстановитьОграничениеИспользованияУНабораДанных(СхемаКомпоновкиДанных.ВычисляемыеПоля, МассивНаименованийПолей);
	Иначе
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти(ИмяНабораДанных);
		Если НаборДанных = Неопределено Тогда
			Возврат;
		КонецЕсли;		
		ПоляНабораДанных = НаборДанных.Поля;
		УстановитьОграничениеИспользованияУНабораДанных(ПоляНабораДанных, МассивНаименованийПолей);
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
КонецПроцедуры

Процедура УстановитьОграничениеИспользованияУНабораДанных(ПоляНабораДанных, МассивНаименованийПолей)
	Для Каждого ИмяПоля Из МассивНаименованийПолей Цикл
		ПолеНабораДанных = ПоляНабораДанных.Найти(ИмяПоля);
		Если ПолеНабораДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПолеНабораДанных.ОграничениеИспользования.Группировка = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Поле = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Порядок = Истина;
		ПолеНабораДанных.ОграничениеИспользования.Условие = Истина;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыВызываемыеИзОбменов

// При получении из периферийного узла данных, требующих перерасчета себестоимости, добавляет запись в регистр ЗаданияКРасчетуСебестоимости.
//
// Параметры:
//	ПолученныеДанные - Произвольный - это параметр ЭлементДанных одноименного события плана обмена.
//
// Возвращаемое значение:
//	Булево - признак того, что ПолученныеДанные - это данные, относящиеся к механизму расчета себестоимости.
//
Функция СоздатьЗаданиеКРасчетуСебестоимостиПриОбменеДанными(ПолученныеДанные) Экспорт
	
	Попытка
		МетаданныеПолученныхДанных = ПолученныеДанные.Метаданные();
	Исключение
		Возврат Ложь; // у этого объекта нет метода для получения его метаданных - объект не нужно обрабатывать
	КонецПопытки;
	
	Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаданныеПолученныхДанных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Получим описание входящих данных механизмов расчета
	ВходящиеДанные = Новый Соответствие;
	РасчетСебестоимостиКорректировкаСтоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	РасчетСебестоимости.ВходящиеДанныеМеханизма(ВходящиеДанные, Истина);
	
	Если ВходящиеДанные.Получить(МетаданныеПолученныхДанных) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Только изменение регистра накопления, являющегося исходными данными для расчета,
	// приводит к необходимости перерасчета партий и себестоимости.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если МетаданныеПолученныхДанных.Измерения.Найти("Организация") <> Неопределено Тогда
		ИмяПоляОрганизации = "Организация";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ОрганизацияВладелец") <> Неопределено Тогда
		ИмяПоляОрганизации = "ОрганизацияВладелец";
		ИмяКонтейнераОрганизации = ""; // организация хранится в реквизите набора
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
		ИмяПоляОрганизации = "ВидЗапасов";
		ИмяКонтейнераОрганизации = "Справочник.ВидыЗапасов"; // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "Ссылка";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	ИначеЕсли МетаданныеПолученныхДанных.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено Тогда
		ИмяПоляОрганизации = "АналитикаУчетаПоПартнерам";
		ИмяКонтейнераОрганизации = "РегистрСведений.АналитикаУчетаПоПартнерам";  // организация хранится "вне набора"
		ИмяПоляСвязиВКонтейнере = "КлючАналитики";
		ИмяПоляОрганизацииВКонтейнере = "Организация";
	Иначе
		Возврат Ложь; // невозможно определить организацию из данных регистра
	КонецЕсли;
	
	ТаблицаНабора = ПолученныеДанные.Выгрузить(, "Период," + ИмяПоляОрганизации); // ТаблицаЗначений
	ТаблицаНабора.Свернуть("Период," + ИмяПоляОрганизации);
	
	Запрос.УстановитьПараметр("Т",	    ТаблицаНабора);
	Запрос.УстановитьПараметр("Ссылка", ПолученныеДанные.Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|	Т.ИмяПоляОрганизации          КАК Организация
	|ПОМЕСТИТЬ ВТПолученныеДанные
	|ИЗ
	|	&Т КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляОрганизации", ИмяПоляОрганизации);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период,
	|	Т.Организация
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Период 	  КАК Период,
	|		Т.Организация КАК Организация
	|	ИЗ
	|		ВТПолученныеДанные КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|		Т.ИмяПоляОрганизации          КАК Организация
	|	ИЗ
	|		ИмяПолученныхДанных КАК Т
	|	ГДЕ
	|		Т.Регистратор = &Ссылка
	|	) КАК Т
	|";
	
	Если ЗначениеЗаполнено(ИмяКонтейнераОрганизации) Тогда
		
		// Организация хранится не в поле объекта, а в каком-то другом месте - с ним надо сделать соединение.
		ШаблонТекстаЗапроса = "(" + СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТПериоды", "") + ")";
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Период КАК Период,
		|	Контейнер.ИмяПоляОрганизацииВКонтейнере КАК Организация
		|ПОМЕСТИТЬ ВТПериоды
		|ИЗ
		|	ШаблонТекстаЗапроса КАК Т
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяКонтейнераОрганизации КАК Контейнер
		|ПО Т.Организация = Контейнер.ИмяПоляСвязиВКонтейнере
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ШаблонТекстаЗапроса", ШаблонТекстаЗапроса);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|" + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Период 	  КАК Месяц,
	|	Т.Организация КАК Организация,
	|	&Ссылка 	  КАК Документ
	|ИЗ
	|	ВТПериоды КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК ЗаданияКРасчетуСебестоимости
	|			ПО Т.Период = НАЧАЛОПЕРИОДА(ЗаданияКРасчетуСебестоимости.Месяц, МЕСЯЦ)
	|			 И Т.Организация = ЗаданияКРасчетуСебестоимости.Организация
	|			 И ЗаданияКРасчетуСебестоимости.Документ = &Ссылка
	|ГДЕ
	|	ЗаданияКРасчетуСебестоимости.НомерЗадания ЕСТЬ NULL
	|   И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПолученныхДанных", 			"РегистрНакопления." + МетаданныеПолученныхДанных.Имя);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяКонтейнераОрганизации",  		ИмяКонтейнераОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляСвязиВКонтейнере",  		ИмяПоляСвязиВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляОрганизацииВКонтейнере",  ИмяПоляОрганизацииВКонтейнере);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляОрганизации",  			ИмяПоляОрганизации);
	
	РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
	Возврат Истина; // данные обработаны успешно
	
КонецФункции

#КонецОбласти


#Область ПроцедурыЭтапа0_ПодготовкаКРасчету

// Заполняет вид ценности в ключах аналитики учета партий и создает временную таблицу ВТАналитикиПартийСВидомЦенности.
//
Процедура СформироватьАналитикиПартийСВидомЦенности(ПараметрыРасчета, ИмяИсходнойТаблицы = "ВТОстаткиПартийПредварительная") Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаПартий,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаФинансовогоУчета,
	|	Ключи.Поставщик,
	|	Ключи.Контрагент,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	Ключи.СтавкаНДС,
	|	Т.ВидЦенности,
	|	0 КАК КодСтроки
	|ПОМЕСТИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
	|ИЗ
	|	ВТОстаткиПартийПредварительная КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК Ключи
	|		ПО Т.АналитикаУчетаПартий = Ключи.Ссылка
	|ГДЕ
	|	Ключи.ВидЦенности <> Т.ВидЦенности
	|	ИЛИ Ключи.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|	ИЛИ Ключи.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НачалоПериода КАК Дата,
	|	Т.ГруппаФинансовогоУчета,
	|	Т.Поставщик,
	|	Т.Контрагент,
	|	Т.НалогообложениеНДС,
	|	Т.СтавкаНДС,
	|	Т.ВидЦенности,
	|	Т.КодСтроки
	|ИЗ
	|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
	|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
	|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
	|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
	|		 И Т.НалогообложениеНДС 	= АналитикаПартий.НалогообложениеНДС
	|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
	|		 И Т.ВидЦенности 			= АналитикаПартий.ВидЦенности
	|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
	|ГДЕ
	|	ЕСТЬNULL(АналитикаПартий.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка))
	|		= ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОстаткиПартийПредварительная", ИмяИсходнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать(); // получим аналитики учета партий с некорректным видом ценности
	Пока Выборка.Следующий() Цикл
		
		// Вид ценности в ключе аналитики, по которому есть остатки "старых" партий (из партионных регистров),
		// по всей видимости будет не заполнен.
		// В то же время, при формировании остатков "новых" партий (в регистре себестоимости),
		// мы знаем к какому именно виду ценности относятся эти остатки.
		// Поэтому, если вид ценности в ключе аналитики "старых" остатков не совпадает с видом ценности "новых" остатков,
		// то ключ аналитики "новых" остатков нельзя брать из "старых" остатков - его надо заменить.
		// Аналогичная ситуация и с реквизитами "ГруппаФинансовогоУчета" и "НалогообложениеНДС" - они должны быть пустыми,
		// но в "старых" ключах они скорее всего будут заполнены.
		// При этом, подходящий ключ для "новых" остатков уже может существовать в ИБ:
		// - до выполнения этого кода (при закрытии месяца) в ИБ добавлялись/изменялись документы
		// - при проведении этих документов формировались ключи аналитики с заполненным видом ценности
		// - эти ключи могут оказаться подходящими для "новых" остатков
		// Создадим только ключи, отсутствующие в ИБ на текущий момент.
		Справочники.КлючиАналитикиУчетаПартий.ПолучитьКлючАналитики(Выборка, Ложь);
		
	КонецЦикла;
	
	// Теперь в регистре (и в справочнике) ключей есть все необходимые ключи для "новых" остатков.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаПартий,
	|	Т.ВидЦенности,
	|	АналитикаПартий.КлючАналитики КАК АналитикаУчетаПартийСВидомЦенности
	|ПОМЕСТИТЬ ВТАналитикиПартийСВидомЦенности
	|ИЗ
	|	ВТРеквизитыНовыхКлючейАналитикиУчетаПартий КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПартий КАК АналитикаПартий
	|		ПО Т.ГруппаФинансовогоУчета = АналитикаПартий.ГруппаФинансовогоУчета
	|		 И Т.Поставщик 				= АналитикаПартий.Поставщик
	|		 И Т.Контрагент 			= АналитикаПартий.Контрагент
	|		 И Т.НалогообложениеНДС 	= АналитикаПартий.НалогообложениеНДС
	|		 И Т.СтавкаНДС 				= АналитикаПартий.СтавкаНДС
	|		 И Т.ВидЦенности 			= АналитикаПартий.ВидЦенности
	|		 И Т.КодСтроки 				= АналитикаПартий.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРеквизитыНовыхКлючейАналитикиУчетаПартий
	|";
	
	Запрос.Выполнить(); // формируем ВТАналитикиПартийСВидомЦенности
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЭтапов_Контекстные

// Используется для всех вызовов заполнения расчетной партии.
//
Процедура ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход) Экспорт
	
	ПартияЗаполнена = Ложь;
	РасчетСебестоимостиЗаполнениеПартий.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	РасчетСебестоимостиПостатейныеЗатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	//++ НЕ УТ
	РасчетСебестоимостиМатериальныеЗатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	РасчетСебестоимостиТрудозатраты.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	//-- НЕ УТ
	РасчетСебестоимостиНДС.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
	РасчетСебестоимостиЛокализация.ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход, ПартияЗаполнена);
		
	Если НЕ ПартияЗаполнена Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для контекста %1 не предусмотрено заполнение полей расчетной партии';
				|en = 'Population of estimated lot fields is not available for the %1 context'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Контекст);
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПартийПоЦепочкам

#Область ИнициализацияИЗавершение

// Инициализирует данные для механизма распределения партий.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ТаблицаДляРаспределенияПартий - ТаблицаЗначений -
// 	ОписаниеЦепочек - Соответствие -
// 	ОписаниеДвижений - Структура -
// 	НезаписываемыеДанные - Структура -
// Возвращаемое значение:
// 	Структура - Описание:
// * ЕстьПереполнениеСтека - Булево -
// * ПараметрыНумерации - Структура -
// * НезаписываемыеДанные - Структура -
// * ОписаниеДвижений - Структура -
// * ОписаниеЦепочек - Соответствие -
// * РасчетныеПартии - ТаблицаЗначений -
// * ВсеРасчетныеПартии - ТаблицаЗначений -
// * ДополнительныеСвойства - Структура -
// * КоличествоПорцийДанных - Число -
// * ИменаТаблицПорций - Строка -
// * ВыгружатьДанные - Булево -
// * ВыгрузкаДанныхРасчета - Структура -
// * СтатистикаРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьЗамерРаспределенияПартий
//
Функция ИнициализироватьРаспределениеПартий(ПараметрыРасчета,
		ТаблицаДляРаспределенияПартий, ОписаниеЦепочек, ОписаниеДвижений,
		НезаписываемыеДанные) Экспорт

	РаспределениеПартий = Новый Структура;

	РаспределениеПартий.Вставить("РасчетныеПартии", ТаблицаДляРаспределенияПартий);
	РаспределениеПартий.Вставить("ОписаниеЦепочек", ОписаниеЦепочек);
	РаспределениеПартий.Вставить("ОписаниеДвижений", ОписаниеДвижений);
	РаспределениеПартий.Вставить("ПараметрыНумерации", Неопределено);
	РаспределениеПартий.Вставить("НезаписываемыеДанные", НезаписываемыеДанные);
	РаспределениеПартий.Вставить("ЕстьПереполнениеСтека", Ложь);
	РаспределениеПартий.Вставить("ДополнительныеСвойства", Новый Структура);
	РаспределениеПартий.Вставить("КоличествоПорцийДанных", 0); // при расчете этапа каждая порция сформированных данных сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	РаспределениеПартий.Вставить("ИменаТаблицПорций", ""); // имена всех ВТ порций вида <Имя таблицы>_<НомерПорции от 1 до КоличествоПорцийДанных>

	#Область ПроверкаЧисловыхПолей
	
	ЕстьПоляГруппировки = ОписаниеДвижений.Свойство("ПоляГруппировки");
	
	Если ЕстьПоляГруппировки Тогда
		
		СтруктураПоляСуммирования = Новый Структура(ОписаниеДвижений.ПоляСуммирования);
		СтруктураПоляПоказатели = Новый Структура(ОписаниеДвижений.Показатели);
		
		Если ОписаниеДвижений.Свойство("ИсключенияПоляСуммирования") Тогда
			СтруктураИсключенияПоляСуммирования = Новый Структура(ОписаниеДвижений.ИсключенияПоляСуммирования);
		Иначе
			СтруктураИсключенияПоляСуммирования = Новый Структура;
		КонецЕсли;
			
		Если ОписаниеДвижений.Свойство("ИсключенияПоказатели") Тогда
			СтруктураИсключенияПоказатели = Новый Структура(ОписаниеДвижений.ИсключенияПоказатели);
		Иначе
			СтруктураИсключенияПоказатели = Новый Структура;
		КонецЕсли;
			
		Для Каждого ТекущаяКолонка Из ТаблицаДляРаспределенияПартий.Колонки Цикл
			
			Если ЭтоСуммируемаяКолонкаТаблицы(ТекущаяКолонка) Тогда
				
				Если НЕ СтруктураПоляСуммирования.Свойство(ТекущаяКолонка.Имя)
				 И НЕ СтруктураИсключенияПоляСуммирования.Свойство(ТекущаяКолонка.Имя) Тогда
				 
					ОписаниеПроблемы = НСтр("ru = 'Числовая колонка не указана в полях суммирования:';
											|en = 'Numeric column is not specified in summarization fields:'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ТекущаяКолонка.Имя;
					
					ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета,, ОписаниеПроблемы);
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ОписаниеПроблемы, ОписаниеПроблемы);
				 
			 	КонецЕсли;
				
				Если НЕ СтруктураПоляПоказатели.Свойство(ТекущаяКолонка.Имя)
				 И НЕ СтруктураИсключенияПоказатели.Свойство(ТекущаяКолонка.Имя) Тогда
				 
					ОписаниеПроблемы = НСтр("ru = 'Числовая колонка не указана в полях показателей:';
											|en = 'Numeric column is not specified in indicator fields:'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ТекущаяКолонка.Имя;
					
					ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета,, ОписаниеПроблемы);
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ОписаниеПроблемы, ОписаниеПроблемы);
				 
			 	КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыгрузкаПромежуточныхДанных

	РаспределениеПартий.Вставить("ВыгружатьДанные", Ложь);

	Если НРег(ПараметрыРасчета.ПредставлениеЭтапа) = НРег(ПараметрыРасчета.ВыгрузкаДанныхРасчета.ЭтапПартионногоУчета22ДляВыгрузкиВФайлы)
	 И (НЕ ОписаниеДвижений.Свойство("РаспределениеНеТребуется")
	 ИЛИ НЕ ОписаниеДвижений.РаспределениеНеТребуется) Тогда

		ИмяКаталога = СокрЛП(ПараметрыРасчета.ВыгрузкаДанныхРасчета.КаталогДляСохраненияДанныхРасчетаПартий);

		Если ЗначениеЗаполнено(ИмяКаталога) Тогда

			Попытка
				ТекстОшибки = "";
				СоздатьКаталог(ИмяКаталога);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;

			ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
			Каталог = Новый Файл(ИмяКаталога);

			Если НЕ Каталог.Существует() ИЛИ НЕ Каталог.ЭтоКаталог() Тогда

				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден каталог для сохранения данных расчета партий: ""%1""
					|%2';
					|en = 'Directory for saving lot calculation data was not found: ""%1""
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()), РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ИмяКаталога), ТекстОшибки);

				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(ПараметрыРасчета, Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения, ТекстДляПротокола);
			Иначе

				Попытка
					УдалитьФайлы(ИмяКаталога, "*.mxl");
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецПопытки;

				РаспределениеПартий.Вставить("ВыгружатьДанные", Истина);
				РаспределениеПартий.Вставить("ВыгрузкаДанныхРасчета", Новый Структура);

				РаспределениеПартий.ВыгрузкаДанныхРасчета.Вставить("ИмяКаталога", ИмяКаталога);

				// Описание файлов выгрузки таблиц.
				Для Каждого КлючИЗначение Из Новый Структура("Данные, Источники, Приемники, РасчетныеПартии") Цикл

					ОписаниеФайлаВыгрузки = ИнициализироватьОписаниеФайлаВыгрузки();
					ОписаниеФайлаВыгрузки.ИмяФайла = ИмяКаталога + КлючИЗначение.Ключ
						+ ".mxl";

					РаспределениеПартий.ВыгрузкаДанныхРасчета.Вставить(КлючИЗначение.Ключ, ОписаниеФайлаВыгрузки);

				КонецЦикла;

				ПараметрыРасчета.Вставить("РаспределениеПартий", РаспределениеПартий);
				ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "РасчетныеПартии", РаспределениеПартий.РасчетныеПартии);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	#КонецОбласти

	ПараметрыРасчета.Вставить("РаспределениеПартий", РаспределениеПартий);

	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ИнициализироватьРаспределениеПартий");

	Возврат РаспределениеПартий;

КонецФункции

// Возвращает описание файла выгрузки промежуточных результатов расчета.
// 
// Возвращаемое значение:
//  Структура - описание файла выгрузки:
// * ИмяФайла - Строка -
// * ТабличныйДокумент - ТабличныйДокумент -
// * Колонки - Массив -
// * НомерСтрокиФайла - Число -
// * БылиОшибки - Булево -
Функция ИнициализироватьОписаниеФайлаВыгрузки() Экспорт

	ОписаниеФайлаВыгрузки = Новый Структура;
	ОписаниеФайлаВыгрузки.Вставить("ИмяФайла", "");
	ОписаниеФайлаВыгрузки.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
	ОписаниеФайлаВыгрузки.Вставить("Колонки", Новый Массив);
	ОписаниеФайлаВыгрузки.Вставить("НомерСтрокиФайла", 0);
	ОписаниеФайлаВыгрузки.Вставить("БылиОшибки", Ложь);

	Возврат ОписаниеФайлаВыгрузки;

КонецФункции


// Возвращает описание цепочек для указанного типа записи.
// 
// Параметры:
// 	ОписаниеЦепочек - Соответствие -
// 	ТипЗаписи - ПеречислениеСсылка.ТипыЗаписейПартий - 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПоляСвязи - Массив -
// * ТипыПриемников - Соответствие -
// * ТипыИсточников - Соответствие -
//
Функция ОписаниеЦепочки(ОписаниеЦепочек, ТипЗаписи)
	
	Если ОписаниеЦепочек[ТипЗаписи] = Неопределено Тогда
		ОписаниеЦепочек.Вставить(
			ТипЗаписи,
			Новый Структура(
				"ПоляСвязи, ТипыПриемников, ТипыИсточников",
				Новый Массив, Новый Соответствие, Новый Соответствие));
	КонецЕсли;
	
	Возврат ОписаниеЦепочек[ТипЗаписи];
	
КонецФункции

Процедура ДобавитьОписаниеПриемника(ОписаниеЦепочек, Приемник, ПоляПриемника, Источники = Неопределено, ПоляИсточника = Неопределено) Экспорт
	
	Для Каждого ОписаниеПоля Из Новый Структура(ПоляПриемника) Цикл
		ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Источники) Тогда
		
		Для Каждого ОписаниеИсточника Из Источники Цикл
			
			Если ЗначениеЗаполнено(ОписаниеИсточника.Значение) Тогда
				Поля = ОписаниеИсточника.Значение;
			ИначеЕсли ЗначениеЗаполнено(ПоляИсточника) Тогда
				Поля = ПоляИсточника;
			Иначе
				Поля = ПоляПриемника;
			КонецЕсли;
			
			ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, ОписаниеИсточника.Ключ, Поля);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, Источник, ПоляИсточника) Экспорт
	
	ПоляСвязи = Новый Массив;
	Для Каждого ОписаниеПоля Из Новый Структура(ПоляИсточника) Цикл
		ПоляСвязи.Добавить(ОписаниеПоля.Ключ);
	КонецЦикла;
	
	ПоляПриемника = ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ПоляСвязи;
	Если ПоляПриемника.Количество() <> ПоляСвязи.Количество() Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Различное количество полей связи источника ""%1"" и приемника ""%2"".';
				|en = 'Different quantity of link fields of the ""%1"" source and the ""%2"" target.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Источник,
			Приемник);
			
		ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
		ВызватьИсключение ТекстДляПротокола;
		
	КонецЕсли;
	
	ОписаниеЦепочки(ОписаниеЦепочек, Источник).ТипыПриемников.Вставить(Приемник, ПоляСвязи);
	ОписаниеЦепочки(ОписаниеЦепочек, Приемник).ТипыИсточников.Вставить(Источник, ПоляСвязи);
	
КонецПроцедуры

// Используется в случае, когда тип записи не имеет источников.
// Т.е. такой тип записи получается не распределением другого типа записей,
// а просто формируется по данным выборки (аналог типа записи "Дополнение" в партионном учете версии 2.1).
//
Процедура ДобавитьОписаниеДополнения(ОписаниеЦепочек, Приемник) Экспорт
	
	ДобавитьОписаниеПриемника(ОписаниеЦепочек, Приемник, "Регистратор");
	ДобавитьОписаниеИсточника(ОписаниеЦепочек, Приемник, "", "Регистратор"); // фиктивный источник
	
КонецПроцедуры

Функция ОписаниеДвижений() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Контекст", "");
	Результат.Вставить("ПроцедураЗаполнения", "");
	Результат.Вставить("ИмяРегистра", "");
	Результат.Вставить("ПоляРасчета", "");
	Результат.Вставить("КлючиСравнения", "");
	Результат.Вставить("Показатели", "");
	Результат.Вставить("БазисПрихода", "");
	Результат.Вставить("БазисРасхода", "");
	Результат.Вставить("КлючРасхода",         "");
	Результат.Вставить("ПолеПорядка",         "");
	Результат.Вставить("ПоляСортировки",      "");
	Результат.Вставить("СортировкаПоУсловию", ЛОЖЬ);
	Результат.Вставить("БазисПриходаРегл",    "");
	Результат.Вставить("БазисРасходаРегл",    "");
	
	Результат.Вставить("ИмяВременнойТаблицы",      "");
	Результат.Вставить("ПоляИндексирования",       "");
	Результат.Вставить("РаспределениеНеТребуется", ЛОЖЬ);
	
	Результат.Вставить("ВременныеТаблицыТекущегоЭтапа",      "");
	Результат.Вставить("ВременныеТаблицыДляСледующихЭтапов", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеНезаписываемыхДанных(ЗаписыватьНезавершенные, НезаписываемыеТипыЗаписей = Неопределено,
			НезаписываемыеРазделы = Неопределено, НезаписываемыеРегистраторы = Неопределено) Экспорт
	
	НезаписываемыеДанные = Новый Структура;
	НезаписываемыеДанные.Вставить("ЗаписыватьНезавершенные", 	ЗаписыватьНезавершенные);
	НезаписываемыеДанные.Вставить("НезаписываемыеТипыЗаписей", 	?(НезаписываемыеТипыЗаписей = Неопределено, Новый Соответствие, НезаписываемыеТипыЗаписей));
	НезаписываемыеДанные.Вставить("НезаписываемыеРегистраторы", ?(НезаписываемыеРегистраторы = Неопределено, Новый Соответствие, НезаписываемыеРегистраторы));
	НезаписываемыеДанные.Вставить("НезаписываемыеРазделы", 		?(НезаписываемыеРазделы = Неопределено, Новый Соответствие, НезаписываемыеРазделы));
	
	// Движения документа корректировки регистров не изменяем
	НезаписываемыеДанные.НезаписываемыеРегистраторы.Вставить(Метаданные.Документы.КорректировкаРегистров.Имя, Истина);
	
	Возврат НезаписываемыеДанные;
	
КонецФункции

Функция ТаблицаДляРаспределенияПартий(ПараметрыРасчета, ТекстОписаниеДанных, ДобавлятьКолонкуНумерации = Истина) Экспорт
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = ТекстОписаниеДанных;
	
	Таблица = Запрос.Выполнить().Выгрузить().СкопироватьКолонки(); // создадим пустую таблицу
	
	// Уберем тип Null из описания типов колонок.
	Для Каждого ТекущаяКолонка Из Таблица.СкопироватьКолонки().Колонки Цикл
		
		Если ТекущаяКолонка.ТипЗначения.СодержитТип(Тип("Null")) Тогда
			
			Таблица.Колонки.Удалить(ТекущаяКолонка.Имя); // удалим колонку
			
			Таблица.Колонки.Добавить(
				ТекущаяКолонка.Имя,
				Новый ОписаниеТипов(ТекущаяКолонка.ТипЗначения,, "Null"),
				ТекущаяКолонка.Заголовок,
				ТекущаяКолонка.Ширина); // добавим аналогичную без типа значения Null
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавлятьКолонкуНумерации Тогда
		ДобавитьКолонкуДляНумерацииСтрок(Таблица);
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗавершитьРаспределениеПартий(ПараметрыРасчета, ОкончаниеЭтапа = Истина) Экспорт
	
	ИменаВременныхТаблиц = "Данные, Источники, Приемники, ОписаниеПодграфов, СтатистикаСвязейУзлов, "
		+ ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.ВременныеТаблицыТекущегоЭтапа;
	
	Если ОкончаниеЭтапа Тогда
		КэшироватьСформированныеДвижения(ПараметрыРасчета);
	Иначе
		КэшироватьРаспределенныеПартии(ПараметрыРасчета);
	КонецЕсли;
	
	Если НЕ ВременнаяТаблицаСуществует(ПараметрыРасчета, "Источники") Тогда
		
		// Это этап трансляции партий
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "Данные"));
		
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаВременныхТаблиц);
	
	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ЗавершитьРаспределениеПартий");
	
КонецПроцедуры

// Изменяет текст запроса описания данных - данные будут выбираться не во временную таблицу, а в результат запроса.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
// 
// Возвращаемое значение:
//  Строка - измененный текст запроса описания данных
//
Функция ПодготовитьЗапросОписанияДанных(ТекстЗапроса) Экспорт
	Возврат ИзменитьПриемникЗапросаОписанияДанных(ТекстЗапроса);
КонецФункции

// Изменяет таблицу приемник запроса описания данных.
// 
// Параметры:
//  ТекстЗапроса - Строка - Текст запроса
//  ИмяПриемника - Строка - Имя таблицы приемника
// 
// Возвращаемое значение:
//  Строка - измененный текст запроса описания данных
//
Функция ИзменитьПриемникЗапросаОписанияДанных(ТекстЗапроса, ИмяПриемника = "") Экспорт
	
	ИмяПустогоПриемника = ИмяПустогоПриемникаЗапросаОписанияДанных();
	
	Если СтрНайти(ТекстЗапроса, ИмяПустогоПриемника) > 0 Тогда
		ИмяИсточника = ИмяПустогоПриемника;
	Иначе
		ИмяИсточника = "ПОМЕСТИТЬ Данные";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПриемника) Тогда
		ИмяПриемника = ИмяПустогоПриемника;
	Иначе
		ИмяПриемника = "ПОМЕСТИТЬ " + ИмяПриемника;
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, ИмяИсточника, ИмяПриемника);
	
КонецФункции

// Возвращает строку, подставляемую вместо имени таблицы для помещения результата запроса. 
// 
// Возвращаемое значение:
//  Строка -
//
Функция ИмяПустогоПриемникаЗапросаОписанияДанных() Экспорт
	Возврат "//" + "ВоВременнуюТаблицу";
КонецФункции

#КонецОбласти

#Область ПостроениеЦепочек

// Строит цепочки движений.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ОптимизацияДанных - Булево -
//
Процедура ПостроитьЦепочкиДвижений(ПараметрыРасчета, ОптимизацияДанных = Ложь) Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "Источники", ?(ОптимизацияДанных, НСтр("ru = 'После оптимизации';
																																	|en = 'After optimization'", ОбщегоНазначения.КодОсновногоЯзыка()), ""));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ ОптимизацияДанных Тогда
		
		// Проверим, что типы записей в описании цепочек соответствуют выбранным данным.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.ТипЗаписи 	 КАК ТипЗаписи,
		|	Т.ЗапросИсточник КАК ЗапросИсточник,
		|	Т.Организация    КАК Организация,
		|	Т.Регистратор    КАК Регистратор
		|ИЗ
		|	Данные КАК Т
		|ГДЕ
		|	НЕ Т.ТипЗаписи В (&ДопустимыеТипыЗаписей)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипЗаписи,
		|	ЗапросИсточник,
		|	Организация,
		|	Регистратор";
		
		ДопустимыеТипыЗаписей = ИспользуемыеТипыЗаписейВЦепочках(ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек,,, Ложь);
		Запрос.УстановитьПараметр("ДопустимыеТипыЗаписей", ДопустимыеТипыЗаписей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В выбранных данных есть типы записей, отсутствующие в описании цепочек.';
									|en = 'In selected data, there are record types missing in chain description.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
				РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации() + ОписаниеПроблемы);
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Тип записи: ""%1"", источник: ""%2"", организация ""%3"", регистратор: ""%4""';
						|en = 'Record type:""%1"", source:""%2"", company ""%3"", recorder:""%4""'", ОбщегоНазначения.КодОсновногоЯзыка()),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ТипЗаписи),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ЗапросИсточник),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Организация),
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Регистратор));
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
					ТекстДляПротокола);
				
				ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыРасчета,
					Выборка.Организация,
					НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
						|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ОписаниеПроблемы + Символы.ПС + ТекстДляПротокола,
					Выборка.Регистратор);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Проверим, что непересчитываемые типы записей не являются приемниками.
		ТипыЗаписейПриемников = ИспользуемыеТипыЗаписейВЦепочках(ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек,, Ложь, Ложь);
		ЕстьНепересчитываемыеТипыЗаписейВПриемниках = Ложь;
		
		Для Каждого ТекущийТипЗаписи Из ТипыЗаписейПриемников Цикл
			
			Если РасчетСебестоимостиПовтИсп.ЭтоНепересчитываемыйТипЗаписи(ТекущийТипЗаписи) Тогда
				
				ТекстДляПротокола = НСтр("ru = 'В описании цепочек в качестве приемников не могут использоваться непересчитываемые типы записей';
										|en = 'Non-recalculated record types cannot be used in the chain description as targets.'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				Если НЕ ЕстьНепересчитываемыеТипыЗаписейВПриемниках Тогда
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
						ПараметрыРасчета,
						Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
						РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации() + ТекстДляПротокола);
				КонецЕсли;
				
				ЕстьНепересчитываемыеТипыЗаписейВПриемниках = Истина;
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ТекущийТипЗаписи));
					
				ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыРасчета,
					,
					НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
						|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстДляПротокола + ": " + РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ТекущийТипЗаписи));
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "Источники, Приемники, СтатистикаСвязейУзлов");
		
	КонецЕсли;
	
	ЕстьРегистратор = КолонкаВременнойТаблицыСуществует(ПараметрыРасчета, "Данные", "Регистратор");
	ТекстДляПротоколаДанные = "";
	ТекстДляПротоколаСвязи = "";
	
	// Соберем статистику по типам записей таблицы Данные.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.ТипЗаписи КАК ТипЗаписи,
	|	&Регистраторы,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Данные КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ТипЗаписи
	|	,&ГруппировкаРегистраторы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипЗаписи,
	|	Количество УБЫВ";
	
	Если ЕстьРегистратор Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Регистраторы,",
			"ТИПЗНАЧЕНИЯ(Т.Регистратор) КАК ТипРегистратора,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ГруппировкаРегистраторы",
			", ТИПЗНАЧЕНИЯ(Т.Регистратор)");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Регистраторы,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ГруппировкаРегистраторы", "");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоДанных = 0;
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоДанных = КоличествоДанных + Выборка.Количество;
		
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(
			ТекстДляПротоколаДанные,
			Символы.ПС + "  * "
			+ ?(ЗначениеЗаполнено(Выборка.ТипЗаписи),
				СокрЛП(Выборка.ТипЗаписи),
				"<"	+ НСтр("ru = 'Тип записи не указан';
								|en = 'Entry type is not specified.'", ОбщегоНазначения.КодОсновногоЯзыка()) + ">")
			+ ?(ЕстьРегистратор, " [" + СокрЛП(Выборка.ТипРегистратора) + "]", "")
			+ " - " + Формат(Выборка.Количество, "ЧГ="));
		
	КонецЦикла;

	// Сформируем текст запроса для построения цепочек
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	Приемники.К КАК Приемник,
	|	Источники.К КАК Источник
	|	,&Регистраторы
	|ПОМЕСТИТЬ ИмяТаблицыРезультата
	|ИЗ
	|	Данные КАК Приемники
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данные КАК Источники
	|		ПО &Условия
	|ГДЕ
	|	Приемники.К <> Источники.К
	|	И Приемники.ТипЗаписи = &ТипПриемника
	|	И Источники.ТипЗаписи = &ТипИсточника
	|	И НЕ Приемники.РасчетЗавершен
	|;
	|ВЫБРАТЬ
	|	&ВыборкаРегистраторы,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	ИмяТаблицыРезультата КАК Т
	|ГДЕ &ГруппировкаРегистраторы
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	КоличествоСвязей = 0;
	ТекстЗапроса 	 = "";
	ВременныеТаблицы = Новый Массив;
	НомерТаблицы 	 = 0;
	
	Для Каждого Описание Из ПараметрыРасчета.РаспределениеПартий.ОписаниеЦепочек Цикл
		
		ПоляПриемника = Описание.Значение.ПоляСвязи;
		Если ПоляПриемника.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеИсточника Из Описание.Значение.ТипыИсточников Цикл
			
			ПоляИсточника = ОписаниеИсточника.Значение;
			Если ПоляИсточника.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерПоля = -1;
			Для Каждого ПолеПриемника Из ПоляПриемника Цикл
				НомерПоля = НомерПоля + 1;
				Если НомерПоля = 0 Тогда
					Условия = "Приемники." + ПолеПриемника + " = " + "Источники." + ПоляИсточника[НомерПоля];
				Иначе
					Условия = Условия + Символы.ПС + " И " + "Приемники." + ПолеПриемника + " = " + "Источники." + ПоляИсточника[НомерПоля];
				КонецЕсли;
			КонецЦикла;
			
			НомерТаблицы = НомерТаблицы + 1;
			ИмяТаблицы   = "ВТЦепочки" + Формат(НомерТаблицы, "ЧГ=");
			ВременныеТаблицы.Добавить(ИмяТаблицы);
			
			ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяТаблицыРезультата", ИмяТаблицы);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,  "&Условия",   		  Условия);
			
			Если ЕстьРегистратор Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&Регистраторы", ",
					|	ТИПЗНАЧЕНИЯ(Источники.Регистратор) КАК РегистраторИсточника,
					|	ТИПЗНАЧЕНИЯ(Приемники.Регистратор) КАК РегистраторПриемника");
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыборкаРегистраторы,", "
					|	Т.РегистраторИсточника,
					|	Т.РегистраторПриемника,");
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ &ГруппировкаРегистраторы", "СГРУППИРОВАТЬ ПО
					|	Т.РегистраторИсточника,
					|	Т.РегистраторПриемника");
				
			Иначе
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&Регистраторы", "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВыборкаРегистраторы,", "");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ &ГруппировкаРегистраторы", "");
				
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("ТипПриемника", Описание.Ключ);
			Запрос.УстановитьПараметр("ТипИсточника", ОписаниеИсточника.Ключ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Количество > 0 Тогда
					
					КоличествоСвязей = КоличествоСвязей + Выборка.Количество;
					ТекстДляПротоколаСвязи = ТекстДляПротоколаСвязи + Символы.ПС + "  * "
						+ СокрЛП(ОписаниеИсточника.Ключ)
						+ ?(ЕстьРегистратор, " [" + СокрЛП(Выборка.РегистраторИсточника) + "]", "")
						+ " -> " + СокрЛП(Описание.Ключ)
						+ ?(ЕстьРегистратор, " [" + СокрЛП(Выборка.РегистраторПриемника) + "]", "")
						+ ": " + СокрЛП(Выборка.Количество);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоДанных > 0 Тогда
		
		ТекстОписания = НСтр("ru = 'Описание структуры данных для расчета%1';
							|en = 'Details of data structure for calculation%1'", ОбщегоНазначения.КодОсновногоЯзыка()) + ":" + Символы.ПС
			+ НСтр("ru = 'Всего данных: %2%3';
					|en = 'Total data: %2%3'", ОбщегоНазначения.КодОсновногоЯзыка()) + Символы.ПС
			+ НСтр("ru = 'Всего связей: %4%5';
					|en = 'Total links: %4%5'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстОписания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОписания,
			?(ОптимизацияДанных, " (" + НСтр("ru = 'после оптимизации';
											|en = 'after optimizing'", ОбщегоНазначения.КодОсновногоЯзыка()) + ")", ""),
			СокрЛП(КоличествоДанных),
			?(КоличествоДанных > 0, ", " + НСтр("ru = 'в том числе';
												|en = 'including'", ОбщегоНазначения.КодОсновногоЯзыка()) + ":" + Символы.ПС + ТекстДляПротоколаДанные, ""),
			СокрЛП(КоличествоСвязей),
			?(КоличествоСвязей > 0, ", " + НСтр("ru = 'в том числе';
												|en = 'including'", ОбщегоНазначения.КодОсновногоЯзыка()) + ":" + Символы.ПС + ТекстДляПротоколаСвязи, ""));
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ТекстОписания, ТекстОписания);
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	-1 КАК Приемник,
	|	-1 КАК Источник
	|ПОМЕСТИТЬ
	|	Цепочки
	|";
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ДД.Приемник,
	|	ДД.Источник
	|ИЗ
	|	ИмяТаблицы КАК ДД
	|";
	
	Для Каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "ИмяТаблицы", ИмяТаблицы);
	КонецЦикла;
	
	Для Каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		ТекстЗапроса = ТекстЗапроса + "; УНИЧТОЖИТЬ " + ИмяТаблицы;
	КонецЦикла;
	
	// Выполним подготовленный запрос.
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Разобьем временную таблицу Цепочки на таблицы источников и приемников для каждого узла.
	// Поля доп. упорядочивания для ФИФО (Период и Регистратор) пока не заполняются - будут заполнены при оптимизации цепочек.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Приемник КАК Ключ,
	|	ДД.Источник КАК Источник,
	|	0 			КАК Порядок
	|ПОМЕСТИТЬ Источники
	|ИЗ
	|	Цепочки КАК ДД
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Источник КАК Ключ,
	|	ДД.Приемник КАК Приемник,
	|	0 			КАК Порядок
	|ПОМЕСТИТЬ Приемники
	|ИЗ
	|	Цепочки КАК ДД
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Цепочки
	|";
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	Если НЕ ОптимизацияДанных Тогда
		ОптимизироватьДанныеВЦепочках(ПараметрыРасчета);
		ОптимизироватьНумерациюВЦепочках(ПараметрыРасчета);
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "СтатистикаСвязейУзлов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ключ КАК Ключ,
	|	СУММА(Т.КоличествоИсточников) КАК КоличествоИсточников,
	|	СУММА(Т.КоличествоПриемников) КАК КоличествоПриемников,
	|	СУММА(Т.КоличествоИсточников + Т.КоличествоПриемников) КАК КоличествоСвязей
	|ПОМЕСТИТЬ СтатистикаСвязейУзлов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.К КАК Ключ,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(10,0)) КАК КоличествоИсточников,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(10,0)) КАК КоличествоПриемников
	|	ИЗ
	|		Данные КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ключ КАК Ключ,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(10,0))),
	|		0
	|	ИЗ
	|		Источники КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ключ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ключ,
	|		0,
	|		СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(10,0)))
	|	ИЗ
	|		Приемники КАК Т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ключ) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ключ
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.Ключ";
	
	Запрос.Выполнить();
	
	Если НЕ ОптимизацияДанных Тогда
		ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ПостроитьЦепочкиДвижений");
	КонецЕсли;
	
КонецПроцедуры

// Оптимизирует данные в цепочках.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ОптимизироватьДанныеВЦепочках(ПараметрыРасчета)
	
	Если ПараметрыРасчета.Отладка.НеВыполнятьОптимизациюДанных Тогда
		Возврат;
	КонецЕсли;
		
	РазмерТаблицыДанных = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	
	Если РазмерТаблицыДанных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	НеВыполнятьОптимизацию =
		НЕ ОписаниеДвижений.Свойство("УдалятьСтрокиБезПриемников")
		И НЕ ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников");
	
	СформироватьУжеИзвестныеРасчетныеПартии(ПараметрыРасчета, НеВыполнятьОптимизацию);
	
	Если НеВыполнятьОптимизацию Тогда
		Возврат;
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"Данные",
		НСтр("ru = 'Оптимизация исходных данных';
			|en = 'Source data optimization'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	РазмерТаблицыДанные    = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	РазмерТаблицыИсточники = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");
	
	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К КАК К
	|ПОМЕСТИТЬ УдаляемыеОдиночныеУзлы
	|ИЗ
	|(ВЫБРАТЬ
	|	Т.К,
	|	ЛОЖЬ КАК ЕстьИсточники,
	|	ЛОЖЬ КАК ЕстьПриемники
	|ИЗ
	|	Данные КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ключ КАК К,
	|	ИСТИНА КАК ЕстьИсточники,
	|	ЛОЖЬ КАК ЕстьПриемники
	|ИЗ
	|	Источники КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ключ КАК К,
	|	ЛОЖЬ КАК ЕстьИсточники,
	|	ИСТИНА КАК ЕстьПриемники
	|ИЗ
	|	Приемники КАК Т
	|) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.К
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.ЕстьИсточники) = ЛОЖЬ
	|	И МАКСИМУМ(Т.ЕстьПриемники) = ЛОЖЬ
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.К
	|";
	
	Запрос.Выполнить();
	
	// Выберем узлы с признаком РасчетЗавершен = Ложь, у которых нет источников.
	// Выполнять расчет для таких узлов не имеет смысла. Такие узлы надо удалить из таблицы Данные.
	Если ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников") Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.К КАК К
		|ПОМЕСТИТЬ УдаляемыеУзлы_0
		|ИЗ
		|(ВЫБРАТЬ
		|	Т.К,
		|	ИСТИНА КАК Удалить
		|ИЗ
		|	Данные КАК Т
		|ГДЕ
		|	НЕ Т.РасчетЗавершен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ключ КАК К,
		|	ЛОЖЬ КАК Удалить
		|ИЗ
		|	Источники КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.К КАК К,
		|	ЛОЖЬ КАК Удалить
		|ИЗ
		|	УдаляемыеОдиночныеУзлы КАК Т
		|) КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.К
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Т.Удалить) = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.К
		|";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК К
		|ПОМЕСТИТЬ УдаляемыеУзлы_0";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	НомерИтерации = 0;
	ИмяТекущейТаблицы = "УдаляемыеУзлы_0";
	КоличествоУдаляемыхУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТекущейТаблицы);
	
	Если КоличествоУдаляемыхУзлов > 0 Тогда
		
		ПродолжатьПоиск = Истина;
		
		Пока ПродолжатьПоиск Цикл
			
			НомерИтерации = НомерИтерации + 1;
			
			ИмяТекущейТаблицы    = "УдаляемыеУзлы_" + Формат(НомерИтерации, "ЧН=0; ЧГ=");
			ИмяПредыдущейТаблицы = "УдаляемыеУзлы_" + Формат(НомерИтерации - 1, "ЧН=0; ЧГ=");
			
			// Дополним перечень удаляемых узлов такими узлами, у которых (по И)
			// - признак РасчетЗавершен = Ложь
			// - все источники узла присутствуют в перечне узлов к удалению
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ключ КАК К
			|ПОМЕСТИТЬ ИмяТекущейТаблицы
			|ИЗ
			|	Источники КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяПредыдущейТаблицы КАК УдаляемыеУзлы
			|		ПО Т.Источник = УдаляемыеУзлы.К
			|		ЛЕВОЕ СОЕДИНЕНИЕ Данные КАК Данные
			|		ПО Т.Ключ = Данные.К
			|ГДЕ
			|	НЕ Данные.РасчетЗавершен
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.Ключ
			|
			|ИМЕЮЩИЕ
			|	МИНИМУМ(ВЫБОР
			|			КОГДА УдаляемыеУзлы.К ЕСТЬ NULL
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ) = ИСТИНА
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Т.К
			|ИЗ
			|	ИмяПредыдущейТаблицы КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИмяПредыдущейТаблицы";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТекущейТаблицы", ИмяТекущейТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПредыдущейТаблицы", ИмяПредыдущейТаблицы);
			
			Запрос.Выполнить();
			
			// Итерацию поиска удаляемых узлов закончим тогда, когда на очередном шаге не будет найдено ни одного нового узла к удалению.
			НовоеКоличествоУдаляемыхУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТекущейТаблицы);
			
			ПродолжатьПоиск = (НовоеКоличествоУдаляемыхУзлов > КоличествоУдаляемыхУзлов);
			
			КоличествоУдаляемыхУзлов = НовоеКоличествоУдаляемыхУзлов;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К
	|ПОМЕСТИТЬ ВсеУдаляемыеУзлы
	|ИЗ
	|	УдаляемыеОдиночныеУзлы КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Т.К КАК К
	|ИЗ
	|	ИмяТекущейТаблицы КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.К
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УдаляемыеОдиночныеУзлы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИмяТекущейТаблицы
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТекущейТаблицы", ИмяТекущейТаблицы);
	
	Запрос.Выполнить();
	
	ОкончаниеОптимизацииДанных(ПараметрыРасчета, Запрос, Ложь);
	
	// Поместим в протокол расчета статистику по оптимизации данных.
	НовыйРазмерТаблицыДанные    = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	НовыйРазмерТаблицыИсточники = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");
	
	ОписаниеЭтапа = НСтр("ru = 'Выполнено итераций оптимизации данных - %1,
	|	размер таблицы Данные (до/после) - %2 / %3; 
	|	размер таблиц Источники и Приемники (до/после) - %4 / %5';
	|en = 'Data optimization iterations completed - %1,
	|	Size of Data table (before/after) - %2 / %3;
	|	Size of Sources and Destinations tables (before/after) - %4 / %5'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеЭтапа,
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НомерИтерации + 1),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(РазмерТаблицыДанные),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НовыйРазмерТаблицыДанные),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(РазмерТаблицыИсточники),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(НовыйРазмерТаблицыИсточники));
		
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеЭтапа);
	
	// Уничтожим ненужные временные таблицы.
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, СуществующиеВТ);
	УничтожитьВременныеТаблицы(ПараметрыРасчета, НовыеВТ);
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Оптимизирует нумерацию в цепочках.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
Процедура ОптимизироватьНумерациюВЦепочках(ПараметрыРасчета)
	
	РазмерТаблицыДанных = РазмерВременнойТаблицы(ПараметрыРасчета, "Данные");
	
	Если РазмерТаблицыДанных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РазмерТаблицыСвязей = РазмерВременнойТаблицы(ПараметрыРасчета, "Источники");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("РазмерТаблицыДанных", РазмерТаблицыДанных);
	Запрос.УстановитьПараметр("РазмерТаблицыСвязей", РазмерТаблицыСвязей);
	Запрос.УстановитьПараметр("КоличествоСтрокВТЗ",  ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	Если ПараметрыРасчета.Отладка.НеВыполнятьОптимизациюЦепочек Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	0 							КАК НомерЗаданияРасчета,
		|	0 							КАК НомерПодграфа,
		|	&РазмерТаблицыСвязей 		КАК КоличествоСвязей,
		|	&РазмерТаблицыДанных 		КАК КоличествоУзлов,
		|	&РазмерТаблицыДанных
		|	  + &РазмерТаблицыСвязей	КАК ВесПодграфа,
		|	0 							КАК МинимальныйНомерУзла,
		|	&РазмерТаблицыДанных - 1 	КАК МаксимальныйНомерУзла,
		|	0 							КАК МаксимумПриемниковУзла,
		|	0 							КАК МаксимумИсточниковУзла
		|ПОМЕСТИТЬ ОписаниеПодграфов";
		
		Запрос.Выполнить(); // создание ОписаниеПодграфов
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			НСтр("ru = 'Оптимизация нумерации узлов графа перед расчетом партий по цепочкам пропущена для целей отладки.';
				|en = 'Optimization of graph node numbering before lot calculation by chains is skipped for debug purposes.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТНовыеНомераУзлов", НСтр("ru = 'Оптимизация нумерации исходных данных';
																														|en = 'Source data numbering optimization'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);
	
	#Область Инициализация
	
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии; // ТаблицаЗначений
	КолонкиТаблицыДанных = РасчетныеПартии.Колонки;
	
	ЕстьПериодПоступленияВДанных = (КолонкиТаблицыДанных.Найти("ПериодПоступления") <> Неопределено);
	ЕстьПериодВДанных 	   		 = (КолонкиТаблицыДанных.Найти("Период") <> Неопределено);
	ЕстьРегистраторВДанных	 	 = (КолонкиТаблицыДанных.Найти("Регистратор") <> Неопределено);
	
	ИменаКолонокТаблицыДанные = "";
	Для Каждого ТекущаяКолонка Из КолонкиТаблицыДанных Цикл
		
		ИмяКолонки = ?(ТекущаяКолонка.Имя = "К", "НовыеНомера.НовыйНомерУзла КАК К", "Т." + ТекущаяКолонка.Имя);
		
		ИменаКолонокТаблицыДанные = ИменаКолонокТаблицыДанные + ?(ИменаКолонокТаблицыДанные = "", "", ",
			|	") + ИмяКолонки;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область Упорядочивание
	
	// Подготовим данные для упорядочивания записей.
	// Упорядочивание выполняется по полям ПериодПоступления, Период, Регистратор
	// Упорядочивание используется для сортировки узлов одной волны подграфа и для сортировки источников и приемников узла.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К КАК НомерУзла,
	|	&Параметр1 КАК ПериодПоступления,
	|	&Параметр2 КАК Период,
	|	&Параметр3 КАК Регистратор
	|ПОМЕСТИТЬ ВТДанныеДляУпорядочивания
	|ИЗ
	|	Данные КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодПоступления,
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр", "%");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(ЕстьПериодПоступленияВДанных, "ЕСТЬNULL(Т.ПериодПоступления, ДАТАВРЕМЯ(1,1,1))", "ДАТАВРЕМЯ(1,1,1)"),
		?(ЕстьПериодВДанных, "ЕСТЬNULL(Т.Период, ДАТАВРЕМЯ(1,1,1))", "ДАТАВРЕМЯ(1,1,1)"),
		?(ЕстьРегистраторВДанных, "ЕСТЬNULL(Т.Регистратор, НЕОПРЕДЕЛЕНО)", "ДАТАВРЕМЯ(1,1,1)"));
	
	Запрос.Выполнить(); // создание ВТДанныеДляУпорядочивания
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Параметр1 КАК ЗначениеРазделителя,
	|	Т.ПериодПоступления КАК ПериодПоступления,
	|	Т.Период КАК Период,
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТПоляУпорядочивания
	|ИЗ
	|	ВТДанныеДляУпорядочивания КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодПоступления,
	|	Период,
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр", "%");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?(ЕстьПериодПоступленияВДанных,
			"НАЧАЛОПЕРИОДА(Т.ПериодПоступления, ДЕНЬ)",
			?(ЕстьПериодВДанных,
				"НАЧАЛОПЕРИОДА(Т.Период, ДЕНЬ)",
				"1")));
	
	Запрос.Выполнить(); // создание ВТПоляУпорядочивания
	
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"ЗначениеРазделителя", // разделитель
		"", // ресурсы
		"ПериодПоступления, Период, Регистратор", // порядок
		"Порядок", // номер
		"ПериодПоступления, Период, Регистратор", // индекс
		"", // накопление
		Ложь); // не подбирать разделитель
	
	ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТПоляУпорядочивания");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерУзла 			   КАК НомерУзла,
	|	ПоляУпорядочивания.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТПорядокУзлов
	|ИЗ
	|	ВТДанныеДляУпорядочивания КАК Т
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоляУпорядочивания КАК ПоляУпорядочивания
	|		ПО Т.ПериодПоступления = ПоляУпорядочивания.ПериодПоступления
	|		 И Т.Период = ПоляУпорядочивания.Период
	|		 И Т.Регистратор = ПоляУпорядочивания.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла";
	
	Запрос.Выполнить(); // создание ВТПорядокУзлов
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДанныеДляУпорядочивания, ВТПоляУпорядочивания");
		
	#КонецОбласти
	
	#Область РазбиениеГрафаНаПодграфы
	
	// Выполним разбиение исходного графа данных на несвязанные между собой подграфы.
	// Каждый найденный подграф будет пронумерован от 0 до (количество подграфов - 1) в порядку убывания количества дуг в подграфе.
	// Т.е. подграф с номером 0 будет самым большим, а последние подграфы будут тривиальными (содержат по одному узлу).
	//
	// Разбиение выполняем следующим образов:
	// - для начала каждой вершине присваиваем номер подграфа, равный номеру самой вершины
	// - для каждой вершины i определяем номера подграфов всех ее источников и приемников
	// - если минимальный номер подграфов связанных вершин меньше, чем номер подграфа самой вершины i,
	//	 то присваиваем вершине i этот минимальный номер подграфа
	// - повторяем в цикле действия 2 и 3 до тех пор, пока на очередной итерации ни у одной вершины не изменится номер ее подграфа.
	// Т.е. минимальный номер вершины в каждом подграфе как бы начинает "расползаться" по этому подграфу - от этой вершины
	// сначала "переходит" на смежные вершины, потом на их смежные вершины и т.д, пока не "займет" весь подграф.
	// В результате каждый подграф будет иметь свой уникальный номер, равный номеру минимальной вершины, входящий в него.
	// Затем сделаем сквозную нумерацию этих подграфов (как написано выше).
	// Например, есть исходный граф ((4-2-1-7) (6) (5-3)):
	// - найдем в нем три подграфа с условными номерами 1, 6 и 3
	// - затем присвоим им номера 0, 2 и 1 соответственно.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К КАК НомерУзла,
	|	Т.К КАК НомерПодграфа
	|ПОМЕСТИТЬ ВТУзлыПодграфов
	|ИЗ
	|	Данные КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ключ КАК НомерУзла,
	|	Т.Источник КАК СвязанныйУзел,
	|	ИСТИНА КАК ЭтоИсточник
	|ПОМЕСТИТЬ ВТСвязиУзлов
	|ИЗ
	|	Источники КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ключ,
	|	Т.Приемник,
	|	ЛОЖЬ
	|ИЗ
	|	Приемники КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СвязанныйУзел,
	|	ЭтоИсточник";
	
	Запрос.Выполнить(); // создание ВТУзлыПодграфов и ВТСвязиУзлов
	
	ЕстьИзменения = Истина;
	КоличествоИтерацийПоискаПодграфов = 0;
	
	Пока ЕстьИзменения Цикл
		
		КоличествоИтерацийПоискаПодграфов = КоличествоИтерацийПоискаПодграфов + 1;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиУзлов.НомерУзла КАК НомерУзла,
		|	МИНИМУМ(Т.НомерПодграфа) КАК НомерПодграфа
		|ПОМЕСТИТЬ ВТПодграфыСвязанныхУзлов
		|ИЗ
		|	ВТУзлыПодграфов КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСвязиУзлов КАК СвязиУзлов
		|		ПО Т.НомерУзла = СвязиУзлов.СвязанныйУзел
		|
		|СГРУППИРОВАТЬ ПО
		|	СвязиУзлов.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.НомерУзла КАК НомерУзла,
		|	ПодграфыСвязанныхУзлов.НомерПодграфа КАК НомерПодграфа
		|ПОМЕСТИТЬ ВТИзмененныеПодграфы
		|ИЗ
		|	ВТУзлыПодграфов КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодграфыСвязанныхУзлов КАК ПодграфыСвязанныхУзлов
		|		ПО Т.НомерУзла = ПодграфыСвязанныхУзлов.НомерУзла
		|ГДЕ
		|	ПодграфыСвязанныхУзлов.НомерПодграфа < Т.НомерПодграфа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерУзла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПодграфыСвязанныхУзлов";
		
		Запрос.Выполнить(); // создание ВТИзмененныеПодграфы
		
		ЕстьИзменения = (РазмерВременнойТаблицы(ПараметрыРасчета, "ВТИзмененныеПодграфы") > 0);
		
		Если ЕстьИзменения Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.НомерУзла,
			|	ВЫБОР КОГДА ИзмененныеПодграфы.НомерУзла ЕСТЬ NULL 
			|		ТОГДА Т.НомерПодграфа
			|		ИНАЧЕ ИзмененныеПодграфы.НомерПодграфа
			|	КОНЕЦ КАК НомерПодграфа
			|ПОМЕСТИТЬ ВТНовыеУзлыПодграфов
			|ИЗ
			|	ВТУзлыПодграфов КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененныеПодграфы КАК ИзмененныеПодграфы
			|		ПО Т.НомерУзла = ИзмененныеПодграфы.НомерУзла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТУзлыПодграфов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.НомерУзла,
			|	Т.НомерПодграфа
			|ПОМЕСТИТЬ ВТУзлыПодграфов
			|ИЗ
			|	ВТНовыеУзлыПодграфов КАК Т
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерУзла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТНовыеУзлыПодграфов";
			
			Запрос.Выполнить(); // обновление ВТУзлыПодграфов
			
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИзмененныеПодграфы");
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерПодграфа КАК НомерПодграфа,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла) КАК КоличествоУзлов,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА СвязиУзлов.СвязанныйУзел ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЧИСЛО(15,0))) КАК КоличествоСвязей,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР КОГДА СвязиУзлов.СвязанныйУзел ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ЧИСЛО(15,0))) КАК ЗначениеРазделителя
	|ПОМЕСТИТЬ ВТПодграфы
	|ИЗ
	|	ВТУзлыПодграфов КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСвязиУзлов КАК СвязиУзлов
	|		ПО Т.НомерУзла = СвязиУзлов.СвязанныйУзел
	|			И СвязиУзлов.ЭтоИсточник = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерПодграфа";
	
	Запрос.Выполнить(); // создание ВТПодграфы
	
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"", // разделитель
		"", // ресурсы
		"КоличествоСвязей УБЫВ, КоличествоУзлов УБЫВ, НомерПодграфа", // порядок
		"НовыйНомерПодграфа", // номер
		"НомерПодграфа", // индекс
		"ЗначениеРазделителя"); // накопление
	
	ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТПодграфы");
	
	#КонецОбласти
	
	#Область РасчетНовыхНомеровУзлов
	
	// Рассчитаем новые номера вершин исходного графа:
	// - упорядочим все вершины
	// - обойдем получившийся результат и последовательно пронумеруем вершины от 0 до (количество вершин - 1).
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерУзла КАК НомерУзла,
	|	СУММА(Т.КоличествоПриемников) КАК КоличествоПриемников,
	|	СУММА(Т.КоличествоИсточников) КАК КоличествоИсточников
	|ПОМЕСТИТЬ ВТОписаниеУзлов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.НомерУзла КАК НомерУзла,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Приемники.Приемник) КАК КоличествоПриемников,
	|		0 КАК КоличествоИсточников
	|	ИЗ
	|		ВТУзлыПодграфов КАК Т
	|			ЛЕВОЕ СОЕДИНЕНИЕ Приемники КАК Приемники
	|			ПО Т.НомерУзла = Приемники.Ключ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.НомерУзла
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.НомерУзла,
	|		0,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Источники.Источник)
	|	ИЗ
	|		ВТУзлыПодграфов КАК Т
	|			ЛЕВОЕ СОЕДИНЕНИЕ Источники КАК Источники
	|			ПО Т.НомерУзла = Источники.Ключ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.НомерУзла) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Подграфы.ЗначениеРазделителя / &КоличествоСтрокВТЗ КАК ЧИСЛО(15,0)) КАК ЗначениеРазделителя,
	|	Подграфы.НомерПодграфа 			КАК НомерПодграфа,
	|	Подграфы.НовыйНомерПодграфа 	КАК НовыйНомерПодграфа,
	|	Т.НомерУзла 					КАК НомерУзла,
	|	Т.НомерУзла 					КАК НовыйНомерУзла,
	|	ПорядокУзлов.Порядок 			КАК Порядок
	|ПОМЕСТИТЬ ВТНовыеНомераУзлов
	|ИЗ
	|	ВТОписаниеУзлов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУзлыПодграфов КАК УзлыПодграфов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПодграфы КАК Подграфы
	|			ПО УзлыПодграфов.НомерПодграфа = Подграфы.НомерПодграфа
	|		ПО Т.НомерУзла = УзлыПодграфов.НомерУзла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
	|		ПО Т.НомерУзла = ПорядокУзлов.НомерУзла";
	
	Запрос.Выполнить(); // создание ВТОписаниеУзлов, ВТНовыеНомераУзлов
	
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"ЗначениеРазделителя", // разделитель
		"", // ресурсы
		"НовыйНомерПодграфа, Порядок, НомерУзла", // порядок
		"НовыйНомерУзла", // номер
		"НомерУзла", // индекс
		"", // накопление
		Ложь); // не подбирать разделитель
	
	ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТНовыеНомераУзлов");
		
	#КонецОбласти
	
	#Область ИзменениеНумерацииВТаблицах
	
	// Заменим старые номера вершин на новые в служебных временных таблицах Данные, Источники, Приемники.
	// В таблицах Источники и Приемники заполним поле Порядок.
	// Это поле относятся к колонкам "Источник" и "Приемник" и предназначено для их сортировки по ФИФО.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерУзла 			 КАК Ключ,
	|	Т.СвязанныйУзел 		 КАК Источник,
	|	ПорядокУзлов.Порядок 	 КАК Порядок
	|ПОМЕСТИТЬ Источники_Временная
	|ИЗ
	|	ВТСвязиУзлов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
	|		ПО Т.СвязанныйУзел = ПорядокУзлов.НомерУзла
	|			И Т.ЭтоИсточник = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеНомераКлючей.НовыйНомерУзла 	 КАК Ключ,
	|	НовыеНомераИсточников.НовыйНомерУзла КАК Источник,
	|	Т.Порядок 				 			 КАК Порядок
	|ПОМЕСТИТЬ Источники
	|ИЗ
	|	Источники_Временная КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераКлючей
	|		ПО Т.Ключ = НовыеНомераКлючей.НомерУзла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераИсточников
	|		ПО Т.Источник = НовыеНомераИсточников.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Источники_Временная";
	
	Запрос.Выполнить(); // обновление Источники
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерУзла 			 КАК Ключ,
	|	Т.СвязанныйУзел 		 КАК Приемник,
	|	ПорядокУзлов.Порядок 	 КАК Порядок
	|ПОМЕСТИТЬ Приемники_Временная
	|ИЗ
	|	ВТСвязиУзлов КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокУзлов КАК ПорядокУзлов
	|		ПО Т.СвязанныйУзел = ПорядокУзлов.НомерУзла
	|			И (Т.ЭтоИсточник = ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Приемники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеНомераКлючей.НовыйНомерУзла 	 КАК Ключ,
	|	НовыеНомераПриемников.НовыйНомерУзла КАК Приемник,
	|	Т.Порядок 				 			 КАК Порядок
	|ПОМЕСТИТЬ Приемники
	|ИЗ
	|	Приемники_Временная КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераКлючей
	|		ПО Т.Ключ = НовыеНомераКлючей.НомерУзла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомераПриемников
	|		ПО Т.Приемник = НовыеНомераПриемников.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Приемники_Временная";
	
	Запрос.Выполнить(); // обновление Приемники
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьРазличия
	|ИЗ
	|	ВТНовыеНомераУзлов КАК Т
	|ГДЕ
	|	Т.НомерУзла <> Т.НовыйНомерУзла";
	
	ЕстьИзменения = НЕ Запрос.Выполнить().Пустой();
	
	Если ЕстьИзменения Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ Данные_Временная
		|ИЗ
		|	Данные КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Параметр1
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Данные_Временная КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНовыеНомераУзлов КАК НовыеНомера
		|		ПО Т.К = НовыеНомера.НомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	К
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные_Временная";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр", "%");
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, ИменаКолонокТаблицыДанные);
		
		Запрос.Выполнить(); // обновление Данные
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФормированиеСтатистикиГрафа
	
	// Создадим новые служебные таблицы ОписаниеПодграфов и ОписаниеУзловПодграфов.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НовыйНомерУзла 					КАК НомерУзла,
	|	Т.НовыйНомерПодграфа 				КАК НомерПодграфа,
	|	Т.Порядок							КАК Порядок,
	|	ОписаниеУзлов.КоличествоПриемников 	КАК КоличествоПриемников,
	|	ОписаниеУзлов.КоличествоИсточников 	КАК КоличествоИсточников
	|ПОМЕСТИТЬ ОписаниеУзловПодграфов
	|ИЗ
	|	ВТНовыеНомераУзлов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОписаниеУзлов КАК ОписаниеУзлов
	|		ПО Т.НомерУзла = ОписаниеУзлов.НомерУзла
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	0 										КАК НомерЗаданияРасчета,
	|	Т.НомерПодграфа 						КАК НомерПодграфа,
	|	СУММА(Т.КоличествоИсточников) 			КАК КоличествоСвязей,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла) 		КАК КоличествоУзлов,
	|	СУММА(Т.КоличествоИсточников)
	|	  + КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерУзла)	КАК ВесПодграфа,
	|	МИНИМУМ(Т.НомерУзла) 					КАК МинимальныйНомерУзла,
	|	МАКСИМУМ(Т.НомерУзла) 					КАК МаксимальныйНомерУзла,
	|	МАКСИМУМ(Т.КоличествоПриемников) 		КАК МаксимумПриемниковУзла,
	|	МАКСИМУМ(Т.КоличествоИсточников) 		КАК МаксимумИсточниковУзла
	|ПОМЕСТИТЬ ОписаниеПодграфов
	|ИЗ
	|	ОписаниеУзловПодграфов КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерПодграфа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерПодграфа";
	
	Запрос.Выполнить(); // создание ОписаниеУзловПодграфов и ОписаниеПодграфов
	
	// Выведем в протокол подробное описание графа.
	
	ОписаниеГрафа = НСтр("ru = 'Описание цепочек (графа) для расчета:
	|	узлов - %01; дуг - %02; макс. исходящих дуг - %03; макс. входящих дуг - %04;
	|	содержит несвязанных подграфов - %05, в т.ч. тривиальных (из одного узла) - %06;
	|	макс. узлов в одном подграфе - %07; макс. дуг в одном подграфе - %08;
	|	выполнено итераций поиска подграфов - %09';
	|en = 'Chain (graph) description for calculation:
	|	nodes - %01; arcs - %02; max. outgoing arcs - %03; max. incoming arcs - %04;
	|   	contains disconnected subgraphs - %05, including trivial ones (out of one node) - %06;
	|	max. nodes in one subgraph - %07; max. arcs in one subgraph - %08;
	|	completed iterations of subgraph search - %09'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Запрос.УстановитьПараметр("КоличествоИтерацийПоискаПодграфов", КоличествоИтерацийПоискаПодграфов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 						 КАК НомерПараметра,
	|	СУММА(Т.КоличествоУзлов) КАК ЗначениеПараметра
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СУММА(Т.КоличествоСвязей)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	МАКСИМУМ(Т.МаксимумПриемниковУзла)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	МАКСИМУМ(Т.МаксимумИсточниковУзла)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5,
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	КОЛИЧЕСТВО(*)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|ГДЕ
	|	Т.КоличествоУзлов = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7,
	|	МАКСИМУМ(Т.КоличествоУзлов)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	8,
	|	МАКСИМУМ(Т.КоличествоСвязей)
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	9,
	|	&КоличествоИтерацийПоискаПодграфов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПараметра";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеГрафа = СтрЗаменить(
			ОписаниеГрафа,
			"%" + Формат(Выборка.НомерПараметра, "ЧЦ=2; ЧВН="),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ЗначениеПараметра));
	КонецЦикла;
	
	ПараметрыРасчета.РаспределениеПартий.Вставить("ОписаниеГрафа", ОписаниеГрафа);
	
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеГрафа, ОписаниеГрафа);
	
	#КонецОбласти
	
	// Уничтожим ненужные временные таблицы.
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(
		ПараметрыРасчета,
		СуществующиеВТ + ?(ЗначениеЗаполнено(СуществующиеВТ), ", ", "") + "ОписаниеПодграфов");
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, НовыеВТ);
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

Процедура СформироватьУжеИзвестныеРасчетныеПартии(ПараметрыРасчета, ОптимизацииДанныхНеБудет)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Выберем узлы, у которых нет источников.
	// По таким узлам можно сразу сформировать расчетные партии, т.к. они уже не изменятся.
	// Узлы, у которых нет приемников, можно сразу удалить, т.к. они не нужны для дальнейшего распределения.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К КАК К,
	|	ВЫБОР КОГДА МАКСИМУМ(Т.ЕстьПриемники) = ЛОЖЬ
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалять
	|ПОМЕСТИТЬ ОбрабатываемыеУзлы
	|ИЗ
	|(ВЫБРАТЬ
	|	Т.К,
	|	Т.РасчетЗавершен,
	|	ЛОЖЬ КАК ЕстьИсточники,
	|	ЛОЖЬ КАК ЕстьПриемники
	|ИЗ
	|	Данные КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ключ КАК К,
	|	ЛОЖЬ КАК РасчетЗавершен,
	|	ИСТИНА КАК ЕстьИсточники,
	|	ЛОЖЬ КАК ЕстьПриемники
	|ИЗ
	|	Источники КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ключ КАК К,
	|	ЛОЖЬ КАК РасчетЗавершен,
	|	ЛОЖЬ КАК ЕстьИсточники,
	|	ИСТИНА КАК ЕстьПриемники
	|ИЗ
	|	Приемники КАК Т
	|) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.К
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.ЕстьИсточники) = ЛОЖЬ
	|	И (МАКСИМУМ(Т.ЕстьПриемники) = ЛОЖЬ
	|		ИЛИ МАКСИМУМ(Т.РасчетЗавершен) = ИСТИНА)
	|ИНДЕКСИРОВАТЬ ПО
	|	Т.К
	|";
	
	Запрос.Выполнить();
	
	КоличествоУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, "ОбрабатываемыеУзлы");
	
	Если КоличествоУзлов = 0 Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОбрабатываемыеУзлы");
		Возврат;
	КонецЕсли;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ДанныеДляРасчетныхПартий
	|ИЗ
	|	Данные КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбрабатываемыеУзлы КАК Отбор
	|	ПО Т.К = Отбор.К";
	
	Запрос.Выполнить();
	
	ИмяРегистра = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.ИмяРегистра;
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		СформироватьДвиженияПоРегиструПоДаннымВременнойТаблицы(
			ПараметрыРасчета,
			ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.ИмяРегистра,
			"ДанныеДляРасчетныхПартий",
			,
			Ложь,
			Истина);
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
		ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
		
	Иначе
		
		СформироватьДвиженияВоВременнойТаблицеПоДругойВременнойТаблице(ПараметрыРасчета, "ДанныеДляРасчетныхПартий", Истина);
		
	КонецЕсли;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ДанныеДляРасчетныхПартий");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.К
	|ПОМЕСТИТЬ ВсеУдаляемыеУзлы
	|ИЗ
	|	ОбрабатываемыеУзлы КАК Т
	|ГДЕ
	|	Т.Удалять";
	
	Запрос.Выполнить();
	
	КоличествоУдаляемых = РазмерВременнойТаблицы(ПараметрыРасчета, "ВсеУдаляемыеУзлы");
	
	Если ОптимизацииДанныхНеБудет И КоличествоУдаляемых > 0 Тогда
		ОкончаниеОптимизацииДанных(ПараметрыРасчета, Запрос, Истина);
	КонецЕсли;
	
	// Поместим в протокол расчета статистику по оптимизации данных.
	ОписаниеЭтапа = НСтр("ru = 'Предварительное формирование движений:
	|	всего %1, в т.ч. не участвующих в дальнейшем расчете %2';
	|en = 'Preliminary generation of records:
	|	total %1, including those not included in further calculation %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеЭтапа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеЭтапа,
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(КоличествоУзлов),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(КоличествоУдаляемых));
		
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеЭтапа);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОбрабатываемыеУзлы, ВсеУдаляемыеУзлы");
	
КонецПроцедуры

Процедура ОкончаниеОптимизацииДанных(ПараметрыРасчета, Запрос, ТолькоУдалениеУзловБезСвязей)
	
	КоличествоУдаляемыхУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, "ВсеУдаляемыеУзлы");
	
	Если КоличествоУдаляемыхУзлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии; // ТаблицаЗначений
	КолонкиТаблицыДанных = РасчетныеПартии.Колонки;
	
	// Поместим в таблицу НовыеДанные только те строки таблицы Данные, расчет которых даст результат.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ НовыеДанные
	|ИЗ
	|	Данные КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВсеУдаляемыеУзлы КАК Отбор
	|	ПО Т.К = Отбор.К
	|ГДЕ
	|	Отбор.К ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Данные";
	
	ИменаКолонокТаблицыДанные = "";
	
	Для Каждого ТекущаяКолонка Из КолонкиТаблицыДанных Цикл
		ИменаКолонокТаблицыДанные = ИменаКолонокТаблицыДанные + ?(ИменаКолонокТаблицыДанные = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "*", ИменаКолонокТаблицыДанные);
	
	Запрос.Выполнить();
	
	// Выполним нумерацию строк таблицы данных.
	ПараметрыНумерации = ПараметрыРасчета.РаспределениеПартий.ПараметрыНумерации;
	
	Если ЗначениеЗаполнено(ПараметрыНумерации) Тогда
		
		Если ТолькоУдалениеУзловБезСвязей Тогда
			ПараметрыНумерации.ИмяТаблицыСтаройНумерации = "ПредыдущаяНумерацияСтрок";
		КонецЕсли;
		
		ЗаполнитьНомераСтрокВременнойТаблицы(
			ПараметрыРасчета,
			ПараметрыНумерации,
			"НовыеДанные",
			"Данные");
		
		Если ТолькоУдалениеУзловБезСвязей Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.НумерацияИзменилась
			|ИЗ
			|	ПредыдущаяНумерацияСтрок КАК Т
			|ГДЕ
			|	Т.НумерацияИзменилась";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				// Заменим в таблицах Источники и Приемники старые номера узлов на новые
				Запрос.Текст =
				"ВЫБРАТЬ
				|	СтараяНумерация.К КАК Ключ,
				|	Т.Источник КАК Источник,
				|	Т.Порядок КАК Порядок
				|ПОМЕСТИТЬ ИсточникиИзмененная
				|ИЗ
				|	Источники КАК Т
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредыдущаяНумерацияСтрок КАК СтараяНумерация
				|		ПО Т.Ключ = СтараяНумерация.ПолеСтаройНумерации
				|ИНДЕКСИРОВАТЬ ПО
				|	Источник
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|УНИЧТОЖИТЬ Источники
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	СтараяНумерация.К КАК Источник,
				|	Т.Порядок КАК Порядок
				|ПОМЕСТИТЬ Источники
				|ИЗ
				|	ИсточникиИзмененная КАК Т
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредыдущаяНумерацияСтрок КАК СтараяНумерация
				|		ПО Т.Источник = СтараяНумерация.ПолеСтаройНумерации
				|ИНДЕКСИРОВАТЬ ПО
				|	Ключ
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|УНИЧТОЖИТЬ ИсточникиИзмененная
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|УНИЧТОЖИТЬ Приемники
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ
				|	Т.Источник КАК Ключ,
				|	Т.Ключ КАК Приемник,
				|	Т.Порядок КАК Порядок
				|ПОМЕСТИТЬ Приемники
				|ИЗ
				|	Источники КАК Т
				|ИНДЕКСИРОВАТЬ ПО
				|	Ключ
				|";
				
				ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,,
					НСтр("ru = '(перенумерация таблиц связей)';
						|en = '(renumber link tables)'", ОбщегоНазначения.КодОсновногоЯзыка()));
				
			КонецЕсли;
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, ПараметрыНумерации.ИмяТаблицыСтаройНумерации);
			
			ПараметрыНумерации.ИмяТаблицыСтаройНумерации = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ТолькоУдалениеУзловБезСвязей Тогда
		// Заново построим цепочки для новых данных.
		ПостроитьЦепочкиДвижений(ПараметрыРасчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АлгоритмРасчетаПартий

// Основная процедура расчета - РассчитатьПартииПоЦепочкам.
// В ней выполняется разделение партий на порции:
//	- одна для основного потока расчета,
//	- остальные для фоновых расчетов (если они используются).
// Порции для фонового расчета передаются в процедуру ЗапуститьРасчетПартийВФоне, которая стартует фоновые задания с
// методом РассчитатьПартииВФоне. Порция для основного потока расчета передается в процедуру РассчитатьПартииНеВФоне.
// Далее процедуры РассчитатьПартииВФоне и РассчитатьПартииНеВФоне подготавливают данные к расчету
// и вызывают процедуру РассчитатьПартииПоГруппамПодграфов, которая выполняет расчет по несвязанным между собой подграфам,
// из которой для обхода подграфов и расчета их узлов вызывается процедура РассчитатьПартиюРекурсивно.
// По окончании расчета в РассчитатьПартииПоЦепочкам собираются вместе результаты расчета основного потока и фоновых расчетов.

#Область ЗапускРасчета

Процедура РассчитатьПартииПоЦепочкам(ПараметрыРасчета) Экспорт
	
	ПараметрыРасчета.РаспределениеПартий.Вставить("КоличествоСтрокДанных",
		РазмерВременнойТаблицы(ПараметрыРасчета, "Данные"));
	
	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные");
	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Источники");
	ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, "Приемники");
	
	Если ПараметрыРасчета.РаспределениеПартий.КоличествоСтрокДанных = 0 Тогда
		ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "РассчитатьПартииПоЦепочкам");
		Возврат;
	КонецЕсли;
	
	ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета);
	
	КоличествоФЗ = ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗРасчетаПартий;
	
	ИмяТаблицыОписаниеПодграфов = "ОписаниеПодграфов";
	МногопоточныйРасчет = Ложь;
	
	Если НЕ ПараметрыРасчета.ИнформационнаяБазаФайловая
	 И НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) И КоличествоФЗ > 0
	 И ПараметрыРасчета.РаспределениеПартий.КоличествоСтрокДанных > ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий Тогда
		
		ПараметрыРасчета.ТаблицаЗаданийРасчета.Очистить();
		ПараметрыРасчета.ОбщееКоличествоФЗРасчета = 0;
		МногопоточныйРасчет = Истина;
		
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
			ПараметрыРасчета,
			"ОписаниеПодграфов",
			НСтр("ru = '(разделение на порции для фоновых заданий)';
				|en = '(division into portions for background jobs)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Разобьем данные для расчета на (КоличествоФЗ + 1) порции.
		ОбъемДанных = АгрегатнаяФункцияПоляВременнойТаблицы(
			ПараметрыРасчета,
			"ОписаниеПодграфов",
			"ВесПодграфа");
		РазмерПорции = Цел(ОбъемДанных/(КоличествоФЗ + 1)) + 1;
		
		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
			РазмерПорции,
			"ВесПодграфа",
			"МинимальныйНомерУзла",
			"НомерЗаданияРасчета");
		
		РазделитьВременнуюТаблицуНаПорции(
			ПараметрыРасчета,
			ПараметрыРазделения,
			"ОписаниеПодграфов");
			
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		// Порции начиная со второй передадим для расчета в фоновые задания.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(Т.НомерЗаданияРасчета) КАК МинимальныйНомер,
		|	МАКСИМУМ(Т.НомерЗаданияРасчета) КАК МаксимальныйНомер
		|ИЗ
		|	ОписаниеПодграфов КАК Т";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ПараметрыФоновогоРасчета = СформироватьПараметрыФоновогоРасчета(ПараметрыРасчета);
		
		Для НомерПорции = Выборка.МинимальныйНомер + 1 По Мин(КоличествоФЗ + 1, Выборка.МаксимальныйНомер) Цикл
			
			ПараметрыРасчета.ОбщееКоличествоФЗРасчета = ПараметрыРасчета.ОбщееКоличествоФЗРасчета + 1;
			
			ЗапуститьРасчетПартийВФоне(
				ПараметрыРасчета,
				ПараметрыФоновогоРасчета,
				НомерПорции,
				?(НомерПорции = КоличествоФЗ + 1, Выборка.МаксимальныйНомер, НомерПорции));
			
		КонецЦикла;
		
		// Остальные данные рассчитаем без фоновых заданий.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ОписаниеПодграфовДляРасчетаНеВФоне
		|ИЗ
		|	ОписаниеПодграфов КАК Т
		|ГДЕ
		|	Т.НомерЗаданияРасчета = &МинимальныйНомерПорции
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ОписаниеПодграфов";
		
		Запрос.УстановитьПараметр("МинимальныйНомерПорции", Выборка.МинимальныйНомер);
		
		Запрос.Выполнить();
		
		ИмяТаблицыОписаниеПодграфов = "ОписаниеПодграфовДляРасчетаНеВФоне";
		
	КонецЕсли;
	
	РассчитатьПартииНеВФоне(ПараметрыРасчета, ИмяТаблицыОписаниеПодграфов);
	
	Если МногопоточныйРасчет Тогда
		
		ПолучитьРезультатыФоновыхРасчетовПартий(ПараметрыРасчета);
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОписаниеПодграфовДляРасчетаНеВФоне");
		
	КонецЕсли;
	
	ЗавершитьЗамерРаспределенияПартий(ПараметрыРасчета);
	
	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "РассчитатьПартииПоЦепочкам");
	
КонецПроцедуры

Процедура РассчитатьПартииНеВФоне(ПараметрыРасчета, ИмяТаблицыОписаниеПодграфов)
	
	// Разделим подграфы на группы - в одну группу целиком входит один или несколько подграфов.
	ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
		ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий,
		"КоличествоУзлов",
		"МинимальныйНомерУзла");
	
	РазделитьВременнуюТаблицуНаПорции(
		ПараметрыРасчета,
		ПараметрыРазделения,
		ИмяТаблицыОписаниеПодграфов);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерПорции,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерПодграфа) КАК КоличествоПодграфов,
	|	СУММА(Т.КоличествоУзлов) КАК КоличествоУзлов,
	|	СУММА(Т.КоличествоСвязей) КАК КоличествоСвязей,
	|	МИНИМУМ(Т.МинимальныйНомерУзла) КАК МинимальныйНомерУзла,
	|	МАКСИМУМ(Т.МаксимальныйНомерУзла) КАК МаксимальныйНомерУзла
	|ИЗ
	|	ИмяТаблицыОписаниеПодграфов КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерПорции";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОписаниеПодграфов", ИмяТаблицыОписаниеПодграфов);
	
	ВыборкаГруппаПодграфов = Запрос.Выполнить().Выбрать();
	
	// Рассчитаем партии.
	РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);
	
КонецПроцедуры

Процедура РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов)
	
	НомерПорции = 0;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ЕстьСторно = ОписаниеДвижений.Свойство("ЕстьСторно");
	ЕстьВыполненРасчетПартий = ОписаниеДвижений.Свойство("ЕстьВыполненРасчетПартий");
	
	Пока СледующийЭлементКоллекции(ВыборкаГруппаПодграфов) Цикл
		
		НачалоЗамераРасчетаГруппыПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);
		
		Данные = Новый Структура;
		Данные.Вставить("ЦепочкиДвижений", Новый Соответствие);
		Данные.Вставить("СтрокиЦепочек",   Новый ТаблицаЗначений);
		Данные.Вставить("Приходы", 		   Новый Соответствие); // буфер копий партий для покрытия расходов
		Данные.Вставить("Расходы", 		   Новый Соответствие); // буфер не рассчитанных партий для расчета на следующих итерациях
		Данные.Вставить("СтрокиПриходов",  ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки());
		Данные.Вставить("СтрокиРасходов",  Данные.СтрокиПриходов.СкопироватьКолонки());
		Данные.Вставить("ИндексыРасходов", Новый Массив);
		Данные.Вставить("ПройденныйПуть",  Новый Соответствие); // используется для прерывания циклов
		Данные.Вставить("УзлыБезДанных",   Новый Соответствие); // используется для исключения обхода узлов, для которых заведомо понятно, что для них еще НетДанных
			// перед каждым запуском расчета очередной порции данных этот список надо очищать, т.к. в новой порции данные для этих узлов уже могут быть
		Данные.Вставить("ИндексСтроки",    Неопределено);
		
		СтрокиЦепочек = Данные.СтрокиЦепочек;
		Колонки = СтрокиЦепочек.Колонки;
		Колонки.Добавить("Источники", 	   Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("Приемники", 	   Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("ПройденныйПуть", Новый ОписаниеТипов("Соответствие"));
		
		Данные.Вставить("ПараметрыОбхода", Новый Структура); // описание текущей позиции в обходе данных для расчета
		Данные.ПараметрыОбхода.Вставить("ИндексСтроки",     ВыборкаГруппаПодграфов.МинимальныйНомерУзла - 1);
		Данные.ПараметрыОбхода.Вставить("НачальнаяЦепочка", 0);
		Данные.ПараметрыОбхода.Вставить("КонечнаяЦепочка",  ВыборкаГруппаПодграфов.МинимальныйНомерУзла - 1);
		Данные.ПараметрыОбхода.Вставить("НомерПорции",      НомерПорции); // нужно для фонового расчета
		
		СтатистикаРасчета = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
		СтатистикаРасчета.КоличествоДанных = СтатистикаРасчета.КоличествоДанных + ВыборкаГруппаПодграфов.МаксимальныйНомерУзла - Данные.ПараметрыОбхода.ИндексСтроки + 1;
		
		Пока Данные.ПараметрыОбхода.ИндексСтроки < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Цикл
			
			Данные.ПараметрыОбхода.ИндексСтроки = Данные.ПараметрыОбхода.ИндексСтроки + 1;
			
			Если Данные.ПараметрыОбхода.ИндексСтроки > Данные.ПараметрыОбхода.КонечнаяЦепочка Тогда
				// Прочитаем следующую порцию данных.
				ВыборкаДанных = СледующаяПорцияПартийДляРасчета(ПараметрыРасчета, ВыборкаГруппаПодграфов, Данные);
				Данные.УзлыБезДанных.Очистить();
			КонецЕсли;
			
			Если НЕ СледующийЭлементКоллекции(ВыборкаДанных) ИЛИ ВыборкаДанных.К <> Данные.ПараметрыОбхода.ИндексСтроки Тогда
				
				ТекстДляПротокола = НСтр("ru = 'Ошибка нумерации данных для расчета партий';
										|en = 'An error occurred while numbering data for lot calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
				
				Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда
					
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
						ПараметрыРасчета,
						Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
						ТекстДляПротокола);
					
					ЗарегистрироватьПроблемуВыполненияРасчета(
						ПараметрыРасчета,
						ВыборкаДанных.Организация,
						НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
							|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ТекстДляПротокола);
						
					ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
					
				КонецЕсли;
				
				ВызватьИсключение ТекстДляПротокола;
				
			КонецЕсли;
			
			ЦепочкаДвижений = Данные.ЦепочкиДвижений[Данные.ПараметрыОбхода.ИндексСтроки];
			
			Если ЦепочкаДвижений = Неопределено Тогда
				
				// Расчетная партия уже сформирована
				
			ИначеЕсли ВыборкаДанных.РасчетЗавершен Тогда
				
				Если ЦепочкаДвижений.Приемники.Количество() > 0
				// Документ, для которого выполнен расчет партий при предварительном закрытии месяца, не может быть источником
				// для других документов. Такие движения учтены при формировании таблицы расчетных остатков и 
				// расчетные остатки являются источниками.
				 И (НЕ ЕстьВыполненРасчетПартий
				 	ИЛИ ПараметрыРасчета.ВосстанавливатьХронологическуюПоследовательностьСписанияПартий
					ИЛИ ЕстьВыполненРасчетПартий
					// Исключаем движения текущего периода для которых уже выполнен расчет партий.
					И НЕ (ВыборкаДанных.ВыполненРасчетПартий
						И ВыборкаДанных.Период >= ПараметрыРасчета.РасчетныйПериод.НачалоПериода)) Тогда
					
					Приход = Данные.СтрокиПриходов.Добавить();
					ЗаполнитьЗначенияСвойств(Приход, ВыборкаДанных);
					
					ИнвертироватьПоказатели(Приход, ОписаниеДвижений.Показатели,
						Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
						ИЛИ ЕстьСторно И Приход.ЭтоСторно);
						
					МассивПриходовПоИндексу = Новый Массив;
					МассивПриходовПоИндексу.Добавить(Приход);
					Данные.Приходы.Вставить(Данные.ПараметрыОбхода.ИндексСтроки, МассивПриходовПоИндексу);
					
				КонецЕсли;
				
				Данные.ЦепочкиДвижений.Удалить(Данные.ПараметрыОбхода.ИндексСтроки);
				Данные.СтрокиЦепочек.Удалить(ЦепочкаДвижений);
				
			Иначе
				
				Расход = Данные.СтрокиРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(Расход, ВыборкаДанных);
				
				Данные.Расходы.Вставить(Данные.ПараметрыОбхода.ИндексСтроки, Расход);
				Данные.ИндексыРасходов.Добавить(Данные.ПараметрыОбхода.ИндексСтроки);
				
			КонецЕсли;
			
			Если Данные.ПараметрыОбхода.ИндексСтроки = ВыборкаГруппаПодграфов.МаксимальныйНомерУзла // последняя итерация цикла
			 ИЛИ (Данные.ПараметрыОбхода.ИндексСтроки - ВыборкаГруппаПодграфов.МинимальныйНомерУзла > 0 // не первая итерация цикла
			 	И (Данные.ПараметрыОбхода.ИндексСтроки + 1 - ВыборкаГруппаПодграфов.МинимальныйНомерУзла) % ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий = 0) Тогда
				
				Данные.ИндексСтроки = Данные.ПараметрыОбхода.ИндексСтроки;
				
				Если Данные.Приходы.Количество() > 0  // есть записи по которым расчет завершен
				 ИЛИ Данные.ПараметрыОбхода.ИндексСтроки = ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Тогда
					
					Для Каждого ИндексРасхода Из Данные.ИндексыРасходов Цикл
						
						Если Данные.Расходы[ИндексРасхода] = Неопределено Тогда
							Продолжить; // строка к обсчету НЕ зарегистрирована
						КонецЕсли;
						
						БазисРасхода = Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода];
						Данные.ПройденныйПуть.Очистить();
						РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексРасхода);
						
						Если Данные.Расходы[ИндексРасхода] <> Неопределено
						 И Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода] > 0
						 И Данные.Расходы[ИндексРасхода][ОписаниеДвижений.БазисРасхода] <> БазисРасхода Тогда
							Данные.ИндексыРасходов.Добавить(ИндексРасхода);
						КонецЕсли;
						
					КонецЦикла;
					
					Данные.ИндексыРасходов.Очистить();
					Данные.УзлыБезДанных.Очистить();
					
				КонецЕсли;
				
				Если Данные.ПараметрыОбхода.ИндексСтроки < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла Тогда
					
					Для Каждого Строка Из Данные.Расходы Цикл
						Данные.ИндексыРасходов.Добавить(Строка.Ключ);
					КонецЦикла;
					
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(Данные.ИндексыРасходов);
					Список.СортироватьПоЗначению();
					Данные.ИндексыРасходов = Список.ВыгрузитьЗначения();
					
				Иначе
					
					Для Каждого Строка Из Данные.Расходы Цикл
						ДобавитьРасчетнуюПартию(ПараметрыРасчета, Строка.Значение);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НомерПорции = Данные.ПараметрыОбхода.НомерПорции;
		
		Данные.Приходы.Очистить();
		Данные.Расходы.Очистить();
		Данные.ЦепочкиДвижений.Очистить();
		Данные.СтрокиПриходов.Очистить();
		Данные.СтрокиРасходов.Очистить();
		Данные.СтрокиЦепочек.Очистить();
		Данные = Неопределено;
		
	КонецЦикла;
	
	ОкончаниеЗамераРасчетаГруппыПодграфов(ПараметрыРасчета);
	
КонецПроцедуры

// Рассчитать партию рекурсивно.
// 
// Параметры:
//  ПараметрыРасчета - Структура - Параметры расчета
//  Данные - Структура - Данные:
// * ЦепочкиДвижений - Соответствие -
// * СтрокиЦепочек - ТаблицаЗначений -:
// ** Источники - Массив -
// ** Приемники - Массив -
// ** ПройденныйПуть - Соответствие -
// * Приходы - Соответствие -
// * Расходы - Соответствие -
// * СтрокиПриходов - ТаблицаЗначений -
// * СтрокиРасходов - ТаблицаЗначений - 
// * ИндексыРасходов - Массив -
// * ПройденныйПуть - Соответствие -
// * УзлыБезДанных - Соответствие -
// * ИндексСтроки - Неопределено -
// * ПараметрыОбхода - Структура -
//  ИндексРасхода - Произвольный - Индекс расхода
// 
// Возвращаемое значение:
//  Строка - Рассчитать партию рекурсивно
Функция РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексРасхода)
	
	СтатистикаРасчета = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	СтатистикаРасчета.КоличествоДанных = СтатистикаРасчета.КоличествоДанных + 1;
	
	Если НЕ НачалоЗамераРасчетаЦепочек(ПараметрыРасчета, Данные, ИндексРасхода) Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "ПереполнениеСтека");
	КонецЕсли;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	ЦепочкаРасхода = Данные.ЦепочкиДвижений[ИндексРасхода];
	Если ЦепочкаРасхода = Неопределено Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НеТребуется");
	КонецЕсли;
	
	Источники = ЦепочкаРасхода.Источники;
	Если Источники.Количество() = 0 Тогда
		Если ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников") Тогда
			Расход = Данные.Расходы[ИндексРасхода];
			Данные.Расходы.Удалить(ИндексРасхода);
			Данные.ЦепочкиДвижений.Удалить(ИндексРасхода);
			Данные.СтрокиРасходов.Удалить(Расход);
			Данные.СтрокиЦепочек.Удалить(ЦепочкаРасхода);
		КонецЕсли;

		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетИсточников");
	КонецЕсли;
	
	Если ИндексРасхода = Данные.ПройденныйПуть[ИндексРасхода] Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "Зацикливание");
	КонецЕсли;
	
	УзлыБезДанных = Данные.УзлыБезДанных; //Соответствие
	Если УзлыБезДанных[ИндексРасхода] <> Неопределено Тогда
		Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "ОжиданиеДанных");
	КонецЕсли;
	
	ИндексСтроки = Данные.ИндексСтроки;
	Для Каждого ИндексПрихода Из Источники Цикл
		Если ИндексПрихода > ИндексСтроки Тогда
			
			Для НомерУзлаВСтеке = 0 По СтатистикаРасчета.ТекущаяГлубина - 1 Цикл
				УзлыБезДанных.Вставить(СтатистикаРасчета.СтекВызовов[НомерУзлаВСтеке], Истина);
			КонецЦикла;
			
			Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетДанных"); // еще нет всех строк для распределения
			
		КонецЕсли;
	КонецЦикла;
	
	Данные.ПройденныйПуть.Вставить(ИндексРасхода, ИндексРасхода);
	
	НовыеПриходы = Неопределено;
	
	Расход = Данные.Расходы[ИндексРасхода];
	ЕстьСторно = ОписаниеДвижений.Свойство("ЕстьСторно");
	ЕстьИсправления = ОписаниеДвижений.Свойство("ЕстьИсправления"); 
	ЭтоСторно = (Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
		ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
		ИЛИ ЕстьСторно И Расход.ЭтоСторно);
	ЭтоИсправление = (ЕстьИсправления И Расход.Сторно);
	ЭтоКорректировкаПриобретения = (Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения);
	
	ЕстьХозяйственнаяОперация = ОписаниеДвижений.Свойство("ЕстьХозяйственнаяОперация");
	ЭтоВозвратТоваровПоставщику = ЕстьХозяйственнаяОперация
		И Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление
		И Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
	
	ЕстьПоляГруппировки = ОписаниеДвижений.Свойство("ПоляГруппировки");
	
	Если ЕстьПоляГруппировки Тогда
		Для Каждого ИндексИсточника Из Источники Цикл
			Если Данные.Расходы[ИндексИсточника] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Источник = Данные.Расходы[ИндексИсточника];
			Если НЕ Источник.РасчетЗавершен Тогда
				Результат = РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексИсточника);
				Если Результат = "НетДанных" Тогда
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетДанных"); // еще нет всех строк для распределения
				ИначеЕсли Результат = "ОжиданиеДанных" Тогда
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "ОжиданиеДанных");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ТребуетсяСортировка = Ложь;
	Если Источники.Количество() > 1 И ЗначениеЗаполнено(ОписаниеДвижений.ПоляСортировки) Тогда
		
		ЗначенияПолей = Новый Структура(ОписаниеДвижений.ПоляСортировки);
		ЗаполнитьЗначенияСвойств(ЗначенияПолей, Расход);
		
		Для Каждого ПолеСортировки Из ЗначенияПолей Цикл
			Если ЗначениеЗаполнено(ПолеСортировки.Значение) Тогда
				ТребуетсяСортировка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СортироватьПоЛИФО = (Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов ИЛИ ЭтоСторно) И НЕ ЭтоИсправление И НЕ ЭтоКорректировкаПриобретения;
	СортироватьИсточникиПоФИФО_ЛИФО(Источники, ОписаниеДвижений.ПолеПорядка, Данные.Приходы, Данные.Расходы, СортироватьПоЛИФО);
	
	Если ТребуетсяСортировка Тогда
		СортироватьИсточникиПоЗначениямПолей(Источники, ЗначенияПолей, Данные.Приходы, Данные.Расходы, Расход.Регистратор,
			ЭтоСторно И Не ЭтоИсправление, ЕстьИсправления И НЕ ЭтоВозвратТоваровПоставщику, ЭтоСторно);
	КонецЕсли;
	
	Счетчик = 0;
	ВГраница = Источники.ВГраница();
	
	ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
	
	УменьшатьБазисРасхода = ОписаниеДвижений.Свойство("УменьшатьБазис");
	БазисРасходаДоРасчета = Расход[ОписаниеДвижений.БазисРасхода];
	ТекущийБазисРасхода   = БазисРасходаДоРасчета;
	ИсточникиКУдалению = Новый Массив;
	
	Пока Счетчик <= ВГраница Цикл
		
		ИндексИсточника = Источники[?(ЭтоСторно И НЕ ЭтоИсправление, ВГраница - Счетчик, Счетчик)];
		Счетчик = Счетчик + 1;
		
		МассивПриходов = Данные.Приходы[ИндексИсточника];
		Если МассивПриходов = Неопределено Тогда
			
			Если Данные.Расходы[ИндексИсточника] = Неопределено Тогда
				ИсточникиКУдалению.Добавить(ИндексИсточника);
				Продолжить;
			КонецЕсли;
			
			Источник = Данные.Расходы[ИндексИсточника];
			Если НЕ Источник.РасчетЗавершен Тогда
				Результат = РассчитатьПартиюРекурсивно(ПараметрыРасчета, Данные, ИндексИсточника);
				Если Результат = "НетДанных" Тогда
					ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НетДанных"); // еще нет всех строк для распределения
				ИначеЕсли Результат = "ОжиданиеДанных" Тогда
					ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "ОжиданиеДанных");
				КонецЕсли;
				ВГраница = Источники.ВГраница();
				Если Данные.Расходы[ИндексРасхода] = Неопределено Тогда
					ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
					Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "НеТребуется");
				КонецЕсли;
				МассивПриходов = Данные.Приходы[ИндексИсточника];
				Если МассивПриходов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				МассивПриходов = Данные.Приходы[ИндексИсточника];
				Если МассивПриходов = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СортироватьПоЛИФО = ЭтоСторно И НЕ ЭтоИсправление;
		СортироватьПриходыПоФИФО_ЛИФО(ОписаниеДвижений.ПолеПорядка, МассивПриходов, СортироватьПоЛИФО);
		
		ПриходыКУдалению = Новый Массив;
		
		КоличествоДвижений = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Количество();
		УменьшениеБазисаРасхода = 0;
		
		Для Каждого Приход Из МассивПриходов Цикл
			
			Если УменьшатьБазисРасхода Тогда
				
				Если Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходы
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыРегл
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыУпр
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыДляРаспределенияРегл
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыДляРаспределенияУпр
				 		ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОтклонениеВСтоимости
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Прошлое
						И ЗначениеЗаполнено(Приход.Номенклатура))
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов
							И ЗначениеЗаполнено(Приход.Номенклатура)
							И ОписаниеДвижений.Контекст <> "ПодготовкаДанныхДляУчетаНДСиУСН")
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОстатокСгруппированный
						И ЗначениеЗаполнено(Приход.Номенклатура))
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПартияСгруппированная
				 		И ЗначениеЗаполнено(Приход.Номенклатура))
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Остаток Тогда

					Если ОписаниеДвижений.Контекст = "ПодготовкаДанныхДляУчетаНДСиУСН"
							И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ОстатокСгруппированный
					 		ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПартияСгруппированная) Тогда
						Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;
						Если Приход.Количество <> 0 Тогда // данные о партии товара (не доп. расходы)
							УменьшениеБазисаРасхода = Мин(ТекущийБазисРасхода, Приход[ОписаниеДвижений.БазисРасхода]);
						// Могут быть только доп расходы по товарам. У таких записей нет количества.
						ИначеЕсли УменьшениеБазисаРасхода = 0 Тогда
							УменьшениеБазисаРасхода = ТекущийБазисРасхода;
						КонецЕсли;
					Иначе
						
						Если Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаРегл
						 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаУпр
						 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаДопРасходыРегл
						 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.БазаДопРасходыУпр Тогда
						 
						 	ДополнительныеСвойства = ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства;
							Если НЕ ДополнительныеСвойства.Свойство("УзлыБазыРаспределения") Тогда
								ДополнительныеСвойства.Вставить("УзлыБазыРаспределения", Новый Соответствие);
							КонецЕсли;
							
							УзлыИсточникиБазы = ДополнительныеСвойства.УзлыБазыРаспределения.Получить(Расход.К);
							
							Если УзлыИсточникиБазы = Неопределено Тогда
								УзлыИсточникиБазы = Новый Массив;
							КонецЕсли;
							
							Если УзлыИсточникиБазы.Найти(Приход.К) <> Неопределено Тогда
								Продолжить;
							КонецЕсли;
							
							УзлыИсточникиБазы.Добавить(Приход.К);
							ДополнительныеСвойства.УзлыБазыРаспределения.Вставить(Расход.К, УзлыИсточникиБазы);
								
						КонецЕсли;
						
						Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;
						
					КонецЕсли;
					
				ИначеЕсли ОписаниеДвижений.Контекст = "ПодготовкаДанныхДляУчетаНДСиУСН"
						И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Партия
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Выпуск
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпуск
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода
						ИЛИ (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Потребление
						И Расход.ТипЗаписи <> Перечисления.ТипыЗаписейПартий.Сторно
						И Расход.ТипЗаписи <> Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад)
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПотреблениеАвто
						ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ПотреблениеПроизводство) Тогда

					Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;
					
				ИначеЕсли ОписаниеДвижений.Контекст <> "ПодготовкаДанныхДляУчетаНДСиУСН"
				 И (Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпуск
				 	ИЛИ Приход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СписанияНаВыпускПостатейные) Тогда
					
					Расход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета;
					
				Иначе
					
					УменьшениеБазисаРасхода = Мин(ТекущийБазисРасхода, Приход[ОписаниеДвижений.БазисРасхода]);
					Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;
					
				КонецЕсли;
				
				Если Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			РасчетнаяПартия = ДобавитьИЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Расход, Приход, ЭтоСторно);
			
			Если Приход[ОписаниеДвижений.БазисПрихода] <= 0 Тогда
				ПриходыКУдалению.Добавить(Приход);
			КонецЕсли;
			
			Если РасчетнаяПартия.РасчетЗавершен Тогда
				Если ЦепочкаРасхода.Приемники.Количество() > 0 Тогда
					Если ЕстьПоляГруппировки Тогда
						
						Если НовыеПриходы = Неопределено Тогда
							НовыеПриходы = Данные.СтрокиПриходов.СкопироватьКолонки();
						КонецЕсли;
						НовыйПриход = НовыеПриходы.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйПриход, РасчетнаяПартия);
						ИнвертироватьПоказатели(НовыйПриход, ОписаниеДвижений.Показатели,
							НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
							ИЛИ НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
							ИЛИ ЕстьСторно И НовыйПриход.ЭтоСторно);
						
					Иначе
						
						НовыйПриход = Данные.СтрокиПриходов.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйПриход, РасчетнаяПартия);
						ИнвертироватьПоказатели(НовыйПриход, ОписаниеДвижений.Показатели,
							НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.Сторно
							ИЛИ НовыйПриход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад
							ИЛИ ЕстьСторно И НовыйПриход.ЭтоСторно);
						
						Если Данные.Приходы[ИндексРасхода] = Неопределено Тогда
							Данные.Приходы.Вставить(ИндексРасхода, Новый Массив);
						КонецЕсли;
						
						МассивДанныеПриходы = Данные.Приходы[ИндексРасхода]; //Массив
						МассивДанныеПриходы.Добавить(НовыйПриход);
						
					КонецЕсли;
				КонецЕсли;
			Иначе
				УдалитьРасчетнуюПартию(ПараметрыРасчета, РасчетнаяПартия);
			КонецЕсли;
			
			РасчетнаяПартия = Неопределено;
			
			Если НЕ УменьшатьБазисРасхода И Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии Тогда
				Если Расход.Знаменатель <= 0 Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости
			 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода Тогда
			 	// При стоимостной корректировке знаменатель может быть не заполнен. Количество всегда равно 0.
			ИначеЕсли НЕ УменьшатьБазисРасхода И Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если УменьшатьБазисРасхода
		 И КоличествоДвижений <> ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.Количество()
		 И УменьшениеБазисаРасхода <> 0 Тогда
			ТекущийБазисРасхода = ТекущийБазисРасхода - УменьшениеБазисаРасхода;
		КонецЕсли;

		Для Каждого Приход Из ПриходыКУдалению Цикл
			Индекс = МассивПриходов.Найти(Приход);
			Если Индекс <> Неопределено Тогда
				МассивПриходов.Удалить(Индекс);
			КонецЕсли;
			Данные.СтрокиПриходов.Удалить(Приход);
		КонецЦикла;
		
		Если МассивПриходов.Количество() = 0 Тогда
			
			Данные.Приходы.Удалить(ИндексИсточника);
			
			Если Данные.Расходы[ИндексИсточника] = Неопределено Тогда
				ЦепочкаПрихода = Данные.ЦепочкиДвижений[ИндексИсточника];
				Если ЦепочкаПрихода <> Неопределено Тогда
					Данные.ЦепочкиДвижений.Удалить(ИндексИсточника);
					Данные.СтрокиЦепочек.Удалить(ЦепочкаПрихода);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПриходыКУдалению.Количество() > 0 Тогда
			Данные.Приходы.Вставить(ИндексИсточника, МассивПриходов);
		КонецЕсли;
		
		Если НЕ УменьшатьБазисРасхода 
		 И (Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии
		 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией) Тогда
			Если Расход.Знаменатель <= 0 Тогда
				Прервать;
			КонецЕсли;
		 ИначеЕсли Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости
		 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода Тогда
		 	// При стоимостной корректировке знаменатель может быть не заполнен. Количество может быть равно 0.
		ИначеЕсли НЕ УменьшатьБазисРасхода И Расход[ОписаниеДвижений.БазисРасхода] <= 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если УменьшатьБазисРасхода Тогда
		Расход[ОписаниеДвижений.БазисРасхода] = ТекущийБазисРасхода;
	КонецЕсли;
	
	Если ЕстьПоляГруппировки
	 И НовыеПриходы <> Неопределено
	 И НовыеПриходы.Количество() > 0 Тогда
	 	
	 	// Существующие строки по индексу расхода добавим к новым строкам для последующей свертки.
	 	МассивПриходов = Данные.Приходы[ИндексРасхода];
	 	Если МассивПриходов <> Неопределено Тогда
	 		ПриходыКУдалению.Очистить();
	 		Для Каждого Приход Из МассивПриходов Цикл
	 			НовыйПриход = НовыеПриходы.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйПриход, Приход);
				ПриходыКУдалению.Добавить(Приход);	
	 		КонецЦикла;
	 		Для Каждого Приход Из ПриходыКУдалению Цикл
	 			Индекс = МассивПриходов.Найти(Приход);
				Если Индекс <> Неопределено Тогда
					МассивПриходов.Удалить(Индекс);
				КонецЕсли;
	 			Данные.СтрокиПриходов.Удалить(Приход);
	 		КонецЦикла;
	 	КонецЕсли;
		
		НовыеПриходы.Свернуть(ОписаниеДвижений.ПоляГруппировки, ОписаниеДвижений.ПоляСуммирования);
		
		Если Данные.Приходы[ИндексРасхода] = Неопределено Тогда
			Данные.Приходы.Вставить(ИндексРасхода, Новый Массив);
		КонецЕсли;
		
		Для Каждого Строка Из НовыеПриходы Цикл
			НовыйПриход = Данные.СтрокиПриходов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПриход, Строка);
			// Заполним базис расхода значением базиса, на который были подобраны партии.
			// - БазисРасходаДоРасчета - полный базис по строке
			// - УменьшениеБазисаРасхода - размер уменьшения базиса расхода, равен = 0 если базис расчета не уменьшался
			// - ТекущийБазисРасхода - базис расхода после подбора партий, но он уменьшается не для всех типов записей
			Если НовыйПриход[ОписаниеДвижений.БазисРасхода] = 0 Тогда
				НовыйПриход[ОписаниеДвижений.БазисРасхода] = БазисРасходаДоРасчета - 
					?(УменьшениеБазисаРасхода <> 0, ТекущийБазисРасхода, 0);
			КонецЕсли;
			МассивДанныеПриходы = Данные.Приходы[ИндексРасхода]; //Массив
			МассивДанныеПриходы.Добавить(НовыйПриход);
		КонецЦикла;
		
		НовыеПриходы = Неопределено;
		
	КонецЕсли;
	
	Если ИсточникиКУдалению.Количество() > 0 Тогда
		Для Каждого ИндексИсточника Из ИсточникиКУдалению Цикл
			ИндексВМассиве = Источники.Найти(ИндексИсточника);
			Если ИндексВМассиве <> Неопределено Тогда
				Источники.Удалить(ИндексВМассиве);
			КонецЕсли;
		КонецЦикла;
		Данные.ЦепочкиДвижений[ИндексРасхода].Источники = Источники;
	КонецЕсли;
	
	Если (Расход[ОписаниеДвижений.БазисРасхода] > 0
	 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии И Расход.Знаменатель > 0
	 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией И Расход.Знаменатель > 0
	 ИЛИ Расход.ТипЗаписи = Перечисления.ТипыЗаписейПартий.ВключениеНДСВСтоимость И Расход.Знаменатель > 0)
	 И (Источники.Количество() > 0 ИЛИ НЕ ОписаниеДвижений.Свойство("УдалятьСтрокиБезИсточников")) Тогда
		
		ИнвертироватьПоказатели(Расход, ОписаниеДвижений.Показатели, ЭтоСторно);
		
		// Недопоставка неотфактурованной поставки может быть источником для списания расхождений между поступлением и приобретением.
		// Поэтому нужно добавить такие записи в массив приходов.
		Если ОписаниеДвижений.Свойство("ЕстьХозяйственнаяОперация")
		 И (Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки
			ИЛИ Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути
			ИЛИ Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки
			ИЛИ Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути
			ИЛИ Расход.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути) Тогда
				
			НовыйПриход = Данные.СтрокиПриходов.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПриход, Расход);
			НовыйПриход.РасчетЗавершен = Истина;
			НовыйПриход.Знаменатель = Расход.Количество; 
			Если Данные.Приходы[ИндексРасхода] = Неопределено Тогда
				Данные.Приходы.Вставить(ИндексРасхода, Новый Массив);
			КонецЕсли;
			МассивДанныеПриходы = Данные.Приходы[ИндексРасхода]; //Массив
			МассивДанныеПриходы.Добавить(НовыйПриход);
			
		КонецЕсли; 
		
	Иначе
		
		Данные.Расходы.Удалить(ИндексРасхода);
		Данные.ЦепочкиДвижений.Удалить(ИндексРасхода);
		Данные.СтрокиРасходов.Удалить(Расход);
		Данные.СтрокиЦепочек.Удалить(ЦепочкаРасхода);
		
	КонецЕсли;
	
	Возврат ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, "Выполнено");
	
КонецФункции

#КонецОбласти

#Область ФоновыйРасчетПартий

// Основные процедуры фонового расчета.

// Основные процедуры фонового расчета.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ПараметрыФоновогоРасчета - Структура - Описание
// 	МинимальныйНомерЗаданияРасчета - Число -
// 	МаксимальныйНомерЗаданияРасчета - Число -
Процедура ЗапуститьРасчетПартийВФоне(ПараметрыРасчета, ПараметрыФоновогоРасчета,
			МинимальныйНомерЗаданияРасчета, МаксимальныйНомерЗаданияРасчета)
			
	ОписаниеЗамера = Новый Структура;
	ОписаниеЗамера.Вставить("ОбщееВремя", ТекущаяУниверсальнаяДатаВМиллисекундах());
	ОписаниеЗамера.Вставить("ПодготовкаОписанияДанныхРасчета_Время", 0);
	ОписаниеЗамера.Вставить("ПодготовкаОписанияДанныхРасчета_Количество", 0);
	ОписаниеЗамера.Вставить("ВыгрузкаОписанияДанныхРасчета_Время", 0);
	ОписаниеЗамера.Вставить("ВыгрузкаОписанияДанныхРасчета_Количество", 0);
	ОписаниеЗамера.Вставить("КэшированиеОписанияДанныхРасчета_Время", 0);
	
	ОписаниеЗамера.Вставить("ПодготовкаДанныхГрафов_Время", 0);
	ОписаниеЗамера.Вставить("ПодготовкаДанныхГрафов_Количество", 0);
	
	ОписаниеЗамера.Вставить("ПодготовкаДанныхПорций_Время", 0);
	ОписаниеЗамера.Вставить("ПодготовкаДанныхПорций_Количество", 0);
	
	ОписаниеЗамера.Вставить("ВыгрузкаУзлов_Время", 0);
	ОписаниеЗамера.Вставить("ВыгрузкаУзлов_Количество", 0);
	ОписаниеЗамера.Вставить("КэшированиеУзлов_Время", 0);
	
	ОписаниеЗамера.Вставить("ВыгрузкаСвязей_Время", 0);
	ОписаниеЗамера.Вставить("ВыгрузкаСвязей_Количество", 0);
	ОписаниеЗамера.Вставить("КэшированиеСвязей_Время", 0);
	
	ОписаниеЗамера.Вставить("КэшированиеПараметровРасчета_Время", 0);
	ОписаниеЗамера.Вставить("ЗапускФоновогоЗадания_Время", 0);
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор;
	
	// Описание графа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ ОписаниеПодграфовФоновыйРасчет
	|ИЗ
	|	ОписаниеПодграфов КАК Т
	|ГДЕ
	|	Т.НомерЗаданияРасчета >= &МинимальныйНомерЗаданияРасчета
	|	И Т.НомерЗаданияРасчета <= &МаксимальныйНомерЗаданияРасчета";
	
	Запрос.УстановитьПараметр("МинимальныйНомерЗаданияРасчета",  МинимальныйНомерЗаданияРасчета);
	Запрос.УстановитьПараметр("МаксимальныйНомерЗаданияРасчета", МаксимальныйНомерЗаданияРасчета);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КолонкиВременнойТаблицы(ПараметрыРасчета, "ОписаниеПодграфов"),
			"Т."));
			
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запрос.Выполнить();
	КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Время = ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Время + (КонецЗамера - НачалоЗамера);
	ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Количество = ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Количество + РазмерВременнойТаблицы(ПараметрыРасчета, "ОписаниеПодграфовФоновыйРасчет");
	
	ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
		ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий,
		"КоличествоУзлов",
		"МинимальныйНомерУзла");
	
	РазделитьВременнуюТаблицуНаПорции(
		ПараметрыРасчета,
		ПараметрыРазделения,
		"ОписаниеПодграфовФоновыйРасчет");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерПорции,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.НомерПодграфа) КАК КоличествоПодграфов,
	|	СУММА(Т.КоличествоУзлов) КАК КоличествоУзлов,
	|	СУММА(Т.КоличествоСвязей) КАК КоличествоСвязей,
	|	МИНИМУМ(Т.МинимальныйНомерУзла) КАК МинимальныйНомерУзла,
	|	МАКСИМУМ(Т.МаксимальныйНомерУзла) КАК МаксимальныйНомерУзла
	|ИЗ
	|	ОписаниеПодграфовФоновыйРасчет КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.НомерПорции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.НомерПорции";
	
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеПодграфов = Запрос.Выполнить().Выгрузить();
	КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Время = ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Время + (КонецЗамера - НачалоЗамера);
	ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Количество = ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Количество + ОписаниеПодграфов.Количество();
	
	ОписаниеЗамера.КэшированиеОписанияДанныхРасчета_Время = 
		ЗаписатьКэшДанныхРасчетаПартийСЗамеромВремени(
			ПараметрыРасчета,
			МинимальныйНомерЗаданияРасчета,
			ИдентификаторРасчета,
			Перечисления.ТипыДанныхКэшаПартионногоУчета.ОписаниеГрафа,
			ОписаниеПодграфов,
			,
			ОписаниеПодграфов[0].МинимальныйНомерУзла,
			ОписаниеПодграфов[ОписаниеПодграфов.Количество() - 1].МаксимальныйНомерУзла);
	
	Запрос.УстановитьПараметр("КоличествоСтрокВТЗ",  ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ);
	
	// Узлы и связи.
	ВыборкаГруппаПодграфов = ОписаниеПодграфов;
	НомерПорции = -1;
	
	Пока СледующийЭлементКоллекции(ВыборкаГруппаПодграфов) Цикл
		
		ПродолжатьВыгрузку = Истина;
		НачальнаяЦепочка = ВыборкаГруппаПодграфов.МинимальныйНомерУзла;
		КонечнаяЦепочка = Неопределено;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.КоличествоСвязей КАК КоличествоСвязей
		|ПОМЕСТИТЬ ВТУзлыТекущегоПодграфа
		|ИЗ
		|	СтатистикаСвязейУзлов КАК Т
		|ГДЕ
		|	Т.Ключ >= &МинимальныйНомерУзла
		|	И Т.Ключ <= &МаксимальныйНомерУзла
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ключ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.КоличествоСвязей КАК КоличествоСвязей
		|ИЗ
		|	ВТУзлыТекущегоПодграфа КАК Т
		|УПОРЯДОЧИТЬ ПО
		|	Ключ";
		
		Запрос.УстановитьПараметр("МинимальныйНомерУзла",  ВыборкаГруппаПодграфов.МинимальныйНомерУзла);
		Запрос.УстановитьПараметр("МаксимальныйНомерУзла", ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);
		
		НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ТаблицаУзлы = Запрос.Выполнить().Выгрузить();
		КоличествоСвязей = 0;
		
		// Рассчитаем количество связей нарастающим итогом.
		Для Каждого СтрокаУзла Из ТаблицаУзлы Цикл
			КоличествоСвязей = КоличествоСвязей + СтрокаУзла.КоличествоСвязей;
			СтрокаУзла.КоличествоСвязей = КоличествоСвязей;
		КонецЦикла;
		
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ПараметрыРасчета, "ВТОставшиесяУзлы", ТаблицаУзлы, "%1Ключ, %1КоличествоСвязей", "Ключ");
		
		КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОписаниеЗамера.ПодготовкаДанныхГрафов_Время = ОписаниеЗамера.ПодготовкаДанныхГрафов_Время + (КонецЗамера - НачалоЗамера);
		ОписаниеЗамера.ПодготовкаДанныхГрафов_Количество = ОписаниеЗамера.ПодготовкаДанныхГрафов_Количество + ТаблицаУзлы.Количество();
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТУзлыТекущегоПодграфа");
		
		Пока ПродолжатьВыгрузку Цикл
			
			НомерПорции = НомерПорции + 1;
			
			Если КонечнаяЦепочка <> Неопределено Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.КоличествоСвязей КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТВыгруженныеСвязи
				|ИЗ
				|	ВТОставшиесяУзлы КАК Т
				|ГДЕ
				|	Т.Ключ = &КонечнаяЦепочка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	Т.КоличествоСвязей - ЕСТЬNULL(Т2.КоличествоСвязей, 0) КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТНоваяОставшиесяУзлы
				|ИЗ
				|	ВТОставшиесяУзлы КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыгруженныеСвязи КАК Т2
				|		ПО (ИСТИНА)
				|ГДЕ
				|	Т.Ключ > &КонечнаяЦепочка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТВыгруженныеСвязи
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТОставшиесяУзлы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	Т.КоличествоСвязей КАК КоличествоСвязей
				|ПОМЕСТИТЬ ВТОставшиесяУзлы
				|ИЗ
				|	ВТНоваяОставшиесяУзлы КАК Т
				|ИНДЕКСИРОВАТЬ ПО
				|	Ключ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТНоваяОставшиесяУзлы";
				
				Запрос.УстановитьПараметр("КонечнаяЦепочка",  КонечнаяЦепочка);
				
				НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
				Запрос.Выполнить();
				КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
				ОписаниеЗамера.ПодготовкаДанныхПорций_Время = ОписаниеЗамера.ПодготовкаДанныхПорций_Время + (КонецЗамера - НачалоЗамера);
				ОписаниеЗамера.ПодготовкаДанныхПорций_Количество = ОписаниеЗамера.ПодготовкаДанныхПорций_Количество + РазмерВременнойТаблицы(ПараметрыРасчета, "ВТОставшиесяУзлы");
				
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(Т.Ключ) КАК Ключ
			|ИЗ
			|	ВТОставшиесяУзлы КАК Т
			|ГДЕ
			|	Т.КоличествоСвязей <= &КоличествоСтрокВТЗ";
			
			НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда 
				КонечнаяЦепочка = Мин(
					НачальнаяЦепочка + ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий - 1,
					?(ЗначениеЗаполнено(Выборка.Ключ), Выборка.Ключ, НачальнаяЦепочка));
			Иначе
				КонечнаяЦепочка = НачальнаяЦепочка;
			КонецЕсли;
			
			КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеЗамера.ПодготовкаДанныхПорций_Время = ОписаниеЗамера.ПодготовкаДанныхПорций_Время + (КонецЗамера - НачалоЗамера);
			
			Запрос.УстановитьПараметр("НачальнаяЦепочка", НачальнаяЦепочка);
			Запрос.УстановитьПараметр("КонечнаяЦепочка",  КонечнаяЦепочка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&ПоляТаблицы
			|ИЗ
			|	Данные КАК Т
			|ГДЕ
			|	Т.К >= &НачальнаяЦепочка
			|	И Т.К <= &КонечнаяЦепочка
			|УПОРЯДОЧИТЬ ПО
			|	Т.К";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					КолонкиВременнойТаблицы(ПараметрыРасчета, "Данные"),
					"Т."));
			
			НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТаблицаКэша = Запрос.Выполнить().Выгрузить();
			КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеЗамера.ВыгрузкаУзлов_Время = ОписаниеЗамера.ВыгрузкаУзлов_Время + (КонецЗамера - НачалоЗамера);
			ОписаниеЗамера.ВыгрузкаУзлов_Количество = ОписаниеЗамера.ВыгрузкаУзлов_Количество + ТаблицаКэша.Количество();
			
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные", ТаблицаКэша);
			
			ОписаниеЗамера.КэшированиеУзлов_Время = ОписаниеЗамера.КэшированиеУзлов_Время
				+ ЗаписатьКэшДанныхРасчетаПартийСЗамеромВремени(
					ПараметрыРасчета,
					МинимальныйНомерЗаданияРасчета,
					ИдентификаторРасчета,
					Перечисления.ТипыДанныхКэшаПартионногоУчета.Узлы,
					ТаблицаКэша,
					НомерПорции,
					НачальнаяЦепочка,
					КонечнаяЦепочка);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ключ,
			|	Т.Источник,
			|	Т.Порядок
			|ПОМЕСТИТЬ ПорцияИсточников
			|ИЗ
			|	Источники КАК Т
			|ГДЕ
			|	Т.Ключ >= &НачальнаяЦепочка
			|	И Т.Ключ <= &КонечнаяЦепочка
			|	И Т.Ключ <> Т.Источник
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Т.Ключ,
			|	Т.Приемник,
			|	Т.Порядок
			|ПОМЕСТИТЬ ПорцияПриемников
			|ИЗ
			|	Приемники КАК Т
			|ГДЕ
			|	Т.Ключ >= &НачальнаяЦепочка
			|	И Т.Ключ <= &КонечнаяЦепочка
			|	И Т.Ключ <> Т.Приемник
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	Т.Ключ 			КАК Ключ,
			|	Т.СвязанныйКлюч КАК СвязанныйКлюч,
			|	Т.ЭтоИсточник 	КАК ЭтоИсточник
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т.Ключ КАК Ключ,
			|		Т.Порядок КАК Порядок,
			|		Т.Источник КАК СвязанныйКлюч,
			|		ИСТИНА КАК ЭтоИсточник
			|	ИЗ
			|		ПорцияИсточников КАК Т
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Т.Ключ,
			|		Т.Порядок,
			|		Т.Приемник,
			|		ЛОЖЬ
			|	ИЗ
			|		ПорцияПриемников КАК Т) КАК Т
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ключ,
			|	Т.Порядок,
			|	СвязанныйКлюч";
			
			НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ТаблицаКэша = Запрос.Выполнить().Выгрузить();
			КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОписаниеЗамера.ВыгрузкаСвязей_Время = ОписаниеЗамера.ВыгрузкаСвязей_Время + (КонецЗамера - НачалоЗамера);
			ОписаниеЗамера.ВыгрузкаСвязей_Количество = ОписаниеЗамера.ВыгрузкаСвязей_Количество + ТаблицаКэша.Количество();
			
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Источники", "ПорцияИсточников");
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Приемники", "ПорцияПриемников");
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ПорцияИсточников, ПорцияПриемников");
			
			Если ТаблицаКэша.Количество() > 0 Тогда
				
				ОписаниеЗамера.КэшированиеСвязей_Время = ОписаниеЗамера.КэшированиеСвязей_Время
					+ ЗаписатьКэшДанныхРасчетаПартийСЗамеромВремени(
						ПараметрыРасчета,
						МинимальныйНомерЗаданияРасчета,
						ИдентификаторРасчета,
						Перечисления.ТипыДанныхКэшаПартионногоУчета.Связи,
						ТаблицаКэша,
						НомерПорции,
						НачальнаяЦепочка,
						КонечнаяЦепочка);
				
			КонецЕсли;
			
			ПродолжатьВыгрузку = (КонечнаяЦепочка < ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);
			НачальнаяЦепочка = КонечнаяЦепочка + 1;
			
		КонецЦикла;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОставшиесяУзлы");
		
	КонецЦикла;
	
	// Параметры фонового расчета.
	ПараметрыФоновогоРасчета.Вставить("ИдентификаторРасчета",    ИдентификаторРасчета);
	ПараметрыФоновогоРасчета.Вставить("МаксимальныйНомерПорции", НомерПорции);
	
	ОписаниеЗамера.КэшированиеПараметровРасчета_Время = 
		ЗаписатьКэшДанныхРасчетаПартийСЗамеромВремени(
			ПараметрыРасчета,
			МинимальныйНомерЗаданияРасчета,
			ИдентификаторРасчета,
			Перечисления.ТипыДанныхКэшаПартионногоУчета.ПараметрыРасчета,
			ПараметрыФоновогоРасчета);
	
	// Запустим задание расчета.
	НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ИдентификаторРасчета);
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ФЗ №%1 - %2 %3 (%4)';
			|en = 'FZ No.%1 - %2 %3 (%4)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(МинимальныйНомерЗаданияРасчета - 1),
		НСтр("ru = 'Фоновый расчет партий';
			|en = 'Background lot calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ПараметрыФоновогоРасчета.МестоВызоваРасчета,
		СокрЛП(ИдентификаторРасчета));
	
	НовоеЗадание = ЗакрытиеМесяцаСервер.ЗапуститьПодчиненноеФоновоеЗаданиеЭтапаРасчета(
		ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца,
		"РасчетСебестоимостиПрикладныеАлгоритмы.РассчитатьПартииВФоне",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		НСтр("ru = 'Партионный учет версии 2.2: расчет порции данных.';
			|en = 'Lot accounting 2.2: data portion calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	СтрокаОписанияЗадания = ПараметрыРасчета.ТаблицаЗаданийРасчета.Добавить();
	СтрокаОписанияЗадания.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	СтрокаОписанияЗадания.КлючЗадания 		   = КлючЗадания;
	СтрокаОписанияЗадания.ИдентификаторРасчета = ИдентификаторРасчета;
	
	КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеЗамера.ЗапускФоновогоЗадания_Время = ОписаниеЗамера.ЗапускФоновогоЗадания_Время + (КонецЗамера - НачалоЗамера);

	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОписаниеПодграфовФоновыйРасчет");
	
	ОписаниеЗамера.ОбщееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - ОписаниеЗамера.ОбщееВремя;
	
	ТекстНачало = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Запуск фонового расчета партий №%1: %2, в т.ч.
			|	* подготовка описания данных: %3 (%4)
			|	* выгрузка описания данных: %5 (%6)
			|	* кэширование описания данных: %7
			|	* подготовка данных графов: %8 (%9)';
			|en = 'Starting background calculation of batches No.%1:%2, incl. 
			|	* data preparation: %3 (%4)
			|	* data export: %5 (%6)
			|	* data caching: %7
			|	* preparing graph data: %8 (%9)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(МинимальныйНомерЗаданияРасчета - 1),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ОбщееВремя/1000),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Время/1000),
		СокрЛП(ОписаниеЗамера.ПодготовкаОписанияДанныхРасчета_Количество),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Время/1000),
		СокрЛП(ОписаниеЗамера.ВыгрузкаОписанияДанныхРасчета_Количество),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.КэшированиеОписанияДанныхРасчета_Время/1000),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ПодготовкаДанныхГрафов_Время/1000),
		СокрЛП(ОписаниеЗамера.ПодготовкаДанныхГрафов_Количество));
		
	ТекстПродолжение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '
			|	* подготовка данных порций: %1 (%2)
			|	* выгрузка узлов: %3 (%4)
			|	* кэширование узлов: %5
			|	* выгрузка связей: %6 (%7)
			|	* кэширование связей: %8
			|	* кэширование параметров расчета: %9';
			|en = '
			|	* preparing data batch: %1 (%2) 
			|	* exporting nodes: %3 (%4) 
			|	* caching nodes: %5\n	* exporting links: %6 (%7) 
			|	* caching links: %8
			|	* calculation parameters caching: %9'", ОбщегоНазначения.КодОсновногоЯзыка()),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ПодготовкаДанныхПорций_Время/1000),
		СокрЛП(ОписаниеЗамера.ПодготовкаДанныхПорций_Количество),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ВыгрузкаУзлов_Время/1000),
		СокрЛП(ОписаниеЗамера.ВыгрузкаУзлов_Количество),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.КэшированиеУзлов_Время/1000),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ВыгрузкаСвязей_Время/1000),
		СокрЛП(ОписаниеЗамера.ВыгрузкаСвязей_Количество),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.КэшированиеСвязей_Время/1000),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.КэшированиеПараметровРасчета_Время/1000));
	
	ТекстОкончание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '
			|	* запуск фонового задания: %1';
			|en = '
			|	* start background job: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ОписаниеЗамера.ЗапускФоновогоЗадания_Время/1000));
	
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
		ПараметрыРасчета,
		ТекстНачало + ТекстПродолжение + ТекстОкончание);
	
КонецПроцедуры

Процедура РассчитатьПартииВФоне(ИдентификаторРасчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим параметры расчета.
	ПараметрыРасчета = ПрочитатьКэшДанныхРасчетаПартий(
		Неопределено,
		ИдентификаторРасчета,
		Перечисления.ТипыДанныхКэшаПартионногоУчета.ПараметрыРасчета);
	
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("КоличествоПорцийРезультата", 0);
	
	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);
	ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета);
	
	// Получим описание подграфов.
	ОписаниеПодграфов = ПрочитатьКэшДанныхРасчетаПартий(
		ПараметрыРасчета,
		ИдентификаторРасчета,
		Перечисления.ТипыДанныхКэшаПартионногоУчета.ОписаниеГрафа);
		
	ВыборкаГруппаПодграфов = ОписаниеПодграфов;
	
	// Рассчитаем партии.
	РассчитатьПартииПоГруппамПодграфов(ПараметрыРасчета, ВыборкаГруппаПодграфов);
	
	// Закончим расчет.
	КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета);
	
	ЗаписатьКэшДанныхРасчетаПартий(
		ПараметрыРасчета.ИдентификаторРасчета,
		Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета,
		ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета);
	
КонецПроцедуры

Процедура КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета)
	
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	
	Если РасчетныеПартии.Количество() > 0 Тогда
		
		ЗаписатьКэшДанныхРасчетаПартий(
			ПараметрыРасчета.ИдентификаторРасчета,
			Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета,
			РасчетныеПартии,
			ПараметрыРасчета.КоличествоПорцийРезультата);
		
		ПараметрыРасчета.КоличествоПорцийРезультата = ПараметрыРасчета.КоличествоПорцийРезультата + 1;
		
		РасчетныеПартии.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Получает результаты фоновых расчетов партий.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
Процедура ПолучитьРезультатыФоновыхРасчетовПартий(ПараметрыРасчета)
	
	КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);
	
	ПрерватьРасчет = Ложь;
	
	Пока ПараметрыРасчета.ТаблицаЗаданийРасчета.Количество() > 0 Цикл
		
		СтрокиКУдалению = Новый Массив;
		АктивныеЗадания = Новый Массив;
		
		Для Каждого СтрокаОписанияЗадания Из ПараметрыРасчета.ТаблицаЗаданийРасчета Цикл
			
			Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтрокаОписанияЗадания.ИдентификаторЗадания);
			
			Если Задание = Неопределено Тогда
				
				// Может возникнуть ситуация, когда информация о завершении фонового задания расчета партий
				// была удалена Платформой, т.к. существует платформенное ограничение на размер хранимого списка завершенных заданий (1000 записей).
				ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(
					ПараметрыРасчета,
					СтрокаОписанияЗадания.ИдентификаторРасчета,
					Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета,
					,
					,
					,
					Ложь);
				
				Если ТаблицаКэша <> Неопределено Тогда
					
					// Если задание записало информацию о статистике расчета, то оно завершилось без ошибок.
					// Создадим структуру, содержащую информацию об успешно завершенном задании.
					Задание = Новый Структура;
					Задание.Вставить("Состояние", 			СостояниеФоновогоЗадания.Завершено);
					Задание.Вставить("Ключ", 	  			СтрокаОписанияЗадания.КлючЗадания);
					Задание.Вставить("ИнформацияОбОшибке", 	Неопределено);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТекстДляПротокола = "";
			
			Если Задание = Неопределено Тогда
				
				// Задание не найдено в списке фоновых заданий.
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Фоновое задание %1 не найдено. Вероятно задание завершено аварийно, см. Журнал регистрации.';
						|en = 'The %1 background job is not found. Maybe, the job is aborted, see the event log.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					"""" + СокрЛП(СтрокаОписанияЗадания.КлючЗадания) + """");
				
				ПрерватьРасчет = Истина;
				
			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
			 ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
				
				// Состояние задания "ЗавершеноАварийно" или "Отменено".
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Фоновое задание %1 %2:
					|%3';
					|en = 'Background job %1 %2:
					|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
					"""" + СокрЛП(Задание.Ключ) + """",
					?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru = 'отменено';
																					|en = 'canceled'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'завершено аварийно';
																																				|en = 'aborted'", ОбщегоНазначения.КодОсновногоЯзыка())),
					?(Задание.ИнформацияОбОшибке = Неопределено,
						НСтр("ru = '<Нет описания ошибки>';
							|en = '<No error description>'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
				
				ПрерватьРасчет = Истина;
				
			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
				
				СтрокиКУдалению.Добавить(СтрокаОписанияЗадания);
				
				// Получим результаты расчета.
				КоличествоДанных = КоличествоРезультатовРасчетаВКэшеДанныхРасчетаПартий(СтрокаОписанияЗадания.ИдентификаторРасчета);
				
				Для НомерПорции = 0 По КоличествоДанных Цикл
					
					ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(
						ПараметрыРасчета,
						СтрокаОписанияЗадания.ИдентификаторРасчета,
						Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета,
						НомерПорции);
						
					ПараметрыРасчета.РаспределениеПартий.Вставить("РасчетныеПартии", ТаблицаКэша);
					
					КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);
					
				КонецЦикла;
				
				// Получим статистику расчета.
				ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(
					ПараметрыРасчета,
					СтрокаОписанияЗадания.ИдентификаторРасчета,
					Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета,
					,
					,
					,
					Ложь);
				
				Если ЗначениеЗаполнено(ТаблицаКэша) Тогда
					
					Для Каждого СтрокаТаблицы Из ТаблицаКэша Цикл
						
						НоваяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				// Задание еще активно, ничего с ним делать не нужно.
				АктивныеЗадания.Добавить(Задание);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
					ТекстДляПротокола);
				
				ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыРасчета,
					,
					НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
						|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстДляПротокола);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаОписанияЗадания Из СтрокиКУдалению Цикл
			
			ОчиститьКэшДанныхРасчетаПартий(СтрокаОписанияЗадания.ИдентификаторРасчета); // очистим записи регистра для данного задания
			
			ПараметрыРасчета.ТаблицаЗаданийРасчета.Удалить(СтрокаОписанияЗадания);
			
		КонецЦикла;
		
		Если СтрокиКУдалению.Количество() = 0 Тогда 
			
			// Если все задания еще активны, то сделаем паузу перед следующим циклом проверки заданий.
			Попытка
				ФоновыеЗадания.ОжидатьЗавершенияВыполнения(АктивныеЗадания, 1);
			Исключение
				СтрокиКУдалению = Неопределено; // для исключения срабатывания проверки стандарта 499 
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПрерватьРасчет Тогда
		
		ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(
			НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
				|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВызватьИсключение ТекстДляПротокола;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры работы с регистром кэша при фоновом расчете.

Функция ЗаписатьКэшДанныхРасчетаПартийСЗамеромВремени(ПараметрыРасчета, НомерГрафа,
			ИдентификаторРасчета, ТипДанных, Данные,
			НомерПорцииДанных = 0, МинимальныйНомерУзла = 0, МаксимальныйНомерУзла = 0)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ЗаписатьКэшДанныхРасчетаПартий(
		ИдентификаторРасчета,
		ТипДанных,
		Данные,
		НомерПорцииДанных,
		МинимальныйНомерУзла,
		МаксимальныйНомерУзла);
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
	
КонецФункции

Процедура ЗаписатьКэшДанныхРасчетаПартий(ИдентификаторРасчета, ТипДанных, Данные,
			НомерПорцииДанных = 0, МинимальныйНомерУзла = 0, МаксимальныйНомерУзла = 0)
	
	МенеджерЗаписи = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ИдентификаторРасчета  = ИдентификаторРасчета;
	МенеджерЗаписи.ТипДанных 			 = ТипДанных;
	МенеджерЗаписи.НомерПорцииДанных 	 = НомерПорцииДанных;
	МенеджерЗаписи.Данные 				 = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	МенеджерЗаписи.МинимальныйНомерУзла  = МинимальныйНомерУзла;
	МенеджерЗаписи.МаксимальныйНомерУзла = МаксимальныйНомерУзла;
	МенеджерЗаписи.НомерВерсии			 = СокрЛП(Метаданные.Версия);
	МенеджерЗаписи.ДатаЗаписи			 = ТекущаяДатаСеанса();
	МенеджерЗаписи.Комментарий			 = НСтр("ru = 'Расчет партий';
													|en = 'Lot calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	МенеджерЗаписи.Записать(Ложь);
	
КонецПроцедуры

Функция ПрочитатьКэшДанныхРасчетаПартий(ПараметрыРасчета, ИдентификаторРасчета, ТипДанных, НомерПорцииДанных = 0,
			МинимальныйНомерУзла = 0, МаксимальныйНомерУзла = 0, ЗаписьДолжнаСуществовать = Истина)
	
	МенеджерЗаписи = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ИдентификаторРасчета  = ИдентификаторРасчета;
	МенеджерЗаписи.ТипДанных 			 = ТипДанных;
	МенеджерЗаписи.НомерПорцииДанных 	 = НомерПорцииДанных;
	МенеджерЗаписи.НомерВерсии    		 = СокрЛП(Метаданные.Версия);	
	
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		
		Если НЕ ЗаписьДолжнаСуществовать Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдена запись в кэше данных партионного учета:
			|Идентификатор расчета: %1
			|Тип данных: %2
			|Номер порции: %3';
			|en = 'Record was not found in cache of lot accounting data:
			|Calculation ID: %1
			|Data type: %2
			|Portion number: %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(ИдентификаторРасчета),
			СокрЛП(ТипДанных),
			СокрЛП(НомерПорцииДанных));
		
		Если ЗначениеЗаполнено(ПараметрыРасчета) И НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
				ТекстДляПротокола);
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				,
				НСтр("ru = 'При формировании движений по партиям диагностированы ошибки';
					|en = 'Errors were found when generating lot records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола);
				
			ТекстДляПротокола = ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
			
		КонецЕсли;
		
		ВызватьИсключение ТекстДляПротокола;
		
	КонецЕсли;
	
	МинимальныйНомерУзла  = МенеджерЗаписи.МинимальныйНомерУзла;
	МаксимальныйНомерУзла = МенеджерЗаписи.МаксимальныйНомерУзла;
	
	Возврат МенеджерЗаписи.Данные.Получить();
	
КонецФункции

Процедура ОчиститьКэшДанныхРасчетаПартий(ИдентификаторРасчета = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(ИдентификаторРасчета) Тогда
		НаборЗаписей.Отбор.ИдентификаторРасчета.Установить(ИдентификаторРасчета);
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьУстаревшиеКэшиДанныхРасчетаПартий() Экспорт
	
	ТекущаяВерсия = СокрЛП(Метаданные.Версия);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.КэшДанныхПартионногоУчета КАК Т
	|ГДЕ
	|	Т.НомерВерсии <> &ТекущаяВерсия";
	
	Запрос.УстановитьПараметр("ТекущаяВерсия", ТекущаяВерсия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерВерсии.Установить(Выборка.НомерВерсии);
	
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоРезультатовРасчетаВКэшеДанныхРасчетаПартий(ИдентификаторРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Т.НомерПорцииДанных), -1) КАК НомерПорцииДанных
	|ИЗ
	|	РегистрСведений.КэшДанныхПартионногоУчета КАК Т
	|ГДЕ
	|	Т.ИдентификаторРасчета = &ИдентификаторРасчета
	|	И Т.ТипДанных = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета)";
	
	Запрос.УстановитьПараметр("ИдентификаторРасчета", ИдентификаторРасчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерПорцииДанных;
	
КонецФункции

// Вспомогательные процедуры фонового расчета.

Функция СформироватьПараметрыФоновогоРасчета(ПараметрыРасчета)
	
	ВсеСсылки 			= ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	КопируемыеТипы 		= Новый ОписаниеТипов("Строка, Дата, Число, Булево, Массив, Соответствие");
	КопируемыеСтруктуры = Новый Структура("РаспределениеПартий, РасчетныйПериод, ФО, УчетныеПолитики");
	
	ПараметрыФоновогоРасчета = Новый Структура;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета Цикл
		
		ТипПараметра = ТипЗнч(КлючИЗначение.Значение);
		
		Если КопируемыеТипы.СодержитТип(ТипПараметра)
		 ИЛИ ВсеСсылки.СодержитТип(ТипПараметра)
		 ИЛИ (ТипПараметра = Тип("Структура") И КопируемыеСтруктуры.Свойство(КлючИЗначение.Ключ)) Тогда
			ПараметрыФоновогоРасчета.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФоновогоРасчета.МестоВызоваРасчета = РасчетСебестоимостиПротоколРасчета.ПредставлениеТекущегоЭтапа(ПараметрыРасчета);
	
	УстановитьТехнологическиеПараметрыРасчета(ПараметрыФоновогоРасчета);
	
	Возврат ПараметрыФоновогоРасчета;
	
КонецФункции

Функция ЭтоФоновыйРасчетПартий(ПараметрыРасчета)
	Возврат ЗначениеЗаполнено(ПараметрыРасчета.ИдентификаторРасчета);
КонецФункции

#КонецОбласти

#Область ВыборкаДанныхДляРасчета

Функция СледующаяПорцияПартийДляРасчета(ПараметрыРасчета, ВыборкаГруппаПодграфов, Данные)
	
	Запрос = Новый Запрос;
	
	Данные.ПараметрыОбхода.НачальнаяЦепочка = Данные.ПараметрыОбхода.КонечнаяЦепочка + 1;
	
	Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда
		
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Данные КАК ДД
		|ГДЕ
		|	ДД.К >= &НачальнаяЦепочка
		|	И ДД.К <= &КонечнаяЦепочка
		|УПОРЯДОЧИТЬ ПО
		|	ДД.К";
		
		Данные.ПараметрыОбхода.КонечнаяЦепочка  = Мин(
			Данные.ПараметрыОбхода.КонечнаяЦепочка + ПараметрыРасчета.ОграниченияВыборки.ПорцияРасчетаПартий,
			ВыборкаГруппаПодграфов.МаксимальныйНомерУзла);
		
		Запрос.УстановитьПараметр("НачальнаяЦепочка", Данные.ПараметрыОбхода.НачальнаяЦепочка);
		Запрос.УстановитьПараметр("КонечнаяЦепочка",  Данные.ПараметрыОбхода.КонечнаяЦепочка);
		
		ВыборкаДанных = Запрос.Выполнить().Выбрать();
		
		ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "Данные", ВыборкаДанных);
		
	Иначе
		
		Если Данные.ПараметрыОбхода.НомерПорции > ПараметрыРасчета.МаксимальныйНомерПорции Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаДанных = ПрочитатьКэшДанныхРасчетаПартий(
			ПараметрыРасчета,
			ПараметрыРасчета.ИдентификаторРасчета,
			Перечисления.ТипыДанныхКэшаПартионногоУчета.Узлы,
			Данные.ПараметрыОбхода.НомерПорции,
			Данные.ПараметрыОбхода.НачальнаяЦепочка, // значение переменной изменяется
			Данные.ПараметрыОбхода.КонечнаяЦепочка); // значение переменной изменяется
		
	КонецЕсли;
	
	СледующаяПорцияЦепочекДляРасчета(ПараметрыРасчета, Данные, Запрос);
	
	Данные.ПараметрыОбхода.НомерПорции = Данные.ПараметрыОбхода.НомерПорции + 1;
	
	Возврат ВыборкаДанных;
	
КонецФункции

Процедура СледующаяПорцияЦепочекДляРасчета(ПараметрыРасчета, Данные, Запрос)
	
	Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда
		
		ТаблицыСвязейУзлов = Новый Структура("Источники, Приемники", "Источник", "Приемник");
		
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	Т.Ключ КАК Ключ,
		|	Т.Порядок КАК Порядок,
		|	Т.Параметр2 КАК Параметр2
		|ИЗ
		|	Параметр1 КАК Т
		|ГДЕ
		|	Т.Ключ >= &НачальнаяЦепочка
		|	И Т.Ключ <= &КонечнаяЦепочка
		|	И Т.Ключ <> Т.Параметр2
		|	
		|УПОРЯДОЧИТЬ ПО
		|	Ключ,
		|	Т.Порядок,
		|	Параметр2";
		
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "Параметр", "%");
		
		Для Каждого ОписаниеТаблицы Из ТаблицыСвязейУзлов Цикл
			
			Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапроса,
				ОписаниеТаблицы.Ключ,
				ОписаниеТаблицы.Значение);
			
			Строка 		= Неопределено;
			ТекущийКлюч = Неопределено;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, ОписаниеТаблицы.Ключ, Выборка);
			
			Пока Выборка.Следующий() Цикл
				
				Ключ = Выборка.Ключ;
				
				Если ТекущийКлюч <> Ключ Тогда
					
					Если ТекущийКлюч <> Неопределено Тогда
						Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
					КонецЕсли;
					
					ТекущийКлюч = Ключ;
					
					Строка = Данные.ЦепочкиДвижений[ТекущийКлюч];
					Если Строка = Неопределено Тогда
						Строка = Данные.СтрокиЦепочек.Добавить();
					КонецЕсли;
					
				КонецЕсли;
				
				ВложенныйМассив = Строка[ОписаниеТаблицы.Ключ]; // Массив 
				ВложенныйМассив.Добавить(Выборка[ОписаниеТаблицы.Значение]);
				
			КонецЦикла;
			
			Если ТекущийКлюч <> Неопределено Тогда
				Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаКэша = ПрочитатьКэшДанныхРасчетаПартий(
			ПараметрыРасчета,
			ПараметрыРасчета.ИдентификаторРасчета,
			Перечисления.ТипыДанныхКэшаПартионногоУчета.Связи,
			Данные.ПараметрыОбхода.НомерПорции,
			,
			,
			Ложь);
		
		Если НЕ ЗначениеЗаполнено(ТаблицаКэша) Тогда
			Возврат; // у этой порции узлов нет связей (тривиальные графы)
		КонецЕсли;
		
		Строка 		= Неопределено;
		ТекущийКлюч = Неопределено;
		
		Для Каждого ТекущаяСтрокаКэша Из ТаблицаКэша Цикл
			
			Ключ = ТекущаяСтрокаКэша.Ключ;
			
			Если ТекущийКлюч <> Ключ Тогда
				
				Если ТекущийКлюч <> Неопределено Тогда
					Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
				КонецЕсли;
				
				ТекущийКлюч = Ключ;
				
				Строка = Данные.ЦепочкиДвижений[ТекущийКлюч];
				Если Строка = Неопределено Тогда
					Строка = Данные.СтрокиЦепочек.Добавить();
				КонецЕсли;
				
			КонецЕсли;
			
			ВложенныйМассив = Строка[?(ТекущаяСтрокаКэша.ЭтоИсточник, "Источники", "Приемники")]; // Массив 
			ВложенныйМассив.Добавить(ТекущаяСтрокаКэша.СвязанныйКлюч);
			
		КонецЦикла;
		
		Если ТекущийКлюч <> Неопределено Тогда
			Данные.ЦепочкиДвижений.Вставить(ТекущийКлюч, Строка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СледующийЭлементКоллекции(Данные)
	
	Если ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		
		Если Данные.Количество() > 0 Тогда
			Данные = Данные[0];
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("СтрокаТаблицыЗначений") Тогда
		
		ИсходнаяТаблица = Данные.Владелец();
		Индекс = ИсходнаяТаблица.Индекс(Данные);
		
		Если Индекс < ИсходнаяТаблица.Количество() - 1 Тогда
			Данные = ИсходнаяТаблица[Индекс + 1];
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Данные) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Если Данные.Следующий() Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СортировкаДанных

Процедура СортироватьИсточникиПоЗначениямПолей(Источники, ЗначенияПолей, Приходы, Расходы, РегистраторПриемника, СортироватьПоЛИФО, ЕстьИсправления, ЭтоСторно)
	
	Список = Новый СписокЗначений;
	
	ИндексЭлементаМассива = -1;
	
	Для Каждого ИндексИсточника Из Источники Цикл
		
		ИндексЭлементаМассива = ИндексЭлементаМассива + 1;
		
		МассивПриходов = Приходы[ИндексИсточника];
		
		Если МассивПриходов <> Неопределено И МассивПриходов.Количество() = 0 Тогда
			Сдвиг = 0;
		Иначе
			
			Сдвиг = ЗначенияПолей.Количество();
			
			Для Каждого ПолеСортировки Из ЗначенияПолей Цикл
				Если Не ЗначениеЗаполнено(ПолеСортировки.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
				Если МассивПриходов <> Неопределено Тогда
					ЗначениеПоля = МассивПриходов[0][ПолеСортировки.Ключ];
					РегистраторИсточника = МассивПриходов[0].Регистратор;
					Сторно = ?(ЕстьИсправления, МассивПриходов[0].Сторно, ЛОЖЬ);
				ИначеЕсли Расходы[ИндексИсточника] <> Неопределено Тогда
				 	ЗначениеПоля = Расходы[ИндексИсточника][ПолеСортировки.Ключ];
					РегистраторИсточника = Расходы[ИндексИсточника].Регистратор;
					Сторно = ?(ЕстьИсправления, Расходы[ИндексИсточника].Сторно, ЛОЖЬ);
				Иначе
					Прервать;
				КонецЕсли;
				
				Если ЕстьИсправления И РегистраторИсточника = РегистраторПриемника
				 И НЕ Сторно И НЕ ЭтоСторно Тогда
				 	// Не делаем сортировку источников, у которых Регистратор совпадает с приемником для исключения зацикливания.
				 	// кроме источника - исправительной записи "Сторно".
					Продолжить;
				ИначеЕсли ЗначениеПоля = ПолеСортировки.Значение Тогда
					Сдвиг = Сдвиг - 1;
				ИначеЕсли ЗначениеПоля = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
				 И (ПолеСортировки.Значение = Перечисления.ТипыНалогообложенияНДС.ЭкспортНесырьевыхТоваров
					ИЛИ ПолеСортировки.Значение = Перечисления.ТипыНалогообложенияНДС.ЭкспортСырьевыхТоваровУслуг) Тогда
					Сдвиг = Сдвиг - 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Список.Добавить(ИндексИсточника, Формат(ИндексЭлементаМассива + Сдвиг * Источники.Количество(), "ЧЦ=15; ЧДЦ=; ЧВН=; ЧГ="));
		
	КонецЦикла;
	
	Если Список.Количество() > 0 Тогда
		Если СортироватьПоЛИФО Тогда
			Список.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
		Иначе
			Список.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		КонецЕсли;
		Источники = Список.ВыгрузитьЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура СортироватьПриходыПоФИФО_ЛИФО(ПолеПорядка, Приходы, СортироватьПоЛИФО)
	
	Если Приходы.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СтрокиПриходов");
	Таблица.Колонки.Добавить("ЗначениеПоля");
	
	Для Каждого Приход Из Приходы Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СтрокиПриходов = Приход;
		НоваяСтрока.ЗначениеПоля = Приход[ПолеПорядка];
	КонецЦикла;
	
	Если СортироватьПоЛИФО Тогда
		Таблица.Сортировать("ЗначениеПоля Убыв");
	Иначе
		Таблица.Сортировать("ЗначениеПоля");
	КонецЕсли;
	Приходы = Таблица.ВыгрузитьКолонку("СтрокиПриходов");
	
КонецПроцедуры

Процедура СортироватьИсточникиПоФИФО_ЛИФО(Источники, ПолеПорядка, Приходы, Расходы, СортироватьПоЛИФО)
	
	Если Источники.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИндексИсточника");
	Таблица.Колонки.Добавить("ЗначениеПоля");
	
	Для Каждого ИндексИсточника Из Источники Цикл
		МассивПриходов = Приходы[ИндексИсточника];
		Если МассивПриходов <> Неопределено И МассивПриходов.Количество() > 0 Тогда
			СортироватьПриходыПоФИФО_ЛИФО(ПолеПорядка, МассивПриходов, СортироватьПоЛИФО);
			ЗначениеПоля = МассивПриходов[0][ПолеПорядка];
		ИначеЕсли Расходы[ИндексИсточника] <> Неопределено Тогда
			ЗначениеПоля = Расходы[ИндексИсточника][ПолеПорядка];
		Иначе
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИндексИсточника = ИндексИсточника;
		НоваяСтрока.ЗначениеПоля = ЗначениеПоля;
	КонецЦикла;
	Если СортироватьПоЛИФО Тогда
		Таблица.Сортировать("ЗначениеПоля Убыв");
	Иначе
		Таблица.Сортировать("ЗначениеПоля");
	КонецЕсли;
	Источники = Таблица.ВыгрузитьКолонку("ИндексИсточника");
	
	Таблица.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСТаблицейРасчетныхПартий

Функция ДобавитьИЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Расход, Приход, Инвертировать = Ложь)
	
	Контекст   = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.Контекст;
	Показатели = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений.Показатели;
	
	РасчетнаяПартия = ДобавитьРасчетнуюПартию(ПараметрыРасчета);
	
	ЗаполнитьРасчетнуюПартию(ПараметрыРасчета, Контекст, РасчетнаяПартия, Расход, Приход);
	
	ИнвертироватьПоказатели(РасчетнаяПартия, Показатели, Инвертировать);
	
	Возврат РасчетнаяПартия;
	
КонецФункции

// Добавляет новую строку в таблицу расчетных партий и заполняет необходимые поля.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - 
//
Функция ДобавитьРасчетнуюПартию(ПараметрыРасчета, ДанныеЗаполнения = Неопределено, ВыполнятьКэширование = Истина) Экспорт
	
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	
	// При необходимости кэшируем сформированную порцию партий в таблицу движений по регистру.
	// Кэширование не нужно выполнять в случае, если эта процедура вызывается из процедуры вида ЗаполнитьРасчетнуюПартию...
	Если РасчетныеПартии.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ И ВыполнятьКэширование Тогда
		
		Если НЕ ЭтоФоновыйРасчетПартий(ПараметрыРасчета) Тогда
			
			КэшироватьРаспределенныеПартии(ПараметрыРасчета, Ложь);
			
		Иначе
			
			КэшироватьРасчетныеПартииПриРасчетеВФоне(ПараметрыРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим строку в таблицу распределенных партий
	РасчетнаяПартия = РасчетныеПартии.Добавить();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(РасчетнаяПартия, ДанныеЗаполнения);
	КонецЕсли;
	
	ЗафиксироватьВЗамереДобавлениеРасчетнойПартии(ПараметрыРасчета);
	
	Возврат РасчетнаяПартия;
	
КонецФункции

// Удаляет указанную строку из таблицы партий.
//
Процедура УдалитьРасчетнуюПартию(ПараметрыРасчета, РасчетнаяПартия)
	
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии; // ТаблицаЗначений
	РасчетныеПартии.Удалить(РасчетнаяПартия);
	
	ЗафиксироватьВЗамереУдалениеРасчетнойПартии(ПараметрыРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеМетоды

// Возвращает массив типов записей, используемых в описании цепочек.
//
// Возвращаемое значение:
//	Массив -
//
Функция ИспользуемыеТипыЗаписейВЦепочках(ОписаниеЦепочек, ВПриемниках = Истина, ВИсточниках = Истина,
			ДобавлятьВРезультатПустойТипЗаписи = Истина) Экспорт
	
	ТипыЗаписей = Новый Массив;
	
	Для Каждого КлючИЗначение Из ОписаниеЦепочек Цикл
		
		Если ВПриемниках И ВИсточниках Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, КлючИЗначение.Ключ);
		ИначеЕсли ВПриемниках
		 И КлючИЗначение.Значение.ТипыПриемников.Количество() = 0
		 И КлючИЗначение.Значение.ТипыИсточников.Количество() = 0 Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ВПриемниках Тогда
			Для Каждого Приемники Из КлючИЗначение.Значение.ТипыПриемников Цикл
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Приемники.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		Если ВИсточниках Тогда
			Для Каждого Источники Из КлючИЗначение.Значение.ТипыИсточников Цикл
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Источники.Ключ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавлятьВРезультатПустойТипЗаписи Тогда
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТипыЗаписей, Перечисления.ТипыЗаписейПартий.ПустаяСсылка());
	КонецЕсли;
	
	Возврат ТипыЗаписей;
	
КонецФункции

// Используется также при распределении приходов на расходы
//
Процедура ИнвертироватьПоказатели(Запись, ПереченьПоказателей, Инвертировать) Экспорт
	
	Если Не Инвертировать Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Поле Из Новый Структура(ПереченьПоказателей) Цикл
		Запись[Поле.Ключ] = -Запись[Поле.Ключ];
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыРасчета

// Инициализирует параметры замера распределения партий.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * КоличествоПодграфов - Число -
// * КоличествоУзлов - Число -
// * ТекущаяГлубина - Число -
// * МаксимальнаяГлубина - Число -
// * СформированоЗаписей - Число -
// * УдаленоЗаписей - Число -
// * КоличествоДанных - Число -
// * РезультатыОбхода - Структура -
// * СтекВызовов - Массив -
Функция ИнициализироватьЗамерРаспределенияПартий(ПараметрыРасчета) Экспорт
	
	СтатистикаРасчета = Новый ТаблицаЗначений;
	
	СтатистикаРасчета.Колонки.Добавить("КоличествоПодграфов", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("КоличествоУзлов", 	  Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("ТекущаяГлубина", 	  Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("МаксимальнаяГлубина", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("СформированоЗаписей", Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("УдаленоЗаписей", 	  Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("КоличествоДанных", 	  Новый ОписаниеТипов("Число")); // здесь будем накапливать данные для замера производительности
	СтатистикаРасчета.Колонки.Добавить("РезультатыОбхода", 	  Новый ОписаниеТипов("Структура"));
	СтатистикаРасчета.Колонки.Добавить("ВремяНачала", 	  	  Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("ВремяОкончания",  	  Новый ОписаниеТипов("Число"));
	СтатистикаРасчета.Колонки.Добавить("ДатаНачала", 	  	  Новый ОписаниеТипов("Дата"));
	СтатистикаРасчета.Колонки.Добавить("СтекВызовов");
	
	ПараметрыРасчета.РаспределениеПартий.Вставить("СтатистикаРасчета", СтатистикаРасчета);
	
	Возврат СтатистикаРасчета;
	
КонецФункции

// Начало замера расчета групп подграфов.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	Выборка - ВыборкаИзРезультатаЗапроса -
Процедура НачалоЗамераРасчетаГруппыПодграфов(ПараметрыРасчета, Выборка)
	
	ОкончаниеЗамераРасчетаГруппыПодграфов(ПараметрыРасчета); // для предыдущей группы
	
	НоваяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Добавить();
	
	НоваяСтрока.ВремяНачала			= ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.ДатаНачала			= ТекущаяДатаСеанса();
	
	НоваяСтрока.КоличествоПодграфов = Выборка.КоличествоПодграфов;
	НоваяСтрока.КоличествоУзлов 	= Выборка.МаксимальныйНомерУзла - Выборка.МинимальныйНомерУзла + 1;
	НоваяСтрока.СтекВызовов 		= Новый Массив(ПараметрыРасчета.ОграниченияВыборки.МаксимальнаяДлинаЦепочки + 1);
	
КонецПроцедуры

Процедура ОкончаниеЗамераРасчетаГруппыПодграфов(ПараметрыРасчета)
	
	КоличествоСтрок = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[КоличествоСтрок - 1];
	ТекущаяСтрока.ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Функция ОкончаниеЗамераРасчетаЦепочек(ПараметрыРасчета, РезультатРасчета)
	Перем Количество;
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	
	Если НЕ ТекущаяСтрока.РезультатыОбхода.Свойство(РезультатРасчета, Количество) Тогда
		Количество = 0;
	КонецЕсли;
	
	ТекущаяСтрока.РезультатыОбхода.Вставить(РезультатРасчета, Количество + 1);
	
	ТекущаяСтрока.ТекущаяГлубина = ТекущаяСтрока.ТекущаяГлубина - 1;
	
	Если ТекущаяСтрока.ТекущаяГлубина >= 0 Тогда
		ТекущаяСтрока.СтекВызовов[ТекущаяСтрока.ТекущаяГлубина] = Неопределено;
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

Процедура ЗафиксироватьВЗамереДобавлениеРасчетнойПартии(ПараметрыРасчета)
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	
	ТекущаяСтрока.СформированоЗаписей = ТекущаяСтрока.СформированоЗаписей + 1;
	
КонецПроцедуры

Процедура ЗафиксироватьВЗамереУдалениеРасчетнойПартии(ПараметрыРасчета)
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	
	ТекущаяСтрока.УдаленоЗаписей = ТекущаяСтрока.УдаленоЗаписей + 1;
	
КонецПроцедуры

Процедура ЗавершитьЗамерРаспределенияПартий(ПараметрыРасчета)
	
	// Добавим в протокол расчета партий собранную информацию о текущем расчете цепочек.
	ОписаниеРасчета = НСтр("ru = 'Описание результатов обхода цепочек (графа):';
							|en = 'Description of chain (graph) pass results:'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ШаблонОписаниеГруппыПодграфов = "
		|	" + НСтр("ru = '%1. Подграфов: %2, узлов: %3, глубина обхода: %4, сформировано записей: %5, в т.ч. не рассчитано %6.
		|	%7
		|	Результаты расчета цепочек: %8';
		|en = '%1. Subgraphs: %2, nodes: %3, circumvention depth: %4, generated records: %5, including not calculated %6.
		|	%7
		|	Chain calculation results: %8'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	НомерСтроки = 0;
	
	Для Каждого ТекущаяСтрока Из ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета Цикл
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			ТекущаяСтрока.КоличествоДанных);
			
		НомерСтроки = НомерСтроки + 1;
		
		ОписаниеРезультатов = "";
		
		Для Каждого КлючИЗначение Из ТекущаяСтрока.РезультатыОбхода Цикл
			ОписаниеРезультатов = ОписаниеРезультатов + ?(ОписаниеРезультатов = "", "", ", ")
				+ """" + КлючИЗначение.Ключ + """ - " + СокрЛП(КлючИЗначение.Значение);
		КонецЦикла;
		
		ОписаниеВремени = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало расчета: %1, длительность расчета: %2';
				|en = 'Calculation start: %1, calculation duration: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекущаяСтрока.ДатаНачала,
			РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени((ТекущаяСтрока.ВремяОкончания - ТекущаяСтрока.ВремяНачала)/1000));
		
		ОписаниеРасчета = ОписаниеРасчета
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписаниеГруппыПодграфов,
				СокрЛП(НомерСтроки),
				СокрЛП(ТекущаяСтрока.КоличествоПодграфов),
				СокрЛП(ТекущаяСтрока.КоличествоУзлов),
				СокрЛП(ТекущаяСтрока.МаксимальнаяГлубина),
				СокрЛП(ТекущаяСтрока.СформированоЗаписей),
				СокрЛП(ТекущаяСтрока.УдаленоЗаписей),
				ОписаниеВремени,
				?(ОписаниеРезультатов = "", НСтр("ru = 'не выполнялся (нет цепочек)';
												|en = 'not performed (no chains)'", ОбщегоНазначения.КодОсновногоЯзыка()), ОписаниеРезультатов));
		
	КонецЦикла;
	
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ОписаниеРасчета);
	
	РаспределениеПартий = ПараметрыРасчета.РаспределениеПартий; // Структура
	РаспределениеПартий.Удалить("СтатистикаРасчета");
	
КонецПроцедуры

Функция НачалоЗамераРасчетаЦепочек(ПараметрыРасчета, Данные, ИндексРасхода)
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	
	ТекущаяСтрока.ТекущаяГлубина = ТекущаяСтрока.ТекущаяГлубина + 1;
	
	ТекущаяСтрока.МаксимальнаяГлубина =
		Макс(ТекущаяСтрока.МаксимальнаяГлубина, ТекущаяСтрока.ТекущаяГлубина);
	
	Если ТекущаяСтрока.ТекущаяГлубина > 0 Тогда
		ТекущаяСтрока.СтекВызовов[ТекущаяСтрока.ТекущаяГлубина - 1] = ИндексРасхода;
	КонецЕсли;
	
	ЕстьПереполнениеСтека = (ТекущаяСтрока.ТекущаяГлубина > ПараметрыРасчета.ОграниченияВыборки.МаксимальнаяДлинаЦепочки);
	
	Если ЕстьПереполнениеСтека Тогда
		
		Если НЕ ПараметрыРасчета.РаспределениеПартий.ЕстьПереполнениеСтека Тогда
			
			ТекстДляПротокола =
				НСтр("ru = 'При расчете цепочек движения партий сработало ограничение на максимально допустимую длину цепочки.
					|Это ограничение текущего механизма партионного учета (ошибка 00-00130143).
					|Для некоторых документов партии могут быть не подобраны или может быть нарушен принцип подбора партий по ФИФО.';
					|en = 'When calculating lot record chains, the limit on maximum allowable chain length was activated. 
					|This is a limit of the current lot accounting (error 00-00130143).
					|For some documents, lots may not be picked or the principle of lot picking by FIFO may be violated.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаРаспределенияПартий,
				ТекстДляПротокола,
				ТекстДляПротокола);
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				,
				НСтр("ru = 'При расчете партий диагностированы проблемы';
					|en = 'Issues found when calculating lots'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола,
				,
				Перечисления.ВажностьПроблемыУчета.Предупреждение);
			
		КонецЕсли;
		
		ПараметрыРасчета.РаспределениеПартий.ЕстьПереполнениеСтека = Истина;
		
	КонецЕсли;
	
	Возврат НЕ ЕстьПереполнениеСтека;
	
КонецФункции

// Предназначена для отладки расчета - расшифровка стека обхода узлов.
//
// Возвращаемое значение:
//	Структура -
//
Функция УзлыРассчитываемойЦепочки(ПараметрыРасчета, Данные) Экспорт
	
	ТекущаяСтрока = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	ТаблицаУзлов = Неопределено;
	ПовторяющиесяУзлы = Новый Соответствие;
	ПройденныеУзлы = Новый Соответствие;
	
	Для НомерСтроки = 0 По ТекущаяСтрока.ТекущаяГлубина - 1 Цикл
		
		НомерУзла = ТекущаяСтрока.СтекВызовов[НомерСтроки];
		
		Если ТаблицаУзлов = Неопределено Тогда
			ТаблицаУзлов = Данные.Расходы[НомерУзла].Владелец().СкопироватьКолонки();
		КонецЕсли;
		
		Если ТипЗнч(ТаблицаУзлов) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаУзлов.Добавить(), Данные.Расходы[НомерУзла]);
		КонецЕсли;
		
		Если ПройденныеУзлы.Получить(НомерУзла) = Неопределено Тогда
			ПройденныеУзлы.Вставить(НомерУзла, 1);
		Иначе
			ПовторяющиесяУзлы.Вставить(НомерУзла);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаУзлов", ТаблицаУзлов);
	Результат.Вставить("ПовторяющиесяУзлы", ПовторяющиесяУзлы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТрансляцияПартий

// Особый случай распределения партий, когда непосредственно распределение выполнять не требуется,
// т.к. все выбранные данные имеют признак РасчетПартий = Истина.
// Нужно просто переместить содержимое временной таблицы Данные в таблицу-приемник.

Процедура ИнициализироватьТрансляциюПартий(ПараметрыРасчета, ТаблицаДляТрансляцииПартий = Неопределено, ИмяРегистра = "",
			ИмяВременнойТаблицы = "", ПоляИндексирования = "", ВременныеТаблицыДляСледующихЭтапов = "") Экспорт
	
	// Подготовим структуру ОписаниеДвижений.
	ОписаниеДвижений = ОписаниеДвижений();
	ОписаниеДвижений.Вставить("Контекст", "ТрансляцияПартий");
	ОписаниеДвижений.Вставить("ИмяРегистра", ?(ЗначениеЗаполнено(ИмяРегистра), ИмяРегистра, ""));
	
	Если НЕ ЗначениеЗаполнено(ИмяРегистра) Тогда
		ОписаниеДвижений.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		ОписаниеДвижений.Вставить("ПоляИндексирования",  ПоляИндексирования);
	КонецЕсли;
	
	ОписаниеДвижений.Вставить("ВременныеТаблицыДляСледующихЭтапов", ВременныеТаблицыДляСледующихЭтапов);
	ОписаниеДвижений.Вставить("РаспределениеНеТребуется", Истина);
	
	// Подготовим структуру РаспределениеПартий.
	ИнициализироватьРаспределениеПартий(
		ПараметрыРасчета,
		ТаблицаДляТрансляцииПартий,
		Новый Соответствие,
		ОписаниеДвижений,
		ОписаниеНезаписываемыхДанных(Ложь));
	
	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ИнициализироватьТрансляциюПартий");
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхДляСледующихЭтапов

// Формирование временных таблиц для использования в следующих этапах.
// Таблицы формируются непосредственно запросом, количество и структура таблиц произвольны.
//
Процедура ИнициализироватьПодготовкуДанныхДляСледующихЭтапов(ПараметрыРасчета, ВременныеТаблицыДляСледующихЭтапов) Экспорт

	// Подготовим структуру ОписаниеДвижений.
	ОписаниеДвижений = ОписаниеДвижений();
	ОписаниеДвижений.Вставить("Контекст", "ПодготовкаДанныхДляСледующихЭтапов");
	ОписаниеДвижений.Вставить("ВременныеТаблицыДляСледующихЭтапов", СокрЛП(ВременныеТаблицыДляСледующихЭтапов));
	ОписаниеДвижений.Вставить("РаспределениеНеТребуется", Истина);

	ПодготовкаДанных = Новый Структура;

	ПодготовкаДанных.Вставить("ОписаниеДвижений", ОписаниеДвижений);
	ПодготовкаДанных.Вставить("ДополнительныеСвойства", Новый Структура);
	ПодготовкаДанных.Вставить("СуществующиеВТ", "");

	ПараметрыРасчета.Вставить("ПодготовкаДанных", ПодготовкаДанных);

КонецПроцедуры

// Выполняет запрос формирования временных таблиц для следующих этапов расчета.
//  
Процедура ПодготовитьДанныеДляСледующихЭтапов(ПараметрыРасчета, ТекстЗапроса) Экспорт
	
	ФормируемыеВТ = ПараметрыРасчета.ПодготовкаДанных.ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов;
	
	// Удалим формируемые временные таблицы этапа, если они уже существуют.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ФормируемыеВТ);
	
	// Запомним существующие временные таблицы.
	ПараметрыРасчета.ПодготовкаДанных.СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);
	
	// Выполним запрос формирования временных таблиц.
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если ПараметрыРасчета.ПараметрыОтладки.Свойство("ТекстЗапросаДляОтладки")
	 И ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "", Ложь) Тогда
		Запрос.Текст = ПараметрыРасчета.ПараметрыОтладки.ТекстЗапросаДляОтладки;
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ДополнительныеПараметрыЗапросаЭтапа Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, ФормируемыеВТ);
	
	ПараметрыРасчета.ДополнительныеПараметрыЗапросаЭтапа.Очистить();
	
КонецПроцедуры

// Завершить подготовку данных для следующих этапов.
// 
// Параметры:
//  ПараметрыРасчета - Структура - Параметры расчета
Процедура ЗавершитьПодготовкуДанныхДляСледующихЭтапов(ПараметрыРасчета) Экспорт
	
	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ПолучитьДанныеЭтапаРасчета");

	ФормируемыеВТ  = ПараметрыРасчета.ПодготовкаДанных.ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов;
	СуществующиеВТ = ПараметрыРасчета.ПодготовкаДанных.СуществующиеВТ;
	
	// Уничтожим вспомогательные временные таблицы, созданные в данном этапе расчета.
	СуществующиеВТ = СуществующиеВТ + ", " + ФормируемыеВТ;
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, СуществующиеВТ);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, НовыеВТ);
	
	ПараметрыРасчета.Удалить("ПодготовкаДанных");
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПромежуточныхДанных

// Выгружает строку шапки таблицы промежуточных данных этапа.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ИмяТаблицы - Строка -
// 	ИсточникДанных - ТаблицаЗначений, Строка -
//
Процедура ВыгрузитьШапкуТаблицыПромежуточныхДанныхРасчета(ПараметрыРасчета, ИмяТаблицы, ИсточникДанных = Неопределено)
	
	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;
	
	// Получим данные из источника.
	Если ИсточникДанных = Неопределено Тогда
		ИсточникДанных = ИмяТаблицы; // данные в одноименной временной таблице
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		// Получим пустую таблицу с той же структурой, что и временная таблица.
		ТаблицаДанных = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИсточникДанных, 0); // ТаблицаЗначений
	Иначе
		// Возьмем данные из указанной временной таблицы.
		ТаблицаДанных = ИсточникДанных; // ТаблицаЗначений
	КонецЕсли;
	
	// Сформируем заголовок табличного документа.
	ОписаниеФайлаВыгрузки = ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета[ИмяТаблицы]; // см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОписаниеФайлаВыгрузки 
	ОписаниеФайлаВыгрузки.НомерСтрокиФайла = 1;
	НомерКолонки = 0;
	
	ОписаниеФайлаВыгрузки.ТабличныйДокумент.ФиксацияСверху = 1;
	
	Для Каждого ТекущаяКолонка Из ТаблицаДанных.Колонки Цикл
		
		ОписаниеФайлаВыгрузки.Колонки.Добавить(ТекущаяКолонка.Имя);
		
		НомерКолонки = НомерКолонки + 1;
		
		Область = ОписаниеФайлаВыгрузки.ТабличныйДокумент.Область(
			ОписаниеФайлаВыгрузки.НомерСтрокиФайла, НомерКолонки,
			ОписаниеФайлаВыгрузки.НомерСтрокиФайла, НомерКолонки);
		
		Область.Текст = ТекущаяКолонка.Имя;
		Область.Шрифт = Новый Шрифт(Область.Шрифт,,, Истина); 
		
	КонецЦикла;
	
КонецПроцедуры

// Выгружает строку шапки таблицы промежуточных данных этапа.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	ИмяТаблицы - Строка -
//	ИсточникДанных - Строка, ТаблицаЗначений, ВыборкаИзРезультатаЗапроса -	
Процедура ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, ИмяТаблицы, ИсточникДанных = Неопределено) Экспорт
	
	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;
	
	// Получим данные из источника.
	Если ИсточникДанных = Неопределено Тогда
		ИсточникДанных = ИмяТаблицы; // данные в одноименной временной таблице
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		// Получим таблицу из временной таблицы.
		ТаблицаДанных = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИсточникДанных);
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		// Получим таблицу из выборки.
		ТаблицаДанных = ИсточникДанных.Владелец().Выгрузить();
	Иначе
		// Возьмем данные из указанной временной таблицы.
		ТаблицаДанных = ИсточникДанных;
	КонецЕсли;
	
	// Сформируем заголовок табличного документа.
	ОписаниеФайлаВыгрузки = ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета[ИмяТаблицы]; // см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОписаниеФайлаВыгрузки
	
	Для Каждого ТекущаяСтрока Из ТаблицаДанных Цикл
		
		ОписаниеФайлаВыгрузки.НомерСтрокиФайла = ОписаниеФайлаВыгрузки.НомерСтрокиФайла + 1;
		НомерКолонки = 0;
		
		Для Каждого ТекущаяКолонка Из ОписаниеФайлаВыгрузки.Колонки Цикл
			
			НомерКолонки = НомерКолонки + 1;
			
			Область = ОписаниеФайлаВыгрузки.ТабличныйДокумент.Область(
				ОписаниеФайлаВыгрузки.НомерСтрокиФайла, НомерКолонки,
				ОписаниеФайлаВыгрузки.НомерСтрокиФайла, НомерКолонки);
			
			Область.Текст = ТекущаяСтрока[ТекущаяКолонка];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Записывает файлы выгрузки промежуточных данных этапа.
//
Процедура ЗавершитьВыгрузкуПромежуточныхДанныхРасчета(ПараметрыРасчета) Экспорт
	
	Если НЕ ПараметрыРасчета.РаспределениеПартий.ВыгружатьДанные Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.РаспределениеПартий.ВыгрузкаДанныхРасчета Цикл
		
		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайлаВыгрузки = КлючИЗначение.Значение;
		
		// Сохраним таблицу в файл.
		Попытка
			ТабДок = ОписаниеФайлаВыгрузки.ТабличныйДокумент; // ТабличныйДокумент
			ТабДок.Записать(ОписаниеФайлаВыгрузки.ИмяФайла);
		Исключение
			
			ОписаниеФайлаВыгрузки.БылиОшибки = Истина;
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать файл ""%1""
					|%2';
					|en = 'Cannot save the ""%1"" file
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ОписаниеФайлаВыгрузки.ИмяФайла,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
				ТекстДляПротокола);
			
		КонецПопытки;
		
	КонецЦикла;
	
	ПараметрыРасчета.РаспределениеПартий.Удалить("ВыгрузкаДанныхРасчета");
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцедурыРаботыСЗапросами

// Устанавливает общие параметры запроса из параметров расчета.
// Следует использовать для идентичности имен и значений параметров во всех запросах.
//
Процедура ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета, ИспользоватьОбщийМенеджерВТ = Истина) Экспорт
	
	// Общие параметры
	РасчетныйПериод = ПараметрыРасчета.РасчетныйПериод;

	Запрос.УстановитьПараметр("НачалоПериода", РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", РасчетныйПериод.КонецПериода);
	Запрос.УстановитьПараметр("НачалоПредыдущегоПериода", НачалоМесяца(РасчетныйПериод.КонецПредыдущегоПериода));
	Запрос.УстановитьПараметр("КонецПредыдущегоПериода", РасчетныйПериод.КонецПредыдущегоПериода);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", РасчетныйПериод.НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("ГраницаНачалоПериода", РасчетныйПериод.ГраницаНачалоПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПериода", РасчетныйПериод.ГраницаКонецПериода);
	Запрос.УстановитьПараметр("ГраницаКонецПредыдущегоПериода", РасчетныйПериод.ГраницаКонецПредыдущегоПериода);

	Запрос.УстановитьПараметр("РегламентноеЗадание", ПараметрыРасчета.РегламентноеЗадание);
	Запрос.УстановитьПараметр("ПредварительныйРасчет", ПараметрыРасчета.ПредварительныйРасчет);
	Запрос.УстановитьПараметр("РежимЗакрытияМесяца", ПараметрыРасчета.РежимЗакрытияМесяца);
	
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие Тогда
		ВосстанавливатьХронологическуюПоследовательностьСписанияПартий = ПараметрыРасчета.ВосстанавливатьХронологическуюПоследовательностьСписанияПартий;
	Иначе
		ВосстанавливатьХронологическуюПоследовательностьСписанияПартий = Ложь;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВосстанавливатьХронологическуюПоследовательностьСписанияПартий",
		ВосстанавливатьХронологическуюПоследовательностьСписанияПартий);
	Запрос.УстановитьПараметр("ВыделятьОтклоненияСебестоимостиОкончательногоРасчета",
		ПараметрыРасчета.ВыделятьОтклоненияСебестоимостиОкончательногоРасчета);

	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацииСУчетомПоСредней", ПараметрыРасчета.ОрганизацииСУчетомПоСредней);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящая", ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОСкользящаяВПрошломПериоде", ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.ИспользовалиВПрошломПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСФИФОВзвешенная", ПараметрыРасчета.УчетныеПолитики.ФИФОВзвешенная.ИспользуютВТекущемПериоде);
	Запрос.УстановитьПараметр("ОрганизацииСДвижениямиПоСебестоимости", ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости); // по ним нужен расчет
	Запрос.УстановитьПараметр("ОрганизацииСОстаткамиПоСебестоимости", ПараметрыРасчета.ОрганизацииСОстаткамиПоСебестоимости); // по ним возможны корректировки начальных остатков
	Запрос.УстановитьПараметр("ОрганизацииСДетализациейМатериальныхИПостатейныхЗатрат", ПараметрыРасчета.ОрганизацииСДетализациейМатериальныхИПостатейныхЗатрат);
	Запрос.УстановитьПараметр("ОрганизацииСВосстановлениемРезервовПриСписанииЗапасовНаРасходы",
		ПараметрыРасчета.ОрганизацииСВосстановлениемРезервовПриСписанииЗапасовНаРасходы);

	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	// Типы записей регистра "Себестоимость товаров"
	Запрос.УстановитьПараметр("НепересчитываемыеТипыЗаписей", 						 ПараметрыРасчета.НепересчитываемыеТипыЗаписей);
	Запрос.УстановитьПараметр("ТипыЗаписейПервичныхПартий",   						 ПараметрыРасчета.ТипыЗаписейПервичныхПартий);
	Запрос.УстановитьПараметр("ТипыЗаписейКонвертацииДанных", 						 ПараметрыРасчета.ТипыЗаписейКонвертацииДанных);
	Запрос.УстановитьПараметр("ТипыЗаписейМногократнойКонвертацииДанных", 			 ПараметрыРасчета.ТипыЗаписейМногократнойКонвертацииДанных);
	Запрос.УстановитьПараметр("ТипыЗаписейПервичныхДвижений", 						 ПараметрыРасчета.ТипыЗаписейПервичныхДвижений);
	
	// Значения функциональных опций
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ФО Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИспользуетсяУправлениеВНА_2_4", ПараметрыРасчета.ИспользуетсяУправлениеВНА_2_4);
 	
	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	Запрос.УстановитьПараметр("УправленческийУчетОрганизаций", ПараметрыРасчета.УправленческийУчетОрганизаций);
	
	// Переопределим значение ФО ПартионныйУчетВерсии22 - для проверки версии механизма партионного учета
	// надо учитывать еще значения опций ИспользоватьПартионныйУчет и ДатаПереходаНаПартионныйУчетВерсии22.
	// "Правильное" значение ПартионныйУчетВерсии22 хранится в одноименном параметре расчета.
	Запрос.УстановитьПараметр("ПартионныйУчетВерсии22", ПараметрыРасчета.ПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("ДатаПереходаНаПартионныйУчетВерсии22", ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22);
	Запрос.УстановитьПараметр("ИспользовалсяПартионныйУчетДоПереходаНаВерсию22", ПараметрыРасчета.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22);
	
	Запрос.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", ПараметрыРасчета.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Запрос.УстановитьПараметр("Константа_УчитыватьСебестоимостьТоваровПоНазначениям", Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Получить());
	Запрос.УстановитьПараметр("Константа_ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям", Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям.Получить());
	
	// Типы налогообложения НДС
	Запрос.УстановитьПараметр("ТипыНалогообложенияНДСНеУчитываетсяВСтоимости",
		УчетНДСУП.ТипыНалогообложенияНДСНеУчитываетсяВСтоимости());
	Запрос.УстановитьПараметр("ТипыНалогообложенияНДСУчитываетсяВСтоимости",
		УчетНДСУП.ВидыДеятельностиНДСУчитываетсяВСтоимости());
	Запрос.УстановитьПараметр("ОсновноеНалогообложениеИБ",
		?(ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"),
			Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС,
			Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС));
	Запрос.УстановитьПараметр("ПорогСписанияПогрешностейОкругленияНДС", УчетНДСУПСлужебный.ПорогСписанияПогрешностейОкругления());
	
	// Виды ценности
	Запрос.УстановитьПараметр("ВидыЦенностиУслуг", ПараметрыРасчета.ВидыЦенностиУслуг);
	
	РасчетСебестоимостиЛокализация.ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	РасчетСебестоимостиКорректировкаСтоимости.ДополнитьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("РасширенныйУчетЗатратДляПартийНДС", ЗначениеЗаполнено(ПараметрыРасчета.ОрганизацииСДетализациейМатериальныхИПостатейныхЗатрат));
	
	Запрос.УстановитьПараметр("ИспользоватьУчетСебестоимости",	ПараметрыРасчета.ИспользоватьУчетСебестоимости);
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости",	ПараметрыРасчета.ДатаНачалаУчетаСебестоимости);
	
	// Отборы по типам запасов
	Запрос.УстановитьПараметр("СобственныеТипыЗапасов", СобственныеТипыЗапасов());
	
	// Отборы по разделам учета
	Запрос.УстановитьПараметр("ЗабалансовыеРазделыУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.ЗабалансовыеРазделыУчета());
	Запрос.УстановитьПараметр("БалансовыеРазделыУчета", Перечисления.РазделыУчетаСебестоимостиТоваров.БалансовыеРазделыУчета());
	
	// Отборы по видам цен
	Запрос.УстановитьПараметр("ВидПлановыхЦен", ПараметрыРасчета.ВидПлановыхЦен);
	//++ НЕ УТ
	Запрос.УстановитьПараметр("ИспользуетсяЦенообразование25", ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25"));
	//-- НЕ УТ
	
	// Параметры для запроса Документы.РаспределениеПрочихЗатрат.ТекстЗапросаПоступилоПрочихРасходов().
	Запрос.УстановитьПараметр("ПоВсемОрганизациям",   Ложь);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Истина);
	Запрос.УстановитьПараметр("СписокПодразделений",  Неопределено);
	
	// Валюты
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",  	ПараметрыРасчета.Валюты.ВалютаУправленческогоУчета);
	
	// Типы документов партии.
	Запрос.УстановитьПараметр("ТипыДокументовПартии",  			ПараметрыРасчета.ТипыДокументовПартии);
	//++ Локализация
	Запрос.УстановитьПараметр("ТипыДокументаДвиженияНЗП",  		ПараметрыРасчета.ТипыДокументаДвиженияНЗП);
	//-- Локализация
	Запрос.УстановитьПараметр("ДокументыСДвумяОрганизациями",  	ПараметрыРасчета.ДокументыСДвумяОрганизациями);
	
	Запрос.УстановитьПараметр("ТипыРегистраторовВыручки",  		ПараметрыРасчета.ТипыРегистраторовВыручки);
	
	// Решение СЛУ
	Запрос.УстановитьПараметр("ЗащитаОтПереполненияПоля", 		Pow(10, ПараметрыРасчета.РешениеСЛУ.ЗащитаОтПереполненияПоля) - 1);
	
	// Ограничения выборки данных
	Запрос.УстановитьПараметр("КоличествоЗаписейВНЗ", 			ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ);
	
	// Фиктивный регистратор для записей с пустым регистратором.
	// Заполним регистратор произвольным "первым" документом расчета себестоимости - чтобы движения можно было записать.
	// Расчет все равно в итоге будет завершен с ошибкой, но т.о. можно получить информацию обо всех ошибочных регистраторах.
	Запрос.УстановитьПараметр("ФиктивныйРегистратор", ПараметрыРасчета.ФиктивныйРегистратор);
	
	Запрос.УстановитьПараметр("РаспределятьПостатейныеЗатратыРекурсивно",
		РасчетСебестоимостиПовтИсп.РаспределятьПостатейныеЗатратыРекурсивно());
	
	// Менеджер временных таблиц
	Если ИспользоватьОбщийМенеджерВТ Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // используется в редких случаях
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеЭтапаРасчета(ПараметрыРасчета, ТекстЗапроса,
		ПараметрыНумерации = Неопределено,
		ОчищатьВременныеТаблицы = Истина, Пояснение = "") Экспорт

	ПараметрыРасчета.РаспределениеПартий.Вставить("ПараметрыНумерации", ПараметрыНумерации);
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	// Подготовим запрос.
	Запрос = Новый Запрос;
	Если ПараметрыРасчета.Свойство("ИдетРасчетСебестоимости") Тогда
		ИдетРасчетСебестоимости = ПараметрыРасчета.ИдетРасчетСебестоимости;
	Иначе
		ИдетРасчетСебестоимости = Ложь;
	КонецЕсли;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ДополнительныеПараметрыЗапросаЭтапа Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
		
	Если ПараметрыРасчета.ПараметрыОтладки.Свойство("ТекстЗапросаДляОтладки")
	 И ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "", Ложь) Тогда
		Запрос.Текст = ПараметрыРасчета.ПараметрыОтладки.ТекстЗапросаДляОтладки;
	Иначе
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	
	ВыбиратьДанныеДляРасчетаВоВременнуюТаблицу(Запрос);
	
	// Запомним существующие временные таблицы.
	Если ОчищатьВременныеТаблицы Тогда
		СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(Запрос);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов) Тогда
		УничтожитьВременныеТаблицы(
			ПараметрыРасчета,
			ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов);
	КонецЕсли;
	
	// Выполним запрос.
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, Пояснение);
	
	// Пронумеруем строки таблицы Данные.
	Если ЗначениеЗаполнено(ПараметрыНумерации) Тогда
		
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "Данные", НСтр("ru = 'Нумерация строк';
																												|en = 'Line numbering'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЗаполнитьНомераСтрокВременнойТаблицы(
			ПараметрыРасчета,
			ПараметрыНумерации,
			"Данные");
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
	КонецЕсли;
	
	// Уничтожим вспомогательные временные таблицы, созданные в данном этапе расчета.
	Если ОчищатьВременныеТаблицы Тогда
		
		СуществующиеВТ = СуществующиеВТ + ?(СуществующиеВТ = "", "", ",") + "Данные";
		
		Если ЗначениеЗаполнено(ОписаниеДвижений.ИмяВременнойТаблицы) Тогда
			СуществующиеВТ = СуществующиеВТ + "," + ОписаниеДвижений.ИмяВременнойТаблицы;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов) Тогда
			СуществующиеВТ = СуществующиеВТ + "," + ОписаниеДвижений.ВременныеТаблицыДляСледующихЭтапов;
		КонецЕсли;
		
		ОписаниеДвижений.ВременныеТаблицыТекущегоЭтапа =
			ПолучитьПереченьСуществующихВременныхТаблиц(Запрос, СуществующиеВТ);
		
	КонецЕсли;
	
	ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, "ПолучитьДанныеЭтапаРасчета");
	
	ПараметрыРасчета.ДополнительныеПараметрыЗапросаЭтапа.Очистить();
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Инициализация

// Инициализируем параметры отладки расчета.
//
Процедура ИнициализироватьПараметрыОтладки(ПараметрыОтладки, ПараметрыЗапуска) Экспорт
	
	Если ПараметрыОтладки = Неопределено Тогда
		ПараметрыОтладки = Новый Структура;
	КонецЕсли;
	
	// Запомним протоколы рассчитанных периодов в этом массиве и вернем их в место вызова расчета.
	ПараметрыОтладки.Вставить("ПротоколыРасчета", Новый Массив);
	
КонецПроцедуры

// Перед началом расчета заполняет все необходимые параметры и инициализирует все структуры данных, используемые алгоритмом расчета.
// Внимание: если какая-то сущность используется более чем в одном этапе расчета, то ее стоит занести в ПараметрыРасчета.
//
Процедура ИнициализироватьПараметрыРасчетаПартий(ПараметрыЗапуска, ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт
	
	// Создадим контейнер всех параметров, используемых механизмом расчета партий
	ПараметрыИнициализации = Новый Структура;
	ПараметрыИнициализации.Вставить("Дата", 									 ПараметрыЗапуска.Дата);
	Если ПараметрыЗапуска.Свойство("НачалоПериода") Тогда
		ПараметрыИнициализации.Вставить("НачалоПериода", 						 ПараметрыЗапуска.НачалоПериода);
		ПараметрыИнициализации.Вставить("КонецПериода", 						 ПараметрыЗапуска.КонецПериода);
	Иначе
		ПараметрыИнициализации.Вставить("НачалоПериода", 						 НачалоМесяца(ПараметрыЗапуска.Дата));
		ПараметрыИнициализации.Вставить("КонецПериода", 						 КонецМесяца(ПараметрыЗапуска.Дата));
	КонецЕсли;
	ПараметрыИнициализации.Вставить("МассивОрганизаций",   						 ПараметрыЗапуска.МассивОрганизаций);
	ПараметрыИнициализации.Вставить("ЗапущенРасчетПартий", 						 Истина);
	Если ПараметрыЗапуска.Свойство("ТолькоПредварительныйРасчетСебестоимости") Тогда
		ПараметрыИнициализации.Вставить("ТолькоПредварительныйРасчетСебестоимости", ПараметрыЗапуска.ТолькоПредварительныйРасчетСебестоимости);
	Иначе
		ПараметрыИнициализации.Вставить("ТолькоПредварительныйРасчетСебестоимости", Ложь);
	КонецЕсли;
	Если ПараметрыЗапуска.Свойство("ЗапущеноРегламентнымЗаданием") Тогда
		ПараметрыИнициализации.Вставить("ЗапущеноРегламентнымЗаданием", ПараметрыЗапуска.ЗапущеноРегламентнымЗаданием);
	Иначе
		ПараметрыИнициализации.Вставить("ЗапущеноРегламентнымЗаданием", Ложь);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("ИзмененоДокументов") Тогда
		ПараметрыИнициализации.Вставить("ИзмененоДокументов",   				 ПараметрыЗапуска.ИзмененоДокументов);
	Иначе
		ПараметрыИнициализации.Вставить("ИзмененоДокументов",   				 Неопределено);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("РасшифровкаРаспределения") Тогда
		ПараметрыИнициализации.Вставить("РасшифровкаРаспределения", 			 ПараметрыЗапуска.РасшифровкаРаспределения);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("АвтоматическоеТестирование") И ПараметрыЗапуска.АвтоматическоеТестирование Тогда
		ПараметрыИнициализации.Вставить("АвтоматическоеТестирование", 			 Истина); // вызывается при тестировании
	Иначе
		ПараметрыИнициализации.Вставить("АвтоматическоеТестирование", 			 Ложь);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("МестоВызоваРасчета") Тогда
		ПараметрыИнициализации.Вставить("МестоВызоваРасчета", 			 		 ПараметрыЗапуска.МестоВызоваРасчета);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("ПолучениеСпискаПараметров") Тогда
		ПараметрыИнициализации.Вставить("ПолучениеСпискаПараметров", 			 ПараметрыЗапуска.ПолучениеСпискаПараметров);
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("РежимЗакрытияМесяца") Тогда
		ПараметрыИнициализации.Вставить("РежимЗакрытияМесяца", 				ПараметрыЗапуска.РежимЗакрытияМесяца);
	Иначе
		ПараметрыИнициализации.Вставить("РежимЗакрытияМесяца", 				Перечисления.РежимыЗакрытияМесяца.ПустаяСсылка());
	КонецЕсли;
	
	Если ПараметрыЗапуска.Свойство("НомерЗаданияДоРасчета") Тогда
		ПараметрыИнициализации.Вставить("НомерЗаданияДоРасчета", 			 ПараметрыЗапуска.НомерЗаданияДоРасчета);
	КонецЕсли;
	
	ИнициализироватьОбщиеПараметрыРасчета(
		ПараметрыИнициализации, ПараметрыРасчета, ПараметрыОтладки);
	
КонецПроцедуры


// Перед началом расчета заполняет все общие параметры, используемые алгоритма расчета.
//
// Параметры:
// 	ПараметрыИнициализации - Структура - Описание:
// * АвтоматическоеТестирование - Булево -
// * ИзмененоДокументов - Неопределено -
// * ЗапущеноРегламентнымЗаданием - Булево -
// * ТолькоПредварительныйРасчетСебестоимости - Булево -
// * ЗапущенРасчетПартий - Булево -
// * Дата - Дата -
// 	ПараметрыРасчета - Структура -
// 	ПараметрыОтладки - Неопределено - Описание
// 	
// Возвращаемое значение:
// 	Структура - Описание:
// * ГруппыОрганизацийПоИнтеркампани - Массив -
// * ОрганизацииСОстаткамиПоСебестоимости - Массив -
// * ОрганизацииСДвижениямиПоСебестоимости - Массив -
// * ТипыЗаписейМногократнойКонвертацииДанных - Массив -
// * ТипыЗаписейКонвертацииДанных - Массив -
// * НепересчитываемыеТипыЗаписей - Массив -
// * ТипыЗаписейПервичныхПартий - Массив -
// * ФормироватьТолькоДвиженияВводаОстатков - Булево -
// * ФормироватьНачальныеОстаткиПартий22 - Булево -
// * УчитыватьСебестоимостьТоваровПоНазначениям - Булево -
// * ДатаПереходаНаПартионныйУчетВерсии22 - Дата -
// * ПартионныйУчетВерсии22 - Булево -
// * ПартионныйУчетВерсии21 - Булево, Неопределено -
// * ПартионныйУчетНеИспользуется - Булево -
// * ИспользуетсяУправлениеВНА_2_4 - Булево -
// * УправленческийУчетОрганизаций - Булево -
// * ФО - Структура -
// * ИдентификаторРасчета - УникальныйИдентификатор -  
// * ОбщееКоличествоФЗРасчета - Число -
// * ТаблицаЗаданийРасчета - ТаблицаЗначений -:
// ** ИдентификаторЗадания - УникальныйИдентификатор - 
// ** КлючЗадания - Строка -
// ** ИдентификаторРасчета - УникальныйИдентификатор - 
// * ОбщееКоличествоФЗЗаписи - Число -
// * ТаблицаЗаданийЗаписи - ТаблицаЗначений -:
// ** ИдентификаторЗадания - УникальныйИдентификатор - 
// ** ПредыдущееЗадание - УникальныйИдентификатор - 
// ** ИмяРегистра - Строка - 
// ** КоличествоДвижений - Число - 
// * СтекЗаданийЗаписи - Массив из УникальныйИдентификатор -
// * СтекДанныхДляЗаписи - Массив из Структура -
// * ПредварительныйРасчет - Булево -
// * РегламентноеЗадание - Булево -
// * ИнформационнаяБазаФайловая - Булево -
// * СтрокаСоединенияИБ - Строка -
// * ИзмененоДокументов - Неопределено -
// * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
// * РасчетныйПериод - Структура -:
// ** ГраницаКонецПредыдущегоПериода - Граница -
// ** ГраницаКонецПериода - Граница -
// ** ГраницаНачалоПериода - Граница -
// ** НачалоСледующегоПериода - Дата -
// ** КонецПредыдущегоПериода - Число -
// ** НачалоПредыдущегоПериода - Дата -
// ** НачалоПериода - Дата -
// * КопияМассивОрганизаций - Массив -
// * МассивОрганизаций - Массив -
// * ИспользоватьПлатформуДляРешенияСЛУ - Булево -
// * ВерсияПлатформыНеНиже8_3_14 - Булево -
// * ВерсияПлатформыНеНиже8_3_17 - Булево -
// * ВариантРасчета - ПеречислениеСсылка.ВариантыРасчетаПартийИСебестоимости -
// * АвтоматическоеТестирование - Булево -
// * ЗаполненыПартииВВыручке - Булево -
// * ЗаполняютсяПартииВВыручке - Булево -
// * ЗаполненыПартииВСебестоимости - Булево -
// * ЗаполняютсяПартииВСебестоимости - Булево -
// * ЗапущенРасчетПартий - Булево -
// * ПараметрыОтладки - Неопределено -
// * НомерЗаданияДоРасчета - Число -
// * ЭтоПараметрыРасчетаПУ22 - Булево -
// * ЭтоЛокализованнаяВерсия - Булево -
// * РаспределениеПартий - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьРаспределениеПартий
// * Отладка - Структура -:
// ** РегистраторыВФЗ - см. РасчетСебестоимостиПрикладныеАлгоритмы.УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета
//
Функция ИнициализироватьОбщиеПараметрыРасчета(ПараметрыИнициализации, ПараметрыРасчета, ПараметрыОтладки = Неопределено) Экспорт
	
	Если ПараметрыРасчета <> Неопределено Тогда
		Возврат ПараметрыРасчета; // ПараметрыРасчета уже инициализированы
	КонецЕсли;
	
	Дата 			  = ПараметрыИнициализации.Дата;
	МассивОрганизаций = ДоступныеОрганизации(ПараметрыИнициализации.МассивОрганизаций);
		
	СокращеннаяИнициализация = НЕ ПараметрыИнициализации.Свойство("ЗапущенРасчетПартий");
	
	#Область БазовыеПараметры
	
	Если НЕ СокращеннаяИнициализация Тогда
		ЗапущенРасчетПартий 					 = ПараметрыИнициализации.ЗапущенРасчетПартий;
		ТолькоПредварительныйРасчетСебестоимости = ПараметрыИнициализации.ТолькоПредварительныйРасчетСебестоимости;
		ЗапущеноРегламентнымЗаданием 			 = ПараметрыИнициализации.ЗапущеноРегламентнымЗаданием;
	Иначе
		// Вызов извне механизма расчета с параметрами по умолчанию.
		ЗапущенРасчетПартий 					 = Истина;
		ТолькоПредварительныйРасчетСебестоимости = Ложь;
		ЗапущеноРегламентнымЗаданием 			 = Ложь;
	КонецЕсли;
	
	// Создадим контейнер всех общих параметров, используемых механизмами расчета партий и себестоимости.
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЭтоПараметрыРасчетаПУ22",		 Истина); // служебный идентификатор структуры
	ПараметрыРасчета.Вставить("ПараметрыОтладки", 			 	 ПараметрыОтладки);
	ПараметрыРасчета.Вставить("НомерЗаданияДоРасчета",
		?(ПараметрыИнициализации.Свойство("НомерЗаданияДоРасчета"), ПараметрыИнициализации.НомерЗаданияДоРасчета, -1));
	
	ПараметрыРасчета.Вставить("ЭтоЛокализованнаяВерсия", 		 Истина);
	//++ Локализация
	ПараметрыРасчета.Вставить("ЭтоЛокализованнаяВерсия", 		 Ложь);
	//-- Локализация
		
	// Параметры старта и текущего состояния расчета
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", 			 ЗапущенРасчетПартий); // запущен полный расчет (партии+себестоимость) или только расчет себестоимости?
	ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, 	 НЕ ЗапущенРасчетПартий); // заполняет свойство ИдетРасчетПартий
	
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВСебестоимости", Ложь); // управляет логикой заполнения реквизита "РасчетПартий" в регистре себестоимости
	ПараметрыРасчета.Вставить("ЗаполненыПартииВСебестоимости",   НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра себестоимости
	ПараметрыРасчета.Вставить("ЗаполняютсяПартииВВыручке", 		 Ложь); // управляет логикой заполнения реквизита "РасчетПартий" и логикой заполнения кэша оборотов регистра выручки
	ПараметрыРасчета.Вставить("ЗаполненыПартииВВыручке",   		 НЕ ЗапущенРасчетПартий); // управляет логикой получения кэша оборотов регистра выручки
	
	ПараметрыРасчета.Вставить("МестоВызоваРасчета",
		?(ПараметрыИнициализации.Свойство("МестоВызоваРасчета"),
			ПараметрыИнициализации.МестоВызоваРасчета, НСтр("ru = 'Не указано';
															|en = 'Not specified'", ОбщегоНазначения.КодОсновногоЯзыка()))); // откуда вызвали расчет (для протокола)
	
	Если ПараметрыИнициализации.Свойство("РасшифровкаРаспределения") Тогда
		ПараметрыРасчета.Вставить("РасшифровкаРаспределения", ПараметрыИнициализации.РасшифровкаРаспределения); // вызывается при формировании отчета
	КонецЕсли;
	
	Если ПараметрыИнициализации.Свойство("АвтоматическоеТестирование") И ПараметрыИнициализации.АвтоматическоеТестирование Тогда
		ПараметрыРасчета.Вставить("АвтоматическоеТестирование", Истина); // вызывается при тестировании
	Иначе
		ПараметрыРасчета.Вставить("АвтоматическоеТестирование", Ложь);
	КонецЕсли;
	
	// Вариант расчета
	Если ЗапущеноРегламентнымЗаданием Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимостьРегламентноеЗадание);
	ИначеЕсли ТолькоПредварительныйРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимость);
	ИначеЕсли ЗапущенРасчетПартий Тогда
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость);
	Иначе
		ПараметрыРасчета.Вставить("ВариантРасчета", 		   Перечисления.ВариантыРасчетаПартийИСебестоимости.ФактическаяСебестоимость);
	КонецЕсли;
	
	ОбщиеПараметрыЗакрытияМесяца = ЗакрытиеМесяцаСервер.ОбщиеПараметрыЗакрытияМесяца();
	ПараметрыРасчета.Вставить("РаспределениеДопРасходовМеждуПартиямиИТоварами",
		ОбщиеПараметрыЗакрытияМесяца.РаспределениеДопРасходовМеждуПартиямиИТоварами);
	ПараметрыРасчета.Вставить("РаспределениеПостатейныхРасходовНаПродажу",
		ОбщиеПараметрыЗакрытияМесяца.РаспределениеПостатейныхРасходовНаПродажу);
	ПараметрыРасчета.Вставить("ВосстанавливатьХронологическуюПоследовательностьСписанияПартий",
		ОбщиеПараметрыЗакрытияМесяца.ВосстанавливатьХронологическуюПоследовательностьСписанияПартий);
	ПараметрыРасчета.Вставить("ВыделятьОтклоненияСебестоимостиОкончательногоРасчета",
		ОбщиеПараметрыЗакрытияМесяца.ВыделятьОтклоненияСебестоимостиОкончательногоРасчета);
	
	Если ПараметрыИнициализации.Свойство("ОписаниеЗамера") Тогда
		// Штатный вызов из механизма партионного учета версии 2.1.
		ПараметрыРасчета.Вставить("ОписаниеЗамера", ПараметрыИнициализации.ОписаниеЗамера);
	КонецЕсли;
	
	// Версия платформы.
	ПараметрыРасчета.Вставить("ВерсияПлатформыНеНиже8_3_14", ВерсияПлатформыНеНижеУказанной("8.3.14.0"));
	ПараметрыРасчета.Вставить("ВерсияПлатформыНеНиже8_3_17", ВерсияПлатформыНеНижеУказанной("8.3.17.0"));
	
	ПараметрыРасчета.Вставить("ИспользоватьПлатформуДляРешенияСЛУ",
		ПараметрыРасчета.ВерсияПлатформыНеНиже8_3_14
		И РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().ИспользоватьПлатформуДляРешенияСЛУ);
		
	ПараметрыРасчета.Вставить("ОтключитьРедуцированиеГрафа",
		РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().ОтключитьРедуцированиеГрафа);
	ПараметрыРасчета.Вставить("ОтключитьРедуцированиеГрафаНДС",
		РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().ОтключитьРедуцированиеГрафаНДС);
	
	// Организации для расчета.
	ПараметрыРасчета.Вставить("МассивОрганизаций",			 МассивОрганизаций);
	ПараметрыРасчета.Вставить("КопияМассивОрганизаций",		 ОбщегоНазначения.СкопироватьРекурсивно(МассивОрганизаций));
	
	#КонецОбласти
	
	// Создаем описание данных для протоколирования расчета и замера производительности.
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ИнициализироватьОбщиеПараметрыРасчета");
	
	#Область РасчетныйПериод
	
	// Периода расчета и границы периода
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода", 		 		   ПараметрыИнициализации.НачалоПериода);
	РасчетныйПериод.Вставить("КонецПериода",  		 		   ПараметрыИнициализации.КонецПериода);
	РасчетныйПериод.Вставить("НачалоПредыдущегоПериода", 	   НачалоМесяца(РасчетныйПериод.НачалоПериода - 1));
	РасчетныйПериод.Вставить("КонецПредыдущегоПериода", 	   РасчетныйПериод.НачалоПериода - 1);
	РасчетныйПериод.Вставить("НачалоСледующегоПериода", 	   КонецМесяца(Дата) + 1);
	РасчетныйПериод.Вставить("ГраницаНачалоПериода", 		   Новый Граница(РасчетныйПериод.НачалоПериода, ВидГраницы.Исключая));
	РасчетныйПериод.Вставить("ГраницаКонецПериода",  		   Новый Граница(РасчетныйПериод.КонецПериода, ВидГраницы.Включая));
	РасчетныйПериод.Вставить("ГраницаКонецПредыдущегоПериода", Новый Граница(РасчетныйПериод.КонецПредыдущегоПериода, ВидГраницы.Включая));
	
	ПараметрыРасчета.Вставить("РасчетныйПериод", 			   РасчетныйПериод);
	
	#КонецОбласти
	
	#Область ОбщиеПараметры
	
	// Общий менеджер временных таблиц для всех этапов расчета
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	// Служебные параметры запроса этапа расчета. После выполнения этапа очищаются.
	ПараметрыРасчета.Вставить("ДополнительныеПараметрыЗапросаЭтапа", Новый Структура);

	// Статистика изменения документов за расчетный период (причина пересчета периода).
	Если ПараметрыИнициализации.Свойство("ИзмененоДокументов") Тогда
		// Штатный вызов из механизма партионного учета версии 2.2.
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   ПараметрыИнициализации.ИзмененоДокументов);
	Иначе
		ПараметрыРасчета.Вставить("ИзмененоДокументов",   	   Неопределено);
	КонецЕсли;
	
	// Прочие служебные свойства
	ПараметрыРасчета.Вставить("СтрокаСоединенияИБ",	 		   СтрокаСоединенияИнформационнойБазы());
	ПараметрыРасчета.Вставить("ИнформационнаяБазаФайловая",	   ОбщегоНазначения.ИнформационнаяБазаФайловая());
	
	// Параметры расчета себестоимости
	ПараметрыРасчета.Вставить("РегламентноеЗадание",		   ЗапущеноРегламентнымЗаданием);
	ПараметрыРасчета.Вставить("ПредварительныйРасчет",		   ТолькоПредварительныйРасчетСебестоимости);
	Если ПараметрыИнициализации.Свойство("РежимЗакрытияМесяца") Тогда
		ПараметрыРасчета.Вставить("РежимЗакрытияМесяца",	   ПараметрыИнициализации.РежимЗакрытияМесяца);
	Иначе
		ПараметрыРасчета.Вставить("РежимЗакрытияМесяца",	   Перечисления.РежимыЗакрытияМесяца.ПустаяСсылка());
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФоновыеЗадания
	
	// Свойства фоновых заданий расчета и записи движений.
	ТаблицаЗаданийЗаписи = Новый ТаблицаЗначений;
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ПредыдущееЗадание");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИмяРегистра");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоДвижений");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ИдентификаторРасчета");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ТекстСтатистика");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ТекстОшибки");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("КоличествоПорций");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("НомерПервойПорции");
	ТаблицаЗаданийЗаписи.Колонки.Добавить("ПараметрыЗаписи");
	
	ТаблицаЗаданийРасчета = Новый ТаблицаЗначений;
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("КлючЗадания");
	ТаблицаЗаданийРасчета.Колонки.Добавить("ИдентификаторРасчета");
	
	ТаблицаЗаданийОтраженияВУчете = Новый ТаблицаЗначений;
	ТаблицаЗаданийОтраженияВУчете.Колонки.Добавить("ИдентификаторЗадания");
	ТаблицаЗаданийОтраженияВУчете.Колонки.Добавить("КлючЗадания");
	ТаблицаЗаданийОтраженияВУчете.Колонки.Добавить("ИдентификаторРасчета");
	
	ПараметрыРасчета.Вставить("СтекЗаданийЗаписи",    		   Новый Массив); // стек вызовов фоновых заданий для записи движений
	ПараметрыРасчета.Вставить("ТаблицаЗаданийЗаписи", 		   ТаблицаЗаданийЗаписи); // описание каждого запущенного задания записи
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗЗаписи",	   0); // общее количество выполненных фоновых заданий записи
	ПараметрыРасчета.Вставить("СтекДанныхДляЗаписи",    	   Новый Массив); // стек движений по регистрам, подготовленных для записи
	
	ПараметрыРасчета.Вставить("ТаблицаЗаданийОтраженияВУчете", ТаблицаЗаданийОтраженияВУчете); // описание каждого запущенного задания отражения в учете
	
	ПараметрыРасчета.Вставить("ТаблицаЗаданийРасчета", 		   ТаблицаЗаданийРасчета); // описание каждого запущенного задания расчета
	ПараметрыРасчета.Вставить("ОбщееКоличествоФЗРасчета",	   0); // общее количество выполненных фоновых заданий расчета
	
	ПараметрыРасчета.Вставить("ИдентификаторРасчета"); // заполняется для фоновых заданий расчета партий
		
	#КонецОбласти
	
	#Область ТехнологическиеПараметры
	
	// Технологические параметры расчета.
	УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета);
	
	#КонецОбласти
	
	#Область ФункциональныеОпции
	
	// Значения анализируемых функциональных опций и констант (они также устанавливаются в качестве одноименных параметров запросов).
	ПараметрыРасчета.Вставить("ФО", Новый Структура);
	ИменаФО = "
		|ИспользоватьУправлениеПроизводством2_2,
		|ВалютыУпрИРеглУчетаСовпадают,
		//++ НЕ УТ
		|АналитическийУчетПоГруппамПродукции,
		|ВидЦеныПлановойСтоимостиМатериаловРабот,
		//-- НЕ УТ
		|ИспользоватьУчетЗатратПоНаправлениямДеятельности,
		|ИспользоватьРеглУчет,
		|ИспользоватьУправленческуюОрганизацию,
		|ИспользоватьУчетПрочихДоходовРасходов,
		|ИспользоватьУчетПрочихДоходовРасходовРегл,
		|РаспределениеДопРасходовПоВыбывшимТоварам,
		|РаспределениеДопРасходовНаТоварыВПутиОтПоставщиков,
		//++ НЕ УТ
		|ИспользоватьМеждународныйФинансовыйУчет,
		|ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС,
		//-- НЕ УТ
		|ФормироватьВидыЗапасовПоГруппамФинансовогоУчета,
		|ФормироватьФинансовыйРезультат,
		|ФормироватьУправленческийБаланс";
	РасчетСебестоимостиЛокализация.ДополнитьИменаФункциональныхОпций(ИменаФО);
	
	Для Каждого КлючИЗначение Из Новый Структура(ИменаФО) Цикл
		
		ОписаниеФО = ОписаниеКонстантыИлиФункциональнойОпции(КлючИЗначение.Ключ);
		
		Если ОписаниеФО.Метаданные <> Неопределено Тогда
			ПараметрыРасчета.ФО.Вставить(КлючИЗначение.Ключ, ОписаниеФО.Значение);
		Иначе
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдена функциональная опция или константа ""%1""';
					|en = 'Functional option or the ""%1"" constant is not found'", ОбщегоНазначения.КодОсновногоЯзыка()),
				КлючИЗначение.Ключ);
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
				ТекстДляПротокола);
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				МассивОрганизаций, // т.к. свойство ПараметрыРасчета.МассивОрганизаций еще не инициализировано
				НСтр("ru = 'При запуске расчета диагностированы ошибки';
					|en = 'Errors were found on calculation start'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Признак ведения упр. учета (расширенная проверка ФО ВестиУправленческийУчетОрганизаций).
	ПараметрыРасчета.Вставить("УправленческийУчетОрганизаций",
		РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	
	// Признак использования в рассчитываемом периоде управления внеоборотными активами версии 2.4.
	ИспользуетсяУправлениеВНА_2_4 = Ложь;
	//++ НЕ УТ
	ИспользуетсяУправлениеВНА_2_4 = ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	//-- НЕ УТ
	ПараметрыРасчета.Вставить("ИспользуетсяУправлениеВНА_2_4", ИспользуетсяУправлениеВНА_2_4);
	
	// Признаки использования в рассчитываемом периоде партионного учета
	ПараметрыРасчета.Вставить("ПартионныйУчетНеИспользуется",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетНеИспользуется(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии21",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ДатаПереходаНаПартионныйУчетВерсии22",
		РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22());	
	ПараметрыРасчета.Вставить("ИспользовалсяПартионныйУчетДоПереходаНаВерсию22",
		РасчетСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата(1,1,1)));
	
	ПараметрыРасчета.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям",
		РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(ПараметрыРасчета.РасчетныйПериод.НачалоПериода));	
	
	// Признак расчета первого месяца в партионном учете версии 2.2
	ПараметрыРасчета.Вставить("ФормироватьНачальныеОстаткиПартий22",
		ПараметрыРасчета.ПартионныйУчетВерсии22
	 	И ПараметрыРасчета.РасчетныйПериод.НачалоПериода = ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22);
	
	// Признаки начала учета себестоимости.
	ПараметрыРасчета.Вставить("ДатаНачалаУчетаСебестоимости",
		НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
	ПараметрыРасчета.Вставить("ИспользоватьУчетСебестоимости",
		РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(РасчетныйПериод.НачалоПериода));
	ПараметрыРасчета.Вставить("ФормироватьТолькоДвиженияВводаОстатков",
		ПараметрыРасчета.РасчетныйПериод.НачалоСледующегоПериода = ПараметрыРасчета.ДатаНачалаУчетаСебестоимости);
	
	#КонецОбласти
	
	#Область ТипыЗаписей
	
	// Типы записей регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ТипыЗаписейПервичныхПартий",   			  ТипыЗаписейПервичныхПартий());
	ПараметрыРасчета.Вставить("НепересчитываемыеТипыЗаписей", 			  НепересчитываемыеТипыЗаписей());
	ПараметрыРасчета.Вставить("ТипыЗаписейКонвертацииДанных", 			  ТипыЗаписейКонвертацииДанных());
	ПараметрыРасчета.Вставить("ТипыЗаписейМногократнойКонвертацииДанных", ТипыЗаписейМногократнойКонвертацииДанных());
	ПараметрыРасчета.Вставить("ТипыЗаписейПервичныхДвижений", 			  ТипыЗаписейПервичныхДвижений());
	
	// Правила заполнения поля ТипЗаписи регистра "Себестоимость товаров"
	ПараметрыРасчета.Вставить("ПравилаЗаполненияПоляТипЗаписи",
		РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи());
		
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи.Количество());
	
	#КонецОбласти
	
	#Область ТипыДокументов
	
	МассивТипов = Новый Массив;
	Для Каждого ТекущийТип Из Метаданные.ОпределяемыеТипы.ДокументПартии.Тип.Типы() Цикл
		МассивТипов.Добавить(ТекущийТип);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ТипыДокументовПартии", МассивТипов);
	
	МассивТипов = Новый Массив;
	Для Каждого МетаДокумент Из Метаданные.Документы Цикл
		Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж) Тогда
			МассивТипов.Добавить(Тип("ДокументСсылка." + МетаДокумент.Имя));
		КонецЕсли;
	КонецЦикла;

	ПараметрыРасчета.Вставить("ТипыРегистраторовВыручки", МассивТипов);
	
	//++ Локализация
	МассивТипов = Новый Массив;
	Для Каждого ТекущийТип Из Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.Измерения.ДокументДвижения.Тип.Типы() Цикл
		МассивТипов.Добавить(ТекущийТип);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("ТипыДокументаДвиженияНЗП", МассивТипов);
	//-- Локализация
	
	// Для данных типов документов в регистре сведений РеестрДокументов есть две записи:
	// по организации-отправителю без признака ДополнительнаяЗапись, и по организации-получатею с признаком ДополнительнаяЗапись.
	// В запросах соединения с реестром, если выполняется соединение по полю Организация, надо учитывать такие дополнительные записи.
	ДокументыСДвумяОрганизациями = Новый Массив;
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя()));
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя()));
	//++ НЕ УТКА
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ПроизводствоБезЗаказа.ПолноеИмя()));
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя()));
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями.ПолноеИмя()));
	ДокументыСДвумяОрганизациями.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя()));
	//-- НЕ УТКА
	
	ПараметрыРасчета.Вставить("ДокументыСДвумяОрганизациями", ДокументыСДвумяОрганизациями);
	
	#КонецОбласти
	
	#Область ОрганизацииИПолитики
	
	// Организации и их учетные политики.
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		МассивОрганизаций.Количество());
	
	ПараметрыРасчета.Вставить("ОрганизацииСДвижениямиПоСебестоимости",     ОрганизацииСДвижениямиПоСебестоимости(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСОстаткамиПоСебестоимости",      ОрганизацииСОстаткамиПоСебестоимости(Дата, МассивОрганизаций));
	ПараметрыРасчета.Вставить("ОрганизацииСДетализациейМатериальныхИПостатейныхЗатрат", Новый Массив);
	ПараметрыРасчета.Вставить("ОрганизацииСВосстановлениемРезервовПриСписанииЗапасовНаРасходы", Новый Массив);
	ПараметрыРасчета.Вставить("ОрганизацииСУчетомПоСредней", Новый Массив);
	
	ПараметрыРасчета.Вставить("УчетныеПолитики",					   	   Новый Структура);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("МетодыОценкиСтоимости", 	   Новый Соответствие); // Организация - Метод оценки
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("ФИФОСкользящая", 	   	   Новый Структура);
	
	ПараметрыРасчета.УчетныеПолитики.Вставить("ФИФОВзвешенная", 	   	   Новый Структура);
	
	ИспользуютФИФОВТекущемПериоде   = Новый Массив;
	ИспользовалиФИФОВПрошломПериоде = Новый Массив;
	ИспользуютФИФОВзвешеннаяВТекущемПериоде   = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СпрОрганизации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|ГДЕ
	|	СпрОрганизации.Ссылка В (&Организации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.ВосстанавливатьРезервПриСписанииЗапасовНаРасходы
	|ПОМЕСТИТЬ ВТФинУчет
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.Организация КАК Организация,
	|	УчетнаяПолитикаФинансовогоУчетаСрезПоследних.МетодОценкиСтоимостиТоваров
	|ПОМЕСТИТЬ ВТФинУчетПрошлыйПериод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(&ПрошлыйПериод, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК УчетнаяПолитикаФинансовогоУчетаСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Если организация является плательщиком НДД, то для нее надо вести детальный учет затрат
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.ПлательщикНДД
	|ПОМЕСТИТЬ ВТСистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, Организация В
	|		(ВЫБРАТЬ
	|			ГоловнаяОрганизация
	|		ИЗ
	|			ВтГоловныеОрганизации)) КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТФинУчет.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчет.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|		ЛОЖЬ)
	|	ИЛИ ЕСТЬNULL(ВТСистемаНалогообложения.ПлательщикНДД,
	|		ЛОЖЬ)
	|		КАК ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров,
	|	ЕСТЬNULL(ВТФинУчет.ВосстанавливатьРезервПриСписанииЗапасовНаРасходы,
	|		ЛОЖЬ) КАК ВосстанавливатьРезервПриСписанииЗапасовНаРасходы
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчет КАК ВТФинУчет
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчет.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСистемаНалогообложения КАК ВТСистемаНалогообложения
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТСистемаНалогообложения.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГоловныеОрганизации.Организация КАК Организация,
	|	ЕСТЬNULL(ВТФинУчетПрошлыйПериод.МетодОценкиСтоимостиТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц)) КАК МетодОценкиСтоимостиТоваров
	|ИЗ
	|	ВтГоловныеОрганизации КАК ВтГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФинУчетПрошлыйПериод КАК ВТФинУчетПрошлыйПериод
	|		ПО ВтГоловныеОрганизации.ГоловнаяОрганизация = ВТФинУчетПрошлыйПериод.Организация
	|";
	
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("ПрошлыйПериод", ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода);
	
	Результат						= Запрос.ВыполнитьПакет();
	
	УчетныеПолитики					= Результат[Результат.ВГраница()-1].Выгрузить();
	УчетныеПолитикиПрошлогоПериода	= Результат[Результат.ВГраница()].Выгрузить();
	
	Для Каждого ПараметрыУчетнойПолитики Из УчетныеПолитики Цикл
		
		ПараметрУчетнойПолитикиПрошлогоПериода = УчетныеПолитикиПрошлогоПериода.Найти(ПараметрыУчетнойПолитики.Организация, "Организация");
		
		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(ПараметрыУчетнойПолитики.Организация, ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров);
		
		// ФИФОСкользящая
		Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			ИспользуютФИФОВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрУчетнойПолитикиПрошлогоПериода.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
			ИспользовалиФИФОВПрошломПериоде.Добавить(ПараметрУчетнойПолитикиПрошлогоПериода.Организация);
		КонецЕсли;
		
		Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка Тогда
			ИспользуютФИФОВзвешеннаяВТекущемПериоде.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыУчетнойПолитики.ДетализироватьМатериальныеИПостатейныеЗатратыВСебестоимостиТоваров Тогда
			ПараметрыРасчета.ОрганизацииСДетализациейМатериальныхИПостатейныхЗатрат.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		Если ПараметрыУчетнойПолитики.ВосстанавливатьРезервПриСписанииЗапасовНаРасходы Тогда
			ПараметрыРасчета.ОрганизацииСВосстановлениемРезервовПриСписанииЗапасовНаРасходы.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
		// СредняяЗаМесяц
		Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц Тогда
			ПараметрыРасчета.ОрганизацииСУчетомПоСредней.Добавить(ПараметрыУчетнойПолитики.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.Вставить("ИспользуютВТекущемПериоде",   ИспользуютФИФОВТекущемПериоде);
	ПараметрыРасчета.УчетныеПолитики.ФИФОСкользящая.Вставить("ИспользовалиВПрошломПериоде", ИспользовалиФИФОВПрошломПериоде);
	ПараметрыРасчета.УчетныеПолитики.ФИФОВзвешенная.Вставить("ИспользуютВТекущемПериоде",   ИспользуютФИФОВзвешеннаяВТекущемПериоде);
	
	#Область ТипыНалогообложенияНДС
	
	ПараметрыРасчета.Вставить("ТипыНалогообложенияНДСНеУчитываетсяВСтоимости",
		ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(
			УчетНДСУП.ТипыНалогообложенияНДСНеУчитываетсяВСтоимости(), Ложь));
	ПараметрыРасчета.Вставить("ТипыНалогообложенияНДСУчитываетсяВСтоимости",
		ОбщегоНазначенияУТКлиентСервер.ПреобразоватьМассивВСтруктуруИлиСоответствие(
			УчетНДСУП.ВидыДеятельностиНДСУчитываетсяВСтоимости(), Ложь));
	
	#КонецОбласти
	
	#Область ВидыЦенности
	
	ПараметрыРасчета.Вставить("ВидыЦенностиУслуг",
		Перечисления.ВидыЦенностей.МассивВидовЦенностиУслугДляУчетаСебестоимости());
	
	#КонецОбласти
	
	#Область ВидыЦен
	
	ПараметрыРасчета.Вставить("ВидПлановыхЦен", Справочники.ВидыЦен.ПустаяСсылка());
	//++ НЕ УТ
	ПараметрыРасчета.Вставить("ВидПлановыхЦен",
		Справочники.ВидыЦен.ВидЦеныПоУмолчанию(Константы.ВидЦеныПлановойСтоимостиМатериаловРабот.Получить()));
	//-- НЕ УТ
	
	#КонецОбласти
	
	РасчетСебестоимостиЛокализация.ДополнитьПараметрыРасчета(ПараметрыРасчета);
	
	Если НЕ СокращеннаяИнициализация Тогда
		
		// Получим группы организаций, связанных по Интеркампани (для расчета себестоимости).
		Если ПараметрыРасчета.РасчетныйПериод.НачалоПериода = ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22 Тогда
			ОрганизацииДляИнтеркампани = ПараметрыРасчета.МассивОрганизаций;
		Иначе
			ОрганизацииДляИнтеркампани = ОбъединитьМассивы(
				ПараметрыРасчета.ОрганизацииСДвижениямиПоСебестоимости,
				ПараметрыРасчета.ОрганизацииСОстаткамиПоСебестоимости);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОрганизацииДляИнтеркампани) Тогда
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани", Новый Массив);
		Иначе
			ПараметрыРасчета.Вставить("ГруппыОрганизацийПоИнтеркампани",
				СвязиОрганизацийПоСхемеИнтеркампани(Дата, ОрганизацииДляИнтеркампани, Истина));
		КонецЕсли;
		
		// Методы оценки стоимости для каждой из этих групп; сопоставляется с ГруппыОрганизацийПоИнтеркампани по индексу элемента.
		ПараметрыРасчета.Вставить("МетодыОценкиПоГруппамОрганизаций", Новый Массив);
		
		Для Каждого ГруппаОрганизаций Из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани Цикл
			ПараметрыРасчета.МетодыОценкиПоГруппамОрганизаций.Добавить(
				ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, ГруппаОрганизаций));
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Валюты
	
	ПараметрыРасчета.Вставить("Валюты", Новый Структура);
	ПараметрыРасчета.Валюты.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	#КонецОбласти
	
	ПараметрыРасчета.Вставить("ФиктивныйРегистратор", Неопределено);
	ПараметрыРасчета.Вставить("ИдентификаторРасчетаДляЗакрытияМесяца", Неопределено);
	
	Если ПараметрыИнициализации.Свойство("ПолучениеСпискаПараметров") Тогда
		Возврат ПараметрыРасчета; // для вызова процедуры извне механизма с целью получения списка переопределяемых параметров расчета и отладки
	КонецЕсли;
		
	// Формирует общие временные таблицы для отбора данных в запросах.
	ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
	// Описание регистров
	ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	
	// Формирует вспомогательные временные таблицы.
	ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета);
	
	Если СокращеннаяИнициализация Тогда
		Возврат ПараметрыРасчета; // для вызова процедуры извне механизма с целью инициализации временных таблиц
	КонецЕсли;
	
	// Формирует в ИБ документы расчета себестоимости для рассчитываемых организаций.
	// Также формирует временную таблицу ВТДокументыРасчетаСебестоимости и свойство ДокументыРасчетаПоОрганизациям.
	ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ТолькоПредварительныйРасчетСебестоимости, ЗапущеноРегламентнымЗаданием);
	
	Если ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		// Формирует временную таблицу ВТДокументыРасчетаСебестоимостиПрошлогоПериода, используемую в механизме корректировок начальных остатков.
		ИнициализироватьДокументыРасчетаСебестоимостиПрошлогоПериода(ПараметрыРасчета);
	КонецЕсли;
	
	ОчиститьУстаревшиеКэшиДанныхРасчетаПартий();
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ИнициализироватьОсновныеПараметрыРасчета(НачалоПериода, КонецПериода, МассивОрганизаций, ЗапущенРасчетПартий = Ложь, ИдетРасчетПартий = Ложь) Экспорт
	
	РасчетныйПериод = Новый Структура;
	РасчетныйПериод.Вставить("НачалоПериода",	   	 НачалоМесяца(НачалоПериода));
	РасчетныйПериод.Вставить("КонецПериода",  	   	 КонецДня(КонецПериода));
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РасчетныйПериод",   	 РасчетныйПериод);
	ПараметрыРасчета.Вставить("МассивОрганизаций", 	 МассивОрганизаций);
	
	ПараметрыРасчета.Вставить("ЗапущенРасчетПартий", ЗапущенРасчетПартий);
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", 	 ИдетРасчетПартий);
	
	Возврат ПараметрыРасчета;
	
КонецФункции


Процедура ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, ИдетРасчетСебестоимости) Экспорт
	
	ПараметрыРасчета.Вставить("ИдетРасчетПартий", НЕ ИдетРасчетСебестоимости); // в данный выполняется расчет партий или расчет себестоимости?
	
	Если ИдетРасчетСебестоимости Тогда
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимостиКорректировкаСтоимости.Имя);
	Иначе
		ПараметрыРасчета.Вставить("ИмяМодуляМеханизмаРасчета", Метаданные.ОбщиеМодули.РасчетСебестоимости.Имя);
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("МодульМеханизмаРасчета", ОбщегоНазначения.ОбщийМодуль(ПараметрыРасчета.ИмяМодуляМеханизмаРасчета));
	
КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреСебестоимостьТоваров(ПараметрыРасчета, ИдетЗаполнение) Экспорт
	
	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости = Ложь;   // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВСебестоимости   = Истина; // партии в себестоимости заполнены
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполняетсяЗаполнениеПартийВРегистреВыручкаИСебестоимостьПродаж(ПараметрыРасчета, ИдетЗаполнение) Экспорт
	
	Если ИдетЗаполнение Тогда
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Истина; // этап начат
	Иначе
		ПараметрыРасчета.ЗаполняютсяПартииВВыручке = Ложь; // этап завершен
		ПараметрыРасчета.ЗаполненыПартииВВыручке   = Истина; // партии в выручке заполнены
	КонецЕсли;
	
КонецПроцедуры
	
	
// Инициализирует общие параметры расчета, описывающие обслуживаемые механизмом расчета регистры.
//
Процедура ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета)
	
	// Значения структур РегистрыСРасчетнымиОборотами и РегистрыСРасчетнымиОстатками определяет,
	// будет ли выполняться автообновления расчетных записей (оборотов)/остатков при кэшировании сформированных движений.
	// Если требуется отключить автообновление, то перед обращением к расчетным таблицам надо добавить вызов
	// ОбновитьРасчетныеОборотыРегистра() или ОбновитьРасчетныеОстаткиРегистра()
	// Сначала необходимо выполнять обновление расчетных записей, т.к. при расчете остатков используются эти данные.
	
	// К основным таблицам этих регистров обращаться нельзя, т.к. они содержат результаты предыдущего расчета.
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОборотами", Новый Структура); // ВТКэшРасчетныеОбороты...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.ТоварыОрганизаций.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.Имя, Истина);
	
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Эти регистры не используются при расчете себестоимости
		ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.Имя, Истина);
	КонецЕсли;
	//-- НЕ УТ
	
	// К "реальным" конечным остаткам этих регистров обращаться нельзя,
	// т.к. они некорректны - содержат результаты предыдущего расчета.
	ПараметрыРасчета.Вставить("РегистрыСРасчетнымиОстатками", Новый Структура); // ВТКэшРасчетныеОстатки...
	
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя, Истина);
	//++ НЕ УТ
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя, Истина);
	ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов.Имя, Истина);
	//-- НЕ УТ
	
	РасчетСебестоимостиЛокализация.ИнициализироватьОбслуживаемыеРегистры(ПараметрыРасчета);
	
	// Инициализируем регистры, используемые механизмами расчета партий и себестоимости
	ОбслуживаемыеРегистры = Новый Соответствие;
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры);
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		РасчетСебестоимости.ИсходящиеДанныеМеханизма(ОбслуживаемыеРегистры); // дополним перечень регистров
	КонецЕсли;
	
	ПараметрыРасчета.Вставить("Движения", Новый Структура);
	Для Каждого КлючИЗначение Из ОбслуживаемыеРегистры Цикл
		ИнициализироватьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
	КонецЦикла;
	
	// При необходимости выполняется полная очистка всех движений, сформированных предыдущим расчетом.
	Если НЕ ПараметрыРасчета.Свойство("РасшифровкаРаспределения")
	 И ПараметрыРасчета.Отладка.ОчищатьСтарыеДвижения Тогда
		ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета);
		ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
	КонецЕсли;
	
КонецПроцедуры

// Формирует общие временные таблицы для отбора данных в запросах.
//
Процедура ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета) Экспорт
	
	// Для повторной инициализации надо уничтожить все временные таблицы, создаваемые в этой процедуре.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АналитикаПоПартнерам.Ссылка		 				КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация 				КАК Организация,
	|	АналитикаПоПартнерам.Контрагент					КАК Контрагент,
	|	АналитикаПоПартнерам.Партнер 					КАК Партнер,
	|	АналитикаПоПартнерам.НаправлениеДеятельности 	КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ ВТОтборАналитикаПоПартнерам
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	АналитикаПоПартнерам.Организация В (&МассивОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.КлючАналитики,
	|	Т.Организация
	|ИЗ
	|	ВТОтборАналитикаПоПартнерам КАК Т
	|";
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТОтборАналитикаПоПартнерам");
	
	ОрганизацияПоАналитикеПартнеров = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияПоАналитикеПартнеров.Вставить(Выборка.КлючАналитики, Выборка.Организация);
	КонецЦикла;

	ПараметрыРасчета.Вставить("ОрганизацияПоАналитикеПартнеров", ОрганизацияПоАналитикеПартнеров);
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);
	
	РасчетСебестоимостиЛокализация.ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
	
КонецПроцедуры

// Формирует вспомогательные временные таблицы.
//
Процедура ИнициализироватьВспомогательныеВременныеТаблицы(ПараметрыРасчета) Экспорт
	
	ПараметрыРасчета.Вставить("ВспомогательныеВременныеТаблицы", Новый Структура);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(
		Запрос.МенеджерВременныхТаблиц,
		ПараметрыРасчета.ПравилаЗаполненияПоляТипЗаписи);
	
	ИнициализироватьВспомогательнуюВременнуюТаблицу(
		ПараметрыРасчета,
		"ВТПромежуточнаяСебестоимостьТоваров",
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	0								КАК НомерУзла,
	|	Т.ДокументДвижения				КАК ДокументДвижения,
	|	Т.Период						КАК Период,
	|
	|	Т.Организация					КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов					КАК ВидЗапасов,
	|	Т.РазделУчета					КАК РазделУчета,
	|	Т.Партия						КАК Партия,
	|	Т.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК Стоимость,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьЗабалансовая,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьДопРасходы,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьДопРасходыБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК Трудозатраты,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеСНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеСНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеБезНДС,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьЗабалансоваяРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьНУ,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостояннаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ВременнаяРазница,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьНДД,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ТрудозатратыРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК РезервПодОбесценениеРегл,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК СтоимостьУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ДопРасходыУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ТрудозатратыУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПостоянныеУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК ПостатейныеПеременныеУпр,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО (31, 10))	КАК РезервПодОбесценениеУпр
	|ПОМЕСТИТЬ ВТСтоимостьПартийТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0))		КАК НомерУзла,
	|	Т.Организация					КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов					КАК ВидЗапасов,
	|	Т.РазделУчета					КАК РазделУчета,
	|	Т.Партия						КАК Партия,
	|	Т.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета		КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|
	|	Т.Количество					КАК Вес
	|ПОМЕСТИТЬ ВтУзлыКорректировкиСебестоимости
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0))		КАК НомерУзлаИсточник,
	|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0))		КАК НомерУзлаПриемник,
	|	Т.Количество					КАК Вес
	|ПОМЕСТИТЬ ВтСвязиУзловКорректировкиСебестоимости
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	&НачалоПериода ДатаДокументаИБ
	|
	|ПОМЕСТИТЬ ВтДатыДокументовИсточников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НачалоПериода КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК Регистратор
	|ПОМЕСТИТЬ РассчитанныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	НЕОПРЕДЕЛЕНО КАК Регистратор,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК АналитикаУчетаПоПартнерам
	|ПОМЕСТИТЬ ВТАналитикиУчетаПоПартнерамИзОтчетовДавальцам
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Регистратор,
	|	МАКСИМУМ(Т.АналитикаУчетаПоПартнерам) КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	//++ Устарело_Переработка24
	|	И Т.Регистратор ССЫЛКА Документ.ОтчетДавальцу
	//-- Устарело_Переработка24
	|	И Т.Регистратор ССЫЛКА Документ.ОтчетДавальцу2_5
	|	И Т.АналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|	И Т.Активность
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор
	//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерУзла,
	|	0 КАК СуммаНУ,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВтТаблицаРешений_НалоговыйУчет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	НЕОПРЕДЕЛЕНО КАК НомерУзла,
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.СтатьяРасходов КАК СтатьяРасходов,
	|	Т.АналитикаРасходов КАК АналитикаРасходов,
	|	0 КАК ПостатейныеПостоянныеСНДС,
	|	0 КАК ПостатейныеПеременныеСНДС,
	|	0 КАК ПостатейныеПостоянныеБезНДС,
	|	0 КАК ПостатейныеПеременныеБезНДС
	|ПОМЕСТИТЬ ВтСтоимостиДополнительныхРасходов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.Организация КАК Организация,
	|	Т.Подразделение КАК Подразделение,
	|	Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Т.СтатьяРасходов КАК СтатьяРасходов,
	|	Т.АналитикаРасходов КАК АналитикаРасходов,
	|	0 КАК ПостатейныеПостоянныеРегл,
	|	0 КАК ПостатейныеПеременныеРегл,
	|	0 КАК ПостатейныеПостоянныеУпр,
	|	0 КАК ПостатейныеПеременныеУпр,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	0 КАК СтоимостьНДД
	|
	|ПОМЕСТИТЬ ВтСтоимостиДополнительныхРасходовРегл
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	ВЫБОР КОГДА Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентУпр,
	|	ВЫБОР КОГДА Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентРегл
	|ПОМЕСТИТЬ ВТСтатьиЗатратНаСебестоимость
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	(Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|		ИЛИ Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	И Т.ВариантРаздельногоУчетаНДС <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.Ссылка,
	|	0 КАК КоэффициентУпр,
	|	0 КАК КоэффициентРегл
	|ПОМЕСТИТЬ ВТСтатьиПроизводственныхЗатрат
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	ВЫБОР КОГДА Т.ВариантРаспределенияРасходовУпр В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства))
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентУпр,
	|	ВЫБОР КОГДА Т.ВариантРаспределенияРасходовРегл В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства))
	|		ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентРегл
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	&ЕстьОрганизацииСРаздельнымУчетомПостатейныхЗатрат
	|	И (Т.ВариантРаспределенияРасходовУпр В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства))
	|		ИЛИ Т.ВариантРаспределенияРасходовРегл В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства))
	|	)
	|	И Т.ВариантРаздельногоУчетаНДС <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	//-- Локализация
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.КоэффициентУпр,
	|	Т.КоэффициентРегл,
	|	ИСТИНА КАК ПроизводственныеЗатраты
	|ПОМЕСТИТЬ ВТСтатьиЗатратДляПартийПрочих
	|ИЗ
	|	ВТСтатьиПроизводственныхЗатрат КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.КоэффициентУпр,
	|	Т.КоэффициентРегл,
	|	ЛОЖЬ КАК ПроизводственныеЗатраты
	|ИЗ
	|	ВТСтатьиЗатратНаСебестоимость КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.ВидДеятельностиНДС) КАК ВидДеятельностиНДС
	|ПОМЕСТИТЬ ВТОрганизацииСОднимВидомДеятельностиНДС
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Организация,
	|		Т.ВидДеятельностиНДС
	|	 ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.Организация В(&МассивОрганизаций)
	|		И Т.ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		И Т.Активность
	|
	|	ОБЪЕДИНИТЬ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Т.Организация,
	|		Т.ВидДеятельностиНДС
	|	 ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПредыдущегоПериода,
	|			Организация В (&МассивОрганизаций) И ВидДеятельностиНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК Т
	|   ) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.ВидДеятельностиНДС) = 1
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	Себестоимость.Организация,
	|	Себестоимость.АналитикаУчетаНоменклатуры,
	|	Себестоимость.РазделУчета,
	|	Себестоимость.ВидЗапасов,
	|	Себестоимость.Партия,
	|	Себестоимость.АналитикаУчетаПартий,
	|	Себестоимость.АналитикаФинансовогоУчета,
	|	Себестоимость.ВидДеятельностиНДС,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьУпр
	|ПОМЕСТИТЬ СтоимостьНДС
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Себестоимость
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерУзла,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьУпр
	|
	|ПОМЕСТИТЬ УзлыКорректировкиВключениеИсключениеНДС
	|;
	//++ НЕ УТ
	|
	// Таблица ПартииПроизводстваСводно используется в функции ПоказателиБазыРаспределенияПриемниковПрошлыхПериодов()
	// общего модуля РасчетСебестоимостиПостатейныеЗатраты при выполнении предварительного закрытия месяца.
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка) КАК ПартияПроизводства
	|
	|ПОМЕСТИТЬ ПартииПроизводстваСводно
	//-- НЕ УТ
	|";
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВТАналитикиУчетаПоПартнерамИзОтчетовДавальцам");
	
	Запрос.Текст = РасчетСебестоимостиЗаполнениеПартий.ТекстОписаниеДанныхДляПартийТоваров();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВТФактуровкаПоставок");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВТФактуровкаПоставок");
	
	//++ НЕ УТ
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляПрочихРасходовНЗП();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "втПрочиеРасходыНезавершенногоПроизводства");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "втПрочиеРасходыНезавершенногоПроизводства");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляОстатковБазРаспределения();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ОстаткиБазРаспределения");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ОстаткиБазРаспределения");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляКоэффициентовПриведения();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "КоэффициентыПриведения");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "КоэффициентыПриведения");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляРаспределенияДолейПроизводственныхРасходов();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ДолиПроизводственныхРасходов");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ДолиПроизводственныхРасходов");
	
	Запрос.Текст = РасчетСебестоимостиЗаполнениеПартий.ТекстОписаниеДанныхДляПартийТоваров();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВтПроизводственныеЗатратыСебестоимостьТоваров");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтПроизводственныеЗатратыСебестоимостьТоваров");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляПартийОтнесенияРасходов();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ПартииДляОтнесенияРасходов");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ПартииДляОтнесенияРасходов");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляРаспределенияПрямыхРасходовНаПроизводство();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ПрямыеПроизводственныеРасходы");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ПрямыеПроизводственныеРасходы");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляОВЗ();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВтОВЗ");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтОВЗ");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляИсходныхДанныхТранзитаРасходовМеждуОВЗ();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВтИсходныеДанныеУзловТранзитаРасходовМеждуОВЗ");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтИсходныеДанныеУзловТранзитаРасходовМеждуОВЗ");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляТранзитаРасходовМеждуОВЗ();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВтТранзитРасходовМеждуОВЗ");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтТранзитРасходовМеждуОВЗ");
	
	Запрос.Текст = РасчетСебестоимостиПостатейныеЗатраты.ТекстОписаниеДанныхДляРасчетаДолейРаспределенияПрочихЗатрат();
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "ВтДолиРаспределенияПрочихЗатрат");
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ВтДолиРаспределенияПрочихЗатрат");
	//-- НЕ УТ
	
	Если ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие
	 И НЕ ПараметрыРасчета.РаспределениеДопРасходовМеждуПартиямиИТоварами Тогда
		Запрос.Текст = РасчетСебестоимостиРешениеСЛУ.ТекстОписаниеДанныхДляУзловКорректировкиДополнительныхРасходов();
		Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "УзлыКорректировкиДополнительныхРасходов");
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "УзлыКорректировкиДополнительныхРасходов");
		
		Запрос.Текст = РасчетСебестоимостиРешениеСЛУ.ТекстОписаниеДанныхДляСвязейУзловПроизводственныхРасходовПрошлыхПериодов();
		Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "СвязиУзловПроизводственныхРасходовПрошлыхПериодов");
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "СвязиУзловПроизводственныхРасходовПрошлыхПериодов");
		
		Запрос.Текст = РасчетСебестоимостиРешениеСЛУ.ТекстОписаниеДанныхДляСвязейУзловДополнительныхРасходов();
		Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "СвязиУзловДополнительныхРасходов");
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "СвязиУзловДополнительныхРасходов");
		
		Запрос.Текст = РасчетСебестоимостиРешениеСЛУ.ТекстОписаниеДанныхДляСтоимостиДополнительныхРасходов();
		Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "СтоимостьДополнительныхРасходов");
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "СтоимостьДополнительныхРасходов");
	КонецЕсли;
	
	// Создадим временную таблицу учетных политик организаций.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТУчетныеПолитикиОрганизаций, ВТУчетныеПолитикиПрошлогоПериода, ВТУчетныеПолитикиФинУчета");
	//++ Локализация
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНастройкиУчетаНДСПриУСН");
	//-- Локализация
	
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения.Имя,
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		"ВТУчетныеПолитикиОрганизаций",
		ПараметрыРасчета.МассивОрганизаций);
		
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.НастройкиСистемыНалогообложения.Имя,
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыРасчета.РасчетныйПериод.НачалоПредыдущегоПериода,
		"ВТУчетныеПолитикиПрошлогоПериода",
		ПараметрыРасчета.МассивОрганизаций);
		
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.Имя,
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		"ВТУчетныеПолитикиФинУчета",
		ПараметрыРасчета.МассивОрганизаций);
	
	//++ Локализация
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицДействующимиПараметрамиНалоговУчетныхПолитик(
		Метаданные.РегистрыСведений.НастройкиУчетаНДСПриУСН.Имя,
		ПараметрыРасчета.МенеджерВременныхТаблиц,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		"ВТНастройкиУчетаНДСПриУСН",
		ПараметрыРасчета.МассивОрганизаций);
	//-- Локализация
	
	ДобавитьВТМетодыОценкиСтоимостиОрганизацийПоПериодам(ПараметрыРасчета);
	
	// Создадим временную таблицу курсов валют организаций.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ВЫБОР
	|		КОГДА КурсВалюты.Валюта ЕСТЬ NULL
	|				ИЛИ КурсВалюты.КурсЗнаменатель = 0
	|				ИЛИ КурсВалютыПересчета.КурсЧислитель = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсВалюты.КурсЧислитель * КурсВалютыПересчета.КурсЗнаменатель / (КурсВалюты.КурсЗнаменатель * КурсВалютыПересчета.КурсЧислитель)
	|	КОНЕЦ КАК КоэффициентВалютыРегл, // при умножении на сумму регл позволяет получить сумму упр
	|	ВЫБОР
	|		КОГДА КурсВалюты.Валюта ЕСТЬ NULL
	|				ИЛИ КурсВалюты.КурсЧислитель = 0
	|				ИЛИ КурсВалютыПересчета.КурсЗнаменатель = 0
	|			ТОГДА 1
	|		ИНАЧЕ КурсВалюты.КурсЗнаменатель * КурсВалютыПересчета.КурсЧислитель / (КурсВалюты.КурсЧислитель * КурсВалютыПересчета.КурсЗнаменатель)
	|	КОНЕЦ КАК КоэффициентВалютыУпр // при умножении на сумму упр позволяет получить сумму регл
	|ПОМЕСТИТЬ ВТКурсыВалютОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&КонецПериода, ) КАК КурсВалюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&КонецПериода, Валюта = &ВалютаУправленческогоУчета) КАК КурсВалютыПересчета
	|			ПО КурсВалюты.БазоваяВалюта = КурсВалютыПересчета.БазоваяВалюта
	|		ПО Организации.ВалютаРегламентированногоУчета = КурсВалюты.Валюта
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	// Создадим временную таблицу настройки учета НДС с отбором по организациям на ОСН.
	МассивЗапросов = Новый Массив;
	
	// Заменим таблицу ВтГоловныеОрганизации организациями на ОСН
	ТекстЗапроса = "ВЫБРАТЬ
	|	СпрОрганизации.ГоловнаяОрганизация КАК Организация,
	|	СпрОрганизации.Ссылка КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ВтГоловныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУчетныеПолитикиОрганизаций КАК ОрганизацииНаОСН
	|	ПО СпрОрганизации.Ссылка = ОрганизацииНаОСН.Организация
	|		И ОрганизацииНаОСН.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	МассивЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = РегистрыСведений.НастройкиУчетаНДС.ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = "ВТНастройкиУчетаНДСПредварительная";
	СхемаЗапроса.ПакетЗапросов[0].Индекс.Добавить("Организация");
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Поля
	|ПОМЕСТИТЬ ВТНастройкиУчетаНДС
	|ИЗ
	|	ВТНастройкиУчетаНДСПредварительная КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетныеПолитикиФинУчета КАК УчетнаяПолитика
	|		ПО Т.Организация = УчетнаяПолитика.Организация
	|";
	
	ТекстПоля = "";
	ПоляФИФО = Новый Структура("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС, УчетНДСДлительногоЦиклаПроизводства");
	
	Для Каждого ТекущаяКолонка Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл
		
		ИмяПоля = ТекущаяКолонка.Псевдоним;
		
		Если ПоляФИФО.Свойство(ИмяПоля) Тогда
			ТекстПоля = ТекстПоля + ?(ТекстПоля = "", "", "," + Символы.ПС + "	")
				+ "ВЫБОР КОГДА УчетнаяПолитика.МетодОценкиСтоимостиТоваров = ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка)
				|		ТОГДА Т." + ИмяПоля + "
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК " + ИмяПоля;
		Иначе
			ТекстПоля = ТекстПоля + ?(ТекстПоля = "", "", "," + Символы.ПС + "	") + "Т." + ИмяПоля + " КАК " + ИмяПоля;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поля", ТекстПоля);
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.Текст = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНастройкиУчетаНДСПредварительная, ВтГоловныеОрганизации");
	
КонецПроцедуры

// Формирует вспомогательную временную таблицу.
//
Процедура ИнициализироватьВспомогательнуюВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, ИмяРегистра = "", ТекстЗапроса = "")
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	*
		|ПОМЕСТИТЬ ИмяВременнойТаблицы
		|ИЗ
		|	ИмяТаблицыКэша КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыКэша", ОписаниеРегистра.ИмяТаблицыКэшаРегистра);
		
	Иначе
		
		Запрос.Текст = ТекстЗапроса + "
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	*
		|ИЗ
		|	ИмяВременнойТаблицы КАК Т";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		
	РезультатЗапроса = Запрос.Выполнить();
	
	ОписаниеТаблицы = Новый Структура;
	ОписаниеТаблицы.Вставить("ЭтоОписаниеРегистра", 		Ложь);
	ОписаниеТаблицы.Вставить("ЭтоОписаниеВременнойТаблицы", Истина);
	ОписаниеТаблицы.Вставить("ИмяВременнойТаблицы", 		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		ОписаниеТаблицы.Вставить("Таблица", 				ОписаниеРегистра.Таблица.СкопироватьКолонки()); // ТаблицаЗначений
		ОписаниеТаблицы.Вставить("ПоляТаблицы",				ОписаниеРегистра.ПоляКэшаРегистра);
		ОписаниеТаблицы.Вставить("СуммируемыеПоля",			ОписаниеРегистра.ПоляОтбораНепустыхДвижений);
		ОписаниеТаблицы.Вставить("ЕстьСвойствоВидДвижения", ОписаниеРегистра.ЕстьСвойствоВидДвижения);
		
	Иначе
		
		ОписаниеТаблицы.Вставить("Таблица", РезультатЗапроса.Выгрузить());
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			ОписаниеТаблицы.Таблица.Количество());
		
		ПоляТаблицы = "";
		СуммируемыеПоля = "";
		
		Для Каждого Колонка Из ОписаниеТаблицы.Таблица.Колонки Цикл
			
			ПоляТаблицы = ПоляТаблицы + ?(ПоляТаблицы = "", "", ", ") + "%1" + Колонка.Имя;
			
			Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				СуммируемыеПоля = СуммируемыеПоля + ?(СуммируемыеПоля = "", "", ", ") + "%1" + Колонка.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		ОписаниеТаблицы.Вставить("ПоляТаблицы",				ПоляТаблицы);
		ОписаниеТаблицы.Вставить("СуммируемыеПоля",			СуммируемыеПоля);
		ОписаниеТаблицы.Вставить("ЕстьСвойствоВидДвижения",
			ОписаниеТаблицы.Таблица.Колонки.Найти("СлужебноеВидДвиженияПриход") <> Неопределено);
		
	КонецЕсли;
	
	ОписаниеТаблицы.Вставить("КоличествоПорцийДанных", 0);  // при расчете этапа каждая порция сформированных данных сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	ОписаниеТаблицы.Вставить("ИменаТаблицПорций",  	   ""); // имена всех ВТ порций вида <Имя таблицы>_<НомерПорции от 1 до КоличествоПорцийДанных>
	
	ПараметрыРасчета.ВспомогательныеВременныеТаблицы.Вставить(ИмяВременнойТаблицы, ОписаниеТаблицы);
	
КонецПроцедуры


// Формирует ВТПравилаЗаполненияПоляТипЗаписи.
//
Процедура СоздатьТаблицуПравилЗаполненияПоляТипЗаписи(МенеджерВременныхТаблиц, ПравилаЗаполненияПоляТипЗаписи) Экспорт
	
	УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, "ВТПравилаЗаполненияПоляТипЗаписи");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПравилаЗаполненияПоляТипЗаписи", ПравилаЗаполненияПоляТипЗаписи);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.ПустоеЗначениеРегистратора КАК ПустоеЗначениеРегистратора,
	|	Т.ХозяйственнаяОперация 	 КАК ХозяйственнаяОперация,
	|	Т.ПоложительноеКоличество    КАК ПоложительноеКоличество,
	|	Т.ТипЗаписиПриход 			 КАК ТипЗаписиПриход,
	|	Т.ТипЗаписиРасход 			 КАК ТипЗаписиРасход,
	|	Т.ДокументИсточникВПриходе 	 КАК ДокументИсточникВПриходе,
	|	Т.ДокументИсточникВРасходе 	 КАК ДокументИсточникВРасходе,
	|	Т.КорПартияВРасходе 		 КАК КорПартияВРасходе
	|ПОМЕСТИТЬ ВТПравилаЗаполненияПоляТипЗаписи
	|ИЗ
	|	&ПравилаЗаполненияПоляТипЗаписи КАК Т";
	
	Запрос.Выполнить();
	
КонецПроцедуры


// Действия, выполняемые при окончании расчета.
//
Функция ОкончаниеРасчета(ПараметрыРасчета)
	
	Если РасчетСебестоимостиПротоколРасчета.ВедетсяПротоколРасчета(ПараметрыРасчета) Тогда
		РасчетСебестоимостиПротоколРасчета.ОкончаниеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("МенеджерВременныхТаблиц") Тогда
		ПараметрыРасчета.МенеджерВременныхТаблиц.Закрыть();
	КонецЕсли;
	
	ПараметрыРасчета = Неопределено;
	
	Возврат Истина;
	
КонецФункции


// Возвращает перечень документов, которые могут иметь движения в разных месяцах или по нескольким организациям.
//
// Параметры:
//	РазныеПериоды - Булево - добавлять в результат документы с движениями в разных периодах
//	РазныеОрганизации - Булево - добавлять в результат документы с движениями по нескольким организациям
//	ИмяРегистра - Строка - имя регистра накопления, для которого нужно получить перечень документов;
//		пустое значение - перечень документов для всех регистров.
//
// Возвращаемое значение:
//	Соответствие - Ключ - ОбъектМетаданных.
//
Функция ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра = "") Экспорт
	
	ОписаниеДокументов = Новый Соответствие;
	
	// Для движений в других периодах Значение = Истина означает
	// - наличие первичных+расчетных движений,
	// - расчетные движения формируются при расчете их периода.
	// Если указано значение Ложь, то это означает, что
	// - расчетные движения могут быть без первичных движений,
	// - расчетные движения любых периодов формируются при расчете периода документа.
	// Для движений других организаций Значение должно быть только Истина.
	
	Значение = Истина;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг,     				Значение); // операция РеализацияБезПереходаПраваСобственности
			ОписаниеДокументов.Вставить(Метаданные.Документы.Сторно, Значение);
			
			//++ НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, 		 				Значение); // при длительном производстве движения по материалам и продукции формируются в разных периодах

			//-- НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.АвансовыйОтчет, 							Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатков, 								Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВводОстатковТоваров,						Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаПриобретения, 				Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.КорректировкаРеализации, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеТоваровУслуг, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов, 			Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПрочиеДоходыРасходы, 						Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РаспределениеРасходовБудущихПериодов, 		Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.РасходныйКассовыйОрдер, 					Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, 		Значение); // доп. расходы
			ОписаниеДокументов.Вставить(Метаданные.Документы.ТаможеннаяДекларацияИмпорт, 				Значение); // доп. расходы
		КонецЕсли;
		
		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями, 				Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, 			Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании,	Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями, 			Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПеремещениеТоваров, 							Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.Сторно,										Значение);
			//++ НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.ПроизводствоБезЗаказа,							Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2,							Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетДавальцуМеждуОрганизациями,				Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.ДвижениеПродукцииИМатериалов,					Значение);
			//-- НЕ УТКА
		КонецЕсли;
		
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизаций.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по материалам и продукции формируются в разных периодах
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по трудозатратам формируются в разных периодах
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение); // при длительном производстве движения по прочим расходам НЗП формируются в разных периодах
		КонецЕсли;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов.Имя Тогда
		
		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПартииПрочихРасходов) Тогда
					Если МетаДокумент = Метаданные.Документы.РаспределениеРасходовБудущихПериодов Тогда
						ОписаниеДокументов.Вставить(МетаДокумент, НЕ Значение);
					Иначе
						ОписаниеДокументов.Вставить(МетаДокумент, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		
		Если РазныеПериоды Тогда
			
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
					ОписаниеДокументов.Вставить(МетаДокумент, Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если РазныеОрганизации Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.Сторно, Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя Тогда
		
		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеРасходы) Тогда
					Если МетаДокумент = Метаданные.Документы.РаспределениеРасходовБудущихПериодов Тогда
						ОписаниеДокументов.Вставить(МетаДокумент, НЕ Значение);
					Иначе
						ОписаниеДокументов.Вставить(МетаДокумент, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя Тогда
		
		Если РазныеПериоды Тогда
			Для Каждого МетаДокумент Из Метаданные.Документы Цикл
				Если МетаДокумент.Движения.Содержит(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж) Тогда
					Если МетаДокумент = Метаданные.Документы.РаспределениеРасходовБудущихПериодов Тогда
						ОписаниеДокументов.Вставить(МетаДокумент, НЕ Значение);
					Иначе
						ОписаниеДокументов.Вставить(МетаДокумент, Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяРегистра = ""
	 ИЛИ ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура.Имя Тогда
		
		Если РазныеПериоды Тогда
			ОписаниеДокументов.Вставить(Метаданные.Документы.РеализацияТоваровУслуг, Значение);
			ОписаниеДокументов.Вставить(Метаданные.Документы.Сторно, Значение);
			//++ НЕ УТКА
			ОписаниеДокументов.Вставить(Метаданные.Документы.ЭтапПроизводства2_2, Значение);
			//-- НЕ УТКА
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетСебестоимостиЛокализация.ДополнитьДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(РазныеПериоды, РазныеОрганизации, ИмяРегистра, ОписаниеДокументов);
	
	// Этот тип документов не должен обрабатываться расчетными механизмами
	ОписаниеДокументов.Удалить(Метаданные.Документы.КорректировкаРегистров);
	
	Возврат ОписаниеДокументов;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

#Область ПроверкаИсходныхИИтоговыхДанных

// Выполняет проверку корректности остатков себестоимости, а также выполнение регламентных операций, предшествующих расчету.
//
Процедура ПроверитьКорректностьИсходныхДанныхДоРасчета(ПараметрыРасчета) Экспорт
	
	Если НЕ (ПараметрыРасчета.ИдетРасчетПартий
	  ИЛИ НЕ ПараметрыРасчета.ЗапущенРасчетПартий) Тогда
		Возврат; // нужно или в начале расчета партий, или в начале отдельного расчета себестоимости
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьИсходныхДанныхДоРасчета");
	
	// Получим результаты проверки и поместим их в протокол.
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета);
		
	ТаблицаОбъектов = АудитСостоянияСистемы.ТаблицаОбъектовПроблемСостоянияСистемы(
		ТаблицаПроверок.ВыгрузитьКолонку("Проверка"),
		ПараметрыРасчета.МассивОрганизаций,
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ПараметрыРасчета.РасчетныйПериод.КонецПериода);
	
	Для Каждого ОписаниеОшибки Из ТаблицаОбъектов Цикл
			
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВИсходныхДанныхДляРасчета,
			ОписаниеОшибки.ПредставлениеОбъекта);
		
	КонецЦикла;
	
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		ТаблицаОбъектов.Количество());
	
КонецПроцедуры

// Проверяет наличие некорректных остатков по себестоимости, получившихся в результате выполнения расчета.
//
Процедура ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета)
	
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета");
	
	ТаблицаПроверок = АудитСостоянияСистемы.ТаблицаПроверокПоКонтексту(Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	
	Для Каждого ТекСтр Из ТаблицаПроверок Цикл
		
		Если ТекСтр.УточнениеКонтекстаПроверокВеденияУчета <> Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета
		 И ТекСтр.УточнениеКонтекстаПроверокВеденияУчета <> Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета Тогда
			Продолжить; // выполняем проверки после расчета
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
			ПараметрыРасчета,
			ТекСтр.Идентификатор,
			НСтр("ru = 'Выполнение проверки';
				|en = 'Check'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ТекСтр.Идентификатор);
			
		// Выполним проверку.
		ПараметрыРасчетаПроверки = Обработки.ОперацииЗакрытияМесяца.ИнициализироватьСтруктуруПараметрыРасчета(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.РасчетныйПериод.КонецПериода,
			ПараметрыРасчета.МассивОрганизаций,
			ПараметрыРасчета.РежимЗакрытияМесяца);
		
		ПараметрыРасчетаПроверки.Вставить("АвтоматическоеТестирование", ПараметрыРасчета.АвтоматическоеТестирование);
		ПараметрыРасчетаПроверки.Вставить("ПроверкаДоРасчета",    	    Ложь);
		ПараметрыРасчетаПроверки.Вставить("ПроверкаПослеРасчета", 	    Истина);
		ПараметрыРасчетаПроверки.Вставить("РезультатВЖурналРегистрации",Ложь);
		
		РезультатПроверки = АудитСостоянияСистемы.ВыполнитьПроверкуСостоянияСистемы(
			ТекСтр.Проверка,
			ПараметрыРасчетаПроверки);
			
		// Получим результаты проверки и поместим их в протокол.
		КоличествоПроблем = 0;
		
		Для Каждого ВыявленнаяПроблема Из РезультатПроверки.ВыявленныеПроблемы Цикл
			
			Если ВыявленнаяПроблема.Важность <> Перечисления.ВажностьПроблемыУчета.Ошибка Тогда
				Продолжить;
			КонецЕсли;
				
			КоличествоПроблем = КоличествоПроблем + ВыявленнаяПроблема.Объекты.Количество();
			
			Для Каждого ОписаниеОшибки Из ВыявленнаяПроблема.Объекты Цикл
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВОстаткахПослеРасчета,
					ОписаниеОшибки.Представление);
				
			КонецЦикла;
			
		КонецЦикла;
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			КоличествоПроблем);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСформированныхРасчетныхДанных

// Проверяет отсутствие ошибок в сформированных движениях.
//
Процедура ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета, ЗаписатьРегистры)
	
	ПротоколРасчета = ПараметрыРасчета.ПротоколРасчета; // см. РасчетСебестоимостиПротоколРасчета.ИнициализироватьПротоколРасчета 
	
	Если ЗначениеЗаполнено(ЗаписатьРегистры) Тогда
		СуффиксИмениЭтапа = "ГотовыеДвижения" + Формат(ПротоколРасчета.КоличествоВызововЗаписиДвижений + 1, "ЧГ=");
	Иначе
		Если ПротоколРасчета.КоличествоВызововЗаписиДвижений = 0 Тогда
			СуффиксИмениЭтапа = ""; // запись вызывается всего 1 раз за весь расчет
		Иначе
			СуффиксИмениЭтапа = "ОставшиесяДвижения"; // последний вызов записи движений
		КонецЕсли;
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета,
		"ПроверитьКорректностьСформированныхДвижений" + ?(СуффиксИмениЭтапа = "", "", "_") + СуффиксИмениЭтапа);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Проверяет корректность указания Организации в сформированных движениях:
	// - не должно быть движений по не рассчитываемым организациям.
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.РегистрЗаписан
		 ИЛИ (ЗначениеЗаполнено(ЗаписатьРегистры)
		 	И ЗаписатьРегистры.Найти(ОписаниеРегистра.ПолноеИмяРегистра) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРасчета.Свойство("ТолькоОднаОрганизация") И ПараметрыРасчета.ТолькоОднаОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИмяТаблицыКэшаРегистра));
		
		Если НЕ ОписаниеРегистра.ПодчиненРегистратору Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Организация
			|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
			|ИЗ
			|	ИмяТаблицыКэша КАК Т
			|ГДЕ
			|	&ОтборПоОрганизации
			|";
			
			ОтборПоОрганизации = "НЕ (Т.Организация В(&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				// Записи с незаполненной организаций в этом регистре не считаются ошибочными.
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И Т.Организация <> НЕОПРЕДЕЛЕНО";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", ОтборПоОрганизации);
			
		ИначеЕсли ОписаниеРегистра.ЕстьОрганизация Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор,
			|	Т.Организация
			|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
			|ИЗ
			|	ИмяТаблицыКэша КАК Т
			|ГДЕ
			|	&ОтборПоОрганизации
			|";
			
			ОтборПоОрганизации = "НЕ (Т.Организация В(&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				// Записи с незаполненной организаций в этом регистре не считаются ошибочными.
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И Т.Организация <> НЕОПРЕДЕЛЕНО";
			КонецЕсли;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", ОтборПоОрганизации);
			
		Иначе // ЕстьАналитикаПартнеров
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Т.Регистратор,
			|	Т.АналитикаУчетаПоПартнерам.Организация КАК Организация
			|ПОМЕСТИТЬ ВТДвиженияСНекорректнойОрганизацией
			|ИЗ
			|	ИмяТаблицыКэша КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтборАналитикаПоПартнерам КАК АналитикаПартнеров
			|			ПО Т.АналитикаУчетаПоПартнерам = АналитикаПартнеров.КлючАналитики
			|ГДЕ
			|	АналитикаПартнеров.КлючАналитики ЕСТЬ NULL
			|";
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыКэша", ОписаниеРегистра.ИмяТаблицыКэшаРегистра);
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТДвиженияСНекорректнойОрганизацией",
			НСтр("ru = 'Сформированы движения с некорректной организацией';
				|en = 'Records with incorrect company are generated'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияСНекорректнойОрганизацией");
		
	КонецЦикла;
	
	// Проверки для партионного учета версии 2.2:
	// убедимся, что при расчете не было сформировано ошибочных движений по регистру "Себестоимость товаров".
	ОписаниеРегистра = Неопределено;
	ПараметрыРасчета.Движения.Свойство(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя, ОписаниеРегистра);
	
	Если ПараметрыРасчета.ПартионныйУчетВерсии22
	 И ПараметрыРасчета.ВариантРасчета = Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость
	 И ОписаниеРегистра <> Неопределено
	 И НЕ ОписаниеРегистра.РегистрЗаписан
	 И (НЕ ЗначениеЗаполнено(ЗаписатьРегистры)
		 ИЛИ ЗаписатьРегистры.Найти(ОписаниеРегистра.ПолноеИмяРегистра) <> Неопределено) Тогда
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИмяТаблицыКэшаРегистра));
		
		// Проверяем корректность типа записи в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор,
		|	Т.Организация
		|ПОМЕСТИТЬ ВТДвиженияНепересчитываемыхТипов
		|ИЗ
		|	ВТКэшСебестоимостьТоваров КАК Т
		|ГДЕ
		|	Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)
		|	И НЕ Т.РасчетПартий
		|	И НЕ Т.РасчетСебестоимости
		|";
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТДвиженияНепересчитываемыхТипов",
			НСтр("ru = 'Сформированы движения по непересчитываемому типу записи';
				|en = 'Movements of non-recalculated record types are generated'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		// Проверяем соответствие количества в первичных движениях в ИБ и в движениях, сформированных на этапе распределения партий.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	Т.Сторно,
		|	СУММА(Т.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТИзмененныеПервичныеДвижения
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.РазделУчета
		|		КОНЕЦ КАК РазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация КАК Организация,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
		|			ИНАЧЕ Т.КорАналитикаУчетаНоменклатуры
		|		КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.КорРазделУчета
		|		КОНЕЦ КАК КорРазделУчета,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИНАЧЕ Т.КорОрганизация
		|		КОНЕЦ КАК КорОрганизация,
		|		Т.ТипЗаписи КАК ТипЗаписи,
		|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Т.Сторно КАК Сторно,
		|		Т.Количество КАК Количество
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.Организация В(&МассивОрганизаций)
		|		И Т.Активность
		|		И НЕ (Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей))
		|		И НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
		//++ НЕ УТ

		// движения этапа, формируемые фоновым заданием, исключаются т.к. распределение может быть выполнено как фоновым
		// заданием, так и при исправлении первичный движений документов.
		|		И Т.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
		//-- НЕ УТ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.АналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.РазделУчета
		|		КОНЕЦ КАК РазделУчета,
		|		ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.ВидЗапасов
		|		КОНЕЦ КАК ВидЗапасов,
		|		Т.Организация,
		|		ВЫБОР
		|			КОГДА СлужебноеВидДвиженияПриход
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
		|			ИНАЧЕ Т.КорАналитикаУчетаНоменклатуры
		|		КОНЕЦ КАК КорАналитикаУчетаНоменклатуры,
		|		ВЫБОР
		|			КОГДА СлужебноеВидДвиженияПриход
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
		|			ИНАЧЕ Т.КорРазделУчета
		|		КОНЕЦ КАК КорРазделУчета,
		|		ВЫБОР
		|			КОГДА СлужебноеВидДвиженияПриход
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			КОГДА ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ПроизводственныеДокументыБезВидаЗапасов)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
		|			ИНАЧЕ Т.КорВидЗапасов
		|		КОНЕЦ КАК КорВидЗапасов,
		|		ВЫБОР
		|			КОГДА СлужебноеВидДвиженияПриход
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИНАЧЕ Т.КорОрганизация
		|		КОНЕЦ КАК КорОрганизация,
		|		Т.ТипЗаписи,
		|		Т.ХозяйственнаяОперация,
		|		Т.Сторно,
		|		-Т.Количество
		|	ИЗ
		|		ВТКэшСебестоимостьТоваров КАК Т
		|	ГДЕ
		|		НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		//++ НЕ УТ

		// движения этапа, формируемые фоновым заданием, исключаются т.к. распределение может быть выполнено как фоновым
		// заданием, так и при исправлении первичный движений документов.
		|		И Т.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства)
		//-- НЕ УТ
		|
		|) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.АналитикаУчетаНоменклатуры,
		|	Т.РазделУчета,
		|	Т.ВидЗапасов,
		|	Т.Организация,
		|	Т.КорАналитикаУчетаНоменклатуры,
		|	Т.КорРазделУчета,
		|	Т.КорВидЗапасов,
		|	Т.КорОрганизация,
		|	Т.ТипЗаписи,
		|	Т.ХозяйственнаяОперация,
		|	Т.Сторно,
		|	Т.Регистратор
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.Количество) <> 0
		|";
		
		ПроизводственныеДокументыБезВидаЗапасов = Новый Массив;
		//++ Устарело_Производство21

		//++ НЕ УТ

		// В движениях данных документов по себестоимости измерение "Вид запасов"
		// - не заполняется при проведении документов,
		// - подбирается при расчете партий (на этапе заполнения партий).
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства"));
		ПроизводственныеДокументыБезВидаЗапасов.Добавить(Тип("ДокументСсылка.ПеремещениеМатериаловВПроизводстве"));
		//-- НЕ УТ

		//-- Устарело_Производство21
		
		Запрос.УстановитьПараметр("ПроизводственныеДокументыБезВидаЗапасов", ПроизводственныеДокументыБезВидаЗапасов);
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТИзмененныеПервичныеДвижения",
			НСтр("ru = 'Изменилось количество в первичных движениях';
				|en = 'Quantity in primary records was changed'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		//++ Локализация
		// Проверяем,что реквизит ДокументИсточник не изменился в документах, которые заполняют его сами, при проведении.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ТипЗаписи,
		|	Т.ДокументИсточник,
		|	СУММА(Т.КоличествоСтарое) КАК КоличествоСтарое,
		|	СУММА(Т.КоличествоНовое) КАК КоличествоНовое
		|ПОМЕСТИТЬ ВТРазличияДокументовИсточников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Регистратор КАК Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК СлужебноеВидДвиженияПриход,
		|		Т.Организация КАК Организация,
		|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		Т.ТипЗаписи КАК ТипЗаписи,
		|		(ВЫБОР
		|			КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL
		|				ТОГДА Корректировка.ДокументОснование
		|			ИНАЧЕ Т.ДокументИсточник КОНЕЦ) КАК ДокументИсточник,
		|		СУММА(Т.Количество) КАК КоличествоСтарое,
		|		0 КАК КоличествоНовое
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
		|			ПО Корректировка.Ссылка = Т.ДокументИсточник
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|		И Т.Организация В(&МассивОрганизаций)
		|		И Т.Активность
		|		И НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.КорректировкаРегистров)
		|	СГРУППИРОВАТЬ ПО
		|		Т.Регистратор,
		|		ВЫБОР
		|			КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ТипЗаписи,
		|		(ВЫБОР
		|			КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL
		|				ТОГДА Корректировка.ДокументОснование
		|			ИНАЧЕ Т.ДокументИсточник КОНЕЦ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ТипЗаписи КАК ТипЗаписи,
		|		(ВЫБОР
		|			КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL
		|				ТОГДА Корректировка.ДокументОснование
		|			ИНАЧЕ Т.ДокументИсточник КОНЕЦ) КАК ДокументИсточник,
		|		0 КАК КоличествоСтарое,
		|		СУММА(Т.Количество) КАК КоличествоНовое
		|	ИЗ
		|		ВТКэшСебестоимостьТоваров КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК Корректировка
		|			ПО Корректировка.Ссылка = Т.ДокументИсточник
		|	ГДЕ
		|		НЕ Т.РасчетПартий
		|		И НЕ Т.РасчетСебестоимости
		|	СГРУППИРОВАТЬ ПО
		|		Т.Регистратор,
		|		Т.СлужебноеВидДвиженияПриход,
		|		Т.Организация,
		|		Т.ХозяйственнаяОперация,
		|		Т.ТипЗаписи,
		|		(ВЫБОР
		|			КОГДА НЕ Корректировка.Ссылка ЕСТЬ NULL
		|				ТОГДА Корректировка.ДокументОснование
		|			ИНАЧЕ Т.ДокументИсточник КОНЕЦ)
		|
		|) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ТипЗаписи,
		|	Т.ДокументИсточник
		|
		|ИМЕЮЩИЕ
		|	СУММА(Т.КоличествоСтарое) <> 0
		|	И СУММА(Т.КоличествоСтарое) <> СУММА(Т.КоличествоНовое)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.СлужебноеВидДвиженияПриход,
		|	Т.Организация,
		|	Т.ХозяйственнаяОперация,
		|	Т.ДокументИсточник,
		|	Т.КоличествоСтарое,
		|	Т.КоличествоНовое
		|ПОМЕСТИТЬ ВТИзмененныеДокументыИсточники
		|ИЗ
		|	ВТРазличияДокументовИсточников КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравилаЗаполненияПоляТипЗаписи КАК Правила
		|		ПО ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИПЗНАЧЕНИЯ(Правила.ПустоеЗначениеРегистратора)
		|			И (Правила.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|				ИЛИ Т.ХозяйственнаяОперация = Правила.ХозяйственнаяОперация)
		|			И (Правила.ДокументИсточникВПриходе И Т.ТипЗаписи = Правила.ТипЗаписиПриход
		|				ИЛИ Правила.ДокументИсточникВРасходе И Т.ТипЗаписи = Правила.ТипЗаписиРасход)
		|ГДЕ
		|	(Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВПриходе)
		|		ИЛИ (НЕ Т.СлужебноеВидДвиженияПриход И Правила.ДокументИсточникВРасходе)
		|";
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров"));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкиВСформированныхДвижениях(
			ПараметрыРасчета,
			ОписаниеРегистра,
			"ВТИзмененныеДокументыИсточники",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменился реквизит ""%1"" в движениях';
					|en = 'The ""%1"" attribute has changed in register records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				"ДокументИсточник"));
		//-- Локализация
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета,
			"ВТДвиженияНепересчитываемыхТипов, ВТИзмененныеПервичныеДвижения
			//++ Локализация
			|,ВТРазличияДокументовИсточников, ВТИзмененныеДокументыИсточники
			//-- Локализация
			|");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КорректировкиНачальныхОстатковРегистров

#Область ОписаниеАлгоритмаКорректировки

// Корректировка регистров является отдельным этапом партионного учета, который включает в себя следующие этапы
// - Корректировка регистра 1
//	 = Старт корректировки регистра 1
//	 = Корректировка вида 1
//	 = Корректировка вида 2
//	 = ...
//	 = Окончание корректировки регистра 1
// - Корректировка регистра 2
//	 = Старт корректировки регистра 2
//	 = Корректировка вида 1
//	 = Корректировка вида 3
//	 = ...
//	 = Окончание корректировки регистра 2
// - ...
//
// Все регистры, для которых предусмотрены корректировки, необходимо перечислить в РегистрыСКорректировкамиНачальныхОстатков()
// Все виды корректировок необходимо описать в ОписаниеКорректировокНачальныхОстатков()
//
// В начале корректировки регистра необходимо вызвать функцию ИнициализироватьКорректировкуОстатковРегистра()
//	- инициализирует описание корректировки
// В конце корректировки регистра необходимо вызвать процедуру ЗавершитьКорректировкуОстатковРегистра()
//	- записывает сформированные движения корректировки (Приход, с плюсом) и сторно (Приход, с минусом)
//	  = период движений - последняя секунда прошлого месяца
//	  = регистратор - документ "Расчет себестоимости товаров" за прошлый период
//
// В начале процедуры корректировки каждого вида необходимо вызвать НачатьСледующуюКорректировкуОстатковРегистра()
//	- формирует таблицу ВТРасчетныеНачальныеОстатки<Имя регистра>, хранящую расчетные остатки на начало периода для данной корректировки
//		= в таблице не учитываются корректировки, сформированные предыдущим расчетом, и учитываются уже выполненные корректировки текущего расчета
//		= следует использовать данную временную таблицу вместо виртуальной таблицы начальных остатков регистра
// В процедуре корректировки надо сформировать новые (скорректированные) начальные остатки регистра
//	- формирование начальных остатков нового регистра - данные нового регистра выбираются из других регистров
//		= распределение как правило не требуется
//		= сторнирование остатков не требуется
//	- изменение измерений начальных остатков регистра
//		= требуется выполнить распределение старых остатков по некоторой базе, полученной из другого регистра
//		= требуется сторнирование старых остатков
//	- сформированные движения и сторнирующие движения передаются механизму корректировки через вызов процедуры ДобавитьКорректировочныеДвиженияРегистра()
//

#КонецОбласти

#Область ПрограммныйИнтерфейсКорректировки

// Возвращает перечень регистров накопления, для которых предусмотрены корректировки.
//
// Возвращаемое значение:
//	Массив - массив имен метаданных регистров с корректировками
//
Функция РегистрыСКорректировкамиНачальныхОстатков() Экспорт
	
	РегистрыСКорректировками = Новый Массив;
	РегистрыСКорректировками.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	РасчетСебестоимостиЛокализация.ДополнитьРегистрыСКорректировкамиНачальныхОстатков(РегистрыСКорректировками);
	
	Возврат РегистрыСКорректировками;
	
КонецФункции

// Возвращает описание корректировок регистров накопления.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с описанием корректировок регистров
//		Корректировка - ПеречислениеСсылка.ТипыЗаписейПартий - тип записи корректировки
//			при добавлении новой корректировки необходимо создать для нее новый тип записи;
//			одна и та же корректировка для разных регистров может иметь один тип записи;
//		ВозможноМногократноеВыполнение - Булево - корректировка может выполняться многократно (например, если она зависит от действующей учетной политики)
//		ИмяКонстантыВключения - Строка - имя константы, которая включает функционал, требующей корректировки остатков регистра
//		ИмяКонстантыДатыНачалаДействия - Строка - имя константы, хранящей дату начала действия константы <ИмяКонстантыВключения>
//		РодительскаяКорректировка - ПеречислениеСсылка.ТипыЗаписейПартий - заполняется для корректировки, противоположной той, для которой существует константа <ИмяКонстантыВключения>
//
Функция ОписаниеКорректировокНачальныхОстатков() Экспорт
	
	// Поддерживаемые виды корректировок:
	// 1. Корректировка многократная, нет даты (не пишется в регистр)
	// 2. Корректировка однократная, с датой (пишется в регистр, справочно)
	// 3. Корректировка однократная, без даты (пишется в регистр)
	
	ТаблицаВидовКорректировок = Новый ТаблицаЗначений;
	ТаблицаВидовКорректировок.Колонки.Добавить("Корректировка", 				 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ВозможноМногократноеВыполнение", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ИмяКонстантыВключения", 		 Новый ОписаниеТипов("Строка"));
	ТаблицаВидовКорректировок.Колонки.Добавить("ИмяКонстантыДатыНачалаДействия", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовКорректировок.Колонки.Добавить("РодительскаяКорректировка", 	 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий"));
		
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоНазначениям;
	НоваяСтрока.ИмяКонстантыВключения = Метаданные.Константы.УчитыватьСебестоимостьТоваровПоНазначениям.Имя;
	НоваяСтрока.ИмяКонстантыДатыНачалаДействия = Метаданные.Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям.Имя;
	
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеИзменениеМетодаОценкиСтоимости;
	НоваяСтрока.ВозможноМногократноеВыполнение = Истина;
		
	НоваяСтрока = ТаблицаВидовКорректировок.Добавить();
	НоваяСтрока.Корректировка = Перечисления.ТипыЗаписейПартий.СлужебноеОтключитьУчетПоНазначениям;
	НоваяСтрока.РодительскаяКорректировка = Перечисления.ТипыЗаписейПартий.СлужебноеВключитьУчетПоНазначениям;
	
	РасчетСебестоимостиЛокализация.ДополнитьОписаниеКорректировокНачальныхОстатков(ТаблицаВидовКорректировок);
	
	Возврат ТаблицаВидовКорректировок;
	
КонецФункции


// Инициализирует описание корректировки регистра накопления
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ИмяРегистра - Строка - полное имя регистра накопления
//
// Возвращаемое значение:
//	Структура - описание корректировки
//
Функция ИнициализироватьКорректировкуОстатковРегистра(ПараметрыРасчета, ИмяРегистра) Экспорт
	
	Если РегистрыСКорректировкамиНачальныхОстатков().Найти(ИмяРегистра) = Неопределено Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Регистр ""%1"" должен быть указан в %2';
				|en = 'The ""%1"" register must be specified in %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяРегистра,
			"РасчетСебестоимостиПрикладныеАлгоритмы.РегистрыСКорректировкамиНачальныхОстатков");
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	ПараметрыКорректировки = Новый Структура;
	
	МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ИмяРегистра);
	
	// Описание регистра
	ПараметрыКорректировки.Вставить("МетаданныеРегистра", 	 МетаданныеРегистра); // объект метаданных регистра
	ПараметрыКорректировки.Вставить("ПолноеИмяРегистра", 	 ИмяРегистра); // полное имя регистра из метаданных
	ПараметрыКорректировки.Вставить("ИмяРегистра", 			 МетаданныеРегистра.Имя); // имя регистра из объекта метаданных
	ПараметрыКорректировки.Вставить("ПредставлениеРегистра", МетаданныеРегистра.Синоним); // представление регистра из объекта метаданных
	ПараметрыКорректировки.Вставить("ОписаниеРегистра", 	 ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра]); // описание регистра
	ПараметрыКорректировки.Вставить("ЭтоРегистрНакопления",  ПараметрыКорректировки.ОписаниеРегистра.ЭтоРегистрНакопления);
	ПараметрыКорректировки.Вставить("ПодчиненРегистратору",  ПараметрыКорректировки.ОписаниеРегистра.ПодчиненРегистратору);
	ПараметрыКорректировки.Вставить("Периодический",  		 ПараметрыКорректировки.ОписаниеРегистра.Периодический);
	ПараметрыКорректировки.Вставить("ЕстьСрезПоследних",  	 ПараметрыКорректировки.ОписаниеРегистра.ЕстьСрезПоследних);
	
	// Описание временных таблиц
	ПараметрыКорректировки.Вставить("ИмяТаблицыОстатков", "ВТРасчетныеНачальныеОстатки" + ПараметрыКорректировки.ИмяРегистра); // количество таблиц сформированных движений вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("КоличествоСформированныхТаблиц", 0); // количество таблиц сформированных движений вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("ИменаСформированныхТаблиц", ""); // имена всех таблиц вида ВТКорректировка<ИмяРегистра><НомерТаблицы>
	ПараметрыКорректировки.Вставить("СуществующиеТаблицы", ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета)); // имена всех таблиц, существовавших до начала корректировки
	
	// Описание корректировки
	ПараметрыКорректировки.Вставить("ТипЗаписиКорректировки", 	   Неопределено); // тип записи текущей корректировки
	ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", Новый Массив); // организации, для которых нужна корректировка
	
	// Очистка устаревших корректировок
	ОчиститьУстаревшиеКорректировкиРегистров(ПараметрыРасчета, ПараметрыКорректировки);
	
	Возврат ПараметрыКорректировки;
	
КонецФункции

// Завершает корректировку регистра и записывает все корректировочные движения.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - Структура - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
Процедура ЗавершитьКорректировкуОстатковРегистра(ПараметрыРасчета, ПараметрыКорректировки) Экспорт
	
	Если НЕ ПараметрыКорректировки.ОписаниеРегистра.ПодчиненРегистратору Тогда
		
		ЗаписатьНезависимыйРегистрСведений(
			ПараметрыРасчета,
			ПараметрыКорректировки.ОписаниеРегистра,
			ПараметрыКорректировки.ИменаСформированныхТаблиц,
			Истина);
		
		Возврат;
		
	КонецЕсли;
	
	#Область ФормированиеТаблицыНовыхДвижений
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("НачалоПериодаУстаревшихКорректировок", НачалоМесяца(НачалоМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода) - 1));
	Запрос.УстановитьПараметр("КонецПериодаУстаревшихКорректировок",  НачалоМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода) - 1);
	
	// Если нет сформированных корректировок, то поместим в <ИмяТаблицыНовыхДвижений> только "старые" движения документов, не являющиеся корректировками.
	// Если корректировки есть, то поместим "старые" движения в ВТПрочиеДвиженияДокументовРасчетаСебестоимости и объединим ее с "новыми" корректировочными движениями в <ИмяТаблицыНовыхДвижений>.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляРегистра
	|ПОМЕСТИТЬ ВТПрочиеДвиженияДокументовРасчетаСебестоимости
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
	|		ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
	|	И Т.Организация В (&МассивОрганизаций)
	|	И &ОтборПоТипуЗаписиНеКорректировки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПоляРегистра
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
	|		ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериодаУстаревшихКорректировок И &КонецПериодаУстаревшихКорректировок
	|	И Т.Организация В (&МассивОрганизаций)
	|	И &ОтборПоТипуЗаписиКорректировки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Количество
	|ИЗ
	|	ВТПрочиеДвиженияДокументовРасчетаСебестоимости КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипуЗаписиНеКорректировки",
		?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И НЕ (Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных))", "И ЛОЖЬ"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипуЗаписиКорректировки",
		?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", ""));
	
	РезультатЗапроса = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина);
	
	Если ПараметрыКорректировки.КоличествоСформированныхТаблиц = 0 Тогда
		
		ИмяТаблицыНовыхДвижений = "ВТПрочиеДвиженияДокументовРасчетаСебестоимости"; // могут быть только "прочие" движения документа расчета себестоимости
		
	Иначе
		
		Если ПараметрыКорректировки.КоличествоСформированныхТаблиц = 1 И РезультатЗапроса.Пустой() Тогда
			
			ИмяТаблицыНовыхДвижений = ПараметрыКорректировки.ИменаСформированныхТаблиц; // есть только одна таблица корректировочных движений
			
		Иначе
			
			// Объединим все новые корректировочные движения и "прочие" движения документа расчета себестоимости.
			ИмяТаблицыНовыхДвижений = "ВТНовыеДвиженияПоРегистру" + ПараметрыКорректировки.ИмяРегистра;
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(
					ПараметрыКорректировки.ИменаСформированныхТаблиц,
					"ВТПрочиеДвиженияДокументовРасчетаСебестоимости"),
				ИмяТаблицыНовыхДвижений,
				ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра,
				ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра,
				,
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ФормированиеТаблицыИзмененныхДокументов
	
	// Сравним движения в <ИмяТаблицыНовыхДвижений> с движениями тех же документов в ИБ.
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТИзмененныеДокументы
	|ИЗ
	|	(ВЫБРАТЬ // новые движения, с плюсом
	|		&ПоляРегистра
	|	ИЗ
	|		ТаблицаНовыхДвижений КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ // старые движения, с минусом
	|		&ПоляРегистраСМинусом
	|	ИЗ
	|		ИмяОсновнойТаблицыРегистра КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
	|			ПО Т.Регистратор = ДокументыРасчетаСебестоимости.Ссылка
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериодаУстаревшихКорректировок И &КонецПредыдущегоПериода
	|		И Т.Организация В (&МассивОрганизаций)
	|	) КАК Т
	|
	|ГДЕ &ГруппировкаПолей
	|
	|	И &ОтборНепустыхРесурсов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТДокументыСДвижениями
	|ИЗ
	|	ТаблицаНовыхДвижений КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	ВЫБОР КОГДА НовыеДвижения.Регистратор ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьНовыеДвижения
	|ПОМЕСТИТЬ ВТДокументыДляЗаписи
	|ИЗ
	|	ВТИзмененныеДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСДвижениями КАК НовыеДвижения
	|		ПО Т.Регистратор = НовыеДвижения.Регистратор";
	
	ТекстПоляРегистраСМинусом  = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом 
			+ ?(ТекстПоляРегистраСМинусом = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
		
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистраСМинусом",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоляРегистраСМинусом, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &ГруппировкаПолей",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстГруппировкаПолей, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборНепустыхРесурсов",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОтборНепустыхРесурсов, "Т."));
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина);
	
	#КонецОбласти
	
	#Область ПодготовкаЗаписиДвижений
	
	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ПараметрыРасчета.НомерЗаданияДоРасчета);
	
	#КонецОбласти
	
	#Область ОчисткаСтарыхДвижений
	
	// Очистим движения документов, у которых нет движений в <ИмяТаблицыНовыхДвижений>, но есть движения в ИБ
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Регистратор
	|ИЗ
	|	ВТДокументыДляЗаписи КАК Т
	|ГДЕ
	|	НЕ Т.ЕстьНовыеДвижения";
	
	ЗаписатьДвиженияПоРегистру(
		Запрос,
		ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра,
		ПараметрыЗаписи);
	
	#КонецОбласти
	
	#Область ЗаписьНовыхДвижений
	
	// Запишем только документы с измененными движениями у которых есть движения в <ИмяТаблицыНовыхДвижений>.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляРегистра
	|ИЗ
	|	ТаблицаНовыхДвижений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыДляЗаписи КАК ДокументыДляЗаписи
	|		ПО Т.Регистратор = ДокументыДляЗаписи.Регистратор
	|ГДЕ
	|	ЕСТЬNULL(ДокументыДляЗаписи.ЕстьНовыеДвижения, ЛОЖЬ)
	|УПОРЯДОЧИТЬ ПО
	|	&УпорядочиваниеПолей";
	
	ТекстУпорядочиваниеПолей  = РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(
		"%1Регистратор, %1Период",
		?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "%1ТипЗаписи", ""),
		ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра,
		ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УпорядочиваниеПолей",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстУпорядочиваниеПолей, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
	
	Попытка
		
		ЗаписатьДвиженияПоРегистру(
			Запрос,
			ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра,
			ПараметрыЗаписи);
		
	Исключение
		
		// Информацию об ошибке добавим в протокол расчета.
		// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
		ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
			
		Если НЕ ИсключениеВызваноПрограммно(ТекстДляПротокола) Тогда
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				,
				НСтр("ru = 'При записи движений диагностированы ошибки';
					|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола);
		КонецЕсли;
		
	КонецПопытки;
	
	#КонецОбласти
	
	#Область ОкончаниеЗаписиДвижений
	
	// Обновим расчетные кэши регистра.
	Если РазмерВременнойТаблицы(ПараметрыРасчета, "ВТДокументыДляЗаписи") > 0 Тогда
		
		ОбновитьРасчетныеКэшиРегистра(
			ПараметрыРасчета,
			ПараметрыКорректировки.ОписаниеРегистра.ИмяРегистра);
		
	КонецЕсли;
	
	// Все данные записаны в ИБ, вспомогательные таблицы больше не нужны.
	ИменаУдаляемыхТаблиц = ПолучитьПереченьСуществующихВременныхТаблиц(
		ПараметрыРасчета,
		ПараметрыКорректировки.СуществующиеТаблицы);
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУдаляемыхТаблиц, ",", Истина, Истина);
	ИменаУдаляемыхТаблиц = "";
	
	// Не удаляем таблицы расчетных остатков и таблицы сформированных корректировок
	// (в случае, если несколько корректировок разных регистров выполняются одновременно).
	Для Каждого ИмяТаблицы Из МассивСтрок Цикл
		
		Если СтрНачинаетсяС(ИмяТаблицы, "ВТРасчетныеНачальныеОстатки")
		 И ИмяТаблицы <> ПараметрыКорректировки.ИмяТаблицыОстатков Тогда
			Продолжить;
		ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка")
		 И НЕ СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка" + ПараметрыКорректировки.ИмяРегистра + "_") Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаУдаляемыхТаблиц, ИмяТаблицы);
		
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаУдаляемыхТаблиц);
	
	ЗафиксироватьФактВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки);
	
	#КонецОбласти
	
КонецПроцедуры


// Инициализирует следующую корректировку регистра.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьКорректировкуОстатковРегистра
//	ТипЗаписиКорректировки - ПеречислениеСсылка.ТипыЗаписейПартий - тип записи корректировки
//	ОчищатьКорректировкиСледующихПериодов - Булево - необходимость очистки аналогичные корректировки в следующих периодах
//
Процедура НачатьСледующуюКорректировкуОстатковРегистра(ПараметрыРасчета, ПараметрыКорректировки,
			ТипЗаписиКорректировки, ОчищатьКорректировкиСледующихПериодов = Истина) Экспорт
	
	Если ПараметрыРасчета.ФормироватьНачальныеОстаткиПартий22 Тогда
		// При переходе на ПУ 2.2 все корректировки сделаем с одним типом записи, чтобы можно было "свернуть" все корректировочные движения.
		ТипЗаписи = Перечисления.ТипыЗаписейПартий.СлужебноеПереходНаПартионныйУчет22;
	Иначе
		ТипЗаписи = ТипЗаписиКорректировки;
	КонецЕсли;
	
	Если ТипыЗаписейКонвертацииДанных().Найти(ТипЗаписи) = Неопределено Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип записи корректировки ""%1"" должен быть указан в %2';
				|en = 'Adjustment record type ""%1"" must be specified in %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТипЗаписи,
			"РасчетСебестоимостиПрикладныеАлгоритмы.ТипыЗаписейКонвертацииДанных");
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	ПараметрыКорректировки.ТипЗаписиКорректировки = ТипЗаписиКорректировки;
	
	// Обслуживание регистра РасчетСебестоимостиДатыКорректировокОстатков
	ИнициализироватьОписаниеОрганизацийДляВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки);
	
	ПараметрыКорректировки.ТипЗаписиКорректировки = ТипЗаписи;
	
	Если ОчищатьКорректировкиСледующихПериодов Тогда
		// Очистим движения корректировок в следующих периодах.
		ОчиститьКорректировкиРегистровВСледующихПериодах(ПараметрыРасчета, ПараметрыКорректировки);
	КонецЕсли;
	
	// Очистим временные таблицы предыдущих корректировок.
	ИменаУдаляемыхТаблиц = ПолучитьПереченьСуществующихВременныхТаблиц(
		ПараметрыРасчета,
		РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(ПараметрыКорректировки.СуществующиеТаблицы, ПараметрыКорректировки.ИменаСформированныхТаблиц));
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаУдаляемыхТаблиц, ",", Истина, Истина);
	ИменаУдаляемыхТаблиц = "";
	
	// Не удаляем таблицы расчетных остатков и таблицы сформированных корректировок
	// (в случае, если несколько корректировок разных регистров выполняются одновременно).
	Для Каждого ИмяТаблицы Из МассивСтрок Цикл
		
		Если СтрНачинаетсяС(ИмяТаблицы, "ВТРасчетныеНачальныеОстатки") Тогда
			Продолжить;
		ИначеЕсли СтрНачинаетсяС(ИмяТаблицы, "ВТКорректировка") Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ИменаУдаляемыхТаблиц, ИмяТаблицы);
		
	КонецЦикла;
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаУдаляемыхТаблиц);
	
	// Инициализируем таблицу расчетных начальных остатков регистра.
	СформироватьТаблицуРасчетныхНачальныхОстатковРегистра(ПараметрыРасчета, ПараметрыКорректировки);
	
КонецПроцедуры

// Добавляет корректировочные движения для их последующей записи.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - Структура - параметры корректировки, см. ИнициализироватьКорректировкуОстатковРегистра()
//	ИменаТаблицКорректировки - Строка - имена таблиц, в которых хранятся сформированные корректировочные движения (новые остатки)
//	ИменаТаблицСторно - Строка - имена таблиц, в которых хранятся сторнирующие движения (старые, списываемые остатки)
//	УдалятьТаблицыКорректировки - Булево - удалить таблицы из <ИменаТаблицКорректировки>
//	УдалятьТаблицыСторно - Булево - удалить таблицы из <ИменаТаблицСторно>
//
Процедура ДобавитьКорректировочныеДвиженияРегистра(ПараметрыРасчета, ПараметрыКорректировки,
			ИменаТаблицКорректировки, ИменаТаблицСторно = "", УдалятьТаблицыКорректировки = Ложь, УдалятьТаблицыСторно = Ложь) Экспорт
	
	// Подготовим вспомогательные данные.
	ИменаКолонокРегистра  = Новый Структура(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, ""));
	ИменаРесурсовРегистра = Новый Структура(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра, ""));
	ИменаСлужебныхКолонок = Новый Структура("Регистратор, Период, ВидДвижения, ТипЗаписи, ПериодРегистрации");
	
	Если ПараметрыКорректировки.ОписаниеРегистра.ЕстьРасчетПартий Тогда
		ИменаСлужебныхКолонок.Вставить("РасчетПартий");
	КонецЕсли;
	
	ИменаТаблиц = РасчетСебестоимостиУниверсальныеАлгоритмы.СоединитьСтроки(ИменаТаблицКорректировки, ИменаТаблицСторно);
	СтруктураТаблицСторно = Новый Структура(ИменаТаблицСторно);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	&ПоляПриемника
	|ПОМЕСТИТЬ ИмяПриемника
	|ИЗ
	|	ИмяИсточника КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыРасчетаСебестоимостиПрошлогоПериода КАК ДокументыРасчетаСебестоимости
	|		ПО Т.Организация = ДокументыРасчетаСебестоимости.Организация";
	
	Для Каждого КлючИЗначение Из Новый Структура(ИменаТаблиц) Цикл // для каждой таблицы корректировки и сторно
		
		// Источник
		ИмяТаблицыИсточника = КлючИЗначение.Ключ;
		
		СтруктураТаблицыИсточника = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицыИсточника, 1);
		Если СтруктураТаблицыИсточника.Количество() = 0 Тогда
			Продолжить; // в источнике нет данных
		КонецЕсли;
		
		КолонкиТаблицыИсточника = СтруктураТаблицыИсточника.Колонки;
		
		// Приемник
		ПараметрыКорректировки.КоличествоСформированныхТаблиц = ПараметрыКорректировки.КоличествоСформированныхТаблиц + 1;
		
		ИмяТаблицыПриемника = "ВТКорректировка" + ПараметрыКорректировки.ИмяРегистра + "_" + РасчетСебестоимостиУниверсальныеАлгоритмы.ЧислоВСтрокуБезПробелов(ПараметрыКорректировки.КоличествоСформированныхТаблиц);
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(ПараметрыКорректировки.ИменаСформированныхТаблиц, ИмяТаблицыПриемника);
		
		ТекстПоляПриемника =
		"	ДокументыРасчетаСебестоимости.Ссылка КАК Регистратор,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&ТипЗаписиКорректировки КАК ТипЗаписи";
		
		Если НЕ ПараметрыКорректировки.ОписаниеРегистра.ЭтоРегистрНакопления
		 И НЕ ПараметрыКорректировки.ОписаниеРегистра.ПериодическийРегистр Тогда
			ТекстПоляПриемника = ТекстПоляПриемника + ",
				|	&НачалоПредыдущегоПериода КАК ПериодРегистрации";
		Иначе
			ТекстПоляПриемника = ТекстПоляПриемника + ",
				|	&КонецПредыдущегоПериода КАК Период";
		КонецЕсли;
		
		Если ПараметрыКорректировки.ОписаниеРегистра.ЕстьРасчетПартий Тогда
			ТекстПоляПриемника = ТекстПоляПриемника + ",
				|	ИСТИНА КАК РасчетПартий";
		КонецЕсли;
		
		Для Каждого КлючИЗначение2 Из ИменаКолонокРегистра Цикл // колонки регистра-приемника
			
			ИмяКолонки = КлючИЗначение2.Ключ;
			
			Если ИменаСлужебныхКолонок.Свойство(ИмяКолонки) Тогда // служебная
				
				Продолжить;// текст уже сформирован
				
			ИначеЕсли КолонкиТаблицыИсточника.Найти(ИмяКолонки) <> Неопределено Тогда // взять колонку из временной таблицы
				
				Если ИменаРесурсовРегистра.Свойство(ИмяКолонки) И СтруктураТаблицСторно.Свойство(ИмяТаблицыИсточника) Тогда
					ТекстЗнак = "-"; // ресурсы сторно со знаком минус
				Иначе
					ТекстЗнак = "";
				КонецЕсли;
				
				ТекстПоле = ТекстЗнак + "Т." + ИмяКолонки;
				
			Иначе // установить пустое значение колонки
				
				ТаблицаРегистра = ПараметрыКорректировки.ОписаниеРегистра.Таблица; //ТаблицаЗначений
				ТипЗначенияКолонки = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(
					ТаблицаРегистра.Колонки.Найти(ИмяКолонки).ТипЗначения);
				
				ТекстПоле = "&ПустоеЗначение_" + ИмяКолонки;
				
				Запрос.УстановитьПараметр(
					"ПустоеЗначение_" + ИмяКолонки,
					ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
				
			КонецЕсли;
			
			РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(
				ТекстПоляПриемника,
				"	" + ТекстПоле + " КАК " + ИмяКолонки);
			
		КонецЦикла; // колонки регистра-приемника
		
		Запрос.Текст = ШаблонЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПриемника",   ИмяТаблицыПриемника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяИсточника",   ИмяТаблицыИсточника);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляПриемника", ТекстПоляПриемника);
		
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
	КонецЦикла; // добавляемые таблицы
	
	Если УдалятьТаблицыКорректировки Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаТаблицКорректировки);
	КонецЕсли;
	
	Если УдалятьТаблицыСторно Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ИменаТаблицСторно);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыКорректировки

// Формирует таблицу расчетных начальных остатков ВТРасчетныеНачальныеОстатки<Имя регистра>.
// Таблица получается следующим образом:
// реальные остатки регистра - прошлые корректировки из ИБ + сторно прошлых корректировок из ИБ
// - текущие корректировки, сделанные до формирования расчетных остатков  + сторно текущих корректировок
//	
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьКорректировкуОстатковРегистра
//
Процедура СформироватьТаблицуРасчетныхНачальныхОстатковРегистра(ПараметрыРасчета, ПараметрыКорректировки)
	
	Если НЕ ПараметрыКорректировки.ЭтоРегистрНакопления
	 И НЕ ПараметрыКорректировки.ОписаниеРегистра.ПериодическийРегистр Тогда
	 	Возврат;
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета,
		ПараметрыКорректировки.ИмяТаблицыОстатков, НСтр("ru = 'Вспомогательная';
														|en = 'Auxiliary'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("ОрганизацииДляКорректировки", ПараметрыКорректировки.ОрганизацииДляКорректировки);
	
	#Область ШаблоныТекстовЗапросов
	
	Если ПараметрыКорректировки.ЭтоРегистрНакопления Тогда
		
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	&ИзмеренияРегистра,
		|	&РесурсыРегистраСумма
		|ПОМЕСТИТЬ ИмяТаблицыОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		1 КАК Знак,
		|		&РесурсыРегистраОстатки
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПредыдущегоПериода,
		|			Организация В (&ОрганизацииДляКорректировки)) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА -1 ИНАЧЕ 1 КОНЕЦ КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрНакопления.СебестоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
		|		И Т.Организация В (&ОрганизацииДляКорректировки)
		|		И Т.Регистратор ССЫЛКА Документ.РасчетСебестоимостиТоваров
		|		И Т.Активность
		|		И &ОтборПоТипуЗаписи
		|
		|	И &ЗапросыВыборкиИзСформированныхКорректировок
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	&ИзмеренияРегистра
		|
		|ИМЕЮЩИЕ
		|	&ОтборНепустыхРесурсов
		|";
		
		ШаблонТекущейКорректировки =
		"	
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 1 ИНАЧЕ -1 КОНЕЦ КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		ИмяТаблицыРезультатовКорректировки КАК Т";
		
		// Поля для подстановки в шаблоны.
		ИзмеренияРегистра = СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
		
	ИначеЕсли ПараметрыКорректировки.ЕстьСрезПоследних Тогда
		
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	&ИзмеренияРегистра,
		|	&РесурсыРегистраСумма
		|ПОМЕСТИТЬ ИмяТаблицыОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		1 КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрСведений.СтоимостьТоваров.СрезПоследних(&КонецПредыдущегоПериода,
		|			Организация В (&ОрганизацииДляКорректировки)) КАК Т
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		-1 КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрСведений.СтоимостьТоваров КАК Т
		|	ГДЕ
		|		Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
		|		И Т.Организация В (&ОрганизацииДляКорректировки)
		|		И &ОтборПоТипуЗаписи
		|
		|	И &ЗапросыВыборкиИзСформированныхКорректировок
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	&ИзмеренияРегистра
		|
		|ИМЕЮЩИЕ
		|	&ОтборНепустыхРесурсов
		|";
		
		ШаблонТекущейКорректировки =
		"	
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		1 КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		ИмяТаблицыРезультатовКорректировки КАК Т";
		
		// Поля для подстановки в шаблоны.
		ИзмеренияРегистра = СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
		ИзмеренияРегистра = РасчетСебестоимостиУниверсальныеАлгоритмы.УдалитьЭлементыИзСтрокиШаблона(ИзмеренияРегистра, "Т.ТипЗаписи");
		
	Иначе // периодический или не периодический, без среза последних
		
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	&ИзмеренияРегистра,
		|	&РесурсыРегистраСумма
		|ПОМЕСТИТЬ ИмяТаблицыОстатков
		|ИЗ
		|	(ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		1 КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		РегистрСведений.СтоимостьТоваров КАК Т
		|	ГДЕ
		|		&УсловиеОтбораПоПериоду
		|		И Организация В (&ОрганизацииДляКорректировки)
		|		И НЕ (&ОтборПоТипуЗаписи)
		|	
		|	И &ЗапросыВыборкиИзСформированныхКорректировок
		|	) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	&ИзмеренияРегистра
		|
		|ИМЕЮЩИЕ
		|	&ОтборНепустыхРесурсов
		|";
		
		ШаблонТекущейКорректировки =
		"	
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		&ИзмеренияРегистра,
		|		1 КАК Знак,
		|		&РесурсыРегистраОбороты
		|	ИЗ
		|		ИмяТаблицыРезультатовКорректировки КАК Т";
		
		// Поля для подстановки в шаблоны.
		ИзмеренияРегистра = СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
		ИзмеренияРегистра = РасчетСебестоимостиУниверсальныеАлгоритмы.УдалитьЭлементыИзСтрокиШаблона(ИзмеренияРегистра, "Т.ТипЗаписи");
		
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&УсловиеОтбораПоПериоду",
			?(ПараметрыКорректировки.Периодический,
				"Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода",
				"Т.Период <= &КонецПредыдущегоПериода"));
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Поля для подстановки в шаблоны.
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(Т.Знак * Т.",
		")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"");
		
	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", "ИСТИНА");
	
	// Сформируем отбор по непустым ресурсам регистра.
	ТекстОтборНепустыхРесурсов = "";
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПараметрыКорректировки.ОписаниеРегистра.РесурсыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивРесурсов Цикл
		
		ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
			+ ?(ТекстОтборНепустыхРесурсов = "", "", "
			|	ИЛИ ") + "СУММА(Т.Знак * " + ТекущееПоле + ") <> 0";
		
	КонецЦикла;
	
	// Сформируем тексты запросов для выборки из таблиц корректировки, уже сформированных при текущем расчете.
	ТекстВыборкиИзСформированныхКорректировок = "";
	
	Для НомерТаблицы = 1 По ПараметрыКорректировки.КоличествоСформированныхТаблиц Цикл
		
		ТекстВыборкиИзСформированныхКорректировок = ТекстВыборкиИзСформированныхКорректировок
		 + ШаблонТекущейКорректировки;
		
		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок,
			"&ИзмеренияРегистра", ИзмеренияРегистра);
		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок,
			"&РесурсыРегистраОбороты", РесурсыРегистраОбороты);
		ТекстВыборкиИзСформированныхКорректировок = СтрЗаменить(ТекстВыборкиИзСформированныхКорректировок,
			"ИмяТаблицыРезультатовКорректировки", "ВТКорректировка" + ПараметрыКорректировки.ИмяРегистра + "_"
			+ РасчетСебестоимостиУниверсальныеАлгоритмы.ЧислоВСтрокуБезПробелов(НомерТаблицы));
		
	КонецЦикла;
	
	// Подставим параметры в текстЗапроса
	Запрос.Текст = ШаблонЗапроса;
	
	Если ВременнаяТаблицаСуществует(ПараметрыРасчета, ПараметрыКорректировки.ИмяТаблицыОстатков) Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ИмяТаблицыОстатков
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + Запрос.Текст;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.СебестоимостьТоваров", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СтоимостьТоваров", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОстатков", 		ПараметрыКорректировки.ИмяТаблицыОстатков);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИзмеренияРегистра", 		ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраСумма", 	РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраОстатки", РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраОбороты", РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипуЗаписи",		ТекстОтборПоТипуЗаписи);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНепустыхРесурсов",	ТекстОтборНепустыхРесурсов);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ЗапросыВыборкиИзСформированныхКорректировок", ТекстВыборкиИзСформированныхКорректировок);
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
КонецПроцедуры

// Очищает движения корректировки у документов РасчетСебестоимостиТоваров, сделанные в следующих периодах.
// Данная операция необходима для корректировок, которые имеют конкретную дату выполнения.
//	
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьКорректировкуОстатковРегистра
//
Процедура ОчиститьКорректировкиРегистровВСледующихПериодах(ПараметрыРасчета, ПараметрыКорректировки)
	
	Если НЕ ПараметрыКорректировки.ЭтоРегистрНакопления Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорректировки.ОписаниеРегистра = ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра];
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров КАК Отбор
	|	ПО Отбор.Ссылка = Т.Регистратор
	|ГДЕ
	|	Т.Организация В(&МассивОрганизаций)
	|	И Т.Период > &КонецПредыдущегоПериода
	|	И &ОтборПоТипуЗаписи";
	
	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи,
		"Т.ТипЗаписи = &ТипЗаписиКорректировки
		|	И НЕ Т.ТипЗаписи В (&ТипыЗаписейМногократнойКонвертацииДанных)", "ИСТИНА");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипуЗаписи", ТекстОтборПоТипуЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.НомерЗаданияДоРасчета);
		
		ЗаписатьДвиженияПоРегистру(
			Выборка,
			ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра,
			ПараметрыЗаписи);
			
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Очищено движений корректировки по регистру ""%1"": %2';
					|en = 'Adjustment records by the register ""%1"" are cleared: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыКорректировки.ПредставлениеРегистра,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Количество())));
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает движения корректировки у документов РасчетСебестоимостиТоваров, сделанные по старой схеме (в прошлом периоде).
//	
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ПараметрыКорректировки - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьКорректировкуОстатковРегистра
//
Процедура ОчиститьУстаревшиеКорректировкиРегистров(ПараметрыРасчета, ПараметрыКорректировки)
	
	Если НЕ ПараметрыКорректировки.ЭтоРегистрНакопления Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорректировки.ОписаниеРегистра = ПараметрыРасчета.Движения[ПараметрыКорректировки.ИмяРегистра];
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|	ПО Т.Регистратор = РасчетСебестоимостиТоваров.Ссылка
	|ГДЕ
	|	Т.Организация В(&МассивОрганизаций)
	|	И Т.Период МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода
	|	И РасчетСебестоимостиТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ОтборПоТипуЗаписи";
	
	ТекстОтборПоТипуЗаписи = ?(ПараметрыКорректировки.ОписаниеРегистра.ЕстьТипЗаписи, "И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)", "");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ПараметрыКорректировки.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипуЗаписи", ТекстОтборПоТипуЗаписи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.НомерЗаданияДоРасчета);
			
		ЗаписатьДвиженияПоРегистру(
			Выборка,
			ПараметрыКорректировки.ОписаниеРегистра.МенеджерРегистра,
			ПараметрыЗаписи);
			
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Очищено движений устаревших корректировки по регистру ""%1"": %2';
					|en = 'Outdated adjustment records by the register ""%1"" are cleared: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПараметрыКорректировки.ПредставлениеРегистра,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.Количество())));
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет организации, по которым в рассчитываемом периоде требуется указанная корректировка.
//
Процедура ИнициализироватьОписаниеОрганизацийДляВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки) Экспорт
	
	ТаблицаВидовКорректировок = ОписаниеКорректировокНачальныхОстатков();
	ОписаниеКорректировки 	  = ТаблицаВидовКорректировок.Найти(ПараметрыКорректировки.ТипЗаписиКорректировки);
	
	Если ОписаниеКорректировки = Неопределено Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание корректировки ""%1"" в %2';
				|en = 'Cannot find ""%1"" adjustment description in %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПараметрыКорректировки.ТипЗаписиКорректировки,
			"РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков");
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецЕсли;
	
	Если ОписаниеКорректировки.ВозможноМногократноеВыполнение Тогда
		ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", ПараметрыРасчета.МассивОрганизаций);
		ПараметрыКорректировки.Вставить("ТребуетсяКорректировка", ЗначениеЗаполнено(ПараметрыКорректировки.ОрганизацииДляКорректировки));
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка 						   		   КАК Организация,
	|	&ТипЗаписиКорректировки 						   КАК ТипЗаписиКорректировки,
	|	&ИмяРегистра 									   КАК ИмяРегистра,
	|	ЕСТЬNULL(Т.ДатаКорректировки, ДАТАВРЕМЯ(1, 1, 1))  КАК ДатаКорректировки,
	|	ЕСТЬNULL(Т.ДатаКорректировки, ДАТАВРЕМЯ(1, 1, 1))  КАК ДатаКорректировкиПредыдущая,
	|	ЕСТЬNULL(Т.ДатаНачалаДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(Т.ДатаНачалаДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаДействияПредыдущая
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетСебестоимостиДатыКорректировокОстатков КАК Т
	|			ПО Т.Организация = Организации.Ссылка
	|			 И Т.ТипЗаписиКорректировки = &ТипЗаписиКорректировки
	|			 И Т.ИмяРегистра = &ИмяРегистра
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", 		ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", 	   		ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	Запрос.УстановитьПараметр("ТипЗаписиКорректировки", ПараметрыКорректировки.ТипЗаписиКорректировки);
	Запрос.УстановитьПараметр("ИмяРегистра", 			ПараметрыКорректировки.ИмяРегистра);
	
	ВыполнениеКорректировок = Запрос.Выполнить().Выгрузить();
	ОрганизацииДляКорректировки = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из ВыполнениеКорректировок Цикл
		
		Если ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия) Тогда
			
			Если НЕ ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыВключения)
			 ИЛИ Константы[ОписаниеКорректировки.ИмяКонстантыВключения].Получить() Тогда
				
				ТекущаяСтрока.ДатаНачалаДействия = НачалоМесяца(Константы[ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия].Получить());
				
				Если ТекущаяСтрока.ДатаНачалаДействия = ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
					
					ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
					ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеКорректировки.РодительскаяКорректировка) Тогда
			
			Если НЕ ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыВключения)
			 ИЛИ Константы[ОписаниеКорректировки.ИмяКонстантыВключения].Получить() Тогда
				
				ТекущаяСтрока.ДатаНачалаДействия = Дата(1, 1, 1);
				
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаКорректировки)
				 ИЛИ ТекущаяСтрока.ДатаКорректировки >= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
					
					ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
					ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // есть РодительскаяКорректировка
			
			ОписаниеРодительскойКорректировки = ТаблицаВидовКорректировок.Найти(ОписаниеКорректировки.РодительскаяКорректировка);
			
			Если ОписаниеРодительскойКорректировки = Неопределено Тогда
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не найдено описание корректировки ""%1"" в %2';
						|en = 'Cannot find ""%1"" adjustment description in %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ОписаниеКорректировки.РодительскаяКорректировка,
					"РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков");
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
					ТекстДляПротокола);
				
				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
				
			ИначеЕсли ОписаниеРодительскойКорректировки.ВозможноМногократноеВыполнение
			 ИЛИ НЕ ЗначениеЗаполнено(ОписаниеРодительскойКорректировки.ИмяКонстантыДатыНачалаДействия) Тогда
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректное описание корректировки ""%1"" в %2';
						|en = 'Invalid ""%1"" adjustment description in %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ОписаниеКорректировки.РодительскаяКорректировка,
					"РасчетСебестоимостиПрикладныеАлгоритмы.ОписаниеКорректировокНачальныхОстатков");
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
					ТекстДляПротокола);
				
				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
				
			КонецЕсли;
			
			ТекущаяСтрока.ДатаНачалаДействия = Дата(1, 1, 1);
			
			ДатаНачалаДействияРодительскойКорректировки =
				НачалоМесяца(Константы[ОписаниеРодительскойКорректировки.ИмяКонстантыДатыНачалаДействия].Получить());
			РодительскаяКорректировкаВключена =
				НЕ ЗначениеЗаполнено(ОписаниеРодительскойКорректировки.ИмяКонстантыВключения)
			 	ИЛИ Константы[ОписаниеРодительскойКорректировки.ИмяКонстантыВключения].Получить();
			
		 	Если РодительскаяКорректировкаВключена
			 И ДатаНачалаДействияРодительскойКорректировки <= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
				// Не требуется в периоде действия родительской корректировки
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаКорректировки)
			 ИЛИ ТекущаяСтрока.ДатаКорректировки >= ПараметрыРасчета.РасчетныйПериод.НачалоПериода Тогда
				
				// Требуется корректировка
				ТекущаяСтрока.ДатаКорректировки = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
				ОрганизацииДляКорректировки.Добавить(ТекущаяСтрока.Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыКорректировки.Вставить("ОрганизацииДляКорректировки", ОрганизацииДляКорректировки);
	ПараметрыКорректировки.Вставить("ТребуетсяКорректировка", ЗначениеЗаполнено(ПараметрыКорректировки.ОрганизацииДляКорректировки));
	
	Если НЕ ПараметрыКорректировки.Свойство("ВыполнениеКорректировок") Тогда
		
		ПараметрыКорректировки.Вставить("ВыполнениеКорректировок", ВыполнениеКорректировок);
		
	Иначе
		
		Таблица = ПараметрыКорректировки.ВыполнениеКорректировок; // ТаблицаЗначений
		Для Каждого ТекущаяСтрока Из ВыполнениеКорректировок Цикл
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует записи регистра РасчетСебестоимостиДатыКорректировокОстатков по окончании выполнения корректировки.
//
Процедура ЗафиксироватьФактВыполненияКорректировки(ПараметрыРасчета, ПараметрыКорректировки) Экспорт
	
	Если НЕ ПараметрыКорректировки.Свойство("ВыполнениеКорректировок") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущаяСтрока Из ПараметрыКорректировки.ВыполнениеКорректировок Цикл
		
		Если ТекущаяСтрока.ДатаКорректировки = ТекущаяСтрока.ДатаКорректировкиПредыдущая
		 И ТекущаяСтрока.ДатаНачалаДействия = ТекущаяСтрока.ДатаНачалаДействияПредыдущая Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.РасчетСебестоимостиДатыКорректировокОстатков.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ТекущаяСтрока.Организация);
		НаборЗаписей.Отбор.ТипЗаписиКорректировки.Установить(ТекущаяСтрока.ТипЗаписиКорректировки);
		НаборЗаписей.Отбор.ИмяРегистра.Установить(ТекущаяСтрока.ИмяРегистра);
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ТекущаяСтрока);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
	ПараметрыКорректировки.Удалить("ВыполнениеКорректировок");
	
КонецПроцедуры

// Проверяет совпадение периода расчета хотя бы с одной из констант начала действия функционала, относящегося к партионному учету.
//
// Возвращаемое значение:
//	Булево -
//
Функция ЕстьОбязательныеКорректировкиОстатков(Период) Экспорт
	
	Для Каждого ОписаниеКорректировки Из ОписаниеКорректировокНачальныхОстатков() Цикл
	
		Если ЗначениеЗаполнено(ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия)
		 И НачалоМесяца(Период) = НачалоМесяца(Константы[ОписаниеКорректировки.ИмяКонстантыДатыНачалаДействия].Получить()) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ФормированиеДвижений

Процедура СформироватьДвиженияПоРегиструПоДаннымЗапроса(ПараметрыРасчета, ИмяРегистра, Запрос, Пояснение = "") Экспорт

	ОписаниеПриемника = ПараметрыРасчета.Движения[ИмяРегистра];
	
	ПроверитьФормированиеДвиженийПоЗаписанномуРегистру(ОписаниеПриемника);
	
	Выборка = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина,,, Пояснение);
	
	КопируемыеПоля = ОбщиеКолонкиИсточникаИПриемникаДанных(ПараметрыРасчета, Выборка, ИмяРегистра);
	
	Пока Выборка.Следующий() Цикл
		// Добавим движение в соответствии с логикой выполняемого сейчас механизма расчета.
		ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
			ПараметрыРасчета,
			ИмяРегистра,
			Выборка,
			КопируемыеПоля);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструПоДаннымВременнойТаблицы(ПараметрыРасчета, ИмяРегистра, ИмяВременнойТаблицы,
			УдалятьВременнуюТаблицу = Ложь, ОбновлятьРасчетныеКэши = Истина, ТипизироватьЗначения = Ложь) Экспорт
	
	СоответствиеВременныхТаблицДвижений = Новый Соответствие;
	ОписаниеПриемника = ПараметрыРасчета.Движения[ИмяРегистра];
	
	ПроверитьФормированиеДвиженийПоЗаписанномуРегистру(ОписаниеПриемника);

	ИмяПромежуточнойТаблицы = ИмяВременнойТаблицы + "_ПриведеннаяКСтруктуреРегистра";
	ТаблицаОписанияПолей 	= СформироватьОписаниеПолейЗапроса(ОписаниеПриемника.Таблица);
	
	КопируемыеПоля = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы),
		"");
	
	КопироватьПоляЗапроса(ТаблицаОписанияПолей, КопируемыеПоля);
	
	ПараметрыРасчета.МодульМеханизмаРасчета.ДополнитьОписаниеПолейДляФормированияДвижений(
		ПараметрыРасчета,
		ТаблицаОписанияПолей,
		ОписаниеПриемника,
		КопируемыеПоля);
	
	ВыполнитьЗапросПоОписаниюПолей(
		ПараметрыРасчета,
		ТаблицаОписанияПолей,
		ИмяРегистра,
		ИмяВременнойТаблицы,
		ИмяПромежуточнойТаблицы);
	
	СоответствиеВременныхТаблицДвижений.Вставить(ИмяПромежуточнойТаблицы, ИмяРегистра);
	
	КэшироватьСформированныеДвиженияИзВременныхТаблиц(
		ПараметрыРасчета,
		СоответствиеВременныхТаблицДвижений,
		Истина,
		ОбновлятьРасчетныеКэши,
		ТипизироватьЗначения);
	
	НакапливатьРасчетныеПартии = ПараметрыРасчета.Свойство("РаспределениеПартий")
		И ПараметрыРасчета.РаспределениеПартий.Свойство("ВсеРасчетныеПартии");
	
	Если НакапливатьРасчетныеПартии Тогда
		
		ВыполнитьЗапросПоОписаниюПолей(
			ПараметрыРасчета,
			ТаблицаОписанияПолей,
			ИмяРегистра,
			ИмяВременнойТаблицы,
			ИмяПромежуточнойТаблицы,,,
			Ложь);
		
		Выборка = ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, ИмяПромежуточнойТаблицы);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(
				ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
				Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если УдалятьВременнуюТаблицу Тогда
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияВоВременнойТаблицеПоДругойВременнойТаблице(ПараметрыРасчета, ИмяТаблицыДанных = "Данные", УдалятьНезаписываемыеДанные = Истина)
	
	ОписаниеДвижений 	 = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования   = ОписаниеДвижений.ПоляИндексирования;
	
	// Таблица расчетных партий пустая, нужна только для формирования структуры временной таблицы-приемника.
	РасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии.СкопироватьКолонки(); // ТаблицаЗначений
	
	// Составим перечень значимых колонок таблицы расчетных партий
	ИменаЧисловыхКолонок	 = "";
	ИменаНеЧисловыхКолонок	 = "";
	
	ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
	
	Если ВременнаяТаблицаСуществует Тогда 
		ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
	Иначе
		ИсточникКолонок = РасчетныеПартии.Колонки;
	КонецЕсли;
	
	Для Каждого Колонка Из ИсточникКолонок Цикл
		
		Если ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
			ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
				+ "%1" + Колонка.Имя;
		Иначе
			ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
				+ "%1" + Колонка.Имя;
		КонецЕсли;
			
	КонецЦикла;
	
	ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
	
	// Поместим таблицу расчетных партий в указанную временную таблицу (произвольную - не являющуюся кэшем регистра).
	Если НЕ ВременнаяТаблицаСуществует Тогда
		
		// Создадим пустую временную таблицу требуемой структуры.
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
			ПараметрыРасчета,
			ИмяВременнойТаблицы,
			РасчетныеПартии,
			ИменаКолонок,
			ПоляИндексирования);
		
	КонецЕсли;
	
	РазмерВТ = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыДанных);
	
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		РазмерВТ);
	
	Если РазмерВТ > 0 Тогда
		
		ИмяТаблицыИсточника = ИмяТаблицыДанных;
		
		Если УдалятьНезаписываемыеДанные И ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
			
			НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;
			УсловиеНезаписываемыеДанные = "";
			
			Если КолонкаВременнойТаблицыСуществует(ПараметрыРасчета, ИмяТаблицыДанных, "РасчетЗавершен")
			 И НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные Тогда
				УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
					|	И ") + "РасчетЗавершен";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеТипыЗаписей) Тогда
				
				Запрос.УстановитьПараметр(
					"НезаписываемыеТипыЗаписей",
					ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(НезаписываемыеДанные.НезаписываемыеТипыЗаписей));
				
				УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
					|	И ") + "НЕ ТипЗаписи В (&НезаписываемыеТипыЗаписей)";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеРазделы) Тогда
				
				Запрос.УстановитьПараметр(
					"НезаписываемыеРазделы",
					ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(НезаписываемыеДанные.НезаписываемыеРазделы));
				
				УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
					|	И ") + "НЕ РазделУчета В (&НезаписываемыеРазделы)";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеРегистраторы) Тогда
				
				НезаписываемыеТипыРегистраторов = Новый Массив;
				
				Для Каждого КлючИЗначение Из НезаписываемыеДанные.НезаписываемыеРегистраторы Цикл
					НезаписываемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка." + КлючИЗначение.Ключ));
				КонецЦикла;
				
				Запрос.УстановитьПараметр("НезаписываемыеТипыРегистраторов", НезаписываемыеТипыРегистраторов);
				
				УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
					|	И ") + "НЕ ТИПЗНАЧЕНИЯ(Регистратор) В (&НезаписываемыеТипыРегистраторов)";
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УсловиеНезаписываемыеДанные) Тогда
				
				ИмяТаблицыИсточника = "ОбработаннаяТаблицаДанных";
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ ОбработаннаяТаблицаДанных
				|ИЗ
				|	ИмяТаблицыДанных
				|ГДЕ
				|	&УсловиеНезаписываемыеДанные";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыДанных", ИмяТаблицыДанных);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНезаписываемыеДанные", УсловиеНезаписываемыеДанные);
				
				Запрос.Выполнить();
				
				РазмерВТ = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыИсточника);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если РазмерВТ > 0 Тогда
			
			ДобавитьНедостающиеКолонкиВременнойТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыИсточника,
				ИмяВременнойТаблицы,
				ПоляИндексирования);
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				ИмяТаблицыИсточника,
				ИмяВременнойТаблицы,
				ИменаКолонок,
				ИменаЧисловыхКолонок,
				ПоляИндексирования);
			
		КонецЕсли;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ОбработаннаяТаблицаДанных");
		
	КонецЕсли;
	
	НакапливатьРасчетныеПартии = ПараметрыРасчета.Свойство("РаспределениеПартий")
		И ПараметрыРасчета.РаспределениеПартий.Свойство("ВсеРасчетныеПартии");
	
	Если НакапливатьРасчетныеПартии Тогда
		
		Выборка = ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(
				ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
				Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в таблицу движений указанного регистра и заполняет служебные поля.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений -
//
Функция ДобавитьЗаписьВТаблицуДвижений(ПараметрыРасчета, ОписаниеПриемника, ДанныеДвижения, КопируемыеПоля = Неопределено) Экспорт
	
	// При необходимости кэшируем сформированную порцию движений из таблицы значений во временную таблицу.
	Если ОписаниеПриемника.Таблица.Количество() >= ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		Если ОписаниеПриемника.ЭтоОписаниеРегистра Тогда
			КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеПриемника.ИмяРегистра, Ложь);
		Иначе
			КэшироватьСформированныеДвижения(ПараметрыРасчета, ОписаниеПриемника.ИмяВременнойТаблицы, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Добавим новую строку в таблицу движений и заполним ее поля
	Запись = ОписаниеПриемника.Таблица.Добавить();
	
	Если ЗначениеЗаполнено(КопируемыеПоля) Тогда
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения, КопируемыеПоля); // только требуемые поля
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ДанныеДвижения); // все поля
	КонецЕсли;
	
	Возврат Запись;
	
КонецФункции

#КонецОбласти

#Область ЗаписьДвижений

// Записывает сформированные новые движения после их формирования, до окончания расчета.
//
// Параметры:
// 	ПараметрыРасчета - Структура -
//	ЗаписатьРегистры - Массив из Строка, Неопределено - записывать только указанные регистры
Процедура ПредварительнаяЗаписьСформированныхДвижений(ПараметрыРасчета, ЗаписатьРегистры) Экспорт
	
	Если НЕ ПараметрыРасчета.ОграниченияФЗ.ПредварительнаяЗаписьСформированныхДвижений
	 ИЛИ МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		Возврат; // предварительная запись поддерживается только в многопоточном варианте
	КонецЕсли;

	Если ПараметрыРасчета.ПараметрыОтладки.Свойство("ЭтапДляОтладки") Тогда
		Возврат; // в режиме отладки расчета не нужна предварительная запись результатов
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
		ПараметрыРасчета,
		"ПредварительнаяЗаписьСформированныхДвижений",
		НСтр("ru = 'Запуск записи сформированных движений';
			|en = 'Enable saving generated register records'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЗаписатьСформированныеДвижения(ПараметрыРасчета,, ЗаписатьРегистры);
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
	
КонецПроцедуры

// Проверяет возможность формирования движений по регистру.
// Если регистр уже был записан методом ПредварительнаяЗаписьСформированныхДвижений(), то формирование новых движений в него невозможно.
//
// Параметры:
//	ОписаниеРегистра - Структура -
//
Процедура ПроверитьФормированиеДвиженийПоЗаписанномуРегистру(ОписаниеРегистра)

	Если ОписаниеРегистра.РегистрЗаписан Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сформированы движения по регистру ""%1"" после записи движений по данному регистру.';
				|en = 'The ""%1"" register records are generated after saving records of this register.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОписаниеРегистра.ИмяРегистра);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает сформированные новые движения.
//
// Параметры:
// 	ПараметрыРасчета - Структура -
// 	ПротоколыРасчета - Массив из Структура -
//	ЗаписатьРегистры - Массив из Строка, Неопределено - записывать только указанные регистры
//
Процедура ЗаписатьСформированныеДвижения(ПараметрыРасчета, ПротоколыРасчета = Неопределено, ЗаписатьРегистры = Неопределено) Экспорт
	
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий Тогда
		
		// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыРасчета.КопияМассивОрганизаций));
		
		// Восстановим временные таблицы с отборами по всем организациям
		ИнициализироватьВременныеТаблицыДляОтборов(ПараметрыРасчета);
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			
			// Возврат в механизм расчета партий из расчета себестоимости
			ВыполняетсяМеханизмРасчетаСебестоимости(ПараметрыРасчета, Ложь);
			
			// Восстановим все расчетные кэши остатков и оборотов по всем организациям
			ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета);
			
			Возврат; // записывать движения нужно или в конце расчета партий, или в конце отдельного расчета себестоимости
			
		КонецЕсли;
		
		// Удалим данные регистров, которые использовались в расчете себестоимости только для чтения их кэшей.
		Для Каждого КлючИЗначение Из РасчетСебестоимостиКорректировкаСтоимости.ИспользуемыеКэшиРегистровПартионногоУчета() Цикл
			УничтожитьДанныеРегистра(ПараметрыРасчета, КлючИЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверяет отсутствие ошибок в сформированных движениях.
	ПроверитьКорректностьСформированныхДвижений(ПараметрыРасчета, ЗаписатьРегистры);
	
	РасчетСебестоимостиЛокализация.ПередЗаписьюСформированныхДвижений(ПараметрыРасчета);
	
	// Записывает движения и формирует временную таблицу ВТИзмененныеДокументы
	НачалоЗаписиДвижений(ПараметрыРасчета, ЗаписатьРегистры);
	
	Если ЗначениеЗаполнено(ЗаписатьРегистры) Тогда
		Возврат; // оставшийся код нужно выполнить после записи всех регистров
	КонецЕсли;
	
	// Ожидает окончания заданий записи.
	ЗавершениеЗаписиДвижений(ПараметрыРасчета);
	
	РасчетСебестоимостиЛокализация.ЗаписатьСформированныеДвижения(ПараметрыРасчета);

	//++ НЕ УТКА
	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ПредварительныйРасчет)
	 ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
		Если ПараметрыРасчета.ФО.ИспользоватьМеждународныйФинансовыйУчет Тогда
			// Формирует движения по служебным регистрам международного учета
			ЗарегистрироватьКОтражениюВМеждународномУчете(ПараметрыРасчета);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТКА
	
	//++ НЕ УТ
	СформироватьЗаданияКРасчетуРезервовПодОбесценениеЗапасов(ПараметрыРасчета);
	СформироватьЗаданияКПризнаниюРасходовПоИсследованиямИРазработкам(ПараметрыРасчета);
	//-- НЕ УТ
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТИзмененныеДокументы");
	
	// Отметим в "регистрах-последовательностях" текущий период как рассчитанный
	Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда 
		
		Если НЕ ПараметрыРасчета.Отладка.НеСдвигатьПериодПоОкончанииРасчета
			И ПараметрыРасчета.Свойство("ИсходныеЗаданияКРасчетуСебестоимости") Тогда
			УвеличитьПериодРасчетаСебестоимости(
				ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыРасчета.ИсходныеЗаданияКРасчетуСебестоимости,
				ПараметрыРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (НЕ ПараметрыРасчета.ЗапущенРасчетПартий И НЕ ПараметрыРасчета.ПредварительныйРасчет)
	 ИЛИ ПараметрыРасчета.ИдетРасчетПартий Тогда
	 	// Проверяет корректность остатков в конце отдельного фактического расчета себестоимости или в конце расчета партий.
		ПроверитьКорректностьОстатковВРегистреСебестоимостьТоваровПослеРасчета(ПараметрыРасчета);
	КонецЕсли;
	
	Если ПротоколыРасчета <> Неопределено Тогда
		// Сохраним идентификатор протокола в массив протоколов
		ПротоколыРасчета.Добавить(РасчетСебестоимостиПротоколРасчета.ИдентификаторПротокола(ПараметрыРасчета));
	КонецЕсли;
	
	ОкончаниеРасчета(ПараметрыРасчета);
	
КонецПроцедуры

// Запускает процесс записи новых движений.
//
Процедура НачалоЗаписиДвижений(ПараметрыРасчета, ЗаписатьРегистры)
	
	РасчетСебестоимостиПротоколРасчета.НачалоЗаписиДвижений(ПараметрыРасчета, ЗаписатьРегистры);
	
	ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ПараметрыРасчета.НомерЗаданияДоРасчета);
	
	// Упорядочим таблицы кэша регистров в порядке убывания их размера, чтобы начать запись с самых больших регистров.
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[КлючИЗначение.Ключ];
		
		Если ОписаниеРегистра.РегистрЗаписан
		 ИЛИ (ЗначениеЗаполнено(ЗаписатьРегистры)
		 	И ЗаписатьРегистры.Найти(ОписаниеРегистра.ПолноеИмяРегистра) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеРегистра.РегистрЗаписан = Истина;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ИмяРегистра КАК ИмяРегистра,
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	ТаблицаКэша КАК Т";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", """" + КлючИЗначение.Ключ + """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаКэша",  КлючИЗначение.Значение.ИмяТаблицыКэшаРегистра);
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|") + ТекстЗапроса;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество Убыв,
	|	ИмяРегистра";
	
	ВыборкаЗаписываемыхРегистров = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, НСтр("ru = 'Упорядочивание таблиц для записи';
																										|en = 'Sort record tables'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Пока ВыборкаЗаписываемыхРегистров.Следующий() Цикл
		
		ИмяЗаписываемогоРегистра = СокрЛП(ВыборкаЗаписываемыхРегистров.ИмяРегистра);
		ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяЗаписываемогоРегистра];
		
		ПараметрыЗаписи.Вставить("РегистраторыСБольшимиНаборами", Неопределено);
		
		Если НЕ НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = '*** Начало записи регистра';
				|en = '*** Начало записи регистра'") + " " + ИмяЗаписываемогоРегистра);
	
		РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
			ПараметрыРасчета,
			РазмерВременнойТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИмяТаблицыКэшаРегистра));
		
		Если ОписаниеРегистра.ПодчиненРегистратору Тогда
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Начало формирования таблицы';
					|en = 'Начало формирования таблицы'") + " ВТКэшСтарыеДокументы");
	
			// Сформируем ВТКэшСтарыеДокументы
			СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Начало формирования таблицы';
					|en = 'Начало формирования таблицы'") + " ВТКэшИзмененныеДокументы");
	
			// Сформируем ВТКэшИзмененныеДокументы
			СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			// Подсчитаем количество документов с измененными движениями
			КоличествоДокументов = РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументы");
			
		Иначе
			
			КоличествоДокументов = 0;
			
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
			ПараметрыРасчета,
			ИмяЗаписываемогоРегистра,
			КоличествоДокументов);
		
		ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
		
		Если ОписаниеРегистра.ПодчиненРегистратору И КоличествоДокументов > 0 Тогда
			
			// Шаблоны для замены в тексте запроса
			ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
				|		Т."));
			ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
				|		Т."));
			ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
			
			ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
				|		Т."));
			ТекстПоляСортировки = "Т.Регистратор, Т.Период"
				+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
				+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
				+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
			
			Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
				НеВременныеЗаписиБаланса =
					"	И НЕ Т.ВидИсточника В (
					|		ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковДвижений.РасчетБаланса)
					|)";
			Иначе
				НеВременныеЗаписиБаланса = "";
			КонецЕсли;
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Начало формирования таблицы';
					|en = 'Начало формирования таблицы'") + " ВТКэшДвиженияДругихПериодовИлиОрганизаций");
	
			// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
			СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Начало формирования таблицы';
					|en = 'Начало формирования таблицы'") + " ВТКэшОчищаемыеДокументы");
	
			// Сформируем ВТКэшОчищаемыеДокументы
			СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Подготовка данных для очистки старых движений';
					|en = 'Подготовка данных для очистки старых движений'"));
			
			// Подготовим данные для очистки старых движений
			Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ВТКэшОчищаемыеДокументы КАК Т";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ОписаниеРегистра.ЕстьИзмененныеДанные = НЕ РезультатЗапроса.Пустой();
			
			Если ПараметрыРасчета.УправлениеИтогами.ОтключатьИтогиПередЗаписью
			 И ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда // Это регистр остатков
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Выключение итогов регистра';
						|en = 'Выключение итогов регистра'"));
	
				ВыключитьИтогиРегистра(ПараметрыРасчета, ОписаниеРегистра.МенеджерРегистра);
				
			КонецЕсли;
			
			Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
				
				// Запишем движения синхронно, без фоновых заданий.
				
				// Очистим старые движения у выбранных регистраторов
				ДатаНачалаЗаписи = ТекущаяДатаСеанса();
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Очистка старых движений';
						|en = 'Очистка старых движений'"));
				
				ЗаписатьДвиженияПоРегистру(
					РезультатЗапроса,
					ОписаниеРегистра.МенеджерРегистра,
					ПараметрыЗаписи);
				
				РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
					ПараметрыРасчета,
					ОписаниеРегистра.ИмяРегистра,,,
					ТекущаяДатаСеанса() - ДатаНачалаЗаписи + 1);
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало формирования таблицы';
						|en = 'Начало формирования таблицы'") + " ВТДвиженияДляЗаписи");
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа.
				Запрос.Текст =
				"ВЫБРАТЬ
				|	&ПоляОсновнойТаблицыРегистра
				|ПОМЕСТИТЬ ВТДвиженияДляЗаписи
				|ИЗ
				|	ИмяОсновнойТаблицыРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И &ОтборПоОрганизации
				|	И &ОтборПоСлужебнымРеквизитам
				|	И &НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	&ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	&ПоляКэшаРегистра
				|ИЗ
				|	ИмяТаблицыКэшаРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				
				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);
				
				ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало формирования таблицы';
						|en = 'Начало формирования таблицы'") + " ВТДвиженияДокументов");
				
				// Разделим регистраторы на порции для записи.
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор   КАК Регистратор,
				|	СУММА(1) 		КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТДвиженияДокументов
				|ИЗ
				|	ВТДвиженияДляЗаписи КАК Т
				|СГРУППИРОВАТЬ ПО
				|	Т.Регистратор
				|";
				
				ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало разделения движений на порции';
						|en = 'Начало разделения движений на порции'"));
				
				ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
					ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ,
					"КоличествоДвижений", "КоличествоДвижений УБЫВ, Регистратор",, "Регистратор, НомерПорции");
				
				МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТДвиженияДокументов", ОписаниеРегистра.ИмяРегистра);
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор
				|ИЗ
				|	ВТДвиженияДокументов КАК Т
				|ГДЕ
				|	Т.КоличествоДвижений >= &КоличествоЗаписейВНЗ";
				
				ПараметрыЗаписи.Вставить("РегистраторыСБольшимиНаборами", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"));
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	&ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТДвиженияДляЗаписи КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДвиженияДокументов КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|		И РегистраторыПорцииЗаписи.НомерПорции = &НомерПорции
				|
				|УПОРЯДОЧИТЬ ПО
				|	&Порядок
				|";
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", 					 ТекстПоляСортировки);
				
				Для НомерПорции = 1 По МаксНомерПорции Цикл
					
					// Выберем очередную порцию движений.
					Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
					
					РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
						ПараметрыРасчета,
						НСтр("ru = 'Начало записи порции движений';
							|en = 'Начало записи порции движений'"));
					
					Выборка = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина, ОписаниеРегистра.ИмяРегистра).Выбрать();
					
					РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(ПараметрыРасчета, ИмяЗаписываемогоРегистра, , Выборка.Количество());
					
					Попытка
						
						ОписаниеРегистра.ЕстьИзмененныеДанные = ОписаниеРегистра.ЕстьИзмененныеДанные ИЛИ Выборка.Количество() > 0;
						
						ДатаНачалаЗаписи = ТекущаяДатаСеанса();
						
						ЗаписатьДвиженияПоРегистру(
							Выборка,
							ОписаниеРегистра.МенеджерРегистра,
							ПараметрыЗаписи);
						
						РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
							ПараметрыРасчета,
							ОписаниеРегистра.ИмяРегистра,,,
							ТекущаяДатаСеанса() - ДатаНачалаЗаписи + 1);
						
					Исключение
						
						// Информацию об ошибке добавим в протокол расчета.
						// Затем, по окончании расчета, запишем протокол расчета и только потом вызовем исключение.
						ТекстДляПротокола = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), "");
						
						РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
							ПараметрыРасчета,
							Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
							ТекстДляПротокола);
							
						Если НЕ ИсключениеВызваноПрограммно(ТекстДляПротокола) Тогда
							ЗарегистрироватьПроблемуВыполненияРасчета(
								ПараметрыРасчета,
								,
								НСтр("ru = 'При записи движений диагностированы ошибки';
									|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
								ТекстДляПротокола);
						КонецЕсли;
						
					КонецПопытки;
					
				КонецЦикла;
				
				УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияДляЗаписи, ВТДвиженияДокументов");
				
			Иначе // многопоточная запись
					
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало многопоточной записи движений';
						|en = 'Начало многопоточной записи движений'"));
					
				ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
				
				ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
					ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
					ОписаниеРегистра,
					ПараметрыРасчета.НомерЗаданияДоРасчета);
				
				// Запишем движения асинхронно, в фоновых заданиях.
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					// Очистим старые движения движения у выбранных регистраторов.
					КэшироватьПорциюДанныхДляЗаписи(ПараметрыРасчета, ПараметрыЗаписиРегистра, РезультатЗапроса, Истина,, Истина);
					
					Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра Тогда
						
						ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
							ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
							ОписаниеРегистра,
							ПараметрыРасчета.НомерЗаданияДоРасчета);
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Деление регистраторов на порции для параллельной записи:
				// - размер порции будет примерно соответствовать ограничению на максимальный размер таблицы значений
				// - один документ не может присутствовать в нескольких порциях - иначе одно задание записи затрет результаты другого
				// - "большие" документы пишутся по одному документу на порцию - считаем, что движения документа всегда "поместятся"
				// в таблицу значений.
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало формирования таблицы';
						|en = 'Начало формирования таблицы'") + " ВТДвиженияДокументов");
				
				Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 9999999999999
				|	Т.Регистратор   		  	КАК Регистратор,
				|	СУММА(Т.КоличествоДвижений) КАК КоличествоДвижений
				|ПОМЕСТИТЬ ВТДвиженияДокументов
				|ИЗ
				|	(ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор   КАК Регистратор,
				|		СУММА(1) 						  КАК КоличествоДвижений
				|	ИЗ
				|		ИмяОсновнойТаблицыРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	ГДЕ
				|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|		И &ОтборПоОрганизации
				|		И &ОтборПоСлужебнымРеквизитам
				|		И &НеВременныеЗаписиБаланса
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Т.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|	СГРУППИРОВАТЬ ПО
				|		Т.Регистратор
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ИзмененныеДокументы.Регистратор,
				|		СУММА(1) КАК КоличествоДвижений
				|	ИЗ
				|		ИмяТаблицыКэшаРегистра КАК Т
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
				|			ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
				|	СГРУППИРОВАТЬ ПО
				|		ИзмененныеДокументы.Регистратор
				|	) КАК Т
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Регистратор
				|УПОРЯДОЧИТЬ ПО
				|   КоличествоДвижений УБЫВ
				|";
				
				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);
				
				ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
				
				ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
				
				РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
					ПараметрыРасчета,
					НСтр("ru = 'Начало разделения движений на порции';
						|en = 'Начало разделения движений на порции'"));
				
				// Разделим регистраторы на порции для записи.
				ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
					ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи,
					"КоличествоДвижений", "КоличествоДвижений УБЫВ, Регистратор",, "НомерПорции");
				
				МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, "ВТДвиженияДокументов", ОписаниеРегистра.ИмяРегистра);
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор
				|ИЗ
				|	ВТДвиженияДокументов КАК Т
				|ГДЕ
				|	Т.КоличествоДвижений >= &КоличествоЗаписейВНЗ";
				
				РегистраторыСБольшимиНаборами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
				ПараметрыЗаписиРегистра.Вставить("РегистраторыСБольшимиНаборами", РегистраторыСБольшимиНаборами);
				
				// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
				//	- "первичные" движения документа в периоде расчета
				//	- непересчитываемые движения документа
				//	- новые "расчетные" движения документа.
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Т.Регистратор КАК Регистратор
				|ПОМЕСТИТЬ ВТРегистраторыТекущейПорции
				|ИЗ
				|	ВТДвиженияДокументов КАК Т
				|ГДЕ
				|	Т.НомерПорции = &НомерПорции
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Регистратор
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|
				|ВЫБРАТЬ ПЕРВЫЕ 9999999999999
				|	&ПоляОсновнойТаблицыРегистра
				|ПОМЕСТИТЬ ВТДвиженияТекущейПорции
				|ИЗ
				|(ВЫБРАТЬ
				|	&ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ИмяОсновнойТаблицыРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И &ОтборПоОрганизации
				|	И &ОтборПоСлужебнымРеквизитам
				|	И &НеВременныеЗаписиБаланса
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	&ПоляОсновнойТаблицыРегистра
				|ИЗ
				|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	&ПоляКэшаРегистра
				|ИЗ
				|	ИмяТаблицыКэшаРегистра КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистраторыТекущейПорции КАК РегистраторыПорцииЗаписи
				|		ПО Т.Регистратор = РегистраторыПорцииЗаписи.Регистратор
				|
				|) КАК Т
				|УПОРЯДОЧИТЬ ПО
				|	&Порядок";
				
				// Заменим шаблоны в тексте запроса
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляКэшаРегистра",   		 ТекстПоляКэшаРегистра);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", 					 ТекстПоляСортировки);
				
				// Отбор - первичные движения
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
				 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
					// Данные из ИБ не выбираются - они все находятся в кэше
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
				КонецЕсли;
				ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &НеВременныеЗаписиБаланса", 	 НеВременныеЗаписиБаланса);
					
				ОписаниеРегистра.ЕстьИзмененныеДанные = Истина;
				
				ВремяФормированияВТДвиженияТекущейПорции = 0;
				ВремяВыгрузкиТаблицЗначений = 0;
				
				Для НомерПорции = 1 По МаксНомерПорции Цикл
					
					РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
						ПараметрыРасчета,
						НСтр("ru = 'Подготовка очередной порции движений';
							|en = 'Подготовка очередной порции движений'"));
					
					// Выберем очередную порцию движений.
					Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
					
					ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
					Запрос.Выполнить();
					ВремяФормированияВТДвиженияТекущейПорции = ВремяФормированияВТДвиженияТекущейПорции + ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
					
					КоличествоДвижений = РазмерВременнойТаблицы(Запрос, "ВТДвиженияТекущейПорции");
					
					Если РазмерВременнойТаблицы(Запрос, "ВТРегистраторыТекущейПорции") = 1
					 И КоличествоДвижений > ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи Тогда
					 
						СтарыйТекст = Запрос.Текст;
						
						ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
							"", // разделитель
							"", // ресурсы
							СтрЗаменить(ТекстПоляСортировки, "Т.", ""), // порядок
							"НомерЗаписи", // номер
							"", // индекс
							"", // накопление
							Истина);
						
						ЗаполнитьНомераСтрокВременнойТаблицы(
							ПараметрыРасчета,
							ПараметрыНумерации,
							"ВТДвиженияТекущейПорции",
							"ВТДвиженияТекущейПорцииНумерованные",
							ОписаниеРегистра.ИмяРегистра);
						
						КоличествоНаборов = КоличествоДвижений / ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи;
						КоличествоНаборов = Цел(КоличествоНаборов) + ?(Цел(КоличествоНаборов) = КоличествоНаборов, 0, 1);
						
						Запрос.Текст =
						"ВЫБРАТЬ
						|	&ПоляОсновнойТаблицыРегистра
						|ИЗ
						|	ВТДвиженияТекущейПорцииНумерованные КАК Т
						|ГДЕ
						|	Т.НомерЗаписи >= &ПервыйНомерЗаписи
						|	И Т.НомерЗаписи <= &ПоследнийНомерЗаписи
						|УПОРЯДОЧИТЬ ПО
						|	&Порядок";
						
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", 					 ТекстПоляСортировки);
						
						Для НомерНабора = 1 По КоличествоНаборов Цикл
							
							РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
								ПараметрыРасчета,
								НСтр("ru = 'Подготовка очередного набора в текущей порции';
									|en = 'Подготовка очередного набора в текущей порции'"));
					
							Запрос.УстановитьПараметр("ПервыйНомерЗаписи",
								(НомерНабора - 1) * ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи);
							Запрос.УстановитьПараметр("ПоследнийНомерЗаписи",
								НомерНабора * ПараметрыРасчета.ОграниченияФЗ.КоличествоДвиженийВФЗЗаписи - 1);
								
							ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
							ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
							ВремяВыгрузкиТаблицЗначений = ВремяВыгрузкиТаблицЗначений + ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
							
							Если ТаблицаДвижений.Количество() = 0 Тогда
								Продолжить; // в эту порцию ничего не попало
							КонецЕсли;
							
							// Запишем новые движения.
							КэшироватьПорциюДанныхДляЗаписи(ПараметрыРасчета, ПараметрыЗаписиРегистра, ТаблицаДвижений,, НомерНабора > 1, Ложь);
							
						КонецЦикла;
						
						Запрос.Текст = СтарыйТекст;
						КоличествоДвижений = 0; // чтобы не выполнился дальнейший код записи
						
						УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияТекущейПорцииНумерованные");
						
						Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра Тогда
							
							ПоместитьПорциюДанныхВСтек(ПараметрыРасчета, ПараметрыЗаписиРегистра);
							
							ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
								ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
								ОписаниеРегистра,
								ПараметрыРасчета.НомерЗаданияДоРасчета);
							
							ПараметрыЗаписиРегистра.Вставить("РегистраторыСБольшимиНаборами", РегистраторыСБольшимиНаборами);
							
						КонецЕсли;
						
					Иначе
						
						ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
						ТаблицаДвижений = ВыгрузитьВременнуюТаблицу(Запрос, "ВТДвиженияТекущейПорции",, ТекстПоляСортировки);
						ВремяВыгрузкиТаблицЗначений = ВремяВыгрузкиТаблицЗначений + ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
						
					КонецЕсли;
					
					УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТРегистраторыТекущейПорции, ВТДвиженияТекущейПорции");
					
					Если КоличествоДвижений = 0 Тогда
						Продолжить; // в эту порцию ничего не попало
					КонецЕсли;
					
					КэшироватьПорциюДанныхДляЗаписи(ПараметрыРасчета, ПараметрыЗаписиРегистра, ТаблицаДвижений,,, Истина);
					
					Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра Тогда
						
						ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
							ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
							ОписаниеРегистра,
							ПараметрыРасчета.НомерЗаданияДоРасчета);
						
						ПараметрыЗаписиРегистра.Вставить("РегистраторыСБольшимиНаборами", РегистраторыСБольшимиНаборами);
						
					КонецЕсли;
					
				КонецЦикла;
				
				РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
					ПараметрыРасчета,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Время формирования таблиц ""%1"" регистра ""%2"": %3';
							|en = 'Time of the ""%1"" tables generation of the ""%2"" register: %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
						"ВТДвиженияТекущейПорции",
						ОписаниеРегистра.ИмяРегистра,
						РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяФормированияВТДвиженияТекущейПорции/1000, Истина)));
				
				РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
					ПараметрыРасчета,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Время выгрузки результатов запроса в таблицы значений, регистр ""%1"": %2';
							|en = 'Time of query results export to value tables, register ""%1"": %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ОписаниеРегистра.ИмяРегистра,
						РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяВыгрузкиТаблицЗначений/1000, Истина)));
				
				УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияДокументов");
				
				Если НЕ ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра Тогда
					ЗапуститьЗаданиеЗаписиРегистра(ПараметрыРасчета, ПараметрыЗаписиРегистра);
				КонецЕсли;
				
			КонецЕсли; // пишем в фоновых заданиях
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
			
		КонецЕсли; // есть измененные документы
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы");
		
		//++ НЕ УТ

		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Дополнение таблицы';
				|en = 'Дополнение таблицы'") + " ВТИзмененныеДокументы");
			
		// Добавим ВТКэшИзмененныеДокументыКОтражению текущего регистра в общую таблицу ВТИзмененныеДокументы.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор     			 КАК Регистратор,
		|	Т.Организация     			 КАК Организация,
		|	Т.Период     	  			 КАК Период,
		|	""ИмяЗаписываемогоРегистра"" КАК ИмяРегистра,
		|	&ВлияетНаПроводки 			 КАК ВлияетНаПроводки
		|ПОМЕСТИТЬ ИмяВременнойТаблицыРезультата
		|ИЗ
		|	ВТКэшИзмененныеДокументыКОтражению КАК Т";
		
		Если НЕ ОписаниеРегистра.ПодчиненРегистратору Тогда
			
			Если НЕ ЗначениеЗаполнено(ОписаниеРегистра.ИмяРегистра) Тогда // для удобства расстановки тегов
				
			//++ Локализация
			ИначеЕсли ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП.Имя Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор      			 КАК Регистратор,
				|	Т.Организация      			 КАК Организация,
				|	Т.Период     	   			 КАК Период,
				|	""ИмяЗаписываемогоРегистра"" КАК ИмяРегистра,
				|	&ВлияетНаПроводки 			 КАК ВлияетНаПроводки
				|ПОМЕСТИТЬ ИмяВременнойТаблицыРезультата
				|ИЗ
				|(ВЫБРАТЬ
				|	Т.Период,
				|	Т.ПриходЗатрат,
				|	Т.ДокументДвижения КАК Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.ВидДеятельностиНДС,
				|
				|	Т.ДокументПоступления,
				|	Т.АналитикаУчетаПартийДокументаПоступления,
				|	Т.СтатьяРасходов,
				|	Т.АналитикаРасходов,
				|	Т.Подразделение,
				|	Т.КорВидДеятельностиНДС,
				|	Т.КорАналитикаУчетаНоменклатуры,
				|	Т.КорВидЗапасов,
				|	Т.КорНаправлениеДеятельности,
				|
				|	Т.СтоимостьБезНДС,
				|	Т.НДС,
				|	Т.СтоимостьБезНДСУпр,
				|	Т.НДСУпр
				|ИЗ
				|	ИмяТаблицыКэшаРегистра КАК Т
				|ГДЕ
				|	Т.Организация В(&МассивОрганизаций)
				|	И НЕ Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Период,
				|	Т.ПриходЗатрат,
				|	Т.ДокументДвижения КАК Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.ВидДеятельностиНДС,
				|
				|	Т.ДокументПоступления,
				|	Т.АналитикаУчетаПартийДокументаПоступления,
				|	Т.СтатьяРасходов,
				|	Т.АналитикаРасходов,
				|	Т.Подразделение,
				|	Т.КорВидДеятельностиНДС,
				|	Т.КорАналитикаУчетаНоменклатуры,
				|	Т.КорВидЗапасов,
				|	Т.КорНаправлениеДеятельности,
				|
				|	-Т.СтоимостьБезНДС,
				|	-Т.НДС,
				|	-Т.СтоимостьБезНДСУпр,
				|	-Т.НДСУпр
				|ИЗ
				|	ИмяОсновнойТаблицыРегистра КАК Т
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И Т.Организация В(&МассивОрганизаций)
				|	И НЕ Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|) КАК Т
				|СГРУППИРОВАТЬ ПО
				|	Т.Период,
				|	Т.ПриходЗатрат,
				|	Т.Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.ВидДеятельностиНДС,
				|	Т.ДокументПоступления,
				|	Т.АналитикаУчетаПартийДокументаПоступления,
				|	Т.СтатьяРасходов,
				|	Т.АналитикаРасходов,
				|	Т.Подразделение,
				|	Т.КорВидДеятельностиНДС,
				|	Т.КорАналитикаУчетаНоменклатуры,
				|	Т.КорВидЗапасов,
				|	Т.КорНаправлениеДеятельности
				|ИМЕЮЩИЕ
				|	СУММА(Т.СтоимостьБезНДС) <> 0
				|	ИЛИ СУММА(Т.НДС) <> 0
				|	ИЛИ СУММА(Т.СтоимостьБезНДСУпр) <> 0
				|	ИЛИ СУММА(Т.НДСУпр) <> 0
				|";
			//-- Локализация	
			ИначеЕсли ОписаниеРегистра.ПериодическийРегистр Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор      			 КАК Регистратор,
				|	Т.Организация      			 КАК Организация,
				|	Т.Период     	   			 КАК Период,
				|	""ИмяЗаписываемогоРегистра"" КАК ИмяРегистра,
				|	&ВлияетНаПроводки  			 КАК ВлияетНаПроводки
				|ПОМЕСТИТЬ ИмяВременнойТаблицыРезультата
				|ИЗ
				|(ВЫБРАТЬ
				|	Т.Период,
				|	Т.СлужебноеВидДвиженияПриход,
				|	Т.Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.РазделУчета,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.АналитикаФинансовогоУчета,
				|	Т.ВидДеятельностиНДС,
				|
				|	Цены.ДокументПоступления,
				|	Цены.АналитикаУчетаПартийДокументаПоступления,
				|	Цены.АналитикаУчетаНоменклатурыДокументаПоступления,
				|	&ДополнительныеПоляРегистраЦен,
				|
				|	Т.СтоимостьБезНДС КАК СтоимостьБезНДС
				|ИЗ
				|	ВТКэшРасчетныеОборотыСебестоимостьТоваров КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыКэшаРегистра КАК Цены
				|		ПО (Цены.Организация = Т.Организация)
				|			И (Цены.РазделУчета = Т.РазделУчета)
				|			И (Цены.АналитикаУчетаНоменклатуры = Т.АналитикаУчетаНоменклатуры)
				|			И (Цены.ВидЗапасов = Т.ВидЗапасов)
				|			И (Цены.Партия = Т.Партия)
				|			И (Цены.АналитикаУчетаПартий = Т.АналитикаУчетаПартий)
				|			И (Цены.ВидДеятельностиНДС = Т.ВидДеятельностиНДС)
				|			И (Цены.АналитикаФинансовогоУчета = Т.АналитикаФинансовогоУчета)
				|ГДЕ
				|	Т.Организация В(&МассивОрганизаций)
				|	И НЕ Цены.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|	И Т.Количество <> 0
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Период,
				|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|		ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК СлужебноеВидДвиженияПриход,
				|	Т.Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.РазделУчета,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.АналитикаФинансовогоУчета,
				|	Т.ВидДеятельностиНДС,
				|
				|	Цены.ДокументПоступления,
				|	Цены.АналитикаУчетаПартийДокументаПоступления,
				|	Цены.АналитикаУчетаНоменклатурыДокументаПоступления,
				|	&ДополнительныеПоляРегистраЦен,
				|
				|	-Т.СтоимостьБезНДС КАК СтоимостьБезНДС
				|ИЗ
				|	РегистрНакопления.СебестоимостьТоваров КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяОсновнойТаблицыРегистра КАК Цены
				|		ПО (Цены.Организация = Т.Организация)
				|			И (Цены.РазделУчета = Т.РазделУчета)
				|			И (Цены.АналитикаУчетаНоменклатуры = Т.АналитикаУчетаНоменклатуры)
				|			И (Цены.ВидЗапасов = Т.ВидЗапасов)
				|			И (Цены.Партия = Т.Партия)
				|			И (Цены.АналитикаУчетаПартий = Т.АналитикаУчетаПартий)
				|			И (Цены.ВидДеятельностиНДС = Т.ВидДеятельностиНДС)
				|			И (Цены.АналитикаФинансовогоУчета = Т.АналитикаФинансовогоУчета)
				|ГДЕ
				|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И Т.Организация В(&МассивОрганизаций)
				|	И Цены.Период МЕЖДУ &НачалоПериода И &КонецПериода
				|	И Цены.Организация В(&МассивОрганизаций)
				|	И НЕ Цены.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|	И Т.Количество <> 0
				|) КАК Т
				|СГРУППИРОВАТЬ ПО
				|	Т.Период,
				|	Т.СлужебноеВидДвиженияПриход,
				|	Т.Регистратор,
				|	Т.Организация,
				|	Т.АналитикаУчетаНоменклатуры,
				|	Т.ВидЗапасов,
				|	Т.РазделУчета,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.АналитикаФинансовогоУчета,
				|	Т.ВидДеятельностиНДС,
				|	&ГруппировкаДополнительныхПолейРегистраЦен,
				|	Т.ДокументПоступления,
				|	Т.АналитикаУчетаПартийДокументаПоступления,
				|	Т.АналитикаУчетаНоменклатурыДокументаПоступления
				|ИМЕЮЩИЕ
				|	СУММА(Т.СтоимостьБезНДС) <> 0
				|";
				
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты.Имя Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляРегистраЦен", "Цены.СтатьяРасходов,
						|	Цены.АналитикаРасходов");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГруппировкаДополнительныхПолейРегистраЦен", "Т.СтатьяРасходов,
						|	Т.АналитикаРасходов");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляРегистраЦен,", "");
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГруппировкаДополнительныхПолейРегистраЦен,", "");
				КонецЕсли;
				
				ТекстПоляСумм = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОписаниеРегистра.РесурсыРегистраССуффиксом,
					"ВЫРАЗИТЬ(ВЫРАЗИТЬ(Цены.",
					" КАК ЧИСЛО(31,10)) * ВЫРАЗИТЬ(Т.Количество КАК ЧИСЛО(15,3)) КАК ЧИСЛО (31,2))");
				ТекстПоляСуммСМинусом = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ОписаниеРегистра.РесурсыРегистраССуффиксом,
					"-ВЫРАЗИТЬ(ВЫРАЗИТЬ(Цены.",
					" КАК ЧИСЛО(31,10)) * ВЫРАЗИТЬ(Т.Количество КАК ЧИСЛО(15,3)) КАК ЧИСЛО (31,2))");
				
				ТекстОтборНепустыхРесурсов = "";
				МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
					СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."),
					",",
					Истина,
					Истина);
				
				Для Каждого ТекущееПоле Из МассивРесурсов Цикл
					
					ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
						+ ?(ТекстОтборНепустыхРесурсов = "", "", "
						|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
					
				КонецЦикла;
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "-Т.СтоимостьБезНДС КАК СтоимостьБезНДС", ТекстПоляСуммСМинусом);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.СтоимостьБезНДС КАК СтоимостьБезНДС", ТекстПоляСумм);
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(Т.СтоимостьБезНДС) <> 0", ТекстОтборНепустыхРесурсов);
				
			Иначе // непериодические регистры детализации партий
				
				Если НЕ ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДвиженияСебестоимостиДляПроверкиИзменений") Тогда
					
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ЛОЖЬ КАК ДанныеИБ,
					|	Т.СлужебноеВидДвиженияПриход,
					|	Т.Период,
					|	Т.Регистратор,
					|	Т.Организация,
					|	Т.Партия,
					|	Т.АналитикаУчетаПартий,
					|	Т.ВидЗапасов,
					|	Т.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
					|	Т.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
					|	ВЫРАЗИТЬ(СУММА(Т.Количество) КАК ЧИСЛО(15,3)) КАК Количество
					|ПОМЕСТИТЬ ВТДвиженияСебестоимостиДляПроверкиИзменений
					|ИЗ
					|	ВТКэшРасчетныеОборотыСебестоимостьТоваров КАК Т
					|ГДЕ
					|	Т.Количество <> 0
					|СГРУППИРОВАТЬ ПО
					|	Т.СлужебноеВидДвиженияПриход,
					|	Т.Период,
					|	Т.Регистратор,
					|	Т.Организация,
					|	Т.Партия,
					|	Т.АналитикаУчетаПартий,
					|	Т.ВидЗапасов,
					|	Т.АналитикаУчетаНоменклатуры.Номенклатура,
					|	Т.АналитикаУчетаНоменклатуры.Характеристика
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ИСТИНА КАК ДанныеИБ,
					|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
					|		ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ КАК СлужебноеВидДвиженияПриход,
					|	Т.Период,
					|	Т.Регистратор,
					|	Т.Организация,
					|	Т.Партия,
					|	Т.АналитикаУчетаПартий,
					|	Т.ВидЗапасов,
					|	Т.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
					|	Т.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
					|	ВЫРАЗИТЬ(СУММА(-Т.Количество) КАК ЧИСЛО(15,3)) КАК Количество
					|ИЗ
					|	РегистрНакопления.СебестоимостьТоваров КАК Т
					|ГДЕ
					|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
					|	И Т.Организация В(&МассивОрганизаций)
					|	И Т.Количество <> 0
					|СГРУППИРОВАТЬ ПО
					|	ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
					|		ТОГДА ИСТИНА
					|		ИНАЧЕ ЛОЖЬ
					|	КОНЕЦ,
					|	Т.Период,
					|	Т.Регистратор,
					|	Т.Организация,
					|	Т.Партия,
					|	Т.АналитикаУчетаПартий,
					|	Т.ВидЗапасов,
					|	Т.АналитикаУчетаНоменклатуры.Номенклатура,
					|	Т.АналитикаУчетаНоменклатуры.Характеристика
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура,
					|	Партия,
					|	АналитикаУчетаПартий,
					|	ВидЗапасов,
					|	Характеристика,
					|	ДанныеИБ,
					|	Организация";
					
					ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
					
				КонецЕсли;
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЛОЖЬ КАК ДанныеИБ,
				|	Цены.ПериодРегистрации КАК Период,
				|	Цены.Организация,
				|	Цены.Партия,
				|	Цены.АналитикаУчетаПартий,
				|	Цены.ВидЗапасов,
				|	Цены.Номенклатура,
				|	Цены.Характеристика,
				|	Цены.ЗатратыПредыдущихПеределов,
				|
				|	Цены.ДокументПоступления,
				|	Цены.АналитикаУчетаПартийДокументаПоступления,
				|	&ДополнительныеПоляРегистраЦен,
				|
				|	ВЫРАЗИТЬ(Цены.СтоимостьСНДС КАК ЧИСЛО(31,10)) КАК СтоимостьСНДС,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДС КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДС,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДСРегл КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДСРегл,
				|	ВЫРАЗИТЬ(Цены.НДСРегл КАК ЧИСЛО(31,10)) КАК НДСРегл,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДСУпр КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДСУпр,
				|	ВЫРАЗИТЬ(Цены.НДСУпр КАК ЧИСЛО(31,10)) КАК НДСУпр
				|ПОМЕСТИТЬ ВТПартииНДСДляПроверкиИзменений
				|ИЗ
				|	ИмяТаблицыКэшаРегистра КАК Цены
				|ГДЕ
				|	НЕ Цены.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ИСТИНА КАК ДанныеИБ,
				|	Цены.ПериодРегистрации КАК Период,
				|	Цены.Организация,
				|	Цены.Партия,
				|	Цены.АналитикаУчетаПартий,
				|	Цены.ВидЗапасов,
				|	Цены.Номенклатура,
				|	Цены.Характеристика,
				|	Цены.ЗатратыПредыдущихПеределов,
				|
				|	Цены.ДокументПоступления,
				|	Цены.АналитикаУчетаПартийДокументаПоступления,
				|	&ДополнительныеПоляРегистраЦен,
				|
				|	ВЫРАЗИТЬ(Цены.СтоимостьСНДС КАК ЧИСЛО(31,10)) КАК СтоимостьСНДС,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДС КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДС,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДСРегл КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДСРегл,
				|	ВЫРАЗИТЬ(Цены.НДСРегл КАК ЧИСЛО(31,10)) КАК НДСРегл,
				|	ВЫРАЗИТЬ(Цены.СтоимостьБезНДСУпр КАК ЧИСЛО(31,10)) КАК СтоимостьБезНДСУпр,
				|	ВЫРАЗИТЬ(Цены.НДСУпр КАК ЧИСЛО(31,10)) КАК НДСУпр
				|ИЗ
				|	ИмяОсновнойТаблицыРегистра КАК Цены
				|ГДЕ
				|	Цены.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
				|	И Цены.Организация В(&МассивОрганизаций)
				|	И НЕ Цены.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Партия,
				|	АналитикаУчетаПартий,
				|	ВидЗапасов,
				|	Характеристика,
				|	ДанныеИБ,
				|	Организация
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Т.Регистратор      			 КАК Регистратор,
				|	Т.Организация      			 КАК Организация,
				|	Т.Период     	   		 	 КАК Период,
				|	""ИмяЗаписываемогоРегистра"" КАК ИмяРегистра,
				|	&ВлияетНаПроводки  			 КАК ВлияетНаПроводки
				|ПОМЕСТИТЬ ИмяВременнойТаблицыРезультата
				|ИЗ
				|	ВТДвиженияСебестоимостиДляПроверкиИзменений КАК Т
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПартииНДСДляПроверкиИзменений КАК Цены
				|		ПО Цены.Партия = Т.Партия
				|			И Цены.Организация = Т.Организация
				|			И Цены.Номенклатура = Т.Номенклатура
				|			И Цены.Характеристика = Т.Характеристика
				|			И Цены.АналитикаУчетаПартий = Т.АналитикаУчетаПартий
				|			И Цены.ВидЗапасов = Т.ВидЗапасов
				|			И Цены.ДанныеИБ = Т.ДанныеИБ
				|СГРУППИРОВАТЬ ПО
				|	Т.СлужебноеВидДвиженияПриход,
				|	Т.Период,
				|	Т.Регистратор,
				|	Т.Организация,
				|	Т.Партия,
				|	Т.АналитикаУчетаПартий,
				|	Т.ВидЗапасов,
				|	Т.Номенклатура,
				|	Т.Характеристика,
				|	Цены.ЗатратыПредыдущихПеределов,
				|	&ДополнительныеПоляРегистраЦен,
				|	Цены.ДокументПоступления,
				|	Цены.АналитикаУчетаПартийДокументаПоступления
				|ИМЕЮЩИЕ
				|	СУММА(ВЫРАЗИТЬ(Цены.СтоимостьСНДС * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|	ИЛИ СУММА(ВЫРАЗИТЬ(Цены.СтоимостьБезНДС * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|	ИЛИ СУММА(ВЫРАЗИТЬ(Цены.СтоимостьБезНДСРегл * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|	ИЛИ СУММА(ВЫРАЗИТЬ(Цены.НДСРегл * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|	ИЛИ СУММА(ВЫРАЗИТЬ(Цены.СтоимостьБезНДСУпр * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|	ИЛИ СУММА(ВЫРАЗИТЬ(Цены.НДСУпр * Т.Количество КАК ЧИСЛО (31,2))) <> 0
				|;
				|////////////////////////////////////////////////////////////////////////////////
				|УНИЧТОЖИТЬ ВТПартииНДСДляПроверкиИзменений
				|";
				
				Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров.Имя Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляРегистраЦен", "Цены.АналитикаУчетаНоменклатурыДокументаПоступления,
						|	Цены.АналитикаУчетаНоменклатурыНЗП");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныеПоляРегистраЦен", "Цены.СтатьяРасходов,
						|	Цены.АналитикаРасходов,
						|	Цены.АналитикаУчетаНоменклатурыНЗП");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяЗаписываемогоРегистра",   ОписаниеРегистра.ИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыКэшаРегистра", 	   ОписаниеРегистра.ИмяТаблицыКэшаРегистра);
		
		Запрос.УстановитьПараметр("ВлияетНаПроводки",
			ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя
			И НЕ РасчетСебестоимостиЛокализация.ЭтоЛокализуемыйРегистрСведений(ОписаниеРегистра.ИмяРегистра)
			И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя);
		
		РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
			ПараметрыРасчета,
			"ВТИзмененныеДокументы",
			НСтр("ru = 'Дополнение временной таблицы по данным регистра';
				|en = 'Add register data to a temporary table'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ОписаниеРегистра.ИмяРегистра);
		
		Если НЕ ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТИзмененныеДокументы") Тогда
		
			// Создадим временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицыРезультата", "ВТИзмененныеДокументы");
			ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
			
		Иначе
			
			// Дополним временную таблицу ВТИзмененныеДокументы
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицыРезультата", "ВТНоваяПорцияИзмененныхДокументов");
			ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				"ВТНоваяПорцияИзмененныхДокументов",
				"ВТИзмененныеДокументы",
				"Регистратор, Организация, Период, ИмяРегистра, ВлияетНаПроводки",
				"");
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТНоваяПорцияИзмененныхДокументов");
			
		КонецЕсли;
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ
		
		Если НЕ ОписаниеРегистра.ПодчиненРегистратору Тогда
			
			ДанныеДляПротокола = ЗаписатьНезависимыйРегистрСведений(
				ПараметрыРасчета,
				ОписаниеРегистра,
				ОписаниеРегистра.ИмяТаблицыКэшаРегистра,
				Ложь);
			
			РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
				ПараметрыРасчета,
				ОписаниеРегистра.ИмяРегистра,
				ДанныеДляПротокола.КоличествоНаборов,
				ДанныеДляПротокола.КоличествоЗаписей,
				ТекущаяДатаСеанса() - ДанныеДляПротокола.ДатаНачалаЗаписи + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		РасчетСебестоимостиПротоколРасчета.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
	// Зафиксируем данные замера производительности.
	РасчетСебестоимостиПротоколРасчета.ЗафиксироватьЗамерВремени(ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(ЗаписатьРегистры) Тогда
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДвиженияСебестоимостиДляПроверкиИзменений");
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает процесс многопоточной записи движений.
//
Процедура ЗавершениеЗаписиДвижений(ПараметрыРасчета)
	
	Если МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) < 2 Тогда
		// Запись уже закончена - выполнялась в один поток, без фоновых заданий
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Завершение записи движений';
				|en = 'Завершение записи движений'"));
		Возврат;
	КонецЕсли;
	
	// Если движения пишутся фоновыми заданиями, то дождемся окончания всех заданий
	Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра
	 И НЕ ПараметрыРасчета.Отладка.ОтключитьЗаписьСформированныхДвижений Тогда
	 
		Пока ПараметрыРасчета.СтекДанныхДляЗаписи.Количество() > 0 Цикл
			ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета, Истина);
		КонецЦикла;
	
	КонецЕсли;
	
	ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, Истина);
	
	РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
		ПараметрыРасчета,
		НСтр("ru = 'Завершение записи движений';
			|en = 'Завершение записи движений'"));
	
	// Проверим корректность формирования порций записи.
	Если НЕ ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ
	 ИЛИ ПараметрыРасчета.Отладка.РегистраторыВФЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Свернуть("ИмяРегистра, Регистратор", "Количество");
	ПараметрыРасчета.Отладка.РегистраторыВФЗ.Сортировать("Количество Убыв, ИмяРегистра, Регистратор");
	
	Если ПараметрыРасчета.Отладка.РегистраторыВФЗ[0].Количество > 1 Тогда
		
		ТекстДляПротокола =	НСтр("ru = 'Некорректно выполнено разделение движений на порции для многопоточной записи. Движения могут быть некорректны.';
									|en = 'The movements are incorrectly divided into portions for multi-threaded writing. The movements might be incorrect.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			НСтр("ru = 'При записи движений диагностированы ошибки';
				|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстДляПротокола);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру параметров записи.
// 
// Параметры:
//  ПериодРасчета - Дата - Период расчета
//  НомерЗаданияДоРасчета - Число - Номер задания до расчета
// 
// Возвращаемое значение:
//  Структура - Инициализировать параметры записи:
// * ПериодРасчета - Дата - 
// * НомерЗаданияДоРасчета - Число - 
// * ДополнитьНаборЗаписей - Булево - 
// * ИмяПоляРазделителя - Строка - 
// * КоличествоЗаписейВНЗ - Число - 
// * КоличествоПопытокЗаписи - Число - 
// * КоличествоРегистраторовВТранзакцииЗаписи - Число - 
Функция ИнициализироватьПараметрыЗаписи(ПериодРасчета, НомерЗаданияДоРасчета = -1) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ПериодРасчета", 		  ПериодРасчета);
	ПараметрыЗаписи.Вставить("НомерЗаданияДоРасчета", НомерЗаданияДоРасчета);
	ПараметрыЗаписи.Вставить("ДополнитьНаборЗаписей", Ложь);
	ПараметрыЗаписи.Вставить("ИмяПоляРазделителя",    "ДокументПоступления"); // для независимых регистров сведений (партии НДС), для деления данных на порции
	
	// Дополнительные параметры записи.
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	ПараметрыЗаписи.Вставить("КоличествоЗаписейВНЗ",	ЗначенияПараметров.КоличествоЗаписейВНЗ);
	ПараметрыЗаписи.Вставить("КоличествоПопытокЗаписи", ЗначенияПараметров.КоличествоПопытокЗаписи);
	ПараметрыЗаписи.Вставить("КоличествоРегистраторовВТранзакцииЗаписи", ЗначенияПараметров.КоличествоРегистраторовВТранзакцииЗаписи);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Инициализирует структуру параметров записи результатов расчета.
//
// Возвращаемое значение:
//	Структура -
//
Функция ИнициализироватьПараметрыЗаписиРезультатовРасчета(ПериодРасчета, ОписаниеРегистра, НомерЗаданияДоРасчета = -1) Экспорт
	
	ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписи(ПериодРасчета, НомерЗаданияДоРасчета);
	
	ПараметрыЗаписиРегистра.Вставить("ИмяРегистра", 		  ОписаниеРегистра.ИмяРегистра);
	ПараметрыЗаписиРегистра.Вставить("МенеджерРегистра", 	  ОписаниеРегистра.МенеджерРегистра);
	ПараметрыЗаписиРегистра.Вставить("ИдентификаторРасчета",  Новый УникальныйИдентификатор);
	ПараметрыЗаписиРегистра.Вставить("КоличествоПорций", 	  0);
	ПараметрыЗаписиРегистра.Вставить("НомерПервойПорции", 	  1);
	ПараметрыЗаписиРегистра.Вставить("ПорцииОчистки", 		  Новый Массив); // номера порций с данными для очистки движений
	ПараметрыЗаписиРегистра.Вставить("ПорцииДополнения", 	  Новый Массив); // номер порций с движениями "больших" наборов, для записи с параметром Замещать = Ложь
	ПараметрыЗаписиРегистра.Вставить("ВремяПодготовкиДанных", 0);
	ПараметрыЗаписиРегистра.Вставить("КоличествоЗаписей", 	  0);
	ПараметрыЗаписиРегистра.Вставить("РегистраторыСБольшимиНаборами", Новый Массив);
	ПараметрыЗаписиРегистра.Вставить("ЭтоНезависимыйРегистр", НЕ ОписаниеРегистра.ПодчиненРегистратору);

	Если ПараметрыЗаписиРегистра.ЭтоНезависимыйРегистр Тогда
		ПараметрыЗаписиРегистра.Вставить("НеВызыватьИсключениеПриОшибке", Истина);
	КонецЕсли;
	
	Возврат ПараметрыЗаписиРегистра;
	
КонецФункции

// Выполняет запись движений документов по указанному регистру в фоновом задании.
//
// Параметры:
//	ПараметрыЗаписиРегистра - Структура - параметры записи движений
//
Процедура ЗаписатьДвиженияПоРегиструФоновымЗаданием(ПараметрыЗаписиРегистра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСтатистика = НСтр("ru = 'Начало';
							|en = 'Start'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT");
	ТекстОшибки = "";
	
	ПараметрыЗаписиРегистра.Вставить("НеВызыватьИсключениеПриОшибке", Истина);
	ПараметрыЗаписиРегистра.Вставить("КоличествоНаборов", 0);
	ПараметрыЗаписиРегистра.Вставить("КоличествоЗаписей", 0);
	
	ЭтоНезависимыйРегистр = ПараметрыЗаписиРегистра.Свойство("ЭтоНезависимыйРегистр") И ПараметрыЗаписиРегистра.ЭтоНезависимыйРегистр;
	
	Для НомерПорции = ПараметрыЗаписиРегистра.НомерПервойПорции По ПараметрыЗаписиРегистра.КоличествоПорций Цикл
		
		УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина);
		
		Попытка
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Регистр %1, обработка порции данных %2 из %3';
					|en = 'Register %1, processing data batch %2 of %3'"),
				ПараметрыЗаписиРегистра.ИмяРегистра,
				НомерПорции,
				ПараметрыЗаписиРегистра.КоличествоПорций);
			
			Если НомерПорции > ПараметрыЗаписиРегистра.НомерПервойПорции Тогда
				
				ВремяЗаписиПорции = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / (НомерПорции - ПараметрыЗаписиРегистра.НомерПервойПорции) / 1000;
				ВремяЗаписиОставшееся = ВремяЗаписиПорции * (ПараметрыЗаписиРегистра.КоличествоПорций - НомерПорции + 1);
				
				ТекстДляПротокола = ТекстДляПротокола + "; "
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'примерное оставшееся время записи: %1';
							|en = 'approximate remaining writing time: %1'"),
						РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяЗаписиОставшееся, Ложь));
				
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
																|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстДляПротокола);
			
			ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.ИдентификаторРасчета = ПараметрыЗаписиРегистра.ИдентификаторРасчета;
			ЗаписьРегистра.ТипДанных 			= Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета;
			ЗаписьРегистра.НомерПорцииДанных 	= НомерПорции;
			ЗаписьРегистра.НомерВерсии 			= СокрЛП(Метаданные.Версия);
			
			ЗаписьРегистра.Прочитать();
			
			Если НЕ ЗаписьРегистра.Выбран() Тогда
				
				УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
				
				ТекстОшибки = ТекстОшибки + Символы.ПС +
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найдена порция данных №%1';
																				|en = 'Data batch %1 not found'"), НомерПорции);
					
				Прервать;
				
			КонецЕсли;
			
			Таблица = ЗаписьРегистра.Данные.Получить();
			
			ПараметрыЗаписиРегистра.Вставить("ДополнитьНаборЗаписей", ПараметрыЗаписиРегистра.ПорцииДополнения.Найти(НомерПорции) <> Неопределено);
			
			Если ЭтоНезависимыйРегистр Тогда
				ЗаписатьПорциюДвиженийНезависимогоРегистра(
					Таблица,
					ПараметрыЗаписиРегистра.МенеджерРегистра,
					ПараметрыЗаписиРегистра);
			Иначе
				ЗаписатьДвиженияПоРегистру(
					Таблица,
					ПараметрыЗаписиРегистра.МенеджерРегистра,
					ПараметрыЗаписиРегистра);
			КонецЕсли;
			
			Если ПараметрыЗаписиРегистра.ПорцииОчистки.Найти(НомерПорции) = Неопределено Тогда
				ПараметрыЗаписиРегистра.КоличествоЗаписей = ПараметрыЗаписиРегистра.КоличествоЗаписей + Таблица.Количество();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыЗаписиРегистра.ОписаниеОшибокЗаписи) Тогда
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыЗаписиРегистра.ОписаниеОшибокЗаписи;
				
			КонецЕсли;
			
			ОчиститьКэшДанныхДляЗаписи(ПараметрыЗаписиРегистра.ИдентификаторРасчета, НомерПорции);
			
			УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
			
		Исключение
			
			УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
			
			ТекстОшибки = ТекстОшибки + Символы.ПС +
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка фонового задания записи движений:
						|%1';
						|en = 'Register records writing background job error:
						|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстСтатистика = ТекстСтатистика + "; "
		+ НСтр("ru = 'окончание';
				|en = 'end'") + ": " + Формат(ТекущаяДатаСеанса(), "ДЛФ=DT") + "; "
		+ НСтр("ru = 'длительность';
				|en = 'duration'") + ": " + РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени((ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000) + "; "
		+ НСтр("ru = 'порций';
				|en = 'portions'") + ": " + СокрЛП(ПараметрыЗаписиРегистра.КоличествоПорций - ПараметрыЗаписиРегистра.НомерПервойПорции + 1) + "; "
		+ НСтр("ru = 'наборов';
				|en = 'sets'") + ": " + СокрЛП(ПараметрыЗаписиРегистра.КоличествоНаборов) + "; "
		+ НСтр("ru = 'записей';
				|en = 'records'") + ": " + СокрЛП(ПараметрыЗаписиРегистра.КоличествоЗаписей);
		
	Результат = Новый Структура;
	Результат.Вставить("ТекстСтатистика", СокрЛП(ТекстСтатистика));
	Результат.Вставить("ТекстОшибки", СокрЛП(ТекстОшибки));
	
	ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИдентификаторРасчета  = ПараметрыЗаписиРегистра.ИдентификаторРасчета;
	ЗаписьРегистра.ТипДанных 			 = Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета;
	ЗаписьРегистра.НомерПорцииДанных 	 = 0;
	ЗаписьРегистра.НомерВерсии 			 = СокрЛП(Метаданные.Версия);
	ЗаписьРегистра.ДатаЗаписи			 = ТекущаяДатаСеанса();
	ЗаписьРегистра.Комментарий			 = НСтр("ru = 'Запись движений';
													|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка()) + " - " + ПараметрыЗаписиРегистра.ИмяРегистра;
	
	ЗаписьРегистра.Данные = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(9));
	
	ЗаписьРегистра.Записать(Истина);
	
	ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Регистр %1 - запись данных завершена. %2';
			|en = 'Register %1 - data writing complete. %2'"),
		ПараметрыЗаписиРегистра.ИмяРегистра,
		ТекстСтатистика);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
														|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Информация,,,
		ТекстДляПротокола);
	
КонецПроцедуры

// Выполняет запись движений по указанному независимому регистру сведений.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса, ТаблицаЗначений -
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - РегистрСведенийМенеджер -
//	ПараметрыЗаписи - Структура - параметры записи
//
Процедура ЗаписатьПорциюДвиженийНезависимогоРегистра(ИсходныеДанные, МенеджерРегистра, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", "");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаписи.КоличествоЗаписейВНЗ) Тогда
		// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла.
		Возврат; 
	КонецЕсли;
	
	ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;
	
	ИмяПоляРазделителя = ПараметрыЗаписи.ИмяПоляРазделителя;
	ТолькоОчищатьЗаписи = Ложь;
	ОписаниеОшибокЗаписи = "";
	КоличествоДополнительныхПопытокЗаписи = 0;
	
	ИмяСлужебногоДополнительногоСвойстваОбъекта = ИмяСлужебногоДополнительногоСвойстваОбъекта();
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); //РегистрСведенийНаборЗаписей.ДетализацияСебестоимостиТоваров
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта, Истина);
	
	ПорцияДанныхИсточника = Неопределено;
	НомерНабора 		  = Неопределено;
	НомерПорцииЗаписи     = 1;
	
	ПериодическийРегистр = РасчетСебестоимостиУниверсальныеАлгоритмы.ЭтоПериодическийРегистрСведений(НаборЗаписей.Метаданные());
	
	ИмяПоляПериод = ?(ПериодическийРегистр, "Период", "ПериодРегистрации");
	
	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл
		
		Если НомерНабора <> ПорцияДанныхИсточника.НомерНабора Тогда
			
			Если ПараметрыЗаписи.Свойство("КоличествоНаборов") Тогда
				ПараметрыЗаписи.КоличествоНаборов = ПараметрыЗаписи.КоличествоНаборов + 1;
			КонецЕсли;
			
			// Если изменился номер набора в движениях - запишем движения предыдущего набора.
			Если НомерНабора <> Неопределено Тогда
				ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			КонецЕсли;
			
			НомерНабора = ПорцияДанныхИсточника.НомерНабора;
			ПериодЗаписи = НачалоМесяца(ПорцияДанныхИсточника[ИмяПоляПериод]);
			НомерПорцииЗаписи = 1;
			
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); //РегистрСведенийНаборЗаписей.ДетализацияСебестоимостиТоваров
			НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта, Истина);
			
			НаборЗаписей.Отбор[ИмяПоляПериод].Установить(ПериодЗаписи);
			НаборЗаписей.Отбор.Организация.Установить(ПорцияДанныхИсточника.Организация);
			НаборЗаписей.Отбор[ИмяПоляРазделителя].Установить(ПорцияДанныхИсточника[ИмяПоляРазделителя]);
			НаборЗаписей.Отбор.ТипЗаписи.Установить(ПорцияДанныхИсточника.ТипЗаписи);
			
		ИначеЕсли НЕ ТолькоОчищатьЗаписи И НаборЗаписей.Количество() >= ПараметрыЗаписи.КоличествоЗаписейВНЗ Тогда
			
			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям.
			ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
		Запись[ИмяПоляПериод] = ПериодЗаписи;
		
	КонецЦикла;
	
	Если НомерНабора <> Неопределено Тогда
		ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
	КонецЕсли;
	
	Если КоличествоДополнительныхПопытокЗаписи > 0 Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнено дополнительных попыток записи движений регистра %1: %2';
				|en = 'Performed additional attempts of register records writing %1: %2'"),
			НаборЗаписей.Метаданные().ПолноеИмя(),
			СокрЛП(КоличествоДополнительныхПопытокЗаписи));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
															|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("НеВызыватьИсключениеПриОшибке") И ПараметрыЗаписи.НеВызыватьИсключениеПриОшибке Тогда
			ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", ОписаниеОшибокЗаписи);
		Иначе
			ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована() + ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись движений документов по указанному регистру.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса, ТаблицаЗначений -
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - РегистрНакопленияМенеджер -
//	ПараметрыЗаписи - Структура - параметры записи
//
Процедура ЗаписатьДвиженияПоРегистру(ИсходныеДанные, МенеджерРегистра, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", "");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаписи.КоличествоЗаписейВНЗ) Тогда
		// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла.
		Возврат; 
	КонецЕсли;
	
	Если ПараметрыЗаписи.КоличествоРегистраторовВТранзакцииЗаписи > 0 Тогда
		ЗаписатьДвиженияПоРегиструВТранзакции(ИсходныеДанные, МенеджерРегистра, ПараметрыЗаписи);
		Возврат;
	КонецЕсли;
	
	// Приведем исходные данные к типу выборки из запроса или таблицы значений
	Если ТипЗнч(ИсходныеДанные) = Тип("Запрос") Тогда
		ИсточникДанных = ИсходныеДанные.Выполнить().Выбрать(); // выборка
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ИсточникДанных = ИсходныеДанные.Выбрать(); // выборка
	Иначе
		ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	КонецЕсли;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;
	
	// Если в источнике нет обязательных для регистра колонок, например, Период,
	// то считаем, что переданы регистраторы, у которых надо просто очистить движения.
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		ИсточникКолонок = ИсточникДанных.Владелец(); // РезультатЗапроса 
		ТолькоОчищатьЗаписи = (ИсточникКолонок.Колонки.Найти("Период") = Неопределено);
	Иначе // источник данных - это таблица значений
		ИсточникКолонок = ИсточникДанных; // ТаблицаЗначений
		ТолькоОчищатьЗаписи = (ИсточникКолонок.Колонки.Найти("Период") = Неопределено);
	КонецЕсли;
	
	ОписаниеОшибокЗаписи = "";
	КоличествоДополнительныхПопытокЗаписи = 0;
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор    = Неопределено;
	НомерПорцииЗаписи     = 1;
	
	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл
		
		Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда
			
			Если ПараметрыЗаписи.Свойство("КоличествоНаборов") Тогда
				ПараметрыЗаписи.КоличествоНаборов = ПараметрыЗаписи.КоличествоНаборов + 1;
			КонецЕсли;
			
			// Если изменился регистратор в движениях - запишем движения предыдущего регистратора.
			Если НЕ ПараметрыЗаписи.ДополнитьНаборЗаписей И ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			КонецЕсли;
			
			ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
			НомерПорцииЗаписи = ?(ПараметрыЗаписи.ДополнитьНаборЗаписей, 2, 1);
			
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
			НаборЗаписей.ОбменДанными.Получатели.Очистить();
			
		ИначеЕсли НЕ ТолькоОчищатьЗаписи
				И НаборЗаписей.Количество() >= ПараметрыЗаписи.КоличествоЗаписейВНЗ Тогда

			// Если в движениях документа много записей - будем записывать их порциями
			// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям.
			ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			
			НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
			
		КонецЕсли;
		
		Если НЕ ТолькоОчищатьЗаписи Тогда
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
		ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
	КонецЕсли;
	
	Если КоличествоДополнительныхПопытокЗаписи > 0 Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнено дополнительных попыток записи движений регистра %1: %2';
				|en = 'Performed additional attempts of register records writing %1: %2'"),
			НаборЗаписей.Метаданные().ПолноеИмя(),
			СокрЛП(КоличествоДополнительныхПопытокЗаписи));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
															|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("НеВызыватьИсключениеПриОшибке") И ПараметрыЗаписи.НеВызыватьИсключениеПриОшибке Тогда
			ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", ОписаниеОшибокЗаписи);
		Иначе
			ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована() + ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись движений документов по указанному регистру в транзакции.
//
// Параметры:
//	ИсходныеДанные - Запрос, РезультатЗапроса, ВыборкаИзРезультатаЗапроса, ТаблицаЗначений -
//		Движения по регистру, обязательно упорядоченные по регистратору
//		Если в источнике есть только колонка Регистратор, то по этим регистраторам будут просто очищены движения.
//	МенеджерРегистра - РегистрНакопленияМенеджер -
//	ПараметрыЗаписи - Структура - параметры записи
//
Процедура ЗаписатьДвиженияПоРегиструВТранзакции(ИсходныеДанные, МенеджерРегистра, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", "");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗаписи.КоличествоЗаписейВНЗ) Тогда
		// Можно использовать для целей отладки - выполнить полноценный расчет без изменения данных ИБ
		// Не стоит использовать эту возможность, если выполняется расчет первого месяца на механизме партионного учета версии 2.2,
		// т.к. не будут записаны начальные остатки партий и весь последующий расчет не будет иметь смысла.
		Возврат; 
	КонецЕсли;
	
	// Приведем исходные данные к типу выборки из запроса или таблицы значений
	Если ТипЗнч(ИсходныеДанные) = Тип("Запрос") Тогда
		ИсточникДанных = ИсходныеДанные.Выполнить().Выбрать(); // выборка
	ИначеЕсли ТипЗнч(ИсходныеДанные) = Тип("РезультатЗапроса") Тогда
		ИсточникДанных = ИсходныеДанные.Выбрать(); // выборка
	Иначе
		ИсточникДанных = ИсходныеДанные; // выборка или таблица значений
	КонецЕсли;
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат; // нечего записывать
	КонецЕсли;
	
	ИсточникВыборка = ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса");
	
	// Если в источнике нет обязательных для регистра колонок, например, Период,
	// то считаем, что переданы регистраторы, у которых надо просто очистить движения.
	Если ИсточникВыборка Тогда 
		ИсточникКолонок = ИсточникДанных.Владелец(); // РезультатЗапроса 
		ТолькоОчищатьЗаписи = (ИсточникКолонок.Колонки.Найти("Период") = Неопределено);
	Иначе // источник данных - это таблица значений
		ИсточникКолонок = ИсточникДанных; // ТаблицаЗначений
		ТолькоОчищатьЗаписи = (ИсточникКолонок.Колонки.Найти("Период") = Неопределено);
	КонецЕсли;
	
	ТаблицаРегистраторы = Новый ТаблицаЗначений;
	ТаблицаРегистраторы.Колонки.Добавить("Регистратор", 	Новый ОписаниеТипов(Документы.ТипВсеСсылки()));
	ТаблицаРегистраторы.Колонки.Добавить("КоличествоСтрок", Новый ОписаниеТипов("Число"));
	ТаблицаРегистраторы.Колонки.Добавить("НомерПорции", 	Новый ОписаниеТипов("Число"));
	
	ПорцииРегистраторов = Новый Массив; // индекс: номер порции, значение: количество строк источника в порции
	
	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор    = Неопределено;
	СтрокаРегистратора	  = Неопределено;
	РазмерПорции 		  = ПараметрыЗаписи.КоличествоРегистраторовВТранзакцииЗаписи;
	ТекущаяПорция		  = Неопределено;
	
	Пока ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника) Цикл
		
		Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда
			
			ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
			
			СтрокаРегистратора = ТаблицаРегистраторы.Добавить();
			СтрокаРегистратора.Регистратор = ТекущийРегистратор;
			СтрокаРегистратора.НомерПорции = Цел((ТаблицаРегистраторы.Количество() - 1)/ РазмерПорции);
			
		КонецЕсли;
		
		Если ТекущаяПорция <> СтрокаРегистратора.НомерПорции Тогда
			ТекущаяПорция = СтрокаРегистратора.НомерПорции;
			ПорцииРегистраторов.Добавить(0);
		КонецЕсли;
		
		СтрокаРегистратора.КоличествоСтрок = СтрокаРегистратора.КоличествоСтрок + 1;
		ПорцииРегистраторов[ПорцииРегистраторов.Количество() - 1] = ПорцииРегистраторов[ПорцииРегистраторов.Количество() - 1] + 1;
		
	КонецЦикла;	
	
	ТаблицаРегистраторы.Индексы.Добавить("НомерПорции");
	
	Если ИсточникВыборка Тогда 
		ИсточникДанных.Сбросить();
	КонецЕсли;
	
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр
	НаборЗаписей.ДополнительныеСвойства.Вставить(ИмяСлужебногоДополнительногоСвойстваОбъекта(), Истина);
	
	ОписаниеОшибокЗаписи = "";
	КоличествоДополнительныхПопытокЗаписи = 0;
	
	ПорцияДанныхИсточника = Неопределено;
	ТекущийРегистратор    = Неопределено;
	НомерПорцииЗаписи     = 1;
			
	Для НомерПорцииРегистраторов = 0 По ПорцииРегистраторов.Количество() - 1 Цикл
		
		КоличествоСтрокВПорции = ПорцииРегистраторов[НомерПорцииРегистраторов];
		
		НачатьТранзакцию();
		
		Попытка
			
			РегистраторыТекущейПорции = ТаблицаРегистраторы.Скопировать(
				ТаблицаРегистраторы.НайтиСтроки(Новый Структура("НомерПорции", НомерПорцииРегистраторов)),
				"Регистратор");
				
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");

			ЭлементБлокировки.ИсточникДанных = РегистраторыТекущейПорции;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Документ", "Регистратор");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ИзмененныеРегистраторы = РегистраторыИзмененныеПриРасчете(
				РегистраторыТекущейПорции,
				НаборЗаписей.Метаданные(),
				ОписаниеОшибокЗаписи,
				ПараметрыЗаписи);
			
			Для НомерТекущейСтрокиПорции = 1 По КоличествоСтрокВПорции Цикл
				
				ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника);
				
				Если ИзмененныеРегистраторы.Получить(ПорцияДанныхИсточника.Регистратор) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если РегистраторыТекущейПорции.Найти(ПорцияДанныхИсточника.Регистратор) = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Ошибка транзакции записи движений документов.';
											|en = 'A transaction error occurred when writing the document register records.'")
				КонецЕсли;
				
				Если ТекущийРегистратор <> ПорцияДанныхИсточника.Регистратор Тогда
					
					Если ПараметрыЗаписи.Свойство("КоличествоНаборов") Тогда
						ПараметрыЗаписи.КоличествоНаборов = ПараметрыЗаписи.КоличествоНаборов + 1;
					КонецЕсли;
					
					// Если изменился регистратор в движениях - запишем движения предыдущего регистратора.
					Если НЕ ПараметрыЗаписи.ДополнитьНаборЗаписей И ЗначениеЗаполнено(ТекущийРегистратор) Тогда
						ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
					КонецЕсли;
					
					ТекущийРегистратор = ПорцияДанныхИсточника.Регистратор;
					НомерПорцииЗаписи = ?(ПараметрыЗаписи.ДополнитьНаборЗаписей, 2, 1);
					
					НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
					
					НаборЗаписей.ОбменДанными.Получатели.Очистить();
					
				ИначеЕсли НЕ ТолькоОчищатьЗаписи
						И НаборЗаписей.Количество() >= ПараметрыЗаписи.КоличествоЗаписейВНЗ Тогда

					// Если в движениях документа много записей - будем записывать их порциями
					// Первая порция записывается с замещением старых записей, следующие - с добавлением к предыдущим порциям.
					ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
					
					НомерПорцииЗаписи = НомерПорцииЗаписи + 1;
					
				КонецЕсли;
				
				Если НЕ ТолькоОчищатьЗаписи Тогда
					Запись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, ПорцияДанныхИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ТекущийРегистратор) Тогда
				ЗаписатьНаборЗаписей(НаборЗаписей, (НомерПорцииЗаписи = 1), ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если КоличествоДополнительныхПопытокЗаписи > 0 Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнено дополнительных попыток записи движений регистра %1: %2';
				|en = 'Performed additional attempts of register records writing %1: %2'"),
			НаборЗаписей.Метаданные().ПолноеИмя(),
			СокрЛП(КоличествоДополнительныхПопытокЗаписи));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
															|en = 'Writing register records'")),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("НеВызыватьИсключениеПриОшибке") И ПараметрыЗаписи.НеВызыватьИсключениеПриОшибке Тогда
			ПараметрыЗаписи.Вставить("ОписаниеОшибокЗаписи", ОписаниеОшибокЗаписи);
		Иначе
			ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована() + ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает следующую порцию из выборки или следующую строку из таблицы значений.
//
Функция ПолучитьСледующуюПорциюИзИсточникаДанных(ИсточникДанных, ПорцияДанныхИсточника)
	
	Если ТипЗнч(ИсточникДанных) = Тип("ВыборкаИзРезультатаЗапроса") Тогда 
		
		Если ИсточникДанных.Следующий() Тогда
			ПорцияДанныхИсточника = ИсточникДанных; // данные хранятся в полях самой выборки
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	Иначе // источник данных - это таблица значений
		
		ИсточникДанных = ИсточникДанных; //ТаблицаЗначений
		
		Если ПорцияДанныхИсточника = Неопределено Тогда
			ИндексСтроки = 0;
		Иначе
			ИндексСтроки = ИсточникДанных.Индекс(ПорцияДанныхИсточника) + 1;
		КонецЕсли;
		
		Если ИндексСтроки < ИсточникДанных.Количество() Тогда
			ПорцияДанныхИсточника = ИсточникДанных[ИндексСтроки]; // следующая строка
		Иначе
			Возврат Ложь; // больше нет данных
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина; // новая порция данных помещена в ПорцияДанныхИсточника
	
КонецФункции

// Выполняет запись переданного набора записей независимого регистра сведений.
//
Процедура ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, Замещать, ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи)
	
	КоличествоПопытокЗаписи = ?(ПараметрыЗаписи.Свойство("КоличествоПопытокЗаписи"), ПараметрыЗаписи.КоличествоПопытокЗаписи, 1);
	
	Для НомерПопытки = 1 По КоличествоПопытокЗаписи Цикл
		
		КоличествоДополнительныхПопытокЗаписи = КоличествоДополнительныхПопытокЗаписи + ?(НомерПопытки = 1, 0, 1);
		
		Попытка
			
			ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);
			НаборЗаписей.Записать(Замещать);
			
			Прервать; // больше выполнять запись не требуется
			
		Исключение
			
			Если НомерПопытки <> КоличествоПопытокЗаписи Тогда
				Продолжить; // ошибка будет зарегистрирована на последней неудачной попытке
			КонецЕсли;
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка записи движений по регистру сведений ""%1"":
					|%2';
					|en = 'Error writing records in the information register ""%1"":
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НаборЗаписей.Метаданные().Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗарегистрироватьОшибкуЗаписиДвижений(
				Неопределено,
				ПараметрыЗаписи,
				НСтр("ru = 'При записи движений диагностированы ошибки';
					|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола,
				ОписаниеОшибокЗаписи,
				НаборЗаписей.Отбор.Организация.Значение);
			
		КонецПопытки;
		
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

// Выполняет запись переданного набора записей.
//
// Параметры:
// 	НаборЗаписей - РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - 
// 	Замещать - Булево -
// 	ОписаниеОшибокЗаписи - Строка -
//	КоличествоДополнительныхПопытокЗаписи - Число -
// 	ПараметрыЗаписи - Структура -
Процедура ЗаписатьНаборЗаписей(НаборЗаписей, Замещать, ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи)
	
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	
	КоличествоПопытокЗаписи = ?(ПараметрыЗаписи.Свойство("КоличествоПопытокЗаписи"), ПараметрыЗаписи.КоличествоПопытокЗаписи, 1);
	
	Для НомерПопытки = 1 По КоличествоПопытокЗаписи Цикл
		
		КоличествоДополнительныхПопытокЗаписи = КоличествоДополнительныхПопытокЗаписи + ?(НомерПопытки = 1, 0, 1);
		
		Попытка
			
			Если ПараметрыЗаписи.КоличествоРегистраторовВТранзакцииЗаписи > 0 // в этом случае выполнена проверка изменения всех документов в транзакции записи 
			 ИЛИ НЕ РегистраторИзмененПриРасчете(Регистратор, НаборЗаписей, ОписаниеОшибокЗаписи, ПараметрыЗаписи) Тогда
				ДатыЗапретаИзмененияУТ.ОтключитьПроверкуДатыЗапретаИзменения(НаборЗаписей);
				НаборЗаписей.Записать(Замещать);
			КонецЕсли;
			
			Прервать; // больше выполнять запись не требуется
			
		Исключение
			
			Если НомерПопытки <> КоличествоПопытокЗаписи Тогда
				Продолжить; // ошибка будет зарегистрирована на последней неудачной попытке
			КонецЕсли;
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка записи движений документа ""%1"" по регистру ""%2"":
					|%3';
					|en = 'An error occurred while writing the ""%1"" document register records by the ""%2"" register:
					|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(Регистратор),
				НаборЗаписей.Метаданные().Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗарегистрироватьОшибкуЗаписиДвижений(
				Регистратор,
				ПараметрыЗаписи,
				НСтр("ru = 'При записи движений диагностированы ошибки';
					|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола,
				ОписаниеОшибокЗаписи);
			
		КонецПопытки;
	
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

// Проверяет, что во время расчета документ не был изменен/распроведен.
//
Функция РегистраторИзмененПриРасчете(Регистратор, НаборЗаписей, ОписаниеОшибокЗаписи, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Т
	|ГДЕ
	|	Т.Документ = &Регистратор
	|	И Т.НомерЗадания > &НомерЗадания";
	
	Запрос.УстановитьПараметр("Регистратор",   Регистратор);
	Запрос.УстановитьПараметр("НомерЗадания",  ПараметрыЗаписи.НомерЗаданияДоРасчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НаборЗаписей.Количество() > 0
	 И ПараметрыЗаписи.Свойство("РегистраторыСБольшимиНаборами")
	 И ПараметрыЗаписи.РегистраторыСБольшимиНаборами <> Неопределено
	 И ПараметрыЗаписи.РегистраторыСБольшимиНаборами.Найти(Регистратор) = Неопределено Тогда
	 
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ПараметрыЗаписи.ПериодРасчета));
		Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(ПараметрыЗаписи.ПериодРасчета));
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Месяц
		|ИЗ
		|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Т
		|ГДЕ
		|	Т.Документ = &Регистратор
		|	И Т.НомерЗадания > &НомерЗадания
		|	И Т.Месяц = &НачалоПериода";
		
		ВозможнаЗапись = Запрос.Выполнить().Пустой();
		
		Если ВозможнаЗапись Тогда
			
			// Надо сохранить движения из НаборЗаписей за текущий период и дополнить записями за другие периоды из ИБ
			Записи = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Для Каждого ТекСтр Из Записи Цикл
				
				Если НачалоМесяца(ТекСтр.Период) = НачалоМесяца(ПараметрыЗаписи.ПериодРасчета) Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ТекСтр);
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	ИмяРегистра КАК Т
			|ГДЕ
			|	Т.Регистратор = &Регистратор
			|	И НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
			|УПОРЯДОЧИТЬ ПО
			|	Т.Период";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяРегистра", НаборЗаписей.Метаданные().ПолноеИмя());
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время расчета изменены движения документа ""%1"" по регистру накопления ""%2""';
				|en = 'The ""%1"" document register records by the ""%2"" accumulation register were changed during calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(Регистратор),
			НаборЗаписей.Метаданные().Имя);
			
		ЗарегистрироватьОшибкуЗаписиДвижений(
			Регистратор,
			ПараметрыЗаписи,
			НСтр("ru = 'Во время расчета были внесены изменения в рассчитываемый документ';
				|en = 'Changes were made to the calculated document during calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстДляПротокола,
			ОписаниеОшибокЗаписи,
			Выборка.Организация);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что во время расчета документы не был изменены/распроведены.
//
Функция РегистраторыИзмененныеПриРасчете(Регистраторы, МетаРегистр, ОписаниеОшибокЗаписи, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистраторы", Регистраторы);
	Запрос.УстановитьПараметр("НомерЗадания", ПараметрыЗаписи.НомерЗаданияДоРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТОтбор
	|ИЗ
	|	&Регистраторы КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация,
	|	Т.Документ
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтбор КАК Отбор
	|		ПО Т.Документ = Отбор.Регистратор
	|ГДЕ
	|	Т.НомерЗадания > &НомерЗадания";
	
	ИзмененныеРегистраторы = Запрос.Выполнить().Выгрузить();
	Результат = Новый Соответствие;
	
	Для Каждого ТекСтр Из ИзмененныеРегистраторы Цикл
		
		Результат.Вставить(ТекСтр.Регистратор, Истина);
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Во время расчета изменены движения документа ""%1"" по регистру накопления ""%2""';
				|en = 'The ""%1"" document register records by the ""%2"" accumulation register were changed during calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СокрЛП(ТекСтр.Регистратор),
			МетаРегистр.Имя);
			
		ЗарегистрироватьОшибкуЗаписиДвижений(
			ТекСтр.Регистратор,
			ПараметрыЗаписи,
			НСтр("ru = 'Во время расчета были внесены изменения в рассчитываемый документ';
				|en = 'Changes were made to the calculated document during calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстДляПротокола,
			ОписаниеОшибокЗаписи,
			ТекСтр.Организация);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Регистрирует ошибку, возникшую при записи движений..
//
Процедура ЗарегистрироватьОшибкуЗаписиДвижений(Регистратор, ПараметрыЗаписи, ТекстПроблемы, Уточнение, ОписаниеОшибокЗаписи, Организация = Неопределено)
	
	Если ПараметрыЗаписи.Свойство("КоличествоРегистрируемыхОднотипныхОшибок") Тогда
		КоличествоРегистрируемыхОднотипныхОшибок = ПараметрыЗаписи.КоличествоРегистрируемыхОднотипныхОшибок;
	Иначе
		КоличествоРегистрируемыхОднотипныхОшибок = ЗакрытиеМесяцаСервер.КоличествоРегистрируемыхОднотипныхОшибок();
	КонецЕсли;
	
	Если СтрЧислоСтрок(ОписаниеОшибокЗаписи) < КоличествоРегистрируемыхОднотипныхОшибок Тогда
		ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + ?(ПустаяСтрока(ОписаниеОшибокЗаписи), "
			|", "") + РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_МаркированныйСписок() + Уточнение + "
			|";
	Иначе
		// Получается слишком большое сообщение об ошибке.
		// Скорее всего записи в нем будут однотипные - незачем выводить их все.
		Если СтрНайти(ОписаниеОшибокЗаписи, "...") = 0 Тогда
			ОписаниеОшибокЗаписи = ОписаниеОшибокЗаписи + "
				|" + РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_МаркированныйСписок() + " ...";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Организация");
		ПараметрыРасчета   = ИнициализироватьОсновныеПараметрыРасчета(ПараметрыЗаписи.ПериодРасчета, ПараметрыЗаписи.ПериодРасчета, РеквизитыДокумента.Организация);
	Иначе
		ПараметрыРасчета   = ИнициализироватьОсновныеПараметрыРасчета(ПараметрыЗаписи.ПериодРасчета, ПараметрыЗаписи.ПериодРасчета, Организация);
	КонецЕсли;
	
	ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРасчета,
		,
		ТекстПроблемы,
		Уточнение,
		Регистратор);
	
КонецПроцедуры

// Проверяет необходимость записи сформированных движений регистра в зависимости от выполняемого варианта расчета.
//
Функция НужноЗаписатьРегистр(ПараметрыРасчета, ОписаниеРегистра)
	
	Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости И НЕ ОписаниеРегистра.ЕстьРасчетПартий
	 И НЕ РасчетСебестоимостиЛокализация.ЭтоЛокализуемыйРегистрСведений(ОписаниеРегистра.ИмяРегистра)
	 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
		// В обслуживаемых регистрах могут быть регистры, по которым не формируются расчетные движения,
		// но с этими регистрами могут выполняться какие-то сервисные действия для смежных механизмов.
		// Пример такого регистра - НДСПредъявленный, по которому выполняется заполнение ресурса НДСУпр.
		// Также для регистров сведений детализации себестоимости - они записываются отдельно.
		Возврат Ложь;
	ИначеЕсли НЕ ПараметрыРасчета.ЗапущенРасчетПартий И ПараметрыРасчета.ПредварительныйРасчет
	 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
		// При предварительном расчете себестоимости пересчитывается только стоимость товаров.
		// Движения по всем остальным регистрам остаются без изменений.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Записывает регистры сведений детализации партий НДС.
//
Функция ЗаписатьНезависимыйРегистрСведений(ПараметрыРасчета, ОписаниеРегистра, ИменаТаблицДляЗаписи, ЗаписьКорректировочныхДвижений)
	
	ИмяПоляРазделителя = "ДокументПоступления";
	
	ДанныеДляПротокола = Новый Структура;
	ДанныеДляПротокола.Вставить("КоличествоЗаписей",   0);
	ДанныеДляПротокола.Вставить("КоличествоНаборов",   0);
	ДанныеДляПротокола.Вставить("ДатаНачалаЗаписи",    ТекущаяДатаСеанса());
	
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаТаблицДляЗаписи);
	
	Если МассивИмен.Количество() = 0 Тогда
		
		// Нужна только очистка регистра от старых записей
		ИмяТаблицыНовыхДвижений = "";
		
	ИначеЕсли МассивИмен.Количество() = 1 Тогда
		
		ИмяТаблицыНовыхДвижений = ИменаТаблицДляЗаписи;
		
	Иначе
		
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Начало формирования таблицы';
				|en = 'Начало формирования таблицы'") + "ВТНовыеДвиженияПоРегистру" + ОписаниеРегистра.ИмяРегистра);
		
		// Объединим все новые корректировочные движения и "прочие" движения документа расчета себестоимости.
		ИмяТаблицыНовыхДвижений = "ВТНовыеДвиженияПоРегистру" + ОписаниеРегистра.ИмяРегистра;
		
		ОбъединитьВременныеТаблицы(
			ПараметрыРасчета,
			ИменаТаблицДляЗаписи,
			ИмяТаблицыНовыхДвижений,
			ОписаниеРегистра.ПоляОсновнойТаблицыРегистра,
			ОписаниеРегистра.РесурсыРегистра,
			"Организация," + ИмяПоляРазделителя,
			Истина);
		
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
		ПараметрыРасчета,
		НСтр("ru = 'Начало формирования таблицы';
			|en = 'Начало формирования таблицы'") + " ВТИзмененныеНаборыЗаписей");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	ШаблонВыборкиНовыхДвижений = "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|" + "
	|	 ВЫБРАТЬ // новые движения, с плюсом
	|		ИСТИНА КАК ЕстьВНовыхДвижениях,
	|		ВЫРАЗИТЬ(1 КАК ЧИСЛО (15,0)) КАК КоличествоЗаписей,
	|		&ПоляРегистраСПлюсом
	|	ИЗ
	|		ТаблицаНовыхДвижений КАК Т
	|	ГДЕ
	|		ИСТИНА
	|		И &ОтборПоТипуЗаписиКорректировки
	|";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ТекстОбязательныеПоля,
	|	СУММА(Т.КоличествоЗаписей) КАК КоличествоЗаписей,
	|	МАКСИМУМ(Т.ЕстьВНовыхДвижениях) КАК ЕстьВНовыхДвижениях
	|ПОМЕСТИТЬ ВТИзмененныеНаборыЗаписей
	|ИЗ
	|(ВЫБРАТЬ
	|	&ТекстОбязательныеПоля,
	|	СУММА(Т.КоличествоЗаписей) КАК КоличествоЗаписей,
	|	&ТекстСуммаРесурсов,
	|	МАКСИМУМ(Т.ЕстьВНовыхДвижениях) КАК ЕстьВНовыхДвижениях
	|ИЗ
	|	(ВЫБРАТЬ // старые движения, с минусом
	|		ЛОЖЬ КАК ЕстьВНовыхДвижениях,
	|		0 КАК КоличествоЗаписей,
	|		&ПоляРегистраСМинусом
	|	ИЗ
	|		ИмяОсновнойТаблицыРегистра КАК Т
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.Организация В (&МассивОрганизаций)
	|		И &ОтборПоТипуЗаписиКорректировки
	|		И &ШаблонВыборкиНовыхДвижений
	|	) КАК Т
	|
	|ГДЕ &ГруппировкаПолей
	|
	|) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	&ТекстОбязательныеПоля
	|,&ОтборНепустыхРесурсов
	|";
	
	ТекстПоляРегистраСПлюсом   = "";
	ТекстПоляРегистраСМинусом  = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстСуммаРесурсов 		   = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			
			Если ЗаписьКорректировочныхДвижений И НРег(ТекущееПоле) = НРег("Т.КоличествоПартии") Тогда
				Продолжить;
			КонецЕсли;
			
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	  ИЛИ ") + ТекущееПоле + " <> 0";
			
			ТекстСуммаРесурсов = ТекстСуммаРесурсов 
				+ ?(ТекстСуммаРесурсов = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ") КАК " + СтрЗаменить(ТекущееПоле, "Т.", "");
				
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		Если ЗаписьКорректировочныхДвижений Тогда
			
			ТекстПоляРегистраСПлюсом = ТекстПоляРегистраСПлюсом 
				+ ?(ТекстПоляРегистраСПлюсом = "", "", ",
				|		") + ?(ЭтоРесурсРегистра, "Т.КоличествоПартии * ", "")
						   + ?(НРег(ТекущееПоле) = НРег("Т.Период"), "ДОБАВИТЬКДАТЕ(Т.Период, СЕКУНДА, 1)", ТекущееПоле);
			
			ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом 
				+ ?(ТекстПоляРегистраСМинусом = "", "", ",
				|		") + ?(ЭтоРесурсРегистра, "-Т.КоличествоПартии * ", "") + ТекущееПоле;
			
		Иначе
			
			ТекстПоляРегистраСПлюсом = ТекстПоляРегистраСПлюсом 
				+ ?(ТекстПоляРегистраСПлюсом = "", "", ",
				|		") + ТекущееПоле;
			
			ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом 
				+ ?(ТекстПоляРегистраСМинусом = "", "", ",
				|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
			
		КонецЕсли;
		
		ТекстПоляРегистраСПлюсом = ТекстПоляРегистраСПлюсом + " КАК " + СтрЗаменить(ТекущееПоле, "Т.", "");
		ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом + " КАК " + СтрЗаменить(ТекущееПоле, "Т.", "");
		
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	МАКСИМУМ(ВЫБОР КОГДА ") + ТекстОтборНепустыхРесурсов + "
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ) = ИСТИНА";
	
	ТекстОбязательныеПоля =
		"	Т.Период,
		|	Т.Организация,
		|	Т.ИмяПоляРазделителя,
		|	Т.ТипЗаписи";
	ТекстОбязательныеПоля = СтрЗаменить(ТекстОбязательныеПоля, "ИмяПоляРазделителя", ИмяПоляРазделителя);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыНовыхДвижений) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ШаблонВыборкиНовыхДвижений", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ШаблонВыборкиНовыхДвижений", ШаблонВыборкиНовыхДвижений);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
	КонецЕсли;
	
	Если НЕ ОписаниеРегистра.ПериодическийРегистр Тогда
		ТекстГруппировкаПолей = СтрЗаменить(ТекстГруппировкаПолей, "Т.ПериодРегистрации",
			"Т.Период");
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстОбязательныеПоля", ТекстОбязательныеПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистраСМинусом",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоляРегистраСМинусом, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистраСПлюсом",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПоляРегистраСПлюсом, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстСуммаРесурсов",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСуммаРесурсов, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &ГруппировкаПолей",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстГруппировкаПолей, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ОтборНепустыхРесурсов",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОтборНепустыхРесурсов, "Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипуЗаписиКорректировки",
		"И " + ?(ЗаписьКорректировочныхДвижений, "", "НЕ ") + "Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)");
	
	Если НЕ ОписаниеРегистра.ПериодическийРегистр Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КАК ПериодРегистрации",
			"КАК Период");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Период МЕЖДУ",
			"Т.ПериодРегистрации МЕЖДУ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.КоличествоПартии * ",
			"");
	КонецЕсли;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина);
	
	ПараметрыНумерации = СформироватьПараметрыНумерацииСтрокВременнойТаблицы(
		"",
		"",
		"Период, Организация, " + ИмяПоляРазделителя + ", ТипЗаписи",
		"НомерНабора");
	
	ЗаполнитьНомераСтрокВременнойТаблицы(
		ПараметрыРасчета,
		ПараметрыНумерации,
		"ВТИзмененныеНаборыЗаписей");
	
	ОписаниеРегистра.ЕстьИзмененныеДанные = (РазмерВременнойТаблицы(ПараметрыРасчета, "ВТИзмененныеНаборыЗаписей") > 0);
	
	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ОписаниеРегистра,
		ПараметрыРасчета.НомерЗаданияДоРасчета);
	
	ПараметрыЗаписи.ИмяПоляРазделителя = ИмяПоляРазделителя;
	
	ОписаниеОшибокЗаписи = "";
	КоличествоДополнительныхПопытокЗаписи = 0;
	
	РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
		ПараметрыРасчета,
		НСтр("ru = 'Начало очистки устаревших наборов';
			|en = 'Начало очистки устаревших наборов'"));
	
	// Очистим устаревшие наборы записей.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Период,
	|	Т.Организация,
	|	Т.ИмяПоляРазделителя,
	|	Т.ТипЗаписи
	|ИЗ
	|	ВТИзмененныеНаборыЗаписей КАК Т
	|ГДЕ
	|	НЕ Т.ЕстьВНовыхДвижениях
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Период,
	|	Т.Организация,
	|	Т.ИмяПоляРазделителя,
	|	Т.ТипЗаписи";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРазделителя", ИмяПоляРазделителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений[ОписаниеРегистра.ИмяРегистра].СоздатьНаборЗаписей();
	
	ИмяПоляПериод = ?(ОписаниеРегистра.ПериодическийРегистр, "Период", "ПериодРегистрации");
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор[ИмяПоляПериод].Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор[ИмяПоляРазделителя].Установить(Выборка[ИмяПоляРазделителя]);
		НаборЗаписей.Отбор.ТипЗаписи.Установить(Выборка.ТипЗаписи);
		
		ДанныеДляПротокола.КоличествоНаборов = ДанныеДляПротокола.КоличествоНаборов + 1;
		
		ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, Истина, ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыНовыхДвижений) Тогда
		Возврат ДанныеДляПротокола;
	КонецЕсли;
	
	КоличествоФЗ = МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета);
	
	Если НЕ ЗаписьКорректировочныхДвижений И КоличествоФЗ > 1 Тогда
		
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Начало формирования таблицы';
				|en = 'Начало формирования таблицы'") + " ВТОтборыРегистраСведений");
	
		// Запишем новые и измененные наборы записей в фоне.
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
			ПараметрыРасчета,
			"ВТОтборыРегистраСведений",
			НСтр("ru = '(разделение на порции для фоновых заданий)';
				|en = '(division into portions for background jobs)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Период,
		|	Т.Организация,
		|	Т.ИмяПоляРазделителя,
		|	Т.ТипЗаписи,
		|	Т.НомерНабора,
		|	Т.КоличествоЗаписей
		|ПОМЕСТИТЬ ВТОтборыРегистраСведений
		|ИЗ
		|	ВТИзмененныеНаборыЗаписей КАК Т
		|ГДЕ
		|	Т.ЕстьВНовыхДвижениях";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРазделителя", ИмяПоляРазделителя);
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Начало разделения таблицы на порции';
				|en = 'Начало разделения таблицы на порции'"));
	
		ПараметрыРазделения = СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(
			ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ,
			"КоличествоЗаписей",
			"Период, Организация," + ИмяПоляРазделителя + ", ТипЗаписи",
			"НомерПорции");
		
		МаксНомерПорции = РазделитьВременнуюТаблицуНаПорции(
			ПараметрыРасчета,
			ПараметрыРазделения,
			"ВТОтборыРегистраСведений",
			ОписаниеРегистра.ИмяРегистра);
			
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Начало формирования таблицы';
				|en = 'Начало формирования таблицы'") + " ВТПодготовленныеДанныеДляЗаписи");
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Отбор.НомерПорции КАК НомерПорции,
		|	Отбор.НомерНабора,
		|	&ПоляРегистра
		|ПОМЕСТИТЬ ВТПодготовленныеДанныеДляЗаписи
		|ИЗ
		|	ТаблицаНовыхДвижений КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборыРегистраСведений КАК Отбор
		|		ПО Т.Период = Отбор.Период
		|		И Т.Организация = Отбор.Организация
		|		И Т.ИмяПоляРазделителя = Отбор.ИмяПоляРазделителя
		|		И Т.ТипЗаписи = Отбор.ТипЗаписи
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерПорции
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРазделителя", ИмяПоляРазделителя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
		
		Если НЕ ОписаниеРегистра.ПериодическийРегистр Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Период = Отбор.Период",
				"Т.ПериодРегистрации = Отбор.Период");
		КонецЕсли;
		
		Запрос.Выполнить();
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
		
		Если МаксНомерПорции < 1 Тогда
			
			УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборыРегистраСведений, ВТПодготовленныеДанныеДляЗаписи");
			
			Возврат ДанныеДляПротокола;
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.НомерНабора,
		|	&ПоляРегистра
		|ИЗ
		|	ВТПодготовленныеДанныеДляЗаписи КАК Т
		|ГДЕ
		|	Т.НомерПорции = &НомерПорции
		|УПОРЯДОЧИТЬ ПО
		|	Т.НомерНабора";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
		
		КоличествоПорцийВЗадании = Цел(МаксНомерПорции / КоличествоФЗ);
		Если КоличествоПорцийВЗадании = 0 Тогда
			КоличествоПорцийВЗадании = МаксНомерПорции; // если порций мало, то пишем в одном ФЗ
		КонецЕсли;
		
		ПараметрыЗаписиРегистра = ИнициализироватьПараметрыЗаписиРезультатовРасчета(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ОписаниеРегистра,
			ПараметрыРасчета.НомерЗаданияДоРасчета);
		
		Для НомерПорции = 1 По МаксНомерПорции Цикл
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Подготовка очередной порции движений';
					|en = 'Подготовка очередной порции движений'"));
	
			Запрос.УстановитьПараметр("НомерПорции", НомерПорции);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			КэшироватьПорциюДанныхДляЗаписи(ПараметрыРасчета, ПараметрыЗаписиРегистра, РезультатЗапроса,,, Ложь);
			
		КонецЦикла;
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТОтборыРегистраСведений, ВТПодготовленныеДанныеДляЗаписи");
		
		// Запустим все подготовленные задания записи.
		Если МаксНомерПорции >= 1 Тогда
			
			Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра Тогда
				ПоместитьПорциюДанныхВСтек(ПараметрыРасчета, ПараметрыЗаписиРегистра);
			Иначе
				ЗапуститьЗаданиеЗаписиРегистра(ПараметрыРасчета, ПараметрыЗаписиРегистра);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // однопоточная запись
		
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Начало записи наборов регистра';
				|en = 'Начало записи наборов регистра'"));
	
		// Запишем новые и измененные наборы записей.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Отбор.НомерНабора,
		|	&ПоляРегистра
		|ИЗ
		|	ТаблицаНовыхДвижений КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеНаборыЗаписей КАК Отбор
		|	ПО &УсловиеПериод
		|		И Т.Организация = Отбор.Организация
		|		И Т.ИмяПоляРазделителя = Отбор.ИмяПоляРазделителя
		|		И Т.ТипЗаписи = Отбор.ТипЗаписи
		|ГДЕ
		|	Отбор.ЕстьВНовыхДвижениях
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отбор.НомерНабора";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРазделителя", ИмяПоляРазделителя);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляРегистра",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "Т."));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаНовыхДвижений", ИмяТаблицыНовыхДвижений);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод",
			? (ЗаписьКорректировочныхДвижений,
				"ДОБАВИТЬКДАТЕ(Т.Период, СЕКУНДА, 1) = Отбор.Период",
				"Т.Период = Отбор.Период"));
		
		Если НЕ ОписаниеРегистра.ПериодическийРегистр Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Период =",
				"Т.ПериодРегистрации =");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДОБАВИТЬКДАТЕ(Т.Период, СЕКУНДА, 1) = Отбор.Период",
				"Т.ПериодРегистрации = Отбор.Период");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерНабора = Неопределено;
		ИмяПоляПериод = ?(ОписаниеРегистра.ПериодическийРегистр, "Период", "ПериодРегистрации");
		
		Пока Выборка.Следующий() Цикл
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Начало записи очередного набора';
					|en = 'Начало записи очередного набора'"));
		
			Если ЗаписьКорректировочныхДвижений Тогда
				Если НЕ ОписаниеРегистра.ПериодическийРегистр Тогда
					ПериодЗаписи = Выборка[ИмяПоляПериод];
				Иначе
					ПериодЗаписи = НачалоМесяца(ДобавитьМесяц(Выборка[ИмяПоляПериод], 1));
				КонецЕсли;
			Иначе
				ПериодЗаписи = НачалоМесяца(Выборка[ИмяПоляПериод]);
			КонецЕсли;
			
			Если Выборка.НомерНабора <> НомерНабора Тогда
				
				Если НомерНабора <> Неопределено Тогда
					
					ДанныеДляПротокола.КоличествоЗаписей = ДанныеДляПротокола.КоличествоЗаписей + НаборЗаписей.Количество();
					ДанныеДляПротокола.КоличествоНаборов = ДанныеДляПротокола.КоличествоНаборов + 1;
					
					ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, Истина, ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
					
				КонецЕсли;
				
				НомерНабора = Выборка.НомерНабора;
				
				НаборЗаписей = РегистрыСведений[ОписаниеРегистра.ИмяРегистра].СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор[ИмяПоляПериод].Установить(ПериодЗаписи);
				НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
				НаборЗаписей.Отбор[ИмяПоляРазделителя].Установить(Выборка[ИмяПоляРазделителя]);
				НаборЗаписей.Отбор.ТипЗаписи.Установить(Выборка.ТипЗаписи);
			
			КонецЕсли;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			НоваяЗапись[ИмяПоляПериод] = ПериодЗаписи;
			
		КонецЦикла;
		
		Если НомерНабора <> Неопределено Тогда
			
			ДанныеДляПротокола.КоличествоЗаписей = ДанныеДляПротокола.КоличествоЗаписей + НаборЗаписей.Количество();
			ДанныеДляПротокола.КоличествоНаборов = ДанныеДляПротокола.КоличествоНаборов + 1;
			
			ЗаписатьНаборЗаписейНезависимогоРегистра(НаборЗаписей, Истина, ОписаниеОшибокЗаписи, КоличествоДополнительныхПопытокЗаписи, ПараметрыЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоДополнительныхПопытокЗаписи > 0 Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнено дополнительных попыток записи движений регистра %1: %2';
				|en = 'Performed additional attempts of register records writing %1: %2'"),
			НаборЗаписей.Метаданные().ПолноеИмя(),
			СокрЛП(КоличествоДополнительныхПопытокЗаписи));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Неопределено, НСтр("ru = 'Запись движений';
															|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстДляПротокола);
		
	КонецЕсли;

	Если НЕ ПустаяСтрока(ОписаниеОшибокЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("НеВызыватьИсключениеПриОшибке") И ПараметрыЗаписи.НеВызыватьИсключениеПриОшибке Тогда
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
				СокрЛП(ОписаниеОшибокЗаписи));
		Иначе
			ВызватьИсключение СлужебныйСимвол_ПроблемаУжеЗарегистрирована() + ОписаниеОшибокЗаписи; // все ошибки записи переданной порции движений
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляПротокола;
	
КонецФункции

	
// Формирует временную таблицу ВТКэшСтарыеДокументы - документы, у которых были "старые" расчетные движения.
//
Процедура СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос, ДляОчисткиДвижений = Ложь)
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшСтарыеДокументы",
		НСтр("ru = 'Регистр';
			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
		
	ОтборПоТипамРегистраторов = "";
	
	Если ДляОчисткиДвижений Тогда
		
		Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
			Если НЕ КлючИЗначение.Значение Тогда
				МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
				ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
					+ ?(ОтборПоТипамРегистраторов = "", "", " ИЛИ ")
					+ "(ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ." + МетаДокумент.Имя
					+ ") И НЕ (ВЫРАЗИТЬ(Т.Регистратор КАК Документ." + МетаДокумент.Имя
					+ ").Дата МЕЖДУ &НачалоПериода И &КонецПериода))";
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоТипамРегистраторов) Тогда
		ОтборПоТипамРегистраторов = " И НЕ (" + ОтборПоТипамРегистраторов + ")";
	КонецЕсли;
	
	// Выберем все старые регистраторы данного регистра (кроме док. КорректировкаРегистров)
	// Поле Активность не проверяем.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ПОМЕСТИТЬ ВТКэшСтарыеДокументы
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И &ОтборПоОрганизации
	|	И &ОтборПоСлужебнымРеквизитам
	|	И &ОтборПоТипамРегистраторов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
	
	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшИзмененныеДокументы - документы, у которых изменились расчетные движения.
//
Процедура СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	// Шаблоны для замены в тексте запроса
	ТекстОтборНепустыхРесурсов 		 = "";
	ТекстГруппировкаПолей 	   		 = "";
	ТекстПоляОсновнойТаблицыРегистра = ""; // ресурсы с "минусом"
	ТекстПоляКэшаРегистра 		     = ""; // ресурсы с "плюсом
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	НомерПоляТаблицы = 0;
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		ЭтоРесурсРегистра = (МассивРесурсов.Найти(ТекущееПоле) <> Неопределено);
		
		Если ЭтоРесурсРегистра Тогда
			// Ресурс
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		Иначе
			// Измерение или реквизит
			ТекстГруппировкаПолей = ТекстГруппировкаПолей 
				+ ?(ТекстГруппировкаПолей = "", "", ",
				|	") + ТекущееПоле;
		КонецЕсли;
		
		ТекстПоляОсновнойТаблицыРегистра = ТекстПоляОсновнойТаблицыРегистра 
			+ ?(ТекстПоляОсновнойТаблицыРегистра = "", "", ",
			|		") + ?(ЭтоРесурсРегистра, "-", "") + ТекущееПоле;
	
		ТекстТекущееПоле = СтрЗаменить(ТекущееПоле, "Т.", "");
		ТаблицаРегистра = ОписаниеРегистра.Таблица; // ТаблицаЗначений
		КолонкаТаблицы = ТаблицаРегистра.Колонки.Найти(ТекстТекущееПоле);
		ТипКолонки 	   = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(КолонкаТаблицы.ТипЗначения);
		ТекстПустоеЗначение = РасчетСебестоимостиУниверсальныеАлгоритмы.ПредставлениеПустогоЗначенияТипаДляЗапроса(ТипКолонки);
		
		НомерПоляТаблицы = НомерПоляТаблицы + 1;
		НомерПоляТаблицыСтрокой = Формат(НомерПоляТаблицы, "ЧН=0; ЧГ=");
		
		МассивПодходящихТипов = Новый Массив;
		МассивПустыхЗначений = Новый Массив;
		
		ЧисловоеПоле = НЕ ЭтоРесурсРегистра И ТипКолонки.Типы().Количество() = 1 И ТипКолонки.Типы()[0] = Тип("Число")
			И ТипКолонки.КвалификаторыЧисла.Разрядность > 0;
		
		Для Каждого ТекущийТип Из ТипКолонки.Типы() Цикл
			
			МассивПодходящихТипов.Добавить(ТекущийТип);
			
			ОписаниеТекущегоТипа = Новый ОписаниеТипов(ОбщегоНазначенияУТКлиентСервер.Массив(ТекущийТип, Ложь));
			
			Если ТекущийТип <> Тип("Булево") И ТекущийТип <> Тип("Дата") И ТекущийТип <> Тип("Строка")
			 И ТекущийТип <> Тип("Число") И ТекущийТип <> Тип("УникальныйИдентификатор") Тогда
				МассивПустыхЗначений.Добавить(ОписаниеТекущегоТипа.ПривестиЗначение(Неопределено));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипКолонки.СодержитТип(Тип("ВидДвиженияНакопления")) Тогда
			// В запросе для полей этого типа метод ТИПЗНАЧЕНИЯ() падает с ошибкой
			ТекстТекущееПоле =
				"	ВЫБОР КОГДА Т." + ТекстТекущееПоле + " <> ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|	  И Т." + ТекстТекущееПоле + " <> ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
				|		ТОГДА НЕОПРЕДЕЛЕНО
				|		ИНАЧЕ Т." + ТекстТекущееПоле + "
				|	КОНЕЦ КАК " + ТекстТекущееПоле;
		ИначеЕсли ЧисловоеПоле Тогда
			ОграничениеРазрядности = ТипКолонки.КвалификаторыЧисла.Разрядность - ТипКолонки.КвалификаторыЧисла.РазрядностьДробнойЧасти - 1;
			МаксимальноеЗначение = Формат(Pow(10, ОграничениеРазрядности) - 1, "ЧН=0; ЧГ=");
			ТекстТекущееПоле =
				"	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекстТекущееПоле + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
				|	  ИЛИ Т." + ТекстТекущееПоле + " В (&МассивПустыхЗначений" + НомерПоляТаблицыСтрокой + ")
				|		ТОГДА " + ТекстПустоеЗначение + "
				|		КОГДА Т." + ТекстТекущееПоле + " > " + МаксимальноеЗначение + "
				|			ТОГДА 0
				|		КОГДА Т." + ТекстТекущееПоле + " < -" + МаксимальноеЗначение + "
				|			ТОГДА 0
				|		ИНАЧЕ ВЫРАЗИТЬ(Т." + ТекстТекущееПоле + " КАК ЧИСЛО("
					+ СокрЛП(ТипКолонки.КвалификаторыЧисла.Разрядность) + "," + СокрЛП(ТипКолонки.КвалификаторыЧисла.РазрядностьДробнойЧасти) + "))
				|	КОНЕЦ КАК " + ТекстТекущееПоле;
		ИначеЕсли ОписаниеРегистра.НетипизируемыеПоля.Свойство(ТекстТекущееПоле) Тогда
			ТекстТекущееПоле =
				"	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекстТекущееПоле + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
				|		ТОГДА " + ТекстПустоеЗначение + "
				|		ИНАЧЕ Т." + ТекстТекущееПоле + "
				|	КОНЕЦ КАК " + ТекстТекущееПоле;
		Иначе
			ТекстТекущееПоле =
				"	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекстТекущееПоле + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
				|	  ИЛИ Т." + ТекстТекущееПоле + " В (&МассивПустыхЗначений" + НомерПоляТаблицыСтрокой + ")
				|		ТОГДА " + ТекстПустоеЗначение + "
				|		ИНАЧЕ Т." + ТекстТекущееПоле + "
				|	КОНЕЦ КАК " + ТекстТекущееПоле;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивПодходящихТипов" + НомерПоляТаблицыСтрокой, МассивПодходящихТипов);
		Запрос.УстановитьПараметр("МассивПустыхЗначений" + НомерПоляТаблицыСтрокой,  МассивПустыхЗначений);
		
		ТекстПоляКэшаРегистра = ТекстПоляКэшаРегистра + ?(ТекстПоляКэшаРегистра = "", "", ",
			|		") + ТекстТекущееПоле;
		
	КонецЦикла;
	
	// Заменим значение поля ВидДвижения основной таблицы регистра на булево значение; ресурсы с "минусом".
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоляОсновнойТаблицыРегистра);
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
		
	// Учтем особенности документа РаспределениеРасходовБудущихПериодов:
	// для документа с датой, находящейся в периоде расчета, будут сформированы движения в разных периодах.
	// Если дата документа вне периода расчета, то в ВТКэш из ИБ будут добавлены только движения из периода расчета.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыРБП
	|ИЗ
	|	ВТКэшСтарыеДокументы КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспределениеРасходовБудущихПериодов КАК Отбор
	|		ПО Т.Регистратор = Отбор.Ссылка
	|ГДЕ
	|	Отбор.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, НСтр("ru = 'Регистр';
																			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
	
	ЕстьДокументыРБП = РазмерВременнойТаблицы(ПараметрыРасчета, "ВТДокументыРБП") > 0;
	
	// Выбор регистраторов, у которых есть хоть какие-то отличия в старых и новых движениях
	// Будут перезаписаны движения только этих регистраторов

	//++ НЕ УТ

	// и только эти регистраторы будут зарегистрированы для формирования проводок

	//-- НЕ УТ
	Запрос.Текст = "
	|ВЫБРАТЬ // новые расчетные движения, с плюсом
	|	&ПоляКэшаРегистра
	|ПОМЕСТИТЬ ВТИзмененныеДвиженияПредварительная
	|ИЗ
	|	ИмяТаблицыКэшаРегистра КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // старые расчетные движения, с минусом
	|	&ПоляОсновнойТаблицыРегистра
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшСтарыеДокументы КАК СтарыеДокументы
	|		ПО Т.Регистратор = СтарыеДокументы.Регистратор
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ОтборПоОрганизации
	|	И &ОтборПоСлужебнымРеквизитам
	|	И &ДополнениеРБП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//++ НЕ УТ
	|	&ПолеОрганизации,
	|	Т.Период КАК Период,
	//-- НЕ УТ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТИзмененныеДвижения
	|ИЗ
	|	ВТИзмененныеДвиженияПредварительная КАК Т
	|ГДЕ &ГруппировкаПолей
	|
	|И &ОтборНепустыхРесурсов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|";
	//++ НЕ УТ
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ТекстПоляОрганизации = "Т.Организация КАК Организация";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда 
		ТекстПоляОрганизации = "Т.АналитикаУчетаПоПартнерам.Организация КАК Организация";	
	Иначе		
		ТекстПоляОрганизации = "ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолеОрганизации", ТекстПоляОрганизации);
	
	ТекстВТКэшИзмененныеДокументыКОтражению = "
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация 	КАК Организация,
	|	Т.Период 		КАК Период,
	|	Т.Регистратор 	КАК Регистратор
	|ПОМЕСТИТЬ ВТКэшИзмененныеДокументыКОтражению
	|ИЗ
	|	ВТИзмененныеДвижения КАК Т
	|";
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(Запрос.Текст);
	МассивТекстов.Добавить(ТекстВТКэшИзмененныеДокументыКОтражению);
	Запрос.Текст = СтрСоединить(МассивТекстов);
	//-- НЕ УТ
	
	Если ЕстьДокументыРБП Тогда
		
		ШаблонРБП = "
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|" + "
		|	ВЫБРАТЬ // старые расчетные движения, с минусом
		|		&ПоляОсновнойТаблицыРегистра
		|	ИЗ
		|		ИмяОсновнойТаблицыРегистра КАК Т
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыРБП КАК СтарыеДокументы
		|			ПО Т.Регистратор = СтарыеДокументы.Регистратор
		|	ГДЕ
		|		НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|		И &ОтборПоОрганизации
		|		И &ОтборПоСлужебнымРеквизитам
		|";
		
	Иначе
		ШаблонРБП = "";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДополнениеРБП", ШаблонРБП);
	
	// Заменим шаблоны в тексте запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляКэшаРегистра",			 ТекстПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &ГруппировкаПолей",		 ТекстГруппировкаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборНепустыхРесурсов",	 ТекстОтборНепустыхРесурсов);
	
	// Отбор - расчетные движения
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		// Все движения являются расчетными
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
	Иначе
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Ложь, Истина, Истина, Истина);
	КонецЕсли;
	
	Если ОписаниеРегистра.ЕстьОрганизация И НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "(&МассивОрганизаций)", "(&МассивОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	КонецЕсли;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, НСтр("ru = 'Регистр';
																			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		"ВТКэшИзмененныеДокументы",
		НСтр("ru = 'Регистр';
			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
	
	СформироватьТаблицуМоментовВремени(
		ПараметрыРасчета,
		"ВТИзмененныеДвижения",
		,
		"ВТКэшИзмененныеДокументы");
		
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДокументыРБП, ВТИзмененныеДвиженияПредварительная, ВТИзмененныеДвижения");
	
	//++ НЕ УТ
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы.Имя Тогда
		СформироватьЗаданияКРасчетуСтоимостиВНА(ПараметрыРасчета);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшДвиженияДругихПериодовИлиОрганизаций - движения измененных документов по
// периодам или организациям, не входящим в параметры расчета.
//
Процедура СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	ОтборПоТипамРегистраторов = "";
	СохранятьТолькоПервичныеДвижения = "";
	
	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		
		МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
		
		ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
			+ ?(ОтборПоТипамРегистраторов = "", "", ", ") + "ТИП(Документ."
			+ МетаДокумент.Имя + ")";
		
		Если НЕ КлючИЗначение.Значение Тогда
			СохранятьТолькоПервичныеДвижения = СохранятьТолькоПервичныеДвижения
				+ ?(СохранятьТолькоПервичныеДвижения = "", "", ", ") + "ТИП(Документ."
				+ МетаДокумент.Имя + ")";
		КонецЕсли;
		
	КонецЦикла;
	
	МогутБытьДвиженияПоДругимПериодамИлиОрганизациям = ЗначениеЗаполнено(ОтборПоТипамРегистраторов);
	
	Если МогутБытьДвиженияПоДругимПериодамИлиОрганизациям Тогда
		
		// По этому регистру есть регистраторы с движениями по другим периодам и/или организациям.
		// Сохраним такие движения во временной таблице ВТКэшДвиженияДругихПериодовИлиОрганизаций.
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "ИЛИ (НЕ (Т.Организация В (&МассивОрганизаций))";
			Если НЕ ОписаниеРегистра.ОрганизацияОбязательна Тогда
				ОтборПоОрганизации = ОтборПоОрганизации + " И Т.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
			КонецЕсли;
			ОтборПоОрганизации = ОтборПоОрганизации + ")";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "ИЛИ НЕ (Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор))";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СохранятьТолькоПервичныеДвижения) Тогда
			ОтборПоТипуДвижений = "И НЕ (ТИПЗНАЧЕНИЯ(Т.Регистратор) В (" + СохранятьТолькоПервичныеДвижения + ") И (ИзмененныеДокументы.Дата МЕЖДУ &НачалоПериода И &КонецПериода) И &ОтборПоСлужебнымРеквизитам)";
		Иначе
			ОтборПоТипуДвижений = "";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Регистратор,
		|	Т.Дата
		|ПОМЕСТИТЬ ВТОтборПоРегистраторам
		|ИЗ
		|	ВТКэшИзмененныеДокументы КАК Т
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Т.Регистратор) В (&ОтборПоТипамРегистраторов)
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	&ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	ИмяОсновнойТаблицыРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоРегистраторам КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	(НЕ (Т.Период МЕЖДУ &НачалоПериода И &КонецПериода)
		|	И &ОтборПоОрганизации)
		|	И &ОтборПоТипуДвижений
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВТОтборПоРегистраторам
		|";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоОрганизации",      ОтборПоОрганизации);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоТипуДвижений",     ОтборПоТипуДвижений);
		
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос,, Ложь, Истина, Истина); // шаблоны имени регистра
		
	Иначе
		
		// По этому регистру не может быть регистраторов с движениями по другим периодам и/или организациям.
		// Создадим пустую временную таблицу с полями, идентичными полям регистра.
		
		Запрос.УстановитьПараметр("ПустаяТаблицаРегистра", ОписаниеРегистра.МенеджерРегистра.СоздатьНаборЗаписей().Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПоляОсновнойТаблицыРегистра
		|ПОМЕСТИТЬ ВТКэшДвиженияДругихПериодовИлиОрганизаций
		|ИЗ
		|	&ПустаяТаблицаРегистра КАК Т";
		
	КонецЕсли;
	
	// Заменим шаблоны в тексте запроса
	ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
		|		Т."));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, НСтр("ru = 'Регистр';
																			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
	
КонецПроцедуры

// Формирует временную таблицу ВТКэшОчищаемыеДокументы - документы, у которых не осталось расчетных движений.
//
Процедура СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос)
	
	// Выберем регистраторы, у которых (по И)
	// - есть только старые движения расчета себестоимости (нет "первичных движений")
	// - нет новых движений расчета себестоимости
	// - нет движений по другим периодам и/или организациям
	// - они не являются исключениями (у которых есть расчетные движения не в периоде документа)
	// Для таких документов надо просто очистить их движения - записать пустой набор.
	
	ОтборПоТипамРегистраторов = "";
	Для Каждого КлючИЗначение Из ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях Цикл
		Если НЕ КлючИЗначение.Значение Тогда
			МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент
			ОтборПоТипамРегистраторов = ОтборПоТипамРегистраторов
				+ ?(ОтборПоТипамРегистраторов = "", "", " ИЛИ ")
				+ "(ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ." + МетаДокумент.Имя
				+ ") И НЕ (ВЫРАЗИТЬ(Т.Регистратор КАК Документ." + МетаДокумент.Имя
				+ ").Дата МЕЖДУ &НачалоПериода И &КонецПериода))";
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы.Имя Тогда
		НеВременныеЗаписиБаланса =
			"Т.ВидИсточника <> ЗНАЧЕНИЕ(Перечисление.ВидыИсточниковДвижений.РасчетБаланса)";
	Иначе
		НеВременныеЗаписиБаланса = "ИСТИНА";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоТипамРегистраторов) Тогда
		ОтборПоТипамРегистраторов = "ЛОЖЬ";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыСНовымиДвижениями
	|ИЗ
	|	ИмяТаблицыКэшаРегистра КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор
	|ИЗ
	|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыБезНовыхДвижений
	|ИЗ
	|	ВТКэшИзмененныеДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСНовымиДвижениями КАК ДокументыСНовымиДвижениями
	|		ПО Т.Регистратор = ДокументыСНовымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСНовымиДвижениями.Регистратор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
	|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &НеВременныеЗаписиБаланса
	|	И &ОтборПоСлужебнымРеквизитам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыБезНовыхДвижений КАК ДокументыБезНовыхДвижений
	|		ПО Т.Регистратор = ДокументыБезНовыхДвижений.Регистратор
	|
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И (&ОтборПоТипамРегистраторов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТКэшОчищаемыеДокументы
	|ИЗ
	|	ВТДокументыБезНовыхДвижений КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями КАК ДокументыСПервичнымиИЛИСохраняемымиДвижениями
	|		ПО Т.Регистратор = ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор
	|ГДЕ
	|	ДокументыСПервичнымиИЛИСохраняемымиДвижениями.Регистратор ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСНовымиДвижениями
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыБезНовыхДвижений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВТДокументыСПервичнымиИЛИСохраняемымиДвижениями";
	
	// Отбор - первичные движения
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, , Истина, Ложь, Ложь, );
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НеВременныеЗаписиБаланса", НеВременныеЗаписиБаланса);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоТипамРегистраторов", ОтборПоТипамРегистраторов);
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, НСтр("ru = 'Регистр';
																			|en = 'Register'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ОписаниеРегистра.ИмяРегистра);
	
КонецПроцедуры


// Отладочная процедура - очистка всех движений, сформированных предыдущим расчетом.
// Может выполняться достаточно долго, поэтому рекомендуется только для целей отладки.
//
Процедура ОчиститьСтарыеДвиженияРасчетаСебестоимости(ПараметрыРасчета)
	
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ОчиститьСтарыеДвиженияРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
		ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
		ПараметрыРасчета.НомерЗаданияДоРасчета);
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ ОписаниеРегистра.ПодчиненРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОписаниеРегистра.ЕстьРасчетСебестоимости И НЕ ОписаниеРегистра.ЕстьРасчетПартий
		 И НЕ РасчетСебестоимостиЛокализация.ЭтоЛокализуемыйРегистрСведений(ОписаниеРегистра.ИмяРегистра)
		 И ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыСведений.СтоимостьТоваров.Имя Тогда
			Продолжить; // см. комментарий в НужноЗаписатьРегистр()
		КонецЕсли;
		
		// Сформируем ВТКэшСтарыеДокументы
		СформироватьТаблицуСтарыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина);
		
		// Сформируем ВТКэшИзмененныеДокументы
		СформироватьТаблицуИзмененныхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		//++ НЕ УТ
		УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТКэшИзмененныеДокументыКОтражению");
		//-- НЕ УТ
		
		// Сформируем ВТКэшДвиженияДругихПериодовИлиОрганизаций
		СформироватьТаблицуДвиженийДругихПериодовИлиОрганизаций(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Сформируем ВТКэшОчищаемыеДокументы
		СформироватьТаблицуОчищаемыхДокументов(ПараметрыРасчета, ОписаниеРегистра, Запрос);
		
		// Подготовим данные для очистки движений документов, не имеющих первичных движений
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	ВТКэшОчищаемыеДокументы КАК Т";
		
		ЗаписатьДвиженияПоРегистру(
			Запрос,
			ОписаниеРегистра.МенеджерРегистра,
			ПараметрыЗаписи);
		
		// Шаблоны для замены в тексте запроса
		ТекстПоляОсновнойТаблицыРегистра = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "
			|		Т."));
		ТекстПоляКэшаРегистра 		     = СокрЛП(СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистра, "%1", "
			|		Т."));
		ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоляКэшаРегистра);
		
		ТекстПоляСортировки = СокрЛП(СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "
			|		Т."));
		ТекстПоляСортировки = "Т.Регистратор, Т.Период"
			+ ?(ТекстПоляСортировки = "", "", ", ") + ТекстПоляСортировки
			+ ?(ОписаниеРегистра.ЕстьРасчетСебестоимости, ", Т.РасчетСебестоимости", "")
			+ ?(ОписаниеРегистра.ЕстьРасчетПартий, 		  ", Т.РасчетПартий", "");
		
		// Подготовка движений для тех регистраторов, по которым есть различия в старых/новых движениях - объединяем
		//	- "первичные" движения документа в периоде расчета
		//	- непересчитываемые движения документа.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	ИмяОсновнойТаблицыРегистра КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКэшИзмененныеДокументы КАК ИзмененныеДокументы
		|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
		|ГДЕ
		|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И &ОтборПоОрганизации
		|	И &ОтборПоСлужебнымРеквизитам
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ПоляОсновнойТаблицыРегистра
		|ИЗ
		|	ВТКэшДвиженияДругихПериодовИлиОрганизаций КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	&Порядок";
		
		// Заменим шаблоны в тексте запроса
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ТекстПоляОсновнойТаблицыРегистра);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Порядок", 					 ТекстПоляСортировки);
		
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
		
		ЗаписатьДвиженияПоРегистру(
			Запрос,
			ОписаниеРегистра.МенеджерРегистра,
			ПараметрыЗаписи);
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета,
			"ВТКэшСтарыеДокументы, ВТКэшИзмененныеДокументы, ВТКэшДвиженияДругихПериодовИлиОрганизаций, ВТКэшОчищаемыеДокументы");
		
	КонецЦикла;
	
КонецПроцедуры


#Область ЗаписьДвиженийВФоне

// Запускает новое задание многопоточной записи движений из стека данных для записи.
// Вызов этой процедуры нужно в т.ч. выполнять по ходу выполнения расчета,
// чтобы постараться записать движения, помещенные в стек процедурой ПредварительнаяЗаписьСформированныхДвижений().
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ОжидатьОсвобожденияМестаВСтеке - Булево - обязательно запустить следующее задание
//
Процедура ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета, ОжидатьОсвобожденияМестаВСтеке = Ложь) Экспорт
	
	Если НЕ ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра
	 ИЛИ ПараметрыРасчета.Отладка.ОтключитьЗаписьСформированныхДвижений
	 ИЛИ ПараметрыРасчета.СтекДанныхДляЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускатьЗапись = Истина;
	
	Пока ЗапускатьЗапись И ПараметрыРасчета.СтекДанныхДляЗаписи.Количество() > 0 Цикл
		
		ПараметрыЗаписиРегистра = ПараметрыРасчета.СтекДанныхДляЗаписи[0];
		ПараметрыЗаписиРегистра.Вставить("ОжидатьОсвобожденияМестаВСтеке", ОжидатьОсвобожденияМестаВСтеке);
		
		ЗапускатьЗапись = ЗапуститьЗаданиеЗаписиРегистра(ПараметрыРасчета, ПараметрыЗаписиРегистра);
		
		Если ЗапускатьЗапись Тогда
			ПараметрыРасчета.СтекДанныхДляЗаписи.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Запускает новое задание многопоточной записи движений.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
// 	ПараметрыЗаписиРегистра - Структура - параметры записи движения
//	ЗаписьКорректировочныхДвижений - Булево - признак записи корректировочных движений до начала расчета
//	ЗаписьДвиженийВнеРасчета - Булево - признак записи движений после расчета, внешней обработкой
//
// Возвращаемое значение:
//	Булево - признак того, что задание запущено
//
Функция ЗапуститьЗаданиеЗаписиРегистра(ПараметрыРасчета, ПараметрыЗаписиРегистра, ЗаписьКорректировочныхДвижений = Ложь, ЗаписьДвиженийВнеРасчета = Ложь) Экспорт
	
	Если НЕ ЗаписьДвиженийВнеРасчета Тогда
		
		Если ПараметрыРасчета.Отладка.ОтключитьЗаписьСформированныхДвижений
		 И НЕ ЗаписьКорректировочныхДвижений Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПараметрыЗаписиРегистра.КоличествоПорций = 0
		 ИЛИ ПараметрыЗаписиРегистра.НомерПервойПорции > ПараметрыЗаписиРегистра.КоличествоПорций Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПараметрыЗаписиРегистра.Свойство("ОжидатьОсвобожденияМестаВСтеке") Тогда
			ОжидатьОсвобожденияМестаВСтеке = ПараметрыЗаписиРегистра.ОжидатьОсвобожденияМестаВСтеке;
		Иначе
			ОжидатьОсвобожденияМестаВСтеке = Истина;
		КонецЕсли;
		
		// Если накопилось много незавершенных заданий записи движений, то подождем, пока хоть одно завершится (или убедимся что все еще активны).
		ЗаданиеЗавершено = ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета,, ОжидатьОсвобожденияМестаВСтеке);
		
		Если НЕ ОжидатьОсвобожденияМестаВСтеке И НЕ ЗаданиеЗавершено Тогда
			Возврат Ложь; // стек заданий полон, все задания еще активны
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготовим и запустим новое задание записи.
	ПредыдущееЗадание = Неопределено;
	ПараметрыРасчета.ОбщееКоличествоФЗЗаписи = ПараметрыРасчета.ОбщееКоличествоФЗЗаписи + 1;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыЗаписиРегистра); // параметры записи
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ФЗ №%1 - %2 (%3)';
			|en = 'FZ No.%1 - %2 (%3)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(ПараметрыРасчета.ОбщееКоличествоФЗЗаписи),
		ПараметрыЗаписиРегистра.ИмяРегистра,
		СокрЛП(ПараметрыЗаписиРегистра.ИдентификаторРасчета));
	
	ОписаниеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1, запись регистра %2.';
			|en = '%1, register record %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(ПараметрыРасчета.ВариантРасчета),
		СокрЛП(ПараметрыЗаписиРегистра.ИмяРегистра));

	// Запустим задание и запомним его идентификатор в стеке и общей таблице заданий записи.
	НовоеЗадание = ЗакрытиеМесяцаСервер.ЗапуститьПодчиненноеФоновоеЗаданиеЭтапаРасчета(
		ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ЗаписатьДвиженияПоРегиструФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		ОписаниеЗадания);
	
	ПараметрыРасчета.СтекЗаданийЗаписи.Добавить(НовоеЗадание.УникальныйИдентификатор);
	
	ПоследняяСтрока = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Добавить();
	ПоследняяСтрока.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	ПоследняяСтрока.ПредыдущееЗадание 	 = ПредыдущееЗадание;
	ПоследняяСтрока.ИмяРегистра 		 = ПараметрыЗаписиРегистра.ИмяРегистра;
	ПоследняяСтрока.КоличествоДвижений	 = ПараметрыЗаписиРегистра.КоличествоЗаписей;
	ПоследняяСтрока.ИдентификаторРасчета = ПараметрыЗаписиРегистра.ИдентификаторРасчета;
	ПоследняяСтрока.КоличествоПорций 	 = ПараметрыЗаписиРегистра.КоличествоПорций;
	ПоследняяСтрока.НомерПервойПорции 	 = ПараметрыЗаписиРегистра.НомерПервойПорции;
	ПоследняяСтрока.ПараметрыЗаписи 	 = Новый ХранилищеЗначения(ПараметрыЗаписиРегистра, Новый СжатиеДанных(9));
	
	РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
		ПараметрыРасчета,
		НСтр("ru = 'Запущено задание записи';
			|en = 'Запущено задание записи'") + " " + КлючЗадания + ", "
			+ НСтр("ru = 'активных заданий';
					|en = 'активных заданий'") + ": " + СокрЛП(ПараметрыРасчета.СтекЗаданийЗаписи.Количество()) + ", "
			+ НСтр("ru = 'ожидает запуска';
					|en = 'ожидает запуска'") + ": " + СокрЛП(Макс(ПараметрыРасчета.СтекДанныхДляЗаписи.Количество() - 1, 0)));
	
	Возврат Истина;
	
КонецФункции

Процедура КэшироватьПорциюДанныхДляЗаписи(ПараметрыРасчета, ПараметрыЗаписиРегистра, Данные,
			ЭтоПорцияОчистки = Ложь, ЭтоПорцияДополнения = Ложь, ПоместитьВСтек = Истина)
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИспользоватьСтекДанныхДляЗаписи = ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра
		И НЕ ПараметрыРасчета.Отладка.ОтключитьЗаписьСформированныхДвижений
		И ПоместитьВСтек;
	
	РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
		ПараметрыРасчета,
		НСтр("ru = 'Кэширование очередной порции данных для записи, ожидает запуска';
			|en = 'Кэширование очередной порции данных для записи, ожидает запуска'") + ": "
			+ СокрЛП(ПараметрыРасчета.СтекДанныхДляЗаписи.Количество() + ?(ИспользоватьСтекДанныхДляЗаписи, 1, 0)));
		
	Если ТипЗнч(Данные) = Тип("РезультатЗапроса") Тогда
		ТаблицаДанных = Данные.Выгрузить();
	Иначе
		ТаблицаДанных = Данные;
	КонецЕсли;
	
	ПараметрыЗаписиРегистра.КоличествоПорций = ПараметрыЗаписиРегистра.КоличествоПорций + 1;
	
	Если ЭтоПорцияОчистки Тогда
		ПараметрыЗаписиРегистра.ПорцииОчистки.Добавить(ПараметрыЗаписиРегистра.КоличествоПорций);
	ИначеЕсли ЭтоПорцияДополнения Тогда
		ПараметрыЗаписиРегистра.ПорцииДополнения.Добавить(ПараметрыЗаписиРегистра.КоличествоПорций);
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИдентификаторРасчета = ПараметрыЗаписиРегистра.ИдентификаторРасчета;
	ЗаписьРегистра.ТипДанных 			= Перечисления.ТипыДанныхКэшаПартионногоУчета.РезультатРасчета;
	ЗаписьРегистра.НомерПорцииДанных 	= ПараметрыЗаписиРегистра.КоличествоПорций;
	ЗаписьРегистра.НомерВерсии 			= СокрЛП(Метаданные.Версия);
	ЗаписьРегистра.ДатаЗаписи			= ТекущаяДатаСеанса();
	ЗаписьРегистра.Комментарий			= НСтр("ru = 'Запись движений';
												|en = 'Writing register records'", ОбщегоНазначения.КодОсновногоЯзыка()) + " - " + ПараметрыЗаписиРегистра.ИмяРегистра;
	ЗаписьРегистра.Данные 				= Новый ХранилищеЗначения(ТаблицаДанных, Новый СжатиеДанных(9));
	
	ЗаписьРегистра.Записать(Истина);
	
	ВремяПодготовки = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала;
	ПараметрыЗаписиРегистра.ВремяПодготовкиДанных = ПараметрыЗаписиРегистра.ВремяПодготовкиДанных + ВремяПодготовки;
	
	РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
		ПараметрыРасчета,
		ПараметрыЗаписиРегистра.ИмяРегистра,,,
		ВремяПодготовки/1000);
	
	Если НЕ ЭтоПорцияОчистки Тогда
		
		РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
			ПараметрыРасчета,
			ПараметрыЗаписиРегистра.ИмяРегистра,
			,
			ТаблицаДанных.Количество());
			
		ПараметрыЗаписиРегистра.КоличествоЗаписей = ПараметрыЗаписиРегистра.КоличествоЗаписей + ТаблицаДанных.Количество();
		
		// Проверим корректность формирования порций записи.
		Если ПараметрыРасчета.Отладка.КонтролироватьРегистраторыВФЗ И НЕ ЭтоПорцияДополнения
		 И ТаблицаДанных.Колонки.Найти("Регистратор") <> Неопределено Тогда
		
			ТаблицаРегистраторов = ТаблицаДанных.Скопировать(, "Регистратор");
			ТаблицаРегистраторов.Свернуть("Регистратор", "");
			
			Для Каждого ТекСтр Из ТаблицаРегистраторов Цикл
				РегистраторыВФЗ = ПараметрыРасчета.Отладка.РегистраторыВФЗ; //ТаблицаЗначений
				НовСтр = РегистраторыВФЗ.Добавить();
				НовСтр.ИмяРегистра = ПараметрыЗаписиРегистра.ИмяРегистра;
				НовСтр.Регистратор = ТекСтр.Регистратор;
				НовСтр.Количество = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьСтекДанныхДляЗаписи Тогда
		ПараметрыРасчета.СтекДанныхДляЗаписи.Добавить(ПараметрыЗаписиРегистра);
	КонецЕсли;

	ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
	
КонецПроцедуры

Процедура ПоместитьПорциюДанныхВСтек(ПараметрыРасчета, ПараметрыЗаписиРегистра)
	
	Если ПараметрыРасчета.ОграниченияФЗ.МногопоточнаяЗаписьРегистра
	 И НЕ ПараметрыРасчета.Отладка.ОтключитьЗаписьСформированныхДвижений Тогда
		
		СтекДанныхДляЗаписи = ПараметрыРасчета.СтекДанныхДляЗаписи; //Массив
		СтекДанныхДляЗаписи.Добавить(ПараметрыЗаписиРегистра);
		
	КонецЕсли;

	ЗапуститьСледующееЗаданиеЗаписиИзСтека(ПараметрыРасчета);
	
КонецПроцедуры

Процедура ОчиститьКэшДанныхДляЗаписи(ИдентификаторРасчета, НомерПорцииДанных = Неопределено)
	
	НаборЗаписей = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторРасчета.Установить(ИдентификаторРасчета);
	
	Если НомерПорцииДанных <> Неопределено Тогда
		НаборЗаписей.Отбор.НомерПорцииДанных.Установить(НомерПорцииДанных);
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Ожидает завершения одного или всех заданий в очереди записи движений.
//
// Возвращаемое значение:
//	Булево -
//
Функция ОжидатьЗавершенияЗаданийЗаписи(ПараметрыРасчета, ЗавершениеВсехЗаданий = Ложь, ОжидатьОсвобожденияМестаВСтеке = Истина, ЗаписьДвиженийВнеРасчета = Ложь) Экспорт
	
	МаксимальноеКоличествоФЗ = МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета);
	ТекстЗадания = ", " + НСтр("ru = 'активных заданий';
								|en = 'активных заданий'") + ": " + СокрЛП(ПараметрыРасчета.СтекЗаданийЗаписи.Количество());
	
	Если ЗавершениеВсехЗаданий ИЛИ ЗаписьДвиженийВнеРасчета
	 ИЛИ ПараметрыРасчета.СтекЗаданийЗаписи.Количество() >= МаксимальноеКоличествоФЗ Тогда
	 
	 	Если ЗавершениеВсехЗаданий ИЛИ ЗаписьДвиженийВнеРасчета Тогда
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Ожидание завершения всех заданий записи';
					|en = 'Ожидание завершения всех заданий записи'") + ТекстЗадания);
		ИначеЕсли ОжидатьОсвобожденияМестаВСтеке Тогда
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Стек заданий записи заполнен, ожидание освобождения места в стеке';
					|en = 'Стек заданий записи заполнен, ожидание освобождения места в стеке'") + ТекстЗадания);
		Иначе
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Проверяем наличие завершенных заданий записи';
					|en = 'Проверяем наличие завершенных заданий записи'") + ТекстЗадания);
		КонецЕсли;
		
		// Если размер очереди заданий записи достиг максимума, то удалим из очереди завершенные задания.
		НомерЗадания = 0;
		Результат = Ложь;
		
		Пока НомерЗадания < ПараметрыРасчета.СтекЗаданийЗаписи.Количество() Цикл
			
			Если НЕ ЗавершениеВсехЗаданий И НЕ ЗаписьДвиженийВнеРасчета Тогда
					
				ЗаданиеЗавершено = ОжидатьЗавершенияФоновогоЗаданияЗаписи(
					ПараметрыРасчета,
					НомерЗадания,
					?(ОжидатьОсвобожденияМестаВСтеке, 0.5, 0.01));
				
				Если ЗаданиеЗавершено ИЛИ ПараметрыРасчета.СтекЗаданийЗаписи.Количество() = 0 Тогда
					Результат = Истина; // освободилось место в стеке заданий
				КонецЕсли;
				
				НомерЗадания = НомерЗадания + 1; // движения еще записываются
				
				Если НомерЗадания >= ПараметрыРасчета.СтекЗаданийЗаписи.Количество() Тогда
					
					// Ни одно из заданий не завершено.
					Если НЕ ОжидатьОсвобожденияМестаВСтеке Тогда
						Прервать;
					КонецЕсли;
					
					НомерЗадания = 0; // Начинаем ожидание снова, пока не освободится место в стеке
					
				КонецЕсли;
				
			Иначе
				
				// Поочередно ждем завершения всех заданий.
				ОжидатьЗавершенияФоновогоЗаданияЗаписи(ПараметрыРасчета, НомерЗадания,, ЗаписьДвиженийВнеРасчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЗавершениеВсехЗаданий И НЕ ЗаписьДвиженийВнеРасчета Тогда
			
			ТекстЗадания = ", " + НСтр("ru = 'активных заданий';
										|en = 'активных заданий'") + ": " + СокрЛП(ПараметрыРасчета.СтекЗаданийЗаписи.Количество());
			
			РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
				ПараметрыРасчета,
				НСтр("ru = 'Состояние стека заданий записи актуализировано';
					|en = 'Состояние стека заданий записи актуализировано'") + ТекстЗадания);
			
			Возврат Результат;
			
		КонецЕсли;
		
	Иначе
		РасчетСебестоимостиПротоколРасчета.ДобавитьИнформациюОЗаписиДвижений(
			ПараметрыРасчета,
			НСтр("ru = 'Есть место в стеке заданий записи';
				|en = 'Есть место в стеке заданий записи'") + ТекстЗадания);
	КонецЕсли;
	
	Если ЗавершениеВсехЗаданий И НЕ ЗаписьДвиженийВнеРасчета Тогда
		// В случае, когда МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета) > 1
		РасчетСебестоимостиПротоколРасчета.ОкончаниеЗаписиДвижений(ПараметрыРасчета);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Ожидает завершения указанного фонового задания записи движений.
//
Функция ОжидатьЗавершенияФоновогоЗаданияЗаписи(ПараметрыРасчета, НомерЗадания, Таймаут = Неопределено, ЗаписьДвиженийВнеРасчета = Ложь)
	
	Задание = ПолучитьФоновоеЗаданиеЗаписи(ПараметрыРасчета, НомерЗадания);
	
	Пока Задание.Состояние = СостояниеФоновогоЗадания.Активно Цикл
		
		Попытка
			
			Если ЗначениеЗаполнено(Таймаут) Тогда
				Задание.ОжидатьЗавершенияВыполнения(Таймаут);
			Иначе
				Задание.ОжидатьЗавершенияВыполнения();
			КонецЕсли;
			
			Задание = ПолучитьФоновоеЗаданиеЗаписи(ПараметрыРасчета, НомерЗадания);
			
		Исключение
			Задание = ПолучитьФоновоеЗаданиеЗаписи(ПараметрыРасчета, НомерЗадания);
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Таймаут) И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Идентификатор = ПараметрыРасчета.СтекЗаданийЗаписи[НомерЗадания];
	СтрокаЗадания = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Найти(Идентификатор, "ИдентификаторЗадания");
	
	Если СтрокаЗадания <> Неопределено Тогда
		
		ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.ИдентификаторРасчета = СтрокаЗадания.ИдентификаторРасчета;
		ЗаписьРегистра.ТипДанных 			= Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета;
		ЗаписьРегистра.НомерПорцииДанных 	= 0;
		ЗаписьРегистра.НомерВерсии 			= СокрЛП(Метаданные.Версия);
		
		ЗаписьРегистра.Прочитать();
		
		Если НЕ ЗаписьРегистра.Выбран() Тогда
			
			Результат = Новый Структура;
			Результат.Вставить("ТекстСтатистика", НСтр("ru = 'Задание завершилось с ошибками (см. ниже)';
														|en = 'The job completed with errors (see below)'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Результат.Вставить("ТекстОшибки", "");
			
		Иначе
			
			Результат = ЗаписьРегистра.Данные.Получить();
			
		КонецЕсли;
		
		СтрокаЗадания.ТекстСтатистика = Результат.ТекстСтатистика;
		СтрокаЗадания.ТекстОшибки 	  = Результат.ТекстОшибки;
		
		ОчиститьКэшДанныхДляЗаписи(СтрокаЗадания.ИдентификаторРасчета);
		
	Иначе
		
		Результат = Новый Структура;
		Результат.Вставить("ТекстСтатистика", "");
		Результат.Вставить("ТекстОшибки", НСтр("ru = 'Информация о задании записи отсутствует';
												|en = 'Record job information is missing'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	ТекстДляПротокола = "";
	
	Если Задание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда // запись движений не выполнилась
		
		Если Задание.Состояние <> Неопределено Тогда
			
			// Состояние задания "ЗавершеноАварийно" или "Отменено".
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 %2:
				|%3';
				|en = 'Background job %1 %2:
				|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				"""" + СокрЛП(Задание.Ключ) + """",
				?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено, НСтр("ru = 'отменено';
																				|en = 'canceled'", ОбщегоНазначения.КодОсновногоЯзыка()), НСтр("ru = 'завершено аварийно';
																																			|en = 'aborted'", ОбщегоНазначения.КодОсновногоЯзыка())),
				?(Задание.ИнформацияОбОшибке = Неопределено,
					НСтр("ru = '<Нет описания ошибки>';
						|en = '<No error description>'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
			
		КонецЕсли;
		
	ИначеЕсли НЕ ЗаписьДвиженийВнеРасчета Тогда
		
		ИмяРегистра   = Задание.Ключ;
		ПозицияНачала = СтрНайти(ИмяРегистра, "-");
		ПозицияКонца  = СтрНайти(ИмяРегистра, "(");
		
		Если ПозицияНачала > 0 И ПозицияКонца > 0 Тогда
			
			ИмяРегистра = СокрЛП(Сред(ИмяРегистра, ПозицияНачала + 1, ПозицияКонца - ПозицияНачала - 1));
			
			РасчетСебестоимостиПротоколРасчета.ЗаписьСформированныхДвижений(
				ПараметрыРасчета,
				ИмяРегистра,,,
				Задание.Конец - Задание.Начало + 1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		ТекстДляПротокола = ТекстДляПротокола + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Фоновое задание %1 выполнено с ошибками:
				|%2';
				|en = 'Background job %1 completed with errors:
				|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				"""" + СокрЛП(Задание.Ключ) + """",
				Результат.ТекстОшибки);
			
	КонецЕсли;
	
	ТекстДляПротокола = СокрЛП(ТекстДляПротокола);
	
	Если СтрокаЗадания <> Неопределено Тогда
		СтрокаЗадания.ТекстОшибки = ТекстДляПротокола;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстДляПротокола) И НЕ ЗаписьДвиженийВнеРасчета Тогда
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			СтрЗаменить(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), ""));
		
		Если СтрНайти(ТекстДляПротокола, СлужебныйСимвол_ПроблемаУжеЗарегистрирована()) = 0 Тогда
			
			ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыРасчета,
				,
				НСтр("ru = 'При записи движений диагностированы ошибки';
					|en = 'Errors were found when saving records'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ТекстДляПротокола);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРасчета.СтекЗаданийЗаписи.Удалить(НомерЗадания); // закончено
	
	Возврат Истина;
	
КонецФункции

// Получает фоновое задание записи движений по его номеру в очереди.
//
Функция ПолучитьФоновоеЗаданиеЗаписи(ПараметрыРасчета, НомерЗадания)
	
	Идентификатор = ПараметрыРасчета.СтекЗаданийЗаписи[НомерЗадания];
	Задание 	  = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Идентификатор);
	
	Если Задание = Неопределено Тогда
		
		СтрокаЗадания = ПараметрыРасчета.ТаблицаЗаданийЗаписи.Найти(Идентификатор, "ИдентификаторЗадания");
		
		Если СтрокаЗадания = Неопределено Тогда
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ФЗ №? (%1)';
					|en = 'FZ No.? (%1)'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(Идентификатор));
			
		Иначе
			
			КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'ФЗ №%1 - %2 (%3)';
					|en = 'FZ No.%1 - %2 (%3)'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(ПараметрыРасчета.ТаблицаЗаданийЗаписи.Индекс(СтрокаЗадания) + 1),
				СтрокаЗадания.ИмяРегистра,
				СокрЛП(Идентификатор));
			
		КонецЕсли;
		
		Задание = Новый Структура("Состояние, Ключ", Неопределено, КлючЗадания);
		
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Функция МаксимальноеКоличествоЗаданийЗаписи(ПараметрыРасчета)
	
	// Если запущено регламентное задание расчета предварительной себестоимости,
	// то многопоточная запись не требуется, т.к. рассчитываются движения только по регистру сведений СтоимостьТоваров.
	КоличествоЗаданий =
		?(ПараметрыРасчета.РегламентноеЗадание ИЛИ ОбщегоНазначения.ИнформационнаяБазаФайловая(),
			1,
			ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗЗаписи);
	
	Возврат КоличествоЗаданий;
	
КонецФункции

#КонецОбласти

#Область ОтражениеВУчете

// Инициализировать параметры отражения в учете.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ПредставлениеВидаУчета - Строка - Представление вида учета
//  ИмяМетода - Строка - Имя метода
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы
//  ДопустимаТаблицаЗначений - Булево - Допустима таблица значений в качестве параметра метода
//  КлючевыеПоля - Строка - записи с одинаковыми значениями таких полей должны попадать в одну порцию
// 
// Возвращаемое значение:
//  Структура - параметры отражения в учете:
// * ПредставлениеВидаУчета - Строка -
// * ИмяМетода - Строка -
// * ИмяВременнойТаблицы - Строка -
// * ДопустимаТаблицаЗначений - Булево -
// * КлючевыеПоля - Строка -
// * КоличествоЗаданий - Число -
Функция ИнициализироватьПараметрыОтраженияВУчете(ПараметрыРасчета, ПредставлениеВидаУчета, ИмяМетода,
			ИмяВременнойТаблицы, ДопустимаТаблицаЗначений = Истина, КлючевыеПоля = "") Экспорт
	
	ПараметрыОтраженияВУчете = Новый Структура;
	ПараметрыОтраженияВУчете.Вставить("ПредставлениеВидаУчета", 	ПредставлениеВидаУчета);
	ПараметрыОтраженияВУчете.Вставить("ИмяМетода", 		  			ИмяМетода);
	ПараметрыОтраженияВУчете.Вставить("ИмяВременнойТаблицы",		ИмяВременнойТаблицы);
	ПараметрыОтраженияВУчете.Вставить("ДопустимаТаблицаЗначений",	ДопустимаТаблицаЗначений); // передача менеджера ВТ допустимо для всех методов
	ПараметрыОтраженияВУчете.Вставить("КлючевыеПоля",				КлючевыеПоля); // записи с одинаковыми значениями этих полей должны попасть в одну порцию
	ПараметрыОтраженияВУчете.Вставить("КоличествоЗаданий", 			МаксимальноеКоличествоЗаданийОтраженияВУчете(ПараметрыРасчета));
	
	Возврат ПараметрыОтраженияВУчете;
	
КонецФункции

// Отразить документы в учете.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ПараметрыОтраженияВУчете - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыОтраженияВУчете
Процедура ОтразитьДокументыВУчете(ПараметрыРасчета, ПараметрыОтраженияВУчете) Экспорт
	
	ОбъемДанных = РазмерВременнойТаблицы(ПараметрыРасчета, ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
	
	Если ОбъемДанных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТаблицы = КолонкиВременнойТаблицы(ПараметрыРасчета, ПараметрыОтраженияВУчете.ИмяВременнойТаблицы, Истина);
	КолонкиТаблицы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КолонкиТаблицы, "Т.");
	
	ПараметрыОтраженияВУчете.Вставить("КолонкиТаблицы", КолонкиТаблицы);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(ПараметрыРасчета, "ОтразитьДокументыВУчете", ПараметрыОтраженияВУчете.ПредставлениеВидаУчета);
	
	Если ПараметрыОтраженияВУчете.КоличествоЗаданий < 2 ИЛИ ОбъемДанных < ПараметрыОтраженияВУчете.КоличествоЗаданий Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Запрос.МенеджерВременныхТаблиц);
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ПараметрыОтраженияВУчете.ИмяМетода, МассивПараметров);
		
	Иначе
		
		ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете.Очистить();
		
		// Разделим временную таблицу на порции. Первую порцию обработаем в основном потоке, остальные - в фоновых заданиях.
		Если ЗначениеЗаполнено(ПараметрыОтраженияВУчете.КлючевыеПоля) Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	&КлючевыеПоля
			|ПОМЕСТИТЬ ТаблицаОтраженияВУчетеСвернутая
			|ИЗ
			|	ИмяТаблицы
			|ИНДЕКСИРОВАТЬ ПО
			|	&КлючевыеПоля";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КлючевыеПоля", ПараметрыОтраженияВУчете.КлючевыеПоля);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
			
			Запрос.Выполнить();
			
			РазмерПорции = Цел(РазмерВременнойТаблицы(ПараметрыРасчета, "ТаблицаОтраженияВУчетеСвернутая")/(ПараметрыОтраженияВУчете.КоличествоЗаданий + 1)) + 1;
			
			ПараметрыРазделения = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции,,,, ПараметрыОтраженияВУчете.КлючевыеПоля);
			
			КоличествоПорций = РасчетСебестоимостиПрикладныеАлгоритмы.РазделитьВременнуюТаблицуНаПорции(
				ПараметрыРасчета,
				ПараметрыРазделения,
				"ТаблицаОтраженияВУчетеСвернутая");
			
			МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыОтраженияВУчете.КлючевыеПоля, ",",, Истина);
			ТекстПоляСвязи = "";
			
			Для Каждого ТекПоле Из МассивПолей Цикл
				
				ТекстПоляСвязи = ТекстПоляСвязи + ?(ТекстПоляСвязи = "", "", Символы.ПС + "	И ")
					+ "Т." + ТекПоле + " = " + "Свернутая." + ТекПоле;
				
			КонецЦикла;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Свернутая.НомерПорции,
			|	&ПоляТаблицы
			|ПОМЕСТИТЬ ТаблицаОтраженияВУчетеВременная
			|ИЗ
			|	ИмяТаблицы КАК Т
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтраженияВУчетеСвернутая КАК Свернутая
			|	ПО &ПоляСвязи
			|;
			|УНИЧТОЖИТЬ ИмяТаблицы
			|;
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ ИмяТаблицы
			|ИЗ
			|	ТаблицаОтраженияВУчетеВременная КАК Т
			|;
			|УНИЧТОЖИТЬ ТаблицаОтраженияВУчетеВременная
			|;
			|УНИЧТОЖИТЬ ТаблицаОтраженияВУчетеСвернутая
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", КолонкиТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСвязи", ТекстПоляСвязи);
			
			Запрос.Выполнить();
			
		Иначе
			
			РазмерПорции = Цел(ОбъемДанных/(ПараметрыОтраженияВУчете.КоличествоЗаданий + 1)) + 1;
			
			ПараметрыРазделения = РасчетСебестоимостиПрикладныеАлгоритмы.СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции);
			
			КоличествоПорций = РасчетСебестоимостиПрикладныеАлгоритмы.РазделитьВременнуюТаблицуНаПорции(
				ПараметрыРасчета,
				ПараметрыРазделения,
				ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПоляТаблицы
		|ИЗ
		|	ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.НомерПорции = &НомерПорции";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", КолонкиТаблицы);
		
		// Со второй порции отразим данные в фоновых заданиях
		Для НомерПорции = 2 По КоличествоПорций Цикл
			
			Запрос.УстановитьПараметр("НомерПорции", НомерПорции);

			ДанныеДляОтражения = Запрос.Выполнить().Выгрузить();
			
			ЗапуститьЗаданиеОтраженияВУчете(ПараметрыРасчета, ДанныеДляОтражения, ПараметрыОтраженияВУчете);
			
		КонецЦикла;
		
		// Данные первой порции отразим в основном потоке
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПоляТаблицы
		|ПОМЕСТИТЬ ВременнаяТаблицаДанныхКОтражения
		|ИЗ
		|	ИмяТаблицы КАК Т
		|ГДЕ
		|	Т.НомерПорции = 1
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ИмяТаблицы
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	&ПоляТаблицы
		|ПОМЕСТИТЬ ИмяТаблицы
		|ИЗ
		|	ВременнаяТаблицаДанныхКОтражения КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ВременнаяТаблицаДанныхКОтражения
		|";

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", КолонкиТаблицы);
		
		Запрос.Выполнить();
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Запрос.МенеджерВременныхТаблиц);
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ПараметрыОтраженияВУчете.ИмяМетода, МассивПараметров);
		
		ОжидатьЗавершенияЗаданийОтраженияВУчете(ПараметрыРасчета, ПараметрыОтраженияВУчете);
		
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
	
КонецПроцедуры

// Служебная. Метод для отражения в учете фоновым заданием.
// 
// Параметры:
//  ИдентификаторРасчета - УникальныйИдентификатор - Идентификатор запущенного фонового задания
//  ХранилищеДанных - ХранилищеЗначения - Хранилище данных для отражения
//  ПараметрыОтраженияВУчете - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыОтраженияВУчете
Процедура ОтразитьВУчетеФоновымЗаданием(ИдентификаторРасчета, ХранилищеДанных, ПараметрыОтраженияВУчете) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляОтражения = ХранилищеДанных.Получить();
	МассивПараметров   = Новый Массив;
	
	Если НЕ ПараметрыОтраженияВУчете.ДопустимаТаблицаЗначений Тогда

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ПоляТаблицы
		|ПОМЕСТИТЬ ИмяТаблицы
		|ИЗ
		|	&ДанныеДляОтражения КАК Т
		|";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ПараметрыОтраженияВУчете.ИмяВременнойТаблицы);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляТаблицы", ПараметрыОтраженияВУчете.КолонкиТаблицы);
		
		Запрос.УстановитьПараметр("ДанныеДляОтражения", ДанныеДляОтражения);
		
		Запрос.Выполнить();
		
		МассивПараметров.Добавить(Запрос.МенеджерВременныхТаблиц);
		
	Иначе
		
		МассивПараметров.Добавить(ДанныеДляОтражения);
		
	КонецЕсли;
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ПараметрыОтраженияВУчете.ИмяМетода, МассивПараметров);
	
	ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИдентификаторРасчета  = ИдентификаторРасчета;
	ЗаписьРегистра.ТипДанных 			 = Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета;
	ЗаписьРегистра.НомерПорцииДанных 	 = 0;
	ЗаписьРегистра.НомерВерсии 			 = СокрЛП(Метаданные.Версия);
	ЗаписьРегистра.ДатаЗаписи			 = ТекущаяДатаСеанса();
	ЗаписьРегистра.Комментарий			 = ПараметрыОтраженияВУчете.ПредставлениеВидаУчета;
	
	ЗаписьРегистра.Записать(Истина);
	
КонецПроцедуры


Процедура ЗапуститьЗаданиеОтраженияВУчете(ПараметрыРасчета, ДанныеДляОтражения, ПараметрыОтраженияВУчете)
	
	ИдентификаторРасчета = Новый УникальныйИдентификатор;
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(ИдентификаторРасчета);
	ПараметрыОбработчикаЗадания.Добавить(Новый ХранилищеЗначения(ДанныеДляОтражения, Новый СжатиеДанных(9)));
	ПараметрыОбработчикаЗадания.Добавить(ПараметрыОтраженияВУчете);
	
	КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ФЗ №%1 - %2 (%3)';
			|en = 'FZ No.%1 - %2 (%3)'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СокрЛП(ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете.Количество() + 1),
		ПараметрыОтраженияВУчете.ПредставлениеВидаУчета,
		СокрЛП(ИдентификаторРасчета));
	
	// Запустим задание и запомним его идентификатор в общей таблице заданий.
	НовоеЗадание = ЗакрытиеМесяцаСервер.ЗапуститьПодчиненноеФоновоеЗаданиеЭтапаРасчета(
		ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ОтразитьВУчетеФоновымЗаданием",
		ПараметрыОбработчикаЗадания,
		КлючЗадания,
		ПараметрыОтраженияВУчете.ПредставлениеВидаУчета);
	
	СтрокаОписанияЗадания = ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете.Добавить();
	СтрокаОписанияЗадания.ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	СтрокаОписанияЗадания.КлючЗадания 		   = КлючЗадания;
	СтрокаОписанияЗадания.ИдентификаторРасчета = ИдентификаторРасчета;
	
КонецПроцедуры

Функция ПолучитьФоновоеЗаданиеОтраженияВУчете(ПараметрыРасчета, НомерЗадания)
	
	ТаблицаЗаданийОтраженияВУчете = ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете; // ТаблицаЗначений
	СтрокаЗадания = ТаблицаЗаданийОтраженияВУчете.Получить(НомерЗадания - 1);
	Задание 	  = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(СтрокаЗадания.ИдентификаторЗадания);
	
	Если Задание = Неопределено Тогда
		Задание = Новый Структура("Состояние, Ключ, ИнформацияОбОшибке", Неопределено, СтрокаЗадания.КлючЗадания, Неопределено);
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

Процедура ОжидатьЗавершенияФоновогоЗаданияОтраженияВУчете(ПараметрыРасчета, НомерЗадания, ПараметрыОтраженияВУчете)
	
	Задание = ПолучитьФоновоеЗаданиеОтраженияВУчете(ПараметрыРасчета, НомерЗадания);
	
	Пока Задание.Состояние = СостояниеФоновогоЗадания.Активно Цикл
		
		Попытка
			Задание.ОжидатьЗавершенияВыполнения();
		Исключение
			Задание = Неопределено;
		КонецПопытки;

		Задание = ПолучитьФоновоеЗаданиеОтраженияВУчете(ПараметрыРасчета, НомерЗадания);
		
	КонецЦикла;
	
	ТаблицаЗаданийОтраженияВУчете = ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете; // ТаблицаЗначений
	СтрокаЗадания = ТаблицаЗаданийОтраженияВУчете.Получить(НомерЗадания - 1);
	
	ЗаписьРегистра = РегистрыСведений.КэшДанныхПартионногоУчета.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ИдентификаторРасчета = СтрокаЗадания.ИдентификаторРасчета;
	ЗаписьРегистра.ТипДанных 			= Перечисления.ТипыДанныхКэшаПартионногоУчета.СтатистикаРасчета;
	ЗаписьРегистра.НомерПорцииДанных 	= 0;
	ЗаписьРегистра.НомерВерсии 			= СокрЛП(Метаданные.Версия);
	
	ЗаписьРегистра.Прочитать();
	
	ВыполненоУспешно = ЗаписьРегистра.Выбран();
	
	ОчиститьКэшДанныхДляЗаписи(СтрокаЗадания.ИдентификаторРасчета);
	
	ТекстДляПротокола = "";
	
	Если НЕ ВыполненоУспешно Тогда // отражение в учете не выполнилась
		
		// Состояние задания "ЗавершеноАварийно" или "Отменено".
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Фоновое задание %1 %2:
			|%3';
			|en = 'Background job %1 %2:
			|%3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			"""" + СокрЛП(Задание.Ключ) + """",
			?(Задание.Состояние = СостояниеФоновогоЗадания.Отменено,
				НСтр("ru = 'отменено';
					|en = 'canceled'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'завершено аварийно';
					|en = 'aborted'", ОбщегоНазначения.КодОсновногоЯзыка())),
			?(Задание.ИнформацияОбОшибке = Неопределено,
				НСтр("ru = '<Нет описания ошибки>';
					|en = '<No error description>'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке)));
		
	КонецЕсли;
	
	ТекстДляПротокола = СокрЛП(ТекстДляПротокола);
	
	Если ЗначениеЗаполнено(ТекстДляПротокола)Тогда
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
			ТекстДляПротокола);
		
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			ПараметрыОтраженияВУчете.ПредставлениеВидаУчета + ": "
				+ НСтр("ru = 'обнаружены ошибки';
						|en = 'errors are found'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстДляПротокола);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОжидатьЗавершенияЗаданийОтраженияВУчете(ПараметрыРасчета, ПараметрыОтраженияВУчете)
	
	Для НомерЗадания = 1 По ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете.Количество() Цикл
		ОжидатьЗавершенияФоновогоЗаданияОтраженияВУчете(ПараметрыРасчета, НомерЗадания, ПараметрыОтраженияВУчете);
	КонецЦикла;
	
	ПараметрыРасчета.ТаблицаЗаданийОтраженияВУчете.Очистить();
	
КонецПроцедуры

Функция МаксимальноеКоличествоЗаданийОтраженияВУчете(ПараметрыРасчета)
	
	КоличествоЗаданий =
		?(ОбщегоНазначения.ИнформационнаяБазаФайловая(),
			1,
			ПараметрыРасчета.ОграниченияФЗ.МаксимальноеКоличествоФЗОтраженияВУчете);
	
	Возврат КоличествоЗаданий;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

// Регистрирует документы с изменившимися движениями к отражению в международном учете.
//
Процедура ЗарегистрироватьКОтражениюВМеждународномУчете(ПараметрыРасчета)
	
	РасчетСебестоимостиПротоколРасчета.НачалоЭтапаРасчета(ПараметрыРасчета, "ЗарегистрироватьКОтражениюВМеждународномУчете");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.ОграниченияВыборки.КоличествоЗаписейВНЗ) Тогда
		// Для отладки - расчет без изменения данных ИБ
		Возврат;
	КонецЕсли;
	
	// Дополним общую таблицу ВТИзмененныеДокументы документами внеоборотных активов
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеДокументы.Организация КАК Организация,
	|	ИзмененныеДокументы.Период КАК Период,
	|	ИзмененныеДокументы.Регистратор
	|ПОМЕСТИТЬ ВТДокументыКОтражению
	|ИЗ
	|	ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|ГДЕ
	|	ИзмененныеДокументы.ВлияетНаПроводки
	|	И &ВТДокументыКОтражениюЛокализация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Период КАК Период,
	|	ИсходнаяТаблица.Документ КАК Документ,
	|	ИсходнаяТаблица.Организация КАК Организация,
	|	ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ДанныеРегистра.Период, ВТДокументыКОтражению.Период) КАК Период,
	|		ВТДокументыКОтражению.Регистратор КАК Документ,
	|		ВТДокументыКОтражению.Организация КАК Организация,
	|		НАЧАЛОПЕРИОДА(ВТДокументыКОтражению.Период, ДЕНЬ) КАК ДатаОтражения
	|	ИЗ
	|		ВТДокументыКОтражению КАК ВТДокументыКОтражению
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|			ПО ВТДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|				И ВТДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|				И (ДанныеРегистра.Активность)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияНоменклатураДоходыРасходы.Период КАК Период,
	|		ДвиженияНоменклатураДоходыРасходы.Регистратор,
	|		ДвиженияНоменклатураДоходыРасходы.Организация,
	|		НАЧАЛОПЕРИОДА(ДвиженияНоменклатураДоходыРасходы.Период,ДЕНЬ)
	|	ИЗ
	|		ВТКэшДвиженияНоменклатураДоходыРасходы КАК ДвиженияНоменклатураДоходыРасходы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|			ПО ДвиженияНоменклатураДоходыРасходы.Регистратор = ИзмененныеДокументы.Регистратор
	|				И ДвиженияНоменклатураДоходыРасходы.Организация = ИзмененныеДокументы.Организация
	|				И ДвиженияНоменклатураДоходыРасходы.Период = ИзмененныеДокументы.Период
	|				И ИзмененныеДокументы.ИмяРегистра = ""ДвиженияНоменклатураДоходыРасходы""
	|				И (ДвиженияНоменклатураДоходыРасходы.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РасходыОтПереоценкиТоваров),
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров)))
	|
	|	) КАК ИсходнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходнаяТаблица.Период,
	|	ИсходнаяТаблица.Документ,
	|	ИсходнаяТаблица.Организация,
	|	ИсходнаяТаблица.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Организация,
	|	ДатаОтражения
	|";
	ТекстЗапросаВТДокументыКОтражениюЛокализация = РасчетСебестоимостиЛокализация.ТекстЗапросаВТДокументыКОтражениюЛокализация();
	Если Не ПустаяСтрока(ТекстЗапросаВТДокументыКОтражениюЛокализация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ВТДокументыКОтражениюЛокализация", ТекстЗапросаВТДокументыКОтражениюЛокализация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ВТДокументыКОтражениюЛокализация", "");
	КонецЕсли;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина, "ДокументыКОтражению", Истина);
	
	ПараметрыОтраженияВУчете = РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьПараметрыОтраженияВУчете(
		ПараметрыРасчета,
		НСтр("ru = 'Отражение в международном учете';
			|en = 'General ledger posting'", ОбщегоНазначения.КодОсновногоЯзыка()),
		"МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению",
		"ДокументыКОтражению",
		Истина);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ОтразитьДокументыВУчете(ПараметрыРасчета, ПараметрыОтраженияВУчете);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТДокументыКОтражению, ДокументыКОтражению");
	
КонецПроцедуры

//-- НЕ УТКА

//++ НЕ УТ

Процедура СформироватьЗаданияКРасчетуРезервовПодОбесценениеЗапасов(ПараметрыРасчета)
	
	Если ПараметрыРасчета.ВариантРасчета <> Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НачалоПериода 		КАК Месяц,
	|	Правила.Владелец	КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ФормированиеРезервовПодОбесценениеЗапасов) КАК Операция
	|ИЗ
	|	Справочник.ПравилаФормированияРезервовПодОбесценениеЗапасов КАК Правила
	|ГДЕ
	|	Правила.Владелец В (&МассивОрганизаций)
	|	И &ПартионныйУчетВерсии22
	|	И НАЧАЛОПЕРИОДА(Правила.НачалоДействия, МЕСЯЦ) <= &НачалоПериода
	|	И (КОНЕЦПЕРИОДА(Правила.КонецДействия, МЕСЯЦ) >= &КонецПериода
	|		ИЛИ Правила.КонецДействия = ДАТАВРЕМЯ(1,1,1))
	|	И (Правила.РегламентированныйУчет
	|		ИЛИ Правила.УправленческийУчет)
	|";
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
КонецПроцедуры

Процедура СформироватьЗаданияКПризнаниюРасходовПоИсследованиямИРазработкам(ПараметрыРасчета)
	
	Если ПараметрыРасчета.ВариантРасчета <> Перечисления.ВариантыРасчетаПартийИСебестоимости.ПартииИСебестоимость Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НачалоПериода 		КАК Месяц,
	|	Т.Организация		КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.ПризнаниеРасходовПоИсследованиямИРазработкам) КАК Операция
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИзмененныеДокументы КАК ИзмененныеДокументы
	|		ПО Т.Регистратор = ИзмененныеДокументы.Регистратор
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В (&МассивОрганизаций)
	|	И Т.АналитикаРасходов ССЫЛКА Справочник.ТемыЭтапыИсследованийИРазработок
	|	И Т.Активность
	|";
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Запрос.Выполнить().Выбрать());
	
КонецПроцедуры

//-- НЕ УТ

Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт
	Возврат "РасчетПартийИСебестоимости";
КонецФункции

#КонецОбласти

#Область ВосстановленияДвижений

// Перепроводит документы по нескольким регистрам накопления.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, ИмяРегистра, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка
//		будут перепроведены по указанным регистрам накопления из поля ИмяРегистра.
//	РасшифровкаКодовОшибок - Соответствие:
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов.
//	ДополнительныеПоля - Структура:
//		Ключ - имя поля таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Представление - представление поля для вывода в протокол
//	ТолькоПерепроведение - Булево - выполнять перепроведение документов без проверки движений и без регистрации ошибок
//
Процедура ПерепровестиДокументыПоОтдельнымРегистрамНакопления(ПараметрыРасчета, Запрос, РасшифровкаКодовОшибок, ПричинаПерепроведения, 
	ДополнительныеПоля = Неопределено, ТолькоПерепроведение = Ложь) Экспорт
	
	// Проверим возможность формирования движений по регистрам в данном периоде
	ТекстДополнительногоЗапроса = "";
	Если РасчетСебестоимостиПовтИсп.ВозможныНеиспользуемыеДвиженияПоРегистрамСебестоимости() Тогда
		
		ИменаРегистровСебестоимости = Новый Массив;
		РегистраторыИсключения 		= Новый Массив;
		
		Для Каждого КлючИЗначение Из РасчетСебестоимостиПовтИсп.РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости() Цикл
			МетаРегистр = КлючИЗначение.Ключ; // ОбъектМетаданныхРегистрНакопления 
			ИменаРегистровСебестоимости.Добавить(МетаРегистр.Имя);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из РасчетСебестоимостиПовтИсп.РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости() Цикл
			МетаДокумент = КлючИЗначение.Ключ; // ОбъектМетаданныхДокумент 
			РегистраторыИсключения.Добавить(Тип("ДокументСсылка." + МетаДокумент.Имя));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ИменаРегистровСебестоимости", ИменаРегистровСебестоимости);
		Запрос.УстановитьПараметр("РегистраторыИсключения", 	 РегистраторыИсключения);
		Запрос.УстановитьПараметр("ВестиУчет", 		 			 ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
		Запрос.УстановитьПараметр("ДатаНачалаУчета", 			 НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
		
		ТекстДополнительногоЗапроса =
		"ВЫБРАТЬ
		|	&ДополнительныеПоля,
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	Т.Организация  				 КАК Организация,
		|	Т.КодОшибки  				 КАК КодОшибки
		|ПОМЕСТИТЬ ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости
		|ИЗ
		|	ВТРегистраторыСНекорректнымиДвижениями КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТМоментыВремени КАК МоментыВремени
		|		ПО Т.Ссылка = МоментыВремени.Ссылка
		|ГДЕ
		|	НЕ Т.ИмяРегистра В (&ИменаРегистровСебестоимости)
		|	ИЛИ (&ВестиУчет
		|		И НЕ ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&РегистраторыИсключения)
		|		И &ДатаНачалаУчета <= МоментыВремени.Дата)
		|	ИЛИ (&ВестиУчет
		|		И ТИПЗНАЧЕНИЯ(Т.Ссылка) В (&РегистраторыИсключения)
		|		И ДОБАВИТЬКДАТЕ(&ДатаНачалаУчета, МЕСЯЦ, -1) <= МоментыВремени.Дата)
		|;
		|
		|/////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРегистраторыСНекорректнымиДвижениями
		|;
		|
		|/////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&ДополнительныеПоля,
		|	Т.ИмяРегистра 				 КАК ИмяРегистра,
		|	Т.Ссылка 	  				 КАК Ссылка,
		|	Т.Организация  				 КАК Организация,
		|	Т.КодОшибки  				 КАК КодОшибки
		|ПОМЕСТИТЬ ВТРегистраторыСНекорректнымиДвижениями
		|ИЗ
		|	ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости КАК Т
		|;
		|
		|/////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТРегистраторыСНекорректнымиДвижениямиВПериодеУчетаСебестоимости
		|";
		
		ТекстДополнительныхПолей = "";
		
		Если ДополнительныеПоля <> Неопределено Тогда
			Для Каждого Поле Из ДополнительныеПоля Цикл
				ТекстДополнительныхПолей = ТекстДополнительныхПолей + "Т." + Поле.Ключ + ", ";
			КонецЦикла;
		КонецЕсли;
		
		ТекстДополнительногоЗапроса = СтрЗаменить(ТекстДополнительногоЗапроса, "&ДополнительныеПоля,", ТекстДополнительныхПолей);
		
	КонецЕсли;
	
	// Подготовка к перепроведению.
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	ПараметрыПроведения = ПроведениеДокументов.ИнициализироватьПараметрыВосстановленияДвижений(
		Запрос,
		РасшифровкаКодовОшибок,
		"ВТРегистраторыСНекорректнымиДвижениями");
	
	ПараметрыПроведения.Вставить("ТекстДополнительногоЗапросаПодготовкиДанных", ТекстДополнительногоЗапроса);
	ПараметрыПроведения.Вставить("ПричинаПерепроведения", 					  	ПричинаПерепроведения);
	ПараметрыПроведения.Вставить("ДополнительныеПоля", 						  	ДополнительныеПоля);
	ПараметрыПроведения.Вставить("ТолькоРегистрироватьОшибки", 					ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения);
	ПараметрыПроведения.Вставить("ОперацииЗакрытияМесяца", 					  	Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	ПараметрыПроведения.Вставить("ПериодРасчета", 							  	ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	ПараметрыПроведения.Вставить("ЗаписыватьОшибкиВЖурналРегистрации", 		  	НЕ ЭтоПараметрыРасчетаПУ22);
	ПараметрыПроведения.Вставить("ИмяСобытияЖурналаРегистрации", 		  	  	ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ПараметрыПроведения.Вставить("ЭтапПроизводстваТолькоВТекущемПериоде", 	  	ЭтоПараметрыРасчетаПУ22);
	ПараметрыПроведения.Вставить("ВызываетсяИзРасчетаСебестоимости", 	  		Истина);
	ПараметрыПроведения.Вставить("ТолькоПерепроведение",						ТолькоПерепроведение);
	
	// Перепроведение.
	РезультатПроведения = ПроведениеДокументов.ВосстановитьДвиженияДокументов(ПараметрыПроведения);
	
	// Обработка результатов перепроведения - время формирования ВТ.
	Для Каждого ОписаниеФормированияВТ Из РезультатПроведения.ВремяФормирования Цикл
		
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", ПричинаПерепроведения,, ОписаниеФормированияВТ.ВремяНачала);
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина,, ОписаниеФормированияВТ.ВремяОкончания);
		
	КонецЦикла;
	
	// Обработка результатов перепроведения - обработанные регистры.
	Для Каждого ИзмененныеРегистры Из РезультатПроведения.ИзмененныеРегистры Цикл
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[ИзмененныеРегистры.Ключ];
		ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обнаружены некорректные движения по регистру накопления ""%1"".
					|	  Причина: %2
					|	  Перепроведено документов: %3';
					|en = 'Incorrect records are found in the ""%1"" accumulation register.
					|	  Reason: %2
					|	  Documents reposted: %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ИзмененныеРегистры.Ключ,
				ПричинаПерепроведения,
				РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(ИзмененныеРегистры.Значение)));
		
	КонецЦикла;
	
	// Пропускам регистрацию ошибок, если выполняется только перепроведение документов.
	Если ТолькоПерепроведение Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка результатов перепроведения - итог перепроведения.
	Если НЕ РезультатПроведения.ВыполненоУспешно Тогда
		
	 	// Остались некорректные записи, но выполнение расчета все равно продолжим.
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации()
				+ НСтр("ru = 'После перепроведения остались документы с некорректными движениями:';
						|en = 'There are documents with incorrect records after reposting:'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	// Обработка результатов перепроведения - детальная информация об ошибках в движениях документов.
	Для Каждого РасшифровкаОшибок Из РезультатПроведения.РасшифровкаОшибок Цикл
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			"#- " + НСтр("ru = 'ошибка';
						|en = 'error'", ОбщегоНазначения.КодОсновногоЯзыка())  + " """ + РасшифровкаОшибок.ТипОшибки + """:");
		
		Для Каждого РасшифровкаОшибки Из РасшифровкаОшибок.Подробнее Цикл
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
				РасшифровкаОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Перепроводит документы по одному регистру накопления.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	ВыборкаДокументов - ВыборкаИзРезультатаЗапроса - выборка запроса, обязательно должна содержать поле Ссылка
//	ИмяРегистраНакопления - Строка - имя регистра накопления, по которому надо перепровести документы.
//	ПараметрыПроведения - см. ПроведениеДокументов.ИнициализироватьПараметрыВосстановленияДвижений 
//
Процедура ВосстановитьДвиженияДокументовПоРегиструНакопления(ПараметрыРасчета, ВыборкаДокументов, ИмяРегистраНакопления, ПараметрыПроведения = Неопределено) Экспорт
	
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	Если НЕ ЗначениеЗаполнено(ПараметрыПроведения) Тогда
		
		ПараметрыПроведения = ПроведениеДокументов.ИнициализироватьПараметрыВосстановленияДвижений(Неопределено, Неопределено);
		
		ПараметрыПроведения.Вставить("ОперацииЗакрытияМесяца", 				  Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
		ПараметрыПроведения.Вставить("ПериодРасчета", 						  ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
		ПараметрыПроведения.Вставить("ЗаписыватьОшибкиВЖурналРегистрации", 	  НЕ ЭтоПараметрыРасчетаПУ22);
		ПараметрыПроведения.Вставить("ИмяСобытияЖурналаРегистрации", 		  ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
		ПараметрыПроведения.Вставить("ЭтапПроизводстваТолькоВТекущемПериоде", ЭтоПараметрыРасчетаПУ22);
		ПараметрыПроведения.Вставить("ВызываетсяИзРасчетаСебестоимости",	  Истина);
		
	КонецЕсли;
	
	ОшибкиПроведения = ПроведениеДокументов.ПерепровестиДокументыПоРегиструНакопления(ПараметрыПроведения, ВыборкаДокументов, ИмяРегистраНакопления);
	
	Для Каждого ТекстОшибки Из ОшибкиПроведения Цикл
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			ТекстОшибки,
			ТекстОшибки);
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив типов документов учета ОС и НМА.
// Документы этих типов имеют "нестандартную" механику проведения по регистрам прочих доходов и расходов.
//
// Возвращаемое значение:
//	Массив - типы документов
//
Функция ТипыДокументовОСиНМА() Экспорт
	
	ТипыРегистраторов = Новый Массив;
	//++ НЕ УТ
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.АмортизацияОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.МодернизацияОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПеремещениеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПереоценкаОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВыкупАрендованныхОС"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.УлучшениеНМА"));
	РасчетСебестоимостиЛокализация.ДополнитьТипыДокументовОСиНМА(ТипыРегистраторов);
	//-- НЕ УТ
	Возврат ТипыРегистраторов;
	
КонецФункции

// Возвращает массив типов регламентных документов.
// Документы этих типов имеют "нестандартную" механику проведения по регистрам прочих доходов и расходов.
//
// Возвращаемое значение:
//	Массив из Тип - типы документов
//
Функция ТипыДокументовРегламентные() Экспорт
	
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РаспределениеДоходовПоНаправлениямДеятельности"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РаспределениеПрочихЗатрат"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РасчетКурсовыхРазниц"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РегистраторРасчетов"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПрочиеДоходыРасходы"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ДвижениеПрочихАктивовПассивов"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаПриобретения"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РасчетСебестоимостиТоваров"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	//++ НЕ УТ
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.НачислениеСписаниеРезервовПоСомнительнымДолгам"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.НачислениеПроцентовПоАренде"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПризнаниеРасходовПоИсследованиямИРазработкам"));
	//-- НЕ УТ
	РасчетСебестоимостиПодготовкаДанныхЛокализация.ДополнитьТипыРегистраторовСНестандартнойЛогикойФормированияДвижений(ТипыРегистраторов);
	Возврат ТипыРегистраторов;
	
КонецФункции

// Перепроводит документы по всем регистрам.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	Запрос - Запрос - запрос с текстом для формирования временной таблицы
//		ВТРегистраторыСНекорректнымиДвижениями с полями: Ссылка, Организация, КодОшибки
//		Указанные в этой временной таблице документы из поля Ссылка	будут перепроведены.
//	РасшифровкаКодовОшибок - Соответствие - описание ошибок
//		Ключ - Число, Строка - код ошибки из поля КодОшибки временной таблицы ВТРегистраторыСНекорректнымиДвижениями
//		Значение - Строка - пользовательское описание ошибки
//	ПричинаПерепроведения - Строка - описание причины, вызвавшей перепроведение документов.
//
Процедура ПерепровестиДокументы(ПараметрыРасчета, Запрос, РасшифровкаКодовОшибок, ПричинаПерепроведения) Экспорт
	
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	ПараметрыПроведения = ПроведениеДокументов.ИнициализироватьПараметрыВосстановленияДвижений(
		Запрос,
		РасшифровкаКодовОшибок,
		,
		"ВТРегистраторыДляПерепроведения");
	
	ПараметрыПроведения.Вставить("ПричинаПерепроведения", 					  	ПричинаПерепроведения);
	ПараметрыПроведения.Вставить("ТолькоРегистрироватьОшибки", 					ПараметрыРасчета.Отладка.ИгнорироватьНекорректныеПервичныеДвижения);
	ПараметрыПроведения.Вставить("ОперацииЗакрытияМесяца", 					  	Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
	ПараметрыПроведения.Вставить("ПериодРасчета", 							  	ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
	ПараметрыПроведения.Вставить("ЗаписыватьОшибкиВЖурналРегистрации", 		  	НЕ ЭтоПараметрыРасчетаПУ22);
	ПараметрыПроведения.Вставить("ИмяСобытияЖурналаРегистрации", 		  	  	ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ПараметрыПроведения.Вставить("ЭтапПроизводстваТолькоВТекущемПериоде", 	  	ЭтоПараметрыРасчетаПУ22);
	ПараметрыПроведения.Вставить("ВызываетсяИзРасчетаСебестоимости", 	  		Истина);
	
	// Перепроведение.
	РезультатПроведения = ПроведениеДокументов.ВосстановитьДвиженияДокументов(ПараметрыПроведения);
	
	// Обработка результатов перепроведения - время формирования ВТ.
	Для Каждого ОписаниеФормированияВТ Из РезультатПроведения.ВремяФормирования Цикл
		
		РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТРегистраторыСНекорректнымиДвижениями", ПричинаПерепроведения,, ОписаниеФормированияВТ.ВремяНачала);
		РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина,, ОписаниеФормированияВТ.ВремяОкончания);
		
	КонецЦикла;
	
	// Обработка результатов перепроведения - обработанные регистры.
	Для Каждого ОписаниеРегистра Из ПараметрыРасчета.Движения Цикл
		ОписаниеРегистра.Значение.НадоОбновитьРасчетныйКэш = Истина;
	КонецЦикла;
	
	// Обработка результатов перепроведения - итог перепроведения.
	РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
		ПараметрыРасчета,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обнаружены некорректные движения документов.
				|	  Причина: %1
				|	  Перепроведено документов: %2';
				|en = 'Incorrect document register records are found.
				|	  Reason: %1
				|	  Documents reposted: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПричинаПерепроведения,
			РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(РезультатПроведения.ПроведеноДокументов)));
	
	Если НЕ РезультатПроведения.ВыполненоУспешно Тогда
		
	 	// Остались некорректные записи, но выполнение расчета все равно продолжим.
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			РасчетСебестоимостиПротоколРасчета.СлужебныйСимвол_БезНумерации()
				+ НСтр("ru = 'После перепроведения остались документы с некорректными движениями:';
						|en = 'There are documents with incorrect records after reposting:'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	// Обработка результатов перепроведения - детальная информация об ошибках в движениях документов.
	Для Каждого РасшифровкаОшибок Из РезультатПроведения.РасшифровкаОшибок Цикл
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
			"#- " + НСтр("ru = 'ошибка';
						|en = 'error'", ОбщегоНазначения.КодОсновногоЯзыка())  + " """ + РасшифровкаОшибок.ТипОшибки + """:");
		
		Для Каждого РасшифровкаОшибки Из РасшифровкаОшибок.Подробнее Цикл
			
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВосстановленияДвиженийДокументов,
				РасшифровкаОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КэшированиеДанныхРегистров

// Инициализирует данные общего параметра расчета, описывающие указанный регистр.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - 
//
Процедура ИнициализироватьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	МетаРегистр = МетаданныеРегистра; //ОбъектМетаданныхРегистрНакопления
	Если ПараметрыРасчета.Движения.Свойство(МетаРегистр.Имя) Тогда
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка инициализации расчета: регистр %1 уже инициализирован';
				|en = 'An error occurred while initializing the calculation: the %1 register is already initiated'", ОбщегоНазначения.КодОсновногоЯзыка()),
			МетаРегистр.Имя);
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииПараметровРасчета,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецЕсли;
	
	ОписаниеРегистра = СформироватьОписаниеРегистра(МетаданныеРегистра);
	
	// Создадим временную таблицу для кэширования всех новых движений регистра
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		ОписаниеРегистра.ИмяТаблицыКэшаРегистра,
		ОписаниеРегистра.Таблица,
		ОписаниеРегистра.ПоляКэшаРегистра,
		ОписаниеРегистра.ИндексыРегистра);
		
	РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
		ПараметрыРасчета,
		1);
		
	// Добавим описание регистра в параметры расчета
	ПараметрыРасчета.Движения.Вставить(ОписаниеРегистра.ИмяРегистра, ОписаниеРегистра);
	
	// Создадим временную таблицу для кэширования записей основной таблицы регистра
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	// Создадим временную таблицу для кэширования расчетных остатков
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Уничтожает данные из общего параметра расчета, описывающие указанный регистр.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - 
Процедура УничтожитьДанныеРегистра(ПараметрыРасчета, МетаданныеРегистра) Экспорт
	
	Движения = ПараметрыРасчета.Движения; // Структура
	Движения.Удалить(МетаданныеРегистра.Имя);
	
КонецПроцедуры

// Формирует описание свойств и полей регистра, обслуживаемого механизмом расчета.
//
// Возвращаемое значение:
//	Структура -
//
Функция СформироватьОписаниеРегистра(МетаданныеРегистра) Экспорт
	
	ОписаниеРегистра = Новый Структура;
	ОписаниеРегистра.Вставить("ЭтоОписаниеРегистра", 		 Истина);
	ОписаниеРегистра.Вставить("ЭтоОписаниеВременнойТаблицы", Ложь);
	
	ОписаниеРегистра.Вставить("ИмяРегистра",          	  МетаданныеРегистра.Имя);
	ОписаниеРегистра.Вставить("ПолноеИмяРегистра",    	  МетаданныеРегистра.ПолноеИмя());
	ОписаниеРегистра.Вставить("Наименование",    	  	  МетаданныеРегистра.Представление());
	ОписаниеРегистра.Вставить("ЭтоРегистрНакопления", 	  Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра));
	ОписаниеРегистра.Вставить("ЭтоРегистрСебестоимости",  (МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров));
	
	ОписаниеРегистра.Вставить("ЕстьОрганизация", 		  МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено);
	ОписаниеРегистра.Вставить("ОрганизацияОбязательна",   ОписаниеРегистра.ЕстьОрганизация И МетаданныеРегистра.Измерения.Организация.ЗапрещатьНезаполненныеЗначения);
	ОписаниеРегистра.Вставить("ЕстьАналитикаПартнеров",   МетаданныеРегистра.Измерения.Найти("АналитикаУчетаПоПартнерам") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ЕстьТипЗаписи",		  	  МетаданныеРегистра.Реквизиты.Найти("ТипЗаписи") <> Неопределено
															ИЛИ МетаданныеРегистра.Измерения.Найти("ТипЗаписи") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетПартий",		  МетаданныеРегистра.Реквизиты.Найти("РасчетПартий") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетСебестоимости",  МетаданныеРегистра.Реквизиты.Найти("РасчетСебестоимости") <> Неопределено);
	ОписаниеРегистра.Вставить("ЕстьРасчетНеЗавершен",	  МетаданныеРегистра.Реквизиты.Найти("РасчетНеЗавершен") <> Неопределено);
	
	ОписаниеРегистра.Вставить("ИспользоватьВТКэш", 		  Истина); // при расчете кэша оборотов/остатков использовать ВТКэш
	ОписаниеРегистра.Вставить("НадоОбновитьРасчетныйКэш", Ложь); // были сформированы движения, еще не учтенные в расчетных остатках/записях
	
	ОписаниеРегистра.Вставить("КоличествоПорцийДанных",   0);  // при расчете этапа каждая порция сформированных движений сначала складывается в отдельные ВТ, а в конце этапа все они объединяются
	ОписаниеРегистра.Вставить("ИменаТаблицПорций",  	  ""); // имена всех ВТ порций вида ВТКэш<Имя регистра>_<НомерПорции от 1 до КоличествоПорцийДанных>
	
	ОписаниеРегистра.Вставить("ПодчиненРегистратору",	  НЕ РасчетСебестоимостиУниверсальныеАлгоритмы.ЭтоНезависимыйРегистрСведений(МетаданныеРегистра));
	ОписаниеРегистра.Вставить("ПериодическийРегистр",	  РасчетСебестоимостиУниверсальныеАлгоритмы.ЭтоПериодическийРегистрСведений(МетаданныеРегистра));
	
	Если ОписаниеРегистра.ЭтоРегистрНакопления Тогда
		МенеджерРегистра = РегистрыНакопления[ОписаниеРегистра.ИмяРегистра];
	Иначе
		МенеджерРегистра = РегистрыСведений[ОписаниеРегистра.ИмяРегистра];
	КонецЕсли;
	
	ОписаниеРегистра.Вставить("МетаданныеРегистра", 	  МетаданныеРегистра);
	ОписаниеРегистра.Вставить("МенеджерРегистра", 		  МенеджерРегистра);
	ОписаниеРегистра.Вставить("ЕстьСвойствоВидДвижения",
		ОписаниеРегистра.ЭтоРегистрНакопления И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	ОписаниеРегистра.Вставить("Периодический",
		НЕ ОписаниеРегистра.ЭтоРегистрНакопления И МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц);
	ОписаниеРегистра.Вставить("ЕстьСрезПоследних",
		НЕ ОписаниеРегистра.ЭтоРегистрНакопления И ОписаниеРегистра.Периодический И МетаданныеРегистра.РазрешитьИтогиСрезПоследних);
		
	ОписаниеРегистра.Вставить("ЕстьИзмененныеДанные", Ложь); // изменились ли данные регистра после расчета
	ОписаниеРегистра.Вставить("РегистрЗаписан", 	  Ложь); // выполнялась ли запись регистра
	
	ОбязательныеПоля = Новый Структура;
	НетипизируемыеПоля = Новый Структура;
	
#Область РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях

	// В конфигурации есть документы, которые могут делать движения по регистру (и/или)
	//	- в разных расчетных периодах (обязательно первичные + расчетные)
	//	- по разным организациям (любые виды движений)
	// Для таких документов при расчете надо сохранять не только первичные движения в расчетном периоде,
	// но и все (первичные + расчетные) движения по другим периодам и организациям.
	
	ОписаниеРегистра.Вставить("РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях", Новый Соответствие);
	
	ДокументыССохраняемымиДвижениями = ДокументыСРазнымиПериодамиИлиОрганизациямиВДвижениях(Истина, Истина, ОписаниеРегистра.ИмяРегистра);
	
	Для Каждого КлючИЗначение Из ДокументыССохраняемымиДвижениями Цикл
		Если КлючИЗначение.Ключ.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.РегистраторыСРазнымиПериодамиИлиОрганизациямиВДвижениях.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти

#Область ВсеРегистраторыРегистра
	
	ОписаниеРегистра.Вставить("ВсеРегистраторы", Новый Соответствие);
	
	Для Каждого МетаДок Из Метаданные.Документы Цикл
		Если МетаДок.Движения.Содержит(МетаданныеРегистра) Тогда
			ОписаниеРегистра.ВсеРегистраторы.Вставить(МетаДок.Имя);
		КонецЕсли;
	КонецЦикла;
	
#КонецОбласти

#Область Таблица

	// Таблица для накапливания формируемых движений
	НаборРегистра = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей.СебестоимостьТоваров - или любой другой обслуживаемый регистр 
	ОписаниеРегистра.Вставить("Таблица", НаборРегистра.ВыгрузитьКолонки());
	
	// Колонку "Регистратор" поместим на первое место
	Если ОписаниеРегистра.ПодчиненРегистратору Тогда
		
		КолонкаРегистратор = ОписаниеРегистра.Таблица.Колонки.Найти("Регистратор");
		ОписаниеРегистра.Таблица.Колонки.Сдвинуть(
			КолонкаРегистратор,
			-ОписаниеРегистра.Таблица.Колонки.Индекс(КолонкаРегистратор));
		
	КонецЕсли;
	
	// Для остаточных регистров накопления создадим служебную колонку СлужебноеВидДвиженияПриход.
	// В ней будем хранить булево представление вида движения (обход ошибки Платформы 30025997).
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ОписаниеРегистра.Таблица.Колонки.Вставить(0, "СлужебноеВидДвиженияПриход",	Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
#КонецОбласти
	
#Область ПоляРегистра

	// Список всех полей регистра, за исключением "техногенных"
	// Перед именем каждого поля стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	ПоляОсновнойТаблицыРегистра = ""; // здесь поле "ВидДвижения"
	ПоляКэшаРегистра  			= ""; // здесь поле "СлужебноеВидДвиженияПриход"
	ПоляКэшаРегистраТипизированные = ""; // здесь числовые поля типизированы
	ИгнорируемыеПоля  			= Новый Структура("НомерСтроки, Активность, МоментВремени, ВидДвижения");
	
	Для Каждого Колонка Из ОписаниеРегистра.Таблица.Колонки Цикл
		Если Колонка.Имя = "СлужебноеВидДвиженияПриход" Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + "ВидДвижения";
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + "СлужебноеВидДвиженияПриход";
			ПоляКэшаРегистраТипизированные = ПоляКэшаРегистраТипизированные
				+ ?(ПоляКэшаРегистраТипизированные = "", "", ", ") + "%1" + "СлужебноеВидДвиженияПриход";
		ИначеЕсли НЕ ИгнорируемыеПоля.Свойство(Колонка.Имя) Тогда
			ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра
				+ ?(ПоляОсновнойТаблицыРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			ПоляКэшаРегистра = ПоляКэшаРегистра
				+ ?(ПоляКэшаРегистра = "", "", ", ") + "%1" + Колонка.Имя;
			
			Если Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность > 0 Тогда
				
				ТипЧисла = Новый ОписаниеТипов("Число", Колонка.ТипЗначения.КвалификаторыЧисла);
				МаксимальноеЗначение = ТипЧисла.ПривестиЗначение(Pow(10, 40));
				
				ТекстМаксимальноеЗначение = Формат(МаксимальноеЗначение, "ЧРД=.; ЧН=0; ЧГ=");
				ТекстКолонка = "ВЫБОР КОГДА %1" + Колонка.Имя + " > " + ТекстМаксимальноеЗначение
					+ " ТОГДА " + ТекстМаксимальноеЗначение + " КОГДА %1" + Колонка.Имя + " < -" + ТекстМаксимальноеЗначение
					+ " ТОГДА -" + ТекстМаксимальноеЗначение + " ИНАЧЕ %1" + Колонка.Имя + " КОНЕЦ";
				
				ПоляКэшаРегистраТипизированные = ПоляКэшаРегистраТипизированные
					+ ?(ПоляКэшаРегистраТипизированные = "", "", ", ") + "ВЫРАЗИТЬ(" + ТекстКолонка + " КАК ЧИСЛО("
					+ СокрЛП(Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность) + ","
					+ СокрЛП(Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти) + ")) КАК " + Колонка.Имя;
				
			Иначе
				ПоляКэшаРегистраТипизированные = ПоляКэшаРегистраТипизированные
					+ ?(ПоляКэшаРегистраТипизированные = "", "", ", ") + "%1" + Колонка.Имя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ПоляОсновнойТаблицыРегистра",	ПоляОсновнойТаблицыРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистра",				ПоляКэшаРегистра);
	ОписаниеРегистра.Вставить("ПоляКэшаРегистраТипизированные",	ПоляКэшаРегистраТипизированные);
	
#КонецОбласти

#Область ИзмеренияРегистра

	// Список всех измерений регистра
	// Перед именем каждого измерения стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	ИзмеренияРегистра = "";
	Для Каждого Мета Из МетаданныеРегистра.Измерения Цикл
		
		ИзмеренияРегистра = ИзмеренияРегистра + ?(ИзмеренияРегистра = "", "", ", ") + "%1" + Мета.Имя;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку
		 ИЛИ Мета.ЗапрещатьНезаполненныеЗначения Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
		Если Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип
		 ИЛИ Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.Тип
		 ИЛИ Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип Тогда
			НетипизируемыеПоля.Вставить(Мета.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ИзмеренияРегистра", ИзмеренияРегистра);
	
#КонецОбласти

#Область РесурсыРегистра

	// Список всех ресурсов регистра
	// Перед именем каждого ресурса стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	РесурсыРегистра = "";
	РесурсыРегистраССуффиксом = "";
	Для Каждого Мета Из МетаданныеРегистра.Ресурсы Цикл
		
		РесурсыРегистра = РесурсыРегистра
			+ ?(РесурсыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		РесурсыРегистраССуффиксом = РесурсыРегистраССуффиксом
			+ ?(РесурсыРегистраССуффиксом = "", "", ", ") + "%1" + Мета.Имя + "%2 КАК " + Мета.Имя;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РесурсыРегистра", 		   РесурсыРегистра);
	ОписаниеРегистра.Вставить("РесурсыРегистраССуффиксом", РесурсыРегистраССуффиксом);
	
#КонецОбласти

#Область РеквизитыРегистра

	// Список всех реквизитов регистра
	// Перед именем каждого реквизиты стоят символы "%1" - для автоподстановки имен таблиц в запросах.
	РеквизитыРегистра = "";
	ЧисловыеРеквизитыРегистра = ""; // реквизиты регистра, хранящие суммовые показатели (аналогично ресурсам)
	
	Для Каждого Мета Из МетаданныеРегистра.Реквизиты Цикл
		
		РеквизитыРегистра = РеквизитыРегистра
			+ ?(РеквизитыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		
		Если ЭтоСуммируемыйРеквизитРегистра(Мета) Тогда // в некоторых регистрах НДС хранится в реквизитах
			ЧисловыеРеквизитыРегистра = ЧисловыеРеквизитыРегистра
				+ ?(ЧисловыеРеквизитыРегистра = "", "", ", ") + "%1" + Мета.Имя;
		КонецЕсли;
		
		Если Мета.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеПоля.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение(Неопределено));
		КонецЕсли;
		
		Если Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип
		 ИЛИ Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиДоходов.Тип
		 ИЛИ Мета.Тип = Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип Тогда
			НетипизируемыеПоля.Вставить(Мета.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("РеквизитыРегистра", 		   РеквизитыРегистра);
	ОписаниеРегистра.Вставить("ЧисловыеРеквизитыРегистра", ЧисловыеРеквизитыРегистра);
	ОписаниеРегистра.Вставить("НетипизируемыеПоля", 	   НетипизируемыеПоля);
	
#КонецОбласти

#Область ИндексыРегистра

	// Описание индексов для таблиц вида ВТКэшРасчетныеОбороты... и ВТКэшРасчетныеОстатки...
	ИндексыРегистра = "";
	
	Если МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты Тогда
		
		ИндексыРегистра = "АналитикаУчетаНоменклатуры, Организация, Партия";
		
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров
	 ИЛИ МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты Тогда
			
		ИндексыРегистра = "Партия, Организация, Номенклатура";
		
	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства Тогда
		
		ИндексыРегистра = "СтатьяРасходов, Организация, ПартияПроизводства";
		
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов Тогда
		
		ИндексыРегистра = "ВидРезервов, Организация, ОбъектУчетаРезервов";
		
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииНДСКРаспределению Тогда
		
		ИндексыРегистра = "СтатьяРасходов, Организация, ДокументПоступленияРасходов";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
		
		// Добавим индексы по всем индексируемым изменениям регистра для оптимизации запроса в ОбновитьРасчетныеОстаткиРегистра()
		Для Каждого МетаИзмерение Из МетаданныеРегистра.Измерения Цикл
			Если МетаИзмерение.Индексирование = Метаданные.СвойстваОбъектов.Индексирование.Индексировать Тогда
				ИндексыРегистра = ИндексыРегистра + ?(ИндексыРегистра = "", "", ", ") + МетаИзмерение.Имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеРегистра.Вставить("ИндексыРегистра", ИндексыРегистра);
	
#КонецОбласти

#Область ПоляОтбораНепустыхДвижений

	ПоляОтбораНепустыхДвижений = РесурсыРегистра
		+ ?(РесурсыРегистра = "" ИЛИ ЧисловыеРеквизитыРегистра = "", "", ", ") + ЧисловыеРеквизитыРегистра;

	ОписаниеРегистра.Вставить("ПоляОтбораНепустыхДвижений", ПоляОтбораНепустыхДвижений);
	
#КонецОбласти

#Область ОтборНекорректныхДвижений

	Если ОписаниеРегистра.ПодчиненРегистратору Тогда
		ОбязательныеПоля.Вставить("Регистратор", Неопределено);
	КонецЕсли;
	
	ТекстПроверки = "";
	
	Для Каждого КлючИЗначение Из ОбязательныеПоля Цикл
		
		ПустоеЗначение = КлючИЗначение.Значение;
		ТекстЗначение = "";
		
		Если ПустоеЗначение = Неопределено Тогда
			ТекстЗначение = "НЕОПРЕДЕЛЕНО";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Строка") Тогда
			ТекстЗначение = """""";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Число") Тогда
			ТекстЗначение = "0";
		ИначеЕсли ТипЗнч(ПустоеЗначение) = Тип("Дата") Тогда
			ТекстЗначение = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		Иначе
			Мета = Метаданные.НайтиПоТипу(ТипЗнч(ПустоеЗначение));
			Если Мета <> Неопределено Тогда
				ТекстЗначение = "ЗНАЧЕНИЕ(" + Мета.ПолноеИмя() + ".ПустаяСсылка)";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗначение) Тогда
			
			ТекстПроверки = ТекстПроверки + ?(ТекстПроверки = "", "", Символы.ПС + "	ИЛИ ")
				+ "Т." + КлючИЗначение.Ключ + " = " + ТекстЗначение;
				
			ОписаниеРегистра.Таблица.Индексы.Добавить(КлючИЗначение.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеРегистра.Вставить("ОбязательныеПоля", 				ОбязательныеПоля);
	ОписаниеРегистра.Вставить("ТекстПроверкиОбязательныхПолей", ТекстПроверки);
	
#КонецОбласти
	
#Область ИменаВременныхТаблицРегистра
	
	Если МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшВыручкаИСебестоимостьПродаж");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыВыручкаИСебестоимостьПродаж");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиВыручкаИСебестоимостьПродаж");
	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ВыпускПродукции Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшВыпускПродукции");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыВыпускПродукции");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиВыпускПродукции");
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияДоходыРасходыПрочиеАктивыПассивы Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДвиженияДоходыРасходыПрочиеАктивыПассивы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДвиженияДоходыРасходыПрочиеАктивыПассивы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДвиженияДоходыРасходыПрочиеАктивыПассивы");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДвиженияНоменклатураДоходыРасходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДвиженияНоменклатураДоходыРасходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДвиженияНоменклатураДоходыРасходы");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДвиженияНоменклатураНоменклатура");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДвиженияНоменклатураНоменклатура");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДвиженияНоменклатураНоменклатура");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДвиженияПоПрочимАктивамПассивам");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДвиженияПоПрочимАктивамПассивам");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДвиженияПоПрочимАктивамПассивам");
	//++ Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияПартийТоваровДляНДСиУСН");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияПартийТоваровДляНДСиУСН");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияПартийТоваровДляНДСиУСН");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4 Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияПартийТоваровДляНДСиУСН2_4");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияПартийТоваровДляНДСиУСН2_4");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияПартийТоваровДляНДСиУСН2_4");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваров Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияСебестоимостиТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияСебестоимостиТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияСебестоимостиТоваров");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияСебестоимостиТоваровПостатейныеЗатратыНЗП");
	//-- Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваров Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияСебестоимостиПартииТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияСебестоимостиПартииТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияСебестоимостиПартииТоваров");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.ДетализацияСебестоимостиТоваровПостатейныеЗатраты Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшДетализацияСебестоимостиТоваровПостатейныеЗатраты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыДетализацияСебестоимостиТоваровПостатейныеЗатраты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиДетализацияСебестоимостиТоваровПостатейныеЗатраты");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.Закупки Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшЗакупки");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыЗакупки");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиЗакупки");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшМатериалыИРаботыВПроизводстве");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыМатериалыИРаботыВПроизводстве");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиМатериалыИРаботыВПроизводстве");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.НДСПредъявленный Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшНДСПредъявленный");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыНДСПредъявленный");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиНДСПредъявленный");
	//++ Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииЗатратНаВыпуск Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииЗатратНаВыпуск");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииЗатратНаВыпуск");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииЗатратНаВыпуск");
	//-- Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииНДСКРаспределению Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииНДСКРаспределению");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииНДСКРаспределению");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииНДСКРаспределению");
	//++ Локализация

	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииНезавершенногоПроизводства Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииНезавершенногоПроизводства");
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПроизводственныхЗатрат Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииПроизводственныхЗатрат");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииПроизводственныхЗатрат");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииПроизводственныхЗатрат");
	//-- Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииПрочихРасходов Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииПрочихРасходов");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииПрочихРасходов");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииПрочихРасходов");
	//++ Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииРасходовНаСебестоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииРасходовНаСебестоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииРасходовНаСебестоимостьТоваров");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииТоваровОрганизаций");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииТоваровОрганизаций");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииТоваровОрганизаций");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПартииТоваровПереданныеНаКомиссию");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПартииТоваровПереданныеНаКомиссию");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПартииТоваровПереданныеНаКомиссию");
	//-- Локализация
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочаяВыручка Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПрочаяВыручка");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПрочаяВыручка");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПрочаяВыручка");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПрочиеАктивыПассивы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПрочиеАктивыПассивы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПрочиеАктивыПассивы");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеДоходы Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПрочиеДоходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПрочиеДоходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПрочиеДоходы");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходы Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПрочиеРасходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПрочиеРасходы");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПрочиеРасходы");
	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшПрочиеРасходыНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыПрочиеРасходыНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиПрочиеРасходыНезавершенногоПроизводства");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшРезервыПредстоящихРасходов");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыРезервыПредстоящихРасходов");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиРезервыПредстоящихРасходов");
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшСебестоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыСебестоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиСебестоимостьТоваров");
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.СтоимостьТоваров Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшСтоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыСтоимостьТоваров");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиСтоимостьТоваров");
	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыСведений.СтоимостьТМЦВЭксплуатации Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшСтоимостьТМЦВЭксплуатации");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыСтоимостьТМЦВЭксплуатации");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиСтоимостьТМЦВЭксплуатации");
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ТоварыОрганизаций Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшТоварыОрганизаций");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыТоварыОрганизаций");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиТоварыОрганизаций");
	//++ НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшТрудозатратыНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыТрудозатратыНезавершенногоПроизводства");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиТрудозатратыНезавершенногоПроизводства");
	//-- НЕ УТ
	ИначеЕсли МетаданныеРегистра = Метаданные.РегистрыНакопления.ФинансовыеРезультаты Тогда
	    ОписаниеРегистра.Вставить("ИмяТаблицыКэшаРегистра", "ВТКэшФинансовыеРезультаты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОборотовРегистра", "ВТКэшРасчетныеОборотыФинансовыеРезультаты");
	    ОписаниеРегистра.Вставить("ИмяТаблицыРасчетныхОстатковРегистра", "ВТКэшРасчетныеОстаткиФинансовыеРезультаты");
	ИначеЕсли РасчетСебестоимостиЛокализация.ПроверитьМетаданныеРегистраФактическиеРасходыНДДПроизводствоРеализация(МетаданныеРегистра) Тогда
		РасчетСебестоимостиЛокализация.ВставитьОписаниеСлужебныхВременныхТаблицРегистраФактическиеРасходыНДДПроизводствоРеализация(ОписаниеРегистра);
	Иначе
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для регистра ""%1"" не заданы имена служебных временных таблиц';
				|en = 'Internal temporary table names are not specified for the ""%1"" register'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ОписаниеРегистра.ПолноеИмяРегистра);
			
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
#КонецОбласти

	Возврат ОписаниеРегистра;
	
КонецФункции


// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	
	Если ОписаниеДвижений.РаспределениеНеТребуется Тогда // выполняется трансляция партий
		КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения);
		Возврат;
	КонецЕсли;
	
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ПоляИндексирования   = ОписаниеДвижений.ПоляИндексирования;
	
	РасчетныеПартии 	 = ПараметрыРасчета.РаспределениеПартий.РасчетныеПартии;
	НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;
	
	// Для целей тестирования используется таблица ВсеРасчетныеПартии, в которой накапливаются все данные из РасчетныеПартии.
	НакапливатьРасчетныеПартии = ПараметрыРасчета.РаспределениеПартий.Свойство("ВсеРасчетныеПартии");
	
	ВыгрузитьТаблицуПромежуточныхДанныхРасчета(ПараметрыРасчета, "РасчетныеПартии", РасчетныеПартии);
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		КопируемыеПоля = ОбщиеКолонкиИсточникаИПриемникаДанных(ПараметрыРасчета, РасчетныеПартии, ИмяРегистра);
		
		Для Каждого РасчетнаяПартия Из РасчетныеПартии Цикл
			
			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(
					ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
					РасчетнаяПартия);
			КонецЕсли;
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим партию в движения и заполним его свойства
			ПараметрыРасчета.МодульМеханизмаРасчета.ДобавитьЗаписьВТаблицуДвижений(
				ПараметрыРасчета,
				ИмяРегистра,
				РасчетнаяПартия,
				КопируемыеПоля,
				Новый Структура("РасчетНеЗавершен", НЕ РасчетнаяПартия.РасчетЗавершен));
			
		КонецЦикла;
		
		РасчетныеПартии.Очистить(); // закэшировали в движения
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		// Удалим незаписываемые строки
		ИндексСтроки = 0;
		
		Пока ИндексСтроки <= РасчетныеПартии.Количество() - 1 Цикл
			
			РасчетнаяПартия = РасчетныеПартии[ИндексСтроки];
			
			Если НакапливатьРасчетныеПартии Тогда
				ЗаполнитьЗначенияСвойств(
					ПараметрыРасчета.РаспределениеПартий.ВсеРасчетныеПартии.Добавить(),
					РасчетнаяПартия);
			КонецЕсли;
			
			Если РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Тогда
				РасчетныеПартии.Удалить(РасчетнаяПартия);
			Иначе
				ИндексСтроки = ИндексСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Составим перечень значимых колонок таблицы расчетных партий
		ИменаЧисловыхКолонок	 = "";
		ИменаНеЧисловыхКолонок	 = "";
		
		ВременнаяТаблицаСуществует = ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяВременнойТаблицы);
		
		Если ВременнаяТаблицаСуществует Тогда 
			ИсточникКолонок = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяВременнойТаблицы, 0).Колонки;
		Иначе
			ИсточникКолонок = РасчетныеПартии.Колонки;
		КонецЕсли;
		
		Для Каждого Колонка Из ИсточникКолонок Цикл
			
			Если НЕ ВременнаяТаблицаСуществует
			 И (Колонка.Имя = ИмяКолонкиДляНумерацииПоУмолчанию()
			 	ИЛИ Колонка.Имя = "Приоритет"
			 	ИЛИ ((Колонка.Имя = ОписаниеДвижений.БазисПрихода
			 	  ИЛИ Колонка.Имя = ОписаниеДвижений.БазисРасхода)
				    И Колонка.Имя <> "Количество")) Тогда
				// Из расчетных партий не берем служебные поля, из временной таблицы берем все поля.
				Продолжить;
			ИначеЕсли ЭтоСуммируемаяКолонкаТаблицы(Колонка) Тогда
				ИменаЧисловыхКолонок = ИменаЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			Иначе
				ИменаНеЧисловыхКолонок = ИменаНеЧисловыхКолонок + ?(ИменаНеЧисловыхКолонок = "", "", ", ")
					+ "%1" + Колонка.Имя;
			КонецЕсли;
			
			Если ВременнаяТаблицаСуществует И РасчетныеПартии.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
				РасчетныеПартии.Колонки.Добавить(
					Колонка.Имя,
					РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(Колонка.ТипЗначения));
			КонецЕсли;
			
		КонецЦикла;
		
		ИменаКолонок = ИменаНеЧисловыхКолонок + ?(ИменаЧисловыхКолонок = "", "", ", " + ИменаЧисловыхКолонок);
		
		// Поместим таблицу расчетных партий во временную таблицу (произвольную - не являющуюся кэшем регистра).
		ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных("РаспределениеПартий", ПараметрыРасчета.РаспределениеПартий);
	
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
			ПараметрыРасчета,
			ИмяТаблицыПорции,
			РасчетныеПартии,
			ИменаКолонок);
		
		РасчетныеПартии.Очистить(); // закэшировали во временную таблицу
		
		Если ОкончаниеРаспределения Тогда
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				ПараметрыРасчета.РаспределениеПартий.ИменаТаблицПорций,
				ИмяВременнойТаблицы,
				ИменаКолонок,
				ИменаЧисловыхКолонок,
				ПоляИндексирования,
				Истина);
			
			ПараметрыРасчета.РаспределениеПартий.КоличествоПорцийДанных = 0;
			ПараметрыРасчета.РаспределениеПартий.ИменаТаблицПорций = "";
			
		КонецЕсли;
			
	Иначе
		// С таблицей РасчетныеПартии ничего не делаем - она будет накапливать в себе записи до окончания распределения.
		// При этом для нее не действует ограничение на превышение максимального размера таблицы значений (КоличествоСтрокВТЗ).
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		
		ЗавершитьВыгрузкуПромежуточныхДанныхРасчета(ПараметрыРасчета);
		
		ПараметрыРасчета.Удалить("РаспределениеПартий");
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость сохранения указанной расчетной партии.
//
// Возвращаемое значение:
//	Булево -
//
Функция РасчетнаяПартияНеЗаписывается(РасчетнаяПартия, НезаписываемыеДанные) Экспорт
	
	Регистратор = РасчетнаяПартия.Регистратор; // ДокументСсылка
	
	Результат = (НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные
		И НЕ РасчетнаяПартия.РасчетЗавершен)
		ИЛИ НезаписываемыеДанные.НезаписываемыеТипыЗаписей[РасчетнаяПартия.ТипЗаписи] <> Неопределено
		ИЛИ (НезаписываемыеДанные.НезаписываемыеРазделы.Количество() > 0
		И НезаписываемыеДанные.НезаписываемыеРазделы[РасчетнаяПартия.РазделУчета] <> Неопределено)
		ИЛИ (ЗначениеЗаполнено(Регистратор) // если регистратор не заполнен, то эта ситуация будет обработана при добавлении движения
		И НезаписываемыеДанные.НезаписываемыеРегистраторы[Регистратор.Метаданные().Имя] <> Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Определяет, является ли указанная колонка таблицы значений колонкой для суммирования или для группировки.
//
Функция ЭтоСуммируемаяКолонкаТаблицы(Колонка)
	
	СтруктураИсключения = Новый Структура("Приоритет, КодСтроки, КодСтрокиПродукция"); // числовые реквизиты, которые не нужно суммировать
	СтруктураИсключения.Вставить(ИмяКолонкиДляНумерацииПоУмолчанию());
	
	Возврат Колонка.ТипЗначения.СодержитТип(Тип("Число")) И НЕ СтруктураИсключения.Свойство(Колонка.Имя);
	
КонецФункции

// Определяет, является ли указанный реквизит регистра подходящим для суммирования или для группировки.
//
Функция ЭтоСуммируемыйРеквизитРегистра(МетаРеквизит)
	
	Если СтрНайти(МетаРеквизит.Имя, "НДС") = 0 Тогда
		Возврат Ложь; // суммируем только реквизиты с НДС
	КонецЕсли;
	
	ОписаниеПоля = Новый Структура("Имя, ТипЗначения", МетаРеквизит.Имя, МетаРеквизит.Тип);
	
	Возврат ЭтоСуммируемаяКолонкаТаблицы(ОписаниеПоля);
	
КонецФункции

// Переносит распределенные партии в таблицу движений регистра.
//
Процедура КэшироватьТранслируемыеПартии(ПараметрыРасчета, ОкончаниеРаспределения = Истина) Экспорт
	
	Если НЕ ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		// На этом этапе расчета не выполняется распределение партий
		Возврат;
	КонецЕсли;
	
	ОписаниеДвижений 	 = ПараметрыРасчета.РаспределениеПартий.ОписаниеДвижений;
	ИмяРегистра 		 = ОписаниеДвижений.ИмяРегистра;
	ИмяВременнойТаблицы  = ОписаниеДвижений.ИмяВременнойТаблицы;
	ИмяТаблицыДанных  	 = "Данные";
	
	Если ЗначениеЗаполнено(ИмяРегистра) Тогда
		
		СформироватьДвиженияПоРегиструПоДаннымВременнойТаблицы(ПараметрыРасчета, ИмяРегистра, ИмяТаблицыДанных,,, Истина);
		
	ИначеЕсли ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		
		СформироватьДвиженияВоВременнойТаблицеПоДругойВременнойТаблице(ПараметрыРасчета,, Ложь);
		
	Иначе
		// Не указана таблица-приемник, ничего не делаем.
	КонецЕсли;
	
	Если ОкончаниеРаспределения Тогда
		ПараметрыРасчета.Удалить("РаспределениеПартий");
	КонецЕсли;
	
КонецПроцедуры

// Переносит новые движения регистра из таблицы значений во временную таблицу.
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвижения(ПараметрыРасчета, ТаблицаПриемник = Неопределено, ОкончаниеЭтапа = Истина) Экспорт
	
	Если ОкончаниеЭтапа Тогда
		// При окончании этапа таблицу распределения партий надо перенести в таблицу движений регистра
		// или во временную таблицу, в зависимости от настроек распределения.
		КэшироватьРаспределенныеПартии(ПараметрыРасчета, ОкончаниеЭтапа);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		Если ТаблицаПриемник <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ТаблицаПриемник) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
			
			ПроверитьФормированиеДвиженийПоЗаписанномуРегистру(ОписаниеРегистра);
		
			// Переместим сформированные движения из ОписаниеРегистра.Таблица во временную таблицу ВТКэш.
			
			ЭтоРегистрСебестоимости = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
			ЭтоРегистрВыручки = (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
			
			// Заполним служебное поле РасчетСебестоимости
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(НЕ ПараметрыРасчета.ИдетРасчетПартий, "РасчетСебестоимости");
			КонецЕсли;
			
			// Заполним служебное поле РасчетПартий
			// (для этапа заполнения партий в себестоимости этот признак устанавливается в функции ДобавитьЗаписьВТаблицуДвижений).
			Если ОписаниеРегистра.ЕстьРасчетПартий
			 И НЕ (ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости)
			 И НЕ (ЭтоРегистрВыручки И ПараметрыРасчета.ЗаполняютсяПартииВВыручке) Тогда
				ОписаниеРегистра.Таблица.ЗаполнитьЗначения(ПараметрыРасчета.ИдетРасчетПартий, "РасчетПартий");
			КонецЕсли;
			
			Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
				Для Каждого Запись Из ОписаниеРегистра.Таблица Цикл
					Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
				КонецЦикла;
			КонецЕсли;
			
			// Проверим заполненность обязательных полей.
			НекорректныеРегистраторы = Новый Соответствие; 
			
			Для Каждого ОписаниеПоля Из ОписаниеРегистра.ОбязательныеПоля Цикл
				
				СтруктураПоиска    = Новый Структура(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
				НекорректныеСтроки = ОписаниеРегистра.Таблица.НайтиСтроки(СтруктураПоиска);
					
				Для Каждого ДанныеДвижения Из НекорректныеСтроки Цикл
					
					// Выведем информацию об ошибке в сформированных движениях.
					// Информацию о проблеме с регистратором выводится в процедурах ДобавитьЗаписьВТаблицуДвижений.
					Если НекорректныеРегистраторы.Получить(ДанныеДвижения.Регистратор) = Неопределено
					 И ОписаниеПоля.Ключ <> "Регистратор" Тогда
						
						НекорректныеРегистраторы.Вставить(ДанныеДвижения.Регистратор, Истина);
						
						Если ОписаниеРегистра.ЕстьОрганизация Тогда
							ОрганизацияСПроблемой = ДанныеДвижения.Организация;
						ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
							ОрганизацияПоАналитикеПартнеров = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров; // Соответствие
							ОрганизацияСПроблемой = ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
						Иначе
							ОрганизацияСПроблемой = Неопределено;
						КонецЕсли;
						
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'По документу ""%1"" сформированы движения по регистру ""%2"" с незаполненными обязательными полями';
								|en = 'Records in the ""%2"" register with empty required fields are generated for the ""%1"" document'", ОбщегоНазначения.КодОсновногоЯзыка()),
							СокрЛП(ДанныеДвижения.Регистратор),
							ОписаниеРегистра.ИмяРегистра);
						
						РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
							ПараметрыРасчета,
							Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
							ТекстДляПротокола);
						
						ЗарегистрироватьПроблемуВыполненияРасчета(
							ПараметрыРасчета,
							ОрганизацияСПроблемой,
							НСтр("ru = 'При формировании движений диагностированы ошибки';
								|en = 'Errors were found when generating the movements'", ОбщегоНазначения.КодОсновногоЯзыка()),
							ТекстДляПротокола,
							ДанныеДвижения.Регистратор);
							
					КонецЕсли;
					
					ОписаниеРегистра.Таблица.Удалить(ДанныеДвижения);
					
				КонецЦикла;
					
			КонецЦикла;
			
			Если ОписаниеРегистра.Таблица.Количество() > 0 Тогда
				
				ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных(ОписаниеРегистра.ИмяТаблицыКэшаРегистра, ОписаниеРегистра);
				
				ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
					ПараметрыРасчета,
					ИмяТаблицыПорции,
					ОписаниеРегистра.Таблица,
					ОписаниеРегистра.ПоляКэшаРегистра,
					ОписаниеРегистра.ИндексыРегистра);
				
				// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу.
				ОписаниеРегистра.Таблица.Очистить();
				
				// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты.
				ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа Тогда
			
			ИмяПромежуточнойТаблицы = "ВТТаблицаДвиженийНетипизированная";
			
			ОбъединитьВременныеТаблицы(
				ПараметрыРасчета,
				ОписаниеРегистра.ИменаТаблицПорций,
				ИмяПромежуточнойТаблицы,
				ОписаниеРегистра.ПоляКэшаРегистра,
				ОписаниеРегистра.ПоляОтбораНепустыхДвижений,
				,
				Истина);
			
			ОписаниеРегистра.КоличествоПорцийДанных = 0;
			ОписаниеРегистра.ИменаТаблицПорций = "";
			
			Если ВременнаяТаблицаСуществует(ПараметрыРасчета, ИмяПромежуточнойТаблицы) Тогда
				
				СоответствиеВременныхТаблицДвижений = Новый Соответствие;
				СоответствиеВременныхТаблицДвижений.Вставить(ИмяПромежуточнойТаблицы, ОписаниеРегистра.ИмяРегистра);
				
				КэшироватьСформированныеДвиженияИзВременныхТаблиц(
					ПараметрыРасчета,
					СоответствиеВременныхТаблицДвижений,
					Истина,
					Ложь,
					// На этапах заполнения партий в себестоимости товаров и выручке и себестоимости продаж типизация значений не выполняется.
					НЕ ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости И НЕ ПараметрыРасчета.ЗаполняютсяПартииВВыручке); // ТипизироватьЗначения
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОкончаниеЭтапа И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			 И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда       // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			 И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда      // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.ВспомогательныеВременныеТаблицы Цикл
		
		Если ТаблицаПриемник <> Неопределено И НРег(КлючИЗначение.Ключ) <> НРег(ТаблицаПриемник) Тогда
			Продолжить; // если явно задано имя регистра, то надо обработать только его
		КонецЕсли;
		
		ОписаниеТаблицы = КлючИЗначение.Значение;
		
		Если ОписаниеТаблицы.Таблица.Количество() > 0 Тогда
			
			// Переместим сформированные движения из ОписаниеТаблицы.Таблица в нужную временную таблицу.
			
			Если ОписаниеТаблицы.ЕстьСвойствоВидДвижения Тогда
				
				Для Каждого Запись Из ОписаниеТаблицы.Таблица Цикл
					
					// Дозаполним поле СлужебноеВидДвиженияПриход
					Если ОписаниеТаблицы.ЕстьСвойствоВидДвижения Тогда
						Запись.СлужебноеВидДвиженияПриход = (Запись.ВидДвижения = ВидДвиженияНакопления.Приход);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Добавим информацию в протокол 
			РасчетСебестоимостиПротоколРасчета.КэшированиеСформированныхЗаписейВТ(
				ПараметрыРасчета,
				КлючИЗначение.Ключ,
				ОписаниеТаблицы.Таблица.Количество());
			
			ИмяТаблицыПорции = ИмяТаблицыСледующейПорцииДанных(КлючИЗначение.Ключ, ОписаниеТаблицы);
			
			ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
				ПараметрыРасчета,
				ИмяТаблицыПорции,
				ОписаниеТаблицы.Таблица,
				ОписаниеТаблицы.ПоляТаблицы);
				
			// Очистим накопленные в таблице значений записи - они перемещены во временную таблицу.
			ОписаниеТаблицы.Таблица.Очистить();
			
			Если ОкончаниеЭтапа Тогда
				
				ОбъединитьВременныеТаблицы(
					ПараметрыРасчета,
					ОписаниеТаблицы.ИменаТаблицПорций,
					КлючИЗначение.Ключ,
					ОписаниеТаблицы.ПоляТаблицы,
					ОписаниеТаблицы.СуммируемыеПоля,
					,
					Истина);
				
				ОписаниеТаблицы.КоличествоПорцийДанных = 0;
				ОписаниеТаблицы.ИменаТаблицПорций = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит новые движения регистра из временных таблиц в кэш (временную таблицу).
// Процедуру необходимо вызывать в конце каждого этапа, на котором формируются какие-то движения,
// если эти движения были сохранены во временной таблице.
// Иначе следующий этап может не учесть движения предыдущего.
//
Процедура КэшироватьСформированныеДвиженияИзВременныхТаблиц(ПараметрыРасчета, СоответствиеВременныхТаблицДвижений,
			УдалятьВременныеТаблицы = Ложь, ОбновлятьРасчетныеКэши = Истина, ТипизироватьЗначения = Ложь) Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
		ПараметрыРасчета,
		"КэшироватьСформированныеДвиженияИзВременныхТаблиц",
		НСтр("ru = 'Кэширование движений из временных таблиц';
			|en = 'Cache temporary table register records'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
	СоответствиеРегистров = Новый Соответствие;
	
	Для Каждого КлючИЗначениеВт Из СоответствиеВременныхТаблицДвижений Цикл
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[КлючИЗначениеВт.Значение];
		
		ПроверитьФормированиеДвиженийПоЗаписанномуРегистру(ОписаниеРегистра);
		
		КоличествоСтрокТаблицы = РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ);
		
		Если КоличествоСтрокТаблицы > 0 Тогда
			
			// проверка пустого регистратора производится здесь
			Если ОписаниеРегистра.ЭтоОписаниеРегистра И ОписаниеРегистра.ПодчиненРегистратору Тогда
				
				ТаблицаПриемник = ОписаниеРегистра.ИмяРегистра;
				
				Запрос = Новый Запрос;
				ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
				
				Запрос.Текст = ПолучитьЗаголовокЗапроса();
				
				Если ОписаниеРегистра.ЕстьОрганизация Тогда
					Запрос.Текст = Запрос.Текст + "
					|	Организация КАК Организация,";
				ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
					Запрос.Текст = Запрос.Текст + "
						|	АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|	Регистратор КАК Регистратор,
				|	Регистратор КАК ДокументДвижения
				|ИЗ
				|	" + КлючИЗначениеВт.Ключ + "
				|ГДЕ
				|	Регистратор ЕСТЬ NULL
				|	ИЛИ Регистратор = Неопределено
				|	ИЛИ (НЕ ТИПЗНАЧЕНИЯ(Регистратор) В(" + ДоступныеТипыРегистратора(ТаблицаПриемник) + "))
				|";
				
				ДанныеДвижения = Запрос.Выполнить().Выбрать();
				Пока ДанныеДвижения.Следующий() Цикл

					Если ОписаниеРегистра.ЕстьОрганизация Тогда
						ОрганизацияСПроблемой = ДанныеДвижения.Организация;
					ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
						ОрганизацияПоАналитикеПартнеров = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров; // Соответствие
						ОрганизацияСПроблемой = ОрганизацияПоАналитикеПартнеров.Получить(ДанныеДвижения.АналитикаУчетаПоПартнерам);
					Иначе
						ОрганизацияСПроблемой = Неопределено;
					КонецЕсли;
						
					Если ОписаниеРегистра.ПодчиненРегистратору И НЕ ЗначениеЗаполнено(ДанныеДвижения.Регистратор) Тогда
						// Ошибка в запросах - не заполнено обязательное поле ДокументДвижения.
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не заполнено свойство %1 для движения по регистру ""%2"" (период %3, организация ""%4"")';
								|en = 'The %1 property for the ""%2"" register record is not filled in (period %3, company ""%4"")'", ОбщегоНазначения.КодОсновногоЯзыка()),
							"ДокументДвижения",
							ТаблицаПриемник,
							РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета),
							ОрганизацияСПроблемой);
					ИначеЕсли ОписаниеРегистра.ПодчиненРегистратору Тогда
						// Ошибка в метаданных - документ не является регистратором для данного регистра.
						ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Документ ""%1"" не может иметь движений по регистру ""%2"" (период %3, организация ""%4"")';
								|en = 'The ""%1"" document cannot have the ""%2"" register records (period %3, company ""%4"")'", ОбщегоНазначения.КодОсновногоЯзыка()),
							СокрЛП(ДанныеДвижения.Регистратор),
							ТаблицаПриемник,
							РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета),
							ОрганизацияСПроблемой);
					КонецЕсли;
					
					РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
						ПараметрыРасчета,
						Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
						ТекстДляПротокола);
					
					ЗарегистрироватьПроблемуВыполненияРасчета(
						ПараметрыРасчета,
						ОрганизацияСПроблемой,
						НСтр("ru = 'При формировании движений диагностированы ошибки';
							|en = 'Errors were found when generating the movements'", ОбщегоНазначения.КодОсновногоЯзыка()),
						ТекстДляПротокола,
						ДанныеДвижения.ДокументДвижения);
						
				КонецЦикла;
				
			КонецЕсли;
			
			// Проверим заполненность обязательных полей.
			НекорректныеРегистраторы = Новый Соответствие; 
			
			Запрос = Новый Запрос;
			ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
			
			Запрос.Текст = ПолучитьЗаголовокЗапроса();
			
			Если НЕ ОписаниеРегистра.ПодчиненРегистратору Тогда
				Запрос.Текст = Запрос.Текст + "
				|	Т.Организация КАК Организация";
			ИначеЕсли ОписаниеРегистра.ЕстьОрганизация Тогда
				Запрос.Текст = Запрос.Текст + "
				|	Т.Организация КАК Организация,";
			ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
				Запрос.Текст = Запрос.Текст + "
					|	Т.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,";
			КонецЕсли;
			
			Если ОписаниеРегистра.ПодчиненРегистратору Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	Т.Регистратор КАК Регистратор,
				|	Т.Регистратор КАК ДокументДвижения
				|ИЗ
				|	" + КлючИЗначениеВт.Ключ + " КАК Т
				|ГДЕ
				|	НЕ Регистратор ЕСТЬ NULL
				|	И Регистратор <> Неопределено
				|	И (ТИПЗНАЧЕНИЯ(Регистратор) В(" + ДоступныеТипыРегистратора(ТаблицаПриемник) + "))
				|	И (" + ОписаниеРегистра.ТекстПроверкиОбязательныхПолей + ")";
				
			Иначе 
				
				Запрос.Текст = Запрос.Текст + "
				|	,НЕОПРЕДЕЛЕНО КАК Регистратор
				|ИЗ
				|	" + КлючИЗначениеВт.Ключ + " КАК Т";
				
				Если ЗначениеЗаполнено(ОписаниеРегистра.ТекстПроверкиОбязательныхПолей) Тогда
					Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	(" + ОписаниеРегистра.ТекстПроверкиОбязательныхПолей + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|ГДЕ
					|	ЛОЖЬ";
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатПроверки = Запрос.Выполнить();
			Выборка = РезультатПроверки.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НекорректныеРегистраторы.Вставить(Выборка.Регистратор, Истина);
				
				Если ОписаниеРегистра.ЕстьОрганизация Тогда
					ОрганизацияСПроблемой = Выборка.Организация;
				ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
					ОрганизацияПоАналитикеПартнеров = ПараметрыРасчета.ОрганизацияПоАналитикеПартнеров; // Соответствие
					ОрганизацияСПроблемой = ОрганизацияПоАналитикеПартнеров.Получить(Выборка.АналитикаУчетаПоПартнерам);
				Иначе
					ОрганизацияСПроблемой = Неопределено;
				КонецЕсли;
				
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По документу ""%1"" сформированы движения  по регистру ""%2"" с незаполненными обязательными полями';
						|en = 'Records in the ""%2"" register with empty required fields are generated for the ""%1""  document'", ОбщегоНазначения.КодОсновногоЯзыка()),
					СокрЛП(Выборка.Регистратор),
					ОписаниеРегистра.ИмяРегистра);
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
					ТекстДляПротокола);
				
				ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыРасчета,
					ОрганизацияСПроблемой,
					НСтр("ru = 'При формировании движений диагностированы ошибки';
						|en = 'Errors were found when generating the movements'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ТекстДляПротокола,
					Выборка.Регистратор);
				
			КонецЦикла;
			
			КолонкиИсточника = КолонкиВременнойТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ, Ложь);
			ИсточникКолонок = ПараметрыРасчета.Движения[КлючИЗначениеВт.Значение].Таблица; // ТаблицаЗначений
			КолонкиПриемника = ИсточникКолонок.Колонки;
			
			ТекстПоляТаблицы = "";
			НомерПоляТаблицы = 0;
			
			Для Каждого ТекущаяКолонка Из КолонкиИсточника Цикл
				
				КолонкаПриемника = КолонкиПриемника.Найти(ТекущаяКолонка.Имя);
				
				Если КолонкаПриемника = Неопределено Тогда
					ТипКолонки = Новый ОписаниеТипов;
				Иначе
					ТипКолонки = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(КолонкаПриемника.ТипЗначения);
				КонецЕсли;
				
				Если КолонкаПриемника = Неопределено
				 Или НЕ ТипизироватьЗначения // типизировать поля нужно только в этапах расчета/трансляции партий
				 Или ТипКолонки.Типы().Количество() = 0
				 Или ТипКолонки.СодержитТип(Тип("МоментВремени")) Тогда
					
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
					Продолжить;
					
				КонецЕсли;
				
				НомерПоляТаблицы = НомерПоляТаблицы + 1;
				НомерПоляТаблицыСтрокой = Формат(НомерПоляТаблицы, "ЧН=0; ЧГ=");
				
				ПустоеЗначениеТипа = ТипКолонки.ПривестиЗначение(Неопределено);
				МассивПодходящихТипов = Новый Массив;
				МассивПустыхЗначений = Новый Массив;
				
				ЧисловоеПоле = ТипКолонки.Типы().Количество() = 1 И ТипКолонки.Типы()[0] = Тип("Число")
					И ТипКолонки.КвалификаторыЧисла.Разрядность > 0;
				
				Для Каждого ТекущийТип Из ТипКолонки.Типы() Цикл
					
					МассивПодходящихТипов.Добавить(ТекущийТип);
					
					ОписаниеТекущегоТипа = Новый ОписаниеТипов(ОбщегоНазначенияУТКлиентСервер.Массив(ТекущийТип, Ложь));
					
					Если ТекущийТип <> Тип("Булево") И ТекущийТип <> Тип("Дата") И ТекущийТип <> Тип("Строка")
					 И ТекущийТип <> Тип("Число") И ТекущийТип <> Тип("УникальныйИдентификатор") Тогда
						МассивПустыхЗначений.Добавить(ОписаниеТекущегоТипа.ПривестиЗначение(Неопределено));
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТипКолонки.СодержитТип(Тип("ВидДвиженияНакопления")) Тогда
					// В запросе для полей этого типа метод ТИПЗНАЧЕНИЯ() падает с ошибкой
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	ВЫБОР КОГДА Т." + ТекущаяКолонка.Имя + " <> ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
						|	  И Т." + ТекущаяКолонка.Имя + " <> ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
						|		ТОГДА НЕОПРЕДЕЛЕНО
						|		ИНАЧЕ Т." + ТекущаяКолонка.Имя + "
						|	КОНЕЦ КАК " + ТекущаяКолонка.Имя;
				ИначеЕсли ТипКолонки.СодержитТип(Тип("Дата")) И МассивПодходящихТипов.Количество() = 1 Тогда
					// В дальнейших запросах к полю этого типа метод НАЧАЛОПЕРИОДА() падает с ошибкой если использовать &ПустоеЗначениеТипа
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	ВЫРАЗИТЬ(ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекущаяКолонка.Имя + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
						|	  ИЛИ Т." + ТекущаяКолонка.Имя + " В (&МассивПустыхЗначений" + НомерПоляТаблицыСтрокой + ")
						|		ТОГДА ДАТАВРЕМЯ(1,1,1,0,0,0)
						|		ИНАЧЕ Т." + ТекущаяКолонка.Имя + "
						|	КОНЕЦ КАК ДАТА) КАК " + ТекущаяКолонка.Имя;
				ИначеЕсли ЧисловоеПоле Тогда
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекущаяКолонка.Имя + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
						|	  ИЛИ Т." + ТекущаяКолонка.Имя + " В (&МассивПустыхЗначений" + НомерПоляТаблицыСтрокой + ")
						|		ТОГДА &ПустоеЗначениеТипа" + НомерПоляТаблицыСтрокой + "
						|		ИНАЧЕ ВЫРАЗИТЬ(Т." + ТекущаяКолонка.Имя + " КАК ЧИСЛО("
							+ СокрЛП(ТипКолонки.КвалификаторыЧисла.Разрядность) + "," + СокрЛП(ТипКолонки.КвалификаторыЧисла.РазрядностьДробнойЧасти) + "))
						|	КОНЕЦ КАК " + ТекущаяКолонка.Имя;
				ИначеЕсли ОписаниеРегистра.ЭтоОписаниеРегистра И ОписаниеРегистра.НетипизируемыеПоля.Свойство(ТекущаяКолонка.Имя) Тогда
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекущаяКолонка.Имя + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
						|		ТОГДА &ПустоеЗначениеТипа" + НомерПоляТаблицыСтрокой + "
						|		ИНАЧЕ Т." + ТекущаяКолонка.Имя + "
						|	КОНЕЦ КАК " + ТекущаяКолонка.Имя;
				Иначе
					ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",") + "
						|	ВЫБОР КОГДА НЕ ТИПЗНАЧЕНИЯ(Т." + ТекущаяКолонка.Имя + ") В (&МассивПодходящихТипов" + НомерПоляТаблицыСтрокой + ")
						|	  ИЛИ Т." + ТекущаяКолонка.Имя + " В (&МассивПустыхЗначений" + НомерПоляТаблицыСтрокой + ")
						|		ТОГДА &ПустоеЗначениеТипа" + НомерПоляТаблицыСтрокой + "
						|		ИНАЧЕ Т." + ТекущаяКолонка.Имя + "
						|	КОНЕЦ КАК " + ТекущаяКолонка.Имя;
				КонецЕсли;
				
				Запрос.УстановитьПараметр("МассивПодходящихТипов" + НомерПоляТаблицыСтрокой, МассивПодходящихТипов);
				Запрос.УстановитьПараметр("МассивПустыхЗначений" + НомерПоляТаблицыСтрокой,  МассивПустыхЗначений);
				Запрос.УстановитьПараметр("ПустоеЗначениеТипа" + НомерПоляТаблицыСтрокой,    ПустоеЗначениеТипа);
				
			КонецЦикла;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&ТекстПоляТаблицы
			|ПОМЕСТИТЬ ВтБуфер
			|ИЗ
			|	ИмяВременнойТаблицы КАК Т
			|ГДЕ
			|	ИСТИНА
			|	И НЕ (&ПроверкаОбязательныхПолей)
			|;
			|
			|/////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИмяВременнойТаблицы
			|;
			|
			|/////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ ИмяВременнойТаблицы
			|ИЗ
			|	ВтБуфер
			|;
			|
			|/////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВтБуфер
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", КлючИЗначениеВт.Ключ);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПроверкаОбязательныхПолей", ОписаниеРегистра.ТекстПроверкиОбязательныхПолей);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляТаблицы", СокрЛП(ТекстПоляТаблицы));
			
			Запрос.Выполнить();
			
			КоличествоСтрокТаблицы = РазмерВременнойТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ);
			
			Если КоличествоСтрокТаблицы > 0 Тогда
				
				// Были изменения в ВТКэш, еще не учтенные в ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты.
				ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Истина;
				
				Если СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра] = Неопределено Тогда
					СоответствиеРегистров.Вставить(ОписаниеРегистра.ИмяРегистра, КлючИЗначениеВт.Ключ);
				Иначе
					СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра] = СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра] + "," + КлючИЗначениеВт.Ключ;
				КонецЕсли;
				
				ОписаниеРегистра.КоличествоПорцийДанных = ОписаниеРегистра.КоличествоПорцийДанных + 1;
				ОписаниеРегистра.ИменаТаблицПорций = СоответствиеРегистров[ОписаниеРегистра.ИмяРегистра];
				
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеРегистров Цикл
		
		ОписаниеРегистра = ПараметрыРасчета.Движения[КлючИЗначение.Ключ];
		
		// Добавим информацию в протокол 
		МассивТаблиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеРегистра.ИменаТаблицПорций, ",");
		РазмерТаблиц = 0;
		
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			РазмерТаблиц = РазмерТаблиц + РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы);
		КонецЦикла;
		
		РасчетСебестоимостиПротоколРасчета.КэшированиеСформированныхДвижений(
			ПараметрыРасчета,
			КлючИЗначение.Ключ,
			РазмерТаблиц);
		
		ОбъединитьВременныеТаблицы(
			ПараметрыРасчета,
			ОписаниеРегистра.ИменаТаблицПорций,
			ОписаниеРегистра.ИмяТаблицыКэшаРегистра,
			ОписаниеРегистра.ПоляКэшаРегистра,
			ОписаниеРегистра.ПоляОтбораНепустыхДвижений,
			ОписаниеРегистра.ИндексыРегистра,
			Истина);
			
		Если ОбновлятьРасчетныеКэши И ОписаниеРегистра.НадоОбновитьРасчетныйКэш Тогда
			
			// "Внутри" этапа расчета может выполняться многократное "порционное" кэширование сформированных записей,
			// но актуальные ВТКэшРасчетныеОстатки и ВТКэшРасчетныеОбороты нужны не "внутри" этапа,
			// а к его завершению (к началу следующего этапа).
			
			// Переформируем таблицу записей регистра
			Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(КлючИЗначение.Ключ)  // нужна таблица записей 
			 И ПараметрыРасчета.РегистрыСРасчетнымиОборотами[КлючИЗначение.Ключ] Тогда       // нужно автообновление таблицы записей
				ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			// Пересчитаем остатки регистра на конец периода
			Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(КлючИЗначение.Ключ) // нужны расчетные остатки
			 И ПараметрыРасчета.РегистрыСРасчетнымиОстатками[КлючИЗначение.Ключ] Тогда      // нужно автообновление остатков
				ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
			КонецЕсли;
			
			ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь; // учли все движения в кэше остатков/оборотов
			
		КонецЕсли;
		
		ОписаниеРегистра.КоличествоПорцийДанных = 0;
		ОписаниеРегистра.ИменаТаблицПорций = "";
		
	КонецЦикла;
	
	Если УдалятьВременныеТаблицы Тогда
		
		Для Каждого КлючИЗначениеВт Из СоответствиеВременныхТаблицДвижений Цикл
			УничтожитьВременныеТаблицы(ПараметрыРасчета, КлючИЗначениеВт.Ключ); 
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
	
КонецПроцедуры

// Для регистров, к основным таблицам которых есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОбороты<ИмяРегистра> - в ней будет расчетные обороты регистра
// Т.о. на любом этапе расчета будет готовая таблица записей регистра за период,
// которую надо использовать вместо основной таблицы РегистрНакопления.<ИмяРегистра>
// и вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Обороты(<период расчета>).
Процедура ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета,
		ОписаниеРегистра.ИмяТаблицыРасчетныхОборотовРегистра, НСтр("ru = 'Вспомогательная';
																	|en = 'Auxiliary'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Если не нужно использовать временную таблицу ВТКэш, то все данные будут взяты из ИБ.
	// В противном случае из ИБ будут взяты только первичные движения и просуммированы с расчетными движениями из ВТКэш.
	Запрос.УстановитьПараметр("ИспользоватьКэш", ОписаниеРегистра.ИспользоватьВТКэш И НЕ ПараметрыРасчета.Отладка.РасчетОдногоЭтапа);
	
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ИмяТаблицыРасчетныхОборотовРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	&ПоляОсновнойТаблицыРегистра
	|ПОМЕСТИТЬ ИмяТаблицыРасчетныхОборотовРегистра
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Активность
	|	И &ОтборПоОрганизации
	|	И (&ОтборСлужебныеЗаписиКонвертацииДанных
	|	   И &ОтборПоСлужебнымРеквизитам
	|		  ИЛИ НЕ &ИспользоватьКэш)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ПоляКэшаРегистра
	|ИЗ
	|	ИмяТаблицыКэшаРегистра КАК Т
	|ГДЕ
	|	&ИспользоватьКэш
	|	И &ОтборПоОрганизации
	|	И &ИндексыРегистра
	|";
	
	ПоляКэшаРегистра 			= СтрЗаменить(ОписаниеРегистра.ПоляКэшаРегистраТипизированные, "%1", "Т.");
	ПоляОсновнойТаблицыРегистра = СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", "Т.");
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша.
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ПоляКэшаРегистра 			= ПоляКэшаРегистра + ",";
		ПоляОсновнойТаблицыРегистра = ПоляОсновнойТаблицыРегистра + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляКэшаРегистра = СтрЗаменить(ПоляКэшаРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ПоляОсновнойТаблицыРегистра = СтрЗаменить(ПоляОсновнойТаблицыРегистра,
				"Т.Кор" + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т.Кор" + КлючИЗначение.Ключ + " КОНЕЦ КАК Кор" + КлючИЗначение.Ключ + ",");
			
		КонецЦикла;
		
		ПоляКэшаРегистра 			= Лев(ПоляКэшаРегистра, СтрДлина(ПоляКэшаРегистра) - 1);
		ПоляОсновнойТаблицыРегистра	= Лев(ПоляОсновнойТаблицыРегистра, СтрДлина(ПоляОсновнойТаблицыРегистра) - 1);
		
	КонецЕсли;
	
	ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ПоляОсновнойТаблицыРегистра, "ВидДвижения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляОсновнойТаблицыРегистра", ПоляОсновнойТаблицыРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляКэшаРегистра", 			 ПоляКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ИндексыРегистра",
		?(ЗначениеЗаполнено(ОписаниеРегистра.ИндексыРегистра), Символы.ПС + "ИНДЕКСИРОВАТЬ ПО " + ОписаниеРегистра.ИндексыРегистра, ""));
	
	// Установим отбор по типам записей конвертации данных.
	РегистрыСЗаписямиКонвертацииДанных = Новый Структура;
	РегистрыСЗаписямиКонвертацииДанных.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	РасчетСебестоимостиЛокализация.ДополнитьРегистрыСЗаписямиКонвертацииДанных(РегистрыСЗаписямиКонвертацииДанных);
	Если РегистрыСЗаписямиКонвертацииДанных.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСлужебныеЗаписиКонвертацииДанных", "(НЕ Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных))");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСлужебныеЗаписиКонвертацииДанных", "ИСТИНА");
	КонецЕсли;
	
	Если ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя Тогда
		Если ПараметрыРасчета.ЗапущенРасчетПартий
		 И (ПараметрыРасчета.ЗаполняютсяПартииВВыручке ИЛИ ПараметрыРасчета.ЗаполненыПартииВВыручке) Тогда
			// Данные из ИБ не выбираются - они все находятся в кэше
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоСлужебнымРеквизитам", "И ЛОЖЬ");
		КонецЕсли;
		// Отбор - первичные движения
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	ИначеЕсли ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости ИЛИ ПараметрыРасчета.ЗаполненыПартииВСебестоимости
	 ИЛИ ОписаниеРегистра.ИмяРегистра <> Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя Тогда
		// Отбор - первичные движения (с непересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь, Ложь);
	Иначе
		// Отбор - первичные движения (все, в т.ч. с пересчитываемыми типами записи)
		ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос, Истина, Истина, Ложь, Ложь);
	КонецЕсли;
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		Истина,
		РазмерВременнойТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИмяТаблицыРасчетныхОборотовРегистра));
	
КонецПроцедуры

// Для регистров, к остаткам которых на конец периода есть обращения в запросах, создадим следующие временные таблицы:
// - ВТКэшРасчетныеОстатки<ИмяРегистра> - в ней будет расчетная сумма конечных остатков регистра
// Т.о. на любом этапе расчета будет готовая таблица расчетных остатков,
// которую надо использовать вместо виртуальной таблицы РегистрНакопления.<ИмяРегистра>.Остатки(<конец периода>).
Процедура ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра, Инициализация = Ложь) Экспорт
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		// На постоянной основе ВТКэшРасчетныеОбороты не нужна, но для расчета остатков надо ее сформировать, а потом уничтожить.
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра, Истина);
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета,
		ОписаниеРегистра.ИмяТаблицыРасчетныхОстатковРегистра, НСтр("ru = 'Вспомогательная';
																	|en = 'Auxiliary'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// Сформируем шаблон текста запроса.
	Если НЕ Инициализация Тогда
		Запрос.Текст =
		"УНИЧТОЖИТЬ ИмяТаблицыРасчетныхОстатковРегистра
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	&ИзмеренияРегистраПодзапрос,
	|	&РесурсыРегистраОстатки
	|ПОМЕСТИТЬ ВТПромежуточнаяТаблицаОстатков
	|ИЗ
	|	ИмяТаблицыОстатков КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ИзмеренияРегистраПодзапрос,
	|	&РесурсыРегистраОбороты
	|ИЗ
	|	ИмяТаблицыРасчетныхОборотовРегистра КАК Т
	|СГРУППИРОВАТЬ ПО
	|	&ГруппировкиРегистраПодзапрос
	|ИНДЕКСИРОВАТЬ ПО
	|	&ИндексыПодзапрос
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИзмеренияРегистра,
	|	&РесурсыРегистраСумма
	|ПОМЕСТИТЬ ИмяТаблицыРасчетныхОстатковРегистра
	|ИЗ
	|	ВТПромежуточнаяТаблицаОстатков КАК Т
	|СГРУППИРОВАТЬ ПО
	|	&ИзмеренияРегистра
	|
	|ИМЕЮЩИЕ
	|	&ОтборНепустыхРесурсов
	|	И &ИндексыРегистра
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПромежуточнаяТаблицаОстатков
	|";
	
	Если НЕ ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|УНИЧТОЖИТЬ ИмяТаблицыРасчетныхОборотовРегистра
		|";
	КонецЕсли;
	
	// Сформируем текст для подстановки в шаблон.
	ИзмеренияРегистра = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "Т.");
	ИзмеренияРегистраПодзапрос = ИзмеренияРегистра;
	ГруппировкиРегистраПодзапрос = ИзмеренияРегистраПодзапрос;
	ИндексыПодзапрос = СтрЗаменить(ОписаниеРегистра.ИзмеренияРегистра, "%1", "");
	
	РесурсыРегистраСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(Т.",
		")");
	РесурсыРегистраОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"Т.",
		"Остаток");
	РесурсыРегистраОбороты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ОписаниеРегистра.РесурсыРегистраССуффиксом,
		"СУММА(ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * Т.",
		")");
	
	// Сформируем отбор по непустым ресурсам регистра.
	ТекстОтборНепустыхРесурсов = "";
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.РесурсыРегистра, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивРесурсов Цикл
		
		ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
			+ ?(ТекстОтборНепустыхРесурсов = "", "", "
			|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
		
	КонецЦикла;
	
	// Для расчета себестоимости по средней (без учета партий) очистим партионные поля расчетного кэша.
	Если НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра) Тогда
		
		ЗаменяемыеФрагменты = Новый Структура;
		ЗаменяемыеФрагменты.Вставить("Партия",					  "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("АналитикаУчетаПартий",	  "ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)");
		ЗаменяемыеФрагменты.Вставить("АналитикаФинансовогоУчета", "НЕОПРЕДЕЛЕНО");
		ЗаменяемыеФрагменты.Вставить("ВидДеятельностиНДС",		  "ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)");
		
		ИзмеренияРегистраПодзапрос = ИзмеренияРегистраПодзапрос + ",";
		ГруппировкиРегистраПодзапрос = ГруппировкиРегистраПодзапрос + ",";
		
		Для Каждого КлючИЗначение Из ЗаменяемыеФрагменты Цикл
			
			ИзмеренияРегистраПодзапрос = СтрЗаменить(ИзмеренияРегистраПодзапрос,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ КАК " + КлючИЗначение.Ключ + ",");
			
			ГруппировкиРегистраПодзапрос = СтрЗаменить(ГруппировкиРегистраПодзапрос,
				"Т." + КлючИЗначение.Ключ + ",",
				"ВЫБОР КОГДА &РегламентноеЗадание ТОГДА " + КлючИЗначение.Значение 
					+ " ИНАЧЕ Т." + КлючИЗначение.Ключ + " КОНЕЦ,");
			
		КонецЦикла;
		
		ИзмеренияРегистраПодзапрос = Лев(ИзмеренияРегистраПодзапрос, СтрДлина(ИзмеренияРегистраПодзапрос) - 1);
		ГруппировкиРегистраПодзапрос = Лев(ГруппировкиРегистраПодзапрос, СтрДлина(ГруппировкиРегистраПодзапрос) - 1);
		
	КонецЕсли;
	
	// Сформируем отбор по организации.
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизацииОстатки = "Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизацииОстатки = "АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизацииОстатки = "";
	КонецЕсли;
	
	// Подставим тексты в шаблон запроса.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыОстатков",
		"ИмяОсновнойТаблицыРегистра.Остатки(&ГраницаНачалоПериода, &ОтборПоОрганизацииОстатки)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИзмеренияРегистраПодзапрос", ИзмеренияРегистраПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ГруппировкиРегистраПодзапрос", ГруппировкиРегистраПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИндексыПодзапрос", 			ИндексыПодзапрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИзмеренияРегистра", 			ИзмеренияРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраСумма", 		РесурсыРегистраСумма);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраОстатки", 	РесурсыРегистраОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РесурсыРегистраОбороты", 	РесурсыРегистраОбороты);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизацииОстатки", 	ОтборПоОрганизацииОстатки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНепустыхРесурсов", 		ТекстОтборНепустыхРесурсов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ИндексыРегистра",
		?(ЗначениеЗаполнено(ОписаниеРегистра.ИндексыРегистра), Символы.ПС + "ИНДЕКСИРОВАТЬ ПО " + ОписаниеРегистра.ИндексыРегистра, ""));
	
	ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, Запрос);
	
	// Сформируем таблицу кэша остатков.
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(
		ПараметрыРасчета,
		Истина,
		РазмерВременнойТаблицы(ПараметрыРасчета, ОписаниеРегистра.ИмяТаблицыРасчетныхОстатковРегистра));
	
	
КонецПроцедуры

// Выполняет (по необходимости) обновление расчетных оборотов и остатков по всем регистрам.
//
Процедура ОбновитьРасчетныеКэшиРегистров(ПараметрыРасчета, ТолькоТребующиеОбновления = Ложь) Экспорт
	
	Для Каждого КлючИЗначение Из ПараметрыРасчета.Движения Цикл
		
		ОписаниеРегистра = КлючИЗначение.Значение;
		
		Если НЕ ОписаниеРегистра.НадоОбновитьРасчетныйКэш И ТолькоТребующиеОбновления Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ОписаниеРегистра.ИмяРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет (безусловно) обновление расчетных оборотов и остатков указанного регистра.
//
Процедура ОбновитьРасчетныеКэшиРегистра(ПараметрыРасчета, ИмяРегистра) Экспорт
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистра];
	
	Если ПараметрыРасчета.РегистрыСРасчетнымиОборотами.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОборотыРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;
	
	Если ПараметрыРасчета.РегистрыСРасчетнымиОстатками.Свойство(ОписаниеРегистра.ИмяРегистра) Тогда
		ОбновитьРасчетныеОстаткиРегистра(ПараметрыРасчета, ОписаниеРегистра);
	КонецЕсли;
	
	ОписаниеРегистра.НадоОбновитьРасчетныйКэш = Ложь;
	
КонецПроцедуры

// Определяет необходимость формирования расчетных кэшей с пустыми полями партий (для расчета себестоимости по средней).
//
Функция НадоОчиститьПоляПартийРасчетногоКэша(ПараметрыРасчета, ОписаниеРегистра)
	
	Возврат ПараметрыРасчета.ПартионныйУчетВерсии22 И НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.РегламентноеЗадание
			И (ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя
				ИЛИ ОписаниеРегистра.ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
	
КонецФункции

#КонецОбласти

#Область КэшированиеДанныхРегистров

Процедура ДобавитьИдентификаторыВоВременнуюТаблицу(ПараметрыРасчета, ОписаниеРегистра, ИмяВременнойТаблицы,
			ПоляИндексирования = "", СопоставлениеКолонокРегистра = Неопределено) Экспорт
	
	КолонкиВТ = КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяВременнойТаблицы, Ложь);
	ИмяКолонкиИдентификатора = "ИдентификаторФинЗаписи";
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если НЕ ЗначениеЗаполнено(СопоставлениеКолонокРегистра) Тогда
		СопоставлениеКолонокРегистра = Новый Структура;
	КонецЕсли;
	
	СопоставлениеКолонокВТ = Новый Структура; // поменяем местами Ключ и Значение из СопоставлениеКолонокРегистра
	Для Каждого КлючИЗначение Из СопоставлениеКолонокРегистра Цикл
		СопоставлениеКолонокВТ.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ИмяВременнойТаблицы_Регистраторы
	|ИЗ
	|	ИмяВременнойТаблицы КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Регистратор КАК Регистратор,
	|	&ПоляВыборки,
	|	МАКСИМУМ(Т.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ ВТСтарыеИдентификаторыРегистра
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяВременнойТаблицы_Регистраторы КАК Отбор
	|		ПО Т.Регистратор = Отбор.Регистратор
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ОтборПоОрганизации
	|	И Т.Активность
	|СГРУППИРОВАТЬ ПО
	|	Т.Регистратор,
	|	&ПоляГруппировки
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИмяВременнойТаблицы_Регистраторы
	|";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ОписаниеРегистра.ПоляОсновнойТаблицыРегистра, "%1", ""),
		",",
		Истина,
		Истина);
	МассивСуммовыхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		НРег(СтрЗаменить(ОписаниеРегистра.ПоляОтбораНепустыхДвижений, "%1", "")),
		",",
		Истина,
		Истина);
	
	ТекстПоляВыборки = "";
	ТекстПоляГруппировки = "";
	ТекстПоляСвязи = "";
	
	Если ОписаниеРегистра.ЕстьОрганизация Тогда
		ОтборПоОрганизации = "Т.Организация В (&МассивОрганизаций)";
	ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
		ОтборПоОрганизации = "Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
	Иначе
		ОтборПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	ТаблицаПриемника = ОписаниеРегистра.Таблица; //ТаблицаЗначений
	КолонкиПриемника = ТаблицаПриемника.Колонки;
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		Если НРег(ТекущееПоле) = НРег(ИмяКолонкиИдентификатора)
		 ИЛИ МассивСуммовыхПолей.Найти(НРег(ТекущееПоле)) <> Неопределено
		 ИЛИ (КолонкиВТ.Найти(ТекущееПоле) = Неопределено
		 	 И НЕ СопоставлениеКолонокРегистра.Свойство(ТекущееПоле)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(ТекущееПоле) <> НРег("Регистратор") Тогда
			ТекстПоляВыборки = ТекстПоляВыборки + ?(ТекстПоляВыборки = "", "", ",
				|	") + "Т." + ТекущееПоле + " КАК " + ТекущееПоле;
			ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
				|	") + "Т." + ТекущееПоле;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", ТекстПоляВыборки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ОписаниеРегистра.ПолноеИмяРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоОрганизации", ОтборПоОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляГруппировки", ТекстПоляГруппировки);
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	&ПоляВыборки,
	|	&ПоляИтогов,
	|	МАКСИМУМ(Т.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ ИмяВременнойТаблицы_Нумерованная
	|ИЗ
	|(ВЫБРАТЬ
	|	ИСТИНА КАК НоваяЗапись,
	|	&ПоляВыборкиВТ,
	|	&ПоляСтоимости,
	|   """" КАК ИдентификаторФинЗаписи
	|ИЗ
	|	ИмяВременнойТаблицы КАК Т
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК НоваяЗапись,
	|	&ПоляВыборкиРегистра,
	|	&НулевыеПоляСтоимости,
	|   Т.ИдентификаторФинЗаписи
	|ИЗ
	|	ВТСтарыеИдентификаторыРегистра КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	&ПоляГруппировки
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.НоваяЗапись) = ИСТИНА
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.НомерЗаписи
	|ИЗ
	|	ИмяВременнойТаблицы_Нумерованная КАК Т
	|ГДЕ
	|	Т.ИдентификаторФинЗаписи = """"
	|";
	
	ТекстПоляВыборки = "";
	ТекстПоляВыборкиВТ = "";
	ТекстПоляВыборкиРегистра = "";
	ТекстПоляГруппировки = "";
	ТекстПоляСтоимости = "";
	ТекстНулевыеПоляСтоимости = "";
	ТекстПоляИтогов = "";
	ТекстВсеПоляВыборки = "";
	
	КолонкиРегистра = КолонкиВременнойТаблицы(ПараметрыРасчета, "ВТСтарыеИдентификаторыРегистра", Ложь);
	
	Для Каждого ТекущаяКолонка Из КолонкиВТ Цикл
		
		Если НРег(ТекущаяКолонка.Имя) = НРег(ИмяКолонкиИдентификатора) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстВсеПоляВыборки = ТекстВсеПоляВыборки + ?(ТекстВсеПоляВыборки = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
		
		ТипПоля = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
		
		ЭтоЧисловоеПоле = МассивСуммовыхПолей.Найти(НРег(ТекущаяКолонка.Имя)) <> Неопределено
		 ИЛИ (ТипПоля.Типы().Количество() = 1 И ТипПоля.СодержитТип(Тип("Число")));
		 
		Если КолонкиРегистра.Найти(ТекущаяКолонка.Имя) = Неопределено
		 И НЕ СопоставлениеКолонокВТ.Свойство(ТекущаяКолонка.Имя)
		 И НЕ ЭтоЧисловоеПоле Тогда
			
			ТекстПоляВыборкиВТ = ТекстПоляВыборкиВТ + ?(ТекстПоляВыборкиВТ = "", "", ",
				|	") + "Т." + ТекущаяКолонка.Имя;
			ТекстПоляВыборкиРегистра = ТекстПоляВыборкиРегистра + ?(ТекстПоляВыборкиРегистра = "", "", ",
				|	") + РасчетСебестоимостиУниверсальныеАлгоритмы.ПредставлениеПустогоЗначенияТипаДляЗапроса(ТекущаяКолонка.ТипЗначения);
			ТекстПоляИтогов = ТекстПоляИтогов + ?(ТекстПоляИтогов = "", "", ",
				|	") + "МАКСИМУМ(Т." + ТекущаяКолонка.Имя + ") КАК " + ТекущаяКолонка.Имя;
			
		ИначеЕсли ЭтоЧисловоеПоле Тогда
			
			ТекстПоляСтоимости = ТекстПоляСтоимости + ?(ТекстПоляСтоимости = "", "", ",
				|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
			ТекстНулевыеПоляСтоимости = ТекстНулевыеПоляСтоимости + ?(ТекстНулевыеПоляСтоимости = "", "", ",
				|	") + "0 КАК " + ТекущаяКолонка.Имя;
			ТекстПоляИтогов = ТекстПоляИтогов + ?(ТекстПоляИтогов = "", "", ",
				|	") + "СУММА(Т." + ТекущаяКолонка.Имя + ") КАК " + ТекущаяКолонка.Имя;
			
		Иначе
			
			ТекстПоляВыборки = ТекстПоляВыборки + ?(ТекстПоляВыборки = "", "", ",
				|	") + "Т." + ТекущаяКолонка.Имя;
			ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
				|	") + "Т." + ТекущаяКолонка.Имя;
			ТекстПоляВыборкиВТ = ТекстПоляВыборкиВТ + ?(ТекстПоляВыборкиВТ = "", "", ",
				|	") + "Т." + ТекущаяКолонка.Имя;
			
			Если СопоставлениеКолонокВТ.Свойство(ТекущаяКолонка.Имя) Тогда
				ТекстПоляВыборкиРегистра = ТекстПоляВыборкиРегистра + ?(ТекстПоляВыборкиРегистра = "", "", ",
					|	") + "Т." + СопоставлениеКолонокВТ[ТекущаяКолонка.Имя];
			Иначе
				ТекстПоляВыборкиРегистра = ТекстПоляВыборкиРегистра + ?(ТекстПоляВыборкиРегистра = "", "", ",
					|	") + "Т." + ТекущаяКолонка.Имя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборкиВТ", 			ТекстПоляВыборкиВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборкиРегистра",	ТекстПоляВыборкиРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", 			ТекстПоляВыборки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляСтоимости", 			ТекстПоляСтоимости);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НулевыеПоляСтоимости", 	ТекстНулевыеПоляСтоимости);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляИтогов", 			ТекстПоляИтогов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляГруппировки", 		ТекстПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", 	ИмяВременнойТаблицы);
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаИдентификаторов.Колонки.Добавить("НомерЗаписи", ОбщегоНазначения.ОписаниеТипаЧисло(31));
	
	Выборка = РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, Истина);
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор;
		НоваяСтрока.НомерЗаписи = Выборка.НомерЗаписи;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТСтарыеИдентификаторыРегистра, " + ИмяВременнойТаблицы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор,
	|	ТаблицаИдентификаторов.НомерЗаписи КАК НомерЗаписи
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	&ПоляВыборки,
	|	ЕСТЬNULL(ТаблицаИдентификаторов.Идентификатор, Т.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	ИмяВременнойТаблицы_Нумерованная КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|		ПО ТаблицаИдентификаторов.НомерЗаписи = Т.НомерЗаписи
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", ТекстВсеПоляВыборки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ПоляИндексирования) Тогда
		Запрос.Текст = Запрос.Текст + "
			|ИНДЕКСИРОВАТЬ ПО
			|	" + ПоляИндексирования;
	КонецЕсли;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ОписаниеРегистра.ИмяРегистра);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ТаблицаИдентификаторов, " + ИмяВременнойТаблицы + "_Нумерованная");
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеИтогиРегистров

Функция СостояниеИтоговРегистров() Экспорт
	
	СостояниеИтоговРегистров = Новый Структура;
	
	ИсходящиеДанные = Новый Соответствие;
	РасчетСебестоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ИсходящиеДанные);
	
	Для Каждого КлючИЗначение Из ИсходящиеДанные Цикл
		
		МетаданныеРегистра = КлючИЗначение.Ключ;
		
		Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра)
		 И МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			
			МенеджерРегистра  = РегистрыНакопления[МетаданныеРегистра.Имя];
			СостояниеРегистра = Новый Структура;
			
			СостояниеРегистра.Вставить("Использование", 	 МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов());
			СостояниеРегистра.Вставить("МинимальныйПериод",  МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов());
			СостояниеРегистра.Вставить("МаксимальныйПериод", МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов());
			
			СостояниеИтоговРегистров.Вставить(МетаданныеРегистра.Имя, СостояниеРегистра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СостояниеИтоговРегистров;
	
КонецФункции

Процедура ВернутьСостояниеИтоговРегистровФоновымЗаданием(СостояниеИтоговДоРасчета) Экспорт
	
	ПараметрыОбработчикаЗадания = Новый Массив;
	ПараметрыОбработчикаЗадания.Добавить(СостояниеИтоговДоРасчета);

	ФоновыеЗадания.Выполнить(
		"РасчетСебестоимостиПрикладныеАлгоритмы.ВернутьСостояниеИтоговРегистров",
		ПараметрыОбработчикаЗадания,
		,
		НСтр("ru = 'Расчет партий и себестоимости, включение итогов.';
			|en = 'Lot and cost calculation, enable totals.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

Процедура ВернутьСостояниеИтоговРегистров(СостояниеИтоговДоРасчета, ИмяРегистра = "") Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из СостояниеИтоговДоРасчета Цикл
		
		МенеджерРегистра   = РегистрыНакопления[КлючИЗначение.Ключ];
		СостояниеРегистра  = КлючИЗначение.Значение;
		
		МаксимальныйПериод = НачалоМесяца(ТекущаяДатаСеанса()) - 1; // как делает стандартное регламентное задание управления итогами
		
	 	ТекстДляПротокола = УправлениеИтогамиРегистра(
			МенеджерРегистра,
			СостояниеРегистра.МинимальныйПериод,
			МаксимальныйПериод,
			СостояниеРегистра.Использование);
		
		Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,,
				ТекстДляПротокола);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Выключает итоги регистра накопления.
// 
// Параметры:
// 	ПараметрыРасчета - Структура -
// 	МенеджерРегистра - РегистрНакопленияМенеджер.СебестоимостьТоваров - или любой другой обслуживаемый регистр
// 
Процедура ВыключитьИтогиРегистра(ПараметрыРасчета, МенеджерРегистра)
	
	ПериодРасчета      = ПараметрыРасчета.РасчетныйПериод.НачалоПериода;
	МинимальныйПериод  = МенеджерРегистра.ПолучитьМинимальныйПериодРассчитанныхИтогов();
	МаксимальныйПериод = МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
	
	Если ПериодРасчета <= НачалоМесяца(МаксимальныйПериод) Тогда
		
		ТекстДляПротокола = УправлениеИтогамиРегистра(
			МенеджерРегистра,
			Мин(МинимальныйПериод, НачалоМесяца(ПериодРасчета - 1)),
			Мин(МаксимальныйПериод, ПериодРасчета - 1),
			Ложь);
		
		Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаЗаписиДвиженийПоРегистрам,
				ТекстДляПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция УправлениеИтогамиРегистра(МенеджерРегистра, МинПериод, МаксПериод, ИспользованиеТекущихИтогов)
	
	КоличествоПопыток = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().КоличествоПопытокЗаписи;
	ТекстОшибки = "";
	
	Для НомерПопытки = 1 По КоличествоПопыток Цикл
		
		Попытка
			
			Если МенеджерРегистра.ПолучитьИспользованиеТекущихИтогов() <> ИспользованиеТекущихИтогов Тогда
				МенеджерРегистра.УстановитьИспользованиеТекущихИтогов(ИспользованиеТекущихИтогов);
			КонецЕсли;
			
			МенеджерРегистра.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
				МинПериод,
				МаксПериод);
				
			Прервать;
			
		Исключение
			
			Если НомерПопытки <> КоличествоПопыток Тогда
				Продолжить; // ошибка будет диагностирована на последней неудачной попытке
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка установка периода итогов регистра ""%1"":
					|%2';
					|en = 'Error when setting the register ""%1"" period totals:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				МенеджерРегистра.СоздатьНаборЗаписей().Метаданные().Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область РешениеСЛУ

Функция ИнициализироватьПараметрыЗагрузкиРешенияСЛУ(ИменаКолонокРешений, ДополнительныеКолонки = Неопределено, ИмяВременнойТаблицы = "ТаблицаРешений") Экспорт
	
	ПараметрыЗагрузкиСЛУ = Новый Структура;
	ПараметрыЗагрузкиСЛУ.Вставить("ИмяКолонкиНомерУзла", "НомерУзла");
	ПараметрыЗагрузкиСЛУ.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	ПараметрыЗагрузкиСЛУ.Вставить("ИменаКолонокРешений",
		СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонокРешений, ",",, Истина));
	ПараметрыЗагрузкиСЛУ.Вставить("ДополнительныеКолонки",
		?(ЗначениеЗаполнено(ДополнительныеКолонки), ДополнительныеКолонки, Новый Структура));
	ПараметрыЗагрузкиСЛУ.Вставить("ЧислоРазрядов", 28);
	ПараметрыЗагрузкиСЛУ.Вставить("ЧислоРазрядовДробнойЧасти", 10);
	ПараметрыЗагрузкиСЛУ.Вставить("УчитыватьНулевыеРешения", Истина);
	
	Возврат ПараметрыЗагрузкиСЛУ;
	
КонецФункции

// Загрузить решение СЛУ во временную таблицу.
// 
// Параметры:
//  ПараметрыРасчета -Структура - Параметры расчета
//  ПараметрыЗагрузкиСЛУ -Структура - Параметры загрузки СЛУ
//  ТаблицаРешений - ТаблицаЗначений - Таблица решений
//  ПояснениеДляЗамера - Строка - Пояснение для замера
Процедура ЗагрузитьРешениеСЛУВоВременнуюТаблицу(ПараметрыРасчета, ПараметрыЗагрузкиСЛУ, ТаблицаРешений, ПояснениеДляЗамера) Экспорт
	
	ТекстПоляВыборки = "Т.НомерУзла КАК " + ПараметрыЗагрузкиСЛУ.ИмяКолонкиНомерУзла;
	ТекстФорматЧисла = "ЧИСЛО(" + Формат(ПараметрыЗагрузкиСЛУ.ЧислоРазрядов, "ЧН=0; ЧГ=")
		+ "," + Формат(ПараметрыЗагрузкиСЛУ.ЧислоРазрядовДробнойЧасти, "ЧН=0; ЧГ=") + ")";
	ТекстУсловиеГДЕ = "";
		
	НомерРешения = 0;
	ИмяКолонкиРешения = Лев(ТаблицаРешений.Колонки[1].Имя, СтрДлина(ТаблицаРешений.Колонки[1].Имя) - 1);
	КолонкиРешений = Новый Структура;
	
	Для Каждого ИмяПоляРешения Из ПараметрыЗагрузкиСЛУ.ИменаКолонокРешений Цикл
		
		НомерРешения = НомерРешения + 1;
		ТекстПоляВыборки = ТекстПоляВыборки + ",
			|	ВЫРАЗИТЬ(Т." + ИмяКолонкиРешения + Формат(НомерРешения, "ЧН=0; ЧГ=")
			+ " КАК " + ТекстФорматЧисла + ") КАК " + ИмяПоляРешения;
			
		Если НЕ ПараметрыЗагрузкиСЛУ.УчитыватьНулевыеРешения Тогда
			ТекстУсловиеГДЕ = ТекстУсловиеГДЕ + ?(ТекстУсловиеГДЕ = "", "	", "
				|	ИЛИ ") + "ВЫРАЗИТЬ(Т." + ИмяКолонкиРешения + Формат(НомерРешения, "ЧН=0; ЧГ=")
				+ " КАК " + ТекстФорматЧисла + ") <> 0";
		КонецЕсли;
		
		КолонкиРешений.Вставить(ИмяКолонкиРешения + Формат(НомерРешения, "ЧН=0; ЧГ="), ИмяПоляРешения);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыЗагрузкиСЛУ.ДополнительныеКолонки Цикл
		
		ТекстПоляВыборки = ТекстПоляВыборки + ",
			|	" + СокрЛП(КлючИЗначение.Значение) + " КАК " + СокрЛП(КлючИЗначение.Ключ);
		
	КонецЦикла;
		
	ЗащитаОтПереполненияПоля = Pow(10, ПараметрыРасчета.РешениеСЛУ.ЗащитаОтПереполненияПоля) - 1;
	
	Если НЕ ПараметрыРасчета.Свойство("УзлыСПереполнениемПоля") Тогда
		УзлыСПереполнениемПоля = Новый Массив;
	Иначе
		УзлыСПереполнениемПоля = ПараметрыРасчета.УзлыСПереполнениемПоля;
	КонецЕсли;
	
	// Проверим результаты решения СЛУ на превышение значения ЗащитаОтПереполненияПоля
	Если ЗащитаОтПереполненияПоля <> 0 Тогда
		Для Каждого ТекСтр Из ТаблицаРешений Цикл
			Для Каждого КлючИЗначение Из КолонкиРешений Цикл
				
				Если ТекСтр[КлючИЗначение.Ключ] > ЗащитаОтПереполненияПоля ИЛИ ТекСтр[КлючИЗначение.Ключ] < -ЗащитаОтПереполненияПоля Тогда
					ТекСтр[КлючИЗначение.Ключ] = 0;
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УзлыСПереполнениемПоля,	ТекСтр[ПараметрыЗагрузкиСЛУ.ИмяКолонкиНомерУзла]);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ПоляВыборки
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	&ТаблицаРешений КАК Т
	|ГДЕ
	|	&УсловиеГДЕ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомерУзла", ПараметрыЗагрузкиСЛУ.ИмяКолонкиНомерУзла);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ПараметрыЗагрузкиСЛУ.ИмяВременнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВыборки", ТекстПоляВыборки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГДЕ", ?(ТекстУсловиеГДЕ = "", "ИСТИНА", ТекстУсловиеГДЕ));
	
	Запрос.Текст = Запрос.Текст + "
	|ИНДЕКСИРОВАТЬ ПО
	|	" + ПараметрыЗагрузкиСЛУ.ИмяКолонкиНомерУзла;
	
	Запрос.УстановитьПараметр("ТаблицаРешений", ТаблицаРешений);
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ПараметрыЗагрузкиСЛУ.ИмяВременнойТаблицы);
	
	Попытка
		
		ПараметрыРасчета.Вставить("НеФиксироватьОшибкуРасчета"); // не надо фиксировать ошибку, попытаемся ее исправить.
		
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
	Исключение
		
		ПараметрыРасчета.Удалить("НеФиксироватьОшибкуРасчета");
		
		РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(ПараметрыРасчета, "УменьшениеРазрядностиРешенияСЛУ", ПояснениеДляЗамера);
		
		// Возникла ошибка переполнения при преобразовании значения из-за превышения разрядности числа.
		КоличествоРешений = ПараметрыЗагрузкиСЛУ.ИменаКолонокРешений.Количество();
		ОграничениеЧисла = Pow(10, ПараметрыЗагрузкиСЛУ.ЧислоРазрядов - ПараметрыЗагрузкиСЛУ.ЧислоРазрядовДробнойЧасти - 1);
		МаксимальноеЗначение = Pow(10, ПараметрыЗагрузкиСЛУ.ЧислоРазрядов);
		
		ИменаКолонок = Новый Массив;
		
		Для НомерРешения = 1 По КоличествоРешений Цикл
			ИменаКолонок.Добавить(ИмяКолонкиРешения + Формат(НомерРешения, "ЧН=0; ЧГ="));
		КонецЦикла;
		
		КоличествоОшибок = 0;
		
		Для Каждого ТекСтр Из ТаблицаРешений Цикл
			
			Для НомерРешения = 0 По КоличествоРешений-1 Цикл
				
				Если ТекСтр[ИменаКолонок[НомерРешения]] = 0 Тогда
					
					Продолжить;
					
				ИначеЕсли ТекСтр[ИменаКолонок[НомерРешения]] >= ОграничениеЧисла ИЛИ ТекСтр[ИменаКолонок[НомерРешения]] <= -ОграничениеЧисла Тогда
					
					// Отбросим решения, превышающие допустимый размер поля.
					ТекСтр[ИменаКолонок[НомерРешения]] = 0;
					УзлыСПереполнениемПоля.Добавить(ТекСтр.НомерУзла);
					КоличествоОшибок = КоличествоОшибок + 1;
					
				Иначе
					
					// Приведем разрядность целой и дробной части к требуемой разрядности поля.
					КоличествоРазрядов = Цел(Log10(МаксимальноеЗначение/?(ТекСтр[ИменаКолонок[НомерРешения]] > 0, ТекСтр[ИменаКолонок[НомерРешения]], -ТекСтр[ИменаКолонок[НомерРешения]]))) - 3;
					ТекСтр[ИменаКолонок[НомерРешения]] = Окр(ТекСтр[ИменаКолонок[НомерРешения]], КоличествоРазрядов);
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
		
		РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
		
		Запрос.УстановитьПараметр("ТаблицаРешений", ТаблицаРешений);
		
		ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Диагностированы ошибки (%1 шт.) переполнение поля результата решения СЛУ (%2)';
				|en = 'Errors were found (%1) result field overflow of the LES solution (%2)'"),
			СокрЛП(КоличествоОшибок),
			ПояснениеДляЗамера);
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ТекстДляПротокола);
		
	КонецПопытки;
	
	ПараметрыРасчета.Удалить("НеФиксироватьОшибкуРасчета");
	ПараметрыРасчета.Вставить("УзлыСПереполнениемПоля", УзлыСПереполнениемПоля);
	
КонецПроцедуры

Функция РассчитатьСистемыЛинейныхУравнений(ПараметрыРасчета, РасчетСистемЛинейныхУравнений) Экспорт
	
	Если ПараметрыРасчета.ОтключитьРедуцированиеГрафа Тогда
		ТаблицаРешений = РасчетСистемЛинейныхУравнений.РассчитатьСистемыЛинейныхУравнений(Ложь);
	Иначе
		// В платформе ниже версии 8.3.17 у этого метода не было параметров.
		ТаблицаРешений = РасчетСистемЛинейныхУравнений.РассчитатьСистемыЛинейныхУравнений();
	КонецЕсли;
	
	Возврат ТаблицаРешений;
	
КонецФункции

// Модифицирует тексты запросов получения узлов и связей:
// - в запросе получения узлов обнуляются стоимости для узлов, имеющих нулевой вес;
// - в запросе получения связей для дуг, в которые входит узел с нулевым весом, обнуляются соответствующие веса.
//
// Параметры:
// 	ПараметрыРасчета - см. ИнициализироватьОбщиеПараметрыРасчета
//	ЗапросУзлы - Запрос - запрос для выборки узлов
//	ИмяКолонкиНомераУзла - Строка - имя колонки номера узла в ЗапросУзлы
//	ЗапросСвязи - Запрос - запрос для выборки связей; этот запрос должен выполняться позже ЗапросУзлы, т.к. в нем выполняется удаление вспомогательной таблицы <ИмяТаблицыНекорректныхУзлов>
//	ИменаКолонокНомеровУзлов - Строка - имена колонок узла источника и узла приемника в ЗапросСвязи
//	СвязиКолонокВесовИСтоимостей - Структура:
//	 * Ключ - Строка - имя колонки веса
//	 * Значение - Строка - имена соответствующих колонок стоимости
//	ПояснениеДляЗамера - Строка - пояснение к СЛУ для вывода в протокол
//
Процедура СкорректироватьСтоимостьУзловСЛУИзЗапросов(ПараметрыРасчета, ЗапросУзлы, ИмяКолонкиНомераУзла,
			ЗапросСвязи, ИменаКолонокНомеровУзлов, СвязиКолонокВесовИСтоимостей, ПояснениеДляЗамера = "") Экспорт
	
	ИмяТаблицыСвязей = "ВТРешениеСЛУ_СвязиПредварительная";
	ИмяТаблицыУзлов  = "ВТРешениеСЛУ_УзлыПредварительная";
	ИмяТаблицыУзлыСНулевымиВесами = "ВТРешениеСЛУ_УзлыСНулевымиВесами";
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИмяТаблицыСвязей + "," + ИмяТаблицыУзлов + "," + ИмяТаблицыУзлыСНулевымиВесами);
	
	#Область ОписаниеАлгоритма
	
	// 1. Из таблицы связей создаем временную таблицу <ИмяТаблицыСвязей>.
	// 2. В таблице <ИмяТаблицыСвязей> находим строки, в которых (по И)
	//	  - номер узла источника равен номеру узла приемника (это строки, в которой указываются веса узлов, а не дуг)
	//    - хоть в одном из полей, указанных в параметре ИменаКолонокВесов, значение равно 0 - такие узлы невозможно рассчитать при решении СЛУ
	//    Найденные номера узлов и колонки весов помещаем во временную таблицу <ИмяТаблицыУзлыСНулевымиВесами>
	// 3. Выполняем запросы из п.1 и п.2
	// 4. Если таблица <ИмяТаблицыУзлыСНулевымиВесами> пустая, то завершаем работу алгоритма - никаких изменений не требуется.
	//    Если некорректные узлы есть, то добавляем информацию об этом в протокол.
	// 5. Формируем текст запроса выборки связей из <ИмяТаблицыСвязей> - для всех связей с узлами из <ИмяТаблицыУзлыСНулевымиВесами> веса также выбираются нулевыми.
	// 6. Из таблицы узлов создаем временную таблицу <ИмяТаблицыУзлов>.
	// 7. Формируем текст запроса выборки узлов из <ИмяТаблицыУзлов>
	//    в которой для строк с номерами узлов, входящих в <ИмяТаблицыУзлыСНулевымиВесами>, обнуляем поля стоимости, соответствующие нулевым весам.
	
	#КонецОбласти
	
	#Область Связи_п1_п5
	
	СтруктураСтоимости = Новый Структура; // связь: колонка стоимости - колонка веса
	МассивУзлы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонокНомеровУзлов, ",",, Истина);
	
	ТекстСвязи     = ЗапросСвязи.Текст;
	КолонкиТаблицы = "";
	КолонкиТаблицыСУсловием = "";
	КолонкиВесов   = "";
	УсловиеОтбора  = "";
	
	// п.1
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстСвязи);
	
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяТаблицыСвязей;
	
	// п.2
	Для Каждого КлючИЗначение Из СвязиКолонокВесовИСтоимостей Цикл
		
		УсловиеОтбора = УсловиеОтбора + ?(УсловиеОтбора = "", "", Символы.ПС + "	ИЛИ ") + "Т." + КлючИЗначение.Ключ + " = 0";
		КолонкиВесов = КолонкиВесов + ?(КолонкиВесов = "", "", "," + Символы.ПС + "	") + "Т." + КлючИЗначение.Ключ;
		
		Для Каждого КолонкаСтоимости Из Новый Структура(КлючИЗначение.Значение) Цикл
			СтруктураСтоимости.Вставить(КолонкаСтоимости.Ключ, КлючИЗначение.Ключ); 
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекущаяКолонка Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл
		
		КолонкиТаблицы = КолонкиТаблицы + ?(КолонкиТаблицы = "", "", "," + Символы.ПС + "	") + "Т." + ТекущаяКолонка.Псевдоним;
		
		Если СвязиКолонокВесовИСтоимостей.Свойство(ТекущаяКолонка.Псевдоним) Тогда
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	")
				+ "ВЫБОР КОГДА ЕСТЬNULL(УзлыИсточники." + ТекущаяКолонка.Псевдоним + ", 1) = 0
					|  ИЛИ ЕСТЬNULL(УзлыПриемники." + ТекущаяКолонка.Псевдоним + ", 1) = 0 ТОГДА 0 ИНАЧЕ Т." + ТекущаяКолонка.Псевдоним + " КОНЕЦ КАК " + ТекущаяКолонка.Псевдоним;
		Иначе
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	") + "Т." + ТекущаяКолонка.Псевдоним;
		КонецЕсли;
		
	КонецЦикла;

	УсловиеОтбора = "Т." + МассивУзлы[0] + " = Т." + МассивУзлы[1] + Символы.ПС + "	И (" + УсловиеОтбора + ")";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&НомерУзла КАК НомерУзла,
	|	&КолонкиВесов
	|ПОМЕСТИТЬ ИмяТаблицыУзлыСНулевымиВесами
	|ИЗ
	|	ИмяТаблицыСвязей КАК Т
	|ГДЕ
	|	&УсловиеОтбора
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НомерУзла", МассивУзлы[0]); // значение полей МассивУзлы[0] и МассивУзлы[1] равны, можно использовать любое
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиВесов", КолонкиВесов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязей", ИмяТаблицыСвязей);

	НовыйПакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	НовыйПакет.УстановитьТекстЗапроса(ТекстЗапроса);
	
	// п.3
	ЗапросСвязи.Текст = СхемаЗапроса.ПолучитьТекстЗапроса(); // создание временной таблицы связей и поиск некорректных узлов
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, ЗапросСвязи,,,, ПояснениеДляЗамера);
	
	// п.4
	КоличествоУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыУзлыСНулевымиВесами);
	
	Если КоличествоУзлов = 0 Тогда

		// Некорректных узлов нет.
		// Возвращаем в ЗапросСвязи
		// - текст запроса выборки всех данных из <ИмяТаблицыСвязей> (таблица <ИмяТаблицыСвязей> уже сформирована ранее в этой процедуре)
		// - текст запроса удаления <ИмяТаблицыСвязей>
		// - текст запроса удаления <ИмяТаблицыУзлыСНулевымиВесами>
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&КолонкиТаблицы
		|ИЗ
		|	ИмяТаблицыСвязей КАК Т
		|;
		|
		|УНИЧТОЖИТЬ ИмяТаблицыСвязей
		|;
		|
		|УНИЧТОЖИТЬ ИмяТаблицыУзлыСНулевымиВесами
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицы",  КолонкиТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязей", ИмяТаблицыСвязей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
		
		ЗапросСвязи.Текст = ТекстЗапроса;
		
		Возврат;
		
	Иначе
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			НСтр("ru = 'Узлы СЛУ с нулевыми весами';
				|en = 'Узлы СЛУ с нулевыми весами'") + ": " + СокрЛП(КоличествоУзлов) + " (" + ПояснениеДляЗамера + ")");
			
	КонецЕсли;
	
	// п.5
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&КолонкиТаблицыСУсловием
	|ИЗ
	|	ИмяТаблицыСвязей КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК УзлыИсточники 
	|		ПО Т.ИмяКолонкиУзлаИсточника = УзлыИсточники.НомерУзла
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК УзлыПриемники
	|		ПО Т.ИмяКолонкиУзлаПриемника = УзлыПриемники.НомерУзла
	|;
	|
	|УНИЧТОЖИТЬ ИмяТаблицыСвязей
	|;
	|
	|УНИЧТОЖИТЬ ИмяТаблицыУзлыСНулевымиВесами
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицыСУсловием", КолонкиТаблицыСУсловием);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязей", ИмяТаблицыСвязей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиУзлаИсточника", МассивУзлы[0]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиУзлаПриемника", МассивУзлы[1]);
	
	// Возвращаем в ЗапросСвязи
	// - текст запроса выборки всех данных из <ИмяТаблицыСвязей> с нулевыми весами 
	// - текст запроса удаления <ИмяТаблицыСвязей>
	// - текст запроса удаления <ИмяТаблицыУзлыСНулевымиВесами>
	ЗапросСвязи.Текст = ТекстЗапроса;
	
	#КонецОбласти
	
	#Область Узлы_п6_п7
	
	ТекстУзлы = ЗапросУзлы.Текст;
	КолонкиТаблицыСУсловием = "";
	УсловиеОтбора = "";
	
	// п.6
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстУзлы);
	
	СхемаЗапроса.ПакетЗапросов[0].ТаблицаДляПомещения = ИмяТаблицыУзлов;
	СхемаЗапроса.ПакетЗапросов[0].Индекс.Добавить(ИмяКолонкиНомераУзла);

	// п.7
	Для Каждого ТекущаяКолонка Из СхемаЗапроса.ПакетЗапросов[0].Колонки Цикл
		
		ИмяКолонкиВеса = Неопределено;
		
		Если СтруктураСтоимости.Свойство(ТекущаяКолонка.Псевдоним, ИмяКолонкиВеса) Тогда
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	")
				+ "ВЫБОР КОГДА ЕСТЬNULL(Узлы." + ИмяКолонкиВеса + ", 1) = 0 ТОГДА 0 ИНАЧЕ Т." + ТекущаяКолонка.Псевдоним + " КОНЕЦ КАК " + ТекущаяКолонка.Псевдоним;
			УсловиеОтбора = УсловиеОтбора + ?(УсловиеОтбора = "", "", Символы.ПС + "	ИЛИ ")
				+ "(Узлы." + ИмяКолонкиВеса + " = 0 И Т." + ТекущаяКолонка.Псевдоним + " <> 0)";
		Иначе
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	") + "Т." + ТекущаяКолонка.Псевдоним;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраним информацию об узлах с нулевыми весами, но ненулевыми стоимостями
	Если НЕ ПараметрыРасчета.Свойство("УзлыСНулевымиВесами") Тогда
		УзлыСНулевымиВесами = Новый Массив;
	Иначе
		УзлыСНулевымиВесами = ПараметрыРасчета.УзлыСНулевымиВесами;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Узлы.НомерУзла КАК НомерУзла
	|ИЗ
	|	ИмяТаблицыУзлов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК Узлы
	|		ПО Т.ИмяКолонкиНомераУзла = Узлы.НомерУзла
	|ГДЕ
	|	&УсловиеОтбора
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлов",  ИмяТаблицыУзлов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиНомераУзла", ИмяКолонкиНомераУзла);

	НовыйПакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	НовыйПакет.УстановитьТекстЗапроса(ТекстЗапроса);
	
	ЗапросУзлы.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Выборка = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, ЗапросУзлы,,, Истина, ПояснениеДляЗамера + ", " + НСтр("ru = 'некорректные узлы';
																															|en = 'некорректные узлы'", ОбщегоНазначения.КодОсновногоЯзыка())).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УзлыСНулевымиВесами, Выборка.НомерУзла);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("УзлыСНулевымиВесами", УзлыСНулевымиВесами);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&КолонкиТаблицыСУсловием
	|ИЗ
	|	ИмяТаблицыУзлов КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК Узлы
	|		ПО Т.ИмяКолонкиНомераУзла = Узлы.НомерУзла
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицыСУсловием", КолонкиТаблицыСУсловием);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлов",  ИмяТаблицыУзлов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиНомераУзла", ИмяКолонкиНомераУзла);
	
	НовыйПакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	НовыйПакет.УстановитьТекстЗапроса(ТекстЗапроса);
	
	НовыйПакет = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	НовыйПакет.ИмяТаблицы = ИмяТаблицыУзлов;
	
	// Возвращаем в ЗапросУзлы
	// - текст запроса формирования <ИмяТаблицыУзлов> 
	// - текст запроса выборки данных из <ИмяТаблицыУзлов> за исключение некорректных узлов
	// - текст запроса удаления <ИмяТаблицыУзлов>
	ЗапросУзлы.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	#КонецОбласти
	
КонецПроцедуры

// Изменяет временные таблицы узлов и связей:
// - обнуляются стоимости для узлов, имеющих нулевой вес;
// - обнуляются веса для связей, в которые входит узел с нулевым весом.
//
// Параметры:
// 	ПараметрыРасчета - см. ИнициализироватьОбщиеПараметрыРасчета
//	ИмяТаблицыУзлов - Строка - имя временной таблицы узлов
//	ИмяКолонкиНомераУзла - Строка - имя колонки номера узла в ЗапросУзлы
//	ИмяТаблицыСвязей - Строка - имя временной таблицы связе
//	ИменаКолонокНомеровУзлов - Строка - имена колонок узла источника и узла приемника в ЗапросСвязи
//	СвязиКолонокВесовИСтоимостей - Структура:
//	 * Ключ - Строка - имя колонки веса
//	 * Значение - Строка - имена соответствующих колонок стоимости
//	ПояснениеДляЗамера - Строка - пояснение к СЛУ для вывода в протокол
//
Процедура СкорректироватьСтоимостьУзловСЛУИзВременныхТаблиц(ПараметрыРасчета, ИмяТаблицыУзлов, ИмяКолонкиНомераУзла,
			ИмяТаблицыСвязей, ИменаКолонокНомеровУзлов, СвязиКолонокВесовИСтоимостей, ПояснениеДляЗамера = "") Экспорт
	
	ИмяТаблицыСвязейПромежуточная = "ВТРешениеСЛУ_СвязиПромежуточная";
	ИмяТаблицыУзловПромежуточная  = "ВТРешениеСЛУ_УзлыПромежуточная";
	ИмяТаблицыУзлыСНулевымиВесами = "ВТРешениеСЛУ_УзлыСНулевымиВесами";
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, ИмяТаблицыСвязейПромежуточная + "," + ИмяТаблицыУзловПромежуточная + "," + ИмяТаблицыУзлыСНулевымиВесами);
	
	#Область ОписаниеАлгоритма
	
	// 1. В таблице <ИмяТаблицыСвязей> находим строки, в которых (по И)
	//	  - номер узла источника равен номеру узла приемника (это строки, в которой указываются веса узлов, а не дуг)
	//    - хоть в одном из полей, указанных в параметре ИменаКолонокВесов, значение равно 0 - такие узлы невозможно рассчитать при решении СЛУ
	//    Найденные номера узлов и колонки весов помещаем во временную таблицу <ИмяТаблицыУзлыСНулевымиВесами>
	// 2. Выполняем запросы формирования <ИмяТаблицыУзлыСНулевымиВесами>
	// 3. Если таблица <ИмяТаблицыУзлыСНулевымиВесами> пустая, то завершаем работу алгоритма - никаких изменений не требуется.
	//    Если некорректные узлы есть, то добавляем информацию об этом в протокол.
	// 4. Переформируем <ИмяТаблицыСвязей>:
	//	  - формируем <ИмяТаблицыСвязейПромежуточная> из <ИмяТаблицыСвязей> - если номер узла приемника или номер узла источника входят в <ИмяТаблицыНекорректныхУзлов>, то обнуляем вес
	//    - уничтожаем <ИмяТаблицыСвязей>
	//    - переносим все данные из <ИмяТаблицыСвязейПромежуточная> в <ИмяТаблицыСвязей>
	//    - уничтожаем <ИмяТаблицыСвязейПромежуточная>
	// 5. Переформируем <ИмяТаблицыУзлов>:
	//	  - формируем <ИмяТаблицыУзловПромежуточная> из <ИмяТаблицыУзлов>,
	//      в которой для строк с номерами узлов, входящих в <ИмяТаблицыУзлыСНулевымиВесами>, обнуляем поля стоимости, соответствующие нулевым весам
	//    - уничтожаем <ИмяТаблицыУзлов>
	//    - переносим все данные из <ИмяТаблицыУзловПромежуточная> в <ИмяТаблицыУзлов>
	//    - уничтожаем <ИмяТаблицыУзловПромежуточная>
	
	#КонецОбласти
	
	#Область Связи_п1_п4
	
	СтруктураСтоимости = Новый Структура; // связь: колонка стоимости - колонка веса
	МассивУзлы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКолонокНомеровУзлов, ",",, Истина);
	
	Запрос = Новый Запрос;
	РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	// п.1
	КолонкиТаблицы = СтрЗаменить(КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыСвязей, Истина), "%1", "Т.");
	КолонкиТаблицыСУсловием = "";
	КолонкиВесов   = "";
	УсловиеОтбора  = "";
	
	Для Каждого КлючИЗначение Из СвязиКолонокВесовИСтоимостей Цикл
		
		УсловиеОтбора = УсловиеОтбора + ?(УсловиеОтбора = "", "", Символы.ПС + "	ИЛИ ") + "Т." + КлючИЗначение.Ключ + " = 0";
		КолонкиВесов = КолонкиВесов + ?(КолонкиВесов = "", "", "," + Символы.ПС + "	") + "Т." + КлючИЗначение.Ключ;
		
		Для Каждого КолонкаСтоимости Из Новый Структура(КлючИЗначение.Значение) Цикл
			СтруктураСтоимости.Вставить(КолонкаСтоимости.Ключ, КлючИЗначение.Ключ); 
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекущаяКолонка Из Новый Структура(СтрЗаменить(КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыСвязей, Истина), "%1", "")) Цикл
		
		Если СвязиКолонокВесовИСтоимостей.Свойство(ТекущаяКолонка.Ключ) Тогда
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	")
				+ "ВЫБОР КОГДА ЕСТЬNULL(УзлыИсточники." + ТекущаяКолонка.Ключ + ", 1) = 0
					|  ИЛИ ЕСТЬNULL(УзлыПриемники." + ТекущаяКолонка.Ключ + ", 1) = 0 ТОГДА 0 ИНАЧЕ Т." + ТекущаяКолонка.Ключ + " КОНЕЦ КАК " + ТекущаяКолонка.Ключ;
		Иначе
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	") + "Т." + ТекущаяКолонка.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	УсловиеОтбора = "Т." + МассивУзлы[0] + " = Т." + МассивУзлы[1] + Символы.ПС + "	И (" + УсловиеОтбора + ")";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&НомерУзла КАК НомерУзла,
	|	&КолонкиВесов
	|ПОМЕСТИТЬ ИмяТаблицыУзлыСНулевымиВесами
	|ИЗ
	|	ИмяТаблицыСвязей КАК Т
	|ГДЕ
	|	&УсловиеОтбора
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерУзла
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НомерУзла", МассивУзлы[0]); // значение полей МассивУзлы[0] и МассивУзлы[1] равны, можно использовать любое
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиВесов", КолонкиВесов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязей", ИмяТаблицыСвязей);
	
	// п.2
	Запрос.Текст = ТекстЗапроса;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ПояснениеДляЗамера);
	
	// п.3
	КоличествоУзлов = РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыУзлыСНулевымиВесами);
	
	Если КоличествоУзлов = 0 Тогда

		Возврат;
		
	Иначе
		
		РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(
			ПараметрыРасчета,
			НСтр("ru = 'Узлы СЛУ с нулевыми весами';
				|en = 'Узлы СЛУ с нулевыми весами'") + ": " + СокрЛП(КоличествоУзлов) + " (" + ПояснениеДляЗамера + ")");
			
	КонецЕсли;
	
	// п.4
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&КолонкиТаблицыСУсловием
	|ПОМЕСТИТЬ ИмяТаблицыСвязейПромежуточная
	|ИЗ
	|	ИмяТаблицыСвязей КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК УзлыИсточники 
	|		ПО Т.ИмяКолонкиУзлаИсточника = УзлыИсточники.НомерУзла
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК УзлыПриемники
	|		ПО Т.ИмяКолонкиУзлаПриемника = УзлыПриемники.НомерУзла
	|;
	|
	|УНИЧТОЖИТЬ ИмяТаблицыСвязей
	|;
	|
	|ВЫБРАТЬ
	|	&КолонкиТаблицы
	|ПОМЕСТИТЬ ИмяТаблицыСвязей
	|ИЗ
	|	ИмяТаблицыСвязейПромежуточная КАК Т"
	+ "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяКолонкиУзлаИсточника,
	|	ИмяКолонкиУзлаПриемника
	|;
	|"
	+ "
	|УНИЧТОЖИТЬ ИмяТаблицыСвязейПромежуточная
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицыСУсловием",  КолонкиТаблицыСУсловием);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицы",  КолонкиТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязейПромежуточная",  ИмяТаблицыСвязейПромежуточная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыСвязей",  ИмяТаблицыСвязей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиУзлаИсточника", МассивУзлы[0]);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиУзлаПриемника", МассивУзлы[1]);
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ПояснениеДляЗамера);
	
	#КонецОбласти
	
	#Область Узлы_п5
	
	// п.5
	КолонкиТаблицы = СтрЗаменить(КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыУзлов, Истина), "%1", "Т.");
	КолонкиТаблицыСУсловием = "";
	УсловиеОтбора = "";
	
	Для Каждого ТекущаяКолонка Из Новый Структура(СтрЗаменить(КолонкиВременнойТаблицы(ПараметрыРасчета, ИмяТаблицыУзлов, Истина), "%1", "")) Цикл
		
		ИмяКолонкиВеса = Неопределено;
		
		Если СтруктураСтоимости.Свойство(ТекущаяКолонка.Ключ, ИмяКолонкиВеса) Тогда
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	")
				+ "ВЫБОР КОГДА ЕСТЬNULL(Узлы." + ИмяКолонкиВеса + ", 1) = 0 ТОГДА 0 ИНАЧЕ Т." + ТекущаяКолонка.Ключ + " КОНЕЦ КАК " + ТекущаяКолонка.Ключ;
			УсловиеОтбора = УсловиеОтбора + ?(УсловиеОтбора = "", "", Символы.ПС + "	ИЛИ ")
				+ "(Узлы." + ИмяКолонкиВеса + " = 0 И Т." + ТекущаяКолонка.Ключ + " <> 0)";
		Иначе
			КолонкиТаблицыСУсловием = КолонкиТаблицыСУсловием + ?(КолонкиТаблицыСУсловием = "", "", "," + Символы.ПС + "	") + "Т." + ТекущаяКолонка.Ключ;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохраним информацию об узлах с нулевыми весами, но ненулевыми стоимостями
	Если НЕ ПараметрыРасчета.Свойство("УзлыСНулевымиВесами") Тогда
		УзлыСНулевымиВесами = Новый Массив;
	Иначе
		УзлыСНулевымиВесами = ПараметрыРасчета.УзлыСНулевымиВесами;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Узлы.НомерУзла КАК НомерУзла
	|ИЗ
	|	ИмяТаблицыУзлов КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК Узлы
	|		ПО Т.ИмяКолонкиНомераУзла = Узлы.НомерУзла
	|ГДЕ
	|	&УсловиеОтбора
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлов",  ИмяТаблицыУзлов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиНомераУзла", ИмяКолонкиНомераУзла);

	Запрос.Текст = ТекстЗапроса;
	
	Выборка = ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,, Истина, ПояснениеДляЗамера + ", " + НСтр("ru = 'некорректные узлы';
																														|en = 'некорректные узлы'", ОбщегоНазначения.КодОсновногоЯзыка())).Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УзлыСНулевымиВесами, Выборка.НомерУзла);
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("УзлыСНулевымиВесами", УзлыСНулевымиВесами);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&КолонкиТаблицыСУсловием
	|ПОМЕСТИТЬ ИмяТаблицыУзловПромежуточная
	|ИЗ
	|	ИмяТаблицыУзлов КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицыУзлыСНулевымиВесами КАК Узлы
	|		ПО Т.ИмяКолонкиНомераУзла = Узлы.НомерУзла
	|;
	|
	|УНИЧТОЖИТЬ ИмяТаблицыУзлов
	|;
	|
	|ВЫБРАТЬ
	|	&КолонкиТаблицы
	|ПОМЕСТИТЬ ИмяТаблицыУзлов
	|ИЗ
	|	ИмяТаблицыУзловПромежуточная КАК Т"
	+ "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяКолонкиНомераУзла
	|;
	|"
	+ "
	|УНИЧТОЖИТЬ ИмяТаблицыУзловПромежуточная
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицыСУсловием", КолонкиТаблицыСУсловием);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КолонкиТаблицы",  КолонкиТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлыСНулевымиВесами", ИмяТаблицыУзлыСНулевымиВесами);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзловПромежуточная",  ИмяТаблицыУзловПромежуточная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыУзлов",  ИмяТаблицыУзлов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяКолонкиНомераУзла", ИмяКолонкиНомераУзла);
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос,,,, ПояснениеДляЗамера);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти


#Область Запросы

// Процедура выполняет пакет запросов по частям.
// При этом замеряется время выполнения и размер результирующей временной таблицы каждого запроса,
// формируются записи в протокол расчета себестоимости.
//
// Параметры:
//	ПараметрыРасчета - Структура - параметры расчета
//	Запрос - Запрос - выполняемый запрос
//	УвеличиватьСчетчикЗамераПроизводительности - Булево - признак необходимости увеличения количества обработанных данных для механизма ОценкаПроизводительности
//	ИменаВременныхТаблицДляЗамера - Строка - имена таблиц, размер которых будет добавлен к количеству обработанных данных.
//		Если в пакете запросов есть запрос выборки данных, то размер выборки будет добавлен к количеству обработанных данных безусловно.
//	ВозвращатьРезультатыЗапросов - Булево - определяет результат, возвращаемый данной функцией:
//		Истина - будут возвращены результаты выполнения подзапросов.
//		Ложь   - будут возвращены выборки данных подзапросов.
//	Пояснение - Строка - пояснение к замеру
//	
//	Возвращаемое значение:
//		Массив из РезультатЗапроса, РезультатЗапроса, ВыборкаИзРезультатаЗапроса -
//			если в пакете запроса есть только один запрос выборки данных,
//				то будет возвращен РезультатЗапроса или ВыборкаИзРезультатаЗапроса, в зависимости от параметра ВозвращатьРезультатыЗапросов
//			в противном случае будет возвращен массив из элементов [РезультатЗапроса или ВыборкаИзРезультатаЗапроса] для каждого запроса.
//
Функция ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос, УвеличиватьСчетчикЗамераПроизводительности = Ложь,
			ИменаВременныхТаблицДляЗамера = "", ВозвращатьРезультатыЗапросов = Ложь, Пояснение = "") Экспорт
	
	ВедетсяПротоколРасчета = РасчетСебестоимостиПротоколРасчета.ВедетсяПротоколРасчета(ПараметрыРасчета);
	
	Если НЕ ВедетсяПротоколРасчета
	 И НЕ (ТипЗнч(ПараметрыРасчета) = Тип("Структура") И ПараметрыРасчета.Свойство("РезультатВыполненияЗапроса")) Тогда
		Результат = Запрос.Выполнить();
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ВедетсяПротоколРасчета Тогда
		ПараметрыРасчета.Вставить("РезультатВыполненияЗапроса", "");
	КонецЕсли;
	
	ВестиПротоколВыполненияЗапросаВЖурналеРегистрации = ВедетсяПротоколРасчета И ПараметрыРасчета.Свойство("ПредставлениеЭтапа")
		И НРег(ПараметрыРасчета.ПредставлениеЭтапа) = НРег(СокрЛП(ПараметрыРасчета.Отладка.ВестиПротоколЗапросовЭтапаВЖурналеРегистрации));
	
	Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
		
		РазмерыТаблиц = РазмерыВременныхТаблиц(ПараметрыРасчета, Истина);
		ТекстДляПротокола = НСтр("ru = 'Размеры существующих временных таблиц';
								|en = 'Sizes of existing temporary tables'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Для Каждого КлючИЗначение Из РазмерыТаблиц Цикл
			ТекстДляПротокола = ТекстДляПротокола + Символы.ПС + КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ЭтоЗапросВыборкиДанных = Ложь;
	КоличествоВыборок = 0;
	ПоследняяВыборка = -1;
	
	СтруктураТаблицДляЗамера = Новый Структура(ИменаВременныхТаблицДляЗамера);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	Попытка
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		СхемаРазобрана = Истина;
	Исключение
		
		СхемаРазобрана = Ложь;
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось инициализировать схему запроса:
				|%1';
				|en = 'Cannot initialize request schemes:
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если ВедетсяПротоколРасчета Тогда
			
			РасчетСебестоимостиПротоколРасчета.ДополнительнаяИнформация(ПараметрыРасчета, ТекстОшибки);
			
			Если ПараметрыРасчета.АвтоматическоеТестирование Тогда

				ЗаписьЖурналаРегистрации(
					ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПараметрыРасчета.ПредставлениеЭтапа + ":" + Символы.ПС + ТекстОшибки);
						
			КонецЕсли;
			
		Иначе
			ПараметрыРасчета.РезультатВыполненияЗапроса =
				ПараметрыРасчета.РезультатВыполненияЗапроса + ?(ПараметрыРасчета.РезультатВыполненияЗапроса = "", "", Символы.ПС)
				+ ТекстОшибки;
		КонецЕсли;
		
	КонецПопытки;
	
	Если НЕ СхемаРазобрана Тогда
		
		Если СтруктураТаблицДляЗамера.Количество() = 1 Тогда
			ИмяТаблицы = ИменаВременныхТаблицДляЗамера;
		Иначе
			ИмяТаблицы = "ИмяТаблицыНеОпределено";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пояснение) И ИмяТаблицы = "Данные" Тогда
			ПояснениеКТаблице = НСтр("ru = 'Формирование';
									|en = 'Formation'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ПояснениеКТаблице = Пояснение;
		КонецЕсли;
		
		Если ВедетсяПротоколРасчета Тогда
			РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы, ПояснениеКТаблице);
		КонецЕсли;
		
		Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
			
			ТекстОписаниеТаблицы = НСтр("ru = 'Текст запроса';
										|en = 'Query text'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ИмяТаблицы + ":" + Символы.ПС + Запрос.Текст;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстОписаниеТаблицы);
			
		КонецЕсли;
		
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
			
		Если ВозвращатьРезультатыЗапросов Тогда
			Результат = Запрос.ВыполнитьПакет();
			КоличествоДанных = Неопределено;
		Иначе
			Результат = Запрос.Выполнить();
			Если Результат <> Неопределено Тогда
				Результат = Результат.Выбрать();
				КоличествоДанных = Результат.Количество();
			Иначе
				КоличествоДанных = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполнения) / 1000;
		ТекстОписаниеТаблицы = ИмяТаблицы + ": " + СокрЛП(КоличествоДанных) + " / "
			+ РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяВыполнения)
			+ ?(ПояснениеКТаблице = "", "", " / " + ПояснениеКТаблице);
		
		Если ВедетсяПротоколРасчета Тогда
			
			РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета,, КоличествоДанных);
			
			Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
				ЗаписьЖурналаРегистрации(
					ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
					УровеньЖурналаРегистрации.Информация,,,
					ТекстОписаниеТаблицы);
			КонецЕсли;
			
		Иначе
			ПараметрыРасчета.РезультатВыполненияЗапроса =
				ПараметрыРасчета.РезультатВыполненияЗапроса + ?(ПараметрыРасчета.РезультатВыполненияЗапроса = "", "", Символы.ПС)
				+ ТекстОписаниеТаблицы;
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	НомерПодзапроса = -1;
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	
	Для Каждого ЗапросВыбора Из СхемаЗапроса.ПакетЗапросов Цикл
		
		НомерПодзапроса = НомерПодзапроса + 1;
		
		Если ТипЗнч(ЗапросВыбора) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			
			Запрос.Текст = "УНИЧТОЖИТЬ" + " " + ЗапросВыбора.ИмяТаблицы;
			
			Результат.Добавить(Запрос.Выполнить());
			
			Продолжить;
			
		КонецЕсли;
		
		ИмяТаблицы 				= ЗапросВыбора.ТаблицаДляПомещения;
		ЭтоЗапросВыборкиДанных 	= НЕ ЗначениеЗаполнено(ИмяТаблицы);
		
		Если ЭтоЗапросВыборкиДанных Тогда
			КоличествоВыборок = КоличествоВыборок + 1;
		КонецЕсли;
		
		ИмяПодзапроса = НСтр("ru = 'Выборка';
							|en = 'Selection'", ОбщегоНазначения.КодОсновногоЯзыка()) + ?(КоличествоВыборок = 1, "", "_" + СокрЛП(КоличествоВыборок));
		
		ИмяПодзапроса = СтрЗаменить(СокрЛП(ИмяПодзапроса), " ", "_"); // для международной версии
		
		Запрос.Текст = ЗапросВыбора.ПолучитьТекстЗапроса();
		
		// Выполним очередной подзапрос.
		Если НЕ ЭтоЗапросВыборкиДанных Тогда
			УничтожитьВременныеТаблицы(Запрос, ИмяТаблицы);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пояснение) И ИмяТаблицы = "Данные" Тогда
			ПояснениеКТаблице = НСтр("ru = 'Формирование';
									|en = 'Formation'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ПояснениеКТаблице = Пояснение;
		КонецЕсли;
		
		Если ВедетсяПротоколРасчета Тогда
			
			РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(
				ПараметрыРасчета,
				?(ЭтоЗапросВыборкиДанных, ИмяПодзапроса, ИмяТаблицы),
				ПояснениеКТаблице);
			
			Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
				
				ТекстОписаниеТаблицы = НСтр("ru = 'Текст запроса';
											|en = 'Query text'", ОбщегоНазначения.КодОсновногоЯзыка()) + " "
					+ ?(ЭтоЗапросВыборкиДанных, ИмяПодзапроса, ИмяТаблицы) + ":" + Символы.ПС + Запрос.Текст;
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
					УровеньЖурналаРегистрации.Информация,,,
					ТекстОписаниеТаблицы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Попытка
			РезультатПодзапроса = Запрос.Выполнить();
		Исключение
			
			ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении подзапроса %1 (%2) произошла ошибка:
					|%3';
					|en = 'An error occurred while executing subquery %1 (%2):
					|%3'"),
				СокрЛП(НомерПодзапроса),
				?(ЭтоЗапросВыборкиДанных, НСтр("ru = 'выборка данных';
												|en = 'dataset'"), ИмяТаблицы),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ВедетсяПротоколРасчета Тогда
					
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					ПараметрыРасчета,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
					ТекстДляПротокола);
					
				Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
					
					ЗаписьЖурналаРегистрации(
						ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
						УровеньЖурналаРегистрации.Информация,,,
						ТекстДляПротокола);
					
				КонецЕсли;
				
			Иначе
				ПараметрыРасчета.РезультатВыполненияЗапроса =
					ПараметрыРасчета.РезультатВыполненияЗапроса + ?(ПараметрыРасчета.РезультатВыполненияЗапроса = "", "", Символы.ПС)
					+ ТекстДляПротокола;
			КонецЕсли;
			
			ВызватьИсключение ТекстДляПротокола;
			
		КонецПопытки;
		
		Если ЭтоЗапросВыборкиДанных И НЕ ВозвращатьРезультатыЗапросов Тогда
			Выборка = РезультатПодзапроса.Выбрать();
			КоличествоДанных = Выборка.Количество();
		Иначе
			Если ВедетсяПротоколРасчета ИЛИ НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
				КоличествоДанных = Неопределено;
			Иначе
				КоличествоДанных = РазмерВременнойТаблицы(Запрос, ИмяТаблицы);
			КонецЕсли;
		КонецЕсли;
		
		ВремяВыполнения = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоВыполнения) / 1000;
		
		Если ВедетсяПротоколРасчета Тогда
			РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета,, КоличествоДанных);
		КонецЕсли;
		
		ТекстОписаниеТаблицы = ?(ЭтоЗапросВыборкиДанных, ИмяПодзапроса, ИмяТаблицы) + ": " + Формат(КоличествоДанных, "ЧН=0") + " / "
			+ РасчетСебестоимостиПротоколРасчета.ПредставлениеВремени(ВремяВыполнения)
			+ ?(ПояснениеКТаблице = "", "", " / " + ПояснениеКТаблице);
		
		Если ВестиПротоколВыполненияЗапросаВЖурналеРегистрации Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстОписаниеТаблицы);
		ИначеЕсли НЕ ВедетсяПротоколРасчета Тогда
			ПараметрыРасчета.РезультатВыполненияЗапроса =
				ПараметрыРасчета.РезультатВыполненияЗапроса + ?(ПараметрыРасчета.РезультатВыполненияЗапроса = "", "", Символы.ПС)
				+ ТекстОписаниеТаблицы;
		КонецЕсли;
		
		Если ЭтоЗапросВыборкиДанных Тогда
			
			Если ВозвращатьРезультатыЗапросов Тогда
				Результат.Добавить(РезультатПодзапроса); // результат запроса
			Иначе
				Результат.Добавить(Выборка); // выборка
			КонецЕсли;
			
			ПоследняяВыборка = Результат.Количество() - 1;
			
			Если УвеличиватьСчетчикЗамераПроизводительности Тогда
				
				Если ВозвращатьРезультатыЗапросов Тогда
					КоличествоДанных = РезультатПодзапроса.Выбрать().Количество();
				Иначе
					КоличествоДанных = Выборка.Количество();
				КонецЕсли;
				
				Если ВедетсяПротоколРасчета Тогда
					РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
						ПараметрыРасчета,
						КоличествоДанных);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Результат.Добавить(РезультатПодзапроса); // результат запроса
			
			Если ВедетсяПротоколРасчета И УвеличиватьСчетчикЗамераПроизводительности И СтруктураТаблицДляЗамера.Свойство(ИмяТаблицы) Тогда
				
				РасчетСебестоимостиПротоколРасчета.УвеличитьКоличествоОбработанныхДанныхДляЗамера(
					ПараметрыРасчета,
					РазмерВременнойТаблицы(ПараметрыРасчета, ИмяТаблицы));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	Если КоличествоВыборок = 1 Тогда
		Возврат Результат[ПоследняяВыборка]; // выборка
	КонецЕсли;
		
	Возврат Результат; // массив результатов
	
КонецФункции

Функция ИнициализироватьЗапросПоПараметрам(ПараметрыЗапроса, ВременныеТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаменитьВидДвиженияНаСлужебный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СлужебноеВидДвиженияПриход");
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаменитьВидДвиженияНаПлатформенный(ОписаниеРегистра, ТекстПоля, ПсевдонимПоля = "СлужебноеВидДвиженияПриход")
	
	Если ОписаниеРегистра.ЕстьСвойствоВидДвижения Тогда
		ТекстПоля = СтрЗаменить(ТекстПоля,
			"Т." + ПсевдонимПоля,
			"ВЫБОР КОГДА Т.СлужебноеВидДвиженияПриход ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КОНЕЦ КАК ВидДвижения");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаменитьШаблоныВТекстеЗапроса(ПараметрыРасчета, ОписаниеРегистра, ЗапросИлиТекст,
		ПоОрганизации = Неопределено, ПоСлужебнымПоИ = Неопределено,
		ПоРасчетСебестоимости = Неопределено, ПоРасчетПартий = Неопределено, ПоНепересчитываемыйТипЗаписи = Неопределено)
		
	ТекстЗапроса = ?(ТипЗнч(ЗапросИлиТекст) = Тип("Строка"), ЗапросИлиТекст, ЗапросИлиТекст.Текст);
	
	// Имя регистра
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыКэшаРегистра", 				ОписаниеРегистра.ИмяТаблицыКэшаРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыРасчетныхОборотовРегистра", ОписаниеРегистра.ИмяТаблицыРасчетныхОборотовРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыРасчетныхОстатковРегистра", ОписаниеРегистра.ИмяТаблицыРасчетныхОстатковРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяОсновнойТаблицыРегистра",			ОписаниеРегистра.ПолноеИмяРегистра);
	
	// Отбор по организации
	Если ПоОрганизации <> Неопределено Тогда
		
		Если ОписаниеРегистра.ЕстьОрганизация Тогда
			ОтборПоОрганизации = "И %НЕ Т.Организация В (&МассивОрганизаций)";
		ИначеЕсли ОписаниеРегистра.ЕстьАналитикаПартнеров Тогда
			ОтборПоОрганизации = "И %НЕ Т.АналитикаУчетаПоПартнерам В (ВЫБРАТЬ Отбор.КлючАналитики ИЗ ВТОтборАналитикаПоПартнерам КАК Отбор)";
		Иначе
			ОтборПоОрганизации = "";
		КонецЕсли;
		
		ОтборПоОрганизации = СтрЗаменить(ОтборПоОрганизации, "%НЕ ", ?(ПоОрганизации, "", "НЕ "));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоОрганизации", ОтборПоОрганизации);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОрганизации", ОтборПоОрганизации);
		
	КонецЕсли;
	
	ОтборПоСлужебнымРеквизитам = "";
	
	// Отборы по служебным реквизитам
	Если ПоСлужебнымПоИ <> Неопределено Тогда
		
		Если ПоРасчетСебестоимости <> Неопределено Тогда
			Если ОписаниеРегистра.ЕстьРасчетСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "", "НЕ ") + "Т.РасчетСебестоимости";
			ИначеЕсли НЕ ОписаниеРегистра.ЭтоРегистрНакопления Тогда
				// У регистров сведений нет ресурса РасчетСебестоимости.
				// Все их движения считаются расчетными.
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетСебестоимости, "ИСТИНА", "ЛОЖЬ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРасчета.ЗапущенРасчетПартий Тогда
			
			Если ПоРасчетПартий <> Неопределено И ОписаниеРегистра.ЕстьРасчетПартий Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(ПоРасчетПартий, "", "НЕ ") + "Т.РасчетПартий";
			КонецЕсли;
			
			Если ПоНепересчитываемыйТипЗаписи <> Неопределено И ОписаниеРегистра.ЭтоРегистрСебестоимости Тогда
				ОтборПоСлужебнымРеквизитам = ОтборПоСлужебнымРеквизитам
					+ ?(ОтборПоСлужебнымРеквизитам = "", "", ?(ПоСлужебнымПоИ, " И ", " ИЛИ "))
					+ ?(НЕ ПоНепересчитываемыйТипЗаписи, "", "НЕ ") + "Т.ТипЗаписи В (&НепересчитываемыеТипыЗаписей)";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОтборПоСлужебнымРеквизитам) Тогда
			ОтборПоСлужебнымРеквизитам = "И (" + ОтборПоСлужебнымРеквизитам + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ОтборПоСлужебнымРеквизитам", ОтборПоСлужебнымРеквизитам);
	
	Если ТипЗнч(ЗапросИлиТекст) = Тип("Строка") Тогда
		ЗапросИлиТекст = ТекстЗапроса;
	Иначе
		ЗапросИлиТекст.Текст = ТекстЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Функция ПустыеРегистраторыРегистра(ИмяРегистра) Экспорт
	
	МассивОписанияРегистраторов = Новый Массив();
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления[ИмяРегистра]) Тогда
			МассивОписанияРегистраторов.Добавить("ЗНАЧЕНИЕ(Документ." + МетаданныеДокумента.Имя + ".ПустаяСсылка)");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивОписанияРегистраторов, ",");
	
КонецФункции

Функция ДоступныеТипыДокумента(ИмяРегистра, ИмяРеквизита) Экспорт
	
	МассивОписанияТипов = Новый Массив();
	
	ТипРеквизита = Неопределено;
	
	Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		ТипРеквизита = Неопределено;
	ИначеЕсли Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ТипРеквизита = Метаданные.РегистрыНакопления[ИмяРегистра].Реквизиты[ИмяРеквизита].Тип;
	ИначеЕсли Метаданные.РегистрыНакопления[ИмяРегистра].Измерения.Найти(ИмяРеквизита) <> Неопределено Тогда
		ТипРеквизита = Метаданные.РегистрыНакопления[ИмяРегистра].Измерения[ИмяРеквизита].Тип;
	Иначе
		ТипРеквизита = Неопределено;
	КонецЕсли;
	
	Если ТипРеквизита = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Для Каждого ТипДокумента Из ТипРеквизита.Типы() Цикл
		Если ТипДокумента = Тип("Строка") Тогда
			МассивОписанияТипов.Добавить("ТИП(Документ.КорректировкаРегистров)");
		Иначе
			МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипДокумента);
			МассивОписанияТипов.Добавить("ТИП(Документ." + МетаданныеДокумента.Имя + ")");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивОписанияТипов, ", ");
	
КонецФункции

Функция ДоступныеТипыРегистратора(ИмяРегистра) Экспорт
	
	МассивОписанияТипов = Новый Массив();
	
	МетаданныеРегистра = ?(Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено,
		Метаданные.РегистрыНакопления[ИмяРегистра],
		Метаданные.РегистрыСведений[ИмяРегистра]);
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		
		Если МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			МассивОписанияТипов.Добавить("ТИП(Документ." + МетаданныеДокумента.Имя + ")");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивОписанияТипов, ", ");
	
КонецФункции

Процедура ВыполнитьЗапросПоОписаниюПолей(ПараметрыРасчета, ТаблицаОписанияПолей, ИмяРегистра, ИмяВременнойТаблицыИсточник, ИмяВременнойТаблицыПриемник,
			УсловиеГДЕ = Неопределено, СтруктураПараметров = Неопределено, УдалятьНезаписываемыеДанные = Истина) Экспорт
	
	Если ПараметрыРасчета.Движения.Свойство(ИмяРегистра) Тогда
		ОписаниеПриемника = ПараметрыРасчета.Движения[ИмяРегистра];
	Иначе
		ОписаниеПриемника = ПараметрыРасчета.ВспомогательныеВременныеТаблицы[ИмяРегистра];
	КонецЕсли;
	
	ЭтоРегистрСебестоимости = (ИмяРегистра = Метаданные.РегистрыНакопления.СебестоимостьТоваров.Имя);
	ЭтоРегистрВыручки = (ИмяРегистра = Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.Имя);
	ЭтоРегистрНДСКРаспределению = (ИмяРегистра = Метаданные.РегистрыНакопления.ПартииНДСКРаспределению.Имя);
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого КлючЗначение Из СтруктураПараметров Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Заполним служебное поле РасчетСебестоимости
	Если ОписаниеПриемника.ЕстьРасчетСебестоимости Тогда
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетСебестоимости",
			?(ПараметрыРасчета.ИдетРасчетПартий, "ЛОЖЬ", "ИСТИНА"));
	КонецЕсли;
	
	// Заполним служебное поле РасчетПартий
	Если ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости Тогда
		
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетПартий",
			"ЭтоТочноРасчетноеДвижение ИЛИ НЕ (ТипЗаписи В (&ТипыЗаписейПервичныхДвижений))");
		
	ИначеЕсли ЭтоРегистрНДСКРаспределению Тогда
		
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетПартий", "ИСТИНА"); // в регистре есть только один служебный реквизит
		
	ИначеЕсли ОписаниеПриемника.ЕстьРасчетПартий
	 И НЕ (ЭтоРегистрСебестоимости И ПараметрыРасчета.ЗаполняютсяПартииВСебестоимости)
	 И НЕ (ЭтоРегистрВыручки И ПараметрыРасчета.ЗаполняютсяПартииВВыручке) Тогда
	
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "РасчетПартий",
			?(ПараметрыРасчета.ИдетРасчетПартий, "ИСТИНА", "ЛОЖЬ"));
		
	КонецЕсли;
	
	// Исключим незаписываемые движения
	Если УдалятьНезаписываемыеДанные И ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.Свойство("РаспределениеПартий") Тогда
		
		НезаписываемыеДанные = ПараметрыРасчета.РаспределениеПартий.НезаписываемыеДанные;
		
		УсловиеНезаписываемыеДанные = "";
		
		Если КолонкаВременнойТаблицыСуществует(ПараметрыРасчета, ИмяВременнойТаблицыИсточник, "РасчетЗавершен")
		 И НЕ НезаписываемыеДанные.ЗаписыватьНезавершенные Тогда
			УсловиеНезаписываемыеДанные = "РасчетЗавершен";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеТипыЗаписей) Тогда
			
			Запрос.УстановитьПараметр(
				"НезаписываемыеТипыЗаписей",
				ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(НезаписываемыеДанные.НезаписываемыеТипыЗаписей));
			
			УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
				|	И ") + "НЕ ТипЗаписи В (&НезаписываемыеТипыЗаписей)";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеРазделы) Тогда
			
			Запрос.УстановитьПараметр(
				"НезаписываемыеРазделы",
				ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеИлиСтруктуруВМассив(НезаписываемыеДанные.НезаписываемыеРазделы));
			
			УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
				|	И ") + "НЕ РазделУчета В (&НезаписываемыеРазделы)";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НезаписываемыеДанные.НезаписываемыеРегистраторы) Тогда
			
			НезаписываемыеТипыРегистраторов = Новый Массив;
			
			Для Каждого КлючИЗначение Из НезаписываемыеДанные.НезаписываемыеРегистраторы Цикл
				НезаписываемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка." + КлючИЗначение.Ключ));
			КонецЦикла;
			
			Запрос.УстановитьПараметр("НезаписываемыеТипыРегистраторов", НезаписываемыеТипыРегистраторов);
			
			УсловиеНезаписываемыеДанные = УсловиеНезаписываемыеДанные + ?(УсловиеНезаписываемыеДанные = "", "", "
				|	И ") + "НЕ ТИПЗНАЧЕНИЯ(Регистратор) В (&НезаписываемыеТипыРегистраторов)";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловиеНезаписываемыеДанные) Тогда
			УсловиеГДЕ = ?(НЕ ЗначениеЗаполнено(УсловиеГДЕ), "", "
				|	И ") + УсловиеНезаписываемыеДанные;
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеПолей = ПолучитьОписаниеПолейЗапроса(ТаблицаОписанияПолей, ОписаниеПриемника.Таблица);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ОписаниеПолей
	|ПОМЕСТИТЬ ИмяВременнойТаблицыПриемник
	|ИЗ
	|	ИмяВременнойТаблицыИсточник
	|ГДЕ 
	|	&УсловиеГДЕ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОписаниеПолей", ОписаниеПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицыПриемник", ИмяВременнойТаблицыПриемник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицыИсточник", ИмяВременнойТаблицыИсточник);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеГДЕ", ?(ЗначениеЗаполнено(УсловиеГДЕ), УсловиеГДЕ, "ИСТИНА"));
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает описание полей запроса.
// 
// Параметры:
// 	ОписаниеПриемника - ТаблицаЗначений -
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Поле - Строка -
// * Представление - Строка -
Функция СформироватьОписаниеПолейЗапроса(ОписаниеПриемника) Экспорт
	
	ТаблицаОписанияПолей = Новый ТаблицаЗначений;
	ТаблицаОписанияПолей.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ТаблицаОписанияПолей.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	Для Каждого КолонкаПриемника Из ОписаниеПриемника.Колонки Цикл
		НоваяСтрока = ТаблицаОписанияПолей.Добавить();
		НоваяСтрока.Представление = ВРег(КолонкаПриемника.Имя);
		
		Если КолонкаПриемника.ТипЗначения.Типы().Количество() > 1 Тогда
			НоваяСтрока.Поле = "Неопределено";
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = КолонкаПриемника.ТипЗначения.Типы().Получить(0);
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипКолонки);
		
		Если ТипКолонки = Тип("Булево") Тогда
			НоваяСтрока.Поле = "ЛОЖЬ";
		ИначеЕсли ТипКолонки = Тип("Число") Тогда
			НоваяСтрока.Поле = "0";
		ИначеЕсли ТипКолонки = Тип("Дата") Тогда
			НоваяСтрока.Поле = "ДАТАВРЕМЯ(1,1,1,0,0,0)";
		ИначеЕсли ТипКолонки = Тип("Строка") Тогда
			НоваяСтрока.Поле = """""";
		ИначеЕсли ТипКолонки = Тип("ВидДвиженияНакопления") Тогда
			НоваяСтрока.Поле = "ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		ИначеЕсли ОбъектМетаданных <> Неопределено Тогда
			НоваяСтрока.Поле = "ЗНАЧЕНИЕ(" + ОбъектМетаданных.ПолноеИмя() + ".ПустаяСсылка)";
		Иначе
			НоваяСтрока.Поле = "Неопределено";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеПриемника.Колонки.Найти("ВидДвижения") <> Неопределено Тогда
		
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "СлужебноеВидДвиженияПриход", "
		|ВЫБОР КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|");
		
	КонецЕсли;
	
	Возврат ТаблицаОписанияПолей;
	
КонецФункции

Функция КопироватьПоляЗапроса(ТаблицаОписанияПолей ,КопируемыеПоля) Экспорт
	
	МассивПолей = СтрРазделить(КопируемыеПоля, ",");
	Для Каждого Поле Из МассивПолей Цикл
		мПоле = СтрЗаменить(СтрЗаменить(СокрЛП(Поле), Символы.ПС, ""), Символы.Таб, "");
		СтрокаПоле = ТаблицаОписанияПолей.Найти(ВРег(мПоле), "Представление");
		Если СтрокаПоле <> Неопределено Тогда
			СтрокаПоле.Поле = мПоле;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаОписанияПолей;
	
КонецФункции

// Добавляет поле запроса в описание полей.
// 
// Параметры:
// 	ТаблицаОписанияПолей - ТаблицаЗначений -
// 	Поле - Строка -
// 	Представление - Строка -
Процедура ДобавитьПолеВОписаниеПолейЗапроса(ТаблицаОписанияПолей, Поле, Представление) Экспорт
	
	НоваяСтрока = ТаблицаОписанияПолей.Добавить();
	НоваяСтрока.Поле = Поле;
	НоваяСтрока.Представление = ВРег(Представление);
	
КонецПроцедуры

Процедура ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, ПолеИсходное, Поле, Представление = Неопределено) Экспорт
	
	ОписаниеПоля = ТаблицаОписанияПолей.Найти(ВРег(ПолеИсходное), "Представление");
	Если ОписаниеПоля <> Неопределено Тогда
		ОписаниеПоля.Поле = Поле;
		Если Представление <> Неопределено Тогда
			ОписаниеПоля.Представление = ВРег(Представление);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьРегистраторИДокументДвиженияВОписанииПолейЗапроса(ТаблицаОписанияПолей, ИмяРегистра, СУчетомКорректировки = Ложь) Экспорт
	
	МетаРегистр = Метаданные.РегистрыНакопления[ИмяРегистра];
	
	ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "Регистратор", "
		|ВЫБОР КОГДА ДокументДвижения ЕСТЬ NULL ИЛИ ДокументДвижения = Неопределено 
		|  ИЛИ ДокументДвижения В(" + ПустыеРегистраторыРегистра(ИмяРегистра) + ")
		|	ТОГДА &ФиктивныйРегистратор
		|	ИНАЧЕ ДокументДвижения
		|КОНЕЦ");
	
	Если МетаРегистр.Реквизиты.Найти("ДокументДвижения") <> Неопределено
	 ИЛИ МетаРегистр.Измерения.Найти("ДокументДвижения") <> Неопределено Тогда
	 
		ИзменитьПолеВОписанииПолейЗапроса(ТаблицаОписанияПолей, "ДокументДвижения", "
			|ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументДвижения) В (" + ДоступныеТипыДокумента(ИмяРегистра, "ДокументДвижения") + ")
			|  " + ?(СУчетомКорректировки, "И НЕ ЭтоКорректировка", "") + "
			|	ТОГДА ДокументДвижения
			|	ИНАЧЕ НЕОПРЕДЕЛЕНО
			|КОНЕЦ");
		
 	КонецЕсли;
 	
КонецПроцедуры

Функция ПолучитьЗначениеПоляЗапроса(ТаблицаОписанияПолей ,Представление) Экспорт
	
	Значение = "Неопределено";
	
	ОписаниеПоля = ТаблицаОписанияПолей.Найти(ВРег(Представление), "Представление");
	Если ОписаниеПоля <> Неопределено Тогда
		Значение = ОписаниеПоля.Поле;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Получает строковое описание полей запроса.
// 
// Параметры:
// 	ТаблицаОписанияПолей - ТаблицаЗначений - 
// 	ОписаниеПриемника - ТаблицаЗначений -
// Возвращаемое значение:
// 	Строка - Описание полей запроса
Функция ПолучитьОписаниеПолейЗапроса(ТаблицаОписанияПолей, ОписаниеПриемника) Экспорт
	
	ОписаниеПолей = "";
	МассивОписанияПолей = Новый Массив;
	
	Для Каждого КолонкаПриемника Из ОписаниеПриемника.Колонки Цикл
		
		СтрокаПоле = ТаблицаОписанияПолей.Найти(ВРег(КолонкаПриемника.Имя));
		Если СтрокаПоле = Неопределено Тогда
			МассивОписанияПолей.Добавить(Символы.Таб + "Неопределено" + " КАК " + КолонкаПриемника.Имя);
		Иначе
			МассивОписанияПолей.Добавить(Символы.Таб + СтрокаПоле.Поле + " КАК " + КолонкаПриемника.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеПолей = СтрСоединить(МассивОписанияПолей, "," + Символы.ПС);
	
	Возврат ОписаниеПолей;
	
КонецФункции

// Возвращает заголовок текста запроса.
// 
// Параметры:
// 	КоличествоСтрок - Число, Неопределено - количество строк для выборки
// 	ВыбиратьРазличные - Булево - выбирать различные записи
//
// Возвращаемое значение:
// 	Строка - Заголовок запроса
//
Функция ПолучитьЗаголовокЗапроса(КоличествоСтрок = Неопределено, ВыбиратьРазличные = Ложь) Экспорт
	
	Если ВыбиратьРазличные Тогда
		Заголовок = "ВЫБРАТЬ РАЗЛИЧНЫЕ &Поле";
	Иначе
		Если КоличествоСтрок = Неопределено Тогда
			Заголовок = "ВЫБРАТЬ &Поле";
		Иначе
			Заголовок = "ВЫБРАТЬ ПЕРВЫЕ 1 &Поле";
			Заголовок = СтрЗаменить(Заголовок, "1", Формат(КоличествоСтрок, "ЧН=0; ЧГ=0"));
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = СтрЗаменить(Заголовок, "&Поле", "");
	
	Возврат СокрЛП(Заголовок);
	
КонецФункции

#КонецОбласти

#Область ВременныеТаблицы

#Область ОперацииСВременнымиТаблицами

// Помещает таблицу значений в новую временную таблицу
//
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицы, ПоляИндексирования = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Поля
	|ПОМЕСТИТЬ ИмяТаблицыПриемника
	|ИЗ
	|	&Таблица КАК Т
	|ГДЕ &Индексы";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицы, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля",   	  		ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыПриемника", ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Индексы", 	  	ТекстПоляИндексирования);
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	ВыполнитьЗапросСЗамеромДляПротокола(
		КонтейнерМенеджераВТ,
		Запрос,,,,
		НСтр("ru = 'Создание временной таблицы из таблицы значений';
			|en = 'Create a temporary table from a value table'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Добавляет таблицу значений в существующую временную таблицу
//
Процедура ОбъединитьТаблицуЗначенийИВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяПриемника, Таблица, ПоляТаблицыЗначений, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования = "") Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияТЗИВТ";
	
	Если ЗначениеЗаполнено(ПоляТаблицыЗначений) Тогда
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПоляТаблицыЗначений, ПоляИндексирования);
	Иначе
		ПоместитьТаблицуЗначенийВоВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, Таблица, ПолучитьИменаКолонокСтрокой(Таблица), ПоляИндексирования);
	КонецЕсли;
	
	ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляИндексирования);
	
	ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования);
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяВнутреннейТаблицы);
	
КонецПроцедуры

// Переносит данные из нескольких временных таблиц в одну временную таблицу.
//
Процедура ОбъединитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаИсточников, ИмяПриемника, ПоляТаблицы, РесурсыТаблицы, ПоляИндексирования = "", УдалятьИсточники = Ложь) Экспорт
	
	МассивИсточников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИсточников, ",",, Истина);
	
	КоличествоТаблицВЗапросе = 254;
	КоличествоЗапросов 		 = МассивИсточников.Количество() / КоличествоТаблицВЗапросе;
	КоличествоЗапросов 		 = Цел(КоличествоЗапросов) + ?(КоличествоЗапросов = Цел(КоличествоЗапросов), 0, 1);
	
	Если КоличествоЗапросов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОбъединенияВТиВТ";
	ПриемникСуществует   = ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяПриемника);
	
	Если ЗначениеЗаполнено(ПоляТаблицы) И СтрНайти(ПоляТаблицы, "%") = 0 Тогда
		ПоляТаблицыСПрефиксом = СтрЗаменить(ПоляТаблицы, " ", "");
		ПоляТаблицыСПрефиксом = СтрЗаменить(ПоляТаблицыСПрефиксом, "	", "");
		ПоляТаблицыСПрефиксом = СтрЗаменить(ПоляТаблицыСПрефиксом, Символы.ПС, "");
		ПоляТаблицыСПрефиксом = "%1" + СтрЗаменить(ПоляТаблицыСПрефиксом, ",", ",%1");
	Иначе
		ПоляТаблицыСПрефиксом = ПоляТаблицы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РесурсыТаблицы) И СтрНайти(РесурсыТаблицы, "%") = 0 Тогда
		РесурсыТаблицыСПрефиксом = СтрЗаменить(РесурсыТаблицы, " ", "");
		РесурсыТаблицыСПрефиксом = СтрЗаменить(РесурсыТаблицыСПрефиксом, "	", "");
		РесурсыТаблицыСПрефиксом = СтрЗаменить(РесурсыТаблицыСПрефиксом, Символы.ПС, "");
		РесурсыТаблицыСПрефиксом = "%1" + СтрЗаменить(РесурсыТаблицыСПрефиксом, ",", ",%1");
	Иначе
		РесурсыТаблицыСПрефиксом = РесурсыТаблицы;
	КонецЕсли;
	
	// Шаблоны
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(ПоляТаблицыСПрефиксом, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	ТекстСгруппированныеПоля   = "";
	ТекстОтборНепустыхРесурсов = "";
	ТекстГруппировкаПолей 	   = "";
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(ПоляТаблицыСПрефиксом, "%1", "Т."),
		",",
		Истина,
		Истина);
	МассивРесурсов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(РесурсыТаблицыСПрефиксом, "%1", "Т."),
		",",
		Истина,
		Истина);
	
	Для Каждого ТекущееПоле Из МассивПолей Цикл
		
		Если МассивРесурсов.Найти(ТекущееПоле) <> Неопределено Тогда
			
			// Ресурс
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + "СУММА(" + ТекущееПоле + ")";
				
			ТекстОтборНепустыхРесурсов = ТекстОтборНепустыхРесурсов 
				+ ?(ТекстОтборНепустыхРесурсов = "", "", "
				|	ИЛИ ") + "СУММА(" + ТекущееПоле + ") <> 0";
			
		Иначе
			
			// Измерение или реквизит
			ТекстСгруппированныеПоля = ТекстСгруппированныеПоля 
				+ ?(ТекстСгруппированныеПоля = "", "", ",
				|	") + ТекущееПоле;
			
			Если МассивРесурсов.Количество() > 0 Тогда
				ТекстГруппировкаПолей = ТекстГруппировкаПолей 
					+ ?(ТекстГруппировкаПолей = "", "", ",
					|	") + ТекущееПоле;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ТекстГруппировкаПолей =  
		?(ТекстГруппировкаПолей = "", "", "СГРУППИРОВАТЬ ПО
		|	") + ТекстГруппировкаПолей;
	ТекстОтборНепустыхРесурсов =  
		?(ТекстОтборНепустыхРесурсов = "", "", "ИМЕЮЩИЕ
		|	") + ТекстОтборНепустыхРесурсов;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	&СгруппированныеПоля
	|ПОМЕСТИТЬ ИмяТаблицыПриемника
	|ИЗ
	|	ЗапросОбъединенияТаблиц КАК Т
	|ГДЕ &ГруппировкаПолей
	|
	|И &ОтборНепустыхРесурсов
	|
	|И &Индексы
	|";
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&СгруппированныеПоля", 	   ТекстСгруппированныеПоля);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "ГДЕ &ГруппировкаПолей",    ТекстГруппировкаПолей);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "И &ОтборНепустыхРесурсов", ТекстОтборНепустыхРесурсов);
	
	ШаблонВложенногоЗапроса =
	"ВЫБРАТЬ
	|	&Поля
	|ИЗ
	|	ИмяТаблицыИсточника КАК Т
	|";
	ШаблонВложенногоЗапроса = СтрЗаменить(ШаблонВложенногоЗапроса, "&Поля", ТекстПоляТаблицы);
	
	// Записи итоговой временной таблицы сворачиваются по всем измерениям и реквизитам регистра (всем полям, не являющимися ресурсами).
	// Записи со всеми пустыми ресурсами не помещаются в итоговую временную таблицу.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Для НомерЗапроса = 1 По КоличествоЗапросов Цикл
		
		ТекстЗапроса = "";
		ТекстУдаляемыеТаблицы = "";
		
		Если НомерЗапроса = 1 И ПриемникСуществует Тогда
			ИмяПромежуточнойТаблицы = ИмяПриемника;
		ИначеЕсли НомерЗапроса > 1 Тогда
			ИмяПромежуточнойТаблицы = ИмяВнутреннейТаблицы + Формат(НомерЗапроса - 1, "ЧГ=");
		Иначе
			ИмяПромежуточнойТаблицы = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяПромежуточнойТаблицы) Тогда
			ТекстЗапроса = СтрЗаменить(ШаблонВложенногоЗапроса, "ИмяТаблицыИсточника", ИмяПромежуточнойТаблицы);
			ТекстУдаляемыеТаблицы = ИмяПромежуточнойТаблицы;
		КонецЕсли;
		
		ИменаТаблицДляПротокола = "";
		
		Для НомерТаблицы = 1 По КоличествоТаблицВЗапросе Цикл
			
			Если МассивИсточников.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", "", "
				|ОБЪЕДИНИТЬ ВСЕ
				|") + СтрЗаменить(ШаблонВложенногоЗапроса, "ИмяТаблицыИсточника", МассивИсточников[0]);
			
			ИменаТаблицДляПротокола = ИменаТаблицДляПротокола + ?(ИменаТаблицДляПротокола = "", "", ",") + МассивИсточников[0];
			
			Если УдалятьИсточники Тогда
				ТекстУдаляемыеТаблицы = ТекстУдаляемыеТаблицы + ?(ТекстУдаляемыеТаблицы = "", "", ",") + МассивИсточников[0];
			КонецЕсли;
			
			МассивИсточников.Удалить(0);
			
		КонецЦикла;
		
		Если НомерЗапроса < КоличествоЗапросов ИЛИ ПриемникСуществует Тогда
			ИмяПромежуточнойТаблицы = ИмяВнутреннейТаблицы + Формат(НомерЗапроса, "ЧГ=");
		Иначе
			ИмяПромежуточнойТаблицы = ИмяПриемника;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ЗапросОбъединенияТаблиц", "(" + ТекстЗапроса + ")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицыПриемника", ИмяПромежуточнойТаблицы);
		
		Если НомерЗапроса = КоличествоЗапросов И ИмяПромежуточнойТаблицы = ИмяПриемника Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Индексы", ТекстПоляИндексирования);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &Индексы", "");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		ВыполнитьЗапросСЗамеромДляПротокола(
			КонтейнерМенеджераВТ,
			Запрос,,
			ИменаТаблицДляПротокола,,
			НСтр("ru = 'Объединение временных таблиц';
				|en = 'Merge temporary tables'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ТекстУдаляемыеТаблицы);
		ПриемникСуществует = Ложь;
		
		Если НомерЗапроса = КоличествоЗапросов И ИмяПромежуточнойТаблицы <> ИмяПриемника Тогда
			
			// Необходимо переложить данные из ИмяПромежуточнойТаблицы в ИмяПриемника
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&Поля
			|ПОМЕСТИТЬ ИмяТаблицыПриемника
			|ИЗ
			|	ИмяТаблицыИсточника КАК Т
			|
			|ГДЕ &Индексы
			|";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля", 		  		ТекстПоляТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыПриемника", ИмяПриемника);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыИсточника", ИмяПромежуточнойТаблицы);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Индексы", 	    ТекстПоляИндексирования);
			
			ВыполнитьЗапросСЗамеромДляПротокола(
				КонтейнерМенеджераВТ,
				Запрос,,
				ИмяПромежуточнойТаблицы + "," + ИмяПриемника,,
				НСтр("ru = 'Объединение временных таблиц';
					|en = 'Merge temporary tables'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			УничтожитьВременныеТаблицы(Запрос, ИмяПромежуточнойТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает состав колонок временной таблицы.
//
// Возвращаемое значение:
//	Строка, КоллекцияКолонокТаблицыЗначений -
//
Функция КолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяТаблицы, ВозвращатьСтрокой = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	*
	|ИЗ
	|	ИмяТаблицы КАК Т";
	
	Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "ИмяТаблицы", ИмяТаблицы);
	КолонкиТаблицы = Запрос.Выполнить().Колонки;
	
	Если НЕ ВозвращатьСтрокой Тогда
		Возврат КолонкиТаблицы;
	КонецЕсли;
	
	КолонкиСтрокой = "";
	
	Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
		КолонкиСтрокой = КолонкиСтрокой + ?(КолонкиСтрокой = "", "", ", ") + "%1" + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	Возврат КолонкиСтрокой;
	
КонецФункции

// Добавляет во временную таблицу отсутствующие колонки.
//
Процедура ДобавитьНедостающиеКолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяОбразца, ПоляИндексирования = "") Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляДобавленияКолонокВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Составим перечень колонок, которые есть в таблице-образце, но отсутствуют в самой таблице.
	КолонкиТаблицы = КолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяТаблицы, Ложь);
	КолонкиОбразца = КолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяОбразца, Ложь);
	
	НовыеКолонки = Новый Структура; // Имя колонки - пустое значение соответствующего ей типа
	
	Для Каждого ТекущаяКолонка Из КолонкиОбразца Цикл
		
		Если КолонкиТаблицы.Найти(ТекущаяКолонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияКолонки = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписанияТиповБезТипаNull(ТекущаяКолонка.ТипЗначения);
		
		НовыеКолонки.Вставить(ТекущаяКолонка.Имя, ТипЗначенияКолонки.ПривестиЗначение(Неопределено));
		
	КонецЦикла;
	
	Если НовыеКолонки.Количество() = 0 Тогда
		Возврат; // в таблице есть все колонки, присутствующие в таблице-образце
	КонецЕсли;
	
	// Составим список полей для текста запроса.
	ТекстПоляТаблицы = "";
	КоличествоПараметров = 0;
	
	Для Каждого ТекущаяКолонка Из КолонкиТаблицы Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя + " КАК " + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	ТекстПоляТаблицыДополненные = ТекстПоляТаблицы;
	
	Для Каждого ТекущаяКолонка Из НовыеКолонки Цикл
		
		КоличествоПараметров = КоличествоПараметров + 1;
		ИмяПараметра = "ЗначениеНовогоПоля" + Формат(КоличествоПараметров, "ЧН=0; ЧГ=");
		
		Запрос.УстановитьПараметр(ИмяПараметра, ТекущаяКолонка.Значение);
		
		ТекстПоляТаблицыДополненные = ТекстПоляТаблицыДополненные + ?(ТекстПоляТаблицыДополненные = "", "", ",
			|	") + "&" + ИмяПараметра + " КАК " + ТекущаяКолонка.Ключ;
		
	КонецЦикла;
	
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	// Выполним запрос, получающий исходную таблицу с полным списком полей.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Параметр3
	|ПОМЕСТИТЬ Параметр2
	|ИЗ
	|	Параметр1 КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Параметр1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Параметр4
	|ПОМЕСТИТЬ Параметр1
	|ИЗ
	|	Параметр2 КАК Т
	|ГДЕ ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Параметр2";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "Параметр", "%");
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаЗапроса,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы,
		ТекстПоляТаблицы,
		ТекстПоляТаблицыДополненные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ ИСТИНА", ТекстПоляИндексирования);
	
	ВыполнитьЗапросСЗамеромДляПротокола(
		КонтейнерМенеджераВТ,
		Запрос,,,,
		НСтр("ru = 'Добавление колонок временной таблицы';
			|en = 'Add temporary table columns'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Удаляет все записи из временной таблицы, при этом все ее поля остаются без изменения.
//
Процедура ОчиститьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяТаблицы) Экспорт
	
	ИмяВнутреннейТаблицы = "ВТВременноеХранилищеДляОчисткиВТ";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ПОМЕСТИТЬ Параметр2
	|ИЗ
	|	Параметр1 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ Параметр1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ Параметр1
	|ИЗ
	|	Параметр2 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ Параметр2";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр", "%");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы,
		ИмяВнутреннейТаблицы);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Копирует все записи из временной таблицы в новую временную таблицу.
//
Процедура СкопироватьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПриемника, ПоляИндексирования = "") Экспорт
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяПриемника);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	КолонкиИсточника = КолонкиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяИсточника, Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Поля
	|ПОМЕСТИТЬ ИмяТаблицыПриемника
	|ИЗ
	|	ИмяТаблицыИсточника КАК Т
	|ГДЕ &Индексы";
	
	ТекстПоляТаблицы = СокрЛП(СтрЗаменить(КолонкиИсточника, "%1", "
		|	Т."));
	ТекстПоляИндексирования = ?(ПоляИндексирования = "", "", "ИНДЕКСИРОВАТЬ ПО " + ПоляИндексирования);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Поля",   	  		ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыПриемника", ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыИсточника", ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Индексы", 	  	ТекстПоляИндексирования);
	
	ВыполнитьЗапросСЗамеромДляПротокола(
		КонтейнерМенеджераВТ,
		Запрос,,,,
		НСтр("ru = 'Копирование временной таблицы';
			|en = 'Copy a temporary table'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Уничтожает указанные временные таблицы
//
Процедура УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИменаТаблиц) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИменаТаблиц) Тогда
		Возврат; // чтобы не нужно было делать проверки имен таблиц при вызове этой процедуры
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СтруктураТаблиц = Новый Структура(ИменаТаблиц);
	ТекстЗапроса 	= "";
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Если НЕ ВременнаяТаблицаСуществует(Запрос.МенеджерВременныхТаблиц, КлючИЗначение.Ключ) Тогда
			Продолжить; // чтобы не нужно было делать проверки имен таблиц при вызове этой процедуры
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса 
			+ ?(ТекстЗапроса = "", "", "
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|
			|") + "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет существование временной таблицы с указанным именем.
//
// Возвращаемое значение:
//	Булево -
//
Функция ВременнаяТаблицаСуществует(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Возврат МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы) <> Неопределено;
	
КонецФункции

// Проверяет существование колонки временной таблицы с указанным именем.
//
// Возвращаемое значение:
//	Булево -
//
Функция КолонкаВременнойТаблицыСуществует(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ИмяКолонки) Экспорт
	
	МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицы);
	Если ВременнаяТаблица = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ВременнаяТаблица.Колонки.Найти(ИмяКолонки) <> Неопределено);
	
КонецФункции

// Возвращает перечень хранимых временных таблиц.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПолучитьПереченьСуществующихВременныхТаблиц(КонтейнерМенеджераВТ, ИсключатьТаблицы = "") Экспорт
	
	МенеджерВременныхТаблиц    = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	СтруктураИсключаемыхТаблиц = Новый Структура(ИсключатьТаблицы);
	Таблицы 				   = "";
	
	Для Каждого ВременнаяТаблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если НЕ СтруктураИсключаемыхТаблиц.Свойство(ВременнаяТаблица.ПолноеИмя) Тогда
			Таблицы = Таблицы + ?(Таблицы = "", "", ", ") + ВременнаяТаблица.ПолноеИмя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблицы;
	
КонецФункции

// Получает из переданного контейнера-источника данных менеджер временных таблиц.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц -
//
Функция ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ) Экспорт
	
	Если ТипЗнч(КонтейнерМенеджераВТ) = Тип("МенеджерВременныхТаблиц") Тогда
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ;
	Иначе // менеджер хранится в одноименном свойстве структуры или запроса
		МенеджерВременныхТаблиц = КонтейнерМенеджераВТ.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ИмяТаблицыСледующейПорцииДанных(ИмяТаблицы, ОписаниеТаблицы)
	
	ОписаниеТаблицы.КоличествоПорцийДанных = ОписаниеТаблицы.КоличествоПорцийДанных + 1;
	ИмяТаблицыПорции = ИмяТаблицы + "_" + "Порция" + Формат(ОписаниеТаблицы.КоличествоПорцийДанных, "ЧГ=");
	
	ОписаниеТаблицы.ИменаТаблицПорций = ОписаниеТаблицы.ИменаТаблицПорций
		+ ?(ОписаниеТаблицы.ИменаТаблицПорций = "", "", ",") + ИмяТаблицыПорции;
		
	Возврат ИмяТаблицыПорции;
	
КонецФункции

#КонецОбласти

#Область НумерацияИРазделениеНаПорцииСтрокВременнойТаблицы

// Возвращает имя колонки по умолчанию для нумерации строк временной таблицы.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяКолонкиДляНумерацииПоУмолчанию() Экспорт
	Возврат "К";
КонецФункции

// Добавляет колонку для нумерации строк в таблицу значений.
//
// Возвращаемое значение:
//	КолонкаТаблицыЗначений -
//
Функция ДобавитьКолонкуДляНумерацииСтрок(Таблица, ИмяПоляНомераСтроки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераСтроки);
	
КонецФункции

// Формирует параметры нумерации строк временной таблицы.
//
// Возвращаемое значение:
//	Структура -
//
Функция СформироватьПараметрыНумерацииСтрокВременнойТаблицы(ИмяПоляРазделителя = "",
			ИменаСуммируемыхПолей = "", ИменаПолейУпорядочивания = "", ИмяПоляНомераСтроки = "",
			ИменаПолейИндексирования = "", ИмяПоляНакопления = "", ПодбиратьРазделитель = Истина) Экспорт
	
	ПараметрыНумерации = Новый Структура;
	ПараметрыНумерации.Вставить("ИмяПоляРазделителя", 		ИмяПоляРазделителя);
	ПараметрыНумерации.Вставить("ОптимальныйРазделитель", 	?(ПодбиратьРазделитель, "", ИмяПоляРазделителя));
	ПараметрыНумерации.Вставить("ИменаСуммируемыхПолей", 	ИменаСуммируемыхПолей);
	ПараметрыНумерации.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ИмяПоляРазделителя, ИменаПолейУпорядочивания));
	ПараметрыНумерации.Вставить("ИмяПоляНомераСтроки", 		?(НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки), ИмяКолонкиДляНумерацииПоУмолчанию(), ИмяПоляНомераСтроки));
	ПараметрыНумерации.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыНумерации.ИмяПоляНомераСтроки, ИменаПолейИндексирования));
	ПараметрыНумерации.Вставить("ИмяПоляНакопления", 		ИмяПоляНакопления);
	ПараметрыНумерации.Вставить("ИмяТаблицыСтаройНумерации","");
	
	Возврат ПараметрыНумерации;
	
КонецФункции

// Заполняет номера строк временной таблицы.
//
// Параметры:
// 	ПараметрыРасчета - см. ИнициализироватьОбщиеПараметрыРасчета
// 	ПараметрыНумерации - Структура -
// 	ИмяТаблицы - Строка - 
// 	ИмяПронумерованнойТаблицы - Строка -
//	Пояснение - Строка -
Процедура ЗаполнитьНомераСтрокВременнойТаблицы(ПараметрыРасчета, ПараметрыНумерации, ИмяТаблицы, ИмяПронумерованнойТаблицы = Неопределено, Пояснение = "") Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
		ПараметрыРасчета,
		ИмяТаблицы,
		НСтр("ru = 'Нумерация строк временной таблицы';
			|en = 'Numbering of temporary table rows'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ ?(Пояснение = "", "", " (" + Пояснение + ")"));
	
	Если НЕ ЗначениеЗаполнено(ИмяПронумерованнойТаблицы) Тогда
		ИмяПронумерованнойТаблицы = ИмяТаблицы;
	КонецЕсли;
	
	СохранятьИнформациюОСтаройНумерации = ЗначениеЗаполнено(ПараметрыНумерации.ИмяТаблицыСтаройНумерации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	ПустаяТаблицаДанных = ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, ИмяТаблицы, 0);
	
	ИменаСуммируемыхПолей = ПараметрыНумерации.ИменаСуммируемыхПолей;
	
	ИменаВсехПолейУпорядочивания = СтрЗаменить(
		?(ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейУпорядочивания),
			ПараметрыНумерации.ИменаПолейУпорядочивания,
			ПараметрыНумерации.ОптимальныйРазделитель),
		"	",
		" ");
	
	ИменаВсехПолейУпорядочиванияДляСтруктуры = "";
	
	Для Каждого ТекущееИмяПоля Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаВсехПолейУпорядочивания, ",", Истина, Истина) Цикл
		
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(
			ИменаВсехПолейУпорядочиванияДляСтруктуры,
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущееИмяПоля, ".")[0]);
			
	КонецЦикла;
	
	СтруктураИсключаемыеПоля = Новый Структура("НомерСтроки, ЗапросИсточник, РасчетЗавершен");
	Если НЕ СохранятьИнформациюОСтаройНумерации Тогда
		СтруктураИсключаемыеПоля.Вставить(ПараметрыНумерации.ИмяПоляНомераСтроки);
	КонецЕсли;
	
	СтруктураИменаПолей 	 = Новый Структура(
		СтрЗаменить(СтрЗаменить(НРег(ИменаВсехПолейУпорядочиванияДляСтруктуры), " возр", ""), " убыв", "")
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочиванияДляСтруктуры = "", "", ", ") + ИменаСуммируемыхПолей);
	
	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если СтруктураИсключаемыеПоля.Свойство(КолонкаДанных.Имя)  // служебное поле
		 ИЛИ СтруктураИменаПолей.Свойство(КолонкаДанных.Имя) Тогда // поле уже используется для упорядочивания
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСуммируемаяКолонкаТаблицы(КолонкаДанных) Тогда // имена полей суммирования не указаны - суммируем по всем числовым полям
			ИменаСуммируемыхПолей = ИменаСуммируемыхПолей + ?(ИменаСуммируемыхПолей = "", "", ", ") + КолонкаДанных.Имя;
		Иначе
			ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
				+ ?(ИменаВсехПолейУпорядочивания = "", "", ", ") + КолонкаДанных.Имя;
		КонецЕсли;
		
		СтруктураИменаПолей.Вставить(СтруктураИменаПолей);
		
	КонецЦикла;
	
	ИменаВсехПолейУпорядочивания = ИменаВсехПолейУпорядочивания
		+ ?(ИменаСуммируемыхПолей = "" ИЛИ ИменаВсехПолейУпорядочивания = "", "", ", ") + ИменаСуммируемыхПолей;
	
	ИменаИтоговыхКолонок = "";
	
	Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
		
		Если НРег(КолонкаДанных.Имя) = НРег(ПараметрыНумерации.ИмяПоляНомераСтроки) Тогда
			Продолжить;
		КонецЕсли;
			
		ИменаИтоговыхКолонок = ИменаИтоговыхКолонок + ?(ИменаИтоговыхКолонок = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
		
	КонецЦикла;
	
	ТекстПоляТаблицы = "";
	ТекстПоляГруппировки  = "";
	
	// Выполним группировку строк временной таблицы по всем полям, не являющимися полями суммирования.
	Если НЕ СохранятьИнформациюОСтаройНумерации И ЗначениеЗаполнено(ПараметрыНумерации.ИменаСуммируемыхПолей) Тогда
		
		СтруктураИменаСуммируемыхПолей = Новый Структура(ПараметрыНумерации.ИменаСуммируемыхПолей);
		
		Для Каждого КолонкаДанных Из ПустаяТаблицаДанных.Колонки Цикл
			
			Если СтруктураИменаСуммируемыхПолей.Свойство(КолонкаДанных.Имя) Тогда
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "СУММА(Т." + КолонкаДанных.Имя + ") КАК " + КолонкаДанных.Имя;
			Иначе
				ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя + " КАК " + КолонкаДанных.Имя;
				ТекстПоляГруппировки = ТекстПоляГруппировки + ?(ТекстПоляГруппировки = "", "", ",
					|	") + "Т." + КолонкаДанных.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстПоляГруппировки = ?(ТекстПоляГруппировки = "", "", "СГРУППИРОВАТЬ ПО
			|	") + ТекстПоляГруппировки;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	&ТекстПоляТаблицы
		|ПОМЕСТИТЬ ВременнаяТаблицаДляГруппировки
		|ИЗ
		|	ИмяТаблицыИсточника КАК Т
		|ГДЕ &Группировка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 9999999999999
		|	АВТОНОМЕРЗАПИСИ() КАК ВременноеПолеНумерации,
		|	Т.*
		|ПОМЕСТИТЬ ВременнаяТаблицаДляНумерации
		|ИЗ
		|	ВременнаяТаблицаДляГруппировки КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ИменаВсехПолейУпорядочивания
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВременнаяТаблицаДляГруппировки;
		|";
		
	Иначе 
	
		Запрос.Текст = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 9999999999999
		|	АВТОНОМЕРЗАПИСИ() КАК ВременноеПолеНумерации,
		|	Т.*
		|ПОМЕСТИТЬ ВременнаяТаблицаДляНумерации
		|ИЗ
		|	ИмяТаблицыИсточника КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	&ИменаВсехПолейУпорядочивания
		|";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляТаблицы", ТекстПоляТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыИсточника", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаВсехПолейУпорядочивания", ИменаВсехПолейУпорядочивания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Группировка", ТекстПоляГруппировки);
		
	Запрос.Выполнить();
		
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ВременноеПолеНумерации КАК ВременноеПолеНумерации
	|ИЗ
	|	ВременнаяТаблицаДляНумерации КАК Т
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВременноеПолеНумерации
	|";
	
	МинимальныйНомерПоследовательности = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МинимальныйНомерПоследовательности = Выборка.ВременноеПолеНумерации;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МинимальныйНомерПоследовательности", МинимальныйНомерПоследовательности);
	
	Запрос.Текст = "";
	
	Если СохранятьИнформациюОСтаройНумерации Тогда
		
		УничтожитьВременныеТаблицы(ПараметрыРасчета, ПараметрыНумерации.ИмяТаблицыСтаройНумерации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.ВременноеПолеНумерации - &МинимальныйНомерПоследовательности КАК ИмяПоляНомераСтроки,
		|	Т.ИмяПоляНомераСтроки КАК ПолеСтаройНумерации,
		|	ВЫБОР КОГДА Т.ВременноеПолеНумерации - &МинимальныйНомерПоследовательности = Т.ИмяПоляНомераСтроки
		|		ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НумерацияИзменилась
		|ПОМЕСТИТЬ ИмяТаблицыСтаройНумерации
		|ИЗ
		|	ВременнаяТаблицаДляНумерации КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеСтаройНумерации
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УНИЧТОЖИТЬ ИмяТаблицыИсточника
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ВременноеПолеНумерации - &МинимальныйНомерПоследовательности КАК ИмяПоляНомераСтроки,
	|	&ИменаИтоговыхКолонок
	|ПОМЕСТИТЬ ИмяПронумерованнойТаблицы
	|ИЗ
	|	ВременнаяТаблицаДляНумерации КАК Т
	|
	|ГДЕ &Индексирование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаДляНумерации
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыИсточника", ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыСтаройНумерации", ПараметрыНумерации.ИмяТаблицыСтаройНумерации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПронумерованнойТаблицы", ИмяПронумерованнойТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляНомераСтроки", ПараметрыНумерации.ИмяПоляНомераСтроки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИменаИтоговыхКолонок", ИменаИтоговыхКолонок);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ &Индексирование",
		?(НЕ ЗначениеЗаполнено(ПараметрыНумерации.ИменаПолейИндексирования), "", "ИНДЕКСИРОВАТЬ ПО " + Символы.ПС + "	" + ПараметрыНумерации.ИменаПолейИндексирования));
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
	
КонецПроцедуры

// Возвращает имя колонки по умолчанию для номеров порций временных таблиц.
//
Функция ИмяКолонкиДляНомераПорцииПоУмолчанию()
	Возврат "НомерПорции";
КонецФункции

// Добавляет колонку для номеров порций в таблицу значений.
//
// Возвращаемое значение:
//	КолонкаТаблицыЗначений -
//
Функция ДобавитьКолонкуДляНомеровПорцийСтрок(Таблица, ИмяПоляНомераПорции = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции) Тогда
		ИмяПоляНомераПорции = ИмяКолонкиДляНомераПорцииПоУмолчанию();
	КонецЕсли;
	
	Возврат ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяПоляНомераПорции);
	
КонецФункции

// Формирует параметры разделения временной таблицы на порции.
//
// Возвращаемое значение:
//	Структура -
//
Функция СформироватьПараметрыРазделенияВременнойТаблицыНаПорции(РазмерПорции, ИмяПоляВесаСтроки = "",
			ИменаПолейУпорядочивания = "", ИмяПоляНомераПорции = "", ИменаПолейИндексирования = "") Экспорт
	
	ПараметрыРазделения = Новый Структура;
	ПараметрыРазделения.Вставить("РазмерПорции", 		 	 РазмерПорции);
	ПараметрыРазделения.Вставить("ИмяПоляВесаСтроки", 		 ИмяПоляВесаСтроки);
	ПараметрыРазделения.Вставить("ИменаПолейУпорядочивания", ?(НЕ ЗначениеЗаполнено(ИменаПолейУпорядочивания), ?(ИмяПоляВесаСтроки = "", "", ИмяПоляВесаСтроки + " " + "УБЫВ"), ИменаПолейУпорядочивания));
	ПараметрыРазделения.Вставить("ИмяПоляНомераПорции", 	 ?(НЕ ЗначениеЗаполнено(ИмяПоляНомераПорции), ИмяКолонкиДляНомераПорцииПоУмолчанию(), ИмяПоляНомераПорции));
	ПараметрыРазделения.Вставить("ИменаПолейИндексирования", ?(НЕ ЗначениеЗаполнено(ИменаПолейИндексирования), ПараметрыРазделения.ИмяПоляНомераПорции, ИменаПолейИндексирования));
	
	Возврат ПараметрыРазделения;
	
КонецФункции

// Разделяет временную таблицу на порции.
//
// Возвращаемое значение:
//	Число -
//
Функция РазделитьВременнуюТаблицуНаПорции(ПараметрыРасчета, ПараметрыРазделения, ИмяТаблицы, Пояснение = "") Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
		ПараметрыРасчета,
		ИмяТаблицы,
		НСтр("ru = 'Деление временной таблицы на порции';
			|en = 'Divide a temporary table into parts'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ ?(Пояснение = "", "", " (" + Пояснение + ")"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	
	// Получим пустую таблицу значений с полями, соответствующими полям временной таблицы.
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	Т.*
	|ИЗ
	|	ИмяТаблицы КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	// Получим описание полей таблицы.
	ТекстПоляТаблицы = "";
	ШаблонПоляТаблицы = "";
		
	Для Каждого КолонкаДанных Из ТаблицаДанных.Колонки Цикл
		ТекстПоляТаблицы = ТекстПоляТаблицы + ?(ТекстПоляТаблицы = "", "", ",
			|	") + "Т." + КолонкаДанных.Имя;
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ?(ШаблонПоляТаблицы = "", "", ", ") + "%1" + КолонкаДанных.Имя;
	КонецЦикла;
	
	// Добавим колонку для номера порции, к которой относится текущая строка таблицы.
	КолонкаДобавлена = ДобавитьКолонкуДляНомеровПорцийСтрок(ТаблицаДанных, ПараметрыРазделения.ИмяПоляНомераПорции);
	
	Если КолонкаДобавлена Тогда
		ШаблонПоляТаблицы = ШаблонПоляТаблицы + ", %1" + ПараметрыРазделения.ИмяПоляНомераПорции;
	КонецЕсли;
	
	// Создадим пустую временную таблицу, в которую будет помещена обработанная исходная таблица.
	ПоместитьТаблицуЗначенийВоВременнуюТаблицу(
		ПараметрыРасчета,
		"ВременнаяТаблицаДляРазделенияНаПорции",
		ТаблицаДанных,
		ШаблонПоляТаблицы);
	
	// Поместим данные временной таблицы в таблицу значений, заполняя при этом номер порции для каждой строки.
	Если ЗначениеЗаполнено(ПараметрыРазделения.ИменаПолейУпорядочивания) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Параметр1
		|ИЗ
		|	Параметр2 КАК Т
		|УПОРЯДОЧИТЬ ПО
		|	Параметр3";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Параметр1
		|ИЗ
		|	Параметр2 КАК Т";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр", "%");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ТекстПоляТаблицы,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейУпорядочивания);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерПорции = 1;
	РазмерТекущейПорции = 0;
	
	НомерСтрокиВыборки = 0;
	РазмерВыборки = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиВыборки = НомерСтрокиВыборки + 1;
		
		ТекущаяСтрока = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
		ВесСтроки = ?(ЗначениеЗаполнено(ПараметрыРазделения.ИмяПоляВесаСтроки), ТекущаяСтрока[ПараметрыРазделения.ИмяПоляВесаСтроки], 1);
		ВесСтроки = ?(ВесСтроки < 0, - ВесСтроки, ВесСтроки);
		
		Если РазмерТекущейПорции + ВесСтроки <= ПараметрыРазделения.РазмерПорции Тогда
			// Вес текущей строки "помещается" в текущую порцию.
			// Строка добавляется в текущую порцию.
		ИначеЕсли РазмерТекущейПорции > 0 Тогда
			// Вес текущей строки "выходит" за текущую порцию, в которой уже есть другие строки.
			// Строка добавляется первой в новую порцию.
			НомерПорции = НомерПорции + 1;
			РазмерТекущейПорции = 0;
		Иначе
			// Вес текущей строки "больше" возможного размера порции, при этом в текущей порции еще нет других строк.
			// Строка целиком помещается в отдельную порцию.
		КонецЕсли;
		
		ТекущаяСтрока[ПараметрыРазделения.ИмяПоляНомераПорции] = НомерПорции;
		
		РазмерТекущейПорции = РазмерТекущейПорции + ВесСтроки;
		
		Если НомерСтрокиВыборки = РазмерВыборки
		 ИЛИ ТаблицаДанных.Количество() = ПараметрыРасчета.ОграниченияВыборки.КоличествоСтрокВТЗ Тогда
		 
			// Переместим данные из таблицы значений во временную таблицу.
			ОбъединитьТаблицуЗначенийИВременнуюТаблицу(
				ПараметрыРасчета, 
				"ВременнаяТаблицаДляРазделенияНаПорции",
				ТаблицаДанных,
				"", // все колонки таблицы ТаблицаДанных
				ШаблонПоляТаблицы,
				"");
			
			ТаблицаДанных.Очистить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Уничтожим старую таблицу и поместим вместо нее новую, с заполненной колонкой номера порции.
	Запрос.Текст =
	"УНИЧТОЖИТЬ Параметр1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.*
	|ПОМЕСТИТЬ Параметр1
	|ИЗ
	|	ВременнаяТаблицаДляРазделенияНаПорции КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Параметр2
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ВременнаяТаблицаДляРазделенияНаПорции";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр", "%");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст,
		ИмяТаблицы,
		ПараметрыРазделения.ИменаПолейИндексирования);
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(ПараметрыРасчета);
	
	Возврат ?(РазмерВыборки = 0, 0, НомерПорции);
	
КонецФункции


// Добавляет числовую колонку в таблицу значений.
//
// Параметры:
// 	Таблица - ТаблицаЗначений -
// 	ИмяКолонки - Строка -
// 	ВставлятьВНачало - Булево -
// Возвращаемое значение:
// 	Булево -
Функция ДобавитьКолонкуНомераВТаблицуЗначений(Таблица, ИмяКолонки, ВставлятьВНачало = Истина)
	
	Если Таблица.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		
		Если ВставлятьВНачало И Таблица.Колонки.Количество() > 0 Тогда
			Таблица.Колонки.Вставить(0, ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
		Иначе
			Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РегистраторыИМоментыВремени

// Получает реквизит "Момент времени" для всех документов в указанной временной таблице.
//
Процедура СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяИсточника, ИмяПоляРегистратор = "Регистратор",
			ИмяПриемника = "ВТМоментыВремени", ДопустимыПустыеРегистраторы = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	// Выберем типы документов, для которых нужно получить момент времени.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИмяПоляРегистратор КАК ИмяПоляРегистратор
	|ПОМЕСТИТЬ ИмяПриемника_Регистраторы
	|ИЗ
	|	ИмяИсточника КАК Т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТИПЗНАЧЕНИЯ(Т.ИмяПоляРегистратор) КАК ТипРегистратора
	|ИЗ
	|	ИмяПриемника_Регистраторы КАК Т
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРегистратор",  ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяИсточника", 		ИмяИсточника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПриемника", 		ИмяПриемника);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Составим текст поля для выбора момента времени документа в зависимости от типа документа.
	ТекстЗапроса = "";
	
	ОписаниеТиповДокументов = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписаниеТиповДокументов();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипРегистратора = Тип("Неопределено")
		 ИЛИ НЕ ОписаниеТиповДокументов.СодержитТип(Выборка.ТипРегистратора) Тогда
			
			Если НЕ ДопустимыПустыеРегистраторы Тогда
				
				// В поле <ИмяПоляРегистратор> содержится не ссылка на документ.
				ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При обработке регистраторов из временной таблицы ""%1"" возникла ошибка:
						|некорректный тип регистратора ""%2""';
						|en = 'An error occurred while processing recorders from the ""%1"" temporary table:
						|incorrect type of the ""%2"" recorder'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ИмяИсточника,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеЗначения(Выборка.ТипРегистратора));
				
				РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
					КонтейнерМенеджераВТ,
					Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаФормированияДвиженийПоРегистрам,
					ТекстДляПротокола);
				
				ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
				
			Иначе
				
				Продолжить; // в итоговую таблицу такой регистратор не включаем
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяТипаРегистратора = Метаданные.НайтиПоТипу(Выборка.ТипРегистратора).Имя;
		ЭтоПервыйПодзапрос  = НЕ ЗначениеЗаполнено(ТекстЗапроса);
		
		ШаблонЗапроса = "
		|ВЫБРАТЬ
		|	Т.ИмяПоляРегистратор КАК ИмяПоляРегистратор,
		|	ВЫРАЗИТЬ(Т.ИмяПоляРегистратор КАК Документ.КорректировкаРегистров).МоментВремени КАК МоментВремени,
		|	ВЫРАЗИТЬ(Т.ИмяПоляРегистратор КАК Документ.КорректировкаРегистров).Дата КАК Дата
		|ПОМЕСТИТЬ ИмяПриемника
		|ИЗ
		|	ИмяПриемника_Регистраторы КАК Т
		|ГДЕ
		|	Т.ИмяПоляРегистратор ССЫЛКА Документ.КорректировкаРегистров
		|";
		
		ТекстЗапроса = ТекстЗапроса + ?(ЭтоПервыйПодзапрос, "", "
		|ОБЪЕДИНИТЬ ВСЕ
		|") + СтрЗаменить(
				СтрЗаменить(
					ШаблонЗапроса, 
					"ПОМЕСТИТЬ ИмяПриемника",
					?(ЭтоПервыйПодзапрос, "ПОМЕСТИТЬ ИмяПриемника", "")),
				"КорректировкаРегистров",
				ИмяТипаРегистратора);
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК ИмяПоляРегистратор,
		|	НЕОПРЕДЕЛЕНО КАК МоментВремени,
		|	НЕОПРЕДЕЛЕНО КАК Дата
		|ПОМЕСТИТЬ ИмяПриемника
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяПоляРегистратор
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ ИмяПриемника_Регистраторы";
	
	// Получим моменты времени документов.
	Запрос.Текст = СокрЛП(ТекстЗапроса);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРегистратор",  ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПриемника", 		ИмяПриемника);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Выбирает документы из указанной временной таблицы, упорядоченные по их моменту времени.
//
// Возвращаемое значение:
//	РезультатЗапроса -
//
Функция ВыбратьМоментыВремениРегистраторов(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор = "Регистратор") Экспорт
	
	ИмяПриемника = "ВТМоментыВремени";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	СформироватьТаблицуМоментовВремени(КонтейнерМенеджераВТ, ИмяТаблицы, ИмяПоляРегистратор, ИмяПриемника);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ИмяПоляРегистратор,
	|	Источник.Организация,
	|	Т.МоментВремени,
	|	Т.Дата
	|ИЗ
	|	ИмяПриемника КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицы КАК Источник
	|		ПО Т.ИмяПоляРегистратор = Источник.ИмяПоляРегистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.МоментВремени
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоляРегистратор", 	ИмяПоляРегистратор);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПриемника", 		ИмяПриемника);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", 			ИмяТаблицы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УничтожитьВременныеТаблицы(КонтейнерМенеджераВТ, ИмяПриемника);
	
	Возврат РезультатЗапроса;
	
КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область КолонкиТаблиц

// Возвращает строку шаблона, содержащего имена всех колонок переданного объекта.
// 
// Параметры:
//  ИсточникКолонок - ТаблицаЗначений, РезультатЗапроса, ВыборкаИзРезультатаЗапроса, КоллекцияКолонокТаблицыЗначений - Источник колонок
//  ИсключаемыеКолонки - Строка - Исключаемые колонки
//  БезПрефикса - Булево - Не добавлять префикс %1
// 
// Возвращаемое значение:
//  Строка - список колонок через запятую
Функция ПолучитьИменаКолонокСтрокой(ИсточникКолонок, ИсключаемыеКолонки = "", БезПрефикса = Ложь) Экспорт
	
	Если ТипЗнч(ИсточникКолонок) = Тип("ТаблицаЗначений")
	 ИЛИ ТипЗнч(ИсточникКолонок) = Тип("РезультатЗапроса") Тогда
		Колонки = ИсточникКолонок.Колонки;
	ИначеЕсли ТипЗнч(ИсточникКолонок) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Колонки = ИсточникКолонок.Владелец().Колонки;
	Иначе
		Колонки = ИсточникКолонок;
	КонецЕсли;
	
	ИменаКолонок = "";
	СтруктураИсключаемыеКолонки = Новый Структура(ИсключаемыеКолонки);
	
	Для Каждого Колонка Из Колонки Цикл
		
		Если НЕ СтруктураИсключаемыеКолонки.Свойство(Колонка.Имя) Тогда
			ИменаКолонок = ИменаКолонок + ?(ИменаКолонок = "", "", ", ") + ?(БезПрефикса, "", "%1") + Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции

// Общие колонки источника и приемника данных.
// 
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//  ДанныеИсточника - ТаблицаЗначений, РезультатЗапроса, ВыборкаИзРезультатаЗапроса - Источник данных
//  ИмяПриемника - Строка - имя временной таблицы или регистра приемника данных
// 
// Возвращаемое значение:
//  Строка - Общие колонки источника и приемника данных через запятую
Функция ОбщиеКолонкиИсточникаИПриемникаДанных(ПараметрыРасчета, ДанныеИсточника, ИмяПриемника) Экспорт
	
	Если ПараметрыРасчета.Движения.Свойство(ИмяПриемника) Тогда
		ОписаниеПриемника = ПараметрыРасчета.Движения[ИмяПриемника];
	Иначе
		ОписаниеПриемника = ПараметрыРасчета.ВспомогательныеВременныеТаблицы[ИмяПриемника];
	КонецЕсли;
	
	Результат = ОбщиеКолонкиКонтейнеровДанных(ДанныеИсточника, ОписаниеПриемника.Таблица);
	
	Возврат Результат;
	
КонецФункции

// Общие колонки источника и приемника данных.
// 
// Параметры:
//  Источник - ТаблицаЗначений, РезультатЗапроса, ВыборкаИзРезультатаЗапроса - Источник данных
//  Приемник - ТаблицаЗначений - Приемник данных
// 
// Возвращаемое значение:
//  Строка - Общие колонки источника и приемника данных через запятую
Функция ОбщиеКолонкиКонтейнеровДанных(Источник, Приемник) Экспорт

	КолонкиПриемника = Новый Структура(ПолучитьИменаКолонокСтрокой(Приемник,, Истина));
	КолонкиИсточника = Новый Структура(ПолучитьИменаКолонокСтрокой(Источник,, Истина));
	
	Результат = "";
	
	Для Каждого КлючИЗначение Из КолонкиПриемника Цикл
		Если КолонкиИсточника.Свойство(КлючИЗначение.Ключ) Тогда
			Результат = Результат + ?(Результат = "", "", ",") + КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

// Дополняет параметры обработки ЖурналРегистрации для просмотра ключевых событий расчета себестоимости.
// Параметры процедуры соответствуют аналогичным параметрам формы этой обработки.
//
// Параметры:
//	ОтборПоУровню  - СписокЗначений - отбор по уровням событий журнала регистрации
//	ОтборПоСобытию - Массив - отбор по событиям журнала регистрации.
//
Процедура ДополнитьОтборыДляЖурналаРегистрации(ОтборПоУровню, ОтборПоСобытию) Экспорт
	
	Если ОтборПоУровню.НайтиПоЗначению("Ошибка") = Неопределено Тогда
		ОтборПоУровню.Добавить("Ошибка", "Ошибка"); // для ошибок расчета
	КонецЕсли;
	Если ОтборПоУровню.НайтиПоЗначению("Информация") = Неопределено Тогда
		ОтборПоУровню.Добавить("Информация", "Информация"); // для протокола расчета
	КонецЕсли;
	
	// Добавим имена событий механизмов расчета партий и себестоимости
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Истина);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
	ПараметрыРасчета = Новый Структура("ЗапущенРасчетПартий", Ложь);
	ОтборПоСобытию.Добавить(ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета));
	ОтборПоСобытию.Добавить(ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета));
	
КонецПроцедуры


// Возвращает общее для всех этапов расчета себестоимости имя события для журнала регистрации.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, Уточнение) Экспорт
	
	Если НЕ ПараметрыРасчета = Неопределено
	 И ПараметрыРасчета.Свойство("ЗапущенРасчетПартий")
	 И ПараметрыРасчета.ЗапущенРасчетПартий Тогда
		ИмяСобытия = НСтр("ru = 'Расчет партий и себестоимости%1';
							|en = 'Lot and cost calculation%1'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		ИмяСобытия = НСтр("ru = 'Расчет себестоимости%1';
							|en = 'Cost calculation %1'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ИмяСобытия,
		?(Уточнение = "", "", "." + Уточнение));
	
	Возврат ИмяСобытия;
	
КонецФункции

// Возвращает имя события журнала для записи ошибки расчета.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru = 'Ошибка';
																|en = 'Error'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

// Возвращает имя события журнала для записи протокола расчета.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяСобытияПротоколДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт
	
	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru = 'Протокол расчета';
																|en = 'Calculation protocol'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

// Возвращает имя события журнала для записи дополнительной информации расчета.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяСобытияДопИнформацииДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт

	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета, НСтр("ru = 'Описание расчета';
																|en = 'Calculation details'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

// Возвращает имя события журнала для записи протокола выполнения запросов этапа.
//
// Возвращаемое значение:
//	Строка -
//
Функция ИмяСобытияПротоколВыполненияЗапросаДляЖурналаРегистрации(ПараметрыРасчета = Неопределено) Экспорт

	Возврат ИмяСобытияЖурналаРегистрации(ПараметрыРасчета,
		НСтр("ru = 'Протокол выполнения запросов';
			|en = 'Query execution log'", ОбщегоНазначения.КодОсновногоЯзыка())  + "." + ПараметрыРасчета.ПредставлениеЭтапа);

КонецФункции

// Обрабатывает run-time ошибки расчета - записывает протокол расчета и завершает расчет.
//
// Возвращаемое значение:
//	Булево -
//
Функция ОбработатьИсключениеВызоваРассчитатьВсе(ПараметрыРасчета, ИнформацияОбОшибке, Отказ) Экспорт
	
	ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если СтрНайти(ТекстОшибки, СлужебныйСимвол_РасчетПрерванДляОтладки()) > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Отказ = Истина;
	
	// Восстановим отбор по всем организациям, т.к. при расчете себестоимости он подменялся при расчете по группам организаций.
	Если НЕ ПараметрыРасчета.ИдетРасчетПартий И ПараметрыРасчета.Свойство("КопияМассивОрганизаций") Тогда
		ПараметрыРасчета.Вставить("МассивОрганизаций",
			ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыРасчета.КопияМассивОрганизаций));
	КонецЕсли;
	
	// Запишем информацию в журнал регистрации.
	ТекстДляПротокола = СтрЗаменить(ТекстОшибки, 	   СокрЛП(СлужебныйСимвол_ТекстДляРегистрацииПроблемы()), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована()), "");
	
	ТекстДляПротокола = РасчетСебестоимостиПротоколРасчета.ПредставлениеТекстаОшибки(ТекстДляПротокола);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета),
		УровеньЖурналаРегистрации.Ошибка,,,
		ТекстДляПротокола);
	
	// Запишем информацию в протокол расчета.
	ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'При выполнении расчета возникла ошибка:
			|%1';
			|en = 'An error occurred while calculating:
			|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ТекстОшибки);
	
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ТекстДляРегистрацииПроблемы()), "");
	ТекстДляПротокола = СтрЗаменить(ТекстДляПротокола, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована()), "");
	
	Если РасчетСебестоимостиПротоколРасчета.ВедетсяПротоколРасчета(ПараметрыРасчета)
	 И НЕ ИсключениеВызваноПрограммно(ТекстОшибки) Тогда
	 
		// Если исключение вызвано программно, то в протокол уже должна быть добавлена информация об ошибке в месте ее возникновения.
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВремениВыполнения,
			ТекстДляПротокола);
		
	КонецЕсли;
	
	// Запишем информацию в механизме закрытия месяца.
	НачалоТекстаДляПротокола 	= СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(),,, 1);
	КонецТекстаДляПротокола  	= СтрНайти(ТекстОшибки, СлужебныйСимвол_ТекстДляРегистрацииПроблемы(),,, 2);
	ПроблемаУжеЗарегистрирована = (СтрНайти(ТекстОшибки, СокрЛП(СлужебныйСимвол_ПроблемаУжеЗарегистрирована())) > 0);
	
	Если НЕ ПроблемаУжеЗарегистрирована И НачалоТекстаДляПротокола > 0 И КонецТекстаДляПротокола > 0 Тогда // в описании заключен текст для регистрации проблемы
		
		ДлинаСимвола = СтрДлина(СлужебныйСимвол_ТекстДляРегистрацииПроблемы());
		ТекстДляПротокола = СокрЛП(Сред(ТекстОшибки, НачалоТекстаДляПротокола + ДлинаСимвола, КонецТекстаДляПротокола - НачалоТекстаДляПротокола - ДлинаСимвола));
		
	ИначеЕсли НЕ ИсключениеВызваноПрограммно(ТекстОшибки) // "честное" падение
	 ИЛИ НЕ ПроблемаУжеЗарегистрирована Тогда // передача "честного" падения из вложенных Попытка-Исключение
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При выполнении расчета диагностирована ошибка:
				|%1';
				|en = 'An error was found while calculating:
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ТекстОшибки);
	Иначе
		// Проблема уже зарегистрирована в месте вызова исключения
		ТекстДляПротокола = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстДляПротокола) Тогда
		ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета,
			,
			,
			ТекстДляПротокола);
	КонецЕсли;
	
	ОкончаниеРасчета(ПараметрыРасчета); // запишем протокол
	
	ТекстОшибки = ТекстОшибки + СлужебныйСимвол_ПроблемаУжеЗарегистрирована();
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

Функция ИсключениеВызваноПрограммно(ТекстОшибки) Экспорт
	
	Возврат СтрНайти(НРег(ТекстОшибки), НРег("ВызватьИсключение")) > 0
	   ИЛИ СтрНайти(НРег(ТекстОшибки), НРег("Raise")) > 0;
	
КонецФункции

Функция ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки) Экспорт
	Возврат СлужебныйСимвол_ТекстДляРегистрацииПроблемы() + ТекстОшибки + СлужебныйСимвол_ТекстДляРегистрацииПроблемы();
КонецФункции

Функция СлужебныйСимвол_ТекстДляРегистрацииПроблемы() Экспорт
	Возврат Символы.ПС + "#Описание" + Символы.ПС;
КонецФункции

Функция СлужебныйСимвол_ПроблемаУжеЗарегистрирована() Экспорт
	Возврат ЗакрытиеМесяцаСервер.СлужебныйСимвол_ИсключениеУжеОтработаноВЭтапеРасчета()
КонецФункции

Функция ТекстОшибкиНекорректногоЗавершенияРасчетаСебестоимости() Экспорт
	Возврат СлужебныйСимвол_ПроблемаУжеЗарегистрирована()
		+ НСтр("ru = 'При расчете себестоимости возникла ошибка. Подробности см. в Журнале регистрации.';
				|en = 'An error occurred while calculating the cost. See details in the Event log.'", ОбщегоНазначения.КодОсновногоЯзыка());
КонецФункции

#КонецОбласти

#Область РаспределительныеЗадачи

// Обертка для распределения методом уменьшаемого остатка, добавляющая замер времени выполнения распределения.
//
Процедура РаспределитьМетодомУменьшаемогоОстаткаСЗамеромВремени(ПараметрыРасчета, ПараметрыРаспределения, Идентификатор, Пояснение) Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоВыполненияФрагментаКода(
		ПараметрыРасчета,
		Идентификатор,
		Пояснение);
	
	РасчетСебестоимостиУниверсальныеАлгоритмы.РаспределитьМетодомУменьшаемогоОстатка(
		ПараметрыРасчета,
		ПараметрыРаспределения);
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеВыполненияФрагментаКода(
		ПараметрыРасчета,
		ПараметрыРаспределения.РезультатыРаспределения.РазмерРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Организации

// Возвращает строковое представление массива организаций.
//
// Параметры:
//	МассивОрганизаций - Массив - организации, для которых надо получить представление.
//	Разделитель - Строка -
//	ТекстДляЗаписиВИБ - Булево -
//
// Возвращаемое значение:
//	Строка - строковое представление массива организаций.
//
Функция ПредставлениеОрганизаций(МассивОрганизаций, Разделитель = Неопределено, ТекстДляЗаписиВИБ = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивОрганизаций = Неопределено Тогда
		Если ТекстДляЗаписиВИБ Тогда
			Возврат НСтр("ru = '<Все организации>';
						|en = '<All companies>'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			Возврат НСтр("ru = '<Все организации>';
						|en = '<All companies>'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеОрганизаций = "";
	
	Если Разделитель = Неопределено Тогда
		Разделитель = Символы.ВК;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка В(&МассивОрганизаций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеОрганизаций = ПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ПредставлениеОрганизаций), "", Разделитель)
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Возврат ПредставлениеОрганизаций;
	
КонецФункции

// Возвращает массив организаций, у которых есть движения (необходимо выполнить расчет).
//
// Возвращаемое значение:
//	Массив -
//
Функция ОрганизацииСДвижениямиПоСебестоимости(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	ТекстЗапросаОтборСтатьиРасходов = "
	|ВЫБРАТЬ
	|	Т.Ссылка
	|ПОМЕСТИТЬ ОтборСтатьиРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	Т.ВариантРаспределенияРасходовУпр В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	  И Т.ВариантРаздельногоУчетаНДС <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|	ИЛИ Т.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|	  И Т.ВариантРаздельногоУчетаНДС <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|";
	
	ТекстЗапросаОтборОрганизации = "
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ПОМЕСТИТЬ ОтборОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&ОтборОрганизации)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	
	ТекстЗапросаСписокОрганизаций = "
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ СписокОрганизаций
	|ИЗ
	|	ОтборОрганизации КАК Организации
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.СебестоимостьТоваров КАК Данные
	|		ГДЕ
	|			Данные.Организация = Организации.Ссылка
	|			И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Данные.Активность)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлючиАналитики.Организация
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитики
	|		ПО Данные.АналитикаУчетаПоПартнерам = КлючиАналитики.Ссылка
	|		И КлючиАналитики.Организация В (&ОтборОрганизации)
	|ГДЕ
	|	Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Данные.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ОтборОрганизации КАК Организации
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.ПрочаяВыручка КАК Данные
	|		ГДЕ
	|			Данные.Организация = Организации.Ссылка
	|			И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Данные.Активность)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ОтборОрганизации КАК Организации
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.ПартииПрочихРасходов КАК Данные
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборСтатьиРасходов КАК Статьи
	|				ПО Данные.СтатьяРасходов = Статьи.Ссылка
	|		ГДЕ
	|			Данные.Организация = Организации.Ссылка
	|			И Данные.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|			И Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И Данные.Активность)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ОтборОрганизации КАК Организации
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ДетализацияСебестоимостиПартииТоваровПостатейныеЗатраты КАК Данные
	|		ГДЕ
	|			Данные.Организация = Организации.Ссылка
	|			И Данные.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	ОтборОрганизации КАК Организации
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ДетализацияСебестоимостиПартииТоваров КАК Данные
	|		ГДЕ
	|			Данные.Организация = Организации.Ссылка
	|			И Данные.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Организация
	|ИЗ
	|	Документ.РаспределениеРасходовБудущихПериодов КАК Данные
	|ГДЕ
	|	Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Данные.Организация В (&ОтборОрганизации)
	|	И Данные.Проведен
	|	И (Данные.ВариантУказанияСуммыУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически)
	|	ИЛИ Данные.ВариантУказанияСуммыРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыУказанияСуммыРБП.ОпределяетсяАвтоматически))
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.Организация
	|ИЗ
	|	Документ.РаспределениеПрочихЗатрат КАК Данные
	|ГДЕ
	|	Данные.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Данные.Организация В (&ОтборОрганизации)
	|	И Данные.НазначениеНастройкиРаспределения В
	|	(ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаСебестоимостьПроизводства),
	|		ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаОВЗ))
	|	И Данные.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Данные.Организация
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Организация В
	|	(&ОтборОрганизации)) КАК Данные
	//-- НЕ УТ
	|";
	
	ТекстЗапросаДанные = "
	|ВЫБРАТЬ
	|	Данные.Организация КАК Организация
	|ИЗ
	|	СписокОрганизаций КАК Данные
	|";
	
	ТекстыЗапросов = Новый Массив; // Массив Из Строка
	ТекстыЗапросов.Добавить(ТекстЗапросаОтборСтатьиРасходов);
	ТекстыЗапросов.Добавить(ТекстЗапросаОтборОрганизации);
	ТекстыЗапросов.Добавить(ТекстЗапросаСписокОрганизаций);
	
	ТекстЗапросаДанные = РасчетСебестоимостиЛокализация.ТекстЗапросаОрганизацииСДвижениямиПоСебестоимости() 
		+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
		+ ТекстЗапросаДанные;
	
	ТекстыЗапросов.Добавить(ТекстЗапросаДанные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", 
		?(НЕ ЗначениеЗаполнено(МассивОрганизаций),
			Справочники.Организации.ДоступныеОрганизации(),
			ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций)));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив организаций, у которых есть остатки (необходимо выполнить корректировки).
//
// Возвращаемое значение:
//	Массив -
//
Функция ОрганизацииСОстаткамиПоСебестоимости(ПериодРасчета, МассивОрганизаций = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	ШаблонЗапроса = ПолучитьЗаголовокЗапроса(, Истина) + "
	|		Т.Организация
	|	ИЗ
	|		%1.Остатки(&НачалоПериода, Организация В (&ОтборОрганизации)) КАК Т";
	
	Для Каждого ИмяРегистра Из РегистрыСКорректировкамиНачальныхОстатков() Цикл
		
		Если НЕ Метаданные.РегистрыНакопления.Содержит(Метаданные.НайтиПоПолномуИмени(ИмяРегистра)) Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетСебестоимостиУниверсальныеАлгоритмы.ДополнитьСтроку(
			ТекстЗапроса, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, ИмяРегистра),,,,
			Символы.ПС + "	ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + "	");
		
	КонецЦикла;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация
	|ИЗ
	|	ИмяТаблицы КАК Т";
	
	ТекстЗапроса = СтрЗаменить(ШаблонЗапроса, "ИмяТаблицы", "(" + ТекстЗапроса + ")");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("ОтборОрганизации", 
		?(НЕ ЗначениеЗаполнено(МассивОрганизаций),
			Справочники.Организации.ДоступныеОрганизации(),
			ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций)));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат Результат;
	
КонецФункции

// Возвращает доступные для расчета организации.
//
Функция ДоступныеОрганизации(МассивОрганизаций)
	
	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		Возврат ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций);
	КонецЕсли;
	
	Возврат Справочники.Организации.ДоступныеОрганизации(Ложь, Ложь);
	
КонецФункции


// Дополняет перечень организаций из ОтборОрганизации остальными организациями ИБ, связанными с ними по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - период расчета
//	ОтборОрганизации - СписокЗначений, Массив, СправочникСсылка.Организации - отбор по организациям
//	Группировать - Булево - возвращать сгруппированный результат, или в все найденные организации в виде обычного массива.
//
// Возвращаемое значение:
//	Массив - если Группировать, то результат аналогичен возвращаемому значению ВсеСвязиОрганизацийПоСхемеИнтеркампани(),
//			 но возвращены будут только те группы (массивы) организаций, в которые входят организации из ОтборОрганизации
//			 Если НЕ Группировать - то эти же группы будут слиты в один массив.
//			 Т.е. по сути эта функция лишь отбор для ВсеСвязиОрганизацийПоСхемеИнтеркампани()
//			 с возможностью представления результат в "линейном" виде.
//
Функция СвязиОрганизацийПоСхемеИнтеркампани(Дата = Неопределено, ОтборОрганизации = Неопределено, Группировать = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ОтборПоОрганизациям = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	
	// Получим все организации ИБ, сгруппированные по связям схемы Интеркампани
	МассивГрупп = ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата);
	
	// Оставим такие группы организаций, в которых хоть одна организация группы
	// нуждается в пересчете (входит в требуемый ОтборПоОрганизациям).
	Результат = Новый Массив;
	
	Для Каждого ЭлементГруппа Из МассивГрупп Цикл
		Для Каждого Организация Из ЭлементГруппа Цикл
			
			Если НЕ ЗначениеЗаполнено(ОтборПоОрганизациям) ИЛИ ОтборПоОрганизациям.Найти(Организация) <> Неопределено Тогда
				
				// Эту группу связанных организаций надо пересчитать
				Если Группировать Тогда
					// Результат в виде "массив из массивов"
					Результат.Добавить(ОбщегоНазначения.СкопироватьРекурсивно(ЭлементГруппа));
				Иначе
					// Результат в виде "массив"
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ЭлементГруппа);
				КонецЕсли;
				
				Прервать; // добавили всю группу - переходим к следующей
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса получения всех связей Организация и КорОрганизация, по регистру СебестоимостьТоваров, в заданном периоде.
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаСвязиОрганизаций()
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СебестоимостьТоваров.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) КАК КорОрганизация
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И СебестоимостьТоваров.Активность
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Организация КАК Организация,
	|	Организации.КорОрганизация КАК КорОрганизация
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Организация КАК Организация,
	|		Организации.КорОрганизация КАК КорОрганизация
	|	ИЗ
	|		ВТОрганизации КАК Организации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КПередаче.ОрганизацияВладелец,
	|		КПередаче.ВидЗапасовПродавца.Организация
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|			ВидЗапасовПродавца.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК КПередаче
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Резервы.Организация,
	|		Резервы.КорОрганизация
	|	ИЗ
	|		РегистрНакопления.РезервыТоваровОрганизаций КАК Резервы
	|	ГДЕ
	|		Резервы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Резервы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И Резервы.КорВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|		И Резервы.Организация <> Резервы.КорОрганизация
	|		И Резервы.Количество > 0
	|	) КАК Организации
	|ГДЕ
	|	Организации.Организация <> Организации.КорОрганизация
	|	И Организации.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И Организации.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	КорОрганизация";
КонецФункции

// Возвращает текст запроса получения всех связей Организация и КорОрганизация, по регистру СебестоимостьТоваров, в заданном периоде.
// Запрос эффективен до ~1,4 млн движений, в заданном периоде, с заполненным реквизитом КорОрганизация.
//
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаСвязиОрганизацийСИспользованиемВТФильтр()
	
	Возврат "ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТВидыЗапасовТовар
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасов,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.КорОрганизация КАК КорОрганизация
	|ИЗ
	|	ВТФильтр КАК ВТФильтр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО (СебестоимостьТоваров.Период = ВТФильтр.Период)
	|			И (СебестоимостьТоваров.Регистратор = ВТФильтр.Регистратор)
	|			И (СебестоимостьТоваров.НомерСтроки = ВТФильтр.НомерСтроки)
	|			И (СебестоимостьТоваров.Организация <> СебестоимостьТоваров.КорОрганизация)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СебестоимостьТоваров.Организация,
	|	ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И СебестоимостьТоваров.Организация <> СебестоимостьТоваров.КорОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизацийКПередачеОстатки.ОрганизацияВладелец,
	|	ВТВидыЗапасовТовар.Организация
	|ИЗ
	|	ВТВидыЗапасовТовар КАК ВТВидыЗапасовТовар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(
	|				&ГраницаКонецПериода,
	|				ВидЗапасовПродавца В
	|					(ВЫБРАТЬ
	|						ВТВидыЗапасовТовар.ВидЗапасов
	|					ИЗ
	|						ВТВидыЗапасовТовар КАК ВТВидыЗапасовТовар)) КАК ТоварыОрганизацийКПередачеОстатки
	|		ПО (ТоварыОрганизацийКПередачеОстатки.ВидЗапасовПродавца = ВТВидыЗапасовТовар.ВидЗапасов)
	|			И (ТоварыОрганизацийКПередачеОстатки.ОрганизацияВладелец <> ВТВидыЗапасовТовар.Организация)
	|			И (ТоварыОрганизацийКПередачеОстатки.ОрганизацияВладелец <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (ВТВидыЗапасовТовар.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезервыТоваровОрганизаций.Организация,
	|	РезервыТоваровОрганизаций.КорОрганизация
	|ИЗ
	|	ВТВидыЗапасовТовар КАК ВТВидыЗапасовТовар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РезервыТоваровОрганизаций КАК РезервыТоваровОрганизаций
	|		ПО (РезервыТоваровОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РезервыТоваровОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|			И (РезервыТоваровОрганизаций.КорВидЗапасов = ВТВидыЗапасовТовар.ВидЗапасов)
	|			И (РезервыТоваровОрганизаций.Организация <> РезервыТоваровОрганизаций.КорОрганизация)
	|			И (РезервыТоваровОрганизаций.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (РезервыТоваровОрганизаций.Количество > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	КорОрганизация";

КонецФункции

// Возвращает информацию о всех организациях ИБ, сгруппированную по их участию в схеме Интеркампани в указанном периоде.
//
// Параметры:
//	Дата - Дата - период расчета
//
// Возвращаемое значение:
//		Массив из Массив - элементами данного массива являются массивы организаций (СправочникСсылка.Организации),
//			связанных между собой по схеме Интеркампани.
//			= если организация не связана с другими, то она будет в массиве одна.
//			= одна и та же организация может входить только в один массив - не может встречаться в результате функции несколько раз.
// Например,
//	есть организации 1, 2, 3, 4, 5
//	по Интеркампани товары перемещаются между организациями 1-3 и 3-5
//	организация 2 в этом периоде работает "сама по себе", не связана с другими организациями
//	по организации 4 в этом периоде не было движений по регистру СебестоимостьТоваров
// Возвращаемый функцией массив будет иметь следующий вид:
//	элемент(0) - массив (организация 1, организация 3, организация 5) - схема Интеркампани
//	элемент(1) - массив (организация 2) - "одиночная", несвязанная организация
//	элемент(2) - массив (организация 4) - несмотря на отсутствие по ней движений будет дополнена из справочника организаций.
//
Функция ВсеСвязиОрганизацийПоСхемеИнтеркампани(Дата) Экспорт

	МассивГрупп = Новый Массив; // результат функции - массив из массивов организаций
	УчтенныеОрганизации = Новый Массив; // связанные по Интеркампани - их не надо выбирать из справочника организаций
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ
	|	СебестоимостьТоваров.Период КАК Период,
	|	СебестоимостьТоваров.Регистратор КАК Регистратор,
	|	СебестоимостьТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТФильтр
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.КорОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	
	Запрос.Выполнить();
	
	КоличствоСтрокВТФильтр = РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "ВТФильтр");
	// Запрос с использованием ВТФильтр, эффективен до ~1,4 млн строк в ВТФильтр.
	Если КоличствоСтрокВТФильтр > 1400000 Тогда
		Запрос.Текст = "УНИЧТОЖИТЬ ВТФильтр";
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаСвязиОрганизаций();
	Иначе
		Запрос.Текст = ТекстЗапросаСвязиОрганизацийСИспользованиемВТФильтр();
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();

	// Необходимо собрать в группы организации, которые участвовали в перепродажах или межфирменных перемещениях.
	Если НЕ РезультатЗапроса.Пустой() Тогда

		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			ГруппаОрганизации    = НайтиВМассивеГруппОрганизаций(Выборка.Организация,    МассивГрупп);
			ГруппаКорОрганизации = НайтиВМассивеГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп);
			
			Если ГруппаОрганизации = Неопределено И ГруппаКорОрганизации = Неопределено Тогда
				
				// таких организаций еще не было в выборке - добавим обе организации в новую группу
				ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, Неопределено);
				ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, МассивГрупп.Количество() - 1);
				
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				
			ИначеЕсли ГруппаОрганизации <> Неопределено И ГруппаКорОрганизации <> Неопределено Тогда
				
				// обе организации уже были в выборке
				Если ГруппаОрганизации <> ГруппаКорОрганизации Тогда
					// перенесем все организации из группы кор.организации в группу организации
					ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ГруппаОрганизации, ГруппаКорОрганизации);
				КонецЕсли;
				
			Иначе
				// одной из организаций еще не было в выборке
				Если ГруппаОрганизации = Неопределено Тогда
					// добавим организацию в группу кор. организации
					ДобавитьВМассивГруппОрганизаций(Выборка.Организация,    МассивГрупп, ГруппаКорОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.Организация);
				Иначе
					// добавим кор. организацию в группу организации
					ДобавитьВМассивГруппОрганизаций(Выборка.КорОрганизация, МассивГрупп, ГруппаОрганизации);
					
					ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(УчтенныеОрганизации, Выборка.КорОрганизация);
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	// Дополним остальными организациями из справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В (&УчтенныеОрганизации)
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Предопределенный";
	
	Запрос.УстановитьПараметр("УчтенныеОрганизации",        		   УчтенныеОрганизации);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Новая группа - массив с одним элементом
		ДобавитьВМассивГруппОрганизаций(Выборка.Организация, МассивГрупп, Неопределено); 
	КонецЦикла;
	
	Возврат МассивГрупп;
	
КонецФункции


Функция НайтиВМассивеГруппОрганизаций(Значение, МассивГрупп)

	Для СчетчикГрупп = 0 По МассивГрупп.Количество() - 1 Цикл
		Если МассивГрупп[СчетчикГрупп].Найти(Значение) <> Неопределено Тогда
			Возврат СчетчикГрупп;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ДобавитьВМассивГруппОрганизаций(Значение, МассивГрупп, ПозицияГруппы)

	Если ПозицияГруппы = Неопределено Тогда
		МассивГрупп.Добавить(Новый Массив);
		ПозицияГруппы = МассивГрупп.Количество() - 1;
	КонецЕсли;

	ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппы], Значение);

КонецПроцедуры

Процедура ПеренестиГруппуОрганизацийВДругуюГруппу(МассивГрупп, ПозицияГруппыКуда, ПозицияГруппыОткуда)

	Для Каждого Значение Из МассивГрупп[ПозицияГруппыОткуда] Цикл
		ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(МассивГрупп[ПозицияГруппыКуда], Значение);
	КонецЦикла;

	МассивГрупп.Удалить(ПозицияГруппыОткуда);

КонецПроцедуры

#КонецОбласти

#Область МетодыОценкиСтоимости

// По переданному массиву организаций определяет метод оценки стоимости.
//
// Параметры:
//	ПараметрыРасчета - см. ИнициализироватьОбщиеПараметрыРасчета
//	МассивОрганизаций - Массив - организации.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости.
//
Функция ОпределитьМетодОценкиСтоимостиДляГруппыОрганизаций(ПараметрыРасчета, МассивОрганизаций)
	
	Если ПараметрыРасчета.ПредварительныйРасчет Тогда
		Возврат Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
	КонецЕсли;
	
	МетодОценкиСтоимости   	   = Перечисления.МетодыОценкиСтоимостиТоваров.ПустаяСсылка();
	ОдинаковыйМетодОценки  	   = Истина;
	ЕстьФИФОВзвешеннаяОценка   = Ложь;
	ЕстьДругиеМетодыОценки     = Ложь;
	ТекстОшибки			   	   = "";
	
	ЕстьФИФОСкользящаяБезПУ    = Ложь;
	ОрганизацииСФИФОСкользящая = Новый Массив;
	
	ОрганизацииСОшибками	   = Неопределено;
	
	Для Каждого Организация Из МассивОрганизаций Цикл

		МетодОценкиПоОрганизации = ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, Организация);

		Если ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда // проверка для партионного учета версии 2.2
			
			// В МетодОценкиСтоимости будет записано или ФИФОВзвешеннаяОценка, если такой метод используется у всех организаций
			// или пустая ссылка, означающая, что у организаций используется как метод СредняяЗаМесяц, так и ФИФОСкользящаяОценка.
			Если МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОВзвешеннаяОценка Тогда
				ЕстьФИФОВзвешеннаяОценка = Истина;
				МетодОценкиСтоимости 	 = МетодОценкиПоОрганизации;
			Иначе
				ЕстьДругиеМетодыОценки   = Истина;
			КонецЕсли;
			
		Иначе // проверка для партионного учета версии 2.1 и отключенного партионного учета
			
			// Разрешен только один общий для всех организаций метод оценки, который и будет записан в МетодОценкиСтоимости.
			Если МетодОценкиСтоимости <> МетодОценкиПоОрганизации Тогда
				Если НЕ ЗначениеЗаполнено(МетодОценкиСтоимости) Тогда 
					МетодОценкиСтоимости = МетодОценкиПоОрганизации; // первый проход цикла
				Иначе
					ОдинаковыйМетодОценки = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыРасчета.ПартионныйУчетНеИспользуется
			 И МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
				
				ЕстьФИФОСкользящаяБезПУ = Истина;
				ОрганизацииСФИФОСкользящая.Добавить(Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьФИФОВзвешеннаяОценка И ЕстьДругиеМетодыОценки Тогда // проверка для партионного учета версии 2.2
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
						|%Организации%.
						|Метод оценки ""ФИФО взвешенная оценка"" не может использоваться совместно с любыми другими методами оценки.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.';
						|en = 'Invalid combination of inventory cost evaluation methods for companies operating under Intercompany:
						|%Организации%. 
						|You cannot use the ""FIFO weighted estimate"" evaluation method with any other evaluation methods.
						|You can configure a cost evaluation method in the company accounting policy.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли НЕ ОдинаковыйМетодОценки Тогда // проверка для партионного учета версии 2.1
		ОрганизацииСОшибками = МассивОрганизаций;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимое сочетание методов оценки стоимости запасов для организаций, работающих по схеме Интеркампани:
						|%Организации%.
			            |Для всех организаций, работающих по схеме Интеркампани, должен использоваться одинаковый метод оценки.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.';
						|en = 'Invalid combination of inventory cost evaluation methods for companies operating under Intercompany:
						|%Организации%. 
						|Use the same evaluation method for all companies operating under Intercompany.
						|You can configure a cost evaluation method in the company accounting policy.'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ЕстьФИФОСкользящаяБезПУ Тогда
		ОрганизацииСОшибками = ОрганизацииСФИФОСкользящая;
		ТекстОшибки = 
			НСтр("ru = 'Недопустимо использование метода оценки стоимости запасов ""ФИФО (скользящая оценка)"" при выключенном партионном учете:
						|%Организации%.
						|Настройка метода оценки стоимости выполняется в учетной политике организаций.';
						|en = 'Cannot use the ""FIFO (rolling valuation)"" inventory cost evaluation method if lot accounting is disabled:
						|%Организации%. 
						|You can configure a cost evaluation method in the company accounting policy.'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		// Недопустимые методы оценки стоимости или их сочетание - расчет невозможен.
		ТекстОшибки = СтрЗаменить(
			ТекстОшибки,
			"%Организации%",
			ПредставлениеОрганизаций(ОрганизацииСОшибками, ", ", Истина));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВУчетныхПолитикахОрганизаций,
			ТекстОшибки,
			,
			ОрганизацииСОшибками);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки);
			
	КонецЕсли;
	
	Возврат МетодОценкиСтоимости;

КонецФункции

// Определяет метод оценки стоимости указанной организации.
//
// Параметры:
//	ПараметрыРасчета - см. ИнициализироватьОбщиеПараметрыРасчета
//	Организация - СправочникСсылка.Организации - организация.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - метод оценки стоимости.
//
Функция ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, Организация)
	
	// К расчету может быть передан МассивОрганизаций, в котором содержатся не все организации, связанные по схеме Интеркампани.
	// В этом случае надо дополнить МетодыОценкиСтоимости методами оценки отсутствующих в массиве организаций.
	
	МетодОценкиПоОрганизации = ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Получить(Организация);
	
	Если НЕ ЗначениеЗаполнено(МетодОценкиПоОрганизации) Тогда
		
		ПараметрыУчетнойПолитики = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"УчетнаяПолитикаФинансовогоУчета",
			Организация,
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
		
		Если ПараметрыУчетнойПолитики <> Неопределено Тогда
			МетодОценкиПоОрганизации = ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров;
		Иначе
			МетодОценкиПоОрганизации = Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
		КонецЕсли;
			
		ПараметрыРасчета.УчетныеПолитики.МетодыОценкиСтоимости.Вставить(Организация, МетодОценкиПоОрганизации);
		
	КонецЕсли;
	
	Возврат МетодОценкиПоОрганизации;
	
КонецФункции

Процедура ДобавитьВТМетодыОценкиСтоимостиОрганизацийПоПериодам(ПараметрыРасчета)
	
	// Создадим временную таблицу учетных политик организаций.
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВТМетодыОценкиСтоимостиОрганизацийПоПериодам");
	Запрос = Новый Запрос;
	НастройкиНалоговУчетныхПолитик.ДополнитьМенеджерВременныхТаблицГоловнымиОрганизациями(ПараметрыРасчета.МенеджерВременныхТаблиц, ПараметрыРасчета.МассивОрганизаций);
	Запрос.МенеджерВременныхТаблиц = ПараметрыРасчета.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МетодыОценкиСтоимостиТоваров.Организация КАК Организация,
	|	МетодыОценкиСтоимостиТоваров.МетодОценкиСтоимостиТоваров КАК МетодОценкиСтоимостиТоваров,
	|	МИНИМУМ(МетодыОценкиСтоимостиТоваров.НачалоПериода) КАК НачалоПериода,
	|	МетодыОценкиСтоимостиТоваров.КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВТМетодыОценкиСтоимостиОрганизацийПоПериодам
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация,
	|		УчетнаяПолитикаФинансовогоУчета.Период КАК НачалоПериода,
	|		УчетнаяПолитикаФинансовогоУчета.МетодОценкиСтоимостиТоваров КАК МетодОценкиСтоимостиТоваров,
	|		МИНИМУМ(ЕСТЬNULL(ПоследующиеУчетныеПолитикиФинансовогоУчета.Период, ДАТАВРЕМЯ(2120, 1, 1))) КАК КонецПериода
	|	ИЗ
	|		ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
	|			ПО ГоловныеОрганизации.Организация = УчетнаяПолитикаФинансовогоУчета.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК ПоследующиеУчетныеПолитикиФинансовогоУчета
	|			ПО УчетнаяПолитикаФинансовогоУчета.Организация = ПоследующиеУчетныеПолитикиФинансовогоУчета.Организация
	|				И УчетнаяПолитикаФинансовогоУчета.Период < ПоследующиеУчетныеПолитикиФинансовогоУчета.Период
	|				И УчетнаяПолитикаФинансовогоУчета.МетодОценкиСтоимостиТоваров <> ПоследующиеУчетныеПолитикиФинансовогоУчета.МетодОценкиСтоимостиТоваров
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГоловныеОрганизации.ОбособленноеПодразделение,
	|		УчетнаяПолитикаФинансовогоУчета.МетодОценкиСтоимостиТоваров,
	|		УчетнаяПолитикаФинансовогоУчета.Период) КАК МетодыОценкиСтоимостиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	МетодыОценкиСтоимостиТоваров.Организация,
	|	МетодыОценкиСтоимостиТоваров.МетодОценкиСтоимостиТоваров,
	|	МетодыОценкиСтоимостиТоваров.КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	ВыполнитьЗапросСЗамеромДляПротокола(ПараметрыРасчета, Запрос);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета, "ВтГоловныеОрганизации");
	
КонецПроцедуры

#КонецОбласти


#Область ТипыЗаписейПартий

Функция ТипыЗаписейПервичныхПартий() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Партия);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.РаспределениеПоПравилам);
	
	Возврат Результат;
	
КонецФункции

Функция ТипыЗаписейКонвертацииДанных() Экспорт
	
	Результат = ОписаниеКорректировокНачальныхОстатков().ВыгрузитьКолонку("Корректировка");
	
	Возврат Результат;
	
КонецФункции

Функция ТипыЗаписейМногократнойКонвертацииДанных() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтр Из ОписаниеКорректировокНачальныхОстатков() Цикл
		
		Если ТекСтр.ВозможноМногократноеВыполнение Тогда
			Результат.Добавить(ТекСтр.Корректировка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НепересчитываемыеТипыЗаписей() Экспорт
	
	Результат = Новый Массив;
	
	// Типы записей первичных партий текущего периода.
	Для Каждого Элемент Из ТипыЗаписейПервичныхПартий() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// Типы записей конвертации данных при смене режима учета.
	Для Каждого Элемент Из ТипыЗаписейКонвертацииДанных() Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	// Типы записей партий прошлых периодов.
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ОстатокНЗП);
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.Остаток);
	
	// Типы записей "не партий" (с нулевым количеством).
	Результат.Добавить(Перечисления.ТипыЗаписейПартий.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив типов записей, используемых в первичных движениях документов.
//
// Возвращаемое значение:
//	Массив - типы записи
//
Функция ТипыЗаписейПервичныхДвижений() Экспорт
	
	Результат = Новый Массив;
	
	Правила = РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи();
	
	Для Каждого ТекущаяСтрока Из Правила Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ТипЗаписиПриход) И Результат.Найти(ТекущаяСтрока.ТипЗаписиПриход) = Неопределено Тогда
			Результат.Добавить(ТекущаяСтрока.ТипЗаписиПриход);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ТипЗаписиРасход) И Результат.Найти(ТекущаяСтрока.ТипЗаписиРасход) = Неопределено Тогда
			Результат.Добавить(ТекущаяСтрока.ТипЗаписиРасход);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТипыЗапасов

Функция СобственныеТипыЗапасов() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ТипыЗапасов.Товар);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварВПути);
	Результат.Добавить(Перечисления.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке);
	Результат.Добавить(Перечисления.ТипыЗапасов.Услуга);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

Функция ХозяйственныеОперацииВнешнихПоступлений() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ВыкупПринятыхНаХранениеТоваров);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеТоваров);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании);
	Результат.Добавить(Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Константы

Функция ОписаниеКонстантыИлиФункциональнойОпции(ИмяОбъекта) Экспорт
	
	Описание = Новый Структура("Значение, Метаданные");
	
	Если Метаданные.ФункциональныеОпции.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.ФункциональныеОпции[ИмяОбъекта];
		Описание.Значение   = ПолучитьФункциональнуюОпцию(ИмяОбъекта);
	ИначеЕсли Метаданные.Константы.Найти(ИмяОбъекта) <> Неопределено Тогда
		Описание.Метаданные = Метаданные.Константы[ИмяОбъекта];
		Описание.Значение   = Константы[ИмяОбъекта].Получить();
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#Область ДокументыРасчетаСебестоимости

// Формирует документы расчета себестоимости для рассчитываемых организаций.
// Список документов помещается во временную таблицу ВТДокументыРасчетаСебестоимости.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимости(ПараметрыРасчета, ПредварительныйРасчет, РегламентноеЗадание)
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТДокументыРасчетаСебестоимости");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Если ПараметрыРасчета.Свойство("РасшифровкаРаспределения") Тогда
		
		// Инициализировать документы не требуется.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	НЕОПРЕДЕЛЕНО КАК МоментВремени,
		|	Организации.Ссылка КАК Организация
		|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
		Возврат;
		
	КонецЕсли;
	
	// Выберем все не удаленные документы расчета себестоимости за расчетный период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Ссылка.Проведен КАК Проведен,
	|	Т.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Т.Ссылка.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НовыйФорматДокумента,
	|	Т.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров.Организации КАК Т
	|ГДЕ
	|	Т.Ссылка.Дата МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&КонецПериода, МЕСЯЦ)
	|	И НЕ Т.Ссылка.ПометкаУдаления
	|	И Т.Организация В (&ТекущийОтборОрганизации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	НовыйФорматДокумента УБЫВ,
	|	Проведен УБЫВ,
	|	ПредварительныйРасчет,
	|	Т.Ссылка.Дата УБЫВ";
	
	// Сохраним связь Организация - Документ расчета себестоимости, который будем пересчитывать.
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	// Сохраним перечень документов расчета себестоимости.
	ДокументыРасчетаСебестоимости  = Новый Массив;
	РегистраторыРасчетаСебестоимости = Новый Массив;
	// Сохраним перечень устаревших документов расчета себестоимости, которые нужно удалить.
	ДокументыКУдаления  		   = Новый Массив;
	// Сохраним все организации из ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.
	МассивОрганизацийДляРасчета    = Новый Массив;
	
	НомерГруппы = 0;
	ВозможенРасчет = НЕ РегламентноеЗадание;
	
	Пока НомерГруппы < ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани.Количество() Цикл
		
		ГруппаОрганизаций = ПараметрыРасчета.ГруппыОрганизацийПоИнтеркампани[НомерГруппы];
		
		// Получим таблицу существующих документов расчета себестоимости для группы связанных организаций.
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", ГруппаОрганизаций);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Индексы.Добавить("Организация, ПредварительныйРасчет");
		
		// Удалим все документы расчета себестоимости в "старом формате" - когда организации не было в шапке документа.
		УдалитьДокументыРасчетаСебестоимости(
			ДокументыКУдаления,
			ТаблицаДокументов,
			Новый Структура("НовыйФорматДокумента", Ложь));
		
		// По организации за период может оказаться несколько документов расчета себестоимости - оставим только один.
		Для Каждого ТекущаяОрганизация Из ГруппаОрганизаций Цикл
			
			МассивОрганизацийДляРасчета.Добавить(ТекущаяОрганизация);
			
			СтрокиФакт = ТаблицаДокументов.НайтиСтроки(
				Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Ложь));
			
			Если СтрокиФакт.Количество() > 0 Тогда
				// Документы предварительного расчета больше не нужны.
				УдалитьДокументыРасчетаСебестоимости(
					ДокументыКУдаления,
					ТаблицаДокументов,
					Новый Структура("Организация, ПредварительныйРасчет", ТекущаяОрганизация, Истина));
			КонецЕсли;
			
			Если НЕ РегламентноеЗадание ИЛИ СтрокиФакт.Количество() = 0 Тогда
				ВозможенРасчет = Истина;
			КонецЕсли;
			
			// Оставим только один документ для расчета, самый поздний по дате (если почему-то документов осталось несколько).
			ДокументРасчета = УдалитьДокументыРасчетаСебестоимости(
				ДокументыКУдаления,
				ТаблицаДокументов,
				Новый Структура("Организация", ТекущаяОрганизация),
				Истина);
				
			ДокументыРасчетаПоОрганизациям.Вставить(ТекущаяОрганизация, ДокументРасчета);
			
		КонецЦикла;
		
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	Если НЕ ВозможенРасчет Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчет предварительной себестоимости за %1 регламентным заданием не требуется,
				|т.к. по всем организациям уже выполнен расчет фактической себестоимости';
				|en = 'Preliminary cost calculation for %1 by the scheduled job is not required
				|as actual cost has already been calculated for all companies'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
			ТекстОшибки);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстОшибки);
		
	КонецЕсли;
	
	// Удалим ранее сформированные документы расчета себестоимости по организациям, по которым расчет проводить не нужно.
	МассивНеРассчитываемых = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПараметрыРасчета.МассивОрганизаций,
		МассивОрганизацийДляРасчета);
	ДокументыКОчистке = Новый Массив;
	
	Если МассивНеРассчитываемых.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("ТекущийОтборОрганизации", МассивНеРассчитываемых);
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		
		Если ПараметрыРасчета.РасчетныйПериод.НачалоСледующегоПериода = ПараметрыРасчета.ДатаПереходаНаПартионныйУчетВерсии22 Тогда
			ДокументыКОчистке = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
			ТаблицаДокументов.Очистить();
		Иначе
			УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов);
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Установим блокировку на изменяемые документы.
		ДокументыКБлокировке = ОбщегоНазначения.СкопироватьРекурсивно(ДокументыКУдаления);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКБлокировке, ДокументыКОчистке, Истина);
		
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыКБлокировке.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументыКБлокировке.Количество() > 0 Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.Ссылка КАК Документ
			|ИЗ
			|	Документ.РасчетСебестоимостиТоваров КАК Т
			|ГДЕ
			|	Т.Ссылка В (&ДокументыКБлокировке)";
			
			Запрос.УстановитьПараметр("ДокументыКБлокировке", ДокументыКБлокировке);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.РасчетСебестоимостиТоваров");
			ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Документ");
			Блокировка.Заблокировать();
			
		КонецЕсли;
		
		ОшибкиДатЗапретаИзменения = "";
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыКУдаления, ДокументыКОчистке, Истина);
		
		// Удалим ненужные документы расчета себестоимости.
		Для Каждого ТекущийДокумент Из ДокументыКУдаления Цикл
			
			ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			
			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";
			
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, ТекущийДокумент, ОписаниеОшибкиДаты) Тогда
				// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения + ?(ОшибкиДатЗапретаИзменения = "", "", "
					|") + РасчетСебестоимостиПротоколРасчета.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;
			
			Если ДокументыКОчистке.Найти(ТекущийДокумент) = Неопределено Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			// Очистим задание к расчету, которое запишется из события в модуле набора записей.
			НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Документ.Установить(ТекущийДокумент);
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		// Создадим новые или обновим существующие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументОбъект = КлючИЗначение.Значение.ПолучитьОбъект();
			Иначе
				ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			КонецЕсли;
			
			// Если расчет себестоимости еще не выполнялся или выполнялся в предудущей версии конфигурации (не заполнен режим закрытия месяца),
			// то расчет выполняем с включенным восстановлением хронологической последовательности списания партий.
			Если Не ЗначениеЗаполнено(ДокументОбъект.РежимЗакрытияМесяца) Тогда
				ПараметрыРасчета.ВосстанавливатьХронологическуюПоследовательностьСписанияПартий = Истина;
			Иначе
				ПараметрыРасчета.ВосстанавливатьХронологическуюПоследовательностьСписанияПартий =
					ЗакрытиеМесяцаСервер.ОбщиеПараметрыЗакрытияМесяца().ВосстанавливатьХронологическуюПоследовательностьСписанияПартий;
			КонецЕсли;
			
			// Если режим закрытия месяца не задан, то определим его по ранее созданному документу расчета себестоимости,
			// кроме расчета предварительной стоимости регламентным заданием.
			// При предварительном расчете себестоимости регламентным заданием режим закрытия месяца не заполняется.
			Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.РежимЗакрытияМесяца)
			 И ПараметрыРасчета.ВариантРасчета <> Перечисления.ВариантыРасчетаПартийИСебестоимости.ПредварительнаяСебестоимостьРегламентноеЗадание Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.РежимЗакрытияМесяца) Тогда
					РежимЗакрытияМесяца = ДокументОбъект.РежимЗакрытияМесяца;
				ИначеЕсли НачалоМесяца(ТекущаяДатаСеанса()) = НачалоМесяца(ПараметрыРасчета.РасчетныйПериод.КонецПериода)
				 И ПараметрыРасчета.ПартионныйУчетВерсии22 Тогда
					РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие;
				Иначе
					РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
				КонецЕсли;
				ПараметрыРасчета.РежимЗакрытияМесяца = РежимЗакрытияМесяца; 
			Иначе
				РежимЗакрытияМесяца = ПараметрыРасчета.РежимЗакрытияМесяца;
			КонецЕсли;
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", 					ПараметрыРасчета.РасчетныйПериод.КонецПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", 			КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", ПредварительныйРасчет);
			ДанныеЗаполненияДокумента.Вставить("РежимЗакрытияМесяца",   РежимЗакрытияМесяца);
			
			ДанныеЗаполненияДокумента.Вставить("МетодОценки",
				ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, ДанныеЗаполненияДокумента.Организация));
			
			// В шапке документа будет указана организация, по которой рассчитывается себестоимость.
			// Она же будет продублирована в табличной части документа.
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			// Проверим, что документ находится в доступном для изменения периоде.
			ОписаниеОшибкиДаты = "";
			
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(ДокументОбъект, КлючИЗначение.Значение, ОписаниеОшибкиДаты) Тогда
				// Накопим описание ошибок и потом вызовем одно исключение для всех документов.
				ОшибкиДатЗапретаИзменения = ОшибкиДатЗапретаИзменения + ?(ОшибкиДатЗапретаИзменения = "", "", "
					|") + РасчетСебестоимостиПротоколРасчета.ПредставлениеМногострочногоТекста(ОписаниеОшибкиДаты);
				Продолжить;
			КонецЕсли;
				
			// Записываем документ проведенным, при этом его старые движения останутся до окончания расчета.
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;
			
			// Создадим новый регистратор расчета себестоимости.
			Если ПараметрыРасчета.ВыделятьОтклоненияСебестоимостиОкончательногоРасчета
			 И ПараметрыРасчета.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие Тогда
				ДанныеЗаполненияДокумента = Новый Структура;
				ДанныеЗаполненияДокумента.Вставить("Дата",                ТекущаяДатаСеанса());
				ДанныеЗаполненияДокумента.Вставить("РасчетныйПериод",     ПараметрыРасчета.РасчетныйПериод.КонецПериода);
				ДанныеЗаполненияДокумента.Вставить("Организация",         КлючИЗначение.Ключ);
				ДанныеЗаполненияДокумента.Вставить("Ответственный",       Пользователи.ТекущийПользователь());
				
				ДокументОбъект = Документы.РегистраторРасчетаСебестоимости.СоздатьДокумент();
				ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				РегистраторыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОшибкиДатЗапретаИзменения) Тогда
			 // Исключение будет отловлено ниже по коду этой процедуры, вместе с другими ошибками записи документов.
			ВызватьИсключение ОшибкиДатЗапретаИзменения;
		КонецЕсли;
		
		ПараметрыРасчета.Вставить("ДокументыРасчетаСебестоимости",  ДокументыРасчетаСебестоимости);
		ПараметрыРасчета.Вставить("ДокументыРасчетаПоОрганизациям", ДокументыРасчетаПоОрганизациям);
		ПараметрыРасчета.Вставить("РегистраторыРасчетаСебестоимости", РегистраторыРасчетаСебестоимости);
		
		// Фиктивный регистратор для записей с пустым регистратором
		// Заполним регистратор произвольным "первым" документом расчета себестоимости - чтобы движения можно было записать.
		// Расчет все равно в итоге будет завершен с ошибкой, но т.о. можно получить информацию обо всех ошибочных регистраторах.
		Для Каждого КлючИЗначение Из ПараметрыРасчета.ДокументыРасчетаПоОрганизациям Цикл
			ПараметрыРасчета.Вставить("ФиктивныйРегистратор", КлючИЗначение.Ключ);
			Прервать;
		КонецЦикла;
		
		// Документ расчета себестоимости больше не имеет движений по регистрам:
		//	- ВыручкаИСебестоимостьПродаж
		//	- Закупки
		// Поэтому, если пересчитываем прошлый период, то движения документа "Расчет себестоимости товаров" по этим регистрам
		// надо очистить.
		
		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
		Запрос.УстановитьПараметр("РегистраторыРасчетаСебестоимости", РегистраторыРасчетаСебестоимости);
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	ИмяРегистра КАК Т
		|ГДЕ
		|	Т.Регистратор В (&ДокументыРасчетаСебестоимости)";
		
		СтруктураРегистров = Новый Структура("ВыручкаИСебестоимостьПродаж, Закупки");
		
		ПараметрыЗаписи = ИнициализироватьПараметрыЗаписи(
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода,
			ПараметрыРасчета.НомерЗаданияДоРасчета);
		
		Для Каждого КлючИЗначение Из СтруктураРегистров Цикл
			
			ИмяРегистра = КлючИЗначение.Ключ;
			
			Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "ИмяРегистра", "РегистрНакопления." + ИмяРегистра);
			
			ЗаписатьДвиженияПоРегистру(
				Запрос,
				РегистрыНакопления[ИмяРегистра],
				ПараметрыЗаписи);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось инициализировать документы расчета себестоимости по причине:
				|%1';
				|en = 'Cannot initialize cost calculation documents. Reason:
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецПопытки;
	
	// Сформируем временные таблицы ВТДокументыРасчетаСебестоимости и ВТРегистраторыРасчетаСебестоимости
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.МоментВремени,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимости
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК Т
	|ГДЕ
	|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.МоментВремени,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТРегистраторыРасчетаСебестоимости
	|ИЗ
	|	Документ.РегистраторРасчетаСебестоимости КАК Т
	|ГДЕ
	|	Т.Ссылка В (&РегистраторыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|";
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);
	
КонецПроцедуры

// Формирует документы расчета себестоимости за прошлый период для рассчитываемых организаций.
// Список документов помещается во временную таблицу ВТДокументыРасчетаСебестоимостиПрошлогоПериода.
//
Процедура ИнициализироватьДокументыРасчетаСебестоимостиПрошлогоПериода(ПараметрыРасчета) Экспорт
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТДокументыРасчетаСебестоимостиПрошлогоПериода");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);

	// Выберем все не удаленные документы расчета себестоимости за прошлый период.
	// Если по организации уже существует подходящий документ расчета себестоимости, то новый документ создаваться не будет.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрОрганизации.Ссылка КАК Организация,
	|	МАКСИМУМ(ЕСТЬNULL(РасчетСебестоимостиТоваров.Ссылка, НЕОПРЕДЕЛЕНО)) КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК СпрОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|		ПО (СпрОрганизации.Ссылка = РасчетСебестоимостиТоваров.Организация)
	|			И (РасчетСебестоимостиТоваров.Дата МЕЖДУ &НачалоПредыдущегоПериода И &КонецПредыдущегоПериода)
	|			И (РасчетСебестоимостиТоваров.Проведен)
	|			И (НЕ РасчетСебестоимостиТоваров.ПредварительныйРасчет)
	|ГДЕ
	|	СпрОрганизации.Ссылка В(&ОрганизацииСОстаткамиПоСебестоимости)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрОрганизации.Ссылка";
	
	ДокументыРасчетаПоОрганизациям = Новый Соответствие;
	ДокументыРасчетаСебестоимости = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументыРасчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Ссылка);
	КонецЦикла;
	
	Попытка
		
		// Создадим недостающие документы расчета себестоимости по организациям.
		Для Каждого КлючИЗначение Из ДокументыРасчетаПоОрганизациям Цикл
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ДокументыРасчетаСебестоимости.Добавить(КлючИЗначение.Значение);
				Продолжить;
			КонецЕсли;

			ДокументОбъект = Документы.РасчетСебестоимостиТоваров.СоздатьДокумент();
			
			ДанныеЗаполненияДокумента = Новый Структура;
			ДанныеЗаполненияДокумента.Вставить("Дата", 					ПараметрыРасчета.РасчетныйПериод.КонецПредыдущегоПериода);
			ДанныеЗаполненияДокумента.Вставить("Организация", 			КлючИЗначение.Ключ);
			ДанныеЗаполненияДокумента.Вставить("ПредварительныйРасчет", Ложь);
			
			ДанныеЗаполненияДокумента.Вставить("МетодОценки",
				ОпределитьМетодОценкиСтоимостиТоваровОрганизации(ПараметрыРасчета, ДанныеЗаполненияДокумента.Организация));
			
			ДокументОбъект.Заполнить(ДанныеЗаполненияДокумента);
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Запомним документ
			ДокументыРасчетаСебестоимости.Добавить(ДокументОбъект.Ссылка);
			ДокументыРасчетаПоОрганизациям[КлючИЗначение.Ключ] = ДокументОбъект.Ссылка;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДокументыРасчетаСебестоимости", ДокументыРасчетаСебестоимости);
		
	Исключение
		
		ТекстДляПротокола = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось инициализировать документы расчета себестоимости прошлого периода по причине:
				|%1';
				|en = 'Cannot initialize past period cost calculation documents. Reason:
				|%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
			ПараметрыРасчета,
			Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаИнициализацииДокументовРасчетаСебестоимости,
			ТекстДляПротокола);
		
		ВызватьИсключение ТекстИсключениеДляРегистрацииПроблемы(ТекстДляПротокола);
		
	КонецПопытки;
	
	// Сформируем временную таблицу ВТДокументыРасчетаСебестоимости
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка,
	|	Т.МоментВремени,
	|	Т.Организация КАК Организация
	|ПОМЕСТИТЬ ВТДокументыРасчетаСебестоимостиПрошлогоПериода
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК Т
	|ГДЕ
	|	Т.Ссылка В (&ДокументыРасчетаСебестоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Запрос.Выполнить();
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета, Истина);
	
КонецПроцедуры

// Проверяет наличие регламентных документов расчета себестоимости товаров.
//
// Возвращаемое значение:
//	Булево -
//
Функция ЕстьДокументыРасчетаСебестоимости(ПериодРасчета, МассивОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РассчитанныеОрганизации
	|		ПО Организации.Ссылка = РассчитанныеОрганизации.Организация
	|			И (РассчитанныеОрганизации.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РассчитанныеОрганизации.Ссылка.Проведен)
	|			И (НЕ РассчитанныеОрганизации.Ссылка.ПредварительныйРасчет)
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|	И РассчитанныеОрганизации.Организация ЕСТЬ NULL 
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

// Проверяет наличие регламентных документов предварительного расчета себестоимости товаров.
//
// Возвращаемое значение:
//	Булево - в указанном периоде есть документы предварительного закрытия месяца
//
Функция ЕстьДокументыПредварительногоРасчетаСебестоимости(ПериодРасчета, МассивОрганизаций) Экспорт
	
	// Аналогичный текст запроса используется при формировании временной таблицы Задани в функции ТекстЗапросаДанныеДляРаспределения()
	// модуля менеджера документа РаспределениеПрочихЗатрат.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетСебестоимостиТоваров.Ссылка
	|ИЗ
	|	Документ.РасчетСебестоимостиТоваров КАК РасчетСебестоимостиТоваров
	|ГДЕ
	|	РасчетСебестоимостиТоваров.Организация.Ссылка В (&МассивОрганизаций)
	|	И РасчетСебестоимостиТоваров.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетСебестоимостиТоваров.Проведен
	|	И РасчетСебестоимостиТоваров.РежимЗакрытияМесяца
	|		= ЗНАЧЕНИЕ(Перечисление.РежимыЗакрытияМесяца.ПредварительноеЗакрытие)
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Выполняет удаление лишних документов расчета себестоимости из таблицы документов.
//
// Параметры:
// 	ДокументыКУдаления - Массив -
// 	ТаблицаДокументов - ТаблицаЗначений - Описание:
// 	* Ссылка - ДокументСсылка -
// 	Отбор - Структура, Неопределено - Описание:
// * Организация - СправочникСсылка.Организации -
// 	ОставитьПервый - Булево - Описание
// Возвращаемое значение:
// 	Неопределено - Описание
Функция УдалитьДокументыРасчетаСебестоимости(ДокументыКУдаления, ТаблицаДокументов, Отбор = Неопределено, ОставитьПервый = Ложь)
	
	ОставленныйДокумент = Неопределено;
	
	Если Отбор = Неопределено Тогда
		СтрокиТаблицы = ТаблицаДокументов; // вся таблица
	ИначеЕсли ТипЗнч(Отбор) = Тип("Структура") Тогда
		СтрокиТаблицы = ТаблицаДокументов.НайтиСтроки(Отбор); // отобранные строки
	Иначе
		СтрокиТаблицы = Отбор; // уже готовый массив строк
	КонецЕсли;
	
	Индекс = 0;
	
	Для Каждого ТекущаяСтрока Из СтрокиТаблицы Цикл
		
		Индекс = Индекс + 1;
		Если ОставитьПервый И Индекс = 1 Тогда
			ОставленныйДокумент = ТекущаяСтрока.Ссылка;
			Продолжить;
		КонецЕсли;
		
		ДокументыКУдаления.Добавить(ТекущаяСтрока.Ссылка);
		
		ТаблицаДокументов.Удалить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ОставленныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ПоследовательностиРасчета

// Возвращает фактическое требуемое начало периода расчета.
//
// Возвращаемое значение:
//	Дата -
//
Функция НачалоПериодаРасчета(Дата, МассивОрганизаций) Экспорт
	Перем Результат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|		ПО Организации.Ссылка = Задания.Организация
	|ГДЕ
	|	Организации.Ссылка В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Т.Месяц) КАК НачалоПериодаРасчета
	|ИЗ
	|	ВТПериоды КАК Т
	|ГДЕ
	|	Т.Месяц ЕСТЬ НЕ NULL 
	|	И Т.Месяц <= &Дата
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(Т.Месяц) ЕСТЬ НЕ NULL";
	
	Запрос.УстановитьПараметр("Дата", 			   Дата);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = ?(ЗначениеЗаполнено(Выборка.НачалоПериодаРасчета), НачалоМесяца(Выборка.НачалоПериодаРасчета), Неопределено);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = КонецМесяца(Дата) + 1;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает пустую схему пересчета партий и себестоимости.
//
// Возвращаемое значение:
//	ТаблицаЗначений - пустая таблица значений, состав колонок см. в теле функции.
//
Функция ПустаяСхемаРасчетаПартий() Экспорт
	
	СхемаРасчетаПартий = Новый ТаблицаЗначений; // результат выполнения этой функции
	
	СхемаРасчетаПартий.Колонки.Добавить("Дата", 					  Новый ОписаниеТипов("Дата"));   // требуемый период пересчета
	СхемаРасчетаПартий.Колонки.Добавить("Организации", 			  Новый ОписаниеТипов("Массив")); // массив организаций, которые надо пересчитать в этом периоде
	СхемаРасчетаПартий.Колонки.Добавить("ПредставлениеОрганизаций", Новый ОписаниеТипов("Строка")); // строковое представление организаций
	СхемаРасчетапартий.Колонки.Добавить("ИзмененоДокументов", 	  Новый ОписаниеТипов("Число"));  // для информации, количество измененных документов в этом периоде по этим организациям
	
	СхемаРасчетаПартий.Индексы.Добавить("Дата");
	
	Возврат СхемаРасчетаПартий;
	
КонецФункции

// Возвращает информацию о том, в каких периодах и по каким организациям необходимо пересчитать партии и себестоимость.
// Параметрами функции являются требуемые отборы по дате и организациям,
// а результат - это необходимые по факту (по данным ИБ) пересчеты.
// Например, может получится так, что
//	- пересчитать хочется только одну организацию в текущем месяце,
//  - но для этого надо пересчитать все организации начиная с прошлого года,
//	  т.к. по ним есть записи в регистре ЗаданияКРасчетуСебестоимости и организации связаны по схеме Интеркампани.
//
// Параметры:
//	Дата - Дата - конец периода (месяца), в котором надо выполнить пересчет
//	ОтборОрганизации - СправочникСсылка.Организации, Массив - организации, по которым надо выполнить пересчет
//	НомерЗаданияДляБлокировки - Число, Неопределено - Номер задания для блокировки регистра ЗаданияКРасчетуСебестоимости.
//	ТолькоОднаОрганизация - Булево - Признак расчета только одной организации без добавления связей по схеме интеркампани.
//
// Возвращаемое значение:
//	ТаблицаЗначений - схема выполнения пересчета партий и себестоимости, описание см. в ПустаяСхемаРасчетаПартий()
// 	Таблица отсортирована по колонке Дата и содержит все периоды (без пропусков),
// 	начиная с самой ранней необходимой даты пересчета и до даты из параметра Дата.
// 	В таблице не будет строк если пересчет не требуется,
// 	т.е. если параметр Дата больше, чем даты в записях регистра ЗаданияКРасчетуСебестоимости.
//
Функция СхемаРасчетаПартий(Знач Дата = Неопределено, ОтборОрганизации = Неопределено,
			НомерЗаданияДляБлокировки = Неопределено, ТолькоОднаОрганизация = Ложь) Экспорт
	
	Дата 			  		= КонецМесяца(?(НЕ ЗначениеЗаполнено(Дата), ТекущаяДатаСеанса(), Дата));
	МассивОрганизаций 		= ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	Если ТолькоОднаОрганизация Тогда
		ПолныйМассивОрганизаций = ОбщегоНазначенияУТКлиентСервер.Массив(ОтборОрганизации);
	Иначе
		ПолныйМассивОрганизаций = СвязиОрганизацийПоСхемеИнтеркампани(Дата, МассивОрганизаций);
	КонецЕсли;
	
	СхемаРасчета = ПустаяСхемаРасчетаПартий(); // результат выполнения этой функции
	
	Если НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(НачалоМесяца(Дата)) Тогда
		Возврат СхемаРасчета;
	КонецЕсли;
	
	Если НомерЗаданияДляБлокировки <> Неопределено Тогда
		// Установим блокировки по организациям для пересчета.
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДляБлокировки, ПолныйМассивОрганизаций);
	КонецЕсли;
	
	ДатыПересчетаПоОрганизациям = Новый Соответствие; // Организация - Дата, с которой по ней необходим пересчет
	СамаяРанняяДатаПересчета    = КонецМесяца(КонецМесяца(Дата) + 1);
	
	ТребуетсяПересчетПоИсходнымОрганизациям = Ложь;
	
	// Запомним даты начала пересчета по каждой организации.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Задания.Организация КАК Организация,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ)) КАК Месяц
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Дата
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Задания.Организация";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПолныйМассивОрганизаций.Найти(Выборка.Организация) <> Неопределено Тогда
			ТребуетсяПересчетПоИсходнымОрганизациям = Истина;
		КонецЕсли;
		
		ДатыПересчетаПоОрганизациям.Вставить(Выборка.Организация, Выборка.Месяц);
		СамаяРанняяДатаПересчета = Мин(СамаяРанняяДатаПересчета, Выборка.Месяц);
		
	КонецЦикла;
	
	// Соберем статистику изменения документов - для понимания интенсивности изменения документов "задним числом".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ) КАК Месяц,
	|	Задания.Организация КАК Организация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задания.Документ) КАК ИзмененоДокументов
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Задания.Организация = Организации.Ссылка
	|ГДЕ
	|	Задания.Документ <> НЕОПРЕДЕЛЕНО
	|	И НАЧАЛОПЕРИОДА(Задания.Месяц, МЕСЯЦ) <= &Дата
	|	И НЕ Организации.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА НЕ &ИспользоватьУправленческуюОрганизацию
	|					И Организации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(Задания.Месяц, МЕСЯЦ),
	|	Задания.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Месяц,
	|	Организация";
	
	ТаблицаИзмененныхДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаИзмененныхДокументов.Индексы.Добавить("Месяц, Организация");
	
	// Добавим в схему расчета строки для каждого периода, начиная с самого раннего и до рассчитываемого периода.
	ОбрабатываемаяДата = СамаяРанняяДатаПересчета;
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ДобавитьСтрокуСхемыРасчетаПартий(
			СхемаРасчета,
			ОбрабатываемаяДата,
			?(ОбрабатываемаяДата = Дата, ПолныйМассивОрганизаций, Новый Массив));
		
		ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
		
	КонецЦикла;
	
	// Заполним итеративно организации для перерасчета.
	ОбрабатываемаяДата = Макс(СамаяРанняяДатаПересчета, Дата);
	
	Пока ОбрабатываемаяДата <= Дата Цикл
		
		ТекущаяСтрока    = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
		ПредыдущаяСтрока = СхемаРасчета.Найти(НачалоМесяца(ОбрабатываемаяДата) - 1, "Дата");
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			
			ПоявилисьИзмененияВМассивеОрганизаций = Ложь;
			
			// Организации, которые пересчитывались в прошлом периоде, надо пересчитать и в текущем.
			Для Каждого ПредыдущаяОрганизация Из ПредыдущаяСтрока.Организации Цикл
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(ТекущаяСтрока.Организации, ПредыдущаяОрганизация) Тогда
					ПоявилисьИзмененияВМассивеОрганизаций = Истина;
				КонецЕсли;
			КонецЦикла;
			
			// Дополним массив рассчитываемых организаций связанными с ними организациями.
			Если ПоявилисьИзмененияВМассивеОрганизаций Тогда
				ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			КонецЕсли;
			
		КонецЕсли;
		
		ИзмененнаяОбрабатываемаяДата = ОбрабатываемаяДата;
		
		// Проверим необходимость пересчета организаций текущего периода в более ранних периодах.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			ДатаПересчетаПоОрганизации = ДатыПересчетаПоОрганизациям[ТекущаяОрганизация];
			
			Если ЗначениеЗаполнено(ДатаПересчетаПоОрганизации) И ДатаПересчетаПоОрганизации < ОбрабатываемаяДата Тогда
				
				СтрокаПоДатеОрганизации = СхемаРасчета.Найти(ДатаПересчетаПоОрганизации, "Дата");
				
				Если ОбщегоНазначенияУТКлиентСервер.ДобавитьНовоеЗначениеВМассив(СтрокаПоДатеОрганизации.Организации, ТекущаяОрганизация) Тогда
					// Такая организация в том периоде еще не была отобрана для пересчета.
					ИзмененнаяОбрабатываемаяДата = Мин(ИзмененнаяОбрабатываемаяДата, ДатаПересчетаПоОрганизации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененнаяОбрабатываемаяДата < ОбрабатываемаяДата Тогда
			
			// Следующий цикл начнем с самого раннего измененного прошлого периода.
			ОбрабатываемаяДата = ИзмененнаяОбрабатываемаяДата;
			
			// Дополним в нем массив рассчитываемых организаций связанными с ними организациями.
			ТекущаяСтрока = СхемаРасчета.Найти(ОбрабатываемаяДата, "Дата");
			ТекущаяСтрока.Организации = СвязиОрганизацийПоСхемеИнтеркампани(ТекущаяСтрока.Дата, ТекущаяСтрока.Организации);
			
		Иначе
			
			// В прошлых периодах ничего не поменялось - переходим к следующему периоду.
			ОбрабатываемаяДата = КонецМесяца(КонецМесяца(ОбрабатываемаяДата) + 1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пока СхемаРасчета.Количество() > 0 И СхемаРасчета[0].Организации.Количество() = 0 Цикл
		// Удалим строки ранних периодов, в которых нет организаций для пересчета.
		СхемаРасчета.Удалить(0);
	КонецЦикла;
	
	Если СхемаРасчета.Количество() > 0 И ЗначениеЗаполнено(МассивОрганизаций) Тогда
		
		// Если в составленную схему расчета (по И)
		// - не попала ни одна организация, не входящая исходный отбор (с учетом Интеркампани)
		// - по самим организациям, входящим с исходный отбор, пересчет не требуется
		// то выполнять расчет не требуется.
		ПересечениеМассивов = ОбщегоНазначенияУТКлиентСервер.ПересечениеМассивов(
			ПолныйМассивОрганизаций,
			СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
		
		Если ПересечениеМассивов.Количество() = ПолныйМассивОрганизаций.Количество() // только организации из исходного отбора
		 И НЕ ТребуетсяПересчетПоИсходнымОрганизациям Тогда // пересчет по этим организациям не требуется
			
			СхемаРасчета.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для Каждого ТекущаяСтрока Из СхемаРасчета Цикл
		
		// Сформируем строковые представления пересчитываемых организаций.
		СписокОрганизаций.ЗагрузитьЗначения(ТекущаяСтрока.Организации);
		СписокОрганизаций.СортироватьПоЗначению();
		
		ТекущаяСтрока.Организации 			   = СписокОрганизаций.ВыгрузитьЗначения();
		ТекущаяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(ТекущаяСтрока.Организации);
		ТекущаяСтрока.ИзмененоДокументов	   = 0;
		
		// Заполним статистику изменения документов за период по массиву организаций.
		Для Каждого ТекущаяОрганизация Из ТекущаяСтрока.Организации Цикл
			
			СтрокиДокументов = ТаблицаИзмененныхДокументов.НайтиСтроки(
				Новый Структура("Месяц, Организация", ТекущаяСтрока.Дата, ТекущаяОрганизация));
				
			Если СтрокиДокументов.Количество() = 1 Тогда
				ТекущаяСтрока.ИзмененоДокументов = ТекущаяСтрока.ИзмененоДокументов + СтрокиДокументов[0].ИзмененоДокументов;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Исключим из схемы расчета периоды, в которых учет себестоимости не ведется.
	Пока СхемаРасчета.Количество() > 0
	 И НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(НачалоМесяца(СхемаРасчета[0].Дата)) Цикл
		
		РегистрыСведений.ЗаданияКРасчетуСебестоимости.ОчиститьЗаписиЗаПериод(
			НачалоМесяца(СхемаРасчета[0].Дата),
			КонецМесяца(СхемаРасчета[0].Дата),
			СхемаРасчета[0].Организации);
		
		СхемаРасчета.Удалить(0);
		
	КонецЦикла;
	
	Если НомерЗаданияДляБлокировки <> Неопределено И СхемаРасчета.Количество() > 0 Тогда
		// Установим блокировки по дополнительным организациям для пересчета, добавленным при построении схемы расчета.
		ЗаблокироватьРегистрЗаданий(НомерЗаданияДляБлокировки, СхемаРасчета[СхемаРасчета.Количество() - 1].Организации);
	КонецЕсли;
	
	Возврат СхемаРасчета;
	
КонецФункции

Процедура ДобавитьСтрокуСхемыРасчетаПартий(СхемаРасчета, Дата, МассивОрганизаций, ЗаполнятьПредставление = Ложь) Экспорт
	
	НоваяСтрока = СхемаРасчета.Добавить();
	НоваяСтрока.Дата = КонецМесяца(Дата);
	НоваяСтрока.Организации = ОбщегоНазначения.СкопироватьРекурсивно(МассивОрганизаций);
	
	Если ЗаполнятьПредставление Тогда
		НоваяСтрока.ПредставлениеОрганизаций = ПредставлениеОрганизаций(НоваяСтрока.Организации);
	КонецЕсли;
	
КонецПроцедуры

	
// Возвращает увеличенный перед началом расчета номер задания к расчету.
//
// Возвращаемое значение:
//	Число -
//
Функция УвеличитьНомерЗаданияКРасчетуСебестоимости() Экспорт
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуСебестоимости.УвеличитьНомерЗадания();
	
	Возврат НомерЗадания;
	
КонецФункции

// Устанавливает признак окончания расчета партий в указанном периоде.
//
Процедура УвеличитьПериодРасчетаСебестоимости(РассчитанныйПериод, МассивОрганизаций, ВременныеТаблицы, ПараметрыРасчета = Неопределено) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачалоПериодаРасчета(РассчитанныйПериод, МассивОрганизаций) < НачалоМесяца(РассчитанныйПериод)
	 И (ПараметрыРасчета = Неопределено ИЛИ НЕ ПараметрыРасчета.Отладка.ОтключитьРасчетСебестоимостиВПрошлыхПериодах) Тогда
		Возврат; // есть более ранние нерассчитанные периоды
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ЗаданияКОчистке
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|ГДЕ
	|	ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&СледующийМесяц КАК Месяц,
	|	МАКСИМУМ(ЗаданияКОчистке.НомерЗадания) КАК НомерЗадания,
	|	ЗаданияКОчистке.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Документ
	|ПОМЕСТИТЬ НовыеГраницы
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданияКОчистке.Организация 
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗаданияВрем
	|ИЗ
	|	ИсходныеЗадания КАК ИсходныеЗадания
	|	
	|ГДЕ
	|	НЕ (ИсходныеЗадания.Месяц МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|;
	|////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеЗадания.Месяц,
	|	ИсходныеЗадания.НомерЗадания,
	|	ИсходныеЗадания.Организация,
	|	ИсходныеЗадания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	ИсходныеЗаданияВрем КАК ИсходныеЗадания
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияКОчистке.Месяц,
	|	ЗаданияКОчистке.НомерЗадания,
	|	ЗаданияКОчистке.Организация,
	|	ЗаданияКОчистке.Документ
	|ИЗ
	|	ЗаданияКОчистке КАК ЗаданияКОчистке
	|;
	|////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеГраницы.Месяц КАК Месяц,
	|	НовыеГраницы.НомерЗадания КАК НомерЗадания,
	|	НовыеГраницы.Организация КАК Организация,
	|	НовыеГраницы.Документ КАК Документ
	|ИЗ
	|	НовыеГраницы КАК НовыеГраницы
	|");
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("КонецПериода",      КонецМесяца(РассчитанныйПериод));
	Запрос.УстановитьПараметр("СледующийМесяц",    КонецМесяца(РассчитанныйПериод) + 1);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результаты = Запрос.ВыполнитьПакет(); 
	
	НачатьТранзакцию();
	
	Попытка
		
		// Очистим рассчитанные периоды.
		Выборка = Результаты.Получить(5).Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			Набор.Записать(Истина);
		КонецЦикла;
		
		// Сдвинем период расчета.
		Выборка = Результаты.Получить(6).Выбрать();
		Пока Выборка.Следующий() Цикл
			Набор = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			Набор.Отбор.Месяц.Установить(Выборка.Месяц);
			Набор.Отбор.НомерЗадания.Установить(Выборка.НомерЗадания);
			Набор.Отбор.Организация.Установить(Выборка.Организация);
			Набор.Отбор.Документ.Установить(Выборка.Документ);
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отметить период %1 как рассчитанный по причине:
				|		%2';
				|en = 'Cannot mark the %1 period as calculated. Reason:
				|		%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
			РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(РассчитанныйПериод),	
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Если ПараметрыРасчета = Неопределено Тогда
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОшибкиДляЖурналаРегистрации(ПараметрыРасчета), 
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
		Иначе
			РасчетСебестоимостиПротоколРасчета.ЗафиксироватьОшибкуРасчета(
				ПараметрыРасчета,
				Перечисления.ТипыОшибокПартионногоУчетаИСебестоимости.ОшибкаВыполненияРегламентныхОпераций,
				ТекстСообщения,
				ТекстСообщения);
		КонецЕсли;
		
	КонецПопытки;
	
	УничтожитьВременныеТаблицы(ВременныеТаблицы, "ЗаданияКОчистке, НовыеГраницы, ИсходныеЗаданияВрем");
	
КонецПроцедуры

//++ НЕ УТ

// Формирует задания к расчету стоимости ОС и НМА, если была изменена сумма расходов, которая распределяется на ОС и НМА.
//
Процедура СформироватьЗаданияКРасчетуСтоимостиВНА(ПараметрыРасчета)

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.РасчетныйПериод.НачалоПериода) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период КАК Период,
	|	Таблица.Организация КАК Организация,
	|	Таблица.АналитикаРасходов КАК ОбъектУчета,
	|	Таблица.Регистратор КАК Документ
	|ПОМЕСТИТЬ ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИзменений.Период КАК Период,
	|		ТаблицаИзменений.Регистратор КАК Регистратор,
	|		ТаблицаИзменений.Организация КАК Организация,
	|		ТаблицаИзменений.Подразделение КАК Подразделение,
	|		ТаблицаИзменений.СтатьяРасходов КАК СтатьяРасходов,
	|		ТаблицаИзменений.АналитикаРасходов КАК АналитикаРасходов,
	|		ТаблицаИзменений.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ТаблицаИзменений.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ТаблицаИзменений.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ТаблицаИзменений.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ТаблицаИзменений.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПостояннаяРазница,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА ТаблицаИзменений.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы КАК ТаблицаИзменений
	|	ГДЕ
	|		ТаблицаИзменений.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТаблицаИзменений.Организация В(&МассивОрганизаций)
	|		И (ТаблицаИзменений.РасчетПартий
	|				ИЛИ ТаблицаИзменений.РасчетСебестоимости)
	|		И (ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
	|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|		И ТаблицаИзменений.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТКэш.Регистратор
	|				ИЗ
	|					ВТКэшИзмененныеДокументы КАК ВТКэш)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаИзменений.Период,
	|		ТаблицаИзменений.Регистратор,
	|		ТаблицаИзменений.Организация,
	|		ТаблицаИзменений.Подразделение,
	|		ТаблицаИзменений.СтатьяРасходов,
	|		ТаблицаИзменений.АналитикаРасходов,
	|		ТаблицаИзменений.НаправлениеДеятельности,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА -ТаблицаИзменений.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА -ТаблицаИзменений.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА -ТаблицаИзменений.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА -ТаблицаИзменений.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ТОГДА -ТаблицаИзменений.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВТКэшПрочиеРасходы КАК ТаблицаИзменений
	|	ГДЕ
	|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|				ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
	|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
	|		И ТаблицаИзменений.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТКэш.Регистратор
	|				ИЗ
	|					ВТКэшИзмененныеДокументы КАК ВТКэш)
	|
	|	И &ТекстЗапросаДвиженияРаспределенияНДС
	|) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Период,
	|	Таблица.Регистратор,
	|	Таблица.Подразделение,
	|	Таблица.СтатьяРасходов,
	|	Таблица.Организация,
	|	Таблица.АналитикаРасходов,
	|	Таблица.НаправлениеДеятельности
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Таблица.Сумма) <> 0
	|		ИЛИ СУММА(Таблица.СуммаБезНДС) <> 0
	|		ИЛИ СУММА(Таблица.СуммаРегл) <> 0
	|		ИЛИ СУММА(Таблица.ПостояннаяРазница) <> 0
	|		ИЛИ СУММА(Таблица.ВременнаяРазница) <> 0)";
	
	ПроверятьДвиженияРаспределенияНДС =
		ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДвиженияРаспределенияНДСПоПрочиеРасходыДоРасчета")
		И ВременнаяТаблицаСуществует(ПараметрыРасчета, "ВТДвиженияРаспределенияНДСПоПрочиеРасходыПослеРасчета");
	
	Если ПроверятьДвиженияРаспределенияНДС Тогда
		
		ТекстЗапросаДвиженияРаспределенияНДС = "
		|	ОБЪЕДИНИТЬ ВСЕ
		|" + "
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Период КАК Период,
		|		ТаблицаИзменений.Регистратор КАК Регистратор,
		|		ТаблицаИзменений.Организация КАК Организация,
		|		ТаблицаИзменений.Подразделение КАК Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов КАК СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов КАК АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Сумма,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаБезНДС,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК СуммаРегл,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ПостояннаяРазница,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ВременнаяРазница
		|	ИЗ
		|		ВТДвиженияРаспределенияНДСПоПрочиеРасходыДоРасчета КАК ТаблицаИзменений
		|	ГДЕ
		|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаИзменений.Период,
		|		ТаблицаИзменений.Регистратор,
		|		ТаблицаИзменений.Организация,
		|		ТаблицаИзменений.Подразделение,
		|		ТаблицаИзменений.СтатьяРасходов,
		|		ТаблицаИзменений.АналитикаРасходов,
		|		ТаблицаИзменений.НаправлениеДеятельности,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаБезНДС
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.СуммаРегл
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ПостояннаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|				ТОГДА -ТаблицаИзменений.ВременнаяРазница
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		ВТДвиженияРаспределенияНДСПоПрочиеРасходыПослеРасчета КАК ТаблицаИзменений
		|	ГДЕ
		|		(ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
		|			ИЛИ ТаблицаИзменений.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
		|		И ТаблицаИзменений.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
		|		И (ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
		|			ИЛИ ТаблицаИзменений.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))
		|";
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"И &ТекстЗапросаДвиженияРаспределенияНДС",
			ТекстЗапросаДвиженияРаспределенияНДС);
		
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"И &ТекстЗапросаДвиженияРаспределенияНДС",
			"");
	КонецЕсли;
	
	СуществующиеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Результат = Запрос.ВыполнитьПакет(); 
	Выборка = Результат.Получить(Результат.ВГраница()).Выбрать();
	Выборка.Следующий();
	
	ДанныеТаблиц = Новый Структура;
	ДанныеТаблиц.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	ДанныеТаблиц.Вставить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение", Выборка.Количество > 0);
	
	РасчетСтоимостиВНА.СформироватьЗадания(Неопределено, ДанныеТаблиц);
	
	НовыеВТ = ПолучитьПереченьСуществующихВременныхТаблиц(ПараметрыРасчета, СуществующиеВТ);
	
	УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, НовыеВТ);
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область ДействияСОбъектомСПерехватомСообщений

// Возвращает текст сообщений об ошибках, выданных при проверке заполнения объекта.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект - документ, для которого надо выполнить проверку заполнения.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений.
//
Функция ПроверитьЗаполнениеОбъектаСПерехватомСообщений(ПроверяемыйОбъект, ПрефиксСообщения = "") Экспорт
	
	ТекстСообщения = "";
	
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Если НЕ ПроверяемыйОбъект.ПроверитьЗаполнение() Тогда 

		ВсеСообщения = ПолучитьСообщенияПользователю(Истина);
		
		// Сообщения, выведенные при проверке заполнения объекта, сохраним в ТекстСообщения.
		Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
				|") + ПрефиксСообщения + ТекущееСообщение.Текст;
			
		КонецЦикла;
		
		// Вернем предыдущие сообщения в буфер сообщений.
		Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл
			
			ТекущееСообщение = ВсеСообщения[НомерСообщения];
			
			ТекущееСообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращает текст сообщений об ошибках, выданных при проведении документа.
//
// Параметры:
//	ПроводимыйДокумент - ДокументОбъект - документ, который надо провести.
//	ПрефиксСообщения - Строка - символы, которые надо вывести перед каждым сообщением об ошибке.
//
// Возвращаемое значение:
//	Строка - многострочный текст сообщений.
//
Функция ПровестиДокументСПерехватомСообщений(ПроводимыйДокумент, ПрефиксСообщения = "") Экспорт
	
	ТекстСообщения = "";
	БылиОшибки = Ложь;
	
	ПредыдущиеСообщения = ПолучитьСообщенияПользователю(Ложь);
	
	Попытка
		ПроводимыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		БылиОшибки = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если НЕ БылиОшибки Тогда
		Возврат ТекстСообщения;
	КонецЕсли;
	
	ВсеСообщения = ПолучитьСообщенияПользователю(Истина);
	
	// Сообщения, выведенные при проведении объекта, сохраним в ТекстСообщения.
	Для НомерСообщения = ПредыдущиеСообщения.Количество() По ВсеСообщения.Количество() - 1 Цикл
		
		ТекущееСообщение = ВсеСообщения[НомерСообщения];
		
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", "
			|") + ПрефиксСообщения + ТекущееСообщение.Текст;
		
	КонецЦикла;
	
	// Вернем предыдущие сообщения в буфер сообщений.
	Для НомерСообщения = 0 По ПредыдущиеСообщения.Количество() - 1 Цикл
		
		ТекущееСообщение = ВсеСообщения[НомерСообщения];
		
		ТекущееСообщение.Сообщить();
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

#КонецОбласти

#Область ВерсияПлатформы

// Проверяет, что используемая версия платформы не ниже указанной.
//
// Параметры:
//	Версия - Строка - номер версии Платформы
//
// Возвращаемое значение:
//	Булево - Истина, если используемая версия не младше указанной в параметре Версия
//
Функция ВерсияПлатформыНеНижеУказанной(Версия) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, Версия) >= 0);
	
КонецФункции

#КонецОбласти


#Область СостояниеОперацииЗакрытияМесяца

// Проверяет наличие движений по указанному регистру в расчетном периоде по рассчитываемым организациям.
//
// Возвращаемое значение:
//	Булево -
//
Функция ЕстьДвиженияПоРегиструНакопления(ИмяРегистра, ПериодРасчета, МассивОрганизаций, ИмяПоляОрганизации = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	Параметр1 КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Параметр2 В(&МассивОрганизаций)
	|	И Т.Активность
	|";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Параметр", "%");
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		"РегистрНакопления." + ИмяРегистра,
		?(ЗначениеЗаполнено(ИмяПоляОрганизации), ИмяПоляОрганизации, "Организация"));
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Проверяет наличие явных проблем в движениях по себестоимости товаров.
//
// Возвращаемое значение:
//	Булево -
//
Функция ЕстьНекорректныеДвиженияСебестоимости(ПериодРасчета, МассивОрганизаций) Экспорт
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодРасчета)) Тогда
		Возврат Ложь; // проверяем только движения партионного учета версии 2.2
	КонецЕсли;
	
	// В первичных движениях документов и в движениях, сформированных механизмом расчета партий, должен быть заполнен тип записи.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаписи
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.Активность
	|	И НЕ Т.РасчетСебестоимости
	|	И ТИПЗНАЧЕНИЯ(Т.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|	И Т.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	   НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  	   КонецМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции
	
// Выполняет проверку окончания обновления входящих и исходящих данных запущенного механизма расчета.
//
Процедура ПроверитьБлокировкуДанныхПриОбновленииИБ(ВыполняетсяРасчетСебестоимости, ПартионныйУчетВерсии22 = Неопределено, ПараметрыОтладки = Неопределено) Экспорт
	
	ПроверяемыеДанные = Новый Соответствие;
	ПроверяемыеДанные.Вставить(Метаданные.РегистрыСведений.ЗаданияКРасчетуСебестоимости, Истина);
	
	РасчетСебестоимостиКорректировкаСтоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
	РасчетСебестоимостиКорректировкаСтоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
	
	Если ВыполняетсяРасчетСебестоимости Тогда // выполняется механизм расчета себестоимости
		ПредставлениеОперации = РасчетСебестоимостиКорректировкаСтоимости.ТекущаяВерсияМеханизма();
	Иначе
		РасчетСебестоимости.ВходящиеДанныеМеханизма(ПроверяемыеДанные);
		РасчетСебестоимости.ИсходящиеДанныеМеханизма(ПроверяемыеДанные);
		ПредставлениеОперации = РасчетСебестоимости.ТекущаяВерсияМеханизма();
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьБлокировкуВходящихДанныхПриОбновленииИБ(ПроверяемыеДанные, ПредставлениеОперации);
	
КонецПроцедуры

// Проверяет наличие блокировки данных при отложенном обновлении ИБ.
// 
// Параметры:
//	ВходящиеДанные 		  - Соответствие
//							  Ключ - Строка, ОбъектМетаданныхКонфигурации - входящие данные, используемые  операцией
//							  Значение - ЛюбаяСсылка, Структура, Неопределено, Массив
// Возвращаемое значение:
//  Булево - Есть блокировка данных при обновлении ИБ
Функция ЕстьБлокировкаДанныхПриОбновленииИБ(ВходящиеДанные) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСОтборомПоСсылкам = Новый Массив;
	ОтборПоСсылкам 			= Новый Массив;
	
	ДанныеЗаблокированы = Ложь;
	
	УстановитьПривилегированныйРежим(Истина); // у текущего пользователя может не быть прав на все входящие данные, но проверить надо все
	
	Для Каждого ОписаниеДанных Из ВходящиеДанные Цикл
		
		ОбъектМетаданных = ОписаниеДанных.Ключ;
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
		КонецЕсли;
		
		Отбор = ?(ТипЗнч(ОписаниеДанных.Значение) = Тип("Булево"), Неопределено, ОписаниеДанных.Значение);
		
		Если (Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных)
		 И ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		 ИЛИ ТипЗнч(Отбор) = Тип("Структура") Тогда
			// Проверку независимых регистров сведений выполняем по одному,
			// т.к. для них нет единообразных отборов (по регистратору).
			// Аналогично и для других типов метаданных, если для них задан "сложный" отбор в виде структуры.
			Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ОбъектМетаданных, Отбор) Тогда
				Возврат Истина;
			КонецЕсли;
		Иначе
			ДанныеСОтборомПоСсылкам.Добавить(ОбъектМетаданных.ПолноеИмя());
			Если ТипЗнч(Отбор) = Тип("Массив") Тогда
				// Добавим отбор-массив этого объекта метаданных в общий массив отборов
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтборПоСсылкам, Отбор, Истина);
			ИначеЕсли Отбор <> Неопределено Тогда
				// Добавим отбор-ссылку этого объекта метаданных в общий массив отборов
				Если ОтборПоСсылкам.Найти(Отбор) = Неопределено Тогда
					ОтборПоСсылкам.Добавить(Отбор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеСОтборомПоСсылкам.Количество() > 0 Тогда
		
		Если ОтборПоСсылкам.Количество() = 0 Тогда
			ОтборПоСсылкам = Неопределено; // без отбора
		КонецЕсли;
		
		// Проверку всех объектов, для которых возможен отбор по ссылке/регистратору, выполним за один вызов.
		Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, ДанныеСОтборомПоСсылкам, ОтборПоСсылкам) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текущее состояние расчета себестоимости.
//
// Параметры:
//	ПериодРасчета - Дата - месяц расчета
//	ОтборОрганизации - Массив - организации, по которым надо получить состояние расчета.
//	ОбновитьТолькоОдинЭтап			  - ПеречислениеСсылка.ОперацииЗакрытияМесяца - экспресс-проверка состояния только указанного этапа
//										 при этом не проверяется определение состояния предшествующих этапов, влияющих на указанный этап
//
// Возвращаемое значение:
//	ПеречислениеСсылка.СостоянияОперацийЗакрытияМесяца - текущее состояние расчета.
//
Функция ТекущееСостояниеРасчета(ПериодРасчета, ОтборОрганизации, ОбновитьТолькоОдинЭтап = Неопределено) Экспорт
	
	Состояние = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		ПериодРасчета,
		ОтборОрганизации,
		НЕ ЗначениеЗаполнено(ОбновитьТолькоОдинЭтап),
		,
		ОбновитьТолькоОдинЭтап);
	
	Возврат Состояние;
	
КонецФункции

#КонецОбласти

#Область АнализСостоянияСистемы

// Заполняет проверки, выполняемые в рамках расчета партий и себестоимости.
//
// Параметры:
//	ТаблицаПроверок - см. АудитСостоянияСистемыПереопределяемый.ЗаполнитьПроверкиДляРегистрации
//
Процедура ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок) Экспорт
	
	// Исходные данные для расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ИсходныеДанныеДляРасчетаСебестоимости",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Корректность исходных данных для расчета себестоимости';
			|en = 'Source data accuracy for cost calculation'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Проверяются соблюдение следующих условий:
			|- в регистре ""Себестоимость товаров"" не должно быть отрицательных остатков по количеству;
			|- должны быть оформлены передачи товаров между организациями;
			|- должны быть оформлены отчеты комитенту о списании;
			|- должны быть оформлены поступления работ в подразделения.';
			|en = 'Checked whether the following conditions are fulfilled:
			|- There should not be negative quantity balance in the ""Inventory cost"" register
			|- ""Customer invoices — Intercompany"" must be registered
			|- Vendor consignment stock adjustments should be registered
			|- Work receipts to business units should be registered.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	//++ НЕ УТ

	// Указание возвратных отходов в материалах в производственных документах.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"УказаниеВозвратныхОтходовВМатериалах",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаИспользованияВозвратныхОтходовВМатериалах",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Указание возвратных отходов в материалах в производственных документах';
			|en = 'Specification of recyclable waste in materials in production documents'"),
		НСтр("ru = 'Проверяется отсутствие статей калькуляции с типом затрат ""Возвратные отходы"" в таблице материалов в производственных документах.
		|Для таких документов распределение материалов на выпущенную продукцию может быть выполнено некорректно.';
		|en = 'Checking for absence of product cost elements with the ""Recyclable waste"" expense type in the table of materials in production documents.
		|Allocation of materials for released manufactured products may be performed incorrectly for such documents.'"));
	//-- НЕ УТ
	
	// Поступление товаров в пути.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ПоступлениеТоваровВПути",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаПоступленийТоваровВПути",
		Перечисления.ВажностьПроблемыУчета.Информация);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Проверка превышения остатков товаров в пути';
			|en = 'Check of exceeding balance of the goods in transit'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Поступление товаров в пути не должно превышать остатки этих товаров.';
			|en = 'The receipt of goods in transit cannot exceed the balance of these goods.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Остатки в оперативных регистрах и регистре себестоимости.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"СоответствиеОперативногоУчетаИСебестоимости",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаСоответствияОперативногоУчетаИСебестоимости",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Соответствие остатков по количеству в оперативном учете и учете себестоимости';
			|en = 'Correspondence of the balance quantity in the operational accounting and cost accounting'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В оперативном учете и учете себестоимости остатки по количеству должны быть идентичны.';
			|en = 'Balances must be identical by quantity in the operational accounting and cost accounting.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Результаты расчета.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"СоответствиеСуммИКоличества",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаСоответствияСуммИКоличества",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Соответствие остатков сумм и остатков по количеству в регистре ""Себестоимость товаров""';
			|en = 'Correspondence of amount balance and quantity balance in the ""Inventory cost"" register'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В регистре ""Себестоимость товаров"" не должно быть
		|- ненулевых остатков по суммам (упр. и регл.) при нулевом остатке по количеству;
		|- разных знаков у остатков по суммам (упр. и регл.) и остатка по количеству.';
		|en = 'In the ""Inventory cost"" register, there should not be 
		|- Non-zero amount balance (manag. and local) with zero quantity balance
		|- Different characters in amount balance (manag. and local) and quantity balance.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	// Сверка количества в регистрах ВыручкаИСебестоимостьПродаж и СебестоимостьТоваров
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"СверкаКоличестваВРНВыручкаИСебестоимостьПродажИСебестоимостьТоваров",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.СверкаКоличестваВРНВыручкаИСебестоимостьПродажИСебестоимостьТоваров",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Сверка количества в регистрах ""Выручка и себестоимость продаж"" и ""Себестоимость товаров""';
			|en = 'Reconciliation of the quantity in the ""Revenue and COGS"" and ""Inventory cost"" registers'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В регистрах ""Выручка и себестоимость продаж"" и ""Себестоимость товаров""
		|Для документов ""Возврат товаров от клиента"", количество между регистрами должно сходится, кроме: 
		|	- Многооборотная тара не отражается в выручке если отражается возврат многооборотной тары.
		|	- Услуга не отображается в себестоимости.';
		|en = 'In the ""Revenue and COGS"" and ""Inventory cost"" registers
		|for the ""Sales return"" documents, the quantity between the registers must be the same, except for: 
		|	- Reusable packaging is not recorded in revenue if reusable packaging return is recorded.
		|	- Service is not shown in the cost.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	// Нераспределенные затраты.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЗатратыНеРаспределенныеНаСебестоимость",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаЗатратНеРаспределенныхНаСебестоимость",
		Перечисления.ВажностьПроблемыУчета.ПолезныйСовет);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие остатков затрат, не распределенных на себестоимость.';
			|en = 'There are remaining costs that are not allocated to cost.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В регистре ""Партии прочих расходов"" не должно быть остатков по статьям расходов с вариантом распределения расходов ""На себестоимость товаров"".';
			|en = 'The ""Material overheads for allocation"" register must not contain balances for expense items with the ""To inventory cost"" expense allocation option.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	//++ НЕ УТ
			
	// Нераспределенные по правилам затраты по документам "Распределение материалов и работ"".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЗатратыНеРаспределенныеПоПравилам",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаЗатратНеРаспределенныхПоПравилам",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие остатков затрат, не распределенных по правилам.';
			|en = 'There are remaining costs that are not allocated by rules.'"),
		НСтр("ru = 'Движения документов ""Распределение материалов и работ"" по регистру ""Себестоимость товаров"" должны соответствовать движениям по регистру ""Товары организаций"".';
			|en = 'Records of the ""Backflush of materials and works"" documents of the ""Inventory cost"" register must match the ""Company goods"" register records.'"));
		
	// Нераспределенные по правилам возвратные отходы по документам "Распределение возвратных отходов"".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ВозвратныеОтходыНеРаспределенныеПоПравилам",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаВозвратныхОтходовНеРаспределенныхПоПравилам",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие возвратных отходов, не распределенных по правилам.';
			|en = 'There are recyclable wastes that are not allocated by rules.'"),
		НСтр("ru = 'В движениях документов ""Распределение возвратных отходов"" по регистру ""Себестоимость товаров"" должно быть отражено количество возвратных отходов, распределенных по правилам.';
			|en = 'The ""Inventory cost"" register records of the ""Recyclable waste allocation"" documents must reflect the quantity of recyclable waste allocated according to the rules.'"));
		
	// Проверка распределения резервов.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"РаспределениеРезервовПредстоящихРасходов",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаРаспределенияРезервовПредстоящихРасходов",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Корректность распределения резервов предстоящих расходов.';
			|en = 'Accuracy of allocating provisions and contingent liabilities.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Постатейные расходы должны быть погашены из резерва, а в части превышения - распределены на себестоимость или финансовый результат.';
			|en = 'Itemized expenses should be repaid from reserve and if they exceed it - allocated to cost or financial result.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	//-- НЕ УТ
	
	// Нерассчитанные партии.
	// Технологическая проверка для автотестов, см. технологический параметр "ПроверятьЗаписиСПризнакомРасчетНеЗавершен".
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ЗаписиСПризнакомРасчетНеЗавершен",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаЗаписейСПризнакомРасчетНеЗавершен",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ОписаниеПроверки.ВозможноИзменениеВажности = Истина;
	
	 Шаблон1 = НСтр("ru = 'В регистрах, обслуживаемых механизмом партионного учета, для всех расчетных движений должна быть подобрана партия.
			|В некоторых случаях партии (полностью или частично) подобрать не удается,
			|из-за чего после расчета могут диагностироваться ошибки вида ""Есть суммовой остаток без остатка по количеству"".
			|Причина проблемы может заключаться как в ошибочных данных в информационной базе, так и в алгоритмах выборки/расчета партий.
			|В результате по окончании расчета остаются записи с признаком %Парам1% = Ложь (в регистрах накопления он преобразуется в %Парам2% = Истина).
			|Универсального способа исправления данной проблемы нет - в каждом случае надо анализировать причины в контексте конкретной информационной базы.';
			|en = 'Pick a batch for all calculated records in the registers managed by batch accounting.
			|Sometimes batches cannot be picked (totally or partially)
			|which can result in calculation errors of the following kind: ""There is a value balance without the quantity balance"".
			|The reason of this problem can be incorrect data in the infobase and in the batch filter/calculation algorithms.
			|As a result, after the calculation is complete, there are records with the %Парам1% = False flag (in accumulation registers it is converted to %Парам2% = True).
			|There is no general way to correct this issue; in each case consider the scope of the specified infobase to analyze the reason.'", ОбщегоНазначения.КодОсновногоЯзыка());

	 Шаблон1 = СтрЗаменить(Шаблон1, "%Парам1%", "РасчетЗавершен");
	 Шаблон1 = СтрЗаменить(Шаблон1, "%Парам2%", "РасчетНеЗавершен");
	 
	 ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие движений, для которых не удалось подобрать партии.';
			|en = 'There are records for which no lots can be picked.'", ОбщегоНазначения.КодОсновногоЯзыка()), Шаблон1);
		
	//++ НЕ УТ
		
	// Остатки в незавершенном производстве.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"ОстаткиВНезавершенномПроизводстве",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаОстатковВНезавершенномПроизводстве",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие остатков в незавершенном производстве для завершенных партий.';
			|en = 'There is stock balance in work-in-progress for finished lots.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В регистрах ""Себестоимость товаров"", ""Прочие расходы незавершенного производства"", ""Трудозатраты незавершенного производства"" не должно быть остатков по завершенным партиям производства.';
			|en = 'Registers ""Inventory cost"", ""Other WIP expenses"", ""WIP labor costs"" must not contain balances for finished production lots.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	// Нераспределенные постатейные расходы.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеПостатейныеРасходы",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаНераспределенныхПостатейныхРасходов",
		Перечисления.ВажностьПроблемыУчета.Ошибка);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие некорректно распределенных постатейных расходов.';
			|en = 'There are itemized expenses allocated incorrectly.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В результате распределения постатейных расходов возникли ошибки. 
			|По регистру накопления ""Прочие расходы"" остатки по постатейному расходу не равны 0, при условии, что движения по распределению сформированы.';
			|en = 'Errors occurred after distribution of itemized expenses.
			|Itemized expense balance in the Other expenses accumulation register is not equal to 0 if allocation records are generated.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
	// Нераспределенные постатейные расходы (предупреджение).
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеПостатейныеРасходыБезДокументов",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ДоИПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаНераспределенныхПостатейныхРасходовБезДокументов",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие не распределенных постатейных расходов.';
			|en = 'There are unallocated itemized expenses.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Постатейные производственные расходы не распределены. 
			|По регистру накопления ""Прочие расходы"" остатки по постатейному расходу не равны 0 и отсутствует документ распределения расходов.';
			|en = 'Itemized production expenses are not allocated. 
			|Itemized expense balance in the Other expenses accumulation register is not equal to 0 and the expense allocation document is missing.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ
	
	// Нераспределенные постатейные расходы на продажу (предупреждение).
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеПостатейныеРасходыНаПродажу",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаНераспределенныхПостатейныхРасходовНаПродажу",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие некорректно распределенных постатейных расходов на продажу.';
			|en = 'There are itemized sales expenses allocated incorrectly.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'В результате распределения часть постатейных расходов на продажу не была распределена. 
			|По регистру накопления ""Прочие расходы"" остатки по не равны 0.';
			|en = 'Some itemized sales expenses were not allocated during the allocation. 
			|By the Other expenses accumulation register, balance is not equal to 0.'", ОбщегоНазначения.КодОсновногоЯзыка()));

	// Нераспределенные расходы по интеркампани (предупреждение).
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"НераспределенныеРасходыИнтеркампани",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаНераспределенныхПостатейныхРасходовИнтеркампани",
		Перечисления.ВажностьПроблемыУчета.Предупреждение);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие нераспределенных постатейных расходов по объектам другой организации.';
			|en = 'Availability of unallocated itemized expenses by objects of another company.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Часть постатейных расходов не распределена в регламентированном учете, 
			|т.к. организация объекта аналитики расходов не совпадает с организацией, в которой расход зарегистрирован.';
			|en = 'Some itemized expenses are not allocated in local accounting, 
			|as the company of the expense dimension object does not match the company where the expense is registered.'", ОбщегоНазначения.КодОсновногоЯзыка()));

	// Аналитики с переполнением поля при расчете системы линейных уравнений.
	ОписаниеПроверки = ЗакрытиеМесяцаСервер.ДобавитьОписаниеНовойПроверки(ТаблицаПроверок,
		"АналитикиСПереполнениемПолей",
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		Перечисления.МоментЗапускаПроверкиОперацииЗакрытияМесяца.ПослеРасчета,
		"РасчетСебестоимостиПрикладныеАлгоритмы.ПроверкаАналитикСПереполнениемПолей",
		Перечисления.ВажностьПроблемыУчета.Информация);
	
	ЗакрытиеМесяцаСервер.ЗаполнитьПредставлениеНовойПроверки(ОписаниеПроверки,
		НСтр("ru = 'Наличие аналитик с нерассчитанной стоимостью.';
			|en = 'Availability of dimensions with not calculated cost.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		НСтр("ru = 'Стоимость некоторых аналитик номенклатуры не может быть рассчитана при решении СЛУ. 
			|Возможные причины: превышение расходов над приходами и начальными остатками или зацикливание движений.';
			|en = 'The cost of some item dimensions can not be calculated when solving LES.
			|Possible causes: consumption exceeding receipts and beginning inventories or looping records.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	РасчетСебестоимостиПодготовкаДанныхЛокализация.ЗаполнитьПроверкиДляРегистрации(ТаблицаПроверок);
		
КонецПроцедуры

#Область ПроцедурыПроверкиПартионногоУчетаИСебестоимости

// Процедура-обработчик проверки состояния системы "ИсходныеДанныеДляРасчетаСебестоимости".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаКорректностиИсходныхДанныхДляРасчетаСебестоимости(ПараметрыПроверки) Экспорт
	
	ПериодРасчета = ПараметрыПроверки.ДополнительныеПараметры.НачалоПериода;
	
	ОрганизацииСДвижениямиПоСебестоимости = РасчетСебестоимостиПрикладныеАлгоритмы.ОрганизацииСДвижениямиПоСебестоимости(
		ПериодРасчета,
		ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	
	// Проверки до расчета не выполняются:
	// - при предварительном закрытии месяца
	// - при выключенном учете себестоимости
	// - при отсутствии движений по себестоимости в текущем периоде.
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие
	 ИЛИ НЕ РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(НачалоМесяца(ПериодРасчета))
	 ИЛИ НЕ ЗначениеЗаполнено(ОрганизацииСДвижениямиПоСебестоимости) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстОрганизацииКРасчетуСебестоимости());
	ТекстыЗапроса.Добавить(ТекстЗапросаВозвратныеОтходы());
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ КПередачеНаНачалоПериода
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПредыдущегоПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ПроданныеТовары.ВидЗапасовПродавца,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ПроданныеТовары.КоличествоОстаток
	|ПОМЕСТИТЬ ТоварыПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(&ГраницаКонецПериода,
	|		ОрганизацияВладелец В (&МассивОрганизаций)
	|	) КАК ПроданныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасовПродавца
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПроданныеТовары.ОрганизацияВладелец            	  КАК ОрганизацияПродавец,
	|	ВидыЗапасов.Организация 					   	  КАК ОрганизацияПолучатель,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры     	  КАК АналитикаУчетаНоменклатуры,
	|	СУММА(ПроданныеТовары.КоличествоОстаток
	|	- ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0)) КАК Количество,
	|	ВидыЗапасов.ВидЗапасовВладельца				   	  КАК ВидЗапасовПродавца,
	|	ВидыЗапасов.Ссылка							   	  КАК ВидЗапасовПолучателя
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ТоварыПредварительная КАК ПроданныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО ПроданныеТовары.ВидЗапасовПродавца = ВидыЗапасов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ КПередачеНаНачалоПериода КАК НаНачалоПериода
	|		ПО НаНачалоПериода.ОрганизацияВладелец = ПроданныеТовары.ОрганизацияВладелец
	|		И НаНачалоПериода.ВидЗапасовПродавца = ПроданныеТовары.ВидЗапасовПродавца
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|		И НаНачалоПериода.АналитикаУчетаНоменклатуры = ПроданныеТовары.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И (ПроданныеТовары.КоличествоОстаток - ЕСТЬNULL(НаНачалоПериода.КоличествоОстаток, 0) <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроданныеТовары.ОрганизацияВладелец,
	|	ВидыЗапасов.Организация,
	|	ПроданныеТовары.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасовВладельца,
	|	ВидыЗапасов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПродавец КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПродавца КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтНетПередачТоваров
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Товары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Товары.ОрганизацияПолучатель КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|	Товары.ВидЗапасовПолучателя КАК ВидЗапасов,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	СписанныеТовары.ВидЗапасов,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	СписанныеТовары.КоличествоСписаноОстаток
	|ПОМЕСТИТЬ ВтНетОтчетовОСписанииПредварительная
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&ГраницаКонецПериода) КАК СписанныеТовары
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЗапасов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.Организация 						КАК Организация,
	|	ВидыЗапасов.ВладелецТовара 						КАК Владелец,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|	СУММА(СписанныеТовары.КоличествоСписаноОстаток) КАК Количество,
	|	ВидыЗапасов.Ссылка								КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтНетОтчетовОСписании
	|ИЗ
	|	ВтНетОтчетовОСписанииПредварительная КАК СписанныеТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО СписанныеТовары.ВидЗапасов = ВидыЗапасов.Ссылка
	|ГДЕ
	|	ВидыЗапасов.Организация В (&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыЗапасов.Организация,
	|	ВидыЗапасов.ВладелецТовара,
	|	СписанныеТовары.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНетОтчетовОСписанииПредварительная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 		КАК Организация,
	|	Остатки.Номенклатура 		КАК Номенклатура,
	|	Остатки.Характеристика 		КАК Характеристика,
	|	Остатки.Серия 				КАК Серия,
	|	Остатки.Назначение 			КАК Назначение,
	|	Остатки.Подразделение 		КАК Подразделение,
	|	Остатки.КоличествоОстаток 	КАК Количество
	|ПОМЕСТИТЬ ВтРаботыОстатки
	|ИЗ
	|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Остатки
	|ГДЕ
	|	НЕ &ПартионныйУчетВерсии22
	|	И Остатки.КоличествоОстаток < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Остатки.Организация 	КАК Организация,
	|	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	Остатки.Количество 		КАК Количество
	|ПОМЕСТИТЬ ВтРаботы
	|ИЗ
	|	ВтРаботыОстатки КАК Остатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Остатки.Номенклатура
	|		И Аналитика.Характеристика = Остатки.Характеристика
	|		И Аналитика.Серия = Остатки.Серия
	|		И Аналитика.Назначение = Остатки.Назначение
	|		И Аналитика.МестоХранения = Остатки.Подразделение
	//++ НЕ УТ 
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	//-- НЕ УТ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Остатки.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтРаботыОстатки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.КоличествоОстаток
	|ПОМЕСТИТЬ СебестоимостьТоваровОстатки
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)) КАК Т
	//++ НЕ УТ
	|ГДЕ
	|	Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	//-- НЕ УТ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	РазделУчета,
	|	ВидЗапасов,
	|	Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таб.РазделУчета		  			КАК РазделУчета,
	|	Таб.ВидЗапасов		  			КАК ВидЗапасов,
	|	Таб.Организация		  			КАК Организация,
	|	Таб.АналитикаУчетаНоменклатуры 	КАК АналитикаУчетаНоменклатуры,
	|	СУММА(Таб.Количество) 			КАК Количество
	|ПОМЕСТИТЬ ВТОтрицательныеОстатки
	|ИЗ (
	|	ВЫБРАТЬ
	|		Т.РазделУчета 				 КАК РазделУчета,
	|		ВЫБОР
	|			КОГДА Аналитика.ТипМестаХранения В(
	|					ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Подразделение),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			ИНАЧЕ Т.ВидЗапасов
	|		КОНЕЦ 						 КАК ВидЗапасов,
	|		Т.Организация 				 КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.КоличествоОстаток 		 КАК Количество
	|	ИЗ
	|		СебестоимостьТоваровОстатки КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|			ПО Т.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО СпрНоменклатура.Ссылка = Аналитика.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВозвратныеОтходы КАК Отходы
	|			ПО Т.АналитикаУчетаНоменклатуры  = Отходы.АналитикаУчетаНоменклатуры
	|			И Т.РазделУчета 				 = Отходы.РазделУчета
	|			И Т.ВидЗапасов 				 	 = Отходы.ВидЗапасов
	|			И Т.Организация 				 = Отходы.Организация
	|	ГДЕ
	|		НЕ Т.РазделУчета В (
	|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки),
	|			ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути))
	|		И Отходы.АналитикаУчетаНоменклатуры ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Т.РазделУчета                КАК РазделУчета,
	|		Т.ВидЗапасов                 КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|				Т.Количество
	|			ИНАЧЕ
	|				-Т.Количество
	|		КОНЕЦ                        КАК Количество
	|	ИЗ
	|		ВтНетПередачТоваров КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КАК РазделУчета,
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.Количество                 КАК Количество
	|	ИЗ
	|		ВтНетОтчетовОСписании КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|		Т.Организация                КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		-Т.Количество                КАК Количество
	|	ИЗ
	|		ВтРаботы КАК Т
	|
	|	) КАК Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.РазделУчета,
	|	Таб.ВидЗапасов,
	|	Таб.Организация,
	|	Таб.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таб.Количество) < 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.АналитикаУчетаНоменклатуры,
	|	СУММА(Таб.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТНеОформленоПоступлениеРабот
	|ИЗ
	|	ВтРаботы КАК Таб
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.Организация,
	|	Таб.АналитикаУчетаНоменклатуры
	|");
	
	//++ НЕ УТ

	// Проверка регистрации затрат после завершения работ по партиям производства.
	ТекстыЗапроса.Добавить(ТекстЗапросаЗавершенныеПартии());
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Затраты.Организация									КАК Организация,
	|	Затраты.ПартияПроизводства						КАК ПартияПроизводства,
	|	Затраты.Затрата												КАК Затрата
	|ПОМЕСТИТЬ ПартииСЗатратамиПослеДатыПроизводства
	|ИЗ
	|	(ВЫБРАТЬ
	|		Затраты.Организация											КАК Организация,
	|		Затраты.Партия														КАК ПартияПроизводства,
	|		Затраты.АналитикаУчетаНоменклатуры.Номенклатура	КАК Затрата,
	|		Затраты.КоличествоОстаток								КАК Количество
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			,
	|			Организация В (
	|				ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ ОрганизацииКРасчетуСебестоимости КАК Организации
	|			)
	|			И ТИПЗНАЧЕНИЯ(Партия) = ТИП(Справочник.ПартииПроизводства)
	|			И Партия В(
	|				ВЫБРАТЬ
	|					ЗавершенныеПартии.Партия КАК Партия
	|				ИЗ
	|					ЗавершенныеПартии КАК ЗавершенныеПартии)
	|		) КАК Затраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Затраты.Организация											КАК Организация,
	|		Затраты.Партия														КАК ПартияПроизводства,
	|		Затраты.АналитикаУчетаНоменклатуры.Номенклатура	КАК Затрата,
	|		-Затраты.КоличествоОстаток								КАК Количество
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (
	|				ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ ОрганизацииКРасчетуСебестоимости КАК Организации
	|			)
	|			И ТИПЗНАЧЕНИЯ(Партия) = ТИП(Справочник.ПартииПроизводства)
	|			И Партия В(
	|				ВЫБРАТЬ
	|					ЗавершенныеПартии.Партия КАК Партия
	|				ИЗ
	|					ЗавершенныеПартии КАК ЗавершенныеПартии)
	|		) КАК Затраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Затраты.Организация											КАК Организация,
	|		Затраты.ПартияПроизводства								КАК ПартияПроизводства,
	|		Затраты.ВидРабот													КАК Затрата,
	|		Затраты.КоличествоОстаток								КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
	|			,
	|			Организация В (
	|				ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ ОрганизацииКРасчетуСебестоимости КАК Организации
	|			)
	|			И ПартияПроизводства В(
	|				ВЫБРАТЬ
	|					ЗавершенныеПартии.Партия КАК Партия
	|				ИЗ
	|					ЗавершенныеПартии КАК ЗавершенныеПартии)
	|		) КАК Затраты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Затраты.Организация											КАК Организация,
	|		Затраты.ПартияПроизводства								КАК ПартияПроизводства,
	|		Затраты.ВидРабот													КАК Затрата,
	|		-Затраты.КоличествоОстаток								КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (
	|				ВЫБРАТЬ
	|					Организации.Организация
	|				ИЗ ОрганизацииКРасчетуСебестоимости КАК Организации
	|			)
	|			И ПартияПроизводства В(
	|				ВЫБРАТЬ
	|					ЗавершенныеПартии.Партия КАК Партия
	|				ИЗ
	|					ЗавершенныеПартии КАК ЗавершенныеПартии)
	|		) КАК Затраты
	|	) КАК Затраты
	|
	|СГРУППИРОВАТЬ ПО
	|	Затраты.Организация,
	|	Затраты.ПартияПроизводства,
	|	Затраты.Затрата
	|
	|ИМЕЮЩИЕ
	|	СУММА(Затраты.Количество) > 0
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗавершенныеПартии
	|");
	//-- НЕ УТ
	
	ТекстыЗапроса.Добавить(РасчетСебестоимостиПовтИсп.ТекстВтСоответствиеВариантовРаспределенияНазначениямПравил());
	
	ТекстВтНесоответствиеНастроекДокументовРаспределения = "
	|ВЫБРАТЬ 
	|	ДД.Ссылка КАК Документ,
	|	ДД.Организация КАК Организация,
	|	ДД.Подразделение КАК Подразделение,
	|	ДД.СтатьяРасходов КАК СтатьяРасходов,
	|	ДД.СтатьяРасходов.ВариантРаспределенияРасходовУпр КАК ВариантРаспределения,
	|	ДД.НазначениеНастройкиРаспределения КАК НазначениеПоДокументу,
	|	""%1"" КАК ВидУчета
	|		
	|ПОМЕСТИТЬ ВтНастройкиДокументовРаспределения
	|ИЗ Документ.РаспределениеПрочихЗатрат КАК ДД
	|ГДЕ
	|	ДД.Проведен
	|	И ДД.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДД.УправленческийУчет
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ОрганизацииКРасчетуСебестоимости КАК Организации
	|		ГДЕ
	|			Организации.Организация = ДД.Организация)
	|	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	ДД.Ссылка КАК Документ,
	|	ДД.Организация КАК Организация,
	|	ДД.Подразделение КАК Подразделение,
	|	ДД.СтатьяРасходов КАК СтатьяРасходов,
	|	ДД.СтатьяРасходов.ВариантРаспределенияРасходовРегл КАК ВариантРаспределения,
	|	ДД.НазначениеНастройкиРаспределения КАК НазначениеПоДокументу,
	|	""%2"" КАК ВидУчета
	|	
	|ИЗ Документ.РаспределениеПрочихЗатрат КАК ДД
	|ГДЕ
	|	ДД.Проведен
	|	И ДД.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДД.РегламентированныйУчет
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ОрганизацииКРасчетуСебестоимости КАК Организации
	|		ГДЕ
	|			Организации.Организация = ДД.Организация)
	|ИНДЕКСИРОВАТЬ ПО
	|	ВариантРаспределения
	|;
	|
	|ВЫБРАТЬ 
	|	ДД.Документ КАК Документ,
	|	ДД.Организация КАК Организация,
	|	ДД.Подразделение КАК Подразделение,
	|	ДД.СтатьяРасходов КАК СтатьяРасходов,
	|	ДД.ВариантРаспределения КАК ВариантРаспределения,
	|	ДД.НазначениеПоДокументу КАК НазначениеПоДокументу,
	|	Соответствие.НазначениеПравила КАК НазначениеПоСтатье,
	|	ДД.ВидУчета КАК ВидУчета
	|		
	|ПОМЕСТИТЬ ВтНесоответствиеНастроекДокументовРаспределения
	|ИЗ ВтНастройкиДокументовРаспределения КАК ДД
	|ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствиеВариантовРаспределенияНазначениямПравил КАК Соответствие
	|	ПО ДД.ВариантРаспределения = Соответствие.ВариантРаспределения
	|ГДЕ
	|	Соответствие.НазначениеПравила <> ДД.НазначениеПоДокументу
	|;
	|
	|УНИЧТОЖИТЬ ВтНастройкиДокументовРаспределения";
	
	ТекстВтНесоответствиеНастроекДокументовРаспределения = 
		СтрЗаменить(ТекстВтНесоответствиеНастроекДокументовРаспределения, "%1", 
			НСтр("ru = 'Упр. учет';
				|en = 'Manag. accounting'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ТекстВтНесоответствиеНастроекДокументовРаспределения = 
		СтрЗаменить(ТекстВтНесоответствиеНастроекДокументовРаспределения, "%2", 
			НСтр("ru = 'Регл. учет';
				|en = 'Local accounting'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ТекстыЗапроса.Добавить(ТекстВтНесоответствиеНастроекДокументовРаспределения);
	
	Если ПараметрыПроверки.ДополнительныеПараметры.ПроверкаПослеРасчета Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаПроверкиРезультатаРасчетаПоКоличеству());
	КонецЕсли;
	
	ТекстыЗапроса.Добавить("");
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	// Отрицательные остатки по количеству.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																|en = 'Inventory owner attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОтрицательныеОстатки",
		НСтр("ru = 'Обнаружены отрицательные остатки по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';
			|en = 'Negative inventory is detected for quantity in the cost register for the ""%1"" company as of the end of %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	// Не оформленные поступления работ.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТНеОформленоПоступлениеРабот",
		НСтр("ru = 'Не отражены поступления работ в подразделения организации ""%1"" за период %2';
			|en = 'Work receipts to the ""%1"" company business units are not recorded for period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
	
	//++ НЕ УТ

	// Проверка регистрации затрат после даты производства продукции.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ПартияПроизводства",					НСтр("ru = 'Партия производства';
																		|en = 'Production lot'"));
	СписокПолей.Добавить("Затрата",												НСтр("ru = 'Затрата';
																						|en = 'Cost'"));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ПартииСЗатратамиПослеДатыПроизводства",
		НСтр("ru = 'Обнаружены затраты по завершенным партиям производства.
					|Все затраты должны быть отражены не позже месяца завершения выполнения работ по партии производства.
					|Организация: ""%1"", период: %2';
					|en = 'Costs of finished production lots are found.
					|All costs should be recorded within the month of work completion on production lot.
					|Company: ""%1"", period: %2'"),
		СписокПолей);
	//-- НЕ УТ
	
	// Некорректные настройки документов распределения
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация';
														|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Документ",				НСтр("ru = 'Документ';
														|en = 'Document'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидУчета",				НСтр("ru = 'Вид учета';
														|en = 'Accounting kind'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
															|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов';
															|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВариантРаспределения",	НСтр("ru = 'Вариант распределения';
														|en = 'Allocation option'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НазначениеПоСтатье",		НСтр("ru = 'Настройка по статье расходов';
															|en = 'Setting by expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НазначениеПоДокументу",	НСтр("ru = 'Настройка документа';
															|en = 'Set up document'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВтНесоответствиеНастроекДокументовРаспределения",
		НСтр("ru = 'Обнаружены документы распределения расходов, настройки которых не соответствуют варианту распределения в статье расходов.
				|Необходимо привести настройки статьи расходов в соответствие, либо удалить и перезаполнить некорректные документы распределения.
				|Организация: ""%1"", период: %2';
				|en = 'Expense allocation documents with settings that do not match the allocation option in the expense item are detected.
				|Match the expense item settings or delete and refill incorrect allocation documents.
				|Company: ""%1"", period: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Документ");
	
	Если ПараметрыПроверки.ДополнительныеПараметры.ПроверкаПослеРасчета Тогда
		// Отрицательные остатки партий.
		СписокПолей = Новый СписокЗначений;
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																	|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																	|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																	|en = 'Inventory owner attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																	|en = 'VAT activity type'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																	|en = 'Lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru = 'Аналитика учета партий';
																|en = 'Lot: vendor attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																	|en = 'Financial accounting dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
		СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																	|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
			"ВТОтрицательныеОстаткиПартий",
			НСтр("ru = 'Обнаружены отрицательные остатки партий в регистре себестоимости по организации ""%1"" на конец периода %2';
				|en = 'Negative balance of lots was found in the cost register for the %1 company as of the end of the %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
			СписокПолей,
			,
			Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "СоответствиеСуммИКоличества".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаСоответствияСуммИКоличества(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.РазделУчета 									КАК РазделУчета,
	|	Т.ВидЗапасов 									КАК ВидЗапасов,
	|	Т.Организация 									КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры 					КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 										КАК Партия,
	|	Т.АналитикаУчетаПартий 							КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 					КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 							КАК ВидДеятельностиНДС,
	|
	|	СУММА(Т.Знак * Т.Количество) 					КАК Количество,
	|
	|	СУММА(Т.Знак * Т.Стоимость) 					КАК Стоимость,
	|	СУММА(Т.Знак * Т.СтоимостьБезНДС) 				КАК СтоимостьБезНДС,
	|	СУММА(Т.Знак * Т.ДопРасходы) 					КАК ДопРасходы,
	|	СУММА(Т.Знак * Т.ДопРасходыБезНДС) 				КАК ДопРасходыБезНДС,
	//++ НЕ УТ
	|	СУММА(Т.Знак * Т.ПостояннаяРазница) 			КАК ПостояннаяРазница,
	|	СУММА(Т.Знак * Т.ВременнаяРазница) 				КАК ВременнаяРазница,
	//-- НЕ УТ
	|	СУММА(Т.Знак * Т.СтоимостьНДД) 					КАК СтоимостьНДД,
	|	СУММА(Т.Знак * Т.СтоимостьРегл) 				КАК СтоимостьРегл,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансовая) 		КАК СтоимостьЗабалансовая,
	|	СУММА(Т.Знак * Т.Трудозатраты) 					КАК Трудозатраты,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеСНДС) 	КАК ПостатейныеПостоянныеСНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеБезНДС) 	КАК ПостатейныеПостоянныеБезНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеСНДС) 	КАК ПостатейныеПеременныеСНДС,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеБезНДС) 	КАК ПостатейныеПеременныеБезНДС,
	|	СУММА(Т.Знак * Т.СтоимостьЗабалансоваяРегл)		КАК СтоимостьЗабалансоваяРегл,
	|	СУММА(Т.Знак * Т.ДопРасходыРегл) 				КАК ДопРасходыРегл,
	|	СУММА(Т.Знак * Т.ТрудозатратыРегл) 				КАК ТрудозатратыРегл,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеРегл) 	КАК ПостатейныеПостоянныеРегл,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеРегл) 	КАК ПостатейныеПеременныеРегл,
	|	СУММА(Т.Знак * Т.СтоимостьУпр) 					КАК СтоимостьУпр,
	|	СУММА(Т.Знак * Т.ДопРасходыУпр) 				КАК ДопРасходыУпр,
	|	СУММА(Т.Знак * Т.ТрудозатратыУпр) 				КАК ТрудозатратыУпр,
	|	СУММА(Т.Знак * Т.ПостатейныеПостоянныеУпр)		КАК ПостатейныеПостоянныеУпр,
	|	СУММА(Т.Знак * Т.ПостатейныеПеременныеУпр)		КАК ПостатейныеПеременныеУпр,
	|	СУММА(Т.Знак * Т.РезервПодОбесценениеУпр)		КАК РезервПодОбесценениеУпр,
	|	СУММА(Т.Знак * Т.РезервПодОбесценениеРегл)		КАК РезервПодОбесценениеРегл
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.РазделУчета 							КАК РазделУчета,
	|		Т.ВидЗапасов 							КАК ВидЗапасов,
	|		Т.Организация 							КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 								КАК Партия,
	|		Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|		
	|		1										КАК Знак,
	|		Т.КоличествоОстаток 					КАК Количество,
	|		
	|		Т.СтоимостьОстаток 						КАК Стоимость,
	|		Т.СтоимостьБезНДСОстаток 				КАК СтоимостьБезНДС,
	|		Т.ДопРасходыОстаток 					КАК ДопРасходы,
	|		Т.ДопРасходыБезНДСОстаток 				КАК ДопРасходыБезНДС,
	//++ НЕ УТ
	|		Т.ПостояннаяРазницаОстаток 				КАК ПостояннаяРазница,
	|		Т.ВременнаяРазницаОстаток 				КАК ВременнаяРазница,
	//-- НЕ УТ
	|		Т.СтоимостьНДДОстаток 					КАК СтоимостьНДД,
	|		Т.СтоимостьРеглОстаток 					КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансоваяОстаток 			КАК СтоимостьЗабалансовая,
	|		Т.ТрудозатратыОстаток 					КАК Трудозатраты,
	|		Т.ПостатейныеПостоянныеСНДСОстаток 		КАК ПостатейныеПостоянныеСНДС,
	|		Т.ПостатейныеПостоянныеБезНДСОстаток 	КАК ПостатейныеПостоянныеБезНДС,
	|		Т.ПостатейныеПеременныеСНДСОстаток 		КАК ПостатейныеПеременныеСНДС,
	|		Т.ПостатейныеПеременныеБезНДСОстаток 	КАК ПостатейныеПеременныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРеглОстаток 		КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРеглОстаток 				КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРеглОстаток 				КАК ТрудозатратыРегл,
	|		Т.ПостатейныеПостоянныеРеглОстаток 		КАК ПостатейныеПостоянныеРегл,
	|		Т.ПостатейныеПеременныеРеглОстаток 		КАК ПостатейныеПеременныеРегл,
	|		Т.СтоимостьУпрОстаток 					КАК СтоимостьУпр,
	|		Т.ДопРасходыУпрОстаток 					КАК ДопРасходыУпр,
	|		Т.ТрудозатратыУпрОстаток 				КАК ТрудозатратыУпр,
	|		Т.ПостатейныеПостоянныеУпрОстаток 		КАК ПостатейныеПостоянныеУпр,
	|		Т.ПостатейныеПеременныеУпрОстаток 		КАК ПостатейныеПеременныеУпр,
	|		Т.РезервПодОбесценениеУпрОстаток 		КАК РезервПодОбесценениеУпр,
	|		Т.РезервПодОбесценениеРеглОстаток 		КАК РезервПодОбесценениеРегл
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК Т
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	// Исключим из остатков на конец периода движения, формирующие начальные остатки для партионного учета версии 2.2.
	|	ВЫБРАТЬ
	|		Т.РазделУчета 						КАК РазделУчета,
	|		Т.ВидЗапасов 						КАК ВидЗапасов,
	|		Т.Организация 						КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры 		КАК АналитикаУчетаНоменклатуры,
	|		Т.Партия 							КАК Партия,
	|		Т.АналитикаУчетаПартий 				КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета 		КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
	|		
	|		ВЫБОР КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ								КАК Знак,
	|		Т.Количество 						КАК Количество,
	|		
	|		Т.Стоимость 						КАК Стоимость,
	|		Т.СтоимостьБезНДС 					КАК СтоимостьБезНДС,
	|		Т.ДопРасходы 						КАК ДопРасходы,
	|		Т.ДопРасходыБезНДС 					КАК ДопРасходыБезНДС,
	//++ НЕ УТ
	|		Т.ПостояннаяРазница 				КАК ПостояннаяРазница,
	|		Т.ВременнаяРазница 					КАК ВременнаяРазница,
	//-- НЕ УТ
	|		Т.СтоимостьНДД 						КАК СтоимостьНДД,
	|		Т.СтоимостьРегл 					КАК СтоимостьРегл,
	|		Т.СтоимостьЗабалансовая 			КАК СтоимостьЗабалансовая,
	|		Т.Трудозатраты 						КАК Трудозатраты,
	|		Т.ПостатейныеПостоянныеСНДС 		КАК ПостатейныеПостоянныеСНДС,
	|		Т.ПостатейныеПостоянныеБезНДС 		КАК ПостатейныеПостоянныеБезНДС,
	|		Т.ПостатейныеПеременныеСНДС 		КАК ПостатейныеПеременныеСНДС,
	|		Т.ПостатейныеПеременныеБезНДС 		КАК ПостатейныеПеременныеБезНДС,
	|		Т.СтоимостьЗабалансоваяРегл 		КАК СтоимостьЗабалансоваяРегл,
	|		Т.ДопРасходыРегл 					КАК ДопРасходыРегл,
	|		Т.ТрудозатратыРегл 					КАК ТрудозатратыРегл,
	|		Т.ПостатейныеПостоянныеРегл 		КАК ПостатейныеПостоянныеРегл,
	|		Т.ПостатейныеПеременныеРегл 		КАК ПостатейныеПеременныеРегл,
	|		Т.СтоимостьУпр 						КАК СтоимостьУпр,
	|		Т.ДопРасходыУпр 					КАК ДопРасходыУпр,
	|		Т.ТрудозатратыУпр 					КАК ТрудозатратыУпр,
	|		Т.ПостатейныеПостоянныеУпр 			КАК ПостатейныеПостоянныеУпр,
	|		Т.ПостатейныеПеременныеУпр 			КАК ПостатейныеПеременныеУпр,
	|		Т.РезервПодОбесценениеУпр 			КАК РезервПодОбесценениеУпр,
	|		Т.РезервПодОбесценениеРегл 			КАК РезервПодОбесценениеРегл
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ГДЕ
	|		НЕ &ПартионныйУчетВерсии22
	|		И &ДатаПереходаНаПартионныйУчетВерсии22 = &НачалоСледующегоПериода
	|		И Т.Период = &КонецПериода
	|		И Т.Организация В (&МассивОрганизаций)
	|		И Т.Активность
	|		И Т.ТипЗаписи В (&ТипыЗаписейКонвертацииДанных)
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|
	|	Т.Количество 							КАК Количество,
	//++ НЕ УТ
	|	Т.ПостояннаяРазница 					КАК ПостояннаяРазница,
	|	Т.ВременнаяРазница 						КАК ВременнаяРазница,
	//-- НЕ УТ
	|	Т.СтоимостьНДД							КАК СтоимостьНДД,
	|	Т.Стоимость
	|		+ Т.СтоимостьЗабалансовая
	|		+ Т.ДопРасходы
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеСНДС
	|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДС
	|		+ Т.ДопРасходыБезНДС
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеБезНДС
	|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРегл
	|		+ Т.СтоимостьЗабалансоваяРегл
	|		+ Т.ДопРасходыРегл
	|		+ Т.ТрудозатратыРегл
	|		+ Т.ПостатейныеПостоянныеРегл
	|		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
	|	Т.СтоимостьУпр
	|		+ Т.ДопРасходыУпр
	|		+ Т.ТрудозатратыУпр
	|		+ Т.ПостатейныеПостоянныеУпр
	|		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр,
	|	Т.РезервПодОбесценениеУпр				КАК РезервПодОбесценениеУпр,
	|	Т.РезервПодОбесценениеРегл				КАК РезервПодОбесценениеРегл
	|ПОМЕСТИТЬ ВТОстаткиБезКоличества
	|ИЗ
	|	ВТОстатки КАК Т
	|ГДЕ
	|	Т.Количество = 0
	|	И НЕ (Т.Стоимость = 0
	|		И Т.СтоимостьБезНДС = 0
	|		И Т.ДопРасходы = 0
	|		И Т.ДопРасходыБезНДС = 0
	//++ НЕ УТ
	|		И Т.ПостояннаяРазница = 0
	|		И Т.ВременнаяРазница = 0
	//-- НЕ УТ
	|		И Т.СтоимостьНДД = 0
	|		И Т.СтоимостьРегл = 0
	|		И Т.СтоимостьЗабалансовая = 0
	|		И Т.Трудозатраты = 0
	|		И Т.ПостатейныеПостоянныеСНДС = 0
	|		И Т.ПостатейныеПостоянныеБезНДС = 0
	|		И Т.ПостатейныеПостоянныеБезНДС = 0
	|		И Т.ПостатейныеПеременныеБезНДС = 0
	|		И Т.СтоимостьЗабалансоваяРегл = 0
	|		И Т.ДопРасходыРегл = 0
	|		И Т.ТрудозатратыРегл = 0
	|		И Т.ПостатейныеПостоянныеРегл = 0
	|		И Т.ПостатейныеПеременныеРегл = 0
	|		И Т.СтоимостьУпр = 0
	|		И Т.ДопРасходыУпр = 0
	|		И Т.ТрудозатратыУпр = 0
	|		И Т.ПостатейныеПостоянныеУпр = 0
	|		И Т.ПостатейныеПеременныеУпр = 0
	|		И Т.РезервПодОбесценениеУпр = 0
	|		И Т.РезервПодОбесценениеРегл = 0)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.Организация 						 	КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры   			КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|
	|	Т.Количество 							КАК Количество,
	//++ НЕ УТ
	|	Т.ПостояннаяРазница 					КАК ПостояннаяРазница,
	|	Т.ВременнаяРазница 						КАК ВременнаяРазница,
	//-- НЕ УТ
	|	Т.СтоимостьНДД							КАК СтоимостьНДД,
	|	Т.Стоимость
	|		+ Т.СтоимостьЗабалансовая
	|		+ Т.ДопРасходы
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеСНДС
	|		+ Т.ПостатейныеПеременныеСНДС 		КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДС
	|		+ Т.ДопРасходыБезНДС
	|		+ Т.Трудозатраты
	|		+ Т.ПостатейныеПостоянныеБезНДС
	|		+ Т.ПостатейныеПеременныеБезНДС		КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРегл
	|		+ Т.СтоимостьЗабалансоваяРегл
	|		+ Т.ДопРасходыРегл
	|		+ Т.ТрудозатратыРегл
	|		+ Т.ПостатейныеПостоянныеРегл
	|		+ Т.ПостатейныеПеременныеРегл		КАК ПолнаяСтоимостьРегл,
	|	Т.СтоимостьУпр
	|		+ Т.ДопРасходыУпр
	|		+ Т.ТрудозатратыУпр
	|		+ Т.ПостатейныеПостоянныеУпр
	|		+ Т.ПостатейныеПеременныеУпр		КАК ПолнаяСтоимостьУпр,
	|	Т.РезервПодОбесценениеУпр				КАК РезервПодОбесценениеУпр,
	|	Т.РезервПодОбесценениеРегл				КАК РезервПодОбесценениеРегл
	|ПОМЕСТИТЬ ВТОстаткиСРазнымЗнаком
	|ИЗ
	|	ВТОстатки КАК Т
	|ГДЕ
	|	Т.Количество <> 0
	|	И НЕ (Т.Количество
	|			* (Т.Стоимость + Т.СтоимостьЗабалансовая
	|				+ Т.ДопРасходы + Т.Трудозатраты
	|				+ Т.ПостатейныеПостоянныеСНДС + Т.ПостатейныеПеременныеСНДС) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьБезНДС + Т.ДопРасходыБезНДС + Т.Трудозатраты
	|				+ Т.ПостатейныеПостоянныеБезНДС + Т.ПостатейныеПеременныеБезНДС) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьРегл + Т.СтоимостьЗабалансоваяРегл
	|				+ Т.ДопРасходыРегл + Т.ТрудозатратыРегл
	|				+ Т.ПостатейныеПостоянныеРегл + Т.ПостатейныеПеременныеРегл) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьУпр + Т.ДопРасходыУпр + Т.ТрудозатратыУпр
	|				+ Т.ПостатейныеПостоянныеУпр + Т.ПостатейныеПеременныеУпр) >= 0
	|		И Т.Количество
	|			* (Т.СтоимостьНДД) >= 0
	|		)
	|	И Т.РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение)
	|	И НЕ Т.Партия ССЫЛКА Документ.КорректировкаПриобретения
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																|en = 'Inventory owner attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																|en = 'Lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru = 'Аналитика учета партий';
															|en = 'Lot: vendor attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																|en = 'Financial accounting dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																|en = 'VAT activity type'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимость",				НСтр("ru = 'Полная стоимость';
																|en = 'Full value'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьБезНДС",		НСтр("ru = 'Полная стоимость без НДС';
																|en = 'Full value excluding VAT'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьРегл",			НСтр("ru = 'Полная стоимость (регл.)';
																|en = 'Full value (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьУпр",			НСтр("ru = 'Полная стоимость (упр.)';
																|en = 'Full value (manag.)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	//++ НЕ УТ
	СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																|en = 'Permanent difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
															|en = 'Temporary difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ
	СписокПолей.Добавить("СтоимостьНДД",				НСтр("ru = 'Стоимость НДД';
															|en = 'AIT cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РезервПодОбесценениеРегл",	НСтр("ru = 'Резерв под обесценение (регл.)';
															|en = 'Provision for impairment (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РезервПодОбесценениеУпр",		НСтр("ru = 'Резерв под обесценение (упр.)';
																|en = 'Provision for impairment (manag.)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиБезКоличества",
		НСтр("ru = 'Обнаружены ненулевые остатки по суммам при нулевом остатке по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';
			|en = 'Non-zero amount balance is detected with zero quantity balance in the cost register for the ""%1"" company at the end of %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиСРазнымЗнаком",
		НСтр("ru = 'Обнаружены разные знаки у остатков по суммам и остатка по количеству в регистре себестоимости по организации ""%1"" на конец периода %2';
			|en = 'Different characters in remaining amounts and remaining quantity are detected in the cost register for the ""%1"" company at the end of %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	
	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "СверкаКоличестваВРНВыручкаИСебестоимостьПродажИСебестоимостьТоваров".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура СверкаКоличестваВРНВыручкаИСебестоимостьПродажИСебестоимостьТоваров(ПараметрыПроверки) Экспорт
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЗ.Организация КАК Организация,
	|	ВЗ.Регистратор КАК Регистратор,
	|	ВЗ.Номенклатура КАК Номенклатура,
	|	ВЗ.Характеристика КАК Характеристика,
	|	ВЗ.Серия КАК Серия,
	|	ВЗ.РазделУчета КАК РазделУчета,
	|	ВЗ.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЗ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СУММА(ВЗ.Количество) КАК КоличествоРасхождения
	|ПОМЕСТИТЬ ВТРасхожденияВКоличестве
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|		Т.Регистратор КАК Регистратор,
	|		СпрКлючиАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|		СпрКлючиАналитикиУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		СпрКлючиАналитикиУчетаНоменклатуры.Серия КАК Серия,
	|		Т.РазделУчета КАК РазделУчета,
	|		Т.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|		Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	// Количество при данном виде возврата, в движениях, отрицательное
	|		Т.Количество КАК Количество
	|	ИЗ
	|		РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитики
	|		ПО Т.АналитикаУчетаПоПартнерам = Аналитики.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СпрКлючиАналитикиУчетаНоменклатуры
	|		ПО СпрКлючиАналитикиУчетаНоменклатуры.Ссылка = Т.АналитикаУчетаНоменклатуры
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Аналитики.Организация В(&МассивОрганизаций)
	|		И Т.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента 
	|		И Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
	// Услуга не отображается в себестоимости, поэтому исключаем ее из ВыручкаИСебестоимостьПродаж 
	|		И Т.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Организация,
	|		Т.Регистратор,
	|		СпрНоменклатура.Ссылка КАК Номенклатура,
	|		ЕСТЬNULL(КорКлючиАналитикиУчетаНоменклатуры.Характеристика, СпрКлючиАналитикиУчетаНоменклатуры.Характеристика) КАК Характеристика,
	|		ЕСТЬNULL(КорКлючиАналитикиУчетаНоменклатуры.Серия, СпрКлючиАналитикиУчетаНоменклатуры.Серия) КАК Серия,
	|		Т.РазделУчета,
	|		Т.ИдентификаторФинЗаписи,
	|		Т.ХозяйственнаяОперация,
	|		Т.Количество
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СпрКлючиАналитикиУчетаНоменклатуры
	|		ПО (СпрКлючиАналитикиУчетаНоменклатуры.Ссылка = Т.АналитикаУчетаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КорКлючиАналитикиУчетаНоменклатуры
	|		ПО (КорКлючиАналитикиУчетаНоменклатуры.Ссылка = Т.КорАналитикаУчетаНоменклатуры)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО (ЕСТЬNULL(КорКлючиАналитикиУчетаНоменклатуры.Номенклатура, СпрКлючиАналитикиУчетаНоменклатуры.Номенклатура) = СпрНоменклатура.Ссылка)
	|	ГДЕ
	|		Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.Организация В(&МассивОрганизаций)
	|		И Т.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента 
	// Многооборотная тара не отражается в выручке если отражается возврат многооборотной тары, поэтому исключим ее из СебестоимостьТоваров
	// У возврата многооборотной тары хозяйственная операция "Сторно переданной тары" или "Возврат тары от клиента прошлых периодов", поэтому условие ниже её исключает
	|		И Т.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов)
	|	) КАК ВЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЗ.Организация,
	|	ВЗ.Регистратор,
	|	ВЗ.Номенклатура,
	|	ВЗ.Характеристика,
	|	ВЗ.Серия,
	|	ВЗ.РазделУчета,
	|	ВЗ.ИдентификаторФинЗаписи,
	|	ВЗ.ХозяйственнаяОперация
	|	
	|ИМЕЮЩИЕ СУММА(ВЗ.Количество) <> 0";

	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор",					НСтр("ru = 'Регистратор';
																|en = 'Recorder'", ОбщегоНазначения.КодОсновногоЯзыка()));	
	
	СписокПолей.Добавить("Номенклатура",				НСтр("ru = 'Номенклатура';
															|en = 'Item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Характеристика",				НСтр("ru = 'Характеристика';
																|en = 'Variant'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Серия",						НСтр("ru = 'Серия';
																|en = 'Batch'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	СписокПолей.Добавить("КоличествоРасхождения",		НСтр("ru = 'Количество расхождения';
																|en = 'Discrepancy number'", ОбщегоНазначения.КодОсновногоЯзыка()));

	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияВКоличестве",
		НСтр("ru = 'Обнаружены расхождения по количеству, между регистрами ""Выручка и себестоимость продаж"" и ""Себестоимость товаров"", по организации ""%1"" на конец периода %2';
			|en = 'Discrepancies in quantity between the ""Revenue and COGS"" and ""Inventory cost"" registers for the ""%1"" company at the end of the %2 period are found'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя());

	ДополнительныеПараметрыЗапроса = Новый Структура;
	ДополнительныеПараметрыЗапроса.Вставить("ТипыЗаписейКонвертацииДанных", ТипыЗаписейКонвертацииДанных());
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДополнительныеПараметрыЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПоступлениеТоваровВПути".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаПоступленийТоваровВПути(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	-Т.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТСобственныеТоварыВПути
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)
	|		И РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	//++ НЕ УТ
	|		И АналитикаУчетаНоменклатуры.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	//-- НЕ УТ
	|	) КАК Т
	|ГДЕ
	|	Т.КоличествоОстаток < 0
	|";
	
	// Превышение товаров в пути.	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																|en = 'Inventory owner attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТСобственныеТоварыВПути",
		НСтр("ru = 'Поступления из товаров в пути превышают остатки товаров в пути в организации ""%1"" за период %2';
			|en = 'Receipts from the goods on the way exceed balance of the goods in transit in the ""%1"" company for period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ЗатратыНеРаспределенныеНаСебестоимость".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаЗатратНеРаспределенныхНаСебестоимость(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтатьиРасходовУпр
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	Т.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТСтатьиРасходовРегл
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Т
	|ГДЕ
	|	Т.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И Т.ВариантРаспределенияРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.НаправлениеДеятельности,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(Т.СуммаБезНДС) КАК СуммаБезНДС,
	//++ НЕ УТ
	|	СУММА(Т.ПостояннаяРазница) КАК ПостояннаяРазница,
	|	СУММА(Т.ВременнаяРазница) КАК ВременнаяРазница,
	//-- НЕ УТ
	|	СУММА(Т.СуммаНДД) КАК СуммаНДД,
	|	СУММА(Т.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ ВТВсеОстаткиНераспределенныхРасходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Организация КАК Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.СтатьяРасходов КАК СтатьяРасходов,
	|		Т.АналитикаРасходов КАК АналитикаРасходов,
	|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		Т.СуммаОстаток КАК Сумма,
	|		Т.СуммаБезНДСОстаток КАК СуммаБезНДС,
	//++ НЕ УТ
	|		0 КАК ПостояннаяРазница,
	|		0 КАК ВременнаяРазница,
	//-- НЕ УТ
	|		0 КАК СуммаНДД,
	|		0 КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|			И СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВТСтатьиРасходовУпр КАК Т)) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Организация КАК Организация,
	|		Т.Подразделение КАК Подразделение,
	|		Т.СтатьяРасходов КАК СтатьяРасходов,
	|		Т.АналитикаРасходов КАК АналитикаРасходов,
	|		Т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		0 КАК Сумма,
	|		0 КАК СуммаБезНДС,
	//++ НЕ УТ
	|		Т.ПостояннаяРазницаОстаток КАК ПостояннаяРазница,
	|		Т.ВременнаяРазницаОстаток КАК ВременнаяРазница,
	//-- НЕ УТ
	|		Т.СуммаНДДОстаток КАК СуммаНДД,
	|		Т.СуммаРеглОстаток КАК СуммаРегл
	|	ИЗ
	|		РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|			И СтатьяРасходов В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					ВТСтатьиРасходовРегл КАК Т)) КАК Т) КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.НаправлениеДеятельности,
	|	Т.Сумма КАК Сумма,
	|	Т.СуммаБезНДС КАК СуммаБезНДС,
	//++ НЕ УТ
	|	Т.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Т.ВременнаяРазница КАК ВременнаяРазница,
	//-- НЕ УТ
	|	Т.СуммаНДД КАК СуммаНДД,
	|	Т.СуммаРегл КАК СуммаРегл
	|ПОМЕСТИТЬ ВТОстаткиНераспределенныхРасходов
	|ИЗ
	|	ВТВсеОстаткиНераспределенныхРасходов КАК Т
	|ГДЕ
	|	&УсловиеОтбораПоДатеДокументаАналитики
	|	И &УсловиеОтбораПоПроведеннымДокументамАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.Подразделение,
	|	Т.СтатьяРасходов,
	|	Т.АналитикаРасходов,
	|	Т.НаправлениеДеятельности,
	|	Т.Сумма КАК Сумма,
	|	Т.СуммаБезНДС КАК СуммаБезНДС,
	//++ НЕ УТ
	|	Т.ПостояннаяРазница КАК ПостояннаяРазница,
	|	Т.ВременнаяРазница КАК ВременнаяРазница,
	//-- НЕ УТ
	|	Т.СуммаНДД КАК СуммаНДД,
	|	Т.СуммаРегл КАК СуммаРегл
	|ПОМЕСТИТЬ ВТОстаткиНераспределенныхРасходовПоНекорректнымАналитикам
	|ИЗ
	|	ВТВсеОстаткиНераспределенныхРасходов КАК Т
	|ГДЕ
	|	&УсловиеОтбораПоДатеДокументаАналитики
	|	И &УсловиеОтбораПоНепроведеннымДокументамАналитики";
	
	// Добавим отбор по полю АналитикаРасходов:
	// если в аналитике указан документ и его дата находится в следующих периодах, то по таким расходам ошибку не регистрируем.
	ТекстОтбораДата = "";
	// Также разделим остатки расходов по проведенным и непроведенным документам аналитики.
	ТекстОтбораПроведен = "";
	ТекстОтбораНеПроведен = "";
	
	ОписаниеТиповДокументов = РасчетСебестоимостиУниверсальныеАлгоритмы.ОписаниеТиповДокументов();
	
	Для Каждого ТекущийТип Из Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип.Типы() Цикл
		
		Если НЕ ОписаниеТиповДокументов.СодержитТип(ТекущийТип) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = Метаданные.НайтиПоТипу(ТекущийТип).Имя;
		
		ТекстОтбораДата = ТекстОтбораДата + "
		|		КОГДА Т.АналитикаРасходов ССЫЛКА Документ." + ИмяДокумента + "
		|			ТОГДА ВЫРАЗИТЬ(Т.АналитикаРасходов КАК Документ." + ИмяДокумента + ").Дата";
		
		ТекстОтбораПроведен = ТекстОтбораПроведен + "
		|		КОГДА Т.АналитикаРасходов ССЫЛКА Документ." + ИмяДокумента + "
		|			ТОГДА ВЫРАЗИТЬ(Т.АналитикаРасходов КАК Документ." + ИмяДокумента + ").Проведен";
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОтбораДата) Тогда
		
		ТекстОтбораДата = "ИСТИНА";
		ТекстОтбораПроведен = "ИСТИНА";
		ТекстОтбораНеПроведен = "ЛОЖЬ";
		
	Иначе
		
		ТекстОтбораДата =
			"	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораДата + //@Query-part
			"		ИНАЧЕ NULL
			|		КОНЕЦ, ДАТАВРЕМЯ(1,1,1)) <= &КонецПериода";
		
		ТекстОтбораНеПроведен =
			"	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораПроведен + //@Query-part
			"		ИНАЧЕ NULL
			|		КОНЕЦ, ИСТИНА) = ЛОЖЬ"; 
		
		ТекстОтбораПроведен =
			"	ЕСТЬNULL(
			|		ВЫБОР" + ТекстОтбораПроведен + //@Query-part
			"		ИНАЧЕ NULL
			|		КОНЕЦ, ИСТИНА) = ИСТИНА";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоДатеДокументаАналитики", 			 ТекстОтбораДата);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоПроведеннымДокументамАналитики", 	 ТекстОтбораПроведен);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоНепроведеннымДокументамАналитики", ТекстОтбораНеПроведен);
	
	// Зарегистрируем ошибки.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Сумма",						НСтр("ru = 'Сумма';
																|en = 'Sum'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаБезНДС",					НСтр("ru = 'Сумма без НДС';
																|en = 'Amount excluding VAT'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаРегл",					НСтр("ru = 'Сумма (регл.)';
																|en = 'Amount (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	//++ НЕ УТ
	СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																|en = 'Permanent difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
															|en = 'Temporary difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	//-- НЕ УТ
	СписокПолей.Добавить("СуммаНДД",					НСтр("ru = 'Сумма НДД';
															|en = 'AIT amount'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТОстаткиНераспределенныхРасходов",
		НСтр("ru = 'Обнаружены не распределенные на себестоимость остатки расходов по организации ""%1"" на конец периода %2';
			|en = 'Expense balance not allocated to cost was detected for the ""%1"" company as of the end of %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"", // ИмяПоляОбъекта
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ВТОстаткиНераспределенныхРасходовПоНекорректнымАналитикам",
		НСтр("ru = 'Обнаружены остатки расходов по организации ""%1"" на конец периода %2 по аналитикам, в которых указаны непроведенные документы';
			|en = 'Expense balance for the ""%1"" company was detected as of the end of %2 period by dimensions in which unposted documents were specified'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"", // ИмяПоляОбъекта
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

//++ НЕ УТ

// Процедура-обработчик проверки состояния системы "ЗатратыНеРаспределенныеПоПравилам".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаЗатратНеРаспределенныхПоПравилам(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Регистратор КАК Регистратор,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ТоварыОрганизаций.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИНАЧЕ ТоварыОрганизаций.ВидЗапасов
	|	КОНЕЦ КАК ВидЗапасов,
	|	СУММА(ТоварыОрганизаций.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыОрганизаций
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрСторно
	|	ПО РеестрСторно.СторнируемыйДокумент = ТоварыОрганизаций.Регистратор
	|		И НЕ РеестрСторно.ДополнительнаяЗапись
	|		И РеестрСторно.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &КонецПериода 
	|		И РеестрСторно.Проведен
	|ГДЕ
	|	ТоварыОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТоварыОрганизаций.Организация В (&МассивОрганизаций)
	|	И ТоварыОрганизаций.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаПартииПроизводства)
	|	И ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ТоварыОрганизаций.Регистратор ССЫЛКА Документ.РаспределениеПроизводственныхЗатрат
	// Проверка на наличие сторно в текущем периоде.
	|	И РеестрСторно.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.Регистратор,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.Организация,
	|	ТоварыОрганизаций.ВидЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Распределение.Ссылка КАК Регистратор,
	|	Распределение.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Распределение.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|	Распределение.КоличествоКРаспределениюПоПравилу КАК Количество
	|ИЗ
	|	Документ.РаспределениеПроизводственныхЗатрат КАК Распределение
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрСторно
	|	ПО РеестрСторно.СторнируемыйДокумент = Распределение.Ссылка
	|		И НЕ РеестрСторно.ДополнительнаяЗапись
	|		И РеестрСторно.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &КонецПериода 
	|		И РеестрСторно.Проведен
	|ГДЕ
	|	Распределение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Распределение.Организация В (&МассивОрганизаций)
	|	И Распределение.Проведен
	|	И Распределение.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Распределение.КоличествоКРаспределениюПоПравилу <> 0
	// Проверка на наличие сторно в текущем периоде.
	|	И РеестрСторно.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Организация,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Регистратор КАК Регистратор,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(СебестоимостьТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ СебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Организация В (&МассивОрганизаций)
	|	И СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РаспределениеРасходовНаПартииПроизводства)
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И СебестоимостьТоваров.РасчетПартий
	|	И СебестоимостьТоваров.Регистратор ССЫЛКА Документ.РаспределениеПроизводственныхЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.Регистратор,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.Организация,
	|	СебестоимостьТоваров.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	Организация,
	|	ВидЗапасов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыОрганизаций.Регистратор КАК Регистратор,
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	&КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВТДокументыСНераспределеннымиПоПравиламРасходами
	|ИЗ
	|	ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|			И ТоварыОрганизаций.Организация = СебестоимостьТоваров.Организация
	|			И ТоварыОрганизаций.ВидЗапасов = СебестоимостьТоваров.ВидЗапасов
	|			И ТоварыОрганизаций.Регистратор = СебестоимостьТоваров.Регистратор
	|ГДЕ
	|	ТоварыОрганизаций.Количество <> ЕСТЬNULL(СебестоимостьТоваров.Количество, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СебестоимостьТоваров";
	
	// Зарегистрируем ошибки.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Регистратор");
	СписокПолей.Добавить("КонецПериода");
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТДокументыСНераспределеннымиПоПравиламРасходами",
		НСтр("ru = 'Обнаружены документы распределения материалов и работ, по которым не выполнено распределение затрат в регистре ""Себестоимость товаров"", по организации ""%1"" на конец периода %2';
			|en = 'Documents of allocation of materials and works, whose costs are not allocated in the ""Inventory cost"" register by %1 company as of the %2 period end are detected'"),
		СписокПолей);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ВозвратныеОтходыНеРаспределенныеПоПравилам".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаВозвратныхОтходовНеРаспределенныхПоПравилам(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Распределение.Ссылка КАК Регистратор,
	|	Распределение.Организация КАК Организация,
	|	Распределение.КоличествоПоПравилу КАК Количество
	|
	|ПОМЕСТИТЬ ДокументыРаспределения
	|ИЗ
	|	Документ.РаспределениеВозвратныхОтходов КАК Распределение
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрСторно
	|	ПО РеестрСторно.СторнируемыйДокумент = Распределение.Ссылка
	|		И НЕ РеестрСторно.ДополнительнаяЗапись
	|		И РеестрСторно.ДатаДокументаИБ МЕЖДУ &НачалоПериода И &КонецПериода 
	|		И РеестрСторно.Проведен
	|ГДЕ
	|	Распределение.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Распределение.Организация В (&МассивОрганизаций)
	|	И Распределение.Проведен
	// Проверка на наличие сторно в текущем периоде.
	|	И РеестрСторно.Ссылка ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Регистратор КАК Регистратор,
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СУММА(-СебестоимостьТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ СебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СебестоимостьТоваров.Организация В (&МассивОрганизаций)
	|	И СебестоимостьТоваров.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство)
	|	И СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СебестоимостьТоваров.Регистратор ССЫЛКА Документ.РаспределениеВозвратныхОтходов
	|	И СебестоимостьТоваров.РасчетПартий
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.Регистратор,
	|	СебестоимостьТоваров.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыРаспределения.Регистратор КАК Регистратор,
	|	ДокументыРаспределения.Организация КАК Организация,
	|	&КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВТДокументыСНераспределеннымиПоПравиламРасходами
	|ИЗ
	|	ДокументыРаспределения КАК ДокументыРаспределения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО СебестоимостьТоваров.Регистратор = ДокументыРаспределения.Регистратор
	|			И СебестоимостьТоваров.Организация = ДокументыРаспределения.Организация
	|ГДЕ
	|	ДокументыРаспределения.Количество <> ЕСТЬNULL(СебестоимостьТоваров.Количество, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументыРаспределения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СебестоимостьТоваров";
	
	// Зарегистрируем ошибки.
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("Регистратор");
	СписокПолей.Добавить("КонецПериода");
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТДокументыСНераспределеннымиПоПравиламРасходами",
		НСтр("ru = 'Обнаружены документы распределения возвратных отходов, по которым не выполнено распределение затрат в регистре ""Себестоимость товаров"", по организации ""%1"" на конец периода %2';
			|en = 'Documents of recyclable waste allocation whose costs are not allocated in the ""Inventory cost"" register by the %1 company as of the %2 period end are detected'"),
		СписокПолей);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПроверкаРаспределенияРезервовПредстоящихРасходов".
//
Процедура ПроверкаРаспределенияРезервовПредстоящихРасходов(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОстаткиРезервов.Организация КАК Организация,
	|	ОстаткиРезервов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ОстаткиРезервов.ОбъектУчетаРезервов КАК ОбъектУчетаРезервов,
	|	ОстаткиРезервов.ВидРезервов КАК ВидРезервов,
	|	ЕСТЬNULL(ОстаткиРезервов.СуммаУпрОстаток, 0) КАК СуммаУпр,
	|	ЕСТЬNULL(ОстаткиРезервов.СуммаНУОстаток, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(ОстаткиРезервов.СуммаРеглОстаток, 0) КАК СуммаРегл
	|ПОМЕСТИТЬ ОтрицательныеОстатки
	|ИЗ
	|	РегистрНакопления.РезервыПредстоящихРасходов.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)) КАК ОстаткиРезервов
	|ГДЕ
	|	(ЕСТЬNULL(ОстаткиРезервов.СуммаУпрОстаток, 0) > 0
	|			ИЛИ ЕСТЬNULL(ОстаткиРезервов.СуммаНУОстаток, 0) > 0
	|			ИЛИ ЕСТЬNULL(ОстаткиРезервов.СуммаРеглОстаток, 0) > 0)
	|;
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ОбъектУчетаРезервов",			НСтр("ru = 'Объект учета резервов';
																|en = 'Provision object'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидРезервов",					НСтр("ru = 'Вид резервов';
																|en = 'Reserve kind'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаРегл",					НСтр("ru = 'Сумма (регл.)';
																|en = 'Amount (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаНУ",						НСтр("ru = 'Сумма (НУ)';
																|en = 'TA amount'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СуммаУпр",					НСтр("ru = 'Сумма (упр.)';
															|en = 'Amount, manag.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОтрицательныеОстатки",
		НСтр("ru = 'Обнаружен расход резервов предстоящих расходов сверх величины резерва (списано больше, чем начислено) по организации ""%1"" на конец периода %2';
			|en = 'Expense of provisions and contingent liabilities exceeding the reserve amount was detected (it was written off more than accrued) by the ""%1"" company as of the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПроверкаИспользованияВозвратныхОтходовВМатериалах".
//
Процедура ПроверкаИспользованияВозвратныхОтходовВМатериалах(ПараметрыПроверки) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПроизводственныйДокумент
	|ПОМЕСТИТЬ НекорректныеДокументы
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа.МатериалыИРаботы КАК ТаблицаМатериалов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокумента.Организация В(&МассивОрганизаций)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаМатериалов.СтатьяКалькуляции.ТипЗатрат = ЗНАЧЕНИЕ(Перечисление.ТипыЗатрат.ВозвратныеОтходы)
	|
	//++ Устарело_Производство21
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПроизводственныйДокумент
	|ИЗ
	|	Документ.СписаниеЗатратНаВыпуск КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеЗатратНаВыпуск.МатериалыИУслуги КАК ТаблицаМатериалов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокумента.Организация В(&МассивОрганизаций)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаМатериалов.СтатьяКалькуляции.ТипЗатрат = ЗНАЧЕНИЕ(Перечисление.ТипыЗатрат.ВозвратныеОтходы)
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПроизводственныйДокумент
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутныйЛистПроизводства.МатериалыИУслуги КАК ТаблицаМатериалов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокумента.Организация В(&МассивОрганизаций)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаМатериалов.СтатьяКалькуляции.ТипЗатрат = ЗНАЧЕНИЕ(Перечисление.ТипыЗатрат.ВозвратныеОтходы)
	|
	//-- НЕ УТКА

	//-- Устарело_Производство21
	
	//++ Устарело_Переработка24
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПроизводственныйДокумент
	|ИЗ
	|	Документ.ОтчетПереработчика КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетПереработчика.Материалы КАК ТаблицаМатериалов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокумента.Организация В(&МассивОрганизаций)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаМатериалов.СтатьяКалькуляции.ТипЗатрат = ЗНАЧЕНИЕ(Перечисление.ТипыЗатрат.ВозвратныеОтходы)
	//-- Устарело_Переработка24
	
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка КАК ПроизводственныйДокумент
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.РасходМатериаловИРабот КАК ТаблицаМатериалов
	|		ПО ТаблицаДокумента.Ссылка = ТаблицаМатериалов.Ссылка
	|ГДЕ
	|	ТаблицаМатериалов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаДокумента.Организация В(&МассивОрганизаций)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаМатериалов.СтатьяКалькуляции.ТипЗатрат = ЗНАЧЕНИЕ(Перечисление.ТипыЗатрат.ВозвратныеОтходы)
	//-- НЕ УТКА
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация");
	СписокПолей.Добавить("ПроизводственныйДокумент",		НСтр("ru = 'Документ производства';
																|en = 'Production document'"));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НекорректныеДокументы",
		НСтр("ru = 'Обнаружено использование возвратных отходов как материалов в производственных документах организации ""%1"" в периоде %2';
			|en = 'The use of recyclable waste as materials in the production documents of company ""%1"" has been found in period %2'"),
		СписокПолей);
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ОстаткиВНезавершенномПроизводстве".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаОстатковВНезавершенномПроизводстве(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаЗавершенныеПартии());
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.Организация									КАК Организация,
	|	Т.РазделУчета									КАК РазделУчета,
	|	Т.АналитикаУчетаНоменклатуры					КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия										КАК Партия,
	|	Т.АналитикаФинансовогоУчета						КАК АналитикаФинансовогоУчета,
	|	Т.КоличествоОстаток								КАК Количество,
	|	Т.СтоимостьОстаток
	|			+ Т.ДопРасходыОстаток
	|			+ Т.ТрудозатратыОстаток
	|			+ Т.ПостатейныеПостоянныеСНДСОстаток
	|			+ Т.ПостатейныеПеременныеСНДСОстаток	КАК ПолнаяСтоимость,
	|	Т.СтоимостьБезНДСОстаток
	|			+ Т.ДопРасходыБезНДСОстаток
	|			+ Т.ТрудозатратыОстаток
	|			+ Т.ПостатейныеПостоянныеБезНДСОстаток
	|			+ Т.ПостатейныеПеременныеБезНДСОстаток	КАК ПолнаяСтоимостьБезНДС,
	|	Т.СтоимостьРеглОстаток
	|			+ Т.ДопРасходыРеглОстаток
	|			+ Т.ТрудозатратыРеглОстаток
	|			+ Т.ПостатейныеПостоянныеРеглОстаток
	|			+ Т.ПостатейныеПеременныеРеглОстаток	КАК ПолнаяСтоимостьРегл,
	|	Т.ПостояннаяРазницаОстаток						КАК ПостояннаяРазница,
	|	Т.ВременнаяРазницаОстаток						КАК ВременнаяРазница,
	|	Т.СтоимостьНДДОстаток							КАК СтоимостьНДД,
	|	Т.СтоимостьУпрОстаток
	|			+ Т.ДопРасходыУпрОстаток
	|			+ Т.ТрудозатратыУпрОстаток
	|			+ Т.ПостатейныеПостоянныеУпрОстаток
	|			+ Т.ПостатейныеПеременныеУпрОстаток		КАК ПолнаяСтоимостьУпр
	|ПОМЕСТИТЬ ОстаткиМатериальныхЗатрат
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|			И Партия В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)
	|			) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация 				КАК Организация,
	|	Т.Подразделение 			КАК Подразделение,
	|	Т.НаправлениеДеятельности 	КАК НаправлениеДеятельности,
	|	Т.СтатьяРасходов 			КАК СтатьяРасходов,
	|	Т.АналитикаРасходов 		КАК АналитикаРасходов,
	|	Т.ГруппаПродукции 			КАК ГруппаПродукции,
	|	Т.ПравилоОтнесенияНаВыпуск 	КАК ПравилоОтнесенияНаВыпуск,
	|	Т.ПартияПроизводства 		КАК ПартияПроизводства,
	|	Т.СтатьяКалькуляции 		КАК СтатьяКалькуляции,
	|	Т.СтоимостьОстаток 			КАК Стоимость,
	|	Т.СтоимостьБезНДСОстаток 	КАК СтоимостьБезНДС,
	|	Т.СтоимостьРеглОстаток 		КАК СтоимостьРегл,
	|	Т.ПостояннаяРазницаОстаток 	КАК ПостояннаяРазница,
	|	Т.ВременнаяРазницаОстаток 	КАК ВременнаяРазница,
	|	Т.СтоимостьНДДОстаток 		КАК СтоимостьНДД,
	|	Т.СтоимостьУпрОстаток 		КАК СтоимостьУпр
	|ПОМЕСТИТЬ ОстаткиПостатейныхРасходов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|				И ПартияПроизводства В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация 					КАК Организация,
	|	Т.Подразделение 				КАК Подразделение,
	|	Т.ПартияПроизводства 			КАК ПартияПроизводства,
	|	Т.СтатьяКалькуляции 			КАК СтатьяКалькуляции,
	|	Т.ВидРабот КАК ВидРабот,
	|	Т.ГруппаПродукции 				КАК ГруппаПродукции,
	|	Т.ВидФондаВзносов 				КАК ВидФондаВзносов,
	|	Т.КоличествоОстаток 			КАК Количество,
	|	Т.НормативнаяСтоимостьОстаток 	КАК НормативнаяСтоимость,
	|	Т.СтоимостьОстаток 				КАК Стоимость,
	|	Т.СтоимостьРеглОстаток 			КАК СтоимостьРегл,
	|	Т.СтоимостьНДДОстаток 			КАК СтоимостьНДД
	|ПОМЕСТИТЬ ОстаткиТрудозатрат
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.Остатки(
	|			&ГраницаКонецПериода,
	|			Организация В (&МассивОрганизаций)
	|				И ПартияПроизводства В (ВЫБРАТЬ Т.Партия ИЗ ЗавершенныеПартии КАК Т)) КАК Т
	|");
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																|en = 'Accounting section'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																|en = 'Lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																|en = 'Financial accounting dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимость",				НСтр("ru = 'Полная стоимость';
																|en = 'Full value'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьБезНДС",		НСтр("ru = 'Полная стоимость без НДС';
																|en = 'Full value excluding VAT'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьРегл",			НСтр("ru = 'Полная стоимость (регл.)';
																|en = 'Full value (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПолнаяСтоимостьУпр",			НСтр("ru = 'Полная стоимость (упр.)';
																|en = 'Full value (manag.)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																|en = 'Permanent difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
															|en = 'Temporary difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьНДД",				НСтр("ru = 'Стоимость НДД';
															|en = 'AIT cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ОстаткиМатериальныхЗатрат",
		НСтр("ru = 'Обнаружены остатки нераспределенных материальных затрат в регистре ""Себестоимость товаров"" по организации ""%1"" на конец периода %2';
			|en = 'Balances of non-allocated material expenses in the register ""Inventory cost"" by the company ""%1"" are found at the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 			 НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",			 НСтр("ru = 'Подразделение';
															|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",	 НСтр("ru = 'Направление деятельности';
															|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПартияПроизводства",		 НСтр("ru = 'Партия производства';
															|en = 'Production lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяКалькуляции",		 НСтр("ru = 'Статья калькуляции';
															|en = 'Product cost element'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",			 НСтр("ru = 'Статья расходов';
															|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",		 НСтр("ru = 'Аналитика расходов';
															|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ГруппаПродукции",			 НСтр("ru = 'Группа продукции';
															|en = 'Group products'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПравилоОтнесенияНаВыпуск", НСтр("ru = 'Правило отнесения на выпуск';
															|en = 'Rule of allocating to release'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Стоимость",				 НСтр("ru = 'Стоимость';
															|en = 'Cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьБезНДС",			 НСтр("ru = 'Стоимость без НДС';
															|en = 'Cost excl. VAT'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьРегл",			 НСтр("ru = 'Стоимость (регл.)';
															|en = 'Cost (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьУпр",			 НСтр("ru = 'Стоимость (упр.)';
															|en = 'Cost (manag.)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПостояннаяРазница",		 НСтр("ru = 'Постоянная разница';
															|en = 'Permanent difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВременнаяРазница",		 НСтр("ru = 'Временная разница';
															|en = 'Temporary difference'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьНДД",			 НСтр("ru = 'Стоимость НДД';
															|en = 'AIT cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ОстаткиПостатейныхРасходов",
		НСтр("ru = 'Обнаружены остатки нераспределенных постатейных расходов в регистре 
			|""Прочие расходы незавершенного производства"" по организации ""%1"" на конец периода %2';
			|en = 'Unallocated itemized expense balance is detected in the 
			|""Other WIP expenses"" register for the ""%1"" company as of the end of the %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя());
		
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация';
														|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",			НСтр("ru = 'Подразделение';
															|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ПартияПроизводства",		НСтр("ru = 'Партия производства';
															|en = 'Production lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяКалькуляции",		НСтр("ru = 'Статья калькуляции';
															|en = 'Product cost element'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидРабот",				НСтр("ru = 'Вид работ';
														|en = 'Activity kind'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ГруппаПродукции",			НСтр("ru = 'Группа продукции';
															|en = 'Group products'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидФондаВзносов",			НСтр("ru = 'Вид фонда/взносов';
															|en = 'Fund/contribution kind'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Количество",				НСтр("ru = 'Количество';
															|en = 'Quantity'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Стоимость",				НСтр("ru = 'Стоимость';
															|en = 'Cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьРегл",			НСтр("ru = 'Стоимость (регл.)';
															|en = 'Cost (local)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтоимостьНДД",			НСтр("ru = 'Стоимость НДД';
														|en = 'AIT cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НормативнаяСтоимость",	НСтр("ru = 'Нормативная стоимость';
														|en = 'Standard cost'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ЗакрытиеМесяцаСервер.ДополнитьПараметрыРегистрацииПроблемПроверки(ПараметрыРегистрации,
		"ОстаткиТрудозатрат",
		НСтр("ru = 'Обнаружены остатки нераспределенных расходов по оплате труда в регистре 
			|""Трудозатраты незавершенного производства"" по организации ""%1"" на конец периода %2';
			|en = 'Non-allocated itemized expense balance is detected in the
			|""WIP labor costs"" register for the ""%1"" company as of the end of the %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя());
			
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

//-- НЕ УТ

// Процедура-обработчик проверки состояния системы "ЗаписиСПризнакомРасчетНеЗавершен".
//
// Параметры:
//	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаЗаписейСПризнакомРасчетНеЗавершен(ПараметрыПроверки) Экспорт
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	
	АвтоматическоеТестирование = ЗакрытиеМесяцаСервер.ЗначениеДополнительногоПараметраПроверки(
		ПараметрыПроверки,
		"АвтоматическоеТестирование",
		Ложь);
	
	// Проверка выполняется в автотестах или если явно включен соответствующий технологический параметр.
	Если НЕ АвтоматическоеТестирование И НЕ ЗначенияПараметров.ПроверятьЗаписиСПризнакомРасчетНеЗавершен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "";
	ШаблонТекстаЗапроса  =
	"ВЫБРАТЬ
	|	Т.ИмяПоляОрганизация КАК Организация,
	|	""КраткоеИмяРегистра"" КАК ИмяРегистра,
	|	Т.Регистратор КАК Регистратор,
	|	СУММА(1) КАК КоличествоДвижений
	|ПОМЕСТИТЬ ИмяПромежуточнойВТ_1
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.ИмяПоляОрганизация В(&МассивОрганизаций)
	|	И Т.РасчетНеЗавершен
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ИмяПоляОрганизация,
	|	Т.Регистратор
	|"; // @query-part-1
	
	Для Каждого КлючИЗначение Из РасчетСебестоимости.ИсходящиеДанныеМеханизма() Цикл
		
		МетаРегистр = КлючИЗначение.Ключ;
		
		Если НЕ Метаданные.РегистрыНакопления.Содержит(МетаРегистр)
		 ИЛИ МетаРегистр.Реквизиты.Найти("РасчетНеЗавершен") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнениеТекстаЗапроса = ?(ТекстЗапроса = "", "", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|") + ШаблонТекстаЗапроса;
		
		ДополнениеТекстаЗапроса = СтрЗаменить(ДополнениеТекстаЗапроса, "ИмяПоляОрганизация",
			?(МетаРегистр.Измерения.Найти("Организация") = Неопределено, "АналитикаУчетаПоПартнерам.Организация", "Организация"));
		ДополнениеТекстаЗапроса = СтрЗаменить(ДополнениеТекстаЗапроса, "КраткоеИмяРегистра", МетаРегистр.Имя);
		ДополнениеТекстаЗапроса = СтрЗаменить(ДополнениеТекстаЗапроса, "ИмяОсновнойТаблицыРегистра", "РегистрНакопления." + МетаРегистр.Имя);
		ДополнениеТекстаЗапроса = СтрЗаменить(ДополнениеТекстаЗапроса, "ПОМЕСТИТЬ ИмяПромежуточнойВТ_1",
			?(ТекстЗапроса = "", "ПОМЕСТИТЬ ВТДокументыСНезаполненнойПартией", ""));
		
		ТекстЗапроса = ТекстЗапроса + ДополнениеТекстаЗапроса;
		
	КонецЦикла;
	
	ТекстЗапроса = СокрЛП(ТекстЗапроса);
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 		НСтр("ru = 'Организация';
													|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ИмяРегистра", 		НСтр("ru = 'Имя регистра';
													|en = 'Register name'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Регистратор", 		НСтр("ru = 'Документ';
													|en = 'Document'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоДвижений", 	НСтр("ru = 'Количество движений';
														|en = 'Number of records'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТДокументыСНезаполненнойПартией",
		НСтр("ru = 'Обнаружены неподобранные партии в движениях документов организации ""%1"" за период %2';
			|en = 'Unpicked lots are found in document records of the ""%1"" company for period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		"Регистратор");
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

Функция ТекстЗапросаПроверкиРезультатаРасчетаПоКоличеству()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Организация 							КАК Организация,
	|	Т.РазделУчета 							КАК РазделУчета,
	|	Т.АналитикаУчетаНоменклатуры 			КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов 							КАК ВидЗапасов,
	|	Т.ВидДеятельностиНДС 					КАК ВидДеятельностиНДС,
	|	Т.Партия 								КАК Партия,
	|	Т.АналитикаУчетаПартий 					КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета 			КАК АналитикаФинансовогоУчета,
	|	МАКСИМУМ(Т.КоличествоКонечныйОстаток)	КАК Количество
	|ПОМЕСТИТЬ ВТОтрицательныеОстаткиПартий
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,,
	|		Организация В (&МассивОрганизаций)
	|		И &ПартионныйУчетВерсии22
	//++ НЕ УТ
	|		И ТИПЗНАЧЕНИЯ(Партия) <> ТИП(Справочник.ПартииПроизводства)
	//-- НЕ УТ
	|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки)
	|		И РазделУчета <> ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути)
	|		И НЕ ((АналитикаУчетаНоменклатуры, РазделУчета, ВидЗапасов, Организация ) В
	|			(ВЫБРАТЬ Т.АналитикаУчетаНоменклатуры, Т.РазделУчета, Т.ВидЗапасов, Т.Организация ИЗ ВозвратныеОтходы КАК Т))
	|	) КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТОтрицательныеОстатки КАК ОтрицательныеОстаткиПоКоличеству
	|	ПО ОтрицательныеОстаткиПоКоличеству.РазделУчета = Т.РазделУчета
	|		И ОтрицательныеОстаткиПоКоличеству.ВидЗапасов = Т.ВидЗапасов
	|		И ОтрицательныеОстаткиПоКоличеству.Организация = Т.Организация
	|		И ОтрицательныеОстаткиПоКоличеству.АналитикаУчетаНоменклатуры = Т.АналитикаУчетаНоменклатуры
	|ГДЕ
	|	Т.КоличествоКонечныйОстаток < 0 И ОтрицательныеОстаткиПоКоличеству.Количество ЕСТЬ NULL
	|	И (Т.КоличествоПриход <> 0 ИЛИ Т.КоличествоРасход <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.РазделУчета,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.ВидДеятельностиНДС,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОрганизацииКРасчетуСебестоимости()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииКРасчетуСебестоимости
	|ИЗ РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.Организация В (&МассивОрганизаций)
	|	И Задания.Месяц < &КонецПериода
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВозвратныеОтходы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|ПОМЕСТИТЬ ВозвратныеОтходы
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Отходы
	|ГДЕ
	|	Отходы.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Отходы.Организация В (&МассивОрганизаций)
	|	И Отходы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Отходы.Количество < 0
	|	И Отходы.Активность
	|	И Отходы.РазделУчета В (
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты),
	|		ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаОтветхранение))
	|	И Отходы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отходы.АналитикаУчетаНоменклатуры,
	|	Отходы.РазделУчета,
	|	Отходы.ВидЗапасов,
	|	Отходы.Организация
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ

// Формирует текст запроса для получения временной таблицы завершенных партий производства
// 
// Возвращаемое значение:
// 	Строка - Текст запроса формирования временной таблицы ЗавершенныеПартии
Функция ТекстЗапросаЗавершенныеПартии() Экспорт
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Материалы.Партия КАК Партия
	|ПОМЕСТИТЬ ПартииПроизводстваПредварительная
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период,, 
	|		Организация В (&МассивОрганизаций)
	|		И ТИПЗНАЧЕНИЯ(Партия) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ Партия = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)
	|	) КАК Материалы
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Прочие.ПартияПроизводства КАК Партия
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период,, 
	|		Организация В (&МассивОрганизаций)
	|		И ТИПЗНАЧЕНИЯ(ПартияПроизводства) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК Прочие
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Труд.ПартияПроизводства КАК Партия
	|ИЗ
	|	РегистрНакопления.ТрудозатратыНезавершенногоПроизводства.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период,, 
	|		Организация В (&МассивОрганизаций)
	|		И ТИПЗНАЧЕНИЯ(ПартияПроизводства) = ТИП(Справочник.ПартииПроизводства)
	|		И НЕ ПартияПроизводства = ЗНАЧЕНИЕ(Справочник.ПартииПроизводства.ПустаяСсылка)) КАК Труд
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрПартииПроизводства.Ссылка КАК Партия
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК СпрПартииПроизводства
	|		ПО СпрПартииПроизводства.Документ = ВыпускПродукции.Регистратор
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВыпускПродукции.Организация В (&МассивОрганизаций)
	//++ НЕ УТКА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыЭтапа.ПартияПроизводства КАК Партия
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|		ПО РеквизитыЭтапа.Ссылка = ВыпускПродукции.Регистратор
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВыпускПродукции.Организация В (&МассивОрганизаций)
	//++ Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыЭтапа.ПартияПроизводства КАК Партия
	|ИЗ
	|	Документ.ОтчетПереработчика.Продукция КАК ВыпускПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|		ПО РеквизитыЭтапа.Ссылка = ВыпускПродукции.ЭтапПроизводства
	|ГДЕ
	|	ВыпускПродукции.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВыпускПродукции.Ссылка.Организация В (&МассивОрганизаций)
	//-- Устарело_Переработка24
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыЭтапа.ПартияПроизводства КАК Партия
	|ИЗ
	|	Документ.ОтчетПереработчика2_5.ВыходныеИзделия КАК ВыпускПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|		ПО РеквизитыЭтапа.Ссылка = ВыпускПродукции.ЭтапПроизводства
	|ГДЕ
	|	ВыпускПродукции.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВыпускПродукции.Ссылка.Организация В (&МассивОрганизаций)
	//-- НЕ УТКА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партии.Ссылка	КАК Партия,
	|	Партии.Документ	КАК ДокументПартии
	|ПОМЕСТИТЬ ПартииПроизводства
	|ИЗ
	|	ПартииПроизводстваПредварительная КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииПроизводства КАК Партии
	|		ПО Т.Партия = Партии.Ссылка
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПартии,
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииПроизводства.Партия КАК Партия
	|ПОМЕСТИТЬ ЗавершенныеПартии
	|ИЗ
	|	(
	// Производство без заказа и отчеты переработчика без этапов
	|	ВЫБРАТЬ
	|		ПартииПроизводства.Партия	КАК Партия,
	|		НАЧАЛОПЕРИОДА(ВыпускПродукции.Период, МЕСЯЦ) КАК Период
	|	ИЗ
	|		ПартииПроизводства КАК ПартииПроизводства
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|		ПО ВыпускПродукции.Регистратор = ПартииПроизводства.ДокументПартии
	//++ НЕ УТКА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Этапы производства (завершенные, собственными силами)
	|	ВЫБРАТЬ
	|		ПартииПроизводства.Партия	КАК Партия,
	|		НАЧАЛОПЕРИОДА(Изделия.ДатаПроизводства, МЕСЯЦ) КАК Период
	|	ИЗ
	|		ПартииПроизводства КАК ПартииПроизводства
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|		ПО РеквизитыДокумента.Распоряжение = ПартииПроизводства.ДокументПартии
	|		И РеквизитыДокумента.ПартияПроизводства = ПартииПроизводства.Партия
	|		И РеквизитыДокумента.Проведен
	|		И НЕ РеквизитыДокумента.ПроизводствоНаСтороне
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
	|		ПО Изделия.Ссылка = РеквизитыДокумента.Ссылка
	|		И Изделия.Произведено
	|		И НЕ Изделия.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Этапы производства (не завершенные, собственными силами) - плановая дата производства может меняться в любой момент
	|	ВЫБРАТЬ
	|		ПартииПроизводства.Партия		КАК Партия,
	|		ДАТАВРЕМЯ(3999,12,31,23,59,59)	КАК Период
	|	ИЗ
	|		ПартииПроизводства КАК ПартииПроизводства
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК РеквизитыДокумента
	|		ПО РеквизитыДокумента.Распоряжение = ПартииПроизводства.ДокументПартии
	|		И РеквизитыДокумента.ПартияПроизводства = ПартииПроизводства.Партия
	|		И РеквизитыДокумента.Проведен
	|		И НЕ РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|		И НЕ РеквизитыДокумента.ПроизводствоНаСтороне
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Изделия
	|		ПО Изделия.Ссылка = РеквизитыДокумента.Ссылка
	|		И НЕ Изделия.Произведено
	|		И НЕ Изделия.Отменено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Заказ на производство без спецификаций - дата завершения неопределена
	|	ВЫБРАТЬ
	|		ПартииПроизводства.Партия		КАК Партия,
	|		ДАТАВРЕМЯ(3999,12,31,23,59,59)	КАК Период
	|	ИЗ
	|		ПартииПроизводства КАК ПартииПроизводства
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыДокумента
	|		ПО РеквизитыДокумента.Ссылка = ПартииПроизводства.ДокументПартии
	|
	|	ГДЕ
	|		РеквизитыДокумента.Проведен
	|		И РеквизитыДокумента.Организация В (&МассивОрганизаций)
	|		И РеквизитыДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)
	|		И РеквизитыДокумента.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	//-- НЕ УТКА
	|	) КАК ПартииПроизводства
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПроизводства.Партия
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПартииПроизводства.Период) <= &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|";
	
КонецФункции

// Процедура-обработчик проверки состояния системы "НераспределенныеПостатейныеРасходы".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНераспределенныхПостатейныхРасходов(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Вставить("Период", ПараметрыПроверки.ДополнительныеПараметры.Период);
	ПараметрыЗапроса.Вставить("Организации", ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	ТекстЗапроса = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(1, Истина);
	
	// Доп. параметры запроса.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоВсемОрганизациям",	 	Ложь);
	ДополнительныеПараметры.Вставить("ПоВсемПодразделениям", 	Истина);
	ДополнительныеПараметры.Вставить("СписокПодразделений",  	Новый Массив);
	ДополнительныеПараметры.Вставить("ФильтрПоСостоянию",    	Перечисления.СостоянияРаспределенияРасходов.ОшибкаРаспределения);
	ДополнительныеПараметры.Вставить("ИсключитьИзКонтроляРазницы", Истина);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиУпр",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыУпр);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиРегл", ПараметрыЗакрытия.ЗначениеПогрешностиРасходыРегл);
	ДополнительныеПараметры.Вставить("ВариантыРаспределенияРасходов", 
		ПроизводствоСерверПовтИсп.ПолучитьПроизводственныеВариантыРаспределения());
	ДополнительныеПараметры.Вставить("УчетПоНаправлениямДеятельности", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	ДополнительныеПараметры.Вставить("ИспользоватьУчетЗатратПоНаправлениямДеятельности", ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"СостояниеРаспределенияРасходов",
		НСтр("ru = 'Обнаружены некорректно распределенные постатейные расходы по организации ""%1"" на конец периода %2';
			|en = 'Itemized expenses allocated incorrectly by the ""%1"" company were found as of the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "НераспределенныеПостатейныеРасходыБезДокументов".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНераспределенныхПостатейныхРасходовБезДокументов(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Вставить("Период", ПараметрыПроверки.ДополнительныеПараметры.Период);
	ПараметрыЗапроса.Вставить("Организации", ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	ТекстЗапроса = Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(1, Истина);
	
	// Доп. параметры запроса.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоВсемОрганизациям",	 	Ложь);
	ДополнительныеПараметры.Вставить("ПоВсемПодразделениям", 	Истина);
	ДополнительныеПараметры.Вставить("СписокПодразделений",  	Новый Массив);
	ДополнительныеПараметры.Вставить("ФильтрПоСостоянию",    	Перечисления.СостоянияРаспределенияРасходов.НеРаспределено);
	ДополнительныеПараметры.Вставить("ИсключитьИзКонтроляРазницы", Истина);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиУпр",  ПараметрыЗакрытия.ЗначениеПогрешностиРасходыУпр);
	ДополнительныеПараметры.Вставить("ЗначениеПогрешностиРегл", ПараметрыЗакрытия.ЗначениеПогрешностиРасходыРегл);
	ДополнительныеПараметры.Вставить("ВариантыРаспределенияРасходов", 
		ПроизводствоСерверПовтИсп.ПолучитьПроизводственныеВариантыРаспределения());
	ДополнительныеПараметры.Вставить("УчетПоНаправлениямДеятельности", ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат"));
	ДополнительныеПараметры.Вставить("ИспользоватьУчетЗатратПоНаправлениямДеятельности", ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности"));
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"СостояниеРаспределенияРасходов",
		НСтр("ru = 'Обнаружены не распределенные постатейные расходы по организации ""%1"" на конец периода %2';
			|en = 'Unallocated itemized expenses by the ""%1"" company were found as of the end of the period %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

//-- НЕ УТ

// Процедура-обработчик проверки состояния системы "НераспределенныеПостатейныеРасходыНапродажу".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНераспределенныхПостатейныхРасходовНаПродажу(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗакрытия = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Вставить("Период", ПараметрыПроверки.ДополнительныеПараметры.Период);
	ПараметрыЗапроса.Вставить("Организации", ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовУпр
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовУпр = &ВариантРаспределенияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовРегл
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовРегл = &ВариантРаспределенияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовНУ
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовНУ = &ВариантРаспределенияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходовУпр.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	СтатьиРасходовУпр КАК СтатьиРасходовУпр
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходовРегл.Ссылка
	|ИЗ
	|	СтатьиРасходовРегл КАК СтатьиРасходовРегл
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходовНУ.Ссылка
	|ИЗ
	|	СтатьиРасходовНУ КАК СтатьиРасходовНУ
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Заказы.ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ НезакрытыеЗаказы
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(&ГраницаКонецПериода, ЗаказКлиента.Организация В (&МассивОрганизаций)) КАК Заказы;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ НеРаспределенныеРасходыНаПродажу
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)
	|	И НЕ АналитикаРасходов ССЫЛКА Документ.ЗаказКлиента
	|	И СтатьяРасходов В
	|		(ВЫБРАТЬ
	|			СтатьиРасходов.Ссылка КАК Ссылка
	|		ИЗ
	|			СтатьиРасходов КАК СтатьиРасходов)) КАК ПрочиеРасходыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовУпр КАК Упр
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = Упр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовРегл КАК Регл
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = Регл.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовНУ КАК НУ
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = НУ.Ссылка
	|ГДЕ
	|	(Упр.Ссылка ЕСТЬ НЕ NULL
	|	И (ПрочиеРасходыОстатки.СуммаОстаток <> 0
	|	ИЛИ ПрочиеРасходыОстатки.СуммаБезНДСОстаток <> 0
	|	ИЛИ ПрочиеРасходыОстатки.СуммаУпрОстаток <> 0)
	|	ИЛИ Регл.Ссылка ЕСТЬ НЕ NULL
	|	И ПрочиеРасходыОстатки.СуммаРеглОстаток <> 0
	|	ИЛИ НУ.Ссылка ЕСТЬ НЕ NULL
	|	И ПрочиеРасходыОстатки.СуммаРеглОстаток - ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток -
	|		ПрочиеРасходыОстатки.ВременнаяРазницаОстаток <> 0)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаКонецПериода, Организация В (&МассивОрганизаций)
	|	И АналитикаРасходов ССЫЛКА Документ.ЗаказКлиента
	|	И СтатьяРасходов В
	|		(ВЫБРАТЬ
	|			СтатьиРасходов.Ссылка КАК Ссылка
	|		ИЗ
	|			СтатьиРасходов КАК СтатьиРасходов)) КАК ПрочиеРасходыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовУпр КАК Упр
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = Упр.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовРегл КАК Регл
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = Регл.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовНУ КАК НУ
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = НУ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ НезакрытыеЗаказы КАК НезакрытыеЗаказы
	|		ПО ПрочиеРасходыОстатки.АналитикаРасходов = НезакрытыеЗаказы.ЗаказКлиента
	|ГДЕ
	|	НезакрытыеЗаказы.ЗаказКлиента ЕСТЬ NULL
	|	И (Упр.Ссылка ЕСТЬ НЕ NULL
	|	И (ПрочиеРасходыОстатки.СуммаОстаток <> 0
	|	ИЛИ ПрочиеРасходыОстатки.СуммаБезНДСОстаток <> 0
	|	ИЛИ ПрочиеРасходыОстатки.СуммаУпрОстаток <> 0)
	|	ИЛИ Регл.Ссылка ЕСТЬ НЕ NULL
	|	И ПрочиеРасходыОстатки.СуммаРеглОстаток <> 0
	|	ИЛИ НУ.Ссылка ЕСТЬ НЕ NULL
	|	И ПрочиеРасходыОстатки.СуммаРеглОстаток - ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток -
	|		ПрочиеРасходыОстатки.ВременнаяРазницаОстаток <> 0)
	|";
	
	Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(1, Истина);
	
	// Доп. параметры запроса.
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантРаспределенияРасходов", 
		Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж);
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НеРаспределенныеРасходыНаПродажу",
		НСтр("ru = 'Обнаружены нераспределенные постатейные расходы на продажу по организации ""%1"" на конец периода %2';
			|en = 'Unallocated itemized sales expenses by the %1 company were found at the end of the period: %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "ПроверкаНераспределенныхПостатейныхРасходовИнтеркампани".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаНераспределенныхПостатейныхРасходовИнтеркампани(ПараметрыПроверки) Экспорт
	
	Если ПараметрыПроверки.ДополнительныеПараметры.РежимЗакрытияМесяца = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	
	ПараметрыЗапроса = Документы.РаспределениеПрочихЗатрат.ОписаниеПараметровЗапросаПолученияДанныхДляРаспределения();
	ПараметрыЗапроса.Вставить("Период", ПараметрыПроверки.ДополнительныеПараметры.Период);
	ПараметрыЗапроса.Вставить("Организации", ПараметрыПроверки.ДополнительныеПараметры.МассивОрганизаций);
	Документы.РаспределениеПрочихЗатрат.ИнициализироватьЗапросПолученияДанныхДляРаспределения(Запрос, ПараметрыЗапроса);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовРегл
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовРегл В (&ВариантРаспределенияРасходов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатьиРасходовНУ
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.ВариантРаспределенияРасходовНУ В (&ВариантРаспределенияРасходов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиРасходовРегл.Ссылка
	|ПОМЕСТИТЬ СтатьиРасходов
	|ИЗ
	|	СтатьиРасходовРегл КАК СтатьиРасходовРегл
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтатьиРасходовНУ.Ссылка
	|ИЗ
	|	СтатьиРасходовНУ КАК СтатьиРасходовНУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	ПрочиеРасходыОстатки.СуммаРеглОстаток КАК СуммаРеглОстаток,
	|	ПрочиеРасходыОстатки.СуммаРеглОстаток
	|		- ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток
	|		- ПрочиеРасходыОстатки.ВременнаяРазницаОстаток КАК СуммаНУОстаток
	|
	|ПОМЕСТИТЬ ПрочиеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(&ГраницаКонецПериода,
	|		Организация В (&МассивОрганизаций)
	|		И СтатьяРасходов В
	|			(ВЫБРАТЬ
	|				СтатьиРасходов.Ссылка КАК Ссылка
	|			ИЗ
	|				СтатьиРасходов КАК СтатьиРасходов)
	|	) КАК ПрочиеРасходыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// Запрос аналогичный функции ТекстЗапросаТаблицаВтПрочиеРасходы() в модуле менеджера регистра ПрочиеРасходы.
	|ВЫБРАТЬ 
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	МАКСИМУМ(РеестрДокументов.Организация) КАК Организация
	|
	|ПОМЕСТИТЬ ВтРеестрДокументовПрочиеРасходы
	|ИЗ 
	|	ПрочиеРасходыОстатки КАК ПрочиеРасходыОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|			ПО ПрочиеРасходыОстатки.АналитикаРасходов = РеестрДокументов.Ссылка
	|ГДЕ
	|	НЕ РеестрДокументов.ДополнительнаяЗапись
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходыОстатки.АналитикаРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВтРеестрДокументов.Организация КАК ОрганизацияАналитикиРасходов
	|ПОМЕСТИТЬ НеРаспределенныеРасходыИнтеркампани
	|ИЗ
	|	ПрочиеРасходыОстатки КАК ПрочиеРасходыОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтРеестрДокументовПрочиеРасходы КАК ВтРеестрДокументов
	|		ПО ПрочиеРасходыОстатки.АналитикаРасходов = ВтРеестрДокументов.АналитикаРасходов
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовРегл КАК Регл
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = Регл.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтатьиРасходовНУ КАК НУ
	|		ПО ПрочиеРасходыОстатки.СтатьяРасходов = НУ.Ссылка
	|ГДЕ
	|	ВтРеестрДокументов.Организация <> ПрочиеРасходыОстатки.Организация
	|	И (Регл.Ссылка ЕСТЬ НЕ NULL И ПрочиеРасходыОстатки.СуммаРеглОстаток <> 0
	|		ИЛИ НУ.Ссылка ЕСТЬ НЕ NULL И ПрочиеРасходыОстатки.СуммаНУОстаток <> 0)
	|";
	
	Документы.РаспределениеПрочихЗатрат.ТекстЗапросаДанныеДляРаспределения(1, Истина);
	
	// Доп. параметры запроса.
	ДополнительныеПараметры = Новый Структура;
	
	ВариантыРаспределения = Новый Массив();
	ВариантыРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	ВариантыРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПроизводства);
	ВариантыРаспределения.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьПродаж);
	ДополнительныеПараметры.Вставить("ВариантРаспределенияРасходов", ВариантыРаспределения);
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																|en = 'Business unit'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																|en = 'Expense item'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																|en = 'Expense dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																|en = 'Line of business'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"НеРаспределенныеРасходыИнтеркампани",
		НСтр("ru = 'Обнаружены остатки постатейных расходов в регламентированном учете на конец периода %2 по организации ""%1"", отнесенные на объект аналитики другой организации.
			 |Такие расходы подлежат распределению вручную.';
			 |en = 'For the %1 company, balances of itemized expenses allocated to the dimension object of another company are found in local accounting at the end of period %2.
			 |Allocate such expenses manually.'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса, ДополнительныеПараметры);
	
КонецПроцедуры

// Проверка необходимости включения настройки "Распределение доп. расходов по выбывшим товарам".
// Вызывается в процедуре определения состояния этапа расчета партий и себестоимости.
// Если в базе есть дополнительные расходы, которые можно распределить по выбывшим товарам, то рекомендуется включить данную настройку.
// В противном случае в результате расчета могут диагностироваться ошибки вида ""Обнаружены ненулевые остатки в по суммам при нулевом количестве в регистре себестоимости"".
//
// Возвращаемое значение:
//	Булево -
//
Функция ПроверитьНеобходимостьВключенияНастройкиРаспределениеДопРасходовПоВыбывшимТоварам(ПараметрыРасчета) Экспорт
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПараметрыРасчета.ПериодРегистрации))
	 ИЛИ Константы.РаспределениеДопРасходовПоВыбывшимТоварам.Получить() Тогда
		Возврат Ложь; // проверка нужна только при ПУ22 и выключенной настройке
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоМесяца(ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецПериода", 		КонецМесяца(ПараметрыРасчета.ПериодРегистрации));
	Запрос.УстановитьПараметр("МассивОрганизаций",  ПараметрыРасчета.МассивОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.Партия КАК Партия,
	|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС
	|ПОМЕСТИТЬ РасходыДляСписанияНаВыбытиеТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Т.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах), ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.СобственныеТоварыВПути))
	|	И Т.ТипЗаписи В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ОтклонениеВСтоимости), ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.РаспределениеПоВыбывшимТоварам), ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода))
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.Партия,
	|	Т.АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.Количество) = 0 И
	|	(СУММА(Т.ДопРасходы) <> 0
	|		ИЛИ СУММА(Т.ДопРасходыБезНДС) <> 0
	|		ИЛИ СУММА(Т.ДопРасходыРегл) <> 0
	|		ИЛИ СУММА(Т.ДопРасходыУпр) <> 0
	|		ИЛИ СУММА(Т.НДСРегл) <> 0
	|		ИЛИ СУММА(Т.НДСУпр) <> 0
	|		ИЛИ СУММА(Т.ПостояннаяРазница) <> 0
	|		ИЛИ СУММА(Т.ВременнаяРазница) <> 0
	|		ИЛИ СУММА(Т.СтоимостьНДД) <> 0
	|		)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.РазделУчета КАК РазделУчета,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.Организация КАК Организация,
	|	Т.Партия КАК Партия,
	|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	МАКСИМУМ(Т.ЕстьОстатки) КАК ЕстьОстатки,
	|	МАКСИМУМ(Т.ЕстьОбороты) КАК ЕстьОбороты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		Т.РазделУчета КАК РазделУчета,
	|		Т.ВидЗапасов КАК ВидЗапасов,
	|		Т.Организация КАК Организация,
	|		Т.Партия КАК Партия,
	|		Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета КАК АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|		ВЫБОР
	|			КОГДА Т.КоличествоОстаток <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЕстьОстатки,
	|		ЛОЖЬ КАК ЕстьОбороты
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(&НачалоПериода, Организация В (&МассивОрганизаций)) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.АналитикаУчетаНоменклатуры,
	|		Т.РазделУчета,
	|		Т.ВидЗапасов,
	|		Т.Организация,
	|		Т.Партия,
	|		Т.АналитикаУчетаПартий,
	|		Т.АналитикаФинансовогоУчета,
	|		Т.ВидДеятельностиНДС,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		РасходыДляСписанияНаВыбытиеТоваров КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Партия,
	|	Т.ВидДеятельностиНДС,
	|	Т.ВидЗапасов,
	|	Т.Организация,
	|	Т.АналитикаУчетаПартий,
	|	Т.РазделУчета,
	|	Т.АналитикаФинансовогоУчета,
	|	Т.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Т.ЕстьОстатки) = ЛОЖЬ И
	|	МАКСИМУМ(Т.ЕстьОбороты) = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой(); // надо включить, если нет начальных остатков по количеству и есть обороты без количества для списания
	
КонецФункции

// Процедура-обработчик проверки состояния системы "ИсходныеДанныеДляРасчетаСебестоимости".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаСоответствияОперативногоУчетаИСебестоимости(ПараметрыПроверки) Экспорт
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
	Если НЕ ЗначенияПараметров.ПроверятьСоответствияОперативногоУчетаИСебестоимости Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СУММА(Т.КоличествоСебестоимость) КАК КоличествоСебестоимость,
	|	СУММА(Т.КоличествоОперативное) КАК КоличествоОперативное
	|ПОМЕСТИТЬ ВТРасхожденияПредварительная
	|ИЗ
	|	(
	// Себестоимость товаров
	|	ВЫБРАТЬ
	|		Т.Организация					КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		Т.КоличествоОстаток				КАК КоличествоСебестоимость,
	|		0								КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И Организация В (&МассивОрганизаций)
	|			И НЕ РазделУчета В (
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НезавершенноеПроизводство),
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыВПути),
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссиюВПути),
	|				ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеНаКомиссиюВПути))
	|			И АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
				// Исключаем принятые на комиссию товары, которые были выкуплены.
	|			И НЕ (РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|				И АналитикаУчетаНоменклатуры.ТипМестаХранения = ЗНАЧЕНИЕ(Перечисление.ТипыМестХранения.Партнер))
	//++ НЕ УТ
	|			И НЕ ТИПЗНАЧЕНИЯ(Партия) В (
	//++ Устарело_Производство21

	//++ НЕ УТКА
	|										ТИП(Документ.ЗаказНаПроизводство),
	//-- НЕ УТКА

	//-- Устарело_Производство21
	|										ТИП(Справочник.ПартииПроизводства))
	//-- НЕ УТ
	|		) КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары организаций
	|	ВЫБРАТЬ
	|		Т.Организация		КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
	|		0					КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток	КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И Организация В (&МассивОрганизаций)
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	//++ НЕ УТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Материалы в производстве
	|	ВЫБРАТЬ
	|		Т.Организация		КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Аналитика.КлючАналитики
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
	|		0					КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток	КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И Номенклатура.ТипНоменклатуры В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			И Организация В (&МассивОрганизаций)
	|		) КАК Т
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Т.Номенклатура
	|		И Аналитика.Характеристика = Т.Характеристика
	|		И Аналитика.МестоХранения = Т.Подразделение
	|		И Аналитика.Серия = Т.Серия
	|		И Аналитика.Назначение = Т.Назначение
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Аналитика.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Аналитика.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Аналитика.МестоХранения
	|		И АналитикаБезНазначения.Серия = Аналитика.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	//-- НЕ УТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары организаций к передаче
	|	ВЫБРАТЬ
	|		Т.ВидЗапасовПродавца.Организация	КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ								КАК АналитикаУчетаНоменклатуры,
	|		0									КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток					КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизацийКПередаче.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И ВидЗапасовПродавца.Организация В (&МассивОрганизаций)
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|
	//++ НЕ УТ
	
	//++ Устарело_Переработка24
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары переданные переработчику
	|	ВЫБРАТЬ
	|		Т.ВидЗапасов.Организация	КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ						КАК АналитикаУчетаНоменклатуры,
	|		0							КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток			КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеПереработчику.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И ВидЗапасов.Организация В (&МассивОрганизаций)
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары полученные от переработчика
	|	ВЫБРАТЬ
	|		Т.Организация		КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
	|		0					КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток	КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыПолученныеОтПереработчика.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И Организация В (&МассивОрганизаций)
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	//-- Устарело_Переработка24
	|	
	//-- НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары переданные на комиссию
	|	ВЫБРАТЬ
	|		Т.ВидЗапасов.Организация	КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ						КАК АналитикаУчетаНоменклатуры,
	|		0							КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток			КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И ВидЗапасов.Организация В (&МассивОрганизаций)
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Товары к оформлению таможенных деклараций
	|	ВЫБРАТЬ
	|		Т.Организация		КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
	|		0					КАК КоличествоСебестоимость,
	|		Т.КоличествоОстаток	КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюДокументовИмпорта.Остатки(
	|			&ГраницаКонецПериода,
	|			&ВозможенРасчетСебестоимости
	|			И &ПартионныйУчетВерсии22
	|			И Организация В (&МассивОрганизаций)
	|			И ТипДокументаИмпорта = &ТипДокументаИмпорта
	|		) КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	//++ НЕ УТ
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Исключаем движения из себестоимости, выполняемые оффлайн
	|	ВЫБРАТЬ
	|		Т.Организация					КАК Организация,
	|		Т.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|		Т.Количество					КАК КоличествоСебестоимость,
	|		0								КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.СебестоимостьТоваров КАК Т
	|	ГДЕ
	|	&ВозможенРасчетСебестоимости
	|		И &ПартионныйУчетВерсии22
	|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И НЕ Т.Количество = 0
	|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) В (
	//++ Устарело_Производство21
	|			ТИП(Документ.СписаниеЗатратНаВыпуск),
	|			ТИП(Документ.ВыпускПродукции),
	//++ НЕ УТКА
	|			ТИП(Документ.МаршрутныйЛистПроизводства),
	//-- НЕ УТКА

	//-- Устарело_Производство21
	|			ТИП(Документ.РаспределениеПроизводственныхЗатрат))
	|		И Т.Организация В (&МассивОрганизаций)
	|		И Т.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|																	ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|		И (ТИПЗНАЧЕНИЯ(Т.КорПартия) В (
	//++ Устарело_Производство21

	//++ НЕ УТКА
	|			ТИП(Документ.ЗаказНаПроизводство),
	//-- НЕ УТКА

	//-- Устарело_Производство21
	|			ТИП(Справочник.ПартииПроизводства))
	//++ Устарело_Производство21
	|			ИЛИ ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.ВыпускПродукции)
	|			И НЕ ТИПЗНАЧЕНИЯ(Т.Партия) В (
	//++ НЕ УТКА
	|				ТИП(Документ.ЗаказНаПроизводство),
	//-- НЕ УТКА
	|				ТИП(Справочник.ПартииПроизводства))
	//-- Устарело_Производство21
	|			)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Исключаем движения из товаров организаций, выполняемые оффлайн
	|	ВЫБРАТЬ
	|		Т.Организация					КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Т.АналитикаУчетаНоменклатуры
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ				КАК АналитикаУчетаНоменклатуры,
	|		0								КАК КоличествоСебестоимость,
	|		Т.Количество					КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций КАК Т
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Т.АналитикаУчетаНоменклатуры.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Т.АналитикаУчетаНоменклатуры.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Т.АналитикаУчетаНоменклатуры.МестоХранения
	|		И АналитикаБезНазначения.Серия = Т.АналитикаУчетаНоменклатуры.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Т.АналитикаУчетаНоменклатуры.СтатьяКалькуляции
	|	
	|	ГДЕ
	|		&ВозможенРасчетСебестоимости
	|		И &ПартионныйУчетВерсии22
	|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) = ТИП(Документ.РаспределениеПроизводственныхЗатрат)
	|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Т.Организация В (&МассивОрганизаций)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Исключаем движения из материалов в производстве, выполняемое оффлайн
	|	ВЫБРАТЬ
	|		Т.Организация	КАК Организация,
	|		ВЫБОР
	|			КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|				ТОГДА Аналитика.КлючАналитики
	|			ИНАЧЕ АналитикаБезНазначения.КлючАналитики
	|		КОНЕЦ			КАК АналитикаУчетаНоменклатуры,
	|		0				КАК КоличествоСебестоимость,
	|		Т.Количество	КАК КоличествоОперативное
	|	ИЗ
	|		РегистрНакопления.МатериалыИРаботыВПроизводстве КАК Т
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = Т.Номенклатура
	|		И Аналитика.Характеристика = Т.Характеристика
	|		И Аналитика.МестоХранения = Т.Подразделение
	|		И Аналитика.Серия = Т.Серия
	|		И Аналитика.Назначение = Т.Назначение
	|		И Аналитика.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И АналитикаБезНазначения.Номенклатура = Аналитика.Номенклатура
	|		И АналитикаБезНазначения.Характеристика = Аналитика.Характеристика
	|		И АналитикаБезНазначения.МестоХранения = Аналитика.МестоХранения
	|		И АналитикаБезНазначения.Серия = Аналитика.Серия
	|		И АналитикаБезНазначения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И АналитикаБезНазначения.СтатьяКалькуляции = Аналитика.СтатьяКалькуляции
	|
	|	ГДЕ
	|		&ВозможенРасчетСебестоимости
	|		И &ПартионныйУчетВерсии22
	|		И Т.Организация В (&МассивОрганизаций)
	|		И Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|		И Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ТИПЗНАЧЕНИЯ(Т.Регистратор) В (
	//++ Устарело_Производство21
	|				ТИП(Документ.СписаниеЗатратНаВыпуск),
	//++ НЕ УТКА
	|				ТИП(Документ.МаршрутныйЛистПроизводства),
	//-- НЕ УТКА

	//-- Устарело_Производство21
	|				ТИП(Документ.РаспределениеПроизводственныхЗатрат))
	|		И Т.Номенклатура.ТипНоменклатуры В (
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	//-- НЕ УТ
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(Т.КоличествоСебестоимость) >= 0 И
	|	СУММА(Т.КоличествоСебестоимость) <> СУММА(Т.КоличествоОперативное)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Организация,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.КоличествоСебестоимость,
	|	Т.КоличествоОперативное
	|ПОМЕСТИТЬ ВТРасхожденияСебестоимостиИТоваровОрганизаций
	|ИЗ
	|	ВТРасхожденияПредварительная КАК Т
	|ГДЕ
	|	ИСТИНА
	//++ НЕ УТКА
	
	//++ Устарело_Переработка24
	// Исключаем работы давальца
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.СебестоимостьТоваров КАК РаботыДляДавальца
	|		ГДЕ
	|			РаботыДляДавальца.АналитикаУчетаНоменклатуры = Т.АналитикаУчетаНоменклатуры
	|			И РаботыДляДавальца.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|			И РаботыДляДавальца.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			И РаботыДляДавальца.Организация = Т.Организация
	|			И РаботыДляДавальца.Период <= &КонецПериода
	|			И РаботыДляДавальца.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Партия)
	|			И РаботыДляДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)
	|			И РаботыДляДавальца.КорАналитикаУчетаНоменклатуры <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
	|		)
	//-- Устарело_Переработка24
	
	//-- НЕ УТКА
	|";
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																|en = 'Item dimension'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоСебестоимость",		НСтр("ru = 'Количество (учет себестоимости)';
																|en = 'Quantity (cost accounting)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("КоличествоОперативное",		НСтр("ru = 'Количество (оперативный учет)';
																|en = 'Quantity (operational accounting)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВТРасхожденияСебестоимостиИТоваровОрганизаций",
		НСтр("ru = 'Обнаружены расхождения по количеству между остатками регистра себестоимости и остатками оперативных регистров по организации ""%1"" на конец периода %2';
			|en = 'Variances in quantity between balances of the cost register and balances of processing registers are found for the ""%1"" company as of the end of the %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
	
	Если ПараметрыПроверки.ДополнительныеПараметры.Свойство("НачалоПериода") Тогда
		ДатаПроверки = ПараметрыПроверки.ДополнительныеПараметры.НачалоПериода;
	Иначе
		ДатаПроверки = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВозможенРасчетСебестоимости",
		РасчетСебестоимостиПовтИсп.ВозможенРасчетСебестоимости(ДатаПроверки));
	ДопПараметры.Вставить("УчитыватьСебестоимостьТоваровПоНазначениям",
		РасчетСебестоимостиПовтИсп.СебестоимостьТоваровПоНазначениям(ДатаПроверки));
	ДопПараметры.Вставить("ТипДокументаИмпорта",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ТаможеннаяДекларацияИмпорт"));
	
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса,
		ДопПараметры);
	
КонецПроцедуры

// Процедура-обработчик проверки состояния системы "АналитикиСПереполнениемПолей".
//
// Параметры:
// ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура ПроверкаАналитикСПереполнениемПолей(ПараметрыПроверки) Экспорт
	
	ПараметрыПроверки.ДополнительныеПараметры.Вставить("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроверки.ДополнительныеПараметры.МенеджерВременныхТаблиц;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Организация КАК Организация,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.Партия КАК Партия,
	|	Т.ВидДеятельностиНДС КАК ВидДеятельностиНДС
	|
	|ПОМЕСТИТЬ ВтАналитикиСПереполнениемПолей
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК Т
	|ГДЕ
	|	Т.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Т.Организация В(&МассивОрганизаций)
	|	И Т.РасчетСебестоимости
	|	И Т.РасчетНеЗавершен
	|	И НЕ Т.Регистратор ССЫЛКА Документ.КорректировкаРегистров
	|	И Т.Активность
	|";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПоВсемОрганизациям",	 	Ложь);
	
	СписокПолей = Новый СписокЗначений;
	СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
															|en = 'Company'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика учета номенклатуры';
																|en = 'Inventory location attributes'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия расходов';
																|en = 'Expense lot'", ОбщегоНазначения.КодОсновногоЯзыка()));
	СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																|en = 'VAT activity type'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемПроверки(
		"ВтАналитикиСПереполнениемПолей",
		НСтр("ru = 'Стоимость некоторых аналитик номенклатуры не может быть рассчитана при решении СЛУ по организации ""%1"" за период %2';
			|en = 'Cost of some item dimensions cannot be calculated upon solving LES for the ""%1"" company for %2 period'", ОбщегоНазначения.КодОсновногоЯзыка()),
		СписокПолей,
		,
		Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя());
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемыВыполненияПроверки(
		ПараметрыПроверки,
		ПараметрыРегистрации,
		ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедуры

// Записывает в ИБ информацию о проблеме, диагностированной при выполнении расчета партий и себестоимости.
// Является оберткой к процедуре ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета().
//
// Параметры:
//	ПараметрыРасчета  - Структура - параметры расчета, см. ИнициализироватьОбщиеПараметрыРасчета()
//	МассивОрганизаций - Массив - организации, к которым относится проблема
//							если не указано, то проблема относится к каждой из рассчитываемых организаций
//	ТекстПроблемы 	  - Строка - краткая информация о проблеме; выводится в форме закрытия месяца
//	ТекстУточнения 	  - Строка - подробное описание проблемы; проблемы в форме закрытия месяца группируются по ТекстПроблемы + Важность, а данный текст выводится в форме расшифровки проблем
//	Объект 			  - Произвольный - объект для расшифровки проблемы
//	Важность 		  - ПеречислениеСсылка.ВажностьПроблемыУчета - статус проблемы; по умолчанию "Ошибка".
//	
Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ПараметрыРасчета, МассивОрганизаций = Неопределено,
			ТекстПроблемы = "", ТекстУточнения = "", Объект = Неопределено, Важность = Неопределено) Экспорт
	
	ЭтоПараметрыРасчетаПУ22 = ПараметрыРасчета.Свойство("ЭтоПараметрыРасчетаПУ22");
	
	// Запишем информацию о наличии ошибок в механизме закрытия месяца.
	Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
		ОрганизацииДляПротокола = МассивОрганизаций;
	Иначе		
		ОрганизацииДляПротокола = ?(ЭтоПараметрыРасчетаПУ22, ПараметрыРасчета.КопияМассивОрганизаций, ПараметрыРасчета.МассивОрганизаций);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОрганизацииДляПротокола) Тогда
		ОрганизацииДляПротокола = Справочники.Организации.ДоступныеОрганизации();
	КонецЕсли;
	
	ОрганизацииДляПротокола = ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииДляПротокола);
	
	Если НЕ ЗначениеЗаполнено(ТекстПроблемы) Тогда
		ТекстПроблемы = НСтр("ru = 'При выполнении расчета были диагностированы ошибки';
							|en = 'Errors were found when calculating'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	ПолныйТекстПроблемы = ТекстПроблемы
		+ ?(ОрганизацииДляПротокола.Количество() = 1, " " + НСтр("ru = 'по организации ""%1"" за период ""%2""';
																|en = 'of the ""%1"" company for the ""%2"" period'", ОбщегоНазначения.КодОсновногоЯзыка()), "");
	
	Для Каждого ТекущаяОрганизация Из ОрганизацииДляПротокола Цикл
		
		ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
			Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
			ТекущаяОрганизация,
			ПараметрыРасчета.РасчетныйПериод.НачалоПериода);
		
		ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРегистрации,
			ПолныйТекстПроблемы,
			Важность,
			СтрЗаменить(ТекстУточнения, СлужебныйСимвол_ПроблемаУжеЗарегистрирована(), ""),
			Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция РасшифровкаПроблемВыполненияРасчета(ИдентификаторПравила, УточнениеПравилаПроверки = "") Экспорт
	
	ТекстОшибки = "";
	СписокПолей = Новый СписокЗначений;
	ИмяОбъектаМетаданных = "";
	ИмяПоляОбъекта = "";
	
	Если ИдентификаторПравила = "АналитикиСПереполнениемПолей" Тогда
		
		ТекстОшибки = НСтр("ru = 'Стоимость некоторых аналитик номенклатуры не может быть рассчитана при решении СЛУ';
							|en = 'The cost of some item dimensions cannot be calculated when solving LES'");
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика учета номенклатуры';
																	|en = 'Inventory location attributes'"));
		СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия расходов';
																	|en = 'Expense lot'"));
		СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																	|en = 'VAT activity type'"));
		
	//++ НЕ УТ
	ИначеЕсли ИдентификаторПравила = "НераспределенныеПостатейныеРасходы" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены некорректно распределенные постатейные расходы';
							|en = 'Itemized expenses allocated incorrectly are found'");
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя();
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"));
		СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"));
		СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"));
		СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																	|en = 'Line of business'"));
		
	ИначеЕсли ИдентификаторПравила = "ОстаткиВНезавершенномПроизводстве" Тогда
		
		Если УточнениеПравилаПроверки = "ОстаткиМатериальныхЗатрат" Тогда

			ТекстОшибки = НСтр("ru = 'Обнаружены остатки нераспределенных материальных затрат в себестоимости';
								|en = 'Balances of non-allocated material expenses are found'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
			
			СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																		|en = 'Accounting section'"));
			СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																		|en = 'Item dimension'"));
			СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																		|en = 'Lot'"));
			СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																		|en = 'Controlling attributes'"));
			СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																		|en = 'Quantity'"));
			СписокПолей.Добавить("ПолнаяСтоимость",				НСтр("ru = 'Полная стоимость';
																		|en = 'Full cost'"));
			СписокПолей.Добавить("ПолнаяСтоимостьБезНДС",		НСтр("ru = 'Полная стоимость без НДС';
																		|en = 'Full cost VAT exclusive'"));
			СписокПолей.Добавить("ПолнаяСтоимостьРегл",			НСтр("ru = 'Полная стоимость (регл.)';
																		|en = 'Full cost (local)'"));
			СписокПолей.Добавить("ПолнаяСтоимостьУпр",			НСтр("ru = 'Полная стоимость (упр.)';
																		|en = 'Full cost (manag.)'"));
			СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																		|en = 'Permanent difference'"));
			СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
																	|en = 'Temporary difference'"));
			СписокПолей.Добавить("СтоимостьНДД",				НСтр("ru = 'Стоимость НДД';
																	|en = 'AIT cost'"));
			
		ИначеЕсли УточнениеПравилаПроверки = "ОстаткиПостатейныхРасходов" Тогда
				
			ТекстОшибки = НСтр("ru = 'Обнаружены остатки нераспределенных постатейных расходов в регистре ""Прочие расходы незавершенного производства""';
								|en = 'Non-allocated itemized expense balances are found in the ""Other WIP expenses"" register'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПолноеИмя();
			
			СписокПолей.Добавить("Организация", 			 НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("Подразделение",			 НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"));
			СписокПолей.Добавить("НаправлениеДеятельности",	 НСтр("ru = 'Направление деятельности';
																	|en = 'Line of business'"));
			СписокПолей.Добавить("ПартияПроизводства",		 НСтр("ru = 'Партия производства';
																	|en = 'Production lot'"));
			СписокПолей.Добавить("СтатьяКалькуляции",		 НСтр("ru = 'Статья калькуляции';
																	|en = 'Product cost element'"));
			СписокПолей.Добавить("СтатьяРасходов",			 НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"));
			СписокПолей.Добавить("АналитикаРасходов",		 НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"));
			СписокПолей.Добавить("ГруппаПродукции",			 НСтр("ru = 'Группа продукции';
																	|en = 'Manufactured product group'"));
			СписокПолей.Добавить("ПравилоОтнесенияНаВыпуск", НСтр("ru = 'Правило отнесения на выпуск';
																	|en = 'Rule of allocating to release'"));
			СписокПолей.Добавить("Стоимость",				 НСтр("ru = 'Стоимость';
																	|en = 'Cost'"));
			СписокПолей.Добавить("СтоимостьБезНДС",			 НСтр("ru = 'Стоимость без НДС';
																	|en = 'Cost VAT exclusive'"));
			СписокПолей.Добавить("СтоимостьРегл",			 НСтр("ru = 'Стоимость (регл.)';
																	|en = 'Cost (local)'"));
			СписокПолей.Добавить("СтоимостьУпр",			 НСтр("ru = 'Стоимость (упр.)';
																	|en = 'Cost (manag.)'"));
			СписокПолей.Добавить("ПостояннаяРазница",		 НСтр("ru = 'Постоянная разница';
																	|en = 'Permanent difference'"));
			СписокПолей.Добавить("ВременнаяРазница",		 НСтр("ru = 'Временная разница';
																	|en = 'Temporary difference'"));
			СписокПолей.Добавить("СтоимостьНДД",				НСтр("ru = 'Стоимость НДД';
																	|en = 'AIT cost'"));
			
		ИначеЕсли УточнениеПравилаПроверки = "ОстаткиТрудозатрат" Тогда
				
			ТекстОшибки = НСтр("ru = 'Обнаружены остатки нераспределенных расходов по оплате труда в регистре ""Трудозатраты незавершенного производства""';
								|en = 'Non-allocated itemized expense balances are found in the ""WIP labor costs"" register'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства.ПолноеИмя();
			
			СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация';
																|en = 'Company'"));
			СписокПолей.Добавить("Подразделение",			НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"));
			СписокПолей.Добавить("ПартияПроизводства",		НСтр("ru = 'Партия производства';
																	|en = 'Production lot'"));
			СписокПолей.Добавить("СтатьяКалькуляции",		НСтр("ru = 'Статья калькуляции';
																	|en = 'Product cost element'"));
			СписокПолей.Добавить("ВидРабот",				НСтр("ru = 'Вид работ';
																|en = 'Activity kind'"));
			СписокПолей.Добавить("ГруппаПродукции",			НСтр("ru = 'Группа продукции';
																	|en = 'Manufactured product group'"));
			СписокПолей.Добавить("ВидФондаВзносов",			НСтр("ru = 'Вид фонда/взносов';
																	|en = 'Fund/contribution kind'"));
			СписокПолей.Добавить("Количество",				НСтр("ru = 'Количество';
																	|en = 'Quantity'"));
			СписокПолей.Добавить("Стоимость",				НСтр("ru = 'Стоимость';
																	|en = 'Cost'"));
			СписокПолей.Добавить("СтоимостьРегл",			НСтр("ru = 'Стоимость (регл.)';
																	|en = 'Cost (local)'"));
			СписокПолей.Добавить("НормативнаяСтоимость",	НСтр("ru = 'Нормативная стоимость';
																|en = 'Standard cost'"));
			СписокПолей.Добавить("СтоимостьНДД",			НСтр("ru = 'Стоимость НДД';
																|en = 'AIT cost'"));
			
		КонецЕсли;
		
	//-- НЕ УТ
	
	ИначеЕсли ИдентификаторПравила = "ПроверкаРезультатаРасчетаПоКоличеству" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены отрицательные остатки партий в себестоимости';
							|en = 'Negative balances of lots in the cost are found'");
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
			СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																		|en = 'Accounting section'"));
			СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																		|en = 'Item dimension'"));
			СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																		|en = 'Inventory owner attributes'"));
			СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																		|en = 'VAT activity type'"));
			СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																		|en = 'Lot'"));
			СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru = 'Аналитика учета партий';
																	|en = 'Lot: vendor attributes'"));
			СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																		|en = 'Controlling attributes'"));
			СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																		|en = 'Quantity'"));
			
	ИначеЕсли ИдентификаторПравила = "ИсходныеДанныеДляРасчетаСебестоимости" Тогда
		
		Если УточнениеПравилаПроверки = "ВТОтрицательныеОстатки" Тогда

			ТекстОшибки = НСтр("ru = 'Обнаружены отрицательные остатки по количеству в регистре себестоимости';
								|en = 'Negative inventory is found for quantity in the cost register'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();

			СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																		|en = 'Accounting section'"));
			СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																		|en = 'Item dimension'"));
			СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																		|en = 'Inventory owner attributes'"));
			СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																		|en = 'Quantity'"));
		
		ИначеЕсли УточнениеПравилаПроверки = "ВТНеОформленоПоступлениеРабот" Тогда
			
			ТекстОшибки = НСтр("ru = 'Не отражены поступления работ в подразделения';
								|en = 'Work receipts to business units are not recorded'");

			СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																		|en = 'Item dimension'"));
			СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																		|en = 'Quantity'"));
		
		ИначеЕсли УточнениеПравилаПроверки = "ВТНеотфактурованныеПоставки" Тогда

			ТекстОшибки = НСтр("ru = 'Фактуровки превышают неотфактурованные поставки';
								|en = 'Invoiced deliveries exceed goods received not invoiced'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
			СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																	|en = 'Company'"));
			СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																		|en = 'Accounting section'"));
			СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																		|en = 'Item dimension'"));
			СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																		|en = 'Inventory owner attributes'"));
			СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																		|en = 'Quantity'"));
		
		//++ НЕ УТ
		ИначеЕсли УточнениеПравилаПроверки = "ПартииСЗатратамиПослеДатыПроизводства" Тогда

			ТекстОшибки = НСтр("ru = 'Обнаружены затраты по завершенным партиям производства.
				|Все затраты должны быть отражены не позже месяца завершения выполнения работ по партии производства.';
				|en = 'Costs of finished production lots are found.
				|All costs must be recorded within the month of work completion on the production lot.'");
			ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
			СписокПолей.Добавить("Организация",			НСтр("ru = 'Организация';
																|en = 'Company'"));
			СписокПолей.Добавить("ПартияПроизводства",	НСтр("ru = 'Партия производства';
																|en = 'Production lot'"));
			СписокПолей.Добавить("Затрата",				НСтр("ru = 'Затрата';
																|en = 'Expense'"));
		
		//-- НЕ УТ
		
		ИначеЕсли УточнениеПравилаПроверки = "ВтНесоответствиеНастроекДокументовРаспределения" Тогда

			ТекстОшибки = НСтр("ru = 'Обнаружены документы распределения расходов, настройки которых не соответствуют варианту распределения в статье расходов.
				|Необходимо привести настройки статьи расходов в соответствие, либо удалить и перезаполнить некорректные документы распределения.';
				|en = 'Expense allocation documents with settings that do not match the allocation option in the expense item are detected.
				|Adjust the expense item settings or delete and refill incorrect allocation documents.'");
			ИмяПоляОбъекта = "Документ";
			
			СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация';
																|en = 'Company'"));
			СписокПолей.Добавить("Документ",				НСтр("ru = 'Документ';
																|en = 'Document'"));
			СписокПолей.Добавить("ВидУчета",				НСтр("ru = 'Вид учета';
																|en = 'Accounting kind'"));
			СписокПолей.Добавить("Подразделение", 			НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"));
			СписокПолей.Добавить("СтатьяРасходов", 			НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"));
			СписокПолей.Добавить("ВариантРаспределения",	НСтр("ru = 'Вариант распределения';
																|en = 'Allocation option'"));
			СписокПолей.Добавить("НазначениеПоСтатье",		НСтр("ru = 'Настройка по статье расходов';
																	|en = 'Setting by expense item'"));
			СписокПолей.Добавить("НазначениеПоДокументу",	НСтр("ru = 'Настройка документа';
																	|en = 'Document setting'"));
		
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли ИдентификаторПравила = "УказаниеВозвратныхОтходовВМатериалах" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружено использование возвратных отходов как материалов в производственных документах';
							|en = 'Use of recyclable waste as materials in production documents is found'");
		
		СписокПолей.Добавить("Организация", 			НСтр("ru = 'Организация';
															|en = 'Company'"));
		СписокПолей.Добавить("ПроизводственныйДокумент",	НСтр("ru = 'Документ производства';
																|en = 'Production document'"));
		
	//-- НЕ УТ
	ИначеЕсли ИдентификаторПравила = "ПоступлениеТоваровВПути" Тогда
		
		ТекстОшибки = НСтр("ru = 'Поступления из товаров в пути превышают остатки товаров в пути';
							|en = 'Receipts from goods in transit exceed balance of goods in transit'");
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																	|en = 'Accounting section'"));
		СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																	|en = 'Item dimension'"));
		СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																	|en = 'Inventory owner attributes'"));
		СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																	|en = 'Quantity'"));
		
	ИначеЕсли ИдентификаторПравила = "СоответствиеОперативногоУчетаИСебестоимости" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены расхождения по количеству между остатками регистра себестоимости и остатками оперативных регистров';
							|en = 'Discrepancies in the quantity between balances of the cost register and balances of processing registers are found'");
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																	|en = 'Item dimension'"));
		СписокПолей.Добавить("КоличествоСебестоимость",		НСтр("ru = 'Количество (учет себестоимости)';
																	|en = 'Quantity (cost accounting)'"));
		СписокПолей.Добавить("КоличествоОперативное",		НСтр("ru = 'Количество (оперативный учет)';
																	|en = 'Quantity (operational accounting)'"));
		
	ИначеЕсли ИдентификаторПравила = "СоответствиеСуммИКоличества" Тогда
		
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя();

		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("РазделУчета",					НСтр("ru = 'Раздел учета';
																	|en = 'Accounting section'"));
		СписокПолей.Добавить("АналитикаУчетаНоменклатуры",	НСтр("ru = 'Аналитика номенклатуры';
																	|en = 'Item dimension'"));
		СписокПолей.Добавить("ВидЗапасов",					НСтр("ru = 'Вид запасов';
																	|en = 'Inventory owner attributes'"));
		СписокПолей.Добавить("Партия",						НСтр("ru = 'Партия';
																	|en = 'Lot'"));
		СписокПолей.Добавить("АналитикаУчетаПартий",		НСтр("ru = 'Аналитика учета партий';
																|en = 'Lot: vendor attributes'"));
		СписокПолей.Добавить("АналитикаФинансовогоУчета",	НСтр("ru = 'Аналитика финансового учета';
																	|en = 'Controlling attributes'"));
		СписокПолей.Добавить("ВидДеятельностиНДС",			НСтр("ru = 'Вид деятельности НДС';
																	|en = 'VAT activity type'"));
		СписокПолей.Добавить("Количество",					НСтр("ru = 'Количество';
																	|en = 'Quantity'"));
		СписокПолей.Добавить("ПолнаяСтоимость",				НСтр("ru = 'Полная стоимость';
																	|en = 'Full cost'"));
		СписокПолей.Добавить("ПолнаяСтоимостьБезНДС",		НСтр("ru = 'Полная стоимость без НДС';
																	|en = 'Full cost VAT exclusive'"));
		СписокПолей.Добавить("ПолнаяСтоимостьРегл",			НСтр("ru = 'Полная стоимость (регл.)';
																	|en = 'Full cost (local)'"));
		СписокПолей.Добавить("ПолнаяСтоимостьУпр",			НСтр("ru = 'Полная стоимость (упр.)';
																	|en = 'Full cost (manag.)'"));
		//++ НЕ УТ
		СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																	|en = 'Permanent difference'"));
		СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
																|en = 'Temporary difference'"));
		//-- НЕ УТ
		СписокПолей.Добавить("СтоимостьНДД",				НСтр("ru = 'Стоимость НДД';
																|en = 'AIT cost'"));
		
		Если УточнениеПравилаПроверки = "ВТОстаткиБезКоличества" Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены ненулевые остатки по суммам при нулевом остатке по количеству в регистре себестоимости';
								|en = 'Non-zero balance is found with zero quantity balance in the cost register'");
		ИначеЕсли УточнениеПравилаПроверки = "ВТОстаткиСРазнымЗнаком" Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены разные знаки у остатков по суммам и остатка по количеству в регистре себестоимости';
								|en = 'Different characters in remaining amounts and remaining quantity are found in the cost register'");
		КонецЕсли;
		
	ИначеЕсли ИдентификаторПравила = "ЗатратыНеРаспределенныеНаСебестоимость" Тогда
		
		ИмяОбъектаМетаданных = Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя();
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("Подразделение",				НСтр("ru = 'Подразделение';
																	|en = 'Business unit'"));
		СписокПолей.Добавить("СтатьяРасходов",				НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"));
		СписокПолей.Добавить("АналитикаРасходов",			НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"));
		СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																	|en = 'Line of business'"));
		СписокПолей.Добавить("Сумма",						НСтр("ru = 'Сумма';
																	|en = 'Amount'"));
		СписокПолей.Добавить("СуммаБезНДС",					НСтр("ru = 'Сумма без НДС';
																	|en = 'Amount excluding VAT'"));
		СписокПолей.Добавить("СуммаРегл",					НСтр("ru = 'Сумма (регл.)';
																	|en = 'Amount (local)'"));
		//++ НЕ УТ
		СписокПолей.Добавить("ПостояннаяРазница",			НСтр("ru = 'Постоянная разница';
																	|en = 'Permanent difference'"));
		СписокПолей.Добавить("ВременнаяРазница",			НСтр("ru = 'Временная разница';
																|en = 'Temporary difference'"));
		//-- НЕ УТ
		СписокПолей.Добавить("СуммаНДД",					НСтр("ru = 'Сумма НДД';
																|en = 'AIT amount'"));
		
		Если УточнениеПравилаПроверки = "ВТОстаткиНераспределенныхРасходов" Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены не распределенные на себестоимость остатки расходов';
								|en = 'Expense balance not allocated to cost is found'");
		ИначеЕсли УточнениеПравилаПроверки = "ВТОстаткиНераспределенныхРасходовПоНекорректнымАналитикам" Тогда
			ТекстОшибки = НСтр("ru = 'Обнаружены остатки расходов по аналитикам, в которых указаны непроведенные документы';
								|en = 'Balances of expenses by dimensions, in which unposted documents are specified, are found'");
		КонецЕсли;
		
	ИначеЕсли ИдентификаторПравила = "ЗаписиСПризнакомРасчетНеЗавершен" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены неподобранные партии в движениях документов';
							|en = 'Unpicked lots are found in document register records'");
		ИмяПоляОбъекта = "Регистратор";
		
		СписокПолей.Добавить("Организация", 		НСтр("ru = 'Организация';
														|en = 'Company'"));
		СписокПолей.Добавить("ИмяРегистра", 		НСтр("ru = 'Имя регистра';
														|en = 'Register name'"));
		СписокПолей.Добавить("Регистратор", 		НСтр("ru = 'Документ';
														|en = 'Document'"));
		СписокПолей.Добавить("КоличествоДвижений", 	НСтр("ru = 'Количество движений';
															|en = 'Number of records'"));
		
	//++ НЕ УТ
	ИначеЕсли ИдентификаторПравила = "ЗатратыНеРаспределенныеПоПравилам" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены документы распределения материалов и работ, по которым не выполнено распределение затрат в регистре себестоимости товаров';
							|en = 'Documents of material and labor allocation whose costs are not allocated in the inventory cost register are found'");
		
		СписокПолей.Добавить("Организация");
		СписокПолей.Добавить("Регистратор");
		СписокПолей.Добавить("КонецПериода");
	
	ИначеЕсли ИдентификаторПравила = "РаспределениеРезервовПредстоящихРасходов" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружен расход резервов предстоящих расходов сверх величины резерва (списано больше, чем начислено)';
							|en = 'Expense of provisions and contingent liabilities exceeding the reserve amount is found (it was written off more than accrued)'");
		
		СписокПолей.Добавить("Организация", 				НСтр("ru = 'Организация';
																|en = 'Company'"));
		СписокПолей.Добавить("НаправлениеДеятельности",		НСтр("ru = 'Направление деятельности';
																	|en = 'Line of business'"));
		СписокПолей.Добавить("ОбъектУчетаРезервов",			НСтр("ru = 'Объект учета резервов';
																	|en = 'Reserve accounting object'"));
		СписокПолей.Добавить("ВидРезервов",					НСтр("ru = 'Вид резервов';
																	|en = 'Reserve kind'"));
		СписокПолей.Добавить("СуммаРегл",					НСтр("ru = 'Сумма (регл.)';
																	|en = 'Amount (local)'"));
		СписокПолей.Добавить("СуммаУпр",					НСтр("ru = 'Сумма (упр.)';
																|en = 'Amount (manag.)'"));
		
	//-- НЕ УТ
	
	//++ Локализация
	ИначеЕсли ИдентификаторПравила = "КорректностьПереходаНаПУ22" Тогда
		
		ТекстОшибки = НСтр("ru = 'Обнаружены некорректные движения переноса данных';
							|en = 'Incorrect data transfer records are found'");
		ИмяПоляОбъекта = "Регистратор";

		СписокПолей.Добавить("Организация",		НСтр("ru = 'Организация';
														|en = 'Company'"));
		СписокПолей.Добавить("ИмяРегистра",		НСтр("ru = 'Регистр';
														|en = 'Register'"));
		СписокПолей.Добавить("Регистратор",		НСтр("ru = 'Документ';
														|en = 'Document'"));
		
	//-- Локализация
	КонецЕсли;
	
	РасшифровкаПроблемы = Новый Структура;
	РасшифровкаПроблемы.Вставить("ТекстОшибки", 		 ТекстОшибки);
	РасшифровкаПроблемы.Вставить("СписокПолей", 		 СписокПолей);
	РасшифровкаПроблемы.Вставить("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);
	РасшифровкаПроблемы.Вставить("ИмяПоляОбъекта", 		 ИмяПоляОбъекта);
	
	Возврат РасшифровкаПроблемы;
	
КонецФункции

// Выполняет подготовительные действия к расчету в случае, если расчет вызывается не из механизма закрытия месяца.
//
// Возвращаемое значение:
//	Булево -
//
Функция ВыполнитьОперацииЗакрытияМесяцаДляПодготовкиКРасчетуЭтапа(СтрокаСхемыРасчета, ИдентификаторРасчета, ПроверятьАктивныеРасчеты = Истина) Экспорт
	
	Если ПроверятьАктивныеРасчеты Тогда

		// Проверим возможность запуска расчета.
		АктивныеРасчеты = РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакЗапускаРасчета(
			СтрокаСхемыРасчета.Организации,
			ИдентификаторРасчета,
			НСтр("ru = 'Выполняется актуализация данных партионного учета при формировании отчета';
				|en = 'Performance of the actualization of data of lot accounting when forming the report'", ОбщегоНазначения.КодОсновногоЯзыка()),
			НачалоМесяца(СтрокаСхемыРасчета.Дата),
			Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости);
		
		Если АктивныеРасчеты.ЕстьАктивныеРасчеты Тогда
			
			ОбщегоНазначения.СообщитьПользователю(АктивныеРасчеты.ТекстОшибки);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииПодготовкиКРасчетуЭтапа(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		НачалоМесяца(СтрокаСхемыРасчета.Дата),
		СтрокаСхемыРасчета.Организации);
	
	Возврат Истина;
	
КонецФункции

// Выполняет завершающие действия для расчета в случае, если расчет вызывается не из механизма закрытия месяца.
//
Процедура ВыполнитьОперацииЗакрытияМесяцаДляЗавершенияРасчетаЭтапа(СтрокаСхемыРасчета, ИдентификаторРасчета) Экспорт
	
	Обработки.ОперацииЗакрытияМесяца.ВыполнитьОперацииЗавершенияРасчетаЭтапа(
		Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости,
		НачалоМесяца(СтрокаСхемыРасчета.Дата),
		СтрокаСхемыРасчета.Организации);
	
	РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ИдентификаторРасчета);
	
КонецПроцедуры


// Получает перечень колонок таблицы значений.
// 
// Параметры:
// 	КоллекцияКолонок - КоллекцияКолонокТаблицыЗначений - 
// 	Исключения - Строка - Описание
// Возвращаемое значение:
// 	Строка - Описание
Функция ПереченьПолей(КоллекцияКолонок, Исключения = "") Экспорт
	
	ИсключаемыеПоля = Новый Структура(Исключения);
	ПереченьПолей = "";
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если НЕ ИсключаемыеПоля.Свойство(Колонка.Имя) Тогда
			ПереченьПолей = ПереченьПолей + ?(ЗначениеЗаполнено(ПереченьПолей), ", ", "") + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПереченьПолей;
	
КонецФункции

Процедура ВыбиратьДанныеДляРасчетаВоВременнуюТаблицу(Запрос, УсловиеОтбораДляОтладки = "")
	
	Запрос.Текст = ИзменитьПриемникЗапросаОписанияДанных(Запрос.Текст, "Данные");
	
	Если ЗначениеЗаполнено(УсловиеОтбораДляОтладки) Тогда
		
		// Иногда для упрощения отладки достаточно выбрать только часть данных.
		// Например, только данные по одной позиции номенклатуры.
		// В этом случае во второй параметр надо передать строку условий отбора "ГДЕ", например
		//   Т.АналитикаУчетаНоменклатуры.Номенклатура.Код = ""12345678""
		// Следует помнить, что рассчитанные таким образом неполные данные записывать в ИБ не следует,
		// т.к. это вызовет очистку всех остальных данных, не попавших в отбор.
		
		Запрос.Текст = Запрос.Текст + "
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ Данные_Временная
		|ИЗ
		|	Данные КАК Т
		|ГДЕ
		|	&УсловиеОтбораДляОтладки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ Данные
		|ИЗ
		|	Данные_Временная КАК Т
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Данные_Временная";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораДляОтладки", УсловиеОтбораДляОтладки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодставитьШаблоныВесаИОбъемаВТекстЗапроса(ТекстЗапроса, ПсевдонимТаблицы = "СпрНоменклатура") Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Вес", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ПсевдонимТаблицы + ".ЕдиницаИзмерения", ПсевдонимТаблицы, Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Объем", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ПсевдонимТаблицы + ".ЕдиницаИзмерения", ПсевдонимТаблицы, Ложь));
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция РасчетВызванДляРасшифровки(ПараметрыРасчета) Экспорт
	
	Возврат ПараметрыРасчета <> Неопределено И ПараметрыРасчета.Свойство("РасшифровкаРаспределения");
	
КонецФункции

Функция РасчетСебестоимостиВыполненДляРасшифровки(ПараметрыРасчета) Экспорт
	
	Возврат ПараметрыРасчета <> Неопределено И ПараметрыРасчета.Свойство("РасчетСебестоимостиВыполнен");
	
КонецФункции


Процедура СкорректироватьАналитикиУчетаПартийПриРасчете(ПараметрыРасчета, ТекстЗапросаВыборкиАналитик) Экспорт
	
	Если НЕ ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.Свойство("АналитикиУчетаПартий") Тогда
		ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.Вставить("АналитикиУчетаПартий", Новый Соответствие);
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.НачалоФормированиеВременнойТаблицы(ПараметрыРасчета, "ВТАналитикиПартийСВидомЦенности");
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ВТИспользуемыеАналитикиУчетаПартий
	|ИЗ
	|	ТекстЗапросаВыборкиАналитик КАК Т
	|ГДЕ
	|	Т.АналитикаУчетаПартий <> ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|	И Т.АналитикаУчетаПартий <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(АналитикиНоменклатуры.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги)
	|		КОНЕЦ) КАК ВидЦенности
	|ПОМЕСТИТЬ ВТСтарыеАналитикиУчетаПартий
	|ИЗ
	|	ВТИспользуемыеАналитикиУчетаПартий КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПартий КАК АналитикиПартий
	|		ПО Т.АналитикаУчетаПартий = АналитикиПартий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикиНоменклатуры
	|		ПО Т.АналитикаУчетаПартий = АналитикиНоменклатуры.Ссылка
	|ГДЕ
	|	(АналитикиПартий.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка)
	|			ИЛИ АналитикиПартий.ГруппаФинансовогоУчета <> ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка)
	|			ИЛИ АналитикиПартий.НалогообложениеНДС <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.АналитикаУчетаПартий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ИЗ
	|	ВТСтарыеАналитикиУчетаПартий КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекстЗапросаВыборкиАналитик", "(" + ТекстЗапросаВыборкиАналитик + ")");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		СформироватьАналитикиПартийСВидомЦенности(ПараметрыРасчета, "ВТСтарыеАналитикиУчетаПартий");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
		|	Т.АналитикаУчетаПартийСВидомЦенности КАК АналитикаУчетаПартийСВидомЦенности
		|ИЗ
		|	ВТАналитикиПартийСВидомЦенности КАК Т";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПараметрыРасчета.РаспределениеПартий.ДополнительныеСвойства.АналитикиУчетаПартий.Вставить(
				Выборка.АналитикаУчетаПартий,
				Выборка.АналитикаУчетаПартийСВидомЦенности);
		КонецЦикла;
		
	КонецЕсли;
	
	РасчетСебестоимостиПротоколРасчета.ОкончаниеФормированиеВременнойТаблицы(ПараметрыРасчета);
	
	УничтожитьВременныеТаблицы(ПараметрыРасчета,
		"ВТИспользуемыеАналитикиУчетаПартий, ВТСтарыеАналитикиУчетаПартий, ВТАналитикиПартийСВидомЦенности");
	
КонецПроцедуры

// Процедура для отладки расчета.
//
// Возвращаемое значение:
//	Строка -
//
Функция СтекВызоваРаспределенияПартий(ПараметрыРасчета, ДобавлятьВРезультатПервыйУзел = Истина) Экспорт
	
	ОписаниеСтека = "";
	
	Если ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() = 0 Тогда
		Возврат ОписаниеСтека;
	КонецЕсли;
	
	Статистика = ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета[ПараметрыРасчета.РаспределениеПартий.СтатистикаРасчета.Количество() - 1];
	
	Если Статистика.ТекущаяГлубина < 1 Тогда
		Возврат ОписаниеСтека;
	КонецЕсли;
	
	ОписаниеСтека = "";
	
	Для ПЦ = 0 По Статистика.ТекущаяГлубина - 1 + ?(ДобавлятьВРезультатПервыйУзел, 0, -1) Цикл
		ОписаниеСтека = Формат(Статистика.СтекВызовов[ПЦ], "ЧН=0; ЧГ=") + ?(ОписаниеСтека = "", "", "; ") + ОписаниеСтека;
	КонецЦикла;
	
	Возврат ОписаниеСтека;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПараметрыОперацийЗакрытияМесяца

// Формирует описание группа технологических параметров.
//
// Возвращаемое значение:
//	см. КонстантаМенеджерЗначения.НастройкиЗакрытияМесяца.ИнициализироватьОписаниеГруппПараметровОперации
//
Функция ОписаниеГруппПараметровОперацииЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ    = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	РежимОтладки	 = ЗакрытиеМесяцаСервер.РежимОтладкиРасчета();
	
	ВерсияПлатформыНеНиже8_3_14 = ВерсияПлатформыНеНижеУказанной("8.3.14.0");
	
	ОписаниеГруппПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеГруппПараметровОперации();
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "РешениеСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Решение СЛУ';
										|en = 'LES solution'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, влияющие на результат решения системы линейных уравнений, с помощью которой выполняется расчет стоимости номенклатуры.';
			|en = 'Parameters affecting the result of solving systems of linear equations using which the cost of products is calculated.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ПогрешностиРешенияСЛУ";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Погрешности решения СЛУ';
										|en = 'LES solution errors'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, влияющие на определение погрешностей решения СЛУ.
		|Максимальное значение ресурса, которую можно считать ошибкой округления, полученной в результате решения СЛУ.
		|Т.к. СЛУ не всегда решается с ""нулевой"" точностью, то при расчете накапливаются ошибки округления, которые, в свою очередь,
		|приводят к тому, что в регистрах могут появиться ""зависшие"" остатки в рассчитываемых ресурсах.
		|Эти ""зависшие"" остатки по окончании расчета просто списываются из ресурсов регистра.
		|Параметры этой группы также используются в операции ""Настройка распределения расходов"".';
		|en = 'Parameters defining LES solution errors.
		|Maximum resource value that can be considered as a rounding error resulted from LES solution.
		|As LES is not always solved with ""zero"" accuracy, rounding errors accumulate during calculation and, in turn,
		|cause ""lost balances"" in calculated resources of registers.
		|This lost balance is written off from the register resources after the calculation is finished.
		|Parameters of this group are also used in the ""Expense allocation settings"" operation.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ОграниченияВыборки";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Ограничения на размер различных структур данных';
										|en = 'Size limitation of different data structures'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, ограничивающие максимальный размер различных типов данных, используемых механизмом расчета.
		|Необходимы для предотвращения ошибок нехватки памяти.';
		|en = 'Parameters limiting the maximum size of different data types used in calculation.
		|Required to prevent low memory errors.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "КонфликтыБлокировок";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Обход проблем конфликта блокировки данных';
										|en = 'Data lock conflict problems workaround'");
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, позволяющие обойти некоторые проблемы, связанные с конфликтом блокировки данных при записи.';
			|en = 'Parameters to work around some of the problems associated with data lock conflict when writing.'");
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ОграниченияФЗ";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Управление многопоточностью';
										|en = 'Multithreading control'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть 		= ЭтоФайловаяИБ ИЛИ ЭтоОбластьДанных;
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, накладывающие ограничения на фоновые задания, используемые для
		|  - многопоточного расчета партий;
		|  - параллельной записи сформированных движений.
		|Необходимы для предотвращения ошибок нехватки памяти.
		|Используются только в клиент-серверной информационной базе,
		|т.к. в файловом режиме Платформа не поддерживает параллельную работу фоновых заданий.';
		|en = 'Parameters that restrict background jobs used for 
		| - Concurrent lot calculation.
		|- Parallel saving of generated records.
		|Required to prevent low memory errors.
		|Used only in client/server infobase,
		|as the platform does not support parallel processing of background jobs in the file mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "УправлениеИтогами";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Управление итогами регистров';
										|en = 'Register totals management'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, влияющие на скорость запись движений по регистрам, сформированным механизмом расчета.';
			|en = 'Parameters that affect records saving speed by registers generated by calculation.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "НачальныеОстатки";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Переход на партионный учет версии 2.2';
										|en = 'Migration to lot accounting 2.2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, влияющие на формирование начальных остатков партий в регистре ""Себестоимость товаров"".';
			|en = 'Parameters that influence generation of opening balance of lots in the ""Inventory cost"" register.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "Проверки";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Проверки данных';
										|en = 'Data checks'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, используемые в процедурах проверки данных до и после расчета.';
			|en = 'Parameters used in data check procedures before and after calculation.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ВыгрузкаДанныхРасчета";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Выгрузка промежуточных данных расчета';
										|en = 'Export intermediate calculation data'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, позволяющие сохранить промежуточные данные расчета партий и себестоимости.';
			|en = 'Parameters which allow you to save intermediate calculation data of lots and cost.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ВозможностиРазныхВерсийПлатформы";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Использование возможностей Платформы';
										|en = 'Using the Platform features'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть		= НЕ ВерсияПлатформыНеНиже8_3_14;
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, позволяющие задействовать или отключить возможности, предоставляемые разными версиями Платформы.';
			|en = 'The parameters which allow you to use or disable features provided by different versions of the Platform.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "Отладка";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Отладка расчета';
										|en = 'Calculation debugging'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть		= НЕ РежимОтладки;
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, используемые для отладки механизмов расчета.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!';
		|en = 'Parameters used to debug calculation.
		|These parameters can be changed only in test infobases.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	ОписаниеГруппы = ОписаниеГруппПараметров.Добавить();
	ОписаниеГруппы.Имя 			= "ГруппаАвтоматическоеТестирование";
	ОписаниеГруппы.Наименование = НСтр("ru = 'Автоматическое тестирование';
										|en = 'Automatic testing'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписаниеГруппы.Скрыть		= НЕ РежимОтладки;
	ОписаниеГруппы.Описание 	=
		НСтр("ru = 'Параметры, используемые при автоматическом тестировании регламентных операций по закрытию месяца.
		|Изменять данные параметры рекомендуется только в тестовых информационных базах!';
		|en = 'Parameters used upon automatic testing of month-end close.
		|We recommend that you change these parameters only in test infobases.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ОписаниеГруппПараметров;
	
КонецФункции

// Формирует описание технологических параметров.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Имя - Строка -
// * Наименование - Строка -
// * Описание - Строка -
// * СтарыеИмена - Строка -
// * Родитель - Строка -
// * ТипЗначения - ОписаниеТипов -
// * СписокВыбора - СписокЗначений -
// * ДиапазонС - Дата, Число -
// * ДиапазонПо - Дата, Число -
// * Скрыть - Булево -
// * ЗначениеПоУмолчанию - Произвольный - 
// * ДополнительныеСвойства - Произвольный -
// 
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт
	
	ЭтоФайловаяИБ      = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ЭтоОбластьДанных   = ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	РежимОтладки	   = ЗакрытиеМесяцаСервер.РежимОтладкиРасчета();
	
	ВерсияПлатформыНеНиже8_3_14 = ВерсияПлатформыНеНижеУказанной("8.3.14.0");
	ВерсияПлатформыНеНиже8_3_14_1831 = ВерсияПлатформыНеНижеУказанной("8.3.14.1831");
	ВерсияПлатформыНеНиже8_3_17 = ВерсияПлатформыНеНижеУказанной("8.3.17.0");
	
	#Область РешениеСЛУ
		
		Родитель = "РешениеСЛУ";
		
		// ТребуемаяТочность
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ТребуемаяТочность";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Точность решения СЛУ';
														|en = 'Accuracy of solving the LES'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 9, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ДиапазонПо    	  = 0.1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0.000001;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Точность решения системы линейных уравнений - максимальное значение разницы решений, полученных на итерациях n и (n+1).
			|Чем меньше данное значение, тем более точный получается результат решения СЛУ (стоимость номенклатуры),
			|но тем большее количество итераций решения СЛУ требуется, чтобы достигнуть этой точности.';
			|en = 'Accuracy of solving LES is a maximum value of the difference of solutions received in iterations n and (n+1).
			|The smaller this value, the more accurate is the LES solution result (product cost),
			| but more LES solution iterations are required to attain this accuracy.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// МаксимальноеКоличествоИтераций
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоИтераций";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество итераций поиска решения СЛУ';
														|en = 'Maximum number of LES solution search iterations'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ДиапазонПо     	  = 9999;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 200;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество итераций, допустимое для поиска решения системы линейных уравнений.
			|Необходимо для того, чтобы принудительно закончить поиск подходящего решения СЛУ в случае, если не удается достичь требуемой точности решения СЛУ.';
			|en = 'Maximum quantity of iterations allowed for searching for LES solution.
			|This is necessary in order to forcefully finish searching for the required LES solution in case the required accuracy of LES solution cannot be attained.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ИспользованиеВычислительныхРесурсов
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИспользованиеВычислительныхРесурсов";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Количество потоков при решении СЛУ';
														|en = 'Number of streams in LES solution'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ДиапазонПо     	  = 9999;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Если указано значение 0, прикладное решение будет использовать n-1 поток,
			|где n – максимальное число неконкурирующих потоков, которые можно запустить на компьютере
			|(обычно количество потоков равно числу ядер, при использовании %Парам1% – удвоенному числу ядер). 
			|Не рекомендуется устанавливать значение больше максимального возможного числа неконкурирующих потоков –
			|это приведет к замедлению работы прикладного решения.';
			|en = 'If 0 is specified, the application will use n-1 thread,
			|where n is the maximum number of non-competing threads that can be launched on the computer
			| (usually the number of threads is equal to the number of cores, if %Парам1% is used, the number of cores is doubled).
			|It is not recommended to set the value higher than the maximum possible number of non-competing threads –
			|this will slow down the application.'");
		
		
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "HyperThreading");
		 
		// ГраницаИзмененияАлгоритмаРешения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ГраницаИзмененияАлгоритмаРешения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Граница изменения алгоритма расчета';
														|en = 'Calculation algorithm change limit'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ДиапазонПо     	  = 999999;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Число, начиная с которого почти полный подграф считается существенным и обрабатывается алгоритмом для полного графа (а не для разреженных). 
			|Не рекомендуется выставлять слишком маленьким или слишком большим – решение замедлится.
			|Оптимальное значение от 5000 до 100000 (зависит от конкретных данных).';
			|en = 'The number starting from which an almost complete subgraph is considered significant and processed by the algorithm for a complete graph (not for the sparse ones). 
			| A number too small or too large is not recommended – the application will slow down.
			| The optimum value is from 5,000 to 100,000 depending on specific data.'");
		
		 // РазрядностьДляРасчетов
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РазрядностьДляРасчетов";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Разрядность числовых полей, используемых при решении СЛУ.';
														|en = 'Digital field capacity used while solving LES.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ЗначениеПоУмолчанию = 28;
		ОписаниеПараметра.ДиапазонС     	  = 23;
		ОписаниеПараметра.ДиапазонПо     	  = 38;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Разрядность числа, используемая в запросах механизма расчета себестоимости.
			|Изменять значение параметра имеет смысл только в случае возникновения ошибок вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
			|При этом в результате повышения значения данного параметра возможно ухудшение точности расчета.
			|Указанное значение не должно превышать максимальную разрядность чисел, допустимую в используемой СУБД (38 - для всех СУБД кроме DB2, для DB2 - 31).
			|Подробнее про разрядность см. https://its.1c.ru/db/metod8dev#content:2665:hdoc';
			|en = 'Number of digits used in cost calculation queries. Change the parameter value only when errors, for example
			|""SQL error: Field overflow."" or ""Arithmetic overflow"", occur.
			|If the value of this parameter increases, the calculation may be  inaccurate.
			|The specified value must not exceed the maximum number of digits allowed in the used DBMS (38 digits for all DBMS exсept for DB2, 31 digits for DB2).
			|For more information on the number of digits, see https://its.1c.ru/db/metod8dev#content:2665:hdoc'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ЗащитаОтПереполненияПоля
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗащитаОтПереполненияПоля";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное значение, допустимое для суммового поля запроса';
														|en = 'Maximum value allowable for request sum field'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ДиапазонПо     	  = 31;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимально допустимая разрядность числа 1*10^х - значения суммы (цены) в строке временной таблицы решений при решении СЛУ.
			|Если сумма в строке получается больше, то такая строка считается ошибочной и отбрасывается.
			|В противном случае при решении СЛУ возможны ошибки вида ""Ошибка SQL: Переполнение поля."" или ""Arithmetic overflow"".
			|Если указано значение 0, то защита от переполнения не используется. 
			|Значение подобрано опытным путем.';
			|en = 'Maximum number of digits allowed in the 1*10^x number - sum (price) in a row of the temporary solution table when solving LES. 
			|If the sum in the row is greater, such row is considered as an error and is thrown away.
			|Otherwise, errors might occur when solving LES, for example, ""SQL error: Field overflow."" or ""Arithmetic overflow"". 
			|If the specified value is set to 0, then the overflow option is not used.
			|The value is picked by test.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область ПогрешностиРешенияСЛУ
		
		Родитель = "ПогрешностиРешенияСЛУ";
		
		// ЗначениеПогрешностиСебестоимостьРегл
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиСебестоимостьРегл";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная себестоимость (регл.), считаемая погрешностью';
														|en = 'Maximum cost (local) that is considered to be an error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для регл. ресурсов регистра %Парам1%.
			|Подробнее см. описание группы параметров.';
			|en = 'Used for local resources of the %Парам1% register.
			|For more information, see description of parameter group.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "СебестоимостьТоваров");
		
		 // ЗначениеПогрешностиСебестоимостьУпр
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиСебестоимостьУпр";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная себестоимость (упр.), считаемая погрешностью';
														|en = 'Maximum cost (manag.) that is considered to be an error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для упр. ресурсов регистра %Парам1%.
			|Подробнее см. описание группы параметров.';
			|en = 'Used for management resources of the %Парам1% register.
			|For more information, see description of parameter group.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "СебестоимостьТоваров");
		 
		 // ЗначениеПогрешностиРасходыРегл
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиРасходыРегл";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная сумма расходов (регл.), считаемая погрешностью';
														|en = 'Maximum expense amount (local) that is considered to be an error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для регл. ресурсов регистров %Парам1% и %Парам2% (в КА и ERP).
			|Подробнее см. описание группы параметров.';
			|en = 'Used for local resources of the %Парам1% and %Парам2% registers (in Process Automation and ERP).
			|For more information, see description of parameter group.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "ПрочиеРасходы");
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам2%", "ПрочиеРасходыНезавершенногоПроизводства");
		 
		 // ЗначениеПогрешностиРасходыУпр
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиРасходыУпр";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная сумма расходов (упр.), считаемая погрешностью';
														|en = 'Maximum expense amount (manag.) that is considered to be an error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 2, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 12;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для упр. ресурсов регистров %Парам1% и %Парам2% (в КА и ERP).
			|Подробнее см. описание группы параметров.';
			|en = 'Used for management resources of the %Парам1% and %Парам2% registers (in Process Automation and ERP).
			|For more information, see description of parameter group.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "ПрочиеРасходы");
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам2%", "ПрочиеРасходыНезавершенногоПроизводства");
		 
		 // ЗначениеПогрешностиКоличество
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЗначениеПогрешностиКоличество";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество, считаемое погрешностью';
														|en = 'Maximum quantity considered as an error'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(8, 3, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0.05;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для ресурсов %Парам1% и %Парам2% регистра %Парам3% (в КА и ERP).
			|Подробнее см. описание группы параметров.';
			|en = 'Used for resources %Парам1% and %Парам2% of the %Парам3% register (in Process Automation and ERP).
			|For more information, see description of parameter group.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "ДоляСтоимости");
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам2%", "ПоказательОтнесенияНаВыпуск");
		 ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам3%", "ПрочиеРасходыНезавершенногоПроизводства");
		
	#КонецОбласти
	
	#Область ОграниченияВыборки
		
		Родитель = "ОграниченияВыборки";
		
		// КоличествоСтрокВТЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоСтрокВТЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество строк в таблице значений';
														|en = 'Maximum number of lines in the table of values'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество строк, которое может быть помещено в таблицу значений.';
				|en = 'Maximum line quantity that can be placed to the value table.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// КоличествоЗаписейВНЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоЗаписейВНЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество строк в наборе записей';
														|en = 'Maximum number of lines in the record set'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 10000;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество строк, которое может быть помещено в набор записей регистра.
			|Если указать значение 0, то запись движений в ИБ после расчета выполняться не будет.
			|Не следует использовать эту возможность при расчете первого месяца после перехода на партионный учет версии 2.2,
			|т.к. при этом не будут записаны начальные остатки в разрезе партий и последующий расчет будет некорректным.';
			|en = 'Maximum number of lines that can be placed to the register record set.
			|If you specify a value equal to 0, records will not be saved to the infobase after calculation.
			|Do not use this option when calculating lots in the first month after migrating to lot accounting 2.2
			|as opening balance by lots will not be saved and the subsequent calculations will be incorrect.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// КоличествоРегистраторовВТранзакцииЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоРегистраторовВТранзакцииЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Количество регистраторов в транзакции записи';
														|en = 'Number of recorders in a record transaction'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 0;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Количество регистраторов, записываемых в одной транзакции.
			|Увеличение данного параметра незначительно уменьшает накладные расходы на проверку изменения регистраторов за время расчета,
			|но увеличивает время блокировки записываемой порции регистраторов, делая их недоступными для изменения пользователями во время расчета.';
			|en = 'Number of recorders saved in one transaction.
			|Increasing this parameter slightly reduces expenses of the recorder change check during the calculation
			|but increases the lock time of the portion of the recorders to save, making them unavailable for users to change during the calculation.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ПорцияРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПорцияРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная порция выборки данных при расчете партий';
														|en = 'Maximum data selection portion when calculating lots'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 15000;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество узлов, обсчитываемых за один проход в механизме распределения партий версии 2.2.';
				|en = 'Maximum number of nodes calculated per pass in lot allocation 2.2.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// МаксимальнаяДлинаЦепочки
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальнаяДлинаЦепочки";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальная длина цепочки движения партии';
														|en = 'Maximum length of lot record chain'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 650;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальная длина цепочки движения партии, которая может быть рассчитана механизмом партионного учета.
			|Если получается цепочка более длинная, то из-за рекурсивного вызова расчета возникнет ошибка ""Переполнение стека встроенного языка на сервере"".
			|Значение подобрано опытным путем.';
			|en = 'Maximum length of a lot record chain that can be calculated by lot accounting.
			|If the chain is longer, then the ""Script stack overflow on server"" error occurred due to recursive calculation call.
			|The value is picked by test.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область КонфликтыБлокировок

		Родитель = "КонфликтыБлокировок";
		
		// КоличествоПопытокЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоПопытокЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество попыток записи сформированных движений';
														|en = 'Maximum number of generated records writing attempts'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ДиапазонПо    	  = 5;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 2;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Если в информационной базе во время выполнения расчета идет активная работа пользователей, то при записи сформированных движений иногда могут возникать ошибки блокировки.
			|Чтобы попытаться исправить подобную проблему попытка записи сформированных движений одного регистратора может выполняться несколько раз, в соответствии со значением данного параметра.';
			|en = 'If the users are actively working with the infobase during the calculation, lock errors may sometimes occur when writing generated records.
			|In order to try fixing this problem, an attempt to write the generated records of one recorder can be performed several times in accordance with the value of this parameter.'");
		
	#КонецОбласти
	
	#Область ОграниченияФЗ
		
		Родитель = "ОграниченияФЗ";
		
		// МаксимальноеКоличествоФЗРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество одновременно выполняемых потоков расчета партий';
														|en = 'Maximum simultaneous lot calculation flows'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 1, 5));
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество одновременно запущенных фоновых заданий расчета партий.
			|Данные для расчета партий будут разделены на указанное количество порций (n) + 1,
			|после чего первая порция будет рассчитываться в основном сеансе, а остальные порции будут переданы для расчета в фоновые задания.
			|После окончания расчета всех порций результаты расчета будут собраны в основном сеансе и расчет перейдет к следующему этапу.
			|Если значение параметра равно 0, то расчет партий будет выполняться только в основном сеансе, без использования фоновых заданий.';
			|en = 'Maximum number of simultaneously started background jobs for lot calculation.
			|The lot calculation data will be divided into specified number of parts (n) + 1,
			|after that the first part will be calculated in the main session, and the rest will be transferred for the calculation in the background jobs.
			|Once all parts are calculated, the calculation results will be collected in the main session and calculation will be moved to another stage.
			|If the parameter value is 0, lot calculation will be performed only in the main session without using the background jobs.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// Стабильность многопоточной записи на разном железе зависит от сочетания нескольких факторов:
		// - количества активных фоновых заданий (чем больше заданий, тем больше надо памяти для сервера Предприятия)
		// - количества движений, записываемых одним заданием (чем больше движений - тем больше памяти надо этому заданию)
		// - одновременности выполнения записи одного регистра разными заданиями (чем больше заданий пишет один регистр,
		//		тем больше вероятность возникновения ошибок, например, "Lock request time out period exceeded").
	
		// МаксимальноеКоличествоФЗЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество одновременно выполняемых заданий записи';
														|en = 'Maximum simultaneous saving jobs'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, 0, ?(ЭтоОбластьДанных, 2, 5));
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество одновременно запущенных фоновых заданий записи движений.
			|При достижении этого количества фоновых заданий новое задания не создается до тех пор, пока не будет завершено одно из уже запущенных заданий.
			|Если значение параметра меньше 2, то запись движений будет выполняться последовательно, без использования фоновых заданий.';
			|en = 'The maximum number of simultaneously running register records writing background jobs.
			|When this number of background jobs is reached, a new job is not created until one of the already running jobs is completed.
			|If this parameter is less than 2, the register records writing will be performed sequentially without using background jobs.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// КоличествоДвиженийВФЗЗаписи
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КоличествоДвиженийВФЗЗаписи";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество движений в порции данных для записи';
														|en = 'Maximum number of register records per data batch for recording'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.ДиапазонС     	  = 1;
		ОписаниеПараметра.ЗначениеПоУмолчанию = 100000;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Размер порций, на которые разбиваются сформированные движения.
			|Каждая порция движений кэшируется и передается в фоновое задание для ее записи в ИБ.
			|При увеличении размера порции возможно незначительное увеличение скорости записи, но также возможно аварийное завершение расчета в случае нехватки памяти для большой порции данных.';
			|en = 'The size of the batches into which the generated register records are divided.
			|Each register records batch is cached and transferred to the background task for writing it to infobase.
			|When the batch size increases, the writing speed may increase slightly, but the calculation may also crash if there is not enough memory for a large data batch.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
		// МногопоточнаяЗаписьРегистра
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МногопоточнаяЗаписьРегистра";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Выполнять запись одного регистра в несколько потоков';
														|en = 'Record one register in multiple threads'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Влияет на параллельность записи движений одного регистра в нескольких фоновых заданиях.
			|В некоторых случаях при большом объеме данных регистров позволяет сократить общее время записи результатов расчета.
			|Однако, включение параметра может привести к возникновению конфликтов блокировок транзакций записи.
			|Если возникнет хоть одна такая ошибка, то весь расчет будет считаться завершенным аварийно и потребуется его повторный запуск.
			|Если параметр выключен, то одно фоновое задание записи целиком будет записывать один регистр.';
			|en = 'Affects the parallel saving of records of one register in several background jobs.
			|In some cases, with a large volume of register data, it reduces the total time for saving calculation results.
			|However, enabling the parameter may lead to saving transaction lock conflicts.
			|If at least one such error occurs, the entire calculation will be abnormally terminated, and you will need to restart it.
			|If the parameter is disabled, one background job will save one register.'");
		
		// ПредварительнаяЗаписьСформированныхДвижений
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПредварительнаяЗаписьСформированныхДвижений";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Запись сформированных движений до окончания расчета';
														|en = 'Save generated records before the end of calculation'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ЭтоФайловаяИБ, Ложь, Истина);
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Выполнять запись движений до окончания расчета, по мере их формирования.
			|Движения по некоторым регистрам окончательно сформированы уже в середине расчета.
			|Такие движения можно записывать в ИБ после их формирования, а не в самом конце расчета, вместе со всеми остальными регистрами.
			|Такой подход может ускорить общее время записи всех движений за счет того, что в конце расчета будет записываться меньшее количество регистров.';
			|en = 'Save records before the calculation ends, as soon as they are generated.
			|Some register records are generated in the middle of the calculation.
			|Such records can be saved to the infobase once they are generated, and not at the very end of the calculation together with all other registers.
			|This can speed up the total time for saving all registers, as fewer registers will be saved at the end of the calculation.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// МаксимальноеКоличествоФЗОтраженияВУчете
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоФЗОтраженияВУчете";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Максимальное количество одновременно выполняемых заданий отражения документов в учете';
														|en = 'Maximum number of simultaneously executed jobs of document recognition in accounting'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ОписаниеПараметра.Скрыть			  = ЭтоФайловаяИБ ИЛИ ЭтоОбластьДанных;
		ОписаниеПараметра.ДиапазонС     	  = 0;
		ОписаниеПараметра.ЗначениеПоУмолчанию = ?(ОписаниеПараметра.Скрыть, 0, 5);
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Максимальное количество одновременно запущенных фоновых заданий отражения документов в регистрах учета (регламентированного, международного, учета НДС).
			|Если значение параметра меньше 2, то отражение в учете выполняться последовательно, без использования фоновых заданий.';
			|en = 'Maximum number of simultaneously started background jobs of document recording in accounting registers (local, financial, VAT accounting).
			|If the parameter value is less than 2, the accounting recording is sequential, without background jobs.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область УправлениеИтогами
		
		Родитель = "УправлениеИтогами";
		
		// ОтключатьИтогиПередЗаписью
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключатьИтогиПередЗаписью";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Отключать итоги регистра перед записью движений';
														|en = 'Disable register totals before saving records'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Влияет на управление итогами регистра (текущими итогами и периодами рассчитанных итогов).
			|Если параметр установлен, то
			|- перед началом расчета запоминается состояние использования итогов по всем рассчитываемым регистрам,
			|- при записи движений по каждому регистру его итоги отключаются,
			|- при окончании записи всех движений состояние использования итогов возвращается к первоначальному.
			|Это позволяет ускорить запись движений, но по окончании расчета тратится некоторое время на пересчет итогов.';
			|en = 'Affects the management of the register totals (current totals and periods of calculated totals).
			|If the parameter is set, then
			|- Before calculation start, the state of using current totals is remembered for all maintained registers.
			|- When writing records for each register, its totals are disabled.
			|- Once all records are written, the state of using current totals returns to the initial one.
			|This allows you to speed up the records writing, but then it might take some time to recalculate the current totals.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область НачальныеОстатки
		
		Родитель = "НачальныеОстатки";
		
		// ВзятьОстаткиСебестоимостиИзРегистровПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВзятьОстаткиСебестоимостиИзРегистровПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Взять остатки себестоимости из партионных регистров';
														|en = 'Get cost balance from lot registers'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 остатки регистра себестоимости подгоняются под остатки регистров партий:
			|- сначала выполняется сторнирование всех остатков себестоимости на начало этого месяца,
			|- потом выполняется приход партий по данным партионных регистров.';
			|en = 'Used in lot accounting 2.2:
			|when calculating remaining lots in the first month after migrating to lot accounting 2.2, the cost register balance is adjusted to the lot register balance:
			|- First, reverse the cost balance as of the beginning of this month.
			|- Then execute lot receipt according to the lot register data.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// РаспределятьРасхожденияВСуммахПартийИСебестоимости
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РаспределятьРасхожденияВСуммахПартийИСебестоимости";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Распределять расхождения в суммах регистра себестоимости и регистров партий';
														|en = 'Allocate amount discrepancies in cost register and lot registers'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|при расчете остатков партий в первом месяце после перехода на партионный учет 2.2 разницы в суммах остатков себестоимости и остатков партий
			|распределяются на остатки партий пропорционально количеству в партии.
			|Данный параметр имеет смысл если не установлен предыдущий параметр.';
			|en = 'Used in lot accounting 2.2:
			|when calculating remaining lots in the first month after migrating to lot accounting 2.2, the differences in amounts of cost balance and remaining lots
			|are allocated to the remaining lots in proportion to the quantity in the lot.
			|This parameter makes sense if the previous parameter is not set.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область Проверки
		
		Родитель = "Проверки";
		
		// ПроверятьЗаписиСПризнакомРасчетНеЗавершен
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьЗаписиСПризнакомРасчетНеЗавершен";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Проверять подбор партий в сформированных движениях';
														|en = 'Check lot picking in the generated records'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|определяет, необходимо ли при окончании расчета выполнять проверку подбора партий в сформированных движениях.
			|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.';
			|en = 'Used in lot accounting 2.2:
			|determines whether to check lot picking in generated movements after calculation is completed.
			|Check is disabled by default as it is in the test mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ПроверятьСоответствиеСебестоимостиИПартийНДС
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьСоответствиеСебестоимостиИПартийНДС";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Проверять соответствие остатков в регистрах себестоимости и партий НДС (средняя)';
														|en = 'Check the correspondence of balance in the cost and VAT lots registers (average)'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|остатки по регистру ""Детализация партий товаров для НДС и УСН (средняя)"" должны соответствовать остаткам по регистру ""Себестоимость товаров"".
			|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.';
			|en = 'Used in lot accounting 2.2:
			|the ""Goods lot details for VAT and STS (average)"" register balance must match the ""Inventory cost"" register balance.
			|Check is disabled by default as it is in the test mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		// ПроверятьСоответствиеСебестоимостиИПартийНДСФИФОСкользящая
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьСоответствиеСебестоимостиИПартийНДСФИФОСкользящая";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Проверять соответствие остатков в регистрах себестоимости и партий НДС (ФИФО скользящая)';
														|en = 'Check the correspondence of balance in the cost and VAT lots registers (FIFO rolling)'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|остатки по регистрам ""Детализация себестоимости партий товаров"" должны соответствовать остаткам по регистру ""Себестоимость товаров"".
			|Проверка по умолчанию отключена, т.к. еще находится в режиме тестирования.';
			|en = 'Used in lot accounting 2.2:
			|balance of the ""Itemize goods lot cost"" registers must match the balance of the ""Inventory cost"" register.
			|Check is disabled by default as it is in the test mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
			
		// ПроверятьСоответствияОперативногоУчетаИСебестоимости
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьСоответствияОперативногоУчетаИСебестоимости";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Проверять соответствие оперативного учета и себестоимости';
														|en = 'Check correspondence of the operational accounting and cost'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|остатки по оперативным регистрам должны соответствовать остаткам по регистру ""Себестоимость товаров"".
			|Проверка по умолчанию отключена, т.к. находится в режиме тестирования.';
			|en = 'Used in the lot accounting version 2.2:
			|the balances for operational registers must match the ""Inventory cost"" register balance.
			|Check by default is disabled as it is in the test mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// СоответствиеРегистровПрочиеРасходыИПартийПрочихРасходов
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПроверятьСоответствиеПрочихРасходовИПартийПрочихРасходов";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Проверять соответствие регистров Прочие расходы и Партии прочих расходов';
														|en = 'Check the Other expenses and Material overheads for allocation registers correspondence'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина; // проверка используется для автоматического тестирования
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|остатки по регистру ""Партии прочих расходов"" должны соответствовать регистру ""Прочие расходы"".
			|Проверка по умолчанию отключена, т.к. находится в режиме тестирования.';
			|en = 'Used in the lot accounting version 2.2:
			|the balances in ""Material overheads for allocation"" register must match the ""Other expenses"" register.
			|Check is disabled by default as it is in the test mode.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти
	
	#Область ВыгрузкаДанныхРасчета
	
		Родитель = "ВыгрузкаДанныхРасчета";
		
		// КаталогДляСохраненияДанныхРасчетаПартий
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КаталогДляСохраненияДанныхРасчетаПартий";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Каталог для сохранения данных расчета партий';
														|en = 'Directory that stores lot calculation data'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|в указанный каталог будут сохранены данные, используемые при расчете одного из этапов расчета партий (см. описание следующего параметра).';
			|en = 'Used in lot accounting 2.2:
			|data used while calculating one of the lot calculation stages will be saved to the specified directory (see the next parameter description).'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ЭтапПартионногоУчета22ДляВыгрузкиВФайлы
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ЭтапПартионногоУчета22ДляВыгрузкиВФайлы";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Сохраняемый этап партионного учета 2.2';
														|en = 'Saved stage for lot accounting 2.2'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.СписокВыбора 		  = РасчетСебестоимости.ЭтапыСРаспределениемПартий();
		ОписаниеПараметра.СписокВыбора.Вставить(0, "", НСтр("ru = '<не выгружать>';
															|en = '<do not export>'", ОбщегоНазначения.КодОсновногоЯзыка()));
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет сохранить данные, используемые при расчете одного из этапов расчета партий:
			|- таблица Данные (данные для расчета)
			|- таблицы Источники и Приемники (связи исходных данных)
			|- таблица %Парам1% (результаты расчета)
			|Сохранение выполняется в указанный каталог (см. описание предыдущего параметра).
			|Следует иметь в виду, что при попытке выгрузить большой объем данных может возникнуть ошибка нехватки памяти и расчет прервется.';
			|en = 'Used in batch accounting 2.2:
			|allows saving data used when calculating one of the batch calculation stages:
			|- table Data (data for calculation)
			|- tables Sources and Receivers (source data links)
			|- table %Парам1% (calculation results)
			|Saved to the specified directory (see the description of the previous parameter).
			|You should note that trying to export a large amount of data may cause a low memory error and calculation will be canceled.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "РасчетныеПартии");
		 
		 // КаталогДляСохраненияДанныхСЛУ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КаталогДляСохраненияДанныхСЛУ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Каталог для сохранения СЛУ';
														|en = 'Directory for saving LES'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме расчета себестоимости:
			|в указанный каталог будут сохранены данные, используемые для составления СЛУ.';
			|en = 'Used in cost calculation:
			|data used for LES creation will be saved to the specified directory.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ФорматСохраненияДанныхСЛУ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ФорматСохраненияДанныхСЛУ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Формат сохранения СЛУ';
														|en = 'LES saving format'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "csv";
		ОписаниеПараметра.СписокВыбора.Добавить("mxl");
		ОписаниеПараметра.СписокВыбора.Добавить("csv");
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме расчета себестоимости:
			|определяет в каком виде будут сохранены данные СЛУ.
			|Следует иметь в виду, что при попытке выгрузить большой объем данных может возникнуть ошибка нехватки памяти и расчет прервется.';
			|en = 'Used in cost calculation:
			|determines how LES data is saved.
			|Note that if you try to export large amount of data, a low memory error may occur and calculation will be canceled.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	#КонецОбласти

	#Область ВозможностиРазныхВерсийПлатформы
		
		Родитель = "ВозможностиРазныхВерсийПлатформы";
		
		// ИспользоватьПлатформуДляРешенияСЛУ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИспользоватьПлатформуДляРешенияСЛУ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Использовать платформенный механизм решения СЛУ';
														|en = 'Use the platform mechanism to solve LES'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.Скрыть			  = НЕ ВерсияПлатформыНеНиже8_3_14;
		ОписаниеПараметра.ЗначениеПоУмолчанию = (НЕ ЭтоФайловаяИБ И ВерсияПлатформыНеНиже8_3_14) ИЛИ ВерсияПлатформыНеНиже8_3_14_1831;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Использование платформенного механизма %Парам1%. 
			|Данная функция позволяет сократить время расчета.
			|см. http://downloads.v8.1c.ru/content//Platform/8_3_14_1565/1cv8upd_8_3_14_1565.htm';
			|en = 'Usage of the platform mechanism %Парам1%. 
			|This function allows to reduce the time of calculation. 
			|see http://downloads.v8.1c.ru/content//Platform/8_3_14_1565/1cv8upd_8_3_14_1565.htm'", ОбщегоНазначения.КодОсновногоЯзыка());
				
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "РасчетСистемЛинейныхУравнений");
		
		// ОтключитьРедуцированиеГрафа
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключитьРедуцированиеГрафа";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Отключить редуцирование графа при решении системы линейных уравнений';
														|en = 'Disable graph reduction when solving a system of linear equations'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.Скрыть			  = НЕ ВерсияПлатформыНеНиже8_3_17;
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Возможность ускорить решение некоторых систем линейных алгебраических уравнений.
			|Отключает парметр %Парам1% для метода %Парам2%.
			|см. http://downloads.v8.1c.ru/content//Platform/8_3_17_1851/1cv8upd_8_3_17_1851.htm';
			|en = 'This feature speeds up the solution of some systems of linear algebraic equations.
			|Disables %Парам1% parameter for %Парам2% method.
			|see http://downloads.v8.1c.ru/content//Platform/8_3_17_1851/1cv8upd_8_3_17_1851.htm'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "РазрешитьРедуцированиеГрафа");
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам2%", "РасчетСистемЛинейныхУравнений.РассчитатьСистемыЛинейныхУравнений()");
		
		// ОтключитьРедуцированиеГрафаНДС
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключитьРедуцированиеГрафаНДС";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Отключить редуцирование графа при решении системы линейных уравнений этапа расчета партий НДС';
														|en = 'Disable graph reduction when solving the system of linear equations of the VAT lot calculation step'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.Скрыть			  = НЕ ВерсияПлатформыНеНиже8_3_17;
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Возможность ускорить решение некоторых систем линейных алгебраических уравнений.
			|Отключает парметр %Парам1% для метода %Парам2%.
			|см. http://downloads.v8.1c.ru/content//Platform/8_3_17_1851/1cv8upd_8_3_17_1851.htm';
			|en = 'This feature speeds up the solution of some systems of linear algebraic equations.
			|Disables %Парам1% parameter for %Парам2% method.
			|see http://downloads.v8.1c.ru/content//Platform/8_3_17_1851/1cv8upd_8_3_17_1851.htm'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "РазрешитьРедуцированиеГрафа");
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам2%", "РасчетСистемЛинейныхУравнений.РассчитатьСистемыЛинейныхУравнений()");
		
	#КонецОбласти

	#Область Отладка
		
		Родитель = "Отладка";
		
		//////////////////////////////////////////////////////////////////////////////
		// Общие параметры отладки
		
		// ОчищатьСтарыеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОчищатьСтарыеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Перед расчетом очищать старые расчетные движения';
														|en = 'Before calculation clear old document register records'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Перед запуском расчета партий и себестоимости сначала очищает все расчетные движения в рассчитываемом периоде,
			|сформированные ранее, т.е. выполняет эмуляцию первого запуска расчета в данном периоде.
			|Может выполняться продолжительное время при большом количестве документов.
			|Аналогичен следующему параметру, но используется для всего расчета.';
			|en = 'Before lot and cost calculation start, it clears all document register records previously calculated in the period,
			|that is, it processes emulation of the first calculation start in this period.
			|It may take a long time if there are a lot of documents.
			|It is similar to the next parameter, but it is used for the whole calculation.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// НеСохранятьРасчетныеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеСохранятьРасчетныеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'При проведении документа не сохранять старые расчетные движения';
														|en = 'When posting a document, do not save old document register records'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'При проведении документа не сохранять расчетные движения партий и себестоимости,
			|а также не сохранять заполненные поля партионной идентификации:
			|%Парам1%.
			|Аналогичен предыдущему параметру, но используется для конкретного проводимого документа.';
			|en = 'When posting a document, do not save document register records of batches and cost, and do not save populated fields of batch identification:
			|Batch,
			|%Парам1%.
			|The parameter is similar to the previous one, but it is used for a particular document to post.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "Партия, АналитикаУчетаПартий, АналитикаФинансовогоУчета, ВидДеятельностиНДС, ДокументИсточник, РасчетНеЗавершен");
		
		// ВестиПротоколЗапросовЭтапаВЖурналеРегистрации
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВестиПротоколЗапросовЭтапаВЖурналеРегистрации";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Вести протокол выполнения запросов этапа в журнале регистрации';
														|en = 'Keep a log of the step query execution in the event log'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Строка");
		ОписаниеПараметра.ЗначениеПоУмолчанию = "";
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется для расследования ошибок аварийного завершения расчета из-за выполнении ""тяжелого"" запроса:
			|если указать в данном параметре имя этапа, на котором происходит падение расчета,
			|то при выполнении каждого запроса этого этапа в журнал регистрации будет записана информация о времени и объеме данных для каждого запроса.
			|Последний запрос, который будет записан в журнал регистрации будет тем самым проблемным запросом,
			|из-за которого происходит аварийное завершение работы программы.';
			|en = 'Used for investigating crashed calculation errors occurred upon executing a complicated query:
			|if in this parameter, you specify a name of the step where the calculation crashes,
			|information on time and data size of each query will be saved to the event log when executing each query of the step.
			|The last query saved to the event log is the most troublesome
			|. It causes the application crash.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// ВестиЛогРаботыМеханизмаЗаписиДвижений
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ВестиЛогРаботыМеханизмаЗаписиДвижений";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Вести протокол работы механизма записи движений';
														|en = 'Вести протокол работы механизма записи движений'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Вывести в протокол расчета подробный лог хронологии работы механизма записи движений.
				|Позволяет оценить насколько оптимально используется очередь заданий записи регистр - определить, есть ли ожидания из-за переполнения очереди заданий.';
				|en = 'Вывести в протокол расчета подробный лог хронологии работы механизма записи движений.
				|Позволяет оценить насколько оптимально используется очередь заданий записи регистр - определить, есть ли ожидания из-за переполнения очереди заданий.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// КонтролироватьРегистраторыВФЗ
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "КонтролироватьРегистраторыВФЗ";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Контролировать корректность разбиения на порции';
														|en = 'Make sure division into portions is correct'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется при записи движений в фоновых заданиях:
			|проверяет, что все движения регистратора Х по регистру Y попали в одно фоновое задание записи.
			|Если это не так, то, в лучшем случае, фоновое задание упадет с ошибкой превышения времени ожидания блокировки,
			|а в худшем - затрет движения другого задания по этому регистру и регистратору.';
			|en = 'Used when writing records in background jobs:
			|checks that all the X recorder records of the Y register are in one writing background job.
			|If not, the background job might fail with lock timeout error, or it might delete records of another job by this register and recorder.
			|'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		//////////////////////////////////////////////////////////////////////////////
		// Параметры отладки расчета партий
		
		// ИгнорироватьНекорректныеПервичныеДвижения
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИгнорироватьНекорректныеПервичныеДвижения";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Игнорировать некорректные первичные движения документов';
														|en = 'Ignore incorrect primary records of documents'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет не выполнять перепроведение документов, имеющих ошибки в первичных движениях по регистрам.';
			|en = 'Used in lot accounting 2.2:
			|allows you not to repost the documents with errors in primary register records.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// НеВыполнятьОптимизациюДанных
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеВыполнятьОптимизациюДанных";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Не выполнять оптимизацию данных при расчете партий';
														|en = 'Do not optimize data when calculating lots'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет пропустить этап оптимизации данных перед расчетом партий по цепочкам.
			|Оптимизация уменьшает объем обрабатываемых данных за счет удаления узлов, которые заведомо не будут рассчитаны.';
			|en = 'Used in lot accounting version 2.2 mechanism:
			| allows to skip the data optimization stage before lot calculation by chains.
			|Optimization decreases the processed data volume by deleting the nodes that would not be calculated at first place.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// НеВыполнятьОптимизациюЦепочек
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеВыполнятьОптимизациюЦепочек";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Не выполнять оптимизацию цепочек при расчете партий';
														|en = 'Do not optimize chains when calculating lots'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет пропустить этап оптимизации нумерации узлов графа перед расчетом партий по цепочкам.
			|Расчет цепочек будет выполняться как в партионном учете версии 2.1.';
			|en = 'Used in lot accounting 2.2:
			|allows you to skip the optimization step of graph node numbering before lot calculation by chains.
			|Chains will be calculated as in lot accounting 2.1.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// НеВыполнятьРасчетСебестоимости
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеВыполнятьРасчетСебестоимости";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Не выполнять расчет себестоимости';
														|en = 'Do not calculate cost'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет пропустить этапы расчета предварительной и фактической себестоимости.
			|Полезно при отладке этапов, не зависящих от результатов расчета предварительной себестоимости.
			|Фактическая себестоимость и так не оказывает влияния на другие этапы (внутри одного периода), т.к. рассчитывается в последнюю очередь.';
			|en = 'Used in lot accounting 2.2:
			|allows you to skip the steps of calculating the preliminary and actual cost.
			|It is useful when debugging the steps that do not depend on the calculation results of the preliminary cost.
			|The actual cost does not affect other steps (within one period) as it is calculated last.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// НеСдвигатьПериодПоОкончанииРасчета
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "НеСдвигатьПериодПоОкончанииРасчета";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Не сдвигать период расчета по окончании расчета';
														|en = 'Do not shift the calculation period after its completion'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет не выполнять изменение регистра сведений ""Задания к расчету себестоимости"" по окончании расчета.
			|При этом расчет и запись движений будут выполнены, но факт выполнения расчета не будет зафиксирован в регистре заданий.
			|Полезно при отладке расчета какого-то конкретного периода - каждый раз не надо вручную возвращать задания к расчету.';
			|en = 'Used in lot accounting 2.2:
			|allows you not to change the ""Jobs for calculating cost"" information register after the calculation end.
			|With that, calculation and records will be written but calculation will not be registered in the job register.
			|It is useful when debugging calculation of a specific period – you will not have to return jobs to calculation manually each time.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		// РасчетОдногоЭтапа
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "РасчетОдногоЭтапа";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Расчет только одного этапа';
														|en = 'Calculate only one step'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть 			  = Истина; // устанавливается программно
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет выполнить один из этапов расчета партий отдельно от других.
			|Для этого расчетные кэши оборотов и остатков берут свои данные не из временной таблицы %Парам1%<имя регистра>
			|(куда были бы помещены данные предыдущих этапов при нормальном ходе расчета партий), а из данных ИБ.';
			|en = 'Used in lot accounting 2.2:
			|allows executing one of batch accounting stages separately from the others.
			|In this case, turnover and balance settlement caches use the infobase data and not the data from the %Парам1%<register name>
			|temporary table (where data of previous stages should be placed if using standard batch calculation).'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "ВТКэш");
		 
		 //////////////////////////////////////////////////////////////////////////////
		// Параметры отладки расчета себестоимости
	
		// ИсправлятьПустойРегистратор
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ИсправлятьПустойРегистратор";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Исправлять пустой регистратор в сформированных движениях';
														|en = 'Correct an empty recorder in generated records'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = НЕ РежимОтладки;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме расчета себестоимости:
			|если регистратор в каком-то наборе записей сформированных движений оказался не заполнен,
			|(например, в качестве регистратора выбран документ, который не может иметь движений по данному регистру),
			|то в качестве регистратора этого набора устанавливается документ расчета себестоимости.
			|При этом запись движений будет выполнена успешно.';
			|en = 'Used in cost calculation:
			|if the recorder is not populated in a set of generated register records
			|(this may occur if, for example, a document that can''t have records in this register is selected as recorder),
			|the cost calculation document is set as a recorder for this set.
			|The records will be written normally.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключитьРасчетСебестоимостиВПрошлыхПериодах";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Отключение выполнение этапа ""Распределение затрат и расчет себестоимости"" в периодах, предшествующих текущему.';
														|en = 'Disable execution of the Cost allocation and cost calculation step in periods prior to the current one.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|позволяет отключить выполнение этапа расчета себестоимости в прошлых периодах.
			|Будет выполнен расчет только текущего периода.
			|Задания к расчету себестоимости за прошлые периоды удаляться не будут - для расчета прошлых периодов достаточно просто отключить этот параметр.';
			|en = 'Used in the lot accounting feature version 2.2:
			|allows you to disable execution of the past periods cost calculation stage.
			|Only the current period will be calculated.
			|Jobs for the cost calculation in the past periods will not be deleted - to calculate the past periods, you just need to disable this option.'");
		
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ОтключитьЗаписьСформированныхДвижений";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Отключение записи сформированных движений';
														|en = 'Disable saving generated register records'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Скрыть			  = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2 при многопоточной записи движений:
			|выполняется только кэширование данных для записи в регистр сведений %Парам1%, без запуска фоновых заданий записи.
			|Непосредственно запись кэшированных движений можно выполнить потом, с помощью внешней обработки.';
			|en = 'Used in the lot accounting feature version 2.2 for multithreaded register records saving:
			|only caching data for saving to %Парам1% information register, without starting recording background jobs.
			|Cached register records can be directly saved later using external data processor.'");

		ОписаниеПараметра.Описание = СтрЗаменить(ОписаниеПараметра.Описание, "%Парам1%", "КэшДанныхПартионногоУчета");
		
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ФормироватьПромежуточныеПротоколыРасчета";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Формировать промежуточный протокол расчета после выполнения каждого этапа.';
														|en = 'Generate an intermediate calculation log after completing each stage.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме партионного учета версии 2.2:
			|формирует промежуточный протокол расчета после выполнения каждого этапа расчета.
			|Промежуточный протокол позволяет проанализировать ход выполнения расчета до его окончания, но на формирование промежуточного протокола требуется дополнительное время.';
			|en = 'Used in the lot accounting feature version 2.2:
			|generates an intermediate calculation log after each calculation stage.
			|The intermediate log allows you to analyze the progress of the calculation before its completion, but it takes additional time to generate an intermediate log.'");
		
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ФормироватьВтИсточникиРасходов";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Формировать временную таблицу расходов к распределению с идентификаторами исходных запросов';
														|en = 'Generate a temporary table of expenses for allocation with IDs of initial requests'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Ложь;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в механизме расчета себестоимости:
			|формирует промежуточную временную таблицу источников расходов с идентификаторами исходных запросов.
			|Промежуточная таблица позволяет анализировать происхождение сумм расходов, подлежащих распределению.';
			|en = 'Used in cost calculation:
			|generates an intermediate temporary table of expense sources with initial query IDs.
			|The intermediate table allows you to analyze the origin of amounts of expenses to be allocated.'");
		
	#КонецОбласти
	
	#Область АвтоматическоеТестирование
	
		Родитель = "ГруппаАвтоматическоеТестирование";
		
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПериодНачалаТестирования";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Период начала тестирования закрытия месяца.';
														|en = 'Period of starting month-end closing testing.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Дата");
		ОписаниеПараметра.ЗначениеПоУмолчанию = ПартионныйУчетСервер.ПериодПервыхДвиженийРегистраСебестоимость();
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в обработке ""Тестирование регламентных операций закрытия месяца:
			|определяет месяц, начиная с которого будет выполняться тестирование.';
			|en = 'Used in the ""Month-end close testing"" data processor:
			|defines the month of the testing start.'");
			
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПериодОкончанияТестирования";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Период окончания тестирования закрытия месяца.';
														|en = 'Period of ending month-end closing testing.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Дата");
		ОписаниеПараметра.ЗначениеПоУмолчанию = ПартионныйУчетСервер.ПериодПоследнихДвиженийРегистраСебестоимость();
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в обработке ""Тестирование регламентных операций закрытия месяца:
			|определяет месяц, начиная с которого будет выполняться тестирование.';
			|en = 'Used in the ""Month-end close testing"" data processor:
			|defines the month of the testing start.'");
			
		ОписаниеПараметра = ОписаниеПараметров.Добавить();
		ОписаниеПараметра.Родитель 			  = Родитель;
		ОписаниеПараметра.Имя 				  = "ПерепроводитьДокументыПоРегистрам";
		ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Перепроводить документы по регистрам учета себестоимости.';
														|en = 'Repost documents in cost accounting registers.'");
		ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Булево");
		ОписаниеПараметра.ЗначениеПоУмолчанию = Истина;
		ОписаниеПараметра.Описание =
			НСтр("ru = 'Используется в обработке ""Тестирование регламентных операций закрытия месяца:
			|выполняется пенрепроведение документов по регистрам учета себестоимости перед началом закрытия месяца.';
			|en = 'Used in the ""Month-end close testing"" data processor:
			|reposting documents in the cost accounting registers before the month-end closing.'");
	
	#КонецОбласти
	
	Возврат ОписаниеПараметров;
	
КонецФункции


// Добавляет технологические параметры расчета в общую структуру параметров расчета.
//
Процедура УстановитьТехнологическиеПараметрыРасчета(ПараметрыРасчета) Экспорт
	
	// Перенесем параметры операции в структура ПараметрыРасчета:
	//	- группы параметров становятся полями ПараметрыРасчета с типом "Структура"
	//	- сами параметры становятся элементами структур, соответствующим группам параметров.
	
	ОписаниеПараметров = ОписаниеПараметровОперацииЗакрытияМесяца();
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров();
		
	// Группы параметров.
	Для Каждого ТекущаяСтрока Из ОписаниеГруппПараметровОперацииЗакрытияМесяца() Цикл
		ПараметрыРасчета.Вставить(ТекущаяСтрока.Имя, Новый Структура);
	КонецЦикла;
	
	// Значения параметров.
	Для Каждого КлючИЗначение Из ЗначенияПараметров Цикл
		
		СтрокаОписания    = ОписаниеПараметров.Найти(КлючИЗначение.Ключ, "Имя");
		ЗначениеПараметра = КлючИЗначение.Значение;
			
		Если НЕ ЗначениеЗаполнено(СтрокаОписания.Родитель) Тогда
			ПараметрыРасчета.Вставить(КлючИЗначение.Ключ, ЗначениеПараметра);
		Иначе
			ПараметрыРасчета[СтрокаОписания.Родитель].Вставить(КлючИЗначение.Ключ, ЗначениеПараметра);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета);
	
КонецПроцедуры

// Добавляет дополнительные технологические параметры расчета, значения которых нельзя изменять.
//
// Параметры:
//  ПараметрыРасчета - см. РасчетСебестоимостиПрикладныеАлгоритмы.ИнициализироватьОбщиеПараметрыРасчета
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИмяРегистра - Строка -
// * Регистратор - ДокументСсылка -
// * Количество - Число -
Функция УстановитьНенастраиваемыеТехнологическиеПараметрыРасчета(ПараметрыРасчета) Экспорт
	
	// Дополнительные параметры отладки.
	// Вспомогательная таблица для хранения информации о том, сколько раз в фоновое задание записи передавалось сочетание регистр/регистратор.
	// Если в итоге получится хоть одна строка с "Количество > 1" - это критичная ошибка.
	РегистраторыВФЗ = Новый ТаблицаЗначений;
	РегистраторыВФЗ.Колонки.Добавить("ИмяРегистра");
	РегистраторыВФЗ.Колонки.Добавить("Регистратор");
	РегистраторыВФЗ.Колонки.Добавить("Количество");
	
	ПараметрыРасчета.Отладка.Вставить("РегистраторыВФЗ", РегистраторыВФЗ);
	
	Возврат РегистраторыВФЗ;
	
КонецФункции

#КонецОбласти

#Область Тестирование

Функция СлужебныйСимвол_РасчетПрерванДляОтладки() Экспорт
	Возврат "#РасчетПрерванДляОтладки";
КонецФункции

Функция ПроверитьНеобходимостьПрерватьРасчетДляТестирования(ПараметрыРасчета, ТекущийШагРасчета, ПрерватьРасчет = Истина)
	
	ПараметрыОтладки = ПараметрыРасчета.ПараметрыОтладки;
	
	Если НЕ ПараметрыОтладки.Свойство("ЭтапДляОтладки") Тогда
		Возврат Ложь; // расчет не запущен для отладки этапа расчета
	ИначеЕсли ПараметрыРасчета.РасчетныйПериод.НачалоПериода <> НачалоМесяца(ПараметрыОтладки.Период) Тогда
		Возврат Ложь; // отлаживается другой период
	ИначеЕсли НРег(ПараметрыРасчета.ПредставлениеЭтапа) <> НРег(ПараметрыОтладки.ЭтапДляОтладки) Тогда
		Возврат Ложь; // отлаживается другой этап
	ИначеЕсли ПрерватьРасчет И НРег(ТекущийШагРасчета) <> НРег(ПараметрыОтладки.ШагРасчетаДляОтладки) Тогда
		Возврат Ложь; // отлаживается другой шаг расчета
	КонецЕсли;
	
	Если ПрерватьРасчет Тогда
		
		РегистрыСведений.ВыполнениеОперацийЗакрытияМесяца.УстановитьПризнакОкончанияРасчета(ПараметрыРасчета.ИдентификаторРасчетаДляЗакрытияМесяца);
		
		ВызватьИсключение СлужебныйСимвол_РасчетПрерванДляОтладки();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПроверитьУсловиеПоискаДвиженийПриРасчете(ПараметрыРасчета) Экспорт
	
	ИмяРегистраПоискаДвижений = ПараметрыРасчета.ПараметрыОтладки.ИмяРегистраПоискаДвижений;
	УсловиеПоискаДвижений = ПараметрыРасчета.ПараметрыОтладки.УсловиеПоискаДвижений;
	
	Если НЕ ПараметрыРасчета.Движения.Свойство(ИмяРегистраПоискаДвижений) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеРегистра = ПараметрыРасчета.Движения[ИмяРегистраПоискаДвижений];
	
	Запрос = Новый Запрос;
	ИнициализироватьСвойстваЗапроса(Запрос, ПараметрыРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗапись
	|ИЗ
	|	ИмяТаблицыКэша
	|ГДЕ
	|	&УсловиеПоиска";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицыКэша", ОписаниеРегистра.ИмяТаблицыКэшаРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоиска", УсловиеПоискаДвижений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОписаниеТекущегоЭтапа = ПараметрыРасчета.ПротоколРасчета.Этапы.Получить(ПараметрыРасчета.ПротоколРасчета.Этапы.Количество()-1);
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Найдено движение, удовлетворяющее условиям поиска';
				|en = 'Found a register record matching your search'") + ": "
			+ ОписаниеТекущегоЭтапа.ПредставлениеЭтапа + Символы.ПС
			+ НСтр("ru = 'Расчет прерван.';
					|en = 'Calculation is canceled.'"));
		
		ВызватьИсключение СлужебныйСимвол_РасчетПрерванДляОтладки() + " " + ОписаниеТекущегоЭтапа.ПредставлениеЭтапа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Вспомогательные

// Возвращает число строк во временной таблице.
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.РазмерВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
// Возвращаемое значение:
//	Число -
//
Функция РазмерВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
	|ИЗ
	|	ИмяТаблицы КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоСтрок;
	
КонецФункции

// Возвращает число строк во всех временных таблицах.
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.РазмерыВременныхТаблиц(ПараметрыРасчета, Истина)
//
// Возвращаемое значение:
//	Структура -
//
Функция РазмерыВременныхТаблиц(КонтейнерМенеджераВТ, НеУчитыватьПустыеТаблицы = Ложь) Экспорт
	
	Результат = Новый Структура("ОбщийРазмерТаблиц", 0);
	Подзапросы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	""ИмяВременнойТаблицы"" КАК ИмяТаблицы,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	ИмяВременнойТаблицы КАК Т
	|";
	
	Для Каждого ВременнаяТаблица Из Запрос.МенеджерВременныхТаблиц.Таблицы Цикл
		Подзапросы.Добавить(
			СтрЗаменить(ШаблонТекстаЗапроса, "ИмяВременнойТаблицы", ВременнаяТаблица.ПолноеИмя));
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Подзапросы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(Подзапросы, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ (НеУчитыватьПустыеТаблицы И Выборка.Количество = 0) Тогда
			Результат.Вставить(Выборка.ИмяТаблицы, Выборка.Количество);
			Результат.ОбщийРазмерТаблиц = Результат.ОбщийРазмерТаблиц + Выборка.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает итог по указанному полю из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.АгрегатнаяФункцияПоляВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "Количество")
//
// Возвращаемое значение:
//	Произвольный -
//
Функция АгрегатнаяФункцияПоляВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ИмяПоля, ИмяФункции = "СУММА") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Т.ИмяПоля) КАК Результат
	|ИЗ
	|	ИмяВременнойТаблицы КАК Т";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА", ИмяФункции);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяПоля", ИмяПоля);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Результат;
	
КонецФункции


// Возвращает нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицу(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров")
//
// Возвращаемое значение:
//	ТаблицаЗначений -
//
Функция ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Если КоличествоСтрок = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.*
		|ИЗ
		|	ИмяВременнойТаблицы КАК Т";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Т.*
		|ИЗ
		|	ИмяВременнойТаблицы КАК Т";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "0", Формат(КоличествоСтрок, "ЧН=0; ЧГ=0"));
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	ВыгруженнаяТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгруженнаяТаблица;
	
КонецФункции

// Выгружает в файл указанные временные таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременныеТаблицы(ПараметрыРасчета)
//
// Возвращаемое значение:
//	Структура -
//
Функция ВыгрузитьВременныеТаблицы(КонтейнерМенеджераВТ, НачатьСТаблицы = "", ЗакончитьТаблицей = "") Экспорт
	
	ВыгрузкаНачата = НЕ ЗначениеЗаполнено(НачатьСТаблицы);
	МенеджерВТ     = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	Результат      = Новый Структура;
	НомерТаблицы   = 0;
	
	Для Каждого ВременнаяТаблица Из МенеджерВТ.Таблицы Цикл
		
		ВыгрузкаНачата = (ВыгрузкаНачата ИЛИ НРег(ВременнаяТаблица.ПолноеИмя) = НРег(НачатьСТаблицы));
		
		Если НЕ ВыгрузкаНачата Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТаблицы = НомерТаблицы + 1;
		ИмяТаблицы   = "Т" + Формат(НомерТаблицы, "ЧЦ=3; ЧВН=") + "_" + ВременнаяТаблица.ПолноеИмя;
		Таблица 	 = ВыгрузитьВременнуюТаблицу(МенеджерВТ, ВременнаяТаблица.ПолноеИмя);
		
		Результат.Вставить(ИмяТаблицы, Таблица);
		
		Если ЗначениеЗаполнено(ЗакончитьТаблицей) И НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ЗакончитьТаблицей) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выгружает в файл нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременнуюТаблицуВФайл(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", "C:\Temp\Таблица.mxl")
//
// Возвращаемое значение:
//	Строка -
//
Функция ВыгрузитьВременнуюТаблицуВФайл(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, ПолноеИмяФайла, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	ВыгруженнаяТаблица = ВыгрузитьВременнуюТаблицу(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок, ТекстСортировки);
	
	ТекстОшибки = ОбщегоНазначенияУТ.СохранитьТаблицуЗначенийВФайл(ВыгруженнаяТаблица, ПолноеИмяФайла);
	
	Возврат ТекстОшибки;
	
КонецФункции

// Выгружает в файл указанные временные таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыгрузитьВременныеТаблицыВФайл(ПараметрыРасчета, "C:\Temp\Отладка")
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВыгрузитьВременныеТаблицыВФайл(КонтейнерМенеджераВТ, ИмяКаталога,
		ОчищатьКаталог = Истина, НачатьСТаблицы = "",
		ЗакончитьТаблицей = "", ТипФайла="mxl") Экспорт

	ВыгрузкаНачата = НЕ ЗначениеЗаполнено(НачатьСТаблицы);
	МенеджерВТ = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	ПолноеИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);

	БылиОшибки = Ложь;
	Попытка
		Если ОчищатьКаталог Тогда
			УдалитьФайлы(ПолноеИмяКаталога, "*."+ТипФайла);
		КонецЕсли;
	Исключение
		БылиОшибки = Истина;
	КонецПопытки;

	НомерТаблицы = 0;

	Для Каждого ВременнаяТаблица Из МенеджерВТ.Таблицы Цикл

		ВыгрузкаНачата = (ВыгрузкаНачата
			ИЛИ НРег(ВременнаяТаблица.ПолноеИмя) = НРег(НачатьСТаблицы));

		Если НЕ ВыгрузкаНачата Тогда
			Продолжить;
		КонецЕсли;

		НомерТаблицы = НомерТаблицы + 1;

		ВыгрузитьВременнуюТаблицуВФайл(МенеджерВТ, ВременнаяТаблица.ПолноеИмя, ПолноеИмяКаталога
			+ "Т" + Формат(НомерТаблицы, "ЧЦ=3; ЧВН=") + "_"
			+ ВременнаяТаблица.ПолноеИмя + "."+ТипФайла);

		Если ЗначениеЗаполнено(ЗакончитьТаблицей)
				И НРег(ВременнаяТаблица.ПолноеИмя) = НРег(ЗакончитьТаблицей) Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
	Возврат БылиОшибки;

КонецФункции

// Выбирает нужное количество строк из указанной временной таблицы
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыбратьСтрокиВременнойТаблицы(ПараметрыРасчета, "ВТКэшСебестоимостьТоваров", 1)
//
// Возвращаемое значение:
//	ВыборкаИзРезультатаЗапроса -
//
Функция ВыбратьСтрокиВременнойТаблицы(КонтейнерМенеджераВТ, ИмяВременнойТаблицы, КоличествоСтрок = Неопределено, ТекстСортировки = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПолучитьМенеджерВТИзКонтейнера(КонтейнерМенеджераВТ);
	
	Запрос.Текст = ПолучитьЗаголовокЗапроса(КоличествоСтрок) + "
	|	Т.*
	|ИЗ
	|	%1 КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяВременнойТаблицы);
	
	Если ЗначениеЗаполнено(ТекстСортировки) Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	" + ТекстСортировки;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Подменяет текст переданного запроса на текст из указанного файла и возвращает результат запроса.
// Выполняет запрос с указанным текстом.
// 
// Параметры:
//	ИсточникДанных - Запрос, МенеджерВременныхТаблиц, Структура, Неопределено -
//	ПутьКФайлуСТекстомЗапроса - Строка - полное имя текстового файла, содержащего текст запроса.
//
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt")
// Пример вызова: РасчетСебестоимостиПрикладныеАлгоритмы.ВыполнитьЗапросСПроизвольнымТекстом(Запрос, "C:\Temp\Запрос.txt").Результат.Выгрузить()
//
// Возвращаемое значение:
//	Структура -
//
Функция ВыполнитьЗапросСПроизвольнымТекстом(ИсточникДанных, ПутьКФайлуСТекстомЗапроса) Экспорт
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Файл = Новый ТекстовыйДокумент;
	
	Результат = Новый Структура;
	
	Попытка
		
		Если ТипЗнч(ИсточникДанных) = Тип("Запрос") Тогда
			Запрос = ИсточникДанных;
			Результат.Вставить("СтарыйТекстЗапроса", Запрос.Текст);
		Иначе
			Запрос = Новый Запрос;
			Если ТипЗнч(ИсточникДанных) = Тип("МенеджерВременныхТаблиц") Тогда
				Запрос.МенеджерВременныхТаблиц = ИсточникДанных;
			ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
				ИнициализироватьСвойстваЗапроса(Запрос, ИсточникДанных);
			КонецЕсли;
		КонецЕсли;
		
		Файл.Прочитать(ПутьКФайлуСТекстомЗапроса, КодировкаТекста.UTF8);
		
		Результат.Вставить("НовыйТекстЗапроса", Файл.ПолучитьТекст());
		Запрос.Текст = Результат.НовыйТекстЗапроса;
		
		Результат.Вставить("Результат", Запрос.Выполнить());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
	КонецПопытки;
	
	Если Результат.Свойство("СтарыйТекстЗапроса") Тогда // был передан запрос
		ИсточникДанных.Текст = Результат.СтарыйТекстЗапроса;
	КонецЕсли;
	
	Результат.Вставить("Время", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачала) / 1000);
	
	Возврат Результат;
	
КонецФункции


// Добавляет колонку для нумерации строк партий.
//
// Параметры:
// 	Таблица - ТаблицаЗначений -
// 	ИмяПоляНомераСтроки - Строка -
Процедура ДобавитьКолонкуДляНумерацииСтрокПартий(Таблица, ИмяПоляНомераСтроки = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПоляНомераСтроки) Тогда
		ИмяПоляНомераСтроки = ИмяКолонкиДляНумерацииПоУмолчанию();
	КонецЕсли;
	
	Если Таблица.Колонки.Найти(ИмяПоляНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяПоляНомераСтроки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15)));
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие изменений в табличных частях документа.
// Табличная часть документа-объекта сворачивается по суммовым/количественным реквизитам
// и сверяется с табличной частью документа в ИБ.
// Если в табличной части документа есть реквизит-дата, то определяется его минимальное значение в измененных строках.
// При этом строки, в которых дата не заполнена, на измененность не проверяются.
// 
// Параметры:
//	ДокументОбъект - ДокументОбъект - проверяемый документ
//	ОписаниеТабличныхЧастей - Структура
//		Ключ - имя табличной части
//		Значение - Структура с обязательными ключами
//			"Ресурсы" - в строковом значении этого ключа через запятую перечисляются суммовые и количественные реквизиты табличной части
//			"Дата"    - в строковом значении этого ключа указывается имя реквизита с датой (если даты нет, то значение не заполняется).
//
// Возвращаемое значение:
// 	Структура - даты изменения в разрезе табличных частей документа:
//	Структура:
// * ОбщийМинимальныйПериод - Дата, Неопределено -
// * ИмяТабличнойЧасти - Дата, Неопределено - в качестве ключей указаны ключи ОписаниеТабличныхЧастей
//
Функция ПериодыИзмененияТабличныеЧастиДокумента(ДокументОбъект, ОписаниеТабличныхЧастей) Экспорт
	
	Результат					= Новый Структура;
	ОбщийМинимальныйПериод		= Неопределено;
	МетаДокумент				= ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	
	#Область ТекстыЗапроса
	
	ШаблонЗапросаЗагрузкиВТ = 
	"ВЫБРАТЬ
	|	&ПоляТаблицы
	|ПОМЕСТИТЬ ВТТабличнаяЧасть
	|ИЗ
	|	&ВТТабличнаяЧасть КАК Т
	|";
	
	ШаблонЗапросаВыборкиДанных = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВТТабличнаяЧасть"" КАК ИмяТабличнойЧасти,
	|	&Дата КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Проведен,
	|		&ПоляТаблицы
	|	ИЗ
	|		ВТТабличнаяЧасть КАК Т
	|	ГДЕ
	|		&ОтборДанныхОбъекта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.Ссылка.Проведен КАК Проведен,
	|		&ПоляСМинусом
	|	ИЗ
	|		&ТаблицаДокумента КАК Т
	|	ГДЕ
	|		Т.Ссылка = &Ссылка
	|		И &ОтборДанныхИБ
	|	) КАК Т
	|ГДЕ &Группировка
	|И &УсловиеОтбора
	|";

	ШаблонЗапросаВыборкиДанныхПустаяТЧ = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВТТабличнаяЧасть"" КАК ИмяТабличнойЧасти,
	|	&Дата КАК Дата
	|ИЗ
	|	&ТаблицаДокумента КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|	И &ОтборДанныхИБ
	|";

	ШаблонЗапросаРезультата = 
	"ВЫБРАТЬ
	|	Т.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	МИНИМУМ(Т.Дата) КАК Дата
	|ИЗ
	|	ДанныеТабличныхЧастей КАК Т
	|ГДЕ
	|	Т.Дата <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|СГРУППИРОВАТЬ ПО
	|	Т.ИмяТабличнойЧасти
	|";
	
	#КонецОбласти
	
	ТекстыЗапросаЗагрузкиВТ = Новый Массив;
	ТекстыЗапросаВыборкиДанных = Новый Массив;
	
	Для Каждого КлючИЗначение Из ОписаниеТабличныхЧастей Цикл
		
		Результат.Вставить(КлючИЗначение.Ключ, Неопределено);
		
		КоличествоСтрок = ДокументОбъект[КлючИЗначение.Ключ].Количество();
		Если КоличествоСтрок > 0 Тогда
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, ДокументОбъект[КлючИЗначение.Ключ].Выгрузить());
		КонецЕсли;
		
		// Подготовим тексты фрагментов запроса.
		СтрокаИзмерения    = "";
		СтрокаРесурсы	   = "";
		СтрокаРесурсыСумма = "";
		СтрокаРесурсыОтбор = "";
		СтруктураРесурсы = Новый Структура(?(ЗначениеЗаполнено(КлючИЗначение.Значение.Ресурсы), КлючИЗначение.Значение.Ресурсы, ""));
		СтрокаДата 		 = ?(ЗначениеЗаполнено(КлючИЗначение.Значение.Дата), "Т." + КлючИЗначение.Значение.Дата, "Неопределено");
		
		Для Каждого МетаРеквизит Из МетаДокумент.ТабличныеЧасти[КлючИЗначение.Ключ].Реквизиты Цикл
			
			Если МетаРеквизит.Тип = Новый ОписаниеТипов("УникальныйИдентификатор")
			 Или МетаРеквизит.Тип = Новый ОписаниеТипов("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктураРесурсы.Свойство(МетаРеквизит.Имя) Тогда
				СтрокаРесурсы = СтрокаРесурсы + ?(СтрокаРесурсы = "", "", ",
					|	") + "Т." + МетаРеквизит.Имя;
				СтрокаРесурсыСумма = СтрокаРесурсыСумма + ?(СтрокаРесурсыСумма = "", "", ",
					|	") + "СУММА(Т." + МетаРеквизит.Имя + ") КАК " + МетаРеквизит.Имя;
				СтрокаРесурсыОтбор = СтрокаРесурсыОтбор + ?(СтрокаРесурсыОтбор = "", "	", "
					|	ИЛИ ") + "СУММА(Т." + МетаРеквизит.Имя + ") <> 0";
			Иначе
				СтрокаИзмерения = СтрокаИзмерения + ?(СтрокаИзмерения = "", "", ",
					|") + "	Т." + МетаРеквизит.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПоля = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрокаРесурсы;
		СтрокаПоляСМинусом = СтрокаИзмерения + ?(СтрокаИзмерения = "" ИЛИ СтрокаРесурсы = "", "", ",
			|	") + СтрЗаменить(СтрокаРесурсы, "Т.", "-Т.");
		СтрокаТаблицаДокумента = "Документ." + МетаДокумент.Имя + "." + КлючИЗначение.Ключ;
		
		СтрокаПоляГруппировка = ?(СтрокаИзмерения = "", "", "СГРУППИРОВАТЬ ПО" + Символы.ПС + "Т.Проведен," + Символы.ПС + СтрокаИзмерения);
		
		ТекстОтборДанных = "";
		Если КлючИЗначение.Значение.Свойство("Отбор") Тогда
			
			Для Каждого ТекОтбор Из  КлючИЗначение.Значение.Отбор Цикл
				
				ЛевоеЗначение				= ТекОтбор.Ключ;
				ВидСравненияЗапроса	= ТекОтбор.Значение.ВидСравнения;
				ПравоеЗначение 			= ТекОтбор.Значение.ПравоеЗначение;
				
				ТекстОтборДанных =
					ТекстОтборДанных
					+ ?(ПустаяСтрока(ТекстОтборДанных), "", " И ")
					+ "(" + ЛевоеЗначение + ") " + ВидСравненияЗапроса + " (" + ПравоеЗначение + ")";
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Сформируем текст запроса и выполним запрос.
		Если КоличествоСтрок > 0 Тогда

			ТекстЗапроса = ШаблонЗапросаЗагрузкиВТ;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляТаблицы", 	 СтрокаПоля);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТабличнаяЧасть", КлючИЗначение.Ключ);
			
			ТекстыЗапросаЗагрузкиВТ.Добавить(ТекстЗапроса);

			ТекстЗапроса = ШаблонЗапросаВыборкиДанных;
			
		Иначе
			// Временная таблица для пустой табличной части не нужна
			ТекстЗапроса = ШаблонЗапросаВыборкиДанныхПустаяТЧ;
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дата", 			  СтрокаДата);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТТабличнаяЧасть",  КлючИЗначение.Ключ);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляТаблицы", 	  СтрокаПоля);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляСМинусом", 	  СтрокаПоляСМинусом);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДокумента", СтрокаТаблицаДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ &Группировка",  СтрокаПоляГруппировка);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &УсловиеОтбора",  ?(СтрокаРесурсыОтбор = "", "", "ИМЕЮЩИЕ" + Символы.ПС + СтрокаРесурсыОтбор));
		
		Если ЗначениеЗаполнено(ТекстОтборДанных) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборДанныхОбъекта",	ТекстОтборДанных);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборДанныхИБ",		ТекстОтборДанных);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборДанныхОбъекта",	"ИСТИНА");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборДанныхИБ",		"ИСТИНА");
		КонецЕсли;
		
		ТекстыЗапросаВыборкиДанных.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	// Получаем итоговый текст запроса и выполняем запрос
	Если ТекстыЗапросаЗагрузкиВТ.Количество() = 0 Тогда
		Запрос.Текст = "";
	Иначе
		Запрос.Текст = СтрСоединить(ТекстыЗапросаЗагрузкиВТ, ОбщегоНазначения.РазделительПакетаЗапросов())
			+ ОбщегоНазначения.РазделительПакетаЗапросов();
	КонецЕсли;

	Запрос.Текст = Запрос.Текст
		+ СтрЗаменить(
			ШаблонЗапросаРезультата,
			"ДанныеТабличныхЧастей",
			"(" + СтрСоединить(ТекстыЗапросаВыборкиДанных, Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС) + ")");
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		ДатаТЧ = Выборка.Дата; //Дата
		Результат.Вставить(Выборка.ИмяТабличнойЧасти, ДатаТЧ);
		
		Если ЗначениеЗаполнено(ОбщийМинимальныйПериод) Тогда
			ОбщийМинимальныйПериод = Мин(ОбщийМинимальныйПериод, ДатаТЧ);
		Иначе
			ОбщийМинимальныйПериод = ДатаТЧ;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("ОбщийМинимальныйПериод", ОбщийМинимальныйПериод);
	
	Возврат Результат;
	
КонецФункции

// Метод блокирует записи в регистре ЗаданияКРасчетуСебестоимости в диапазоне номера заданий: 0 ... НомерЗаданияДоРасчета.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Верхняя граница диапазона блокировки.
//	Организации - Массив, СправочникСсылка.Организации, Неопределено - организации для блокировки
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации = Неопределено) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЗаданияКРасчетуСебестоимости");
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Для Каждого ТекСтр Из ОбщегоНазначенияУТКлиентСервер.Массив(Организации) Цикл
		Если ЗначениеЗаполнено(ТекСтр) Тогда
			СтрокаБлокировки = ИсточникБлокировки.Добавить();
			СтрокаБлокировки.Организация = ТекСтр;
		КонецЕсли;
	КонецЦикла;
	
	// Если таблица пустая, то блокировка ставится по всем организациям.
	Если ЗначениеЗаполнено(ИсточникБлокировки) Тогда
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Сохраняет в менеджер временных таблиц записи регистра Задания к расчету себестоимости.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Выбираются записи у которых номер задания <= НомерЗаданияДоРасчета.
//	ОрганизацииКРасчету - Массив - Перечень организаций, по которым сохраняются задания.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Содержит в себе ВТ "ИсходныеЗадания".
//
Функция СформироватьВТЗаданияДоРасчета(НомерЗаданияДоРасчета, ОрганизацииКРасчету) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Задания.Месяц,
	|	Задания.НомерЗадания,
	|	Задания.Организация,
	|	Задания.Документ
	|ПОМЕСТИТЬ ИсходныеЗадания
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Задания
	|ГДЕ
	|	Задания.НомерЗадания <= &НомерЗадания
	|	И Задания.Организация В (&МассивОрганизаций)
	|");
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НомерЗадания", НомерЗаданияДоРасчета);
	Запрос.УстановитьПараметр("МассивОрганизаций", ОбщегоНазначенияУТКлиентСервер.Массив(ОрганизацииКРасчету));
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	Запрос.Выполнить();
	
	Возврат ВременныеТаблицы;
	
КонецФункции

// Возвращает количество движений документов по указанному регистру.
//
// Возвращаемое значение:
//	Число -
//
Функция КоличествоДвиженийДокументаПоРегистру(Регистраторы, ПолноеИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", ОбщегоНазначенияУТКлиентСервер.Массив(Регистраторы));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	ИмяОсновнойТаблицыРегистра КАК Т
	|ГДЕ
	|	Т.Регистратор В (&Регистраторы)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяОсновнойТаблицыРегистра", ПолноеИмяРегистра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Количество;
	
КонецФункции

Функция ОбъединитьМассивы(Массив1, Массив2)
	
	ОбъединенныйМассив = Новый Массив;
	
	Для Каждого ЭлементМассива Из Массив1 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив2 Цикл
	
		Если ОбъединенныйМассив.Найти(ЭлементМассива) = Неопределено Тогда
			ОбъединенныйМассив.Добавить(ЭлементМассива);
		КонецЕсли; 
	
	КонецЦикла;
	
	Возврат ОбъединенныйМассив;
	
КонецФункции

#КонецОбласти

#Область РаботаСГрафами

// Результатом работы функции является временная таблица с колонками "НомерУзлаИсточника", 
// "НомерУзлаПриемника" и "КлючНачальныхДанных", в которой сохранены все пути обхода 
// графа из временной таблицы ИмяТаблицыИсточникаДанныхСвязей для значений, начальное 
// состояние которых задано во временной таблице ИмяТаблицыНачальныхДанных
// 
// Параметры:
// 	МенеджерВременныхТаблиц						- МенеджерВременныхТаблиц - менеджер временных таблиц
// 	ПараметрыГрафа - Структура
// 		ТаблицаНачальныхДанных					- Структура с ключами - описание таблицы с набором сопоставления данных, подлежащих маршрутизации, и начальными узлами графа 
// 			ИмяТаблицы							- Строка - имя временной таблицы
// 			ИмяКолонкиНомераУзла				- Строка - имя колонки в ТаблицаНачальныхДанных, содержащей идентификатор начального узла маршрутизирующего графа
// 			ИмяКолонкиКлючаДанных		- Строка - имя колонки в ТаблицаНачальныхДанных, содержащей идентификатор строки данных в ТаблицаНачальныхДанных
// 		ТаблицаИсточникаДанныхСвязей			- Структура с ключами - описание таблицы с информацией о дугах маршрутизирующего графа 
// 			ИмяТаблицы							- Строка - имя временной таблицы 
// 			ИмяКолонкиНомераУзлаИсточника		- Строка - имя колонки в ТаблицаНачальныхДанных, содержащей идентификатор узла источника
// 			ИмяКолонкиНомераУзлаПриемника		- Строка - имя колонки в ТаблицаНачальныхДанных, содержащей идентификатор узла приемника
// 		ИмяТаблицыРезультата					- Строка - имя результирующей временной таблицы
// 	
// Возвращаемое значение:
// 		Число -	количество совершенных итераций
// 	)
// 
Функция МаршрутизацияДанныхПоГрафу(МенеджерВременныхТаблиц, ПараметрыГрафа = Неопределено) Экспорт
	
	Если ПараметрыГрафа = Неопределено Тогда
		ПараметрыГрафа = Новый Структура();
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПереопределитьТНД = ПараметрыГрафа.Свойство("ТаблицаНачальныхДанных");
	ПереопределитьИДС = ПараметрыГрафа.Свойство("ТаблицаИсточникаДанныхСвязей");
	ПереопределитьТР = ПараметрыГрафа.Свойство("ИмяТаблицыРезультата");
	
	НомерИтерации = 0;
	ИтераторТаблицыРезультата = "ВТ_" + Формат(НомерИтерации, "ЧН=0; ЧГ=");
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0								КАК НомерИтерации,
	|	-1								КАК НомерУзлаИсточника,
	|	Т.НомерУзла						КАК НомерУзлаПриемника,
	|	Т.КлючДанных					КАК КлючДанных
	|ПОМЕСТИТЬ ВТ_0
	|ИЗ
	|	ТаблицаНачальныхДанных КАК Т;
	|";
	
	Если (ПереопределитьТНД) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНачальныхДанных", ПараметрыГрафа.ТаблицаНачальныхДанных.ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т.НомерУзла", СтрШаблон("Т.%1",ПараметрыГрафа.ТаблицаНачальныхДанных.ИмяКолонкиНомераУзла));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Т.КлючДанных", СтрШаблон("Т.%1",ПараметрыГрафа.ТаблицаНачальныхДанных.ИмяКолонкиКлючаДанных));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ПолученоДанныхНаПредыдущейИтерации = 0;
	ПолученоДанныхНаТекущейИтерации = РазмерВременнойТаблицы(Запрос, ИтераторТаблицыРезультата);
	
	ПродолжатьОбходГрафа = (ПолученоДанныхНаТекущейИтерации > ПолученоДанныхНаПредыдущейИтерации);

	ТекстЗапроса = 
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.НомерИтерации					КАК НомерИтерации,
	|	Т.НомерУзлаИсточника			КАК НомерУзлаИсточника,
	|	Т.НомерУзлаПриемника			КАК НомерУзлаПриемника,
	|	Т.КлючДанных					КАК КлючДанных
	|ПОМЕСТИТЬ ВТ_1
	|ИЗ
	|	ВТ_0 КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&НомерИтерации,
	|	Д.НомерУзлаИсточника,
	|	Д.НомерУзлаПриемника,
	|	Т.КлючДанных
	|ИЗ
	|	ВТ_0 КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсточникДанныхСвязей КАК Д
	|		ПО Т.НомерУзлаПриемника = Д.НомерУзлаИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_0 КАК ТТ
	|			ПО Д.НомерУзлаИсточника = ТТ.НомерУзлаИсточника
	|			И Д.НомерУзлаПриемника = ТТ.НомерУзлаПриемника
	|			И Т.КлючДанных = ТТ.КлючДанных
	|ГДЕ
	|	Т.НомерИтерации = &НомерИтерации-1
	|	И ТТ.НомерИтерации ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_0;
	|";
	
	Если (ПереопределитьИДС) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИсточникДанныхСвязей", ПараметрыГрафа.ТаблицаИсточникаДанныхСвязей.ИмяТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Д.НомерУзлаИсточника", СтрШаблон("Д.%1",ПараметрыГрафа.ТаблицаИсточникаДанныхСвязей.ИмяКолонкиНомераУзлаИсточника));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Д.НомерУзлаПриемника", СтрШаблон("Д.%1",ПараметрыГрафа.ТаблицаИсточникаДанныхСвязей.ИмяКолонкиНомераУзлаПриемника));
	КонецЕсли;
	
	Пока ПродолжатьОбходГрафа Цикл
		
		ИтераторТаблицыРезультатаПредыдущий = ИтераторТаблицыРезультата;
		НомерИтерации = НомерИтерации + 1;
		ИтераторТаблицыРезультата = "ВТ_" + Формат(НомерИтерации, "ЧН=0; ЧГ=");
		
		Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ВТ_1", ИтераторТаблицыРезультата);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_0", ИтераторТаблицыРезультатаПредыдущий);
		
		Запрос.Выполнить();
		
		ПолученоДанныхНаПредыдущейИтерации = ПолученоДанныхНаТекущейИтерации;
		ПолученоДанныхНаТекущейИтерации = РазмерВременнойТаблицы(Запрос, ИтераторТаблицыРезультата);
		
		ПродолжатьОбходГрафа = (ПолученоДанныхНаТекущейИтерации > ПолученоДанныхНаПредыдущейИтерации);
		
	КонецЦикла;
	
	Запрос.Текст = 
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.НомерИтерации					КАК НомерИтерации,
	|	Т.НомерУзлаИсточника			КАК НомерУзлаИсточника,
	|	Т.НомерУзлаПриемника			КАК НомерУзлаПриемника,
	|	Т.КлючДанных					КАК КлючДанных
	|ПОМЕСТИТЬ ТаблицаРезультата
	|ИЗ
	|	ВТ_1 КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_1";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТ_1", ИтераторТаблицыРезультата);
	Если (ПереопределитьТР) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРезультата", ПараметрыГрафа.ИмяТаблицыРезультата);
	КонецЕсли;
	Запрос.Выполнить();
	 
	Возврат НомерИтерации-1;

КонецФункции

#КонецОбласти

#КонецОбласти
