////////////////////////////////////////////////////////////////////////////////
// Заполнение регламентированной отчетности
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает сведения об организации, необходимые для заполнения регламентированной отчетности.
//
// Параметры:
//   Организация       - СправочникСсылка.Организации - ссылка на элемент справочника "Организации".
//   ДатаЗначения      - Дата - дата, на которую нужно получить сведения.
//   СписокПоказателей - СписокЗначений - список показателей, значения которых нужно вернуть.
//
// Возвращаемое значение:
//   Структура - структура с ключами из списка показателей и возвращаемыми значениями.
//
Функция СведенияОбОрганизации(Организация, ДатаСведений, СписокСведений) Экспорт
	
	Сведения = Новый Структура;
	ЗапрашиваемыеПоля = Новый Массив;
	
	СоответствиеИмен = СоответствиеПолямСведенийОбОрганизации();
	
	Если ТипЗнч(СписокСведений) = Тип("СписокЗначений") И ЗначениеЗаполнено(СписокСведений) Тогда
		
		Для Каждого ЭлементСписка Из СписокСведений Цикл
			ИмяПоля = СоответствиеИмен[ЭлементСписка.Представление];
			Если ЗначениеЗаполнено(ИмяПоля) И ЗапрашиваемыеПоля.Найти(ИмяПоля) = Неопределено Тогда
				ЗапрашиваемыеПоля.Добавить(ИмяПоля);
			КонецЕсли;
			Сведения.Вставить(ЭлементСписка.Представление);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СписокСведений) = Тип("Массив") И ЗначениеЗаполнено(СписокСведений) Тогда
		
		Для Каждого ЭлементСписка Из СписокСведений Цикл
			ИмяПоля = СоответствиеИмен[ЭлементСписка];
			Если ЗначениеЗаполнено(ИмяПоля) И ЗапрашиваемыеПоля.Найти(ИмяПоля) = Неопределено Тогда
				ЗапрашиваемыеПоля.Добавить(ИмяПоля);
			КонецЕсли;
			Сведения.Вставить(ЭлементСписка);
		КонецЦикла;
		
	Иначе
		
		// Если список сведений не заполнен или имеет не подходящий тип,
		// то возвращаем все возможные сведения об организации.
		Для Каждого ЭлементСписка Из СоответствиеИмен Цикл
			Сведения.Вставить(ЭлементСписка.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	СведенияОбОрганизации = ОрганизацииСервер.СведенияОбОрганизации(
		Организация, СтрСоединить(ЗапрашиваемыеПоля, ","), ДатаСведений);
	
	Для Каждого ЭлементСписка Из СоответствиеИмен Цикл
		
		Значение = Неопределено;
		Если Сведения.Свойство(ЭлементСписка.Ключ) И ЗначениеЗаполнено(ЭлементСписка.Значение)
			И СведенияОбОрганизации.Свойство(ЭлементСписка.Значение, Значение) Тогда
			Сведения[ЭлементСписка.Ключ] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сведения;
	
КонецФункции

#Область ДоходыИностраннымОрганизациям

Функция ПроизводилисьВыплатыИностраннымКонтрагентам(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	
	Если ГоловнаяОрганизация <> Организация Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);

	ДатаНачалаПериодаОтчета = НалоговыйУчет.НачалоНалоговогоПериода(НачалоПериода, ГоловнаяОрганизация);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("Организации",	Организации);
	
	МассивСчетовДт = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками));

	МассивСчетовКт = ОтчетностьВБанкиСлужебный.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос.УстановитьПараметр("СчетаДт", МассивСчетовДт);
	Запрос.УстановитьПараметр("СчетаКт", МассивСчетовКт);

	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИностранныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоКонтрагенты
	|		ПО Хозрасчетный.Период = СубконтоКонтрагенты.Период
	|			И Хозрасчетный.Регистратор = СубконтоКонтрагенты.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоКонтрагенты.НомерСтроки
	|			И (СубконтоКонтрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (СубконтоКонтрагенты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ПО (СубконтоКонтрагенты.Значение = ВТ_ИностранныеКонтрагенты.Ссылка)
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.СчетДт В(&СчетаДт)
	|	И Хозрасчетный.СчетКт В(&СчетаКт)
	|	И Хозрасчетный.Организация В(&Организации)
	|	И Хозрасчетный.Период >= &НачалоПериода
	|	И Хозрасчетный.Период <= &КонецПериода";

	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Не РезультатЗапроса.Пустой();

	Возврат Результат;

КонецФункции 

// Заполнение показателей отчета "Налоговый расчет о суммах выплаченных иностранным организациям доходов и удержанных налогов".
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура, описывающая параметры формируемого отчета.
//
//  Контейнер  - Структура - структура с адресами во временном хранилище для помещения данных заполнения отчета.
//                 
Процедура ЗаполнитьРегламентированныйОтчетДоходыИностраннымОрганизациям(ПараметрыОтчета, Контейнер) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	СтруктураДанных31 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Данные);
	СтруктураДанных32 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Данные);
	СтруктураДанных33 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки[0].Данные);

	СтруктураДанныхМНЧ31 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ32 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ33 = ОчиститьИСкопироватьСтруктуруДанных(
		Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	
	СтруктураДанных41 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Данные);
	СтруктураДанных42 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Строки[0].Строки[0].Данные);

	СтруктураДанныхМНЧ41 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].ДанныеМногострочныхЧастей);
	СтруктураДанныхМНЧ42 = ОчиститьИСкопироватьСтруктуруДанных(Контейнер.Раздел41.Строки[0].Строки[0].Строки[0].ДанныеМногострочныхЧастей);
	
	Пока Контейнер.Раздел31.Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел31.Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	
	
	Пока Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел31.Строки[0].Строки[0].Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел41.Строки.Количество() > 1 Цикл
		Контейнер.Раздел41.Строки.Удалить(1);
	КонецЦикла;	

	Пока Контейнер.Раздел41.Строки[0].Строки[0].Строки.Количество() > 1 Цикл
		Контейнер.Раздел41.Строки[0].Строки[0].Строки.Удалить(1);
	КонецЦикла;	
	
	ДанныеОтчета = ДанныеОтчетаДоходыИностраннымОрганизациям(ПараметрыОтчета);
	
	ГодОтчета = Год(ПараметрыОтчета.мДатаКонцаПериодаОтчета);

	ПредыдущиеКонтрагенты = Новый Соответствие;
	
	НомерСтрокиРаздела4 = 0;
	НомерСтрокиРаздела3 = 0;
	СуммаПоТоварам = 0;

	ЗаполнитьДоходыИноОргРаздел1(Контейнер.Раздел1.Строки[0]);
	ЗаполнитьДоходыИноОргРаздел2(Контейнер.Раздел2.Строки[0], ГодОтчета);

	НомераСтрокМногоуровнегоРаздела = Новый Структура;
	НомераСтрокМногоуровнегоРаздела.Вставить("Раздел3", Новый Массив);
	НомераСтрокМногоуровнегоРаздела.Вставить("Раздел4", Новый Массив);
	
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел3.Добавить(1);
	
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	НомераСтрокМногоуровнегоРаздела.Раздел4.Добавить(1);
	
	СоответствиеСчетовКт 		= Новый Соответствие;
	СоответствиеРегистраторов	= Новый Соответствие;
	СоответствиеКонтрагентов	= Новый Соответствие;
	СоответствиеДоговоров		= Новый Соответствие;
	
	Для каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
		
		ВидДохода = СтрокаДанныхОтчета.ВидДохода;
		
		Если ВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.НеУчитываемыеВОтчетности Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеАдреса = СтрокаДанныхОтчета.ПредставлениеАдреса;
		
		Если ЗначениеЗаполнено(ВидДохода) Тогда

			ЭтоНеОблагаемыйВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.ЭтоНеОблагаемыйНалогомВидДохода(ВидДохода);
			ЭтоВидДоходаТовары = (ВидДохода = Перечисления.ВидыДоходовИностранныхОрганизаций.ДоходыТовары);
			
		Иначе
			
			ЭтоНеОблагаемыйВидДохода = Истина;
			ЭтоВидДоходаТовары = Ложь;
			
		КонецЕсли;
		
		Если ЭтоВидДоходаТовары Тогда
			//Раздел 5
			
			СоответствиеСчетовКт.Вставить(СтрокаДанныхОтчета.СчетКт);
			СоответствиеРегистраторов.Вставить(СтрокаДанныхОтчета.Регистратор);
			СоответствиеКонтрагентов.Вставить(СтрокаДанныхОтчета.Контрагент);
			СоответствиеДоговоров.Вставить(СтрокаДанныхОтчета.Договор);
			
			СуммаПоТоварам = СуммаПоТоварам + СтрокаДанныхОтчета.Сумма;
			
		ИначеЕсли ЭтоНеОблагаемыйВидДохода Тогда
			//Раздел 4
			//Раздел 4.1 Контейнер.Раздел41.Строки[N]
			//Раздел 4.2 Контейнер.Раздел41.Строки[N].Строки[0].Строки[M]
			
			СтруктураДанныхКонтрагента = ПредыдущиеКонтрагенты["Раздел4"];
			Если СтруктураДанныхКонтрагента = Неопределено Тогда
				
				СтруктураДанныхКонтрагента = СоздатьСтруктуруДанныхКонтрагента(СтрокаДанныхОтчета.Контрагент, 1);
				
				ПредыдущиеКонтрагенты.Вставить("Раздел4", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела4 = 0;
				СтрокаРаздела41 = Контейнер.Раздел41.Строки[НомерСтрокиРаздела4]; 
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки[0];
				
				ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела41, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки, 
					НомераСтрокМногоуровнегоРаздела.Раздел4, ГодОтчета);
				
			ИначеЕсли СтруктураДанныхКонтрагента.Контрагент <> СтрокаДанныхОтчета.Контрагент Тогда 

				Контейнер.Раздел41.Строки.Добавить();
				
				СтруктураДанныхКонтрагента.УникальныйНомер = СтруктураДанныхКонтрагента.УникальныйНомер + 1;
				СтруктураДанныхКонтрагента.Контрагент = СтрокаДанныхОтчета.Контрагент;
				
				ПредыдущиеКонтрагенты.Вставить("Раздел4", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела4 = НомерСтрокиРаздела4 + 1;
				СтрокаРаздела41 = Контейнер.Раздел41.Строки[НомерСтрокиРаздела4]; 
				
				СтрокаРаздела41.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных41);
				СтрокаРаздела41.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ41);
				
				СтрокаРаздела41.Строки.Добавить();
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки.Добавить();
				
				СтрокаРаздела42.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных42);
				СтрокаРаздела42.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ42);
 					
				НомераСтрокМногоуровнегоРаздела.Раздел4[0] = НомераСтрокМногоуровнегоРаздела.Раздел4[0] + 1;
				НомераСтрокМногоуровнегоРаздела.Раздел4[2] = 1;

				ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела41, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел4, ГодОтчета);
				
			Иначе
				
				СтрокаРаздела41.Строки.Добавить();
				СтрокаРаздела42 = СтрокаРаздела41.Строки[0].Строки.Добавить();
				
				СтрокаРаздела42.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных42);
				СтрокаРаздела42.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ42);

				НомераСтрокМногоуровнегоРаздела.Раздел4[2] = НомераСтрокМногоуровнегоРаздела.Раздел4[2] + 1;
				
				ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела42, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДохода, ТаблицаРасшифровки,
 					НомераСтрокМногоуровнегоРаздела.Раздел4, ГодОтчета);
	
			КонецЕсли;
			
		Иначе
			//Раздел 3
			//Раздел 3.1 Контейнер.Раздел31.Строки[N]
			//Раздел 3.2 Контейнер.Раздел31.Строки[N].Строки[0].Строки[M]
			//Раздел 3.3 Контейнер.Раздел31.Строки[N].Строки[0].Строки[M].Строки[0].Строки[K]

			СтруктураДанныхКонтрагента = ПредыдущиеКонтрагенты["Раздел3"];
			Если СтруктураДанныхКонтрагента = Неопределено Тогда
				
				СтруктураДанныхКонтрагента = СоздатьСтруктуруДанныхКонтрагента(СтрокаДанныхОтчета.Контрагент, 1);
				
				ПредыдущиеКонтрагенты.Вставить("Раздел3", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела3 = 0;
				СтрокаРаздела31 = Контейнер.Раздел31.Строки[НомерСтрокиРаздела3];
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки[0];
				
				ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела31, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ГодОтчета);
				
			ИначеЕсли СтруктураДанныхКонтрагента.Контрагент <> СтрокаДанныхОтчета.Контрагент Тогда 

				Контейнер.Раздел31.Строки.Добавить();
				
				СтруктураДанныхКонтрагента.УникальныйНомер = СтруктураДанныхКонтрагента.УникальныйНомер + 1;
				СтруктураДанныхКонтрагента.Контрагент = СтрокаДанныхОтчета.Контрагент;
				
				ПредыдущиеКонтрагенты.Вставить("Раздел3", СтруктураДанныхКонтрагента);
				НомерСтрокиРаздела3 = НомерСтрокиРаздела3 + 1;
				СтрокаРаздела31 = Контейнер.Раздел31.Строки[НомерСтрокиРаздела3]; 
				
				СтрокаРаздела31.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных31);
				СтрокаРаздела31.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ31);

				СтрокаРаздела31.Строки.Добавить();
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки.Добавить();

				СтрокаРаздела32.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных32);
				СтрокаРаздела32.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ32);
				
				СтрокаРаздела32.Строки.Добавить();
				СтрокаРаздела33 = СтрокаРаздела32.Строки[0].Строки.Добавить();
				
				СтрокаРаздела33.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных33);
				СтрокаРаздела33.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ33);

				НомераСтрокМногоуровнегоРаздела.Раздел3[0] = НомераСтрокМногоуровнегоРаздела.Раздел3[0] + 1;
				НомераСтрокМногоуровнегоРаздела.Раздел3[2] = 1;

				ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела31, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ПредставлениеАдреса);
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ГодОтчета);
				
			Иначе
				
				СтрокаРаздела31.Строки.Добавить();
				СтрокаРаздела32 = СтрокаРаздела31.Строки[0].Строки.Добавить();

				СтрокаРаздела32.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных32);
				СтрокаРаздела32.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ32);
				
				СтрокаРаздела32.Строки.Добавить();
				СтрокаРаздела33 = СтрокаРаздела32.Строки[0].Строки.Добавить();

				СтрокаРаздела33.Данные = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных33);
				СтрокаРаздела33.ДанныеМногострочныхЧастей = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанныхМНЧ33);
				
				НомераСтрокМногоуровнегоРаздела.Раздел3[2] = НомераСтрокМногоуровнегоРаздела.Раздел3[2] + 1;
				
				ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела32, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
					НомераСтрокМногоуровнегоРаздела.Раздел3, ГодОтчета);
				
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеПараметрыТовары = Новый Структура;
	ДополнительныеПараметрыТовары.Вставить("Действие", "ОтчетПоПроводкам");
	
	ДополнительныеПараметрыТовары.Вставить("СчетКт", МассивКлючейСоответствия(СоответствиеСчетовКт)); 
	ДополнительныеПараметрыТовары.Вставить("Регистратор", МассивКлючейСоответствия(СоответствиеРегистраторов)); 
	ДополнительныеПараметрыТовары.Вставить("СубконтоДт1", МассивКлючейСоответствия(СоответствиеКонтрагентов));
	ДополнительныеПараметрыТовары.Вставить("СубконтоДт2", МассивКлючейСоответствия(СоответствиеДоговоров)); 

	ЗаполнитьДоходыИноОргРаздел5(Контейнер.Раздел5.Строки[0], СуммаПоТоварам, ТаблицаРасшифровки, ДополнительныеПараметрыТовары, ГодОтчета);
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);

КонецПроцедуры

Функция ПолучитьСведенияОПоказателяхДоходыИностраннымОрганизациям(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000310005003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410001004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000410004003", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320001403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320001603", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320012003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000320013003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420001403", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000420010003", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000500001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000500002003", Истина, Ложь);
	
	Возврат ПоказателиОтчета;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДоходыИностраннымОрганизациям

Процедура ОчиститьСтруктуруДанных(СтруктураДанных)
	
	Для каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ТипЗначенияСтруктуры = ТипЗнч(ЭлементСтруктуры.Значение);
		
		СтруктураДанных.Вставить(ЭлементСтруктуры.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗначенияСтруктуры));
	
	КонецЦикла;

КонецПроцедуры

Функция ОчиститьИСкопироватьСтруктуруДанных(СтруктураДанных)
	
	ОчиститьСтруктуруДанных(СтруктураДанных);
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДанных);

КонецФункции

Функция ДанныеОтчетаДоходыИностраннымОрганизациям(ПараметрыОтчета)
	
	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(ПараметрыОтчета.Организация);
	Организации         = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ГоловнаяОрганизация);
	ДатаНачалаПериодаОтчета = ОбщегоНазначенияБПВызовСервера.НачалоПоследнейЧастиОтчетногоПериодаПрибыль(ПараметрыОтчета.мДатаКонцаПериодаОтчета,
		ГоловнаяОрганизация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",	ДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",	ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организации",	Организации);

	МассивСчетовДт = Новый Массив;

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетовДт,
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками));
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал);
	МассивСчетовДт.Добавить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал);
	
	МассивСчетовКт = ОтчетностьВБанкиСлужебный.ПолучитьСчетаССубконтоБанковскиеСчета();
	
	Запрос.УстановитьПараметр("СчетаДт", МассивСчетовДт);
	Запрос.УстановитьПараметр("СчетаКт", МассивСчетовКт);

	Запрос.УстановитьПараметр("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);


	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,  
	|	ВЫБОР КОГДА Контрагенты.НаименованиеВТранскрипции="""" 
	|         ТОГДА Контрагенты.Наименование
	|         ИНАЧЕ Контрагенты.НаименованиеВТранскрипции 
	|    КОНЕЦ КАК ПолеСортировки,
	|	Контрагенты.НаименованиеВТранскрипции КАК НаименованиеНерезидентаРус,
	|	Контрагенты.СтранаРегистрации КАК СтранаРегистрации,
	|	Контрагенты.СтранаРегистрации.Код КАК КодСтраны,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер
	|ПОМЕСТИТЬ ВТ_ИностранныеКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИностранныеКонтрагенты.Ссылка КАК Контрагент,
	|	МАКСИМУМ(КонтрагентыКонтактнаяИнформация.ДействуетС) КАК ДействуетС
	|ПОМЕСТИТЬ ВТ_АдресКонтрагента
	|ИЗ
	|	ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ВТ_ИностранныеКонтрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.ДействуетС <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИностранныеКонтрагенты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) КАК ДатаПлатежа,
	|	Хозрасчетный.СчетДт.Родитель КАК СчетДт,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	СубконтоКонтрагенты.Значение КАК Контрагент,
	|	ВТ_ИностранныеКонтрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ВТ_ИностранныеКонтрагенты.КодСтраны КАК КодСтраны,
	|	ВТ_ИностранныеКонтрагенты.НалоговыйНомер КАК НалоговыйНомер,
	|	ВТ_ИностранныеКонтрагенты.ПолеСортировки КАК ПолеСортировки,
	|	ЕСТЬNULL(КонтрагентыКонтактнаяИнформация.Представление,"""") КАК ПредставлениеАдреса,
	|	ВТ_ИностранныеКонтрагенты.НаименованиеНерезидентаРус КАК НаименованиеНерезидентаРус,
	|	СубконтоДоговоры.Значение КАК Договор, 
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКонтрагентов.ВидДоходаИностранногоКонтрагента
	|		КОГДА НЕ ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКредитовИДепозитов.ВидДоходаИностранногоКонтрагента
	|		КОГДА НЕ ДоговорыАренды.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыАренды.ВидДоходаИностранногоКонтрагента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидДохода, 
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКонтрагентов.УникальныйНомерВалютногоКонтроля
	|		КОГДА НЕ ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКредитовИДепозитов.УникальныйНомерВалютногоКонтроля
	|		КОГДА НЕ ДоговорыАренды.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыАренды.УникальныйНомерВалютногоКонтроля
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК УникальныйНомерВалютногоКонтроля,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0) КАК КурсВалюты,
	|	ЕСТЬNULL(КурсыВалют.КурсЗнаменатель, 1) КАК КратностьВалюты,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.ВалютнаяСуммаКт, Хозрасчетный.Сумма)) КАК ВалютнаяСумма,
	|	ЕСТЬNULL(Хозрасчетный.ВалютаКт, &ВалютаРеглУчета) КАК Валюта,
	|	Валюты.Код КАК КодВалюты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоКонтрагенты
	|		ПО Хозрасчетный.Период = СубконтоКонтрагенты.Период
	|			И Хозрасчетный.Регистратор = СубконтоКонтрагенты.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоКонтрагенты.НомерСтроки
	|			И (СубконтоКонтрагенты.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (СубконтоКонтрагенты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИностранныеКонтрагенты КАК ВТ_ИностранныеКонтрагенты
	|		ПО (СубконтоКонтрагенты.Значение = ВТ_ИностранныеКонтрагенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК СубконтоДоговоры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО СубконтоДоговоры.Значение = ДоговорыКонтрагентов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|			ПО СубконтоДоговоры.Значение = ДоговорыКредитовИДепозитов.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыАренды КАК ДоговорыАренды
	|			ПО СубконтоДоговоры.Значение = ДоговорыАренды.Ссылка
	|		ПО Хозрасчетный.Период = СубконтоДоговоры.Период
	|			И Хозрасчетный.Регистратор = СубконтоДоговоры.Регистратор
	|			И Хозрасчетный.НомерСтроки = СубконтоДоговоры.НомерСтроки
	|			И (СубконтоДоговоры.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И (СубконтоДоговоры.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АдресКонтрагента КАК АдресКонтрагента
	|		ПО (ВТ_ИностранныеКонтрагенты.Ссылка = АдресКонтрагента.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО (АдресКонтрагента.Контрагент = КонтрагентыКонтактнаяИнформация.Ссылка)
	|			И (АдресКонтрагента.ДействуетС = КонтрагентыКонтактнаяИнформация.ДействуетС)
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО Хозрасчетный.ВалютаКт = КурсыВалют.Валюта
	|			И (НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) = КурсыВалют.Период)
	|			И (КурсыВалют.БазоваяВалюта = &ВалютаРеглУчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЕСТЬNULL(Хозрасчетный.ВалютаКт, &ВалютаРеглУчета) = Валюты.Ссылка
	|ГДЕ
	|	Хозрасчетный.Активность
	|	И Хозрасчетный.СчетДт В(&СчетаДт)
	|	И Хозрасчетный.СчетКт В(&СчетаКт)
	|	И Хозрасчетный.Организация В(&Организации)
	|	И Хозрасчетный.Период >= &НачалоПериода
	|	И Хозрасчетный.Период <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	СубконтоКонтрагенты.Значение,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ),
	|	ЕСТЬNULL(Хозрасчетный.ВалютаКт, &ВалютаРеглУчета),
	|	ВТ_ИностранныеКонтрагенты.НалоговыйНомер,
	|	Хозрасчетный.СчетКт,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКонтрагентов.УникальныйНомерВалютногоКонтроля
	|		КОГДА НЕ ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКредитовИДепозитов.УникальныйНомерВалютногоКонтроля
	|		КОГДА НЕ ДоговорыАренды.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыАренды.УникальныйНомерВалютногоКонтроля
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДоходовИностранныхОрганизаций.ПустаяСсылка)	
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКонтрагентов.ВидДоходаИностранногоКонтрагента
	|		КОГДА НЕ ДоговорыКредитовИДепозитов.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыКредитовИДепозитов.ВидДоходаИностранногоКонтрагента
	|		КОГДА НЕ ДоговорыАренды.Ссылка ЕСТЬ NULL
	|			ТОГДА ДоговорыАренды.ВидДоходаИностранногоКонтрагента
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	КонтрагентыКонтактнаяИнформация.Представление,
	|	Хозрасчетный.СчетДт.Родитель,
	|	ВТ_ИностранныеКонтрагенты.НаименованиеНерезидентаРус,   
	|	ВТ_ИностранныеКонтрагенты.ПолеСортировки,
	|	ВТ_ИностранныеКонтрагенты.НаименованиеПолное,
	|	КурсыВалют.КурсЗнаменатель,
	|	СубконтоДоговоры.Значение,
	|	Хозрасчетный.Регистратор,
	|	ВТ_ИностранныеКонтрагенты.КодСтраны,
	|	ЕСТЬNULL(КурсыВалют.КурсЧислитель, 0),
	|	Валюты.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки,
	|	ДатаПлатежа";

		
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = РезультатЗапроса.Выгрузить();

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДоходыИноОргРаздел31(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки, 
	КоординатыСтраницыРаздела, ПредставлениеАдреса)

	СтрокаРаздела.Данные.П000310000103 = Формат(СтруктураДанныхКонтрагента.УникальныйНомер, "ЧЦ=12; ЧН=0; ЧВН=; ЧГ=");
	СтрокаРаздела.Данные.П000310001003 = "2";
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.НаименованиеНерезидентаРус) Тогда
		СтрокаРаздела.Данные.П000310002003 = СтрокаДанныхОтчета.НаименованиеНерезидентаРус;
	Иначе
		СтрокаРаздела.Данные.П000310002003 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) 
		И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) Тогда
	
		СтрокаРаздела.Данные.П000310002004 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	Иначе
		СтрокаРаздела.Данные.П000310002004 = СтроковыеФункции.СтрокаЛатиницей(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное);
	КонецЕсли;

	СтрокаРаздела.Данные.П000310003003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000310008003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000310004003 = ПредставлениеАдреса;
	СтрокаРаздела.Данные.П000310005003 = СтрокаДанныхОтчета.НалоговыйНомер;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Контрагент");
	ДополнительныеПараметры.Вставить("Контрагент", СтруктураДанныхКонтрагента.Контрагент); 
	
	ИтоговыйНомерСтраницы = "Раздел31";
	Если КоординатыСтраницыРаздела.Количество() > 0 Тогда
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(КоординатыСтраницыРаздела[0], "ЧН=0; ЧГ="));
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000310002003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел41(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
	КоординатыСтраницыРаздела, ПредставлениеАдреса)

	СтрокаРаздела.Данные.П000410000103 = Формат(СтруктураДанныхКонтрагента.УникальныйНомер, "ЧЦ=12; ЧН=0; ЧВН=; ЧГ=");
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.НаименованиеНерезидентаРус) Тогда
		СтрокаРаздела.Данные.П000410001003 = СтрокаДанныхОтчета.НаименованиеНерезидентаРус;
	Иначе
		СтрокаРаздела.Данные.П000410001003 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) 
		И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное) Тогда
	
		СтрокаРаздела.Данные.П000410001004 = СтрокаДанныхОтчета.КонтрагентНаименованиеПолное;
	Иначе
		СтрокаРаздела.Данные.П000410001004 = СтроковыеФункции.СтрокаЛатиницей(СтрокаДанныхОтчета.КонтрагентНаименованиеПолное);
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000410002003 = СтрокаДанныхОтчета.КодСтраны;
	СтрокаРаздела.Данные.П000410003003 = ПредставлениеАдреса;
	СтрокаРаздела.Данные.П000410004003 = СтрокаДанныхОтчета.НалоговыйНомер;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "Контрагент");
	ДополнительныеПараметры.Вставить("Контрагент", СтруктураДанныхКонтрагента.Контрагент); 
	
	ИтоговыйНомерСтраницы = "Раздел41";
	Если КоординатыСтраницыРаздела.Количество() > 0 Тогда
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(КоординатыСтраницыРаздела[0], "ЧН=0; ЧГ="));
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000410001003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел32(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ТаблицаРасшифровки,
	КоординатыСтраницыРаздела, ГодОтчета)

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля) Тогда
		СтрокаРаздела.Данные.П000320001403 = "1";
	Иначе
		СтрокаРаздела.Данные.П000320001403 = "0";
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000320001603 = СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля;
	СтрокаРаздела.Данные.П000320002003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(СтрокаДанныхОтчета.ВидДохода,
		ГодОтчета);
	
	Если СтрокаДанныхОтчета.КодВалюты = "643" Тогда
		СтрокаРаздела.Данные.П000320004003 = Окр(СтрокаДанныхОтчета.ВалютнаяСумма, 0);
		СтрокаРаздела.Данные.П000320012003 = 0;
	Иначе
		СтрокаРаздела.Данные.П000320004003 = СтрокаДанныхОтчета.ВалютнаяСумма;
		СтрокаРаздела.Данные.П000320012003 = Окр(СтрокаДанныхОтчета.КурсВалюты / 
			?(СтрокаДанныхОтчета.КратностьВалюты <> 0, СтрокаДанныхОтчета.КратностьВалюты, 1), 4);
	КонецЕсли;

	СтрокаРаздела.Данные.П000320005003 = СтрокаДанныхОтчета.КодВалюты;
	СтрокаРаздела.Данные.П000320006003 = СтрокаДанныхОтчета.ДатаПлатежа;
	СтрокаРаздела.Данные.П000320013003 = Окр(СтрокаДанныхОтчета.Сумма, 0);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ОтчетПоПроводкам");
	ДополнительныеПараметры.Вставить("СчетКт", СтрокаДанныхОтчета.СчетКт); 
	ДополнительныеПараметры.Вставить("СчетДт", СтрокаДанныхОтчета.СчетДт); 
	ДополнительныеПараметры.Вставить("Регистратор", СтрокаДанныхОтчета.Регистратор); 

	ДополнительныеПараметры.Вставить("СубконтоДт1", СтрокаДанныхОтчета.Контрагент);
	ДополнительныеПараметры.Вставить("СубконтоДт2", СтрокаДанныхОтчета.Договор);
	
	ИтоговыйНомерСтраницы = "Раздел32";
	Для каждого НомерСтраницы Из КоординатыСтраницыРаздела Цикл
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(НомерСтраницы, "ЧН=0; ЧГ="));
	КонецЦикла;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000320004003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел42(СтрокаРаздела, СтрокаДанныхОтчета, СтруктураДанныхКонтрагента, ВидДоходаВычисленный,
	ТаблицаРасшифровки, КоординатыСтраницыРаздела, ГодОтчета)

	Если ЗначениеЗаполнено(СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля) Тогда
		СтрокаРаздела.Данные.П000420001403 = "1";
	Иначе
		СтрокаРаздела.Данные.П000420001403 = "0";
	КонецЕсли;
	
	СтрокаРаздела.Данные.П000420002003 = СтрокаДанныхОтчета.УникальныйНомерВалютногоКонтроля;
	
	Если ЗначениеЗаполнено(ВидДоходаВычисленный) Тогда
		СтрокаРаздела.Данные.П000420003003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(ВидДоходаВычисленный,
			ГодОтчета);
	Иначе	
		СтрокаРаздела.Данные.П000420003003 = "";
	КонецЕсли;
	
	Если СтрокаДанныхОтчета.КодВалюты = "643" Тогда
		СтрокаРаздела.Данные.П000420005003 = Окр(СтрокаДанныхОтчета.ВалютнаяСумма, 0);
		СтрокаРаздела.Данные.П000420008003 = 0;
	Иначе
		СтрокаРаздела.Данные.П000420005003 = СтрокаДанныхОтчета.ВалютнаяСумма;
		СтрокаРаздела.Данные.П000420008003 = Окр(СтрокаДанныхОтчета.КурсВалюты / 
			?(СтрокаДанныхОтчета.КратностьВалюты <> 0, СтрокаДанныхОтчета.КратностьВалюты, 1), 4);
	КонецЕсли;

	СтрокаРаздела.Данные.П000420006003 = СтрокаДанныхОтчета.КодВалюты;
	СтрокаРаздела.Данные.П000420007003 = СтрокаДанныхОтчета.ДатаПлатежа;
	СтрокаРаздела.Данные.П000420009003 = Окр(СтрокаДанныхОтчета.Сумма, 0);

	СтрокаРаздела.Данные.П000420010003 = "1";

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Действие", "ОтчетПоПроводкам");
	ДополнительныеПараметры.Вставить("СчетКт", СтрокаДанныхОтчета.СчетКт); 
	ДополнительныеПараметры.Вставить("СчетДт", СтрокаДанныхОтчета.СчетДт); 
	ДополнительныеПараметры.Вставить("Регистратор", СтрокаДанныхОтчета.Регистратор); 
	
	ДополнительныеПараметры.Вставить("СубконтоДт1", СтрокаДанныхОтчета.Контрагент);
	ДополнительныеПараметры.Вставить("СубконтоДт2", СтрокаДанныхОтчета.Договор);
	
	ИтоговыйНомерСтраницы = "Раздел42";
	Для каждого НомерСтраницы Из КоординатыСтраницыРаздела Цикл
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИтоговыйНомерСтраницы, Формат(НомерСтраницы, "ЧН=0; ЧГ="));
	КонецЦикла;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
		"П000420005003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметры);

КонецПроцедуры 

Процедура ЗаполнитьДоходыИноОргРаздел5(Раздел, СуммаПоТоварам, ТаблицаРасшифровки, ДополнительныеПараметрыРасшифровки, ГодОтчета)
	
	Раздел.Данные.П000500002003 = Окр(СуммаПоТоварам, 0);
	
	Если Раздел.Данные.П000500002003 <> 0 Тогда
		Раздел.Данные.П000500001003 = Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(
			Перечисления.ВидыДоходовИностранныхОрганизаций.ДоходыТовары, ГодОтчета);
			
		ИмяРаздела = "Раздел5";
		НомерСтраницы = "1";
		ИтоговыйНомерСтраницы = СтрШаблон("%1_%2", ИмяРаздела, НомерСтраницы);
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки,
			"П000500002003", "", "", "", "", ИтоговыйНомерСтраницы, ДополнительныеПараметрыРасшифровки);
	Иначе
		Раздел.Данные.П000500001003 = "";
	КонецЕсли;

КонецПроцедуры 

Процедура ЗаполнитьДоходыИноОргРаздел2(Раздел, ГодОтчета)
	
	Если Не ЗначениеЗаполнено(Раздел.ДанныеМногострочныхЧастей.П0002000.Строки[0].Данные.П000200001003) Тогда
		Раздел.ДанныеМногострочныхЧастей.П0002000.Строки[0].Данные.П000200001003 = 
			Перечисления.ВидыДоходовИностранныхОрганизаций.КодВидаДохода(
				Перечисления.ВидыДоходовИностранныхОрганизаций.ИныеДоходыНеОблагаемые, ГодОтчета);
	КонецЕсли;
			
КонецПроцедуры

Процедура ЗаполнитьДоходыИноОргРаздел1(Раздел)
	
	Если Не ЗначениеЗаполнено(Раздел.ДанныеМногострочныхЧастей.П0001000.Строки[0].Данные.П000100002003) Тогда
		Раздел.ДанныеМногострочныхЧастей.П0001000.Строки[0].Данные.П000100002003 = "00000000000000000000";
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтруктуруДанныхКонтрагента(Контрагент, УникальныйНомер)

	Результат = Новый Структура("Контрагент,УникальныйНомер,ПредставлениеАдреса");
	Результат.Контрагент = Контрагент;
	Результат.УникальныйНомер = УникальныйНомер;

	Возврат Результат;

КонецФункции

Функция МассивКлючейСоответствия(Соответствие)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементСоответствия Из Соответствие Цикл
		Результат.Добавить(ЭлементСоответствия.Ключ);	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Имущество

#Область Имущество2011Кв3

Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2011Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Ложь);

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцентУменьшенияСуммыНалога = РезультатЗапроса.Выгрузить()[0].ПроцентУменьшения;
	Иначе
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
			,ПараметрыОтчета.Организация, ПутьКРегистру));
			
		Возврат;
		
	КонецЕсли;
	
	Период  = НачалоМесяца(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Счетчик = 1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Признак применения ЕНВД.
	ПрименениеЕНВД = Ложь;
	
	ГоловнаяОрганизация = ПараметрыОтчета.Организация.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = ПараметрыОтчета.Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецГода(Период));
	Запрос.УстановитьПараметр("НалоговыйОрган", ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОС,
	|	МИНИМУМ(ПорядокУчетаОСБУ.Период) КАК ДатаСостояния
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И ПорядокУчетаОСБУ.Организация В
	|			(ВЫБРАТЬ
	|				Организации.Ссылка КАК Ссылка
	|			ИЗ
	|				Справочник.Организации КАК Организации
	|			ГДЕ
	|				(Организации.Ссылка = &ГоловнаяОрганизация
	|					ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация))
	|	И ПорядокУчетаОСБУ.Период <= &КонецПериодаОтчета
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Активность
	|	И НЕ ПорядокУчетаОСБУ.НедвижимоеИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний.ОС
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013
	|ИЗ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний
	|ГДЕ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний.ДатаСостояния >= ДАТАВРЕМЯ(2013, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний";
	Запрос.Выполнить();
	
	ТекстОбъединяющегоЗапроса = "";
	
	Пока Период <= НачалоМесяца(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, 1)) Цикл
		
		ПрименениеУСН = УчетнаяПолитика.ПрименяетсяУСН( ПараметрыОтчета.Организация, КонецКвартала(Период));
		
		Если НЕ ПрименениеУСН Тогда
			
			Запрос.УстановитьПараметр("Период",          Период);
			
			// Срез последних записей по основному средству в регистре "Ставки налога на имущество по отдельным основным средствам".
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство,
			|	МАКСИМУМ(ПараметрыНачисленияНалогаНаИмущество.Период) КАК ПериодСреза
			|ПОМЕСТИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов
			|ИЗ
			|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ПараметрыНачисленияНалогаНаИмущество
			|ГДЕ
			|	ПараметрыНачисленияНалогаНаИмущество.Период <= &Период
			|	И ПараметрыНачисленияНалогаНаИмущество.Организация = &Организация
			|	И ПараметрыНачисленияНалогаНаИмущество.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство,
			|	ПараметрыНачисленияНалогаНаИмущество.НалоговыйОрган,
			|	ПараметрыНачисленияНалогаНаИмущество.ПорядокНалогообложения
			|ПОМЕСТИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ПараметрыНачисленияНалогаНаИмущество
			|		ПО ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство
			|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов.ПериодСреза = ПараметрыНачисленияНалогаНаИмущество.Период
			|			И ПараметрыНачисленияНалогаНаИмущество.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|";
			Запрос.Выполнить();
			
			Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				
				// Выборка объектов по основному налоговому органу организации (его нет в справочнике Регистрация в налоговом органе).
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОС.Ссылка КАК ОсновноеСредство
				|ПОМЕСТИТЬ
				|	СписокРазрешенныхОС
				|ИЗ
				|	Справочник.ОбъектыЭксплуатации КАК ОС
				|ГДЕ
				|	(НЕ ОС.Ссылка В 
				|		(ВЫБРАТЬ
				|			ПорядокУчетаОСБУ.ОсновноеСредство
				|		ИЗ
				|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
				|		ГДЕ
				|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
				|			И ПорядокУчетаОСБУ.ДатаСостояния < &Период
				|			И ПорядокУчетаОСБУ.Организация = &Организация
				|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
				|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
				|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
				|	И (НЕ ОС.Ссылка В
				|		(ВЫБРАТЬ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
				|		ИЗ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ГДЕ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
				|			ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)))
				|ИНДЕКСИРОВАТЬ ПО
				|	ОсновноеСредство
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
				|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости
				|
				|ПОМЕСТИТЬ
				|	СписокОС
				|
				|ИЗ
				|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
				|			&Период,
				|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
				|				И Организация = &Организация
				|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
				|	) КАК ПервоначальныеСведенияОС
				|ИНДЕКСИРОВАТЬ ПО
				|	 ОсновноеСредство";
				
			Иначе
				
				Если КодНалоговогоОргана = РеквизитыОрганизации.КодНалоговогоОргана Тогда
					
					// Выборка объектов по основному налоговому органу организации (он есть в справочнике Регистрация налоговом органе).
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОС.Ссылка КАК ОсновноеСредство
					|ПОМЕСТИТЬ
					|	СписокРазрешенныхОС
					|ИЗ
					|	Справочник.ОбъектыЭксплуатации КАК ОС
					|ГДЕ
					|	(НЕ ОС.Ссылка В 
					|		(ВЫБРАТЬ
					|			ПорядокУчетаОСБУ.ОсновноеСредство
					|		ИЗ
					|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
					|		ГДЕ
					|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
					|			И ПорядокУчетаОСБУ.Период < &Период
					|			И ПорядокУчетаОСБУ.Организация = &Организация
					|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
					|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
					|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
					|	И (НЕ ОС.Ссылка В
					|		(ВЫБРАТЬ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
					|		ИЗ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
					|		ГДЕ
					|			(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
					|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> &НалоговыйОрган)
					|			ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)))
					|ИНДЕКСИРОВАТЬ ПО
					|	ОсновноеСредство
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
					|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости
					|
					|ПОМЕСТИТЬ
					|	СписокОС
					|
					|ИЗ
					|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
					|			&Период,
					|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
					|				И Организация = &Организация
					|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
					|	) КАК ПервоначальныеСведенияОС
					|ИНДЕКСИРОВАТЬ ПО
					|	 ОсновноеСредство";
					
				Иначе
					
					// Выборка объектов по указанному пользователем налоговому органу.
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОС.Ссылка КАК ОсновноеСредство
					|ПОМЕСТИТЬ
					|	СписокРазрешенныхОС
					|ИЗ
					|	Справочник.ОбъектыЭксплуатации КАК ОС
					|ГДЕ
					|	(НЕ ОС.Ссылка В 
					|		(ВЫБРАТЬ
					|			ПорядокУчетаОСБУ.ОсновноеСредство
					|		ИЗ
					|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
					|		ГДЕ
					|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
					|			И ПорядокУчетаОСБУ.Период < &Период
					|			И ПорядокУчетаОСБУ.Организация = &Организация
					|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
					|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
					|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
					|	И (ОС.Ссылка В
					|		(ВЫБРАТЬ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
					|		ИЗ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
					|		ГДЕ
					|			(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган = &НалоговыйОрган
					|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению))))
					|ИНДЕКСИРОВАТЬ ПО
					|	ОсновноеСредство
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
					|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости
					|
					|ПОМЕСТИТЬ
					|	СписокОС
					|
					|ИЗ
					|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
					|			&Период,
					|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
					|				И Организация = &Организация
					|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
					|	) КАК ПервоначальныеСведенияОС
					|ИНДЕКСИРОВАТЬ ПО
					|	 ОсновноеСредство";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Запрос.Выполнить();
			
			// Выборка счетов учета ОС
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, СчетаУчета.СчетУчета) КАК СчетУчета,
			|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, СчетаУчета.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации
			|ПОМЕСТИТЬ СчетаУчетаОС
			|ИЗ
			|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
			|			&Период,
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И ОсновноеСредство В
			|					(ВЫБРАТЬ
			|						СписокОС.ОсновноеСредство
			|					ИЗ
			|						СписокОС)) КАК СчетаУчета
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
			|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
			|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаСтоимости.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
			|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
			|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаАмортизации.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
			|	NULL";
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Период) КАК Период,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
			|ПОМЕСТИТЬ ВТ_СрезПоследних
			|ИЗ
			|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
			|			&Период, 
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И Организация = &Организация 
			|				И ОсновноеСредство В (ВЫБРАТЬ СписокОС.ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновноеСредство,Период
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СрезПоследних.ОсновноеСредство,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Организация,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство КАК ОсновноеСредство1,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель
			|ПОМЕСТИТЬ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	ВТ_СрезПоследних КАК СрезПоследних
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
			|			&Период, 
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И Организация = &Организация 
			|				И ОсновноеСредство В (ВЫБРАТЬ СписокОС.ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|	ПО СрезПоследних.Период = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Период
			|		И СрезПоследних.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетаУчета.Период КАК Период,
			|	СчетаУчета.Регистратор КАК Регистратор,
			|	СчетаУчета.НомерСтроки КАК НомерСтроки,
			|	СчетаУчета.Активность КАК Активность,
			|	СчетаУчета.ОсновноеСредство КАК ОсновноеСредство,
			|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, СчетаУчета.СчетУчета) КАК СчетУчета,
			|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, СчетаУчета.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации
			|ПОМЕСТИТЬ ВТ_ПорядокУчетаОС
			|ИЗ
			|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
			|			&Период,
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И ОсновноеСредство В
			|					(ВЫБРАТЬ
			|						СписокОС.ОсновноеСредство
			|					ИЗ
			|						СписокОС)) КАК СчетаУчета
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
			|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
			|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаСтоимости.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
			|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
			|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаАмортизации.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетаУчета.ОсновноеСредство
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПервоначальнаяСтоимостьОС.СуммаОстатокДт,
			|	ПервоначальнаяСтоимостьОС.Субконто1,
			|	ПервоначальнаяСтоимостьОС.Счет
			|ПОМЕСТИТЬ ВТ_ПервоначальнаяСтоимостьОС
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетаУчетаОС.СчетУчета ИЗ СчетаУчетаОС ГДЕ СчетаУчетаОС.СчетУчета ЕСТЬ НЕ NULL), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ПервоначальнаяСтоимостьОС
			|ИНДЕКСИРОВАТЬ ПО
			|	ПервоначальнаяСтоимостьОС.Субконто1
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтавкиНалогаНаИмуществоСрезПоследних.*
			|ПОМЕСТИТЬ ВТ_СтавкиНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АмортизацияОС.СуммаОстатокДт,
			|	АмортизацияОС.СуммаОстатокКт,
			|	АмортизацияОС.Субконто1,
			|	АмортизацияОС.Счет
			|ПОМЕСТИТЬ ВТ_АмортизацияОС
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетаУчетаОС.СчетНачисленияАмортизации ИЗ СчетаУчетаОС ГДЕ СчетаУчетаОС.СчетНачисленияАмортизации ЕСТЬ НЕ NULL), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК АмортизацияОС
			|ИНДЕКСИРОВАТЬ ПО
			|	АмортизацияОС.Субконто1
			|;
			|";
			
			Запрос.УстановитьПараметр("ДатаПодписи", ПараметрыОтчета.ДатаПодписи);
			
			Если ПрименениеЕНВД Тогда
				
				Запрос.УстановитьПараметр("КоэффициентРаспределенияЕНВД", 1);
				
				Запрос.Текст = Запрос.Текст + 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СписокОС.ОсновноеСредство,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
				|		  ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|		ТОГДА 
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО
				|		ИНАЧЕ 
				|			ЕстьNULL(СтавкиНалогаНаИмуществоСрезПоследних.Организация.РегистрацияВНалоговомОргане.КодПоОКАТО, """")
				|	КОНЕЦ КАК КодПоОКАТО,
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			КОНЕЦ, СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка) КАК НалоговаяСтавка,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки, ЛОЖЬ)
				|	КОНЕЦ КАК СнижениеНалоговойСтавки,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ОсвобождениеОтНалогообложения, ЛОЖЬ)
				|	КОНЕЦ КАК ОсвобождениеОтНалогообложения,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|		ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|	КОНЕЦ КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
				|	ЕСТЬNULL(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества, ""03"") КАК КодВидаИмущества,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
				|	" + Счетчик + " КАК Период,
				|	ВЫРАЗИТЬ((ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0)) * ЕСТЬNULL(КоэффициентыЕНВД.НеЕНВД, 1)
				|	       + (ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0)) * ЕСТЬNULL(КоэффициентыЕНВД.Распределение, 0) * &КоэффициентРаспределенияЕНВД КАК ЧИСЛО(31,2)) КАК ОстаточнаяСтоимость
				|ПОМЕСТИТЬ
				|	Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
				|ИЗ
				|	СписокОС
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокУчетаОС КАК ПорядокУчетаОС
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальнаяСтоимостьОС КАК ПервоначальнаяСтоимостьОС
				|			ПО (ПорядокУчетаОС.СчетУчета = ПервоначальнаяСтоимостьОС.Счет ИЛИ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС) = ПервоначальнаяСтоимостьОС.Счет)
				|			 И ПорядокУчетаОС.ОсновноеСредство = ПервоначальнаяСтоимостьОС.Субконто1
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияОС КАК АмортизацияОС
				|			ПО ПорядокУчетаОС.ОсновноеСредство = АмортизацияОС.Субконто1
				|			 И ПорядокУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет
				|		ПО СписокОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ПО СписокОС.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство,
				|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыЕНВД
				|		ПО СписокОС.ОсновноеСредство = КоэффициентыЕНВД.ОсновноеСредство,
				|	ВТ_СтавкиНалогаНаИмуществоСрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
				|";
				Запрос.Выполнить();
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СписокОС.ОсновноеСредство,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
				|		  ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|		ТОГДА 
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО
				|		ИНАЧЕ 
				|			ЕстьNULL(СтавкиНалогаНаИмуществоСрезПоследних.Организация.РегистрацияВНалоговомОргане.КодПоОКАТО, """")
				|	КОНЕЦ КАК КодПоОКАТО,
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			ИНАЧЕ ВЫБОР
				|			      КОГДА СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки
				|			      	ТОГДА СтавкиНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			      ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			      КОНЕЦ
				|			КОНЕЦ, СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка) КАК НалоговаяСтавка,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки, ЛОЖЬ)
				|	КОНЕЦ КАК СнижениеНалоговойСтавки,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ОсвобождениеОтНалогообложения, ЛОЖЬ)
				|	КОНЕЦ КАК ОсвобождениеОтНалогообложения,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|		ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|	КОНЕЦ КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
				|	ЕСТЬNULL(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества, ""03"") КАК КодВидаИмущества,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
				|	" + Счетчик + " КАК Период,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0) КАК ЧИСЛО(31,2)) КАК ОстаточнаяСтоимость
				|ПОМЕСТИТЬ
				|	Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
				|ИЗ
				|	СписокОС
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокУчетаОС КАК ПорядокУчетаОС
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальнаяСтоимостьОС КАК ПервоначальнаяСтоимостьОС
				|			ПО (ПорядокУчетаОС.СчетУчета = ПервоначальнаяСтоимостьОС.Счет ИЛИ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС) = ПервоначальнаяСтоимостьОС.Счет)
				|			 И ПорядокУчетаОС.ОсновноеСредство = ПервоначальнаяСтоимостьОС.Субконто1
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияОС КАК АмортизацияОС
				|			ПО ПорядокУчетаОС.ОсновноеСредство = АмортизацияОС.Субконто1
				|			 И ПорядокУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет
				|		ПО СписокОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ПО СписокОС.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство,
				|	ВТ_СтавкиНалогаНаИмуществоСрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
				|";
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Запрос.Текст = 
			"УНИЧТОЖИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов;
			|УНИЧТОЖИТЬ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ ВТ_СрезПоследних;
			|УНИЧТОЖИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ СписокОС;
			|УНИЧТОЖИТЬ СчетаУчетаОС;
			|УНИЧТОЖИТЬ СписокРазрешенныхОС;
			|УНИЧТОЖИТЬ ВТ_ПервоначальнаяСтоимостьОС;
			|УНИЧТОЖИТЬ ВТ_СтавкиНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ ВТ_АмортизацияОС;
			|УНИЧТОЖИТЬ ВТ_ПорядокУчетаОС";
			Запрос.Выполнить();
			
			ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
										  |",
										  "ОБЪЕДИНИТЬ ВСЕ
										  |ВЫБРАТЬ *
										  |")
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ПОМЕСТИТЬ НалоговаяБазаПоНалогуНаИмущество
										  |",
										  "")
									  + "ИЗ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
										|ГДЕ
										|	ОстаточнаяСтоимость > 0
										|";
									
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		Период  = ?(Счетчик = 13, КонецМесяца(Период), ДобавитьМесяц(Период, 1));
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОбъединяющегоЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4,5 (прочее имущество).
	Раздел2 = Контейнер.Раздел2;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКАТО КАК КодПоОКАТО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.СнижениеНалоговойСтавки КАК СнижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.Период КАК Период,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьЛьготируемогоИмущества
	|ИЗ
	|(ВЫБРАТЬ
	|	ЕСТЬNULL(КодВидаИмущества, ""03"") КАК КодВидаИмущества,
	|	ЕСТЬNULL(ДоляСтоимостиЧислитель, 0) КАК ДоляСтоимостиЧислитель,
	|	ЕСТЬNULL(ДоляСтоимостиЗнаменатель, 0) КАК ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	ЕСТЬNULL(НалоговаяСтавка, 0) КАК НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Период,
	|	ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ВЫБОР КОГДА ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьЛьготируемогоИмущества
	|ИЗ
	|	НалоговаяБазаПоНалогуНаИмущество) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Период 
	|
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимость),
	|	СУММА(ОстаточнаяСтоимостьЛьготируемогоИмущества)
	|ПО
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Период
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные[0].Значение;
			
			СтраницаРаздел2.П000020000100           = ?(Лев(Выборка.КодВидаИмущества, 1) = "0", Прав(Выборка.КодВидаИмущества, 1), Выборка.КодВидаИмущества); 
			СтраницаРаздел2.П000020001000           = Выборка.КодПоОКАТО;
			СтраницаРаздел2.П000020013003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020016003_КодЛьготы = ?(Выборка.СнижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020017003           = Выборка.НалоговаяСтавка;
			
			Если Выборка.КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020015003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020015003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		
			Если Выборка.Период = 1 Тогда
				
				СтраницаРаздел2.П000020002003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020002004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 2 Тогда

				СтраницаРаздел2.П000020003003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020003004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 3 Тогда

				СтраницаРаздел2.П000020004003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020004004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 4 Тогда

				СтраницаРаздел2.П000020005003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020005004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
			
			ИначеЕсли Выборка.Период = 5 Тогда
		
				СтраницаРаздел2.П000020006003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020006004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 6 Тогда
				
				СтраницаРаздел2.П000020007003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020007004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 7 Тогда
				
				СтраницаРаздел2.П000020008003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020008004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 8 Тогда
		
				СтраницаРаздел2.П000020009003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020009004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 9 Тогда

				СтраницаРаздел2.П000020010003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020010004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 10 Тогда
				
				СтраницаРаздел2.П000020011003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020011004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) 
			 ИЛИ (КодНалоговогоОргана = РеквизитыОрганизации.КодНалоговогоОргана) Тогда
			
				СуммаНалога = СтраницаРаздел2.П000020018003;
				
				СуммаЛьготы = СуммаНалога * (ПроцентУменьшенияСуммыНалога / 100);
				
				СтраницаРаздел2.П000020019003_КодЛьготы = ?(СуммаЛьготы = 0, "", "2012500");
				СтраницаРаздел2.П000020020003 = Мин(СуммаНалога, СуммаЛьготы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2011Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000100", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетИмуществоФормаОтчета2011Кв3(ПараметрыОтчета, Контейнер) Экспорт

	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцентУменьшенияСуммыНалога = РезультатЗапроса.Выгрузить()[0].ПроцентУменьшения;
	Иначе
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
			,ПараметрыОтчета.Организация, ПутьКРегистру));
			
		Возврат;
		
	КонецЕсли;

	Период  = НачалоМесяца(ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Счетчик = 1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Признак применения ЕНВД.
	ПрименениеЕНВД = Ложь;
	
	ГоловнаяОрганизация = ПараметрыОтчета.Организация.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ГоловнаяОрганизация = ПараметрыОтчета.Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецПериодаОтчета", КонецГода(Период));
	Запрос.УстановитьПараметр("НалоговыйОрган", ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОС,
	|	МИНИМУМ(ПорядокУчетаОСБУ.Период) КАК ДатаСостояния
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И ПорядокУчетаОСБУ.Организация В
	|		(ВЫБРАТЬ
	|			Организации.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.Организации КАК Организации
	|		ГДЕ
	|			(Организации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация))
	|	И ПорядокУчетаОСБУ.Период <= &КонецПериодаОтчета
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Активность
	|	И НЕ ПорядокУчетаОСБУ.НедвижимоеИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний.ОС
	|ПОМЕСТИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013
	|ИЗ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний
	|ГДЕ
	|	ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний.ДатаСостояния >= ДАТАВРЕМЯ(2013, 1, 1)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013_ДатыСостояний
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
	|ПОМЕСТИТЬ ВТПорядокУчетаОСБУ
	|
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&Период,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
	|	) КАК ПорядокУчетаОСБУ
	|ИНДЕКСИРОВАТЬ ПО
	|	 ОсновноеСредство";
	Запрос.Выполнить();
	
	ТекстОбъединяющегоЗапроса = "";
	
	Пока Период <= НачалоМесяца(ДобавитьМесяц(ПараметрыОтчета.мДатаКонцаПериодаОтчета, 1)) Цикл
		
		ПрименениеУСН = УчетнаяПолитика.ПрименяетсяУСН(ПараметрыОтчета.Организация,
			?(Год(Период) = Год(мДатаКонцаПериодаОтчета), КонецКвартала(Период), мДатаКонцаПериодаОтчета));
		
		Если НЕ ПрименениеУСН Тогда

			Запрос.УстановитьПараметр("Период",          Период);
			Запрос.УстановитьПараметр("ПериодБухИтогов", ?(Счетчик = 13, Новый Граница(Период), Период));
			
			// Срез последних записей по основному средству в регистре "Ставки налога на имущество по отдельным основным средствам".
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство,
			|	МАКСИМУМ(ПараметрыНачисленияНалогаНаИмущество.Период) КАК ПериодСреза
			|ПОМЕСТИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов
			|ИЗ
			|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ПараметрыНачисленияНалогаНаИмущество
			|ГДЕ
			|	ПараметрыНачисленияНалогаНаИмущество.Период <= &Период
			|	И ПараметрыНачисленияНалогаНаИмущество.Организация = &Организация
 			|	И ПараметрыНачисленияНалогаНаИмущество.Активность
 			|	И ПараметрыНачисленияНалогаНаИмущество.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
            |
			|СГРУППИРОВАТЬ ПО
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство
			|;
            |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство,
			|	ПараметрыНачисленияНалогаНаИмущество.НалоговыйОрган,
			|	ПараметрыНачисленияНалогаНаИмущество.ПорядокНалогообложения
			|ПОМЕСТИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество КАК ПараметрыНачисленияНалогаНаИмущество
			|		ПО ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмущество.ОсновноеСредство
			|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов.ПериодСреза = ПараметрыНачисленияНалогаНаИмущество.Период
			|			И ПараметрыНачисленияНалогаНаИмущество.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|";
			Запрос.Выполнить();
			
			
			Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
				
				// Выборка объектов по основному налоговому органу организации (его нет в справочнике Регистрация в налоговом органе).
				Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОС.Ссылка КАК ОсновноеСредство
				|ПОМЕСТИТЬ
				|	СписокРазрешенныхОС
				|ИЗ
				|	Справочник.ОбъектыЭксплуатации КАК ОС
				|ГДЕ
				|	(НЕ ОС.Ссылка В 
				|		(ВЫБРАТЬ
				|			ПорядокУчетаОСБУ.ОсновноеСредство
				|		ИЗ
				|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
				|		ГДЕ
				|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
				|			И ПорядокУчетаОСБУ.Активность
				|			И ПорядокУчетаОСБУ.Период < &Период
				|			И ПорядокУчетаОСБУ.Организация = &Организация
				|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
				|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
				|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
				|	И (НЕ ОС.Ссылка В
				|		(ВЫБРАТЬ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
				|		ИЗ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ГДЕ
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
				|			ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)))
				|ИНДЕКСИРОВАТЬ ПО
				|	ОС.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
				|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости,
				|	ВТПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
				|
				|ПОМЕСТИТЬ
				|	СписокОС
				|
				|ИЗ
				|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
				|			&Период,
				|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
				|				И Организация = &Организация
				|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
				|	) КАК ПервоначальныеСведенияОС
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокУчетаОСБУ КАК ВТПорядокУчетаОСБУ
				|	ПО ВТПорядокУчетаОСБУ.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
				|ИНДЕКСИРОВАТЬ ПО
				|	 ОсновноеСредство";
				
			Иначе
				
				Если КодНалоговогоОргана = РеквизитыОрганизации.КодНалоговогоОргана Тогда
					
					// Выборка объектов по основному налоговому органу организации (он есть в справочнике Регистрация налоговом органе).
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОС.Ссылка КАК ОсновноеСредство
					|ПОМЕСТИТЬ
					|	СписокРазрешенныхОС
					|ИЗ
					|	Справочник.ОбъектыЭксплуатации КАК ОС
					|ГДЕ
					|	(НЕ ОС.Ссылка В 
					|		(ВЫБРАТЬ
					|			ПорядокУчетаОСБУ.ОсновноеСредство
					|		ИЗ
					|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
					|		ГДЕ
					|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
					|			И ПорядокУчетаОСБУ.Активность
					|			И ПорядокУчетаОСБУ.Период < &Период
					|			И ПорядокУчетаОСБУ.Организация = &Организация
					|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
					|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
					|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
					|	И (НЕ ОС.Ссылка В
					|		(ВЫБРАТЬ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
					|		ИЗ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
					|		ГДЕ
					|			(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
					|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган <> &НалоговыйОрган)
					|			ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)))
					|ИНДЕКСИРОВАТЬ ПО
					|	ОсновноеСредство
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
					|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости,
					|	ВТПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
					|
					|ПОМЕСТИТЬ
					|	СписокОС
					|
					|ИЗ
					|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
					|			&Период,
					|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
					|				И Организация = &Организация
					|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
					|	) КАК ПервоначальныеСведенияОС
					|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокУчетаОСБУ КАК ВТПорядокУчетаОСБУ
					|	ПО ВТПорядокУчетаОСБУ.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	 ОсновноеСредство";
					
				Иначе
					
					// Выборка объектов по указанному пользователем налоговому органу.
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ОС.Ссылка КАК ОсновноеСредство
					|ПОМЕСТИТЬ
					|	СписокРазрешенныхОС
					|ИЗ
					|	Справочник.ОбъектыЭксплуатации КАК ОС
					|ГДЕ
					|	(НЕ ОС.Ссылка В 
					|		(ВЫБРАТЬ
					|			ПорядокУчетаОСБУ.ОсновноеСредство
					|		ИЗ
					|			РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
					|		ГДЕ
					|			ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
					|			И ПорядокУчетаОСБУ.Активность
					|			И ПорядокУчетаОСБУ.Период < &Период
					|			И ПорядокУчетаОСБУ.Организация = &Организация
					|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)))
					|	И (НЕ ОС.Ссылка В (ВЫБРАТЬ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013.ОС ИЗ ВТДвижимоеИмуществоПринятоеКУчетуПосле2013 КАК ВТДвижимоеИмуществоПринятоеКУчетуПосле2013))
					|	И (НЕ ОС.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки), ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ОбъектыПриродопользования)))
					|	И (ОС.Ссылка В
					|		(ВЫБРАТЬ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
					|		ИЗ
					|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
					|		ГДЕ
					|			(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган = &НалоговыйОрган
					|			И ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению))))
					|ИНДЕКСИРОВАТЬ ПО
					|	ОсновноеСредство
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
					|	ПервоначальныеСведенияОС.ПорядокУчетаБУ КАК ПорядокПогашенияСтоимости,
					|	ВТПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
					|
					|ПОМЕСТИТЬ
					|	СписокОС
					|
					|ИЗ
					|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
					|			&Период,
					|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
					|				И Организация = &Организация
					|				И (ОсновноеСредство В (ВЫБРАТЬ РАЗЛИЧНЫЕ СписокРазрешенныхОС.ОсновноеСредство ИЗ СписокРазрешенныхОС КАК СписокРазрешенныхОС))
					|	) КАК ПервоначальныеСведенияОС
					|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПорядокУчетаОСБУ КАК ВТПорядокУчетаОСБУ
					|	ПО ВТПорядокУчетаОСБУ.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	 ОсновноеСредство";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Запрос.Выполнить();
			
			// Выборка счетов учета ОС
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, СчетаУчета.СчетУчета) КАК СчетУчета,
			|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, СчетаУчета.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации
			|ПОМЕСТИТЬ СчетаУчетаОС
			|ИЗ
			|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
			|			&Период,
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И ОсновноеСредство В
			|					(ВЫБРАТЬ
			|						СписокОС.ОсновноеСредство
			|					ИЗ
			|						СписокОС)) КАК СчетаУчета
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
			|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
			|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаСтоимости.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
			|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
			|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаАмортизации.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС),
			|	NULL";
			Запрос.Выполнить();
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Период) КАК Период,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
			|ПОМЕСТИТЬ ВТ_СрезПоследних
			|ИЗ
			|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
			|			&Период, 
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И Организация = &Организация 
			|				И ОсновноеСредство В (ВЫБРАТЬ СписокОС.ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|
			|СГРУППИРОВАТЬ ПО
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновноеСредство,Период
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СрезПоследних.ОсновноеСредство,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Организация,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство КАК ОсновноеСредство1,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговыйОрган,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель,
			|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель
			|ПОМЕСТИТЬ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	ВТ_СрезПоследних КАК СрезПоследних
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
			|			&Период, 
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И Организация = &Организация 
			|				И ОсновноеСредство В (ВЫБРАТЬ СписокОС.ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
			|	ПО СрезПоследних.Период = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.Период
			|		И СрезПоследних.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СчетаУчета.Период КАК Период,
			|	СчетаУчета.Регистратор КАК Регистратор,
			|	СчетаУчета.НомерСтроки КАК НомерСтроки,
			|	СчетаУчета.Активность КАК Активность,
			|	СчетаУчета.ОсновноеСредство КАК ОсновноеСредство,
			|	СчетаУчета.Организация КАК Организация,
			|	ЕСТЬNULL(СчетаУчетаСтоимости.СчетУчета, СчетаУчета.СчетУчета) КАК СчетУчета,
			|	ЕСТЬNULL(СчетаУчетаАмортизации.СчетУчета, СчетаУчета.СчетНачисленияАмортизации) КАК СчетНачисленияАмортизации,
			|	СчетаУчета.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета
			|ПОМЕСТИТЬ ВТ_ПорядокУчетаОС
			|ИЗ
			|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
			|			&Период,
			|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
			|				И ОсновноеСредство В
			|					(ВЫБРАТЬ
			|						СписокОС.ОсновноеСредство
			|					ИЗ
			|						СписокОС КАК СписокОС)) КАК СчетаУчета
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаСтоимости
			|		ПО СчетаУчетаСтоимости.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СтоимостьВНА)
			|			И СчетаУчетаСтоимости.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаСтоимости.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаСтоимости.МестоУчета = НЕОПРЕДЕЛЕНО
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОтраженияНаСчетахУчета КАК СчетаУчетаАмортизации
			|		ПО СчетаУчетаАмортизации.ВидСчета = ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АмортизацияВНА)
			|			И СчетаУчетаАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			И СчетаУчетаАмортизации.АналитикаУчета = СчетаУчета.ГруппаФинансовогоУчета
			|			И СчетаУчетаАмортизации.МестоУчета = НЕОПРЕДЕЛЕНО
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СчетаУчета.ОсновноеСредство
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПервоначальнаяСтоимостьОС.СуммаОстатокДт,
			|	ПервоначальнаяСтоимостьОС.Субконто1,
			|	ПервоначальнаяСтоимостьОС.Счет
			|ПОМЕСТИТЬ ВТ_ПервоначальнаяСтоимостьОС
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетаУчетаОС.СчетУчета ИЗ СчетаУчетаОС ГДЕ СчетаУчетаОС.СчетУчета ЕСТЬ НЕ NULL), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ПервоначальнаяСтоимостьОС
			|ИНДЕКСИРОВАТЬ ПО
			|	ПервоначальнаяСтоимостьОС.Субконто1
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СтавкиНалогаНаИмуществоСрезПоследних.*
			|ПОМЕСТИТЬ ВТ_СтавкиНалогаНаИмуществоСрезПоследних
			|ИЗ
			|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	АмортизацияОС.СуммаОстатокДт,
			|	АмортизацияОС.СуммаОстатокКт,
			|	АмортизацияОС.Субконто1,
			|	АмортизацияОС.Счет
			|ПОМЕСТИТЬ ВТ_АмортизацияОС
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетаУчетаОС.СчетНачисленияАмортизации ИЗ СчетаУчетаОС ГДЕ СчетаУчетаОС.СчетНачисленияАмортизации ЕСТЬ НЕ NULL), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК АмортизацияОС
			|ИНДЕКСИРОВАТЬ ПО
			|	АмортизацияОС.Субконто1
			|;
			|";
			
			Запрос.УстановитьПараметр("ДатаПодписи", ПараметрыОтчета.ДатаПодписи);
			
			Если ПрименениеЕНВД Тогда
				
				Запрос.УстановитьПараметр("КоэффициентРаспределенияЕНВД", 1);
				
				Запрос.Текст = Запрос.Текст +
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СписокОС.ОсновноеСредство,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
				|		  ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|		ТОГДА 
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО
				|		ИНАЧЕ 
				|			ЕстьNULL(СтавкиНалогаНаИмуществоСрезПоследних.Организация.РегистрацияВНалоговомОргане.КодПоОКАТО, """")
				|	КОНЕЦ КАК КодПоОКАТО,
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			ИНАЧЕ ВЫБОР
				|			      КОГДА СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки
				|			      	ТОГДА СтавкиНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			      ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			      КОНЕЦ
				|			КОНЕЦ, СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка) КАК НалоговаяСтавка,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки, ЛОЖЬ)
				|	КОНЕЦ КАК СнижениеНалоговойСтавки,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ОсвобождениеОтНалогообложения, ЛОЖЬ)
				|	КОНЕЦ КАК ОсвобождениеОтНалогообложения,
				|	СписокОС.НедвижимоеИмущество КАК ЭтоНедвижимость,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|		ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|	КОНЕЦ КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
				|	ЕСТЬNULL(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества, ""03"") КАК КодВидаИмущества,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
				|	" + Счетчик + " КАК Период,
				|	ВЫРАЗИТЬ((ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0)) * ЕСТЬNULL(КоэффициентыЕНВД.НеЕНВД, 1)
				|		+ (ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0)) * ЕСТЬNULL(КоэффициентыЕНВД.Распределение, 0) * &КоэффициентРаспределенияЕНВД КАК ЧИСЛО(31,2)) КАК ОстаточнаяСтоимость
				|ПОМЕСТИТЬ
				|	Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
				|ИЗ
				|	СписокОС
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокУчетаОС КАК ПорядокУчетаОС
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальнаяСтоимостьОС КАК ПервоначальнаяСтоимостьОС
				|			ПО (ПорядокУчетаОС.СчетУчета = ПервоначальнаяСтоимостьОС.Счет ИЛИ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС) = ПервоначальнаяСтоимостьОС.Счет)
				|			 И ПорядокУчетаОС.ОсновноеСредство = ПервоначальнаяСтоимостьОС.Субконто1
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияОС КАК АмортизацияОС
				|			ПО ПорядокУчетаОС.ОсновноеСредство = АмортизацияОС.Субконто1
				|			 И ПорядокУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет
				|		ПО СписокОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ПО СписокОС.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство,
				|		ЛЕВОЕ СОЕДИНЕНИЕ КоэффициентыЕНВД
				|		ПО СписокОС.ОсновноеСредство = КоэффициентыЕНВД.ОсновноеСредство,
				|	ВТ_СтавкиНалогаНаИмуществоСрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
				|";
				Запрос.Выполнить();
				
			Иначе
				
				Запрос.Текст = Запрос.Текст +
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СписокОС.ОсновноеСредство,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.СДругимКодомПоОКАТО)
				|		  ИЛИ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|		ТОГДА 
				|			ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодПоОКАТО
				|		ИНАЧЕ 
				|			ЕстьNULL(СтавкиНалогаНаИмуществоСрезПоследних.Организация.РегистрацияВНалоговомОргане.КодПоОКАТО, """")
				|	КОНЕЦ КАК КодПоОКАТО,
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|				ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			ИНАЧЕ ВЫБОР
				|			      КОГДА СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки
				|			      	ТОГДА СтавкиНалогаНаИмуществоСрезПоследних.СниженнаяНалоговаяСтавка
				|			      ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка
				|			      КОНЕЦ
				|			КОНЕЦ, СтавкиНалогаНаИмуществоСрезПоследних.НалоговаяСтавка) КАК НалоговаяСтавка,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОблагаетсяПоСниженнойСтавке)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.СнижениеНалоговойСтавки, ЛОЖЬ)
				|	КОНЕЦ КАК СнижениеНалоговойСтавки,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ИСТИНА
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПостановкаНаУчетВНалоговомОргане = ЗНАЧЕНИЕ(Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ОсвобождениеОтНалогообложения, ЛОЖЬ)
				|	КОНЕЦ КАК ОсвобождениеОтНалогообложения,
				|	СписокОС.НедвижимоеИмущество КАК ЭтоНедвижимость,
				|	ВЫБОР
				|		КОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ПорядокНалогообложения = ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.ОсвобождаетсяОтНалогообложения)
				|			ТОГДА ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|		ИНАЧЕ СтавкиНалогаНаИмуществоСрезПоследних.КодНалоговойЛьготыОсвобождениеОтНалогообложения
				|	КОНЕЦ КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
				|	ЕСТЬNULL(ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.КодВидаИмущества, ""03"") КАК КодВидаИмущества,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
				|	ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
				|	" + Счетчик + " КАК Период,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(ПервоначальнаяСтоимостьОС.СуммаОстатокДт, 0) - ЕСТЬNULL(ВЫБОР КОГДА СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса) ИЛИ СписокОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) ТОГДА АмортизацияОС.СуммаОстатокДт ИНАЧЕ АмортизацияОС.СуммаОстатокКт КОНЕЦ, 0) КАК ЧИСЛО(31,2)) КАК ОстаточнаяСтоимость
				|ПОМЕСТИТЬ
				|	Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
				|ИЗ
				|	СписокОС
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПорядокУчетаОС КАК ПорядокУчетаОС
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПервоначальнаяСтоимостьОС КАК ПервоначальнаяСтоимостьОС
				|			ПО (ПорядокУчетаОС.СчетУчета = ПервоначальнаяСтоимостьОС.Счет ИЛИ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС) = ПервоначальнаяСтоимостьОС.Счет)
				|			 И ПорядокУчетаОС.ОсновноеСредство = ПервоначальнаяСтоимостьОС.Субконто1
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияОС КАК АмортизацияОС
				|			ПО ПорядокУчетаОС.ОсновноеСредство = АмортизацияОС.Субконто1
				|			 И ПорядокУчетаОС.СчетНачисленияАмортизации = АмортизацияОС.Счет
				|		ПО СписокОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних КАК ПараметрыНачисленияНалогаНаИмуществоСрезПоследних
				|		ПО СписокОС.ОсновноеСредство = ПараметрыНачисленияНалогаНаИмуществоСрезПоследних.ОсновноеСредство,
				|	ВТ_СтавкиНалогаНаИмуществоСрезПоследних КАК СтавкиНалогаНаИмуществоСрезПоследних
				|";
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Запрос.Текст = 
			"УНИЧТОЖИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследнихПериодов;
			|УНИЧТОЖИТЬ ВТ_ПараметрыНачисленияНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ ВТ_СрезПоследних;
			|УНИЧТОЖИТЬ ПараметрыНачисленияНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ СписокОС;
			|УНИЧТОЖИТЬ СчетаУчетаОС;
			|УНИЧТОЖИТЬ ВТ_ПервоначальнаяСтоимостьОС;
			|УНИЧТОЖИТЬ ВТ_ПорядокУчетаОС;
			|УНИЧТОЖИТЬ ВТ_СтавкиНалогаНаИмуществоСрезПоследних;
			|УНИЧТОЖИТЬ ВТ_АмортизацияОС;
			|УНИЧТОЖИТЬ СписокРазрешенныхОС";
			Запрос.Выполнить();
			
			ТекстОбъединяющегоЗапроса = ТекстОбъединяющегоЗапроса
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
			                              |",
										  "ОБЪЕДИНИТЬ ВСЕ
										  |ВЫБРАТЬ *
			                              |")
									  + ?(ПустаяСтрока(ТекстОбъединяющегоЗапроса), 
										  "ПОМЕСТИТЬ НалоговаяБазаПоНалогуНаИмущество
										  |",
										  "")
									  + "ИЗ Выборка" + Формат(Счетчик, "ЧЦ=2; ЧВН=") + "
			                            |ГДЕ
			                            |	ОстаточнаяСтоимость > 0
										|";
			
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		Период  = ДобавитьМесяц(Период, 1);
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстОбъединяющегоЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = ТекстОбъединяющегоЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКАТО КАК КодПоОКАТО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.СнижениеНалоговойСтавки КАК СнижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.Период КАК Период,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимость) КАК ОстаточнаяСтоимость,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества) КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
	|ИЗ
	|(ВЫБРАТЬ
	|	ЕСТЬNULL(КодВидаИмущества, ""03"") КАК КодВидаИмущества,
	|	ЕСТЬNULL(ДоляСтоимостиЧислитель, 0) КАК ДоляСтоимостиЧислитель,
	|	ЕСТЬNULL(ДоляСтоимостиЗнаменатель, 0) КАК ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	ЕСТЬNULL(НалоговаяСтавка, 0) КАК НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Период,
	|	ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ВЫБОР КОГДА ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьЛьготируемогоИмущества,
	|	ВЫБОР КОГДА ЭтоНедвижимость = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимости,
	|	ВЫБОР КОГДА ЭтоНедвижимость = ИСТИНА И ОсвобождениеОтНалогообложения = ИСТИНА ТОГДА ОстаточнаяСтоимость ИНАЧЕ 0 КОНЕЦ КАК ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества
    |ИЗ
	|	НалоговаяБазаПоНалогуНаИмущество ) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	Период
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимость),
	|	СУММА(ОстаточнаяСтоимостьЛьготируемогоИмущества),
	|	СУММА(ОстаточнаяСтоимостьНедвижимости),
	|	СУММА(ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества)
	|ПО
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКАТО,
	|	НалоговаяСтавка,
	|	СнижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел2 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел2.Добавить().Данные = Новый СписокЗначений();
				Раздел2[Раздел2.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				СтраницаРаздел2 =  Раздел2[Раздел2.Количество()-1].Данные[0].Значение;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2.П000020000100 = ?(Лев(Выборка.КодВидаИмущества, 1) = "0", Прав(Выборка.КодВидаИмущества, 1), Выборка.КодВидаИмущества);
			СтраницаРаздел2.П000020001000 = Выборка.КодПоОКАТО;
			СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020020003_КодЛьготы = ?(Выборка.СнижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если Выборка.КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		
			Если Выборка.Период = 1 Тогда
				
				СтраницаРаздел2.П000020002003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020002004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 2 Тогда

				СтраницаРаздел2.П000020003003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020003004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 3 Тогда

				СтраницаРаздел2.П000020004003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020004004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 4 Тогда

				СтраницаРаздел2.П000020005003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020005004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
			
			ИначеЕсли Выборка.Период = 5 Тогда
		
				СтраницаРаздел2.П000020006003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020006004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 6 Тогда
				
				СтраницаРаздел2.П000020007003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020007004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 7 Тогда
				
				СтраницаРаздел2.П000020008003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020008004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 8 Тогда
		
				СтраницаРаздел2.П000020009003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020009004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 9 Тогда

				СтраницаРаздел2.П000020010003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020010004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 10 Тогда
				
				СтраницаРаздел2.П000020011003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020011004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 11 Тогда
				
				СтраницаРаздел2.П000020012003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020012004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 12 Тогда
				
				СтраницаРаздел2.П000020013003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020013004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;

			ИначеЕсли Выборка.Период = 13 Тогда
				
				СтраницаРаздел2.П000020014003 = Выборка.ОстаточнаяСтоимость;
				СтраницаРаздел2.П000020014004 = Выборка.ОстаточнаяСтоимостьЛьготируемогоИмущества;
				СтраницаРаздел2.П000020014103 = Выборка.ОстаточнаяСтоимостьНедвижимости;
				СтраницаРаздел2.П000020014104 = Выборка.ОстаточнаяСтоимостьНедвижимостиЛьготируемогоИмущества;

			КонецЕсли;
			
			
			Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане) 
			 ИЛИ (КодНалоговогоОргана = ПараметрыОтчета.Организация.КодНалоговогоОргана) Тогда
			
				СуммаНалога = СтраницаРаздел2.П000020022003;
								
				СуммаЛьготы = СуммаНалога * (ПроцентУменьшенияСуммыНалога / 100);
							  
				СтраницаРаздел2.П000020024003_КодЛьготы = ?(СуммаЛьготы = 0, "", "2012500");
				СтраницаРаздел2.П000020025003 = Мин(СуммаНалога, СуммаЛьготы);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Имущество2013Кв4

Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2013Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003_1", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	УплачиваютсяАвансы = РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	
	Если Не УплачиваютсяАвансы Тогда 
		
		ПутьКРегистру = НСтр("ru = '(раздел ""Нормативно-справочная информация"" - ""Организация"" - ""Учетная политика и налоги"")';
							|en = '(section ""Master data"" - ""Company"" - ""Accounting policy and taxes"")'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не настроена уплата авансов по налогу на имущество на %1 для %2
			|%3';
			|en = 'Property tax advance payment is not configured on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;	
		
	КонецЕсли;

	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда 
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4,5 (прочее имущество).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	КонецЕсли;	
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
				|%2';
				|en = 'Ownership right registration date is not filled in for object %1
				|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				
		КонецЦикла;
			
		ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
		ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество КАК ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
		
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
			
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества 
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
					
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Добавить();
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные;
			
			СтраницаРаздел2.П000020000101           = ?(Лев(Выборка.КодВидаИмущества, 1) = "0", Прав(Выборка.КодВидаИмущества, 1), Выборка.КодВидаИмущества); 
			СтраницаРаздел2.П000020001001           = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020013003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020016003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020017003           = Выборка.НалоговаяСтавка;
			
			Если Выборка.КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020015003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020015003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020021003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020018003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020018003, "", ДополнительныеПараметры);
						
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда 
				
				СтраницаРаздел2.П000020019003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020020003 = Число(СтраницаРаздел2.П000020020003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020020003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020020003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 3
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 = Раздел3[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Количество()>1 Цикл
		Раздел3.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел3 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтаницаРаздела3 = Раздел3.Добавить();
			НоваяСтаницаРаздела3.Данные = СтруктураНовойТаблицы; 
			СтраницаРаздел3 = НоваяСтаницаРаздела3.Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
		
		ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
		
		ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
		СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
		СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
		СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
		СтраницаРаздел3.П000030003003 = Выборка.НеоблагаемаяКадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030003003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030003003, "", ДополнительныеПараметры);
		
		СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтраницаРаздел3.П000030006003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
		
		СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
		СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
		
		СтраницаРаздел3.П000030007003 = Выборка.НалоговаяСтавка;
		
		КоличествоМесяцевВПериоде = ?(Год(мДатаКонцаПериодаОтчета) < 2016, Месяц(мДатаКонцаПериодаОтчета), 3);
		Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < КоличествоМесяцевВПериоде Тогда 
			СтраницаРаздел3.П000030008003_Числ = Выборка.КоличествоМесяцевВладения;
			СтраницаРаздел3.П000030008003_Знам = КоличествоМесяцевВПериоде;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030009003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030009003, "", ДополнительныеПараметры);
		
		Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
			СтраницаРаздел3.П000030010003_КодЛьготы = "2012500";
			СтраницаРаздел3.П000030011003 = Выборка.СуммаУменьшенияСуммыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030011003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030011003, "", ДополнительныеПараметры);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2013Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003_1", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020027003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);

КонецПроцедуры

Процедура ЗаполнитьОтчетИмуществоФормаОтчета2013Кв4(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	
	Если Организация.ОбособленноеПодразделение = Истина Тогда
		КодыРегистрацииГоловнойОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация.ГоловнаяОрганизация, "КодНалоговогоОргана, КПП");
		РегистрацияВНалоговомОргане = 
			УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(
																Организация.ГоловнаяОрганизация, 
																КодыРегистрацииГоловнойОрганизации.КодНалоговогоОргана, 
																КодыРегистрацииГоловнойОрганизации.КПП);
	Иначе
		РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	КонецЕсли;
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНедвижимости КАК ОстаточнаяСтоимостьНедвижимости,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
				|%2';
				|en = 'Ownership right registration date is not filled in for object %1
				|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				
		КонецЦикла;
			
		ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
		ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество КАК ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
	
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	СУММА(ВложенныйЗапрос.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(ОстаточнаяСтоимостьНедвижимости),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	СУММА(СуммаАвансовыхПлатежей),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
		
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества 
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
				
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					Раздел2.Добавить().Данные = СтруктураНовойТаблицы;
					СтраницаРаздел2 = Раздел2[Раздел2.Количество()-1].Данные;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = ?(Лев(Выборка.КодВидаИмущества, 1) = "0", Прав(Выборка.КодВидаИмущества, 1), Выборка.КодВидаИмущества);
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020020003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если Выборка.КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
					
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014103 = Число(СтраницаРаздел2.П000020014103) + Выборка.ОстаточнаяСтоимостьНедвижимости;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014104 = Число(СтраницаРаздел2.П000020014104) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНедвижимости, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020023003 = Число(СтраницаРаздел2.П000020023003) + Выборка.СуммаАвансовыхПлатежей;
						
			СтраницаРаздел2.П000020027003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
									
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
				СтраницаРаздел2.П000020024003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020025003 = Число(СтраницаРаздел2.П000020025003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020025003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020025003, "", ДополнительныеПараметры);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 3
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 =  Раздел3[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Количество()>1 Цикл
		Раздел3.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел3 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				Раздел3.Добавить().Данные = СтруктураНовойТаблицы;
				СтраницаРаздел3 = Раздел3[Раздел3.Количество()-1].Данные;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
			
			ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
			
			ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);

			
			СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
			СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
			СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
			
			СтраницаРаздел3.П000030011003 = Выборка.СуммаАвансовыхПлатежей;
									
			СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел3.П000030007003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			
			СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
			СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
			
			СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
			
			Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < 12 Тогда
				СтраницаРаздел3.П000030009003_Числ = Выборка.КоличествоМесяцевВладения;
				СтраницаРаздел3.П000030009003_Знам = 12;
			КонецЕсли;
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
			
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				
				СтраницаРаздел3.П000030012003_КодЛьготы = "2012500";
				СтраницаРаздел3.П000030013003 = Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область Имущество2017Кв1

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2017Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2017Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	УплачиваютсяАвансы = РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	Если НЕ УплачиваютсяАвансы Тогда 
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКПорядкуУплатыНалоговНаМестах();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не настроена уплата авансов по налогу на имущество на %1 для %2
			|%3';
			|en = 'Property tax advance payment is not configured on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;	
		
	КонецЕсли;

	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда 
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
			,ПараметрыОтчета.Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////
	// РАЗДЕЛ 2
	
	// Заполнение раздела 2 по коду вида имущества 1,2,3,4,5 (прочее имущество).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	КонецЕсли;	
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
				|%2';
				|en = 'Ownership right registration date is not filled in for object %1
				|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				
		КонецЦикла;
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество КАК ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
		
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.КБК = Льготы.КБК
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
			
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
					
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101           = КодВидаИмущества; 
			СтраницаРаздел2.П000020001001           = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100           = КБК;
			СтраницаРаздел2.П000020013003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020016003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020017003           = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020015003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020015003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020021003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020018003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020018003, "", ДополнительныеПараметры);
						
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда 
				
				СтраницаРаздел2.П000020019003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020020003 = Число(СтраницаРаздел2.П000020020003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020020003_" + Раздел2.Количество(), "", "", "", СтраницаРаздел2.П000020020003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период < &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество КАК НедвижимоеИмущество
	|ПОМЕСТИТЬ ПорядокУчетаОСБУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПорядокУчетаОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	НеСнятыеСУчета.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	НеСнятыеСУчета.ОсновноеСредство.КодПоОКОФ КАК КодПоОКОФ,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер КАК УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы
	|";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;

		СтраницаРаздел21.П000210001100 = КБК;
		СтраницаРаздел21.П000210001001 = ?(ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения),
		                                   Выборка.КадастровыйНомерПомещения, Выборка.КадастровыйНомер);
		СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		Если Не ЗначениеЗаполнено(СтраницаРаздел21.П000210001001) И Не ЗначениеЗаполнено(СтраницаРаздел21.П000210002001) Тогда
			СтраницаРаздел21.П000210003001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		Если Месяц(мДатаКонцаПериодаОтчета) = 3 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0104;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 6 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0107;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 9 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0110;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	
	// Заполнение раздела 3
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ВложенныйЗапрос.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ВложенныйЗапрос.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 =  Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел3 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
			НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
		
		ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
		
		ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
		СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
		СтраницаРаздел3.П000030001100 = "18210602010021000110";
		СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
		СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
		СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
		СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
		
		СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
		СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
		СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
		
		СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтраницаРаздел3.П000030006003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
		
		СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
		СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
		
		СтраницаРаздел3.П000030007003 = Выборка.НалоговаяСтавка;
		
		КоличествоМесяцевВПериоде = ?(Год(мДатаКонцаПериодаОтчета) < 2016, Месяц(мДатаКонцаПериодаОтчета), 3);
		Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < КоличествоМесяцевВПериоде Тогда 
			СтраницаРаздел3.П000030008003_Числ = Строка(Выборка.КоличествоМесяцевВладения);
			СтраницаРаздел3.П000030008003_Знам = Строка(КоличествоМесяцевВПериоде);
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030009003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030009003, "", ДополнительныеПараметры);
		
		Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
			СтраницаРаздел3.П000030010003_КодЛьготы = "2012500";
			СтраницаРаздел3.П000030011003 = Выборка.СуммаУменьшенияСуммыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030011003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030011003, "", ДополнительныеПараметры);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2017Кв4(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003_1", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003_1", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014103", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014104", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020027003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020025003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);

КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2017Кв4(ПараметрыОтчета, Контейнер) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация = ПараметрыОтчета.Организация;
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "РегистрацияВНалоговомОргане, КодНалоговогоОргана");
	КодНалоговогоОргана  = ?(ЗначениеЗаполнено(ПараметрыОтчета.КодНалоговогоОргана), 
		ПараметрыОтчета.КодНалоговогоОргана, РеквизитыОрганизации.КодНалоговогоОргана);
	КПП                  = ПараметрыОтчета.КПП;
	РегистрацияВНалоговомОргане = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	мДатаНачалаПериодаОтчета  	= ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета		= ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		ПутьКРегистру = НСтр("ru = '(раздел ""Нормативно-справочная информация"" - ""Организация"" - ""Учетная политика и налоги"")';
							|en = '(section ""Master data"" - ""Company"" - ""Accounting policy and taxes"")'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета), КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета),"ФП = Истина")
			,ПараметрыОтчета.Организация, ПутьКРегистру));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", 			ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета",	НачалоДня(мДатаКонцаПериодаОтчета));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ИФНС,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНедвижимости КАК ОстаточнаяСтоимостьНедвижимости,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьОсновныхСредств КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета";
	
	Выборка = Запрос.Выполнить();
	
	ТаблицаРасчетовПоНалогуНаИмущество = Новый ТаблицаЗначений;
	РегламентныеОперацииВыполнены = Ложь;
	Если Не Выборка.Пустой() Тогда
		ТаблицаРасчетовПоНалогуНаИмущество = Выборка.Выгрузить();
		РегламентныеОперацииВыполнены = Истина;
	Иначе
		ТаблицаРасчетовПоНалогуНаИмущество = РасчетИмущественныхНалогов.ПолучитьРасчетПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Отбор = Новый Структура("ИФНС, ВидНалоговойБазы, КоличествоМесяцевВладения",
		?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка()),
		Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость,
		0);
		
	НайденныеСтроки = ТаблицаРасчетовПоНалогуНаИмущество.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПутьКРегистру = ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество();
		
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Не заполнена дата регистрации права собственности для объекта %1
				|%2';
				|en = 'Ownership right registration date is not filled in for object %1
				|%2'"),	СтрокаТаблицы.ОсновноеСредство, ПутьКРегистру));
				
		КонецЦикла;
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаРасчетовПоНалогуНаИмущество", ТаблицаРасчетовПоНалогуНаИмущество);
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|	ПОМЕСТИТЬ ВТ_ТаблицаРасчетовПоНалогуНаИмущество
	|	ИЗ &ТаблицаРасчетовПоНалогуНаИмущество как ТаблицаРасчетовПоНалогуНаИмущество";
	Запрос.Выполнить();
	
	НалоговыйОрган = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане), РегистрацияВНалоговомОргане, Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.УстановитьПараметр("НалоговыйОрган", НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНедвижимости) КАК ОстаточнаяСтоимостьНедвижимости,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьОсновныхСредств) КАК ОстаточнаяСтоимостьОсновныхСредств,
	|	СУММА(ВложенныйЗапрос.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО ВложенныйЗапрос.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И ВложенныйЗапрос.КБК = Льготы.КБК
	|			И ВложенныйЗапрос.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И ВложенныйЗапрос.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И ВложенныйЗапрос.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И ВложенныйЗапрос.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И ВложенныйЗапрос.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.НалоговаяСтавка,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(ОстаточнаяСтоимостьНедвижимости),
	|	СУММА(ОстаточнаяСтоимостьОсновныхСредств),
	|	СУММА(СуммаАвансовыхПлатежей),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	ОБЩИЕ,
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОБЩИЕ" Тогда
			
			ОстаточнаяСтоимостьОсновныхСредств = Выборка.ОстаточнаяСтоимостьОсновныхСредств;
		
		ИначеЕсли Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
				
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = КодВидаИмущества;
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100 = КБК;
			СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020020003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
					
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014103 = Число(СтраницаРаздел2.П000020014103) + Выборка.ОстаточнаяСтоимостьНедвижимости;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014104 = Число(СтраницаРаздел2.П000020014104) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНедвижимости, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020023003 = Число(СтраницаРаздел2.П000020023003) + Выборка.СуммаАвансовыхПлатежей;
						
			СтраницаРаздел2.П000020027003 = ОстаточнаяСтоимостьОсновныхСредств;
						
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014103_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014103, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014104_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014104, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
									
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
				СтраницаРаздел2.П000020024003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020025003 = Число(СтраницаРаздел2.П000020025003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020025003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020025003, "", ДополнительныеПараметры);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период < &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество НедвижимоеИмущество
	|ПОМЕСТИТЬ ПорядокУчетаОСБУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК ПорядокУчетаОСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	НеСнятыеСУчета.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	НеСнятыеСУчета.ОсновноеСредство.КодПоОКОФ КАК КодПоОКОФ,
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества,
	|	ВложенныйЗапрос.КБК КАК КБК,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер КАК УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(ВложенныйЗапрос.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ВложенныйЗапрос.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО НеСнятыеСУчета.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|ГДЕ
	|	ПорядокУчетаОСБУ.НедвижимоеИмущество
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	ВложенныйЗапрос.КодПоОКТМО,
	|	ВложенныйЗапрос.КодВидаИмущества,
	|	ВложенныйЗапрос.КБК,
	|	ВложенныйЗапрос.КадастровыйНомер,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.УсловныйНомер,
	|	ВложенныйЗапрос.ВидНалоговойБазы
	|";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;

		СтраницаРаздел21.П000210001100 = КБК;
		СтраницаРаздел21.П000210001001 = ?(ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения),
		                                   Выборка.КадастровыйНомерПомещения, Выборка.КадастровыйНомер);
		СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		Если Не ЗначениеЗаполнено(СтраницаРаздел21.П000210001001) И Не ЗначениеЗаполнено(СтраницаРаздел21.П000210002001) Тогда
			СтраницаРаздел21.П000210003001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа3112;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	// Заполнение раздела 3
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.КодПоОКТМО КАК КодПоОКТМО,
	|	ВложенныйЗапрос.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	ВложенныйЗапрос.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	ВложенныйЗапрос.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	ВложенныйЗапрос.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	ВложенныйЗапрос.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВложенныйЗапрос.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	ВложенныйЗапрос.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	ВложенныйЗапрос.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	ВложенныйЗапрос.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ВложенныйЗапрос.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	ВложенныйЗапрос.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	ВложенныйЗапрос.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	ВложенныйЗапрос.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	ВложенныйЗапрос.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	ВложенныйЗапрос.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	ВложенныйЗапрос.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	ВложенныйЗапрос.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_ТаблицаРасчетовПоНалогуНаИмущество КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ИФНС = &НалоговыйОрган
	|	И ВложенныйЗапрос.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 = Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел3 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
				НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
				НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
				
				СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
			
			ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
			
			ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", РегламентныеОперацииВыполнены);

			СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
			СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел3.П000030001100 = "18210602010021000110";
			СтраницаРаздел3.П000030001401 = Выборка.КадастровыйНомерЗдания;
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
			СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
			СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
			
			СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
			СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
			
			СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
			СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
			
			СтраницаРаздел3.П000030011003 = Выборка.СуммаАвансовыхПлатежей;
									
			СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел3.П000030007003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			
			СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
			СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
			
			СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
			
			Если Выборка.КоличествоМесяцевВладения > 0 И Выборка.КоличествоМесяцевВладения < 12 Тогда
				СтраницаРаздел3.П000030009003_Числ = Строка(Выборка.КоличествоМесяцевВладения);
				СтраницаРаздел3.П000030009003_Знам = "12";
			КонецЕсли;
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
			
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда        
				
				СтраницаРаздел3.П000030012003_КодЛьготы = "2012500";
				СтраницаРаздел3.П000030013003 = Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область Имущество2019Кв1

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаАвансыИмуществоФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020015003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020017003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020019003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003", Истина, Истина);
	
	// Раздел 2.1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003000", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003005", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003006", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003007", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003008", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003009", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003010", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003011", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003012", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00021М103013", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00021М103014", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003015", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003016", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003017", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003018", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	// Раздел 3
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030006003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008503", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003_КодЛьготы", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Истина);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетАвансыИмуществоФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	Организация              = ПараметрыОтчета.Организация;
	КодНалоговогоОргана      = ПараметрыОтчета.КодНалоговогоОргана;
	КПП                      = ПараметрыОтчета.КПП;
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	УплачиваютсяАвансы = РасчетИмущественныхНалоговУП.УплачиваютсяАвансыПоНалогуНаИмущество(Организация, мДатаКонцаПериодаОтчета);
	Если НЕ УплачиваютсяАвансы Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не настроена уплата авансов по налогу на имущество на %1 для %2
			|%3';
			|en = 'Property tax advance payment is not configured on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ОписаниеПутиВИнтерфейсеКПорядкуУплатыНалоговНаМестах()));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;

	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, ) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|ГДЕ
	|	СтавкиНалогаНаИмуществоСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних
	|ГДЕ
	|	СтавкиНалогаПоОССрезПоследних.Организация = &Организация";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	// Заполнение раздела 2.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета", НачалоДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("НалоговыйОрган",      НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС КАК ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель
	|ПОМЕСТИТЬ ВТ_РасчетНалогаНаИмущество
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета
	|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	ВЫБОР
	|		КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО РасчетНалогаНаИмущество.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И РасчетНалогаНаИмущество.КБК = Льготы.КБК
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И РасчетНалогаНаИмущество.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И РасчетНалогаНаИмущество.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
					
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101           = КодВидаИмущества; 
			СтраницаРаздел2.П000020001001           = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100           = КБК;
			СтраницаРаздел2.П000020013003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020016003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020017003           = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020015003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020015003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества           = Выборка.КодВидаИмущества; 
			КодПоОКТМО           = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка           = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020018003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020018003, "", ДополнительныеПараметры);
						
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда 
				
				СтраницаРаздел2.П000020019003_КодЛьготы = "2012500";
				СтраницаРаздел2.П000020020003 = Число(СтраницаРаздел2.П000020020003) + Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020020003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020020003, "", ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период <= &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК Значение
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК МестонахождениеОС
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	НеСнятыеСУчета.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(НеСнятыеСУчета.ОсновноеСредство.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	НеСнятыеСУчета.ОсновноеСредство.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ПО НеСнятыеСУчета.ОсновноеСредство = РасчетНалогаНаИмущество.ОсновноеСредство
	|			И (РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган)
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	СтраницаРаздел21Здание = Раздел21.Строки[0].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
		СтраницаРаздел21Здание[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеАдресов = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить();
	ДанныеАдресов.Индексы.Добавить("ОсновноеСредство");
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			СтруктураДанныхМногострочныхЧастей = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
				СтруктураДанныхМногострочныхЧастей.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура("П00021М1", ДеревоЗначенийРегОтчет());
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
			НоваяСтрокаРаздел21Здание = НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
			НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
			НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21Здание = Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		АдресМестонахождения = ДанныеАдресов.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
		АдресМестонахожденияЗначение = ?(АдресМестонахождения <> Неопределено, АдресМестонахождения.АдресМестонахожденияЗначение, "");
		
		Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = Выборка.КадастровыйНомерПомещения;
		ИначеЕсли ЗначениеЗаполнено(Выборка.КадастровыйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = Выборка.КадастровыйНомер;
		ИначеЕсли ЗначениеЗаполнено(Выборка.УсловныйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "2";
			СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		ИначеЕсли ЗначениеЗаполнено(АдресМестонахожденияЗначение) Тогда
			СтраницаРаздел21.П000210001001 = "3";
			СтраницаРаздел21.П000210002001 = Выборка.ИнвентарныйНомер;
		Иначе
			СтраницаРаздел21.П000210001001 = "4";
			СтраницаРаздел21.П000210002001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		Если СтраницаРаздел21.П000210001001 = "3" Тогда
			
			Если НЕ ПустаяСтрока(АдресМестонахожденияЗначение) Тогда
				
				АдресМестонахождения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
											АдресМестонахожденияЗначение,
											Перечисления.ТипыКонтактнойИнформации.Адрес);
			
				ПоляАдреса = ИнтерфейсыВзаимодействияБРО.АдресВФорматеФИАС(АдресМестонахождения);
				
				СтраницаРаздел21.П00021УИД3000 = ПоляАдреса.ИдентификаторАдресногоОбъекта;
				СтраницаРаздел21.П000210003000 = ПоляАдреса.Индекс;
				СтраницаРаздел21.П000210003001 = ПоляАдреса.КодРегиона;
				СтраницаРаздел21.ПС00210003001 = ПоляАдреса.РегионСокращение;
				СтраницаРаздел21.П000210003002 = ПоляАдреса.МуниципальныйРайонВид;
				СтраницаРаздел21.ПС00210003002 = ПоляАдреса.МуниципальныйРайонСокращение;
				СтраницаРаздел21.П000210003003 = ПоляАдреса.МуниципальныйРайон;
				СтраницаРаздел21.П000210003004 = ПоляАдреса.ПоселениеВид;
				СтраницаРаздел21.ПС00210003004 = ПоляАдреса.ПоселениеСокращение;
				СтраницаРаздел21.П000210003005 = ПоляАдреса.Поселение;
				СтраницаРаздел21.П000210003006 = ПоляАдреса.НаселенныйПунктВид;
				СтраницаРаздел21.ПС00210003006 = ПоляАдреса.НаселенныйПунктСокращение;
				СтраницаРаздел21.П000210003007 = ПоляАдреса.НаселенныйПункт;
				СтраницаРаздел21.П000210003008 = ПоляАдреса.ТерриторияТип;
				СтраницаРаздел21.ПС00210003008 = ПоляАдреса.ТерриторияСокращение;
				СтраницаРаздел21.П000210003009 = ПоляАдреса.Территория;
				СтраницаРаздел21.П000210003010 = ПоляАдреса.УлицаТип;
				СтраницаРаздел21.ПС00210003010 = ПоляАдреса.УлицаСокращение;
				СтраницаРаздел21.П000210003011 = ПоляАдреса.Улица;
				СтраницаРаздел21.П000210003015 = ПоляАдреса.ПомещениеВЗданииТип;
				СтраницаРаздел21.П000210003016 = ПоляАдреса.ПомещениеВЗданииНомер;
				СтраницаРаздел21.П000210003017 = ПоляАдреса.ПомещениеВКвартиреТип;
				СтраницаРаздел21.П000210003018 = ПоляАдреса.ПомещениеВКвартиреНомер;
				
				ПервоеЗдание = Истина;
				Для Каждого Здание Из ПоляАдреса.Здания Цикл
					
					Если Не ПервоеЗдание Тогда
						СтруктураДанныхМногострочныхЧастей = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
							СтруктураДанныхМногострочныхЧастей.Вставить(
								Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтрокаРаздел21Здание = 
							Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
						НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
						НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
						
						СтраницаРаздел21Здание = НоваяСтрокаРаздел21Здание.Данные;
					Иначе
						ПервоеЗдание = Ложь;
					КонецЕсли;
					
					СтраницаРаздел21Здание.П00021М103013 = Здание.ЗданиеТип;
					СтраницаРаздел21Здание.П00021М103014 = Здание.ЗданиеНомер;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(Выборка.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		Если Месяц(мДатаКонцаПериодаОтчета) = 3 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0104;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 6 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0107;
		ИначеЕсли Месяц(мДатаКонцаПериодаОтчета) = 9 Тогда
			СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа0110;
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	
	// Заполнение раздела 3
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 =  Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел3 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
			НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
		
		ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
		
		ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
		
		СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
		СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
		СтраницаРаздел3.П000030001100 = "18210602010021000110";
		
		Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел3.П000030001401 = "2";
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
		Иначе
			СтраницаРаздел3.П000030001401 = "1";
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерЗдания;
		КонецЕсли;
		
		СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
		СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
		
		СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
		СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
		СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
		
		СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтраницаРаздел3.П000030006003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
		
		СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
		СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
		
		СтраницаРаздел3.П000030007003 = Выборка.НалоговаяСтавка;
		СтраницаРаздел3.П000030008003 = Окр(Выборка.КоличествоМесяцевВладения / 3, 4);
		
		Если Выборка.КоличествоМесяцевИспользования > 0 И Выборка.КоличествоМесяцевИспользования < Выборка.КоличествоМесяцевВладения Тогда 
			СтраницаРаздел3.П000030008503 = Окр(Выборка.КоличествоМесяцевИспользования / Выборка.КоличествоМесяцевВладения, 4);
		КонецЕсли;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030009003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030009003, "", ДополнительныеПараметры);
		
		Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
			
			СтраницаРаздел3.П000030010003_КодЛьготы = "2012500";
			СтраницаРаздел3.П000030011003 = Выборка.СуммаУменьшенияСуммыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030011003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030011003, "", ДополнительныеПараметры);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область Имущество2019_2020_Имущество2022

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//  ИДРедакцииОтчета - Строка - ИД редакции отчета.
//  ПараметрыОтчета - Структура - Структура параметров отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаИмуществоФормаОтчета2019_2024(ПоказателиОтчета, ИДРедакцииОтчета, ПараметрыОтчета) Экспорт

	Если Не ВозможноПолучитьНалоговыйОрган(ПараметрыОтчета.Организация) Тогда
		Если ЗначениеЗаполнено(ПараметрыОтчета.Организация.КПП) Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Для организации %1 нет регистрации в налоговом органе с КПП: %2 и кодом налогового органа: %3.
													 |Проверьте регистрацию в налоговом органе и назначьте её основной для организации.';
													 |en = 'Для организации %1 нет регистрации в налоговом органе с КПП: %2 и кодом налогового органа: %3.
													 |Проверьте регистрацию в налоговом органе и назначьте её основной для организации.'"),
												ПараметрыОтчета.Организация, ПараметрыОтчета.Организация.КПП,
												ПараметрыОтчета.Организация.КодНалоговогоОргана);
												
		Иначе
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'У организации %1 не указан КПП.';
													|en = 'У организации %1 не указан КПП.'"),
												ПараметрыОтчета.Организация);
												
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;

	// Раздел 1
	Если ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
	 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
		// Признак налогоплательщика
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000503", Истина, Ложь);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002003", Истина, Ложь);
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
	 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2022Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4" Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002103", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002303", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002503", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010002703", Истина, Истина);
	КонецЕсли;
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010004003", Истина, Ложь);
	
	// Раздел 2
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020001100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020002004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020003004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020004004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020005004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020006004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020007004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020008004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020009004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020010004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020011004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020012004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020013004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020014004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020016003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Числ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020018003_Знам", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020020003_КодЛьготы", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020021003", Истина, Ложь);
	// При отключенном авторасчете ячеек будет взято значение, переданное в контейнере.
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020022003", Истина, Истина);
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
	 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2022Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4" Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003_КодЛьготы", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020026003", Истина, Истина);
	Иначе
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020023003", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020024003_КодЛьготы", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020025003", Истина, Истина);
	КонецЕсли;
	
	// Раздел 2.1
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001000", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001100", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210001001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210002001", Истина, Ложь);
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
		// Индекс
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003000", Истина, Ложь);
	КонецЕсли;
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003001", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003002", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003004", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003005", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003006", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003007", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003008", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003009", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003010", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003011", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003012", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00021М103013", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00021М103014", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003015", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003016", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003017", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210003018", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210004003", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000210005003", Истина, Истина);
	
	// Раздел 3
	ЭтоИностраннаяОрганизация = Ложь;
	Если (ИДРедакцииОтчета = "ФормаОтчета2022Кв4" Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4")
		И ПараметрыОтчета <> Неопределено
		И ПараметрыОтчета.Свойство("Организация") Тогда
			Организация              = ПараметрыОтчета.Организация;
			КодНалоговогоОргана      = ПараметрыОтчета.Организация.КодНалоговогоОргана;
			КПП                      = ПараметрыОтчета.Организация.КПП;
	
			НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
			НалоговыйОрганКПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НалоговыйОрган, "КПП");
	
			ЭтоИностраннаяОрганизация = РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(ПараметрыОтчета.Организация,
																												ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	Если ИДРедакцииОтчета <> "ФормаОтчета2022Кв4" И ИДРедакцииОтчета <> "ФормаОтчета2024Кв4" Или ЭтоИностраннаяОрганизация Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000101", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001001", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001100", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001401", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030001501", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002003", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030002503", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Числ", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003003_Знам", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Числ", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030003503_Знам", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030004003_КодЛьготы", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Числ", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030005003_Знам", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030007003_КодЛьготы", Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030008003", Истина, Ложь);
		Если ИДРедакцииОтчета = "ФормаОтчета2022Кв4" Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4" Тогда
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Числ", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003_Знам", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009503_Числ", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009503_Знам", Истина, Ложь);
		Иначе
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009003", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030009503", Истина, Ложь);
		КонецЕсли;
		// При отключенном авторасчете ячеек будет взято значение, переданное в контейнере.
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030010003", Истина, Истина);
		Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4"
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
		 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4"
		 Или ИДРедакцииОтчета = "ФормаОтчета2022Кв4"
		 Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4" Тогда
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003_КодЛьготы", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003_Основание", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003", Истина, Истина);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);
		Иначе
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030011003", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030012003_КодЛьготы", Истина, Ложь);
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030013003", Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 4
	Если ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
	 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2022Кв4"
	 Или ИДРедакцииОтчета = "ФормаОтчета2024Кв4" Тогда
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00004М100001", Истина, Истина);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П00004М100002", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//  ИДРедакцииОтчета - Строка - идентификатор редакции отчета.
//
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2019_2021(ПараметрыОтчета, Контейнер, ИДРедакцииОтчета) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация              = ПараметрыОтчета.Организация;
	КодНалоговогоОргана      = ПараметрыОтчета.КодНалоговогоОргана;
	КПП                      = ПараметрыОтчета.КПП;
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	// Сведения о налоговых льготах в виде уменьшения суммы налога.
	ПроцентУменьшенияСуммыНалога = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПроцентУменьшения, 0) КАК ПроцентУменьшения,
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПроцентУменьшенияСуммыНалога = ДопПараметрыОтчета.ПроцентУменьшения;
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	// В 2020 году некоторые организации освобождены от уплаты имущественных налогов (за 2-й квартал).
	// Федеральный закон № 172-ФЗ от 08.06.2020.
	ПрименяетсяОсвобождениеОтНалога = Ложь;
	Если НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(Организация) Тогда
		ПериодОсвобожденияОтНалогов = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
		ПрименяетсяОсвобождениеОтНалога = (Год(ПериодОсвобожденияОтНалогов.Конец) = Год(мДатаКонцаПериодаОтчета));
	КонецЕсли;
	
	Если ИДРедакцииОтчета = "ФормаОтчета2020Кв4" Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
		 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
		// В 2020 году для некоторых организаций применяется отсрочка по уплате налога.
		// Если организация вправе воспользоваться отсрочкой, то Признак налогоплательщика устанавливается в значение
		// (п. 4.2 Порядка заполнения декларации согласно Приказу ФНС России от 14.08.2019 N СА-7-21/405@ (ред. от 28.07.2020)):
		//  1 - в случае, если действует федеральная отсрочка
		//  2 - в случае, если действует региональная отсрочка
		// Если отсрочка не применяется, то устанавливается значение 3.
		ПериодПереносаСроков = РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПериодПереносаСроковНалоговОтчетов();
		ВозможенПереносСроковУплатыАвансов = (мДатаКонцаПериодаОтчета >= ПериодПереносаСроков.Начало 
			И мДатаКонцаПериодаОтчета <= КонецДня(ПериодПереносаСроков.Окончание));
		
		Если ВозможенПереносСроковУплатыАвансов Тогда
			Если РегистрыСведений.ПорядокУплатыНалоговНаМестах.ПродленыРегиональныеСрокиУплатыНалога(
				 Организация, 
				 "НалогНаИмущество", 
				 НалоговыйОрган, 
				 мДатаКонцаПериодаОтчета) Тогда
				Контейнер.Раздел1.Строки[0].Данные.П000010000503 = "2";
			ИначеЕсли РегистрыСведений.НастройкиПродленияСроковНалоговОтчетов.ПродленыСрокиУплатыНалоговПредставленияОтчетов(Организация) Тогда
				// Применяется Постановление правительства №409 от 02.04.2020
				Контейнер.Раздел1.Строки[0].Данные.П000010000503 = "1";
			Иначе
				Контейнер.Раздел1.Строки[0].Данные.П000010000503 = "3";
			КонецЕсли;	
		Иначе
			Контейнер.Раздел1.Строки[0].Данные.П000010000503 = "3";	
		КонецЕсли;
		
	КонецЕсли;

	// Заполнение раздела 1.
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4" 
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
		 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
		// Здесь заполняем только данные по авансовым платежам.
		// Остальные суммы рассчитываются на стороне БРО.
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
		Запрос.УстановитьПараметр("ДатаОкончанияКв1", Дата(Год(мДатаКонцаПериодаОтчета), 3, 31));
		Запрос.УстановитьПараметр("ДатаОкончанияКв2", Дата(Год(мДатаКонцаПериодаОтчета), 6, 30));
		Запрос.УстановитьПараметр("ДатаОкончанияКв3", Дата(Год(мДатаКонцаПериодаОтчета), 9, 30));
		Запрос.УстановитьПараметр("НалоговыйОрган",   НалоговыйОрган);
		Запрос.УстановитьПараметр("ПрименяетсяОсвобождениеОтНалога", ПрименяетсяОсвобождениеОтНалога);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Авансы.КодПоОКТМО КАК КодПоОКТМО,
		|	Авансы.КБК КАК КБК,
		|	Авансы.КодВидаИмущества КАК КодВидаИмущества,
		|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв1), 0) КАК СуммаАвансаКв1,
		|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв2), 0) КАК СуммаАвансаКв2,
		|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв3), 0) КАК СуммаАвансаКв3
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
		|		РасчетНалогаНаИмущество.КБК КАК КБК,
		|		РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
		|		РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаАвансаКв1,
		|		0 КАК СуммаАвансаКв2,
		|		0 КАК СуммаАвансаКв3
		|	ИЗ
		|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|	ГДЕ
		|		РасчетНалогаНаИмущество.Организация = &Организация
		|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв1
		|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетНалогаНаИмущество.КодПоОКТМО,
		|		РасчетНалогаНаИмущество.КБК,
		|		РасчетНалогаНаИмущество.КодВидаИмущества,
		|		0,
		|		ВЫБОР
		|			КОГДА &ПрименяетсяОсвобождениеОтНалога
		|				ТОГДА 0
		|			ИНАЧЕ РасчетНалогаНаИмущество.СуммаНалогаКУплате
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|	ГДЕ
		|		РасчетНалогаНаИмущество.Организация = &Организация
		|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв2
		|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетНалогаНаИмущество.КодПоОКТМО,
		|		РасчетНалогаНаИмущество.КБК,
		|		РасчетНалогаНаИмущество.КодВидаИмущества,
		|		0,
		|		0,
		|		РасчетНалогаНаИмущество.СуммаНалогаКУплате
		|	ИЗ
		|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|	ГДЕ
		|		РасчетНалогаНаИмущество.Организация = &Организация
		|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв3
		|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган) КАК Авансы
		|
		|СГРУППИРОВАТЬ ПО
		|	Авансы.КодПоОКТМО,
		|	Авансы.КБК,
		|	Авансы.КодВидаИмущества";
		Результат = Запрос.Выполнить();
		
		// В разделе 1 строки 007(010)-040 повторяются столько раз, сколько есть различных сочетаний кода по ОКТМО и КБК
		ГруппыСтрокРаздела1 = Контейнер.Раздел1.Строки[0].ДанныеМногострочныхЧастей.П0000100.Строки;
		
		// Устанавливаем пустые значения показателей в 1-й группе строк 010-040...
		Для Каждого Показатель Из ГруппыСтрокРаздела1[0].Данные Цикл
			ГруппыСтрокРаздела1[0].Данные[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		// ... а остальные группы удаляем
		Пока ГруппыСтрокРаздела1.Количество()>1 Цикл
			ГруппыСтрокРаздела1.Удалить(1);
		КонецЦикла;
		
		Если Не Результат.Пустой() Тогда
			
			Авансы = Результат.Выгрузить();
			
			Для Каждого СтрокаАванса Из Авансы Цикл 
				КБК = "";
				КодВидаИмущества = СокрЛП(СтрокаАванса.КодВидаИмущества);
				
				// КБК для уплаты налога на имущество организаций
				//	182 1 06 02010 02 1000 110 - по имуществу, не входящему в Единую систему газоснабжения;
				//	182 1 06 02020 02 1000 110 - по имуществу, входящему в Единую систему газоснабжения.
				// (см. Приложение 2 к Приказу Минфина России от 08.06.2018 N 132н (ред. от 04.09.2019)
				Если КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
					// Оставляем КБК - он получен из РС ПараметрыНачисленияНалогаНаИмущество 
					СтрокаАванса.КБК = СокрЛП(СтрокаАванса.КБК);
				ИначеЕсли КодВидаИмущества = "01" Тогда
					СтрокаАванса.КБК = "18210602020021000110";
				Иначе
					СтрокаАванса.КБК = "18210602010021000110";
				КонецЕсли;
				
				СтрокаАванса.КодПоОКТМО = СокрЛП(СтрокаАванса.КодПоОКТМО);
			КонецЦикла;
			
			ИтогиПоГруппам = Авансы.Скопировать();
			ИтогиПоГруппам.Свернуть("КодПоОКТМО, КБК", "СуммаАвансаКв1, СуммаАвансаКв2, СуммаАвансаКв3");
			
			Авансы.Индексы.Добавить("КодПоОКТМО, КБК");
			
			ПерваяГруппаСтрок = Истина;
			ОтборСтрок = Новый Структура("КодПоОКТМО, КБК");
			
			Для Каждого ИтогПоГруппе Из ИтогиПоГруппам Цикл 
				
				Если ПерваяГруппаСтрок Тогда
					ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1[0];
				Иначе
					// Создаем дополнительную группу строк 010-040 в разделе 1
					ДанныеГруппыСтрокРаздела1 = Новый Структура;
					Для Каждого Показатель Из ГруппаСтрокРаздела1.Данные Цикл
						ДанныеГруппыСтрокРаздела1.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1.Добавить();   
					ГруппаСтрокРаздела1.Данные = ДанныеГруппыСтрокРаздела1;
					ГруппаСтрокРаздела1.ДанныеМногострочныхЧастей = Новый Структура;
				КонецЕсли;
				
				ПерваяГруппаСтрок = Ложь;
				
				ГруппаСтрокРаздела1.Данные.П000010001003 = СокрЛП(ИтогПоГруппе.КодПоОКТМО);
				ГруппаСтрокРаздела1.Данные.П000010002003 = СокрЛП(ИтогПоГруппе.КБК);  
				ГруппаСтрокРаздела1.Данные.П000010002303 = ИтогПоГруппе.СуммаАвансаКв1;
				ГруппаСтрокРаздела1.Данные.П000010002503 = ИтогПоГруппе.СуммаАвансаКв2;
				ГруппаСтрокРаздела1.Данные.П000010002703 = ИтогПоГруппе.СуммаАвансаКв3;
				
				// Подготовим параметры отчета расшифровки - справки-расчета налога на имущество
				ДополнительныеПараметры = Новый Структура;
				ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
				Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
				Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
				
				ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
				
				ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, ИтогПоГруппе.КодПоОКТМО);
				
				// В данных расчета КБК может быть пустой, а КодВидаИмущества заполнен.
				// Поэтому отбираем записи в расшифровке по КодВидаИмущества.
				ЗаполнитьЗначенияСвойств(ОтборСтрок, ИтогПоГруппе);
				ИсходныеСтроки = Авансы.НайтиСтроки(ОтборСтрок);
				
				ОтборПоКодуВидаИмущества = Новый СписокЗначений;
				Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
					ОтборПоКодуВидаИмущества.Добавить(ИсходнаяСтрока.КодВидаИмущества);
				КонецЦикла; 
				
				ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.ВСписке, ОтборПоКодуВидаИмущества);
				
				ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
				ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
				
				НомерГруппы = ГруппыСтрокРаздела1.Количество();
				ОтчетныйГод = Год(мДатаКонцаПериодаОтчета);
				
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002103_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002103, "", ДополнительныеПараметры);
				
				ДополнительныеПараметрыКв1 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
				ДополнительныеПараметрыКв1.Вставить("КонецПериода", Дата(ОтчетныйГод, 3, 31));
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002303_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002303, "", ДополнительныеПараметрыКв1);
				
				ДополнительныеПараметрыКв2 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
				ДополнительныеПараметрыКв2.Вставить("КонецПериода", Дата(ОтчетныйГод, 6, 30));
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002503_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002503, "", ДополнительныеПараметрыКв2);
				
				ДополнительныеПараметрыКв3 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
				ДополнительныеПараметрыКв3.Вставить("КонецПериода", Дата(ОтчетныйГод, 9, 30));
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002703_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002703, "", ДополнительныеПараметрыКв3);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение раздела 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета", НачалоДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("НалоговыйОрган",      НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС КАК ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаНалога КАК СуммаНалога,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.СуммаОсвобожденияОтУплатыНалога КАК СуммаОсвобожденияОтУплатыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель
	|ПОМЕСТИТЬ ВТ_РасчетНалогаНаИмущество
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета
	|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалога) КАК СуммаНалога,
	|	СУММА(РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК СуммаНалогаКУплате,
	|	ВЫБОР
	|		КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	СУММА(РасчетНалогаНаИмущество.СуммаОсвобожденияОтУплатыНалога) КАК СуммаОсвобожденияОтУплатыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО РасчетНалогаНаИмущество.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И РасчетНалогаНаИмущество.КБК = Льготы.КБК
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И РасчетНалогаНаИмущество.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И РасчетНалогаНаИмущество.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(СуммаНалога),
	|	СУММА(СуммаАвансовыхПлатежей),
	|	СУММА(СуммаНалогаКУплате),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	СУММА(СуммаОсвобожденияОтУплатыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ПонижениеНалоговойСтавки,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	ВидНалоговойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь;
	НалоговаяСтавка = 0;
	// В 2020 году для некоторых НКО предусмотрены особые коды льгот
	ЭтоНекоммерческаяОрганизация = Ложь; // В ERP/КА нет учета НКО
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если Не ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
				
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = КодВидаИмущества;
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100 = КБК;
			СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			СтраницаРаздел2.П000020020003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества                                = Выборка.КодВидаИмущества; 
			КодПоОКТМО                                      = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки                        = Выборка.ПонижениеНалоговойСтавки;
			НалоговаяСтавка                                 = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
					
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			СтраницаРаздел2.П000020022003 = СтраницаРаздел2.П000020022003 + Выборка.СуммаНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
			
			Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
				 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4" 
				 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
				 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
				// При освобождении организации от уплаты налога за 2-й квартал 2020 года необходимо использовать особые коды льгот
				// ( см. письмо ФНС от 10.06.2020 № БС-4-21/9576@ - далее Письмо) 
				Если ПрименяетсяОсвобождениеОтНалога И Выборка.СуммаОсвобожденияОтУплатыНалога > 0 И Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
					// Абз. 4-5 п.3 Письма: "Если организация освобождается от [уплаты налога за 2-й квартал 2020 года] ... 
					// и законом субъекта Российской Федерации [для организации]... установлена налоговая льгота по налогу на имущество организаций
					// в виде уменьшения подлежащей уплате в бюджет суммы исчисленного налога, то...
					// в первой части строки с кодом 230 ... указывается [код]..."
					Если ЭтоНекоммерческаяОрганизация Тогда
						// ... 2010506 (код льготы для социально-ориентированных НКО - на данный момент опубликован только реестр таких НКО)
						СтраницаРаздел2.П000020023003_КодЛьготы = "2010506";
					Иначе
						// ... 2010505 (если организация не является НКО)
						СтраницаРаздел2.П000020023003_КодЛьготы = "2010505";
					КонецЕсли;	
					// "...по строке с кодом 240 ... указывается исчисленная сумма налоговой льготы (в том числе с учетом суммы авансового платежа 
					// за период владения объектом налогообложения с 1 апреля по 30 июня 2020 года)"
					СтраницаРаздел2.П000020024003 = Число(СтраницаРаздел2.П000020024003) + Выборка.СуммаОсвобожденияОтУплатыНалога + Выборка.СуммаУменьшенияСуммыНалога;
				ИначеЕсли ПрименяетсяОсвобождениеОтНалога И Выборка.СуммаОсвобожденияОтУплатыНалога > 0 Тогда
					// Абз. 1-2 п.3 Письма: "Если организация освобождается от [уплаты налога за 2-й квартал 2020 года] ..., то...
					// в первой части строки с кодом 230 ... указывается [код]..."
					Если ЭтоНекоммерческаяОрганизация Тогда
						// ... 2010502 (код льготы для социально-ориентированных НКО - на данный момент опубликован только реестр таких НКО)
						СтраницаРаздел2.П000020023003_КодЛьготы = "2010502";
					Иначе
						// ... 2010501 (если организация не является НКО)
						СтраницаРаздел2.П000020023003_КодЛьготы = "2010501";
					КонецЕсли;	
					// "...по строке с кодом 240 ... указывается исчисленная сумма авансового платежа по налогу 
					// за период владения объектом налогообложения с 1 апреля по 30 июня 2020 года"
					СтраницаРаздел2.П000020024003 = Число(СтраницаРаздел2.П000020024003) + Выборка.СуммаОсвобожденияОтУплатыНалога;
				ИначеЕсли Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
					СтраницаРаздел2.П000020023003_КодЛьготы = "2012500";
					СтраницаРаздел2.П000020024003 = Число(СтраницаРаздел2.П000020024003) + Выборка.СуммаУменьшенияСуммыНалога;
				КонецЕсли;	
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020024003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020024003, "", ДополнительныеПараметры);
				// В строке 260 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
				// Сумма к уплате не уменьшена на сумму освобождения, поэтому учитываем ее здесь.
				// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
				СтраницаРаздел2.П000020026003 = Число(СтраницаРаздел2.П000020026003) + Выборка.СуммаНалогаКУплате + Выборка.СуммаАвансовыхПлатежей - Выборка.СуммаОсвобожденияОтУплатыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020026003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020026003, "", ДополнительныеПараметры);
			Иначе
				СтраницаРаздел2.П000020023003 = Число(СтраницаРаздел2.П000020023003) + Выборка.СуммаАвансовыхПлатежей;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020023003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020023003, "", ДополнительныеПараметры);
				Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
					СтраницаРаздел2.П000020024003_КодЛьготы = "2012500";
					СтраницаРаздел2.П000020025003 = Число(СтраницаРаздел2.П000020025003) + Выборка.СуммаУменьшенияСуммыНалога;
					ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020025003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020025003, "", ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период <= &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК МестонахождениеОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	НеСнятыеСУчета.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(НеСнятыеСУчета.ОсновноеСредство.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	НеСнятыеСУчета.ОсновноеСредство.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ПО НеСнятыеСУчета.ОсновноеСредство = РасчетНалогаНаИмущество.ОсновноеСредство
	|			И (РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган)
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	СтраницаРаздел21Здание = Раздел21.Строки[0].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
		СтраницаРаздел21Здание[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеАдресов = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить();
	ДанныеАдресов.Индексы.Добавить("ОсновноеСредство");
	
	ДополнительныеПараметрыАдреса = Новый Структура;
	Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4"
		 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
		 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
		ДополнительныеПараметрыАдреса.Вставить("ВерсияАдреса", 2);
	КонецЕсли;
	
	Выборка = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			СтруктураДанныхМногострочныхЧастей = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
				СтруктураДанныхМногострочныхЧастей.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура("П00021М1", ДеревоЗначенийРегОтчет());
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
			НоваяСтрокаРаздел21Здание = НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
			НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
			НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21Здание = Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, Выборка.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
		
		СтраницаРаздел21.П000210001000 = Выборка.КодПоОКТМО;
		
		КодВидаИмущества = Выборка.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = Выборка.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		АдресМестонахождения = ДанныеАдресов.Найти(Выборка.ОсновноеСредство, "ОсновноеСредство");
		АдресМестонахожденияЗначение = ?(АдресМестонахождения <> Неопределено, АдресМестонахождения.АдресМестонахожденияЗначение, "");
		
		Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = Выборка.КадастровыйНомерПомещения;
		ИначеЕсли ЗначениеЗаполнено(Выборка.КадастровыйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = Выборка.КадастровыйНомер;
		ИначеЕсли ЗначениеЗаполнено(Выборка.УсловныйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "2";
			СтраницаРаздел21.П000210002001 = Выборка.УсловныйНомер;
		ИначеЕсли ЗначениеЗаполнено(АдресМестонахожденияЗначение) Тогда
			СтраницаРаздел21.П000210001001 = "3";
			СтраницаРаздел21.П000210002001 = Выборка.ИнвентарныйНомер;
		Иначе
			СтраницаРаздел21.П000210001001 = "4";
			СтраницаРаздел21.П000210002001 = Выборка.ИнвентарныйНомер;
		КонецЕсли;
		
		Если СтраницаРаздел21.П000210001001 = "3" Тогда
			
			Если НЕ ПустаяСтрока(АдресМестонахожденияЗначение) Тогда
				
				АдресМестонахождения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресМестонахожденияЗначение);
				
				ПоляАдреса = ИнтерфейсыВзаимодействияБРО.АдресВФорматеФИАС(АдресМестонахождения, ДополнительныеПараметрыАдреса);
				
				СтраницаРаздел21.П00021УИД3000 = ПоляАдреса.ИдентификаторАдресногоОбъекта;
				Если ИДРедакцииОтчета = "ФормаОтчета2019Кв1" Тогда
					СтраницаРаздел21.П000210003000 = ПоляАдреса.Индекс;
				КонецЕсли;
				СтраницаРаздел21.П000210003001 = ПоляАдреса.КодРегиона;
				СтраницаРаздел21.ПС00210003001 = ПоляАдреса.РегионСокращение;
				СтраницаРаздел21.П000210003002 = ПоляАдреса.МуниципальныйРайонВид;
				СтраницаРаздел21.ПС00210003002 = ПоляАдреса.МуниципальныйРайонСокращение;
				СтраницаРаздел21.П000210003003 = ПоляАдреса.МуниципальныйРайон;
				СтраницаРаздел21.П000210003004 = ПоляАдреса.ПоселениеВид;
				СтраницаРаздел21.ПС00210003004 = ПоляАдреса.ПоселениеСокращение;
				СтраницаРаздел21.П000210003005 = ПоляАдреса.Поселение;
				СтраницаРаздел21.П000210003006 = ПоляАдреса.НаселенныйПунктВид;
				СтраницаРаздел21.ПС00210003006 = ПоляАдреса.НаселенныйПунктСокращение;
				СтраницаРаздел21.П000210003007 = ПоляАдреса.НаселенныйПункт;
				СтраницаРаздел21.П000210003008 = ПоляАдреса.ТерриторияТип;
				СтраницаРаздел21.ПС00210003008 = ПоляАдреса.ТерриторияСокращение;
				СтраницаРаздел21.П000210003009 = ПоляАдреса.Территория;
				СтраницаРаздел21.П000210003010 = ПоляАдреса.УлицаТип;
				СтраницаРаздел21.ПС00210003010 = ПоляАдреса.УлицаСокращение;
				СтраницаРаздел21.П000210003011 = ПоляАдреса.Улица;
				СтраницаРаздел21.П000210003015 = ПоляАдреса.ПомещениеВЗданииТип;
				СтраницаРаздел21.П000210003016 = ПоляАдреса.ПомещениеВЗданииНомер;
				СтраницаРаздел21.П000210003017 = ПоляАдреса.ПомещениеВКвартиреТип;
				СтраницаРаздел21.П000210003018 = ПоляАдреса.ПомещениеВКвартиреНомер;
				
				ПервоеЗдание = Истина;
				Для Каждого Здание Из ПоляАдреса.Здания Цикл
					
					Если Не ПервоеЗдание Тогда
						СтруктураДанныхМногострочныхЧастей = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
							СтруктураДанныхМногострочныхЧастей.Вставить(
								Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтрокаРаздел21Здание = 
							Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
						НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
						НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
						
						СтраницаРаздел21Здание = НоваяСтрокаРаздел21Здание.Данные;
					Иначе
						ПервоеЗдание = Ложь;
					КонецЕсли;
					
					СтраницаРаздел21Здание.П00021М103013 = Здание.ЗданиеТип;
					СтраницаРаздел21Здание.П00021М103014 = Здание.ЗданиеНомер;
					
				КонецЦикла;
			
			КонецЕсли; 
			
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(Выборка.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(Выборка.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		СтраницаРаздел21.П000210005003 = Выборка.ОстаточнаяСтоимостьНа3112;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
			
	КонецЦикла;
	
	// Заполнение раздела 3
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомерЗдания,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.СуммаНалога КАК СуммаНалога,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.СуммаОсвобожденияОтУплатыНалога КАК СуммаОсвобожденияОтУплатыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
	
	Раздел3 = Контейнер.Раздел3;
	СтраницаРаздел3 = Раздел3.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел3 Цикл
		СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел3.Строки.Количество()>1 Цикл
		Раздел3.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Не ПерваяСтраница Тогда
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел3 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
			НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
		
		ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
		
		ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
		
		ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);

		СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
		СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
		СтраницаРаздел3.П000030001100 = "18210602010021000110";
		
		Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел3.П000030001401 = "2";
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
		Иначе
			СтраницаРаздел3.П000030001401 = "1";
			СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерЗдания;
		КонецЕсли;
		
		СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
		СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
		
		СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
		СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
		
		СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
		СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
		
		СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		СтраницаРаздел3.П000030007003_КодЛьготы = ?(Выборка.ПонижениеНалоговойСтавки, "2012400", "");
		
		СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
		СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
		
		СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
		СтраницаРаздел3.П000030009003 = Окр(Выборка.КоличествоМесяцевВладения / 12, 4);
		
		Если Выборка.КоличествоМесяцевИспользования > 0 И Выборка.КоличествоМесяцевИспользования < Выборка.КоличествоМесяцевВладения Тогда 
			СтраницаРаздел3.П000030009503 = Окр(Выборка.КоличествоМесяцевИспользования / Выборка.КоличествоМесяцевВладения, 4);
		КонецЕсли;
		
		СтраницаРаздел3.П000030010003 = Выборка.СуммаНалога;
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
		
		Если ИДРедакцииОтчета = "ФормаОтчета2019Кв4" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4" 
			 Или ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1"
			 Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
				// При освобождении организации от уплаты налога за 2-й квартал 2020 года необходимо использовать особые коды льгот
			// ( см. письмо ФНС от 10.06.2020 № БС-4-21/9576@ - далее Письмо) 
			Если ПрименяетсяОсвобождениеОтНалога И Выборка.СуммаОсвобожденияОтУплатыНалога > 0 И Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				// Абз. 4 и 6 п.3 Письма: "Если организация освобождается от [уплаты налога за 2-й квартал 2020 года] ... 
				// и законом субъекта Российской Федерации [для организации]... установлена налоговая льгота по налогу на имущество организаций
				// в виде уменьшения подлежащей уплате в бюджет суммы исчисленного налога, то...
				// в первой части строки с кодом 110 ... указывается [код]..."
				Если ЭтоНекоммерческаяОрганизация Тогда
					// ... 2010506 (код льготы для социально-ориентированных НКО - на данный момент опубликован только реестр таких НКО)
					СтраницаРаздел3.П000030011003_КодЛьготы = "2010506";
				Иначе
					// ... 2010505 (если организация не является НКО)
					СтраницаРаздел3.П000030011003_КодЛьготы = "2010505";
				КонецЕсли;	
				// "...по строке с кодом 120 ... указывается исчисленная сумма налоговой льготы (в том числе с учетом суммы авансового платежа 
				// за период владения объектом налогообложения с 1 апреля по 30 июня 2020 года)"
				СтраницаРаздел3.П000030012003 = Выборка.СуммаОсвобожденияОтУплатыНалога + Выборка.СуммаУменьшенияСуммыНалога;
			ИначеЕсли ПрименяетсяОсвобождениеОтНалога И Выборка.СуммаОсвобожденияОтУплатыНалога > 0 Тогда
				// Абз. 1 и 3 п.3 Письма: "Если организация освобождается от [уплаты налога за 2-й квартал 2020 года] ..., то...
				// в первой части строки с кодом 110 ... указывается [код]..."
				Если ЭтоНекоммерческаяОрганизация Тогда
					// ... 2010502 (код льготы для социально-ориентированных НКО - на данный момент опубликован только реестр таких НКО)
					СтраницаРаздел3.П000030011003_КодЛьготы = "2010502";
				Иначе
					// ... 2010501 (если организация не является НКО)
					СтраницаРаздел3.П000030011003_КодЛьготы = "2010501";
				КонецЕсли;	
				// "...по строке с кодом 120 ... указывается исчисленная сумма авансового платежа по налогу 
				// за период владения объектом налогообложения с 1 апреля по 30 июня 2020 года"
				СтраницаРаздел3.П000030012003 = Выборка.СуммаОсвобожденияОтУплатыНалога;
			ИначеЕсли Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				СтраницаРаздел3.П000030011003_КодЛьготы = "2012500";
				СтраницаРаздел3.П000030012003 = Выборка.СуммаУменьшенияСуммыНалога;
			КонецЕсли;	
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030012003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030012003, "", ДополнительныеПараметры);
			// В строке 130 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
			// Сумма к уплате не уменьшена на сумму освобождения, поэтому учитываем ее здесь.
			// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
			СтраницаРаздел3.П000030013003 = Выборка.СуммаНалогаКУплате + Выборка.СуммаАвансовыхПлатежей - Выборка.СуммаОсвобожденияОтУплатыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
	Иначе
			СтраницаРаздел3.П000030011003 = Выборка.СуммаАвансовыхПлатежей;
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				СтраницаРаздел3.П000030012003_КодЛьготы = "2012500";
				СтраницаРаздел3.П000030013003 = Выборка.СуммаУменьшенияСуммыНалога;
				ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 4
	Если ИДРедакцииОтчета = "ФормаОтчета2020Кв4_1" Или ИДРедакцииОтчета = "ФормаОтчета2021Кв4" Тогда
		
		Раздел4 = Контейнер.Раздел4;
		ТаблицаРаздел4 = Раздел4.Строки[0].ДанныеМногострочныхЧастей.П00004М1;
		СтрокаРаздела4 = ТаблицаРаздел4.Строки[0].Данные;
				
		Для Каждого Показатель Из СтрокаРаздела4 Цикл
			СтрокаРаздела4[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока ТаблицаРаздел4.Строки.Количество()>1 Цикл
			ТаблицаРаздел4.Строки.Удалить(1);
		КонецЦикла;
		
		// Раздел 4 заполняем только в декларации по головной организации:
		// "Раздел 4 заполняется организацией один раз в одной из представляемых ею 
		// Деклараций за соответствующий налоговый период" (п. 8.1 Порядка заполнения)
		ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
		Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация);
		НалоговыйОрганГО = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ГоловнаяОрганизация, мДатаКонцаПериодаОтчета);
		
		Если НалоговыйОрган = НалоговыйОрганГО Тогда
			
			ДанныеПоДвижимомуИмуществу = РасчетИмущественныхНалогов.ДанныеПоСреднейСтоимостиДвижимогоИмущества(
				Организации,
				мДатаНачалаПериодаОтчета,
				мДатаКонцаПериодаОтчета);
				
			Если ТипЗнч(ДанныеПоДвижимомуИмуществу) = Тип("ТаблицаЗначений") Тогда
				
				ДанныеПоДвижимомуИмуществу.Индексы.Добавить("Регион");
				
				ОграничитьДанныеПоДвижимомуИмуществу(ДанныеПоДвижимомуИмуществу);
				
				ДанныеПоРегионам = ДанныеПоДвижимомуИмуществу.Скопировать();
				ДанныеПоРегионам.Свернуть("Регион", "СреднегодоваяСтоимость");
				ДанныеПоРегионам.Сортировать("Регион");
				
				ПерваяСтрока = Истина;
				
				Для Каждого ДанныеПоРегиону Из ДанныеПоРегионам Цикл
					
					Если Не ПерваяСтрока Тогда
						// Создаем дополнительную строку в разделе
						ДанныеНовойСтроки = Новый Структура;
						Для Каждого Показатель Из СтрокаРаздела4 Цикл
							ДанныеНовойСтроки.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтрокаРаздела4 = ТаблицаРаздел4.Строки.Добавить();
						НоваяСтрокаРаздела4.Данные = ДанныеНовойСтроки;
						НоваяСтрокаРаздела4.ДанныеМногострочныхЧастей = Новый Структура;
						
						СтрокаРаздела4 = ТаблицаРаздел4.Строки[ТаблицаРаздел4.Строки.Количество()-1].Данные;
					Иначе
						ПерваяСтрока = Ложь;
					КонецЕсли;	
					
					СтрокаРаздела4.П00004М100001 = Формат(ДанныеПоРегиону.Регион, "ЧЦ=2; ЧВН=; ЧФ=Ч");
					СтрокаРаздела4.П00004М100002 = ДанныеПоРегиону.СреднегодоваяСтоимость;
					
					НомерСтрокиРаздела4 = ТаблицаРаздел4.Строки.Количество();
					
					ДополнительныеПараметры = Новый Структура;
					// Каждая строка по региону может быть расшифрована до отдельных основных средств
					ДетальныеЗаписи = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
					// В расшифровочном отчете каждая строка ОС может быть далее расшифрована до исходных показателей по месяцам.
					// Для этого здесь готовим таблицу расшифровки по каждому отдельному региону - она используется на 2-м уровне расшифровки.
					ДетальныеЗаписиТаблицаРасшифровки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйРасшифровка();
					
					СтрокиПоРегиону = ДанныеПоДвижимомуИмуществу.НайтиСтроки(Новый Структура("Регион", ДанныеПоРегиону.Регион));
					
					Сч = 0;
					
					Для Каждого СтрокаОС Из СтрокиПоРегиону Цикл
						
						Сч = Сч + 1;
						
						ДетальнаяЗапись = ДетальныеЗаписи.Добавить();
						ДетальнаяЗапись.Организация = СтрокаОС.Организация;
						ДетальнаяЗапись.Аналитика = СтрокаОС.ПредставлениеОС; 
						ДетальнаяЗапись.Сумма = СтрокаОС.СреднегодоваяСтоимость;
						ДетальнаяЗапись.Ссылка = СтрокаОС.ОсновноеСредство;
						ДетальнаяЗапись.ИмяПоказателя = СтрШаблон("%1_%2_%3",
							"П00004М100002",
							НомерСтрокиРаздела4,
							Сч);

						// Заполним расшифровку расчета среднегодовой стоимости по каждому ОС (остаточная стоимость по месяцам) 	
						ДетальныеЗаписиПоОС = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
						
						Для Месяц = 0 По 12 Цикл
							
							НомерМесяца = Месяц + 1;
														
							Если НомерМесяца = 13 Тогда
								Суффикс = "3112";
								ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), 12, 31);
							Иначе
								Суффикс = "01" + Формат(НомерМесяца, "ЧЦ=2; ЧВН=; ЧФ=Ч");
								ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), НомерМесяца, 1);
							КонецЕсли;
							
							ДетальнаяЗаписьПоОС = ДетальныеЗаписиПоОС.Добавить();
							ДетальнаяЗаписьПоОС.Организация = СтрокаОС.Организация;
							ДетальнаяЗаписьПоОС.Аналитика = СтрШаблон(НСтр("ru = 'Остаточная стоимость на %1';
																			|en = 'Residual value as of %1'"), Формат(ПериодРасчета, "ДЛФ=DD"));
							ДетальнаяЗаписьПоОС.Сумма = СтрокаОС["ОстаточнаяСтоимостьНа" + Суффикс];
							
						КонецЦикла;	
						
						НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Расчет среднегодовой стоимости: %1';
																|en = 'Average annual cost calculation: %1'"), ДетальнаяЗапись.Аналитика);
						ДобавитьСтрокуРасшифровки(
							ДетальныеЗаписиТаблицаРасшифровки,
							ДетальнаяЗапись.ИмяПоказателя,
							НаименованиеПоказателя,
							"",
							"",
							ДетальнаяЗапись.Сумма,
							"",
							Новый Структура("ДетальныеЗаписи", ДетальныеЗаписиПоОС));
						
					КонецЦикла;	
					
					НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Среднегодовая стоимость объектов движимого имущества: Код региона %1';
															|en = 'Average annual cost of movable property: Region code %1'"), СтрокаРаздела4.П00004М100001);
					ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписи);
					ДополнительныеПараметры.Вставить("ДетальныеЗаписиТаблицаРасшифровки", ДетальныеЗаписиТаблицаРасшифровки);
					
					ДобавитьСтрокуРасшифровки(
						ТаблицаРасшифровки, 
						"П00004М100002_" + НомерСтрокиРаздела4,
						НаименованиеПоказателя,
						"", 
						"", 
						СтрокаРаздела4.П00004М100002, 
						"", 
						ДополнительныеПараметры);
						
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//  ИДРедакцииОтчета - Строка - идентификатор редакции отчета.
//
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2022(ПараметрыОтчета, Контейнер, ИДРедакцииОтчета) Экспорт

	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация              = ПараметрыОтчета.Организация;
	КодНалоговогоОргана      = ПараметрыОтчета.КодНалоговогоОргана;
	КПП                      = ПараметрыОтчета.КПП;
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтавкиНалогаПоОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|			&Период, 
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних";

	Результат = Запрос.ВыполнитьПакет();
	
	Если НЕ Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	// Заполнение раздела 1.
	
	// Здесь заполняем только данные по авансовым платежам.
	// Остальные суммы рассчитываются на стороне БРО.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияКв1", Дата(Год(мДатаКонцаПериодаОтчета), 3, 31));
	Запрос.УстановитьПараметр("ДатаОкончанияКв2", Дата(Год(мДатаКонцаПериодаОтчета), 6, 30));
	Запрос.УстановитьПараметр("ДатаОкончанияКв3", Дата(Год(мДатаКонцаПериодаОтчета), 9, 30));
	Запрос.УстановитьПараметр("НалоговыйОрган",   НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Авансы.КодПоОКТМО КАК КодПоОКТМО,
	|	Авансы.КБК КАК КБК,
	|	Авансы.КодВидаИмущества КАК КодВидаИмущества,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв1), 0) КАК СуммаАвансаКв1,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв2), 0) КАК СуммаАвансаКв2,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв3), 0) КАК СуммаАвансаКв3
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК КАК КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаАвансаКв1,
	|		0 КАК СуммаАвансаКв2,
	|		0 КАК СуммаАвансаКв3
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв1
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества,
	|		0,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв2
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества,
	|		0,
	|		0,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв3
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы) КАК Авансы
	|
	|СГРУППИРОВАТЬ ПО
	|	Авансы.КодПоОКТМО,
	|	Авансы.КБК,
	|	Авансы.КодВидаИмущества";
	
	НалоговыйОрганКПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НалоговыйОрган, "КПП");
	ЭтоИностраннаяОрганизация = РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(ПараметрыОтчета.Организация,
																										мДатаКонцаПериодаОтчета);
	
	Если ЭтоИностраннаяОрганизация Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоВидуНалоговойБазы", "");
	Иначе
		// Российские организации не декларируют имущество по кадастровой стоимости,
		// поэтому в авансах учитываем только то, что было уплачено исходя из среднегодовой стоимости.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуНалоговойБазы",
			"РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	// В разделе 1 строки 007(010)-040 повторяются столько раз, сколько есть различных сочетаний кода по ОКТМО и КБК
	ГруппыСтрокРаздела1 = Контейнер.Раздел1.Строки[0].ДанныеМногострочныхЧастей.П0000100.Строки;
	
	// Устанавливаем пустые значения показателей в 1-й группе строк 010-040...
	Для Каждого Показатель Из ГруппыСтрокРаздела1[0].Данные Цикл
		ГруппыСтрокРаздела1[0].Данные[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	// ... а остальные группы удаляем
	Пока ГруппыСтрокРаздела1.Количество()>1 Цикл
		ГруппыСтрокРаздела1.Удалить(1);
	КонецЦикла;
	
	Если НЕ Результат.Пустой() Тогда
		
		Авансы = Результат.Выгрузить();
		
		Для Каждого СтрокаАванса Из Авансы Цикл 
			КБК = "";
			КодВидаИмущества = СокрЛП(СтрокаАванса.КодВидаИмущества);
			
			// КБК для уплаты налога на имущество организаций
			//	182 1 06 02010 02 1000 110 - по имуществу, не входящему в Единую систему газоснабжения;
			//	182 1 06 02020 02 1000 110 - по имуществу, входящему в Единую систему газоснабжения.
			// (см. Приложение 2 к Приказу Минфина России от 08.06.2018 N 132н (ред. от 04.09.2019)
			Если КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				// Оставляем КБК - он получен из РС ПараметрыНачисленияНалогаНаИмущество 
				СтрокаАванса.КБК = СокрЛП(СтрокаАванса.КБК);
			ИначеЕсли КодВидаИмущества = "01" Тогда
				СтрокаАванса.КБК = "18210602020021000110";
			Иначе
				СтрокаАванса.КБК = "18210602010021000110";
			КонецЕсли;
			
			СтрокаАванса.КодПоОКТМО = СокрЛП(СтрокаАванса.КодПоОКТМО);
		КонецЦикла;
		
		ИтогиПоГруппам = Авансы.Скопировать();
		ИтогиПоГруппам.Свернуть("КодПоОКТМО, КБК", "СуммаАвансаКв1, СуммаАвансаКв2, СуммаАвансаКв3");
		
		Авансы.Индексы.Добавить("КодПоОКТМО, КБК");
		
		ПерваяГруппаСтрок = Истина;
		ОтборСтрок = Новый Структура("КодПоОКТМО, КБК");
		
		Для Каждого ИтогПоГруппе Из ИтогиПоГруппам Цикл 
			
			Если ПерваяГруппаСтрок Тогда
				ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1[0];
			Иначе
				// Создаем дополнительную группу строк 010-040 в разделе 1
				ДанныеГруппыСтрокРаздела1 = Новый Структура;
				Для Каждого Показатель Из ГруппаСтрокРаздела1.Данные Цикл
					ДанныеГруппыСтрокРаздела1.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1.Добавить();   
				ГруппаСтрокРаздела1.Данные = ДанныеГруппыСтрокРаздела1;
				ГруппаСтрокРаздела1.ДанныеМногострочныхЧастей = Новый Структура;
			КонецЕсли;
			
			ПерваяГруппаСтрок = Ложь;
			
			ГруппаСтрокРаздела1.Данные.П000010001003 = СокрЛП(ИтогПоГруппе.КодПоОКТМО);
			ГруппаСтрокРаздела1.Данные.П000010002003 = СокрЛП(ИтогПоГруппе.КБК);  
			ГруппаСтрокРаздела1.Данные.П000010002303 = ИтогПоГруппе.СуммаАвансаКв1;
			ГруппаСтрокРаздела1.Данные.П000010002503 = ИтогПоГруппе.СуммаАвансаКв2;
			ГруппаСтрокРаздела1.Данные.П000010002703 = ИтогПоГруппе.СуммаАвансаКв3;
			
			// Подготовим параметры отчета расшифровки - справки-расчета налога на имущество
			ДополнительныеПараметры = Новый Структура;
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, ИтогПоГруппе.КодПоОКТМО);
			
			// В данных расчета КБК может быть пустой, а КодВидаИмущества заполнен.
			// Поэтому отбираем записи в расшифровке по КодВидаИмущества.
			ЗаполнитьЗначенияСвойств(ОтборСтрок, ИтогПоГруппе);
			ИсходныеСтроки = Авансы.НайтиСтроки(ОтборСтрок);
			
			ОтборПоКодуВидаИмущества = Новый СписокЗначений;
			Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
				ОтборПоКодуВидаИмущества.Добавить(ИсходнаяСтрока.КодВидаИмущества);
			КонецЦикла;
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.ВСписке, ОтборПоКодуВидаИмущества);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
			
			НомерГруппы = ГруппыСтрокРаздела1.Количество();
			ОтчетныйГод = Год(мДатаКонцаПериодаОтчета);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002103_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002103, "", ДополнительныеПараметры);
			
			ДополнительныеПараметрыКв1 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв1.Вставить("КонецПериода", Дата(ОтчетныйГод, 3, 31));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002303_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002303, "", ДополнительныеПараметрыКв1);
			
			ДополнительныеПараметрыКв2 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв2.Вставить("КонецПериода", Дата(ОтчетныйГод, 6, 30));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002503_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002503, "", ДополнительныеПараметрыКв2);
			
			ДополнительныеПараметрыКв3 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв3.Вставить("КонецПериода", Дата(ОтчетныйГод, 9, 30));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002703_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002703, "", ДополнительныеПараметрыКв3);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// Заполнение раздела 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета", НачалоДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("НалоговыйОрган",      НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.ИФНС КАК ИФНС,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.КодЛьготы, """") КАК КодЛьготы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом, ЛОЖЬ)
	|			ТОГДА РасчетНалогаНаИмущество.ОснованиеЛьготы.ОснованиеМестнойЛьготы
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОснованиеРегиональнойЛьготы,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготы.ВидЛьготы = ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент) КАК УменьшениеСуммыНалогаНаПроцент,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
	|	РасчетНалогаНаИмущество.СуммаНалога КАК СуммаНалога,
	|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
	|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
	|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель
	|ПОМЕСТИТЬ ВТ_РасчетНалогаНаИмущество
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.Организация = &Организация
	|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета
	|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения) КАК КоличествоРазличныхЛьгот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения = """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьОблагаемоеИмущество
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.КодЛьготы КАК КодЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеРегиональнойЛьготы КАК ОснованиеРегиональнойЛьготы,
	|	РасчетНалогаНаИмущество.УменьшениеСуммыНалогаНаПроцент КАК УменьшениеСуммыНалогаНаПроцент,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалога) КАК СуммаНалога,
	|	СУММА(РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей) КАК СуммаАвансовыхПлатежей,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаКУплате) КАК СуммаНалогаКУплате,
	|	ВЫБОР
	|		КОГДА РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготируемаяСтоимость,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	СУММА(РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	Льготы.КоличествоРазличныхЛьгот КАК КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество КАК ЕстьОблагаемоеИмущество
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО РасчетНалогаНаИмущество.КодВидаИмущества = Льготы.КодВидаИмущества
	|			И РасчетНалогаНаИмущество.КБК = Льготы.КБК
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|			И РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|			И РасчетНалогаНаИмущество.КодПоОКТМО = Льготы.КодПоОКТМО
	|			И РасчетНалогаНаИмущество.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|			И РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки = Льготы.ПонижениеНалоговойСтавки
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.КодЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеРегиональнойЛьготы,
	|	РасчетНалогаНаИмущество.УменьшениеСуммыНалогаНаПроцент,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	Льготы.КоличествоРазличныхЛьгот,
	|	Льготы.ЕстьОблагаемоеИмущество
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(СуммаНалога),
	|	СУММА(СуммаАвансовыхПлатежей),
	|	СУММА(СуммаНалогаКУплате),
	|	МАКСИМУМ(ЛьготируемаяСтоимость),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	МАКСИМУМ(КоличествоРазличныхЛьгот),
	|	МАКСИМУМ(ЕстьОблагаемоеИмущество)
	|ПО
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ОснованиеРегиональнойЛьготы,
	|	ПонижениеНалоговойСтавки,
	|	УменьшениеСуммыНалогаНаПроцент,
	|	КодНалоговойЛьготыОсвобождениеОтНалогообложения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
	ПонижениеНалоговойСтавки = Ложь; // признак наличия льготы в виде снижения ставки налога
	УменьшениеСуммыНалогаНаПроцент = Ложь; // признак наличия льготы в виде снижения суммы налога на процент
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И НЕ ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "КодНалоговойЛьготыОсвобождениеОтНалогообложения" Тогда
			
			Если НЕ ПерваяСтраница Тогда
				
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				   И КодВидаИмущества = Выборка.КодВидаИмущества
				   И ?(КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				   И КодПоОКТМО = Выборка.КодПоОКТМО 
				   И ПонижениеНалоговойСтавки = Выборка.ПонижениеНалоговойСтавки
				   И УменьшениеСуммыНалогаНаПроцент = Выборка.УменьшениеСуммыНалогаНаПроцент
				   И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				   И Выборка.КоличествоРазличныхЛьгот = 2 
				   И Выборка.ЕстьОблагаемоеИмущество Тогда
				
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = КодВидаИмущества;
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100 = КБК;
			Если ЗначениеЗаполнено(Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
				СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
				СтраницаРаздел2.П000020016003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			Если Выборка.ПонижениеНалоговойСтавки Тогда
				СтраницаРаздел2.П000020020003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеНалоговойСтавки());
				СтраницаРаздел2.П000020016003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				ДоляСтоимостиЧислитель =   ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				ДоляСтоимостиЗнаменатель = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
				
				СтраницаРаздел2.П000020018003_Числ = ДоляСтоимостиЧислитель;
				СтраницаРаздел2.П000020018003_Знам = ДоляСтоимостиЗнаменатель;
			КонецЕсли;
			
			КодВидаИмущества                                = Выборка.КодВидаИмущества; 
			КодПоОКТМО                                      = Выборка.КодПоОКТМО;
			КодНалоговойЛьготыОсвобождениеОтНалогообложения = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
			ПонижениеНалоговойСтавки                        = Выборка.ПонижениеНалоговойСтавки;
			УменьшениеСуммыНалогаНаПроцент                  = Выборка.УменьшениеСуммыНалогаНаПроцент;
			НалоговаяСтавка                                 = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифорвкеОтборКодНалоговойЛьготы Тогда
				ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ЛьготируемаяСтоимость,Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			СтраницаРаздел2.П000020022003 = СтраницаРаздел2.П000020022003 + Выборка.СуммаНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
			
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				СтраницаРаздел2.П000020023003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеСуммыНалога());
				СтраницаРаздел2.П000020023003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
				СтраницаРаздел2.П000020024003 = Число(СтраницаРаздел2.П000020024003) + Выборка.СуммаУменьшенияСуммыНалога;
			КонецЕсли;	
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020024003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020024003, "", ДополнительныеПараметры);
			// В строке 260 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
			// Сумма к уплате не уменьшена на сумму освобождения, поэтому учитываем ее здесь.
			// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
			СтраницаРаздел2.П000020026003 = Число(СтраницаРаздел2.П000020026003) + Выборка.СуммаНалогаКУплате + Выборка.СуммаАвансовыхПлатежей;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020026003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020026003, "", ДополнительныеПараметры);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период <= &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.ОсновноеСредство.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.ОсновноеСредство.ШифрПоЕНАОФ, """") КАК ШифрПоЕНАОФ
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК Значение
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						НеСнятыеСУчета КАК СписокОС)) КАК МестонахождениеОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер КАК УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
	|	НеСнятыеСУчета.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	НеСнятыеСУчета.КодПоОКОФ КАК КодПоОКОФ,
	|	НеСнятыеСУчета.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|		ПО НеСнятыеСУчета.ОсновноеСредство = РасчетНалогаНаИмущество.ОсновноеСредство
	|			И (РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган)
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	РасчетНалогаНаИмущество.УсловныйНомер,
	|	РасчетНалогаНаИмущество.ВидНалоговойБазы,
	|	НеСнятыеСУчета.ИнвентарныйНомер,
	|	НеСнятыеСУчета.КодПоОКОФ,
	|	НеСнятыеСУчета.ШифрПоЕНАОФ";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	СтраницаРаздел21Здание = Раздел21.Строки[0].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
		СтраницаРаздел21Здание[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеОбъектов = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	
	ДанныеАдресов  = РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить();
	ДанныеАдресов.Индексы.Добавить("ОсновноеСредство");
	
	ДополнительныеПараметрыАдреса = Новый Структура;
	ДополнительныеПараметрыАдреса.Вставить("ВерсияАдреса", 3);
	
	Для каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
	
		Если НЕ ПерваяСтраница Тогда
			
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			СтруктураДанныхМногострочныхЧастей = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
				СтруктураДанныхМногострочныхЧастей.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура("П00021М1", ДеревоЗначенийРегОтчет());
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
			НоваяСтрокаРаздел21Здание = НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
			НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
			НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21Здание = Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, ДанныеОбъекта.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, ДанныеОбъекта.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, ДанныеОбъекта.ВидНалоговойБазы);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
		
		СтраницаРаздел21.П000210001000 = ДанныеОбъекта.КодПоОКТМО;
		
		КодВидаИмущества = ДанныеОбъекта.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = ДанныеОбъекта.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		АдресМестонахождения = ДанныеАдресов.Найти(ДанныеОбъекта.ОсновноеСредство, "ОсновноеСредство");
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.КадастровыйНомерПомещения;
		ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.КадастровыйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.КадастровыйНомер; 
			
		// Код 2 для обозначения условного номера объекта в строке 010 раздела 2.1 не отражается.
		
		ИначеЕсли АдресМестонахождения <> Неопределено И НЕ ПустаяСтрока(АдресМестонахождения.Значение) Тогда
			СтраницаРаздел21.П000210001001 = "3";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.ИнвентарныйНомер;
		Иначе
			СтраницаРаздел21.П000210001001 = "4";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.ИнвентарныйНомер;
		КонецЕсли;
		
		Если СтраницаРаздел21.П000210001001 = "3" Тогда
			
			Если АдресМестонахождения <> Неопределено И НЕ ПустаяСтрока(АдресМестонахождения.Значение) Тогда
				
				ПоляАдреса = ИнтерфейсыВзаимодействияБРО.АдресВФорматеФИАС(АдресМестонахождения.Значение, ДополнительныеПараметрыАдреса);
				
				СтраницаРаздел21.П00021УИД3000 = ПоляАдреса.ИдентификаторАдресногоОбъекта;
				СтраницаРаздел21.П000210003001 = ПоляАдреса.КодРегиона;
				СтраницаРаздел21.ПС00210003001 = ПоляАдреса.РегионСокращение;
				СтраницаРаздел21.П000210003002 = ПоляАдреса.МуниципальныйРайонВид;
				СтраницаРаздел21.ПС00210003002 = ПоляАдреса.МуниципальныйРайонСокращение;
				СтраницаРаздел21.П000210003003 = ПоляАдреса.МуниципальныйРайон;
				СтраницаРаздел21.П000210003004 = ПоляАдреса.ПоселениеВид;
				СтраницаРаздел21.ПС00210003004 = ПоляАдреса.ПоселениеСокращение;
				СтраницаРаздел21.П000210003005 = ПоляАдреса.Поселение;
				СтраницаРаздел21.П000210003006 = ПоляАдреса.НаселенныйПунктВид;
				СтраницаРаздел21.ПС00210003006 = ПоляАдреса.НаселенныйПунктСокращение;
				СтраницаРаздел21.П000210003007 = ПоляАдреса.НаселенныйПункт;
				СтраницаРаздел21.П000210003008 = ПоляАдреса.ТерриторияТип;
				СтраницаРаздел21.ПС00210003008 = ПоляАдреса.ТерриторияСокращение;
				СтраницаРаздел21.П000210003009 = ПоляАдреса.Территория;
				СтраницаРаздел21.П000210003010 = ПоляАдреса.УлицаТип;
				СтраницаРаздел21.ПС00210003010 = ПоляАдреса.УлицаСокращение;
				СтраницаРаздел21.П000210003011 = ПоляАдреса.Улица;
				СтраницаРаздел21.П000210003015 = ПоляАдреса.ПомещениеВЗданииТип;
				СтраницаРаздел21.П000210003016 = ПоляАдреса.ПомещениеВЗданииНомер;
				СтраницаРаздел21.П000210003017 = ПоляАдреса.ПомещениеВКвартиреТип;
				СтраницаРаздел21.П000210003018 = ПоляАдреса.ПомещениеВКвартиреНомер;
				
				ПервоеЗдание = Истина;
				Для Каждого Здание Из ПоляАдреса.Здания Цикл
					
					Если НЕ ПервоеЗдание Тогда
						СтруктураДанныхМногострочныхЧастей = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
							СтруктураДанныхМногострочныхЧастей.Вставить(
								Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтрокаРаздел21Здание = 
							Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
						НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
						НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
						
						СтраницаРаздел21Здание = НоваяСтрокаРаздел21Здание.Данные;
					Иначе
						ПервоеЗдание = Ложь;
					КонецЕсли;
					
					СтраницаРаздел21Здание.П00021М103013 = Здание.ЗданиеТип;
					СтраницаРаздел21Здание.П00021М103014 = Здание.ЗданиеНомер;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(ДанныеОбъекта.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(ДанныеОбъекта.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		СтраницаРаздел21.П000210005003 = ДанныеОбъекта.ОстаточнаяСтоимостьНа3112;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
		
	КонецЦикла;
	
	// Заполнение раздела 3
	
	// С отчета за 2022 год российские организации не заполняют Раздел 3 
	Если ЭтоИностраннаяОрганизация Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
		|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомерЗдания,
		|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
		|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
		|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
		|	РасчетНалогаНаИмущество.КодНалоговойЛьготыОсвобождениеОтНалогообложения КАК КодНалоговойЛьготыОсвобождениеОтНалогообложения,
		|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
		|	РасчетНалогаНаИмущество.КодЛьготы КАК КодЛьготы,
		|	РасчетНалогаНаИмущество.ОснованиеРегиональнойЛьготы КАК ОснованиеРегиональнойЛьготы,
		|	РасчетНалогаНаИмущество.УменьшениеСуммыНалогаНаПроцент КАК УменьшениеСуммыНалогаНаПроцент,
		|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
		|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
		|	РасчетНалогаНаИмущество.ВидНалоговойБазы КАК ВидНалоговойБазы,
		|	РасчетНалогаНаИмущество.СуммаНалога КАК СуммаНалога,
		|	РасчетНалогаНаИмущество.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
		|	РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
		|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
		|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
		|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
		|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
		|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель,
		|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества
		|ИЗ
		|	ВТ_РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)";
		
		Раздел3 = Контейнер.Раздел3;
		СтраницаРаздел3 = Раздел3.Строки[0].Данные;
		Для Каждого Показатель Из СтраницаРаздел3 Цикл
			СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел3.Строки.Количество()>1 Цикл
			Раздел3.Строки.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если НЕ ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел3 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
				НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
				НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
				
				СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
			
			ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
			
			ПолеКомпоновкиДанных_КодНалоговойЛьготы = Новый ПолеКомпоновкиДанных("КодНалоговойЛьготыОсвобождениеОтНалогообложения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодНалоговойЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения);
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ВидНалоговойБазы);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);

			СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
			СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел3.П000030001100 = "18210602010021000110";
			
			Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
				СтраницаРаздел3.П000030001401 = "2";
				СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
			Иначе
				СтраницаРаздел3.П000030001401 = "1";
				СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерЗдания;
			КонецЕсли;
			
			СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
			СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
			
			СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
			СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
			
			СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
			СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
			
			Если ЗначениеЗаполнено(Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
				СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодНалоговойЛьготыОсвобождениеОтНалогообложения;
				СтраницаРаздел3.П000030004003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			Если Выборка.ПонижениеНалоговойСтавки Тогда
				СтраницаРаздел3.П000030007003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеНалоговойСтавки());
				СтраницаРаздел3.П000030007003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			
			СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
			СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
			
			СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
			Если Выборка.КоличествоМесяцевВладения < 12 Тогда 
				СтраницаРаздел3.П000030009003_Числ = Выборка.КоличествоМесяцевВладения;
				СтраницаРаздел3.П000030009003_Знам = 12;
			КонецЕсли;
			
			Если Выборка.КоличествоМесяцевИспользования < Выборка.КоличествоМесяцевВладения Тогда 
				СтраницаРаздел3.П000030009503_Числ = Выборка.КоличествоМесяцевИспользования;
				СтраницаРаздел3.П000030009503_Знам = Выборка.КоличествоМесяцевВладения;
			КонецЕсли;
			
			СтраницаРаздел3.П000030010003 = Выборка.СуммаНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
			
			Если Выборка.СуммаУменьшенияСуммыНалога > 0 Тогда
				СтраницаРаздел3.П000030011003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы),
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеСуммыНалога());
				СтраницаРаздел3.П000030011003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
				СтраницаРаздел3.П000030012003 = Выборка.СуммаУменьшенияСуммыНалога;
			КонецЕсли;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030012003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030012003, "", ДополнительныеПараметры);
			// В строке 130 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
			// Сумма к уплате не уменьшена на сумму освобождения, поэтому учитываем ее здесь.
			// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
			СтраницаРаздел3.П000030013003 = Выборка.СуммаНалогаКУплате + Выборка.СуммаАвансовыхПлатежей;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение раздела 4
	
	Раздел4 = Контейнер.Раздел4;
	ТаблицаРаздел4 = Раздел4.Строки[0].ДанныеМногострочныхЧастей.П00004М1;
	СтрокаРаздела4 = ТаблицаРаздел4.Строки[0].Данные;
	
	Для Каждого Показатель Из СтрокаРаздела4 Цикл
		СтрокаРаздела4[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока ТаблицаРаздел4.Строки.Количество()>1 Цикл
		ТаблицаРаздел4.Строки.Удалить(1);
	КонецЦикла;
	
	// Раздел 4 заполняем только в декларации по головной организации:
	// "Раздел 4 заполняется организацией один раз в одной из представляемых ею 
	// Деклараций за соответствующий налоговый период" (п. 8.1 Порядка заполнения)
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация);
	НалоговыйОрганГО = Справочники.Организации.РегистрацияВНалоговомОргане(ГоловнаяОрганизация, мДатаКонцаПериодаОтчета);
	
	Если НалоговыйОрган = НалоговыйОрганГО Тогда
		
		ДанныеПоДвижимомуИмуществу = РасчетИмущественныхНалогов.ДанныеПоСреднейСтоимостиДвижимогоИмущества(
			Организации,
			мДатаНачалаПериодаОтчета,
			мДатаКонцаПериодаОтчета);
		
		Если ТипЗнч(ДанныеПоДвижимомуИмуществу) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеПоДвижимомуИмуществу.Индексы.Добавить("Регион");
			
			ОграничитьДанныеПоДвижимомуИмуществу(ДанныеПоДвижимомуИмуществу);
			
			ДанныеПоРегионам = ДанныеПоДвижимомуИмуществу.Скопировать();
			ДанныеПоРегионам.Свернуть("Регион", "СреднегодоваяСтоимость");
			ДанныеПоРегионам.Сортировать("Регион");
			
			ПерваяСтрока = Истина;
			
			Для Каждого ДанныеПоРегиону Из ДанныеПоРегионам Цикл
				
				Если НЕ ПерваяСтрока Тогда
					// Создаем дополнительную строку в разделе
					ДанныеНовойСтроки = Новый Структура;
					Для Каждого Показатель Из СтрокаРаздела4 Цикл
						ДанныеНовойСтроки.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтрокаРаздела4 = ТаблицаРаздел4.Строки.Добавить();
					НоваяСтрокаРаздела4.Данные = ДанныеНовойСтроки;
					НоваяСтрокаРаздела4.ДанныеМногострочныхЧастей = Новый Структура;
					
					СтрокаРаздела4 = ТаблицаРаздел4.Строки[ТаблицаРаздел4.Строки.Количество()-1].Данные;
				Иначе
					ПерваяСтрока = Ложь;
				КонецЕсли;
				
				СтрокаРаздела4.П00004М100001 = Формат(ДанныеПоРегиону.Регион, "ЧЦ=2; ЧВН=; ЧФ=Ч");
				СтрокаРаздела4.П00004М100002 = ДанныеПоРегиону.СреднегодоваяСтоимость;
				
				НомерСтрокиРаздела4 = ТаблицаРаздел4.Строки.Количество();
				
				ДополнительныеПараметры = Новый Структура;
				// Каждая строка по региону может быть расшифрована до отдельных основных средств
				ДетальныеЗаписи = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
				// В расшифровочном отчете каждая строка ОС может быть далее расшифрована до исходных показателей по месяцам.
				// Для этого здесь готовим таблицу расшифровки по каждому отдельному региону - она используется на 2-м уровне расшифровки.
				ДетальныеЗаписиТаблицаРасшифровки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйРасшифровка();
				
				СтрокиПоРегиону = ДанныеПоДвижимомуИмуществу.НайтиСтроки(Новый Структура("Регион", ДанныеПоРегиону.Регион));
				
				Сч = 0;
				
				Для Каждого СтрокаОС Из СтрокиПоРегиону Цикл
					
					Сч = Сч + 1;
					
					ДетальнаяЗапись = ДетальныеЗаписи.Добавить();
					ДетальнаяЗапись.Организация = СтрокаОС.Организация;
					ДетальнаяЗапись.Аналитика = СтрокаОС.ПредставлениеОС; 
					ДетальнаяЗапись.Сумма = СтрокаОС.СреднегодоваяСтоимость;
					ДетальнаяЗапись.Ссылка = СтрокаОС.ОсновноеСредство;
					ДетальнаяЗапись.ИмяПоказателя = СтрШаблон("%1_%2_%3",
						"П00004М100002",
						НомерСтрокиРаздела4,
						Сч);

					// Заполним расшифровку расчета среднегодовой стоимости по каждому ОС (остаточная стоимость по месяцам) 	
					ДетальныеЗаписиПоОС = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
					
					Для Месяц = 0 По 12 Цикл
						
						НомерМесяца = Месяц + 1;
						
						Если НомерМесяца = 13 Тогда
							Суффикс = "3112";
							ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), 12, 31);
						Иначе
							Суффикс = "01" + Формат(НомерМесяца, "ЧЦ=2; ЧВН=; ЧФ=Ч");
							ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), НомерМесяца, 1);
						КонецЕсли;
						
						ИмяКолонки = "ОстаточнаяСтоимостьНа" + Суффикс;
						
						ДетальнаяЗаписьПоОС = ДетальныеЗаписиПоОС.Добавить();
						ДетальнаяЗаписьПоОС.Организация = СтрокаОС.Организация;
						ДетальнаяЗаписьПоОС.Аналитика = СтрШаблон(НСтр("ru = 'Остаточная стоимость на %1';
																		|en = 'Residual value as of %1'"), Формат(ПериодРасчета, "ДЛФ=DD"));
						ДетальнаяЗаписьПоОС.Сумма = СтрокаОС["ОстаточнаяСтоимостьНа" + Суффикс];
						
					КонецЦикла;
					
					НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Расчет среднегодовой стоимости: %1';
															|en = 'Average annual cost calculation: %1'"), ДетальнаяЗапись.Аналитика);
					ДобавитьСтрокуРасшифровки(
						ДетальныеЗаписиТаблицаРасшифровки,
						ДетальнаяЗапись.ИмяПоказателя,
						НаименованиеПоказателя,
						"",
						"",
						ДетальнаяЗапись.Сумма,
						"",
						Новый Структура("ДетальныеЗаписи", ДетальныеЗаписиПоОС));
					
				КонецЦикла;
				
				НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Среднегодовая стоимость объектов движимого имущества: Код региона %1';
														|en = 'Average annual cost of movable property: Region code %1'"), СтрокаРаздела4.П00004М100001);
				ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписи);
				ДополнительныеПараметры.Вставить("ДетальныеЗаписиТаблицаРасшифровки", ДетальныеЗаписиТаблицаРасшифровки);
				
				ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки, 
					"П00004М100002_" + НомерСтрокиРаздела4,
					НаименованиеПоказателя,
					"", 
					"", 
					СтрокаРаздела4.П00004М100002, 
					"", 
					ДополнительныеПараметры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьОтчетИмуществоФормаОтчета2022_НовыйРасчет(ПараметрыОтчета, Контейнер, ИДРедакцииОтчета) Экспорт
	
	Перем ТаблицаРасшифровки; // Таблица для сбора сведений о расшифровке
	
	Организация              = ПараметрыОтчета.Организация;
	КодНалоговогоОргана      = ПараметрыОтчета.КодНалоговогоОргана;
	КПП                      = ПараметрыОтчета.КПП;
	мДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	мДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(Организация, КодНалоговогоОргана, КПП);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		ЕСТЬNULL(СтавкиНалогаНаИмуществоСрезПоследних.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2, ЛОЖЬ) КАК ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
	|	ИЗ
	|		РегистрСведений.СтавкиНалогаНаИмущество.СрезПоследних(&Период, Организация = &Организация) КАК СтавкиНалогаНаИмуществоСрезПоследних
	|	;
	|	
	|	////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		СтавкиНалогаПоОССрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|	ИЗ
	|		РегистрСведений.ПараметрыНачисленияНалогаНаИмущество.СрезПоследних(
	|				&Период, 
	|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|					И Организация = &Организация
	|					И НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазапоНалогуНаИмущество.КадастроваяСтоимость)) КАК СтавкиНалогаПоОССрезПоследних";

	Результат = Запрос.ВыполнитьПакет();
	
	Если Не Результат[0].Пустой() Тогда
		ДопПараметрыОтчета = Результат[0].Выгрузить()[0];
		ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2 = ДопПараметрыОтчета.ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2;
	ИначеЕсли Результат[1].Пустой() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не обнаружена ставка налога на имущество на %1 для %2
			|%3';
			|en = 'Property tax rate is not found on %1 for %2
			|%3'"), 
			ПредставлениеПериода(НачалоДня(мДатаНачалаПериодаОтчета), КонецДня(мДатаКонцаПериодаОтчета),"ФП = Истина")
			,Организация, ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()));
			
		ПараметрыОтчета.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.УникальныйИдентификаторФормы);
		
		Возврат;
		
	КонецЕсли;
	
	// ЗА 2023 ГОД и ДАЛЕЕ
	// Заполнение исключительно по данным нового расчета налога.

	ДатаОкончанияКв1 = Дата(Год(мДатаКонцаПериодаОтчета), 3, 31);
	ДатаОкончанияКв2 = Дата(Год(мДатаКонцаПериодаОтчета), 6, 30);
	ДатаОкончанияКв3 = Дата(Год(мДатаКонцаПериодаОтчета), 9, 30);
	
	ИспользоватьПрежнийРасчетНалогаКв1 = РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
		ПараметрыОтчета.Организация,
		ДатаОкончанияКв1);

	ИспользоватьПрежнийРасчетНалогаКв2 = РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
		ПараметрыОтчета.Организация,
		ДатаОкончанияКв2);
		
	ИспользоватьПрежнийРасчетНалогаКв3 = РасчетИмущественныхНалоговПереопределяемый.ИспользоватьПрежнийРасчетНалогаНаИмуществоВПереходныйПериод(
		ПараметрыОтчета.Организация,
		ДатаОкончанияКв3);
	
	// Заполнение раздела 1.
	
	// Здесь заполняем только данные по авансовым платежам.
	// Остальные суммы рассчитываются на стороне БРО.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияКв1", ДатаОкончанияКв1);
	Запрос.УстановитьПараметр("ДатаОкончанияКв2", ДатаОкончанияКв2);
	Запрос.УстановитьПараметр("ДатаОкончанияКв3", ДатаОкончанияКв3);
	Запрос.УстановитьПараметр("ИспользоватьПрежнийРасчетНалогаКв1", ИспользоватьПрежнийРасчетНалогаКв1);
	Запрос.УстановитьПараметр("ИспользоватьПрежнийРасчетНалогаКв2", ИспользоватьПрежнийРасчетНалогаКв2);
	Запрос.УстановитьПараметр("ИспользоватьПрежнийРасчетНалогаКв3", ИспользоватьПрежнийРасчетНалогаКв3);
	Запрос.УстановитьПараметр("НалоговыйОрган",   НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Авансы.КодПоОКТМО КАК КодПоОКТМО,
	|	Авансы.КБК КАК КБК,
	|	Авансы.КодВидаИмущества КАК КодВидаИмущества,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв1), 0) КАК СуммаАвансаКв1,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв2), 0) КАК СуммаАвансаКв2,
	|	ЕСТЬNULL(СУММА(Авансы.СуммаАвансаКв3), 0) КАК СуммаАвансаКв3
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК КАК КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате КАК СуммаАвансаКв1,
	|		0 КАК СуммаАвансаКв2,
	|		0 КАК СуммаАвансаКв3
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		&ИспользоватьПрежнийРасчетНалогаКв1
	|		И РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв1
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодПоОКТМО,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КБК,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодВидаИмущества,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв1
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета = &ДатаОкончанияКв1
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС = &НалоговыйОрган
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодПоОКТМО,
	|		"""",
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодВидаИмущества,
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате,
	|		0,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв1
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета = &ДатаОкончанияКв1
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС = &НалоговыйОрган
	|		И &УсловиеИностраннаяОрганизация
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества,
	|		0,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		&ИспользоватьПрежнийРасчетНалогаКв2
	|		И РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв2
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодПоОКТМО,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КБК,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодВидаИмущества,
	|		0,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв2
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета = &ДатаОкончанияКв2
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС = &НалоговыйОрган
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодПоОКТМО,
	|		"""",
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодВидаИмущества,
	|		0,
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв2
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета = &ДатаОкончанияКв2
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС = &НалоговыйОрган
	|		И &УсловиеИностраннаяОрганизация
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмущество.КодПоОКТМО,
	|		РасчетНалогаНаИмущество.КБК,
	|		РасчетНалогаНаИмущество.КодВидаИмущества,
	|		0,
	|		0,
	|		РасчетНалогаНаИмущество.СуммаНалогаКУплате
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмущество КАК РасчетНалогаНаИмущество
	|	ГДЕ
	|		&ИспользоватьПрежнийРасчетНалогаКв3
	|		И РасчетНалогаНаИмущество.Организация = &Организация
	|		И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияКв3
	|		И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган
	|		И &УсловиеПоВидуНалоговойБазы
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодПоОКТМО,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КБК,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.КодВидаИмущества,
	|		0,
	|		0,
	|		РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.СуммаНалогаКУплате
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетНалогаНаИмуществоПоСреднегодовойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв3
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ПериодРасчета = &ДатаОкончанияКв3
	|		И РасчетНалогаНаИмуществоПоСреднегодовойСтоимости.ИФНС = &НалоговыйОрган
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодПоОКТМО,
	|		"""",
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.КодВидаИмущества,
	|		0,
	|		0,
	|		РасчетНалогаНаИмуществоПоКадастровойСтоимости.СуммаНалогаКУплате
	|	ИЗ
	|		РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмуществоПоКадастровойСтоимости
	|	ГДЕ
	|		НЕ &ИспользоватьПрежнийРасчетНалогаКв3
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.Организация = &Организация
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ПериодРасчета = &ДатаОкончанияКв3
	|		И РасчетНалогаНаИмуществоПоКадастровойСтоимости.ИФНС = &НалоговыйОрган
	|		И &УсловиеИностраннаяОрганизация) КАК Авансы
	|СГРУППИРОВАТЬ ПО
	|	Авансы.КодПоОКТМО,
	|	Авансы.КБК,
	|	Авансы.КодВидаИмущества";
	
	ЭтоИностраннаяОрганизация = РасчетИмущественныхНалоговПереопределяемый.ЭтоИностраннаяОрганизация(Организация, мДатаКонцаПериодаОтчета);
	
	Если ЭтоИностраннаяОрганизация Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоВидуНалоговойБазы", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеИностраннаяОрганизация", "");
	Иначе
		// Российские организации не декларируют имущество по кадастровой стоимости,
		// поэтому в авансах учитываем только то, что было уплачено исходя из среднегодовой стоимости.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуНалоговойБазы",
			"РасчетНалогаНаИмущество.ВидНалоговойБазы = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИностраннаяОрганизация", "ЛОЖЬ");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	// В разделе 1 строки 007(010)-040 повторяются столько раз, сколько есть различных сочетаний кода по ОКТМО и КБК
	ГруппыСтрокРаздела1 = Контейнер.Раздел1.Строки[0].ДанныеМногострочныхЧастей.П0000100.Строки;
	
	// Устанавливаем пустые значения показателей в 1-й группе строк 010-040...
	Для Каждого Показатель Из ГруппыСтрокРаздела1[0].Данные Цикл
		ГруппыСтрокРаздела1[0].Данные[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	// ... а остальные группы удаляем
	Пока ГруппыСтрокРаздела1.Количество()>1 Цикл
		ГруппыСтрокРаздела1.Удалить(1);
	КонецЦикла;
	
	Если Не Результат.Пустой() Тогда
		
		Авансы = Результат.Выгрузить();
		
		Для Каждого СтрокаАванса Из Авансы Цикл 
			КБК = "";
			КодВидаИмущества = СокрЛП(СтрокаАванса.КодВидаИмущества);
			
			// КБК для уплаты налога на имущество организаций
			//	182 1 06 02010 02 1000 110 - по имуществу, не входящему в Единую систему газоснабжения;
			//	182 1 06 02020 02 1000 110 - по имуществу, входящему в Единую систему газоснабжения.
			// (см. Приложение 2 к Приказу Минфина России от 08.06.2018 N 132н (ред. от 04.09.2019)
			Если КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
				// Оставляем КБК - он получен из РС СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам 
				СтрокаАванса.КБК = СокрЛП(СтрокаАванса.КБК);
			ИначеЕсли КодВидаИмущества = "01" Тогда
				СтрокаАванса.КБК = "18210602020021000110";
			Иначе
				СтрокаАванса.КБК = "18210602010021000110";
			КонецЕсли;
			
			СтрокаАванса.КодПоОКТМО = СокрЛП(СтрокаАванса.КодПоОКТМО);
		КонецЦикла;
		
		ИтогиПоГруппам = Авансы.Скопировать();
		ИтогиПоГруппам.Свернуть("КодПоОКТМО, КБК", "СуммаАвансаКв1, СуммаАвансаКв2, СуммаАвансаКв3");
		
		Авансы.Индексы.Добавить("КодПоОКТМО, КБК");
		
		ПерваяГруппаСтрок = Истина;
		ОтборСтрок = Новый Структура("КодПоОКТМО, КБК");
		
		Для Каждого ИтогПоГруппе Из ИтогиПоГруппам Цикл 
			
			Если ПерваяГруппаСтрок Тогда
				ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1[0];
			Иначе
				// Создаем дополнительную группу строк 010-040 в разделе 1
				ДанныеГруппыСтрокРаздела1 = Новый Структура;
				Для Каждого Показатель Из ГруппаСтрокРаздела1.Данные Цикл
					ДанныеГруппыСтрокРаздела1.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				ГруппаСтрокРаздела1 = ГруппыСтрокРаздела1.Добавить();   
				ГруппаСтрокРаздела1.Данные = ДанныеГруппыСтрокРаздела1;
				ГруппаСтрокРаздела1.ДанныеМногострочныхЧастей = Новый Структура;
			КонецЕсли;
			
			ПерваяГруппаСтрок = Ложь;
			
			ГруппаСтрокРаздела1.Данные.П000010001003 = СокрЛП(ИтогПоГруппе.КодПоОКТМО);
			ГруппаСтрокРаздела1.Данные.П000010002003 = СокрЛП(ИтогПоГруппе.КБК);  
			ГруппаСтрокРаздела1.Данные.П000010002303 = ИтогПоГруппе.СуммаАвансаКв1;
			ГруппаСтрокРаздела1.Данные.П000010002503 = ИтогПоГруппе.СуммаАвансаКв2;
			ГруппаСтрокРаздела1.Данные.П000010002703 = ИтогПоГруппе.СуммаАвансаКв3;
			
			// Подготовим параметры отчета расшифровки - справки-расчета налога на имущество
			ДополнительныеПараметры = Новый Структура;
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, ИтогПоГруппе.КодПоОКТМО);
			
			// В данных расчета КБК может быть пустой, а КодВидаИмущества заполнен.
			// Поэтому отбираем записи в расшифровке по КодВидаИмущества.
			ЗаполнитьЗначенияСвойств(ОтборСтрок, ИтогПоГруппе);
			ИсходныеСтроки = Авансы.НайтиСтроки(ОтборСтрок);
			
			ОтборПоКодуВидаИмущества = Новый СписокЗначений;
			Для каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
				ОтборПоКодуВидаИмущества.Добавить(ИсходнаяСтрока.КодВидаИмущества);
			КонецЦикла;
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.ВСписке, ОтборПоКодуВидаИмущества);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
			
			НомерГруппы = ГруппыСтрокРаздела1.Количество();
			ОтчетныйГод = Год(мДатаКонцаПериодаОтчета);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002103_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002103, "", ДополнительныеПараметры);
			
			ДополнительныеПараметрыКв1 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв1.Вставить("КонецПериода", Дата(ОтчетныйГод, 3, 31));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002303_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002303, "", ДополнительныеПараметрыКв1);
			
			ДополнительныеПараметрыКв2 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв2.Вставить("КонецПериода", Дата(ОтчетныйГод, 6, 30));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002503_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002503, "", ДополнительныеПараметрыКв2);
			
			ДополнительныеПараметрыКв3 = ОбщегоНазначения.СкопироватьРекурсивно(ДополнительныеПараметры);
			ДополнительныеПараметрыКв3.Вставить("КонецПериода", Дата(ОтчетныйГод, 9, 30));
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000010002703_" + НомерГруппы, "", "", "", ГруппаСтрокРаздела1.Данные.П000010002703, "", ДополнительныеПараметрыКв3);
			
		КонецЦикла; 
		
	КонецЕсли;
	
	// Заполнение раздела 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Раздел2 = Контейнер.Раздел2;
	
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияОтчета", НачалоДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("НалоговыйОрган",      НалоговыйОрган);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетПоСреднегодовойСтоимости.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетПоСреднегодовойСтоимости.ИФНС КАК ИФНС,
	|	РасчетПоСреднегодовойСтоимости.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетПоСреднегодовойСтоимости.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетПоСреднегодовойСтоимости.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетПоСреднегодовойСтоимости.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ЕСТЬNULL(РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.КодЛьготы, """") КАК КодЛьготы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом, ЛОЖЬ)
	|			ТОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ОснованиеМестнойЛьготы
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ОснованиеРегиональнойЛьготы,
	|	ВЫБОР
	|		КОГДА
	|			РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы = ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.Освобождение)
	|			ТОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	КОНЕЦ КАК ОснованиеЛьготыОсвобождениеОтНалогообложения,
	|	ЕСТЬNULL(РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы,
	|		ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.Освобождение) КАК
	|		ОсвобождениеОтНалогообложения,
	|	ВЫБОР
	|		КОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной))
	|			ТОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	КОНЕЦ КАК ОснованиеЛьготыПонижениеНалоговойСтавки,
	|	ЕСТЬNULL(РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы,
	|		ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)) В
	|	(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной)) КАК ПонижениеНалоговойСтавки,
	|	ВЫБОР
	|		КОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы В
	|		(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент),
	|			ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму))
	|			ТОГДА РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	КОНЕЦ КАК ОснованиеЛьготыУменьшениеСуммыНалога,
	|	ЕСТЬNULL(РасчетПоСреднегодовойСтоимости.ОснованиеЛьготы.ВидЛьготы,
	|		ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)) В
	|	(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму)) КАК УменьшениеСуммыНалога,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0101 КАК ОстаточнаяСтоимостьНа0101,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0102 КАК ОстаточнаяСтоимостьНа0102,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0103 КАК ОстаточнаяСтоимостьНа0103,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0104 КАК ОстаточнаяСтоимостьНа0104,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0105 КАК ОстаточнаяСтоимостьНа0105,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0106 КАК ОстаточнаяСтоимостьНа0106,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0107 КАК ОстаточнаяСтоимостьНа0107,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0108 КАК ОстаточнаяСтоимостьНа0108,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0109 КАК ОстаточнаяСтоимостьНа0109,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0110 КАК ОстаточнаяСтоимостьНа0110,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0111 КАК ОстаточнаяСтоимостьНа0111,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа0112 КАК ОстаточнаяСтоимостьНа0112,
	|	РасчетПоСреднегодовойСтоимости.ОстаточнаяСтоимостьНа3112 КАК ОстаточнаяСтоимостьНа3112,
	|	РасчетПоСреднегодовойСтоимости.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетПоСреднегодовойСтоимости.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	РасчетПоСреднегодовойСтоимости.СуммаНалогаСУчетомНеоблагаемойБазы КАК СуммаНалогаСУчетомНеоблагаемойБазы,
	|	РасчетПоСреднегодовойСтоимости.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
	|	РасчетПоСреднегодовойСтоимости.СуммаНалога КАК СуммаНалога,
	|	РасчетПоСреднегодовойСтоимости.СуммаАвансовыхПлатежей КАК СуммаАвансовыхПлатежей,
	|	РасчетПоСреднегодовойСтоимости.СуммаНалогаКУплате КАК СуммаНалогаКУплате,
	|	РасчетПоСреднегодовойСтоимости.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетПоСреднегодовойСтоимости.КБК КАК КБК
	|ПОМЕСТИТЬ ВТ_РасчетПоСреднегодовойСтоимости
	|ИЗ
	|	РегистрСведений.РасчетНалогаНаИмуществоПоСреднегодовойСтоимости КАК РасчетПоСреднегодовойСтоимости
	|ГДЕ
	|	РасчетПоСреднегодовойСтоимости.Организация = &Организация
	|	И РасчетПоСреднегодовойСтоимости.ПериодРасчета = &ДатаОкончанияОтчета
	|	И РасчетПоСреднегодовойСтоимости.ИФНС = &НалоговыйОрган
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.ОснованиеЛьготыОсвобождениеОтНалогообложения) КАК
	|		КоличествоЛьготОсвобождениеОтНалогообложения,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.ОснованиеЛьготыПонижениеНалоговойСтавки) КАК
	|		КоличествоЛьготПонижениеНалоговойСтавки,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасчетНалогаНаИмущество.ОснованиеЛьготыУменьшениеСуммыНалога) КАК
	|		КоличествоЛьготУменьшениеСуммыНалога
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	ВТ_РасчетПоСреднегодовойСтоимости КАК РасчетНалогаНаИмущество
	|ГДЕ
	|	РасчетНалогаНаИмущество.ОснованиеЛьготы <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыОсвобождениеОтНалогообложения КАК
	|		ОснованиеЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыПонижениеНалоговойСтавки КАК ОснованиеЛьготыПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыУменьшениеСуммыНалога КАК ОснованиеЛьготыУменьшениеСуммыНалога,
	|	РасчетНалогаНаИмущество.КодЛьготы КАК КодЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеРегиональнойЛьготы КАК ОснованиеРегиональнойЛьготы,
	|	РасчетНалогаНаИмущество.ОсвобождениеОтНалогообложения КАК ОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки КАК ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.УменьшениеСуммыНалога КАК УменьшениеСуммыНалога,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0101) КАК ОстаточнаяСтоимостьНа0101,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0102) КАК ОстаточнаяСтоимостьНа0102,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0103) КАК ОстаточнаяСтоимостьНа0103,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0104) КАК ОстаточнаяСтоимостьНа0104,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0105) КАК ОстаточнаяСтоимостьНа0105,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0106) КАК ОстаточнаяСтоимостьНа0106,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0107) КАК ОстаточнаяСтоимостьНа0107,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0108) КАК ОстаточнаяСтоимостьНа0108,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0109) КАК ОстаточнаяСтоимостьНа0109,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0110) КАК ОстаточнаяСтоимостьНа0110,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0111) КАК ОстаточнаяСтоимостьНа0111,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа0112) КАК ОстаточнаяСтоимостьНа0112,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалогаСУчетомНеоблагаемойБазы) КАК СуммаНалогаСУчетомНеоблагаемойБазы,
	|	СУММА(РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога) КАК СуммаУменьшенияСуммыНалога,
	|	СУММА(РасчетНалогаНаИмущество.СуммаНалога) КАК СуммаНалога,
	|	ЕСТЬNULL(Льготы.КоличествоЛьготОсвобождениеОтНалогообложения, 0) КАК КоличествоЛьготОсвобождениеОтНалогообложения,
	|	ЕСТЬNULL(Льготы.КоличествоЛьготПонижениеНалоговойСтавки, 0) КАК КоличествоЛьготПонижениеНалоговойСтавки,
	|	ЕСТЬNULL(Льготы.КоличествоЛьготУменьшениеСуммыНалога, 0) КАК КоличествоЛьготУменьшениеСуммыНалога
	|ИЗ
	|	ВТ_РасчетПоСреднегодовойСтоимости КАК РасчетНалогаНаИмущество
	|		ЛЕВОЕ СОЕДИНЕНИЕ Льготы КАК Льготы
	|		ПО РасчетНалогаНаИмущество.КодВидаИмущества = Льготы.КодВидаИмущества
	|		И РасчетНалогаНаИмущество.КБК = Льготы.КБК
	|		И РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель = Льготы.ДоляСтоимостиЧислитель
	|		И РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель = Льготы.ДоляСтоимостиЗнаменатель
	|		И РасчетНалогаНаИмущество.КодПоОКТМО = Льготы.КодПоОКТМО
	|		И РасчетНалогаНаИмущество.НалоговаяСтавка = Льготы.НалоговаяСтавка
	|СГРУППИРОВАТЬ ПО
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель,
	|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.НалоговаяСтавка,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.ОснованиеЛьготыУменьшениеСуммыНалога,
	|	РасчетНалогаНаИмущество.КодЛьготы,
	|	РасчетНалогаНаИмущество.ОснованиеРегиональнойЛьготы,
	|	РасчетНалогаНаИмущество.ОсвобождениеОтНалогообложения,
	|	РасчетНалогаНаИмущество.ПонижениеНалоговойСтавки,
	|	РасчетНалогаНаИмущество.УменьшениеСуммыНалога,
	|	ЕСТЬNULL(Льготы.КоличествоЛьготОсвобождениеОтНалогообложения, 0),
	|	ЕСТЬNULL(Льготы.КоличествоЛьготПонижениеНалоговойСтавки, 0),
	|	ЕСТЬNULL(Льготы.КоличествоЛьготУменьшениеСуммыНалога, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодВидаИмущества,
	|	КодПоОКТМО,
	|	КодЛьготы
	|ИТОГИ
	|	СУММА(ОстаточнаяСтоимостьНа0101),
	|	СУММА(ОстаточнаяСтоимостьНа0102),
	|	СУММА(ОстаточнаяСтоимостьНа0103),
	|	СУММА(ОстаточнаяСтоимостьНа0104),
	|	СУММА(ОстаточнаяСтоимостьНа0105),
	|	СУММА(ОстаточнаяСтоимостьНа0106),
	|	СУММА(ОстаточнаяСтоимостьНа0107),
	|	СУММА(ОстаточнаяСтоимостьНа0108),
	|	СУММА(ОстаточнаяСтоимостьНа0109),
	|	СУММА(ОстаточнаяСтоимостьНа0110),
	|	СУММА(ОстаточнаяСтоимостьНа0111),
	|	СУММА(ОстаточнаяСтоимостьНа0112),
	|	СУММА(ОстаточнаяСтоимостьНа3112),
	|	СУММА(СуммаНалогаСУчетомНеоблагаемойБазы),
	|	СУММА(СуммаУменьшенияСуммыНалога),
	|	СУММА(СуммаНалога),
	|	МАКСИМУМ(КодЛьготы),
	|	МАКСИМУМ(ОснованиеРегиональнойЛьготы),
	|	МАКСИМУМ(КоличествоЛьготОсвобождениеОтНалогообложения),
	|	МАКСИМУМ(КоличествоЛьготПонижениеНалоговойСтавки),
	|	МАКСИМУМ(КоличествоЛьготУменьшениеСуммыНалога)
	|ПО
	|	КодВидаИмущества,
	|	КБК,
	|	ДоляСтоимостиЧислитель,
	|	ДоляСтоимостиЗнаменатель,
	|	КодПоОКТМО,
	|	НалоговаяСтавка,
	|	ОснованиеЛьготы,
	|	ОснованиеЛьготыОсвобождениеОтНалогообложения,
	|	ОснованиеЛьготыПонижениеНалоговойСтавки,
	|	ОснованиеЛьготыУменьшениеСуммыНалога";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтраницаРаздел2 = Раздел2.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел2 Цикл
		СтраницаРаздел2[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел2.Строки.Количество()>1 Цикл
		Раздел2.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	ИспользоватьВРасшифровкеОтборОснованиеЛьготы = Истина;
	
	КодВидаИмущества = "";
	КБК = "";
	КодПоОКТМО = "";
	ДоляСтоимостиЧислитель = 0;
	ДоляСтоимостиЗнаменатель = 0;
	НалоговаяСтавка = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0101)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0102)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0103)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0104)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0105)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0106)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0107)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0108)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0109)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0110)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0111)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа0112)
		   И Не ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНа3112) Тогда
		
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Группировка() = "ОснованиеЛьготыУменьшениеСуммыНалога" Тогда // нижний уровень группировки перед детальными записями
			
			Если Не ПерваяСтраница Тогда
				
				// Данные в разделе 2 группируем по набору несуммовых показателей расчета. Суммовые показатели при этом суммируются.
				// Если применяется не более 1 льготы каждого вида, то при включении соответствующей настройки все данные
				// умещаются на 1 листе раздела 2.
				Если ПриНаличии1ЛьготыЗаполнять1ЛистРаздела2
				 И КодВидаИмущества = Выборка.КодВидаИмущества
				 И ?(КодВидаИмущества = "06" Или КодВидаИмущества = "08" Или КодВидаИмущества = "10", КБК = Выборка.КБК, Истина)
				 И КодПоОКТМО = Выборка.КодПоОКТМО
				 И ДоляСтоимостиЧислитель = Выборка.ДоляСтоимостиЧислитель И ДоляСтоимостиЗнаменатель = Выборка.ДоляСтоимостиЗнаменатель 
				 И НалоговаяСтавка = Выборка.НалоговаяСтавка 
				 И Выборка.КоличествоЛьготОсвобождениеОтНалогообложения < 2
				 И Выборка.КоличествоЛьготПонижениеНалоговойСтавки < 2
				 И Выборка.КоличествоЛьготУменьшениеСуммыНалога < 2 Тогда
				
					ИспользоватьВРасшифровкеОтборОснованиеЛьготы = Ложь;
				
				Иначе
					
					ИспользоватьВРасшифровкеОтборОснованиеЛьготы = Истина;
					
					// Создаем дополнительную страницу в декларации
					СтруктураНовойТаблицы = Новый Структура();
					Для Каждого Показатель Из СтраницаРаздел2 Цикл
						СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтраницаРаздела2 = Раздел2.Строки.Добавить();
					
					НоваяСтраницаРаздела2.Данные = СтруктураНовойТаблицы;
					НоваяСтраницаРаздела2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЕсли;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			СтраницаРаздел2 = Раздел2.Строки[Раздел2.Строки.Количество()-1].Данные;
			
			КодВидаИмущества = Выборка.КодВидаИмущества;
			Если КодВидаИмущества = "06" Или КодВидаИмущества = "08" Или КодВидаИмущества = "10" Тогда
				КБК = Выборка.КБК;
			ИначеЕсли КодВидаИмущества = "01" Тогда
				КБК = "18210602020021000110";
			Иначе
				КБК = "18210602010021000110";
			КонецЕсли;
			
			СтраницаРаздел2.П000020000101 = КодВидаИмущества;
			СтраницаРаздел2.П000020001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел2.П000020001100 = КБК;
			Если ЗначениеЗаполнено(Выборка.ОснованиеЛьготыОсвобождениеОтНалогообложения) Тогда
				СтраницаРаздел2.П000020016003_КодЛьготы = Выборка.КодЛьготы;
				СтраницаРаздел2.П000020016003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ОснованиеЛьготыПонижениеНалоговойСтавки) Тогда
				СтраницаРаздел2.П000020020003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеНалоговойСтавки());
				СтраницаРаздел2.П000020020003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			СтраницаРаздел2.П000020021003 = Выборка.НалоговаяСтавка;
			
			Если КодВидаИмущества = "02" Тогда
				СтраницаРаздел2.П000020018003_Числ = ?(Выборка.ДоляСтоимостиЧислитель = 0, 1, Выборка.ДоляСтоимостиЧислитель);
				СтраницаРаздел2.П000020018003_Знам = ?(Выборка.ДоляСтоимостиЗнаменатель = 0, 1, Выборка.ДоляСтоимостиЗнаменатель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ОснованиеЛьготыУменьшениеСуммыНалога) Тогда
				СтраницаРаздел2.П000020023003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеСуммыНалога());
				СтраницаРаздел2.П000020023003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			
			КодВидаИмущества             = Выборка.КодВидаИмущества; 
			КодПоОКТМО                   = Выборка.КодПоОКТМО;
			ДоляСтоимостиЧислитель       = Выборка.ДоляСтоимостиЧислитель;
			ДоляСтоимостиЗнаменатель     = Выборка.ДоляСтоимостиЗнаменатель;
			НалоговаяСтавка              = Выборка.НалоговаяСтавка;
			
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КодВидаИмущества = Новый ПолеКомпоновкиДанных("КодВидаИмущества");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодВидаИмущества , ВидСравненияКомпоновкиДанных.Равно, Выборка.КодВидаИмущества);
			
			Если ИспользоватьВРасшифровкеОтборОснованиеЛьготы Тогда
				ПолеКомпоновкиДанных_ОснованиеЛьготы = Новый ПолеКомпоновкиДанных("ОснованиеЛьготы");
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОснованиеЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ОснованиеЛьготы);
			КонецЕсли;
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Перечисления.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
			
			СтраницаРаздел2.П000020002003 = Число(СтраницаРаздел2.П000020002003) + Выборка.ОстаточнаяСтоимостьНа0101;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020002004 = Число(СтраницаРаздел2.П000020002004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0101, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020002004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020002004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003003 = Число(СтраницаРаздел2.П000020003003) + Выборка.ОстаточнаяСтоимостьНа0102;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020003004 = Число(СтраницаРаздел2.П000020003004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0102, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020003004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020003004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004003 = Число(СтраницаРаздел2.П000020004003) + Выборка.ОстаточнаяСтоимостьНа0103;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020004004 = Число(СтраницаРаздел2.П000020004004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0103, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020004004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020004004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005003 = Число(СтраницаРаздел2.П000020005003) + Выборка.ОстаточнаяСтоимостьНа0104;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020005004 = Число(СтраницаРаздел2.П000020005004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0104, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020005004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020005004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006003 = Число(СтраницаРаздел2.П000020006003) + Выборка.ОстаточнаяСтоимостьНа0105;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020006004 = Число(СтраницаРаздел2.П000020006004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0105, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020006004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020006004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007003 = Число(СтраницаРаздел2.П000020007003) + Выборка.ОстаточнаяСтоимостьНа0106;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020007004 = Число(СтраницаРаздел2.П000020007004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0106, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020007004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020007004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008003 = Число(СтраницаРаздел2.П000020008003) + Выборка.ОстаточнаяСтоимостьНа0107;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020008004 = Число(СтраницаРаздел2.П000020008004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0107, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020008004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020008004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009003 = Число(СтраницаРаздел2.П000020009003) + Выборка.ОстаточнаяСтоимостьНа0108;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020009004 = Число(СтраницаРаздел2.П000020009004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0108, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020009004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020009004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010003 = Число(СтраницаРаздел2.П000020010003) + Выборка.ОстаточнаяСтоимостьНа0109;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020010004 = Число(СтраницаРаздел2.П000020010004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0109, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020010004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020010004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011003 = Число(СтраницаРаздел2.П000020011003) + Выборка.ОстаточнаяСтоимостьНа0110;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020011004 = Число(СтраницаРаздел2.П000020011004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0110, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020011004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020011004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012003 = Число(СтраницаРаздел2.П000020012003) + Выборка.ОстаточнаяСтоимостьНа0111;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020012004 = Число(СтраницаРаздел2.П000020012004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0111, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020012004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020012004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013003 = Число(СтраницаРаздел2.П000020013003) + Выборка.ОстаточнаяСтоимостьНа0112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020013004 = Число(СтраницаРаздел2.П000020013004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа0112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020013004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020013004, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014003 = Число(СтраницаРаздел2.П000020014003) + Выборка.ОстаточнаяСтоимостьНа3112;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020014004 = Число(СтраницаРаздел2.П000020014004) + ?(Выборка.ОсвобождениеОтНалогообложения, Выборка.ОстаточнаяСтоимостьНа3112, 0);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020014004_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020014004, "", ДополнительныеПараметры);
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020015003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020015003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020017003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020017003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020019003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020019003, "", ДополнительныеПараметры);
			СтраницаРаздел2.П000020022003 = СтраницаРаздел2.П000020022003 + Выборка.СуммаНалогаСУчетомНеоблагаемойБазы;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020022003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020022003, "", ДополнительныеПараметры);
			
			СтраницаРаздел2.П000020024003 = Число(СтраницаРаздел2.П000020024003) + Выборка.СуммаУменьшенияСуммыНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020024003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020024003, "", ДополнительныеПараметры);
			// В строке 260 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
			// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
			СтраницаРаздел2.П000020026003 = Число(СтраницаРаздел2.П000020026003) + Выборка.СуммаНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000020026003_" + Раздел2.Строки.Количество(), "", "", "", СтраницаРаздел2.П000020026003, "", ДополнительныеПараметры);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение раздела 2.1
	Запрос.УстановитьПараметр("КонецПериода",        КонецДня(мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетНалогаНаИмущество.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_Недвижимость
	|ИЗ
	|	ВТ_РасчетПоСреднегодовойСтоимости КАК РасчетНалогаНаИмущество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация КАК Организация,
	|	МАКСИМУМ(ПорядокУчетаОСБУ.Период) КАК Период
	|ПОМЕСТИТЬ ДатыПоследнихСостояний
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.Период <= &КонецПериода
	|	И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|	И ПорядокУчетаОСБУ.Организация = &Организация
	|	И ПорядокУчетаОСБУ.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				ВТ_Недвижимость КАК СписокОС)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПорядокУчетаОСБУ.ОсновноеСредство,
	|	ПорядокУчетаОСБУ.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСБУ.ОсновноеСредство.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.ОсновноеСредство.КодПоОКОФ.Код, """") КАК КодПоОКОФ,
	|	ЕСТЬNULL(ПорядокУчетаОСБУ.ОсновноеСредство.ШифрПоЕНАОФ, """") КАК ШифрПоЕНАОФ
	|ПОМЕСТИТЬ НеСнятыеСУчета
	|ИЗ
	|	ДатыПоследнихСостояний КАК ДатыПоследнихСостояний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО ДатыПоследнихСостояний.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|			И ДатыПоследнихСостояний.Организация = ПорядокУчетаОСБУ.Организация
	|			И ДатыПоследнихСостояний.Период = ПорядокУчетаОСБУ.Период
	|			И ПорядокУчетаОСБУ.ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НеСнятыеСУчета.ОсновноеСредство КАК ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК КАК КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
	|	НеСнятыеСУчета.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СУММА(РасчетНалогаНаИмущество.ОстаточнаяСтоимостьНа3112) КАК ОстаточнаяСтоимостьНа3112,
	|	НеСнятыеСУчета.КодПоОКОФ КАК КодПоОКОФ,
	|	НеСнятыеСУчета.ШифрПоЕНАОФ КАК ШифрПоЕНАОФ
	|ИЗ
	|	НеСнятыеСУчета КАК НеСнятыеСУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РасчетПоСреднегодовойСтоимости КАК РасчетНалогаНаИмущество
	|		ПО НеСнятыеСУчета.ОсновноеСредство = РасчетНалогаНаИмущество.ОсновноеСредство
	|			И (РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган)
	|
	|СГРУППИРОВАТЬ ПО
	|	НеСнятыеСУчета.ОсновноеСредство,
	|	РасчетНалогаНаИмущество.КодПоОКТМО,
	|	РасчетНалогаНаИмущество.КодВидаИмущества,
	|	РасчетНалогаНаИмущество.КБК,
	|	РасчетНалогаНаИмущество.КадастровыйНомер,
	|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения,
	|	НеСнятыеСУчета.ИнвентарныйНомер,
	|	НеСнятыеСУчета.КодПоОКОФ,
	|	НеСнятыеСУчета.ШифрПоЕНАОФ";
	
	Раздел21 = Контейнер.Раздел21;
	СтраницаРаздел21 = Раздел21.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21 Цикл
		СтраницаРаздел21[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	СтраницаРаздел21Здание = Раздел21.Строки[0].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
	Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
		СтраницаРаздел21Здание[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока Раздел21.Строки.Количество()>1 Цикл
		Раздел21.Строки.Удалить(1);
	КонецЦикла;
	
	ПерваяСтраница = Истина;
	
	ДанныеОбъектов = Запрос.Выполнить().Выгрузить();
	
	ЗапросАдресов = Новый Запрос();
	ЗапросАдресов.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОС.ОсновноеСредство КАК Объект,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК Значение
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&КонецПериодаГраница,
	|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
	|				И Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС";
	
	ЗапросАдресов.УстановитьПараметр("Организация",         Запрос.Параметры.Организация);
	ЗапросАдресов.УстановитьПараметр("КонецПериода",        КонецДня(мДатаКонцаПериодаОтчета));
	ЗапросАдресов.УстановитьПараметр("КонецПериодаГраница", Новый Граница(КонецДня(мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	ЗапросАдресов.УстановитьПараметр("СписокОС", ДанныеОбъектов.ВыгрузитьКолонку("ОсновноеСредство"));
	ДанныеАдресов = ЗапросАдресов.Выполнить().Выгрузить();
	
	Если ДанныеОбъектов.Количество() > 0 Тогда
		ДанныеАдресов.Индексы.Добавить("Объект");
	КонецЕсли;
	
	ДополнительныеПараметрыАдреса = Новый Структура;
	ДополнительныеПараметрыАдреса.Вставить("ВерсияАдреса", 3);
	
	Для каждого ДанныеОбъекта Из ДанныеОбъектов Цикл
	
		Если Не ПерваяСтраница Тогда
			
			// Создаем дополнительную страницу в декларации
			СтруктураНовойТаблицы = Новый Структура();
			СтруктураДанныхМногострочныхЧастей = Новый Структура();
			Для Каждого Показатель Из СтраницаРаздел21 Цикл
				СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
				СтруктураДанныхМногострочныхЧастей.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
			КонецЦикла;
			
			НоваяСтраницаРаздела21 = Раздел21.Строки.Добавить();
			НоваяСтраницаРаздела21.Данные = СтруктураНовойТаблицы;
			НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей = Новый Структура("П00021М1", ДеревоЗначенийРегОтчет());
			
			СтраницаРаздел21 = Раздел21.Строки[Раздел21.Строки.Количество()-1].Данные;
			
			НоваяСтрокаРаздел21Здание = НоваяСтраницаРаздела21.ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
			НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
			НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
			
			СтраницаРаздел21Здание = Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки[0].Данные;
			
		Иначе
			// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
			ПерваяСтраница = Ложь;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
		
		ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, ДанныеОбъекта.КодПоОКТМО);
		
		ПолеКомпоновкиДанных_ОсновноеСредство = Новый ПолеКомпоновкиДанных("ОсновноеСредство");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОсновноеСредство , ВидСравненияКомпоновкиДанных.Равно, ДанныеОбъекта.ОсновноеСредство);
		
		ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Перечисления.НалоговаяБазаПоНалогуНаИмущество.СреднегодоваяСтоимость);
		
		ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
		ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);
		
		СтраницаРаздел21.П000210001000 = ДанныеОбъекта.КодПоОКТМО;
		
		КодВидаИмущества = ДанныеОбъекта.КодВидаИмущества;
		Если КодВидаИмущества = "06" ИЛИ КодВидаИмущества = "08" ИЛИ КодВидаИмущества = "10" Тогда
			КБК = ДанныеОбъекта.КБК;
		ИначеЕсли КодВидаИмущества = "01" Тогда
			КБК = "18210602020021000110";
		Иначе
			КБК = "18210602010021000110";
		КонецЕсли;
		СтраницаРаздел21.П000210001100 = КБК;
		
		АдресМестонахождения = ДанныеАдресов.Найти(ДанныеОбъекта.ОсновноеСредство, "Объект");
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.КадастровыйНомерПомещения) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.КадастровыйНомерПомещения;
		ИначеЕсли ЗначениеЗаполнено(ДанныеОбъекта.КадастровыйНомер) Тогда
			СтраницаРаздел21.П000210001001 = "1";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.КадастровыйНомер;
		ИначеЕсли АдресМестонахождения <> Неопределено И Не ПустаяСтрока(АдресМестонахождения.Значение) Тогда
			СтраницаРаздел21.П000210001001 = "3";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.ИнвентарныйНомер;
		Иначе
			СтраницаРаздел21.П000210001001 = "4";
			СтраницаРаздел21.П000210002001 = ДанныеОбъекта.ИнвентарныйНомер;
		КонецЕсли;
		
		Если СтраницаРаздел21.П000210001001 = "3" Тогда
			
			Если АдресМестонахождения <> Неопределено И Не ПустаяСтрока(АдресМестонахождения.Значение) Тогда
				
				ПоляАдреса = ИнтерфейсыВзаимодействияБРО.АдресВФорматеФИАС(АдресМестонахождения.Значение, ДополнительныеПараметрыАдреса);
				
				СтраницаРаздел21.П00021УИД3000 = ПоляАдреса.ИдентификаторАдресногоОбъекта;
				СтраницаРаздел21.П000210003001 = ПоляАдреса.КодРегиона;
				СтраницаРаздел21.ПС00210003001 = ПоляАдреса.РегионСокращение;
				СтраницаРаздел21.П000210003002 = ПоляАдреса.МуниципальныйРайонВид;
				СтраницаРаздел21.ПС00210003002 = ПоляАдреса.МуниципальныйРайонСокращение;
				СтраницаРаздел21.П000210003003 = ПоляАдреса.МуниципальныйРайон;
				СтраницаРаздел21.П000210003004 = ПоляАдреса.ПоселениеВид;
				СтраницаРаздел21.ПС00210003004 = ПоляАдреса.ПоселениеСокращение;
				СтраницаРаздел21.П000210003005 = ПоляАдреса.Поселение;
				СтраницаРаздел21.П000210003006 = ПоляАдреса.НаселенныйПунктВид;
				СтраницаРаздел21.ПС00210003006 = ПоляАдреса.НаселенныйПунктСокращение;
				СтраницаРаздел21.П000210003007 = ПоляАдреса.НаселенныйПункт;
				СтраницаРаздел21.П000210003008 = ПоляАдреса.ТерриторияТип;
				СтраницаРаздел21.ПС00210003008 = ПоляАдреса.ТерриторияСокращение;
				СтраницаРаздел21.П000210003009 = ПоляАдреса.Территория;
				СтраницаРаздел21.П000210003010 = ПоляАдреса.УлицаТип;
				СтраницаРаздел21.ПС00210003010 = ПоляАдреса.УлицаСокращение;
				СтраницаРаздел21.П000210003011 = ПоляАдреса.Улица;
				СтраницаРаздел21.П000210003015 = ПоляАдреса.ПомещениеВЗданииТип;
				СтраницаРаздел21.П000210003016 = ПоляАдреса.ПомещениеВЗданииНомер;
				СтраницаРаздел21.П000210003017 = ПоляАдреса.ПомещениеВКвартиреТип;
				СтраницаРаздел21.П000210003018 = ПоляАдреса.ПомещениеВКвартиреНомер;
				
				ПервоеЗдание = Истина;
				Для Каждого Здание Из ПоляАдреса.Здания Цикл
					
					Если Не ПервоеЗдание Тогда
						СтруктураДанныхМногострочныхЧастей = Новый Структура();
						Для Каждого Показатель Из СтраницаРаздел21Здание Цикл
							СтруктураДанныхМногострочныхЧастей.Вставить(
								Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
						КонецЦикла;
						
						НоваяСтрокаРаздел21Здание = 
							Раздел21.Строки[Раздел21.Строки.Количество()-1].ДанныеМногострочныхЧастей.П00021М1.Строки.Добавить();
						НоваяСтрокаРаздел21Здание.Данные = СтруктураДанныхМногострочныхЧастей;
						НоваяСтрокаРаздел21Здание.ДанныеМногострочныхЧастей = Новый Структура;
						
						СтраницаРаздел21Здание = НоваяСтрокаРаздел21Здание.Данные;
					Иначе
						ПервоеЗдание = Ложь;
					КонецЕсли;
					
					СтраницаРаздел21Здание.П00021М103013 = Здание.ЗданиеТип;
					СтраницаРаздел21Здание.П00021М103014 = Здание.ЗданиеНомер;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КодПоОКОФ = СокрЛП(ДанныеОбъекта.КодПоОКОФ);
		Если СтрДлина(КодПоОКОФ) = 10 И Сред(КодПоОКОФ, 3, 1) = " " Тогда
			КодПоОКОФ = СтрЗаменить(КодПоОКОФ, " ", "");
			КодПоОКОФ = Сред(КодПоОКОФ, 1, 3) + "." + Сред(КодПоОКОФ, 4, 2) + "." + Сред(КодПоОКОФ, 6, 2) + "." + Сред(КодПоОКОФ, 8, 2);
		ИначеЕсли ПустаяСтрока(КодПоОКОФ) Тогда
			ШифрПоЕНАОФ = СокрЛП(ДанныеОбъекта.ШифрПоЕНАОФ);
			Если СтрДлина(ШифрПоЕНАОФ) = 6 Тогда
				КодПоОКОФ = Сред(ШифрПоЕНАОФ, 1, 2) + Сред(ШифрПоЕНАОФ, 4, 1) + "." + Сред(ШифрПоЕНАОФ, 5, 2);
			КонецЕсли;
		КонецЕсли;
		СтраницаРаздел21.П000210004003 = КодПоОКОФ;
		
		СтраницаРаздел21.П000210005003 = ДанныеОбъекта.ОстаточнаяСтоимостьНа3112;
		
		ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000210005003_" + Раздел21.Строки.Количество(), "", "", "", СтраницаРаздел21.П000210005003, "", ДополнительныеПараметры);
		
	КонецЦикла;
	
	// Заполнение раздела 3
	
	// С отчета за 2022 год российские организации не заполняют Раздел 3 
	Если ЭтоИностраннаяОрганизация Тогда
	
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетНалогаНаИмущество.КодВидаИмущества КАК КодВидаИмущества,
		|	РасчетНалогаНаИмущество.КодПоОКТМО КАК КодПоОКТМО,
		|	РасчетНалогаНаИмущество.КадастровыйНомер КАК КадастровыйНомерЗдания,
		|	РасчетНалогаНаИмущество.КадастровыйНомерПомещения КАК КадастровыйНомерПомещения,
		|	РасчетНалогаНаИмущество.КадастроваяСтоимость КАК КадастроваяСтоимость,
		|	РасчетНалогаНаИмущество.НеоблагаемаяКадастроваяСтоимость КАК НеоблагаемаяКадастроваяСтоимость,
		|	РасчетНалогаНаИмущество.ОснованиеЛьготы КАК ОснованиеЛьготы,
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.КодЛьготы, """") КАК КодЛьготы, 
		|
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом, ЛОЖЬ)
		|			ТОГДА РасчетНалогаНаИмущество.ОснованиеЛьготы.ОснованиеМестнойЛьготы
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ОснованиеРегиональнойЛьготы,
		|
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.ВидЛьготы,
		|			 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.ПустаяСсылка)) =
		|					ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.Освобождение) КАК ОсвобождениеОтНалогообложения,
		|
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.ВидЛьготы,
		|			 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.ПустаяСсылка)) =
		|					ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеНалоговойБазыНаСумму) КАК СнижениеНалоговойБазы,
		|
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.ВидЛьготы,
		|			 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.ПустаяСсылка)) В
		|					(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиНаПроцент),
		|					 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСтавкиДоУказанной)) КАК ПонижениеНалоговойСтавки,
		|
		|	ЕСТЬNULL(РасчетНалогаНаИмущество.ОснованиеЛьготы.ВидЛьготы,
		|			 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.ПустаяСсылка)) В
		|					(ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаПроцент),
		|					 ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПоИмущественнымНалогам.СнижениеСуммыНаСумму)) КАК УменьшениеСуммыНалога,
		|
		|	РасчетНалогаНаИмущество.ДоляСтоимостиЧислитель КАК ДоляСтоимостиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляСтоимостиЗнаменатель КАК ДоляСтоимостиЗнаменатель,
		|	РасчетНалогаНаИмущество.НалоговаяСтавка КАК НалоговаяСтавка,
		|	РасчетНалогаНаИмущество.СуммаНалогаСУчетомНеоблагаемойБазы КАК СуммаНалогаСУчетомНеоблагаемойБазы,
		|	РасчетНалогаНаИмущество.СуммаУменьшенияСуммыНалога КАК СуммаУменьшенияСуммыНалога,
		|	РасчетНалогаНаИмущество.СуммаНалога КАК СуммаНалога,
		|	РасчетНалогаНаИмущество.КоличествоМесяцевВладения КАК КоличествоМесяцевВладения,
		|	РасчетНалогаНаИмущество.КоличествоМесяцевИспользования КАК КоличествоМесяцевИспользования,
		|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЧислитель КАК ДоляВПравеОбщейСобственностиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляВПравеОбщейСобственностиЗнаменатель КАК ДоляВПравеОбщейСобственностиЗнаменатель,
		|	РасчетНалогаНаИмущество.ДоляПлощадиЧислитель КАК ДоляПлощадиЧислитель,
		|	РасчетНалогаНаИмущество.ДоляПлощадиЗнаменатель КАК ДоляПлощадиЗнаменатель
		|ИЗ
		|	РегистрСведений.РасчетНалогаНаИмуществоПоКадастровойСтоимости КАК РасчетНалогаНаИмущество
		|ГДЕ
		|	РасчетНалогаНаИмущество.Организация = &Организация
		|	И РасчетНалогаНаИмущество.ПериодРасчета = &ДатаОкончанияОтчета
		|	И РасчетНалогаНаИмущество.ИФНС = &НалоговыйОрган";

		Раздел3 = Контейнер.Раздел3;
		СтраницаРаздел3 = Раздел3.Строки[0].Данные;
		Для Каждого Показатель Из СтраницаРаздел3 Цикл
			СтраницаРаздел3[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
		КонецЦикла;
		
		Пока Раздел3.Строки.Количество()>1 Цикл
			Раздел3.Строки.Удалить(1);
		КонецЦикла;
		
		ПерваяСтраница = Истина;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если Не ПерваяСтраница Тогда
				// Создаем дополнительную страницу в декларации
				СтруктураНовойТаблицы = Новый Структура();
				Для Каждого Показатель Из СтраницаРаздел3 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЦикла;
				
				НоваяСтраницаРаздела3 = Раздел3.Строки.Добавить();
				НоваяСтраницаРаздела3.Данные = СтруктураНовойТаблицы;
				НоваяСтраницаРаздела3.ДанныеМногострочныхЧастей = Новый Структура;
				
				СтраницаРаздел3 = Раздел3.Строки[Раздел3.Строки.Количество()-1].Данные;
				
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			
			ПараметрыРасшифровки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
			Отбор = ПараметрыРасшифровки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
			Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
			
			ПолеКомпоновкиДанных_ИФНС = Новый ПолеКомпоновкиДанных("ИФНС");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ИФНС, ВидСравненияКомпоновкиДанных.Равно, НалоговыйОрган);
			
			ПолеКомпоновкиДанных_КодПоОКТМО = Новый ПолеКомпоновкиДанных("КодПоОКТМО");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КодПоОКТМО, ВидСравненияКомпоновкиДанных.Равно, Выборка.КодПоОКТМО);
			
			ПолеКомпоновкиДанных_КадастровыйНомер = Новый ПолеКомпоновкиДанных("КадастровыйНомер");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомер , ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерЗдания);
			
			ПолеКомпоновкиДанных_КадастровыйНомерПомещения = Новый ПолеКомпоновкиДанных("КадастровыйНомерПомещения");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_КадастровыйНомерПомещения, ВидСравненияКомпоновкиДанных.Равно, Выборка.КадастровыйНомерПомещения);
			
			ПолеКомпоновкиДанных_ОснованиеЛьготы = Новый ПолеКомпоновкиДанных("ОснованиеЛьготы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ОснованиеЛьготы, ВидСравненияКомпоновкиДанных.Равно, Выборка.ОснованиеЛьготы);
			
			ПолеКомпоновкиДанных_НалоговаяСтавка = Новый ПолеКомпоновкиДанных("НалоговаяСтавка");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_НалоговаяСтавка, ВидСравненияКомпоновкиДанных.Равно, Выборка.НалоговаяСтавка);
			
			ПолеКомпоновкиДанных_ВидНалоговойБазы = Новый ПолеКомпоновкиДанных("ВидНалоговойБазы");
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных_ВидНалоговойБазы, ВидСравненияКомпоновкиДанных.Равно, Перечисления.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость);
			
			ДополнительныеПараметры.Вставить("ПараметрыРасшифровки", ПараметрыРасшифровки);
			ДополнительныеПараметры.Вставить("РегламентныеОперацииВыполнены", Истина);

			СтраницаРаздел3.П000030000101 = Выборка.КодВидаИмущества;
			СтраницаРаздел3.П000030001001 = Выборка.КодПоОКТМО;
			СтраницаРаздел3.П000030001100 = "18210602010021000110";
			
			Если ЗначениеЗаполнено(Выборка.КадастровыйНомерПомещения) Тогда
				СтраницаРаздел3.П000030001401 = "2";
				СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерПомещения;
			Иначе
				СтраницаРаздел3.П000030001401 = "1";
				СтраницаРаздел3.П000030001501 = Выборка.КадастровыйНомерЗдания;
			КонецЕсли;
			
			СтраницаРаздел3.П000030002003 = Выборка.КадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002003, "", ДополнительныеПараметры);
			СтраницаРаздел3.П000030002503 = Выборка.НеоблагаемаяКадастроваяСтоимость;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030002503_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030002503, "", ДополнительныеПараметры);
			
			СтраницаРаздел3.П000030003003_Числ = Выборка.ДоляВПравеОбщейСобственностиЧислитель;
			СтраницаРаздел3.П000030003003_Знам = Выборка.ДоляВПравеОбщейСобственностиЗнаменатель;
			
			СтраницаРаздел3.П000030003503_Числ = Выборка.ДоляПлощадиЧислитель;
			СтраницаРаздел3.П000030003503_Знам = Выборка.ДоляПлощадиЗнаменатель;
			
			Если Выборка.ОсвобождениеОтНалогообложения Или Выборка.СнижениеНалоговойБазы Тогда
				СтраницаРаздел3.П000030004003_КодЛьготы = Выборка.КодЛьготы;
				СтраницаРаздел3.П000030004003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			Если Выборка.ПонижениеНалоговойСтавки Тогда
				СтраницаРаздел3.П000030007003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы), 
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеНалоговойСтавки());
				СтраницаРаздел3.П000030007003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			
			СтраницаРаздел3.П000030005003_Числ = Выборка.ДоляСтоимостиЧислитель;
			СтраницаРаздел3.П000030005003_Знам = Выборка.ДоляСтоимостиЗнаменатель;
			
			СтраницаРаздел3.П000030008003 = Выборка.НалоговаяСтавка;
			Если Выборка.КоличествоМесяцевВладения < 12 Тогда 
				СтраницаРаздел3.П000030009003_Числ = Выборка.КоличествоМесяцевВладения;
				СтраницаРаздел3.П000030009003_Знам = 12;
			КонецЕсли;
			
			Если Выборка.КоличествоМесяцевИспользования < Выборка.КоличествоМесяцевВладения Тогда 
				СтраницаРаздел3.П000030009503_Числ = Выборка.КоличествоМесяцевИспользования;
				СтраницаРаздел3.П000030009503_Знам = Выборка.КоличествоМесяцевВладения;
			КонецЕсли;
			
			СтраницаРаздел3.П000030010003 = Выборка.СуммаНалогаСУчетомНеоблагаемойБазы;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030010003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030010003, "", ДополнительныеПараметры);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030006003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030006003, "", ДополнительныеПараметры);
			
			Если Выборка.УменьшениеСуммыНалога Тогда
				СтраницаРаздел3.П000030011003_КодЛьготы = ?(ЗначениеЗаполнено(Выборка.КодЛьготы),
					Выборка.КодЛьготы,
					ЛьготыПоИмущественнымНалогамКлиентСервер.КодРегиональнойЛьготыПоНалогуНаИмуществоСнижениеСуммыНалога());
				СтраницаРаздел3.П000030011003_Основание = ЛьготыПоИмущественнымНалогамКлиентСервер.СокращенныйКодОснованияЛьготы(Выборка.ОснованиеРегиональнойЛьготы);
			КонецЕсли;
			СтраницаРаздел3.П000030012003 = Выборка.СуммаУменьшенияСуммыНалога;
			
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030012003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030012003, "", ДополнительныеПараметры);
			// В строке 130 указывается исчисленная сумма налога, подлежащая уплате в бюджет за налоговый период, т.е. без учета авансовых платежей.
			// Заполнение этой строки имеет смысл на случай отключения автоматического расчета вычисляемых ячеек.
			СтраницаРаздел3.П000030013003 = Выборка.СуммаНалога;
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "П000030013003_" + Раздел3.Строки.Количество(), "", "", "", СтраницаРаздел3.П000030013003, "", ДополнительныеПараметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполнение раздела 4
	
	Раздел4 = Контейнер.Раздел4;
	ТаблицаРаздел4 = Раздел4.Строки[0].ДанныеМногострочныхЧастей.П00004М1;
	СтрокаРаздела4 = ТаблицаРаздел4.Строки[0].Данные;
	
	Для Каждого Показатель Из СтрокаРаздела4 Цикл
		СтрокаРаздела4[Показатель.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение));
	КонецЦикла;
	
	Пока ТаблицаРаздел4.Строки.Количество()>1 Цикл
		ТаблицаРаздел4.Строки.Удалить(1);
	КонецЦикла;
	
	// Раздел 4 заполняем только в декларации по головной организации:
	// "Раздел 4 заполняется организацией один раз в одной из представляемых ею 
	// Деклараций за соответствующий налоговый период" (п. 8.1 Порядка заполнения)
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Для расчета средней стоимости движимого имущества требуется массив с ГоловнаяОрганизация первым элементом, 
	// и далее все филиалы ГоловнаяОрганизация.
	ОрганизацияСФилиалами = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация);
	Организации = Новый Массив;
	Организации.Добавить(ГоловнаяОрганизация);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Организации, ОрганизацияСФилиалами);
	Организации = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Организации);
	
	НалоговыйОрганГО = Справочники.Организации.РегистрацияВНалоговомОргане(ГоловнаяОрганизация, мДатаКонцаПериодаОтчета);
	
	Если НалоговыйОрган = НалоговыйОрганГО Тогда
		
		ДанныеПоДвижимомуИмуществу = РасчетИмущественныхНалогов.ДанныеПоСреднейСтоимостиДвижимогоИмущества(
			Организации,
			мДатаНачалаПериодаОтчета,
			мДатаКонцаПериодаОтчета);
		
		Если ТипЗнч(ДанныеПоДвижимомуИмуществу) = Тип("ТаблицаЗначений") Тогда
			
			ДанныеПоДвижимомуИмуществу.Индексы.Добавить("Регион");
			
			ОграничитьДанныеПоДвижимомуИмуществу(ДанныеПоДвижимомуИмуществу);
			
			ДанныеПоРегионам = ДанныеПоДвижимомуИмуществу.Скопировать();
			ДанныеПоРегионам.Свернуть("Регион", "СреднегодоваяСтоимость");
			ДанныеПоРегионам.Сортировать("Регион");
			
			ПерваяСтрока = Истина;
			
			Для Каждого ДанныеПоРегиону Из ДанныеПоРегионам Цикл
				
				Если Не ПерваяСтрока Тогда
					// Создаем дополнительную строку в разделе
					ДанныеНовойСтроки = Новый Структура;
					Для Каждого Показатель Из СтрокаРаздела4 Цикл
						ДанныеНовойСтроки.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
					КонецЦикла;
					
					НоваяСтрокаРаздела4 = ТаблицаРаздел4.Строки.Добавить();
					НоваяСтрокаРаздела4.Данные = ДанныеНовойСтроки;
					НоваяСтрокаРаздела4.ДанныеМногострочныхЧастей = Новый Структура;
					
					СтрокаРаздела4 = ТаблицаРаздел4.Строки[ТаблицаРаздел4.Строки.Количество()-1].Данные;
				Иначе
					ПерваяСтрока = Ложь;
				КонецЕсли;
				
				СтрокаРаздела4.П00004М100001 = Формат(ДанныеПоРегиону.Регион, "ЧЦ=2; ЧВН=; ЧФ=Ч");
				СтрокаРаздела4.П00004М100002 = ДанныеПоРегиону.СреднегодоваяСтоимость;
				
				НомерСтрокиРаздела4 = ТаблицаРаздел4.Строки.Количество();
				
				ДополнительныеПараметры = Новый Структура;
				// Каждая строка по региону может быть расшифрована до отдельных основных средств
				ДетальныеЗаписи = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
				// В расшифровочном отчете каждая строка ОС может быть далее расшифрована до исходных показателей по месяцам.
				// Для этого здесь готовим таблицу расшифровки по каждому отдельному региону - она используется на 2-м уровне расшифровки.
				ДетальныеЗаписиТаблицаРасшифровки = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйРасшифровка();
				
				СтрокиПоРегиону = ДанныеПоДвижимомуИмуществу.НайтиСтроки(Новый Структура("Регион", ДанныеПоРегиону.Регион));
				
				Сч = 0;
				
				Для Каждого СтрокаОС Из СтрокиПоРегиону Цикл
					
					Сч = Сч + 1;
					
					ДетальнаяЗапись = ДетальныеЗаписи.Добавить();
					ДетальнаяЗапись.Организация = СтрокаОС.Организация;
					ДетальнаяЗапись.Аналитика = СтрокаОС.ПредставлениеОС; 
					ДетальнаяЗапись.Сумма = СтрокаОС.СреднегодоваяСтоимость;
					ДетальнаяЗапись.Ссылка = СтрокаОС.ОсновноеСредство;
					ДетальнаяЗапись.ИмяПоказателя = СтрШаблон("%1_%2_%3",
						"П00004М100002",
						НомерСтрокиРаздела4,
						Сч);

					// Заполним расшифровку расчета среднегодовой стоимости по каждому ОС (остаточная стоимость по месяцам) 	
					ДетальныеЗаписиПоОС = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
					
					Для Месяц = 0 По 12 Цикл
						
						НомерМесяца = Месяц + 1;
						
						Если НомерМесяца = 13 Тогда
							Суффикс = "3112";
							ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), 12, 31);
						Иначе
							Суффикс = "01" + Формат(НомерМесяца, "ЧЦ=2; ЧВН=; ЧФ=Ч");
							ПериодРасчета = Дата(Год(мДатаКонцаПериодаОтчета), НомерМесяца, 1);
						КонецЕсли;
						
						ИмяКолонки = "ОстаточнаяСтоимостьНа" + Суффикс;
						
						ДетальнаяЗаписьПоОС = ДетальныеЗаписиПоОС.Добавить();
						ДетальнаяЗаписьПоОС.Организация = СтрокаОС.Организация;
						ДетальнаяЗаписьПоОС.Аналитика = СтрШаблон(НСтр("ru = 'Остаточная стоимость на %1';
																		|en = 'Residual value as of %1'"), Формат(ПериодРасчета, "ДЛФ=DD"));
						ДетальнаяЗаписьПоОС.Сумма = СтрокаОС["ОстаточнаяСтоимостьНа" + Суффикс];
						
					КонецЦикла;
					
					НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Расчет среднегодовой стоимости: %1';
															|en = 'Average annual cost calculation: %1'"), ДетальнаяЗапись.Аналитика);
					ДобавитьСтрокуРасшифровки(
						ДетальныеЗаписиТаблицаРасшифровки,
						ДетальнаяЗапись.ИмяПоказателя,
						НаименованиеПоказателя,
						"",
						"",
						ДетальнаяЗапись.Сумма,
						"",
						Новый Структура("ДетальныеЗаписи", ДетальныеЗаписиПоОС));
					
				КонецЦикла;
				
				НаименованиеПоказателя = СтрШаблон(НСтр("ru = 'Среднегодовая стоимость объектов движимого имущества: Код региона %1';
														|en = 'Average annual cost of movable property: Region code %1'"), СтрокаРаздела4.П00004М100001);
				ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписи);
				ДополнительныеПараметры.Вставить("ДетальныеЗаписиТаблицаРасшифровки", ДетальныеЗаписиТаблицаРасшифровки);
				
				ДобавитьСтрокуРасшифровки(
					ТаблицаРасшифровки, 
					"П00004М100002_" + НомерСтрокиРаздела4,
					НаименованиеПоказателя,
					"", 
					"", 
					СтрокаРаздела4.П00004М100002, 
					"", 
					ДополнительныеПараметры);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ОграничитьДанныеПоДвижимомуИмуществу(ДанныеПоДвижимомуИмуществу)
	
	// Экспериментальным путем установлено, что при превышении некоторого количества записей в таблице данных
	// о среднегодовой стоимости движимого имущества (примерно 250 тыс), таблица расшифровки становится слишком велика,
	// и СУБД не может сохранить данные регл отчета (например, в PostgreSQL возникает ошибка out of memory).
	// Поэтому при превышении некоторого предельного количества модифицируем таблицу данных таким образом,
	// чтобы полученную на ее основании таблицу расшифровки можно было потом сохранить (в данных регл отчета).
	// "Лишние" записи по ОС сворачиваем в одну - "Другие объекты движимого имущества".
	// Так как регионов и организаций может быть несколько, то "отрезаем" записи по каждому региону и организации пропорционально
	// (см. КоэффициентОграничения). 
	ПредельноеКоличествоЗаписейРасшифровки = ПредельноеКоличествоЗаписейРасшифровкиДвижимогоИмущества();
	
	Если ДанныеПоДвижимомуИмуществу.Количество() <= ПредельноеКоличествоЗаписейРасшифровки Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентОграничения = ПредельноеКоличествоЗаписейРасшифровки / ДанныеПоДвижимомуИмуществу.Количество();
	
	АналитикаСвернутыхСтрок = Справочники.ОбъектыЭксплуатации.ПустаяСсылка();
	АналитикаСвернутыхСтрокТекст = НСтр("ru = 'Другие объекты движимого имущества';
										|en = 'Other movable property'");
	
	КлючевыеПоля = Новый Массив; // поля, в разрезе которых устанавливаем ограничения
	КлючевыеПоля.Добавить("Регион");
	
	// Если есть филиалы на выделенном балансе (несколько организаций), то также пропорционально 
	// ограничиваем количество записей по каждому такому филиалу (организации).
	Организации = ДанныеПоДвижимомуИмуществу.Скопировать(, "Организация");
	Организации.Свернуть("Организация");
	Если Организации.Количество() > 1 Тогда
		КлючевыеПоля.Добавить("Организация");
	КонецЕсли;
	
	КлючевыеПоляСтрокой = СтрСоединить(КлючевыеПоля, ",");
	
	// Посчитаем, сколько всего записей по ключевым полям
	Ограничения = ДанныеПоДвижимомуИмуществу.Скопировать(,КлючевыеПоляСтрокой);
	Ограничения.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	Ограничения.ЗаполнитьЗначения(1, "Количество");
	Ограничения.Свернуть(КлючевыеПоляСтрокой, "Количество");
	
	Если КлючевыеПоляСтрокой <> "Регион" Тогда
		ДанныеПоДвижимомуИмуществу.Индексы.Добавить(КлючевыеПоляСтрокой);
	КонецЕсли;
	
	Отбор = Новый Структура(КлючевыеПоляСтрокой);
	
	Для Каждого Ограничение Из Ограничения Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Ограничение);
		СтрокиПоОграничению = ДанныеПоДвижимомуИмуществу.НайтиСтроки(Отбор);
		Предел = Цел(Ограничение.Количество * КоэффициентОграничения); // предельное количество строк по указанным ключевым полям
		
		// Обходим строки начиная с первой после достижения предела (индекс = Предел) до конца массива найденных строк.
		Для Инд = Предел По СтрокиПоОграничению.ВГраница() Цикл
			СтрокаОС = СтрокиПоОграничению[Инд];
			СтрокаОС.ОсновноеСредство = АналитикаСвернутыхСтрок;
			СтрокаОС.ПредставлениеОС = АналитикаСвернутыхСтрокТекст;
		КонецЦикла;
		
	КонецЦикла;
	
	КолонкиСуммирования = Новый Массив;
	КолонкиСуммирования.Добавить("СреднегодоваяСтоимость");
	
	Для Месяц = 0 По 12 Цикл
		
		НомерМесяца = Месяц + 1;
		
		Если НомерМесяца = 13 Тогда
			Суффикс = "3112";
		Иначе
			Суффикс = "01" + Формат(НомерМесяца, "ЧЦ=2; ЧВН=; ЧФ=Ч");
		КонецЕсли;
		
		КолонкиСуммирования.Добавить("ОстаточнаяСтоимостьНа" + Суффикс);
		
	КонецЦикла;

	ДанныеПоДвижимомуИмуществу.Свернуть("Организация, ОсновноеСредство, ПредставлениеОС, Регион", СтрСоединить(КолонкиСуммирования, ","));
	
КонецПроцедуры

Функция ПредельноеКоличествоЗаписейРасшифровкиДвижимогоИмущества()

	Возврат 50000;

КонецФункции

#КонецОбласти

#Область РегламентированноеУведомлениеЛьготаПоНалогуНаИмущество

Процедура ПолучитьСведенияОПоказателяхЗаявленияОЛьготеПоНалогуНаИмущество(ПоказателиОтчета) Экспорт 
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомКадастрОбНО", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаНачСр", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаКонСр", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодНалЛьгот", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаАкт", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерАкт", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СтруктЕдАкт", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НаимДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВыдДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ПрПериодДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаНачПериод", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаКонПериод", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерДок", Истина, Ложь);
	
КонецПроцедуры 

Процедура ЗаполнитьЗаявлениеОЛьготеПоНалогуНаИмущество(ПараметрыОтчета, Контейнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	КонецПоследнегоНалоговогоПериода = 
		СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.ПоследнийОтчетныйПериодПоДатеУведомления(ПараметрыОтчета.ДатаПодписи);
		
	НачалоПериода = НачалоГода(КонецПоследнегоНалоговогоПериода);
		
	// Считаем, что есть смысл сообщать только о льготах, которые применялись с начала прошедшего налогового периода
	// и до текущего момента.
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	// Заявление подаем сразу за все объекты организации вместе с ОП в один налоговый орган
	Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация));
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	ПараметрыРасчета.Вставить("ПериодРасчета", КонецПоследнегоНалоговогоПериода);
	
	// Получим записи регистра сведений, с учетом перекрывающих друг друга исправлений.
	РасчетИмущественныхНалоговУП.СформироватьТаблицуСтавкиНалогаНаИмуществоПоОтдельнымОСЗаписи(ПараметрыРасчета,
																								НачалоПериода,
																								КонецПоследнегоНалоговогоПериода,
																								Неопределено);
	
	// Получим срез последних по временной таблице записей, сформированной выше.
	РасчетИмущественныхНалоговУП.СформироватьТаблицуСтавкиНалогаНаИмуществоПоОтдельнымОССрезПоследних(ПараметрыРасчета,
																										НачалоПериода,
																										Неопределено,
																										"СтавкиНалогаНаИмуществоПоОтдельнымОС_СрезПоследнихНаНачалоПериода");
																								
	// 1. Сначала получим все фактически применяемые льготы по "кадастровым" объектам с указанной даты (врем таблица ДействиеЛьготПоПериодам,
	// см. РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ТекстЗапросаДействиеЛьготПоПериодамДляКадастровыхОбъектов())
	// 2. Далее по каждому объекту выберем последние по времени действующие льготы (1-й и 2-й запросы пакета)
	// 3. Заключительным запросом выбираем подтверждающие документы по актуальным льготам, выбранным в п.1
	//		- в первом подзапросе выбираем документы в целом по организации
	//		- во втором подзапросе выбираем документы, относящиеся к конкретным объектам недвижимости
	
	ТекстЗапросаДействующиеЛьготыИПодтверждающиеДокументы =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДействиеЛьготПоПериодам.Период) КАК Период,
	|	ДействиеЛьготПоПериодам.Организация КАК Организация,
	|	ДействиеЛьготПоПериодам.ОсновноеСредство КАК ОсновноеСредство,
	|	ДействиеЛьготПоПериодам.КадастровыйНомер КАК КадастровыйНомер,
	|	ДействиеЛьготПоПериодам.ОснованиеЛьготы КАК ОснованиеЛьготы
	|ПОМЕСТИТЬ АктуальныеЗаписи
	|ИЗ
	|	ДействиеЛьготПоПериодам КАК ДействиеЛьготПоПериодам
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействиеЛьготПоПериодам.Организация,
	|	ДействиеЛьготПоПериодам.ОсновноеСредство,
	|	ДействиеЛьготПоПериодам.КадастровыйНомер,
	|	ДействиеЛьготПоПериодам.ОснованиеЛьготы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	КадастровыйНомер,
	|	ОснованиеЛьготы,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействиеЛьготПоПериодам.Организация КАК Организация,
	|	ДействиеЛьготПоПериодам.ОсновноеСредство КАК ОсновноеСредство,
	|	ДействиеЛьготПоПериодам.КадастровыйНомер КАК КадастровыйНомер,
	|	ДействиеЛьготПоПериодам.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ДействиеЛьготПоПериодам.НачалоДействияЛьготы КАК НачалоДействияЛьготы,
	|	ДействиеЛьготПоПериодам.ОкончаниеДействияЛьготы КАК ОкончаниеДействияЛьготы,
	|	ДействиеЛьготПоПериодам.ОснованиеЛьготы.КодЛьготы КАК КодЛьготы,
	|	ВЫБОР
	|		КОГДА ДействиеЛьготПоПериодам.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом
	|			ТОГДА ДействиеЛьготПоПериодам.ОснованиеЛьготы.ДатаНормативногоАкта
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРегиональногоЗакона,
	|	ВЫБОР
	|		КОГДА ДействиеЛьготПоПериодам.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом
	|			ТОГДА ДействиеЛьготПоПериодам.ОснованиеЛьготы.НомерНормативногоАкта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерРегиональногоЗакона,
	|	ДействиеЛьготПоПериодам.ОснованиеЛьготы.ОснованиеМестнойЛьготы КАК СтруктурнаяЕдиница
	|ИЗ
	|	ДействиеЛьготПоПериодам КАК ДействиеЛьготПоПериодам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АктуальныеЗаписи КАК АктуальныеЗаписи
	|		ПО ДействиеЛьготПоПериодам.Организация = АктуальныеЗаписи.Организация
	|			И ДействиеЛьготПоПериодам.ОсновноеСредство = АктуальныеЗаписи.ОсновноеСредство
	|			И ДействиеЛьготПоПериодам.КадастровыйНомер = АктуальныеЗаписи.КадастровыйНомер
	|			И ДействиеЛьготПоПериодам.ОснованиеЛьготы = АктуальныеЗаписи.ОснованиеЛьготы
	|			И ДействиеЛьготПоПериодам.Период = АктуальныеЗаписи.Период
	|ГДЕ
	|	(ДействиеЛьготПоПериодам.ОкончаниеДействияЛьготы = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ДействиеЛьготПоПериодам.ОкончаниеДействияЛьготы >= &НачалоПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	ОснованиеЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктуальныеЗаписи.Организация КАК Организация,
	|	АктуальныеЗаписи.ОсновноеСредство КАК ОсновноеСредство,
	|	АктуальныеЗаписи.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ПодтверждающиеДокументы.ПолноеНаименование КАК ПолноеНаименованиеДокумента,
	|	ПодтверждающиеДокументы.КемВыдан КАК КемВыдан,
	|	ПодтверждающиеДокументы.Дата КАК Дата,
	|	ПодтверждающиеДокументы.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СрокДействияОграничен,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.НачалоДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.ОкончаниеДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ОкончаниеДействия
	|ИЗ
	|	АктуальныеЗаписи КАК АктуальныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам КАК ПодтверждающиеДокументы
	|		ПО АктуальныеЗаписи.Организация = ПодтверждающиеДокументы.Организация
	|			И АктуальныеЗаписи.ОснованиеЛьготы = ПодтверждающиеДокументы.Владелец
	|ГДЕ
	|	НЕ ПодтверждающиеДокументы.ПрименяетсяКОтдельнымОбъектам
	|	И НЕ ПодтверждающиеДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктуальныеЗаписи.Организация,
	|	АктуальныеЗаписи.ОсновноеСредство,
	|	АктуальныеЗаписи.ОснованиеЛьготы,
	|	ПодтверждающиеДокументы.Ссылка.ПолноеНаименование,
	|	ПодтверждающиеДокументы.Ссылка.КемВыдан,
	|	ПодтверждающиеДокументы.Ссылка.Дата,
	|	ПодтверждающиеДокументы.Ссылка.Номер,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.Ссылка.НачалоДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.Ссылка.ОкончаниеДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	АктуальныеЗаписи КАК АктуальныеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам.Объекты КАК ПодтверждающиеДокументы
	|		ПО АктуальныеЗаписи.Организация = ПодтверждающиеДокументы.Ссылка.Организация
	|			И АктуальныеЗаписи.ОсновноеСредство = ПодтверждающиеДокументы.ОсновноеСредство
	|			И АктуальныеЗаписи.ОснованиеЛьготы = ПодтверждающиеДокументы.Ссылка.Владелец
	|ГДЕ
	|	ПодтверждающиеДокументы.Ссылка.ПрименяетсяКОтдельнымОбъектам
	|	И НЕ ПодтверждающиеДокументы.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	ОснованиеЛьготы";
	
	Запрос.Текст = РасчетИмущественныхНалоговУП.ТекстЗапросаДействиеЛьготПоПериодамДляКадастровыхОбъектов()
					+ ОбщегоНазначения.РазделительПакетаЗапросов()
					+ ТекстЗапросаДействующиеЛьготыИПодтверждающиеДокументы;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОбъектов = РезультатЗапроса[5].Выбрать();
	ВыборкаДокументов = РезультатЗапроса[6].Выбрать();
	ОтборДокументов = Новый Структура("Организация, ОсновноеСредство, ОснованиеЛьготы");
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		// Контейнер приходит с пустыми таблицами
		ДанныеСтраницыОбъекта = Контейнер.СведОбНО.Добавить();
		ДанныеСтраницыОбъекта.УИД = Новый УникальныйИдентификатор;
				
		ДанныеСтраницыОбъекта.НомКадастрОбНО = ВыборкаОбъектов.КадастровыйНомер;
		ДанныеСтраницыОбъекта.ДатаНачСр = ВыборкаОбъектов.НачалоДействияЛьготы;
		ДанныеСтраницыОбъекта.ДатаКонСр = ВыборкаОбъектов.ОкончаниеДействияЛьготы;
		ДанныеСтраницыОбъекта.КодНалЛьгот = ВыборкаОбъектов.КодЛьготы;
		ДанныеСтраницыОбъекта.ДатаАкт = ВыборкаОбъектов.ДатаРегиональногоЗакона;
		ДанныеСтраницыОбъекта.НомерАкт = ВыборкаОбъектов.НомерРегиональногоЗакона;
		ДанныеСтраницыОбъекта.СтруктЕдАкт = ВыборкаОбъектов.СтруктурнаяЕдиница;
		
		ЗаполнитьЗначенияСвойств(ОтборДокументов, ВыборкаОбъектов);
		
		Пока ВыборкаДокументов.НайтиСледующий(ОтборДокументов) Цикл 
			ДанныеСтраницыДокумента = Контейнер.СведДокПодтвЛьг.Добавить();
			ДанныеСтраницыДокумента.УИД = Новый УникальныйИдентификатор;
			ДанныеСтраницыДокумента.УИДРодителя = ДанныеСтраницыОбъекта.УИД;
			
			ДанныеСтраницыДокумента.НаимДок = ВыборкаДокументов.ПолноеНаименованиеДокумента;
			ДанныеСтраницыДокумента.ВыдДок = ВыборкаДокументов.КемВыдан;
			ДанныеСтраницыДокумента.ДатаДок = ВыборкаДокументов.Дата;
			ДанныеСтраницыДокумента.ПрПериодДок = ВыборкаДокументов.СрокДействияОграничен;
			ДанныеСтраницыДокумента.ДатаНачПериод = ВыборкаДокументов.НачалоДействия;
			ДанныеСтраницыДокумента.ДатаКонПериод = ВыборкаДокументов.ОкончаниеДействия;
			ДанныеСтраницыДокумента.НомерДок = ВыборкаДокументов.Номер;
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область РегламентированноеУведомлениеЛьготаПоТранспортномуЗемельномуНалогам

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияОЛьготеПоТранспортномуЗемельномуНалогу(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВидТС", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "МаркаТС", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "РегЗнакТС", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодНалЛьготТр", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СтруктЕдЗакон", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомКадастрЗУ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаНачСр", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаКонСр", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КодНалЛьготЗем", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаАкт", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерАкт", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "СтруктЕдАкт", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НаимДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВыдДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ПрПериодДок", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаНачПериод", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаКонПериод", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерДок", Истина, Ложь);
		
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//
Процедура ЗаполнитьЗаявлениеОЛьготеПоТранспортномуЗемельномуНалогу(ПараметрыОтчета, Контейнер) Экспорт

	КонецПоследнегоНалоговогоПериода = 
		СверкаСФНСПоИмущественнымНалогамФормыВызовСервера.ПоследнийОтчетныйПериодПоДатеУведомления(ПараметрыОтчета.ДатаПодписи);
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтчета.РегистрацияВИФНС, "Код");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	#Область ЛьготыПоТранспортнымСредствам
	
	ДокументСверкаСФНС = Документы.СверкаСФНСПоИмущественнымНалогам.НайтиСуществующий(
		ПараметрыОтчета.Организация,
		Перечисления.ВидыИмущественныхНалогов.ТранспортныйНалог,
		КонецПоследнегоНалоговогоПериода,
		КодИФНС);

	Если ЗначениеЗаполнено(ДокументСверкаСФНС) Тогда
		// Только те ТС из расчета за год, которые в сверке с расчетом ФНС помечены, как объекты с неучтенной льготой		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СверкаСФНСПоИмущественнымНалогамСверка.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ДанныеСверки
		|ИЗ
		|	Документ.СверкаСФНСПоИмущественнымНалогам.Сверка КАК СверкаСФНСПоИмущественнымНалогамСверка
		|ГДЕ
		|	СверкаСФНСПоИмущественнымНалогамСверка.Ссылка = &ДокументСверкаСФНС
		|	И СверкаСФНСПоИмущественнымНалогамСверка.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияСверкиИмущественныхНалогов.ОтправитьЗаявлениеОЛьготе)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетТранспортногоНалога.КодВидаТранспортногоСредства КАК КодВидаТС,
		|	РасчетТранспортногоНалога.Марка КАК Марка,
		|	РасчетТранспортногоНалога.РегистрационныйЗнак КАК РегистрационныйЗнак,
		|	РасчетТранспортногоНалога.КодНалоговойЛьготы КАК КодНалоговойЛьготы,
		|	РасчетТранспортногоНалога.РегиональныйКодЛьготы КАК РегиональныйКодЛьготы
		|ИЗ
		|	РегистрСведений.РасчетТранспортногоНалога КАК РасчетТранспортногоНалога
		|ГДЕ
		|	РасчетТранспортногоНалога.Организация В (&Организации)
		|	И РасчетТранспортногоНалога.ПериодРасчета = &ПериодРасчета
		|	И РасчетТранспортногоНалога.ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				ДанныеСверки.ОсновноеСредство
		|			ИЗ
		|				ДанныеСверки КАК ДанныеСверки)";
		
		Запрос.УстановитьПараметр("ДокументСверкаСФНС", ДокументСверкаСФНС);	
		Запрос.УстановитьПараметр("ПериодРасчета", КонецПоследнегоНалоговогоПериода);
		
	Иначе
		Период = ?(ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, ОбщегоНазначения.ТекущаяДатаПользователя());
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыРасчета.Вставить("ПериодРасчета", Период);
		ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
		
		РасчетИмущественныхНалоговУП.СформироватьТаблицуРегистрацияТранспортныхСредствСрезПоследних(ПараметрыРасчета, Период, Неопределено);

		// Все "действующие" ТС с льготами
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияТССрезПоследних.КодВидаТранспортногоСредства КАК КодВидаТС,
		|	РегистрацияТССрезПоследних.Марка КАК Марка,
		|	РегистрацияТССрезПоследних.РегистрационныйЗнак КАК РегистрационныйЗнак,
		|	РегистрацияТССрезПоследних.КодНалоговойЛьготы КАК КодНалоговойЛьготы,
		|	РегистрацияТССрезПоследних.РегиональныйКодЛьготы КАК РегиональныйКодЛьготы
		|ИЗ
		|	РегистрацияТранспортныхСредств_СрезПоследних КАК РегистрацияТССрезПоследних
		|ГДЕ
		|	РегистрацияТССрезПоследних.ВключатьВНалоговуюБазу
		|	И НЕ РегистрацияТССрезПоследних.НалоговаяЛьгота В (ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ПустаяССылка), ЗНАЧЕНИЕ(Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется))";
		
		Запрос.УстановитьПараметр("Период", Период);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация));
	
	ВыборкаТС = Запрос.Выполнить().Выбрать();

	// Подготовим соответствие кодов видов ТС, используемых в декларации по транспортному налогу,
	// и номеров категорий ТС, используемых в заявлении на льготу 
	КатегорииТСПоКодуВида = Документы.ПараметрыНачисленияТранспортногоНалога.КатегорииТСПоКодуВида();

	Пока ВыборкаТС.Следующий() Цикл
		
		// Контейнер приходит с пустой таблицей раздела 5 (Транспорт) 
		ДанныеСтраницы = Контейнер.Транспорт.Добавить();
		ДанныеСтраницы.УИД = Новый УникальныйИдентификатор;
		
		ДанныеСтраницы.ВидТС = КатегорииТСПоКодуВида[ВыборкаТС.КодВидаТС];
		ДанныеСтраницы.МаркаТС = ВыборкаТС.Марка;
		ДанныеСтраницы.РегЗнакТС = ВыборкаТС.РегистрационныйЗнак;
		ДанныеСтраницы.КодНалЛьготТр = ВыборкаТС.КодНалоговойЛьготы;
		ДанныеСтраницы.СтруктЕдЗакон = ВыборкаТС.РегиональныйКодЛьготы;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область ЛьготыПоЗемельнымУчасткам
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Считаем, что есть смысл сообщать только о льготах, которые применялись с начала прошедшего налогового периода
	// и до текущего момента.
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(КонецПоследнегоНалоговогоПериода));
	// Заявление подаем сразу за все объекты организации вместе с ОП в один налоговый орган
	Запрос.УстановитьПараметр("Организации", ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ПараметрыОтчета.Организация)); 
	
	Период = ?(ЗначениеЗаполнено(ПараметрыОтчета.ДатаПодписи), ПараметрыОтчета.ДатаПодписи, ОбщегоНазначения.ТекущаяДатаПользователя());
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыРасчета.Вставить("ПериодРасчета", Период);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Запрос.МенеджерВременныхТаблиц);
	
	РасчетИмущественныхНалоговУП.СформироватьТаблицуРегистрацияЗемельныхУчастковСрезПоследних(ПараметрыРасчета, Период, Неопределено);
	РасчетИмущественныхНалоговУП.СформироватьТаблицуРегистрацияЗемельныхУчастковЗаписи(ПараметрыРасчета, Период, Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегистрацияЗемельныхУчастковСрезПоследних.Организация КАК Организация,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияЗемельныхУчастковСрезПоследних.КадастровыйНомер КАК КадастровыйНомер,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыПоНалоговойБазе КАК ОснованиеЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастковСрезПоследних.НачалоДействияЛьготыПоНалоговойБазе КАК
	|		НачалоДействияЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОкончаниеДействияЛьготыПоНалоговойБазе КАК
	|		ОкончаниеДействияЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСуммыНалога КАК ОснованиеЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастковСрезПоследних.НачалоДействияЛьготыСнижениеСуммыНалога КАК
	|		НачалоДействияЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОкончаниеДействияЛьготыСнижениеСуммыНалога КАК
	|		ОкончаниеДействияЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСтавки КАК ОснованиеЛьготыСнижениеСтавки,
	|	РегистрацияЗемельныхУчастковСрезПоследних.НачалоДействияЛьготыСнижениеСтавки КАК НачалоДействияЛьготыСнижениеСтавки,
	|	РегистрацияЗемельныхУчастковСрезПоследних.ОкончаниеДействияЛьготыСнижениеСтавки КАК
	|		ОкончаниеДействияЛьготыСнижениеСтавки
	|ПОМЕСТИТЬ ВсеПрименявшиесяЛьготы
	|ИЗ
	|	РегистрацияЗемельныхУчастков_СрезПоследних КАК РегистрацияЗемельныхУчастковСрезПоследних
	|ГДЕ
	|	РегистрацияЗемельныхУчастковСрезПоследних.ВключатьВНалоговуюБазу
	|	И
	|		(РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыПоНалоговойБазе <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	ИЛИ
	|		РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСуммыНалога <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	ИЛИ
	|		РегистрацияЗемельныхУчастковСрезПоследних.ОснованиеЛьготыСнижениеСтавки <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияЗемельныхУчастков.Организация КАК Организация,
	|	РегистрацияЗемельныхУчастков.ОсновноеСредство КАК ОсновноеСредство,
	|	РегистрацияЗемельныхУчастков.КадастровыйНомер КАК КадастровыйНомер,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе КАК ОснованиеЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастков.НачалоДействияЛьготыПоНалоговойБазе КАК НачалоДействияЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастков.ОкончаниеДействияЛьготыПоНалоговойБазе КАК ОкончаниеДействияЛьготыПоНалоговойБазе,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога КАК ОснованиеЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастков.НачалоДействияЛьготыСнижениеСуммыНалога КАК НачалоДействияЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастков.ОкончаниеДействияЛьготыСнижениеСуммыНалога КАК
	|		ОкончаниеДействияЛьготыСнижениеСуммыНалога,
	|	РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки КАК ОснованиеЛьготыСнижениеСтавки,
	|	РегистрацияЗемельныхУчастков.НачалоДействияЛьготыСнижениеСтавки КАК НачалоДействияЛьготыСнижениеСтавки,
	|	РегистрацияЗемельныхУчастков.ОкончаниеДействияЛьготыСнижениеСтавки КАК ОкончаниеДействияЛьготыСнижениеСтавки
	|ИЗ
	|	РегистрацияЗемельныхУчастков_Записи КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.Период > &НачалоПериода
	|	И РегистрацияЗемельныхУчастков.Организация В (&Организации)
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|	И
	|		(РегистрацияЗемельныхУчастков.ОснованиеЛьготыПоНалоговойБазе <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	ИЛИ
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСуммыНалога <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|	ИЛИ
	|		РегистрацияЗемельныхУчастков.ОснованиеЛьготыСнижениеСтавки <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеПрименявшиесяЛьготы.Организация КАК Организация,
	|	ВсеПрименявшиесяЛьготы.ОсновноеСредство КАК ОсновноеСредство,
	|	ВсеПрименявшиесяЛьготы.КадастровыйНомер КАК КадастровыйНомер,
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыПоНалоговойБазе КАК ОснованиеЛьготы,
	|	ВсеПрименявшиесяЛьготы.НачалоДействияЛьготыПоНалоговойБазе КАК НачалоДействияЛьготы,
	|	ВсеПрименявшиесяЛьготы.ОкончаниеДействияЛьготыПоНалоговойБазе КАК ОкончаниеДействияЛьготы
	|ПОМЕСТИТЬ ДанныеЛьгот
	|ИЗ
	|	ВсеПрименявшиесяЛьготы КАК ВсеПрименявшиесяЛьготы
	|ГДЕ
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыПоНалоговойБазе <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВсеПрименявшиесяЛьготы.Организация,
	|	ВсеПрименявшиесяЛьготы.ОсновноеСредство,
	|	ВсеПрименявшиесяЛьготы.КадастровыйНомер,
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыСнижениеСуммыНалога,
	|	ВсеПрименявшиесяЛьготы.НачалоДействияЛьготыСнижениеСуммыНалога,
	|	ВсеПрименявшиесяЛьготы.ОкончаниеДействияЛьготыСнижениеСуммыНалога
	|ИЗ
	|	ВсеПрименявшиесяЛьготы КАК ВсеПрименявшиесяЛьготы
	|ГДЕ
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыСнижениеСуммыНалога <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВсеПрименявшиесяЛьготы.Организация,
	|	ВсеПрименявшиесяЛьготы.ОсновноеСредство,
	|	ВсеПрименявшиесяЛьготы.КадастровыйНомер,
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыСнижениеСтавки,
	|	ВсеПрименявшиесяЛьготы.НачалоДействияЛьготыСнижениеСтавки,
	|	ВсеПрименявшиесяЛьготы.ОкончаниеДействияЛьготыСнижениеСтавки
	|ИЗ
	|	ВсеПрименявшиесяЛьготы КАК ВсеПрименявшиесяЛьготы
	|ГДЕ
	|	ВсеПрименявшиесяЛьготы.ОснованиеЛьготыСнижениеСтавки <> ЗНАЧЕНИЕ(Справочник.ОснованияЛьготПоИмущественнымНалогам.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЛьгот.Организация КАК Организация,
	|	ДанныеЛьгот.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеЛьгот.КадастровыйНомер КАК КадастровыйНомер,
	|	ДанныеЛьгот.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ДанныеЛьгот.НачалоДействияЛьготы КАК НачалоДействияЛьготы,
	|	ДанныеЛьгот.ОкончаниеДействияЛьготы КАК ОкончаниеДействияЛьготы,
	|	ДанныеЛьгот.ОснованиеЛьготы.КодЛьготы КАК КодЛьготы,
	|	ВЫБОР
	|		КОГДА ДанныеЛьгот.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом
	|			ТОГДА ДанныеЛьгот.ОснованиеЛьготы.ДатаНормативногоАкта
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаНормативногоАкта,
	|	ВЫБОР
	|		КОГДА ДанныеЛьгот.ОснованиеЛьготы.УстановленаМестнымНормативнымАктом
	|			ТОГДА ДанныеЛьгот.ОснованиеЛьготы.НомерНормативногоАкта
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НомерНормативногоАкта,
	|	ДанныеЛьгот.ОснованиеЛьготы.ОснованиеМестнойЛьготы КАК СтруктурнаяЕдиница
	|ИЗ
	|	ДанныеЛьгот КАК ДанныеЛьгот
	|ГДЕ
	|	(ДанныеЛьгот.ОкончаниеДействияЛьготы = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ ДанныеЛьгот.ОкончаниеДействияЛьготы >= &НачалоПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	ОснованиеЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЛьгот.Организация КАК Организация,
	|	ДанныеЛьгот.ОсновноеСредство КАК ОсновноеСредство,
	|	ДанныеЛьгот.ОснованиеЛьготы КАК ОснованиеЛьготы,
	|	ПодтверждающиеДокументы.ПолноеНаименование КАК ПолноеНаименованиеДокумента,
	|	ПодтверждающиеДокументы.КемВыдан КАК КемВыдан,
	|	ПодтверждающиеДокументы.Дата КАК Дата,
	|	ПодтверждающиеДокументы.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СрокДействияОграничен,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.НачалоДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.ОкончаниеДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ОкончаниеДействия
	|ИЗ
	|	ДанныеЛьгот КАК ДанныеЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам КАК ПодтверждающиеДокументы
	|		ПО ДанныеЛьгот.Организация = ПодтверждающиеДокументы.Организация
	|		И ДанныеЛьгот.ОснованиеЛьготы = ПодтверждающиеДокументы.Владелец
	|ГДЕ
	|	НЕ ПодтверждающиеДокументы.ПрименяетсяКОтдельнымОбъектам
	|	И НЕ ПодтверждающиеДокументы.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЛьгот.Организация,
	|	ДанныеЛьгот.ОсновноеСредство,
	|	ДанныеЛьгот.ОснованиеЛьготы,
	|	ПодтверждающиеДокументы.Ссылка.ПолноеНаименование,
	|	ПодтверждающиеДокументы.Ссылка.КемВыдан,
	|	ПодтверждающиеДокументы.Ссылка.Дата,
	|	ПодтверждающиеДокументы.Ссылка.Номер,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.Ссылка.НачалоДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ПодтверждающиеДокументы.Ссылка.СрокДействияОграничен
	|			ТОГДА ПодтверждающиеДокументы.Ссылка.ОкончаниеДействия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|ИЗ
	|	ДанныеЛьгот КАК ДанныеЛьгот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПодтверждающиеЛьготыПоИмущественнымНалогам.Объекты КАК
	|			ПодтверждающиеДокументы
	|		ПО ДанныеЛьгот.Организация = ПодтверждающиеДокументы.Ссылка.Организация
	|		И ДанныеЛьгот.ОсновноеСредство = ПодтверждающиеДокументы.ОсновноеСредство
	|		И ДанныеЛьгот.ОснованиеЛьготы = ПодтверждающиеДокументы.Ссылка.Владелец
	|ГДЕ
	|	ПодтверждающиеДокументы.Ссылка.ПрименяетсяКОтдельнымОбъектам
	|	И НЕ ПодтверждающиеДокументы.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	ОснованиеЛьготы";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	
	ВыборкаОбъектов = РезультатЗапроса[2].Выбрать();
	ВыборкаДокументов = РезультатЗапроса[3].Выбрать();
	ОтборДокументов = Новый Структура("Организация, ОсновноеСредство, ОснованиеЛьготы");
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		// Контейнер приходит с пустыми таблицами
		ДанныеСтраницыОбъекта = Контейнер.Земля.Добавить();
		ДанныеСтраницыОбъекта.УИД = Новый УникальныйИдентификатор;
				
		ДанныеСтраницыОбъекта.НомКадастрЗУ = ВыборкаОбъектов.КадастровыйНомер;
		ДанныеСтраницыОбъекта.ДатаНачСр = ВыборкаОбъектов.НачалоДействияЛьготы;
		ДанныеСтраницыОбъекта.ДатаКонСр = ВыборкаОбъектов.ОкончаниеДействияЛьготы;
		ДанныеСтраницыОбъекта.КодНалЛьготЗем = ВыборкаОбъектов.КодЛьготы;
		ДанныеСтраницыОбъекта.ДатаАкт = ВыборкаОбъектов.ДатаНормативногоАкта;
		ДанныеСтраницыОбъекта.НомерАкт = ВыборкаОбъектов.НомерНормативногоАкта;
		ДанныеСтраницыОбъекта.СтруктЕдАкт = ВыборкаОбъектов.СтруктурнаяЕдиница;
		
		ЗаполнитьЗначенияСвойств(ОтборДокументов, ВыборкаОбъектов);
		
		Пока ВыборкаДокументов.НайтиСледующий(ОтборДокументов) Цикл 
			ДанныеСтраницыДокумента = Контейнер.ЛьготаДокументЗемля.Добавить();
			ДанныеСтраницыДокумента.УИД = Новый УникальныйИдентификатор;
			ДанныеСтраницыДокумента.УИДРодителя = ДанныеСтраницыОбъекта.УИД;
			
			ДанныеСтраницыДокумента.НаимДок = ВыборкаДокументов.ПолноеНаименованиеДокумента;
			ДанныеСтраницыДокумента.ВыдДок = ВыборкаДокументов.КемВыдан;
			ДанныеСтраницыДокумента.ДатаДок = ВыборкаДокументов.Дата;
			ДанныеСтраницыДокумента.ПрПериодДок = ВыборкаДокументов.СрокДействияОграничен;
			ДанныеСтраницыДокумента.ДатаНачПериод = ВыборкаДокументов.НачалоДействия;
			ДанныеСтраницыДокумента.ДатаКонПериод = ВыборкаДокументов.ОкончаниеДействия;
			ДанныеСтраницыДокумента.НомерДок = ВыборкаДокументов.Номер;
		КонецЦикла
		
	КонецЦикла;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДекларацииОРозничныхПродажахАлкоголя

#Область Приложение11ФормаОтчета2012Кв3

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000117", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000120", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000320", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000192", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000113", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000391", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000392", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000316", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	Если ЕстьОбособленныеПодразделения(ПараметрыОтчета) Тогда
		ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоПодразделениям(ПараметрыОтчета, Контейнер);
	Иначе
		ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоОрганизации(ПараметрыОтчета, Контейнер);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоОрганизации(ПараметрыОтчета, Контейнер) Экспорт
	
	СписокОрганизаций = Новый СписокЗначений();
	СписокОрганизаций.Добавить(ПараметрыОтчета.Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Запрос.УстановитьПараметр("Счет79", ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет41
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет60
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет79
	|;";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("Счет79", 		МассивСчетов79);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		Новый Граница(КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	АлкоНоменклатура.Ссылка КАК Номенклатура,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	АлкоНоменклатура.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.Наименование КАК П000010000101,
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.Код КАК П000010000102,
	|	ВЫРАЗИТЬ(АлкоНоменклатура.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000010000103,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент.ИНН КАК П000010000104,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент.КПП КАК П000010000105
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК АлкоНоменклатура
	|ГДЕ
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	0 КАК П000010000106,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 = АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000107,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000108,
	|	0 КАК П000010000109,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ТОГДА (ХозрасчетныйОбороты.КоличествоОборотДт - ХозрасчетныйОбороты.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000111,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000112,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000115,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000117,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000116,
	|	0 КАК П000010000120
	|ПОМЕСТИТЬ ТаблицаРаздела1
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В (&Счет41), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|			ИЛИ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|	И НЕ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	СУММА(ХозрасчетныйОстаткиНач.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНач, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиНач
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиНач.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиНач.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОстаткиКон.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал)
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиКон
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиКон.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиКон.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	СУММА(АлкогольнаяПродукция.П000010000106) КАК П000010000106,
	|	СУММА(АлкогольнаяПродукция.П000010000107) КАК П000010000107,
	|	СУММА(АлкогольнаяПродукция.П000010000108) КАК П000010000108,
	|	СУММА(АлкогольнаяПродукция.П000010000109) КАК П000010000109,
	|	СУММА(АлкогольнаяПродукция.П000010000111) КАК П000010000111,
	|	СУММА(АлкогольнаяПродукция.П000010000112) КАК П000010000112,
	|	СУММА(АлкогольнаяПродукция.П000010000115) КАК П000010000115,
	|	СУММА(АлкогольнаяПродукция.П000010000116) КАК П000010000116,
	|	СУММА(АлкогольнаяПродукция.П000010000117) КАК П000010000117,
	|	СУММА(АлкогольнаяПродукция.П000010000120) КАК П000010000120
	|ИЗ
	|	ТаблицаРаздела1 КАК АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000010000101,
	|	П000010000102,
	|	П000010000103,
	|	П000010000104,
	|	П000010000105";
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Раздел1 = Контейнер.Раздел1;
	СтраницаРаздел1 =  Раздел1[0].Данные[0].Значение;
	
	Пока Раздел1.Количество()>1 Цикл
		Контейнер.Раздел1.Удалить(1);
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>1 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(1);
	КонецЦикла;
	
	НС = 1;
	Раздел1Текущий = Раздел1[0];
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1].П000010000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	ПредставлениеПодразделения = СведенияОПодразделении(ПараметрыОтчета.Организация, ПараметрыОтчета.Организация.ИНН);
	СтраницаРаздел1.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
	Если Раздел1[0].ДополнительныеДанные.Количество() = 0 Тогда
		Раздел1[0].ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	Раздел1[0].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(1);
	КонецЦикла;
	
	ТаблицаПодразделения = ТаблицаЗапроса.Скопировать();
	
	Для Каждого Колонка Из ТаблицаПодразделения.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000100001", "П0000100003");
	КонецЦикла;

	НС = 1;
	Для Каждого СтрокаПодразделения Из ТаблицаПодразделения Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1].П000010000300 = НС;
		ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1], СтрокаПодразделения);
		НС = НС + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("СчетГТД", 		ПланыСчетов.Хозрасчетный.ГТД);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000020000101,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000020000102,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.РегистрационныйНомер
	|	КОНЕЦ КАК П000020000104,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП КАК П000020000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000106,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).РегистрационныйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК П000020000107,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО) КАК П000020000108,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период) КАК П000020000113,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000114,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии КАК ВидЛицензии,
	|	ХозрасчетныйГТД.СубконтоДт2 КАК П000020000115,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйГТД.СубконтоДт2 ЕСТЬ NULL 
	|				ТОГДА ХозрасчетныйГТД.КоличествоОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотДт
	|		КОНЕЦ * СведенияОбАлкогольнойПродукции.ОбъемДАЛ) КАК П000020000116
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&Счет41), &ВидСубконто, СчетКт В (&Счет60), &ВидКорСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт = &СчетГТД, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйГТД
	|			ПО ХозрасчетныйОбороты.СубконтоДт1 = ХозрасчетныйГТД.СубконтоДт1
	|				И ХозрасчетныйОбороты.Регистратор = ХозрасчетныйГТД.Регистратор
	|		ПО СведенияОбАлкогольнойПродукции.Ссылка = ХозрасчетныйОбороты.СубконтоДт1
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.РегистрационныйНомер
	|	КОНЕЦ,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период),
	|	ХозрасчетныйОбороты.Организация,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	ХозрасчетныйГТД.СубконтоДт2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).РегистрационныйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000101 КАК П000020000101,
	|	АлкогольнаяПродукция.П000020000102 КАК П000020000102,
	|	АлкогольнаяПродукция.П000020000103 КАК П000020000103,
	|	АлкогольнаяПродукция.П000020000104 КАК П000020000104,
	|	АлкогольнаяПродукция.П000020000105 КАК П000020000105,
	|	АлкогольнаяПродукция.П000020000106 КАК П000020000106,
	|	АлкогольнаяПродукция.П000020000107 КАК П000020000107,
	|	АлкогольнаяПродукция.П000020000108 КАК П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование КАК П000020000192,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК П000020000110,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000111,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000112,
	|	АлкогольнаяПродукция.П000020000113 КАК П000020000113,
	|	АлкогольнаяПродукция.П000020000114 КАК П000020000114,
	|	АлкогольнаяПродукция.П000020000115 КАК П000020000115,
	|	АлкогольнаяПродукция.Организация КАК Организация,
	|	СУММА(АлкогольнаяПродукция.П000020000116) КАК П000020000116
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала) КАК Период
	|				ИЗ
	|					Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|				ГДЕ
	|					ЕСТЬNULL(АлкогольнаяПродукция.П000020000113, &ДатаКон) >= ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|					И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|					И АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Владелец))
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000101,
	|	АлкогольнаяПродукция.П000020000102,
	|	АлкогольнаяПродукция.П000020000103,
	|	АлкогольнаяПродукция.П000020000104,
	|	АлкогольнаяПродукция.П000020000105,
	|	АлкогольнаяПродукция.П000020000106,
	|	АлкогольнаяПродукция.П000020000107,
	|	АлкогольнаяПродукция.П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана,
	|	АлкогольнаяПродукция.П000020000113,
	|	АлкогольнаяПродукция.П000020000114,
	|	АлкогольнаяПродукция.П000020000115,
	|	АлкогольнаяПродукция.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000020000101,
	|	П000020000102,
	|	П000020000103,
	|	П000020000113,
	|	П000020000115,
	|	П000020000106";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	
	Пока Раздел2.Количество()>1 Цикл
		Раздел2.Удалить(1);
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>1 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(1);
	КонецЦикла;
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>1 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(1);
	КонецЦикла;
	
	НС = 1;
	Раздел2Текущий = Раздел2[0];
	ТаблицаЗапроса.Колонки.Добавить("П000020000191");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СерияНомер = СокрЛП(СтрокаЗапроса.П000020000192);
		ПозицияРазделителя = СтрНайти(СерияНомер, ",");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрНайти(СерияНомер, " ");
		КонецЕсли;
		Если ПозицияРазделителя <> 0 Тогда
			СтрокаЗапроса.П000020000191 = СокрЛП(Лев(СерияНомер, ПозицияРазделителя - 1));
			СтрокаЗапроса.П000020000192 = СокрЛП(Сред(СерияНомер, ПозицияРазделителя + 1));
		КонецЕсли;
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1].П000020000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	
	ПредставлениеПодразделения = СведенияОПодразделении(ПараметрыОтчета.Организация, ПараметрыОтчета.Организация.ИНН);
	СтраницаРаздел2.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
	
	Если Раздел2[0].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел2[0].ДополнительныеДанные.Добавить(Новый Структура);
	КонецЕсли;
		
	Раздел2[0].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

	ТаблицаПодразделения = ТаблицаЗапроса.Скопировать();
	
	Для Каждого Колонка Из ТаблицаПодразделения.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000200001", "П0000200003");
	КонецЦикла;
	
	НС = 1;
	Для Каждого СтрокаПодразделения Из ТаблицаПодразделения Цикл
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1].П000020000300 = НС;
		ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1], СтрокаПодразделения);
		НС = НС + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2012Кв3ПоПодразделениям(ПараметрыОтчета, Контейнер) Экспорт
	
	СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	
	// Заполнение Раздел 1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	Запрос.УстановитьПараметр("Счет79", ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты);
	Запрос.УстановитьПараметр("Счет41", ПланыСчетов.Хозрасчетный.Товары);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет41
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет60
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = &Счет79";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("Счет79", 		МассивСчетов79);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		Новый Граница(КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета), ВидГраницы.Включая));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	АлкоНоменклатура.Ссылка КАК Номенклатура,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	АлкоНоменклатура.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.Наименование КАК П000010000101,
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.Код КАК П000010000102,
	|	ВЫРАЗИТЬ(АлкоНоменклатура.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000010000103,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент.ИНН КАК П000010000104,
	|	АлкоНоменклатура.ПроизводительИмпортерКонтрагент.КПП КАК П000010000105
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК АлкоНоменклатура
	|ГДЕ
	|	АлкоНоменклатура.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101 КАК П000010000101,
	|	АлкогольнаяПродукция.П000010000102 КАК П000010000102,
	|	АлкогольнаяПродукция.П000010000103 КАК П000010000103,
	|	АлкогольнаяПродукция.П000010000104 КАК П000010000104,
	|	АлкогольнаяПродукция.П000010000105 КАК П000010000105,
	|	ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	0 КАК П000010000106,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 = АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000107,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И ХозрасчетныйОбороты.КорСубконто1 <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000108,
	|	0 КАК П000010000109,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ТОГДА (ХозрасчетныйОбороты.КоличествоОборотДт - ХозрасчетныйОбороты.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000111,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.КорСчет В (&Счет60)
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет79))
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000112,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000113,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000115,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000117,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|					И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					И НЕ ХозрасчетныйОбороты.КорСчет В (&Счет79))
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров)
	|					ИЛИ (ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000116,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|					ИЛИ ХозрасчетныйОбороты.КорСчет В (&Счет79)
	|				ТОГДА ХозрасчетныйОбороты.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК П000010000118,
	|	0 КАК П000010000120
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В (&Счет41), &ВидСубконто, Организация В (&СписокОрганизаций), , ) КАК ХозрасчетныйОбороты
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОбороты.Субконто1
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Счет41)
	|			ИЛИ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|			ИЛИ ХозрасчетныйОбороты.Подразделение <> ХозрасчетныйОбороты.ПодразделениеКор
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)
	|	И НЕ ХозрасчетныйОбороты.КорСчет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОбороты.Подразделение,
	|	ХозрасчетныйОбороты.ПодразделениеКор,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.КорСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиНач.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстаткиНач.Организация,
	|	NULL,
	|	СУММА(ХозрасчетныйОстаткиНач.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаНач, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиНач
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиНач.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиНач.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиНач.Подразделение,
	|	ХозрасчетныйОстаткиНач.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиКон.Подразделение,
	|	NULL,
	|	ХозрасчетныйОстаткиКон.Организация,
	|	NULL,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ХозрасчетныйОстаткиКон.КоличествоОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал)
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет В (&Счет41), , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстаткиКон
	|		ПО АлкогольнаяПродукция.Номенклатура = ХозрасчетныйОстаткиКон.Субконто1
	|ГДЕ
	|	НЕ ХозрасчетныйОстаткиКон.Счет ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000010000101,
	|	АлкогольнаяПродукция.П000010000102,
	|	АлкогольнаяПродукция.П000010000103,
	|	АлкогольнаяПродукция.П000010000104,
	|	АлкогольнаяПродукция.П000010000105,
	|	ХозрасчетныйОстаткиКон.Подразделение,
	|	ХозрасчетныйОстаткиКон.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000010000101,
	|	П000010000102,
	|	П000010000103,
	|	П000010000104,
	|	П000010000105";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("СсылкаПодразделение");
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаЗапроса.Подразделение) Тогда
			СтрокаЗапроса.СсылкаПодразделение = ПолучитьОбособленноеПодразделение(СтрокаЗапроса.Подразделение);
		Иначе
			СтрокаЗапроса.СсылкаПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.Организация), СтрокаЗапроса.Организация, ПараметрыОтчета.Организация);
		КонецЕсли;
		Если СтрокаЗапроса.П000010000113 > 0 Тогда
			Если СтрокаЗапроса.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапроса.Подразделение = СтрокаЗапроса.КорПодразделение Тогда
				СтрокаЗапроса.П000010000113 = 0;
			Иначе
				СсылкаКорПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.КорПодразделение), ПолучитьОбособленноеПодразделение(СтрокаЗапроса.КорПодразделение), СтрокаЗапроса.Организация);
				Если СтрокаЗапроса.СсылкаПодразделение = СсылкаКорПодразделение Тогда
					СтрокаЗапроса.П000010000113 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаЗапроса.П000010000113 = 0;
		КонецЕсли;
		Если СтрокаЗапроса.П000010000118 > 0 Тогда
			Если СтрокаЗапроса.КорСчет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаЗапроса.Подразделение = СтрокаЗапроса.КорПодразделение Тогда
				СтрокаЗапроса.П000010000118 = 0;
			Иначе
				СсылкаКорПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.КорПодразделение), ПолучитьОбособленноеПодразделение(СтрокаЗапроса.КорПодразделение), СтрокаЗапроса.Организация);
				Если СтрокаЗапроса.СсылкаПодразделение = СсылкаКорПодразделение Тогда
					СтрокаЗапроса.П000010000118 = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаЗапроса.П000010000118 = 0;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Свернуть("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105, СсылкаПодразделение",
							"П000010000106, П000010000107, П000010000108, П000010000111, П000010000112, П000010000113, П000010000115, П000010000116, П000010000117, П000010000118");
	ТаблицаЗапроса.Сортировать("СсылкаПодразделение, П000010000101, П000010000102, П000010000103, П000010000104, П000010000105");
		
	ТаблицаПоОрганизации = ТаблицаЗапроса.Скопировать();
	ТаблицаПоОрганизации.Свернуть("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105",
								"П000010000106, П000010000107, П000010000108, П000010000111, П000010000112, П000010000113, П000010000115, П000010000116, П000010000117, П000010000118");
	ТаблицаПоОрганизации.Сортировать("П000010000101, П000010000102, П000010000103, П000010000104, П000010000105");
	
	Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000100001", "П0000100003");
	КонецЦикла;
	
	ДеревоПоПодразделениям = ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаЗапроса, "СсылкаПодразделение");
	
	Раздел1 = Контейнер.Раздел1;
	СтраницаРаздел1 =  Раздел1[0].Данные[0].Значение;
	
	СтраницаРаздел1.ОбособленноеПодразделение = "";
	
	Пока Раздел1.Количество()>1 Цикл
		Контейнер.Раздел1.Удалить(Контейнер.Раздел1.Индекс(Контейнер.Раздел1[1]));
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>0 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Индекс(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001[0]));
	КонецЦикла;
	
	Пока Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>0 Цикл
		Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
		Контейнер.Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003[0]));
	КонецЦикла;
	
	Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
	Раздел1[0].ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
	
	НС = 1;
	Раздел1Текущий = Раздел1[0];
	
	Для Каждого СтрокаЗапроса Из ТаблицаПоОрганизации Цикл
		
		Если НС > 1 Тогда 
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
		КонецЕсли;
		Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1].П000010000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	НомерПодразделения = 0;
	
	Для Каждого Подразделение Из ДеревоПоПодразделениям.Строки Цикл
		
		НомерТекущейСтраницы = Раздел1.Количество();
		
		Если НомерПодразделения > 0 Тогда	
			
			Раздел1.Добавить().Данные = Новый СписокЗначений();
					
			СтруктураНовойТаблицыМногостраничныхРазделов = Новый Структура();
			Для Каждого Показатель Из Раздел1[0].Данные[0].Значение Цикл
				Если Неопределено = Показатель.Значение Тогда 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ);
				Иначе 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЕсли;
			КонецЦикла;
			
			Раздел1[НомерТекущейСтраницы].Данные.Добавить(СтруктураНовойТаблицыМногостраничныхРазделов); 
			Раздел1Текущий = Раздел1[НомерТекущейСтраницы];
			СтраницаРаздел1 =  Раздел1Текущий.Данные[0].Значение;

			Контейнер.Раздел1_ДанныеДопСтрок1.Очистить();
			Контейнер.Раздел1_ХранилищеДанныхДопСтрок1.Добавить();
			
			Контейнер.Раздел1_ДанныеДопСтрок2.Очистить();
			Контейнер.Раздел1_ХранилищеДанныхДопСтрок2.Добавить();
			
			ИндексПоследнего1 = НомерПодразделения; 
			ИндексПоследнего2 = НомерПодразделения; 
			
			СписокДопСтрокРаздел1  = Новый Структура();
			СписокДопСтрокРаздел1.Вставить("П0000100001", Контейнер.Раздел1_ХранилищеДанныхДопСтрок1[ИндексПоследнего1].Таблица);
			СписокДопСтрокРаздел1.Вставить("П0000100003", Контейнер.Раздел1_ХранилищеДанныхДопСтрок2[ИндексПоследнего2].Таблица);
		
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок = Новый СписокЗначений();
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок.Вставить(0, СписокДопСтрокРаздел1, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			
			Пока Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Количество()>0 Цикл
				Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Удалить(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Индекс(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001[0]));
			КонецЦикла;
			
			Пока Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>0 Цикл
				Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
				Контейнер.Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003[0]));
			КонецЦикла;
			
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100001.Добавить();
			Раздел1[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
						
		КонецЕсли;
		
		Раздел1 = Контейнер.Раздел1;
		СтраницаРаздел1 =  Раздел1[НомерПодразделения].Данные[0].Значение;
						
		Пока Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
			Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(
			Контейнер.Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Индекс(
			Контейнер.Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003[1]));
		КонецЦикла;
		
		ПредставлениеПодразделения = СведенияОПодразделении(Подразделение.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		СтраницаРаздел1.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
		Если Раздел1[НомерПодразделения].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел1[НомерПодразделения].ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		
		Раздел1[НомерПодразделения].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Пока Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Количество()>1 Цикл
			Раздел1[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000100003.Удалить(1);
		КонецЦикла;
		
		НС = 1;
		Раздел1Текущий = Раздел1[НомерПодразделения];
		
		Для Каждого СтрокаПодразделения Из Подразделение.Строки Цикл
			
			Если НС > 1 Тогда 
				Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003.Добавить();
			КонецЕсли;
			Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1].П000010000300 = НС;
			ЗаполнитьЗначенияСвойств(Раздел1Текущий.ДанныеДопСтрок[0].Значение.П0000100003[НС - 1], СтрокаПодразделения);
			НС = НС + 1;
			
		КонецЦикла;
		
		НомерПодразделения = НомерПодразделения + 1;
		
	КонецЦикла;
	
	// Заполнение Раздел 2
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет60", 		МассивСчетов60);
	Запрос.УстановитьПараметр("Счет41", 		МассивСчетов41);
	Запрос.УстановитьПараметр("СчетГТД", 		ПланыСчетов.Хозрасчетный.ГТД);
	Запрос.УстановитьПараметр("ВидСубконто", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидКорСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("СписокОрганизаций", 	СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач", 		НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	ТекстШаблон =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000020000101,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000020000102,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000103,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НалоговыйНомер
	|	КОНЕЦ КАК П000020000104,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП КАК П000020000105,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000106,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК П000020000107,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО) КАК П000020000108,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период) КАК П000020000113,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000114,
	|	ХозрасчетныйОбороты.ПодразделениеДт КАК Подразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии КАК ВидЛицензии,
	|	ХозрасчетныйГТД.СубконтоДт2 КАК П000020000115,
	|	ХозрасчетныйОбороты.СубконтоКт1,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ХозрасчетныйГТД.СубконтоДт2 ЕСТЬ NULL 
	|				ТОГДА ХозрасчетныйГТД.КоличествоОборотДт
	|			ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотДт
	|		КОНЕЦ * СведенияОбАлкогольнойПродукции.ОбъемДАЛ) КАК П000020000116
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&Счет41), &ВидСубконто, СчетКт В (&Счет60), &ВидКорСубконто, Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОбороты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт = &СчетГТД, , , , Организация В (&СписокОрганизаций)) КАК ХозрасчетныйГТД
	|			ПО ХозрасчетныйОбороты.СубконтоДт1 = ХозрасчетныйГТД.СубконтоДт1
	|				И ХозрасчетныйОбороты.Регистратор = ХозрасчетныйГТД.Регистратор
	|		ПО СведенияОбАлкогольнойПродукции.Ссылка = ХозрасчетныйОбороты.СубконтоДт1
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НалоговыйНомер
	|	КОНЕЦ,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП,
	|	ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1.НаименованиеПолное КАК СТРОКА(200)),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).СтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).ИНН
	|		ИНАЧЕ ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).НалоговыйНомер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.СубконтоКт1 КАК Справочник.Контрагенты).КПП, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).ДатаВходящегоДокумента, ХозрасчетныйОбороты.Период),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.ПриобретениеТоваровУслуг).НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	ХозрасчетныйОбороты.ПодразделениеДт,
	|	ХозрасчетныйОбороты.Организация,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии,
	|	ХозрасчетныйГТД.СубконтоДт2,
	|	ХозрасчетныйОбороты.СубконтоКт1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000101 КАК П000020000101,
	|	АлкогольнаяПродукция.П000020000102 КАК П000020000102,
	|	АлкогольнаяПродукция.П000020000103 КАК П000020000103,
	|	АлкогольнаяПродукция.П000020000104 КАК П000020000104,
	|	АлкогольнаяПродукция.П000020000105 КАК П000020000105,
	|	АлкогольнаяПродукция.П000020000106 КАК П000020000106,
	|	АлкогольнаяПродукция.П000020000107 КАК П000020000107,
	|	АлкогольнаяПродукция.П000020000108 КАК П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование КАК П000020000192,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК П000020000110,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000111,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000112,
	|	АлкогольнаяПродукция.П000020000113 КАК П000020000113,
	|	АлкогольнаяПродукция.П000020000114 КАК П000020000114,
	|	АлкогольнаяПродукция.П000020000115 КАК П000020000115,
	|	АлкогольнаяПродукция.Подразделение КАК Подразделение,
	|	АлкогольнаяПродукция.Организация КАК Организация,
	|	СУММА(АлкогольнаяПродукция.П000020000116) КАК П000020000116
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала) КАК Период
	|				ИЗ
	|					Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|				ГДЕ
	|					ЕСТЬNULL(АлкогольнаяПродукция.П000020000113, &ДатаКон) >= ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|					И АлкогольнаяПродукция.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|					И АлкогольнаяПродукция.СубконтоКт1 = ЛицензииПоставщиковАлкогольнойПродукции.Владелец))
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000101,
	|	АлкогольнаяПродукция.П000020000102,
	|	АлкогольнаяПродукция.П000020000103,
	|	АлкогольнаяПродукция.П000020000104,
	|	АлкогольнаяПродукция.П000020000105,
	|	АлкогольнаяПродукция.П000020000106,
	|	АлкогольнаяПродукция.П000020000107,
	|	АлкогольнаяПродукция.П000020000108,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана,
	|	АлкогольнаяПродукция.П000020000113,
	|	АлкогольнаяПродукция.П000020000114,
	|	АлкогольнаяПродукция.П000020000115,
	|	АлкогольнаяПродукция.Подразделение,
	|	АлкогольнаяПродукция.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	П000020000101,
	|	П000020000102,
	|	П000020000103,
	|	П000020000113,
	|	П000020000115,
	|	П000020000106";
	
	Запрос.Текст = ТекстШаблон;
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗапроса.Колонки.Добавить("СсылкаПодразделение");
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаЗапроса.Подразделение) Тогда
			СтрокаЗапроса.СсылкаПодразделение = ПолучитьОбособленноеПодразделение(СтрокаЗапроса.Подразделение);
		Иначе
			СтрокаЗапроса.СсылкаПодразделение = ?(ЗначениеЗаполнено(СтрокаЗапроса.Организация), СтрокаЗапроса.Организация, ПараметрыОтчета.Организация);
		КонецЕсли;
	КонецЦикла;
	
	Раздел2 = Контейнер.Раздел2;
	СтраницаРаздел2 =  Раздел2[0].Данные[0].Значение;
	
	СтраницаРаздел2.ОбособленноеПодразделение = "";
	
	Пока Раздел2.Количество()>1 Цикл
		Контейнер.Раздел2.Удалить(Контейнер.Раздел2.Индекс(Контейнер.Раздел2[1]));
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>0 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Индекс(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001[0]));
	КонецЦикла;
	
	Пока Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>0 Цикл
		Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
		Контейнер.Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003[0]));
	КонецЦикла;
	
	Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
	Раздел2[0].ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
		
	НС = 1;
	Раздел2Текущий = Раздел2[0];

	ТаблицаЗапроса.Колонки.Добавить("П000020000191");
	
	Для Каждого СтрокаЗапроса Из ТаблицаЗапроса Цикл
		
		СерияНомер = СокрЛП(СтрокаЗапроса.П000020000192);
		ПозицияРазделителя = СтрНайти(СерияНомер, ",");
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрНайти(СерияНомер, " ");
		КонецЕсли;
		Если ПозицияРазделителя <> 0 Тогда
			СтрокаЗапроса.П000020000191 = СокрЛП(Лев(СерияНомер, ПозицияРазделителя - 1));
			СтрокаЗапроса.П000020000192 = СокрЛП(Сред(СерияНомер, ПозицияРазделителя + 1));
		КонецЕсли;
		
		Если НС > 1 Тогда 
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
		КонецЕсли;
		Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1].П000020000100 = НС;
	 	ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200001[НС - 1], СтрокаЗапроса);
		НС = НС + 1;
		
	КонецЦикла;
	
	// Заполнение информации о подразделениях в Раздел2
	
	Для Каждого Колонка Из ТаблицаЗапроса.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "П0000200001", "П0000200003");
	КонецЦикла;
	
	ДеревоПоПодразделениям = ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаЗапроса, "СсылкаПодразделение");
	
	НомерПодразделения = 0;
	
	Для Каждого Подразделение Из ДеревоПоПодразделениям.Строки Цикл 
		
		НомерТекущейСтраницы = Раздел2.Количество();
		
		Если НомерПодразделения > 0 Тогда	
			
			Раздел2.Добавить().Данные = Новый СписокЗначений();
					
			СтруктураНовойТаблицыМногостраничныхРазделов = Новый Структура();
			Для Каждого Показатель Из Раздел2[0].Данные[0].Значение Цикл
				Если Неопределено = Показатель.Значение Тогда 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ);
				Иначе 
					СтруктураНовойТаблицыМногостраничныхРазделов.Вставить(Показатель.Ключ, ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Показатель.Значение)));
				КонецЕсли;
			КонецЦикла;
			
			Раздел2[НомерТекущейСтраницы].Данные.Добавить(СтруктураНовойТаблицыМногостраничныхРазделов); 
			Раздел2Текущий = Раздел2[НомерТекущейСтраницы];
			СтраницаРаздел2 =  Раздел2Текущий.Данные[0].Значение;

			Контейнер.Раздел2_ДанныеДопСтрок1.Очистить();
			Контейнер.Раздел2_ХранилищеДанныхДопСтрок1.Добавить();
			
			Контейнер.Раздел2_ДанныеДопСтрок2.Очистить();
			Контейнер.Раздел2_ХранилищеДанныхДопСтрок2.Добавить();
			
			ИндексПоследнего1 = НомерПодразделения; 
			ИндексПоследнего2 = НомерПодразделения; 
			
			СписокДопСтрокРаздел2  = Новый Структура();
			СписокДопСтрокРаздел2.Вставить("П0000200001", Контейнер.Раздел2_ХранилищеДанныхДопСтрок1[ИндексПоследнего1].Таблица);
			СписокДопСтрокРаздел2.Вставить("П0000200003", Контейнер.Раздел2_ХранилищеДанныхДопСтрок2[ИндексПоследнего2].Таблица);
		
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок = Новый СписокЗначений();
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок.Вставить(0, СписокДопСтрокРаздел2, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						 			
			Пока Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Количество()>0 Цикл
				Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Удалить(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Индекс(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001[0]));
			КонецЦикла;
			
			Пока Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>0 Цикл
				Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
				Контейнер.Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003[0]));
			КонецЦикла;
			
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200001.Добавить();
			Раздел2[НомерТекущейСтраницы].ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
			
		КонецЕсли;
		
		Раздел2 = Контейнер.Раздел2;
		СтраницаРаздел2 =  Раздел2[НомерПодразделения].Данные[0].Значение;
						
		Пока Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Количество()>1 Цикл
			Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Удалить(
			Контейнер.Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003.Индекс(
			Контейнер.Раздел2[НомерПодразделения].ДанныеДопСтрок[0].Значение.П0000200003[1]));
		КонецЦикла;
		
		Раздел2Текущий = Раздел2[НомерПодразделения];
		
		Если Подразделение.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
	
		ПредставлениеПодразделения = СведенияОПодразделении(Подразделение.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		СтраницаРаздел2.ОбособленноеПодразделение = ОписаниеПодразделения(ПредставлениеПодразделения);
		
		Если Раздел2[НомерПодразделения].ДополнительныеДанные.Количество() = 0 Тогда
			Раздел2[НомерПодразделения].ДополнительныеДанные.Добавить(Новый Структура);
		КонецЕсли;
		
		Раздел2[НомерПодразделения].ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		НС = 1;
		Для Каждого СтрокаПодразделения Из Подразделение.Строки Цикл
			
			Если НС > 1 Тогда 
				Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003.Добавить();
			КонецЕсли;
			Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1].П000020000300 = НС;
			ЗаполнитьЗначенияСвойств(Раздел2Текущий.ДанныеДопСтрок[0].Значение.П0000200003[НС - 1], СтрокаПодразделения);
			НС = НС + 1;
			
		КонецЦикла;
		
		НомерПодразделения = НомерПодразделения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение11ФормаОтчета2014Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000117", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000191", Истина, Ложь);	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000192", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000113", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000391", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000392", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000316", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Ссылка КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000010000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортер,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000010000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН КАК П000010000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	&УсловиеКорСчетаГДЕ
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	Если ВестиУчетПоПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаГДЕ",
			"(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) <> ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение))
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаГДЕ", "ИСТИНА");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000313) КАК П000010000313,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317,
	|	СУММА(Сводный.П000010000318) КАК П000010000318
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА 0
	|						ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000313,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000318,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|				ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|			ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|	ГДЕ
	|		ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстатки КАК НачальныеОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|			ПО АлкогольнаяПродукция.Номенклатура = НачальныеОстатки.Номенклатура
	|	ГДЕ
	|		НачальныеОстатки.Номенклатура ЕСТЬ НЕ NULL ) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Ссылка КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии КАК ВидЛицензии,
	|	СведенияОбАлкогольнойПродукции.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000020000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортер,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН КАК П000020000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.РегистрационныйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000313,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000314,
	|	КоличествоИзГТД.НомерГТД КАК П000020000315,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000316,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ВидЛицензии КАК ВидЛицензии,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|			ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|				И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО ОборотыЗаПериод.Регистратор = ПриобретениеТоваровУслуг.Ссылка
	|		ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|ГДЕ
	|	ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.РегистрационныйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ВидЛицензии,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ВидЛицензии,
	|	П000020000313
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_Результат()
	
	ТекстЗапроса =

	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.ВидЛицензии КАК ВидЛицензии,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|			И ДанныеОтчета.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|			И ДанныеОтчета.П000020000313 >= ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.ВидЛицензии,
	|	ДанныеОтчета.П000020000313
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	ВидЛицензии,
	|	П000020000313
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000020000301 КАК П000020000301,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	ДанныеОтчета.П000020000303 КАК П000020000303,
	|	ДанныеОтчета.П000020000304 КАК П000020000304,
	|	ДанныеОтчета.П000020000305 КАК П000020000305,
	|	ДанныеОтчета.П000020000306 КАК П000020000306,
	|	ДанныеОтчета.П000020000307 КАК П000020000307,
	|	ДанныеОтчета.П000020000308 КАК П000020000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование КАК П000020000392,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК П000020000310,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК П000020000311,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК П000020000312,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	ДанныеОтчета.П000020000314 КАК П000020000314,
	|	ДанныеОтчета.П000020000315 КАК П000020000315,
	|	ДанныеОтчета.П000020000316 КАК П000020000316,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументПоступления КАК ДокументПоступления,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.ВидЛицензии = ДатыПоследнихЛицензий.ВидЛицензии
	|			И ДанныеОтчета.П000020000313 = ДатыПоследнихЛицензий.П000020000313
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение11ФормаОтчета2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВестиУчетПоПодразделениям = ЕстьОбособленныеПодразделения(ПараметрыОтчета);
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	// Заполнение Раздел 1
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);

	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел1"];

	
	Раздел                          = Контейнер.Раздел1;
	Раздел_ТЗ_Хранилище             = Контейнер.Раздел1_ТЗ_Хранилище;
	Раздел_СервисРегистров          = Контейнер.Раздел1_СервисРегистров;
	Раздел_СервисРегистровУдаленные = Контейнер.Раздел1_СервисРегистровУдаленные;
		
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
				
	Раздел_СервисРегистров.Очистить();
	ИндексСтраницы = -1;
	ИдГруппы = "П0000100003";
	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);

	
	// Заполнение Раздел 2.
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение11ФормаОтчета2014Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел2"];
		
	Раздел	 							= Контейнер.Раздел2;
	Раздел_ТЗ_Хранилище     			= Контейнер.Раздел2_ТЗ_Хранилище;
	Раздел_СервисРегистров        		= Контейнер.Раздел2_СервисРегистров;
	Раздел_СервисРегистровУдаленные  	= Контейнер.Раздел2_СервисРегистровУдаленные;
		
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	Раздел_СервисРегистров.Очистить();
	
	ИндексСтраницы = -1;
	ИдГруппы = "П0000200003";

	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		СерияНомер = Новый Структура("П000020000391,П000020000392");
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			СерияНомерТекст = СокрЛП(Выборка.П000020000392);
			ПозицияРазделителя = Найти(СерияНомерТекст, ",");
			Если ПозицияРазделителя = 0 Тогда
				ПозицияРазделителя = Найти(СерияНомерТекст, " ");
			КонецЕсли;
			Если ПозицияРазделителя <> 0 Тогда
				СерияНомер.П000020000391 = СокрЛП(Лев(СерияНомерТекст, ПозицияРазделителя - 1));
				СерияНомер.П000020000392 = СокрЛП(Сред(СерияНомерТекст, ПозицияРазделителя + 1));
			Иначе
				СерияНомер.П000020000391 = Неопределено;
				СерияНомер.П000020000392 = СерияНомерТекст;		
			КонецЕсли;

			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, СерияНомер);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Приложение25ФормаОтчета2019Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт

	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000319", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000320", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000313", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000313", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000010000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000010000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ИЛИ &ДополнительноеУсловиеПоПодразделениям)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеПоПодразделениям",
		?(ВестиУчетПоПодразделениям, "ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) <> ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)", "ЛОЖЬ"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000310) КАК П000010000310,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000314) КАК П000010000314,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|							ТОГДА 0
	|						ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000310,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000314,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотКт - ОборотыЗаПериод.КоличествоОборотДт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|			ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		НачальныеОстатки КАК НачальныеОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО НачальныеОстатки.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000020000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000020000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ОборотыЗаПериод.Период) КАК П000020000310,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК П000020000311,
	|	КоличествоИзГТД.НомерГТД КАК П000020000312,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000313,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОборотыЗаПериод.Регистратор = ДанныеПервичныхДокументов.Документ
	|			И ОборотыЗаПериод.Организация = ДанныеПервичныхДокументов.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.П000020000310 КАК П000020000310,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции) КАК КодВидаПродукции,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии) КАК ВидЛицензии,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ДанныеОтчета.П000020000302 = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции = """")
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво))
	|			И ДанныеОтчета.П000020000310 >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|			И (ДанныеОтчета.П000020000310 <= ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Поставщик ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.П000020000310,
	|	ДанныеОтчета.П000020000302
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000020000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000020000301 КАК П000020000301,
	|	ДанныеОтчета.П000020000302 КАК П000020000302,
	|	ДанныеОтчета.П000020000303 КАК П000020000303,
	|	ДанныеОтчета.П000020000304 КАК П000020000304,
	|	ДанныеОтчета.П000020000305 КАК П000020000305,
	|	ДанныеОтчета.П000020000306 КАК П000020000306,
	|	ДанныеОтчета.П000020000307 КАК П000020000307,
	|	ДанныеОтчета.П000020000308 КАК П000020000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ВидДеятельности КАК П000020000309,
	|	ДанныеОтчета.П000020000310 КАК П000020000310,
	|	ДанныеОтчета.П000020000311 КАК П000020000311,
	|	ДанныеОтчета.П000020000312 КАК П000020000312,
	|	ДанныеОтчета.П000020000313 КАК П000020000313,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументДвижения КАК ДокументДвижения,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|				И ДатыПоследнихЛицензий.КодВидаПродукции = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.Период
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.П000020000310 = ДатыПоследнихЛицензий.П000020000310
	|			И ДанныеОтчета.П000020000302 = ДатыПоследнихЛицензий.П000020000302
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыПоследнихЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_ИсточникиДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000030000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000030000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000030000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000030000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000030000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотКт - ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотКт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПриобретения).ДатаВходящегоДокумента
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПриобретения).НомерВходящегоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	-ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Контрагенты),
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение),
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета7602),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			СчетКт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000030000301 КАК П000030000301,
	|	АлкогольнаяПродукция.П000030000302 КАК П000030000302,
	|	АлкогольнаяПродукция.П000030000303 КАК П000030000303,
	|	АлкогольнаяПродукция.П000030000304 КАК П000030000304,
	|	АлкогольнаяПродукция.П000030000305 КАК П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000030000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000030000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000030000308,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента КАК П000030000310,
	|	ОборотыЗаПериод.НомерВходящегоДокумента КАК П000030000311,
	|	КоличествоИзГТД.НомерГТД КАК П000030000312,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотКт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000030000313,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000030000301,
	|	АлкогольнаяПродукция.П000030000302,
	|	АлкогольнаяПродукция.П000030000303,
	|	АлкогольнаяПродукция.П000030000304,
	|	АлкогольнаяПродукция.П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента,
	|	ОборотыЗаПериод.НомерВходящегоДокумента,
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	ОборотыЗаПериод.Поставщик,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000030000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ДанныеОтчета.П000030000310 КАК П000030000310,
	|	ДанныеОтчета.П000030000302 КАК П000030000302,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции) КАК КодВидаПродукции,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии) КАК ВидЛицензии,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Период) КАК ДатаПоследнейЛицензии
	|ПОМЕСТИТЬ ДатыПоследнихЛицензий
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ДанныеОтчета.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|			И (ДанныеОтчета.П000030000302 = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции = """")
	|			И (ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии <> ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво))
	|			И ДанныеОтчета.П000030000310 >= ЛицензииПоставщиковАлкогольнойПродукции.Период
	|			И (ДанныеОтчета.П000030000310 <= ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				ИЛИ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|ГДЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Поставщик ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОтчета.Поставщик,
	|	ДанныеОтчета.П000030000310,
	|	ДанныеОтчета.П000030000302
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик,
	|	П000030000310
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.П000030000301 КАК П000030000301,
	|	ДанныеОтчета.П000030000302 КАК П000030000302,
	|	ДанныеОтчета.П000030000303 КАК П000030000303,
	|	ДанныеОтчета.П000030000304 КАК П000030000304,
	|	ДанныеОтчета.П000030000305 КАК П000030000305,
	|	ДанныеОтчета.П000030000306 КАК П000030000306,
	|	ДанныеОтчета.П000030000307 КАК П000030000307,
	|	ДанныеОтчета.П000030000308 КАК П000030000308,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ВидДеятельности КАК П000030000309,
	|	ДанныеОтчета.П000030000310 КАК П000030000310,
	|	ДанныеОтчета.П000030000311 КАК П000030000311,
	|	ДанныеОтчета.П000030000312 КАК П000030000312,
	|	ДанныеОтчета.П000030000313 КАК П000030000313,
	|	ДанныеОтчета.Подразделение КАК Подразделение,
	|	ДанныеОтчета.Организация КАК Организация,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.ДокументДвижения КАК ДокументДвижения,
	|	ДанныеОтчета.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоследнихЛицензий КАК ДатыПоследнихЛицензий
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|			ПО ДатыПоследнихЛицензий.Поставщик = ЛицензииПоставщиковАлкогольнойПродукции.Поставщик
	|				И ДатыПоследнихЛицензий.КодВидаПродукции = ЛицензииПоставщиковАлкогольнойПродукции.КодВидаПродукции
	|				И ДатыПоследнихЛицензий.ВидЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии
	|				И ДатыПоследнихЛицензий.ДатаПоследнейЛицензии = ЛицензииПоставщиковАлкогольнойПродукции.Период
	|		ПО ДанныеОтчета.Поставщик = ДатыПоследнихЛицензий.Поставщик
	|			И ДанныеОтчета.П000030000310 = ДатыПоследнихЛицензий.П000030000310
	|			И ДанныеОтчета.П000030000302 = ДатыПоследнихЛицензий.П000030000302
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ДанныеОтчета.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ДанныеОтчета.Организация = ОбособленныеПодразделения.Организация
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДатыПоследнихЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение25ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ВестиУчетПоПодразделениям = ЕстьОбособленныеПодразделения(ПараметрыОтчета);
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;	
	
	КонтейнерПоРазделам = РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений);
	ВременнаяТаблицаСведенийОбАлкогольнойПродукции = ВременнаяТаблицаСведенийОбАлкогольнойПродукции();
	ДополнитьВременнойТаблицейЛицензийПоставщиковАлкогольнойПродукции(ВременнаяТаблицаСведенийОбАлкогольнойПродукции);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602 = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);
	
	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("Субсчета7602",                МассивСчетов7602);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
	
	//Заполнение Раздел 1
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);

	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРаздела = КонтейнерПоРазделам.Обороты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(СтруктураРаздела.ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);

	
	// Заполнение Раздел 2.
	
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.Организация);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРаздела = КонтейнерПоРазделам.Поступления;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];	
	МассивРезультатов = Новый Массив;

	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	// Заполнение Раздел 3.
	
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_ИсточникиДанных();
	
 	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеОтчета.Подразделение КАК Подразделение,
		|	ДанныеОтчета.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ДанныеОтчета КАК ДанныеОтчета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, ПараметрыОтчета.Организация);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаАлкоПриложение25ФормаОтчета2019Кв1Раздел3_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Возвраты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
		
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	СсылкаПодразделение = Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение");
	Если СсылкаПодразделение <> Неопределено Тогда
		Контейнер.Декларация.Колонки.Удалить(СсылкаПодразделение);
	КонецЕсли;
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ЕстьОбособленныеПодразделения(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
	|		ПО Подразделения.Ссылка = РегистрацииВНалоговомОргане.Подразделение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО РегистрацииВНалоговомОргане.Организация = Организации.Организация";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Создает временную таблицу, содержащую соответствия между подразделениями и обособленными подразделениями, в структуру
// которого они входят.
//
// Параметры:
//  МенеджерВТ   - МенеджерВременныхТаблиц - это менеджер временных таблиц, содержащий таблицы:
//                 * Подразделения = таблица-источник подразделений для сопоставления. Содержит колонку Подразделение.
//                 * ОбособленныеПодразделения = таблица, создаваемая процедурой. Содержит колонки Подразделение и ОбособленноеПодразделение.
//  СписокОрганизаций - Массив - список организаций-обособленных подразделений.
//
Процедура ДобавитьТаблицуОбособленныхПодразделений(МенеджерВТ, СписокОрганизаций)

	ТекстСопоставления =
	"ВЫБРАТЬ
	|	Подразделения.Организация КАК Организация,
	|	Подразделения.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА НЕ РегистрацииВНалоговомОргане.Подразделение ЕСТЬ NULL
	|			ТОГДА Подразделения.Подразделение
	|		КОГДА Подразделения.Подразделение.Родитель <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА Подразделения.Подразделение.Родитель
	|		ИНАЧЕ Подразделения.Организация
	|	КОНЕЦ КАК ОбособленноеПодразделение,
	|	ВЫБОР
	|		КОГДА НЕ РегистрацииВНалоговомОргане.Подразделение ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		КОГДА Подразделения.Подразделение.Родитель <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СопоставлениеПроизведено
	|ПОМЕСТИТЬ РезультатСоспоставления
	|ИЗ
	|	Подразделения КАК Подразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних КАК РегистрацииВНалоговомОргане
	|		ПО Подразделения.Подразделение = РегистрацииВНалоговомОргане.Подразделение
	|		И Подразделения.Организация = РегистрацииВНалоговомОргане.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Подразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеПодразделения.Организация КАК Организация,
	|	ОбособленныеПодразделения.Подразделение КАК Подразделение,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделенияВременная
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РезультатСоспоставления.Организация,
	|	РезультатСоспоставления.Подразделение,
	|	РезультатСоспоставления.ОбособленноеПодразделение
	|ИЗ
	|	РезультатСоспоставления КАК РезультатСоспоставления
	|ГДЕ
	|	РезультатСоспоставления.СопоставлениеПроизведено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеПодразделенияВременная.Организация,
	|	ОбособленныеПодразделенияВременная.Подразделение КАК Подразделение,
	|	ОбособленныеПодразделенияВременная.ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	ОбособленныеПодразделенияВременная КАК ОбособленныеПодразделенияВременная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделенияВременная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатСоспоставления.Организация КАК Организация,
	|	РезультатСоспоставления.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ Подразделения
	|ИЗ
	|	РезультатСоспоставления КАК РезультатСоспоставления
	|ГДЕ
	|	НЕ РезультатСоспоставления.СопоставлениеПроизведено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РезультатСоспоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.Подразделение
	|ИЗ
	|	Подразделения КАК Подразделения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Инициализируем целевую таблицу.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	Организации.Ссылка КАК ОбособленноеПодразделение
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)";
	Запрос.Выполнить();
	
	Запрос.Текст = ТекстСопоставления;
	Для инд = 1 По 128 Цикл // фиксируем максимальное количество уровней, чтобы не было зацикливания
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = "УНИЧТОЖИТЬ Подразделения";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000112", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000114", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000115", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000116", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000314", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000101", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000102", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000103", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000104", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000105", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000106", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000107", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000108", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000109", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000110", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000111", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000112", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	
КонецПроцедуры

#Область Приложение12ФормаОтчета2012Кв3

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение12ФормаОтчета2012Кв3(ПараметрыОтчета, Контейнер) Экспорт
	
	ВестиУчетПоПодразделениям = ЕстьОбособленныеПодразделения(ПараметрыОтчета);
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
	
	ДокументСсылкаАлкоОтчет	= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 	= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);
	
	СтруктураИдГруппИменРегистровСведений = ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта	= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов = ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы = Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)";

	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);

	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
		
	// Заполнение Раздел 1
	
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);
	
	Если ВестиУчетПоПодразделениям Тогда

	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел1"];
	
	Раздел                          = Контейнер.Раздел1;
	Раздел_ТЗ_Хранилище             = Контейнер.Раздел1_ТЗ_Хранилище;
	Раздел_СервисРегистров          = Контейнер.Раздел1_СервисРегистров;
	Раздел_СервисРегистровУдаленные = Контейнер.Раздел1_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл
		
		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
				
	Раздел_СервисРегистров.Очистить();
	ИндексСтраницы = -1;
	ИдГруппы = "П0000100003";
	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);

		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);

	
	// Заполнение Раздел 2
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Раздел_ИмяРабочегоРегистра 	= СтруктураИдГруппИменРегистровСведений["Раздел2"];
		
	Раздел	 							= Контейнер.Раздел2;
	Раздел_ТЗ_Хранилище     			= Контейнер.Раздел2_ТЗ_Хранилище;
	Раздел_СервисРегистров        		= Контейнер.Раздел2_СервисРегистров;
	Раздел_СервисРегистровУдаленные  	= Контейнер.Раздел2_СервисРегистровУдаленные;
	
	// Удаляем все страницы текущего отчета
	Для Каждого СтрокаСервисРегистровГруппы Из Раздел_СервисРегистров Цикл

		НоваяСтрокаСервисРегистровГруппыУдаленные = Раздел_СервисРегистровУдаленные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
		
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);		
		// Индекс строки 0 используем для обозначения операций над страницами в целом.
		// В норме индекс строки не меньше 1.	
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,
					НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
									
	КонецЦикла;
	
	Раздел_СервисРегистров.Очистить();
	
	ИндексСтраницы = -1;
	ИдГруппы = "П0000200003";

	
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[ИдГруппы];
	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		РазделТекущий = Раздел.Добавить();
		Раздел_СервисРегистровТекущий = Раздел_СервисРегистров.Добавить();
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		Если РазделТекущий.Данные.Количество() = 0 Тогда
			РазделТекущий.Данные.Добавить(Новый Структура);
		КонецЕсли;
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
			РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
		КонецЕсли;
		РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
		
		Раздел_ДанныеДопСтрокТекущий = Раздел_ТЗ_Хранилище.Скопировать();

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	

		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет, ИмяФормыОбъекта, Раздел_ИмяРабочегоРегистра, 
											МаксИндексСтраницы, Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, Раздел_ИмяРабочегоРегистра,	
												МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = МаксИндексСтраницы;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(ИдГруппы, МассивРезультатов);
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Ссылка КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000010000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортер,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000010000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН КАК П000010000304,
	|	ВЫБОР
	|		КОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	&УсловиеКорСчетаВиртуальнойТаблицы
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Если ВестиУчетПоПодразделениям Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКорСчетаВиртуальнойТаблицы", "НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
		|	ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров");
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000314) КАК П000010000314,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000312ПоОрганизации) КАК П000010000312ПоОрганизации,
	|	СУММА(Сводный.П000010000315ПоОрганизации) КАК П000010000315ПоОрганизации
	|ПОМЕСТИТЬ ДанныеОтчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.Контрагент <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА (ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1)
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1
	|					ИЛИ ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000314,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000315ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|					ИЛИ ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|				ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|					И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|	ГДЕ
	|		ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачальныеОстатки КАК НачальныеОстатки
	|				ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|				ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|					И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация
	|			ПО АлкогольнаяПродукция.Номенклатура = НачальныеОстатки.Номенклатура
	|	ГДЕ
	|		НачальныеОстатки.Номенклатура ЕСТЬ НЕ NULL ) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтчета.СсылкаПодразделение КАК СсылкаПодразделение,
	|	ДанныеОтчета.П000010000301 КАК П000010000301,
	|	ДанныеОтчета.П000010000302 КАК П000010000302,
	|	ДанныеОтчета.П000010000303 КАК П000010000303,
	|	ДанныеОтчета.П000010000304 КАК П000010000304,
	|	ДанныеОтчета.П000010000305 КАК П000010000305,
	|	ДанныеОтчета.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ДанныеОтчета.П000010000306 КАК П000010000306,
	|	ДанныеОтчета.П000010000307 КАК П000010000307,
	|	ДанныеОтчета.П000010000308 КАК П000010000308,
	|	ДанныеОтчета.П000010000311 КАК П000010000311,
	|	ДанныеОтчета.П000010000312 КАК П000010000312,
	|	ДанныеОтчета.П000010000314 КАК П000010000314,
	|	ДанныеОтчета.П000010000315 КАК П000010000315,
	|	ДанныеОтчета.П000010000316 КАК П000010000316
	|ИЗ
	|	ДанныеОтчета КАК ДанныеОтчета
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Ссылка КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Наименование КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.Код КАК П000020000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортер,
	|	ВЫРАЗИТЬ(СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.НаименованиеПолное КАК СТРОКА(200)) КАК П000020000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.ИНН КАК П000020000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент.КПП КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение12ФормаОтчета2012Кв3Раздел2_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.РегистрационныйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период) КАК П000020000309,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО) КАК П000020000310,
	|	КоличествоИзГТД.НомерГТД КАК П000020000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументПоступления,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|			ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|				И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ПО ОборотыЗаПериод.Регистратор = ПриобретениеТоваровУслуг.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|		ПО АлкогольнаяПродукция.Номенклатура = ОборотыЗаПериод.Номенклатура
	|ГДЕ
	|	ОборотыЗаПериод.Номенклатура ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.РегистрационныйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.ДатаВходящегоДокумента, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.НомерВходящегоДокумента, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Приложение26ФормаОтчета2019Кв1

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000312", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000313", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000315", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000316", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000317", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000318", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000319", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010000320", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000020000312", Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000301", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000302", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000303Адрес", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000304", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000305", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000306", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000307", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000308", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000309", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000310", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000311", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000030000312", Истина, Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.Производитель КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000010000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000010000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000010000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000010000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000010000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Контрагент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение) КАК КорПодразделение,
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотДт) КАК КоличествоОборотДт,
	|	СУММА(ХозрасчетныйОбороты.КоличествоОборотКт) КАК КоличествоОборотКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК КорСчет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КлассификацияРегистратора
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	&ДополнительноеУсловиеПоСчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ХозрасчетныйОбороты.КорСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета60)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&Субсчета79)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКор, &ПустоеПодразделение),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|					И ХозрасчетныйОбороты.КоличествоОборотКт < 0
	|			ТОГДА 1
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ТОГДА 2
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|					И ХозрасчетныйОбороты.КоличествоОборотДт < 0
	|			ТОГДА 3
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ТОГДА 4
	|		КОГДА ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	СУММА(ХозрасчетныйОстатки.КоличествоОстатокДт) КАК КоличествоНачальныйОстатокДт
	|ПОМЕСТИТЬ НачальныеОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаНач,
	|			Счет В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Субконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловиеПоСчету",
		?(ВестиУчетПоПодразделениям, "ИСТИНА", "(НЕ ХозрасчетныйОбороты.КорСчет В (&Субсчета41)
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СборкаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПересортицаТоваров
	|			ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПорчаТоваров)"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_Результат()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сводный.СсылкаПодразделение КАК СсылкаПодразделение,
	|	Сводный.П000010000301 КАК П000010000301,
	|	Сводный.П000010000302 КАК П000010000302,
	|	Сводный.П000010000303 КАК П000010000303,
	|	Сводный.П000010000304 КАК П000010000304,
	|	Сводный.П000010000305 КАК П000010000305,
	|	МАКСИМУМ(Сводный.ПроизводительИмпортер) КАК ПроизводительИмпортер,
	|	СУММА(Сводный.П000010000306) КАК П000010000306,
	|	СУММА(Сводный.П000010000307) КАК П000010000307,
	|	СУММА(Сводный.П000010000308) КАК П000010000308,
	|	СУММА(Сводный.П000010000311) КАК П000010000311,
	|	СУММА(Сводный.П000010000312) КАК П000010000312,
	|	СУММА(Сводный.П000010000313) КАК П000010000313,
	|	СУММА(Сводный.П000010000315) КАК П000010000315,
	|	СУММА(Сводный.П000010000316) КАК П000010000316,
	|	СУММА(Сводный.П000010000317) КАК П000010000317,
	|	СУММА(Сводный.П000010000318) КАК П000010000318,
	|	СУММА(Сводный.П000010000312ПоОрганизации) КАК П000010000312ПоОрганизации,
	|	СУММА(Сводный.П000010000316ПоОрганизации) КАК П000010000316ПоОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301 КАК П000010000301,
	|		АлкогольнаяПродукция.П000010000302 КАК П000010000302,
	|		АлкогольнаяПродукция.П000010000303 КАК П000010000303,
	|		АлкогольнаяПродукция.П000010000304 КАК П000010000304,
	|		АлкогольнаяПродукция.П000010000305 КАК П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|		0 КАК П000010000306,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|					И ОборотыЗаПериод.Контрагент = АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000307,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					И ОборотыЗаПериод.КоличествоОборотДт > 0
	|					И ОборотыЗаПериод.Контрагент <> АлкогольнаяПродукция.Производитель
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000308,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотДт - ОборотыЗаПериод.КоличествоОборотКт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000311,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|					ИЛИ ОборотыЗаПериод.КлассификацияРегистратора = 1
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000312ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|					И ОборотыЗаПериод.КлассификацияРегистратора <> 1
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000312,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотДт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000313,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора > 3
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 2
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000315,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора <> 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					ИЛИ ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА 0
	|			ИНАЧЕ ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|		КОНЕЦ КАК П000010000316ПоОрганизации,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|					И ОборотыЗаПериод.КорСчет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|					И ОборотыЗаПериод.КлассификацияРегистратора = 0
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000316,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КлассификацияРегистратора = 3
	|				ТОГДА (ОборотыЗаПериод.КоличествоОборотКт - ОборотыЗаПериод.КоличествоОборотДт) * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000317,
	|		ВЫБОР
	|			КОГДА ОборотыЗаПериод.КоличествоОборотКт <= 0
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			КОГДА ОбособленныеПодразделения.ОбособленноеПодразделение = ОбособленныеКорПодразделения.ОбособленноеПодразделение
	|				ТОГДА 0
	|			КОГДА ОборотыЗаПериод.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотКт * АлкогольнаяПродукция.КоэффПересчетаДал
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК П000010000318,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|	ИЗ
	|		ОборотыЗаПериод КАК ОборотыЗаПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеКорПодразделения
	|			ПО ОборотыЗаПериод.КорПодразделение = ОбособленныеКорПодразделения.Подразделение
	|				И ОборотыЗаПериод.Организация = ОбособленныеКорПодразделения.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АлкогольнаяПродукция.П000010000301,
	|		АлкогольнаяПродукция.П000010000302,
	|		АлкогольнаяПродукция.П000010000303,
	|		АлкогольнаяПродукция.П000010000304,
	|		АлкогольнаяПродукция.П000010000305,
	|		АлкогольнаяПродукция.ПроизводительИмпортер,
	|		НачальныеОстатки.КоличествоНачальныйОстатокДт * АлкогольнаяПродукция.КоэффПересчетаДал,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОбособленныеПодразделения.ОбособленноеПодразделение
	|	ИЗ
	|		НачальныеОстатки КАК НачальныеОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|			ПО НачальныеОстатки.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО НачальныеОстатки.Подразделение = ОбособленныеПодразделения.Подразделение
	|				И НачальныеОстатки.Организация = ОбособленныеПодразделения.Организация) КАК Сводный
	|
	|СГРУППИРОВАТЬ ПО
	|	Сводный.СсылкаПодразделение,
	|	Сводный.П000010000301,
	|	Сводный.П000010000302,
	|	Сводный.П000010000303,
	|	Сводный.П000010000304,
	|	Сводный.П000010000305
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НачальныеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000020000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000020000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000020000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000020000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000020000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.Регистратор
	|	КОНЕЦ КАК ДокументПоступления,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000020000301 КАК П000020000301,
	|	АлкогольнаяПродукция.П000020000302 КАК П000020000302,
	|	АлкогольнаяПродукция.П000020000303 КАК П000020000303,
	|	АлкогольнаяПродукция.П000020000304 КАК П000020000304,
	|	АлкогольнаяПродукция.П000020000305 КАК П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000020000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000020000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000020000308,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ОборотыЗаПериод.Период) КАК П000020000309,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК П000020000310,
	|	КоличествоИзГТД.НомерГТД КАК П000020000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотДт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000020000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОборотыЗаПериод.ДокументПоступления = ДанныеПервичныхДокументов.Документ
	|			И ОборотыЗаПериод.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация 
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000020000301,
	|	АлкогольнаяПродукция.П000020000302,
	|	АлкогольнаяПродукция.П000020000303,
	|	АлкогольнаяПродукция.П000020000304,
	|	АлкогольнаяПродукция.П000020000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ОборотыЗаПериод.Период),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО),
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_ИсточникиДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал КАК КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.НаименованиеВида169 КАК П000030000301,
	|	СведенияОбАлкогольнойПродукции.КодВида169 КАК П000030000302,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	СведенияОбАлкогольнойПродукции.ПроизводительНаименование КАК П000030000303,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИНН КАК П000030000304,
	|	СведенияОбАлкогольнойПродукции.ПроизводительКПП КАК П000030000305
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|ГДЕ
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.Пиво)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|	ХозрасчетныйОбороты.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОбороты.КоличествоОборотКт - ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотКт
	|ПОМЕСТИТЬ КоличествоИзГТД
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГТД),
	|			&ВидыСубконтоНоменклатураГТД,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Номенклатура,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПриобретения).ДатаВходящегоДокумента
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.КорректировкаПриобретения).НомерВходящегоДокумента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерВходящегоДокумента,
	|	ХозрасчетныйОборотыДтКт.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоКт1 КАК Справочник.Контрагенты) КАК Поставщик,
	|	ХозрасчетныйОборотыДтКт.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеДт, &ПустоеПодразделение) КАК Подразделение,
	|	-ХозрасчетныйОборотыДтКт.КоличествоОборотДт КАК КоличествоОборотДт
	|ПОМЕСТИТЬ ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			СчетКт В (&Субсчета60),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотДт < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СубконтоКт1,
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Дата
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ХозрасчетныйОборотыДтКт.Период, ДЕНЬ)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.Регистратор ССЫЛКА Документ.ВозвратТоваровПоставщику
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.Регистратор КАК Документ.ВозвратТоваровПоставщику).Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйОборотыДтКт.Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Справочник.Контрагенты),
	|	ХозрасчетныйОборотыДтКт.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОборотыДтКт.ПодразделениеКт, &ПустоеПодразделение),
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			СчетДт В (&Субсчета7602),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			СчетКт В (&Субсчета41),
	|			&ВидСубконтоНоменклатура,
	|			Организация В (&СписокОрганизаций)
	|				И СубконтоКт1 В
	|					(ВЫБРАТЬ
	|						АлкогольнаяПродукция.Номенклатура
	|					ИЗ
	|						АлкогольнаяПродукция КАК АлкогольнаяПродукция)) КАК ХозрасчетныйОборотыДтКт
	|ГДЕ
	|	ХозрасчетныйОборотыДтКт.КоличествоОборотКт > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Регистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_Результат()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АлкогольнаяПродукция.П000030000301 КАК П000030000301,
	|	АлкогольнаяПродукция.П000030000302 КАК П000030000302,
	|	АлкогольнаяПродукция.П000030000303 КАК П000030000303,
	|	АлкогольнаяПродукция.П000030000304 КАК П000030000304,
	|	АлкогольнаяПродукция.П000030000305 КАК П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200) КАК П000030000306,
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ КАК П000030000307,
	|	ОборотыЗаПериод.Поставщик.КПП КАК П000030000308,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента КАК П000030000309,
	|	ОборотыЗаПериод.НомерВходящегоДокумента КАК П000030000310,
	|	КоличествоИзГТД.НомерГТД КАК П000030000311,
	|	СУММА(ВЫБОР
	|			КОГДА КоличествоИзГТД.НомерГТД ЕСТЬ NULL
	|				ТОГДА ОборотыЗаПериод.КоличествоОборотДт
	|			ИНАЧЕ КоличествоИзГТД.КоличествоОборотКт
	|		КОНЕЦ * АлкогольнаяПродукция.КоэффПересчетаДал) КАК П000030000312,
	|	ОборотыЗаПериод.Подразделение КАК Подразделение,
	|	ОборотыЗаПериод.Организация КАК Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер КАК ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор КАК ДокументДвижения,
	|	ОборотыЗаПериод.Поставщик КАК Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение КАК СсылкаПодразделение
	|ИЗ
	|	ОборотыЗаПериод КАК ОборотыЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|		ПО ОборотыЗаПериод.Номенклатура = АлкогольнаяПродукция.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзГТД КАК КоличествоИзГТД
	|		ПО ОборотыЗаПериод.Номенклатура = КоличествоИзГТД.Номенклатура
	|			И ОборотыЗаПериод.Регистратор = КоличествоИзГТД.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ПО ОборотыЗаПериод.Подразделение = ОбособленныеПодразделения.Подразделение
	|			И ОборотыЗаПериод.Организация = ОбособленныеПодразделения.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	АлкогольнаяПродукция.П000030000301,
	|	АлкогольнаяПродукция.П000030000302,
	|	АлкогольнаяПродукция.П000030000303,
	|	АлкогольнаяПродукция.П000030000304,
	|	АлкогольнаяПродукция.П000030000305,
	|	ПОДСТРОКА(ОборотыЗаПериод.Поставщик.НаименованиеПолное, 1, 200),
	|	ВЫБОР
	|		КОГДА ОборотыЗаПериод.Поставщик.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА ОборотыЗаПериод.Поставщик.ИНН
	|		ИНАЧЕ ОборотыЗаПериод.Поставщик.НалоговыйНомер
	|	КОНЕЦ,
	|	ОборотыЗаПериод.Поставщик.КПП,
	|	ОборотыЗаПериод.ДатаВходящегоДокумента,
	|	ОборотыЗаПериод.НомерВходящегоДокумента,
	|	КоличествоИзГТД.НомерГТД,
	|	ОборотыЗаПериод.Подразделение,
	|	ОборотыЗаПериод.Организация,
	|	АлкогольнаяПродукция.ПроизводительИмпортер,
	|	ОборотыЗаПериод.Регистратор,
	|	ОборотыЗаПериод.Поставщик,
	|	ОбособленныеПодразделения.ОбособленноеПодразделение
	|ИТОГИ ПО
	|	СсылкаПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыЗаПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ КоличествоИзГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбособленныеПодразделения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьРегламентированныйОтчетАлкоПриложение26ФормаОтчета2019Кв1(ПараметрыОтчета, Контейнер) Экспорт

	ВестиУчетПоПодразделениям = ЕстьОбособленныеПодразделения(ПараметрыОтчета);
	Если ВестиУчетПоПодразделениям Тогда
		СписокОрганизаций = БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация);
	Иначе
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОтчета.Организация);
	КонецЕсли;
		
	ДокументСсылкаАлкоОтчет					= ПараметрыОтчета.ДокументСсылка;
	ВспомогательныйАдрес 					= ПараметрыОтчета.ВспомогательныйАдрес;
	
	// индикация начала работы фоновой операции
	РегламентированнаяОтчетностьАЛКО.СообщитьПроцентВыполнения( , 0, 100);

	СтруктураИдГруппИменРегистровСведений 	= ПараметрыОтчета.СтруктураИдГруппИменРегистровСведений;
	
	// Определим объект Отчета
	ИмяФормыОбъекта							= ПараметрыОтчета.ИмяФормыОбъекта;
	ОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ИмяФормыОбъекта);
	
	СтруктураИдГруппБуферИтогов 			= ПараметрыОтчета.СтруктураИдГруппБуферИтогов;
	СтруктураИтогов = Новый Структура;
	КолВБлокеЗаписей = 3000;
	
	МаксИндексСтраницы						= Контейнер.МаксИндексСтраницы;
	МаксИндексСтраницы = МаксИндексСтраницы + 1;

	КонтейнерПоРазделам = РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений);
	ВременнаяТаблицаСведенийОбАлкогольнойПродукции = ВременнаяТаблицаСведенийОбАлкогольнойПродукции();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Товары)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям)";
	
	Результат = Запрос.ВыполнитьПакет();
	МассивСчетов41 = Результат[0].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов79 = Результат[1].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов60 = Результат[2].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602 = Результат[3].Выгрузить().ВыгрузитьКолонку("Счет");
	МассивСчетов7602.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);
	
	ВидыСубконтоНоменклатураГТД = Новый Массив;
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНоменклатураГТД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);

	МассивКодовПродукции = РегламентированнаяОтчетностьАЛКО.МассивКодовИзМакетаСписки(
		"ВидыПродукции", ПараметрыОтчета.мДатаКонцаПериодаОтчета, ИмяФормыОбъекта);
	
	Запрос.УстановитьПараметр("ДатаНач", 		             НачалоДня(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон", 		             КонецДня(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",                 ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",           СписокОрганизаций); // включая обособленные подразделения
	Запрос.УстановитьПараметр("Субсчета41",                  МассивСчетов41);
	Запрос.УстановитьПараметр("Субсчета79",                  МассивСчетов79);
	Запрос.УстановитьПараметр("Субсчета60",                  МассивСчетов60);
	Запрос.УстановитьПараметр("Субсчета7602",                МассивСчетов7602);
	Запрос.УстановитьПараметр("ВидСубконтоНоменклатура",     ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконтоНоменклатураГТД", ВидыСубконтоНоменклатураГТД);
	Запрос.УстановитьПараметр("ПустоеПодразделение",         Справочники.СтруктураПредприятия.ПустаяСсылка());
	Запрос.УстановитьПараметр("КодыВида169",                 МассивКодовПродукции);
		
	//Заполнение Раздел 1
	
	// Получаем данные по алкогольной продукции.
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_ИсточникиДанных(ВестиУчетПоПодразделениям);
	
	Если ВестиУчетПоПодразделениям Тогда

		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.КорПодразделение,
		|	ОборотыЗаПериод.Организация
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачальныеОстатки.Подразделение,
		|	НачальныеОстатки.Организация
		|ИЗ
		|	НачальныеОстатки КАК НачальныеОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел1_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРаздела = КонтейнерПоРазделам.Обороты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
	
		КоличествоТекСтрок = 0;

		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
			
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			ОбъектОтчета.Расчет(СтруктураРаздела.ИдГруппы, НоваяСтрокаДопСтрок); // расчет по строке
			
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];

			КонецЦикла;
		
			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
				
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
			    			
			    Раздел_ДанныеДопСтрокТекущий.Очистить();

			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
				
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
	    		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);

	
	//Заполнение Раздел 2
	
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел2_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураРаздела = КонтейнерПоРазделам.Поступления;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];	
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;
		
		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	//Заполнение Раздел 3
	
	Запрос.МенеджерВременныхТаблиц = ВременнаяТаблицаСведенийОбАлкогольнойПродукции;
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_ИсточникиДанных();
	
	Если ВестиУчетПоПодразделениям Тогда
	
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОборотыЗаПериод.Подразделение КАК Подразделение,
		|	ОборотыЗаПериод.Организация КАК Организация
		|ПОМЕСТИТЬ Подразделения
		|ИЗ
		|	ОборотыЗаПериод КАК ОборотыЗаПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Организация";
		
		Запрос.Выполнить();
	
		// Получаем соответствие подразделений, по которым имеются данные для отчета, и обособленных подразделений,
		// в которые они входят.
		ДобавитьТаблицуОбособленныхПодразделений(Запрос.МенеджерВременныхТаблиц, СписокОрганизаций);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() +
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	&ПустоеПодразделение КАК Подразделение,
		|	&Организация КАК ОбособленноеПодразделение
		|ПОМЕСТИТЬ ОбособленныеПодразделения";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаАлкоПриложение26ФормаОтчета2019Кв1Раздел3_Результат();
	Результат = Запрос.Выполнить();
	ВыборкаПоПодразделениям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	СтруктураРаздела = КонтейнерПоРазделам.Возвраты;
	ИндексСтраницы = -1;
	СписокБуфферИтоговГруппы = СтруктураИдГруппБуферИтогов[СтруктураРаздела.ИдГруппы];
	МассивРезультатов = Новый Массив;
	
	Пока ВыборкаПоПодразделениям.Следующий() Цикл
		
		ИндексСтраницы = ИндексСтраницы + 1;
		
		ПредставлениеПодразделения = СведенияОПодразделении(ВыборкаПоПодразделениям.СсылкаПодразделение, ПараметрыОтчета.Организация.ИНН, СписокОрганизаций);
		ИндексРаздела = ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам,
			ВыборкаПоПодразделениям.СсылкаПодразделение, ПредставлениеПодразделения, МаксИндексСтраницы);
		РазделТекущий = Контейнер.Декларация[ИндексРаздела];
		Раздел_СервисРегистровТекущий = СтруктураРаздела.СервисРегистров[ИндексРаздела];
		Раздел_ДанныеДопСтрокТекущий = СтруктураРаздела.ТЗ_Хранилище.Скопировать();
		СтраницаРаздел = РазделТекущий.Данные[0].Значение;

		МассивРезультатов.Добавить(Новый СписокЗначений);
		Для Каждого ЭлементСписка Из СписокБуфферИтоговГруппы Цикл
		    // в массиве будут храниться итоги по страницам по данному полю - представлению
			МассивРезультатов[ИндексСтраницы].Добавить(0, ЭлементСписка.Представление);	
		КонецЦикла;
		
		КоличествоТекСтрок = 0;
				
		КоличествоВТекущемБлокеЗаписей = 0; // Номер строки
		Выборка = ВыборкаПоПодразделениям.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			КоличествоВТекущемБлокеЗаписей = КоличествоВТекущемБлокеЗаписей + 1;
		    
			НоваяСтрокаДопСтрок = Раздел_ДанныеДопСтрокТекущий.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДопСтрок, Выборка);
			
			// Расчета по строке в разделе 2 нет.
			// Суммируем итоги.
			Для Каждого КонтролируемоеПоле Из МассивРезультатов[ИндексСтраницы] Цикл
																				
				ИмяКонтролируемогоПоля = КонтролируемоеПоле.Представление;
				
				НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = ?(НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля] = Неопределено, 
																0, НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля]);
				
				КонтролируемоеПоле.Значение = КонтролируемоеПоле.Значение + НоваяСтрокаДопСтрок[ИмяКонтролируемогоПоля];
				
			КонецЦикла;		

			// Каждые 3000 строк пишем в регистр.
			Если КоличествоВТекущемБлокеЗаписей >= КолВБлокеЗаписей Тогда
							    
				КоличествоВТекущемБлокеЗаписей = 0;
				РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
					ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
					Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
							
			    Раздел_ДанныеДопСтрокТекущий.Очистить();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Заносим в регистр сведений, если остались незаписанные строки
		Если Раздел_ДанныеДопСтрокТекущий.Количество() > 0 Тогда
		    			
			РегламентированнаяОтчетностьАЛКО.ДобавитьТаблицуЗначенийВРегистрСведенийАлко(ДокументСсылкаАлкоОтчет,
				ИмяФормыОбъекта, СтруктураРаздела.ИмяРабочегоРегистра, Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра,
				Раздел_ДанныеДопСтрокТекущий, КоличествоТекСтрок);
						
		    Раздел_ДанныеДопСтрокТекущий.Очистить();
		
		КонецЕсли; 
		
		// Занесем в регистр Журнал	
		Ресурсы = Новый Структура;
		Ресурсы.Вставить("КоличествоСтрок", КоличествоТекСтрок);	
		Ресурсы.Вставить("МаксИндексСтраницы", МаксИндексСтраницы);
		
		РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет,
			СтруктураРаздела.ИмяРабочегоРегистра, МаксИндексСтраницы, 0, "Автозаполнение", Ресурсы);
										
		// занесем в СервисРегистров данные по количеству строк и номеру страницы регистра
		Раздел_СервисРегистровТекущий.КоличествоСтрок = КоличествоТекСтрок;
		Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра = Раздел_СервисРегистровТекущий.ИндексСтраницыРегистра;
		Раздел_СервисРегистровТекущий.КолвоСтрокПомНаУдаление = 0;
		
	КонецЦикла;
	СтруктураИтогов.Вставить(СтруктураРаздела.ИдГруппы, МассивРезультатов);
	
	
	Контейнер.МаксИндексСтраницы = МаксИндексСтраницы;
	Контейнер.Вставить("СтруктураИтогов", СтруктураИтогов);
	
	СсылкаПодразделение = Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение");
	Если СсылкаПодразделение <> Неопределено Тогда
		Контейнер.Декларация.Колонки.Удалить(СсылкаПодразделение);
	КонецЕсли;
	
	// Помещаем во временное хранилище Контейнер для механизма длительных операций.
	АдресХранилища = Неопределено;
	Если ПараметрыОтчета.Свойство("АдресХранилища", АдресХранилища) Тогда	
		ПоместитьВоВременноеХранилище(Контейнер, АдресХранилища);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СведенияОПодразделении(Подразделение, ИНН, СписокОрганизаций = Неопределено)
	
	СведенияОбОП = РегламентированнаяОтчетностьАЛКО.ПолучитьПустуюСтруктуруСведенийОбОП();
	
	СведенияОбОП.Вставить("ИНН",         "");
	СведенияОбОП.Вставить("ТипДома",     "");
	СведенияОбОП.Вставить("ТипКорпуса",  "");
	СведенияОбОП.Вставить("ТипКвартиры", "");

	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Возврат СведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.Организации") Тогда
		
		РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, "Наименование, КПП");
		СведенияОбОП.Наименование = РеквизитыПодразделения.Наименование;
		СведенияОбОП.КПП = РеквизитыПодразделения.КПП;
		СведенияОбОП.ИНН = ИНН;
		
		ФактАдресПодразделения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Подразделение,
			Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			ТекущаяДатаСеанса(),
			Ложь);
		
		Если ФактАдресПодразделения.Количество() > 0 Тогда
			Значение = РаботаСАдресами.СведенияОбАдресе(ФактАдресПодразделения[0].Значение);
			ЗаполнитьЗначенияСвойств(СведенияОбОП, Значение);
			СведенияОбОП.ПредставлениеАдреса = ФактАдресПодразделения[0].Представление;
		КонецЕсли;
		
		Возврат СведенияОбОП;
		
	ИначеЕсли ТипЗнч(Подразделение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацииВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане КАК РегистрацияПодразделения
		|ИЗ
		|	РегистрСведений.РегистрацииВНалоговомОргане.СрезПоследних(
		|		, Подразделение = &Подразделение И Организация В (&Организация)) КАК РегистрацииВНалоговомОрганеСрезПоследних";
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
		
			РегистрацияПодразделения = Выборка.РегистрацияПодразделения;
			
			Данные = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресОбособленногоПодразделения);
			Результат = РегистрацияПодразделения.КонтактнаяИнформация.НайтиСтроки(Данные);
			
			Если Результат.Количество() > 0 Тогда
				Значение = РаботаСАдресами.СведенияОбАдресе(Результат[0].ЗначенияПолей);
				ЗаполнитьЗначенияСвойств(СведенияОбОП, Значение);
				СведенияОбОП.ПредставлениеАдреса = Результат[0].Представление;
			КонецЕсли;
			
			СведенияОбОП.Наименование = Подразделение.Наименование;
			СведенияОбОП.КПП = РегистрацияПодразделения.КПП;
			СведенияОбОП.ИНН = ИНН;
			
		КонецЕсли;
		
		Возврат СведенияОбОП;
		
	Иначе
		
		Возврат СведенияОбОП;
		
	КонецЕсли;
	
КонецФункции

Функция ВременнаяТаблицаСведенийОбАлкогольнойПродукции()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Ссылка КАК Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК Производитель,
	|	СведенияОбАлкогольнойПродукции.ОбъемДАЛ КАК КоэффПересчетаДал,
	|	ВидыАлкогольнойПродукции.Наименование КАК НаименованиеВида169,
	|	ВидыАлкогольнойПродукции.Код КАК КодВида169,
	|	ВидыАлкогольнойПродукции.ВидЛицензии КАК ВидЛицензии,
	|	СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортер,
	|	ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200)) КАК ПроизводительНаименование,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Контрагенты.ИНН
	|		ИНАЧЕ Контрагенты.НалоговыйНомер
	|	КОНЕЦ КАК ПроизводительИНН,
	|	ВЫБОР
	|		КОГДА Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА Контрагенты.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПроизводительКПП
	|ПОМЕСТИТЬ СведенияОбАлкогольнойПродукции
	|ИЗ
	|	Справочник.Номенклатура КАК СведенияОбАлкогольнойПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|	ПО СведенияОбАлкогольнойПродукции.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|	ПО СведенияОбАлкогольнойПродукции.ПроизводительИмпортерКонтрагент = Контрагенты.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	Запрос.Выполнить();
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

Процедура ДополнитьВременнойТаблицейЛицензийПоставщиковАлкогольнойПродукции(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец КАК Поставщик,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ВидЛицензии КАК ВидЛицензии,
	|	"""" КАК КодВидаПродукции,
	|	"""" КАК ВидДеятельности,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК Период,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТЛицензииПоставщиковАлкогольнойПродукции
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Поставщик";
	Запрос.Выполнить();
	
КонецПроцедуры

Функция РазбитьКонтейнерПоРазделам(Контейнер, ДокументСсылкаАлкоОтчет, СтруктураИдГруппИменРегистровСведений)
	
	КонтейнерПоРазделам = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000100003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел1_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел1_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел1_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Обороты", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000200003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел2_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел2_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел2_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Поступления", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	СтруктураРаздела.Вставить("ИдГруппы",                 "П0000300003");
	СтруктураРаздела.Вставить("ТЗ_Хранилище",             Контейнер.Раздел3_ТЗ_Хранилище);
	СтруктураРаздела.Вставить("СервисРегистров",          Контейнер.Раздел3_СервисРегистров);
	СтруктураРаздела.Вставить("СервисРегистровУдаленные", Контейнер.Раздел3_СервисРегистровУдаленные);
	КонтейнерПоРазделам.Вставить("Возвраты", СтруктураРаздела);
	
	Для каждого РазделОтчета Из КонтейнерПоРазделам Цикл
		
		СтруктураРаздела = РазделОтчета.Значение;
		
		СтруктураРаздела.Вставить("ИмяРабочегоРегистра", СтруктураИдГруппИменРегистровСведений[СтруктураРаздела.ИдГруппы]);
		
		// Удаляем все страницы текущего отчета
		Для Каждого СтрокаСервисРегистровГруппы Из СтруктураРаздела.СервисРегистров Цикл
			
			НоваяСтрокаСервисРегистровГруппыУдаленные = СтруктураРаздела.СервисРегистровУдаленные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСервисРегистровГруппыУдаленные, СтрокаСервисРегистровГруппы);
			
			Ресурсы = Новый Структура;
			Ресурсы.Вставить("КоличествоСтрок", НоваяСтрокаСервисРегистровГруппыУдаленные.КоличествоСтрок);
			// Индекс строки 0 используем для обозначения операций над страницами в целом.
			// В норме индекс строки не меньше 1.
			РегламентированнаяОтчетностьАЛКО.ДобавитьВРегистрЖурнала(ДокументСсылкаАлкоОтчет, СтруктураРаздела.ИмяРабочегоРегистра,
				НоваяСтрокаСервисРегистровГруппыУдаленные.ИндексСтраницыРегистра, 0, "УдалениеСтраницы", Ресурсы);
			
		КонецЦикла;
		СтруктураРаздела.СервисРегистров.Очистить();
	
	КонецЦикла; 
	
	Если Контейнер.Декларация.Колонки.Найти("СсылкаПодразделение") = Неопределено Тогда
		Контейнер.Декларация.Колонки.Добавить("СсылкаПодразделение");
	КонецЕсли;
	КонтейнерПоРазделам.Вставить("Декларация", Контейнер.Декларация);
	
	Возврат КонтейнерПоРазделам;
	
КонецФункции

Функция ПодготовитьРазделДляПодразделения(КонтейнерПоРазделам, Подразделение, ПредставлениеПодразделения, МаксИндексСтраницы)
	
	РазделТекущий = КонтейнерПоРазделам.Декларация.Найти(Подразделение, "СсылкаПодразделение");
	Если РазделТекущий <> Неопределено Тогда
		Возврат КонтейнерПоРазделам.Декларация.Индекс(РазделТекущий);
	КонецЕсли;
		
	РазделТекущий = КонтейнерПоРазделам.Декларация.Добавить();
	РазделТекущий.СсылкаПодразделение = Подразделение;

	Если РазделТекущий.ДополнительныеДанные.Количество() = 0 Тогда
		РазделТекущий.ДополнительныеДанные.Добавить(Новый Структура); 
	КонецЕсли;
	РазделТекущий.ДополнительныеДанные[0].Значение.Вставить("СведенияОбОП", ПредставлениеПодразделения);
	
	Если РазделТекущий.Данные.Количество() = 0 Тогда
		РазделТекущий.Данные.Добавить(Новый Структура);
	КонецЕсли;
	
	Для каждого РазделОтчета Из КонтейнерПоРазделам Цикл
		
		Если РазделОтчета.Ключ = "Декларация" Тогда
			Продолжить;
		КонецЕсли;
		
		МаксИндексСтраницы = МаксИндексСтраницы + 1;
		
		НовСтраница = РазделОтчета.Значение.СервисРегистров.Добавить();
		НовСтраница.ИндексСтраницыРегистра = МаксИндексСтраницы;
		
	КонецЦикла;

	Возврат КонтейнерПоРазделам.Декларация.Количество() - 1;
	
КонецФункции

Функция ОписаниеПодразделения(Подразделение)
	
	НаименованиеОП = "";
	Если НЕ ПустаяСтрока(Подразделение.Наименование) Тогда
		НаименованиеОП = Подразделение.Наименование;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.ИНН) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "ИНН " + Подразделение.ИНН;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.КПП) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", ", ") + "КПП " + Подразделение.КПП;
	КонецЕсли;
	Если НЕ ПустаяСтрока(Подразделение.ПредставлениеАдреса) Тогда
		НаименованиеОП = НаименованиеОП + ?(ПустаяСтрока(НаименованиеОП), "", Символы.ПС) + Подразделение.ПредставлениеАдреса;
	КонецЕсли;
	
	Возврат НаименованиеОП;
	
КонецФункции

Функция ТаблицуЗначенийВДеревоСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "")
	
	ДеревоРезультатов  = Новый ДеревоЗначений();
	Для каждого Колонка Из ТаблицаРезультатов.Колонки Цикл
		ДеревоРезультатов.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла; 
	
	Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СтрокаДерева = ДеревоРезультатов.Строки.Добавить();

			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

		КонецЦикла; 
		
		Возврат ДеревоРезультатов;
	КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ДеревоРезультатов.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Для каждого СтрокаДерева Из  ДеревоРезультатов.Строки Цикл
		// Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		
		// Поиск и заполнение подчиненными колонками
		МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла; 
	КонецЦикла;
		
	Возврат ДеревоРезультатов;
	
КонецФункции

Функция ПолучитьОбособленноеПодразделение(Подразделение)
	
	Возврат Подразделение;
	
КонецФункции

#КонецОбласти

#Область СтатистическаяОтчетность

// Процедура заполняет сведения о показателях регламентированного отчета
//
// Параметры:
// 		ПоказателиОтчета - Структура - Структура показателей отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФорма1ДМФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	ШаблонПоляОтчета = "П01%1%2";
	Для Строка = 2 По 16 Цикл
		Для Графа = 4 По 7 Цикл
			ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПоляОтчета, Формат(Строка, "ЧЦ=2; ЧВН="), Формат(Графа, "ЧЦ=2; ЧВН="));
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, ИмяПоказателя, Истина, Ложь);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
// 		ПараметрыОтчета - Структура - Структура параметров отчета
// 		Контейнер - Структура - Контейнер отображаемого отчета.
//
Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФорма1ДМФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ШаблонПоляОтчета = "П01%1%2";
	СтруктураОтчета = Новый Структура;
	Для Строка = 2 По 16 Цикл
		Для Графа = 4 По 7 Цикл
			СтруктураОтчета.Вставить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПоляОтчета, Формат(Строка, "ЧЦ=2; ЧВН="), Формат(Графа, "ЧЦ=2; ЧВН=")),
				0);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.Ссылка КАК ОС,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.Расположение КАК Расположение,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислитель,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменатель,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислительБазовая,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменательБазовая,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.Количество КАК КоличествоАлмазов
		|ПОМЕСТИТЬ ОССодержаниеАлмазов
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.ДрагоценныеМатериалы КАК ОбъектыЭксплуатацииДрагоценныеМатериалы
		|ГДЕ
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал = ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.Алмазы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОСНачалоГода.ОсновноеСредство, ОСКонецГода.ОсновноеСредство) КАК ОС,
		|	ВЫБОР
		|		КОГДА ОСНачалоГода.ОсновноеСредство ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК КоличествоНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА ОСНачалоГода.ОсновноеСредство ЕСТЬ NULL 
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоПоступило,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОСКонецГода.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоИзрасходовано,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ОСКонецГода.СостояниеБУ, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|			&НачалоГодаГраница,
		|			ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И Организация = &Организация
		|				И СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ОССодержаниеАлмазов.ОС
		|					ИЗ
		|						ОССодержаниеАлмазов КАК ОССодержаниеАлмазов)) КАК ОСНачалоГода
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|				&КонецГода,
		|				ДатаИсправления = ДАТАВРЕМЯ(1,1,1)
		|				И Организация = &Организация
		|				И Период >= &НачалоГода
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ОССодержаниеАлмазов.ОС
		|						ИЗ
		|							ОССодержаниеАлмазов КАК ОССодержаниеАлмазов)) КАК ОСКонецГода
		|		ПО ОСНачалоГода.ОсновноеСредство = ОСКонецГода.ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДрагоценныеМатериалы.Ссылка КАК Номенклатура,
		|	НоменклатураДрагоценныеМатериалы.Количество КАК КоличествоАлмазов,
		|	НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислитель,
		|	НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменатель,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислительБазовая,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменательБазовая,
		|	НоменклатураДрагоценныеМатериалы.Расположение КАК РасположениеАлмазов
		|ПОМЕСТИТЬ НоменклатураСодержаниеАлмазов
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДрагоценныеМатериалы КАК НоменклатураДрагоценныеМатериалы
		|		ПО ВидыНоменклатуры.Ссылка = НоменклатураДрагоценныеМатериалы.Ссылка.ВидНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.СодержитДрагоценныеМатериалы
		|	И НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал = ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.Алмазы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СодержаниеАлмазов.РасположениеАлмазов КАК Расположение,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0)
		|				* СодержаниеАлмазов.КоэффициентЧислитель * СодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеАлмазов.КоэффициентЗнаменатель * СодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоНачальныйОстаток,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0)
		|				* СодержаниеАлмазов.КоэффициентЧислитель * СодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеАлмазов.КоэффициентЗнаменатель * СодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоПоступило,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0)
		|				* СодержаниеАлмазов.КоэффициентЧислитель * СодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеАлмазов.КоэффициентЗнаменатель * СодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоИзрасходовано,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
		|				* СодержаниеАлмазов.КоэффициентЧислитель * СодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеАлмазов.КоэффициентЗнаменатель * СодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ Алмазы
		|ИЗ
		|	НоменклатураСодержаниеАлмазов КАК СодержаниеАлмазов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета),
		|				,
		|				Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						НоменклатураСодержаниеАлмазов.Номенклатура
		|					ИЗ
		|						НоменклатураСодержаниеАлмазов КАК НоменклатураСодержаниеАлмазов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеАлмазов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОССодержаниеАлмазов.Расположение,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоНачальныйОстаток, 0)
		|				* ОССодержаниеАлмазов.КоэффициентЧислитель * ОССодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (ОССодержаниеАлмазов.КоэффициентЗнаменатель * ОССодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоПоступило, 0)
		|				* ОССодержаниеАлмазов.КоэффициентЧислитель * ОССодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (ОССодержаниеАлмазов.КоэффициентЗнаменатель * ОССодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоИзрасходовано, 0)
		|				* ОССодержаниеАлмазов.КоэффициентЧислитель * ОССодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (ОССодержаниеАлмазов.КоэффициентЗнаменатель * ОССодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеАлмазов.КоличествоАлмазов, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоКонечныйОстаток, 0)
		|				* ОССодержаниеАлмазов.КоэффициентЧислитель * ОССодержаниеАлмазов.КоэффициентЗнаменательБазовая 
		|				/ (ОССодержаниеАлмазов.КоэффициентЗнаменатель * ОССодержаниеАлмазов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3))
		|ИЗ
		|	ОсновныеСредства КАК ОсновныеСредства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОССодержаниеАлмазов КАК ОССодержаниеАлмазов
		|		ПО ОсновныеСредства.ОС = ОССодержаниеАлмазов.ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Алмазы.Расположение,
		|	СУММА(Алмазы.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(Алмазы.КоличествоПоступило) КАК КоличествоПоступило,
		|	СУММА(Алмазы.КоличествоИзрасходовано) КАК КоличествоИзрасходовано,
		|	СУММА(Алмазы.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|ИЗ
		|	Алмазы КАК Алмазы
		|
		|СГРУППИРОВАТЬ ПО
		|	Алмазы.Расположение"
	);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.КомпонентыОсновныхСредств);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеИзделия);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГодаГраница", Новый Граница(НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Расположения = Новый Соответствие;
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВНаконечниках, "П0102");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВВолоках, "П0103");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВРезцах, "П0104");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВСверлах, "П0105");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВСтеклорезах, "П0106");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВИглах, "П0107");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВОправах, "П0108");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВДолотах, "П0109");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВКоронках, "П0110");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВРоликах, "П0111");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВКарандашах, "П0112");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВПластинах, "П0113");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВБрусках, "П0114");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВАбразивномИнструменте, "П0115");
		Расположения.Вставить(Перечисления.РасположениеДрагоценныхКамней.ВОтрезныхКругахИШтрипсовыхПлитах, "П0116");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Строка = Расположения.Получить(Выборка.Расположение);
			Если Строка=Неопределено Тогда
				Строка = "П0102";
			КонецЕсли;
			
			СтруктураОтчета[Строка+"04"] = СтруктураОтчета[Строка+"04"] + Выборка.КоличествоНачальныйОстаток;
			СтруктураОтчета[Строка+"05"] = СтруктураОтчета[Строка+"05"] + Выборка.КоличествоПоступило;
			СтруктураОтчета[Строка+"06"] = СтруктураОтчета[Строка+"06"] + Выборка.КоличествоИзрасходовано;
			
			
			Если Выборка.Расположение = Перечисления.РасположениеДрагоценныхКамней.ВОтрезныхКругахИШтрипсовыхПлитах Тогда
				// Увеличить показатели строки №15, т.к. показатели строки отрезных кругов и штрипсовых плит входят в абразивный инструмент.
				Строка = "П0115";
				СтруктураОтчета[Строка+"04"] = СтруктураОтчета[Строка+"04"] + Выборка.КоличествоНачальныйОстаток;
				СтруктураОтчета[Строка+"05"] = СтруктураОтчета[Строка+"05"] + Выборка.КоличествоПоступило;
				СтруктураОтчета[Строка+"06"] = СтруктураОтчета[Строка+"06"] + Выборка.КоличествоИзрасходовано;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураОтчета);
	
КонецПроцедуры

// Процедура заполняет сведения о показателях регламентированного отчета
//
// Параметры:
// 		ПоказателиОтчета - Структура - Структура показателей отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырьеФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	ШаблонПоляОтчета = "П01%1%2";
	Для Строка = 1 По 16 Цикл
		Для Графа = 4 По 6 Цикл
			ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПоляОтчета, Формат(Строка, "ЧЦ=2; ЧВН="), Формат(Графа, "ЧЦ=2; ЧВН="));
			РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, ИмяПоказателя, Истина, Ложь);
		КонецЦикла;
		Строка = Строка + 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
// 		ПараметрыОтчета - Структура - Структура параметров отчета
// 		Контейнер - Структура - Контейнер отображаемого отчета.
//
Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФорма2ДМДавальческоеСырьеФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	ШаблонПоляОтчета = "П01%1%2";
	СтруктураОтчета = Новый Структура;
	Для Строка = 1 По 16 Цикл
		Для Графа = 4 По 8 Цикл
			СтруктураОтчета.Вставить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПоляОтчета, Формат(Строка, "ЧЦ=2; ЧВН="), Формат(Графа, "ЧЦ=2; ЧВН=")),
				0);
		КонецЦикла;
		Строка = Строка + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДрагоценныеМатериалы.Ссылка КАК Номенклатура,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал КАК ДрагоценныйМатериал,
		|	НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислитель,
		|	НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменатель,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Числитель КАК КоэффициентЧислительБазовая,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Знаменатель КАК КоэффициентЗнаменательБазовая,
		|	НоменклатураДрагоценныеМатериалы.Количество КАК Количество
		|ПОМЕСТИТЬ НоменклатураСодержаниеМеталлов
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДрагоценныеМатериалы КАК НоменклатураДрагоценныеМатериалы
		|		ПО ВидыНоменклатуры.Ссылка = НоменклатураДрагоценныеМатериалы.Ссылка.ВидНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.СодержитДрагоценныеМатериалы
		|	И НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал <> ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.Алмазы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.ДрагоценныйМатериал КАК ДрагоценныйМатериал,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0)
		|				* СодержаниеМеталлов.КоэффициентЧислитель * СодержаниеМеталлов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеМеталлов.КоэффициентЗнаменатель * СодержаниеМеталлов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоНачальныйОстаток,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0)
		|				* СодержаниеМеталлов.КоэффициентЧислитель * СодержаниеМеталлов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеМеталлов.КоэффициентЗнаменатель * СодержаниеМеталлов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоПоступило,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) 
		|				* СодержаниеМеталлов.КоэффициентЧислитель * СодержаниеМеталлов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеМеталлов.КоэффициентЗнаменатель * СодержаниеМеталлов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоИзрасходовано,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0)
		|				* СодержаниеМеталлов.КоэффициентЧислитель * СодержаниеМеталлов.КоэффициентЗнаменательБазовая 
		|				/ (СодержаниеМеталлов.КоэффициентЗнаменатель * СодержаниеМеталлов.КоэффициентЧислительБазовая) КАК ЧИСЛО(15,3)) КАК КоличествоКонечныйОстаток
		|ПОМЕСТИТЬ ИтоговыеДанные
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета),
		|				,
		|				Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						НоменклатураСодержаниеМеталлов.Номенклатура
		|					ИЗ
		|						НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанные.ДрагоценныйМатериал,
		|	СУММА(ИтоговыеДанные.КоличествоНачальныйОстаток) КАК КоличествоНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.КоличествоПоступило) КАК КоличествоПоступило,
		|	СУММА(ИтоговыеДанные.КоличествоИзрасходовано) КАК КоличествоИзрасходовано,
		|	СУММА(ИтоговыеДанные.КоличествоКонечныйОстаток) КАК КоличествоКонечныйОстаток
		|ИЗ
		|	ИтоговыеДанные КАК ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанные.ДрагоценныйМатериал"
	);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработкуВПроизводстве);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПотребленныеВПроизводстве);
	
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГодаГраница", Новый Граница(НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Металлы = Новый Соответствие;
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Золото, "П0101");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.СусальноеЗолото, "П0101");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Серебро, "П0103");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Платина, "П0105");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.ПлатинаВЛабораторнойПосудеДляХиманализов, "П0105");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Иридий, "П0107");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Родий, "П0109");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Палладий, "П0111");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Рутений, "П0113");
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Осмий, "П0115");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Строка = Металлы.Получить(Выборка.ДрагоценныйМатериал);
			
			Если Строка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтчета[Строка+"04"] = СтруктураОтчета[Строка+"04"] + Выборка.КоличествоНачальныйОстаток;
			СтруктураОтчета[Строка+"05"] = СтруктураОтчета[Строка+"05"] + Выборка.КоличествоПоступило;
			СтруктураОтчета[Строка+"06"] = СтруктураОтчета[Строка+"06"] + Выборка.КоличествоИзрасходовано;
			СтруктураОтчета[Строка+"08"] = СтруктураОтчета[Строка+"08"] + Выборка.КоличествоКонечныйОстаток;
			
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураОтчета);
	
КонецПроцедуры

// Процедура заполняет сведения о показателях регламентированного отчета
//
// Параметры:
// 		ПоказателиОтчета - Структура - Структура показателей отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФорма4ДМФормаОтчета2012Кв1(ПоказателиОтчета) Экспорт
	
	МассивНаборовПолей = Новый Массив;
	МассивНаборовПолей.Добавить("П0100, П0105, П0106, П0110, П0115, П0120, П0125, П0130"); // Коды строк золота
	МассивНаборовПолей.Добавить("П0200, П0205, П0206, П0210, П0230, П0235, П0240, П0245"); // 		серебра
	МассивНаборовПолей.Добавить("П0300, П0305, П0306, П0315, П0320, П0325, П0330, П0335"); // 		платины
	МассивНаборовПолей.Добавить("П0400, П0405, П0406, П0415, П0420, П0425, П0430, П0435"); // 		металлов платиновой группы
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("4"); // Остаток на начало года
	МассивКолонок.Добавить("5"); // Поступило
	МассивКолонок.Добавить("6"); // Списано      
	МассивКолонок.Добавить("7"); // Истрачено
	МассивКолонок.Добавить("9"); // Остаток на начало года
	
	Для Каждого НаборПолей Из МассивНаборовПолей Цикл
		СтруктураПолей = Новый Структура(НаборПолей);
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			Строка = КлючИЗначение.Ключ;
			Для Каждого Колонка Из МассивКолонок Цикл
				РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, Строка+Колонка, Истина, Ложь);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
// Параметры:
// 		ПараметрыОтчета - Структура - Структура параметров отчета
// 		Контейнер - Структура - Контейнер отображаемого отчета.
//
Процедура ЗаполнитьРегламентированныйОтчетСтатистикаФорма4ДМФормаОтчета2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	СтруктураОтчета = Новый Структура;
	
	МассивНаборовПолей = Новый Массив;
	МассивНаборовПолей.Добавить("П0100, П0105, П0106, П0110, П0115, П0120, П0125, П0130"); // Коды строк золота
	МассивНаборовПолей.Добавить("П0200, П0205, П0206, П0210, П0230, П0235, П0240, П0245"); // 		серебра
	МассивНаборовПолей.Добавить("П0300, П0305, П0306, П0315, П0320, П0325, П0330, П0335"); // 		платины
	МассивНаборовПолей.Добавить("П0400, П0405, П0406, П0410, П0420, П0415, П0425, П0430"); // 		металлов платиновой группы
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("4"); // Остаток на начало года
	МассивКолонок.Добавить("5"); // Поступило
	МассивКолонок.Добавить("6"); // Списано      
	МассивКолонок.Добавить("7"); // Истрачено
	МассивКолонок.Добавить("9"); // Остаток на начало года
	
	Для Каждого НаборПолей Из МассивНаборовПолей Цикл
		СтруктураПолей = Новый Структура(НаборПолей);
		Для Каждого КлючИЗначение Из СтруктураПолей Цикл
			Строка = КлючИЗначение.Ключ;
			Для Каждого Колонка Из МассивКолонок Цикл
				СтруктураОтчета.Вставить(Строка+Колонка, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.Ссылка КАК ОС,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал КАК Металл,
		|	СУММА(ОбъектыЭксплуатацииДрагоценныеМатериалы.Количество * ОбъектыЭксплуатацииДрагоценныеМатериалы.ЕдиницаИзмерения.Числитель * ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Знаменатель / (ОбъектыЭксплуатацииДрагоценныеМатериалы.ЕдиницаИзмерения.Знаменатель * ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Числитель)) КАК Количество
		|ПОМЕСТИТЬ ОССодержаниеМеталлов
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.ДрагоценныеМатериалы КАК ОбъектыЭксплуатацииДрагоценныеМатериалы
		|ГДЕ
		|	НЕ ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал В (
		|		ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.Алмазы), 
		|		ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.СолиСеребраДляХиманализов))
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.Ссылка,
		|	ОбъектыЭксплуатацииДрагоценныеМатериалы.ДрагоценныйМатериал
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ОСНачалоГода.ОсновноеСредство, ОСКонецГода.ОсновноеСредство) КАК ОС,
		|	ВЫБОР
		|		КОГДА ОСНачалоГода.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА ОСНачалоГода.ОсновноеСредство ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоПоступило,
		|	ВЫБОР
		|		КОГДА ОСКонецГода.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоИзрасходовано,
		|	ВЫБОР
		|		КОГДА ОСКонецГода.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПервоначальныеСведенияОСКонецГода.ДокументСнятияСУчетаБУ, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.СписаниеОС2_4
		|				ИЛИ ЕСТЬNULL(ПервоначальныеСведенияОСКонецГода.ДокументСнятияСУчетаБУ, НЕОПРЕДЕЛЕНО) ССЫЛКА Документ.СписаниеОС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоСписаниеОС
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|			&НачалоГодаГраница,
		|			ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1)
		|				И Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						ОССодержаниеМеталлов.ОС
		|					ИЗ
		|						ОССодержаниеМеталлов КАК ОССодержаниеМеталлов)) КАК ОСНачалоГода
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
		|				&КонецГода,
		|				ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1)
		|					И Организация = &Организация
		|					И Период >= &НачалоГода
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ОССодержаниеМеталлов.ОС
		|						ИЗ
		|							ОССодержаниеМеталлов КАК ОССодержаниеМеталлов)) КАК ОСКонецГода
		|		ПО ОСНачалоГода.ОсновноеСредство = ОСКонецГода.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|				&КонецГода,
		|				Организация = &Организация
		|					И Период >= &НачалоГода
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							ОССодержаниеМеталлов.ОС
		|						ИЗ
		|							ОССодержаниеМеталлов КАК ОССодержаниеМеталлов)) КАК ПервоначальныеСведенияОСКонецГода
		|		ПО (ОСКонецГода.ОсновноеСредство = ПервоначальныеСведенияОСКонецГода.ОсновноеСредство)
		|			И (ОСКонецГода.Организация = ПервоначальныеСведенияОСКонецГода.Организация)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураДрагоценныеМатериалы.Ссылка КАК Номенклатура,
		|	СУММА(НоменклатураДрагоценныеМатериалы.Количество * НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Числитель * НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Знаменатель / (НоменклатураДрагоценныеМатериалы.ЕдиницаИзмерения.Знаменатель * НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал.ЕдиницаИзмерения.Числитель)) КАК Количество,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал КАК Металл
		|ПОМЕСТИТЬ НоменклатураСодержаниеМеталлов
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДрагоценныеМатериалы КАК НоменклатураДрагоценныеМатериалы
		|		ПО ВидыНоменклатуры.Ссылка = НоменклатураДрагоценныеМатериалы.Ссылка.ВидНоменклатуры
		|ГДЕ
		|	ВидыНоменклатуры.СодержитДрагоценныеМатериалы
		|	И НЕ НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал В (
		|		ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.Алмазы), 
		|		ЗНАЧЕНИЕ(Справочник.ДрагоценныеМатериалы.СолиСеребраДляХиманализов))
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураДрагоценныеМатериалы.Ссылка,
		|	НоменклатураДрагоценныеМатериалы.ДрагоценныйМатериал
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТМЦВЭксплуатации.Количество) КАК Количество,
		|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втВводТМЦВЭксплуатацию
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
		|			&НачалоГодаГраница,
		|			&КонецГода,
		|			Регистратор,
		|			СчетДт В ИЕРАРХИИ (&Счета_МЦ),
		|			,
		|			,
		|			,
		|			Организация = &Организация
		|				И СубконтоДт1 В
		|					(ВЫБРАТЬ
		|						НоменклатураСодержаниеМеталлов.Номенклатура
		|					ИЗ
		|						НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОборотыДтКт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковТМЦВЭксплуатации.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
		|		ПО ХозрасчетныйОборотыДтКт.Регистратор = ТМЦВЭксплуатации.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТМЦВЭксплуатации.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НоменклатураСодержаниеМеталлов.Металл КАК Металл,
		|	СУММА(ВЫРАЗИТЬ(НоменклатураСодержаниеМеталлов.Количество * втВводТМЦВЭксплуатацию.Количество КАК ЧИСЛО(15, 3))) КАК КоличествоДМ
		|ПОМЕСТИТЬ ТМЦСодержаниеМеталлов
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВводТМЦВЭксплуатацию КАК втВводТМЦВЭксплуатацию
		|		ПО НоменклатураСодержаниеМеталлов.Номенклатура = втВводТМЦВЭксплуатацию.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураСодержаниеМеталлов.Металл
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОССодержаниеМеталлов.Металл КАК Металл,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)) КАК ОСНачальныйОстаток,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоПоступило, 0) КАК ЧИСЛО(15, 3)) КАК ОСПоступило,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ЭтоСписаниеОС
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоИзрасходовано, 0) КАК ЧИСЛО(15, 3))
		|	КОНЕЦ КАК ОСИзрасходовано,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ЭтоСписаниеОС
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоИзрасходовано, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОССписано,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)) КАК ОСКонечныйОстаток,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ОС.ОбъектБытовогоНазначения
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОСБытНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ОС.ОбъектБытовогоНазначения
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоПоступило, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОСБытПоступило,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ОС.ОбъектБытовогоНазначения
		|				И НЕ ОсновныеСредства.ЭтоСписаниеОС
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоИзрасходовано, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОСБытИзрасходовано,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ОС.ОбъектБытовогоНазначения
		|				И ОсновныеСредства.ЭтоСписаниеОС
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоИзрасходовано, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОСБытСписано,
		|	ВЫБОР
		|		КОГДА ОсновныеСредства.ОС.ОбъектБытовогоНазначения
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ОССодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ОсновныеСредства.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3))
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОСБытКонечныйОстаток,
		|	0 КАК ТМЦНачальныйОстаток,
		|	0 КАК ТМЦПоступило,
		|	0 КАК ТМЦИзрасходовано,
		|	0 КАК ТМЦКонечныйОстаток,
		|	0 КАК ПолуфабрикатыНачальныйОстаток,
		|	0 КАК ПолуфабрикатыПоступило,
		|	0 КАК ПолуфабрикатыИзрасходовано,
		|	0 КАК ПолуфабрикатыКонечныйОстаток,
		|	0 КАК ОборудованиеНачальныйОстаток,
		|	0 КАК ОборудованиеПоступило,
		|	0 КАК ОборудованиеИзрасходовано,
		|	0 КАК ОборудованиеКонечныйОстаток,
		|	0 КАК ЗапасныеЧастиНачальныйОстаток,
		|	0 КАК ЗапасныеЧастиПоступило,
		|	0 КАК ЗапасныеЧастиИзрасходовано,
		|	0 КАК ЗапасныеЧастиКонечныйОстаток,
		|	0 КАК МатериалыНачальныйОстаток,
		|	0 КАК МатериалыПоступило,
		|	0 КАК МатериалыИзрасходовано,
		|	0 КАК МатериалыКонечныйОстаток,
		|	0 КАК ГотоваяПродукцияНачальныйОстаток,
		|	0 КАК ГотоваяПродукцияПоступило,
		|	0 КАК ГотоваяПродукцияИзрасходовано,
		|	0 КАК ГотоваяПродукцияКонечныйОстаток
		|ПОМЕСТИТЬ ИтоговыеДанные
		|ИЗ
		|	ОсновныеСредства КАК ОсновныеСредства
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОССодержаниеМеталлов КАК ОССодержаниеМеталлов
		|		ПО ОсновныеСредства.ОС = ОССодержаниеМеталлов.ОС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В ИЕРАРХИИ (&Счета_МЦ),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета_Полуфабрикаты),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета_Оборудование),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета_ЗапасныеЧасти),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета_Материалы),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СодержаниеМеталлов.Металл,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт, 0) КАК ЧИСЛО(15, 3)),
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СодержаниеМеталлов.Количество, 0) * ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток, 0) КАК ЧИСЛО(15, 3))
		|ИЗ
		|	НоменклатураСодержаниеМеталлов КАК СодержаниеМеталлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|				&НачалоГодаГраница,
		|				&КонецГода,
		|				,
		|				,
		|				Счет В (&Счета_ГотоваяПродукция),
		|				,
		|				Организация = &Организация
		|					И Субконто1 В
		|						(ВЫБРАТЬ
		|							НоменклатураСодержаниеМеталлов.Номенклатура
		|						ИЗ
		|							НоменклатураСодержаниеМеталлов КАК НоменклатураСодержаниеМеталлов)) КАК ХозрасчетныйОстаткиИОбороты
		|		ПО СодержаниеМеталлов.Номенклатура = ХозрасчетныйОстаткиИОбороты.Субконто1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтоговыеДанные.Металл КАК Металл,
		|	СУММА(ИтоговыеДанные.ОСНачальныйОстаток) + СУММА(ИтоговыеДанные.ТМЦНачальныйОстаток) КАК ОСНачальныйОстаток,
		|	ВЫБОР
		|		КОГДА СУММА(ИтоговыеДанные.ТМЦПоступило) - СУММА(ИтоговыеДанные.ОССписано) > 0
		|			ТОГДА СУММА(ИтоговыеДанные.ОСПоступило) + СУММА(ИтоговыеДанные.ТМЦПоступило) - СУММА(ИтоговыеДанные.ОССписано)
		|		ИНАЧЕ СУММА(ИтоговыеДанные.ОСПоступило)
		|	КОНЕЦ КАК ОСПоступило,
		|	СУММА(ИтоговыеДанные.ОСИзрасходовано) КАК ОСИзрасходовано,
		|	ВЫБОР
		|		КОГДА СУММА(ИтоговыеДанные.ТМЦПоступило) - СУММА(ИтоговыеДанные.ОССписано) < 0
		|			ТОГДА СУММА(ИтоговыеДанные.ОССписано) - СУММА(ИтоговыеДанные.ТМЦПоступило)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОССписано,
		|	СУММА(ИтоговыеДанные.ОСКонечныйОстаток) + СУММА(ИтоговыеДанные.ТМЦКонечныйОстаток) КАК ОСКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ОСБытНачальныйОстаток) КАК ОСБытНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ОСБытПоступило) КАК ОСБытПоступило,
		|	СУММА(ИтоговыеДанные.ОСБытИзрасходовано) КАК ОСБытИзрасходовано,
		|	0 КАК ОСБытСписано,
		|	СУММА(ИтоговыеДанные.ОСБытКонечныйОстаток) КАК ОСБытКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ПолуфабрикатыНачальныйОстаток) КАК ПолуфабрикатыНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ПолуфабрикатыПоступило) КАК ПолуфабрикатыПоступило,
		|	СУММА(ИтоговыеДанные.ПолуфабрикатыИзрасходовано) КАК ПолуфабрикатыИзрасходовано,
		|	0 КАК ПолуфабрикатыСписано,
		|	СУММА(ИтоговыеДанные.ПолуфабрикатыКонечныйОстаток) КАК ПолуфабрикатыКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ОборудованиеНачальныйОстаток) КАК ОборудованиеНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ОборудованиеПоступило) КАК ОборудованиеПоступило,
		|	СУММА(ИтоговыеДанные.ОборудованиеИзрасходовано) КАК ОборудованиеИзрасходовано,
		|	0 КАК ОборудованиеСписано,
		|	СУММА(ИтоговыеДанные.ОборудованиеКонечныйОстаток) КАК ОборудованиеКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ЗапасныеЧастиНачальныйОстаток) КАК ЗапасныеЧастиНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ЗапасныеЧастиПоступило) КАК ЗапасныеЧастиПоступило,
		|	СУММА(ИтоговыеДанные.ЗапасныеЧастиИзрасходовано) КАК ЗапасныеЧастиИзрасходовано,
		|	0 КАК ЗапасныеЧастиСписано,
		|	СУММА(ИтоговыеДанные.ЗапасныеЧастиКонечныйОстаток) КАК ЗапасныеЧастиКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.МатериалыНачальныйОстаток) КАК МатериалыНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.МатериалыПоступило) КАК МатериалыПоступило,
		|	СУММА(ИтоговыеДанные.МатериалыИзрасходовано) КАК МатериалыИзрасходовано,  
		|	0 КАК МатериалыСписано,
		|	СУММА(ИтоговыеДанные.МатериалыКонечныйОстаток) КАК МатериалыКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ГотоваяПродукцияНачальныйОстаток) КАК ГотоваяПродукцияНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ГотоваяПродукцияПоступило) КАК ГотоваяПродукцияПоступило,
		|	СУММА(ИтоговыеДанные.ГотоваяПродукцияИзрасходовано) КАК ГотоваяПродукцияИзрасходовано, 
		|	0 КАК ГотоваяПродукцияСписано,
		|	СУММА(ИтоговыеДанные.ГотоваяПродукцияКонечныйОстаток) КАК ГотоваяПродукцияКонечныйОстаток,
		|	СУММА(ИтоговыеДанные.ОСНачальныйОстаток + ИтоговыеДанные.ТМЦНачальныйОстаток + ИтоговыеДанные.ПолуфабрикатыНачальныйОстаток + ИтоговыеДанные.ОборудованиеНачальныйОстаток + ИтоговыеДанные.ЗапасныеЧастиНачальныйОстаток + ИтоговыеДанные.МатериалыНачальныйОстаток + ИтоговыеДанные.ГотоваяПродукцияНачальныйОстаток) КАК ВсегоНачальныйОстаток,
		|	СУММА(ИтоговыеДанные.ОСПоступило + ИтоговыеДанные.ПолуфабрикатыПоступило + ИтоговыеДанные.ОборудованиеПоступило + ИтоговыеДанные.ЗапасныеЧастиПоступило + ИтоговыеДанные.МатериалыПоступило + ИтоговыеДанные.ГотоваяПродукцияПоступило) КАК ВсегоПоступило,
		|	СУММА(ИтоговыеДанные.ОСИзрасходовано + ИтоговыеДанные.ПолуфабрикатыИзрасходовано + ИтоговыеДанные.ОборудованиеИзрасходовано + ИтоговыеДанные.ЗапасныеЧастиИзрасходовано + ИтоговыеДанные.МатериалыИзрасходовано + ИтоговыеДанные.ГотоваяПродукцияИзрасходовано) КАК ВсегоИзрасходовано,
		|	ВЫБОР
		|		КОГДА СУММА(ИтоговыеДанные.ТМЦПоступило) - СУММА(ИтоговыеДанные.ОССписано) < 0
		|			ТОГДА СУММА(ИтоговыеДанные.ОССписано) - СУММА(ИтоговыеДанные.ТМЦПоступило)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВсегоСписано,
		|	СУММА(ИтоговыеДанные.ОСКонечныйОстаток + ИтоговыеДанные.ТМЦКонечныйОстаток + ИтоговыеДанные.ПолуфабрикатыКонечныйОстаток + ИтоговыеДанные.ОборудованиеКонечныйОстаток + ИтоговыеДанные.ЗапасныеЧастиКонечныйОстаток + ИтоговыеДанные.МатериалыКонечныйОстаток + ИтоговыеДанные.ГотоваяПродукцияКонечныйОстаток) КАК ВсегоКонечныйОстаток
		|ИЗ
		|	ИтоговыеДанные КАК ИтоговыеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИтоговыеДанные.Металл"
	);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующие);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	Запрос.УстановитьПараметр("Счета_Полуфабрикаты", Счета);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Запрос.УстановитьПараметр("Счета_Оборудование", Счета);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	Запрос.УстановитьПараметр("Счета_ЗапасныеЧасти", Счета);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеМатериалы);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	Запрос.УстановитьПараметр("Счета_Материалы", Счета);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	Запрос.УстановитьПараметр("Счета_ГотоваяПродукция", Счета);
	
	Счета = Новый Массив;
	Счета.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации);
	Запрос.УстановитьПараметр("Счета_МЦ", Счета);
	
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоГодаГраница", Новый Граница(НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПараметрыОтчета.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ПоляЗолото = Новый Структура;
		ПоляЗолото.Вставить("Всего",            "П0100");
		ПоляЗолото.Вставить("ОС",               "П0105");
		ПоляЗолото.Вставить("ОСБыт",            "П0106");
		ПоляЗолото.Вставить("Полуфабрикаты",    "П0110");
		ПоляЗолото.Вставить("Оборудование",     "П0120");
		ПоляЗолото.Вставить("ЗапасныеЧасти",    "П0115");
		ПоляЗолото.Вставить("Материалы",        "П0125");
		ПоляЗолото.Вставить("ГотоваяПродукция", "П0130");
		
		ПоляСеребро = Новый Структура;
		ПоляСеребро.Вставить("Всего",            "П0200");
		ПоляСеребро.Вставить("ОС",               "П0205");
		ПоляСеребро.Вставить("ОСБыт",            "П0206");
		ПоляСеребро.Вставить("Полуфабрикаты",    "П0210");
		ПоляСеребро.Вставить("Оборудование",     "П0230");
		ПоляСеребро.Вставить("ЗапасныеЧасти",    "П0235");
		ПоляСеребро.Вставить("Материалы",        "П0240");
		ПоляСеребро.Вставить("ГотоваяПродукция", "П0245");
		
		ПоляПлатина = Новый Структура;
		ПоляПлатина.Вставить("Всего",            "П0300");
		ПоляПлатина.Вставить("ОС",               "П0305");
		ПоляПлатина.Вставить("ОСБыт",            "П0306");
		ПоляПлатина.Вставить("Полуфабрикаты",    "П0315");
		ПоляПлатина.Вставить("Оборудование",     "П0320");
		ПоляПлатина.Вставить("ЗапасныеЧасти",    "П0325");
		ПоляПлатина.Вставить("Материалы",        "П0330");
		ПоляПлатина.Вставить("ГотоваяПродукция", "П0335");
		
		ПоляМеталловПлатиновойГруппы = Новый Структура;
		ПоляМеталловПлатиновойГруппы.Вставить("Всего",            "П0400");
		ПоляМеталловПлатиновойГруппы.Вставить("ОС",               "П0405");
		ПоляМеталловПлатиновойГруппы.Вставить("ОСБыт",            "П0406");
		ПоляМеталловПлатиновойГруппы.Вставить("Полуфабрикаты",    "П0410");
		ПоляМеталловПлатиновойГруппы.Вставить("Оборудование",     "П0415");
		ПоляМеталловПлатиновойГруппы.Вставить("ЗапасныеЧасти",    "П0420");
		ПоляМеталловПлатиновойГруппы.Вставить("Материалы",        "П0425");
		ПоляМеталловПлатиновойГруппы.Вставить("ГотоваяПродукция", "П0430");
		
		Металлы = Новый Соответствие;
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Золото, ПоляЗолото);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.СусальноеЗолото, ПоляЗолото);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Серебро, ПоляСеребро);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Платина, ПоляПлатина);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.ПлатинаВЛабораторнойПосудеДляХиманализов, ПоляПлатина);
		
		// Металлы платиновой группы.
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Иридий, ПоляМеталловПлатиновойГруппы);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Осмий, ПоляМеталловПлатиновойГруппы);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Палладий, ПоляМеталловПлатиновойГруппы);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Родий, ПоляМеталловПлатиновойГруппы);
		Металлы.Вставить(Справочники.ДрагоценныеМатериалы.Рутений, ПоляМеталловПлатиновойГруппы);
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Поля = Металлы.Получить(Выборка.Металл);
			Если Поля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого ОписаниеПоля Из Поля Цикл
				
				СтруктураОтчета[ОписаниеПоля.Значение+"4"] = 
					СтруктураОтчета[ОписаниеПоля.Значение+"4"] + Выборка[ОписаниеПоля.Ключ + "НачальныйОстаток"];
					
				СтруктураОтчета[ОписаниеПоля.Значение+"5"] = 
					СтруктураОтчета[ОписаниеПоля.Значение+"5"] + Выборка[ОписаниеПоля.Ключ + "Поступило"];
					
				СтруктураОтчета[ОписаниеПоля.Значение+"6"] = 
					СтруктураОтчета[ОписаниеПоля.Значение+"6"] + Выборка[ОписаниеПоля.Ключ + "Списано"];   
					
				СтруктураОтчета[ОписаниеПоля.Значение+"7"] = 
					СтруктураОтчета[ОписаниеПоля.Значение+"7"] + Выборка[ОписаниеПоля.Ключ + "Израсходовано"];
					
				СтруктураОтчета[ОписаниеПоля.Значение+"9"] = 
					СтруктураОтчета[ОписаниеПоля.Значение+"9"] + Выборка[ОписаниеПоля.Ключ + "КонечныйОстаток"];
					
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Контейнер.ПолеТабличногоДокументаФормаОтчета, СтруктураОтчета);
	
КонецПроцедуры

// Заполняет список полей формы, заполняемых автоматически.
// 
// Параметры:
// 	ЗаполняемыеПоля  - коллекция полей в формате БРО (дополняется элементами)
//	ИмяОтчета        - имя отчета в метаданных.
//
Процедура ЗаполнитьСписокАвтозаполняемыхПолей(ЗаполняемыеПоля, Знач ИмяОтчета, ИмяРедакцииОтчета, Период) Экспорт
	
	Если ИмяОтчета <> "РегламентированныйОтчетСтатистикаФормаП3" Тогда
		// Пока умеем заполнять только одну форму - "П-3". 3 - это цифра
		Возврат;
	КонецЕсли;
	
	НеЗаполняемыеПоля = ИнтерфейсыВзаимодействияБРО.ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяОтчета, ИмяРедакцииОтчета, Период);
	
	НеЗаполняемыеПоляПоиск = Новый Соответствие; // Используем соответствие в качестве индекса для ускорения поиска
	Для каждого ИмяПоля Из НеЗаполняемыеПоля Цикл
		НеЗаполняемыеПоляПоиск.Вставить(ИмяПоля, Истина);
	КонецЦикла;
	
	Для каждого ПравилоЗаполнения Из ПравилаЗаполнения(ИмяОтчета) Цикл
		ПолеЗаполняется = НеЗаполняемыеПоляПоиск[ПравилоЗаполнения.ИмяПоля] = Неопределено;
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ЗаполняемыеПоля, ПравилоЗаполнения.ИмяПоля, ПолеЗаполняется, Ложь); // Расшифровки пока нет
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателяхОтчетаРегламентированныйОтчетСтатистикаФормаП3ФормаОтчета2013Кв1(ПоказателиОтчета, Знач Период) Экспорт
	ЗаполнитьСписокАвтозаполняемыхПолей(ПоказателиОтчета, "РегламентированныйОтчетСтатистикаФормаП3", "ФормаОтчета2013Кв1", Период);
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//	- Контейнер         - Структура - модифицируемый параметр; данные отчета которые нужно заполнить
//	- ИмяОтчета         - Строка    - идентификатор отчета (имя отчета в метаданных)
//	- ИмяРедакцииОтчета - Строка    - идентификатор редакции отчета (имя формы в метаданных)
// 	- ПараметрыОтчета   - Структура - структура параметров отчета, должна содержать ключи:
//		- Организация 						  - СправочникСсылка.Организации
//		- мДатаНачалаПериодаОтчета 			  - Дата
//		- мДатаКонцаПериодаОтчета 			  - Дата
//		- Периодичность			 			  - ПеречислениеСсылка.Периодичность.
// 
Процедура ЗаполнитьФормуСтатистики(Контейнер, Знач ИмяОтчета, Знач ИмяРедакцииОтчета, ПараметрыОтчета) Экспорт
	
	Если ИмяОтчета <> "РегламентированныйОтчетСтатистикаФормаП3" Тогда
		// Пока умеем заполнять только одну форму - "П-3". 3 - это цифра
		Возврат;
	КонецЕсли;
	
	Показатели = ПоказателиФормыП3(
		ИмяРедакцииОтчета,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.мДатаНачалаПериодаОтчета,
		ПараметрыОтчета.мДатаКонцаПериодаОтчета,
		ПараметрыОтчета.Периодичность);
	
	РассчитатьЗначенияПоказателей(Показатели, Отчеты[ИмяОтчета]);
	
	ЗаполнитьКонтейнерФормыП3(Контейнер, Показатели);
	
КонецПроцедуры

// Инициализирует коллекцию с описаниями показателей
//
Функция НовыйОписаниеПоказателей() Экспорт
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("ИмяПоля",          Новый ОписаниеТипов("Строка")); 
	// Как правило, начинается с символа "П" и содержит 13 знаков. 
	// Но в отдельных случаях может быть и строкой другого вида.
	Показатели.Колонки.Добавить("ОбъектНаблюдения", Новый ОписаниеТипов("Строка"));
	Показатели.Колонки.Добавить("Характеристика",   Новый ОписаниеТипов("Строка"));    
	// Характеристика объекта наблюдения
	Показатели.Колонки.Добавить("Аналитика",        Новый ОписаниеТипов("Строка")); 
	// Некоторые объекты могут характеризоваться списком показателей, 
	// например, задолженность в разрезе стран мира, откуда должники.
	Показатели.Колонки.Добавить("Организация",      Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Показатели.Колонки.Добавить("НачалоПериода",    
									Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Показатели.Колонки.Добавить("КонецПериода",     
									Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Показатели.Колонки.Добавить("Значение",         Новый ОписаниеТипов("Число"));
	
	Возврат Показатели;
	
КонецФункции

// Расчитывает значения статистических показателей - заполняет колонку Значение в переданной таблице.
//
// Параметры:
//	- Показатели - ТаблицаЗначений - данные, которые нужно рассчитать.
//              Структура таблицы описана в НовыйОписаниеПоказателей().
//
Процедура РассчитатьЗначенияПоказателей(Показатели, МеханизмРасчета) Экспорт
	
	// Рассчитываем не каждый показатель отдельно, а группируем их с точки зрения эффективности расчета - 
	// одним запросом рассчитаем все характеристики объекта наблюдения за конкретный период.
	ИзмеренияДляРасчета = "ОбъектНаблюдения, Аналитика, Организация, НачалоПериода, КонецПериода";
	ИндексОтбораХарактеристик = Показатели.Индексы.Добавить(ИзмеренияДляРасчета); // Индекс удалим в конце процедуры
	
	ЗапросыДляВыполнения = Показатели.Скопировать();
	ЗапросыДляВыполнения.Свернуть(ИзмеренияДляРасчета);
	
	ПараметрыЗапроса = Новый Структура(ИзмеренияДляРасчета);
	
	Для каждого ОписаниеЗапроса Из ЗапросыДляВыполнения Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ОписаниеЗапроса);
		Характеристики = Показатели.НайтиСтроки(ПараметрыЗапроса); // Каждый запрос позволяет получить набор характеристики
		
		// Инициализируем компоновщик данных
		СхемаКомпоновки = МеханизмРасчета.ПолучитьМакет(ОписаниеЗапроса.ОбъектНаблюдения);
		
		КомпоновщикНастроекСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекСКД.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
		КомпоновщикНастроекСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
		
		НастройкиДляКомпоновкиМакета = КомпоновщикНастроекСКД.ПолучитьНастройки();
		
		// Передадим значения параметров
		Для каждого КлючИЗначение Из ПараметрыЗапроса Цикл
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(НастройкиДляКомпоновкиМакета, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		// Для получения дополнительной аналитики зачастую требуется обращаться к связанным таблицам.
		Если ЗначениеЗаполнено(ОписаниеЗапроса.Аналитика) Тогда
			// Для того, чтобы дать понять СКД, что нужно обратиться к таким таблицам, добавим соответствующие поле и отбор.
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиДляКомпоновкиМакета, "Аналитика");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкиДляКомпоновкиМакета,
				"Аналитика",
				ОписаниеЗапроса.Аналитика,
				ВидСравненияКомпоновкиДанных.Равно);
		Иначе
			// Если не требуется отбор по аналитике, то удалим соответствующие наборы из схемы
			НаборАналитика = СхемаКомпоновки.НаборыДанных.Найти("Аналитика");
			Если НаборАналитика <> Неопределено Тогда
				Для каждого Связь Из СписокСвязейНабораДанных("Аналитика", СхемаКомпоновки) Цикл
					СхемаКомпоновки.СвязиНаборовДанных.Удалить(Связь);
				КонецЦикла;	
				СхемаКомпоновки.НаборыДанных.Удалить(НаборАналитика);
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавим поля для получения только тех характеристик, которые требуется указать в форме статистики.
		Для каждого Характеристика Из Характеристики Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(НастройкиДляКомпоновкиМакета, Характеристика.Характеристика);
		КонецЦикла;
		
		// Получим данные
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки   = КомпоновщикМакета.Выполнить(
			СхемаКомпоновки,
			НастройкиДляКомпоновкиМакета
			, // НастройкиКомпоновкиДанных
			, // ДанныеРасшифровки
			, // МакетОформления
			Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		УдалитьНеиспользуемыеНаборыИзМакетаКомпоновки(МакетКомпоновки.НаборыДанных);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		РезультатЗапроса = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Если РезультатЗапроса.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Характеристика Из Характеристики Цикл
			Характеристика.Значение = РезультатЗапроса[0][Характеристика.Характеристика]; // Результат содержит не более одной строки
		КонецЦикла;
		
	КонецЦикла;
	
	Показатели.Индексы.Удалить(ИндексОтбораХарактеристик);
	
КонецПроцедуры

Процедура УдалитьНеиспользуемыеНаборыИзМакетаКомпоновки(НаборыДанных)
	
	НаборыКУдалению = Новый Массив;
	
	Для каждого Набор Из НаборыДанных Цикл
		
		Если ТипЗнч(Набор) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных")  Тогда
			
			УдалитьНеиспользуемыеНаборыИзМакетаКомпоновки(Набор.Элементы);
			
		ИначеЕсли ТипЗнч(Набор) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			
			Если СтрНайти(Прав(Набор.Запрос, 2), "/") <> 0 Тогда
				
				НаборыКУдалению.Добавить(Набор);
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для каждого НаборКУдалению Из НаборыКУдалению Цикл
		
		НаборыДанных.Удалить(НаборКУдалению);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция НайтиЭлементОтбора(Отбор, Элемент)
	
	НайденныйЭлемент = Неопределено;
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НайденныйЭлемент = НайтиЭлементОтбора(ЭлементОтбора.Элементы, Элемент);
			
			Если НайденныйЭлемент <> Неопределено Тогда
				
				Прервать;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный И 
			(ЭлементОтбора.ЛевоеЗначение = Элемент ИЛИ Строка(ЭлементОтбора.ЛевоеЗначение) = Элемент) Тогда 
			
			НайденныйЭлемент = ЭлементОтбора;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция СписокСвязейНабораДанных(НаборИмя, СхемаКомпоновки) 
	
	СписокСвязей = Новый Массив;
	
	Для каждого Связь Из СхемаКомпоновки.СвязиНаборовДанных Цикл 
		
		Если Связь.НаборДанныхИсточник = НаборИмя ИЛИ Связь.НаборДанныхПриемник = НаборИмя Тогда
			
			СписокСвязей.Добавить(Связь);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СписокСвязей;
	
КонецФункции

Процедура ЗаполнитьПериодПоказателя(ОписаниеПоказателя, ПравилоЗаполнения, Знач НачалоПериода, Знач КонецПериода, Знач Периодичность)
	
	// Так как в месяцах разное количество дней, то вместо даты окончания периода используем дату начала следующего месяца.
	// А в конце функции сделаем обратное преобразование.
	КонецПериода = КонецМесяца(КонецПериода) + 1;
	
	Если ПравилоЗаполнения.Период = "ПредыдущийПериод" Тогда
			
		// Учтем периодичность отчета
		Если Периодичность = Перечисления.Периодичность.Год Тогда
			ДлинаПериода = 12;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
			ДлинаПериода = 6;
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
			ДлинаПериода = 3;
		Иначе
			// Декада, день, неделя - периоды не кратные месяцу, не поддерживаются
			ДлинаПериода = 1;
		КонецЕсли;
		
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -ДлинаПериода);
		КонецПериода  = ДобавитьМесяц(КонецПериода,  -ДлинаПериода);
			
	ИначеЕсли ПравилоЗаполнения.Период = "АналогичныйПериодПредыдущегоГода" Тогда
			
		НачалоПериода = ДобавитьМесяц(НачалоПериода, -12);
		КонецПериода  = ДобавитьМесяц(КонецПериода,  -12);
			
	КонецЕсли;
	
	Если ПравилоЗаполнения.СНачалаГода = "Истина" Тогда
		НачалоПериода = НачалоГода(НачалоПериода);
	КонецЕсли;
	
	ОписаниеПоказателя.НачалоПериода = НачалоПериода;
	ОписаниеПоказателя.КонецПериода  = КонецПериода - 1;
	
КонецПроцедуры

Функция ПравилаЗаполнения(ИмяОтчета)
	
	// Решение по размещению макетов заполнения - временное. 
	// Пока заполнямая форма статистики одна, то макеты с правилами заполнения размещены в самом отчете. 
	// Когда форм будет много, то такие поставляемые данные будут храниться вне БРО.
	
	ПравилаЗаполненияМакет = Отчеты[ИмяОтчета].ПолучитьМакет("ПравилаЗаполнения"); 
	РезультатЧтения        = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ПравилаЗаполненияМакет.ПолучитьТекст());
	Возврат РезультатЧтения.Данные;
	
КонецФункции

Функция ЧисловоеЗначениеПоля(ИмяПоля, Показатели)
	
	Отбор = Новый Структура("ИмяПоля", ИмяПоля);
	НайденныеСтроки = Показатели.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаЗначений = 0;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		Значение = НайденнаяСтрока.Значение;
		
		Попытка
			Значение = Число(Значение);
		Исключение
			Значение = 0;
		КонецПопытки;
		
		СуммаЗначений = СуммаЗначений + Значение;
		
	КонецЦикла;
	
	Возврат СуммаЗначений;
	
КонецФункции

Процедура ДобавитьПоле(ИмяПоля, Значение, Показатели)
	
	НоваяСтрока = Показатели.Добавить();
	НоваяСтрока.ИмяПоля  = ИмяПоля;
	НоваяСтрока.Значение = Значение;
	
КонецПроцедуры

Процедура ЗаполнитьКонтейнерФормыП3(Контейнер, Показатели)
	
	// Показатели должно содержать колонки ИмяПоля и Значение.
	// Важно: форма может содержать многострочные поля.
	// В этом случае в коллекции Показатели может быть несколько значений с одинаковым именем поля.
	
	// Рассчитаем показатель "Отгружено в другие страны"
	ИмяПоляОтгруженоВРоссию = "П040004901";
	
	ИменаПолейОтгруженоВСНГ = Новый Массив; // По числу стран СНГ
	ШаблонИмениПоля     = "П04000##01";
	Для НомерЯчейки = 51 По 60 Цикл
		ИменаПолейОтгруженоВСНГ.Добавить(СтрЗаменить(ШаблонИмениПоля, "##", НомерЯчейки));
	КонецЦикла;
	
	ИмяПоляОтгруженоВДругиеСтраны = "П040006101";
	
	ОтгруженоВСНГ = 0;
	Для каждого ИмяПоля Из ИменаПолейОтгруженоВСНГ Цикл
		ОтгруженоВСНГ = ОтгруженоВСНГ + ЧисловоеЗначениеПоля(ИмяПоля, Показатели);
	КонецЦикла;
	
	ОтгруженоВДругиеСтраны = ЧисловоеЗначениеПоля("ОтгруженоТоваровВсего", Показатели) 
		- ЧисловоеЗначениеПоля(ИмяПоляОтгруженоВРоссию, Показатели)
		- ОтгруженоВСНГ;
		
	ДобавитьПоле(ИмяПоляОтгруженоВДругиеСтраны, ОтгруженоВДругиеСтраны, Показатели);
	
	// Заполним контейнер
	Для каждого ОписаниеПоказателя Из Показатели Цикл
		
		// Поищем это поле в контейнере. Для поиска используем ИмяПоля. Найденное - заполним.
		
		Для каждого Раздел Из Контейнер Цикл // Структура контейнера в разных отчетах может быть разной
			
			ДанныеРаздела = Раздел.Значение;
			
			Если ТипЗнч(ДанныеРаздела) <> Тип("Структура")
				Или Не ДанныеРаздела.Свойство(ОписаниеПоказателя.ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеРаздела.Вставить(ОписаниеПоказателя.ИмяПоля, ОписаниеПоказателя.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПоказателиФормыП3(ИмяРедакцииОтчета, Организация, НачалоПериода, КонецПериода, Периодичность)
	
	ИмяОтчета = "РегламентированныйОтчетСтатистикаФормаП3";
	
	ПравилаЗаполнения = ПравилаЗаполнения(ИмяОтчета);
	УдалитьСтраныОтсутствующиеВАдресах(ПравилаЗаполнения);
	УдалитьПоказателиКоторыеНеТребуетсяЗаполнять(ПравилаЗаполнения, ИмяОтчета, ИмяРедакцииОтчета, КонецПериода);
	
	Показатели = НовыйОписаниеПоказателей();
	
	Для каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
		
		Если НЕ ЗначениеЗаполнено(ПравилоЗаполнения.ОбъектНаблюдения) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоказателя = Показатели.Добавить();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПоказателя, ПравилоЗаполнения, "ИмяПоля, ОбъектНаблюдения, Характеристика");
		ОписаниеПоказателя.Аналитика = ВРег(ПравилоЗаполнения.Аналитика);
		// В форме П-3 это название страны; При записи в контактную информацию оно приводится к верхнему регистру.
		
		ЗаполнитьПериодПоказателя(ОписаниеПоказателя, ПравилоЗаполнения, НачалоПериода, КонецПериода, Периодичность);
		
	КонецЦикла;
	
	Показатели.ЗаполнитьЗначения(Организация, "Организация");
	
	Возврат Показатели;
	
КонецФункции

Процедура УдалитьСтраныОтсутствующиеВАдресах(ПравилаЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыКонтактнаяИнформация.Страна КАК Страна
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|	И КонтрагентыКонтактнаяИнформация.Страна <> """"
	|	И КонтрагентыКонтактнаяИнформация.Страна <> ""РОССИЯ""";
	
	СтраныВАдресах = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтраныВАдресах.Вставить(ВРег(Выборка.Страна), Истина);
	КонецЦикла;
	
	КоличествоСтрок = ПравилаЗаполнения.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		
		Правило = ПравилаЗаполнения[КоличествоСтрок - ОбратныйИндекс];
		
		ИмяСтраны = ВРег(Правило.Аналитика);
		
		Если ПустаяСтрока(ИмяСтраны) ИЛИ ИмяСтраны = "РОССИЯ" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтраныВАдресах[ИмяСтраны] = Неопределено Тогда
			// В этой стране нет ни одного нашего контрагента. Поэтому и правило для этой страны не нужно.
			ПравилаЗаполнения.Удалить(Правило);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПоказателиКоторыеНеТребуетсяЗаполнять(ПравилаЗаполнения, ИмяОтчета, ИмяРедакцииОтчета, Период)
	
	// В данном случае можно удалять все показатели, которые не требуются получателю отчета.
	// Но в других отчетах может оказаться, что часть таких показателей следует оставить, 
	// потому что через них рассчитываются и требуемые показатели.
	
	ПоляКУдалению = ИнтерфейсыВзаимодействияБРО.ПоляКоторыеНеВсегдаТребуетсяЗаполнять(ИмяОтчета, ИмяРедакцииОтчета, Период);
	Если ПоляКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляКУдалениюПоиск = Новый Соответствие; // Используем соответствие в качестве индекса для ускорения поиска
	Для каждого ИмяПоля Из ПоляКУдалению Цикл
		ПоляКУдалениюПоиск.Вставить(ИмяПоля, Истина);
	КонецЦикла;
	
	// Для заполнения поля "Отгружено в другие страны" нужен специальный "виртуальный" показатель.
	ИмяПоляОтгруженоВДругиеСтраны = "П040006101";
	Если ПоляКУдалениюПоиск[ИмяПоляОтгруженоВДругиеСтраны] <> Неопределено Тогда
		ПоляКУдалениюПоиск.Вставить("ОтгруженоТоваровВсего", Истина);
	КонецЕсли;
	
	КоличествоСтрок = ПравилаЗаполнения.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		
		Правило = ПравилаЗаполнения[КоличествоСтрок - ОбратныйИндекс];
		
		Если ПоляКУдалениюПоиск[Правило.ИмяПоля] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Этот показатель в данном периоде заполнять не требуется
		ПравилаЗаполнения.Удалить(Правило);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереченьЗаявленийОВвозе

#Область ПереченьЗаявленийОВвозе2015Кв2

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//  ИДРедакцииОтчета - Строка - ИД редакции отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаПереченьЗаявленийОВвозеТоваровФормаОтчета2015Кв2(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001001", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001002", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001003", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001004", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "П000010001005", Истина, Истина);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//  ИДРедакцииОтчета - Строка - ИД редакции отчета.
//
Процедура ЗаполнитьОтчетПереченьЗаявленийОВвозеТоваровФормаОтчета2015Кв2(ПараметрыОтчета, Контейнер) Экспорт
	
	ТаблицаРаздел1 = Контейнер.Раздел1;
	ТаблицаРаздел1.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Контрагент.РегистрационныйНомер  КАК КонтрагентРегистрационныйНомер,
	|	РеализацияТоваровУслуг.Контрагент.СтранаРегистрации.Код КАК КонтрагентСтранаРегистрацииКод
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Организация = &Организация
	|	И РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияТоваровУслуг.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|	И РеализацияТоваровУслуг.Контрагент.СтранаРегистрации.УчастникЕАЭС
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаРаздела1 = ТаблицаРаздел1.Добавить();
		СтрокаРаздела1.П000010001001 = "";
		СтрокаРаздела1.П000010001002 = "";
		СтрокаРаздела1.П000010001003 = 1;
		СтрокаРаздела1.П000010001004 = Выборка.КонтрагентРегистрационныйНомер;
		СтрокаРаздела1.П000010001005 = Выборка.КонтрагентСтранаРегистрацииКод;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область КассовыйПланГОЗ

// Формирует список показателей регламентированного отчета.
//
// Параметры:
//  ПоказателиОтчета - Структура - структура, в которую добавляются показатели отчета.
//
Процедура ПолучитьСведенияОПоказателяхОтчетаКассовыйПланГОЗФормаОтчета2018Кв1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ВыборКонтрактов", Ложь, Ложь); 
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НомерКонтракта", Истина, Истина);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДатаЗаключенияКонтракта", Истина, Ложь);
	
	// Фактический остаток денежных средств на отдельном счете головного исполнителя на дату составления кассового плана на очередной квартал
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "CashBalance", Истина, Истина);
	// Расчеты с кооперацией между отдельными счетами
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "SeparateAccount", Истина, Истина);
	// Расчеты с кооперацией с отдельного счета на иной банковский счет
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "BankAccount", Истина, Истина);
	// Справочно: Расчеты с кооперацией
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "PastPayments", Истина, Ложь);
	
КонецПроцедуры

// Заполняет показатели регламентированного отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - параметры для заполнения отчета.
//  Контейнер - Структура - структура, в которую помещаются заполненные показатели отчета.
//  ИДРедакцииОтчета - Строка - ИД редакции отчета.
//
Процедура ЗаполнитьОтчетКассовыйПланГОЗФормаОтчета2018Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем ТаблицаРасшифровки;
	
	ДанныеТитульныйЛист = Контейнер.Титульный;
	ДанныеКассовыйПлан  = Контейнер.КассовыйПлан;
	
	ДанныеКонтракта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.Контракты[0], "НомерГОЗ, ДатаЗаключения");
				
	ДанныеТитульныйЛист.GOZUID       = Строка(ДанныеКонтракта.НомерГОЗ);
	ДанныеТитульныйЛист.ContractDate = ДанныеКонтракта.ДатаЗаключения;
	
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "GOZUID", "", "", "", "", "", ПараметрыОтчета.Контракты[0]);
	
	// Финансовые показатели кассового плана
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСоставленияОтчета", Новый Граница(КонецДня(ДанныеТитульныйЛист.ReportDate), ВидГраницы.Включая));
	БанковскиеСчетаПоГосконтракту = Справочники.ГосударственныеКонтракты.БанковскиеСчетаПоГосударственномуКонтракту(ПараметрыОтчета.Контракты[0]);
	Запрос.УстановитьПараметр("БанковскиеСчета", БанковскиеСчетаПоГосконтракту);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.Текст = "ВЫБРАТЬ
	|	ДенежныеСредстваБезналичныеОстатки.СуммаОстаток КАК ФактическийОстатокДС
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	|			&ДатаСоставленияОтчета, 
	|			БанковскийСчет В (&БанковскиеСчета)
	|				И Организация = &Организация) КАК ДенежныеСредстваБезналичныеОстатки";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	ДанныеКассовыйПлан.CashBalance = ?(ВыборкаЗапроса.Следующий(), ВыборкаЗапроса.ФактическийОстатокДС, 0);
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("БанковскиеСчетаПоГосконтракту", БанковскиеСчетаПоГосконтракту);
	ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "CashBalance", "", "", "", ДанныеКассовыйПлан.CashBalance, "", ПараметрыРасшифровки);
	
	Запрос.УстановитьПараметр("ГосударственныйКонтракт", ПараметрыОтчета.Контракты[0]);
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала(НачалоКвартала(ПараметрыОтчета.ДатаСоставленияОтчета)-1));
	Запрос.УстановитьПараметр("КонецКвартала", КонецДня(ДанныеТитульныйЛист.ReportDate));
	Запрос.Текст = "ВЫБРАТЬ
	|	ДенежныеСредстваБезналичныеОбороты.Период         КАК Период,
	|	ДенежныеСредстваБезналичныеОбороты.Регистратор    КАК ДокументОплаты,
	|	ДенежныеСредстваБезналичныеОбороты.БанковскийСчет КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредстваБезналичныеОбороты.Регистратор) = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДенежныеСредстваБезналичныеОбороты.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).БанковскийСчетКонтрагента
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредстваБезналичныеОбороты.Регистратор) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДенежныеСредстваБезналичныеОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).БанковскийСчетКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредстваБезналичныеОбороты.Регистратор) = ТИП(Документ.СписаниеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДенежныеСредстваБезналичныеОбороты.Регистратор КАК Документ.СписаниеБезналичныхДенежныхСредств).БанковскийСчетПолучатель
	|		КОГДА ТИПЗНАЧЕНИЯ(ДенежныеСредстваБезналичныеОбороты.Регистратор) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|			ТОГДА ВЫРАЗИТЬ(ДенежныеСредстваБезналичныеОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).БанковскийСчетОтправитель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК БанковскийСчетОрганизации,
	|	ДенежныеСредстваБезналичныеОбороты.СуммаПриход    КАК СуммаПриход,
	|	ДенежныеСредстваБезналичныеОбороты.СуммаРасход    КАК СуммаРасход
	|ПОМЕСТИТЬ БезналичныеРасчеты
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные.Обороты(
	|			&НачалоКвартала,
	|			&КонецКвартала,
	|			Регистратор,
	|			БанковскийСчет В (&БанковскиеСчета)
	|				И Организация = &Организация) КАК ДенежныеСредстваБезналичныеОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО ДенежныеСредстваБезналичныеОбороты.Регистратор = СписаниеБезналичныхДенежныхСредств.Ссылка
	|			И (СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|				ИЛИ СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО ДенежныеСредстваБезналичныеОбороты.Регистратор = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|			И (ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика)
	|				ИЛИ ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации))
	|ГДЕ
	|	(НЕ СписаниеБезналичныхДенежныхСредств.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ ПоступлениеБезналичныхДенежныхСредств.Ссылка ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БезналичныеРасчеты.ДокументОплаты    КАК ДокументОплаты,
	|	БезналичныеРасчеты.БанковскийСчет    КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(БанковскиеСчетаОрганизаций.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|								И БанковскиеСчетаКонтрагентов.ГосударственныйКонтракт = &ГосударственныйКонтракт
	|							ИЛИ ЕСТЬNULL(БанковскиеСчетаОрганизаций.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|								И БанковскиеСчетаОрганизаций.ГосударственныйКонтракт = &ГосударственныйКонтракт
	|						ТОГДА БезналичныеРасчеты.СуммаРасход - БезналичныеРасчеты.СуммаПриход
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                                КАК РасчетыМеждуОтдельнымиСчетами,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(БанковскиеСчетаКонтрагентов.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|				ИЛИ ЕСТЬNULL(БанковскиеСчетаОрганизаций.ОтдельныйСчетГОЗ, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ БезналичныеРасчеты.СуммаРасход - БезналичныеРасчеты.СуммаПриход
	|	КОНЕЦ                                КАК РасчетыНаИнойБанковскийСчет
	|ИЗ
	|	БезналичныеРасчеты КАК БезналичныеРасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ПО БезналичныеРасчеты.БанковскийСчетКонтрагента = БанковскиеСчетаКонтрагентов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ПО БезналичныеРасчеты.БанковскийСчетОрганизации = БанковскиеСчетаОрганизаций.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	БезналичныеРасчеты.Период
	|ИТОГИ
	|	СУММА(РасчетыМеждуОтдельнымиСчетами),
	|	СУММА(РасчетыНаИнойБанковскийСчет)
	|ПО
	|	ОБЩИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДанныеКассовыйПлан.SeparateAccount = 0;
		ДанныеКассовыйПлан.BankAccount     = 0;
		ДанныеКассовыйПлан.PastPayments    = 0;
		
	Иначе
		
		ВыборкаИтоги = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтоги.Следующий();
		
		ДанныеКассовыйПлан.SeparateAccount = ВыборкаИтоги.РасчетыМеждуОтдельнымиСчетами;
		ДанныеКассовыйПлан.BankAccount     = ВыборкаИтоги.РасчетыНаИнойБанковскийСчет;
		ДанныеКассовыйПлан.PastPayments    = ДанныеКассовыйПлан.SeparateAccount + ДанныеКассовыйПлан.BankAccount;
		
		ДетальныеЗаписиSeparateAccount = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
		ДетальныеЗаписиBankAccount     = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
		ДетальныеЗаписиPastPayments    = ЗаполнениеРасшифровкаРегламентированнойОтчетности.НовыйДетальныеЗаписиРасчета();
		
		Выборка = ВыборкаИтоги.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.РасчетыНаИнойБанковскийСчет <> 0 Тогда
				ДетальнаяЗапись = ДетальныеЗаписиBankAccount.Добавить();
				ДетальнаяЗапись.Организация     = ПараметрыОтчета.Организация;
				ДетальнаяЗапись.Аналитика       = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Ссылка          = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Сумма           = Выборка.РасчетыНаИнойБанковскийСчет;
				
				ДетальнаяЗапись = ДетальныеЗаписиPastPayments.Добавить();
				ДетальнаяЗапись.Организация     = ПараметрыОтчета.Организация;
				ДетальнаяЗапись.Аналитика       = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Ссылка          = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Сумма           = Выборка.РасчетыНаИнойБанковскийСчет;
			ИначеЕсли Выборка.РасчетыМеждуОтдельнымиСчетами <> 0 Тогда
				ДетальнаяЗапись = ДетальныеЗаписиSeparateAccount.Добавить();
				ДетальнаяЗапись.Организация     = ПараметрыОтчета.Организация;
				ДетальнаяЗапись.Аналитика       = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Ссылка          = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Сумма           = Выборка.РасчетыМеждуОтдельнымиСчетами;
				
				ДетальнаяЗапись = ДетальныеЗаписиPastPayments.Добавить();
				ДетальнаяЗапись.Организация     = ПараметрыОтчета.Организация;
				ДетальнаяЗапись.Аналитика       = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Ссылка          = Выборка.ДокументОплаты;
				ДетальнаяЗапись.Сумма           = Выборка.РасчетыМеждуОтдельнымиСчетами;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеКассовыйПлан.SeparateAccount <> 0 Тогда
			НаименованиеПоказателя = НСтр("ru = 'Расчеты с кооперацией между отдельными счетами';
											|en = 'AR/AP accounting with cooperation between separate accounts'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписиSeparateAccount);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "SeparateAccount", НаименованиеПоказателя, "", "", ДанныеКассовыйПлан.SeparateAccount, "", ДополнительныеПараметры);
		КонецЕсли;
		
		Если ДанныеКассовыйПлан.BankAccount <> 0 Тогда
			НаименованиеПоказателя = НСтр("ru = 'Расчеты с кооперацией с отдельного счета на иной банковский счет';
											|en = 'AR/AP accounting with cooperation from a separate account to another bank account'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписиBankAccount);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "BankAccount", НаименованиеПоказателя, "", "", ДанныеКассовыйПлан.BankAccount, "", ДополнительныеПараметры);
		КонецЕсли;
		
		Если ДанныеКассовыйПлан.PastPayments <> 0 Тогда
			НаименованиеПоказателя = НСтр("ru = 'Справочно: Расчеты с кооперацией';
											|en = 'Reference: AR/AP accounting with cooperation'", ОбщегоНазначения.КодОсновногоЯзыка());
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДетальныеЗаписи", ДетальныеЗаписиPastPayments);
			ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, "PastPayments", НаименованиеПоказателя, "", "", ДанныеКассовыйПлан.PastPayments, "", ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Контейнер, ПараметрыОтчета.АдресВоВременномХранилище);
	ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры = Неопределено)
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровок, ИмяПоказателя, НаименованиеПоказателя, ЗнакОперации, НаименованиеСлагаемого, Сумма, ИмяРаздела, ДополнительныеПараметры);
КонецПроцедуры

Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение 	= ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения 		= ВидСравнения;
	ЭлементОтбора.ПравоеЗначение 	= ПравоеЗначение;
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

Функция ПолучитьСотрудникаПоФизЛицу(ФизическоеЛицо, Организация) Экспорт
	Перем Сотрудник;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И Сотрудники.ГоловнаяОрганизация = &Организация
	|	И НЕ Сотрудники.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сотрудник = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Сотрудник;
	
КонецФункции

// Функция возвращает строку с описание для пользователя ссылки в интерфейсе, 
// где расположена форма регистров сведений "Ставки налога на имущество" и "Ставки налога на имущество по отдельным
// основным средствам".
// 
// Возвращаемое значение:
//	 Строка 
//
Функция ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()
	
	Результат = НСтр("ru = '(раздел ""Нормативно-справочная информация"" - ""Организация"" - ""Учетная политика и налоги"")';
					|en = '(section ""Master data"" - ""Company"" - ""Accounting policy and taxes"")'");
	
	Возврат Результат;
	
КонецФункции // ОписаниеПутиВИнтерфейсеКСтавкамНалогаНаИмущество()

// Функция возвращает строку с описание для пользователя ссылки в интерфейсе, 
// где расположена регистр сведений "Порядок уплаты налогов на местах".
// 
// Возвращаемое значение:
//	 Строка 
//
Функция ОписаниеПутиВИнтерфейсеКПорядкуУплатыНалоговНаМестах()
	
	Результат = НСтр("ru = '(раздел ""Нормативно-справочная информация"" - ""Организация"" - ""Учетная политика и налоги"")';
					|en = '(section ""Master data"" - ""Company"" - ""Accounting policy and taxes"")'");
	
	Возврат Результат;
	
КонецФункции // ОписаниеПутиВИнтерфейсеКПорядкуУплатыНалоговНаМестах()

Функция ДеревоЗначенийРегОтчет()
	
	НовоеДеревоЗначений = Новый ДеревоЗначений();
	НовоеДеревоЗначений.Колонки.Добавить("Данные");
	НовоеДеревоЗначений.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	Возврат НовоеДеревоЗначений;
	
КонецФункции

#КонецОбласти

#Область СведенияОбОрганизации

Функция СоответствиеПолямСведенийОбОрганизации()
	
	СоответствиеДанных = Новый Соответствие;
	//РегистрационныеДанныеОрганизации
	СоответствиеДанных.Вставить("ДатаРегистрации", "ДатаРегистрации");
	СоответствиеДанных.Вставить("ИННЮЛ", "ИНН");
	СоответствиеДанных.Вставить("ФормСобств", "НаименованиеОКФС");
	СоответствиеДанных.Вставить("ОКПО", "КодПоОКПО");
	СоответствиеДанных.Вставить("ОргПравФорм", "НаименованиеОКОПФ");
	СоответствиеДанных.Вставить("ОКОПФ", "КодОКОПФ");
	СоответствиеДанных.Вставить("КодНО", "КодНалоговогоОргана");
	СоответствиеДанных.Вставить("ОКВЭД", "КодОКВЭД");
	СоответствиеДанных.Вставить("ОКВЭД2", "КодОКВЭД2");
	СоответствиеДанных.Вставить("ОКФС", "КодОКФС");
	СоответствиеДанных.Вставить("ОКАТО", "КодПоОКАТО");
	СоответствиеДанных.Вставить("ОКТМО", "КодПоОКТМО");
	СоответствиеДанных.Вставить("КППЮЛ", "КПП");
	СоответствиеДанных.Вставить("НаимНО", "НаименованиеНалоговогоОргана");
	СоответствиеДанных.Вставить("ОснВидДеят", "НаименованиеОКВЭД");
	СоответствиеДанных.Вставить("ОснВидДеят2", "НаименованиеОКВЭД2");
	СоответствиеДанных.Вставить("НаимЮЛПол", "НаименованиеПолное");
	СоответствиеДанных.Вставить("НаимЮЛСокр", "НаименованиеСокращенное");
	СоответствиеДанных.Вставить("ОГРН", "ОГРН");
	СоответствиеДанных.Вставить("АдрПочт", "ПочтовыйАдресОрганизации");
	СоответствиеДанных.Вставить("ПолныйАдрПочт", "ПочтовыйАдресОрганизацииПолный");
	СоответствиеДанных.Вставить("АдрПочт_XML", "ПочтовыйАдресОрганизацииXML");
	СоответствиеДанных.Вставить("АдрПочт_JSON", "ПочтовыйАдресОрганизацииJSON");
	СоответствиеДанных.Вставить("КатНП", "ПризнакНалогоплательщикаКатегория");
	СоответствиеДанных.Вставить("ТипНП", "ПризнакНалогоплательщикаКод");
	СоответствиеДанных.Вставить("РегНомерСФР", "РегистрационныйНомерСФР");
	СоответствиеДанных.Вставить("РегНомерСФРЗаСебя", "РегистрационныйНомерСФР");
	СоответствиеДанных.Вставить("РегНомерСФРГоловнойОрганизации", "РегистрационныйНомерСФРГоловнойОрганизации");
	СоответствиеДанных.Вставить("РегНомПФР", "РегистрационныйНомерПФР");
	СоответствиеДанных.Вставить("РегНомПФРЗаСебя", "ИПРегистрационныйНомерПФР");
	СоответствиеДанных.Вставить("РегНомТФОМС", "РегистрационныйНомерТФОМС");
	СоответствиеДанных.Вставить("РегНомТФОМСЗаСебя", "ИПРегистрационныйНомерТФОМС");
	СоответствиеДанных.Вставить("СвидДВ", "СвидетельствоДатаВыдачи");
	СоответствиеДанных.Вставить("СвидНОКод", "СвидетельствоКодОргана");
	СоответствиеДанных.Вставить("СвидНО", "СвидетельствоНаименованиеОргана");
	СоответствиеДанных.Вставить("СвидСН", "СвидетельствоСерияНомер");
	СоответствиеДанных.Вставить("СтавкаПрибМест", "СтавкаНалогаНаПрибыльМестный");
	СоответствиеДанных.Вставить("СтавкаПрибРесп", "СтавкаНалогаНаПрибыльСубъектРФ");
	СоответствиеДанных.Вставить("СтавкаПрибФед", "СтавкаНалогаНаПрибыльФБ");
	СоответствиеДанных.Вставить("СтавкаНалогаУСН", "СтавкаНалогаУСН");
	СоответствиеДанных.Вставить("ЭтоФизическоеЛицо", "ЭтоФизическоеЛицо");
	СоответствиеДанных.Вставить("ЭтоЮридическоеЛицо", "ЭтоЮридическоеЛицо");
	СоответствиеДанных.Вставить("ЭтоБюджетополучатель", "ЭтоБюджетополучатель");
	СоответствиеДанных.Вставить("ПризнакНПЛКрупнейший", "ЭтоКрупнейшийНалогоплательщик");
	СоответствиеДанных.Вставить("КодНОКрупнейший", "КодНалоговогоОрганаКрупнейшегоНалогоплательщика");
	СоответствиеДанных.Вставить("НекоммерческаяОрганизация", "НекоммерческаяОрганизация");
	СоответствиеДанных.Вставить("ДатаЗакрытия", "ДатаЗакрытия");
	//ДополнительныеСведенияОрганизации
	СоответствиеДанных.Вставить("АдресЭлектроннойПочтыОрганизации", "АдресЭлектроннойПочтыОрганизации");
	СоответствиеДанных.Вставить("ВидПлательщикаСтраховыхВзносов", "ВидПлательщикаСтраховыхВзносов");
	СоответствиеДанных.Вставить("КППГоловнОрг", "ГоловнаяОрганизацияКПП");
	СоответствиеДанных.Вставить("НаимГоловнОрг", "ГоловнаяОрганизацияНаименование");
	СоответствиеДанных.Вставить("ДатаПереходаНаУСН", "ДатаПереходаНаУСН");
	СоответствиеДанных.Вставить("ДолжнОтпр", "ДолжностьОтправителя");
	СоответствиеДанных.Вставить("КодОКОНХ", "КодОКОНХ");
	СоответствиеДанных.Вставить("КодОрганаПФР", "КодОрганаПФР");
	СоответствиеДанных.Вставить("КодОрганаФСГС", "КодОрганаФСГС");
	СоответствиеДанных.Вставить("КодПодчиненностиФСС", "КодПодчиненностиФСС");
	СоответствиеДанных.Вставить("КодПодчФССДобрСтрах", "КодПодчиненностиФССДобрСтрах");
	СоответствиеДанных.Вставить("НаименованиеТерриториальногоОрганаФСС", "НаименованиеТерриториальногоОрганаФСС");
	СоответствиеДанных.Вставить("ПрименяетсяУСН", "ПрименяетсяУСН");
	СоответствиеДанных.Вставить("ПрименяетсяУСНЗаПериод", "ПрименяетсяУСНЗаПериод");
	СоответствиеДанных.Вставить("ОбъектНалогообложенияУСН", "ОбъектНалогообложенияУСН");
	СоответствиеДанных.Вставить("ФИООтвСтатистика", "ОтветственноеЛицоСтатистикаФИО");
	СоответствиеДанных.Вставить("ДолжнОтвСтатистика", "ОтветственноеЛицоСтатистикаДолжность");
	СоответствиеДанных.Вставить("ТелОтвСтатистика", "ОтветственноеЛицоСтатистикаТелефон");
	СоответствиеДанных.Вставить("АдресЭлПочтыОтвСтатистика", "ОтветственноеЛицоСтатистикаАдресЭлектроннойПочты");
	СоответствиеДанных.Вставить("АдресЭлПочтыБух", "БухгалтерАдресЭлектроннойПочты");
	СоответствиеДанных.Вставить("АдресЭлПочтыРук", "РуководительАдресЭлектроннойПочты");
	СоответствиеДанных.Вставить("АдресЭлПочтыИП", "ИПАдресЭлектроннойПочты");
	СоответствиеДанных.Вставить("АдресЭлПочтыИсп", "ИсполнительАдресЭлектроннойПочты");
	СоответствиеДанных.Вставить("РегистрационныйНомерФСС", "РегистрационныйНомерФСС");
	СоответствиеДанных.Вставить("ДополнительныйКодФСС", "ДополнительныйКодФСС");
	СоответствиеДанных.Вставить("НомерСтрахователяФСС", "НомерСтрахователяФСС");
	СоответствиеДанных.Вставить("РегистрационныйНомерФССДобрСтрах", "ИПРегистрационныйНомерФСС");
	СоответствиеДанных.Вставить("ДолжнИсп", "СведенияОбИсполнителеДолжность");
	СоответствиеДанных.Вставить("ТелИсп", "СведенияОбИсполнителеТелефон");
	СоответствиеДанных.Вставить("ФИОИсп", "СведенияОбИсполнителеФИО");
	СоответствиеДанных.Вставить("ИмяБух", "БухгалтерИмя");
	СоответствиеДанных.Вставить("ОтчествоБух", "БухгалтерОтчество");
	СоответствиеДанных.Вставить("ФамилияБух", "БухгалтерФамилия");
	СоответствиеДанных.Вставить("ДолжнРук", "РуководительДолжность");
	СоответствиеДанных.Вставить("ИмяРук", "РуководительИмя");
	СоответствиеДанных.Вставить("ОтчествоРук", "РуководительОтчество");
	СоответствиеДанных.Вставить("ФамилияРук", "РуководительФамилия");
	СоответствиеДанных.Вставить("СистемыНалогообложения", "СистемыНалогообложения");
	СоответствиеДанных.Вставить("СтраховойТариф", "СтраховойТариф");
	СоответствиеДанных.Вставить("ТелОрганизации", "ТелефонОрганизации");
	СоответствиеДанных.Вставить("ФаксОрганизации", "ФаксОрганизации");
	СоответствиеДанных.Вставить("ЭлектроннаяПочта", "АдресЭлектроннойПочтыОрганизации");
	СоответствиеДанных.Вставить("ФаксИсп", "СведенияОбИсполнителеФакс");
	СоответствиеДанных.Вставить("ШифрСтрахователяФСС", "ШифрСтрахователяФСС");
	//КонтактнаяИнформацияОрганизации
	СоответствиеДанных.Вставить("АдрЮР", "АдресОрганизации");
	СоответствиеДанных.Вставить("АдрФакт", "АдресОрганизацииФакт");
	СоответствиеДанных.Вставить("АдрФакт_XML", "АдресОрганизацииФактXML");
	СоответствиеДанных.Вставить("АдрФакт_JSON", "АдресОрганизацииФактJSON");
	СоответствиеДанных.Вставить("ПолныйАдрЮР", "АдресОрганизацииПолный");
	СоответствиеДанных.Вставить("АдрЮР_XML", "АдресОрганизацииXML");
	СоответствиеДанных.Вставить("АдрЮР_JSON", "АдресОрганизацииJSON");
	СоответствиеДанных.Вставить("ОргГород", "АдресОрганизацииГород");
	СоответствиеДанных.Вставить("ОргДом", "АдресОрганизацииДом");
	СоответствиеДанных.Вставить("ОргИндекс", "АдресОрганизацииИндекс");
	СоответствиеДанных.Вставить("ОргКвартира", "АдресОрганизацииКвартира");
	СоответствиеДанных.Вставить("ОргКодСубъект", "АдресОрганизацииКодРегиона");
	СоответствиеДанных.Вставить("ОргКорпус", "АдресОрганизацииКорпус");
	СоответствиеДанных.Вставить("ОргНПункт", "АдресОрганизацииНаселенныйПункт");
	СоответствиеДанных.Вставить("ОргРайон", "АдресОрганизацииРайон");
	СоответствиеДанных.Вставить("ОргСубъект", "АдресОрганизацииРегион");
	СоответствиеДанных.Вставить("ОргУлица", "АдресОрганизацииУлица");
	//БанковскийСчетОрганизации
	СоответствиеДанных.Вставить("БанкСчетНаимБанка", "БанковскийСчетБанк");
	СоответствиеДанных.Вставить("БанкСчетБИКБанка", "БанковскийСчетБИК");
	СоответствиеДанных.Вставить("БанкСчетКоррСчетБанка", "БанковскийСчетКоррСчет");
	СоответствиеДанных.Вставить("БанкСчетНомер", "БанковскийСчетНомерСчета");
	//РегистрационныеДанныеОбособленногоПодразделения
	СоответствиеДанных.Вставить("КППОП", "КППОбособленногоПодразделения");
	СоответствиеДанных.Вставить("НаимОППол", "НаименованиеОбособленногоПодразделенияПолное");
	//КонтактнаяИнформацияОбособленногоПодразделения
	СоответствиеДанных.Вставить("АдрОП", "АдресОбособленногоПодразделения");
	СоответствиеДанных.Вставить("АдрОП_XML", "АдресОбособленногоПодразделенияXML");
	СоответствиеДанных.Вставить("АдрОП_JSON", "АдресОбособленногоПодразделенияJSON");
	СоответствиеДанных.Вставить("ГородОП", "АдресОбособленногоПодразделенияГород");
	СоответствиеДанных.Вставить("ДомОП", "АдресОбособленногоПодразделенияДом");
	СоответствиеДанных.Вставить("ИндексОП", "АдресОбособленногоПодразделенияИндекс");
	СоответствиеДанных.Вставить("КвартираОП", "АдресОбособленногоПодразделенияКвартира");
	СоответствиеДанных.Вставить("КодСубъектОП", "АдресОбособленногоПодразделенияКодРегиона");
	СоответствиеДанных.Вставить("КорпусОП", "АдресОбособленногоПодразделенияКорпус");
	СоответствиеДанных.Вставить("НПунктОП", "АдресОбособленногоПодразделенияНаселенныйПункт");
	СоответствиеДанных.Вставить("РайонОП", "АдресОбособленногоПодразделенияРайон");
	СоответствиеДанных.Вставить("СубъектОП", "АдресОбособленногоПодразделенияРегион");
	СоответствиеДанных.Вставить("УлицаОП", "АдресОбособленногоПодразделенияУлица");
	//ИностраннаяОрганизация
	СоответствиеДанных.Вставить("НаимИОПол", "НаименованиеИностраннойОрганизации");
	СоответствиеДанных.Вставить("КодИОСтрРег", "КодНалогоплательщикаВСтранеРегистрации");
	СоответствиеДанных.Вставить("СтрИО", "СтранаРегистрацииИностраннойОрганизации");
	СоответствиеДанных.Вставить("КодСтрИО", "КодСтраныРегистрации");
	СоответствиеДанных.Вставить("СтрПостИО", "СтранаПостоянногоМестонахожденияНаименование");
	СоответствиеДанных.Вставить("КодСтрПостИО", "СтранаПостоянногоМестонахожденияКод");
	СоответствиеДанных.Вставить("АдрИО", "АдресИностраннойОрганизации");
	СоответствиеДанных.Вставить("АдрИО_XML", "АдресИностраннойОрганизацииXML");
	СоответствиеДанных.Вставить("АдрИО_JSON", "АдресИностраннойОрганизацииJSON");
	//РегистрационныеДанныеОтделенияИностраннойОрганизации
	СоответствиеДанных.Вставить("ИННИО", "ОтделениеИностраннойОрганизацииИНН");
	СоответствиеДанных.Вставить("КППИО", "ОтделениеИностраннойОрганизацииКПП");
	СоответствиеДанных.Вставить("НаимОИОПол", "ОтделениеИностраннойОрганизацииНаименование");
	//КонтактнаяИнформацияОтделенияИностраннойОрганизации
	СоответствиеДанных.Вставить("АдрОтдИОРФ", "ОтделениеИностраннойОрганизацииАдресРФ");
	СоответствиеДанных.Вставить("АдрОтдИОРФ_XML", "ОтделениеИностраннойОрганизацииАдресРФXML");
	СоответствиеДанных.Вставить("АдрОтдИОРФ_JSON", "ОтделениеИностраннойОрганизацииАдресРФJSON");
	СоответствиеДанных.Вставить("ГородОИО", "ОтделениеИностраннойОрганизацииАдресРФГород");
	СоответствиеДанных.Вставить("ДомОИО", "ОтделениеИностраннойОрганизацииАдресРФДом");
	СоответствиеДанных.Вставить("ИндексОИО", "ОтделениеИностраннойОрганизацииАдресРФИндекс");
	СоответствиеДанных.Вставить("КвартираОИО", "ОтделениеИностраннойОрганизацииАдресРФКвартира");
	СоответствиеДанных.Вставить("КодСубъектОИО", "ОтделениеИностраннойОрганизацииАдресРФКодРегиона");
	СоответствиеДанных.Вставить("КорпусОИО", "ОтделениеИностраннойОрганизацииАдресРФКорпус");
	СоответствиеДанных.Вставить("НПунктОИО", "ОтделениеИностраннойОрганизацииАдресРФНаселенныйПункт");
	СоответствиеДанных.Вставить("РайонОИО", "ОтделениеИностраннойОрганизацииАдресРФРайон");
	СоответствиеДанных.Вставить("СубъектОИО", "ОтделениеИностраннойОрганизацииАдресРФРегион");
	СоответствиеДанных.Вставить("УлицаОИО", "ОтделениеИностраннойОрганизацииАдресРФУлица");
	//РегистрационныеДанныеИндивидуальногоПредпринимателя
	СоответствиеДанных.Вставить("ВидУдЛичн", "ИПВидДокументаУдостоверенияЛичности");
	СоответствиеДанных.Вставить("ГраждСтрана", "ИПГражданствоКод");
	СоответствиеДанных.Вставить("Гражд", "ИПГражданствоНаименование");
	СоответствиеДанных.Вставить("ДатаУдЛичн", "ИПДатаВыдачиУдостоверенияЛичности");
	СоответствиеДанных.Вставить("ДатаРожд", "ИПДатаРождения");
	СоответствиеДанных.Вставить("ИННФЛ", "ИндивидуальныйПредпринимательИНН");
	СоответствиеДанных.Вставить("ФИО", "ИПНаименование");
	СоответствиеДанных.Вставить("ФамилияИП", "ИПФамилия");
	СоответствиеДанных.Вставить("ИмяИП", "ИПИмя");
	СоответствиеДанных.Вставить("ОтчествоИП", "ИПОтчество");
	СоответствиеДанных.Вставить("ОрганВыданУдЛичн", "ИПКемВыданУдостоверенияЛичности");
	СоответствиеДанных.Вставить("КодПодрУдЛичн", "ИПКодПодразделенияУдостоверенияЛичности");
	СоответствиеДанных.Вставить("КодУдЛичн", "ИПКодУдостоверенияЛичности");
	СоответствиеДанных.Вставить("МестоРожд", "ИПМестоРождения");
	СоответствиеДанных.Вставить("НомерУдЛичн", "ИПНомерУдостоверенияЛичности");
	СоответствиеДанных.Вставить("Пол", "ФизическоеЛицоПол");
	СоответствиеДанных.Вставить("СерияУдЛичн", "ИПСерияУдостоверенияЛичности");
	СоответствиеДанных.Вставить("СНИЛС", "ИндивидуальныйПредпринимательСНИЛС");
	СоответствиеДанных.Вставить("ФИООтпрФЛ", "ФизическоеЛицоНаименование");
	СоответствиеДанных.Вставить("ОГРНИП", "ОГРН");
	СоответствиеДанных.Вставить("ЭтоИП", "");
	//КонтактнаяИнформацияИндивидуальногоПредпринимателя
	СоответствиеДанных.Вставить("АдрМЖ", "АдресМестаЖительства");
	СоответствиеДанных.Вставить("АдрМЖ_XML", "АдресМестаЖительстваXML");
	СоответствиеДанных.Вставить("АдрМЖ_JSON", "АдресМестаЖительстваJSON");
	СоответствиеДанных.Вставить("АдрПрописки", "АдресРегистрации");
	СоответствиеДанных.Вставить("АдрПрописки_XML", "АдресРегистрацииXML");
	СоответствиеДанных.Вставить("АдрПрописки_JSON", "АдресРегистрацииJSON");
	СоответствиеДанных.Вставить("ГородМЖ", "ГородМестаЖительства");
	СоответствиеДанных.Вставить("ТелДом", "ДомашнийТелефонФизЛица");
	СоответствиеДанных.Вставить("ДомМЖ", "ДомМестаЖительства");
	СоответствиеДанных.Вставить("ИндексМЖ", "ИндексМестаЖительства");
	СоответствиеДанных.Вставить("КвартираМЖ", "КвартираМестаЖительства");
	СоответствиеДанных.Вставить("КодСубъектМЖ", "КодРегионаМестаЖительства");
	СоответствиеДанных.Вставить("КорпусМЖ", "КорпусМестаЖительства");
	СоответствиеДанных.Вставить("НПунктМЖ", "НаселенныйПунктМестаЖительства");
	СоответствиеДанных.Вставить("РайонМЖ", "РайонМестаЖительства");
	СоответствиеДанных.Вставить("СубъектМЖ", "РегионМестаЖительства");
	СоответствиеДанных.Вставить("ТелСлуж", "ТелефонОрганизации");
	СоответствиеДанных.Вставить("УлицаМЖ", "УлицаМестаЖительства");
	//РегистрационныеДанныеРуководителяОрганизации
	СоответствиеДанных.Вставить("ГраждРук", "РуководительГражданствоКод");
	СоответствиеДанных.Вставить("ГраждСтранаРук", "РуководительГражданствоНаименование");
	СоответствиеДанных.Вставить("ДатаРождРук", "РуководительДатаРождения");
	СоответствиеДанных.Вставить("ИННРук", "РуководительИНН");
	СоответствиеДанных.Вставить("МестоРождРук", "РуководительМестоРождения");
	СоответствиеДанных.Вставить("ПолРук", "РуководительПол");
	СоответствиеДанных.Вставить("ТелРук", "РуководительТелефон");
	СоответствиеДанных.Вставить("ВидУдЛичнРук", "РуководительУдостоверениеЛичностиВидДокумента");
	СоответствиеДанных.Вставить("ДатаУдЛичнРук", "РуководительУдостоверениеЛичностиДатаВыдачи");
	СоответствиеДанных.Вставить("ОрганВыданУдЛичнРук", "РуководительУдостоверениеЛичностиКемВыдан");
	СоответствиеДанных.Вставить("КодУдЛичнРук", "РуководительУдостоверениеЛичностиКод");
	СоответствиеДанных.Вставить("КодПодрУдЛичнРук", "РуководительУдостоверениеЛичностиКодПодразделения");
	СоответствиеДанных.Вставить("НомерУдЛичнРук", "РуководительУдостоверениеЛичностиНомер");
	СоответствиеДанных.Вставить("СерияУдЛичнРук", "РуководительУдостоверениеЛичностиСерия");
	СоответствиеДанных.Вставить("ФИОРук", "РуководительФИО");
	//КонтактнаяИнформацияРуководителяОрганизации
	СоответствиеДанных.Вставить("АдрМЖРукРФ", "РуководительАдресМестаЖительства");
	СоответствиеДанных.Вставить("АдрМЖРукРФ_XML", "РуководительАдресМестаЖительстваXML");
	СоответствиеДанных.Вставить("АдрМЖРукРФ_JSON", "РуководительАдресМестаЖительстваJSON");
	СоответствиеДанных.Вставить("ГородМЖРук", "РуководительАдресМестаЖительстваГород");
	СоответствиеДанных.Вставить("ДомМЖРук", "РуководительАдресМестаЖительстваДом");
	СоответствиеДанных.Вставить("ИндексМЖРук", "РуководительАдресМестаЖительстваИндекс");
	СоответствиеДанных.Вставить("КвартираМЖРук", "РуководительАдресМестаЖительстваКвартира");
	СоответствиеДанных.Вставить("КодСубъектМЖРук", "РуководительАдресМестаЖительстваКодРегиона");
	СоответствиеДанных.Вставить("КорпусМЖРук", "РуководительАдресМестаЖительстваКорпус");
	СоответствиеДанных.Вставить("НПунктМЖРук", "РуководительАдресМестаЖительстваНаселенныйПункт");
	СоответствиеДанных.Вставить("РайонМЖРук", "РуководительАдресМестаЖительстваРайон");
	СоответствиеДанных.Вставить("СубъектМЖРук", "РуководительАдресМестаЖительстваРегион");
	СоответствиеДанных.Вставить("УлицаМЖРук", "РуководительАдресМестаЖительстваУлица");
	//РегистрационныеДанныеГлавногоБухгалтера
	СоответствиеДанных.Вставить("ГраждБух", "БухгалтерГражданствоКод");
	СоответствиеДанных.Вставить("ГраждСтранаБух", "БухгалтерГражданствоНаименование");
	СоответствиеДанных.Вставить("ГраждУпПред", "БухгалтерГражданствоУполномоченногоПредставителя");
	СоответствиеДанных.Вставить("ДатаРождБух", "БухгалтерДатаРождения");
	СоответствиеДанных.Вставить("ИННБух", "БухгалтерИНН");
	СоответствиеДанных.Вставить("МестоРождБух", "БухгалтерМестоРождения");
	СоответствиеДанных.Вставить("ПолБух", "БухгалтерПол");
	СоответствиеДанных.Вставить("ПолУпПред", "БухгалтерПолУполномоченногоПредставителя");
	СоответствиеДанных.Вставить("ТелБух", "БухгалтерТелефон");
	СоответствиеДанных.Вставить("ТелОтпр", "БухгалтерТелефон");
	СоответствиеДанных.Вставить("ВидУдЛичнБух", "БухгалтерУдостоверениеЛичностиВидДокумента");
	СоответствиеДанных.Вставить("ДатаУдЛичнБух", "БухгалтерУдостоверениеЛичностиДатаВыдачи");
	СоответствиеДанных.Вставить("ОрганВыданУдЛичнБух", "БухгалтерУдостоверениеЛичностиКемВыдан");
	СоответствиеДанных.Вставить("КодУдЛичнБух", "БухгалтерУдостоверениеЛичностиКод");
	СоответствиеДанных.Вставить("КодПодрУдЛичнБух", "БухгалтерУдостоверениеЛичностиКодПодразделения");
	СоответствиеДанных.Вставить("НомерУдЛичнБух", "БухгалтерУдостоверениеЛичностиНомер");
	СоответствиеДанных.Вставить("СерияУдЛичнБух", "БухгалтерУдостоверениеЛичностиСерия");
	СоответствиеДанных.Вставить("ГраждСтранаУпПред", "БухгалтерУполномоченномПредставителеГражданствоНаименование");
	СоответствиеДанных.Вставить("ФИОБух", "БухгалтерФИО");
	СоответствиеДанных.Вставить("ФИООтпр", "БухгалтерФИО");
	//КонтактнаяИнформацияГлавногоБухгалтера
	СоответствиеДанных.Вставить("АдрМЖБухРФ", "БухгалтерАдресМестаЖительства");
	СоответствиеДанных.Вставить("АдрМЖБухРФ_XML", "БухгалтерАдресМестаЖительстваXML");
	СоответствиеДанных.Вставить("АдрМЖБухРФ_JSON", "БухгалтерАдресМестаЖительстваJSON");
	СоответствиеДанных.Вставить("ГородМЖБух", "БухгалтерАдресМестаЖительстваГород");
	СоответствиеДанных.Вставить("ДомМЖБух", "БухгалтерАдресМестаЖительстваДом");
	СоответствиеДанных.Вставить("ИндексМЖБух", "БухгалтерАдресМестаЖительстваИндекс");
	СоответствиеДанных.Вставить("КвартираМЖБух", "БухгалтерАдресМестаЖительстваКвартира");
	СоответствиеДанных.Вставить("КодСубъектМЖБух", "БухгалтерАдресМестаЖительстваКодРегиона");
	СоответствиеДанных.Вставить("КорпусМЖБух", "БухгалтерАдресМестаЖительстваКорпус");
	СоответствиеДанных.Вставить("НПунктМЖБух", "БухгалтерАдресМестаЖительстваНаселенныйПункт");
	СоответствиеДанных.Вставить("РайонМЖБух", "БухгалтерАдресМестаЖительстваРайон");
	СоответствиеДанных.Вставить("СубъектМЖБух", "БухгалтерАдресМестаЖительстваРегион");
	СоответствиеДанных.Вставить("УлицаМЖБух", "БухгалтерАдресМестаЖительстваУлица");
	//РегистрационныеДанныеУполномоченногоПредставителя
	СоответствиеДанных.Вставить("ДатаРождУпПред", "УполномоченныйПредставительДатаРождения");
	СоответствиеДанных.Вставить("ИННУпПред", "УполномоченныйПредставительИНН");
	СоответствиеДанных.Вставить("ТелУпПред", "УполномоченныйПредставительТелефон");
	СоответствиеДанных.Вставить("ВидУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиВидДокумента");
	СоответствиеДанных.Вставить("ДатаУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиДата");
	СоответствиеДанных.Вставить("ОрганВыданУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиКемВыдан");
	СоответствиеДанных.Вставить("КодУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиКод");
	СоответствиеДанных.Вставить("НомерУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиНомер");
	СоответствиеДанных.Вставить("СерияУдЛичнУпПред", "УполномоченныйПредставительУдостоверениеЛичностиСерия");
	СоответствиеДанных.Вставить("ФИОУпПред", "УполномоченныйПредставительФИО");
	//КонтактнаяИнформацияУполномоченногоПредставителя
	СоответствиеДанных.Вставить("НПунктМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваНаселенныйПункт");
	СоответствиеДанных.Вставить("АдрМЖУпПредРФ", "УполномоченныйПредставительАдресМестаЖительства");
	СоответствиеДанных.Вставить("АдрМЖУпПредРФ_XML", "УполномоченныйПредставительАдресМестаЖительстваXML");
	СоответствиеДанных.Вставить("АдрМЖУпПредРФ_JSON", "УполномоченныйПредставительАдресМестаЖительстваJSON");
	СоответствиеДанных.Вставить("ГородМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваГород");
	СоответствиеДанных.Вставить("ДомМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваДом");
	СоответствиеДанных.Вставить("ИндексМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваИндекс");
	СоответствиеДанных.Вставить("КвартираМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваКвартира");
	СоответствиеДанных.Вставить("КодСубъектМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваКод");
	СоответствиеДанных.Вставить("КорпусМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваКорпус");
	СоответствиеДанных.Вставить("РайонМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваРайон");
	СоответствиеДанных.Вставить("СубъектМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваРегион");
	СоответствиеДанных.Вставить("УлицаМЖУпПред", "УполномоченныйПредставительАдресМестаЖительстваУлица");
	СоответствиеДанных.Вставить("МестоРождУпПред", "УполномоченныйПредставительМестоРождения");
	
	Возврат СоответствиеДанных
	
КонецФункции

// Функция возвращает сведения об организации.
//
// Параметры:
//  Организация       - ссылка на элемент справочника "Организации";
//  ДатаЗначения      - дата, на которую нужно получить сведения;
//  СписокПоказателей - список показателей, значения которых нужно вернуть.
//  
// Возвращаемое значение:
//  Структура с ключами из списка показателей и возвращаемыми значениями.
//
// Пример:
//	ОргСведения = Новый Структура;
//  Для Каждого Показатель Из СписокПоказателей Цикл
//  	ИмяПоказателя = Показатель.Представление;
//      Если Имяпоказателя = "КодНО" Тогда
//      	Значение = Организация.КодНалоговогоОргана;
//      ИначеЕсли ИмяПоказателя = "ОГРН" Тогда
//      	Значение = Организация.ОГРН;
//      Иначе
//      	Значение = "";
//      КонецЕсли;
//      ОргСведения.Вставить(ИмяПоказателя, Значение);
//  КонецЦикла;
//  Возврат ОргСведения;
//
Функция УстаревшаяПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;
	Перем ДанныеБанковскогоСчета;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";

	НаименованияНаДату = Справочники.Организации.НаименованияНаДату(Организация, ДатаЗначения);
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ПБОЮЛ = НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация);
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);
	
	ДомашнийТелефонФизЛица = ?(РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица"), Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("СтавкаНалогаНаПрибыльФБ"); //СтавкаПрибФед
		СписокПоказателей.Добавить("СтавкаНалогаНаПрибыльСубъектРФ"); //СтавкаПрибРесп
		СписокПоказателей.Добавить("СтавкаНалогаНаПрибыльМестный"); //СтавкаПрибМест
		СписокПоказателей.Добавить("СтавкаНалогаУСН"); //СтавкаНалогаУСН
		СписокПоказателей.Добавить("ПризнакНалогоплательщикаКод"); //ТипНП
		СписокПоказателей.Добавить("ПризнакНалогоплательщикаКатегория"); //КатНП
		СписокПоказателей.Добавить("НаименованиеНалоговогоОргана"); //НаимНО
		СписокПоказателей.Добавить("КодНалоговогоОргана"); //КодНО
		СписокПоказателей.Добавить("НаименованиеОКВЭД"); //ОснВидДеят
		СписокПоказателей.Добавить("НаименованиеОКВЭД2"); //ОснВидДеят2
		СписокПоказателей.Добавить("КодОКВЭД"); //ОКВЭД
		СписокПоказателей.Добавить("КодОКВЭД2"); //ОКВЭД2
		СписокПоказателей.Добавить("ОГРН"); //ОГРН
		СписокПоказателей.Добавить("КодПоОКАТО"); //ОКАТО
		СписокПоказателей.Добавить("РегистрационныйНомерСФР"); // РегНомерСФР
		СписокПоказателей.Добавить("РегистрационныйНомерСФРГоловнойОрганизации"); // РегНомерСФРГоловнойОрганизации
		СписокПоказателей.Добавить("РегистрационныйНомерПФР"); //РегНомПФР
		СписокПоказателей.Добавить("КодПоОКПО"); //ОКПО
		СписокПоказателей.Добавить("НаименованиеОКОПФ"); //ОргПравФорм
		СписокПоказателей.Добавить("КодОКОПФ"); //ОКОПФ
		СписокПоказателей.Добавить("НаименованиеОКФС"); //ФормСобств
		СписокПоказателей.Добавить("КодОКФС"); //ОКФС
		СписокПоказателей.Добавить("ДатаРегистрации"); //ДатаРегистрации
		СписокПоказателей.Добавить("ПочтовыйАдресОрганизации"); //АдрПочт
		СписокПоказателей.Добавить("ПочтовыйАдресОрганизацииXML"); //АдрПочт_XML
		СписокПоказателей.Добавить("ПочтовыйАдресОрганизацииJSON"); //АдрПочт_JSON
		СписокПоказателей.Добавить("СвидетельствоСерияНомер"); //СвидСН
		СписокПоказателей.Добавить("СвидетельствоДатаВыдачи"); //СвидДВ
		СписокПоказателей.Добавить("СвидетельствоНаименованиеОргана"); //СвидНО
		СписокПоказателей.Добавить("СвидетельствоКодОргана"); //СвидНОКод
		СписокПоказателей.Добавить("НаименованиеПолное"); //НаимЮЛПол
		СписокПоказателей.Добавить("НаименованиеСокращенное"); //НаимЮЛСокр
		СписокПоказателей.Добавить("ИНН"); //ИННЮЛ
		СписокПоказателей.Добавить("КПП"); //КППЮЛ
		СписокПоказателей.Добавить("АдресОрганизации"); //АдрЮР
		СписокПоказателей.Добавить("АдресОрганизацииXML"); //АдрЮР_XML
		СписокПоказателей.Добавить("АдресОрганизацииJSON"); //АдрЮР_JSON
		СписокПоказателей.Добавить("АдресОрганизацииИндекс"); //ОргИндекс
		СписокПоказателей.Добавить("АдресОрганизацииРегион"); //ОргСубъект
		СписокПоказателей.Добавить("АдресОрганизацииКодРегиона"); //ОргКодСубъект
		СписокПоказателей.Добавить("АдресОрганизацииРайон"); //ОргРайон
		СписокПоказателей.Добавить("АдресОрганизацииГород"); //ОргГород
		СписокПоказателей.Добавить("АдресОрганизацииНаселенныйПункт"); //ОргНПункт
		СписокПоказателей.Добавить("АдресОрганизацииУлица"); //ОргУлица
		СписокПоказателей.Добавить("АдресОрганизацииДом"); //ОргДом
		СписокПоказателей.Добавить("АдресОрганизацииКорпус"); //ОргКорпус
		СписокПоказателей.Добавить("АдресОрганизацииКвартира");  //ОргКвартира
		СписокПоказателей.Добавить("НаименованиеОбособленногоПодразделенияПолное"); //НаимОППол
		СписокПоказателей.Добавить("КППОбособленногоПодразделения"); //КППОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделения"); //АдрОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияXML"); //АдрОП_XML
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияJSON"); //АдрОП_JSON
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияИндекс"); //ИндексОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияРегион"); //СубъектОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияКодРегиона"); //КодСубъектОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияРайон"); //РайонОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияГород"); //ГородОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияНаселенныйПункт"); //НПунктОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияУлица"); //УлицаОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияДом"); //ДомОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияКорпус"); //КорпусОП
		СписокПоказателей.Добавить("АдресОбособленногоПодразделенияКвартира"); //КвартираОП
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииНаименование"); //НаимОИОПол
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииИНН"); //ИННИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииКПП"); //КППИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФ"); //АдрОтдИОРФ
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФXML"); //АдрОтдИОРФ_XML
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФJSON"); //АдрОтдИОРФ_JSON
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФИндекс"); //ИндексОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФРегион"); //СубъектОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФКодРегиона"); //КодСубъектОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФРайон"); //РайонОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФГород"); //ГородОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФНаселенныйПункт"); //НПунктОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФУлица"); //УлицаОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФДом"); //ДомОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФКорпус"); //КорпусОИО
		СписокПоказателей.Добавить("ОтделениеИностраннойОрганизацииАдресРФКвартира"); //КвартираОИО
		СписокПоказателей.Добавить("КодНалогоплательщикаВСтранеРегистрации"); //КодИОСтрРег
		СписокПоказателей.Добавить("НаименованиеИностраннойОрганизации"); //НаимИОПол
		СписокПоказателей.Добавить("СтранаРегистрацииИностраннойОрганизации"); //СтрИО
		СписокПоказателей.Добавить("КодСтраныРегистрации"); //КодСтрИО
		СписокПоказателей.Добавить("СтранаПостоянногоМестонахожденияНаименование");  //СтрПостИО
		СписокПоказателей.Добавить("СтранаПостоянногоМестонахожденияКод"); //КодСтрПостИО
		СписокПоказателей.Добавить("АдресИностраннойОрганизации");  //АдрИО
		СписокПоказателей.Добавить("АдресИностраннойОрганизацииXML");    //АдрИО_XML
		СписокПоказателей.Добавить("АдресИностраннойОрганизацииJSON");    //АдрИО_JSON
		СписокПоказателей.Добавить("ИПНаименование");    //ФИО
		СписокПоказателей.Добавить("ИПФамилия");    //ФамилияИП
		СписокПоказателей.Добавить("ИПИмя");   //ОтчествоИП
		СписокПоказателей.Добавить("ИПОтчество");  //ОтчествоИП
		СписокПоказателей.Добавить("ФизическоеЛицоНаименование");    //ФИООтпрФЛ
		СписокПоказателей.Добавить("ИндивидуальныйПредпринимательИНН");  //ИННФЛ
		СписокПоказателей.Добавить("ИндивидуальныйПредпринимательСНИЛС");  //СНИЛС
		СписокПоказателей.Добавить("ИПДатаРождения");//ДатаРожд
		СписокПоказателей.Добавить("ИПМестоРождения");    //МестоРожд
		СписокПоказателей.Добавить("ФизическоеЛицоПол");    //Пол
		СписокПоказателей.Добавить("ИПГражданствоНаименование");  //Гражд
		СписокПоказателей.Добавить("ИПГражданствоКод");  //ГраждСтрана
		СписокПоказателей.Добавить("ИПКодУдостоверенияЛичности");    //КодУдЛичн
		СписокПоказателей.Добавить("ИПВидДокументаУдостоверенияЛичности");    //ВидУдЛичн
		СписокПоказателей.Добавить("ИПКемВыданУдостоверенияЛичности");//ОрганВыданУдЛичн
		СписокПоказателей.Добавить("ИПКодПодразделенияУдостоверенияЛичности");//КодПодрУдЛичн
		СписокПоказателей.Добавить("ИПСерияУдостоверенияЛичности");  //СерияУдЛичн
		СписокПоказателей.Добавить("ИПНомерУдостоверенияЛичности");  //НомерУдЛичн
		СписокПоказателей.Добавить("ИПДатаВыдачиУдостоверенияЛичности");   //ДатаУдЛичн
		СписокПоказателей.Добавить("ОГРНИП");
		СписокПоказателей.Добавить("АдресРегистрации");//АдрПрописки
		СписокПоказателей.Добавить("АдресРегистрацииXML"); //АдрПрописки_XML
		СписокПоказателей.Добавить("АдресРегистрацииJSON"); //АдрПрописки_JSON
		СписокПоказателей.Добавить("АдресМестаЖительства"); //АдрМЖ
		СписокПоказателей.Добавить("АдресМестаЖительстваXML");    //АдрМЖ_XML
		СписокПоказателей.Добавить("АдресМестаЖительстваJSON");    //АдрМЖ_JSON
		СписокПоказателей.Добавить("ИндексМестаЖительства");//ИндексМЖ
		СписокПоказателей.Добавить("РегионМестаЖительства");    //СубъектМЖ
		СписокПоказателей.Добавить("КодРегионаМестаЖительства"); //КодСубъектМЖ
		СписокПоказателей.Добавить("РайонМестаЖительства"); //РайонМЖ
		СписокПоказателей.Добавить("ГородМестаЖительства"); //ГородМЖ
		СписокПоказателей.Добавить("НаселенныйПунктМестаЖительства");//НПунктМЖ
		СписокПоказателей.Добавить("УлицаМестаЖительства"); //УлицаМЖ
		СписокПоказателей.Добавить("ДомМестаЖительства");   //ДомМЖ
		СписокПоказателей.Добавить("КорпусМестаЖительства");//КорпусМЖ
		СписокПоказателей.Добавить("КвартираМестаЖительства");   //КвартираМЖ
		СписокПоказателей.Добавить("ТелефонОрганизации"); //ТелСлуж
		СписокПоказателей.Добавить("ДомашнийТелефонФизЛица");  //ТелДом
		СписокПоказателей.Добавить("РуководительФИО");  //ФИОРук
		СписокПоказателей.Добавить("РуководительИНН");  //ИННРук
		СписокПоказателей.Добавить("РуководительДатаРождения");  //ДатаРождРук
		СписокПоказателей.Добавить("РуководительМестоРождения"); //МестоРождРук
		СписокПоказателей.Добавить("РуководительПол");  //ПолРук
		СписокПоказателей.Добавить("РуководительГражданствоКод");//ГраждРук
		СписокПоказателей.Добавить("РуководительГражданствоНаименование"); //ГраждСтранаРук
		СписокПоказателей.Добавить("РуководительТелефон");  //ТелРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиКод"); //КодУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиВидДокумента"); //ВидУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиКемВыдан"); //ОрганВыданУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиКодПодразделения");    //КодПодрУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиСерия"); //СерияУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиНомер"); //НомерУдЛичнРук
		СписокПоказателей.Добавить("РуководительУдостоверениеЛичностиДатаВыдачи"); //ДатаУдЛичнРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительства"); //АдрМЖРукРФ
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваXML"); //АдрМЖРукРФ_XML
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваJSON"); //АдрМЖРукРФ_JSON
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваИндекс"); //ИндексМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваРегион"); //СубъектМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваКодРегиона"); //КодСубъектМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваРайон"); //РайонМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваГород"); //ГородМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваНаселенныйПункт"); //НПунктМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваУлица"); //УлицаМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваДом"); //ДомМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваКорпус"); //КорпусМЖРук
		СписокПоказателей.Добавить("РуководительАдресМестаЖительстваКвартира"); //КвартираМЖРук
		СписокПоказателей.Добавить("БухгалтерФИО"); //ФИОБух
		СписокПоказателей.Добавить("БухгалтерФИО"); //ФИООтпр
		СписокПоказателей.Добавить("БухгалтерИНН"); //ИННБух
		СписокПоказателей.Добавить("БухгалтерДатаРождения"); //ДатаРождБух
		СписокПоказателей.Добавить("БухгалтерМестоРождения"); //МестоРождБух
		СписокПоказателей.Добавить("БухгалтерПол"); //ПолБух
		СписокПоказателей.Добавить("БухгалтерПолУполномоченногоПредставителя"); //ПолУпПред
		СписокПоказателей.Добавить("БухгалтерГражданствоКод"); //ГраждБух
		СписокПоказателей.Добавить("БухгалтерГражданствоУполномоченногоПредставителя"); //ГраждУпПред
		СписокПоказателей.Добавить("БухгалтерГражданствоНаименование"); //ГраждСтранаБух
		СписокПоказателей.Добавить("БухгалтерУполномоченномПредставителеГражданствоНаименование"); //ГраждСтранаУпПред
		СписокПоказателей.Добавить("БухгалтерТелефон"); //ТелБух
		СписокПоказателей.Добавить("БухгалтерТелефон"); //ТелОтпр
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиКод"); //КодУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиВидДокумента"); //ВидУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиКемВыдан"); //ОрганВыданУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиКодПодразделения"); //КодПодрУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиСерия"); //СерияУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиНомер"); //НомерУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерУдостоверениеЛичностиДатаВыдачи"); //ДатаУдЛичнБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительства"); //АдрМЖБухРФ
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваXML"); //АдрМЖБухРФ_XML
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваJSON"); //АдрМЖБухРФ_JSON
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваИндекс"); //ИндексМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваРегион"); //СубъектМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваКодРегиона"); //КодСубъектМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваРайон"); //РайонМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваГород"); //ГородМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваНаселенныйПункт"); //НПунктМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваУлица"); // УлицаМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваДом"); //ДомМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваКорпус"); // КорпусМЖБух
		СписокПоказателей.Добавить("БухгалтерАдресМестаЖительстваКвартира"); // КвартираМЖБух
		СписокПоказателей.Добавить("УполномоченныйПредставительФИО"); // ФИОУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительИНН"); //ИННУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительТелефон"); //ТелУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиКод"); //КодУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиВидДокумента"); // ВидУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиКемВыдан"); //ОрганВыданУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиСерия"); // СерияУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиНомер"); //НомерУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительУдостоверениеЛичностиДата"); // ДатаУдЛичнУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительДатаРождения"); // ДатаРождУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительства"); //  АдрМЖУпПредРФ
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваXML"); // АдрМЖУпПредРФ_XML
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваJSON"); // АдрМЖУпПредРФ_JSON
		СписокПоказателей.Добавить("УполномоченныйПредставительМестоРождения"); // МестоРождУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваИндекс"); // ИндексМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваРегион"); //  СубъектМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваКод"); // КодСубъектМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваРайон"); // РайонМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваГород"); // ГородМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваНаселенныйПункт"); //  НПунктМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваУлица"); //  УлицаМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваДом"); //  ДомМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваКорпус"); //  КорпусМЖУпПред
		СписокПоказателей.Добавить("УполномоченныйПредставительАдресМестаЖительстваКвартира"); //  КвартираМЖУпПред
		СписокПоказателей.Добавить("СведенияОбИсполнителеФакс"); // ФаксИсп
		СписокПоказателей.Добавить("ДолжностьОтправителя"); //ДолжнОтпр
		СписокПоказателей.Добавить("ДатаПереходаНаУСН"); //  ДатаПереходаНаУСН
		СписокПоказателей.Добавить("БанковскийСчетНомерСчета"); //БанкСчетНомер
		СписокПоказателей.Добавить("БанковскийСчетБанк"); //БанкСчетНаимБанка
		СписокПоказателей.Добавить("БанковскийСчетКоррСчет"); //БанкСчетКоррСчетБанка
		СписокПоказателей.Добавить("БанковскийСчетБИК"); //БанкСчетБИКБанка
		СписокПоказателей.Добавить("РегистрационныйНомерФСС"); //РегистрационныйНомерФСС
		СписокПоказателей.Добавить("ДополнительныйКодФСС"); // ДополнительныйКодФСС
		СписокПоказателей.Добавить("НомерСтрахователяФСС"); // НомерСтрахователяФСС
		СписокПоказателей.Добавить("КодПодчиненностиФСС"); // КодПодчиненностиФСС
		СписокПоказателей.Добавить("НаименованиеТерриториальногоОрганаФСС"); // НаименованиеТерриториальногоОрганаФСС
		СписокПоказателей.Добавить("КодОКОНХ"); // КодОКОНХ
		СписокПоказателей.Добавить("СтраховойТариф"); // СтраховойТариф
		СписокПоказателей.Добавить("ТелефонОрганизации"); //  ТелОрганизации
		СписокПоказателей.Добавить("ФаксОрганизации"); //  ФаксОрганизации
		СписокПоказателей.Добавить("ОбъектНалогообложенияУСН"); // ОбъектНалогообложенияУСН
		СписокПоказателей.Добавить("ОтветственноеЛицоСтатистикаФИО"); //
		СписокПоказателей.Добавить("ОтветственноеЛицоСтатистикаДолжность"); //
		СписокПоказателей.Добавить("ОтветственноеЛицоСтатистикаТелефон"); //
		СписокПоказателей.Добавить("ОтветственноеЛицоСтатистикаАдресЭлектроннойПочты"); //
		СписокПоказателей.Добавить("БухгалтерАдресЭлектроннойПочты"); //
		СписокПоказателей.Добавить("РуководительАдресЭлектроннойПочты"); //
		СписокПоказателей.Добавить("ИПАдресЭлектроннойПочты"); //
		СписокПоказателей.Добавить("ИсполнительАдресЭлектроннойПочты"); //
		СписокПоказателей.Добавить("ГоловнаяОрганизацияНаименование"); // НаимГоловнОрг
		СписокПоказателей.Добавить("ГоловнаяОрганизацияКПП"); // КППГоловнОрг
		СписокПоказателей.Добавить("СведенияОбИсполнителеФИО"); //  ФИОИсп
		СписокПоказателей.Добавить("СведенияОбИсполнителеДолжность"); //ДолжнИсп
		СписокПоказателей.Добавить("СведенияОбИсполнителеТелефон"); //ТелИсп
		СписокПоказателей.Добавить("КодОрганаПФР"); // КодОрганаПФР
		СписокПоказателей.Добавить("АдресЭлектроннойПочтыОрганизации"); //АдресЭлектроннойПочтыОрганизации
		СписокПоказателей.Добавить("РегистрационныйНомерТФОМС"); //РегНомТФОМС
		СписокПоказателей.Добавить("КодПодчиненностиФССДобрСтрах"); //  КодПодчФССДобрСтрах
		СписокПоказателей.Добавить("КодОрганаФСГС"); // КодОрганаФСГС
		СписокПоказателей.Добавить("КодПоОКТМО"); //  ОКТМО
		СписокПоказателей.Добавить("РуководительДолжность"); // ДолжнРук
		СписокПоказателей.Добавить("РуководительФамилия"); //ФамилияРук
		СписокПоказателей.Добавить("РуководительИмя"); // ИмяРук
		СписокПоказателей.Добавить("РуководительОтчество"); //ОтчествоРук
		СписокПоказателей.Добавить("БухгалтерФамилия"); // ФамилияБух
		СписокПоказателей.Добавить("БухгалтерИмя"); // ИмяБух
		СписокПоказателей.Добавить("БухгалтерОтчество"); //	ОтчествоБух	
		СписокПоказателей.Добавить("ШифрСтрахователяФСС"); //ШифрСтрахователяФСС
		СписокПоказателей.Добавить("СистемыНалогообложения"); // СистемыНалогообложения
		СписокПоказателей.Добавить("ВидПлательщикаСтраховыхВзносов"); //ВидПлательщикаСтраховыхВзносов
		СписокПоказателей.Добавить("ЭтоБюджетополучатель"); // ЭтоБюджетополучатель
		СписокПоказателей.Добавить("ЭтоКрупнейшийНалогоплательщик"); // ПризнакНПЛКрупнейший
		СписокПоказателей.Добавить("КодНалоговогоОрганаКрупнейшегоНалогоплательщика"); // КодНОКрупнейший
		СписокПоказателей.Добавить("НекоммерческаяОрганизация"); // НекоммерческаяОрганизация
		СписокПоказателей.Добавить("ДатаЗакрытия"); // ДатаЗакрытия
		
	КонецЕсли;
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс",          "");
	РоссийскийАдрес.Вставить("Регион",          "");
	РоссийскийАдрес.Вставить("КодРегиона",      "");
	РоссийскийАдрес.Вставить("Район",           "");
	РоссийскийАдрес.Вставить("Город",           "");
	РоссийскийАдрес.Вставить("НаселенныйПункт", "");
	РоссийскийАдрес.Вставить("Улица",           "");
	РоссийскийАдрес.Вставить("Дом",             "");
	РоссийскийАдрес.Вставить("Корпус",          "");
	РоссийскийАдрес.Вставить("Квартира",        "");
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл
		
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		Значение	  = ""; // значение показателя по умолчанию
		
		Если ИмяПоказателя = "СтавкаНалогаНаПрибыльФБ" Тогда
			
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаФБ;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "СтавкаНалогаНаПрибыльСубъектРФ" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаСубъектРФ;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаНалогаНаПрибыльМестный" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено И Ставки.Количество() > 0 Тогда
				Значение = Ставки.СтавкаМестный;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаНалогаУСН" Тогда
			
			Значение = УчетнаяПолитика.СтавкаНалогаУСН(Организация.Ссылка, ДатаЗначения);
			
		ИначеЕсли ИмяПоказателя = "ПризнакНалогоплательщикаКод" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Значение = 5;
			Иначе
				Если ЭтоГоловнаяОрганизация(Организация, Истина) Тогда
					Если ПБОЮЛ Тогда
						Значение = 3;
					Иначе
						Значение = 1;
					КонецЕсли;
				Иначе
					Значение = 2;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПризнакНалогоплательщикаКатегория" Тогда
			
			Значение = "01";
			
		ИначеЕсли ИмяПоказателя = "ЭтоЮридическоеЛицо" Тогда
			
			Значение = НЕ ПБОЮЛ;
			
		ИначеЕсли ИмяПоказателя = "ЭтоБюджетополучатель" Тогда
			
			Значение = Ложь;
			
		ИначеЕсли ИмяПоказателя = "НекоммерческаяОрганизация" Тогда
			
			Значение = Неопределено;
			
		ИначеЕсли Имяпоказателя = "НаименованиеНалоговогоОргана" Тогда
			
			// данный реквизит заполняется из регистрации в налоговом органе организации
			РегистрацияВНалоговомОргане = Неопределено;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "НаименованиеИФНС");
			КонецЕсли;
			
			// если заполнить не удалось
			Если Не ЗначениеЗаполнено(Значение) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеНалоговогоОргана", Значение);
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "КодНалоговогоОргана" Тогда
			
			// данный реквизит заполняется из регистрации в налоговом органе организации
			РегистрацияВНалоговомОргане = Неопределено;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
			КонецЕсли;
			
			// если заполнить не удалось
			Если Не ЗначениеЗаполнено(Значение) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодНалоговогоОргана", Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ЭтоКрупнейшийНалогоплательщик" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КрупнейшийНалогоплательщик", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодНалоговогоОрганаКрупнейшегоНалогоплательщика" Тогда
			
			ЭтоКрупнейшийНалогоплательщик = Ложь;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КрупнейшийНалогоплательщик", ЭтоКрупнейшийНалогоплательщик);
			
			Если ЭтоКрупнейшийНалогоплательщик Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодНалоговогоОрганаПолучателя", Значение);
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "НаименованиеОКВЭД" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеОКВЭД", Значение);
			
		ИначеЕсли Имяпоказателя = "КодОКВЭД" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОКВЭД", Значение);
			
		ИначеЕсли Имяпоказателя = "НаименованиеОКВЭД2" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеОКВЭД2", Значение);
			
		ИначеЕсли Имяпоказателя = "КодОКВЭД2" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОКВЭД2", Значение);
			
		ИначеЕсли ИмяПоказателя	= "ОГРН" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "ОГРН", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодПоОКАТО" Тогда
			
			// данный реквизит заполняется из регистрации в налоговом органе организации
			
			РегистрацияВНалоговомОргане = Неопределено;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКАТО");
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодПоОКТМО" Тогда
			
			// данный реквизит заполняется из регистрации в налоговом органе организации
			
			РегистрацияВНалоговомОргане = Неопределено;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КодПоОКТМО");
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерСФР" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерСФР", Значение);
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерТФОМС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерТФОМС", Значение);
			
		ИначеЕсли ИмяПоказателя = "ИПРегистрационныйНомерТФОМС" Тогда
			
			Если ПБОЮЛ Тогда
				Если НЕ ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИПРегистрационныйНомерТФОМС", Значение) Тогда
					ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерТФОМС", Значение);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерПФР" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерПФР", Значение);
			
		ИначеЕсли ИмяПоказателя = "ИПРегистрационныйНомерПФР" Тогда
			
			Если ПБОЮЛ Тогда
				Если НЕ ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИПРегистрационныйНомерПФР", Значение) Тогда
					ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерПФР", Значение);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаПФР" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОрганаПФР", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодПоОКПО" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодПоОКПО", Значение);
			
		ИначеЕсли ИмяПоказателя = "НаименованиеОКОПФ" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеОКОПФ", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодОКОПФ" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОКОПФ", Значение);
			
		ИначеЕсли ИмяПоказателя = "НаименованиеОКФС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеОКФС", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодОКФС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОКФС", Значение);
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФСС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерФСС", Значение);
			
		ИначеЕсли ИмяПоказателя = "ДополнительныйКодФСС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "ДополнительныйКодФСС", Значение);
			
		ИначеЕсли ИмяПоказателя = "НомерСтрахователяФСС" Тогда
			
			Если ЭтоГоловнаяОрганизация(Организация, Истина) Или ДатаЗначения < '20150121' Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерФСС", Значение);
			Иначе // Для обособленных подразделений с 2015 года используется дополнительный код ФСС.
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "ДополнительныйКодФСС", Значение);
			КонецЕсли
			
		ИначеЕсли ИмяПоказателя = "НаименованиеТерриториальногоОрганаФСС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеТерриториальногоОрганаФСС", Значение);
			
		ИначеЕсли ИмяПоказателя = "ИПРегистрационныйНомерФСС" Тогда
			
			Если ПБОЮЛ Тогда
				Если НЕ ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИПРегистрационныйНомерФСС", Значение) Тогда
					ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрационныйНомерФСС", Значение);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодПодчиненностиФСС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодПодчиненностиФСС", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодПодчиненностиФССДобрСтрах" Тогда	
			
			Если ПБОЮЛ Тогда
				Если НЕ ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИПКодПодчиненностиФСС", Значение) Тогда
					ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодПодчиненностиФСС", Значение);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодОКОНХ" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОКОНХ", Значение);
			
		ИначеЕсли ИмяПоказателя = "КодОрганаФСГС" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодОрганаФСГС", Значение);
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "ДатаРегистрации", Значение, ПустаяДата);
			
		ИначеЕсли ИмяПоказателя = "ДатаЗакрытия" Тогда
			
			Значение = ПустаяДата;
			
		ИначеЕсли ИмяПоказателя = "СтраховойТариф" Тогда
			
			Результат = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
			Если Результат.Количество() > 0 Тогда
				Значение = Результат[0].Ставка;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ШифрСтрахователяФСС" Тогда
			
			ВидТарифа = ПолучитьСУчетомКэша(Кэш, "ВидТарифа");
			Значение = ВидТарифа.КодФСС2012;
						
		ИначеЕсли ИмяПоказателя = "СистемыНалогообложения" Тогда
			
			Значение = "";
			
			УчетнаяПолитикаОрганизации = УчетнаяПолитика.СистемаНалогообложения(Организация.Ссылка, Кэш.ДатаЗначения);
			Если УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Общая Тогда
				Значение = "ОСНО";
			ИначеЕсли УчетнаяПолитикаОрганизации = Перечисления.СистемыНалогообложения.Упрощенная Тогда
				Значение = "УСН";
			КонецЕсли;
				
			ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВД(Организация.Ссылка, Кэш.ДатаЗначения);
			Если ПлательщикЕНВД Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					Значение = Значение + ", ЕНВД";
				Иначе
					Значение = "ЕНВД";
				КонецЕсли;
			КонецЕсли;
			
			ВидТарифа = ПолучитьСУчетомКэша(Кэш, "ВидТарифа");
			Если ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ЕСХН Тогда
				Значение = "ЕСХН";
			КонецЕсли;
			Если ВидТарифа = Справочники.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент Тогда
				Если ЗначениеЗаполнено(Значение) Тогда
					Значение = Значение + ", ПСН";
				Иначе
					Значение = "ПСН";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидПлательщикаСтраховыхВзносов" Тогда
			
			Значение = "00";
						
		ИначеЕсли ИмяПоказателя = "ПочтовыйАдресОрганизации" Тогда
			
			ДопПараметрыКИ = Новый Структура;
			ДопПараметрыКИ.Вставить("ПреобразоватьВФорматАдреса", Истина);
			ДопПараметрыКИ.Вставить("ДатаЗначения", ДатаЗначения);
			ПолучитьКонтактнуюИнформациюОрганизации(
				Значение,
				Организация.Ссылка,
				Перечисления.ТипыКонтактнойИнформации.Адрес,
				Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
				,
				ПустойАдрес,
				ДопПараметрыКИ);
			
		ИначеЕсли ИмяПоказателя = "ПочтовыйАдресОрганизацииXML" Тогда
			
			Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "ПочтовыйАдресОрганизацииJSON" Тогда
			
			Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
			
		ИначеЕсли ИмяПоказателя = "ПочтовыйАдресОрганизацииПолный" Тогда
	
			ДопПараметрыКИ = Новый Структура;
			ДопПараметрыКИ.Вставить("ПреобразоватьВФорматАдреса", Ложь);
			ДопПараметрыКИ.Вставить("ДатаЗначения", ДатаЗначения);
			ПолучитьКонтактнуюИнформациюОрганизации(
				Значение,
				Организация.Ссылка,
				Перечисления.ТипыКонтактнойИнформации.Адрес,
				Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
				"Представление",
				ПустойАдрес,
				ДопПараметрыКИ);
			
		ИначеЕсли ИмяПоказателя = "АдресЭлектроннойПочтыОрганизации" Тогда
			
			ПолучитьКонтактнуюИнформациюОрганизации(
				Значение,
				Организация.Ссылка,
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
				Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
				"Представление");
			
		ИначеЕсли ИмяПоказателя = "СвидетельствоСерияНомер" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "СвидетельствоСерияНомер", Значение);
			
		ИначеЕсли ИмяПоказателя = "СвидетельствоДатаВыдачи" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "СвидетельствоДатаВыдачи", Значение);
			
		ИначеЕсли ИмяПоказателя = "СвидетельствоНаименованиеОргана" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "СвидетельствоНаименованиеОргана", Значение);
			
		ИначеЕсли ИмяПоказателя = "СвидетельствоКодОргана" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "СвидетельствоКодОргана", Значение);
			
		ИначеЕсли ИмяПоказателя = "НаименованиеПолное" Тогда
			
			Значение = НаименованияНаДату.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеСокращенное" Тогда
			
			Значение = НаименованияНаДату.НаименованиеСокращенное;
			
		ИначеЕсли ИмяПоказателя = "ИНН" Тогда
			
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИНН", Значение);
			
		ИначеЕсли ИмяПоказателя = "КПП" Тогда
			
			Значение = ОрганизацииЛокализация.КППНаДату(Организация.Ссылка, ДатаЗначения);
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизации" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииXML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			
			Если Результат <> Неопределено Тогда
				Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					Результат.ЗначенияПолей, Результат.Представление, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииJSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");
			
			Если Результат <> Неопределено Тогда
				Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
					Результат.ЗначенияПолей, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииПолный" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "АдресОрганизацииФакт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			Если Результат <> Неопределено Тогда
				Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииФактXML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			
			Если Результат <> Неопределено Тогда
				Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					Результат.ЗначенияПолей, Результат.Представление, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииФактJSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ФактАдресОрганизации");
			
			Если Результат <> Неопределено Тогда
				Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
					Результат.ЗначенияПолей, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелефонОрганизации" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксОрганизации" Тогда
			
			Если НЕ Кэш.ПБОЮЛ Тогда
				
			ПолучитьКонтактнуюИнформациюОрганизации(
					Значение,
					Кэш.Организация.Ссылка,
					Перечисления.ТипыКонтактнойИнформации.Факс,
					Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
					"Представление");
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Индекс"];
								
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииРегион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
								
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Регион"];				
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииКодРегиона" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["КодРегиона"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Район"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииГород" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Город"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииНаселенныйПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["НаселенныйПункт"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииУлица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Улица"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Дом"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Корпус"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОрганизацииКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				
				РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.ЗначенияПолей, РоссийскийАдрес);
				
				Значение = РоссийскийАдрес["Квартира"];
					
			Иначе
				Значение = "";
			КонецЕсли;
			
			ИначеЕсли ИмяПоказателя = "РуководительДолжность" Тогда
			    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Значение = СокрЛП(Результат[0].Должность);
				Иначе
					Значение = "";
			    КонецЕсли;
				
			ИначеЕсли ИмяПоказателя = "РуководительФамилия" Тогда
			    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			        ФЛ = Результат[0]["ФизическоеЛицо"];
			        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
			            Значение = "";
			        Иначе
			            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
			                Значение = "";
			            Иначе
			                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
			                Если ДанныеФЛ.Количество() > 0 Тогда
			                    Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
			                Иначе
			                    Значение = "";
			                КонецЕсли;
			            КонецЕсли;
			        КонецЕсли;
			    Иначе
			        Значение = "";
				КонецЕсли;
				
			ИначеЕсли ИмяПоказателя = "БухгалтерФамилия" Тогда
			    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
			        ФЛ = Результат[0]["ФизическоеЛицо"];
			        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
			            Значение = "";
			        Иначе
			            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
			                Значение = "";
			            Иначе
			                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
			                Если ДанныеФЛ.Количество() > 0 Тогда
			                    Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
			                Иначе
			                    Значение = "";
			                КонецЕсли;
			            КонецЕсли;
			        КонецЕсли;
			    Иначе
			        Значение = "";
			    КонецЕсли;
		// *************************************************************для обособленного подразделения.
		ИначеЕсли ИмяПоказателя = "НаименованиеОбособленногоПодразделенияПолное" Тогда
		
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				Значение = НаименованияНаДату.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППОбособленногоПодразделения" Тогда
			
			// данный реквизит заполняется из регистрации в налоговом органе организации
			
			РегистрацияВНалоговомОргане = Неопределено;
			ПолучитьЗначениеРеквизитаОрганизации(Организация, "РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
			КонецЕсли;
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) И Не ЗначениеЗаполнено(Значение) Тогда
				Значение = ОрганизацииЛокализация.КППНаДату(Организация.Ссылка, ДатаЗначения);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделения" Тогда
			
			Если ЭтоГоловнаяОрганизация(Организация) Тогда
				Значение = ПустойАдрес;
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияXML" Тогда
			
			Если Организация.ГоловнаяОрганизация = Организация.Ссылка Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияJSON" Тогда
			
			Если Организация.ГоловнаяОрганизация = Организация.Ссылка Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияИндекс" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Индекс=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияРегион" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Регион=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияКодРегиона" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Регион=") = 1 Тогда
							
							Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияРайон" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Район=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияГород" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Город=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияНаселенныйПункт" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияУлица" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Улица=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияДом" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Дом=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияКорпус" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Корпус=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "АдресОбособленногоПодразделенияКвартира" Тогда
			
			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Квартира=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		// ********************************************************сведения об иностранной организации.
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииНаименование" Тогда
		
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеПолное", Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииИНН" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИНН", Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииКПП" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Значение = ОрганизацииЛокализация.КППНаДату(Организация.Ссылка, ДатаЗначения);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФ" Тогда
			
			Если НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФXML" Тогда
			
			Если НЕ Организация.ОтделениеИностраннойОрганизации Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФJSON" Тогда
			
			Если НЕ Организация.ОтделениеИностраннойОрганизации Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФИндекс" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Индекс=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФРегион" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Регион=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФКодРегиона" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Регион=") = 1 Тогда
							
							Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФРайон" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Район=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФГород" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Город=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФНаселенныйПункт" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФУлица" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Улица=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФДом" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Дом=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФКорпус" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Корпус=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ОтделениеИностраннойОрганизацииАдресРФКвартира" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
										
					Для НомСтр = 1 По СтрЧислоСтрок(Результат.ЗначенияПолей) Цикл
						
						Стр = СтрПолучитьСтроку(Результат.ЗначенияПолей, НомСтр);
						
						Если Найти(Стр, "Квартира=") = 1 Тогда
							
							Значение = Сред(Стр, Найти(Стр, "=") + 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
						
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодНалогоплательщикаВСтранеРегистрации" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "КодВСтранеРегистрации", Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаименованиеИностраннойОрганизации" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "НаименованиеИнострОрганизации", Значение);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтранаРегистрацииИностраннойОрганизации" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация)
			 И ПолучитьЗначениеРеквизитаОрганизации(Организация, "СтранаРегистрацииИностраннойОрганизации", Значение) Тогда
				Значение = Значение.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСтраныРегистрации" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация)
			 И ПолучитьЗначениеРеквизитаОрганизации(Организация, "СтранаРегистрацииИностраннойОрганизации", Значение) Тогда
				Значение = Значение.КодАльфа2;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтранаПостоянногоМестонахожденияНаименование" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация)
			 И ПолучитьЗначениеРеквизитаОрганизации(Организация, "СтранаПостоянногоМестонахождения", Значение) Тогда
				Значение = Значение.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтранаПостоянногоМестонахожденияКод" Тогда
			
			Если РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация)
			 И ПолучитьЗначениеРеквизитаОрганизации(Организация, "СтранаПостоянногоМестонахождения", Значение) Тогда
				Значение = Значение.КодАльфа2;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресИностраннойОрганизации" Тогда
			
			Если НЕ РегламентированнаяОтчетностьПереопределяемый.ЭтоИностраннаяОрганизация(Организация) Тогда
				Значение = ПустойАдрес;
			Иначе
				
				ДопПараметрыКИ = Новый Структура;
				ДопПараметрыКИ.Вставить("ПреобразоватьВФорматАдреса", Ложь);
				ДопПараметрыКИ.Вставить("ДатаЗначения", ДатаЗначения);
				ПолучитьКонтактнуюИнформациюОрганизации(
					Значение,
					Организация.Ссылка,
					Перечисления.ТипыКонтактнойИнформации.Адрес,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, //УчредительныйАдресИностраннойОрганизации,
					"Представление",
					ПустойАдрес,
					ДопПараметрыКИ);
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресИностраннойОрганизацииXML" Тогда
			
			Если НЕ Организация.ОтделениеИностраннойОрганизации Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресИностраннойОрганизацииJSON" Тогда
			
			Если НЕ Организация.ОтделениеИностраннойОрганизации Тогда
				Значение = Неопределено;
			Иначе
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			КонецЕсли;
			
		// ***************************************************сведения об индивидуальном предпринимателе.
		ИначеЕсли ИмяПоказателя = "ИПНаименование" ИЛИ ИмяПоказателя = "ФизическоеЛицоНаименование" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ПолучитьЗначениеРеквизитаОрганизации(Организация, "ИндивидуальныйПредприниматель", Значение, Справочники.ФизическиеЛица.ПустаяСсылка());
					Если Значение = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = НаименованияНаДату.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо", Значение));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = НаименованияНаДату.НаименованиеПолное;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПФамилия" ИЛИ ИмяПоказателя = "ИПИмя" ИЛИ ИмяПоказателя = "ИПОтчество" Тогда
			
			Значение = "";
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если НЕ Результат[0].ФизическоеЛицо.Пустая() Тогда
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Результат[0]);
						Если ДанныеФЛ.Количество() > 0 Тогда
							ИмяПоляДанныхФизЛица = СтрЗаменить(ИмяПоказателя, "ИП", "");
							Значение = СокрЛП(ДанныеФЛ.Получить(0)[ИмяПоляДанныхФизЛица]);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндивидуальныйПредпринимательИНН" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если НЕ Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Результат[0].ФизическоеЛицо.ИНН;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндивидуальныйПредпринимательСНИЛС" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если НЕ Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Результат[0].ФизическоеЛицо.СтраховойНомерПФР;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли ИмяПоказателя = "ИПДатаРождения" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = Результат[0].ФизическоеЛицо.ДатаРождения;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПМестоРождения" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.МестоРождения;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФизическоеЛицоПол" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = 0;
					Иначе
						Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
							Значение = 2;
						ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
							Значение = 1;
						Иначе
							Значение = 0;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
				
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПГражданствоНаименование" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;

					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПГражданствоКод" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПКодУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = Неопределено;
						Иначе
							Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "КодМВД");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПВидДокументаУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "Наименование");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПКемВыданУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.КемВыдан;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПКодПодразделенияУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.КодПодразделения;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПСерияУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.Серия;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПНомерУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.Номер;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИПДатаВыдачиУдостоверенияЛичности" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = ПустаяДата;
						Иначе
							Значение = УдЛичн.ДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресРегистрации" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдресПрописки", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресРегистрацииXML" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресРегистрацииJSON" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресМестаЖительстваXML" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВXML(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресМестаЖительстваJSON" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = АдресВJSON(Организация.КонтактнаяИнформация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
														
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Индекс=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегионМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
														
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Регион=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодРегионаМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Регион=") = 1 Тогда
									
									Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Район=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Город=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НаселенныйПунктМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Улица=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Дом=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Корпус=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМестаЖительства" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							
							Значение = "";
							
							Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
								
								Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
								
								Если Найти(Стр, "Квартира=") = 1 Тогда
									
									Значение = Сред(Стр, Найти(Стр, "=") + 1);
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
						
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелефонОрганизации" Тогда
			
			Если ПБОЮЛ Тогда
			
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомашнийТелефонФизЛица" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0
				 И НЕ Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						
					ПолучитьКонтактнуюИнформациюОрганизации(
						Значение,
						Результат[0].ФизическоеЛицо.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						ДомашнийТелефонФизЛица,
						"Представление");
					
				КонецЕсли;
				
			КонецЕсли;
			
		// ******************************************************************сведения о руководителе организации.
		ИначеЕсли ИмяПоказателя = "РуководительФИО" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительИНН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда

				ФЛ = Результат[0].ФизическоеЛицо;

				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительДатаРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = ФЛ.ДатаРождения;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительМестоРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.МестоРождения;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительПол" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительГражданствоКод" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительГражданствоНаименование" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительТелефон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если ЗначениеЗаполнено(ФЛ) Тогда
					
					ПолучитьКонтактнуюИнформациюОрганизации(
						Значение,
						ФЛ.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						ДомашнийТелефонФизЛица,
						"Представление");
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиКод" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "КодМВД");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиВидДокумента" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "Наименование");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиКемВыдан" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиКодПодразделения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КодПодразделения;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиСерия" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиНомер" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительУдостоверениеЛичностиДатаВыдачи" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительства" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = ПустойАдрес;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваXML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = Неопределено;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение =  УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат2.ЗначенияПолей, Результат2.Представление, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваJSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = Неопределено;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение =  УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат2.ЗначенияПолей, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
								
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Индекс=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваРегион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваКодРегиона" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
								
								Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Район=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваГород" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Город=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваНаселенныйПункт" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваУлица" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Улица=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Дом=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Корпус=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительАдресМестаЖительстваКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Квартира=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РуководительДолжность" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        Значение = СокрЛП(Результат[0].Должность);
			Иначе
				Значение = "";
		    КонецЕсли;
		
		ИначеЕсли ИмяПоказателя = "РуководительФамилия" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
		    КонецЕсли;
		ИначеЕсли ИмяПоказателя = "РуководительИмя" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Имя);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
		    КонецЕсли;
		ИначеЕсли ИмяПоказателя = "РуководительОтчество" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Отчество);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерФамилия" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Фамилия);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
		    КонецЕсли;
		ИначеЕсли ИмяПоказателя = "БухгалтерИмя" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Имя);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
		    КонецЕсли;
		ИначеЕсли ИмяПоказателя = "БухгалтерОтчество" Тогда
		    Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
		    Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
		        ФЛ = Результат[0]["ФизическоеЛицо"];
		        Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		            Значение = "";
		        Иначе
		            Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
		                Значение = "";
		            Иначе
		                ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
		                Если ДанныеФЛ.Количество() > 0 Тогда
		                    Значение = СокрЛП(ДанныеФЛ[0].Отчество);
		                Иначе
		                    Значение = "";
		                КонецЕсли;
		            КонецЕсли;
		        КонецЕсли;
		    Иначе
		        Значение = "";
		    КонецЕсли;
		// *******************************************************************Сведения о главном бухгалтере.
		ИначеЕсли ИмяПоказателя = "БухгалтерФИО" ИЛИ ИмяПоказателя = "БухгалтерФИО" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0]["ФизическоеЛицо"];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерИНН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерДатаРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = ФЛ.ДатаРождения;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительДатаРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = Результат.ФизическоеЛицо.ДатаРождения;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерМестоРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.МестоРождения;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительМестоРождения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат.ФизическоеЛицо.МестоРождения;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерПол" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерПолУполномоченногоПредставителя" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерГражданствоКод" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерГражданствоНаименование" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерГражданствоУполномоченногоПредставителя" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат.ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерУполномоченномПредставителеГражданствоНаименование" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат.ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "БухгалтерТелефон" ИЛИ ИмяПоказателя = "БухгалтерТелефон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если ЗначениеЗаполнено(ФЛ) Тогда
					
					ПолучитьКонтактнуюИнформациюОрганизации(
						Значение,
						ФЛ.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						ДомашнийТелефонФизЛица,
						"Представление");
						
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиКод" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "КодМВД");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиВидДокумента" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "Наименование");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиКемВыдан" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиКодПодразделения" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КодПодразделения;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
		
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиСерия" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиНомер" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерУдостоверениеЛичностиДатаВыдачи" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФЛ = Результат[0].ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительства" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = ПустойАдрес;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваXML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = Неопределено;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат2.ЗначенияПолей, Результат2.Представление, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваJSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = Неопределено;
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат2.ЗначенияПолей, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Индекс=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваРегион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваКодРегиона" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
								
								Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Район=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваГород" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Город=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваНаселенныйПункт" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваУлица" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Улица=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Дом=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Корпус=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БухгалтерАдресМестаЖительстваКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
					Значение = "";
				Иначе
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Квартира=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		// **********************************************Сведения об уполномоченном представителе.
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительФИО" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					ФЛ = Результат.ФизическоеЛицо;
					Если НЕ ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительИНН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат.ФизическоеЛицо.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительТелефон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0
			 И НЕ Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
				
				ПолучитьКонтактнуюИнформациюОрганизации(
					Значение,
					Результат.ФизическоеЛицо.Ссылка,
					Перечисления.ТипыКонтактнойИнформации.Телефон,
					ДомашнийТелефонФизЛица,
					"Представление");
				
			КонецЕсли;
				
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиКод" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "КодМВД");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиВидДокумента" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УдЛичн.ВидДокумента, "Наименование");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиКемВыдан" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.КемВыдан;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиСерия" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Серия;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиНомер" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.Номер;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительУдостоверениеЛичностиДата" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат.ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = УдЛичн.ДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительства" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустойАдрес;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваXML" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = Неопределено;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат2.ЗначенияПолей, Результат2.Представление, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваJSON" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = Неопределено;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат2.ЗначенияПолей, Результат2.Вид);
					Иначе
						Значение = Неопределено;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Индекс=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваРегион" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
																
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваКод" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Регион=") = 1 Тогда
																
								Значение = Формат(РегламентированнаяОтчетностьВызовСервера.КодРегионаПоНазванию(Сред(Стр, Найти(Стр, "=") + 1)), "ЧЦ=2; ЧВН=");
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Район=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваГород" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Город=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваНаселенныйПункт" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
											
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "НаселенныйПункт=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваУлица" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Улица=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Дом=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Корпус=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УполномоченныйПредставительАдресМестаЖительстваКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат.ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат.ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
												
						Значение = "";
						
						Для НомСтр = 1 По СтрЧислоСтрок(Результат2.ЗначенияПолей) Цикл
							
							Стр = СтрПолучитьСтроку(Результат2.ЗначенияПолей, НомСтр);
							
							Если Найти(Стр, "Квартира=") = 1 Тогда
								
								Значение = Сред(Стр, Найти(Стр, "=") + 1);
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
					
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		// прочие сведения
		ИначеЕсли ИмяПоказателя = "СведенияОбИсполнителеФакс" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДолжностьОтправителя" Тогда
			
			Значение = "ГЛАВНЫЙ БУХГАЛТЕР"
			
		ИначеЕсли ИмяПоказателя = "ПрименяетсяУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ПрименяетсяУСН, Результат[0].ПрименяетсяУСН);
				Если ПромежуточноеЗначение = Истина Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;
		
		ИначеЕсли ИмяПоказателя = "ПрименяетсяУСНЗаПериод" Тогда
			
			Значение = УчетнаяПолитикаПереопределяемый.ПрименяетсяУСНЗаПериод(Организация.Ссылка, НачалоГода(ДатаЗначения), ДатаЗначения);
		
		ИначеЕсли ИмяПоказателя = "ДатаПереходаНаУСН" Тогда
			
			Значение = ПустаяДата;
			
		ИначеЕсли ИмяПоказателя = "ОбъектНалогообложенияУСН" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ТипЗнч(Результат) = Тип("Структура") Тогда
					ПрименяетсяУСНДоходыМинусРасходы = Результат.ПрименяетсяУСНДоходыМинусРасходы;
					ПрименяетсяУСН = Результат.ПрименяетсяУСН;
				Иначе
					ПрименяетсяУСНДоходыМинусРасходы = Результат[0].ПрименяетсяУСНДоходыМинусРасходы;
					ПрименяетсяУСН = Результат[0].ПрименяетсяУСН;
				КонецЕсли;
				Если ПрименяетсяУСН И ПрименяетсяУСНДоходыМинусРасходы Тогда
					Значение = 2;
				ИначеЕсли ПрименяетсяУСН И Не ПрименяетсяУСНДоходыМинусРасходы Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;	
			
		// сведения о банковском счете организации
		ИначеЕсли ИмяПоказателя = "БанковскийСчетНомерСчета" Тогда
			
			Если ДанныеБанковскогоСчета = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация.Ссылка, Константы.ВалютаРегламентированногоУчета.Получить());
				ДанныеБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			КонецЕсли;
			
			Значение = ДанныеБанковскогоСчета.НомерСчета;
			
		ИначеЕсли ИмяПоказателя = "БанковскийСчетБанк" Тогда
			
			Если ДанныеБанковскогоСчета = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация.Ссылка, Константы.ВалютаРегламентированногоУчета.Получить());
				ДанныеБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			КонецЕсли;
			
			Если ДанныеБанковскогоСчета.Банк <> Неопределено Тогда
				Значение = ДанныеБанковскогоСчета.НаименованиеБанка;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанковскийСчетКоррСчет" Тогда
			
			Если ДанныеБанковскогоСчета = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация.Ссылка, Константы.ВалютаРегламентированногоУчета.Получить());
				ДанныеБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			КонецЕсли;
			
			Значение = ДанныеБанковскогоСчета.КоррСчет;
			
		ИначеЕсли ИмяПоказателя = "БанковскийСчетБИК" Тогда
			
			Если ДанныеБанковскогоСчета = Неопределено Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация.Ссылка, Константы.ВалютаРегламентированногоУчета.Получить());
				ДанныеБанковскогоСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			КонецЕсли;
			
			Значение = ДанныеБанковскогоСчета.БИК;
			
		ИначеЕсли ИмяПоказателя = "ГоловнаяОрганизацияНаименование" Тогда

			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				УстановитьПривилегированныйРежим(Истина); // У пользователя может отсутствовать доступ к головной организации
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "ГоловнаяОрганизация.НаименованиеПолное", Значение);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГоловнаяОрганизацияКПП" Тогда

			Если НЕ ЭтоГоловнаяОрганизация(Организация) Тогда
				УстановитьПривилегированныйРежим(Истина); // У пользователя может отсутствовать доступ к головной организации
				ПолучитьЗначениеРеквизитаОрганизации(Организация, "ГоловнаяОрганизация.КПП", Значение);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "СведенияОбИсполнителеФИО" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат.ФизическоеЛицо;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					ФЛ = Результат.ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизическихЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизическоеЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СведенияОбИсполнителеДолжность" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Значение = СокрЛП(Результат.Должность);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СведенияОбИсполнителеТелефон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				ФизЛицо = Результат.ФизическоеЛицо;
				Если ЗначениеЗаполнено(ФизЛицо) Тогда
					
					ПолучитьКонтактнуюИнформациюОрганизации(
						Значение,
						ФизЛицо.Ссылка,
						Перечисления.ТипыКонтактнойИнформации.Телефон,
						ДомашнийТелефонФизЛица,
						"Представление");
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции

Функция ПолучитьСУчетомКэша(Кэш, Параметр, ФизЛицо = Неопределено)
	Перем Значение;
	Перем Ставки;
	
	Если Кэш.Свойство(Параметр, Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если Параметр = "СтавкаНалогаНаПрибыль" Тогда
		СтавкаФБ = 0;
		СтавкаРФ = 0;
		СтруктураПараметров = Новый Структура("Организация, Дата", Кэш.Организация.Ссылка, Кэш.ДатаЗначения);
		БухгалтерскийУчетПереопределяемый.ПолучитьСтавкуНалогаНаПрибыль(СтруктураПараметров, Неопределено, СтавкаФБ, СтавкаРФ, 0);
		Результат = Новый Структура("СтавкаФБ, СтавкаСубъектРФ, СтавкаМестный", СтавкаФБ * 100, СтавкаРФ * 100, 0);
	ИначеЕсли Параметр = "ЮрАдресОрганизации" ИЛИ Параметр = "ФактАдресОрганизации" Тогда
		
		ЭлементАдрес = ?(Параметр = "ЮрАдресОрганизации", Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);

		Результат = Неопределено;
		
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Кэш.Организация.Ссылка);
		
		КонтактнаяИнформацияОрганизации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов,, ЭлементАдрес, Кэш.ДатаЗначения);
		Если КонтактнаяИнформацияОрганизации.Количество() Тогда
			Результат = КонтактнаяИнформацияОрганизации[0];
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателе" Тогда
		Если ПолучитьЗначениеРеквизитаОрганизации(Кэш.Организация, "ИндивидуальныйПредприниматель", Значение) Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ФизическоеЛицо", Значение));
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОРуководителе" Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Кэш.Организация.Ссылка, Кэш.ДатаЗначения);
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("СтруктурнаяЕдиница");
		Результат.Колонки.Добавить("ОтветственноеЛицо");
		Результат.Колонки.Добавить("ФизическоеЛицо");
		Результат.Колонки.Добавить("Должность");
		НовСтр = Результат.Добавить();
		НовСтр.СтруктурнаяЕдиница = Кэш.Организация.Ссылка;
		НовСтр.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
		НовСтр.ФизическоеЛицо 	  = СтруктураОтветственных.Руководитель;
		НовСтр.Должность 		  = СтруктураОтветственных.РуководительДолжность;
	ИначеЕсли Параметр = "СведенияОБухгалтере" Тогда
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Кэш.Организация.Ссылка, Кэш.ДатаЗначения);
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("СтруктурнаяЕдиница");
		Результат.Колонки.Добавить("ОтветственноеЛицо");
		Результат.Колонки.Добавить("ФизическоеЛицо");
		Результат.Колонки.Добавить("Должность");
		НовСтр = Результат.Добавить();
		НовСтр.СтруктурнаяЕдиница = Кэш.Организация.Ссылка;
		НовСтр.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
		НовСтр.ФизическоеЛицо 	  = СтруктураОтветственных.ГлавныйБухгалтер;
		НовСтр.Должность 		  = СтруктураОтветственных.ГлавныйБухгалтерДолжность;
	ИначеЕсли Параметр = "СведенияОбИсполнителе" Тогда
		Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
			Кэш.Организация.Ссылка,
			Кэш.ДатаЗначения,
			Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
	ИначеЕсли Параметр = "СведенияОУполномоченномПредставителе" Тогда
		Результат = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
			Кэш.Организация.Ссылка,
			Кэш.ДатаЗначения,
			Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);
	ИначеЕсли Параметр = "ТелефонОрганизации" Тогда
		Если Кэш.ПБОЮЛ Тогда
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонРабочийФизическиеЛица") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонДомашнийФизическиеЛица") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
			Иначе
				ВидКонтактнойИнформации = Неопределено;
			КонецЕсли;
			
			ПолучитьКонтактнуюИнформациюОрганизации(
				Результат,
				Кэш.Организация.ИндивидуальныйПредприниматель.Ссылка,
				Перечисления.ТипыКонтактнойИнформации.Телефон,
				ВидКонтактнойИнформации,
				,
				Неопределено);
			
		Иначе
			
			ПолучитьКонтактнуюИнформациюОрганизации(
				Результат,
				Кэш.Организация.Ссылка,
				Перечисления.ТипыКонтактнойИнформации.Телефон,
				Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
				,
				Неопределено);
			
		КонецЕсли;
	ИначеЕсли Параметр = "УчетнаяПолитикаНалоговыйУчет" Тогда
		НастройкиНалоговУчетныхПолитик.УчетнаяПолитикаНалоговыйУчет(Кэш.ДатаЗначения, Кэш.Организация.Ссылка);
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОРуководителеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОБухгалтереПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеПаспортныеДанные" Тогда
		
		Результат = РегламентированнаяОтчетность.ПолучитьДокФизЛица(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдрес" 
		ИЛИ Параметр = "СведенияОРуководителеАдрес" 
		ИЛИ Параметр = "СведенияОБухгалтереАдрес" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеАдрес" Тогда
		
		ПолучитьКонтактнуюИнформациюОрганизации(
			Результат,
			ФизЛицо.Ссылка,
			Перечисления.ТипыКонтактнойИнформации.Адрес,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
			,
			Неопределено);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдресПрописки" Тогда
		
		ПолучитьКонтактнуюИнформациюОрганизации(
			Результат,
			ФизЛицо.Ссылка,
			Перечисления.ТипыКонтактнойИнформации.Адрес,
			Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
			,
			Неопределено);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеГражданство" 
		ИЛИ Параметр = "СведенияОРуководителеГражданство" 
		ИЛИ Параметр = "СведенияОБухгалтереГражданство" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеГражданство" Тогда
		
		СведенияОГражданстве = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("ФизическоеЛицо", ФизЛицо));
		
		Если СведенияОГражданстве.Количество() > 0 Тогда
			Результат = СведенияОГражданстве[0].Страна;
		Иначе
			Результат = Неопределено;
		КонецЕсли;
		
	ИначеЕсли Параметр = "ВидТарифа" Тогда
		
		ИмяРегистра = "ПрименяемыеТарифыСтраховыхВзносов";
		ИмяИзмерения = Метаданные.РегистрыСведений[ИмяРегистра].Измерения[0].Имя;
			
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить(ИмяИзмерения, Кэш.Организация.Ссылка);
			
		МенеджерЗаписи = РедактированиеПериодическихСведений.МенеджерПоследнейЗаписи(ИмяРегистра, СтруктураВедущихОбъектов);
			
		Если Не ЗначениеЗаполнено(МенеджерЗаписи.ВидТарифа) Тогда
			Результат = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим");
		Иначе
			Результат = МенеджерЗаписи.ВидТарифа;
		КонецЕсли;
		
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

Функция АдресВXML(КонтактнаяИнформация, ВидАдреса)
	
	Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса);
	
	Результат = КонтактнаяИнформация.НайтиСтроки(Данные);
	
	Если Результат.Количество() > 0 Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(Результат[0].ЗначенияПолей, Результат[0].Представление, ВидАдреса);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция АдресВJSON(КонтактнаяИнформация, ВидАдреса)
	
	Данные = Новый Структура("Тип, Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса);
	
	Результат = КонтактнаяИнформация.НайтиСтроки(Данные);
	
	Если Результат.Количество() > 0 Тогда
		Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Результат[0].ЗначенияПолей, ВидАдреса);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаОрганизации(Организация, Знач ИмяРеквизита, Значение, ПустоеЗначение = "") Экспорт
	
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".");
	
	Значение = Организация;
	
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		
		Если ТипЗнч(Значение) <> Тип("СправочникОбъект.Организации")
		 И НЕ ЗначениеЗаполнено(Значение) Тогда
			Значение = ПустоеЗначение;
			Возврат Истина;
		КонецЕсли;
		
		Если Значение.Метаданные().Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Значение = Значение[ИмяРеквизита];
		Иначе
			Значение = ПустоеЗначение;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СокрЛП(Значение);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоГоловнаяОрганизация(Организация, ВозможнаРекурсивнаяСсылка = Ложь)
	Перем Значение;
	
	ПолучитьЗначениеРеквизитаОрганизации(Организация, "ГоловнаяОрганизация", Значение, Справочники.Организации.ПустаяСсылка());
	
	Возврат НЕ ЗначениеЗаполнено(Значение) ИЛИ (ВозможнаРекурсивнаяСсылка И Значение.Ссылка = Организация.Ссылка);
	
КонецФункции

Функция ПолучитьКонтактнуюИнформациюОрганизации(Значение, ВладелецКИ, Тип, Вид, ПолеРезультата = Неопределено, ПустоеЗначение = "", ДопПараметрыКИ = Неопределено)
	
	Если ДопПараметрыКИ = Неопределено Тогда
		ДопПараметрыКИ = Новый Структура;
	КонецЕсли; 
	ПреобразоватьВФорматАдреса = Неопределено;
	ДатаЗначения = Неопределено;
	ДопПараметрыКИ.Свойство("ПреобразоватьВФорматАдреса ", ПреобразоватьВФорматАдреса);
	ДопПараметрыКИ.Свойство("ДатаЗначения", ДатаЗначения);
	
	Если ПреобразоватьВФорматАдреса = Неопределено Тогда
		ПреобразоватьВФорматАдреса = Ложь;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ВладелецКИ);
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов,, Вид, ДатаЗначения);
	
	Отбор = Новый Структура("Тип, Вид", Тип, Вид);
	Результат = КонтактнаяИнформация.НайтиСтроки(Отбор);
	
	Если Результат.Количество() > 0 Тогда
		
		Если ПолеРезультата = Неопределено Тогда
			Значение = Результат[0];
		Иначе
			Значение = Результат[0][ПолеРезультата];
		КонецЕсли;
		
		Если ПреобразоватьВФорматАдреса Тогда
			Значение = РегламентированнаяОтчетность.АдресВФормате9Запятых(Значение);
		КонецЕсли;
		
		Если ПустаяСтрока(Значение) Тогда
			Значение = ПустоеЗначение;
		КонецЕсли;
		
	Иначе
		
		Значение = ПустоеЗначение;
		
	КонецЕсли;

КонецФункции

// Возможно получить налоговый орган.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
// 
// Возвращаемое значение:
//  Булево - Возможно получить налоговый орган.
Функция ВозможноПолучитьНалоговыйОрган(Организация)
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КодНалоговогоОргана, КПП");
	НалоговыйОрган = УправлениеВнеоборотнымиАктивами.ПолучитьРегистрациюВНалоговомОрганеПоОрганизации(
		Организация, РеквизитыОрганизации.КодНалоговогоОргана, РеквизитыОрганизации.КПП);
	
	Возврат ЗначениеЗаполнено(НалоговыйОрган);
	
КонецФункции

#КонецОбласти

Процедура УведомленияОСпецрежимахНалогообложенияПриЗаписи(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ИсчисленныеСуммыНалогов Тогда
		ЕдиныйНалоговыйСчет.СинхронизироватьСостояниеУведомлений(Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти