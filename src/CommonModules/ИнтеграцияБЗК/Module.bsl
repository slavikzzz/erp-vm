#Область ПрограммныйИнтерфейс

//++ Локализация
#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		
		// Проведение
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Для Каждого Регистр Из Документ.Метаданные().Движения Цикл
				Если ЗарплатаКадры.ЭтоОбъектЗарплатноКадровойБиблиотеки(Регистр.ПолноеИмя()) Тогда
					Параметры.ПодчиненныеРегистры.Добавить(Регистр);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();

	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам БЗКР.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	#Область ВзаиморасчетыПоЗаймамСотрудникам
	
	ИмяТаблицы = "Таблица" + "ВзаиморасчетыПоЗаймамСотрудникам";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Регистратор = Движения.ВзаиморасчетыПоЗаймамСотрудникам.Отбор.Регистратор.Значение;
		
		Для Каждого Строка Из ТаблицыДляДвижений[ИмяТаблицы] Цикл
			Если Строка.ЭтоПредоставлениеЗайма Тогда
				ЗаймыСотрудникам.ЗарегистрироватьПредоставлениеЗайма(Движения,
					Строка.ДоговорЗайма, Строка.СуммаЗайма, Строка.Период, Строка.Организация, Строка.ФизическоеЛицо,
					Отказ);
			Иначе
				ЗаймыСотрудникам.ЗарегистрироватьПогашениеЗайма(Движения,
					Строка.ДоговорЗайма, Строка.СуммаЗайма, Строка.Период, Строка.Организация, Строка.ФизическоеЛицо,
					Регистратор, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОплатаВедомостейНаВыплатуЗарплаты
	
	ИмяТаблицы = "Таблица" + "ОплатаВедомостейНаВыплатуЗарплаты";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		ПлатежныйДокумент = Новый Структура("Ссылка, Движения",
			Движения.ОплатаВедомостейНаВыплатуЗарплаты.Отбор.Регистратор.Значение, Движения);
		
		ДатаПлатежа = ТаблицыДляДвижений[ИмяТаблицы][0].ДатаПлатежа;
		Организация = ТаблицыДляДвижений[ИмяТаблицы][0].Организация;
		
		МассивВедомостей = ТаблицыДляДвижений[ИмяТаблицы].ВыгрузитьКолонку("Ведомость");
		МассивФизическихЛиц = ТаблицыДляДвижений[ИмяТаблицы].ВыгрузитьКолонку("ФизическоеЛицо");
		
		МассивВедомостей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВедомостей);
		МассивФизическихЛиц = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивФизическихЛиц);
		
		ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, МассивВедомостей,
			МассивФизическихЛиц, ДатаПлатежа, Отказ);
		
		ЗарегистрироватьОплатуВедомостейПрочихДоходовВУчетеНДФЛ(ПлатежныйДокумент, Организация, МассивВедомостей,
			МассивФизическихЛиц, ДатаПлатежа, Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	
	ИмяТаблицы = "Таблица" + "РасчетыНалоговыхАгентовСБюджетомПоНДФЛ";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		ОчиститьДвиженияПередОтражениемУплатыНДФЛ(Движения);
		
		ТаблицаПеречислениеНДФЛ = ТаблицыДляДвижений[ИмяТаблицы];
		
		Отбор = Новый Структура("РегистрацияВНалоговомОргане",
			Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		Для Каждого СтрокаТаблицы Из ТаблицаПеречислениеНДФЛ.НайтиСтроки(Отбор) Цикл
			СтрокаТаблицы.РегистрацияВНалоговомОргане =
				ЗарплатаКадры.РегистрацияВНалоговомОргане(СтрокаТаблицы.Организация, СтрокаТаблицы.Период);
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПеречислениеНДФЛ Цикл
			ЗаполнитьМесяцНалоговогоПериода(СтрокаТаблицы.МесяцНалоговогоПериода,
				СтрокаТаблицы.ПоказательОснования, СтрокаТаблицы.ПоказательПериода);
		КонецЦикла;
		
		ТаблицаПеречислениеНДФЛ.Свернуть("Ссылка, Период, МесяцНалоговогоПериода,
			|Организация, ПлатежноеПоручениеНомер, ПлатежноеПоручениеДата, ТипНалога,
			|РегистрацияВНалоговомОргане, ПоказательОснования, ПоказательПериода",
			"Сумма");
		
		ТаблицаФизическиеЛица = Неопределено;
		ТаблицыДляДвижений.Свойство(ИмяТаблицы + "ФизическиеЛица", ТаблицаФизическиеЛица);
		
		ПоляГруппировки = "Ссылка, Период, Организация, ТипНалога, РегистрацияВНалоговомОргане";
		ПромежуточнаяТаблица = ТаблицаПеречислениеНДФЛ.Скопировать(, ПоляГруппировки);
		ПромежуточнаяТаблица.Свернуть(ПоляГруппировки);
		
		Отбор = Новый Структура(ПоляГруппировки);
		
		Для Каждого СтрокаТаблицы Из ПромежуточнаяТаблица Цикл
			
			ФизическиеЛица = Неопределено;
			Если ЗначениеЗаполнено(ТаблицаФизическиеЛица) Тогда
				ПромежуточнаяТаблицаФизическиеЛица = ТаблицаФизическиеЛица.Скопировать(
					Новый Структура("РегистрацияВНалоговомОргане", СтрокаТаблицы.РегистрацияВНалоговомОргане));
				Если ЗначениеЗаполнено(ПромежуточнаяТаблицаФизическиеЛица) Тогда
					ФизическиеЛица = ПромежуточнаяТаблицаФизическиеЛица.ВыгрузитьКолонку("ФизическоеЛицо");
				КонецЕсли;
			КонецЕсли;
			
			НДФЛСПревышения =
				СтрокаТаблицы.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			ПеречисленныйНалог = ТаблицаПеречислениеНДФЛ.Скопировать(Отбор);
			УчетНДФЛ.СформироватьПеречисленныйНалог(
				СтрокаТаблицы.Ссылка, Движения, Отказ, СтрокаТаблицы.Организация, СтрокаТаблицы.Период,
				ПеречисленныйНалог, ФизическиеЛица, СтрокаТаблицы.РегистрацияВНалоговомОргане, Истина,
				?(НДФЛСПревышения, Перечисления.НДФЛСтавки.Ставка15, Неопределено), Ложь);
			
			Если НДФЛСПревышения Тогда
				ПеречисленныйНалог.Колонки.Сумма.Имя = "СуммаСПревышения";
			КонецЕсли;
			УчетНДФЛ.СформироватьНДФЛПеречисленный(Движения, Отказ, ПеречисленныйНалог);
		
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетыСФондамиПоСтраховымВзносам
	
	ИмяТаблицы = "Таблица" + "РасчетыСФондамиПоСтраховымВзносам";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		ТаблицаРасчетыСФондами = ТаблицыДляДвижений[ИмяТаблицы];
		Реквизиты = ТаблицаРасчетыСФондами[0];
		
		УчетСтраховыхВзносов.СформироватьУплатуВзносовВФонд(
			Движения, Отказ, Реквизиты.Организация, ТаблицаРасчетыСФондами);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НевыплатыВедомостей
	
	ИмяТаблицы = "Таблица" + "ОплатаВедомостей";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		МассивФизЛиц = ТаблицыДляДвижений.ТаблицаФизическихЛиц.ВыгрузитьКолонку("ФизическоеЛицо");
		ДокументыВыдачи = Новый Массив;
		
		КонтрольСоответствияНачисленийИВыплат.Отключить(Движения);
		
		Для Каждого СтрокаТаблицы Из ТаблицыДляДвижений[ИмяТаблицы] Цикл
			Если СтрокаТаблицы.ХозяйственнаяОперацияВозврата = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС Тогда
				ВзаиморасчетыССотрудниками.ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, СтрокаТаблицы.Ведомость, МассивФизЛиц);
			КонецЕсли;
			Если ДокументыВыдачи.Найти(СтрокаТаблицы.ДокументВыдачи) = Неопределено Тогда
				ДокументыВыдачи.Добавить(СтрокаТаблицы.ДокументВыдачи);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДокументВыдачи Из ДокументыВыдачи Цикл
			ВзаиморасчетыССотрудниками.ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, ДокументВыдачи, МассивФизЛиц);
			УчетНДФЛ.ЗарегистрироватьНевыплатуДокументом(Движения, Отказ, ДокументВыдачи, МассивФизЛиц);
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОценочныеОбязательстваПоСотрудникам
	
	ИмяТаблицы = "Таблица" + "ОценочныеОбязательстваПоСотрудникам";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицы)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицы]) Тогда
		
		Реквизиты = ТаблицыДляДвижений.ТаблицаПараметрыРезервовОтпусков[0];
		ТаблицаВыплатаЗаСчетРезервов = ТаблицыДляДвижений[ИмяТаблицы];
		
		МодульРезервОтпусков = ОбщегоНазначения.ОбщийМодуль("РезервОтпусков");
		НастройкиРезервовОтпусков = МодульРезервОтпусков.НастройкиРезервовОтпусков(Реквизиты.Организация, Реквизиты.ПериодРегистрации);
		Если НастройкиРезервовОтпусков.ФормироватьРезервБУ Тогда
			МодульРезервОтпусков.СформироватьДвиженияВыплатаОтпусковЗаСчетРезерва(Движения, Отказ,
				Реквизиты.Организация, Реквизиты.ПериодРегистрации, ТаблицаВыплатаЗаСчетРезервов);
			ДвиженияВыплатаЗаСчетРезерва = Движения.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
			МодульРезервОтпусков.СформироватьДвиженияСписаниеРезерваОтпусков(Движения, Отказ,
				Реквизиты.Организация, Реквизиты.ПериодРегистрации, ДвиженияВыплатаЗаСчетРезерва);
		КонецЕсли;
		
		МодульРезервыПоОплатеТруда = ОбщегоНазначения.ОбщийМодуль("РезервыПоОплатеТруда");
		Если МодульРезервыПоОплатеТруда.ФормируютсяРезервыВОрганизации(Реквизиты.Организация, Реквизиты.ПериодРегистрации)
			Или МодульРезервыПоОплатеТруда.ФормируютсяРезервыВОрганизации(Реквизиты.Организация, ДобавитьМесяц(Реквизиты.ПериодРегистрации, -12)) Тогда
			МодульРезервыПоОплатеТруда.СформироватьДвиженияВыплатаЗаСчетРезерва(Движения, Отказ,
				Реквизиты.Организация, Реквизиты.ПериодРегистрации, ТаблицаВыплатаЗаСчетРезервов);
			ДвиженияВыплатаЗаСчетРезерва = Движения.ОценочныеОбязательстваПоСотрудникам.Выгрузить();
			МодульРезервыПоОплатеТруда.СформироватьДвиженияСписаниеРезерва(Движения, Отказ,
				Реквизиты.Организация, Реквизиты.ПериодРегистрации, ДвиженияВыплатаЗаСчетРезерва);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область НачислениеДивидендов
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаДивиденды")
		И ЗначениеЗаполнено(ТаблицыДляДвижений.ТаблицаДивиденды) Тогда
		
		Реквизиты = ТаблицыДляДвижений.ТаблицаПараметрыНачисленияДивидендов[0];
		
		ТаблицаДивиденды = ТаблицыДляДвижений.ТаблицаДивиденды;
		ТаблицаНачисления = ТаблицыДляДвижений.ТаблицаНачисления;
		
		УчетНДФЛРасширенный.СформироватьДоходыИНДФЛСДивидендов(Реквизиты.Ссылка, Движения, Отказ, Реквизиты.Организация,
			Реквизиты.ДатаВыплаты, ТаблицаДивиденды, Реквизиты.ВключатьВДекларациюПоНалогуНаПрибыль, Истина, Реквизиты.ДатаВыплаты);
		
		УчетНачисленнойЗарплаты.ПодготовитьДанныеНДФЛКРегистрации(ТаблицаДивиденды, Реквизиты.Организация, Реквизиты.ДатаВыплаты);
		
		НДФЛПоСотрудникам = ТаблицаДивиденды.СкопироватьКолонки();
		Для Каждого СтрокаТЗ Из ТаблицаДивиденды Цикл
			НалогНаПрибыльДляДивидендов = СтрокаТЗ.НалогНаПрибыльДляДивидендов;
			Если НалогНаПрибыльДляДивидендов * СтрокаТЗ.СуммаСПревышения > 0 Тогда 
				Если СтрокаТЗ.СуммаСПревышения > 0 Тогда
					ОстатокСуммыКЗачету = Макс(НалогНаПрибыльДляДивидендов - СтрокаТЗ.СуммаСПревышения, 0);
					СтрокаТЗ.СуммаСПревышения = Макс(СтрокаТЗ.СуммаСПревышения - НалогНаПрибыльДляДивидендов, 0);
				Иначе
					ОстатокСуммыКЗачету = Мин(НалогНаПрибыльДляДивидендов - СтрокаТЗ.СуммаСПревышения, 0);
					СтрокаТЗ.СуммаСПревышения = Мин(СтрокаТЗ.СуммаСПревышения - НалогНаПрибыльДляДивидендов, 0);
				КонецЕсли;
				НалогНаПрибыльДляДивидендов = ОстатокСуммыКЗачету;
			КонецЕсли;
			Если НалогНаПрибыльДляДивидендов * СтрокаТЗ.Сумма > 0 Тогда
				Если СтрокаТЗ.Сумма > 0 Тогда
					СтрокаТЗ.Сумма = Макс(СтрокаТЗ.Сумма - НалогНаПрибыльДляДивидендов, 0);
				Иначе
					СтрокаТЗ.Сумма = Мин(СтрокаТЗ.Сумма - НалогНаПрибыльДляДивидендов, 0);
				КонецЕсли;
			КонецЕсли;
			Если СтрокаТЗ.Сумма <> 0 Тогда
				НоваяСтрока = НДФЛПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			КонецЕсли;
			Если СтрокаТЗ.СуммаСПревышения <> 0 Тогда
				НоваяСтрока = НДФЛПоСотрудникам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
				НоваяСтрока.Сумма = СтрокаТЗ.СуммаСПревышения;
				НоваяСтрока.ВидУдержания = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения;
			КонецЕсли;
		КонецЦикла;
		УчетНачисленнойЗарплатыРасширенный.ЗарегистрироватьНачисленияУдержанияПоКонтрагентамАкционерам(
			Движения, Отказ, Реквизиты.Организация, Реквизиты.ДатаВыплаты, ТаблицаНачисления, , НДФЛПоСотрудникам);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников
	
	Если ТаблицыДляДвижений.Свойство("ТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников") Тогда
		
		Реквизиты = ТаблицыДляДвижений.ТаблицаПараметрыСдельногоЗаработка[0];
		
		РасчетЗарплатыРасширенный.ЗарегистрироватьСдельныйЗаработок(Движения, Реквизиты.Организация,
			ТаблицыДляДвижений.ТаблицаЗначенияОперативныхПоказателейРасчетаЗарплатыСотрудников);
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ДенежныеСредства

// Заполняет итоговую сумму незачисленных платежей по подтверждению банка.
//
// Параметры:
//   Подтверждение - ДокументСсылка - ссылка на подтверждение банка.
//   Сумма - Число - заполняемая сумма незачисленных платежей.
//
Процедура ЗаполнитьСуммуНезачисленныхПлатежейПоПодтверждениюБанка(Подтверждение, Сумма) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Подтверждение.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Подтверждение
	|ГДЕ
	|	Подтверждение.Ссылка = &Ссылка
	|	И Подтверждение.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)";
	
	Запрос.УстановитьПараметр("Ссылка", Подтверждение);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сумма = Выборка.Сумма;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Процедура выполняет регистрацию возмещения из ФСС расходов на пособия.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, содержащий таблицу ДокументыКОтражению.
//	Объект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - Документ, если регистрация выполняется при проведении документа.
//	Отказ - Булево - Признак отказа от записи движений.
//
Процедура СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(МенеджерВременныхТаблиц = Неопределено, Объект = Неопределено, Отказ = Ложь) Экспорт
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК Т
		|ГДЕ
		|	Т.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС) КАК СчетУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС) КАК ВидОперации
	|ПОМЕСТИТЬ ВтСчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ФСС_НСиПЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФССНесчастныеСлучаи)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСчетовУчета.Ссылка    КАК Ссылка,
	|	НастройкиСчетовУчета.СчетУчета КАК СчетУчета,
	|	НастройкиСчетовУчета.Субконто1 КАК Субконто1,
	|	НастройкиСчетовУчета.Субконто2 КАК Субконто2,
	|	НастройкиСчетовУчета.Субконто3 КАК Субконто3,
	|	ВтСчета.ВидОперации            КАК ВидОперации
	|ПОМЕСТИТЬ ВтНастройкиСчетовУчета
	|ИЗ
	|	ДокументыКОтражению КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО Документы.Ссылка = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчета
	|		ПО ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.НастройкаСчетовУчета = НастройкиСчетовУчета.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСчета КАК ВтСчета
	|		ПО НастройкиСчетовУчета.СчетУчета = ВтСчета.СчетУчета
	|СГРУППИРОВАТЬ ПО
	|	НастройкиСчетовУчета.Ссылка,
	|	НастройкиСчетовУчета.СчетУчета,
	|	НастройкиСчетовУчета.Субконто1,
	|	НастройкиСчетовУчета.Субконто2,
	|	НастройкиСчетовУчета.Субконто3,
	|	ВтСчета.ВидОперации
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	НастройкиСчетовУчета.Субконто1 КАК ВидПлатежа,
	|	НастройкиСчетовУчета.Субконто2 КАК НалоговыйОрган,
	|	НастройкиСчетовУчета.ВидОперации КАК ВидОперации,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ПоступлениеБезналичныхДенежныхСредств.Номер,
	|	ПоступлениеБезналичныхДенежныхСредств.ДатаПроведенияБанком КАК Дата,
	|	ПоступлениеБезналичныхДенежныхСредств.Организация,
	|	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаОтражения
	|ИЗ
	|	ДокументыКОтражению КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО Документы.Ссылка = ПоступлениеБезналичныхДенежныхСредств.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО Документы.Ссылка = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтНастройкиСчетовУчета КАК НастройкиСчетовУчета
	|		ПО ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.НастройкаСчетовУчета = НастройкиСчетовУчета.Ссылка
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств)
	|	И ПоступлениеБезналичныхДенежныхСредств.ПроведеноБанком
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтражения.Ссылка КАК Ссылка,
	|	ТаблицаОтражения.Дата КАК Период,
	|	ТаблицаОтражения.Организация КАК Организация,
	|	СУММА(ТаблицаОтражения.Сумма) КАК Сумма,
	|	ИСТИНА КАК ЭтоСтраховыеВзносы,
	|	ТаблицаОтражения.ВидОперации КАК ВидОбязательногоСтрахованияСотрудников
	|ИЗ
	|	ТаблицаОтражения КАК ТаблицаОтражения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтражения.Ссылка,
	|	ТаблицаОтражения.Дата,
	|	ТаблицаОтражения.Организация,
	|	ТаблицаОтражения.ВидОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	0 КАК Сумма,
	|	ЛОЖЬ КАК ЭтоСтраховыеВзносы,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ФСС) КАК ВидОбязательногоСтрахованияСотрудников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтНастройкиСчетовУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОтражения";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаРасчетыСФондом = Результат[3].Выбрать();
	
	РасчетыСФондом = Результат[4].Выгрузить();
	
	Пока ВыборкаРасчетыСФондом.Следующий() Цикл
		
		Если ВыборкаРасчетыСФондом.Период >= ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаПередачиФССВыплатыПособий(ВыборкаРасчетыСФондом.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект = Неопределено Тогда
			ДокОбъект = ВыборкаРасчетыСФондом.Ссылка.ПолучитьОбъект();
		Иначе
			ДокОбъект = Объект;
		КонецЕсли;
		
		НоваяСтрока = РасчетыСФондом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасчетыСФондом);
		
		УчетСтраховыхВзносов.СформироватьВозмещениеРасходовПоСоциальномуСтрахованию(
			ДокОбъект.Движения,
			Отказ,
			ВыборкаРасчетыСФондом.Организация,
			РасчетыСФондом,
			Истина);
		
		РасчетыСФондом.Очистить();
		
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Проверяет заполнение поступления ДС по возврату неперечисленной зарплаты.
// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств - проверяемый документ.
// 	МассивНепроверяемыхРеквизитов - Массив - массив непроверяемых реквизитов обработки проверки заполнения.
// 	Отказ - Булево - признак отказа.
//
Процедура ПроверитьЗаполнениеПоВозвратуНеперечисленнойЗарплаты(Объект, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат;
	КонецЕсли;
	
	СуммаВозврата = 0;
	
	// Если подтверждение заполнено, то сумма возврата должна соответствовать сумме зачисленных средств по подтверждению.
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту
		И ЗначениеЗаполнено(Объект.ПодтверждениеЗачисленияЗарплаты) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СУММА(ДД.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК ДД
		|ГДЕ
		|	ДД.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
		|	И ДД.Ссылка = &Ссылка
		|	И ДД.Ссылка.Проведен");
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ПодтверждениеЗачисленияЗарплаты);
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СуммаВозврата = Результат.Сумма;
		КонецЕсли;
		Текст = НСтр("ru = 'Сумма возврата не соответствует подтверждению зачисления зарплаты. Возврат должен осуществляться в соответствии с подтверждением.';
					|en = 'Refund amount does not match the salary crediting confirmation. Refund should be made according to the confirmation.'");
		
	// Если подтверждение не заполнено, а заполнен документ выдачи, то возврат должен быть на сумму подтвержденного возврата.
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС
		И ЗначениеЗаполнено(Объект.ДокументВыдачи) Тогда
		
		СуммаВозврата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументВыдачи, "СуммаДокумента");
		Текст = НСтр("ru = 'Сумма возврата не соответствует платежному документу. Возврат должен осуществляться в точном соответствии с исходящим платежным поручением.';
					|en = 'Refund amount does not match the payment document. Refund should be made in full correspondence with an outgoing payment order.'");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.СуммаДокумента <> СуммаВозврата Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Объект,
			"СуммаДокумента",
			,
			Отказ);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Возвращает дату, соответствующую налоговому периоду, за который произведен платеж.
//
// Параметры:
//    МесяцНалоговогоПериода - Дата - заполняемая дата.
//    ПоказательОснования - Строка - Условное обозначение основания налогового платежа
//    ПоказательПериода - Строка - Условное обозначение периода, за который перечисляется налог
Процедура ЗаполнитьМесяцНалоговогоПериода(МесяцНалоговогоПериода, ПоказательОснования, ПоказательПериода) Экспорт
	МесяцНалоговогоПериода = Дата(1,1,1);
	//++ Локализация
	ПозицияПериода = СтрНайти(СокрЛП(ПоказательПериода),".");
	ПозицияГода = СтрНайти(Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1), ".") + ПозицияПериода;
	
	ПериодичностьНалога = Лев(СокрЛП(ПоказательПериода), ПозицияПериода - 1);
	СтрокаНомерПериода = Сред(СокрЛП(ПоказательПериода), ПозицияПериода + 1, ПозицияГода - ПозицияПериода - 1);
	СтрокаГодПериода = Сред(СокрЛП(ПоказательПериода), ПозицияГода + 1);
	
	Если СтрНайти("ТП, ЗД", ПоказательОснования) > 0 Тогда
		Если СтрДлина(ПериодичностьНалога) = 2
			И СтрДлина(СтрокаНомерПериода) = 2 
			И СтрДлина(СтрокаГодПериода) = 4
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПериодичностьНалога)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаНомерПериода)
			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаГодПериода) Тогда
				МесяцНалоговогоПериода = Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода), Число(ПериодичностьНалога));
		КонецЕсли;
	КонецЕсли;
	
	Если ПериодичностьНалога = "ГД" Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата(Число(СтрокаГодПериода), 1, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "ПЛ" Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода)*6, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "КВ" Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода)*3, 1));
	КонецЕсли;
	
	Если ПериодичностьНалога = "МС" Тогда
		МесяцНалоговогоПериода = НачалоМесяца(Дата(Число(СтрокаГодПериода), Число(СтрокаНомерПериода), 1));
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Функция данные ведомостей для заполнения платежных документов.
//
// Параметры:
//   ПараметрыОтбора - Структура - структура с параметрами отбора ведомостей.
//   МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц.
//
// Возвращаемое значение:
//   Структура   - структура со значениями РеквизитыШапки и МассивОшибок.
//
Функция ДанныеВедомостей(ПараметрыОтбора, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Результат = Новый Структура("РеквизитыШапки, МассивОшибок", Неопределено, Новый Массив);
	//++ Локализация
	ЭтоПеречислениеВБюджет = ПараметрыОтбора.Свойство("ХозяйственнаяОперация")
		И ПараметрыОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ДанныеВедомостей.ФормаОплаты
	|ПОМЕСТИТЬ ВТВедомостиПодробно
	|ИЗ ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ДанныеВедомостей.ФормаОплаты
	|ИЗ ВТДанныеВедомостейНалоги КАК ДанныеВедомостей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеВедомостей.Организация)         КАК Организация,
	|	МАКСИМУМ(ДанныеВедомостей.ВидДохода)           КАК ВидДохода,
	|	МАКСИМУМ(ДанныеВедомостей.ЗарплатныйПроект)    КАК ЗарплатныйПроект,
	|	МАКСИМУМ(ДанныеВедомостей.Банк)                КАК Банк,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ФормаОплаты) КАК ФормаОплаты,
	|	МАКСИМУМ(ДанныеВедомостей.Раздатчик)           КАК Раздатчик,
	|	МАКСИМУМ(ДанныеВедомостей.Касса)               КАК Касса,
	|	МАКСИМУМ(ДанныеВедомостей.ПериодРегистрации)   КАК ПериодРегистрации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Организация)      КАК КоличествоОрганизаций,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.ВидДохода)        КАК КоличествоВидовДоходов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.ЗарплатныйПроект) КАК КоличествоЗарплатныхПроектов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостей.Банк)             КАК КоличествоБанков,
	|	МАКСИМУМ(ДанныеВедомостейПодробно.ХозяйственнаяОперация)             КАК ХозяйственнаяОперация,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеВедомостейПодробно.ХозяйственнаяОперация) КАК КоличествоХозяйственныхОпераций,
	|	МИНИМУМ(ДанныеВедомостей.Проведен) КАК Проведен
	|ИЗ ВТВедомости КАК ДанныеВедомостей
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомостиПодробно КАК ДанныеВедомостейПодробно
	|		ПО ДанныеВедомостей.Ведомость = ДанныеВедомостейПодробно.Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедомостиПодробно";
	
	РеквизитыШапки = Запрос.Выполнить().Выбрать();
	Если Не РеквизитыШапки.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПараметрыОтбора.Свойство("Организация") И НЕ ПараметрыОтбора.Организация = РеквизитыШапки.Организация Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Организация"" выбранных ведомостей не соответствует критериям отбора.';
							|en = 'The ""Company"" field of the selected paysheets does not match the filter criteria.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаВедомость", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Результат.РеквизитыШапки = РеквизитыШапки;
	
	Если Не РеквизитыШапки.Проведен Тогда
		ТекстОшибки = НСтр("ru = 'Ввод документа на основании не проведенных ведомостей невозможен.';
							|en = 'Cannot enter the document on the basis of non-processed paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаВедомость", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоОрганизаций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Различаются организации. Ввод одного документа на основании выбранных ведомостей невозможен.';
							|en = 'Companies are different. Cannot enter one document on basis of selected paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если ЭтоПеречислениеВБюджет Тогда
		// Прочие проверки при перечислении НДФЛ не требуются
		Возврат Результат;
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоХозяйственныхОпераций > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Различается форма оплаты. Ввод одного документа на основании выбранных ведомостей невозможен.';
							|en = 'Payment form is different. Cannot enter one document on basis of selected paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоХозяйственныхОпераций = 1 И РеквизитыШапки.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная
		И РеквизитыШапки.КоличествоВидовДоходов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Различается поле ""Вид дохода"". Ввод одного документа на основании выбранных ведомостей невозможен.';
							|en = 'The field ""Income kind"" is different. Cannot enter one document on basis of selected paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаФормаОплаты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоЗарплатныхПроектов > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Различается поле ""Зарплатный проект"". Ввод одного документа на основании выбранных ведомостей невозможен.';
							|en = 'The field ""Salary project"" is different. Cannot enter one document on basis of selected paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаЗарплатныеПроекты", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	
	Если РеквизитыШапки.КоличествоБанков > 1 Тогда
		ТекстОшибки = НСтр("ru = 'Различается поле ""Банк"". Ввод одного документа на основании выбранных ведомостей невозможен.';
							|en = 'The field ""Bank"" is different. Cannot enter one document on basis of selected paysheets.'");
		СтруктураОшибки = Новый Структура("Идентификатор, Текст", "ОшибкаБанки", ТекстОшибки);
		Результат.МассивОшибок.Добавить(СтруктураОшибки);
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

// Процедура формирует временную таблицу физических лиц по ведомостям различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ДанныеОбОплатеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	МассивВедомостей = Неопределено;
	Параметры.Свойство("МассивВедомостей", МассивВедомостей);
	
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);
	
	Работник = Неопределено;
	Параметры.Свойство("Работник", Работник);
	Запрос.УстановитьПараметр("Работник", Работник);
	Запрос.УстановитьПараметр("БезОтбораПоРаботнику", Не ЗначениеЗаполнено(Работник));
	
	ЛицевойСчет = Неопределено;
	Параметры.Свойство("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("БезОтбораПоЛицевомуСчету", Не ЗначениеЗаполнено(ЛицевойСчет));
	
	Если Параметры.Свойство("МассивОпераций") Тогда
		Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Параметры.ХозяйственнаяОперация);
		Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
	КонецЕсли;
	
	ИсключаемаяЗаявка = Неопределено;
	Параметры.Свойство("Заявка", ИсключаемаяЗаявка);
	Запрос.УстановитьПараметр("ИсключаемаяЗаявка", ИсключаемаяЗаявка);
	Запрос.УстановитьПараметр("БезИсключаемойЗаявки", Не ЗначениеЗаполнено(ИсключаемаяЗаявка));
	
	ИсключаемыйДокументОплаты = Неопределено;
	Параметры.Свойство("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
	Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключаемыйДокументОплаты);
	Запрос.УстановитьПараметр("БезИсключаемогоДокументаОплаты", Не ЗначениеЗаполнено(ИсключаемыйДокументОплаты));
	
	Если Параметры.Свойство("ИсключатьОплаченные") Тогда
		Запрос.УстановитьПараметр("ИсключатьОплаченные", Истина);
	Иначе
		Запрос.УстановитьПараметр("ИсключатьОплаченные", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтображатьДепонированные") Тогда
		Запрос.УстановитьПараметр("ОтображатьДепонированные", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтображатьДепонированные", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ИсключатьВключенныеВЗаявки") Тогда
		Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ИсключатьВключенныеВЗаявки", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ведомость,
	|	ДанныеДокумента.СуммаПоДокументу КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК ДанныеДокумента
	|ГДЕ
	|	(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|	ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций)
	|			ИЛИ &БезОтбораПоОперациям)
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И (&БезОтбораПоВедомостям
	|			ИЛИ ДанныеДокумента.Ссылка В (&МассивВедомостей))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Работники.Ссылка КАК Ведомость,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Работники.КВыплате КАК Сумма,
	|	Работники.НомерЛицевогоСчета КАК ЛицевойСчет
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.БанковскийСчет
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.Сотрудник.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.НомерЛицевогоСчета
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	""""
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	Работники.ФизическоеЛицо,
	|	Работники.КВыплате,
	|	Работники.БанковскийСчет
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК Работники
	|ГДЕ
	|	Работники.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Работники.ФизическоеЛицо = &Работник)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Оплата.Ведомость КАК Ведомость,
	|	Оплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК Оплачена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Депоненты.Ссылка, ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ДепонированиеЗарплаты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Депонирована,
	|	Оплата.Регистратор КАК ДокументОплаты
	|ПОМЕСТИТЬ ВТСостоянияВедомостей
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДепонированиеЗарплаты.Депоненты КАК Депоненты
	|		ПО Оплата.Регистратор = Депоненты.Ссылка
	|			И Оплата.Ведомость = Депоненты.Ссылка.Ведомость
	|			И Оплата.ФизическоеЛицо = Депоненты.ФизическоеЛицо
	|ГДЕ
	|	Оплата.Ведомость В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоРаботнику
	|			ИЛИ Оплата.ФизическоеЛицо = &Работник)
	|	И Оплата.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРаботники.Ведомость,
	|	ВТРаботники.ФизическоеЛицо,
	|	СУММА(ВТРаботники.Сумма) КАК Сумма,
	|	ВТРаботники.ЛицевойСчет,
	|	ВТВедомости.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ) КАК Оплачена,
	|	ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) КАК Заявка
	|ПОМЕСТИТЬ ДанныеВедомостейНаОплату
	|ИЗ
	|	ВТРаботники КАК ВТРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВедомости КАК ВТВедомости
	|		ПО ВТРаботники.Ведомость = ВТВедомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ВедомостиЗаявки
	|		ПО ВТРаботники.Ведомость = ВедомостиЗаявки.Ведомость
	|			И (&БезОтбораПоОперациям
	|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперация В (&МассивОпераций)
	|				ИЛИ ВедомостиЗаявки.Ссылка.ХозяйственнаяОперацияПоЗарплате В (&МассивОпераций))
	|			И (ВедомостиЗаявки.Ссылка.Проведен)
	|			И (&БезИсключаемойЗаявки
	|				ИЛИ ВедомостиЗаявки.Ссылка <> &ИсключаемаяЗаявка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияВедомостей КАК ВТСостоянияВедомостей
	|		ПО ВТРаботники.Ведомость = ВТСостоянияВедомостей.Ведомость
	|			И ВТРаботники.ФизическоеЛицо = ВТСостоянияВедомостей.ФизическоеЛицо
	|ГДЕ
	|	(НЕ &ИсключатьОплаченные
	|			ИЛИ НЕ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
	|			ИЛИ ЕСТЬNULL(ВТСостоянияВедомостей.Оплачена, ЛОЖЬ)
	|				И НЕ &БезИсключаемогоДокументаОплаты
	|				И ВТСостоянияВедомостей.ДокументОплаты = &ИсключаемыйДокументОплаты
	|			ИЛИ &ОтображатьДепонированные
	|				И ЕСТЬNULL(ВТСостоянияВедомостей.Депонирована, ЛОЖЬ))
	|	И (НЕ &ИсключатьВключенныеВЗаявки
	|			ИЛИ ЕСТЬNULL(ВедомостиЗаявки.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка))
	|	И (&БезОтбораПоЛицевомуСчету
	|			ИЛИ ВТРаботники.ЛицевойСчет = &ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРаботники.Ведомость,
	|	ВТРаботники.ФизическоеЛицо,
	|	ВТРаботники.ЛицевойСчет,
	|	ВТВедомости.СуммаПоДокументу,
	|	ВТСостоянияВедомостей.Оплачена,
	|	ВедомостиЗаявки.Ссылка
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВедомости
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРаботники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияВедомостей
	|";
	
	Запрос.Выполнить();
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область УчетТрудозатрат

// Преобразовывает переданный массив физических лиц в строку.
// Используется для представления краткого состава документов.
//
// Параметры:
//	ФизическиеЛица - Массив - массив элементов типа СправочникСсылка.ФизическиеЛица,
//	ДатаАктуальности - Дата - дата для получения фамилии, имени и отчества.
//	Состав - Строка - строка вида <Фамилия И.О., Фамилия И.О...>.
//
Процедура ЗаполнитьКраткийСоставФизЛиц(ФизическиеЛица, ДатаАктуальности, Состав) Экспорт
	//++ Локализация
	Состав = ЗарплатаКадры.КраткийСоставФизЛиц(ФизическиеЛица, ДатаАктуальности);
	//-- Локализация
КонецПроцедуры

// Заполняет кадровые данные: тарифную ставку, отработанное время в переданной коллекции.
//
// Параметры:
//  Объект - ДокументОбъект.ВыработкаСотрудников, ДанныеФормыСтруктура - Заполняемый документ.
//  ИмяТЧ - Строка - имя табличной части, в которой требуется заполнить поля.
//  ЗаполняемыеПоля - Структура - структура, содержащая перечень полей к заполнению (см. ИнтеграцияБЗК.ПоляКадровыхДанных).
//  МассивСтрок - Массив - строки, в которых выполняется заполнение (если Неопределено, то поля заполняются во всех
//                         строках табличной части).
//
Процедура ЗаполнитьКадровыеДанныеСотрудников(Объект, ИмяТЧ, ЗаполняемыеПоля, МассивСтрок = Неопределено) Экспорт
	//++ Локализация
	Если Объект.Работники.Количество() = 0
		Или Не (ЗаполняемыеПоля.Свойство("ТарифнаяСтавка") И ЗаполняемыеПоля.ТарифнаяСтавка
			Или ЗаполняемыеПоля.Свойство("ОтработаноЧасов") И ЗаполняемыеПоля.ОтработаноЧасов) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСтрок = Неопределено Тогда
		Коллекция = Объект[ИмяТЧ];
		ФизическиеЛица = Коллекция.Выгрузить(,"Работник").ВыгрузитьКолонку("Работник");
	Иначе
		Коллекция = МассивСтрок;
		ФизическиеЛица = Объект[ИмяТЧ].Выгрузить(МассивСтрок,"Работник").ВыгрузитьКолонку("Работник");
	КонецЕсли;
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Объект.Организация;
	ПараметрыЗапроса.НачалоПериода = НачалоМесяца(Объект.Дата);
	ПараметрыЗапроса.ОкончаниеПериода = КонецМесяца(Объект.Дата);
	ПараметрыЗапроса.КадровыеДанные = "РазрядКатегория,СовокупнаяТарифнаяСтавка,ВидСовокупнойТарифнойСтавки";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	ОтработанноеВремяСотрудников = Новый Соответствие;
	
	// получение данных об отработанном времени
	Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
		И ЗаполняемыеПоля.ОтработаноЧасов
		И ЗначениеЗаполнено(Объект.НачалоПериода)
		И ЗначениеЗаполнено(Объект.КонецПериода) Тогда
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудники = Новый ТаблицаЗначений;
		ТаблицаСотрудники.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудники.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудники.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для Каждого СтрокаТаблицы Из ДанныеСотрудников Цикл
			СтрокаСотрудники = ТаблицаСотрудники.Добавить();
			СтрокаСотрудники.Сотрудник = СтрокаТаблицы.Сотрудник;
			СтрокаСотрудники.Период = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаНачала = Объект.НачалоПериода;
			СтрокаСотрудники.ДатаОкончания = КонецДня(Объект.КонецПериода);
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСотрудники.Сотрудник,
		|	ТаблицаСотрудники.Период,
		|	ТаблицаСотрудники.ДатаНачала,
		|	ТаблицаСотрудники.ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	&ТаблицаСотрудники КАК ТаблицаСотрудники");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаСотрудники", ТаблицаСотрудники);
		Запрос.Выполнить();
		
		ПараметрыВТ = УчетРабочегоВремениРасширенный.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		ПараметрыВТ.ДатаНачала = Объект.НачалоПериода;
		ПараметрыВТ.ДатаОкончания = КонецДня(Объект.КонецПериода);
		ПараметрыВТ.МесяцДатаНачала = НачалоМесяца(Объект.НачалоПериода);
		ПараметрыВТ.МесяцДатаОкончания = КонецМесяца(Объект.КонецПериода);
		ПараметрыВТ.ДатаАктуальности = Объект.Дата;
		ПараметрыВТ.Организация = Объект.Организация;
		
		УчетРабочегоВремениРасширенный.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(МенеджерВременныхТаблиц, Истина, ПараметрыВТ);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеУчетаВремени.Сотрудник,
		|	СУММА(ДанныеУчетаВремени.Часы) КАК ОтработаноЧасов
		|ИЗ
		|	ВТДанныеУчетаВремениИСостоянийСотрудников КАК ДанныеУчетаВремени
		|ГДЕ
		|	ДанныеУчетаВремени.ВидУчетаВремени.РабочееВремя = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремени.Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОтработанноеВремяСотрудников.Вставить(Выборка.Сотрудник, Выборка.ОтработаноЧасов);
		КонецЦикла;
		
	КонецЕсли;
	
	Отбор = Новый Структура("ФизическоеЛицо");
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если ЗаполняемыеПоля.Свойство("ТарифнаяСтавка")
			И ЗаполняемыеПоля.ТарифнаяСтавка Тогда
			Строка.ТарифнаяСтавка = Неопределено;
		КонецЕсли;
		Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
			И ЗаполняемыеПоля.ОтработаноЧасов Тогда
			Строка.ОтработаноЧасов = Неопределено;
		КонецЕсли;
		
		Отбор.ФизическоеЛицо = Строка.Работник;
		
		НайденныеСтроки = ДанныеСотрудников.НайтиСтроки(Отбор);
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			
			Если ЗаполняемыеПоля.Свойство("ТарифнаяСтавка")
				И ЗаполняемыеПоля.ТарифнаяСтавка
				И НайденныеСтроки[0].ВидСовокупнойТарифнойСтавки = Перечисления.ВидыТарифныхСтавок.ЧасоваяТарифнаяСтавка
				И Не ЗначениеЗаполнено(Строка.ТарифнаяСтавка) Тогда
				Строка.ТарифнаяСтавка = НайденныеСтроки[0].СовокупнаяТарифнаяСтавка;
			КонецЕсли;
			
			Если ЗаполняемыеПоля.Свойство("ОтработаноЧасов")
				И ЗаполняемыеПоля.ОтработаноЧасов
				И Не ЗначениеЗаполнено(Строка.ОтработаноЧасов) Тогда
				Строка.ОтработаноЧасов = ОтработанноеВремяСотрудников[НайденныеСтроки[0].Сотрудник];
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Возвращает состав подразделения
// 
// Параметры:
// 	МассивФизЛиц - Массив - массив физлиц.
// 	Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
// 	Организация - СправочникСсылка.Организации - организация искомого подразделения. 
//
Процедура ЗаполнитьФизическиеЛицаПодразделения(МассивФизЛиц, Подразделение, Организация = Неопределено) Экспорт
	//++ Локализация
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыЗапроса.Организация = Организация;
	КонецЕсли;
	ПараметрыЗапроса.КадровыеДанные = "МестоВСтруктуреПредприятия";
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивФизЛиц = ДанныеСотрудников.Скопировать(Новый Структура("МестоВСтруктуреПредприятия", Подразделение),"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
	//-- Локализация
КонецПроцедуры

// Определяется настройки отражения в бух. учете по умолчанию для указанного вида работ.
//
// Параметры:
// 	ДанныеРегистра - Структура - Описание полей см. в ресурсах регистра сведений БухучетРаботСотрудников.
//   ВидРабот - СправочникСсылка.ВидыРаботСотрудников - Вид работ.
//
Процедура ЗаполнитьПоДаннымРегистраБухучетВидаРабот(ДанныеРегистра, ВидРабот) Экспорт
	//++ Локализация
	Если УправлениеДоступом.ЧтениеРазрешено(РегистрыСведений.БухучетРаботСотрудников.ПустойКлюч()) Тогда
		ДанныеРегистра = РегистрыСведений.БухучетРаботСотрудников.Получить(Новый Структура("ВидРабот", ВидРабот));
	Иначе
		ДанныеРегистра = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
			РегистрыСведений.БухучетРаботСотрудников.СоздатьМенеджерЗаписи(),
			Метаданные.РегистрыСведений.БухучетРаботСотрудников);
		ДанныеРегистра.ВидРабот = ВидРабот;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Формирует структуру полей кадровых данных сотрудников к заполнению
//
// Возвращаемое значение:
//  Структура - поля к заполнению.
//
Функция ПоляКадровыхДанныхСотрудниковКЗаполнению() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТарифнаяСтавка",			Ложь);
	Результат.Вставить("ОтработаноЧасов",			Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КадровыйУчет

//++ Локализация

// Возвращает элемент справочника СтруктураПредприятия, в котором числится физическое лицо.
//
// Параметры:
//  Организация 	- СправочникСсылка.Организации - организация, в которой работает сотрудник
//  ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица - физическое лицо, подразделение которого требуется получить
//  Период			- Дата - дата, на которую требуется получить данные.
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия   - подразделение организационной структуры.
//
Функция МестоСотрудникаВСтруктуреПредприятия(Организация, ФизическоеЛицо, Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодДанных = ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса());
	
	ОсновныеСотрудники = Новый ТаблицаЗначений();
	ЗаполнитьОсновныхСотрудниковФизическихЛиц(
		ОсновныеСотрудники,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
		Истина,
		Организация,
		ПериодДанных);
	
	Если ОсновныеСотрудники.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	КадровыеДанные = Новый ТаблицаЗначений();
	ЗаполнитьТаблицуКадровыеДанныеСотрудников(
		КадровыеДанные,
		Ложь,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновныеСотрудники[0].Сотрудник),
		"МестоВСтруктуреПредприятия",
		ПериодДанных);
	
	Если КадровыеДанные.Количество() = 0 Тогда
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат КадровыеДанные[0].МестоВСтруктуреПредприятия;
	
КонецФункции

//-- Локализация

// Заполняет таблицу значений содержащую поля ФизическоеЛицо и Сотрудник
// 
// Параметры:
//	Таблица				-ТаблицаЗначений - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо
//	СписокФизическихЛиц - Массив из СправочникСсылка.ФизическиеЛица, СправочникСсылка.ФизическиеЛица, Неопределено -
//							если передано Неопределено - в таблицу войдут "основные" сотрудники всех 
//							физических лиц когда либо работавших в организации.
//	ТолькоРазрешенные	- Булево - признак использования РАЗРЕШЕННЫЕ в запросе.
//	Организация			- СправочникСсылка.Организации - ссылка на организацию.
//	Период				- Дата - дата получения сотрудников.
//
Процедура ЗаполнитьОсновныхСотрудниковФизическихЛиц(Таблица, СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период) Экспорт
	//++ Локализация
	Таблица = КадровыйУчет.ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период);
	//-- Локализация
КонецПроцедуры

// Возвращает таблицу значений заполненную данными сотрудников, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	Таблица           - ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные.
//	ТолькоРазрешенные - Булево
//  СписокСотрудников - Массив из СправочникСсылка.Сотрудники - ссылки на элементы справочника сотрудники.
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных, которые необходимо получить.
//	ДатаПолученияДанных - Дата - дата на которую необходимо получить данные сотрудников, 
//						применимо к данным, носящим периодический характер.
//						Если дату не указывать, будут получены самые последние данные.
//  ПоляОтбораПериодическихДанных - Структура - в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений.
//  ФормироватьСПериодичностьДень - Булево - признак формирования таблицы с периодичностью День.
//
Процедура ЗаполнитьТаблицуКадровыеДанныеСотрудников(Таблица, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	//++ Локализация
	Таблица = КадровыйУчет.КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

//++ Локализация

// Заполняет типа налога в зависимости от операции по зарплате.
//
// Параметры:
//   ТипНалога  - ПеречислениеСсылка.ТипыНалогов - "Типы налогов".
//   ВидОперации - ПеречислениеСсылка.ВидыОперацийПоЗарплате - вид операции по зарплате.
// 
Процедура ЗаполнитьТипНалогаОперацииПоЗарплаты(ТипНалога, ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛ;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоначисленныйПоРезультатамПроверки Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПередачаЗадолженностиВНалоговыйОрган Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛПрочиеРасчетыСПерсоналом Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛРасчетыСБывшимиСотрудниками Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивиденды Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДивиденды;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НФДЛДивидендыСотрудникам Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛДивидендыСотрудникам;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛСПревышения Тогда
		ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак учета по подразделениям на счетах расчетов по оплате труда
//
// Возвращаемое значение:
//   Булево   - признак включения учета по подразделениям.
//
Функция ВключеныПодразделенияНаСчетахУчетаЗарплаты() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда).УчетПоПодразделениям;
	
КонецФункции

// Возвращает признак учета по подразделениям на счетах учета НДФЛ
//
// Возвращаемое значение:
//   Булево   - признак включения учета по подразделениям.
//
Функция ВключеныПодразделенияНаСчетахУчетаНДФЛ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(
		ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента).УчетПоПодразделениям;
	
КонецФункции

// Возвращает массив всех типов налогов по НДФЛ и страховым взносам
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ТипыНалогов - поля к заполнению.
//
Функция ТипыНалоговНДФЛИВзносов() Экспорт

	ТипыНДФЛВзносы = Новый Массив;
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛ);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛСПревышения);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛДоначисленныйПоРезультатамПроверки);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛДоходыКонтрагентов);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛПередачаЗадолженностиВНалоговыйОрган);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.НДФЛПрочиеРасчетыСПерсоналом);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРСтраховаяЧасть);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРНакопительнаяЧасть);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРДополнительныйТарифЛЭ);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРДополнительныйТарифШахтеры);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаПодземныхИВредныхРаботах);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРПоСуммарномуТарифу);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРСПревышения);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ПФРДоПредельнойВеличины);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ФФОМС);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ТФОМС);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ФСС);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.ФССНС);
	ТипыНДФЛВзносы.Добавить(Перечисления.ТипыНалогов.СтраховыеВзносыЕдиныйТариф);
	
	Возврат ТипыНДФЛВзносы;
	
КонецФункции

//-- Локализация

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	//++ Локализация
	ЗарплатаКадры.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом
//++ Локализация

Процедура ДобавитьПрофилиЗарплатаИКадры(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	// Папка профилей "Зарплата и кадры".
	ПапкаПрофилей = УправлениеДоступом.НовоеОписаниеПапкиПрофилейГруппДоступа();
	ПапкаПрофилей.Имя           = "ЗарплатаИКадры";
	ПапкаПрофилей.Идентификатор = "05de7c2f-eb81-11eb-81dc-4cedfb6825bf";
	ПапкаПрофилей.Наименование  = НСтр("ru = 'Зарплата и кадры';
										|en = 'Payroll and human resources'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОписанияПрофилей.Добавить(ПапкаПрофилей);
	
	НачальныйИндекс = ОписанияПрофилей.ВГраница() + 1;
	ЗарплатаКадрыРасширенный.ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей, ПараметрыОбновления);
	
	НеиспользуемыеРоли = НеиспользуемыеРолиПоставляемыхПрофилей();
	
	Для ИндексПрофиля = НачальныйИндекс По ОписанияПрофилей.ВГраница() Цикл
		
		ОписаниеПрофиля = ОписанияПрофилей[ИндексПрофиля];
		
		// Все зарплатные профили разместим в соответствующей группе
		Если ПустаяСтрока(ОписаниеПрофиля.Родитель) Тогда
			ОписаниеПрофиля.Родитель = ПапкаПрофилей.Имя;
		КонецЕсли;
		
		//Папки профилей групп доступа не требуют добавления ролей.
		Если НЕ ОписаниеПрофиля.Свойство("Роли") Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим в профиль БЗКР роли на просмотр интерфейсных подсистем
		Если ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляКадровикБезДоступаКЗарплате()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийКадровик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляКадровик() Тогда
			ОписаниеПрофиля.Роли.Добавить("РазделКадры");
		ИначеЕсли ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляТабельщик() Тогда
			ОписаниеПрофиля.Роли.Добавить("РазделЗарплата");
		Иначе
			// Аудитор, КадровикРасчетчик, СтаршийКадровикРасчетчик
			ОписаниеПрофиля.Роли.Добавить("РазделКадры");
			ОписаниеПрофиля.Роли.Добавить("РазделЗарплата");
		КонецЕсли;
		
		// Добавим в профиль БЗКР обязательные права УТ/УП
		УправлениеДоступомУТ.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
		
		ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
		ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
		ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоПартнерам");
		ОписаниеПрофиля.Роли.Добавить("ЧтениеКасс");
		
		Если ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляКадровикРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийКадровикРасчетчик() Тогда
			
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОтраженияЗарплатыВФинансовомУчете");
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДепонированнойЗарплаты");
			
			ОписаниеПрофиля.Роли.Добавить("ЧтениеВидовРаботСотрудников");
			ОписаниеПрофиля.Роли.Добавить("ЧтениеРасценокРаботСотрудников");
			ОписаниеПрофиля.Роли.Добавить("ЧтениеВыполненныхРаботСотрудников");
			
			ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассификаторовНастроекДоходовРасходов");
			ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассификаторовНастроекПрочихАктивовПассивов");
			ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");
			
			ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиВозмещениеРасходовФСС");
			
		ИначеЕсли ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляАудитор() Тогда
			
			ОписаниеПрофиля.Роли.Добавить("ЧтениеДепонированнойЗарплаты");
			
		КонецЕсли;
		
		Если ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийКадровик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийРасчетчик()
			ИЛИ ОписаниеПрофиля.Идентификатор = ЗарплатаКадрыРасширенный.ИдентификаторПрофиляСтаршийКадровикРасчетчик() Тогда
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГрафиковРаботы"); // Разрешает работу с графиками работы
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодразделенийОрганизации");
			ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДолжностей");
		Иначе
			ОписаниеПрофиля.Роли.Добавить("ЧтениеПодразделенийОрганизации");
			ОписаниеПрофиля.Роли.Добавить("ЧтениеДолжностей");
		КонецЕсли;
		
		Роли = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОписаниеПрофиля.Роли);
		ОписаниеПрофиля.Роли = ОбщегоНазначенияКлиентСервер.РазностьМассивов(Роли, НеиспользуемыеРоли);
		
		// Удаление вида доступа СтруктураПредприятия
		УдаляемыйВидДоступа = ОписаниеПрофиля.ВидыДоступа.НайтиПоЗначению("СтруктураПредприятия");
		Если УдаляемыйВидДоступа <> Неопределено Тогда
			ОписаниеПрофиля.ВидыДоступа.Удалить(УдаляемыйВидДоступа);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

//++ Локализация
#Область НачислениеРезервовПоОплатеТруда

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеРезервовПоОплатеТруда(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеРезервовПоОплатеТруда,,,,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"РезервыПоОплатеТрудаУП.Использование_НачислениеРезервовПоОплатеТруда");
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"РезервыПоОплатеТрудаУП.Выполнить_НачислениеРезервовПоОплатеТруда");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасчетРезервовОтпусков")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРезервыПоОплатеТруда") Тогда
		НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам.Формы.ФормаСписка.ПолноеИмя());
	Иначе
		НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
			Метаданные.Документы.РезервыПоОплатеТруда.Формы.ФормаСписка.ПолноеИмя());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеЗарплатыВФинансовомУчете

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОтражениеЗарплатыВФинансовомУчете(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеЗарплатыВФинансовомУчете,,,,
		Перечисления.ОперацииЗакрытияМесяца.ОформлениеВыработкиСотрудников);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ИнтеграцияБЗК.Использование_ОтражениеЗарплатыВФинансовомУчете");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ИнтеграцияБЗК.Выполнить_ОтражениеЗарплатыВФинансовомУчете");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ОтражениеЗарплатыВФинансовомУчете(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет зарплаты не ведется.';
				|en = 'Payroll accounting is not kept.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Организация
	|ПОМЕСТИТЬ ОрганизацииСОборотами
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(&НачалоПериода, &ГраницаКонецПериода, , Организация В (&МассивОрганизаций)) КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация
	|ПОМЕСТИТЬ ОрганизацииБезРегламентныхДокументов
	|ИЗ
	|	ОрганизацииСОборотами КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеЗарплатыВФинансовомУчете КАК РегламентныйДокумент
	|		ПО (РегламентныйДокумент.Организация = Организации.Организация)
	|			И (РегламентныйДокумент.ПериодРегистрации = &НачалоПериода)
	|			И (РегламентныйДокумент.Проведен)
	|ГДЕ
	|	РегламентныйДокумент.Ссылка ЕСТЬ NULL";
	
	Запрос.Выполнить();
	
	РазмерыВременныхТаблиц = ЗакрытиеМесяцаСервер.РазмерыВременныхТаблиц(Запрос, ПараметрыОбработчика);
	
	Если РазмерыВременныхТаблиц.ОрганизацииСОборотами = 0 Тогда
			
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет оборотов по регистру накопления ""Начисления удержания по сотрудникам"".';
				|en = 'No turnovers for the ""Employee earnings and deductions"" accumulation register.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	Иначе
		
		ЗакрытиеМесяцаСервер.ЗафиксироватьРезультатыОбработчикаИспользованияПоОрганизациям(
			ПараметрыОбработчика,
			НСтр("ru = 'По организации ""%1"" за период %2 не сформирован регламентный документ ""Отражение зарплаты в финансовом учете"".';
				|en = 'The ""Recording of salary in financial accounting"" period-end operation was not generated for the ""%1"" company for period %2.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Запрос,
			"ОрганизацииБезРегламентныхДокументов",
			Ложь,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеЗарплатыВФинансовомУчете(ПараметрыОбработчика) Экспорт
	
	Документы.ОтражениеЗарплатыВФинансовомУчете.ОтражениеЗарплатыПриЗакрытииМесяца(
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
		ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
КонецПроцедуры

#КонецОбласти

//-- Локализация
#КонецОбласти

//++ Локализация

Процедура ВключитьИспользованиеДанныхСотрудниковВнешнихИсточников() Экспорт
	
	НастройкиКадровогоУчета = КадровыйУчет.НастройкиКадровогоУчета();
	Если НастройкиКадровогоУчета.ИспользуютсяДанныеСотрудниковВнешнихИсточников = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиКадровогоУчета.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Настройки, НастройкиКадровогоУчета);
	Настройки.ИспользуютсяДанныеСотрудниковВнешнихИсточников = Истина;
	Настройки.Записать();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Процедура формирует временные таблицы данных ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФормаОплатыНаличная",    Перечисления.ФормыОплаты.Наличная);
	Запрос.УстановитьПараметр("ФормаОплатыБезналичная", Перечисления.ФормыОплаты.Безналичная);
	
	Организация = Неопределено;
	Параметры.Свойство("Организация", Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации", Не ЗначениеЗаполнено(Организация));
	
	ПериодРегистрации = Неопределено;
	Параметры.Свойство("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("БезОтбораПоПериодуРегистрации", Не ЗначениеЗаполнено(ПериодРегистрации));
	
	МассивВедомостей = Неопределено;
	Параметры.Свойство("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("БезОтбораПоВедомостям", МассивВедомостей = Неопределено Или МассивВедомостей.Количество() = 0);
	
	Если Параметры.Свойство("МассивОпераций") Тогда
		Запрос.УстановитьПараметр("МассивОпераций", Параметры.МассивОпераций);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация") Тогда
		Запрос.УстановитьПараметр("МассивОпераций",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.ХозяйственнаяОперация));
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Ложь);
	Иначе
		Запрос.УстановитьПараметр("МассивОпераций", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоОперациям", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ведомость.Ссылка КАК Ведомость,
	|	Ведомость.Проведен КАК Проведен,
	|	Ведомость.Организация КАК Организация,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.СпособВыплаты КАК ОбъектВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства КАК ВидДохода,
	|	Ведомость.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	NULL КАК Банк,
	|	NULL КАК Касса,
	|	NULL КАК Раздатчик,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу
	|ПОМЕСТИТЬ ВТВедомости
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	NULL,
	|	Ведомость.Банк,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	Ведомость.ЗарплатныйПроект,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	Ведомость.ВидДоходаИсполнительногоПроизводства,
	|	NULL,
	|	Ведомость.Банк,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.Касса,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.Раздатчик,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Проведен,
	|	Ведомость.Организация,
	|	Ведомость.ПериодРегистрации,
	|	Ведомость.СпособВыплаты,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	Ведомость.СуммаПоДокументу
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу КАК Ведомость
	|ГДЕ
	|	(&БезОтбораПоОрганизации
	|		ИЛИ Ведомость.Организация = &Организация)
	|	И (&БезОтбораПоВедомостям
	|		ИЛИ Ведомость.Ссылка В (&МассивВедомостей))
	|	И (&БезОтбораПоПериодуРегистрации
	|		ИЛИ Ведомость.ПериодРегистрации = &ПериодРегистрации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состав.Ссылка КАК Ведомость,
	|	Состав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Состав.ВзысканнаяСумма КАК ВзысканнаяСумма
	|ПОМЕСТИТЬ ВТСоставВедомостей
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка В 
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Состав.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Состав.Ссылка КАК Ведомость,
	|	Состав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Состав.ВзысканнаяСумма КАК ВзысканнаяСумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка В 
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Состав.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Состав.Ссылка КАК Ведомость,
	|	Состав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Состав.ВзысканнаяСумма КАК ВзысканнаяСумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка В 
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Состав.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Состав.Ссылка КАК Ведомость,
	|	Состав.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Состав.ВзысканнаяСумма КАК ВзысканнаяСумма
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка В 
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Состав.ФизическоеЛицо В (&ФизическиеЛица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зарплата.Ссылка КАК Ведомость,
	|	&ФормаОплатыБезналичная КАК ФормаОплаты,
	|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Зарплата.КВыплате КАК Сумма,
	|	Зарплата.ДокументОснование КАК ДокументОснование,
	|	Зарплата.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов КАК СтатьяРасходов,
	|	Зарплата.ВидДоходаИсполнительногоПроизводства КАК ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТДанныеВедомостейКВыплате
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	Зарплата.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	Выплаты.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	Выплаты.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	Зарплата.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Зарплата.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.КВыплате,
	|	Зарплата.ДокументОснование,
	|	Зарплата.СтатьяФинансирования,
	|	Зарплата.СтатьяРасходов,
	|	Зарплата.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком)
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.Зарплата КАК Зарплата
	|ГДЕ
	|	Зарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Зарплата.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Выплаты.Ссылка,
	|	&ФормаОплатыНаличная,
	|	Выплаты.ФизическоеЛицо,
	|	Выплаты.КВыплате,
	|	Выплаты.ДокументОснование,
	|	Выплаты.СтатьяФинансирования,
	|	Выплаты.СтатьяРасходов,
	|	Выплаты.ВидДоходаИсполнительногоПроизводства,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу)
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.Выплаты КАК Выплаты
	|ГДЕ
	|	Выплаты.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику) В (&МассивОпераций)
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Выплаты.ФизическоеЛицо В (&ФизическиеЛица))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.Ссылка КАК Ведомость,
	|	&ФормаОплатыБезналичная КАК ФормаОплаты,
	|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Налоги.Подразделение КАК Подразделение,
	|	Налоги.КодДохода КАК КодДохода,
	|	Налоги.КатегорияДохода КАК КатегорияДохода,
	|	Налоги.ДокументОснование КАК ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) КАК ХозяйственнаяОперация,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.СуммаСПревышения КАК СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18 КАК СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20 КАК СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22 КАК СуммаСПревышенияПоСтавке22
	|ПОМЕСТИТЬ ВТДанныеВедомостейНалоги
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВБанк.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовПеречислением.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыРаздатчиком.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ссылка,
	|	&ФормаОплатыБезналичная,
	|	Налоги.ФизическоеЛицо,
	|	Налоги.РегистрацияВНалоговомОргане,
	|	Налоги.СтавкаНалогообложенияРезидента,
	|	Налоги.МесяцНалоговогоПериода,
	|	Налоги.Подразделение,
	|	Налоги.КодДохода,
	|	Налоги.КатегорияДохода,
	|	Налоги.ДокументОснование,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
	|	Налоги.Сумма,
	|	Налоги.СуммаСПревышения,
	|	Налоги.СуммаСПревышенияПоСтавке18,
	|	Налоги.СуммаСПревышенияПоСтавке20,
	|	Налоги.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	Документ.ВедомостьПрочихДоходовВКассу.НДФЛ КАК Налоги
	|ГДЕ
	|	(Налоги.Сумма <> 0
	|		ИЛИ Налоги.СуммаСПревышения <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке18 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке20 <> 0
	|		ИЛИ Налоги.СуммаСПревышенияПоСтавке22 <> 0)
	|	И Налоги.Ссылка В
	|			(ВЫБРАТЬ
	|				Т.Ведомость
	|			ИЗ
	|				ВТВедомости КАК Т)
	|	И (&БезОтбораПоОперациям
	|			ИЛИ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) В (&МассивОпераций))
	|	И (&БезОтбораПоФизическимЛицам
	|			ИЛИ Налоги.ФизическоеЛицо В (&ФизическиеЛица))";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует временные таблицы состояния ведомостей различных типов в соответствии с параметрами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
//	Параметры - Структура - Структура параметров.
//
Процедура ПодготовитьДанныеОСостоянииВедомостей(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, Параметры);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане",
		Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Если Параметры.Свойство("ДатаАктуальности") Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности", Параметры.ДатаАктуальности);
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если Параметры.Свойство("ФизическиеЛица") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", Параметры.ФизическиеЛица);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	ИначеЕсли Параметры.Свойство("Работник") Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Работник));
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица", Новый Массив);
		Запрос.УстановитьПараметр("БезОтбораПоФизическимЛицам", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ТипНалога") Тогда
		Запрос.УстановитьПараметр("ТипНалога", Параметры.ТипНалога);
		Запрос.УстановитьПараметр("БезОтбораПоТипуНалога", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ТипНалога", Неопределено);
		Запрос.УстановитьПараметр("БезОтбораПоТипуНалога", Истина);
	КонецЕсли;
	
	ИсключитьДокументОплаты = Неопределено;
	Параметры.Свойство("ИсключитьДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("ИсключаемыйДокументОплаты", ИсключитьДокументОплаты);
	Запрос.УстановитьПараметр("БезИсключенияДокументаОплаты", Не ЗначениеЗаполнено(ИсключитьДокументОплаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.Ведомость КАК Ведомость,
	|	ДанныеВедомостей.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостей.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL ТОГДА ЛОЖЬ
	|		ИНАЧЕ ОплатаВедомостей.Регистратор ССЫЛКА Документ.ДепонированиеЗарплаты
	|	КОНЕЦ КАК Депонирована,
	|	ОплатаВедомостей.Регистратор КАК ДокументВыплаты,
	|	СУММА(ВЫБОР
	|		КОГДА ОплатаВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеВедомостей.Сумма
	|	КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ДанныеВедомостей.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыПоВедомостям
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|		ПО ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость
	|			И ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо
	|			И (&БезИсключенияДокументаОплаты
	|				ИЛИ ОплатаВедомостей.Регистратор <> &ИсключаемыйДокументОплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостей.Ведомость,
	|	ДанныеВедомостей.ФормаОплаты,
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ХозяйственнаяОперация,
	|	ОплатаВедомостей.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ведомости.Ведомость КАК Ведомость,
	|	Расшифровка.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИСТИНА КАК Ошибка
	|ПОМЕСТИТЬ ВТОшибкиПеречисления
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.Ведомость
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ведомости.Ведомость,
	|	Расшифровка.ФизическоеЛицо,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПодтверждениеЗачисленияЗарплаты КАК Подтверждение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыплатыПоВедомостям КАК Ведомости
	|		ПО Подтверждение.ПервичныйДокумент = Ведомости.ДокументВыплаты
	|			И Подтверждение.Проведен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПодтверждениеЗачисленияЗарплаты.Сотрудники КАК Расшифровка
	|		ПО Расшифровка.РезультатЗачисленияЗарплаты <> ЗНАЧЕНИЕ(Перечисление.РезультатыЗачисленияЗарплаты.Зачислено)
	|			И Расшифровка.ФизическоеЛицо = Ведомости.ФизическоеЛицо
	|			И Подтверждение.Ссылка = Расшифровка.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОшибкиПеречисления.Ошибка, ЛОЖЬ) КАК ОшибкаПеречисления,
	|	ВыплатыПоВедомостям.*
	|ПОМЕСТИТЬ ВТСостояниеВыплатыПоВедомостям
	|ИЗ
	|	ВТВыплатыПоВедомостям КАК ВыплатыПоВедомостям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|		ПО ВыплатыПоВедомостям.Ведомость = ОшибкиПеречисления.Ведомость
	|			И ВыплатыПоВедомостям.ФизическоеЛицо = ОшибкиПеречисления.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВыплатыПоВедомостям;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеВедомостей.Организация,
	|	Регистрации.РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТРегистрацииОрганизацийВНалоговыхОрганах
	|ИЗ
	|	ВТВедомости КАК ДанныеВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&ДатаАктуальности, СтруктурнаяЕдиница В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Организация ИЗ ВТВедомости КАК Т)) КАК Регистрации
	|		ПО ДанныеВедомостей.Организация = Регистрации.СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДокументыОплаты.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ ДокументыОплаты.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ДокументыОплаты.ТипНалога КАК ТипНалога,
	|	Расшифровка.Ведомость КАК Ведомость,
	|	СУММА(Расшифровка.Сумма) КАК СуммаОплаты
	|ПОМЕСТИТЬ ВТПеречислениеНалоговПоВедомостям
	|ИЗ
	|	ВТВедомости КАК ДанныеВедомостей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ПО ДанныеВедомостей.Ведомость = Расшифровка.Ведомость
	|			И (&БезИсключенияДокументаОплаты
	|				ИЛИ Расшифровка.Ссылка <> &ИсключаемыйДокументОплаты)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДокументыОплаты
	|		ПО ДокументыОплаты.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|			И Расшифровка.Ссылка = ДокументыОплаты.Ссылка
	|			И ДокументыОплаты.НДФЛПоВедомостям
	|			И ДокументыОплаты.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО ДокументыОплаты.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Ведомость,
	|	ДокументыОплаты.ТипНалога,
	|	ВЫБОР
	|		КОГДА ДокументыОплаты.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ ДокументыОплаты.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛ) КАК ТипНалога,
	|	СУММА(Налоги.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНалогиКПеречислению
	|ИЗ
	|	ВТДанныеВедомостейНалоги КАК Налоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Налоги.Ведомость = Ведомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО Ведомости.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|
	|ГДЕ
	|	(&БезОтбораПоТипуНалога
	|		ИЛИ &ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛ))
	|	И Налоги.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛСПревышения),
	|	СУММА(Налоги.СуммаСПревышения)
	|ИЗ
	|	ВТДанныеВедомостейНалоги КАК Налоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|		ПО Налоги.Ведомость = Ведомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО Ведомости.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|
	|ГДЕ
	|	(&БезОтбораПоТипуНалога
	|		ИЛИ &ТипНалога = ЗНАЧЕНИЕ(Перечисление.ТипыНалогов.НДФЛСПревышения))
	|	И Налоги.СуммаСПревышения <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.Ведомость,
	|	Налоги.ФормаОплаты,
	|	Налоги.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Налоги.РегистрацияВНалоговомОргане
	|	КОНЕЦ;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПеречислениеНалоговПоВедомостям.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(ОшибкиПеречисления.Ошибка, ЛОЖЬ) КАК ОшибкаПеречисления,
	|	НалогиКПеречислению.*
	|ПОМЕСТИТЬ ВТСостояниеНалоговПоВедомостям
	|ИЗ
	|	ВТНалогиКПеречислению КАК НалогиКПеречислению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПеречислениеНалоговПоВедомостям КАК ПеречислениеНалоговПоВедомостям
	|		ПО НалогиКПеречислению.Ведомость = ПеречислениеНалоговПоВедомостям.Ведомость
	|			И НалогиКПеречислению.РегистрацияВНалоговомОргане = ПеречислениеНалоговПоВедомостям.РегистрацияВНалоговомОргане
	|			И НалогиКПеречислению.ТипНалога = ПеречислениеНалоговПоВедомостям.ТипНалога
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОшибкиПеречисления КАК ОшибкиПеречисления
	|		ПО НалогиКПеречислению.Ведомость = ОшибкиПеречисления.Ведомость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПеречислениеНалоговПоВедомостям;
	|УНИЧТОЖИТЬ ВТНалогиКПеречислению;
	|УНИЧТОЖИТЬ ВТОшибкиПеречисления;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация,
	|	Заявка.ТипНалога КАК ТипНалога,
	|	ВЫБОР
	|		КОГДА Заявка.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Заявка.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(Заявка.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявкиВедомостей
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК ДанныеВедомостей
	|		ПО Расшифровка.Ведомость = ДанныеВедомостей.Ведомость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ПО Расшифровка.Ссылка = Заявка.Ссылка
	|			И Заявка.Проведен
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРегистрацииОрганизацийВНалоговыхОрганах КАК РегистрацииОрганизацийВНалоговыхОрганах
	|		ПО Заявка.Организация = РегистрацииОрганизацийВНалоговыхОрганах.Организация
	|ГДЕ
	|	Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|	ИЛИ (Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|		И Заявка.НДФЛПоВедомостям)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расшифровка.Ведомость,
	|	Заявка.ХозяйственнаяОперация,
	|	Заявка.ТипНалога,
	|	ВЫБОР
	|		КОГДА Заявка.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ЕСТЬNULL(РегистрацииОрганизацийВНалоговыхОрганах.РегистрацияВНалоговомОргане, &ПустаяРегистрацияВНалоговомОргане)
	|		ИНАЧЕ Заявка.РегистрацияВНалоговомОргане
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРегистрацииОрганизацийВНалоговыхОрганах";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает код вида дохода исполнительного производства
//
// Параметры:
//   ВидДоходаИсполнительногоПроизводства - ПеречислениеСсылка.ВидыДоходовИсполнительногоПроизводства - 
//
// Возвращаемое значение:
//   Строка - строковое значение вида доходов
//
Функция ПолучитьКодВидаДохода(ВидДоходаИсполнительногоПроизводства) Экспорт
	
	КодВидаДохода = "";
	
	Если ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.ЗарплатаВознаграждения Тогда
		КодВидаДохода = "1";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииНеоблагаемые Тогда
		КодВидаДохода = "2";
	ИначеЕсли ВидДоходаИсполнительногоПроизводства = Перечисления.ВидыДоходовИсполнительногоПроизводства.КомпенсацииОблагаемые Тогда
		КодВидаДохода = "3";
	КонецЕсли;
	
	Возврат КодВидаДохода;
	
КонецФункции

Функция ВзысканоПоВедомостям(Организация, ФизическоеЛицо, Ведомости, ХозяйственнаяОперация = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", Организация);
	ПараметрыОтбора.Вставить("ФизическиеЛица", ФизическоеЛицо);
	ПараметрыОтбора.Вставить("ХозяйственнаяОперация",
		?(ЗначениеЗаполнено(ХозяйственнаяОперация), ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты));
	ПараметрыОтбора.Вставить("МассивВедомостей", Ведомости);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ВзысканнаяСумма) КАК ВзысканнаяСумма
	|ИЗ
	|	ВТСоставВедомостей КАК Состав";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ВзысканнаяСумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция НазначениеПлатежаПриРасчетахСРаботниками(Объект) Экспорт
	
	Реквизиты = Новый Структура("ХозяйственнаяОперация, Организация, ПодотчетноеЛицо, РасшифровкаПлатежа");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	Ведомости = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.РасшифровкаПлатежа) Тогда
		Ведомости = Реквизиты.РасшифровкаПлатежа.Выгрузить(, "Ведомость").ВыгрузитьКолонку("Ведомость");
	КонецЕсли;
	
	ТекстНазначение = НСтр("ru = 'Заработная плата';
							|en = 'Payroll'");
	ТекстПолучатель = НСтр("ru = 'Для зачисления на счет %1';
							|en = 'For bank receipt %1'");
	ТекстФИО = "";
	
	СуммаВзыскано = 0;
	
	Если ЗначениеЗаполнено(Реквизиты.ПодотчетноеЛицо) Тогда
		
		ДанныеФизлица = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Реквизиты.ПодотчетноеЛицо, "ФИО, Пол");
		Если НЕ ФизическиеЛицаЗарплатаКадры.Просклонять(ДанныеФизлица.ФИО, 2, ТекстФИО, ДанныеФизлица.Пол, Реквизиты.ПодотчетноеЛицо) Тогда
			ТекстФИО = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ведомости) Тогда
			СуммаВзыскано = ВзысканоПоВедомостям(Реквизиты.Организация, Реквизиты.ПодотчетноеЛицо, Ведомости, Реквизиты.ХозяйственнаяОперация);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПолучатель = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПолучатель, ТекстФИО);
	ТекстПолучатель = ТекстПолучатель + Символы.ПС;
	
	ТекстНазначение = ТекстПолучатель + ТекстНазначение;
	
	Если СуммаВзыскано <> 0 Тогда
		ТекстВзыскано = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '//ВЗС//%1//';
																					|en = '//ВЗС//%1//'"),
			Формат(СуммаВзыскано, "ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ="));
		ТекстНазначение = ТекстНазначение
			+ ?(ПустаяСтрока(ТекстВзыскано), "", Символы.ПС + ТекстВзыскано);
	КонецЕсли;
	
	Возврат ТекстНазначение;
	
КонецФункции

Функция ВыплатаЗарплатыНаЛицевыеСчета(Объект) Экспорт
	
	Реквизиты = Новый Структура("ХозяйственнаяОперация");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	Возврат Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
	
КонецФункции
//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация

// Регистрация удержания НДФЛ при оплате ведомостей прочих доходов.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости прочих доходов на выплату
//                          (ДокументСсылка.ВедомостьПрочихДоходовВБанк,
//                          ДокументСсылка.ВедомостьПрочихДоходовВКассу и т.д.)
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплатуВедомостейПрочихДоходовВУчетеНДФЛ(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаПлатежа, Отказ)
	
	ВедомостиПрочихДоходов = Новый Массив; 
	
	ПериодРегистрации = '00010101';
	
	МетаданныеВзаиморасчетыСКонтрагентами = Метаданные.РегистрыНакопления.ВзаиморасчетыСКонтрагентамиАкционерами;
	Для Каждого Ведомость Из Ведомости Цикл
		МетаданныеВедомости = Ведомость.Метаданные();
		Если МетаданныеВедомости.Движения.Содержит(МетаданныеВзаиморасчетыСКонтрагентами) Тогда
			ПериодРегистрации = Макс(ПериодРегистрации, Ведомость.ПериодРегистрации);
			ВедомостиПрочихДоходов.Добавить(Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если ВедомостиПрочихДоходов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("МассивВедомостей", ВедомостиПрочихДоходов);
	СтруктураПараметров.Вставить("ФизическиеЛица", ФизическиеЛица);
	
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, СтруктураПараметров);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.СтатьяФинансирования,
	|	ДанныеВедомостей.СтатьяРасходов,
	|	ДанныеВедомостей.ВидДоходаИсполнительногоПроизводства,
	|	СУММА(ДанныеВедомостей.Сумма) КАК СуммаВыплаты
	|ИЗ
	|	ВТДанныеВедомостейКВыплате КАК ДанныеВедомостей
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.СтатьяФинансирования,
	|	ДанныеВедомостей.СтатьяРасходов,
	|	ДанныеВедомостей.ВидДоходаИсполнительногоПроизводства";
	
	СписокСотрудников = Запрос.Выполнить().Выгрузить();
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, Организация, ПериодРегистрации,
		ВедомостиПрочихДоходов, "ВТСписокСотрудников");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеВедомостей.ФизическоеЛицо,
	|	ДанныеВедомостей.СтавкаНалогообложенияРезидента,
	|	ДанныеВедомостей.МесяцНалоговогоПериода,
	|	ДанныеВедомостей.Подразделение,
	|	ДанныеВедомостей.КодДохода,
	|	ДанныеВедомостей.РегистрацияВНалоговомОргане,
	|	ДанныеВедомостей.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	ДанныеВедомостей.ДокументОснование,
	|	ДанныеВедомостей.КатегорияДохода,
	|	ДанныеВедомостей.Сумма,
	|	ДанныеВедомостей.СуммаСПревышения,
	|	ДанныеВедомостей.СуммаСПревышенияПоСтавке18,
	|	ДанныеВедомостей.СуммаСПревышенияПоСтавке20,
	|	ДанныеВедомостей.СуммаСПревышенияПоСтавке22
	|ИЗ
	|	ВТДанныеВедомостейНалоги КАК ДанныеВедомостей";
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Запрос, ДатаПлатежа);
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(ПлатежныйДокумент.Ссылка, ПлатежныйДокумент.Движения, МенеджерВременныхТаблиц, ДатаПлатежа, ДатаПлатежа, Отказ, Истина);
	УчетНДФЛ.ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, ПлатежныйДокумент.Ссылка, ДатаПлатежа);
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(ПлатежныйДокумент.Движения, Отказ, Организация, ДатаПлатежа, МенеджерВременныхТаблиц, , Истина);
	УчетНДФЛ.СформироватьНДФЛКПеречислению(ПлатежныйДокумент.Движения, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОрганеВКоллекцииСтрок(Организация, КоллекцияНачисленныйНДФЛ)
	
	СведенияОбОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ЮридическоеФизическоеЛицо");
	ОрганизацияЮрлицо     = СведенияОбОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", СведенияОбОрганизации.ГоловнаяОрганизация);
	
	Если ТипЗнч(КоллекцияНачисленныйНДФЛ) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаНДФЛ = КоллекцияНачисленныйНДФЛ.Выгрузить();
	Иначе
		// передана таблица значений
		
		ТаблицаНДФЛ = КоллекцияНачисленныйНДФЛ.Скопировать();
		
		Если КоллекцияНачисленныйНДФЛ.Колонки.Найти("РегистрацияВНалоговомОргане") = Неопределено Тогда
			КоллекцияНачисленныйНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяКолонкиОКТМО = "КодПоОКТМО";
	Если ТаблицаНДФЛ.Колонки.Найти("КодПоОКТМО") = Неопределено Тогда
		ТаблицаНДФЛ.Колонки.ОКАТО.Имя = "КодПоОКТМО";
	КонецЕсли;
	
	ПоляСвертки = "КодНалоговогоОргана";
	Если ОрганизацияЮрлицо Тогда
		ПоляСвертки = ПоляСвертки + ",КПП";
	КонецЕсли;
	ПоляДополнительногоОтбора = ПоляСвертки;
	ПоляСвертки = ПоляСвертки + ",КодПоОКТМО";
	
	ТаблицаНДФЛ.Свернуть(ПоляСвертки);
	ТаблицаНДФЛ.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	РегистрацииВНалоговомОргане.КПП КАК КПП,
	|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Владелец = &Организация";
	
	ДействующиеРегистрации = Запрос.Выполнить().Выгрузить();
	
	Отбор = Новый Структура(ПоляСвертки);
	ОтборДополнительный = Новый Структура(ПоляДополнительногоОтбора);
	
	Для каждого СтрокаТЗ Из ТаблицаНДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		Регистрации = ДействующиеРегистрации.НайтиСтроки(Отбор);
		Если Регистрации.Количество() > 0 Тогда
			СтрокаТЗ.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
		Иначе
			ЗаполнитьЗначенияСвойств(ОтборДополнительный, СтрокаТЗ);
			Регистрации = ДействующиеРегистрации.НайтиСтроки(ОтборДополнительный);
			Если Регистрации.Количество() > 0 Тогда
				СтрокаТЗ.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКоллекции Из КоллекцияНачисленныйНДФЛ Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаКоллекции);
		Регистрации = ТаблицаНДФЛ.НайтиСтроки(Отбор);
		Если Регистрации.Количество() > 0 Тогда
			СтрокаКоллекции.РегистрацияВНалоговомОргане = Регистрации[0].РегистрацияВНалоговомОргане;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДвиженияПередОтражениемУплатыНДФЛ(Движения)
	
	ОчищаемыеРегистры = Новый Массив;
	ОчищаемыеРегистры.Добавить("НДФЛПеречисленный");
	ОчищаемыеРегистры.Добавить("РасчетыНалоговыхАгентовСБюджетомПоНДФЛ");
	ОчищаемыеРегистры.Добавить("УплатаНДФЛНалоговымиАгентамиКРаспределению");
	
	Для Каждого ИмяРегистра Из ОчищаемыеРегистры Цикл
		Если Движения.Найти(ИмяРегистра) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Движения[ИмяРегистра].Очистить();
		Движения[ИмяРегистра].Записать();
	КонецЦикла;
	
КонецПроцедуры

#Область УстаревшиеМетодыПеречисленияНДФЛ

// Предназначена для расчета и регистрации НДФЛ удержанного 
// по записанным в учете данным и по переданным данным о выплатах.
//
// Параметры:
//      Объект - ДокументОбъект - Документ-регистратор.
//      Отказ - Булево - Признак отказа от заполнения движений.
//
Процедура РассчитатьИЗарегистрироватьПеречисленныйНДФЛ(Объект, Отказ) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыОтбора = Новый Структура("Организация, МассивВедомостей",
		Объект.Организация, Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Ведомость"));
	ПодготовитьДанныеВедомостей(МенеджерВременныхТаблиц, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Оплата.Ведомость КАК Ведомость,
	|	Оплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Оплата.Регистратор КАК ПлатежныйДокумент
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
	|
	|ГДЕ
	|	Оплата.Ведомость В
	|		(ВЫБРАТЬ Ведомость ИЗ ВТВедомости)";
	Запрос.Выполнить();
	
	ПолучитьНалогУдержанныйПоОплаченнымВедомостям(Объект, МенеджерВременныхТаблиц);
	ПолучитьНалогУдержанныйПоВедомостямБезОплаты(Объект, МенеджерВременныхТаблиц);
	
	СформироватьТаблицуНалогПеречисленный(Объект, МенеджерВременныхТаблиц);
	
	УчетНДФЛ.СформироватьПеречисленныйНалогПоВременнойТаблице(Объект.Движения, Отказ, Объект.Организация, Объект.ДатаПроведенияБанком, МенеджерВременныхТаблиц, Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Сумма) КАК СуммаПеречислено
	|ИЗ ВТНалогПеречисленный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДАТАВРЕМЯ(1, 1, 1) КАК МесяцНалоговогоПериода,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ПлатежноеПоручениеДата,
	|	""ХХХХХХХХХХХ"" КАК ПлатежноеПоручениеНомер,
	|	0 КАК Сумма";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаКРаспределению = Макс(Объект.СуммаДокумента - Выборка.СуммаПеречислено, 0);
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	Если СуммаКРаспределению <> 0 Тогда
		
		ПеречисленныйНалог = Результат[1].Выгрузить();
		СтрокаПеречисления = ПеречисленныйНалог.Добавить();
		МесяцНалоговогоПериода = Неопределено;
		ЗаполнитьМесяцНалоговогоПериода(МесяцНалоговогоПериода, Объект.ПоказательОснования, Объект.ПоказательПериода);
		СтрокаПеречисления.ПлатежноеПоручениеДата = ?(ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента), Объект.ДатаВходящегоДокумента, Объект.ДатаПроведенияБанком);
		СтрокаПеречисления.ПлатежноеПоручениеНомер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			?(ЗначениеЗаполнено(Объект.НомерВходящегоДокумента), Объект.НомерВходящегоДокумента, Объект.Номер), Истина, Истина);
		СтрокаПеречисления.Сумма = СуммаКРаспределению;
		
		НоваяСтрока = УчетНДФЛ.СтрокаУплатыНалоговогоАгента(Объект.Движения, Объект.Организация, Объект.ДатаПроведенияБанком, ВидДвиженияНакопления.Приход, СтрокаПеречисления);
		НоваяСтрока.РеквизитыПлатежногоПоручения = УчетНДФЛ.РеквизитыПлатежногоПорученияПоДатеНомеру(СтрокаПеречисления.ПлатежноеПоручениеДата, СтрокаПеречисления.ПлатежноеПоручениеНомер);
		
		ЗначениеСубконто = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НастройкаСчетовУчета, "Субконто2");
		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			НоваяСтрока.РегистрацияВНалоговомОргане = ЗначениеСубконто;
		ИначеЕсли ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
			НоваяСтрока.РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
		Иначе
			НоваяСтрока.РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Объект.Организация, Объект.ДатаПроведенияБанком);
		КонецЕсли;
		
		НоваяСтрока.ДатаПлатежа = Объект.ДатаПроведенияБанком;
		
		Объект.Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записать();
		Объект.Движения.УплатаНДФЛНалоговымиАгентамиКРаспределению.Записывать = Ложь;
		
		УчетНДФЛ.СформироватьПеречисленныйНалогПоФизическимЛицам(Объект.Ссылка, Объект.Движения, Отказ, Объект.Организация, Объект.ДатаПроведенияБанком, , НоваяСтрока.РегистрацияВНалоговомОргане, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьНалогУдержанныйПоОплаченнымВедомостям(Объект, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выплата.ФизическоеЛицо,
	|	Выплата.ПлатежныйДокумент,
	|	ЛОЖЬ КАК Возврат
	|ПОМЕСТИТЬ ВТДокументыУчетаНДФЛ
	|ИЗ
	|	ВТОплатаВедомостей КАК Выплата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Выплата.ФизическоеЛицо,
	|	Возврат.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	ВТОплатаВедомостей КАК Выплата
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК Возврат
	|		ПО Выплата.ПлатежныйДокумент = Возврат.ДокументВыдачи
	|		И Возврат.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка КАК Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты КАК КрайнийСрокУплаты,
	|	СУММА(ВЫБОР
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|		КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			И &РегистрацияОрганизацииВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаВНалоговыйОрган,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	ДокументыУчетаНДФЛ.Возврат
	|ПОМЕСТИТЬ ВТНалогУдержанный
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыУчетаНДФЛ КАК ДокументыУчетаНДФЛ
	|	ПО РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор = ДокументыУчетаНДФЛ.ПлатежныйДокумент
	|		И РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо = ДокументыУчетаНДФЛ.ФизическоеЛицо
	|		И &УсловиеСтавкиНДФЛ
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.МесяцНалоговогоПериода,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.РегистрацияВНалоговомОргане,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ИсчисленоПоДивидендам,
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.КрайнийСрокУплаты,
	|	ДокументыУчетаНДФЛ.Возврат
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) > 0";
	
	Если Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСтавкиНДФЛ",
			"РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСтавкиНДФЛ",
			"РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Ставка <> ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)");
	КонецЕсли;
	
	НалоговыйОрганОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(
		Объект.Организация, Объект.ДатаПроведенияБанком);
	
	Запрос.УстановитьПараметр("РегистрацияОрганизацииВНалоговомОргане", НалоговыйОрганОрганизации);
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", Объект.РегистрацияВНалоговомОргане);
	Иначе
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", НалоговыйОрганОрганизации);
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПолучитьНалогУдержанныйПоВедомостямБезОплаты(Объект, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ Ведомость
	|ИЗ ВТВедомости
	|ГДЕ Ведомость НЕ В
	|	(ВЫБРАТЬ Ведомость ИЗ ВТОплатаВедомостей)";
	
	ВедомостиБезОплаты = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВедомостиБезОплаты.Добавить(Выборка.Ведомость);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ведомости", ВедомостиБезОплаты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомости.Организация КАК Организация,
	|	Ведомости.ПериодРегистрации КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА Ведомости.ОбъектВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.Дивиденды)
	|			ТОГДА ИСТИНА
	|		КОГДА Ведомости.ОбъектВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыПрочихДоходов.ДивидендыСотрудникам)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсчисленоПоДивидендам,
	|	ВЫБОР
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА Налоги.Сумма
	|		КОГДА Налоги.РегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|			И &РегистрацияОрганизацииВНалоговомОргане = &НалоговыйОрганПлатежа
	|			ТОГДА Налоги.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВНалоговыйОрган,
	|	Налоги.Сумма КАК Сумма,
	|	Налоги.*
	|ИЗ ВТДанныеВедомостейНалоги КАК Налоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВедомости КАК Ведомости
	|	ПО Налоги.Ведомость = Ведомости.Ведомость
	|
	|ГДЕ Налоги.Ведомость В (&Ведомости)";
	
	НалоговыйОрганОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(
		Объект.Организация, Объект.ДатаПроведенияБанком);
	
	Запрос.УстановитьПараметр("РегистрацияОрганизацииВНалоговомОргане", НалоговыйОрганОрганизации);
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", Объект.РегистрацияВНалоговомОргане);
	Иначе
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", НалоговыйОрганОрганизации);
	КонецЕсли;
	
	Если Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Налоги.Сумма", "Налоги.СуммаСПревышения");
	КонецЕсли;
	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Запрос, '00010101', "ВТНалогУдержанныйБезОплаты");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалогУдержанный.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК Ставка,
	|	НалогУдержанный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогУдержанный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогУдержанный.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	НалогУдержанный.ПериодРегистрации КАК ПериодРегистрации,
	|	СУММА(НалогУдержанный.СуммаВНалоговыйОрган) КАК СуммаВНалоговыйОрган,
	|	СУММА(НалогУдержанный.Сумма) КАК Сумма
	|ИЗ
	|	ВТНалогУдержанныйБезОплаты КАК НалогУдержанный
	|
	|СГРУППИРОВАТЬ ПО
	|	НалогУдержанный.Организация,
	|	НалогУдержанный.ПериодРегистрации,
	|	НалогУдержанный.РегистрацияВНалоговомОргане,
	|	НалогУдержанный.МесяцНалоговогоПериода,
	|	НалогУдержанный.ФизическоеЛицо,
	|	НалогУдержанный.ИсчисленоПоДивидендам,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента";
	
	Если Объект.ТипНалога = Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Перечисление.НДФЛСтавки.Ставка13", "Перечисление.НДФЛСтавки.Ставка15");
	КонецЕсли;
	НалогУдержанный = Запрос.Выполнить().Выгрузить();
	
	Если Объект.ТипНалога <> Перечисления.ТипыНалогов.НДФЛСПревышения Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Налоги.ПериодРегистрации КАК Период,
		|	Налоги.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Налоги.КодДохода КАК КодДохода,
		|	Налоги.КатегорияДохода КАК КатегорияДохода,
		|	Налоги.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента
		|ПОМЕСТИТЬ ВТСтавкаРезидента
		|ИЗ
		|	ВТНалогУдержанныйБезОплаты КАК Налоги";
		Запрос.Выполнить();
		
		УчетНДФЛ.СоздатьВТСтавкаНДФЛПоСтавкеРезидента(МенеджерВременныхТаблиц, "ВТСтавкаРезидента");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтавкаНДФЛПоСтавкеРезидента.Период,
		|	СтавкаНДФЛПоСтавкеРезидента.ФизическоеЛицо,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНалогообложенияРезидента,
		|	СтавкаНДФЛПоСтавкеРезидента.СтавкаНДФЛ
		|ИЗ
		|	ВТСтавкаНДФЛПоСтавкеРезидента КАК СтавкаНДФЛПоСтавкеРезидента";
		ВыборкаСтавок = Запрос.Выполнить().Выбрать();
		
		ОтборСтавок = Новый Структура("ФизическоеЛицо, СтавкаНалогообложенияРезидента, Период");
		Для Каждого СтрокаНалога Из НалогУдержанный Цикл
			ЗаполнитьЗначенияСвойств(ОтборСтавок, СтрокаНалога);
			ВыборкаСтавок.Сбросить();
			Если ВыборкаСтавок.НайтиСледующий(ОтборСтавок) Тогда
				СтрокаНалога.Ставка = ВыборкаСтавок.СтавкаНДФЛ;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНалогУдержанныйБезОплаты";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалогУдержанный.Организация КАК Организация,
	|	НалогУдержанный.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НалогУдержанный.Ставка КАК Ставка,
	|	НалогУдержанный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НалогУдержанный.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	НалогУдержанный.ВключатьВДекларациюПоНалогуНаПрибыль КАК ВключатьВДекларациюПоНалогуНаПрибыль,
	|	НалогУдержанный.ИсчисленоПоДивидендам КАК ИсчисленоПоДивидендам,
	|	НалогУдержанный.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	НалогУдержанный.ПериодРегистрации КАК Период,
	|	НалогУдержанный.СуммаВНалоговыйОрган КАК СуммаВНалоговыйОрган,
	|	НалогУдержанный.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТНалогУдержанныйБезОплаты
	|ИЗ
	|	&НалогУдержанный КАК НалогУдержанный";
	
	Запрос.УстановитьПараметр("НалогУдержанный", НалогУдержанный);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьТаблицуНалогПеречисленный(Объект, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(НалогУдержанный.Сумма) КАК Сумма,
	|	СУММА(НалогУдержанный.СуммаВНалоговыйОрган) КАК СуммаВНалоговыйОрган,
	|	СУММА(ВЫБОР КОГДА НалогУдержанный.Возврат ТОГДА 0 ИНАЧЕ НалогУдержанный.Сумма КОНЕЦ) КАК СуммаПолная,
	|	СУММА(ВЫБОР КОГДА НалогУдержанный.Возврат ТОГДА 0 ИНАЧЕ НалогУдержанный.СуммаВНалоговыйОрган КОНЕЦ) КАК СуммаВНалоговыйОрганПолная
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.СуммаВНалоговыйОрган,
	|		Таблица.Сумма,
	|		Таблица.Возврат
	|	ИЗ ВТНалогУдержанный КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.СуммаВНалоговыйОрган,
	|		Таблица.Сумма,
	|		ЛОЖЬ
	|	ИЗ ВТНалогУдержанныйБезОплаты КАК Таблица
	|	) КАК НалогУдержанный";
	
	НалогУдержанный = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&РеквизитыПлатежногоПоручения КАК РеквизитыПлатежногоПоручения,
	|	НалогУдержанный.*
	|ПОМЕСТИТЬ ВТНалогПеречисленный
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Возврат,
	|		Таблица.ФизическоеЛицо,
	|		Таблица.Ставка,
	|		Таблица.МесяцНалоговогоПериода,
	|		Таблица.РегистрацияВНалоговомОргане,
	|		Таблица.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Таблица.ИсчисленоПоДивидендам,
	|		Таблица.Сумма
	|	ИЗ ВТНалогУдержанный КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		Таблица.ФизическоеЛицо,
	|		Таблица.Ставка,
	|		Таблица.МесяцНалоговогоПериода,
	|		Таблица.РегистрацияВНалоговомОргане,
	|		Таблица.ВключатьВДекларациюПоНалогуНаПрибыль,
	|		Таблица.ИсчисленоПоДивидендам,
	|		Таблица.Сумма
	|	ИЗ ВТНалогУдержанныйБезОплаты КАК Таблица
	|	) КАК НалогУдержанный
	|
	|ГДЕ
	|	&УсловиеНаРегистрацию
	|	И &УсловиеНаВозврат";
	
	Если НЕ НалогУдержанный.Следующий() ИЛИ Объект.СуммаДокумента = НалогУдержанный.Сумма Тогда
		
		Запрос.УстановитьПараметр("УсловиеНаРегистрацию", Истина);
		Запрос.УстановитьПараметр("УсловиеНаВозврат", Истина);
		
	Иначе
		
		Если Объект.СуммаДокумента = НалогУдержанный.СуммаВНалоговыйОрган
			ИЛИ Объект.СуммаДокумента = НалогУдержанный.СуммаВНалоговыйОрганПолная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаРегистрацию",
				"НалогУдержанный.РегистрацияВНалоговомОргане = &НалоговыйОрганПлатежа");
		Иначе
			Запрос.УстановитьПараметр("УсловиеНаРегистрацию", Истина);
		КонецЕсли;
		
		Если Объект.СуммаДокумента = НалогУдержанный.СуммаПолная
			ИЛИ Объект.СуммаДокумента = НалогУдержанный.СуммаВНалоговыйОрганПолная Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаВозврат", "НЕ НалогУдержанный.Возврат");
		Иначе
			Запрос.УстановитьПараметр("УсловиеНаВозврат", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	НалоговыйОрганОрганизации = ЗарплатаКадры.РегистрацияВНалоговомОргане(
		Объект.Организация, Объект.ДатаПроведенияБанком);
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", Объект.РегистрацияВНалоговомОргане);
	Иначе
		Запрос.УстановитьПараметр("НалоговыйОрганПлатежа", НалоговыйОрганОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.НомерВходящегоДокумента);
	Иначе
		НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РеквизитыПлатежногоПоручения",
		СписаниеБезналичныхДенежныхСредствЛокализация.РеквизитыПлатежногоПорученияПоДатеНомеру(
			Объект.ДатаПроведенияБанком, НомерНаПечать));
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

Функция НеиспользуемыеРолиПоставляемыхПрофилей()
	
	НеиспользуемыеРоли = Новый Массив;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		НеиспользуемыеРоли.Добавить("ДобавлениеИзменениеКалендарныхГрафиков");
	КонецЕсли;
	
	НеиспользуемыеРоли.Добавить("ПросмотрОписанияИзмененийПрограммы");
	НеиспользуемыеРоли.Добавить("ДобавлениеИзменениеКурсовВалют");
	
	// Роли обмена с банками вынесены в дополнительный профиль обмена ЭД
	НеиспользуемыеРоли.Добавить("ВыполнениеОбменаОбменСБанками");
	НеиспользуемыеРоли.Добавить("ДобавлениеИзменениеМаршрутовПодписания");
	НеиспользуемыеРоли.Добавить("ДобавлениеИзменениеОбменСБанками");
	НеиспользуемыеРоли.Добавить("ЧтениеНастроекЭлектронногоВзаимодействия");
	НеиспользуемыеРоли.Добавить("ЧтениеМаршрутовПодписания");
	НеиспользуемыеРоли.Добавить("ЧтениеНастроекОбменСБанками");
	НеиспользуемыеРоли.Добавить("ЧтениеОбменСБанками");
	
	Возврат НеиспользуемыеРоли;
	
КонецФункции

//-- Локализация

#Область ОбновлениеИнформационнойБазы

//++ Локализация

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти
